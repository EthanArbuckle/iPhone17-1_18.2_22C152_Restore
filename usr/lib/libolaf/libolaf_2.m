void sub_22B96932C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x230F4E5C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

BOOL GNS_WlInitialize(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "GNS_WlInitialize");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  int v12 = -1;
  __int16 v10 = 1027;
  uint64_t v11 = a1;
  int v4 = SuplPospPostMessage((unsigned __int8 *)&v10);
  if (v4 && LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Message posting failed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 69, "GNS_WlInitialize", 1548, v10);
    LbsOsaTrace_WriteLog(0x13u, __str, v6, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 68, "GNS_WlInitialize");
    LbsOsaTrace_WriteLog(0x13u, __str, v8, 5, 1);
  }
  return v4 == 0;
}

uint64_t GNS_WlCapabilities(uint64_t a1, char a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 68, "GNS_WlCapabilities");
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 5, 1);
  }
  int v21 = -1;
  __int16 v19 = 1283;
  unsigned __int16 v6 = operator new(0xCuLL, MEMORY[0x263F8C180]);
  if (!v6)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN Cap Msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 69, "GNS_WlCapabilities", 1537);
      LbsOsaTrace_WriteLog(0x13u, __str, v13, 0, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
      return 14;
    }
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v14, "PSP", 68, "GNS_WlCapabilities");
    goto LABEL_13;
  }
  uint64_t v7 = v6;
  v20 = v6;
  *(void *)unsigned __int16 v6 = a1;
  v6[8] = a2 & 1;
  if (SuplPospPostMessage((unsigned __int8 *)&v19))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Message posting failed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 69, "GNS_WlCapabilities", 1548, v19);
      LbsOsaTrace_WriteLog(0x13u, __str, v9, 0, 1);
    }
    MEMORY[0x230F4E5D0](v7, 0x1000C4005A209FELL);
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
      return 14;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v10, "PSP", 68, "GNS_WlCapabilities");
LABEL_13:
    LbsOsaTrace_WriteLog(0x13u, __str, v11, 5, 1);
    return 14;
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v17 = mach_continuous_time();
  unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 68, "GNS_WlCapabilities");
  uint64_t v15 = 1;
  LbsOsaTrace_WriteLog(0x13u, __str, v18, 5, 1);
  return v15;
}

void NK_Comp_ith_PR_Res(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, double *a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  v50[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v21 = a1;
  int v22 = *(unsigned __int8 *)(a5 + 4 * a1 + 76);
  uint64_t v23 = a7 + 92;
  if (v22 == 2) {
    uint64_t v23 = a7 + 93;
  }
  if (v22 == 4) {
    v24 = a7 + 94;
  }
  else {
    v24 = v23;
  }
  double v25 = *v24 - *(double *)(a3 + 56);
  v26 = &a7[a1];
  v27 = v26 + 2448;
  v26[2448] = a8 + v25 * 299792458.0;
  v28 = v26 + 556;
  v26[556] = *(double *)(a3 + 72);
  double v29 = 0.0;
  if (*((unsigned char *)a7 + 2809))
  {
    double v30 = 0.01;
  }
  else if (a6[187] <= 0.0)
  {
    double v30 = Trop_Elev_MapF(a4) * 2.3;
  }
  else
  {
    double v33 = a6[188];
    Trop_Niell_MappingFunc::Get_Dry_MappingFunc_OF((Trop_Niell_MappingFunc *)(a6 + 203), *(double *)(a4 + 32), a9, a10, a2);
    double v35 = v33 * v34;
    double v36 = a6[189];
    Trop_Niell_MappingFunc::Get_Wet_MappingFunc_OF((Trop_Niell_MappingFunc *)(a6 + 203), *(double *)(a4 + 32), a10, a2);
    double v29 = v35 + v36 * v37;
    v50[0] = 0.0;
    if (R8_EQ((const double *)(a4 + 16), v50)) {
      double v30 = 0.12;
    }
    else {
      double v30 = 1.001 / sqrt(*(double *)(a4 + 8) * *(double *)(a4 + 8) + 0.002001) * 0.12;
    }
    double *v27 = v29 + *v27;
  }
  double v38 = *v28 + v30 * v30;
  double *v28 = v38;
  *((unsigned char *)a7 + v21 + 2912) = 1;
  ++*((unsigned char *)a7 + 2810);
  if (*((unsigned char *)a7 + v21 + 2864))
  {
    double v39 = *v27 - *(double *)(a5 + 8 * v21 + 1232);
    uint64_t v40 = (uint64_t)&a7[v21 + 351];
    *(double *)(v40 + 2024) = v39;
    double v41 = a7[3 * v21 + 412] + a7[3 * v21 + 413];
    if (*((unsigned char *)a7 + v21 + 1176))
    {
      v42 = &a7[v21];
      double v43 = v39 - v42[159];
      double v44 = v41 + v42[207];
    }
    else
    {
      double v45 = v38 + a12;
      double *v28 = v45;
      double v44 = v45 + v41;
      double v43 = v39 + a11;
    }
    *(double *)(v40 + 4040) = v44;
    *(double *)(v40 + 2024) = v43;
    if (*(_DWORD *)(a3 + 120) == 1)
    {
      *((unsigned char *)a7 + v21 + 26208) = 1;
      double v46 = -(a11 - *(double *)(a3 + 56) * 299792458.0);
      v47 = &a7[v21];
      v47[3768] = v46;
      double v48 = 0.0;
      if (a6[187] > 0.0) {
        double v48 = v29;
      }
      v47[3768] = v46 - v48 + a13;
    }
    if (fabs(v43) < 600000000.0 && v44 < 600000000.0)
    {
      *((unsigned char *)a7 + v21 + 2960) = 1;
      ++*((unsigned char *)a7 + 2811);
    }
    v49 = &a7[v21];
    v49[700] = v43;
    v49[652] = v43;
  }
}

uint64_t Decode_GPS_AS_SV_Config_Subframe(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = 0;
  *a2 = (unsigned __int16)*(_DWORD *)(result + 8) >> 12;
  a2[1] = *(unsigned char *)(result + 9) & 0xF;
  a2[2] = *(unsigned char *)(result + 8) >> 4;
  a2[3] = *(unsigned char *)(result + 8) & 0xF;
  uint64_t v3 = result + 12;
  uint64_t v4 = a2 + 9;
  do
  {
    *(v4 - 5) = (*(_DWORD *)(v3 + v2) >> 20) & 0xF;
    *(v4 - 4) = *(unsigned char *)(v3 + v2 + 2) & 0xF;
    *(v4 - 3) = (unsigned __int16)*(_DWORD *)(v3 + v2) >> 12;
    *(v4 - 2) = *(unsigned char *)(v3 + v2 + 1) & 0xF;
    *(v4 - 1) = *(unsigned char *)(v3 + v2) >> 4;
    *uint64_t v4 = *(unsigned char *)(v3 + v2) & 0xF;
    v4 += 6;
    v2 += 4;
  }
  while (v2 != 16);
  a2[28] = (*(_DWORD *)(result + 28) >> 20) & 0xF;
  a2[29] = *(unsigned char *)(result + 30) & 0xF;
  a2[30] = (unsigned __int16)*(_DWORD *)(result + 28) >> 12;
  a2[31] = *(unsigned char *)(result + 29) & 0xF;
  return result;
}

uint64_t LcsUtils::GetInstance(LcsUtils *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (LcsUtils::GetInstance(void)::pred_lcsUtils != -1) {
    dispatch_once(&LcsUtils::GetInstance(void)::pred_lcsUtils, &__block_literal_global_2);
  }
  uint64_t result = LcsUtils::m_lcs_utils;
  if (!LcsUtils::m_lcs_utils)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GetInstance", "GetInstance");
      LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GetInstance", "LcsUtils.cpp", 63, "false && \"Memory allocation failure\"");
  }
  return result;
}

void *___ZN8LcsUtils11GetInstanceEv_block_invoke()
{
  uint64_t result = operator new(1uLL, MEMORY[0x263F8C180]);
  LcsUtils::m_lcs_utils = (uint64_t)result;
  return result;
}

void LcsUtils::TraceBuffer(LcsUtils *this, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2 && a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a3;
    do
    {
      unint64_t v6 = v5 - v4;
      if (v5 - v4 > 0x13)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v11 = mach_continuous_time();
          unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 77, "TraceBuffer", a2[v4], a2[v4 + 1], a2[v4 + 2], a2[v4 + 3], a2[v4 + 4], a2[v4 + 5], a2[v4 + 6], a2[v4 + 7], a2[v4 + 8], a2[v4 + 9], a2[v4 + 10],
                  a2[v4 + 11],
                  a2[v4 + 12],
                  a2[v4 + 13],
                  a2[v4 + 14],
                  a2[v4 + 15],
                  a2[v4 + 16],
                  a2[v4 + 17],
                  a2[v4 + 18],
                  a2[v4 + 19]);
          LbsOsaTrace_WriteLog(0x12u, __str, v12, 3, 1);
        }
        unint64_t v7 = v4;
      }
      else
      {
        unint64_t v7 = v5;
        if (v5 > v4)
        {
          uint64_t v8 = (unsigned __int8 *)&a2[v4];
          do
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x12u, 3, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v9 = mach_continuous_time();
              unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ,0x%02X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 77, "TraceBuffer", *v8);
              LbsOsaTrace_WriteLog(0x12u, __str, v10, 3, 1);
            }
            ++v8;
            --v6;
          }
          while (v6);
          unint64_t v7 = v5;
        }
      }
      unint64_t v4 = v7 + 20;
    }
    while (v7 + 20 < v5);
  }
}

uint64_t LcsUtils::IsItDuplicateSession(LcsUtils *this, char *a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned __int16 v3 = (SuplUtils *)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, a2, &a2[a3], a3);
  uint64_t Instance = SuplUtils::GetInstance(v3);
  uint64_t IsItDuplicateSUPLINIT = SuplUtils::IsItDuplicateSUPLINIT(Instance, (uint64_t)&__p);
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (IsItDuplicateSUPLINIT) {
      uint64_t v7 = 84;
    }
    else {
      uint64_t v7 = 70;
    }
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Is the SUPL INIT duplicate result,%c\n", (unint64_t)v6, "SPL", 73, "IsItDuplicateSession", v7);
    LbsOsaTrace_WriteLog(0x12u, __str, v8, 4, 1);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  return IsItDuplicateSUPLINIT;
}

void sub_22B96A248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GN_AGLON_Set_Eph(uint64_t a1, uint64_t a2)
{
  if (!Is_GN_API_Set_Allowed("GN_AGLON_Set_Eph")) {
    return 0;
  }
  if ((a1 - 25) <= 0xFFFFFFE7)
  {
    EvCrt_v("GN_AGLON_Set_Eph: FAILED: SV = %d <%d or >%d, Out of range!", a1, 1, 24);
    return 0;
  }
  uint64_t v6 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v6 + 5) && *(int *)v6 >= 3) {
    int v7 = (int)*(double *)(v6 + 24) + 604800 * *(__int16 *)(v6 + 16);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = p_NA;
  uint64_t v9 = (a1 - 1);
  uint64_t v10 = p_NA + (v9 << 6);
  *(_DWORD *)(v10 + 15212) = v7;
  if (*(unsigned char *)(a2 + 56)) {
    int v11 = 5;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(v10 + 15216) = v11;
  int v12 = *(char *)(a2 + 4);
  if ((*(unsigned char *)(a2 + 4) - 7) < 0xF2u) {
    int v12 = 2139062143;
  }
  *(_DWORD *)(v10 + 15220) = v12;
  long long v13 = *(_OWORD *)(a2 + 8);
  long long v14 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v10 + 15256) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v10 + 15240) = v14;
  *(_OWORD *)(v10 + 15224) = v13;
  *(_WORD *)(v10 + 15272) = 4095;
  if (*(unsigned char *)(a2 + 56)) {
    int v15 = 5;
  }
  else {
    int v15 = 3;
  }
  *(_DWORD *)(v10 + 15216) = v15;
  uint64_t v4 = 1;
  *(unsigned char *)(v8 + v9 + 99) = 1;
  Debug_Log_GLO_Eph(1, a1, v10 + 15212);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
    EvLog_nd("GN_AGLON_Set_Eph: ", 2, v16, a1, *(unsigned int *)(p_NA + (v9 << 6) + 15212));
  }
  return v4;
}

uint64_t GN_AGLON_Set_Alm(uint64_t a1, uint64_t a2)
{
  if (!Is_GN_API_Set_Allowed("GN_AGLON_Set_Alm")) {
    return 0;
  }
  if ((a1 - 25) <= 0xFFFFFFE7)
  {
    EvCrt_v("GN_AGLON_Set_Alm: FAILED: SV = %d <%d or >%d, Out of range!", a1, 1, 24);
    return 0;
  }
  uint64_t v6 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v6 + 5) && *(int *)v6 >= 3) {
    int v7 = (int)*(double *)(v6 + 24) + 604800 * *(__int16 *)(v6 + 16);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = p_NA;
  uint64_t v9 = (a1 - 1);
  uint64_t v10 = p_NA + 36 * v9;
  int v11 = (int *)(v10 + 16748);
  *(_WORD *)(v10 + 16756) = *(_WORD *)(a2 + 4);
  if (*(unsigned char *)(a2 + 32)) {
    int v12 = 5;
  }
  else {
    int v12 = 3;
  }
  *int v11 = v7;
  *(_DWORD *)(v10 + 16752) = v12;
  long long v13 = *(_OWORD *)(a2 + 8);
  *(void *)(v10 + 16776) = *(void *)(a2 + 24);
  *(_OWORD *)(v10 + 16760) = v13;
  uint64_t v4 = 1;
  *(unsigned char *)(v8 + v9 + 123) = 1;
  Debug_Log_GLO_Alm(1, a1, (uint64_t)v11);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
    EvLog_nd("GN_AGLON_Set_Alm: ", 2, v14, a1, *(unsigned int *)(p_NA + 36 * v9 + 16748));
  }
  return v4;
}

uint64_t GN_AGLON_Set_Chan_Num(uint64_t a1, uint64_t a2)
{
  if (!Is_GN_API_Set_Allowed("GN_AGLON_Set_Chan_Num")) {
    return 0;
  }
  if ((a1 - 25) <= 0xE7u)
  {
    EvCrt_v("GN_AGLON_Set_Chan_Num: FAILED: SV = %d <%d or >%d, Out of range!");
    return 0;
  }
  if ((a2 - 7) <= 0xF1u)
  {
    EvCrt_v("GN_AGLON_Set_Chan_Num: FAILED: gloChanNum = %d <-7 or >+6, Out of range!");
    return 0;
  }
  *(_DWORD *)(*(void *)(p_api + 56) + 4 * (a1 - 1) + 16336) = a2;
  uint64_t v6 = p_NA;
  uint64_t v7 = (a1 - 1);
  *(_DWORD *)(p_NA + (v7 << 6) + 15220) = a2;
  if (!*(unsigned char *)(v6 + 148))
  {
    *(void *)(v6 + 17656) = 0x7F7F7F7F7F7F7F7FLL;
    *(void *)(v6 + 17648) = 0x7F7F7F7F7F7F7F7FLL;
    *(void *)(v6 + 17640) = 0x7F7F7F7F7F7F7F7FLL;
  }
  uint64_t v4 = 1;
  *(unsigned char *)(v6 + 148) = 1;
  *(unsigned char *)(v6 + v7 + 17640) = a2;
  Debug_Log_AGLON_ChanNum(a1, a2);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
    EvLog_nd("GN_AGLON_Set_Chan_Num: ", 2, v8, a1, a2);
  }
  return v4;
}

uint64_t GN_AGLON_Set_Clk1(unsigned __int16 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGLON_Set_Clk1")) {
    return 0;
  }
  uint64_t v3 = *a1;
  if ((v3 - 1462) <= 0xFFFFFA4A)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloNA = %d <1 or >%d, Out of range!");
    return 0;
  }
  uint64_t v4 = *((unsigned int *)a1 + 1);
  if ((v4 - 4296) <= 0xFFFFDE70)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloTauC = %d <-4295 or >4295, Unrealistic value!");
    return 0;
  }
  uint64_t v5 = *((unsigned __int8 *)a1 + 8);
  if (v5 >= 0x20)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloN4 = %d >31, Out of range!");
    return 0;
  }
  uint64_t v6 = *((unsigned int *)a1 + 3);
  if ((v6 - 0x200000) >> 22 != 1023)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloTauGPS = %d <-2^21 or >2^21, Out of range!");
    return 0;
  }
  if ((v6 - 1075) <= 0xFFFFF79A)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloTauGPS = %d <-1074 or >1074, Unrealistic value!");
    return 0;
  }
  uint64_t v9 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v9 + 5) && *(int *)v9 >= 3) {
    int v10 = (int)*(double *)(v9 + 24) + 604800 * *(__int16 *)(v9 + 16);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = p_NA;
  uint64_t v12 = *((unsigned __int8 *)a1 + 17);
  if (*((unsigned char *)a1 + 17)) {
    int v13 = 5;
  }
  else {
    int v13 = 3;
  }
  *(_WORD *)(p_NA + 17620) = v3;
  *(_DWORD *)(v11 + 17624) = v4;
  *(unsigned char *)(v11 + 17628) = v5;
  *(_DWORD *)(v11 + 17632) = v6;
  uint64_t v14 = *((unsigned __int8 *)a1 + 16);
  *(unsigned char *)(v11 + 17636) = v14;
  *(_DWORD *)(v11 + 17612) = v10;
  *(_DWORD *)(v11 + 17616) = v13;
  uint64_t v7 = 1;
  *(unsigned char *)(v11 + 147) = 1;
  EvLog_nd("GN_AGLON_Set_Clk1: ", 6, v2, v3, v4, v5, v6, v14, v12);
  return v7;
}

void *NK_SV_Meas_IVar(void *result, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double a6)
{
  uint64_t v11 = result;
  uint64_t v12 = 0;
  v25[12] = *(double *)MEMORY[0x263EF8340];
  int v13 = a4 - 1;
  do
  {
    if (*(unsigned char *)(a5 + v12 + 152))
    {
      uint64_t result = NK_Obs_Equ_SV(v11, *(unsigned __int8 *)(a5 + v12 + 200), *(unsigned __int8 *)(a2 + 4 * v12), a3 + 56 * v12, (uint64_t)v25, a6);
      double v14 = *(double *)(a5 + 8 * v12 + 4040) + *a4 * v25[0] * v25[0];
      uint64_t v15 = 1;
      int v16 = 2;
      uint64_t v17 = 2;
      unsigned int v18 = 1;
      do
      {
        double v19 = v25[v17 - 1];
        v20 = v25;
        unsigned int v21 = v16;
        uint64_t v22 = v15;
        do
        {
          double v23 = *v20++;
          double v19 = v19 + v23 * v13[v21++];
          --v22;
        }
        while (v22);
        v18 += v17;
        double v14 = v14 + v19 * v19 * v13[v18];
        v16 += v17;
        ++v15;
        ++v17;
      }
      while (v17 != 12);
      if (v14 < 0.0) {
        double v14 = -v14;
      }
      *(double *)(a5 + 8 * v12 + 4424) = v14;
    }
    ++v12;
  }
  while (v12 != 48);
  return result;
}

void *sprintf_1u(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf1da(a1, a2, v3, 0, 0);
  }

  return sprintf_10u(a1, a2);
}

char **sprintf_1X(char **a1, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unint64_t v4 = HIDWORD(a2);
  if (v4)
  {
    sprintf_1x(a1, v4);
    v6[0] = hexTABLE[a2 >> 28];
    v6[1] = hexTABLE[(a2 >> 24) & 0xF];
    return (char **)hex6((uint64_t)a1, a2, v6, 2);
  }
  else
  {
    return sprintf_1x(a1, a2);
  }
}

void *sprintf_sp1d(void *a1, int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)(*a1)++;
  *uint64_t v2 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (a2 >= 0) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = -a2;
  }
  return sprintf1da(a1, v3, v5, 0, a2 >> 31);
}

void *sprintf_sp1u(void *a1, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)(*a1)++;
  *uint64_t v2 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if ((a2 & 0x80000000) == 0) {
    return sprintf1da(a1, a2, v4, 0, 0);
  }

  return sprintf_10u(a1, a2);
}

void *sprintf_cm1d(void *a1, int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)(*a1)++;
  *uint64_t v2 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (a2 >= 0) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = -a2;
  }
  return sprintf1da(a1, v3, v5, 0, a2 >> 31);
}

uint64_t sprintf_11f9(void *a1, double a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (fabs(a2) >= 1.0)
  {
    double v7 = dbl_22BB3FB70[a2 < 0.0] + a2;
    int v8 = (int)v7;
    double v9 = v7 - (double)(int)v7;
    if (v9 >= 0.0) {
      double v10 = v9;
    }
    else {
      double v10 = -v9;
    }
    if (v8 >= 0) {
      unsigned int v11 = v8;
    }
    else {
      unsigned int v11 = -v8;
    }
    sprintf1da(a1, v11, v16, 0, v8 >> 31);
    uint64_t v12 = (unsigned char *)(*a1)++;
    *uint64_t v12 = 46;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    double v13 = v10 * 1000000000.0;
    if (v10 * 1000000000.0 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0) {
        unsigned int v14 = (int)v13;
      }
      else {
        unsigned int v14 = 0x80000000;
      }
    }
    else
    {
      unsigned int v14 = 0x7FFFFFFF;
    }
    return sprintf_09d((uint64_t)a1, v14);
  }
  else
  {
    double v3 = a2 * 1000000000.0;
    double v4 = -0.5;
    if (v3 > 0.0) {
      double v4 = 0.5;
    }
    double v5 = v3 + v4;
    if (v5 <= 2147483650.0)
    {
      if (v5 >= -2147483650.0) {
        unsigned int v6 = (int)v5;
      }
      else {
        unsigned int v6 = 0x80000000;
      }
    }
    else
    {
      unsigned int v6 = 0x7FFFFFFF;
    }
    return sprintf_10f9((uint64_t)a1, v6);
  }
}

uint64_t sprintf_12f3(char **a1, double a2)
{
  if (fabs(a2) >= 100000.0)
  {
    double v10 = dbl_22BB3FB80[a2 < 0.0] + a2;
    unsigned int v11 = (int)v10;
    double v12 = v10 - (double)(int)v10;
    if (v12 >= 0.0) {
      double v13 = v12;
    }
    else {
      double v13 = -v12;
    }
    sprintf_8d(a1, v11);
    unsigned int v14 = (*a1)++;
    *unsigned int v14 = 46;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    double v15 = v13 * 1000.0;
    if (v13 * 1000.0 <= 2147483650.0)
    {
      if (v15 >= -2147483650.0) {
        unsigned int v16 = (int)v15;
      }
      else {
        unsigned int v16 = 0x80000000;
      }
    }
    else
    {
      unsigned int v16 = 0x7FFFFFFF;
    }
    return sprintf_03d((uint64_t)a1, v16);
  }
  else
  {
    uint64_t v3 = 0;
    double v4 = *a1;
    char v5 = 32;
    do
    {
      *a1 = v4 + 1;
      *double v4 = v5;
      double v4 = *a1;
      if (*a1 >= a1[3])
      {
        double v4 = a1[2];
        *a1 = v4;
      }
      char v5 = str_54[++v3];
    }
    while (v3 != 2);
    double v6 = a2 * 1000.0;
    double v7 = -0.5;
    if (v6 > 0.0) {
      double v7 = 0.5;
    }
    double v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0) {
        unsigned int v9 = (int)v8;
      }
      else {
        unsigned int v9 = 0x80000000;
      }
    }
    else
    {
      unsigned int v9 = 0x7FFFFFFF;
    }
    return sprintf_9f((uint64_t)a1, v9, 4);
  }
}

uint64_t sprintf_13f3(char **a1, double a2)
{
  if (fabs(a2) >= 100000.0)
  {
    double v10 = dbl_22BB3FB80[a2 < 0.0] + a2;
    unsigned int v11 = (int)v10;
    double v12 = v10 - (double)(int)v10;
    if (v12 >= 0.0) {
      double v13 = v12;
    }
    else {
      double v13 = -v12;
    }
    sprintf_9d(a1, v11);
    unsigned int v14 = (*a1)++;
    *unsigned int v14 = 46;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    double v15 = v13 * 1000.0;
    if (v13 * 1000.0 <= 2147483650.0)
    {
      if (v15 >= -2147483650.0) {
        unsigned int v16 = (int)v15;
      }
      else {
        unsigned int v16 = 0x80000000;
      }
    }
    else
    {
      unsigned int v16 = 0x7FFFFFFF;
    }
    return sprintf_03d((uint64_t)a1, v16);
  }
  else
  {
    uint64_t v3 = *a1;
    char v4 = 32;
    uint64_t v5 = 1u;
    do
    {
      *a1 = v3 + 1;
      *uint64_t v3 = v4;
      uint64_t v3 = *a1;
      if (*a1 >= a1[3])
      {
        uint64_t v3 = a1[2];
        *a1 = v3;
      }
      char v4 = str_1_46[v5++];
    }
    while (v5 != 4);
    double v6 = a2 * 1000.0;
    double v7 = -0.5;
    if (v6 > 0.0) {
      double v7 = 0.5;
    }
    double v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0) {
        unsigned int v9 = (int)v8;
      }
      else {
        unsigned int v9 = 0x80000000;
      }
    }
    else
    {
      unsigned int v9 = 0x7FFFFFFF;
    }
    return sprintf_9f((uint64_t)a1, v9, 4);
  }
}

uint64_t sprintf_14f3(char **a1, double a2)
{
  if (fabs(a2) >= 100000.0)
  {
    double v10 = dbl_22BB3FB80[a2 < 0.0] + a2;
    unsigned int v11 = (int)v10;
    double v12 = v10 - (double)(int)v10;
    if (v12 >= 0.0) {
      double v13 = v12;
    }
    else {
      double v13 = -v12;
    }
    sprintf_10d(a1, v11);
    unsigned int v14 = (*a1)++;
    *unsigned int v14 = 46;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    double v15 = v13 * 1000.0;
    if (v13 * 1000.0 <= 2147483650.0)
    {
      if (v15 >= -2147483650.0) {
        unsigned int v16 = (int)v15;
      }
      else {
        unsigned int v16 = 0x80000000;
      }
    }
    else
    {
      unsigned int v16 = 0x7FFFFFFF;
    }
    return sprintf_03d((uint64_t)a1, v16);
  }
  else
  {
    uint64_t v3 = 0;
    char v4 = *a1;
    char v5 = 32;
    do
    {
      *a1 = v4 + 1;
      *char v4 = v5;
      char v4 = *a1;
      if (*a1 >= a1[3])
      {
        char v4 = a1[2];
        *a1 = v4;
      }
      char v5 = str_2_30[++v3];
    }
    while (v3 != 4);
    double v6 = a2 * 1000.0;
    double v7 = -0.5;
    if (v6 > 0.0) {
      double v7 = 0.5;
    }
    double v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0) {
        unsigned int v9 = (int)v8;
      }
      else {
        unsigned int v9 = 0x80000000;
      }
    }
    else
    {
      unsigned int v9 = 0x7FFFFFFF;
    }
    return sprintf_9f((uint64_t)a1, v9, 4);
  }
}

uint64_t sprintf_p(uint64_t result, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(char **)result;
  char v4 = 48;
  do
  {
    *(void *)uint64_t result = v3 + 1;
    *uint64_t v3 = v4;
    uint64_t v3 = *(char **)result;
    if (*(void *)result >= *(void *)(result + 24))
    {
      uint64_t v3 = *(char **)(result + 16);
      *(void *)uint64_t result = v3;
    }
    char v4 = str_6_21[++v2];
  }
  while (v2 != 2);
  for (uint64_t i = 15; i != -1; --i)
  {
    v10[i - 1] = __const__Z9sprintf_pP10Cyc_bufferPKv_dec2HexChar[a2 & 0xF];
    a2 >>= 4;
  }
  v10[15] = 0;
  char v6 = v9;
  if (v9)
  {
    double v7 = v10;
    do
    {
      *(void *)uint64_t result = v3 + 1;
      *uint64_t v3 = v6;
      uint64_t v3 = *(char **)result;
      if (*(void *)result >= *(void *)(result + 24))
      {
        uint64_t v3 = *(char **)(result + 16);
        *(void *)uint64_t result = v3;
      }
      int v8 = *v7++;
      char v6 = v8;
    }
    while (v8);
  }
  return result;
}

double Horiz_Diff_Sqd(double *a1, const double *a2)
{
  double v4 = *a1;
  __double2 v5 = __sincos_stret(*a1);
  double v6 = 1.0 / sqrt(v5.__sinval * v5.__sinval * -0.00669437999 + 1.0);
  double v7 = a1[2];
  double v8 = v5.__cosval * (v7 + v6 * 6378137.0);
  if (v8 < 1.0) {
    double v8 = 1.0;
  }
  double v9 = (v4 - *a2) * (v7 + v6 * (v6 * v6) * 6335439.33);
  return (a1[1] - a2[1]) * v8 * ((a1[1] - a2[1]) * v8) + v9 * v9;
}

void SuplEndRecd::SuplEndRecd(SuplEndRecd *this)
{
  SuplState::SuplState(this);
  *(void *)uint64_t v2 = &unk_26DF18C88;
  *(void *)(v2 + 376) = 0;
  *(void *)(v2 + 384) = 0;
  *(void *)(v2 + 392) = 0;
  *(_DWORD *)(v2 + 360) = -1;
  *(void *)(v2 + 364) = 0;
  *(void *)(v2 + 370) = 0;
  *(_DWORD *)(v2 + 378) = -1;
  *(_DWORD *)(v2 + 387) = 0;
  *(_DWORD *)(v2 + 384) = 0;
  *(unsigned char *)(v2 + 16) = 7;
  *(_WORD *)(v2 + 32) = 6;
  uint64_t v3 = (char *)operator new(0x1D0uLL, MEMORY[0x263F8C180]);
  if (v3)
  {
    *(_WORD *)uint64_t v3 = 0;
    v3[2] = 0;
    *((void *)v3 + 3) = 0;
    *((void *)v3 + 4) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)(v3 + 44) = 0;
    *((_DWORD *)v3 + 13) = 0;
    v3[56] = -1;
    *((_WORD *)v3 + 29) = 0;
    v3[60] = 0;
    *((_DWORD *)v3 + 10) = -16777216;
    *((void *)v3 + 8) = 255;
    v3[8] = 0;
    *((void *)v3 + 56) = 0;
    *((void *)v3 + 57) = 0;
    *((void *)v3 + 55) = 0;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_OWORD *)(v3 + 248) = 0u;
    *(_OWORD *)(v3 + 264) = 0u;
    *(_OWORD *)(v3 + 280) = 0u;
    *(_OWORD *)(v3 + 296) = 0u;
    *(_OWORD *)(v3 + 312) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 328) = 0u;
    *(_OWORD *)(v3 + 344) = 0u;
    *(_OWORD *)(v3 + 360) = 0u;
    *(_OWORD *)(v3 + 376) = 0u;
    *(_OWORD *)(v3 + 392) = 0u;
    *(_OWORD *)(v3 + 408) = 0u;
    *(_OWORD *)(v3 + 417) = 0u;
  }
  *((void *)this + 5) = v3;
}

void SuplEndRecd::~SuplEndRecd(SuplEndRecd *this)
{
  *(void *)this = &unk_26DF18C88;
  if (*((_WORD *)this + 16) == 6)
  {
    uint64_t v2 = (void *)*((void *)this + 5);
    if (v2)
    {
      uint64_t v3 = (void *)v2[55];
      if (v3)
      {
        v2[56] = v3;
        operator delete(v3);
      }
      ASN1T_Velocity::U::~U((ASN1T_Velocity::U *)(v2 + 9));
      double v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      MEMORY[0x230F4E5D0](v2, 0x1010C402AA3C6D1);
    }
    *((void *)this + 5) = 0;
  }

  SuplState::~SuplState(this);
}

{
  uint64_t vars8;

  SuplEndRecd::~SuplEndRecd(this);
}

{
  uint64_t vars8;

  SuplEndRecd::~SuplEndRecd(this);

  JUMPOUT(0x230F4E5D0);
}

uint64_t SuplEndRecd::Init(SuplEndRecd *this)
{
  return *((unsigned __int8 *)this + 17);
}

SuplSession *SuplEndRecd::SetHash(SuplEndRecd *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t result = (SuplSession *)*((void *)this + 1);
  if (result
    && (uint64_t result = (SuplSession *)SuplSession::GetSuplInitRecd(result)) != 0
    && (uint64_t result = SuplInitRecd::FillHash(result, *((void *)this + 5) + 440, *(unsigned int *)(*((void *)this + 1) + 376), *(_DWORD *)(*((void *)this + 1) + 532)), result))
  {
    uint64_t result = (SuplSession *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "SetHash", 515);
      return (SuplSession *)LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
    }
  }
  else
  {
    *(unsigned char *)(*((void *)this + 5) + 2) = 1;
  }
  return result;
}

uint64_t SuplEndRecd::ProcessSuplMessage(size_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 8))
  {
    uint64_t v3 = (SuplUtils *)SuplState::ProcessSuplMessage(a1, a2);
    int v24 = 0;
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v4 + 1))
    {
      uint64_t Instance = SuplUtils::GetInstance(v3);
      uint64_t v4 = *(void *)(a1 + 40);
      SuplUtils::ConvertSuplEndStatusToGNSupl(Instance, *(unsigned __int8 *)(v4 + 432), &v24);
    }
    if (!*(unsigned char *)v4)
    {
      uint64_t v17 = LcsSuplGlueLayer::GetInstance(v3);
      LcsSuplGlueLayer::SendSuplMsgStatus(v17, *(_DWORD *)(*(void *)(a1 + 8) + 376), 6, 0, v24, 0);
      *(unsigned char *)(a1 + 361) = -1;
LABEL_31:
      SuplEndRecd::TerminateSession(a1, 0, 4);
      return 0;
    }
    if (*(unsigned char *)(v4 + 41))
    {
      if (*(unsigned char *)(v4 + 42))
      {
        *(_WORD *)(a1 + 360) = 1;
        int v6 = *(_DWORD *)(v4 + 44);
        *(_DWORD *)(a1 + 368) = v6;
        BOOL v7 = *(unsigned __int8 *)(v4 + 43) == 1;
        *(unsigned char *)(a1 + 362) = v7;
        int v8 = *(_DWORD *)(v4 + 48);
        *(_DWORD *)(a1 + 372) = v8;
        __int16 v9 = *(_WORD *)(v4 + 58);
        *(_WORD *)(a1 + 376) = v9;
        BOOL v10 = *(unsigned __int8 *)(v4 + 56) == 1;
        *(unsigned char *)(a1 + 363) = v10;
        char v11 = *(unsigned char *)(v4 + 60);
        *(unsigned char *)(a1 + 381) = v11;
        *(unsigned char *)(a1 + 382) = *(unsigned char *)(v4 + 55);
        if (!*(unsigned char *)(v4 + 40))
        {
          char v12 = *(unsigned char *)(a1 + 378);
          char v13 = *(unsigned char *)(a1 + 379);
LABEL_23:
          uint64_t v26 = 0;
          char v33 = 0;
          uint64_t v35 = -1;
          int v36 = 0;
          *(void *)__str = *(void *)"";
          if (v7) {
            int v19 = 2;
          }
          else {
            int v19 = 1;
          }
          int v27 = v19;
          int v28 = v6;
          int v29 = v8;
          __int16 v30 = v9;
          if (v10) {
            int v20 = 2;
          }
          else {
            int v20 = 1;
          }
          int v34 = v20;
          char v31 = v12;
          char v32 = v13;
          LOBYTE(v35) = v11;
          uint64_t v21 = LcsSuplGlueLayer::GetInstance(v3);
          LcsSuplGlueLayer::SendSuplMsgStatus(v21, *(_DWORD *)(*(void *)(a1 + 8) + 376), 6, 0, v24, (uint64_t)__str);
          uint64_t v22 = *(unsigned __int8 **)(*(void *)(a1 + 40) + 16);
          if (*(void *)(*(void *)(a1 + 40) + 24) - (void)v22 == 13)
          {
            *(_WORD *)(a1 + 384) = v22[1] + 10 * *v22 + 1472;
            *(unsigned char *)(a1 + 386) = v22[3] + 10 * v22[2] - 16;
            *(unsigned char *)(a1 + 387) = v22[5] + 10 * v22[4] - 16;
            *(unsigned char *)(a1 + 388) = v22[7] + 10 * v22[6] - 16;
            *(unsigned char *)(a1 + 389) = v22[9] + 10 * v22[8] - 16;
            *(unsigned char *)(a1 + 390) = v22[11] + 10 * v22[10] - 16;
          }
          goto LABEL_31;
        }
LABEL_21:
        char v12 = *(unsigned char *)(v4 + 52);
        *(unsigned char *)(a1 + 378) = v12;
        char v13 = *(unsigned char *)(v4 + 53);
        *(unsigned char *)(a1 + 379) = v13;
        *(unsigned char *)(a1 + 380) = *(unsigned char *)(v4 + 54);
        goto LABEL_23;
      }
      if (*(unsigned char *)(v4 + 40))
      {
        char v11 = 0;
        BOOL v10 = 0;
        __int16 v9 = 0;
        *(_WORD *)(a1 + 360) = 1;
        int v6 = *(_DWORD *)(v4 + 44);
        *(_DWORD *)(a1 + 368) = v6;
        BOOL v7 = *(unsigned __int8 *)(v4 + 43) == 1;
        *(unsigned char *)(a1 + 362) = v7;
        int v8 = *(_DWORD *)(v4 + 48);
        *(_DWORD *)(a1 + 372) = v8;
        *(_WORD *)(a1 + 376) = 0;
        *(unsigned char *)(a1 + 363) = 0;
        *(unsigned char *)(a1 + 381) = 0;
        *(unsigned char *)(a1 + 382) = *(unsigned char *)(v4 + 55);
        goto LABEL_21;
      }
    }
    else if (*(unsigned char *)(v4 + 42) && !*(unsigned char *)(v4 + 40))
    {
      char v13 = 0;
      char v12 = 0;
      char v11 = 0;
      *(_WORD *)(a1 + 360) = 1;
      int v6 = *(_DWORD *)(v4 + 44);
      *(_DWORD *)(a1 + 368) = v6;
      BOOL v7 = *(unsigned __int8 *)(v4 + 43) == 1;
      *(unsigned char *)(a1 + 362) = v7;
      int v8 = *(_DWORD *)(v4 + 48);
      *(_DWORD *)(a1 + 372) = v8;
      __int16 v9 = *(_WORD *)(v4 + 58);
      *(_WORD *)(a1 + 376) = v9;
      BOOL v18 = *(unsigned char *)(v4 + 56) == 1;
      *(_DWORD *)(a1 + 378) = 0;
      BOOL v10 = v18;
      *(unsigned char *)(a1 + 363) = v10;
      *(unsigned char *)(a1 + 382) = 0;
      goto LABEL_23;
    }
    char v13 = 0;
    char v12 = 0;
    char v11 = 0;
    BOOL v10 = 0;
    __int16 v9 = 0;
    *(_WORD *)(a1 + 360) = 1;
    int v6 = *(_DWORD *)(v4 + 44);
    *(_DWORD *)(a1 + 368) = v6;
    BOOL v7 = *(unsigned __int8 *)(v4 + 43) == 1;
    *(unsigned char *)(a1 + 362) = v7;
    int v8 = *(_DWORD *)(v4 + 48);
    *(_DWORD *)(a1 + 376) = 0;
    *(_DWORD *)(a1 + 379) = 0;
    *(_DWORD *)(a1 + 372) = v8;
    *(unsigned char *)(a1 + 363) = 0;
    goto LABEL_23;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "ProcessSuplMessage", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
  }
  return -1;
}

size_t SuplEndRecd::TerminateSession(size_t result, __int16 a2, uint64_t a3)
{
  size_t v4 = result;
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(result + 8);
  if (v5) {
    int v6 = *(unsigned __int8 *)(v5 + 380);
  }
  else {
    int v6 = 1;
  }
  char v20 = -1;
  __int16 v19 = a2;
  BOOL v7 = *(unsigned char **)(result + 40);
  if (v7[1])
  {
    int v8 = v7[432];
    if (v8 != 24)
    {
      __int16 v19 = -16;
      if ((v8 - 20) <= 0xFFFFFFFD) {
        char v20 = v8;
      }
    }
  }
  if (*v7)
  {
    if (!v5) {
      return result;
    }
  }
  else
  {
    *(unsigned char *)(result + 361) = -1;
    if (!v5) {
      return result;
    }
  }
  uint64_t v9 = *(unsigned int *)(v5 + 376);
  if (v6 == 1)
  {
    __int16 v19 = -16;
    char v20 = 15;
  }
  uint64_t Instance = (LcsSuplGlueLayer *)SuplProvider::GetInstance((SuplProvider *)result);
  char v11 = (uint64_t (***)(void, __int16 *, uint64_t, uint64_t))LcsSuplGlueLayer::GetInstance(Instance);
  char v12 = (SuplPosPayloadHandler *)(**v11)(v11, &v19, v4 + 360, v9);
  *((void *)Instance + 6) = *((void *)Instance + 5);
  if (a3 == 4)
  {
    uint64_t v13 = *(void *)(v4 + 40);
    if (*(unsigned char *)(v13 + 1) && (*(unsigned char *)(v13 + 1) != 1 || *(unsigned char *)(v13 + 432))) {
      a3 = 4;
    }
    else {
      a3 = 2;
    }
  }
  uint64_t v14 = (LcsSuplGlueLayer *)SuplPosPayloadHandler::GetInstance(v12);
  uint64_t v15 = *(unsigned int *)(*(void *)(v4 + 8) + 376);
  uint64_t v16 = LcsSuplGlueLayer::GetInstance(v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, size_t))(*(void *)v16 + 8))(v16, v15, a3, v4 + 360);
  uint64_t v17 = SuplPosPayloadHandler::ResetLppParams((uint64_t *)v14);
  BOOL v18 = (SuplProvider *)SuplProvider::GetInstance((SuplProvider *)v17);
  return SuplProvider::Disconnect(v18, *(_DWORD *)(*(void *)(v4 + 8) + 376));
}

uint64_t SuplEndRecd::SendSuplMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    *(_WORD *)(a1 + 48) = *(_WORD *)(v4 + 64);
    uint64_t v5 = a1 + 48;
    *(_WORD *)(a1 + 56) = *(_WORD *)(v4 + 72);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(v4 + 80);
    ASN1T_SETId::U::operator=(a1 + 72, v4 + 88);
    if (v5 != v4 + 64)
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 248), *(char **)(v4 + 264), *(char **)(v4 + 272), *(void *)(v4 + 272) - *(void *)(v4 + 264));
      *(unsigned char *)(a1 + 272) = *(unsigned char *)(v4 + 288);
      *(unsigned char *)(a1 + 280) = *(unsigned char *)(v4 + 296);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 288), *(char **)(v4 + 304), *(char **)(v4 + 312), *(void *)(v4 + 312) - *(void *)(v4 + 304));
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 312), *(char **)(v4 + 328), *(char **)(v4 + 336), *(void *)(v4 + 336) - *(void *)(v4 + 328));
      std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(a1 + 336), *(char **)(v4 + 352), *(char **)(v4 + 360), *(void *)(v4 + 360) - *(void *)(v4 + 352));
    }
  }
  v14[0] = a2;
  v14[1] = a1 + 24;
  int v6 = (SuplUtils *)SuplMessage::Encode((SuplMessage *)v14);
  if (v6)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 69, "SendSuplMessage", 770);
      LbsOsaTrace_WriteLog(0x12u, __str, v10, 0, 1);
      return 0;
    }
  }
  else
  {
    *(_DWORD *)__str = 0;
    if (*(unsigned char *)(*(void *)(a1 + 40) + 1))
    {
      uint64_t Instance = SuplUtils::GetInstance(v6);
      SuplUtils::ConvertSuplEndStatusToGNSupl(Instance, *(unsigned __int8 *)(*(void *)(a1 + 40) + 432), __str);
      int v12 = *(_DWORD *)__str;
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = LcsSuplGlueLayer::GetInstance(v6);
    LcsSuplGlueLayer::SendSuplMsgStatus(v13, *(_DWORD *)(*(void *)(a1 + 8) + 376), 7, 0, v12, 0);
    SuplState::SendSuplMessage((SuplProvider *)a1);
    return 1;
  }
  return result;
}

void SuplEndRecd::SetSessionIdPresent(SuplEndRecd *this)
{
  if (*((unsigned char *)this + 48) != 1)
  {
    *((unsigned char *)this + 48) = 1;
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      *((_WORD *)this + 28) = *(_DWORD *)(v2 + 376);
      int v3 = *(_DWORD *)(v2 + 532);
      uint64_t Instance = (SimUtils *)SuplUtils::GetInstance(this);
      SuplUtils::FillSetId(Instance, (uint64_t)this + 64, v3);
    }
  }
}

void ASN1T_Velocity::U::~U(ASN1T_Velocity::U *this)
{
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 39);
  if (v3)
  {
    *((void *)this + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 36);
  if (v4)
  {
    *((void *)this + 37) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 33);
  if (v5)
  {
    *((void *)this + 34) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 30);
  if (v6)
  {
    *((void *)this + 31) = v6;
    operator delete(v6);
  }
  BOOL v7 = (void *)*((void *)this + 27);
  if (v7)
  {
    *((void *)this + 28) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 24);
  if (v8)
  {
    *((void *)this + 25) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 21);
  if (v9)
  {
    *((void *)this + 22) = v9;
    operator delete(v9);
  }
  unsigned __int16 v10 = (void *)*((void *)this + 18);
  if (v10)
  {
    *((void *)this + 19) = v10;
    operator delete(v10);
  }
  char v11 = (void *)*((void *)this + 15);
  if (v11)
  {
    *((void *)this + 16) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 12);
  if (v12)
  {
    *((void *)this + 13) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 9);
  if (v13)
  {
    *((void *)this + 10) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 6);
  if (v14)
  {
    *((void *)this + 7) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 3);
  if (v15)
  {
    *((void *)this + 4) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v16;
    operator delete(v16);
  }
}

uint64_t ASN1T_SETId::U::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)a1, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), *(void *)(a2 + 32) - *(void *)(a2 + 24));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), *(void *)(a2 + 56) - *(void *)(a2 + 48));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), *(void *)(a2 + 80) - *(void *)(a2 + 72));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), *(void *)(a2 + 104) - *(void *)(a2 + 96));
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 128), *(char **)(a2 + 128), *(char **)(a2 + 136), *(void *)(a2 + 136) - *(void *)(a2 + 128));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 152), *(char **)(a2 + 152), *(char **)(a2 + 160), *(void *)(a2 + 160) - *(void *)(a2 + 152));
  }
  return a1;
}

void SuplPosRecd::SuplPosRecd(SuplPosRecd *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  SuplState::SuplState(this);
  *(void *)uint64_t v2 = &unk_26DF18CE0;
  *(unsigned char *)(v2 + 360) = 1;
  *(unsigned char *)(v2 + 16) = 5;
  *(_WORD *)(v2 + 32) = 5;
  int v3 = (char *)operator new(0x200uLL, MEMORY[0x263F8C180]);
  if (v3)
  {
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    v3[144] = -1;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_OWORD *)(v3 + 248) = 0u;
    *((void *)v3 + 63) = 0;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 408) = 0u;
    *(_OWORD *)(v3 + 424) = 0u;
    *(_OWORD *)(v3 + 440) = 0u;
    *(_OWORD *)(v3 + 456) = 0u;
    *(_OWORD *)(v3 + 472) = 0u;
    *(_OWORD *)(v3 + 488) = 0u;
    *(_OWORD *)(v3 + 264) = 0u;
    *(_OWORD *)(v3 + 280) = 0u;
    *(_OWORD *)(v3 + 296) = 0u;
    *(_OWORD *)(v3 + 312) = 0u;
    *(_OWORD *)(v3 + 328) = 0u;
    *(_OWORD *)(v3 + 344) = 0u;
    *(_OWORD *)(v3 + 360) = 0u;
    *(_OWORD *)(v3 + 376) = 0u;
    *(_OWORD *)(v3 + 392) = 0u;
    *int v3 = 0;
    *((void *)this + 5) = v3;
    *((unsigned char *)this + 17) = 0;
    *((unsigned char *)this + 361) = 0;
  }
  else
  {
    *((void *)this + 5) = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 69, "SuplPosRecd", 1537);
      LbsOsaTrace_WriteLog(0x12u, __str, v5, 0, 1);
    }
  }
}

void sub_22B96C84C(_Unwind_Exception *a1)
{
  SuplState::~SuplState(v1);
  _Unwind_Resume(a1);
}

void SuplPosRecd::~SuplPosRecd(SuplPosRecd *this)
{
  v6[1] = *(void ***)MEMORY[0x263EF8340];
  *(void *)this = &unk_26DF18CE0;
  if (*((_WORD *)this + 16) == 5)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2)
    {
      ASN1T_Velocity::U::~U((ASN1T_Velocity::U *)(v2 + 152));
      v6[0] = (void **)(v2 + 120);
      std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v6);
      v6[0] = (void **)(v2 + 96);
      std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v6);
      int v3 = *(void **)(v2 + 64);
      if (v3)
      {
        *(void *)(v2 + 72) = v3;
        operator delete(v3);
      }
      uint64_t v4 = *(void **)(v2 + 40);
      if (v4)
      {
        *(void *)(v2 + 48) = v4;
        operator delete(v4);
      }
      unsigned __int16 v5 = *(void **)(v2 + 16);
      if (v5)
      {
        *(void *)(v2 + 24) = v5;
        operator delete(v5);
      }
      MEMORY[0x230F4E5D0](v2, 0x1030C40C2B5F699);
    }
    *((void *)this + 5) = 0;
  }
  SuplState::~SuplState(this);
}

{
  uint64_t vars8;

  SuplPosRecd::~SuplPosRecd(this);
}

{
  uint64_t vars8;

  SuplPosRecd::~SuplPosRecd(this);

  JUMPOUT(0x230F4E5D0);
}

void SuplPosRecd::SendSuplEnd(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 17) = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  SuplStateObject = (void *)SuplSession::GetSuplStateObject(*(SuplSession **)(a1 + 8));
  *(unsigned char *)(SuplStateObject[5] + 432) = a2;
  *(unsigned char *)(SuplStateObject[5] + 1) = 1;
  std::vector<unsigned char>::vector(__p, 0xBB8uLL);
  v7[0] = __p;
  v7[1] = 0;
  char v8 = 0;
  (*(void (**)(void *, void *))(*SuplStateObject + 32))(SuplStateObject, v7);
  if (a2) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = 2;
  }
  SuplEndRecd::TerminateSession((size_t)SuplStateObject, -1, v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22B96CB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SuplPosRecd::UpdateState(uint64_t this)
{
  if (*(unsigned char *)(this + 361))
  {
    int v1 = 6;
  }
  else
  {
    if (!*(unsigned char *)(this + 17)) {
      return this;
    }
    int v1 = 7;
  }
  uint64_t v2 = *(void *)(this + 8);

  return SuplState::UpdateState(this, v1, v2);
}

void SuplPosRecd::PrepareSuplMessage(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *((unsigned char *)a1 + 360) = 0;
  if (a2)
  {
    if (*(unsigned char *)(a1[1] + 408) == 1)
    {
      SuplPosRecd::SendSuplEnd((uint64_t)a1, 4);
    }
  }
  else
  {
    std::vector<unsigned char>::vector(__p, 0xBB8uLL);
    v12[0] = __p;
    v12[1] = 0;
    char v13 = 0;
    uint64_t v3 = a1[1];
    if (v3)
    {
      *((_WORD *)a1 + 24) = *(_WORD *)(v3 + 64);
      *((_WORD *)a1 + 28) = *(_WORD *)(v3 + 72);
      *((unsigned char *)a1 + 64) = *(unsigned char *)(v3 + 80);
      ASN1T_SETId::U::operator=((uint64_t)(a1 + 9), v3 + 88);
      if (a1 + 6 != (void *)(v3 + 64))
      {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1 + 31, *(char **)(v3 + 264), *(char **)(v3 + 272), *(void *)(v3 + 272) - *(void *)(v3 + 264));
        *((unsigned char *)a1 + 272) = *(unsigned char *)(v3 + 288);
        *((unsigned char *)a1 + 280) = *(unsigned char *)(v3 + 296);
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1 + 36, *(char **)(v3 + 304), *(char **)(v3 + 312), *(void *)(v3 + 312) - *(void *)(v3 + 304));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1 + 39, *(char **)(v3 + 328), *(char **)(v3 + 336), *(void *)(v3 + 336) - *(void *)(v3 + 328));
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>(a1 + 42, *(char **)(v3 + 352), *(char **)(v3 + 360), *(void *)(v3 + 360) - *(void *)(v3 + 352));
      }
      v10[0] = v12;
      v10[1] = a1 + 3;
      uint64_t v4 = (LcsSuplGlueLayer *)SuplMessage::Encode((SuplMessage *)v10);
      if (v4)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v5 = mach_continuous_time();
          unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "PrepareSuplMessage", 770);
          LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
        }
      }
      else
      {
        uint64_t Instance = LcsSuplGlueLayer::GetInstance(v4);
        LcsSuplGlueLayer::SendSuplMsgStatus(Instance, *(_DWORD *)(a1[1] + 376), 5, 0, 0, 0);
        if (SuplState::SendSuplMessage((SuplProvider *)a1) == 1 && *(unsigned char *)(a1[1] + 408) == 1)
        {
          *((unsigned char *)a1 + 361) = 1;
          (*(void (**)(void *))(*a1 + 16))(a1);
        }
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "PrepareSuplMessage", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_22B96CF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SuplPosRecd::Init(SuplPosRecd *this)
{
  return 1;
}

uint64_t SuplPosRecd::ProcessSuplMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (SuplUtils *)SuplState::ProcessSuplMessage(a1, a2);
  uint64_t Instance = (SuplUtils *)SuplUtils::GetInstance(v4);
  int IsLoggingAllowed = (SuplUtils *)SuplUtils::ValidateSetSessionId(Instance, *(unsigned __int16 *)(*(void *)(a1 + 8) + 72), *(unsigned __int16 *)(a1 + 56));
  int v7 = (int)IsLoggingAllowed;
  if (!IsLoggingAllowed)
  {
    int IsLoggingAllowed = (SuplUtils *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "ProcessSuplPos", 515);
      int IsLoggingAllowed = (SuplUtils *)LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
    }
  }
  uint64_t v10 = *(void *)(a1 + 8) + 264;
  uint64_t v11 = SuplUtils::GetInstance(IsLoggingAllowed);
  int v12 = (LcsSuplGlueLayer *)SuplUtils::ValidateSlpSessionId(v11, a1 + 248, v10);
  if (!v12)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "SPL", 69, "ProcessSuplPos", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v16, 0, 1);
    }
    goto LABEL_11;
  }
  if (!v7)
  {
LABEL_11:
    uint64_t v17 = *(void *)(a1 + 8);
    *(_WORD *)(v17 + 64) = *(_WORD *)(a1 + 48);
    *(_WORD *)(v17 + 72) = *(_WORD *)(a1 + 56);
    *(unsigned char *)(v17 + 80) = *(unsigned char *)(a1 + 64);
    ASN1T_SETId::U::operator=(v17 + 88, a1 + 72);
    if (v17 + 64 != a1 + 48)
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v17 + 264), *(char **)(a1 + 248), *(char **)(a1 + 256), *(void *)(a1 + 256) - *(void *)(a1 + 248));
      *(unsigned char *)(v17 + 288) = *(unsigned char *)(a1 + 272);
      *(unsigned char *)(v17 + 296) = *(unsigned char *)(a1 + 280);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v17 + 304), *(char **)(a1 + 288), *(char **)(a1 + 296), *(void *)(a1 + 296) - *(void *)(a1 + 288));
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v17 + 328), *(char **)(a1 + 312), *(char **)(a1 + 320), *(void *)(a1 + 320) - *(void *)(a1 + 312));
      std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(v17 + 352), *(char **)(a1 + 336), *(char **)(a1 + 344), *(void *)(a1 + 344) - *(void *)(a1 + 336));
    }
    uint64_t v18 = a1;
    int v19 = 12;
    goto LABEL_14;
  }
  int v13 = *(unsigned __int16 *)(a1 + 32);
  if (v13 == 5)
  {
    uint64_t v21 = LcsSuplGlueLayer::GetInstance(v12);
    uint64_t v22 = (SuplPosPayloadHandler *)LcsSuplGlueLayer::SendSuplMsgStatus(v21, *(_DWORD *)(*(void *)(a1 + 8) + 376), 4, 0, 0, 0);
    uint64_t v23 = SuplPosPayloadHandler::GetInstance(v22);
    int v24 = SuplPosPayloadHandler::ProcessPosPayload(v23, *(void *)(a1 + 40), *(void *)(a1 + 8));
    if (!v24) {
      return 0;
    }
    int v25 = (unsigned __int16)v24;
    uint64_t v18 = a1;
    if (v25 == 65529) {
      int v19 = 8;
    }
    else {
      int v19 = 0;
    }
    goto LABEL_14;
  }
  if (v13 != 6)
  {
    uint64_t v18 = a1;
    int v19 = 2;
LABEL_14:
    SuplPosRecd::SendSuplEnd(v18, v19);
    return 0;
  }
  *(unsigned char *)(a1 + 17) = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t SuplStateObject = SuplSession::GetSuplStateObject(*(SuplSession **)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(void *)SuplStateObject + 40))(SuplStateObject, a2);
  return 0;
}

void SuplPosRecd::SetPayLoadPosResponses(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      *(_WORD *)(v2 + 8) = 4;
      *(unsigned char *)(*(void *)(a1 + 40) + 88) = 1;
      uint64_t v3 = *(void *)(a1 + 40);
      if (v3 + 88 != a2)
      {
        uint64_t v4 = *(char ***)(a2 + 16);
        unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)(a2 + 8)) >> 3);
        unsigned __int16 v6 = *(char ***)(a2 + 8);
        std::vector<ASN1T_PosPayLoad_lpppayload>::__assign_with_size[abi:ne180100]<ASN1T_PosPayLoad_lpppayload*,ASN1T_PosPayLoad_lpppayload*>((uint64_t *)(v3 + 96), v6, v4, v5);
      }
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "SetPayLoadPosResponses", 515);
    LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
  }
}

void std::vector<ASN1T_PosPayLoad_lpppayload>::__assign_with_size[abi:ne180100]<ASN1T_PosPayLoad_lpppayload*,ASN1T_PosPayLoad_lpppayload*>(uint64_t *a1, char **a2, char **a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = (char **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_21;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    unint64_t v13 = v11 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
LABEL_21:
    }
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    uint64_t v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_PosPayLoad_lpppayload>>(v9, v13);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[3 * v15];
    unsigned __int16 v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_PosPayLoad_lpppayload>,ASN1T_PosPayLoad_lpppayload*,ASN1T_PosPayLoad_lpppayload*,ASN1T_PosPayLoad_lpppayload*>(v9, (uint64_t)a2, (uint64_t)a3, v14);
    goto LABEL_14;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v10) >> 3) < a4)
  {
    uint64_t v17 = &a2[(a1[1] - (uint64_t)v10) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_PosPayLoad_lpppayload *,ASN1T_PosPayLoad_lpppayload *,ASN1T_PosPayLoad_lpppayload *>(a2, v17, v10);
    unsigned __int16 v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_PosPayLoad_lpppayload>,ASN1T_PosPayLoad_lpppayload*,ASN1T_PosPayLoad_lpppayload*,ASN1T_PosPayLoad_lpppayload*>(v9, (uint64_t)v17, (uint64_t)a3, (void *)a1[1]);
LABEL_14:
    a1[1] = (uint64_t)v16;
    return;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_PosPayLoad_lpppayload *,ASN1T_PosPayLoad_lpppayload *,ASN1T_PosPayLoad_lpppayload *>(a2, a3, v10);
  int v19 = (char **)a1[1];
  if (v19 != v18)
  {
    char v20 = (char **)a1[1];
    do
    {
      uint64_t v22 = *(v20 - 3);
      v20 -= 3;
      uint64_t v21 = v22;
      if (v22)
      {
        *(v19 - 2) = v21;
        operator delete(v21);
      }
      int v19 = v20;
    }
    while (v20 != v18);
  }
  a1[1] = (uint64_t)v18;
}

void sub_22B96D5FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22B96D604(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_PosPayLoad_lpppayload>,ASN1T_PosPayLoad_lpppayload*,ASN1T_PosPayLoad_lpppayload*,ASN1T_PosPayLoad_lpppayload*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v10[0] = a1;
  v10[1] = &v8;
  void v10[2] = &v9;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v4, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
      uint64_t v4 = v9 + 3;
      v9 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_PosPayLoad_lpppayload>,ASN1T_PosPayLoad_lpppayload*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_22B96D6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_PosPayLoad_lpppayload>,ASN1T_PosPayLoad_lpppayload*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_PosPayLoad_lpppayload>,ASN1T_PosPayLoad_lpppayload*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 8);
    uint64_t v3 = **(void **)(a1 + 16);
    if (v3 != v2)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        unint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

char **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_PosPayLoad_lpppayload *,ASN1T_PosPayLoad_lpppayload *,ASN1T_PosPayLoad_lpppayload *>(char **a1, char **a2, char **a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    do
    {
      if (v5 != a3) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a3, *v5, v5[1], v5[1] - *v5);
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

void NK_Comp_Sol_Acc(uint64_t a1, uint64_t a2)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v4 = (double (*)[3])(a2 + 832);
  ECEF2FSD_RotM((const double (*)[3])(a2 + 832), *(double *)(a1 + 11192) * 0.0174532925, (double (*)[3])v75);
  unsigned int v69 = 0;
  unint64_t v5 = (double *)(a2 + 24136);
  memset_pattern16((void *)(a2 + 24136), &unk_22BB3FBE0, 0x58uLL);
  uint64_t v6 = (void *)(a2 + 24224);
  memset_pattern16((void *)(a2 + 24224), &unk_22BB3FBE0, 0x58uLL);
  memset_pattern16((void *)(a2 + 24312), &unk_22BB3FBD0, 0x58uLL);
  *(void *)(a2 + 24400) = 0;
  if (!*(unsigned char *)(a1 + 128))
  {
    if (*(double *)(a2 + 20016) <= 1.05)
    {
      double v7 = *(double *)(a2 + 20024);
      if (v7 <= 1.05)
      {
LABEL_8:
        ud2var(a1 + 872, 0xBu, 1, 1u, (double *)(a2 + 24136));
        *(void *)&long long v76 = 0;
        if (R8_EQ((const double *)(a2 + 736), (const double *)&v76) && *v5 > 1.0e18) {
          *unint64_t v5 = 1.0e18;
        }
        double v8 = *(double *)(a2 + 20016);
        if (v8 > 1.05)
        {
          *(void *)&long long v76 = 0;
          if (!R8_EQ((const double *)(a2 + 736), (const double *)&v76) && *(_DWORD *)(a2 + 968) != 1)
          {
            double v9 = (v8 + -1.0) * 0.25 * *(double *)(a2 + 24136);
            Apply_Q_Boost(v9, 0, 1u, (double *)(a1 + 872), &v69, (double *)&v76);
            *(double *)(a2 + 24136) = v9 + *(double *)(a2 + 24136);
            *(double *)(a1 + 208) = v9;
            EvLog_v("Q-Boost 3 ClkBias %g  post_QB[0] %g", sqrt(v9), *(double *)(a2 + 20016));
          }
        }
        *(double *)(a2 + 24224) = *(double *)(a2 + 24136) + *(double *)(a1 + 7248);
        uint64_t v10 = (double *)(a2 + 24144);
        ud2var(a1 + 872, 0xBu, 2, 1u, (double *)(a2 + 24144));
        *(void *)v73 = 0;
        if (R8_EQ((const double *)(a2 + 744), (const double *)v73) && *v10 > 1.0e18) {
          *uint64_t v10 = 1.0e18;
        }
        double v11 = *(double *)(a2 + 20016);
        if (v11 > 1.05)
        {
          *(void *)v73 = 0;
          if (!R8_EQ((const double *)(a2 + 744), (const double *)v73) && *(_DWORD *)(a2 + 968) != 1)
          {
            double v12 = (v11 + -1.0) * 0.25 * *v10;
            Apply_Q_Boost(v12, 1u, 1u, (double *)(a1 + 872), &v69, (double *)&v76);
            *uint64_t v10 = v12 + *v10;
            if (*(double *)(a1 + 208) < v12) {
              *(double *)(a1 + 208) = v12;
            }
            EvLog_v("Q-Boost 3 ClkGLON %g  post_QB[0] %g", sqrt(v12), *(double *)(a2 + 20016));
          }
        }
        *(double *)(a2 + 24232) = *(double *)(a2 + 24144) + *(double *)(a1 + 7248);
        unint64_t v13 = (double *)(a2 + 24152);
        ud2var(a1 + 872, 0xBu, 3, 1u, (double *)(a2 + 24152));
        *(void *)v73 = 0;
        if (R8_EQ((const double *)(a2 + 752), (const double *)v73) && *v13 > 1.0e18) {
          *unint64_t v13 = 1.0e18;
        }
        double v14 = *(double *)(a2 + 20016);
        if (v14 > 1.05)
        {
          *(void *)v73 = 0;
          if (!R8_EQ((const double *)(a2 + 752), (const double *)v73) && *(_DWORD *)(a2 + 968) != 1)
          {
            double v15 = (v14 + -1.0) * 0.25 * *v13;
            Apply_Q_Boost(v15, 2u, 1u, (double *)(a1 + 872), &v69, (double *)&v76);
            *unint64_t v13 = v15 + *v13;
            if (*(double *)(a1 + 208) < v15) {
              *(double *)(a1 + 208) = v15;
            }
            EvLog_v("Q-Boost 3 ClkBDS %g  post_QB[0] %g", sqrt(v15), *(double *)(a2 + 20016));
          }
        }
        *(double *)(a2 + 24240) = *(double *)(a2 + 24152) + *(double *)(a1 + 7248);
        ud2var(a1 + 872, 0xBu, 4, 1u, (double *)(a2 + 24160));
        double v16 = *(double *)(a2 + 20024);
        if (v16 > 1.05 && *(_DWORD *)(a2 + 968) != 1)
        {
          double v17 = (v16 + -1.0) * 0.25 * *(double *)(a2 + 24160);
          Apply_Q_Boost(v17, 3u, 1u, (double *)(a1 + 872), &v69, (double *)&v76);
          *(double *)(a2 + 24160) = v17 + *(double *)(a2 + 24160);
          *(double *)(a1 + 216) = v17;
          EvLog_v("Q-Boost 4 ClkD %g  post_QB[1] %g", sqrt(v17), *(double *)(a2 + 20024));
        }
        double v18 = 0.01;
        *(double *)(a2 + 24248) = *(double *)(a2 + 24160) + *(double *)(a2 + 656) * 0.01;
        ud2var(a1 + 872, 0xBu, 5, 1u, (double *)(a2 + 24168));
        double v19 = *(double *)(a2 + 24168);
        *(double *)(a2 + 24256) = v19;
        double v20 = *(double *)(a2 + 20016);
        if (v20 > 1.05 && *(int *)(a2 + 12) <= 10 && *(_DWORD *)(a2 + 968) != 1)
        {
          double v21 = v19 * (v20 + -1.0 + v20 + -1.0);
          Apply_Q_Boost(v21, 4u, 1u, (double *)(a1 + 872), &v69, (double *)&v76);
          *(double *)(a2 + 24168) = v21 + *(double *)(a2 + 24168);
          *(double *)(a1 + 208) = v21 + *(double *)(a1 + 208);
          EvLog_v("Q-Boost 3 dT_Sync %g  post_QB[0] %g", sqrt(v21), *(double *)(a2 + 20016));
          double v20 = *(double *)(a2 + 20016);
        }
        if (v20 > 1.05 && *(_DWORD *)(a2 + 968) != 1)
        {
          Comp_NEDvar_UDU(a1 + 872, 0xBu, 5, v4, (double *)(a2 + 24176));
          uint64_t v22 = 0;
          uint64_t v23 = 3022;
          unsigned int v24 = v69;
          do
          {
            double v25 = (*(double *)(a2 + 20016) + -1.0) * *(double *)(a2 + 8 * v23);
            if (v22 == 48) {
              double v25 = v25 * *(double *)(a1 + 120);
            }
            v78[0] = 0;
            long long v77 = 0u;
            long long v76 = 0u;
            *(_OWORD *)&v78[1] = *(_OWORD *)(a2 + v22 + 832);
            v78[3] = *(void *)(a2 + v22 + 848);
            v73[0] = 0;
            if (v25 > 0.0)
            {
              rnk1_core((double *)(a1 + 872), 8u, v25, (double *)&v76, v73);
              if (v73[0]) {
                ++v24;
              }
            }
            *(double *)(a1 + 208) = v25 + *(double *)(a1 + 208);
            EvLog_v("Q-Boost 3 Pos%d %g  post_QB[0] %g", v23 - 3022, sqrt(v25), *(double *)(a2 + 20016));
            v22 += 24;
            ++v23;
          }
          while (v22 != 72);
          unsigned int v69 = v24;
          unint64_t v13 = (double *)(a2 + 24152);
          uint64_t v10 = (double *)(a2 + 24144);
        }
        uint64_t v26 = (unsigned char *)(a2 + 22848);
        if (!*(unsigned char *)(a1 + 29))
        {
          if (*(unsigned char *)(a2 + 22992) && *(double *)(a2 + 23064) <= 400000000.0
            || *(unsigned __int8 *)(a2 + 24778) >= 3u)
          {
            *(unsigned char *)(a1 + 29) = 1;
          }
          else
          {
            double v27 = *v5;
            if (*v5 < 40000.0 && !*v26)
            {
              double v28 = 40000.0 - v27;
              Apply_Q_Boost(40000.0 - v27, 0, 1u, (double *)(a1 + 872), &v69, (double *)&v76);
              *unint64_t v5 = v28;
              *(double *)(a2 + 24224) = v28 + *(double *)(a1 + 7248);
              DbgLog_v(1, "NK_Comp_Sol_Acc: GPS Clock Bias var boosted %g", v28);
            }
            double v29 = *v10;
            if (*v10 < 40000.0 && !*v26)
            {
              double v30 = 40000.0 - v29;
              Apply_Q_Boost(40000.0 - v29, 1u, 1u, (double *)(a1 + 872), &v69, (double *)&v76);
              *(double *)(a2 + 24144) = v30;
              *(double *)(a2 + 24232) = v30 + *(double *)(a1 + 7248);
              DbgLog_v(1, "NK_Comp_Sol_Acc: Glonass Clock Bias var boosted %g", v30);
            }
            double v31 = *v13;
            if (*v13 < 40000.0 && !*v26)
            {
              double v32 = 40000.0 - v31;
              Apply_Q_Boost(40000.0 - v31, 2u, 1u, (double *)(a1 + 872), &v69, (double *)&v76);
              *(double *)(a2 + 24152) = v32;
              *(double *)(a2 + 24240) = v32 + *(double *)(a1 + 7248);
              DbgLog_v(1, "NK_Comp_Sol_Acc: Beidou Clock Bias var boosted %g", v32);
            }
            for (int i = 0; i != 3; ++i)
            {
              *(void *)v73 = 0;
              ud2var(a1 + 872, 0xBu, i + 6, 1u, (double *)v73);
              if (*(double *)v73 < 40000.0)
              {
                double v34 = 40000.0 - *(double *)v73;
                Apply_Q_Boost(40000.0 - *(double *)v73, i + 5, 1u, (double *)(a1 + 872), &v69, (double *)&v76);
                DbgLog_v(1, "NK_Comp_Sol_Acc: Pos var boosted %d %g", i, v34);
              }
            }
          }
        }
        Comp_NEDvar_UDU(a1 + 872, 0xBu, 5, v4, (double *)(a2 + 24176));
        *(void *)(a2 + 24400) = v35;
        Comp_NEDvar_UDU(a1 + 872, 0xBu, 5, (double (*)[3])v75, (double *)(a2 + 24448));
        *(float64x2_t *)(a2 + 24448) = vsqrtq_f64(*(float64x2_t *)(a2 + 24448));
        *(double *)(a2 + 24464) = sqrt(*(double *)(a2 + 24464));
        Comp_NEDvar_UDU(a1 + 872, 0xBu, 8, (double (*)[3])v75, (double *)(a2 + 24472));
        uint64_t v36 = 0;
        *(float64x2_t *)(a2 + 24472) = vsqrtq_f64(*(float64x2_t *)(a2 + 24472));
        *(double *)(a2 + 24488) = sqrt(*(double *)(a2 + 24488));
        *(double *)(a2 + 24400) = *(double *)(a2 + 24400) + *(double *)(a1 + 7280);
        do
        {
          *(double *)(a2 + v36 + 24264) = *(double *)(a2 + v36 + 24176) + *(double *)(a1 + 7256 + v36);
          v36 += 8;
        }
        while (v36 != 24);
        if (*(double *)(a2 + 20024) > 1.05 && *(_DWORD *)(a2 + 968) != 1)
        {
          Comp_NEDvar_UDU(a1 + 872, 0xBu, 8, v4, (double *)(a2 + 24200));
          uint64_t v37 = 0;
          uint64_t v38 = 3025;
          unsigned int v39 = v69;
          do
          {
            double v40 = (*(double *)(a2 + 20024) + -1.0) * *(double *)(a2 + 8 * v38);
            if (v37 == 48) {
              double v40 = v40 * *(double *)(a1 + 120);
            }
            long long v77 = 0u;
            memset(v78, 0, sizeof(v78));
            long long v76 = 0u;
            long long v79 = *(_OWORD *)(a2 + v37 + 832);
            uint64_t v80 = *(void *)(a2 + v37 + 848);
            v73[0] = 0;
            if (v40 > 0.0)
            {
              rnk1_core((double *)(a1 + 872), 0xBu, v40, (double *)&v76, v73);
              if (v73[0]) {
                ++v39;
              }
            }
            *(double *)(a1 + 216) = v40 + *(double *)(a1 + 216);
            EvLog_v("Q-Boost 4 Vel%d %g  post_QB[1] %g", v38 - 3025, sqrt(v40), *(double *)(a2 + 20024));
            v37 += 24;
            ++v38;
          }
          while (v37 != 72);
          unsigned int v69 = v39;
        }
        Comp_NEDvar_UDU(a1 + 872, 0xBu, 8, v4, (double *)(a2 + 24200));
        memset(v73, 0, sizeof(v73));
        double v74 = 0.0;
        if (*(_DWORD *)(a1 + 11028) < 4u || (double v41 = *(double *)(a2 + 656), v41 <= 0.0))
        {
          unsigned int v50 = *(_DWORD *)(a1 + 20);
          uint64_t v6 = (void *)(a2 + 24224);
          double v51 = 0.0;
          switch(v50)
          {
            case 0u:
            case 1u:
              goto LABEL_90;
            case 2u:
              __asm { FMOV            V0.2D, #0.5; jumptable 000000022B96E2E4 case 2 }
              *(_OWORD *)v73 = _Q0;
              double v57 = 0.25;
              double v18 = 0.0204081633;
              break;
            case 3u:
              __asm { FMOV            V0.2D, #2.0; jumptable 000000022B96E2E4 case 3 }
              *(_OWORD *)v73 = _Q0;
              double v57 = 4.0;
              break;
            case 4u:
              __asm { FMOV            V0.2D, #3.0; jumptable 000000022B96E2E4 case 4 }
              *(_OWORD *)v73 = _Q0;
              double v57 = 9.0;
              double v18 = 0.00694444444;
              break;
            case 5u:
              __asm { FMOV            V0.2D, #5.0; jumptable 000000022B96E2E4 case 5 }
              *(_OWORD *)v73 = _Q0;
              double v57 = 25.0;
              double v18 = 0.0625;
              break;
            case 6u:
              __asm { FMOV            V0.2D, #10.0; jumptable 000000022B96E2E4 case 6 }
              *(_OWORD *)v73 = _Q0;
              double v18 = 0.25;
              *(double *)&uint64_t v62 = 100.0;
              goto LABEL_98;
            case 7u:
              __asm { FMOV            V0.2D, #20.0; jumptable 000000022B96E2E4 case 7 }
              *(_OWORD *)v73 = _Q0;
              double v18 = 1.0;
              *(double *)&uint64_t v62 = 400.0;
LABEL_98:
              double v57 = *(double *)&v62;
              break;
            case 8u:
              *(int64x2_t *)v73 = vdupq_n_s64(0x408F400000000000uLL);
              double v18 = 1.0;
              double v57 = 1000000.0;
              break;
            default:
              double v51 = 1000000.0;
LABEL_90:
              *(void *)v73 = sqrt(v51);
              *(void *)&v73[2] = *(void *)v73;
              double v57 = 1000000.0;
              if (v50 < 2) {
                double v57 = 0.0;
              }
              double v18 = 1.0;
              break;
          }
          double v74 = sqrt(v57 * v18);
          double v41 = *(double *)(a2 + 656);
        }
        else
        {
          uint64_t v42 = 0;
          double v70 = 0.0;
          double v71 = 0.0;
          double v72 = 0.0;
          uint64_t v6 = (void *)(a2 + 24224);
          do
          {
            *(double *)((char *)&v70 + v42) = -*(double *)(a2 + 25248 + v42) / v41;
            v42 += 8;
          }
          while (v42 != 24);
          uint64_t v43 = 0;
          double v44 = v70;
          double v45 = v71;
          double v46 = (double *)(a2 + 848);
          double v47 = v72;
          do
          {
            double v48 = *(v46 - 1) * v45 + *(v46 - 2) * v44;
            double v49 = *v46;
            v46 += 3;
            *(double *)&v73[v43] = v48 + v49 * v47;
            v43 += 2;
          }
          while (v43 != 6);
        }
        for (uint64_t j = 0; j != 6; j += 2)
        {
          uint64_t v65 = a2 + j * 4;
          double v66 = *(double *)(a2 + j * 4 + 24200) + v41 * (*(double *)&v73[j] * 0.5) * (v41 * (*(double *)&v73[j] * 0.5));
          *(double *)(v65 + 24200) = v66;
          *(double *)(v65 + 24288) = v66 + v41 * 0.0001;
        }
        if (v69)
        {
          *(unsigned char *)(a1 + 128) = 1;
          *(_DWORD *)(a1 + 132) = 23;
          memset_pattern16((void *)(a2 + 24136), &unk_22BB3FBE0, 0x58uLL);
          memset_pattern16(v6, &unk_22BB3FBE0, 0x58uLL);
          *(void *)(a2 + 24400) = 0;
        }
        goto LABEL_105;
      }
      *(_DWORD *)(a1 + 144) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 144) = 0;
      *(unsigned char *)(a1 + 172) = 1;
      double v7 = *(double *)(a2 + 20024);
    }
    if (v7 > 1.05) {
      *(unsigned char *)(a1 + 173) = 1;
    }
    goto LABEL_8;
  }
LABEL_105:
  uint64_t v67 = -88;
  while (*(double *)(a2 + v67 + 24224) > 0.0)
  {
    *(double *)(a2 + v67 + 24400) = sqrt(*(double *)(a2 + v67 + 24312));
    v67 += 8;
    if (!v67) {
      return;
    }
  }
  *(unsigned char *)(a1 + 128) = 1;
  *(_DWORD *)(a1 + 132) = 91;
  memset_pattern16((void *)(a2 + 24136), &unk_22BB3FBE0, 0x58uLL);
  memset_pattern16(v6, &unk_22BB3FBE0, 0x58uLL);
  for (uint64_t k = 0; k != 88; k += 8)
    *(void *)(a2 + 24312 + k) = 0x41634325C0000000;
  *(void *)(a2 + 24400) = 0;
}

uint64_t SuplLppProvider::GetInstance(SuplLppProvider *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (SuplLppProvider::GetInstance(void)::pred_suplLppProvider != -1) {
    dispatch_once(&SuplLppProvider::GetInstance(void)::pred_suplLppProvider, &__block_literal_global_3);
  }
  uint64_t result = SuplLppProvider::m_supl_lpp_provider;
  if (!SuplLppProvider::m_supl_lpp_provider)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GetInstance", "GetInstance");
      LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GetInstance", "SuplLppProvider.cpp", 42, "false && \"Memory allocation failure\"");
  }
  return result;
}

void *___ZN15SuplLppProvider11GetInstanceEv_block_invoke()
{
  uint64_t result = operator new(0x18uLL, MEMORY[0x263F8C180]);
  if (result)
  {
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  SuplLppProvider::m_supl_lpp_provider = (uint64_t)result;
  return result;
}

size_t SuplLppProvider::SetLppAdPayload(SuplProvider *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(SuplProvider::GetInstance(a1) + 32);
  if (!v3)
  {
LABEL_5:
    LODWORD(a2) = 0;
LABEL_6:
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, a2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "SetLppAdPayload", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
    return result;
  }
  while (*(_DWORD *)v3 != *(_DWORD *)v2)
  {
    uint64_t v3 = *(void *)(v3 + 8);
    if (!v3) {
      goto LABEL_5;
    }
  }
  if ((*(unsigned char *)(v2 + 32) || *(void *)(v2 + 8) == *(void *)(v2 + 16))
    && LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "SetLppAdPayload", 515);
    LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
  }
  size_t result = (size_t)SuplSessionVer2::SetLPPAdPayLoad((void *)(v3 + 16), v2);
  uint64_t v9 = *(unsigned int *)(v3 + 520);
  if (v9) {
    return SuplSession::ConnectInd((int *)(v3 - 8), v9);
  }
  return result;
}

void *SuplLppProvider::SetLppCapPayload(void *result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_4;
  }
  uint64_t v2 = a2;
  if (*(unsigned char *)(a2 + 4) || (uint64_t v5 = *(char **)(a2 + 8), v6 = *(char **)(v2 + 16), v7 = (void *)(v2 + 8), v5 == v6))
  {
    LODWORD(a2) = 0;
LABEL_4:
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x12u, a2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "SetLppCapPayload", 515);
      return (void *)LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
    }
    return result;
  }
  if (v7 != result)
  {
    return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(result, v5, v6, v6 - v5);
  }
  return result;
}

void NK_Add_Nominal_PN(uint64_t a1, uint64_t a2, int a3, double *a4, double *a5, uint64_t a6, double *a7)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v88 = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  memset(v85, 0, sizeof(v85));
  double v14 = (double (*)[3])(a2 + 208);
  ECEF2FSD_RotM((const double (*)[3])(a2 + 208), *(double *)(a1 + 11192) * 0.0174532925, (double (*)[3])v85);
  __asm { FMOV            V0.2D, #1.0 }
  long long v89 = _Q0;
  double v19 = *(double *)(a2 + 32);
  if (v19 >= 0.0)
  {
    uint64_t v80 = a7;
    double v20 = v19 * v19;
    *(void *)&long long v90 = 0x3FF0000000000000;
    double v21 = a4[3];
    double v22 = v19 * (CP_Noise_dT_Sync[*(unsigned int *)(a2 + 16)] + a4[4] + v19 * v19 * v21 * 0.0833333333);
    double v23 = v22;
    if (a3) {
      double v23 = v22 + a4[2];
    }
    uint64_t v81 = a6;
    int v24 = 0;
    int v84 = 0;
    double v83 = v19;
    if (v23 > 0.0)
    {
      rnk1_core(a5, 1u, v23, (double *)&v90, &v84);
      double v19 = v83;
      int v24 = v84;
      double v21 = a4[3];
      double v22 = v83 * (CP_Noise_dT_Sync[*(unsigned int *)(a2 + 16)] + a4[4] + v20 * v21 * 0.0833333333);
    }
    int v25 = v24 != 0;
    *(void *)&long long v90 = 0;
    *((void *)&v90 + 1) = 0x3FF0000000000000;
    double v26 = v22;
    if (a3) {
      double v26 = v22 + a4[2];
    }
    int v84 = 0;
    if (v26 > 0.0)
    {
      rnk1_core(a5, 2u, v26, (double *)&v90, &v84);
      double v19 = v83;
      double v21 = a4[3];
      double v22 = v83 * (CP_Noise_dT_Sync[*(unsigned int *)(a2 + 16)] + a4[4] + v20 * v21 * 0.0833333333);
      int v27 = v24 ? 2 : 1;
      if (v84) {
        int v25 = v27;
      }
    }
    long long v90 = 0uLL;
    *(void *)&long long v91 = 0x3FF0000000000000;
    if (a3) {
      double v22 = v22 + a4[2];
    }
    int v28 = 0;
    int v84 = 0;
    double v29 = sqrt(v19);
    if (v22 > 0.0)
    {
      rnk1_core(a5, 3u, v22, (double *)&v90, &v84);
      double v19 = v83;
      int v28 = v84;
      double v21 = a4[3];
    }
    int v30 = 0;
    double v31 = (unsigned char *)(a1 + 11161);
    if (v28) {
      ++v25;
    }
    *(double *)&long long v90 = v19 * v29 * 0.5;
    *((double *)&v90 + 1) = *(double *)&v90;
    *(double *)&long long v91 = *(double *)&v90;
    *((double *)&v91 + 1) = v29;
    int v84 = 0;
    if (v21 > 0.0)
    {
      rnk1_core(a5, 4u, v21, (double *)&v90, &v84);
      double v19 = v83;
      int v30 = v84;
    }
    double v82 = v20 * 0.5;
    BOOL v32 = v30 != 0;
    double v33 = 0.0;
    uint64_t v34 = 13;
    do
    {
      double v33 = v33 + *(double *)(a2 + 8 * v34) * *(double *)(a2 + 8 * v34);
      unint64_t v35 = v34 - 10;
      --v34;
    }
    while (v35 > 1);
    double v36 = sqrt(v33);
    *a4 = v36;
    double v37 = a4[9];
    if (v36 > v37)
    {
      _NF = 1;
    }
    else
    {
      double v37 = v36;
      _NF = v36 < 1.0;
    }
    if (_NF)
    {
      if (v37 >= 1.0) {
        double v36 = v37;
      }
      else {
        double v36 = 1.0;
      }
      *a4 = v36;
    }
    int v39 = 0;
    int v40 = v25 + v32;
    double v41 = v36 * a4[1];
    *(double *)&long long v90 = v20 * 0.5;
    *((double *)&v90 + 1) = v20 * 0.5;
    *(double *)&long long v91 = v20 * 0.5;
    *((double *)&v91 + 1) = v19;
    int v84 = 0;
    if (v41 > 0.0)
    {
      rnk1_core(a5, 4u, v41, (double *)&v90, &v84);
      double v19 = v83;
      int v39 = v84;
    }
    if (v39) {
      int v42 = v40 + 1;
    }
    else {
      int v42 = v40;
    }
    unsigned int v43 = *(_DWORD *)(a1 + 20);
    unsigned int v44 = *(_DWORD *)(a1 + 24);
    if (v43 != v44)
    {
      switch(v43)
      {
        case 0u:
          goto LABEL_51;
        case 1u:
          if (!v44) {
            break;
          }
          goto LABEL_51;
        case 2u:
          if (v44 <= 1) {
            break;
          }
          goto LABEL_51;
        case 3u:
          if (v44 <= 2) {
            break;
          }
          goto LABEL_51;
        case 4u:
          if (v44 - 5 >= 3) {
            break;
          }
          goto LABEL_51;
        case 5u:
          if ((v44 & 0xFFFFFFFE) != 6) {
            break;
          }
          goto LABEL_51;
        case 6u:
          if (v44 != 7) {
            break;
          }
LABEL_51:
          if (*(unsigned char *)(a1 + 11632))
          {
            unsigned int v45 = *(_DWORD *)(a1 + 140);
            if (v45 >= *(_DWORD *)(a1 + 144)) {
              unsigned int v45 = *(_DWORD *)(a1 + 144);
            }
            if (!v45
              || v43 >= 2
              && ((unsigned int v46 = *(_DWORD *)(a1 + 11032), v46 > 0x78)
               || v43 - 3 <= 5 && (v46 > 0x1E || v43 - 4 <= 4 && v46 >= 0xB)))
            {
              char v47 = 0;
LABEL_66:
              *(unsigned char *)(a1 + 11632) = v47;
              break;
            }
          }
          else
          {
            unsigned int v48 = *(_DWORD *)(a1 + 140);
            if (v48 >= *(_DWORD *)(a1 + 144)) {
              unsigned int v48 = *(_DWORD *)(a1 + 144);
            }
            if (*(double *)(a1 + 11480) <= (double)(5 * v48))
            {
              char v47 = 1;
              goto LABEL_66;
            }
          }
          break;
        default:
          break;
      }
    }
    if (!*(unsigned char *)(a1 + 11632) || (double v49 = *(double *)(a2 + 320), v49 > 4.0) || *v31)
    {
      double v50 = a4[5];
      double v51 = a4[6];
      if (*v31)
      {
        double v50 = v50 + a4[7];
        double v51 = v51 + a4[8];
      }
      uint64_t v52 = 0;
      v53 = (double *)&v89;
      long long v54 = 0uLL;
      do
      {
        uint64_t v92 = 0;
        long long v90 = v54;
        long long v91 = v54;
        float64x2_t v93 = *(float64x2_t *)(a2 + v52 + 208);
        double v94 = *(double *)(a2 + v52 + 224);
        double v55 = v51;
        if (v52 != 48) {
          double v55 = v50 * *v53;
        }
        int v56 = 0;
        double v57 = v19 * (v55 + CP_Noise_dT_Sync[*(unsigned int *)(a2 + 16)]);
        int v84 = 0;
        if (v57 > 0.0)
        {
          rnk1_core(a5, 8u, v57, (double *)&v90, &v84);
          long long v54 = 0uLL;
          double v19 = v83;
          int v56 = v84;
        }
        if (v56) {
          ++v42;
        }
        ++v53;
        v52 += 24;
      }
      while (v52 != 72);
      double v49 = *(double *)(a2 + 320);
    }
    if (v49 > 16.0)
    {
      double v58 = fabs(*(double *)(a1 + 11200));
      if (v58 > 2.0)
      {
        double v59 = v19 * v49;
        __double2 v60 = __sincos_stret(v58 * 0.0174532925);
        uint64_t v61 = 0;
        double v62 = v59 * v60.__sinval;
        double v63 = 1.0;
        if (v49 < 23.0) {
          double v63 = (v49 + -16.0) / 7.0;
        }
        double v19 = v83;
        double v64 = v59 * (1.0 - v60.__cosval) * v63 * (v59 * (1.0 - v60.__cosval) * v63);
        double v65 = v62 * v63 * (v62 * v63);
        double v66 = (double *)(a1 + 344);
        char v67 = 1;
        long long v68 = 0uLL;
        do
        {
          int v69 = 0;
          char v70 = v67;
          uint64_t v92 = 0;
          long long v90 = v68;
          long long v91 = v68;
          double v71 = &v85[3 * v61];
          float64x2_t v93 = *(float64x2_t *)v71;
          double v94 = v71[2];
          if (v67) {
            double v72 = v64;
          }
          else {
            double v72 = v65;
          }
          int v84 = 0;
          if (v72 > 0.0)
          {
            rnk1_core(v66, 8u, v72, (double *)&v90, &v84);
            long long v68 = 0uLL;
            double v19 = v83;
            int v69 = v84;
          }
          char v67 = 0;
          if (v69) {
            ++v42;
          }
          uint64_t v61 = 1;
        }
        while ((v70 & 1) != 0);
      }
    }
    uint64_t v73 = 0;
    double v74 = (double *)&v89;
    long long v75 = 0uLL;
    do
    {
      uint64_t v92 = 0;
      long long v90 = v75;
      long long v91 = v75;
      float64x2_t v76 = *(float64x2_t *)(a2 + v73 + 208);
      float64x2_t v93 = vmulq_n_f64(v76, v82);
      double v77 = *(double *)(a2 + v73 + 224);
      double v94 = v82 * v77;
      float64x2_t v95 = vmulq_n_f64(v76, v19);
      double v96 = v19 * v77;
      if (v73 == 48) {
        double v78 = a4[10];
      }
      else {
        double v78 = a4[9] * *v74;
      }
      int v79 = 0;
      int v84 = 0;
      if (v78 > 0.0)
      {
        rnk1_core(a5, 0xBu, v78, (double *)&v90, &v84);
        long long v75 = 0uLL;
        double v19 = v83;
        int v79 = v84;
      }
      if (v79) {
        ++v42;
      }
      ++v74;
      v73 += 24;
    }
    while (v73 != 72);
    if (v42)
    {
      gn_report_assertion_failure("Rank 1 update fail");
      *(_DWORD *)(v81 + 4) = 21;
      *(unsigned char *)uint64_t v81 = 1;
    }
    else
    {
      ud2var((uint64_t)a5, 0xBu, 1, 0xBu, v80);
      Comp_NEDvar_UDU((uint64_t)a5, 0xBu, 5, v14, v80 + 5);
      Comp_NEDvar_UDU((uint64_t)a5, 0xBu, 8, v14, v80 + 8);
    }
  }
}

void CUCFCheckINTEGERConstraint(uint64_t a1, uint64_t a2, int *a3)
{
  if ((*(unsigned char *)(a2 + 24) & 0x20) != 0 && *(void *)(a2 + 32) > *a3
    || (*(unsigned char *)(a2 + 24) & 8) != 0 && *(void *)(a2 + 40) < *a3)
  {
    EPErrorHandler(a1, 18);
  }
}

void CUCFCheckStringConstraint(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 32) > a3 || *(char *)(a2 + 24) < 0 && *(void *)(a2 + 40) < a3) {
    EPErrorHandler(a1, 19);
  }
}

void CUCFCheckCHARACTER_STRINGConstraint(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = a3 + 1;
  unint64_t v6 = a3[1];
  if (v6 < *(void *)(a2 + 48) || *(char *)(a2 + 40) < 0 && *(void *)(a2 + 56) < v6) {
    EPErrorHandler(a1, 19);
  }
  if (*(void *)(a2 + 32) && *v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(unsigned __int8 **)(a2 + 24);
    uint64_t v10 = *(void *)(a2 + 32);
    while (1)
    {
      if (*(void *)(a2 + 32))
      {
        int v11 = *(unsigned __int8 *)(*a3 + v8);
        if (v11 != *v9) {
          break;
        }
      }
      uint64_t v12 = 0;
LABEL_11:
      if (v12 == v10) {
        goto LABEL_18;
      }
      if (++v8 == *v7) {
        return;
      }
    }
    uint64_t v12 = 0;
    while (v10 - 1 != v12)
    {
      int v13 = v9[++v12];
      if (v11 == v13) {
        goto LABEL_11;
      }
    }
LABEL_18:
    EPErrorHandler(a1, 20);
  }
}

void CUCFCheckStructOfConstraint(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 40) > a3 || *(char *)(a2 + 32) < 0 && *(void *)(a2 + 48) < a3) {
    EPErrorHandler(a1, 19);
  }
}

uint64_t NK_Init_Cov_Mat(int a1, int *a2, int a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int64x2_t *a10, uint64_t a11)
{
  if (*(unsigned char *)a6) {
    int v12 = 0;
  }
  else {
    int v12 = a1;
  }
  if (v12)
  {
    ++*(_DWORD *)(a6 + 12);
  }
  else
  {
    if (*(unsigned char *)a6)
    {
      int64x2_t v19 = vdupq_n_s64(0x4163125300000000uLL);
      *a10 = v19;
      a10[1] = v19;
      a10[2] = v19;
      a10[3].i64[0] = 0x4163125300000000;
    }
    *(_DWORD *)a7 = -1;
    int64x2_t v20 = vdupq_n_s64(0x416312D000000000uLL);
    *(int64x2_t *)(a7 + 40) = v20;
    *(int64x2_t *)(a7 + 56) = v20;
    *(unsigned char *)(a7 + 88) = -1;
    *(_DWORD *)a8 = -1;
    *(int64x2_t *)(a8 + 40) = v20;
    *(int64x2_t *)(a8 + 56) = v20;
    *(unsigned char *)(a8 + 88) = -1;
    bzero((void *)(a5 + 8), 0x208uLL);
    uint64_t v21 = ClkBiasOrigVar[a3];
    *(void *)a11 = v21;
    *(void *)a5 = v21;
    *(void *)(a11 + 8) = *(void *)a11;
    *(void *)(a5 + 16) = *(void *)a5;
    *(void *)(a11 + 16) = *(void *)a11;
    *(void *)(a5 + 40) = *(void *)a5;
    uint64_t v22 = DT_SyncOrigVar[a3];
    *(void *)(a11 + 32) = v22;
    *(void *)(a5 + 112) = v22;
    double v23 = a9 * 99930819.3 * (a9 * 99930819.3);
    *(double *)(a11 + 24) = v23;
    *(double *)(a5 + 72) = v23;
    if (a1) {
      uint64_t v24 = qword_22BB3FC60[*a4 == 0];
    }
    else {
      uint64_t v24 = 0x4341C37937E08000;
    }
    *(void *)(a11 + 48) = v24;
    *(void *)(a11 + 56) = v24;
    *(void *)(a11 + 40) = v24;
    *(void *)(a5 + 280) = v24;
    *(void *)(a5 + 216) = v24;
    *(void *)(a5 + 160) = v24;
    uint64_t v25 = *a2;
    if (v25 > 8) {
      uint64_t v26 = 0x4197D78400000000;
    }
    else {
      uint64_t v26 = qword_22BB3FD30[v25];
    }
    *(void *)(a11 + 72) = v26;
    *(void *)(a11 + 80) = v26;
    *(void *)(a11 + 64) = v26;
    *(void *)(a5 + 520) = v26;
    *(void *)(a5 + 432) = v26;
    *(void *)(a5 + 352) = v26;
    *(unsigned char *)a6 = 0;
    int v27 = *(_DWORD *)(a6 + 8) + 1;
    *(_DWORD *)(a6 + 12) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    *(_DWORD *)(a6 + 8) = v27;
    *(_DWORD *)(a6 + 24) = -1;
  }
  return v12 ^ 1u;
}

void SV_Data_Decode(char *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  unsigned int v13 = *(_DWORD *)(a6 + 8);
  if (*(unsigned char *)(a6 + 5) && *(int *)a6 >= 3)
  {
    int v14 = (int)*(double *)(a6 + 24) + 604800 * *(__int16 *)(a6 + 16);
    unsigned int v55 = v14;
    int v15 = a3[672] - v13;
    if (v15 > 0 || (int v15 = a3[673] - v13, v15 > 0) || (int v15 = a3[674] - v13, v15 > 0) || (int v15 = a3[675] - v13, v15 >= 1))
    {
      v14 += v15 / 0x3E8u;
      unsigned int v55 = v14;
    }
  }
  else
  {
    int v14 = 0;
    unsigned int v55 = 0;
  }
  unsigned int v52 = v13;
  if (*(int *)(a6 + 60) < 1)
  {
    int v20 = 0;
  }
  else
  {
    int v16 = a3[673] - v13;
    if (v16 < 1) {
      int v16 = 1000;
    }
    double v17 = *(double *)(a6 + 72) + (double)v16 * 0.001;
    double v18 = -0.5;
    if (v17 > 0.0) {
      double v18 = 0.5;
    }
    double v19 = v17 + v18;
    if (v19 <= 2147483650.0)
    {
      if (v19 >= -2147483650.0) {
        int v20 = (int)v19;
      }
      else {
        int v20 = 0x80000000;
      }
    }
    else
    {
      int v20 = 0x7FFFFFFF;
    }
  }
  *(_DWORD *)(a2 + 60) = v20;
  DD_Delete_Bad_GPS_Data((uint64_t)a1, (uint64_t)(a1 + 224), (uint64_t)(a1 + 192), (void *)a7);
  uint64_t v51 = (uint64_t)(a1 + 192);
  DD_Delete_Inhib_GPS_Data(*(void *)(a4 + 432), (uint64_t)a1, (uint64_t)(a1 + 224), (uint64_t)(a1 + 192), (void *)a7);
  DD_Delete_Bad_QZSS_Data((uint64_t)(a1 + 3584), (uint64_t)(a1 + 3654), (uint64_t)(a1 + 3644), (void *)a7);
  DD_Delete_Inhib_QZSS_Data(*(void *)(a4 + 448), (uint64_t)(a1 + 3584), (uint64_t)(a1 + 3654), (uint64_t)(a1 + 3644), (void *)a7);
  DD_Delete_Bad_GLON_Data((uint64_t)a1, (void *)a7);
  DD_Delete_Inhib_GLON_Data(*(void *)(a4 + 440), (uint64_t)a1, (void *)a7);
  DD_Delete_Bad_BDS_Data((uint64_t)(a1 + 6508), (uint64_t)(a1 + 6456), (void *)a7);
  DD_Delete_Inhib_BDS_Data(*(void *)(a4 + 464), (uint64_t)(a1 + 6508), (uint64_t)(a1 + 6456), (void *)a7);
  DD_Delete_Bad_GAL_Data((uint64_t)a1, (void *)a7);
  DD_Delete_Inhib_GAL_Data(*(void *)(a4 + 472), (uint64_t)a1, (void *)a7);
  if (*(unsigned char *)(a4 + 1133))
  {
    if (v14 >= 1)
    {
      uint64_t v21 = *(void *)(a4 + 1040);
      if (v21 >= 1 && v14 - v21 <= 604799)
      {
        for (uint64_t i = 13; i != 685; i += 14)
          LOBYTE(a3[i]) = 0;
      }
    }
  }
  unsigned __int8 v23 = 0;
  *(unsigned char *)(a2 + 9) = 0;
  double v50 = (void *)(a2 + 64);
  uint64_t v24 = (_OWORD *)(a2 + 16);
  do
  {
    int v25 = v23;
    if (LOBYTE(a3[14 * v23 + 13]))
    {
      uint64_t v26 = &a3[14 * v23];
      int v27 = *v26;
      *(_DWORD *)(a2 + 4) = *v26;
      switch((char)v27)
      {
        case 1:
        case 5:
          int v28 = &a3[14 * v25];
          int v30 = *((unsigned __int8 *)v28 + 4);
          double v29 = v28 + 1;
          if (v30)
          {
            if (*((unsigned __int8 *)v29 + 2) <= 5u && *((_WORD *)v29 + 2))
            {
              long long v31 = *(_OWORD *)(v29 + 2);
              long long v32 = *(_OWORD *)(v29 + 6);
              *(void *)(a2 + 48) = *((void *)v29 + 5);
              _OWORD *v24 = v31;
              *(_OWORD *)(a2 + 32) = v32;
              *(_WORD *)(a2 + 56) = *((_WORD *)v29 + 2);
              if (v27 == 5)
              {
                uint64_t v47 = BYTE2(v27) - 193;
                if (!*(unsigned char *)(*(void *)(a4 + 448) + v47))
                {
                  *(unsigned char *)(a2 + 8) = v47;
                  DD_Proc_QZSS_Data((uint64_t)a1, a2, (_DWORD *)a4, a6, (int *)&v55, (void *)a7);
                }
              }
              else if (v27 == 1)
              {
                uint64_t v33 = BYTE2(v27) - 1;
                if (!*(unsigned char *)(*(void *)(a4 + 432) + v33))
                {
                  *(unsigned char *)(a2 + 8) = v33;
                  DD_Proc_GPS_Data((uint64_t)a1, a2, (_DWORD *)a4, a6, (int *)&v55, a7);
                }
              }
            }
            goto LABEL_58;
          }
          break;
        case 2:
          uint64_t v34 = &a3[14 * v25];
          int v35 = *((unsigned __int8 *)v34 + 4);
          double v29 = v34 + 1;
          if (v35)
          {
            if (*((unsigned char *)v29 + 2)
              && ((char v36 = *((unsigned char *)v29 + 1),
                   uint64_t v37 = *(int *)(a7 + 4 * (unsigned __int16)(v36 + 7) + 16432),
                   v37 == 2139062143)
               || !*(unsigned char *)(v37 + *(void *)(a4 + 440) - 1)))
            {
              *(unsigned char *)(a2 + 58) = v36;
              _OWORD *v24 = 0u;
              *(_OWORD *)(a2 + 32) = 0u;
              *(void *)(a2 + 48) = 0;
              uint64_t v46 = *(void *)(v29 + 1);
              *(_DWORD *)(a2 + 24) = v29[3];
              *(void *)uint64_t v24 = v46;
              *(unsigned char *)(a2 + 15) = *((unsigned char *)v29 + 3);
              if ((v36 + 7) <= 0xDu) {
                DD_Proc_GLON_Data(a1, a2, (_DWORD *)a4, a6, (int *)&v55, a7);
              }
            }
            else if ((unsigned __int16)g_Enable_Event_Log >= 2u)
            {
              EvLog_v("SV_Data_Decode:  Glonass String Parity Fail %d  %x %x %x", v25, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24));
            }
            goto LABEL_58;
          }
          break;
        case 3:
          uint64_t v38 = &a3[14 * v25];
          int v39 = *((unsigned __int8 *)v38 + 4);
          double v29 = v38 + 1;
          int v40 = *((unsigned __int8 *)v26 + 1);
          unsigned __int8 v41 = BYTE2(v27) - 1;
          *(unsigned char *)(a2 + 8) = BYTE2(v27) - 1;
          if (v39)
          {
            if (!*(unsigned char *)(*(void *)(a4 + 472) + BYTE2(v27) - 1) && *((unsigned char *)v29 + 2))
            {
              if (*((unsigned char *)v29 + 3))
              {
                EvLog("SV_Data_Decode: Galileo I/NAV Alert Page decoding is not supported yet.");
              }
              else
              {
                uint64_t v48 = *(void *)((char *)v29 + 18);
                *(void *)(a2 + 70) = *((void *)v29 + 3);
                *double v50 = v48;
                *(_WORD *)(a2 + 78) = *((_WORD *)v29 + 2);
                DD_Proc_GAL_INAV_Data((uint64_t)v50, (char *)v41, v40, (int *)&v55, (unsigned int *)a1, a6, (void *)a7);
              }
            }
            goto LABEL_58;
          }
          break;
        case 4:
          int v42 = &a3[14 * v25];
          int v43 = *((unsigned __int8 *)v42 + 4);
          double v29 = v42 + 1;
          if (v43)
          {
            if (!*(unsigned char *)(*(void *)(a4 + 464) + BYTE2(v27) - 1)
              && *((unsigned __int8 *)v29 + 2) <= 5u
              && *((_WORD *)v29 + 2))
            {
              *(void *)(a2 + 48) = 0;
              _OWORD *v24 = 0u;
              *(_OWORD *)(a2 + 32) = 0u;
              long long v44 = *(_OWORD *)(v29 + 2);
              long long v45 = *(_OWORD *)(v29 + 6);
              *(void *)(a2 + 48) = *((void *)v29 + 5);
              _OWORD *v24 = v44;
              *(_OWORD *)(a2 + 32) = v45;
              *(_WORD *)(a2 + 56) = *((_WORD *)v29 + 2);
              *(unsigned char *)(a2 + 8) = BYTE2(v27) - 1;
              DD_Proc_BDS_Data(a1, a2, a6, (int *)&v55, (void *)a7);
            }
LABEL_58:
            *(unsigned char *)double v29 = 0;
          }
          break;
        case 6:
          EvLog("SV_Data_Decode: SBAS Data decoding is NOT Supported.");
          break;
        default:
          break;
      }
    }
    unsigned __int8 v23 = *(unsigned char *)(a2 + 9) + 1;
    *(unsigned char *)(a2 + 9) = v23;
  }
  while (v23 < 0x30u);
  DD_Save_New_GPS_Eph(v55, (uint64_t)(a1 + 288), (uint64_t)(a1 + 3552), v51, (uint64_t *)a7);
  DD_Save_New_QZSS_Eph(v55, (uint64_t)(a1 + 3676), (uint64_t)(a1 + 4696), (uint64_t)(a1 + 3644), (void *)a7);
  DD_Save_New_GLON_Eph(v55, *(_DWORD *)(a6 + 60), *(_DWORD *)(a2 + 60), a7, (uint64_t)a1);
  DD_Save_New_GLON_Alm(v55, (void *)a7, (uint64_t)a1);
  DD_Save_New_BDS_D1_Eph(v55, (void *)a7, (uint64_t)a1);
  DD_Save_New_GAL_INAV_Eph(v55, (uint64_t)a1, (void *)a7);
  if (!*(_DWORD *)(a7 + 39452))
  {
    int v54 = 0;
    API_Get_Next_Leap_Second((unsigned int *)(a7 + 39452), (signed __int8 *)(a7 + 39456), &v54);
    if ((v54 - 1) <= 0x7FFFFFFD) {
      API_Get_UTC_Cor(0, (double *)(a7 + 39464));
    }
  }
  DD_Check_Age_GPS_Data(v55, v52, (uint64_t)a1, (uint64_t)(a1 + 224), v51, a7);
  DD_Check_Age_QZSS_Data(v55, v52, (uint64_t)(a1 + 3584), (uint64_t)(a1 + 3654), (uint64_t)(a1 + 3644), (void *)a7);
  DD_Check_Age_GLON_Data((int *)a6, (void *)a7, v49);
  DD_Check_GLON_Strings(*(unsigned int *)(a6 + 60), *(_DWORD *)(a2 + 60), (uint64_t)a1, a7);
  DD_LS_Delete_EphAlm_Str((char *)*(unsigned int *)(a7 + 39452), a6, (uint64_t)a1);
  DD_Check_Age_BDS_Data(v55, v52, (uint64_t)(a1 + 6508), (uint64_t)(a1 + 6456), (void *)a7);
  if (DD_Check_Age_GAL_Data(v55, v52, (void *)a7)) {
    DD_Delete_Bad_GAL_Data((uint64_t)a1, (void *)a7);
  }
  if (*(unsigned char *)(a4 + 31)) {
    DD_Assist_GPS_Data((uint64_t)a1, v55, a5, a7, a4);
  }
  if (*(unsigned char *)(a4 + 33)) {
    DD_Assist_QZSS_Data((uint64_t)a1, v55, a5, (void *)a7, a4);
  }
  if (*(unsigned char *)(a4 + 32)) {
    DD_Assist_GLON_Data(v55, a5, a7, a4);
  }
  if (*(unsigned char *)(a4 + 35)) {
    DD_Assist_BDS_Data((int *)a1, v55, a5, (void *)a7, a4);
  }
  if (*(unsigned char *)(a4 + 36)) {
    DD_Assist_GAL_Data((uint64_t)a1, v55, a5, a7, a4);
  }
}

void GncP16_01StopStateHndlrTimer(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if ((_BYTE)qword_26AE54228)
  {
    if (AgpsFsmStopTimer(8789766))
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v0 = mach_continuous_time();
        size_t v1 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP16_01StopStateHndlrTimer", 1545);
        int v2 = 2;
LABEL_7:
        LbsOsaTrace_WriteLog(8u, __str, v1, v2, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      size_t v1 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: State,%hhu,TimerStarted,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 68, "GncP16_01StopStateHndlrTimer", g_GncPStateInfo, HIDWORD(qword_26AE54228));
      int v2 = 5;
      goto LABEL_7;
    }
    LOBYTE(qword_26AE54228) = 0;
    HIDWORD(qword_26AE54228) = 0;
  }
}

uint64_t GncP16_02StartStateHndlrTimer(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  GncP16_01StopStateHndlrTimer();
  if (AgpsFsmStartTimer(0x861F06u, a1))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP16_02StartStateHndlrTimer", 1544, a1);
      uint64_t result = LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
    }
    LOBYTE(qword_26AE54228) = 0;
  }
  else
  {
    LOBYTE(qword_26AE54228) = 1;
    HIDWORD(qword_26AE54228) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                * (double)mach_continuous_time());
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: State,%hhu,DueTime,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GncP16_02StartStateHndlrTimer", g_GncPStateInfo, a1);
      return LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
    }
  }
  return result;
}

void GncP16_11StartME(int a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  GncP02_13ClearMEBuf();
  LOBYTE(g_GncPStateInfo) = 6;
  int v2 = gnssOsa_Calloc("GncP16_09SendWakeMEReqtoGnm", 245, 1, 0x10uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    v2[12] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_REQ =>GNM LtlTable,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP16_09SendWakeMEReqtoGnm", a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8785920, v3);
  }
  uint64_t v6 = 0;
  char v7 = 0;
  unsigned int v8 = -1;
  char v9 = 1;
  do
  {
    while (1)
    {
      char v10 = v9;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v6 + 8) != 1 || *((unsigned char *)&g_GncPCntxtInfo + 36 * v6 + 4) != 1) {
        break;
      }
      char v9 = 0;
      unsigned int v11 = *((_DWORD *)&g_GncPCntxtInfo + 9 * v6 + 6);
      if (v11 < v8) {
        unsigned int v8 = v11;
      }
      uint64_t v6 = 1;
      char v7 = 1;
      if ((v10 & 1) == 0) {
        goto LABEL_15;
      }
    }
    char v9 = 0;
    uint64_t v6 = 1;
  }
  while ((v10 & 1) != 0);
  if ((v7 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_15:
  if (v8 <= 0x3E7)
  {
    GncP05_23SetFixInterval(v8);
    goto LABEL_18;
  }
LABEL_17:
  GncP05_23SetFixInterval(0x1F4u);
  BYTE5(g_GncPStateInfo) = 1;
LABEL_18:
  GN_GPS_WakeUp();
  dword_26AE54224 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  byte_26AE54220 = 1;
  byte_26AE54218 = 0;
  GncP16_01StopStateHndlrTimer();
}

void GncP16_13CheckStopME(unsigned int a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = mach_continuous_time();
  if (BYTE2(g_GncPStateInfo)) {
    BOOL v3 = BYTE3(g_GncPStateInfo) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    LOBYTE(g_GncPStateInfo) = 9;
  }
  int v4 = byte_26AE54218 | BYTE1(g_GncPStateInfo);
  BOOL v5 = v4 != 0;
  if (BYTE6(g_GncPStateInfo))
  {
    if (v4) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2)
    }
          - HIDWORD(g_GncPStateInfo)) >> 3 >= 0x271;
    BOOL v5 = !v6;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FG,%u,BG,%u,FA,%u,FW,%u,LastAsstTick,%u,LastSleepTick,%u,MEOn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP16_13CheckStopME", BYTE3(g_GncPStateInfo), BYTE4(g_GncPStateInfo), BYTE1(g_GncPStateInfo), BYTE2(g_GncPStateInfo), HIDWORD(g_GncPStateInfo), dword_26AE5421C, v5);
    LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
  }
  if (!v5) {
    GncP16_10StopME(0, a1);
  }
}

void GncP16_10StopME(int a1, unsigned int a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  __p = 0;
  size_t __n = 0;
  uint64_t v24 = 0;
  if (a1) {
    unsigned __int16 v3 = 0;
  }
  else {
    unsigned __int16 v3 = word_26ADFF920;
  }
  if (BYTE2(g_GncPCntxtInfo)) {
    unsigned __int8 v4 = 0;
  }
  else {
    unsigned __int8 v4 = byte_26ADFF922;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StartMode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP16_05GetResetType", v4);
    LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
  }
  unsigned __int16 v8 = "FACT";
  switch(v4)
  {
    case 0u:
      goto LABEL_26;
    case 1u:
      goto LABEL_16;
    case 2u:
      unsigned __int16 v8 = "COLD";
      goto LABEL_16;
    case 3u:
      unsigned __int16 v8 = "WARM";
      goto LABEL_16;
    case 4u:
      unsigned __int16 v8 = "HOST";
      goto LABEL_16;
    case 5u:
      unsigned __int16 v8 = "VHOT";
LABEL_16:
      MEMORY[0x230F4E3E0](&__p, v8);
      int v11 = 1;
      goto LABEL_19;
    case 6u:
      MEMORY[0x230F4E3E0](&__p, "VHOT");
      goto LABEL_18;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartMode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncP16_05GetResetType", 770, v4);
        LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
      }
LABEL_18:
      int v11 = 0;
LABEL_19:
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        if (!v11) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      bzero(__str, 0x410uLL);
      double v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      p_p = (const char *)&__p;
      if (v24 < 0) {
        p_p = (const char *)__p;
      }
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ClearReq DeleteReq,%s,MERstReq,%u\n", (unint64_t)v12, "GNC", 73, "GncP16_05GetResetType", p_p, v11);
      LbsOsaTrace_WriteLog(8u, __str, v14, 4, 1);
      if (v11) {
LABEL_25:
      }
        unsigned __int16 v3 = 0;
LABEL_26:
      GN_GPS_Sleep(v3, a2, v5);
      if (g_GncPStateInfo == 9)
      {
        GncP16_01StopStateHndlrTimer();
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v15 = mach_continuous_time();
          unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: State,%hhu,PE Sleep not ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 73, "GncP16_10StopME", g_GncPStateInfo);
          LbsOsaTrace_WriteLog(8u, __str, v16, 4, 1);
        }
      }
      else
      {
        if (GncP05_25ChkDeRegGnssServReqd()) {
          GncP03_14SendDeRegGnssReq(v3, a2);
        }
        if (v3) {
          char v17 = 1;
        }
        else {
          char v17 = 3;
        }
        LOBYTE(g_GncPStateInfo) = v17;
        GncP16_02StartStateHndlrTimer(0x258u);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME to Sleep,%u,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 77, "GncP16_10StopME", v3, a2);
          LbsOsaTrace_WriteLog(8u, __str, v19, 3, 1);
        }
        dword_26AE5421C = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        byte_26AE54218 = 1;
        byte_26AE54220 = 0;
      }
      if ((SHIBYTE(v24) & 0x80000000) == 0)
      {
        size_t v20 = HIBYTE(v24);
        if (!HIBYTE(v24)) {
          return;
        }
        uint64_t v21 = (const char *)&__p;
LABEL_42:
        GncP16_06ClearNVStore(v21, v20);
        if ((SHIBYTE(v24) & 0x80000000) == 0) {
          return;
        }
        goto LABEL_43;
      }
      size_t v20 = __n;
      if (__n)
      {
        uint64_t v21 = (const char *)__p;
        goto LABEL_42;
      }
LABEL_43:
      operator delete(__p);
      return;
  }
}

void sub_22B970A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL GncP16_15CheckStopMEClearReq(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FG,%u,FA,%u,SA,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "GncP16_15CheckStopMEClearReq", BYTE3(g_GncPStateInfo), BYTE1(g_GncPStateInfo), BYTE2(g_GncPStateInfo));
    LbsOsaTrace_WriteLog(8u, __str, v1, 4, 1);
  }
  int v2 = BYTE1(g_GncPStateInfo) | BYTE2(g_GncPStateInfo) | BYTE3(g_GncPStateInfo);
  BOOL v3 = v2 == 0;
  if (!v2)
  {
    GncP16_10StopME(1, 0);
    LOBYTE(g_GncPStateInfo) = 11;
  }
  return v3;
}

void GncP16_16NewSessUpdtMEFixInt(void)
{
  uint64_t v0 = 0;
  char v1 = 0;
  unsigned int v2 = -1;
  char v3 = 1;
  do
  {
    while (1)
    {
      char v4 = v3;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 8) != 1 || *((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 4) != 1) {
        break;
      }
      char v3 = 0;
      unsigned int v5 = *((_DWORD *)&g_GncPCntxtInfo + 9 * v0 + 6);
      if (v5 < v2) {
        unsigned int v2 = v5;
      }
      uint64_t v0 = 1;
      char v1 = 1;
      if ((v4 & 1) == 0) {
        goto LABEL_11;
      }
    }
    char v3 = 0;
    uint64_t v0 = 1;
  }
  while ((v4 & 1) != 0);
  if ((v1 & 1) == 0) {
    return;
  }
LABEL_11:
  if (v2 <= 0x3E7)
  {
    if (BYTE5(g_GncPStateInfo))
    {
      if (v2 < (unsigned __int16)g_GncPConfig)
      {
        GncP05_23SetFixInterval(v2);
        BYTE5(g_GncPStateInfo) = 0;
      }
    }
    else
    {
      GncP05_23SetFixInterval(v2);
    }
  }
}

void GncP16_17HandleInvalidState(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu,FA,%u,SA,%u,FG,%u,BG,%u,QFI,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 69, "GncP16_17HandleInvalidState", 260, g_GncPStateInfo, BYTE1(g_GncPStateInfo), BYTE2(g_GncPStateInfo), BYTE3(g_GncPStateInfo), BYTE4(g_GncPStateInfo), BYTE5(g_GncPStateInfo));
    LbsOsaTrace_WriteLog(8u, __str, v1, 0, 1);
  }
  snprintf(v4, 0x64uLL, "ASSERT: GNCState %d", g_GncPStateInfo);
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GncP16_17HandleInvalidState", v4);
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
  }
  gnssOsa_FlushLog();
  __assert_rtn("GncP16_17HandleInvalidState", "gncpe16StateHndlr.cpp", 527, "false && \"Invalid State\"");
}

void GncP16_19ChkQualUpdtMEFixInt(void)
{
  if (BYTE5(g_GncPStateInfo) && GncP04_18ChkAnyFGSessQualMet())
  {
    BYTE5(g_GncPStateInfo) = 0;
    GncP16_18ReConfigMEFixInt();
    GncP16_04RestartMEWdt(1);
  }
}

void GncP16_18ReConfigMEFixInt(void)
{
  uint64_t v0 = 0;
  char v1 = 0;
  unsigned int v2 = -1;
  char v3 = 1;
  do
  {
    while (1)
    {
      char v4 = v3;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 8) != 1 || *((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 4) != 1) {
        break;
      }
      char v3 = 0;
      unsigned int v5 = *((_DWORD *)&g_GncPCntxtInfo + 9 * v0 + 6);
      if (v5 < v2) {
        unsigned int v2 = v5;
      }
      uint64_t v0 = 1;
      char v1 = 1;
      if ((v4 & 1) == 0) {
        goto LABEL_11;
      }
    }
    char v3 = 0;
    uint64_t v0 = 1;
  }
  while ((v4 & 1) != 0);
  if ((v1 & 1) == 0)
  {
    unsigned int v6 = 1000;
    goto LABEL_15;
  }
LABEL_11:
  if (v2 >= 0x3E8) {
    unsigned int v6 = 1000;
  }
  else {
    unsigned int v6 = v2;
  }
LABEL_15:

  GncP05_23SetFixInterval(v6);
}

void GncP16_04RestartMEWdt(char a1)
{
  GncP16_01StopStateHndlrTimer();
  if (!(_BYTE)qword_26AE54228)
  {
    unsigned int v2 = (unsigned __int16)((unsigned __int16)g_GncPConfig << a1);
    GncP16_02StartStateHndlrTimer(v2);
  }
}

void GncP16_21ChkFWActRspPend(char a1)
{
  if (BYTE7(g_GncPStateInfo))
  {
    GncP03_13SendStopFWActResp(a1, 1);
    BYTE7(g_GncPStateInfo) = 0;
  }
  if (BYTE8(g_GncPStateInfo))
  {
    GncP03_13SendStopFWActResp(a1, 3);
    BYTE8(g_GncPStateInfo) = 0;
  }
}

void GncP16_22UpdateStateAssistDataRcvd(unsigned int *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v1 = g_GncPStateInfo;
  if (a1 && !BYTE3(g_GncPStateInfo))
  {
    HIDWORD(g_GncPStateInfo) = *a1;
    BYTE6(g_GncPStateInfo) = 1;
  }
  if (g_GncPStateInfo > 0x10u) {
    goto LABEL_19;
  }
  if (((1 << g_GncPStateInfo) & 0x1CFE0) != 0) {
    return;
  }
  if (((1 << g_GncPStateInfo) & 0x15) != 0)
  {
    GncP16_11StartME(0);
    if (v1 == g_GncPStateInfo) {
      return;
    }
    goto LABEL_12;
  }
  if (((1 << g_GncPStateInfo) & 0xA) == 0)
  {
LABEL_19:
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP16_22UpdateStateAssistDataRcvd", 262, g_GncPStateInfo);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
    }
    GncP16_17HandleInvalidState();
  }
  LOBYTE(g_GncPStateInfo) = 5;
LABEL_12:
  if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,AssistDataRcvd,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 77, "GncP16_22UpdateStateAssistDataRcvd", 261, v1, g_GncPStateInfo, HIDWORD(g_GncPStateInfo));
    LbsOsaTrace_WriteLog(8u, __str, v3, 3, 1);
  }
}

void GncP16_23UpdateStateFGSession(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v1 = g_GncPStateInfo;
  BYTE3(g_GncPStateInfo) = a1;
  if (a1) {
    BYTE6(g_GncPStateInfo) = 0;
  }
  switch((char)g_GncPStateInfo)
  {
    case 0:
    case 2:
    case 4:
    case 9:
      if (a1) {
        GncP16_11StartME(0);
      }
      break;
    case 1:
    case 3:
      if (a1) {
        LOBYTE(g_GncPStateInfo) = 5;
      }
      break;
    case 5:
    case 6:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
      break;
    case 7:
      if (GncP16_12IsAwakeFGStateReq()) {
        GncP16_16NewSessUpdtMEFixInt();
      }
      else {
        GncP16_13CheckStopME(0);
      }
      break;
    case 8:
      if (a1)
      {
        LOBYTE(g_GncPStateInfo) = 7;
        GncP16_16NewSessUpdtMEFixInt();
        GncP16_04RestartMEWdt(0);
      }
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP16_23UpdateStateFGSession", 262, g_GncPStateInfo);
        LbsOsaTrace_WriteLog(8u, __str, v6, 2, 1);
      }
      GncP16_17HandleInvalidState();
  }
  if (v1 != g_GncPStateInfo && LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v3 = 89;
    if (!BYTE3(g_GncPStateInfo)) {
      uint64_t v3 = 78;
    }
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,FGSessActive,%c\n", (unint64_t)v2, "GNC", 77, "GncP16_23UpdateStateFGSession", 261, v1, g_GncPStateInfo, v3);
    LbsOsaTrace_WriteLog(8u, __str, v4, 3, 1);
  }
}

BOOL GncP16_12IsAwakeFGStateReq(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  BOOL v1 = 1;
  if (!(BYTE3(g_GncPStateInfo) | BYTE1(g_GncPStateInfo)))
  {
    if (!BYTE6(g_GncPStateInfo)
      || (int v0 = HIDWORD(g_GncPStateInfo),
          (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
        - v0 > 0x1388))
    {
      BOOL v1 = 0;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FG,%u,BG,%u,FA,%u,FW,%u,LastAsstTick,%u,LastSleepTick,%u,Ret,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP16_12IsAwakeFGStateReq", BYTE3(g_GncPStateInfo), BYTE4(g_GncPStateInfo), BYTE1(g_GncPStateInfo), BYTE2(g_GncPStateInfo), HIDWORD(g_GncPStateInfo), dword_26AE5421C, v1);
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  return v1;
}

void GncP16_25UpdateStateTimerExpiry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v6 = g_GncPStateInfo;
  LOBYTE(qword_26AE54228) = 0;
  switch((char)g_GncPStateInfo)
  {
    case 0:
      GncP16_13CheckStopME(0);
      break;
    case 1:
    case 3:
    case 5:
    case 11:
    case 16:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NoAck State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP16_25UpdateStateTimerExpiry", 1298, g_GncPStateInfo);
        LbsOsaTrace_WriteLog(8u, __str, v8, 2, 1);
      }
      GncP04_21SendClearGnssAck(0);
      GncP04_19SendPosEvntResp(4);
      GncP16_21ChkFWActRspPend(0);
      dword_26AE5421C = 0;
      byte_26AE54218 = 0;
      GncP08_03HandleHardReset();
      break;
    case 2:
      LOBYTE(g_GncPStateInfo) = 4;
      dword_26AE5421C = 0;
      byte_26AE54218 = 0;
      break;
    case 4:
    case 6:
    case 9:
    case 10:
    case 15:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerExp NotHandled in State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP16_25UpdateStateTimerExpiry", g_GncPStateInfo);
        LbsOsaTrace_WriteLog(8u, __str, v10, 4, 1);
      }
      break;
    case 7:
    case 8:
    case 14:
      GncP01_32ExecutePE(a1, a2, a3, a4, a5, a6);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NO ME data WdtStrt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP16_25UpdateStateTimerExpiry", 1301, HIDWORD(qword_26AE54228));
        LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
      }
      GncP16_04RestartMEWdt(0);
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 87, "GncP16_25UpdateStateTimerExpiry", 262, g_GncPStateInfo);
        LbsOsaTrace_WriteLog(8u, __str, v16, 2, 1);
      }
      GncP16_17HandleInvalidState();
  }
  if (v6 != g_GncPStateInfo)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 77, "GncP16_25UpdateStateTimerExpiry", 261, v6, g_GncPStateInfo);
      LbsOsaTrace_WriteLog(8u, __str, v14, 3, 1);
    }
  }
}

void GncP16_26UpdateStateMEDataRcvd(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v0 = g_GncPStateInfo;
  if (BYTE5(g_GncPStateInfo)) {
    BOOL v1 = byte_26AE54220 == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    int v2 = dword_26AE54224;
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v2 >= 0xBB9)
    {
      BYTE5(g_GncPStateInfo) = 0;
      GncP16_18ReConfigMEFixInt();
    }
  }
  switch((char)g_GncPStateInfo)
  {
    case 0:
    case 1:
    case 3:
    case 5:
    case 11:
    case 14:
    case 15:
    case 16:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v3 = mach_continuous_time();
        unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MEData NotHandled in State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP16_26UpdateStateMEDataRcvd", g_GncPStateInfo);
        LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
      }
      goto LABEL_28;
    case 2:
    case 4:
      goto LABEL_27;
    case 6:
      LOBYTE(g_GncPStateInfo) = 7;
      GncP04_19SendPosEvntResp(8);
      goto LABEL_25;
    case 7:
      if (!GncP16_12IsAwakeFGStateReq()) {
        GncP16_13CheckStopME(0);
      }
      goto LABEL_25;
    case 8:
      GncP05_23SetFixInterval(0x3E8u);
      if (GncP16_12IsAwakeFGStateReq())
      {
        LOBYTE(g_GncPStateInfo) = 7;
LABEL_25:
        GncP16_04RestartMEWdt(1);
        goto LABEL_28;
      }
      if (BYTE4(g_GncPStateInfo)) {
        goto LABEL_25;
      }
      GncP16_01StopStateHndlrTimer();
LABEL_27:
      GncP16_13CheckStopME(0);
LABEL_28:
      if (v0 != g_GncPStateInfo)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v6 = mach_continuous_time();
          unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 77, "GncP16_26UpdateStateMEDataRcvd", 261, v0, g_GncPStateInfo);
          LbsOsaTrace_WriteLog(8u, __str, v7, 3, 1);
        }
      }
      return;
    case 9:
      if (!BYTE2(g_GncPStateInfo)) {
        goto LABEL_27;
      }
      goto LABEL_28;
    case 10:
      if ((void)xmmword_26AE66D18)
      {
        if (*(_DWORD *)xmmword_26AE66D18)
        {
          if (!byte_26AE54218
            || (int v5 = dword_26AE5421C,
                (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
              - v5 >= 0xC9))
          {
            GncP16_01StopStateHndlrTimer();
            GncP16_10StopME(1, 0);
            if (BYTE3(g_GncPStateInfo) || BYTE4(g_GncPStateInfo) | BYTE2(g_GncPStateInfo)) {
              LOBYTE(g_GncPStateInfo) = 11;
            }
          }
        }
      }
      goto LABEL_28;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP16_26UpdateStateMEDataRcvd", 262, g_GncPStateInfo);
        LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
      }
      GncP16_17HandleInvalidState();
  }
}

void GncP16_27UpdateStateClearNVReqRcvd(const char *a1, size_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v3 = g_GncPStateInfo;
  switch((char)g_GncPStateInfo)
  {
    case 0:
    case 6:
    case 9:
    case 10:
    case 14:
    case 15:
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
        goto LABEL_7;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ClearNV NotHandled in State,%hhu\n");
      goto LABEL_4;
    case 1:
    case 3:
    case 4:
    case 5:
    case 11:
    case 16:
      goto LABEL_6;
    case 2:
      GncP16_06ClearNVStore(a1, a2);
      if (a3)
      {
        GncP16_11StartME(0);
        LOBYTE(g_GncPStateInfo) = 10;
      }
      goto LABEL_7;
    case 7:
    case 8:
      if (GncP16_15CheckStopMEClearReq())
      {
LABEL_6:
        GncP16_06ClearNVStore(a1, a2);
      }
      else if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ClearNV NotHandled GPS running State,%hhu\n");
LABEL_4:
        LbsOsaTrace_WriteLog(8u, __str, v6, 4, 1);
      }
LABEL_7:
      if (v3 != g_GncPStateInfo)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v7 = mach_continuous_time();
          unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,Reset,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 77, "GncP16_27UpdateStateClearNVReqRcvd", 261, v3, g_GncPStateInfo, a1);
          LbsOsaTrace_WriteLog(8u, __str, v8, 3, 1);
        }
      }
      return;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "GncP16_27UpdateStateClearNVReqRcvd", 262, g_GncPStateInfo);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      GncP16_17HandleInvalidState();
  }
}

const char *GncP16_06ClearNVStore(const char *__src, size_t __n)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (__n <= 0xF)
  {
    int v2 = (unsigned __int8 *)xmmword_26AE66D28;
    if ((void)xmmword_26AE66D28)
    {
      *(void *)__dst = 0;
      uint64_t v4 = 0;
      strncpy_s(__dst, 0x10u, __src, __n);
      GN_GPS_Clear_NV_Data(v2, __dst);
      return (const char *)GncP01_05ClearGncPosData();
    }
  }
  return __src;
}

void GncP16_28UpdateStateResetStatus(int a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v2 = g_GncPStateInfo;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: State,%hhu,Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP16_28UpdateStateResetStatus", g_GncPStateInfo, a1);
    LbsOsaTrace_WriteLog(8u, __str, v4, 4, 1);
  }
  switch(a1)
  {
    case 0:
      char v5 = 14;
      goto LABEL_12;
    case 1:
      if (g_GncPStateInfo != 14) {
        goto LABEL_23;
      }
      goto LABEL_21;
    case 2:
      if (g_GncPStateInfo == 14) {
        LOBYTE(g_GncPStateInfo) = 15;
      }
      goto LABEL_23;
    case 3:
      char v5 = 15;
LABEL_12:
      LOBYTE(g_GncPStateInfo) = v5;
      GncP04_19SendPosEvntResp(5);
      goto LABEL_23;
    case 4:
      if (g_GncPStateInfo != 15 || !LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
        goto LABEL_23;
      }
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HW Error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "GncP16_28UpdateStateResetStatus", 1308);
      int v8 = 0;
      goto LABEL_16;
    case 5:
      if ((_BYTE)g_GncPStateInfo)
      {
        if (g_GncPStateInfo == 15)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v10 = mach_continuous_time();
            unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HW Ready\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncP16_28UpdateStateResetStatus", 1307);
            LbsOsaTrace_WriteLog(8u, __str, v11, 4, 1);
          }
LABEL_21:
          GncP16_11StartME(0);
        }
      }
      else
      {
        GncP16_02StartStateHndlrTimer(0x3E8u);
      }
      goto LABEL_23;
    default:
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_23;
      }
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP16_28UpdateStateResetStatus", 770, a1);
      int v8 = 2;
LABEL_16:
      LbsOsaTrace_WriteLog(8u, __str, v7, v8, 1);
LABEL_23:
      if (v2 != g_GncPStateInfo)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v12 = mach_continuous_time();
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 77, "GncP16_28UpdateStateResetStatus", 261, v2, g_GncPStateInfo, a1);
          LbsOsaTrace_WriteLog(8u, __str, v13, 3, 1);
        }
      }
      return;
  }
}

void GncP16_31UpdateStateMEPowerState(unsigned int a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v1 = g_GncPStateInfo;
  g_DeRegGnssCount = 0;
  switch((char)g_GncPStateInfo)
  {
    case 0:
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 14:
    case 15:
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
        goto LABEL_18;
      }
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      size_t v4 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: MEPowerState,%hhu NotHandled in State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP16_31UpdateStateMEPowerState", a1, g_GncPStateInfo);
      int v5 = 4;
      goto LABEL_4;
    case 1:
      if ((a1 & 0xFFFFFFFB) == 3)
      {
        LOBYTE(g_GncPStateInfo) = 2;
        dword_26AE5421C = 0;
        byte_26AE54218 = 0;
        GncP16_01StopStateHndlrTimer();
        if (word_26ADFF920) {
          GncP16_02StartStateHndlrTimer(1000 * (unsigned __int16)word_26ADFF920);
        }
        goto LABEL_18;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_18;
      }
      bzero(__str, 0x410uLL);
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Expected,SLEEP,MEResp,%hhu\n", v13);
      goto LABEL_34;
    case 3:
      if (a1 > 7 || ((1 << a1) & 0xB0) == 0) {
        goto LABEL_30;
      }
      LOBYTE(g_GncPStateInfo) = 4;
      dword_26AE5421C = 0;
      byte_26AE54218 = 0;
      GncP16_01StopStateHndlrTimer();
      goto LABEL_18;
    case 5:
    case 11:
      if (a1 <= 7 && ((1 << a1) & 0xB8) != 0)
      {
        GncP04_19SendPosEvntResp(3);
        GncP16_21ChkFWActRspPend(1);
        GncP04_21SendClearGnssAck(1);
        dword_26AE5421C = 0;
        byte_26AE54218 = 0;
        int v6 = 0;
        goto LABEL_17;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_18;
      }
      bzero(__str, 0x410uLL);
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Expected,SLEEP COMA,MEResp,%hhu\n", v15);
      goto LABEL_34;
    case 16:
      if (a1 <= 7 && ((1 << a1) & 0xB8) != 0)
      {
        GncP04_19SendPosEvntResp(3);
        GncP16_21ChkFWActRspPend(1);
        GncP04_21SendClearGnssAck(1);
        dword_26AE5421C = 0;
        byte_26AE54218 = 0;
        int v6 = 1;
LABEL_17:
        GncP16_11StartME(v6);
      }
      else
      {
LABEL_30:
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Expected,COMA,MEResp,%hhu\n", v14);
LABEL_34:
          size_t v4 = v10;
          int v5 = 2;
LABEL_4:
          LbsOsaTrace_WriteLog(8u, __str, v4, v5, 1);
        }
      }
LABEL_18:
      if (v1 != g_GncPStateInfo)
      {
        if (g_GncPStateInfo == 4 || g_GncPStateInfo == 2)
        {
          GncP04_21SendClearGnssAck(1);
          GncP16_21ChkFWActRspPend(1);
          GncP19_10SndMEInActiveInd();
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,MEPowerState,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 77, "GncP16_31UpdateStateMEPowerState", 261, v1, g_GncPStateInfo, a1);
          LbsOsaTrace_WriteLog(8u, __str, v9, 3, 1);
        }
      }
      return;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP16_31UpdateStateMEPowerState", 262, g_GncPStateInfo);
        LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
      }
      GncP16_17HandleInvalidState();
  }
}

void GncP16_33HandleFwActiveReq(int a1, int a2)
{
  char v3 = a1;
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v4 = g_GncPStateInfo;
  switch(a2)
  {
    case 3:
      if (a1) {
        char v5 = BYTE2(g_GncPStateInfo) | 4;
      }
      else {
        char v5 = BYTE2(g_GncPStateInfo) & 0xFB;
      }
      goto LABEL_15;
    case 2:
      if (a1) {
        char v5 = BYTE2(g_GncPStateInfo) | 2;
      }
      else {
        char v5 = BYTE2(g_GncPStateInfo) & 0xFD;
      }
      goto LABEL_15;
    case 1:
      if (a1) {
        char v5 = BYTE2(g_GncPStateInfo) | 1;
      }
      else {
        char v5 = BYTE2(g_GncPStateInfo) & 0xFE;
      }
LABEL_15:
      BYTE2(g_GncPStateInfo) = v5;
      goto LABEL_16;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP16_33HandleFwActiveReq", 770);
    LbsOsaTrace_WriteLog(8u, __str, v7, 2, 1);
  }
LABEL_16:
  switch((char)g_GncPStateInfo)
  {
    case 0:
      if (!BYTE2(g_GncPStateInfo)) {
        break;
      }
      LOBYTE(g_GncPStateInfo) = 9;
      if (a2 != 2) {
        break;
      }
      goto LABEL_33;
    case 1:
    case 3:
      if (!BYTE2(g_GncPStateInfo)) {
        break;
      }
      char v8 = 5;
      goto LABEL_21;
    case 2:
    case 4:
      if (!BYTE2(g_GncPStateInfo)) {
        break;
      }
      char v8 = 9;
LABEL_21:
      LOBYTE(g_GncPStateInfo) = v8;
      break;
    case 5:
    case 6:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
      break;
    case 7:
      if (BYTE2(g_GncPStateInfo) || GncP16_12IsAwakeFGStateReq()) {
        break;
      }
      goto LABEL_33;
    case 8:
      if (!BYTE2(g_GncPStateInfo)) {
        goto LABEL_33;
      }
      break;
    case 9:
      if (BYTE2(g_GncPStateInfo)) {
        break;
      }
      if ((a2 & 0xFFFFFFFD) == 1) {
        LOBYTE(g_GncPStateInfo) = 7;
      }
LABEL_33:
      GncP16_13CheckStopME(0);
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP16_33HandleFwActiveReq", 262, g_GncPStateInfo);
        LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
      }
      GncP16_17HandleInvalidState();
  }
  if (v4 != g_GncPStateInfo)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,FWAct,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 77, "GncP16_33HandleFwActiveReq", 261, v4, g_GncPStateInfo, BYTE2(g_GncPStateInfo));
      LbsOsaTrace_WriteLog(8u, __str, v10, 3, 1);
    }
  }
  if ((v3 & 1) == 0)
  {
    if ((g_GncPStateInfo & 0xFD) == 1)
    {
      if (a2 == 3)
      {
        BYTE8(g_GncPStateInfo) = 1;
        return;
      }
      if (a2 == 1)
      {
        BYTE7(g_GncPStateInfo) = 1;
        return;
      }
    }
    GncP03_13SendStopFWActResp(1, a2);
  }
}

BOOL GncP16_34HandleRestartAcq(void)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v0 = g_GncPStateInfo;
  if (g_GncPStateInfo > 0x10u) {
    goto LABEL_15;
  }
  if (((1 << g_GncPStateInfo) & 0xCE7F) == 0)
  {
    if (((1 << g_GncPStateInfo) & 0x180) != 0)
    {
      GncP16_10StopME(1, 0);
      LOBYTE(g_GncPStateInfo) = 16;
      goto LABEL_8;
    }
    if (g_GncPStateInfo == 16)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
        goto LABEL_8;
      }
      bzero(__str, 0x410uLL);
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", v8);
      goto LABEL_5;
    }
LABEL_15:
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP16_34HandleRestartAcq", 262, g_GncPStateInfo);
      LbsOsaTrace_WriteLog(8u, __str, v7, 2, 1);
    }
    GncP16_17HandleInvalidState();
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NotHandled State,%hhu\n");
LABEL_5:
    LbsOsaTrace_WriteLog(8u, __str, v1, 4, 1);
  }
LABEL_8:
  int v2 = g_GncPStateInfo;
  if (v0 != g_GncPStateInfo && LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 77, "GncP16_34HandleRestartAcq", 261, v0, g_GncPStateInfo);
    LbsOsaTrace_WriteLog(8u, __str, v4, 3, 1);
  }
  return v0 != v2;
}

void GncP16_51MEPowerStateInd(char a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = gnssOsa_Calloc("GncP16_51MEPowerStateInd", 1463, 1, 0x10uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    v2[12] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ME_POWER_STATE_IND =>GNCP Stat,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP16_51MEPowerStateInd", v3[12]);
      LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(134, 134, 8788483, v3);
  }
}

uint64_t GncP16_52HandleMEPowerStateInd(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ME_POWER_STATE_IND Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP16_52HandleMEPowerStateInd", *(unsigned __int8 *)(a1 + 12));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    GncP16_31UpdateStateMEPowerState(*(unsigned __int8 *)(a1 + 12));
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP16_52HandleMEPowerStateInd", 517);
    LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t GncP16_54HandleMEWakeResp(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_RSP Resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP16_54HandleMEWakeResp", *(unsigned __int8 *)(a1 + 12));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    if (*(unsigned char *)(a1 + 12))
    {
      if (g_GncPStateInfo == 6)
      {
        LOBYTE(g_GncPStateInfo) = 7;
        GncP04_19SendPosEvntResp(8);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v4 = mach_continuous_time();
          unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 77, "GncP16_54HandleMEWakeResp", 261, 6, g_GncPStateInfo);
          LbsOsaTrace_WriteLog(8u, __str, v5, 3, 1);
        }
        GncP16_04RestartMEWdt(1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MEWake Error,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP16_54HandleMEWakeResp", *(unsigned __int8 *)(a1 + 12));
        LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
      }
      GncP04_19SendPosEvntResp(9);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 69, "GncP16_54HandleMEWakeResp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v7, 0, 1);
  }
  return 0;
}

uint64_t GncP16_55HandleStartFwActiveInd(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_START_FW_ACTIVE_IND Activity,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP16_55HandleStartFwActiveInd", *(unsigned __int8 *)(a1 + 12));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    GncP16_33HandleFwActiveReq(1, *(unsigned __int8 *)(a1 + 12));
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP16_55HandleStartFwActiveInd", 517);
    LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t GncP16_56HandleStopFwActiveReq(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_STOP_FW_ACTIVE_REQ Activity,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP16_56HandleStopFwActiveReq", *(unsigned __int8 *)(a1 + 12));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    GncP16_33HandleFwActiveReq(0, *(unsigned __int8 *)(a1 + 12));
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP16_56HandleStopFwActiveReq", 517);
    LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
  }
  return 0;
}

void GncP16_99DeInitStateHndlr(void)
{
  if (g_GncPStateInfo - 7 <= 1) {
    GncP16_10StopME(1, 0);
  }
  if ((_BYTE)qword_26AE54228)
  {
    AgpsFsmStopTimer(8789766);
  }
}

uint64_t NK_Tunnel_Assist(uint64_t a1, int *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = 0u;
  *(_OWORD *)size_t v20 = 0u;
  uint64_t v4 = a2 + 6263;
  long long v17 = 0u;
  long long v18 = 0u;
  if ((Core_Get_ExtA_TunnelEP(30000, &v17) & 1) == 0)
  {
    uint64_t result = 0;
    *(unsigned char *)uint64_t v4 = 0;
    return result;
  }
  *(unsigned char *)uint64_t v4 = 1;
  int v5 = v17;
  v4[3] = a2[1] - v17;
  if (!*(unsigned char *)(a1 + 11162))
  {
    uint64_t result = 0;
    int v7 = 37;
    goto LABEL_14;
  }
  if (v5 == *(_DWORD *)(a1 + 11112))
  {
    uint64_t result = 0;
    int v7 = 38;
LABEL_14:
    v4[1] = v7;
    return result;
  }
  if (*((unsigned __int8 *)a2 + 2811) < 3u)
  {
    uint64_t result = 0;
    int v7 = 39;
    goto LABEL_14;
  }
  LOWORD(v8) = WORD4(v19);
  double v10 = *((double *)&v18 + 1);
  double v9 = *(double *)&v19;
  if (!WORD4(v19))
  {
    if (vabdd_f64(*((double *)&v18 + 1), *(double *)&v19) >= 1.0)
    {
      LOWORD(v8) = 0;
    }
    else
    {
      double v10 = *((double *)&v18 + 1) + *((double *)&v18 + 1);
      double v9 = *(double *)&v19 * 0.5;
      int v8 = (int)*(double *)(a1 + 11240);
      if (v8 > 179) {
        LOWORD(v8) = v8 - 180;
      }
    }
  }
  double v11 = *((double *)&v17 + 1);
  double v12 = *(double *)&v18;
  int v13 = (__int16)v8;
  uint64_t v14 = BYTE10(v19);
  long long v15 = *(_OWORD *)v20;
  EvLog_v("NK_Tunnel_Assist: Applying %d LL %g %g %d %d %d H %d %f %d", v5, *((double *)&v17 + 1), *(double *)&v18, (int)v10, (int)v9, (__int16)v8, BYTE10(v19), v20[0], (int)v20[1]);
  *((unsigned char *)a2 + 22992) = 1;
  a2[5751] = 0;
  *((unsigned char *)a2 + 23008) = 0;
  int v16 = *a2;
  a2[5753] = *a2;
  *((double *)a2 + 2877) = v11 * 0.0174532925;
  *((double *)a2 + 2878) = v12 * 0.0174532925;
  *((double *)a2 + 2880) = v10 * v10;
  *((double *)a2 + 2881) = v9 * v9;
  *((double *)a2 + 2882) = (double)v13 * 0.0174532925;
  *((double *)a2 + 2883) = v10 * v10;
  *((double *)a2 + 2884) = v9 * v9;
  *((void *)a2 + 2887) = 0x4039000000000000;
  *(void *)(a2 + 5749) = 0x300000001;
  if (v14)
  {
    *((unsigned char *)a2 + 23120) = 1;
    a2[5783] = 0;
    *((unsigned char *)a2 + 23136) = 0;
    a2[5785] = v16;
    *((void *)a2 + 2893) = v15;
    *((double *)a2 + 2894) = *((double *)&v15 + 1) * *((double *)&v15 + 1);
    *((double *)a2 + 2895) = *((double *)&v15 + 1) * *((double *)&v15 + 1);
    *((void *)a2 + 2897) = 0x4039000000000000;
    *(void *)(a2 + 5781) = 0x200000001;
  }
  *(_DWORD *)(a1 + 11112) = v5;
  return 1;
}

unsigned char *plc02_01EncHeader(unsigned char *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  __int16 __src = a2;
  if (a2 < 0x7F8)
  {
    *(_WORD *)a3 = 30842;
    *(unsigned char *)(a3 + 2) = *result;
    *(unsigned char *)(a3 + 3) = result[1];
    *(unsigned char *)(a3 + 4) = result[2];
    uint64_t v6 = 2;
    uint64_t result = memcpy_s("plc02_01EncHeader", 84, (void *)(a3 + 5), a4 - 5, &__src, 2uLL);
    char v7 = 0;
    do
      v7 += *(unsigned char *)(a3 + v6++);
    while (v6 != 7);
    *(unsigned char *)(a3 + 7) = v7;
  }
  else
  {
    *(_DWORD *)a5 = 7;
    if (*(unsigned char *)(a5 + 144)) {
      return (unsigned char *)snprintf((char *)(a5 + 16), 0x80uLL, "E HDR PL %d > %d", a2, 2039);
    }
  }
  return result;
}

void *plc02_02GetUInt32(uint64_t a1, int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(_DWORD *)a4 = 0;
  uint64_t v8 = *(unsigned __int16 *)(a1 + 8);
  *(_WORD *)(a4 + 6) = v8;
  uint64_t v9 = (const void *)(*(void *)a1 + v8);
  unsigned int __dst = 0;
  uint64_t result = memcpy_s("plc02_02GetUInt32", 124, &__dst, 4u, v9, 4uLL);
  *(_WORD *)(a1 + 8) += 4;
  int v11 = __dst;
  int v12 = *a2;
  if (__dst >= *a2 && __dst <= a2[1])
  {
    *(_DWORD *)a4 = 0;
    if (!a3) {
      return result;
    }
    goto LABEL_6;
  }
  *(_DWORD *)a4 = 24;
  if (*(unsigned char *)(a4 + 144)) {
    uint64_t result = (void *)snprintf((char *)(a4 + 16), 0x80uLL, "G INT B 4 [%d %d] V %d", v12, a2[1], v11);
  }
  if (a3) {
LABEL_6:
  }
    *a3 = __dst;
  return result;
}

double GLON_RK_CalcAccel(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  unsigned __int16 v3 = a1[1];
  double v4 = **a1;
  double v5 = (*a1)[2] * (*a1)[2];
  double v6 = 1.0 / sqrt(v4 * v4 + (*a1)[1] * (*a1)[1] + v5);
  double v7 = v6 * v6;
  double v8 = v6 * (v6 * v6) * -3.9860044e14;
  double v9 = v7 * 6.60628282e10;
  double v10 = 1.0 - (v7 + v7 * 4.0) * v5;
  double v11 = v10 + 2.0;
  double v12 = v8 * (v9 * v10 + 1.0) + 0.00000000531749412;
  int v13 = a1[2];
  *a2 = *v13 + v3[1] * 0.0001458423 + v4 * v12;
  a2[1] = v13[1] + *v3 * -0.0001458423 + v2[1] * v12;
  double result = v13[2] + v2[2] * (v8 * (v9 * v11 + 1.0));
  a2[2] = result;
  return result;
}

void GLON_RungeKutta4(double **a1, int a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  memset(v55, 0, sizeof(v55));
  uint64_t v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v49 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  *(_OWORD *)&v37[16] = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  *(_OWORD *)uint64_t v37 = 0u;
  double v5 = *a1;
  double v4 = a1[1];
  long long v6 = *(_OWORD *)*a1;
  *(double *)uint64_t v37 = (*a1)[2];
  long long v36 = v6;
  uint64_t v7 = *((void *)v4 + 2);
  *(_OWORD *)&v37[8] = *(_OWORD *)v4;
  *(void *)&v37[24] = v7;
  double v8 = a1[2];
  long long v9 = *(_OWORD *)v8;
  uint64_t v39 = *((void *)v8 + 2);
  long long v38 = v9;
  uint64_t v10 = *((void *)v8 + 2);
  long long v53 = *(_OWORD *)v8;
  long long v48 = v9;
  uint64_t v56 = 0;
  v30[0] = (double *)&v50;
  v30[1] = (double *)&v51 + 1;
  v30[2] = (double *)&v53;
  v28[0] = (double *)&v45;
  v28[1] = (double *)&v46 + 1;
  int v31 = 0;
  int v29 = 0;
  int v27 = 0;
  int v25 = 0;
  v28[2] = (double *)&v48;
  v26[0] = (double *)&v40;
  v26[1] = (double *)&v41 + 1;
  v26[2] = (double *)&v43;
  v24[0] = (double *)&v36;
  v24[1] = (double *)&v37[8];
  v24[2] = (double *)&v38;
  uint64_t v54 = v10;
  uint64_t v49 = v39;
  long long v43 = v9;
  uint64_t v44 = v39;
  *((_DWORD *)a1 + 6) += a2;
  GLON_RK_CalcAccel(v24, v35);
  *(_OWORD *)((char *)&v55[1] + 8) = *(_OWORD *)&v37[8];
  *((void *)&v55[2] + 1) = *(void *)&v37[24];
  double v11 = (double)a2;
  double v12 = (double)a2 * 0.5;
  for (uint64_t i = 5; i != 2; --i)
  {
    uint64_t v14 = (double *)((char *)&v50 + i * 8);
    *(v14 - 3) = v35[i] + v12 * *(double *)((char *)v55 + i * 8);
    *uint64_t v14 = *(double *)&v37[i * 8 - 16] + v12 * v34[i];
  }
  GLON_RK_CalcAccel(v30, v34);
  for (uint64_t j = 5; j != 2; --j)
  {
    int v16 = (double *)((char *)&v45 + j * 8);
    *(v16 - 3) = v35[j] + v12 * *(double *)((char *)&v50 + j * 8);
    *int v16 = *(double *)&v37[j * 8 - 16] + v12 * v33[j];
  }
  GLON_RK_CalcAccel(v28, v33);
  for (uint64_t k = 5; k != 2; --k)
  {
    long long v18 = (double *)((char *)&v40 + k * 8);
    *(v18 - 3) = v35[k] + v11 * *(double *)((char *)&v45 + k * 8);
    *long long v18 = *(double *)&v37[k * 8 - 16] + v11 * v32[k];
  }
  GLON_RK_CalcAccel(v26, v32);
  double v19 = *(double *)&v55[2];
  *double v5 = *(double *)&v36
      + v11
      * 0.166666667
      * (*((double *)&v41 + 1) + *((double *)&v55[1] + 1) + (*((double *)&v51 + 1) + *((double *)&v46 + 1)) * 2.0);
  v5[1] = *((double *)&v36 + 1)
        + v11 * 0.166666667 * (*(double *)&v42 + v19 + (*(double *)&v52 + *(double *)&v47) * 2.0);
  v5[2] = *(double *)v37
        + v11
        * 0.166666667
        * (*((double *)&v42 + 1) + *((double *)&v55[2] + 1) + (*((double *)&v52 + 1) + *((double *)&v47 + 1)) * 2.0);
  double v20 = v34[1];
  double v21 = v33[1];
  double v22 = v35[1];
  double v23 = v32[1];
  *double v4 = *(double *)&v37[8] + v11 * 0.166666667 * (v32[0] + v35[0] + (v34[0] + v33[0]) * 2.0);
  v4[1] = *(double *)&v37[16] + v11 * 0.166666667 * (v23 + v22 + (v20 + v21) * 2.0);
  v4[2] = *(double *)&v37[24] + v11 * 0.166666667 * (v32[2] + v35[2] + (v34[2] + v33[2]) * 2.0);
  GLON_RK_CalcAccel(a1, v8);
}

uint64_t LCD_SA_Debug_Ctl(uint64_t result)
{
  if (g_Enable_LCD_Debug)
  {
    unsigned __int16 v1 = (char **)result;
    unsigned __int16 v3 = *(char **)result;
    uint64_t v2 = *(char **)(result + 8);
    double v4 = *(char **)result;
    if ((unint64_t)v2 > *(void *)result) {
      double v4 = *(char **)(result + 24);
    }
    unsigned __int16 v5 = (_WORD)v4 - (_WORD)v2;
    if ((_WORD)v4 == (_WORD)v2)
    {
      if ((unint64_t)v2 >= *(void *)(result + 24))
      {
        uint64_t v2 = *(char **)(result + 16);
        *(void *)(result + 8) = v2;
LABEL_10:
        unsigned __int16 v6 = (_WORD)v3 - (_WORD)v2;
        if (v6)
        {
          double result = GN_GPS_Write_LCD_Debug(v6, v2);
          uint64_t v2 = &v1[1][result];
          v1[1] = v2;
        }
      }
    }
    else
    {
      double result = GN_GPS_Write_LCD_Debug((unsigned __int16)((_WORD)v4 - (_WORD)v2), v2);
      uint64_t v2 = &v1[1][result];
      v1[1] = v2;
      if (v2 >= v1[3])
      {
        uint64_t v2 = v1[2];
        v1[1] = v2;
        if (result == v5)
        {
          unsigned __int16 v3 = *v1;
          goto LABEL_10;
        }
      }
    }
    if (v2 == *v1)
    {
      uint64_t v7 = v1[2];
      SuplState *v1 = v7;
      v1[1] = v7;
    }
  }
  return result;
}

uint64_t LCD_SA_Debug_Flush_Check(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8) - *(_DWORD *)result;
  if (v1 <= 0) {
    v1 += *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  }
  if (v1 <= 0x2FF)
  {
    return LCD_SA_Debug_Ctl(result);
  }
  return result;
}

void SuplIdle::~SuplIdle(SuplIdle *this)
{
  SuplState::~SuplState(this);
}

{
  uint64_t vars8;

  SuplState::~SuplState(this);

  JUMPOUT(0x230F4E5D0);
}

uint64_t SuplIdle::Init(SuplIdle *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*((void *)this + 1))
  {
    uint64_t Instance = (SuplProvider *)SuplProvider::GetInstance(this);
    uint64_t v3 = *(unsigned int *)(*((void *)this + 1) + 376);
    return SuplProvider::Connect(Instance, v3);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "Init", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
    return 0;
  }
}

void SuplIdle::UpdateState(SuplIdle *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    *(unsigned char *)(v1 + 64) = 1;
    *(_WORD *)(v1 + 72) = *(_DWORD *)(v1 + 376);
    uint64_t Instance = (SimUtils *)SuplUtils::GetInstance(this);
    SuplUtils::FillSetId(Instance, *((void *)this + 1) + 80, *(_DWORD *)(*((void *)this + 1) + 532));
    uint64_t SuplInitRecd = SuplSession::GetSuplInitRecd(*((SuplSession **)this + 1));
    uint64_t v5 = *((void *)this + 1);
    if (!SuplInitRecd) {
      goto LABEL_16;
    }
    uint64_t v6 = SuplInitRecd;
    if (v5 + 264 == SuplInitRecd + 384)
    {
      *(unsigned char *)(v5 + 288) = *(unsigned char *)(SuplInitRecd + 408);
      *(unsigned char *)(v5 + 296) = *(unsigned char *)(SuplInitRecd + 416);
    }
    else
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v5 + 264), *(char **)(SuplInitRecd + 384), *(char **)(SuplInitRecd + 392), *(void *)(SuplInitRecd + 392) - *(void *)(SuplInitRecd + 384));
      *(unsigned char *)(v5 + 288) = *(unsigned char *)(v6 + 408);
      *(unsigned char *)(v5 + 296) = *(unsigned char *)(v6 + 416);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v5 + 304), *(char **)(v6 + 424), *(char **)(v6 + 432), *(void *)(v6 + 432) - *(void *)(v6 + 424));
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v5 + 328), *(char **)(v6 + 448), *(char **)(v6 + 456), *(void *)(v6 + 456) - *(void *)(v6 + 448));
      std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(v5 + 352), *(char **)(v6 + 472), *(char **)(v6 + 480), *(void *)(v6 + 480) - *(void *)(v6 + 472));
      uint64_t v5 = *((void *)this + 1);
    }
    *(unsigned char *)(v5 + 65) = 1;
    if (*(unsigned char *)(v6 + 17) == 1)
    {
      int v7 = *(unsigned __int8 *)(v6 + 18);
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "UpdateState", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
      }
      if (v7 == 12)
      {
        uint64_t v10 = *((void *)this + 1);
        *(_WORD *)(v10 + 64) = *(_WORD *)(v6 + 48);
        *(_WORD *)(v10 + 72) = *(_WORD *)(v6 + 56);
        *(unsigned char *)(v10 + 80) = *(unsigned char *)(v6 + 64);
        ASN1T_SETId::U::operator=(v10 + 88, v6 + 72);
        if (v10 + 64 != v6 + 48)
        {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v10 + 264), *(char **)(v6 + 248), *(char **)(v6 + 256), *(void *)(v6 + 256) - *(void *)(v6 + 248));
          *(unsigned char *)(v10 + 288) = *(unsigned char *)(v6 + 272);
          *(unsigned char *)(v10 + 296) = *(unsigned char *)(v6 + 280);
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v10 + 304), *(char **)(v6 + 288), *(char **)(v6 + 296), *(void *)(v6 + 296) - *(void *)(v6 + 288));
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v10 + 328), *(char **)(v6 + 312), *(char **)(v6 + 320), *(void *)(v6 + 320) - *(void *)(v6 + 312));
          std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(v10 + 352), *(char **)(v6 + 336), *(char **)(v6 + 344), *(void *)(v6 + 344) - *(void *)(v6 + 336));
        }
      }
      SuplState::UpdateState((uint64_t)this, 7, *((void *)this + 1));
      uint64_t SuplStateObject = (SuplEndRecd *)SuplSession::GetSuplStateObject(*((SuplSession **)this + 1));
      double v12 = SuplStateObject;
      if (SuplStateObject)
      {
        *(unsigned char *)(*((void *)SuplStateObject + 5) + 432) = v7;
        *(unsigned char *)(*((void *)SuplStateObject + 5) + 1) = 1;
        SuplEndRecd::SetHash(SuplStateObject);
        std::vector<unsigned char>::vector(__str, 0xBB8uLL);
        v13[0] = __str;
        v13[1] = 0;
        char v14 = 0;
        SuplEndRecd::SetSessionIdPresent(v12);
        (*(void (**)(SuplEndRecd *, void *))(*(void *)v12 + 32))(v12, v13);
        SuplEndRecd::TerminateSession((size_t)v12, -1, 3);
        if (*(void *)__str)
        {
          int v16 = *(void **)__str;
          operator delete(*(void **)__str);
        }
      }
    }
    else
    {
LABEL_16:
      SuplState::UpdateState((uint64_t)this, 2, v5);
    }
  }
}

void sub_22B974CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NK_Heading(uint64_t a1, int *a2, unsigned int a3)
{
  double v4 = (unsigned __int8 *)(a2 + 6195);
  uint64_t v5 = (unsigned char *)(a1 + 11162);
  int v6 = *(unsigned __int8 *)(a1 + 11162);
  if (*(unsigned char *)(a1 + 11162)) {
    double v7 = 1.0;
  }
  else {
    double v7 = 0.5;
  }
  double v8 = *((double *)a2 + 119);
  *((double *)a2 + 3927) = v8;
  if (*(_DWORD *)(a1 + 11032) <= *(unsigned __int16 *)(a1 + 16) && a2[242] == 1)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 140);
    if (v10 >= *(_DWORD *)(a1 + 144)) {
      unsigned int v10 = *(_DWORD *)(a1 + 144);
    }
    if (v10 >= *(_DWORD *)(a1 + 148)) {
      unsigned int v10 = *(_DWORD *)(a1 + 148);
    }
    if (v10 >= 0xB)
    {
      *(void *)(a1 + 11200) = 0;
      if (*(_DWORD *)(a1 + 11116) == 3)
      {
        a2[7858] = 2;
        int v11 = *(_DWORD *)(a1 + 11188);
        *(void *)(a1 + 11216) = *((void *)a2 + 100);
        *(void *)(a1 + 11224) = *((void *)a2 + 101);
        *(unsigned char *)(a1 + 11232) = 1;
        if (!v11) {
          *(_DWORD *)(a1 + 11188) = 1;
        }
        goto LABEL_52;
      }
      double v16 = *((double *)a2 + 115) * *((double *)a2 + 115);
      double v17 = *((double *)a2 + 114) * *((double *)a2 + 114);
      if (v16 < 0.000001 && v17 < 0.000001)
      {
        double v17 = 0.000001;
        double v16 = 0.000001;
      }
      double v18 = fmin(sqrt(57.2957795/ (v17 + v16)* ((*((double *)a2 + 3036) * v16 + *((double *)a2 + 3037) * v17)* (57.2957795/ (v17 + v16)))), 180.0);
      *((double *)a2 + 3926) = v18;
      Comp_Track8((long double *)a2 + 114);
      double v20 = v19;
      *((double *)a2 + 3925) = v19;
      double v21 = 4.0;
      if (v6 && v18 < 30.0)
      {
        if (a3 >= 8) {
          EvCrt_Illegal_Default("NK_Heading", 0x9Bu);
        }
        else {
          double v21 = dbl_22BB3FDD0[a3];
        }
      }
      double v22 = v20 - v8;
      if (v20 - v8 >= 180.0)
      {
        double v23 = -360.0;
      }
      else
      {
        if (v22 >= -180.0) {
          goto LABEL_29;
        }
        double v23 = 360.0;
      }
      double v22 = v22 + v23;
LABEL_29:
      double v24 = *((double *)a2 + 118);
      if (v4[216])
      {
        double v25 = *((double *)a2 + 2977);
        double v26 = v20 - v25;
        if (v20 - v25 >= 180.0)
        {
          double v27 = -360.0;
        }
        else
        {
          if (v26 >= -180.0)
          {
LABEL_38:
            if (v24 >= v21)
            {
              double v30 = fabs(v26);
              BOOL v37 = v30 <= 45.0;
              double v29 = 15.0 / v30;
              if (v37) {
                double v29 = 0.0;
              }
            }
            else
            {
              double v29 = v24 * 0.1;
            }
            double v20 = v25 + v29 * v26;
            *(double *)(a1 + 11192) = v20;
            *((double *)a2 + 3928) = v29;
            int v28 = 7;
LABEL_43:
            *((_DWORD *)v4 + 1663) = v28;
            *(_DWORD *)(a1 + 11188) = 3;
            int v31 = *a2;
            *(_DWORD *)(a1 + 11208) = *a2;
            if (v18 < 10.0 && v4[1] >= 6u)
            {
              *(double *)(a1 + 11240) = v20;
              *(_DWORD *)(a1 + 11248) = v31;
            }
            double v32 = v20 - v8;
            *(double *)(a1 + 11200) = v20 - v8;
            if (v20 - v8 >= 180.0)
            {
              double v33 = -360.0;
            }
            else
            {
              if (v32 >= -180.0)
              {
LABEL_51:
                *(void *)(a1 + 11216) = *((void *)a2 + 100);
                *(void *)(a1 + 11224) = *((void *)a2 + 101);
                v5[70] = 1;
LABEL_52:
                *((void *)a2 + 119) = *(void *)(a1 + 11192);
                return;
              }
              double v33 = 360.0;
            }
            *(double *)(a1 + 11200) = v32 + v33;
            goto LABEL_51;
          }
          double v27 = 360.0;
        }
        double v26 = v26 + v27;
        goto LABEL_38;
      }
      if (v24 > v21 && v18 < 60.0)
      {
        *(double *)(a1 + 11192) = v20;
        int v28 = 3;
        goto LABEL_43;
      }
      if (*v5 && *(_DWORD *)(a1 + 11116) == 2 && fabs(v22) > 90.0 && v18 > 45.0)
      {
        *(double *)(a1 + 11192) = v8;
        *((void *)a2 + 3928) = 0;
        int v28 = 6;
        double v20 = v8;
        goto LABEL_43;
      }
      if (v24 > 4.0 && v18 >= 60.0)
      {
        double v34 = 1.0 / (v18 / 60.0 * (v18 / 60.0));
        *((double *)a2 + 3928) = v34;
        double v20 = v8 + v34 * v22;
        *(double *)(a1 + 11192) = v20;
        double v35 = 360.0;
        if (v20 >= 360.0)
        {
          double v35 = -360.0;
        }
        else if (v20 >= 0.0)
        {
          goto LABEL_75;
        }
        double v20 = v20 + v35;
        *(double *)(a1 + 11192) = v20;
LABEL_75:
        int v28 = 4;
        goto LABEL_43;
      }
      if (v24 > v7)
      {
        double v36 = 1.0;
        if (v18 > 10.0)
        {
          BOOL v37 = v18 > 40.0 || v24 <= 1.0;
          if (v37)
          {
            double v38 = fabs(v22);
            double v39 = 0.93 / v38 + 0.07;
            BOOL v37 = v38 <= 2.22044605e-16;
            double v40 = 4.18834765e15;
            if (!v37) {
              double v40 = v39;
            }
            double v36 = fmin(v40, 0.25);
          }
          else
          {
            double v36 = 0.25 / (v18 / 40.0);
          }
        }
        *((double *)a2 + 3928) = v36;
        double v20 = v8 + v36 * v22;
        *(double *)(a1 + 11192) = v20;
        double v44 = 360.0;
        if (v20 >= 360.0)
        {
          double v44 = -360.0;
        }
        else if (v20 >= 0.0)
        {
          goto LABEL_96;
        }
        double v20 = v20 + v44;
        *(double *)(a1 + 11192) = v20;
LABEL_96:
        int v28 = 5;
        goto LABEL_43;
      }
      double v41 = v20 - *((double *)a2 + 3227);
      if (v41 >= 180.0)
      {
        double v42 = -360.0;
      }
      else
      {
        if (v41 >= -180.0) {
          goto LABEL_81;
        }
        double v42 = 360.0;
      }
      double v41 = v41 + v42;
LABEL_81:
      if (a3 >= 5)
      {
        if (a3 - 5 < 3) {
          goto LABEL_89;
        }
        EvCrt_Illegal_Default("NK_Heading", 0xFCu);
      }
      if (*v4 >= 8u && v18 < 10.0 && v4[1324] && fabs(v41) < 10.0 && *((double *)a2 + 3205) < 0.1)
      {
        int v28 = 3;
        double v43 = 1.0;
LABEL_90:
        *(double *)(a1 + 11192) = v20;
        *((double *)a2 + 3928) = v43;
        goto LABEL_43;
      }
LABEL_89:
      int v28 = 6;
      double v43 = 0.0;
      double v20 = v8;
      goto LABEL_90;
    }
  }
  Comp_Track8((long double *)a2 + 114);
  *((void *)a2 + 119) = v12;
  *((void *)a2 + 3925) = v12;
  double v13 = *((double *)a2 + 115) * *((double *)a2 + 115);
  double v14 = *((double *)a2 + 114) * *((double *)a2 + 114);
  if (v13 < 0.000001 && v14 < 0.000001)
  {
    double v14 = 0.000001;
    double v13 = 0.000001;
  }
  *((double *)a2 + 3926) = fmin(sqrt(57.2957795/ (v14 + v13)* ((*((double *)a2 + 3036) * v13 + *((double *)a2 + 3037) * v14)* (57.2957795/ (v14 + v13)))), 180.0);
  *((_DWORD *)v4 + 1663) = 1;
}

uint64_t Kep_Check_Almanac(int a1, uint64_t a2)
{
  int v2 = *(__int16 *)(a2 + 16);
  if (a1 - 255 > v2)
  {
    do
      v2 += 256;
    while (a1 - 255 > v2);
    *(_WORD *)(a2 + 16) = v2;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 12);
  if (v3 != 6 && (v3 == 4 ? (BOOL v5 = v4 > 5) : (BOOL v5 = 1), v5)) {
    double v6 = 4800.0;
  }
  else {
    double v6 = 6300.0;
  }
  int v7 = *(_DWORD *)(a2 + 20);
  if (v3 == 5)
  {
    double v8 = *(double *)(a2 + 72);
    double v9 = *(double *)(a2 + 40);
    double v10 = 0.000000314159265;
    double v11 = 7000.0;
    double v12 = 0.1;
    goto LABEL_42;
  }
  BOOL v13 = v3 == 4;
  BOOL v14 = v4 > 5 && v3 == 4;
  if (v14)
  {
    double v8 = *(double *)(a2 + 72);
    double v12 = 0.1;
    double v11 = 7000.0;
  }
  else
  {
    BOOL v16 = v4 < 6 && v3 == 4 || v3 == 6;
    double v11 = 6700.0;
    if (!v16) {
      double v11 = 5800.0;
    }
    double v8 = *(double *)(a2 + 72);
    if (v3 == 3)
    {
      BOOL v13 = 0;
      double v12 = 0.03;
      if ((((_BYTE)v4 - 14) & 0xFB) == 0) {
        double v12 = 0.25;
      }
      double v9 = *(double *)(a2 + 40);
      goto LABEL_34;
    }
    double v12 = 0.03;
  }
  double v9 = *(double *)(a2 + 40);
  if (v14)
  {
    double v10 = 0.000000314159265;
    goto LABEL_42;
  }
LABEL_34:
  BOOL v17 = v4 < 6 && v13;
  int v18 = v3 == 6 || v17;
  double v10 = 0.000000314159265;
  if (!v18) {
    double v10 = 0.0;
  }
LABEL_42:
  if (v7 <= 604799) {
    unsigned int v19 = v7 >> 31;
  }
  else {
    unsigned int v19 = (v7 >> 31) | 2;
  }
  if (v8 < v6) {
    v19 |= 4u;
  }
  if (v8 > v11) {
    v19 |= 8u;
  }
  if (v9 < 0.0) {
    v19 |= 0x10u;
  }
  if (v9 > v12) {
    v19 |= 0x20u;
  }
  double v20 = *(double *)(a2 + 56);
  if (v20 < -0.00000198862815) {
    v19 |= 0x40u;
  }
  if (v20 <= v10) {
    return v19;
  }
  else {
    return v19 | 0x80;
  }
}

void GLON_Alm_Calc_Corrns(double *a1, double *a2, double a3, double a4, double a5)
{
  double v8 = a2[5] + 43200.0;
  double v9 = a2[7];
  __double2 v10 = __sincos_stret(a2[8]);
  double v11 = v9 * v10.__sinval;
  double v12 = v9 * v10.__cosval;
  double v13 = a2[4] + 1.09955743;
  __double2 v14 = __sincos_stret(a4);
  __double2 v15 = __sincos_stret(a4 + a4);
  __double2 v16 = __sincos_stret(a4 * 3.0);
  __double2 v17 = __sincos_stret(a4 * 4.0);
  __double2 v18 = __sincos_stret(v13);
  double v19 = 6378.136 / a3 * (6378.136 / a3);
  double v20 = v18.__sinval * v18.__sinval * -1.5 + 1.0;
  double v21 = v19 * 0.00162393863 * v20;
  double v22 = v19 * -0.000405984656 * (v18.__sinval * v18.__sinval);
  double v23 = v14.__sinval * (v12 * 3.5)
      + 6.28318531 / v8 * a5
      + v11 * -2.5 * v14.__cosval
      + v15.__sinval * -0.5
      + v12 * -1.16666667 * v16.__sinval
      + v11 * 1.16666667 * v16.__cosval;
  double v24 = v19 * 0.00324787725 * v20;
  double v25 = v19 * 0.00162393863 * (v18.__cosval * v18.__cosval);
  *a1 = (v19
       * 0.00162393863
       * (v18.__sinval
        * v18.__sinval)
       * (v15.__cosval
        + v14.__cosval * (v12 * -0.5)
        + v11 * 0.5 * v14.__sinval
        + v12 * 3.5 * v16.__cosval
        + v11 * 3.5 * v16.__sinval)
       + v24 * (v14.__sinval * v11 + v12 * v14.__cosval))
      * a3;
  a1[1] = v22
        * (v14.__sinval
         + v16.__sinval * -2.33333333
         + v12 * 5.0 * v15.__sinval
         + v12 * -8.5 * v17.__sinval
         + v11 * 8.5 * v17.__cosval
         + v11 * v15.__cosval)
        + v21 * (v14.__sinval + 6.28318531 / v8 * v12 * a5 + v12 * 1.5 * v15.__sinval - v11 * 1.5 * v15.__cosval)
        + v25 * (v15.__sinval * (v12 * -0.5) + 6.28318531 / v8 * v12 * a5);
  a1[2] = v22
        * (v11 * -5.0 * v15.__sinval
         - (v14.__cosval
          - v16.__cosval * -2.33333333)
         + v12 * -8.5 * v17.__cosval
         - v11 * 8.5 * v17.__sinval
         + v12 * v15.__cosval)
        + v21 * (v14.__cosval + -(v11 * (6.28318531 / v8)) * a5 + v12 * 1.5 * v15.__cosval + v11 * 1.5 * v15.__sinval)
        + v25 * (v15.__sinval * (v11 * 0.5) + -(v11 * (6.28318531 / v8)) * a5);
  a1[3] = v19 * -0.00162393863 * v18.__cosval * v23;
  a1[4] = v18.__cosval
        * (v19
         * 0.000811969313
         * v18.__sinval)
        * (v15.__cosval
         + v14.__sinval * v11
         - v12 * v14.__cosval
         + v12 * 2.33333333 * v16.__cosval
         + v11 * 2.33333333 * v16.__sinval);
  a1[5] = v19
        * 0.00487181588
        * (v18.__sinval
         * v18.__sinval)
        * (v14.__sinval * (v12 * -0.291666667)
         + v11 * -0.291666667 * v14.__cosval
         + v11 * -0.680555556 * v16.__cosval
         + v12 * 0.680555556 * v16.__sinval
         + v15.__sinval * 0.25)
        + v24 * (v14.__sinval * (v12 * 1.75) + 6.28318531 / v8 * a5 + v11 * -1.75 * v14.__cosval)
        + v25 * v23;
}

uint64_t Pre_Positioning_Update_Wrapper()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v11 = 0;
  memset(v4, 0, sizeof(v4));
  int v10 = 0;
  int v5 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t v12 = 0x500000002;
  void v13[2] = 0;
  *(void *)((char *)v13 + 6) = 0;
  uint64_t v1 = 19;
  v13[0] = 0;
  do
  {
    int v2 = &v4[v1];
    *(_DWORD *)int v2 = 0;
    *((unsigned char *)v2 + 4) = 0;
    *(_OWORD *)((char *)v2 + 8) = 0uLL;
    *(_OWORD *)((char *)v2 + 24) = 0uLL;
    *(void *)((char *)v2 + 37) = 0;
    v1 += 3;
  }
  while (v2 + 3 != (_OWORD *)v14);
  bzero(v14, 0x2F2uLL);
  *(_OWORD *)&v14[760] = 0u;
  GNSS_Validate_p_list(v0, "Pre_Positioning_Update_Wrapper: Entry");
  *(void *)(v0 + 256) = v4;
  Pre_Positioning(*(void *)(v0 + 200), (uint64_t)v4, *(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned __int8 **)(v0 + 64), *(void *)(v0 + 56), *(void *)(v0 + 96), *(unsigned int **)(v0 + 104), *(unsigned int **)(v0 + 16), *(void *)(v0 + 40), *(void *)(v0 + 32));
  *(void *)(v0 + 256) = 0;
  return GNSS_Validate_p_list(v0, "Pre_Positioning_Update_Wrapper:  Exit");
}

_DWORD *NK_Set_Aid_Data(_DWORD *result, int *a2, uint64_t a3)
{
  if (!*((unsigned char *)a2 + 960))
  {
    BOOL v3 = result[5] < 5u;
    unsigned int v4 = &unk_22BB0C060;
    goto LABEL_6;
  }
  if (!result[2762] || a2[3] < 8)
  {
    BOOL v3 = result[5] < 5u;
    unsigned int v4 = &unk_22BB3FEA0;
LABEL_6:
    *(void *)(a3 + 8) = v4[v3];
    *(void *)(a3 + 32) = 0x4163125300000000;
    double v5 = 9999000.0;
    goto LABEL_7;
  }
  if (result[2757] && a2[6147] >= 5 && *((double *)a2 + 3084) < 400.0 && *((double *)a2 + 3085) < 400.0)
  {
    *(void *)a3 = *((void *)a2 + 102);
    *(_DWORD *)(a3 + 16) = *a2;
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
  }
  double v7 = *((double *)a2 + 3085);
  *(double *)(a3 + 8) = v7;
  unint64_t v8 = (int)result[5];
  double v9 = dbl_22BB3FE90[v8 > 4];
  if (v7 > v9) {
    *(double *)(a3 + 8) = v9;
  }
  if (v6
    && a2[6148] >= 4
    && ((double v10 = *((double *)a2 + 3091), v8 > 8) ? (v11 = 500000.0) : (v11 = dbl_22BB3FEB8[v8]), v10 < v11))
  {
    uint64_t v12 = *((void *)a2 + 117);
    int v13 = *a2;
    *(_DWORD *)(a3 + 40) = *a2;
    *(void *)(a3 + 24) = v12;
    *(double *)(a3 + 32) = v10;
    double v5 = *((double *)a2 + 3092);
    if (v5 < 5.0 && a2[6215] != 2 && v8 <= 4 && a2[6216] != 2 && *((double *)a2 + 118) > 0.3)
    {
      *(void *)(a3 + 48) = *((void *)a2 + 119);
      *(_DWORD *)(a3 + 64) = v13;
    }
  }
  else
  {
    *(void *)(a3 + 32) = *((void *)a2 + 3091);
    double v5 = *((double *)a2 + 3092);
  }
LABEL_7:
  *(double *)(a3 + 56) = v5;
  return result;
}

size_t Gnm06_01HandleTmZXData(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = (uint64_t (*)(void, unsigned __int8 *, uint64_t))off_26AE66DA0;
  if (off_26AE66DA0)
  {
    return v2(0, a1, a2);
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm06_01HandleTmZXData", 258);
      return LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
    }
  }
  return result;
}

void Gnm06_04SendTruthPos(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unsigned __int16 v19 = 0;
  memset_s(__s, 0x7FCuLL, 0, 0x7FCuLL);
  int v22 = 0;
  char v23 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  __int16 v17 = 0;
  char v18 = 0;
  char IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  int PlcGnssHw = Gnm03_64GetPlcGnssHw();
  plc00_03DecodeMsg(2, (uint64_t)a1, a2, (uint64_t)__s, &v19, &v22, (unsigned __int8 *)&v17, PlcGnssHw);
  if (v22)
  {
    if (IsLoggingAllowed && plc00_15GetExtErrAsString(&v22, v21, 0x104uLL))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,Err,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm06_04SendTruthPos", 776, v17, HIBYTE(v17), v21);
        LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ZXHeader %X%X%X%X%X%X%X%X\n", v7, "GNM", 87, "Gnm06_04SendTruthPos");
LABEL_17:
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
    }
  }
  else
  {
    if (__s[3] != 116)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        return;
      }
      bzero(__str, 0x410uLL);
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Command,%u\n", v16);
      goto LABEL_17;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TruthPos,Lat,%d,Long,%d,Alt,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm06_04SendTruthPos", v34, v35, v36);
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
    }
    double v11 = (float64x2_t *)gnssOsa_Calloc("Gnm06_04SendTruthPos", 129, 1, 0x28uLL);
    if (v11)
    {
      uint64_t v12 = v11;
      v13.i64[0] = v34;
      v13.i64[1] = v35;
      v11[1] = vmulq_f64(vcvtq_f64_s64(v13), (float64x2_t)xmmword_22BB3FF00);
      v11[2].f64[0] = (double)v36 * 0.1;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_VAL_TRUTH_POS_REQ =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm06_04SendTruthPos");
        LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
      }
      AgpsSendFsmMsg(128, 134, 8394752, v12);
    }
  }
}

void padMessage(char **a1, unsigned int *a2, unint64_t *a3)
{
  unsigned __int16 v6 = *a1;
  unint64_t v7 = a1[1];
  unint64_t v8 = v7 - *a1;
  if (((v8 + 9) & 0x3F) != 0) {
    unsigned int v9 = ((v8 + 9) >> 6) + 1;
  }
  else {
    unsigned int v9 = (v8 + 9) >> 6;
  }
  *a2 = v9;
  if (a3 != (unint64_t *)a1)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a3, v6, v7, v8);
    unsigned int v9 = *a2;
  }
  unint64_t v10 = v9 << 6;
  unint64_t v11 = *a3;
  unint64_t v12 = a3[1] - *a3;
  if (v10 <= v12)
  {
    if (v10 < v12) {
      a3[1] = v11 + v10;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a3, v10 - v12);
    unint64_t v11 = *a3;
  }
  *(unsigned char *)(v11 + (*((_DWORD *)a1 + 2) - *(_DWORD *)a1)) = 0x80;
  unint64_t v13 = 8 * (a1[1] - *a1);
  if (v13)
  {
    unsigned int v14 = *a2 << 6;
    if (v14)
    {
      unsigned int v15 = v14 - 1;
      do
      {
        *(unsigned char *)(*a3 + v15) = v13;
        if (v13 < 0x100) {
          break;
        }
        v13 >>= 8;
      }
      while ((unint64_t)v15--);
    }
  }
}

uint64_t *Get8BitSeqenceFrom32bitSequence(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = 0;
    unsigned __int8 v5 = 0;
    do
    {
      unsigned int v6 = *(_DWORD *)(v3 + 4 * v4);
      if (v6)
      {
        uint64_t v7 = (4 * v5) | 3;
        do
        {
          *(unsigned char *)(*a2 + v7) = v6;
          BOOL v9 = v7-- != 0;
          if (v6 < 0x100) {
            break;
          }
          v6 >>= 8;
        }
        while (v9);
        uint64_t v3 = *result;
        uint64_t v2 = result[1];
      }
      uint64_t v4 = ++v5;
    }
    while (v5 < (unint64_t)((v2 - v3) >> 2));
  }
  return result;
}

void SUPL_SHA_1::calculateSha(uint64_t a1, char **a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unsigned int v6 = operator new(0x14uLL);
  v56[1] = (uint64_t)(v6 + 5);
  v56[2] = (uint64_t)(v6 + 5);
  v6[4] = -1009589776;
  *(_OWORD *)unsigned int v6 = xmmword_22BB3FF10;
  v56[0] = (uint64_t)v6;
  unsigned int v55 = 0;
  __p = 0;
  long long v53 = 0;
  uint64_t v54 = 0;
  padMessage(a2, &v55, (unint64_t *)&__p);
  long long v51 = a3;
  uint64_t v7 = v55;
  if (v55)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v57, (char *)__p + 64 * v8, (uint64_t)__p + 64 * v8 + 64);
      unint64_t v10 = v57;
      uint64_t v9 = v58;
      unint64_t v11 = operator new(0x140uLL);
      uint64_t v12 = 0;
      v11[18] = 0u;
      v11[19] = 0u;
      v11[16] = 0u;
      v11[17] = 0u;
      v11[14] = 0u;
      v11[15] = 0u;
      v11[12] = 0u;
      v11[13] = 0u;
      v11[10] = 0u;
      v11[11] = 0u;
      v11[8] = 0u;
      v11[9] = 0u;
      v11[6] = 0u;
      v11[7] = 0u;
      v11[4] = 0u;
      v11[5] = 0u;
      v11[2] = 0u;
      v11[3] = 0u;
      unint64_t v13 = v10;
      *unint64_t v11 = 0u;
      v11[1] = 0u;
      while (4 * v12 + 4 <= (unint64_t)(v9 - (void)v10))
      {
        uint64_t v14 = 0;
        int v15 = 0;
        do
          int v15 = v13[v14++] | (v15 << 8);
        while (v14 != 4);
        *((_DWORD *)v11 + v12++) = v15;
        v13 += 4;
        if (v12 == 16)
        {
          for (uint64_t i = 0; i != 256; i += 4)
          {
            HIDWORD(v17) = *(_DWORD *)((char *)v11 + i + 32) ^ *(_DWORD *)((char *)v11 + i + 52) ^ *(_DWORD *)((char *)v11 + i + 8) ^ *(_DWORD *)((char *)v11 + i);
            LODWORD(v17) = HIDWORD(v17);
            *(_DWORD *)((char *)v11 + i + 64) = v17 >> 31;
          }
          uint64_t v18 = 0;
          int v19 = v6[1];
          int v21 = v6[3];
          int v20 = v6[4];
          int v22 = v20;
          int v23 = v6[2];
          int v24 = v21;
          int v25 = v23;
          int v26 = v19;
          int v27 = *v6;
          do
          {
            int v28 = v27;
            int v29 = v25;
            int v30 = v24;
            HIDWORD(v31) = v27;
            LODWORD(v31) = v27;
            int v32 = v22 + (v26 & v25) + (v24 & ~v26) + (v31 >> 27) + 1518500249;
            HIDWORD(v31) = v26;
            LODWORD(v31) = v26;
            int v25 = v31 >> 2;
            int v27 = v32 + *(_DWORD *)((char *)v11 + v18);
            v18 += 4;
            int v22 = v24;
            int v24 = v29;
            int v26 = v28;
          }
          while (v18 != 80);
          uint64_t v33 = 0;
          do
          {
            int v34 = v27;
            int v35 = v25;
            int v36 = v29;
            HIDWORD(v37) = v27;
            LODWORD(v37) = v27;
            int v38 = v30 + (v25 ^ v29 ^ v28) + (v37 >> 27) + 1859775393;
            HIDWORD(v37) = v28;
            LODWORD(v37) = v28;
            int v25 = v37 >> 2;
            int v27 = v38 + *(_DWORD *)((char *)v11 + v33 + 80);
            v33 += 4;
            int v30 = v29;
            int v29 = v35;
            int v28 = v34;
          }
          while (v33 != 80);
          uint64_t v39 = 0;
          do
          {
            int v40 = v27;
            int v41 = v25;
            HIDWORD(v42) = v27;
            LODWORD(v42) = v27;
            int v43 = v35;
            int v44 = v36 + (v42 >> 27) + ((v41 | v35) & v34 | v41 & v35) - 1894007588;
            HIDWORD(v42) = v34;
            LODWORD(v42) = v34;
            int v25 = v42 >> 2;
            int v27 = v44 + *(_DWORD *)((char *)v11 + v39 + 160);
            v39 += 4;
            int v36 = v35;
            int v35 = v41;
            int v34 = v40;
          }
          while (v39 != 80);
          uint64_t v45 = 0;
          do
          {
            int v46 = v27;
            int v47 = v25;
            int v48 = v41;
            HIDWORD(v49) = v27;
            LODWORD(v49) = v27;
            int v50 = v43 + (v25 ^ v41 ^ v40) + (v49 >> 27) - 899497514;
            HIDWORD(v49) = v40;
            LODWORD(v49) = v40;
            int v25 = v49 >> 2;
            int v27 = v50 + *(_DWORD *)((char *)v11 + v45 + 240);
            v45 += 4;
            int v43 = v41;
            int v41 = v47;
            int v40 = v46;
          }
          while (v45 != 80);
          *v6 += v27;
          v6[1] = v46 + v19;
          v6[2] = v25 + v23;
          v6[3] = v47 + v21;
          v6[4] = v48 + v20;
          break;
        }
      }
      operator delete(v11);
      if (v10) {
        operator delete(v10);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  Get8BitSeqenceFrom32bitSequence(v56, (void *)a1);
  if (v51 != (void *)a1) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v51, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  if (__p)
  {
    long long v53 = __p;
    operator delete(__p);
  }
  operator delete(v6);
}

void sub_22B9766C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void SUPL_SHA_256::calculateSha(uint64_t a1, char **a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unsigned int v6 = operator new(0x20uLL);
  v56[1] = (uint64_t)(v6 + 2);
  v56[2] = (uint64_t)(v6 + 2);
  *unsigned int v6 = xmmword_22BB40024;
  v6[1] = unk_22BB40034;
  v56[0] = (uint64_t)v6;
  unsigned int v55 = 0;
  __p = 0;
  long long v53 = 0;
  uint64_t v54 = 0;
  padMessage(a2, &v55, (unint64_t *)&__p);
  uint64_t v49 = a1;
  int v50 = a3;
  uint64_t v7 = v55;
  if (v55)
  {
    uint64_t v8 = 0;
    uint64_t v51 = v55;
    do
    {
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v57, (char *)__p + 64 * v8, (uint64_t)__p + 64 * v8 + 64);
      uint64_t v9 = v57;
      uint64_t v10 = v58;
      unint64_t v11 = operator new(0x100uLL);
      v11[12] = xmmword_22BB3FFE4;
      v11[13] = unk_22BB3FFF4;
      v11[14] = xmmword_22BB40004;
      v11[15] = unk_22BB40014;
      v11[8] = xmmword_22BB3FFA4;
      v11[9] = unk_22BB3FFB4;
      v11[10] = xmmword_22BB3FFC4;
      v11[11] = unk_22BB3FFD4;
      v11[4] = xmmword_22BB3FF64;
      v11[5] = unk_22BB3FF74;
      v11[6] = xmmword_22BB3FF84;
      v11[7] = unk_22BB3FF94;
      *unint64_t v11 = xmmword_22BB3FF24;
      v11[1] = unk_22BB3FF34;
      v11[2] = xmmword_22BB3FF44;
      v11[3] = unk_22BB3FF54;
      uint64_t v12 = operator new(0x140uLL);
      uint64_t v13 = 0;
      v12[18] = 0u;
      v12[19] = 0u;
      v12[16] = 0u;
      v12[17] = 0u;
      v12[14] = 0u;
      v12[15] = 0u;
      v12[12] = 0u;
      v12[13] = 0u;
      v12[10] = 0u;
      v12[11] = 0u;
      v12[8] = 0u;
      v12[9] = 0u;
      v12[6] = 0u;
      v12[7] = 0u;
      v12[4] = 0u;
      v12[5] = 0u;
      void v12[2] = 0u;
      v12[3] = 0u;
      uint64_t v14 = v9;
      *uint64_t v12 = 0u;
      v12[1] = 0u;
      while (4 * v13 + 4 <= (unint64_t)(v10 - (void)v9))
      {
        uint64_t v15 = 0;
        int v16 = 0;
        do
          int v16 = v14[v15++] | (v16 << 8);
        while (v15 != 4);
        *((_DWORD *)v12 + v13++) = v16;
        v14 += 4;
        if (v13 == 16)
        {
          uint64_t v17 = 0;
          uint64_t v18 = (char *)v12 + 36;
          int v19 = *(_DWORD *)v12;
          do
          {
            HIDWORD(v20) = *(_DWORD *)&v18[v17 + 20];
            LODWORD(v20) = HIDWORD(v20);
            int v21 = (v20 >> 17) ^ __ROR4__(HIDWORD(v20), 19) ^ (HIDWORD(v20) >> 10);
            HIDWORD(v20) = *(_DWORD *)&v18[v17 - 32];
            LODWORD(v20) = HIDWORD(v20);
            *(_DWORD *)&v18[v17 + 28] = *(_DWORD *)&v18[v17]
                                      + v19
                                      + v21
                                      + ((v20 >> 7) ^ __ROR4__(HIDWORD(v20), 18) ^ (HIDWORD(v20) >> 3));
            v17 += 4;
            int v19 = HIDWORD(v20);
          }
          while (v17 != 192);
          uint64_t v22 = 0;
          unsigned int v23 = *((_DWORD *)v6 + 1);
          int v24 = *((_DWORD *)v6 + 4);
          int v25 = *((_DWORD *)v6 + 5);
          int v26 = *((_DWORD *)v6 + 6);
          int v27 = *((_DWORD *)v6 + 7);
          int v28 = v27;
          int v29 = v26;
          int v30 = v25;
          int v31 = v24;
          unsigned int v33 = *((_DWORD *)v6 + 2);
          unsigned int v32 = *((_DWORD *)v6 + 3);
          unsigned int v34 = v32;
          unsigned int v35 = v33;
          unsigned int v36 = v23;
          unsigned int v37 = *(_DWORD *)v6;
          do
          {
            unsigned int v38 = v37;
            unsigned int v39 = v36;
            unsigned int v40 = v35;
            int v41 = v31;
            int v42 = v30;
            int v43 = v29;
            HIDWORD(v44) = v31;
            LODWORD(v44) = v31;
            int v45 = (v44 >> 6) ^ __ROR4__(v31, 11);
            unint64_t v46 = __PAIR64__(v37, __ROR4__(v31, 25));
            int v47 = (v31 & v30) + v28 + (v29 & ~v31) + *(_DWORD *)((char *)v11 + v22) + (v45 ^ v46);
            LODWORD(v46) = v37;
            int v48 = v47 + *(_DWORD *)((char *)v12 + v22);
            int v31 = v48 + v34;
            unsigned int v37 = ((v46 >> 2) ^ __ROR4__(v37, 13) ^ __ROR4__(v37, 22)) + ((v39 ^ v40) & v37 ^ v39 & v40) + v48;
            v22 += 4;
            int v28 = v29;
            int v29 = v30;
            int v30 = v41;
            unsigned int v34 = v40;
            unsigned int v35 = v36;
            unsigned int v36 = v38;
          }
          while (v22 != 256);
          *(_DWORD *)v6 += v37;
          *((_DWORD *)v6 + 1) = v38 + v23;
          *((_DWORD *)v6 + 2) = v39 + v33;
          *((_DWORD *)v6 + 3) = v40 + v32;
          *((_DWORD *)v6 + 4) = v31 + v24;
          *((_DWORD *)v6 + 5) = v41 + v25;
          *((_DWORD *)v6 + 6) = v42 + v26;
          *((_DWORD *)v6 + 7) = v43 + v27;
          uint64_t v7 = v51;
          break;
        }
      }
      operator delete(v12);
      operator delete(v11);
      if (v9) {
        operator delete(v9);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  Get8BitSeqenceFrom32bitSequence(v56, (void *)v49);
  if (v50 != (void *)v49) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v50, *(char **)v49, *(char **)(v49 + 8), *(void *)(v49 + 8) - *(void *)v49);
  }
  if (__p)
  {
    long long v53 = __p;
    operator delete(__p);
  }
  operator delete(v6);
}

void sub_22B976A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t calculateHmac<SUPL_SHA_1>(void **__src, char **a2, void **a3)
{
  unsigned __int8 v5 = (char *)__src;
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned int v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  unint64_t v6 = *((unsigned __int8 *)__src + 23);
  if ((v6 & 0x80) != 0)
  {
    unint64_t v6 = (unint64_t)__src[1];
    if (v6 - 1 < 0x100)
    {
      if (v6 <= 0x40)
      {
        unsigned __int8 v5 = (char *)*__src;
        goto LABEL_19;
      }
LABEL_7:
      std::vector<unsigned char>::vector(&v30, 0x14uLL);
      char v32 = 20;
      int v7 = v5[23];
      if (v7 >= 0) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = *(char **)v5;
      }
      if (v7 >= 0) {
        size_t v9 = v5[23];
      }
      else {
        size_t v9 = *((void *)v5 + 1);
      }
      int v27 = 0;
      uint64_t v28 = 0;
      int v26 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((char *)&v26, v8, &v8[v9], v9);
      SUPL_SHA_1::calculateSha((uint64_t)&v30, &v26, &v23);
      if (v26)
      {
        int v27 = v26;
        operator delete(v26);
      }
      if (v30)
      {
        int v31 = v30;
        operator delete(v30);
      }
      goto LABEL_23;
    }
    return -1;
  }
  if (!*((unsigned char *)__src + 23)) {
    return -1;
  }
  if (v6 >= 0x41) {
    goto LABEL_7;
  }
LABEL_19:
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v23, v5, &v5[v6], v6);
  uint64_t v11 = v24 - (unsigned char *)v23;
  if ((unint64_t)(v24 - (unsigned char *)v23) > 0x3F)
  {
    if (v11 != 64) {
      int v24 = (char *)v23 + 64;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v23, 64 - v11);
  }
LABEL_23:
  std::vector<unsigned char>::vector(&v21, 0x40uLL);
  for (uint64_t i = 0; i != 64; ++i)
    *((unsigned char *)v21 + i) = *((unsigned char *)v23 + i) ^ 0x36;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((uint64_t)&v21, (char *)__dst, *a2, a2[1], a2[1] - *a2);
  std::vector<unsigned char>::vector(&v30, 0x14uLL);
  char v32 = 20;
  std::vector<unsigned char>::vector(&v19, 0x14uLL);
  SUPL_SHA_1::calculateSha((uint64_t)&v30, (char **)&v21, &v19);
  std::vector<unsigned char>::vector(&v26, 0x14uLL);
  unsigned __int8 v29 = 20;
  std::vector<unsigned char>::vector(&v17, 0x40uLL);
  for (uint64_t j = 0; j != 64; ++j)
    *((unsigned char *)v17 + j) = *((unsigned char *)v23 + j) ^ 0x5C;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&v17, (char *)v18, (char *)v19, v20, v20 - (unsigned char *)v19);
  std::vector<unsigned char>::vector(&__p, v29);
  SUPL_SHA_1::calculateSha((uint64_t)&v26, (char **)&v17, &__p);
  if (&__p != a3) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a3, (char *)__p, v16, v16 - (unsigned char *)__p);
  }
  if (__p)
  {
    int v16 = (char *)__p;
    operator delete(__p);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v26)
  {
    int v27 = v26;
    operator delete(v26);
  }
  if (v19)
  {
    unint64_t v20 = (char *)v19;
    operator delete(v19);
  }
  if (v30)
  {
    int v31 = v30;
    operator delete(v30);
  }
  if (v21)
  {
    unsigned int __dst = v21;
    operator delete(v21);
  }
  if (v23)
  {
    int v24 = (char *)v23;
    operator delete(v23);
  }
  return 0;
}

void sub_22B976DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  int v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(v22 - 72);
  if (v25)
  {
    *(void *)(v22 - 64) = v25;
    operator delete(v25);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t calculateHmac<SUPL_SHA_256>(void **__src, char **a2, void **a3)
{
  unsigned __int8 v5 = (char *)__src;
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned int v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  unint64_t v6 = *((unsigned __int8 *)__src + 23);
  if ((v6 & 0x80) != 0)
  {
    unint64_t v6 = (unint64_t)__src[1];
    if (v6 - 1 < 0x100)
    {
      if (v6 <= 0x40)
      {
        unsigned __int8 v5 = (char *)*__src;
        goto LABEL_19;
      }
LABEL_7:
      std::vector<unsigned char>::vector(&v30, 0x20uLL);
      char v32 = 32;
      int v7 = v5[23];
      if (v7 >= 0) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = *(char **)v5;
      }
      if (v7 >= 0) {
        size_t v9 = v5[23];
      }
      else {
        size_t v9 = *((void *)v5 + 1);
      }
      int v27 = 0;
      uint64_t v28 = 0;
      int v26 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((char *)&v26, v8, &v8[v9], v9);
      SUPL_SHA_256::calculateSha((uint64_t)&v30, &v26, &v23);
      if (v26)
      {
        int v27 = v26;
        operator delete(v26);
      }
      if (v30)
      {
        int v31 = v30;
        operator delete(v30);
      }
      goto LABEL_23;
    }
    return -1;
  }
  if (!*((unsigned char *)__src + 23)) {
    return -1;
  }
  if (v6 >= 0x41) {
    goto LABEL_7;
  }
LABEL_19:
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v23, v5, &v5[v6], v6);
  uint64_t v11 = v24 - (unsigned char *)v23;
  if ((unint64_t)(v24 - (unsigned char *)v23) > 0x3F)
  {
    if (v11 != 64) {
      int v24 = (char *)v23 + 64;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v23, 64 - v11);
  }
LABEL_23:
  std::vector<unsigned char>::vector(&v21, 0x40uLL);
  for (uint64_t i = 0; i != 64; ++i)
    *((unsigned char *)v21 + i) = *((unsigned char *)v23 + i) ^ 0x36;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((uint64_t)&v21, (char *)__dst, *a2, a2[1], a2[1] - *a2);
  std::vector<unsigned char>::vector(&v30, 0x20uLL);
  char v32 = 32;
  std::vector<unsigned char>::vector(&v19, 0x20uLL);
  SUPL_SHA_256::calculateSha((uint64_t)&v30, (char **)&v21, &v19);
  std::vector<unsigned char>::vector(&v26, 0x20uLL);
  unsigned __int8 v29 = 32;
  std::vector<unsigned char>::vector(&v17, 0x40uLL);
  for (uint64_t j = 0; j != 64; ++j)
    *((unsigned char *)v17 + j) = *((unsigned char *)v23 + j) ^ 0x5C;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&v17, (char *)v18, (char *)v19, v20, v20 - (unsigned char *)v19);
  std::vector<unsigned char>::vector(&__p, v29);
  SUPL_SHA_256::calculateSha((uint64_t)&v26, (char **)&v17, &__p);
  if (&__p != a3) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a3, (char *)__p, v16, v16 - (unsigned char *)__p);
  }
  if (__p)
  {
    int v16 = (char *)__p;
    operator delete(__p);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v26)
  {
    int v27 = v26;
    operator delete(v26);
  }
  if (v19)
  {
    unint64_t v20 = (char *)v19;
    operator delete(v19);
  }
  if (v30)
  {
    int v31 = v30;
    operator delete(v30);
  }
  if (v21)
  {
    unsigned int __dst = v21;
    operator delete(v21);
  }
  if (v23)
  {
    int v24 = (char *)v23;
    operator delete(v23);
  }
  return 0;
}

void sub_22B97717C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  int v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(v22 - 72);
  if (v25)
  {
    *(void *)(v22 - 64) = v25;
    operator delete(v25);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  unsigned __int8 v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    int v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      unsigned __int8 v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *a1, const void *a2, uint64_t a3)
{
  size_t result = (char *)operator new(0x40uLL);
  int v7 = result;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 64;
  size_t v8 = a3 - (void)a2;
  if (v8) {
    size_t result = (char *)memmove(result, a2, v8);
  }
  a1[1] = &v7[v8];
  return result;
}

void sub_22B977490(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(char *result, char *a2, char *a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    size_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    int v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      char v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_22B977538(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(void *result, char *__src, char *a3, unint64_t a4)
{
  unint64_t v6 = __src;
  int v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (unsigned char *)*result;
  if (v8 - *result >= a4)
  {
    uint64_t v14 = (unsigned char *)result[1];
    if (v14 - v9 >= a4)
    {
      size_t v18 = a3 - __src;
      if (a3 != __src) {
        size_t result = memmove((void *)*result, __src, v18);
      }
      uint64_t v12 = &v9[v18];
    }
    else
    {
      char v15 = &__src[v14 - v9];
      if (v14 != v9)
      {
        size_t result = memmove((void *)*result, __src, v14 - v9);
        unint64_t v9 = (unsigned char *)v7[1];
      }
      uint64_t v12 = v9;
      if (v15 != a3)
      {
        uint64_t v12 = v9;
        int v16 = v9;
        do
        {
          char v17 = *v15++;
          *v16++ = v17;
          ++v12;
        }
        while (v15 != a3);
      }
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    size_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v12 = (unsigned char *)v7[1];
    while (v6 != a3)
    {
      char v13 = *v6++;
      *v12++ = v13;
    }
  }
  v7[1] = v12;
  return result;
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v5 = a5;
  unint64_t v6 = __src;
  uint64_t v10 = *(unsigned char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    size_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    char v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      int v16 = operator new(v15);
    }
    else {
      int v16 = 0;
    }
    int v26 = &v13[(void)v16];
    int v27 = &v13[(void)v16 + v5];
    uint64_t v28 = v26;
    do
    {
      char v29 = *v6++;
      *v28++ = v29;
      --v5;
    }
    while (v5);
    int v30 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      int v31 = __dst;
      do
      {
        char v32 = *--v31;
        *--int v26 = v32;
      }
      while (v31 != v30);
      uint64_t v10 = *(unsigned char **)(a1 + 8);
    }
    uint64_t v33 = (char *)v16 + v15;
    if (v10 != __dst) {
      memmove(v27, __dst, v10 - __dst);
    }
    unsigned int v34 = *(char **)a1;
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = &v27[v10 - __dst];
    *(void *)(a1 + 16) = v33;
    if (v34)
    {
      operator delete(v34);
    }
    return;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    size_t v18 = &__src[a5];
    unint64_t v20 = *(unsigned char **)(a1 + 8);
LABEL_17:
    int v21 = &__dst[v5];
    uint64_t v22 = &v20[-v5];
    unsigned int v23 = v20;
    if (&v20[-v5] < v10)
    {
      int v24 = (char *)(&v10[v5] - v20);
      unsigned int v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&__dst[v5], __dst, v20 - v21);
    }
    if (v18 != v6)
    {
      memmove(__dst, v6, v18 - v6);
    }
    return;
  }
  size_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  unint64_t v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
}

uint64_t Comp_PrePos(int a1, int a2, uint64_t a3, float64x2_t *a4, uint64_t a5, int a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  int v87 = 0;
  char v88 = 0;
  memset(v81, 0, sizeof(v81));
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  memset(v86, 0, sizeof(v86));
  int v79 = 0;
  char v80 = 0;
  memset(v77, 0, sizeof(v77));
  memset(v78, 0, 94);
  int v32 = Comp_CurrState(0x258u, a2, a3, (uint64_t)v81, a18, 22000000.0);
  uint64_t result = 0;
  if (v32)
  {
    double v73 = a15;
    double v34 = Comp_SVrange_Sag_Corr(&v89, v76, a4, (float64x2_t *)&v81[1]);
    unsigned int v35 = 21 - ((__int16)(91 * a6 + (((unsigned __int16)((91 * a6) >> 16) >> 6) & 0x1FF)) >> 9);
    double v36 = v34 + (a9 - *((double *)&v83 + 1)) * 299792458.0 + (double)v35;
    if (fabs(v36) >= 2130706430.0) {
      return 0;
    }
    uint64_t v37 = 0;
    *(_DWORD *)(a8 + 8) = v36;
    double v38 = 0.0;
    do
    {
      double v38 = v38 + v89.f64[v37] * *(double *)((char *)&v82 + v37 * 8);
      ++v37;
    }
    while (v37 != 3);
    uint64_t v39 = 0;
    double v40 = *(double *)&v84;
    *(double *)(a8 + 48) = (v38 + *(double *)&v84 * -299792458.0) * -5.25503547;
    do
    {
      v76[v39 + 2] = *((double *)&v83 + v39) - *(double *)(a5 + 16 + 8 * v39);
      unint64_t v41 = v39 + 3;
      --v39;
    }
    while (v41 > 1);
    uint64_t v42 = 0;
    double v43 = 0.0;
    do
    {
      double v43 = v43 + v89.f64[v42] * v76[v42];
      ++v42;
    }
    while (v42 != 3);
    uint64_t v44 = 0;
    *(double *)(a8 + 24) = (v43 + (a10 - v40) * 299792458.0) * -5.25503547;
    double v45 = 0.0;
    do
    {
      double v45 = v45 + v89.f64[v44] * *(double *)((char *)&v82 + v44 * 8);
      ++v44;
    }
    while (v44 != 3);
    uint64_t result = Comp_CurrState(0x25Du, a2, a3, (uint64_t)v77, a18 + 1.0, 22000000.0);
    if (result)
    {
      double v46 = Comp_SVrange_Sag_Corr(&v89, v76, a4, (float64x2_t *)&v77[0].f64[1]);
      uint64_t v47 = 0;
      double v48 = 0.0;
      do
      {
        double v48 = v48 + v89.f64[v47] * *(double *)((char *)v78 + v47 * 8);
        ++v47;
      }
      while (v47 != 3);
      double v49 = (v45 - v48) / 0.190293673;
      *(double *)(a8 + 40) = v49;
      if (a6 > 29)
      {
        if (a6 >= 0x3D)
        {
          double v51 = (double)((90 - a6) * (90 - a6)) * 0.000284;
          double v50 = 1.0 - v51;
          goto LABEL_21;
        }
        double v50 = (double)(a6 - 30) * 0.0166666667 + 0.25;
      }
      else
      {
        double v50 = (double)(a6 * a6) * 0.000284;
      }
      double v51 = 1.0 - v50;
LABEL_21:
      if (a13 >= 30.0 || a14 >= 50.0)
      {
        if (a13 > 10000.0)
        {
          if (a13 <= 100000.0)
          {
            if (a13 <= 50000.0) {
              double v55 = dbl_22BB400B0[a13 > 25000.0];
            }
            else {
              double v55 = 2000.0;
            }
          }
          else
          {
            double v55 = 60000.0;
          }
          a14 = v55 + a14;
        }
        if (a7)
        {
          double v51 = sqrt(v51);
          double v54 = a13 * 1.5 * (v51 + 1.0);
          double v52 = v54 + a13 * 3.0 * v51;
          *(_DWORD *)(a8 + 8) -= v54;
          double v53 = a14 * (v50 * a14);
        }
        else
        {
          double v53 = a14 * (v50 * a14) + v51 * a13 * a13;
          double v52 = 0.0;
          double v54 = 0.0;
        }
      }
      else
      {
        double v52 = 210.0;
        double v53 = 4900.0;
        double v54 = 210.0;
      }
      double v56 = *((double *)&v84 + 1);
      double v57 = v53 + *((double *)&v84 + 1) + (double)(2 * v35 * v35 + 120);
      if (a1 < 1)
      {
        double v61 = v57 + 4.0e12;
        uint64_t v60 = a1;
      }
      else
      {
        int v58 = (int)(v34 - v46) * (int)(v34 - v46);
        if (v58 <= 0x2710) {
          int v58 = 10000;
        }
        double v59 = (double)v58;
        uint64_t v60 = a1;
        double v61 = v57 + v59 * g_TOW_Stat_Var95_Table[a1];
      }
      double v62 = sqrt(v61) * 3.0;
      if (!a7) {
        double v52 = -0.0;
      }
      *(_DWORD *)(a8 + 4) = fmin(v52 + v62, 4278190080.0);
      double v63 = a11 + a10 * g_TOW_stat_Sigma_m_Table[v60];
      double v64 = v61 + v63 * v63;
      double v65 = sqrt(v64) * 3.0;
      if (!a7) {
        double v54 = -0.0;
      }
      *(_DWORD *)(a8 + 12) = fmin(v52 + sqrt(v64 + a12 * a12) * 3.0, 4278190080.0);
      *(_DWORD *)(a8 + 16) = fmin(v54 + v65, 4278190080.0);
      double v66 = v51 * a16 * a16 + v73 * v73 + v50 * a17 * a17 + 4.0;
      if (v66 < 5.0) {
        double v66 = 5.0;
      }
      if (a1 < 1)
      {
        double v68 = 9941543.2;
      }
      else
      {
        double v67 = v49 * v49;
        if (v67 < 0.0025) {
          double v67 = 0.0025;
        }
        double v68 = v67 * ((v56 * 0.0625 + a13 * a13) * 0.000001 + g_TOW_Stat_Var95_Table[v60]);
      }
      double v69 = sqrt(v66 + v68);
      if (v69 < 1400000000.0) {
        unsigned int v70 = (v69 * 3.0) + 1;
      }
      else {
        unsigned int v70 = -16777216;
      }
      *(_DWORD *)(a8 + 32) = v70;
      double v71 = sqrt(v68);
      if (v71 < 1400000000.0) {
        unsigned int v72 = (v71 * 3.0) + 1;
      }
      else {
        unsigned int v72 = -16777216;
      }
      *(_DWORD *)(a8 + 56) = v72;
      return 1;
    }
  }
  return result;
}

void GLON_Alm_Last_Asc_Pass(double *a1, double *a2, int a3, uint64_t a4, double a5, double a6)
{
  double v7 = *(double *)(a4 + 40) + 43200.0;
  double v9 = *(double *)(a4 + 16);
  double v8 = *(double *)(a4 + 24);
  double v10 = *(double *)(a4 + 32) + 1.09955743;
  double v11 = *(double *)(a4 + 48);
  double v12 = 1.0 - *(double *)(a4 + 56) * *(double *)(a4 + 56);
  int v13 = a3 - *(unsigned __int16 *)(a4 + 8);
  if (v13 < -730) {
    v13 += 1461;
  }
  if (v13 > 730) {
    v13 -= 1461;
  }
  double v14 = floor((a5 - v8 + (double)v13 * 86400.0) / v7);
  double v15 = v8 + v7 * v14 + v11 * (v14 * v14);
  double v16 = floor(v15 / 86400.0);
  double v17 = ceil(v15 / 86400.0);
  if (v15 / 86400.0 >= 0.0) {
    double v18 = v16;
  }
  else {
    double v18 = v17;
  }
  double v19 = v15 + v18 * -86400.0;
  if (v19 <= a5) {
    double v20 = v19;
  }
  else {
    double v20 = v19 + -86400.0;
  }
  *a1 = v20;
  for (double i = v9
          + (6378.136 / a6 * (6378.136 / a6) * (-6.28318531 / v7 * 0.00162393863) * cos(v10) / (v12 * v12)
           + -0.00007292115)
          * (v11 * (v14 * v14) + v7 * v14); i > 3.14159265; double i = i + -6.28318531)
    ;
  *a2 = i;
  if (i < -3.14159265)
  {
    do
      double i = i + 6.28318531;
    while (i < -3.14159265);
    *a2 = i;
  }
}

uint64_t asn1PE_SUPLEND(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_9:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  if (*a2)
  {
    uint64_t v7 = asn1PE_Position(a1, a2 + 8);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_9;
    }
  }
  if (a2[1])
  {
    uint64_t v7 = asn1PE_StatusCode(a1, a2 + 432);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_9;
    }
  }
  if (!a2[2]) {
    return 0;
  }
  uint64_t v7 = asn1PE_Ver(a1, (void *)a2 + 55);
  uint64_t v4 = v7;
  if (v7)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  return v4;
}

uint64_t asn1PD_SUPLEND(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_9:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *(unsigned char *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  *(unsigned char *)(a2 + 1) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  *(unsigned char *)(a2 + 2) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v8 = asn1PD_Position(a1, a2 + 8);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_9;
    }
  }
  if (*(unsigned char *)(a2 + 1))
  {
    uint64_t v8 = asn1PD_StatusCode(a1, (unsigned char *)(a2 + 432));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_9;
    }
  }
  if (*(unsigned char *)(a2 + 2))
  {
    uint64_t v8 = asn1PD_Ver(a1, (unint64_t *)(a2 + 440));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_9;
    }
  }
  if (!v9) {
    return 0;
  }
  uint64_t v8 = Asn1Coder::SkipSequenceExtension(a1);
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  return v5;
}

uint64_t GM_Get_Min_SNR(uint64_t a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (a2 - 1 < 0)
  {
    return 10;
  }
  else
  {
    unsigned __int8 v3 = 0;
    uint64_t v4 = v2 + 1;
    uint64_t v5 = (_WORD *)(a1 + 36 * v2 + 8);
    do
    {
      if (Is_Legal(*((_DWORD *)v5 - 2))
        && (*v5 & 8) != 0
        && *((unsigned __int8 *)v5 - 4) > v3)
      {
        unsigned __int8 v3 = *((unsigned char *)v5 - 4);
      }
      v5 -= 18;
    }
    while (v4-- > 1);
    if (v3 <= 0x21u) {
      return 10;
    }
    else {
      return (v3 - 23);
    }
  }
}

char *GetStaticLpPrivate(void)
{
  {
    T_LP_PRIVATE::T_LP_PRIVATE((T_LP_PRIVATE *)&GetStaticLpPrivate(void)::lp_prv);
  }
  return &GetStaticLpPrivate(void)::lp_prv;
}

void sub_22B9785E8(_Unwind_Exception *a1)
{
}

void T_LP_PRIVATE::T_LP_PRIVATE(T_LP_PRIVATE *this)
{
  *(unsigned char *)this = 0;
  *((_WORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  *((unsigned char *)this + 16) = 0;
  memset_s((char *)this + 24, 0x528uLL, 0, 0x528uLL);
  *((unsigned char *)this + 1344) = 0;
  *((_DWORD *)this + 337) = 0x7FFFFFFF;
  *((unsigned char *)this + 1352) = 0;
  *((unsigned char *)this + 1360) = 0;
  memset_s((char *)this + 1356, 4uLL, 0, 4uLL);
  memset_s((char *)this + 1364, 8uLL, 0, 8uLL);
}

char *rrl_free_asn_pdu(void)
{
  uint64_t result = GetStaticLpPrivate();
  if (byte_26AE542E8 == 1)
  {
    GetStaticLpPrivate();
    GenericFreeSort(&qword_26AE542F0, (uint64_t)&ySDL_T_RASN_PDU);
    GetStaticLpPrivate();
    memset_s(&qword_26AE542F0, 0x528uLL, 0, 0x528uLL);
    uint64_t result = GetStaticLpPrivate();
    byte_26AE542E8 = 0;
  }
  return result;
}

uint64_t rrl_init(void)
{
  GetStaticLpPrivate(void)::lp_prv = 1;
  GetStaticLpPrivate();
  byte_26AE542DC = 0;
  GetStaticLpPrivate();
  byte_26AE542E8 = 0;
  GetStaticLpPrivate();
  byte_26AE54818 = 0;
  return 1;
}

uint64_t rrl_destroy(void)
{
  GetStaticLpPrivate();
  if (GetStaticLpPrivate(void)::lp_prv == 1) {
    rrl_free_asn_pdu();
  }
  GetStaticLpPrivate();

  return memset_s(&GetStaticLpPrivate(void)::lp_prv, 0x560uLL, 0, 0x560uLL);
}

char *rrl_clean(void)
{
  uint64_t result = GetStaticLpPrivate();
  if (GetStaticLpPrivate(void)::lp_prv == 1)
  {
    rrl_free_asn_pdu();
    GetStaticLpPrivate();
    return (char *)memset_s(&byte_26AE54818, 0x1CuLL, 0, 0x1CuLL);
  }
  return result;
}

uint64_t rrl_clear_gnss_ad(void *__s, int a2)
{
  if (a2 == 1 || !*((unsigned char *)__s + 304))
  {
    uint64_t v4 = __s[40];
    if (v4) {
      MEMORY[0x230F4E5A0](v4, 0x1000C80A2FAA732);
    }
    __s[40] = 0;
    if (a2 == 1) {
      goto LABEL_21;
    }
  }
  if (!*((unsigned char *)__s + 224))
  {
LABEL_21:
    uint64_t v5 = __s[36];
    if (v5) {
      MEMORY[0x230F4E5A0](v5, 0x1000C804359ADF2);
    }
    __s[36] = 0;
    if (a2 == 1) {
      goto LABEL_20;
    }
  }
  if (!*((unsigned char *)__s + 336))
  {
LABEL_20:
    uint64_t v6 = __s[44];
    if (v6) {
      MEMORY[0x230F4E5A0](v6, 0x1000C800FACD818);
    }
    __s[44] = 0;
    if (a2 == 1) {
      goto LABEL_15;
    }
  }
  if (!*((unsigned char *)__s + 388))
  {
LABEL_15:
    int v7 = (void *)__s[50];
    if (v7)
    {
      free(v7);
      __s[50] = 0;
    }
  }
  uint64_t result = memset_s(__s, 0x278uLL, 0, 0x278uLL);
  *((_WORD *)__s + 252) = 1;
  *((unsigned char *)__s + 520) = -1;
  *((unsigned char *)__s + 24) = -1;
  *((unsigned char *)__s + 18) = -1;
  *((unsigned char *)__s + 236) = -1;
  *((unsigned char *)__s + 284) = -1;
  return result;
}

BOOL rrl_set_pos_caps(unsigned __int8 *a1)
{
  GetStaticLpPrivate();
  if (GetStaticLpPrivate(void)::lp_prv != 1) {
    return 0;
  }
  int v2 = a1[2];
  if (v2 == 1)
  {
    int v3 = a1[5];
    int v4 = v3 == 1;
    int v5 = a1[4];
    BOOL v6 = v5 == 1;
    if (v5 == 1) {
      v4 |= 2u;
    }
    int v7 = a1[3];
    char v9 = v6 || v3 == 1;
    if (v7 == 1) {
      int v10 = v4 | 4;
    }
    else {
      int v10 = v4;
    }
    if (v7 == 1) {
      LOBYTE(v2) = 1;
    }
    else {
      LOBYTE(v2) = v9;
    }
  }
  else
  {
    int v10 = 0;
  }
  GetStaticLpPrivate();
  byte_26AE542DC = 1;
  byte_26AE542DD = v2;
  dword_26AE542E0 = v10;
  byte_26AE542E4 = 0;
  GetStaticLpPrivate();
  return byte_26AE542DD != 0;
}

uint64_t rrl_process_downlink_message(uint64_t a1, uint64_t a2, unsigned char *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *a3 = 0;
  *a4 = 15;
  *(unsigned char *)a6 = 0;
  *(unsigned char *)(a6 + 4) = 0;
  *(unsigned char *)(a6 + 9) = 0;
  if (a1 && *(void *)(a1 + 8))
  {
    rrl_free_asn_pdu();
    uint64_t v11 = *(void *)(a1 + 8);
    int v12 = *(_DWORD *)a1;
    GetStaticLpPrivate();
    int v13 = decode_asn1_message(1, 0, v11, v12, &qword_26AE542F0, 0);
    GetStaticLpPrivate();
    byte_26AE542E8 = 1;
    if (v13)
    {
      ms_report_exception(2, 24578, 362, "rrl_process_downlink_message");
      if ((v13 - 32) < 2)
      {
        int v14 = 3;
      }
      else
      {
        if (v13 == 1)
        {
          char v16 = 0;
          int v14 = 0;
          uint64_t v15 = 99;
          goto LABEL_47;
        }
        if (v13 == 22)
        {
          int v14 = 4;
        }
        else
        {
          ms_report_exception(1, 24590, 383, "rrl_process_downlink_message");
          int v14 = 2;
        }
      }
      char v16 = 0;
      uint64_t v15 = 1;
      *a3 = 1;
    }
    else
    {
      *(unsigned char *)a6 = 1;
      *(unsigned char *)(a6 + 8) = **(unsigned char **)(a1 + 8) >> 5;
      GetStaticLpPrivate();
      switch(dword_26AE542F8)
      {
        case 0:
          *a4 = 0;
          *a5 = 2;
          GetStaticLpPrivate();
          char v16 = 1;
          if (byte_26AE545A4 != 1) {
            goto LABEL_32;
          }
          *(unsigned char *)(a6 + 9) = 1;
          GetStaticLpPrivate();
          if (dword_26AE5459C < 0 || (GetStaticLpPrivate(), dword_26AE5459C > 255))
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              GetStaticLpPrivate();
              unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx smlc_code,%d\n", v19, "PSP", 69, "rrl_process_downlink_message", 772, dword_26AE5459C);
              LbsOsaTrace_WriteLog(0x13u, __str, v20, 0, 1);
            }
          }
          else
          {
            GetStaticLpPrivate();
            *(unsigned char *)(a6 + 12) = dword_26AE5459C;
          }
          GetStaticLpPrivate();
          uint64_t v15 = 0;
          int v14 = 0;
          int v21 = dword_26AE545A0;
          goto LABEL_42;
        case 1:
        case 3:
        case 6:
          char v16 = 0;
          int v14 = 0;
          *a3 = 1;
          *a5 = 3;
          break;
        case 2:
          *a4 = 2;
          char v16 = 1;
          *a5 = 1;
          GetStaticLpPrivate();
          if (byte_26AE5458C == 1)
          {
            *(unsigned char *)(a6 + 9) = 1;
            GetStaticLpPrivate();
            if (dword_26AE54584 < 0 || (GetStaticLpPrivate(), dword_26AE54584 > 255))
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                GetStaticLpPrivate();
                unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx smlc_code,%d\n", v22, "PSP", 69, "rrl_process_downlink_message", 772, dword_26AE54584);
                LbsOsaTrace_WriteLog(0x13u, __str, v23, 0, 1);
              }
            }
            else
            {
              GetStaticLpPrivate();
              *(unsigned char *)(a6 + 12) = dword_26AE54584;
            }
            GetStaticLpPrivate();
            uint64_t v15 = 0;
            int v14 = 0;
            int v21 = dword_26AE54588;
LABEL_42:
            *(_DWORD *)(a6 + 16) = v21;
          }
          else
          {
LABEL_32:
            uint64_t v15 = 0;
            int v14 = 0;
          }
          goto LABEL_47;
        case 4:
          *a3 = 1;
          *a5 = 3;
          GetStaticLpPrivate();
          if (byte_26AE54340 != 1) {
            goto LABEL_28;
          }
          *(unsigned char *)(a6 + 9) = 1;
          GetStaticLpPrivate();
          if (dword_26AE54334 < 0 || (GetStaticLpPrivate(), dword_26AE54334 > 255))
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              GetStaticLpPrivate();
              unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx smlc_code,%d\n", v24, "PSP", 69, "rrl_process_downlink_message", 772, dword_26AE54334);
              LbsOsaTrace_WriteLog(0x13u, __str, v25, 0, 1);
            }
          }
          else
          {
            GetStaticLpPrivate();
            *(unsigned char *)(a6 + 12) = dword_26AE54334;
          }
          GetStaticLpPrivate();
          char v16 = 0;
          int v14 = 0;
          *(_DWORD *)(a6 + 16) = dword_26AE54338;
          break;
        case 5:
          *a4 = 5;
          *a5 = 0;
          *(unsigned char *)(a6 + 9) = 1;
          GetStaticLpPrivate();
          if (dword_26AE54300 < 0 || (GetStaticLpPrivate(), dword_26AE54300 > 255))
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              GetStaticLpPrivate();
              unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx smlc_code,%d\n", v17, "PSP", 69, "rrl_process_downlink_message", 772, dword_26AE54300);
              LbsOsaTrace_WriteLog(0x13u, __str, v18, 0, 1);
            }
          }
          else
          {
            GetStaticLpPrivate();
            *(unsigned char *)(a6 + 12) = dword_26AE54300;
          }
          GetStaticLpPrivate();
          uint64_t v15 = 0;
          int v14 = 0;
          *(_DWORD *)(a6 + 16) = dword_26AE54304;
          char v16 = 1;
          goto LABEL_47;
        default:
          ms_report_exception(1, 24590, 524, "rrl_process_downlink_message");
LABEL_28:
          char v16 = 0;
          int v14 = 0;
          break;
      }
      uint64_t v15 = 0xFFFFFFFFLL;
    }
LABEL_47:
    int v26 = *(void **)(a1 + 8);
    if (v26)
    {
      free(v26);
      *(void *)(a1 + 8) = 0;
    }
    *(_DWORD *)a1 = 0;
    if (*a3 == 1 && rrl_error_handling(v14, a1) != 1)
    {
      *a3 = 0;
      uint64_t v15 = 99;
    }
    else if (v16)
    {
      return 0;
    }
    rrl_free_asn_pdu();
    return v15;
  }
  ms_report_exception(2, 3, 348, "rrl_process_downlink_message");
  return 99;
}

uint64_t rrl_encode_air_message(uint64_t a1, int *a2)
{
  __src[1] = *(void **)MEMORY[0x263EF8340];
  __src[0] = 0;
  LODWORD(size) = 0;
  if (encode_asn1_message(1, 0, (uint64_t *)__src, 0, &size, a2))
  {
    ms_report_exception(2, 24579, 579, "rrl_encode_air_message");
    int v3 = 0;
    uint64_t v4 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v4 = 1;
    int v5 = gnssOsa_Calloc("posp_alloc", 18, 1, size);
    *(void *)(a1 + 8) = v5;
    memcpy_s("rrl_encode_air_message", 586, v5, size, __src[0], size);
    int v3 = size;
  }
  *(_DWORD *)a1 = v3;
  return v4;
}

uint64_t Gnm55_12ReadMENv(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v28 = 0;
  if (gnssOsa_getNvSize(1, &v28))
  {
    if (!v28)
    {
      uint64_t v9 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Empty file\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm55_12ReadMENv");
        int v13 = 4;
LABEL_25:
        LbsOsaTrace_WriteLog(0xBu, __str, v12, v13, 1);
        return 0;
      }
      return v9;
    }
    uint64_t v4 = a2;
    size_t Nv = gnssOsa_readNv(1, a1, a2);
    if (Nv == a2)
    {
      unsigned int __dst = 0;
      if (a2 > 3)
      {
        memcpy_s("Gnm55_30GetNVDataVersion", 432, &__dst, 4u, a1, 4uLL);
        uint64_t v8 = __dst;
        if (__dst == 3)
        {
          *(_WORD *)__str = 0;
          memcpy_s("Gnm55_36GetNVDataCS", 556, __str, 2u, a1 + 6, 2uLL);
          int v16 = *(unsigned __int16 *)__str;
          if (v16 != Gnm27_04ComputeCS(a1, 6u))
          {
            uint64_t v9 = 0;
            if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
              return v9;
            }
            bzero(__str, 0x410uLL);
            uint64_t v25 = 771;
            unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            int v10 = "%10u %s%c %s: #%04hx LTL:HeaderCS\n";
            goto LABEL_24;
          }
          *(_WORD *)__str = 0;
          memcpy_s("Gnm55_36GetNVDataCS", 556, __str, 2u, a1 + 1538, 2uLL);
          int v17 = *(unsigned __int16 *)__str;
          if (v17 != Gnm27_04ComputeCS(a1 + 8, 0x5FAu))
          {
            uint64_t v9 = 0;
            if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
              return v9;
            }
            bzero(__str, 0x410uLL);
            uint64_t v25 = 771;
            unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            int v10 = "%10u %s%c %s: #%04hx LTL:Master LTL Table\n";
            goto LABEL_24;
          }
          *(_WORD *)__str = 0;
          memcpy_s("Gnm55_36GetNVDataCS", 556, __str, 2u, a1 + 3032, 2uLL);
          int v18 = *(unsigned __int16 *)__str;
          if (v18 != Gnm27_04ComputeCS(a1 + 1540, 0x5D4u))
          {
            uint64_t v9 = 0;
            if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
              return v9;
            }
            bzero(__str, 0x410uLL);
            uint64_t v25 = 771;
            unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            int v10 = "%10u %s%c %s: #%04hx LTL:KF CLT ADC Data\n";
            goto LABEL_24;
          }
          unint64_t v19 = a1 + 3034;
          *(_WORD *)__str = 0;
          memcpy_s("Gnm55_36GetNVDataCS", 556, __str, 2u, a1 + 4548, 2uLL);
          int v20 = *(unsigned __int16 *)__str;
          if (v20 != Gnm27_04ComputeCS(v19, 0x5EAu))
          {
            uint64_t v9 = 0;
            if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
              return v9;
            }
            bzero(__str, 0x410uLL);
            uint64_t v25 = 771;
            unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            int v10 = "%10u %s%c %s: #%04hx LTL:Init LTL Table\n";
            goto LABEL_24;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
            return 1;
          }
          bzero(__str, 0x410uLL);
          uint64_t v21 = mach_continuous_time();
          unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Read ME variable data Size,%zubytes\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 73, "Gnm55_12ReadMENv", v4);
          uint64_t v9 = 1;
          LbsOsaTrace_WriteLog(0xBu, __str, v22, 4, 1);
          return v9;
        }
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v6 = mach_continuous_time();
          unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm55_30GetNVDataVersion", 770);
          LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
        }
        uint64_t v8 = 0;
      }
      uint64_t v9 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v26 = v8;
        uint64_t v27 = 3;
        uint64_t v25 = 263;
        int v10 = "%10u %s%c %s: #%04hx LTL:Version,Read,%u,Expected,%u\n";
        goto LABEL_23;
      }
    }
    else
    {
      size_t v14 = Nv;
      uint64_t v9 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v26 = a2;
        uint64_t v27 = v14;
        uint64_t v25 = 1571;
        int v10 = "%10u %s%c %s: #%04hx LTL:ReqRead,%u,ActualRead,%zu\n";
LABEL_23:
        unint64_t v24 = v15;
        goto LABEL_24;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v25 = 1572;
      unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v10 = "%10u %s%c %s: #%04hx\n";
LABEL_24:
      size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, v10, v24, "GNM", 87, "Gnm55_12ReadMENv", v25, v26, v27);
      int v13 = 2;
      goto LABEL_25;
    }
  }
  return v9;
}

uint64_t Gnm55_13WriteMENv(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = gnssOsa_storeBufferToNv(1, a1, a2);
  if (v3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:WriteSuccess Len,%ubytes\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm55_13WriteMENv", a2);
      int v6 = 4;
LABEL_6:
      LbsOsaTrace_WriteLog(0xBu, __str, v5, v6, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:ReqWrite,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm55_13WriteMENv", 1570, a2);
    int v6 = 2;
    goto LABEL_6;
  }
  return v3;
}

uint64_t Gnm55_14ReadXOCal(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  memset(__src, 0, sizeof(__src));
  uint64_t v12 = 0;
  if ((gnssOsa_getNvSize(2, &v12) & 1) == 0)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = 1572;
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    size_t v5 = "%10u %s%c %s: #%04hx\n";
    goto LABEL_11;
  }
  if (gnssOsa_readNv(2, __src, 0x44uLL) != 68)
  {
    int v6 = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:ReqRead,%u,ActualRead,%zu\n", v7, "GNM");
    goto LABEL_12;
  }
  int v2 = HIWORD(v17);
  if (v2 == Gnm27_04ComputeCS(__src, 0x42u))
  {
    memcpy_s("Gnm55_14ReadXOCal", 272, (void *)(a1 + 12), 0x2Cu, __src, 0x2CuLL);
    memcpy_s("Gnm55_14ReadXOCal", 277, (void *)(a1 + 56), 0x12u, (char *)&v15 + 12, 0x12uLL);
    memcpy_s("Gnm55_14ReadXOCal", 282, (void *)(a1 + 74), 4u, (char *)&v16 + 14, 4uLL);
    return 1;
  }
  int v9 = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  uint64_t result = 0;
  if (v9)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = 771;
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    size_t v5 = "%10u %s%c %s: #%04hx LTL:Coef Payload\n";
LABEL_11:
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, v5, v10, "GNM", 87, "Gnm55_14ReadXOCal", v11);
LABEL_12:
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
    return 0;
  }
  return result;
}

uint64_t Gnm55_15WriteXOCal(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  memset(__dst, 0, sizeof(__dst));
  memcpy_s("Gnm55_15WriteXOCal", 298, __dst, 0x44u, (const void *)(a1 + 12), 0x2CuLL);
  memcpy_s("Gnm55_15WriteXOCal", 302, (char *)&v10 + 12, 0x18u, (const void *)(a1 + 56), 0x12uLL);
  memcpy_s("Gnm55_15WriteXOCal", 306, (char *)&v11 + 14, 6u, (const void *)(a1 + 74), 4uLL);
  HIWORD(v12) = Gnm27_04ComputeCS((unsigned __int8 *)__dst, 0x42u);
  uint64_t v2 = gnssOsa_storeBufferToNv(2, __dst, 0x44uLL);
  if (v2)
  {
    gnssOsa_flushNv();
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      size_t v4 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:MECoef store success len,%ubytes\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm55_15WriteXOCal", 68);
      int v5 = 4;
LABEL_6:
      LbsOsaTrace_WriteLog(0xBu, __str, v4, v5, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    size_t v4 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:ME Coef File ReqWrite,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm55_15WriteXOCal", 1570, 68);
    int v5 = 2;
    goto LABEL_6;
  }
  return v2;
}

size_t Gnm55_16GetVarNvData(unsigned __int8 *a1, unsigned int a2, int a3, unsigned __int8 *a4, unsigned int a5, unsigned int *a6, int a7)
{
  size_t result = Gnm55_18GetNvDataSize(a7);
  if (result)
  {
    int v14 = result;
    uint64_t v15 = *a6;
    if ((unint64_t)(v15 + result) + 2 <= a5 && (int)result + a3 <= a2)
    {
      a4[v15] = result;
      a4[*a6 + 1] = BYTE1(result);
      memcpy_s("Gnm55_16GetVarNvData", 351, &a4[*a6 + 2], a5 - *a6 - 2, &a1[a3], result);
      *a6 += v14 + 2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t Gnm55_18GetNvDataSize(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v2 = a1 - 1;
  uint64_t result = 1004;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 502;
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      goto LABEL_6;
    case 3:
      uint64_t result = 720;
      break;
    case 7:
      uint64_t result = 768;
      break;
    default:
      if (a1 == 16)
      {
        uint64_t result = 4;
      }
      else if (a1 == 32)
      {
        uint64_t result = 24;
      }
      else
      {
LABEL_6:
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
        uint64_t result = 0;
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v5 = mach_continuous_time();
          unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:NVType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm55_18GetNvDataSize", 770, a1);
          LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
          uint64_t result = 0;
        }
      }
      break;
  }
  return result;
}

BOOL Gnm55_17GetMENvData(unsigned __int8 *a1, unsigned int a2, unsigned __int16 *a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7)
{
  size_t NvDataSize = Gnm55_18GetNvDataSize(a7);
  if (!NvDataSize) {
    return 0;
  }
  uint64_t v14 = *a3;
  if ((int)NvDataSize + (int)v14 + 2 > a2 || (int)NvDataSize + a6 > a5) {
    return 0;
  }
  int v17 = &a1[v14];
  unsigned __int16 v18 = a1[v14] | (a1[v14 + 1] << 8);
  BOOL v15 = v18 == NvDataSize;
  if (v18 == NvDataSize)
  {
    memcpy_s("Gnm55_17GetMENvData", 387, &a4[a6], a5 - a6, v17 + 2, NvDataSize);
    LOWORD(v14) = *a3;
  }
  *a3 = v18 + v14 + 2;
  return v15;
}

uint64_t Gnm55_34GetAgeingTime(unsigned __int8 *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t __dst = 0;
  memcpy_s("Gnm55_34GetAgeingTime", 514, &__dst, 8u, a1 + 1522, 8uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:PrevAgeing GPSTime,%llus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm55_34GetAgeingTime", __dst);
    LbsOsaTrace_WriteLog(0xBu, __str, v2, 4, 1);
  }
  return __dst;
}

uint64_t Gnm55_35GetGenMasterLTLTime(unsigned __int8 *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t __dst = 0;
  memcpy_s("Gnm55_35GetGenMasterLTLTime", 536, &__dst, 8u, a1 + 1530, 8uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:MasterLTL GPSTime,%llus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm55_35GetGenMasterLTLTime", __dst);
    LbsOsaTrace_WriteLog(0xBu, __str, v2, 4, 1);
  }
  return __dst;
}

void *Gnm55_46SetGenMasterLTLTime(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 > 0x601)
  {
    *(void *)__str = Gnm53_11GetCurrentReferenceTime();
    if (*(void *)__str < (unint64_t)Gnm53_12GetBirthTime()) {
      *(void *)__str = Gnm53_12GetBirthTime();
    }
    return memcpy_s("Gnm55_46SetGenMasterLTLTime", 721, a1 + 1530, 8u, __str, 8uLL);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm55_46SetGenMasterLTLTime", 770);
      return (void *)LbsOsaTrace_WriteLog(0xBu, __str, v4, 2, 1);
    }
  }
  return result;
}

size_t Gnm55_47SetNVDataCS(unsigned __int8 *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = a3;
  if ((unint64_t)a3 + 2 <= a2)
  {
    size_t result = Gnm27_04ComputeCS(a1, a3);
    *(_WORD *)&a1[v3] = result;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm55_47SetNVDataCS", 770);
      return LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
    }
  }
  return result;
}

uint64_t KfirController_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v9 = *MEMORY[0x263EF8340];
  bzero(v8, 0x42F0uLL);
  KFP_setDefaultConfig(v8);
  KFP_init(v6 + 129376, (uint64_t)v8);
  *(void *)(v6 + 2037080) = 0xFFEFFFFFFFFFFFFFLL;
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(v6 + 2037088), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(v6 + 2037120), 0.0);
  return 1;
}

uint64_t KfirController_ProcessMeas(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  if (MeasSyncher_getNextRecord(a1, (uint64_t *)v12))
  {
    uint64_t v6 = 1;
    do
    {
      uint64_t v7 = v6;
      char v8 = KFP_run(a1 + 129376, (uint64_t)v12, 1, a3);
      if ((v8 & 1) == 0) {
        break;
      }
      BOOL NextRecord = MeasSyncher_getNextRecord(a1, (uint64_t *)v12);
      uint64_t v6 = (v7 + 1);
    }
    while (NextRecord);
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = 0;
  }
  if (v7) {
    char v10 = v8;
  }
  else {
    char v10 = 1;
  }
  *a2 = v10;
  return v7;
}

void KfirController_GetPosition(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v143 = *MEMORY[0x263EF8340];
  double v116 = 0.0;
  TCU_GetOutTime((const char *)a2, &v116);
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v10 = *(double *)(g_TCU + 8);
    }
    else {
      double v10 = 0.0;
    }
    double v8 = v116;
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f generating position for = %4.6f time ", "KfirController_GetPosition", 198, v9, v10, v116);
  }
  else
  {
    double v8 = v116;
  }
  bzero((void *)(a1 + 2027888), 0x23E8uLL);
  KFP_createOutputFromKFPool(a1 + 129376, (int *)(a1 + 2027888), v8);
  bzero(a4, 0x3F8uLL);
  double v11 = *(double *)(a2 + 40) - *(double *)(a2 + 64);
  *((double *)a4 + 1) = v11;
  __int16 v12 = *(_WORD *)(a2 + 26);
  *((_WORD *)a4 + 11) = v12;
  double v13 = 604800.0;
  if (v11 >= 604800.0)
  {
    __int16 v14 = 1;
    double v13 = -604800.0;
  }
  else
  {
    if (v11 >= 0.0) {
      goto LABEL_12;
    }
    __int16 v14 = -1;
  }
  *((double *)a4 + 1) = v11 + v13;
  *((_WORD *)a4 + 11) = v14 + v12;
LABEL_12:
  a4[4] = *(_DWORD *)(a2 + 20);
  *((unsigned char *)a4 + 20) = *(unsigned char *)(a2 + 16);
  a4[1] = 0;
  double v15 = *(double *)(a2 + 32);
  if (v15 >= 0.0)
  {
    LODWORD(v13) = *(_DWORD *)(a2 + 76);
    a4[1] = (v15 + (double)*(unint64_t *)&v13 * -4294967300.0);
  }
  *a4 = *(_DWORD *)a2;
  int v16 = *(unsigned __int8 *)(a1 + 2036336);
  *((unsigned char *)a4 + 24) = v16;
  *(void *)(a4 + 7) = 0x500000005;
  a4[9] = 0;
  if ((*(_DWORD *)(a1 + 2036940) & 0x80000000) == 0 && (!*(_DWORD *)(a1 + 2037064) || *(double *)(a1 + 2037072) <= 0.7)) {
    a4[9] = 3;
  }
  if (v16)
  {
    memset(v142, 0, sizeof(v142));
    long long v140 = 0u;
    long long v141 = 0u;
    memset(v139, 0, sizeof(v139));
    memset(v138, 0, sizeof(v138));
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v133 = 0u;
    uint64_t v115 = 0;
    calcElipseParams((double *)(a1 + 2027888), a1 + 2036344, (int *)&v133, (uint64_t)v142, (uint64_t)&v140, (double *)&v115, (uint64_t)v138, (int *)v139);
    double v17 = *((double *)&v140 + 1);
    long long v18 = v141;
    *((int8x16_t *)a4 + 12) = vextq_s8(*(int8x16_t *)((char *)v142 + 8), *(int8x16_t *)((char *)v142 + 8), 8uLL);
    *((void *)a4 + 26) = v142[1].i64[1];
    memset(v132, 0, sizeof(v132));
    Mult_Mat_MatT(9, (uint64_t)v139, 3, a1 + 2027920, 3, (uint64_t)v132);
    *(_OWORD *)(a4 + 54) = *(_OWORD *)((char *)v132 + 8);
    *((void *)a4 + 29) = *((void *)&v132[1] + 1);
    double v19 = Norma_Vec(3, (int *)v132);
    double v20 = sqrt(*(double *)&v132[1] * *(double *)&v132[1] + *((double *)v132 + 1) * *((double *)v132 + 1));
    *((double *)a4 + 30) = v19;
    *((double *)a4 + 31) = v20;
    double v21 = *(double *)(a1 + 2027968) * 57.2957795;
    if (v21 < 0.0) {
      double v21 = v21 + 360.0;
    }
    *((double *)a4 + 32) = v21;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v127 = 0u;
    Mult_Mat_Mat(9, (uint64_t)v139, 9, a1 + 2036424, 9, (uint64_t)&v127);
    Mult_Mat_MatT(9, (uint64_t)&v127, 9, (uint64_t)v139, 9, (uint64_t)&v127);
    memset(v126, 0, sizeof(v126));
    Copy_SubMat_from_Mat(1.0, 9, (_DWORD *)(a1 + 2036504), 0, 0, 2, 2u, 9, (int *)v126);
    double v22 = *(double *)(a1 + 2027968);
    v121[0] = 0x200000002;
    __double2 v23 = __sincos_stret(v22);
    v121[1] = *(void *)&v23.__cosval;
    *(double *)&v121[2] = -v23.__sinval;
    __double2 v122 = v23;
    long long v123 = 0u;
    long long v124 = 0u;
    uint64_t v125 = 0;
    memset(v120, 0, sizeof(v120));
    Mult_Mat_Mat(9, (uint64_t)v121, 9, (uint64_t)v126, 9, (uint64_t)v120);
    Mult_Mat_MatT(9, (uint64_t)v120, 9, (uint64_t)v121, 9, (uint64_t)v120);
    double v24 = *((double *)v120 + (DWORD1(v120[0]) + 1) + 1);
    if (v24 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v26 = *(double *)(g_TCU + 8);
        }
        else {
          double v26 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 283, v25, v26, v24);
      }
      g_FPE_AssertFlag = 1;
      double v24 = 1.0;
    }
    double v27 = sqrt(v24);
    if (v27 <= 1.0) {
      double v28 = asin(v27);
    }
    else {
      double v28 = 3.14159265;
    }
    double v29 = *((double *)&v133 + 1);
    if (*((double *)&v133 + 1) < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v30 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v31 = *(double *)(g_TCU + 8);
        }
        else {
          double v31 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 288, v30, v31, v29);
      }
      g_FPE_AssertFlag = 1;
      double v29 = 1.0;
    }
    *((double *)a4 + 5) = sqrt(v29);
    int v32 = DWORD1(v133);
    uint64_t v33 = (DWORD1(v133) + 1);
    double v34 = *((double *)&v133 + v33 + 1);
    if (v34 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v36 = *(double *)(g_TCU + 8);
        }
        else {
          double v36 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 291, v35, v36, v34);
        int v32 = DWORD1(v133);
        uint64_t v33 = (DWORD1(v133) + 1);
      }
      g_FPE_AssertFlag = 1;
      double v34 = 1.0;
    }
    *((double *)a4 + 6) = sqrt(v34);
    double v37 = *((double *)&v133 + 1);
    double v38 = *((double *)&v133 + 1) + *((double *)&v133 + v33 + 1);
    if (v38 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v40 = *(double *)(g_TCU + 8);
        }
        else {
          double v40 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 294, v39, v40, v38);
        int v32 = DWORD1(v133);
        double v37 = *((double *)&v133 + 1);
        uint64_t v33 = (DWORD1(v133) + 1);
      }
      g_FPE_AssertFlag = 1;
      double v38 = 1.0;
    }
    uint64_t v41 = v115;
    *((double *)a4 + 7) = sqrt(v38);
    *((void *)a4 + 8) = v41;
    double v42 = v37 + *((double *)&v133 + v33 + 1) + *((double *)&v133 + (2 * v32 + 2) + 1);
    if (v42 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v43 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v44 = *(double *)(g_TCU + 8);
        }
        else {
          double v44 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 298, v43, v44, v42);
      }
      g_FPE_AssertFlag = 1;
      double v42 = 1.0;
    }
    *((double *)a4 + 9) = sqrt(v42);
    uint64_t v45 = (*(_DWORD *)(a1 + 2036588) + 1);
    double v46 = *(double *)(a1 + 8 * v45 + 2036592);
    if (v46 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v47 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v48 = *(double *)(g_TCU + 8);
        }
        else {
          double v48 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 301, v47, v48, v46);
        uint64_t v45 = (*(_DWORD *)(a1 + 2036588) + 1);
      }
      g_FPE_AssertFlag = 1;
      double v46 = 1.0;
    }
    double v49 = sqrt(v46);
    *((double *)a4 + 10) = v49;
    double v50 = *(double *)(a1 + 8 * v45 + 2036592);
    if (v50 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v51 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v52 = *(double *)(g_TCU + 8);
        }
        else {
          double v52 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 304, v51, v52, v50);
        double v49 = *((double *)a4 + 10);
      }
      g_FPE_AssertFlag = 1;
    }
    *((double *)a4 + 11) = v49;
    int v53 = DWORD1(v127);
    double v54 = *((double *)&v127 + 1) + *((double *)&v127 + (DWORD1(v127) + 1) + 1);
    if (v54 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v55 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v56 = *(double *)(g_TCU + 8);
        }
        else {
          double v56 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 307, v55, v56, v54);
        int v53 = DWORD1(v127);
      }
      g_FPE_AssertFlag = 1;
      double v54 = 1.0;
    }
    double v57 = (double *)(a1 + 2036592);
    *((double *)a4 + 12) = sqrt(v54);
    uint64_t v58 = (2 * v53 + 2);
    double v59 = *((double *)&v127 + v58 + 1);
    if (v59 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v60 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v61 = *(double *)(g_TCU + 8);
        }
        else {
          double v61 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 310, v60, v61, v59);
        int v53 = DWORD1(v127);
        uint64_t v58 = (2 * DWORD1(v127) + 2);
      }
      g_FPE_AssertFlag = 1;
      double v59 = 1.0;
    }
    *((double *)a4 + 13) = sqrt(v59);
    double v62 = *((double *)&v127 + 1) + *((double *)&v127 + (v53 + 1) + 1) + *((double *)&v127 + v58 + 1);
    if (v62 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v63 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v64 = *(double *)(g_TCU + 8);
        }
        else {
          double v64 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 313, v63, v64, v62);
      }
      g_FPE_AssertFlag = 1;
      double v62 = 1.0;
    }
    *((double *)a4 + 14) = sqrt(v62);
    *((double *)a4 + 15) = v28 * 57.2957795;
    double v65 = *v57;
    if (*v57 >= 0.0)
    {
      double v68 = (int *)(a1 + 2027888);
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v66 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v67 = *(double *)(g_TCU + 8);
        }
        else {
          double v67 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KfirController_GetPosition", 317, v66, v67, v65);
      }
      g_FPE_AssertFlag = 1;
      double v65 = 1.0;
      double v68 = (int *)(a1 + 2027888);
    }
    *((double *)a4 + 16) = sqrt(v65);
    *((double *)a4 + 17) = v17;
    *((_OWORD *)a4 + 9) = v18;
    double v69 = *(double *)(a1 + 2036896) / 299792458.0;
    *((double *)a4 + 20) = v69;
    *((double *)a4 + 21) = v69 + *(double *)(a1 + 2036904) / 299792458.0;
    *((double *)a4 + 22) = v69 + *(double *)(a1 + 2036920) / 299792458.0;
    *((double *)a4 + 23) = *(double *)(a1 + 2036888) / 299792458.0;
    uint64_t v70 = 936;
    uint64_t v71 = 702;
    do
    {
      *((unsigned char *)a4 + v70 - 672) = *(unsigned char *)(a3 + v70);
      *(void *)&a4[v71 - 562] = *(void *)(a3 + v71 * 4);
      ++v70;
      v71 += 2;
    }
    while (v70 != 984);
    *((_OWORD *)a4 + 59) = *(_OWORD *)(a3 + 800);
    *((_WORD *)a4 + 480) = *(unsigned __int8 *)(a3 + 788);
    *((void *)a4 + 122) = *(void *)(a3 + 6384);
    *((void *)a4 + 121) = *(void *)(a3 + 6376);
    *((_WORD *)a4 + 492) = *(unsigned __int8 *)(a3 + 6364);
    *((_OWORD *)a4 + 62) = *(_OWORD *)(a3 + 11952);
    *((_WORD *)a4 + 504) = *(unsigned __int8 *)(a3 + 11940);
    if (g_TCU) {
      double v72 = *((double *)a4 + 1) + *(double *)(g_TCU + 64);
    }
    else {
      double v72 = 0.0;
    }
    if (*(unsigned char *)(a1 + 2037016))
    {
      *((unsigned char *)a4 + 312) = 1;
      a4[79] = *(_DWORD *)(a1 + 2037020);
      *((unsigned char *)a4 + 320) = *(unsigned char *)(a1 + 2037024);
      double v73 = (v72 - *(double *)(a1 + 2037032)) * 1000.0;
      BOOL v74 = v73 < 0.0;
      double v75 = floor(v73 + 0.5);
      double v76 = -floor(0.5 - v73);
      if (!v74) {
        double v76 = v75;
      }
      a4[81] = (int)v76;
      *(_OWORD *)(a4 + 82) = *(_OWORD *)(a4 + 78);
    }
    if (*(unsigned char *)(a1 + 2037040))
    {
      *((unsigned char *)a4 + 360) = 1;
      a4[91] = *(_DWORD *)(a1 + 2037044);
      *((unsigned char *)a4 + 368) = *(unsigned char *)(a1 + 2037048);
      double v77 = (v72 - *(double *)(a1 + 2037056)) * 1000.0;
      BOOL v74 = v77 < 0.0;
      double v78 = floor(v77 + 0.5);
      double v79 = -floor(0.5 - v77);
      if (!v74) {
        double v79 = v78;
      }
      a4[93] = (int)v79;
    }
    if (*(unsigned char *)(a1 + 2036968))
    {
      *((unsigned char *)a4 + 440) = 1;
      a4[111] = *(_DWORD *)(a1 + 2036972);
      *((unsigned char *)a4 + 448) = *(unsigned char *)(a1 + 2036976);
      double v80 = (v72 - *(double *)(a1 + 2036984)) * 1000.0;
      BOOL v74 = v80 < 0.0;
      double v81 = floor(v80 + 0.5);
      double v82 = -floor(0.5 - v80);
      if (!v74) {
        double v82 = v81;
      }
      a4[113] = (int)v82;
      *(_OWORD *)(a4 + 114) = *(_OWORD *)(a4 + 110);
    }
    if (*(unsigned char *)(a1 + 2036992))
    {
      *((unsigned char *)a4 + 424) = 1;
      a4[107] = *(_DWORD *)(a1 + 2036996);
      *((unsigned char *)a4 + 432) = *(unsigned char *)(a1 + 2037000);
      double v83 = (v72 - *(double *)(a1 + 2037008)) * 1000.0;
      BOOL v74 = v83 < 0.0;
      double v84 = floor(v83 + 0.5);
      double v85 = -floor(0.5 - v83);
      if (!v74) {
        double v85 = v84;
      }
      a4[109] = (int)v85;
    }
    if (*(unsigned char *)(a1 + 2036944))
    {
      *((unsigned char *)a4 + 408) = 1;
      a4[103] = *(_DWORD *)(a1 + 2036948);
      *((unsigned char *)a4 + 416) = *(unsigned char *)(a1 + 2036952);
      double v86 = (v72 - *(double *)(a1 + 2036960)) * 1000.0;
      BOOL v74 = v86 < 0.0;
      double v87 = floor(v86 + 0.5);
      double v88 = -floor(0.5 - v86);
      if (!v74) {
        double v88 = v87;
      }
      a4[105] = (int)v88;
    }
    if ((g_FPE_LogSeverity & 8) != 0)
    {
      unint64_t v89 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      double v90 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
      LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f FpeNavSol = %f, %d, %.8f, %.8f, %.8f,   %f, %f, %f, %f, %f, %f, %f, %f, %f,             %f, %f, %f,    %f, %f, %f, %f, %f, %f, %f, %f, %f,    %f, %f", "KfirController_GetPosition", 367, v89, v90, *((double *)a4 + 1), *((__int16 *)a4 + 11), *((double *)a4 + 25) * 57.2957795, *((double *)a4 + 24) * 57.2957795, *((double *)a4 + 26), *((double *)&v133 + 1), *((double *)&v133 + DWORD1(v133) + 1), *((double *)&v133 + (2 * DWORD1(v133)) + 1), *(double *)&v134, *((double *)&v133 + (DWORD1(v133) + 1) + 1), *((double *)&v133 + ((2 * DWORD1(v133)) | 1u) + 1), *((double *)&v134 + 1), *((double *)&v133 + (DWORD1(v133) + 2) + 1),
        *((double *)&v133 + (2 * DWORD1(v133) + 2) + 1),
        *((double *)a4 + 27),
        *((double *)a4 + 28),
        *((double *)a4 + 29),
        *((double *)&v127 + 1),
        *((double *)&v127 + DWORD1(v127) + 1),
        *((double *)&v127 + (2 * DWORD1(v127)) + 1),
        *(double *)&v128,
        *((double *)&v127 + (DWORD1(v127) + 1) + 1),
        *((double *)&v127 + ((2 * DWORD1(v127)) | 1u) + 1),
        *((double *)&v128 + 1),
        *((double *)&v127 + (DWORD1(v127) + 2) + 1),
        *((double *)&v127 + (2 * DWORD1(v127) + 2) + 1),
        *(double *)(a1 + 2027968),
        0.0);
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v91 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        double v92 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: syncedFields = {numUsedFilters:%d, chosenOne:%d}", "KfirController_GetPosition", 371, v91, v92, *(_DWORD *)(a1 + 2017688), *(_DWORD *)(a1 + 2017692));
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          unint64_t v93 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          double v94 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
          uint64_t v95 = *(unsigned int *)(a1 + 2028060);
          uint64_t v113 = a1 + 2036336;
          v114 = (double *)(a1 + 2027928);
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: DEVICE = {estPos:[%f %.12f %.12f %f %f], estVel:[%.12f %.12f %f],             estOrientation:[%f %f %f %f %f %f %f %f %f], ellipseParams:[%f %f %f], posValid:%u, headValid:%u, posConf:%u, WeekNo:%d}", "KfirController_GetPosition", 384, v93, v94, *((double *)a4 + 1), *((double *)a4 + 24) * 57.2957795, *((double *)a4 + 25) * 57.2957795, *((double *)a4 + 26), v114[5], *v114, v114[1], v114[2], v114[17], *(double *)(a1 + 2028064 + 8 * v95), *(double *)(a1 + 2028064 + 8 * (2 * v95)), v114[18],
            *(double *)(a1 + 2028064 + 8 * (v95 + 1)),
            *(double *)(a1 + 2028064 + 8 * ((2 * v95) | 1u)),
            v114[19],
            *(double *)(a1 + 2028064 + 8 * (v95 + 2)),
            *(double *)(a1 + 2028064 + 8 * (2 * v95 + 2)),
            v17,
            *(double *)&v18,
            *((double *)&v18 + 1),
            *(unsigned __int8 *)(v113 + 1),
            *(unsigned __int8 *)(v113 + 2),
            a4[9],
            *((__int16 *)a4 + 11));
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            int v96 = *(_DWORD *)(a1 + 2017692);
            unint64_t v97 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            double v98 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
            LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: syncedFields = {Roll:%3.1f, Pitch:%3.1f, Yaw:%3.1f}", "KfirController_GetPosition", 393, v97, v98, *(double *)(a1 + 117472 * v96 + 147136), *(double *)(a1 + 117472 * v96 + 147144), *(double *)(a1 + 117472 * v96 + 147152));
            if ((g_FPE_LogSeverity & 8) != 0)
            {
              unint64_t v99 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              double v100 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
              LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: syncedFields = {RollRt:%3.1f, PitchRt:%3.1f, YawRt:%3.1f}", "KfirController_GetPosition", 399, v99, v100, *(double *)(a1 + 117472 * v96 + 147168), *(double *)(a1 + 117472 * v96 + 147176), *(double *)(a1 + 117472 * v96 + 147184));
              if ((g_FPE_LogSeverity & 8) != 0)
              {
                unint64_t v101 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                double v102 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
                LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: syncedFields = {BiasGx:%2.5f, BiasGy:%2.5f, BiasGz:%2.5f}", "KfirController_GetPosition", 405, v101, v102, *(double *)(a1 + 117472 * v96 + 146520) * 57.2957795, *(double *)(a1 + 117472 * v96 + 146528) * 57.2957795, *(double *)(a1 + 117472 * v96 + 146536) * 57.2957795);
                if ((g_FPE_LogSeverity & 8) != 0)
                {
                  unint64_t v103 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  double v104 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
                  long long v112 = *(_OWORD *)(a1 + 117472 * v96 + 146488);
                  LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: syncedFields = {BiasAx:%1.4f, BiasAy:%1.4f, BiasAz:%1.4f}", "KfirController_GetPosition", 411, v103, v104, *(double *)&v112, *((double *)&v112 + 1), *(double *)(a1 + 117472 * v96 + 146504));
                  if ((g_FPE_LogSeverity & 8) != 0)
                  {
                    unint64_t v105 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                    if (g_TCU) {
                      double v106 = *(double *)(g_TCU + 8);
                    }
                    else {
                      double v106 = 0.0;
                    }
                    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: syncedFields = {CCH_Value:%1.4f, Lever_Arm:%1.2f}", "KfirController_GetPosition", 416, v105, v106, *(double *)(a1 + 117472 * v96 + 196776), *(double *)(a1 + 117472 * v96 + 147120));
                  }
                }
              }
            }
          }
        }
      }
    }
    double v107 = *(double *)(a1 + 2037080);
    if (v107 > 0.0)
    {
      double v108 = *(double *)(a1 + 2027952) - v107;
      memset(v119, 0, sizeof(v119));
      memset(v118, 0, sizeof(v118));
      memset(v117, 0, sizeof(v117));
      Mult_Mat_scalar(v108, 3, (int *)(a1 + 2037120), (const char *)3, (int *)v119);
      Add_Mat(3, (int *)(a1 + 2037088), 3, (int *)v119, (const char *)3, (int *)v118);
      Sub_Mat(3, v68, 3, (int *)v118, (const char *)3, (int *)v117);
      if (Norma_Vec(3, (int *)v117) > 10.0 && (g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v109 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v110 = *(double *)(g_TCU + 8);
        }
        else {
          double v110 = 0.0;
        }
        double v111 = Norma_Vec(3, (int *)v117);
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: DEVICE = Warning: Position updated by %0.1fm more than expected (i.e. 10m)", "KfirController_GetPosition", 436, v109, v110, v111);
      }
    }
    Copy_Mat(3, v68, (const char *)3, (int *)(a1 + 2037088));
    Copy_Mat(3, (int *)(a1 + 2027920), (const char *)3, (int *)(a1 + 2037120));
    *(void *)(a1 + 2037080) = *(void *)(a1 + 2027952);
  }
}

uint64_t Centroid_SV_Pos(int (*a1)[3], unsigned int a2, double *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  double v8 = &(*a1)[2];
  uint64_t v9 = a2;
  do
  {
    int v10 = *(v8 - 1);
    int v11 = *v8;
    if (!*((void *)v8 - 1))
    {
      if (!v11) {
        goto LABEL_7;
      }
      int v10 = 0;
    }
    v7 += *(v8 - 2);
    v5 += v10;
    v4 += v11;
    ++v6;
LABEL_7:
    v8 += 3;
    --v9;
  }
  while (v9);
  v18[1] = v5;
  v18[2] = v4;
  v18[0] = v7;
  if (!v6) {
    return 0;
  }
  for (uint64_t i = 0; i != 3; ++i)
    *((double *)&v16 + i) = 1.0 / (double)v6 * (double)(int)v18[i];
  ECEF2Geo((double *)&v16, (uint64_t)&WGS84_Datum, (uint64_t)v14);
  uint64_t v15 = 0;
  Geo2ECEF((uint64_t)v14, (uint64_t)&WGS84_Datum, (double *)&v16);
  *(_OWORD *)a3 = v16;
  *((void *)a3 + 2) = v17;
  return 1;
}

void *Init_DB_Nav_Soln(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(_OWORD *)((char *)&__src[8] + 3) = 0u;
  int v4 = (_OWORD *)(a3 + 920);
  memset(&__src[11], 0, 160);
  uint64_t v5 = *(void *)(a2 + 992);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)&__src[0] = *(void *)(a1 + 8);
  *((void *)&__src[0] + 1) = v6;
  double v8 = *(double *)(a2 + 1000);
  LODWORD(__src[1]) = *(_DWORD *)a1;
  BYTE4(__src[1]) = *(unsigned char *)(a1 + 5);
  WORD3(__src[1]) = *(_WORD *)(a1 + 16);
  DWORD2(__src[1]) = __src[0];
  memset(&__src[2], 0, 104);
  *(void *)&__src[7] = v7;
  *((void *)&__src[8] + 1) = v5;
  *(void *)(a1 + 40) = v5;
  DWORD1(__src[9]) = *(_DWORD *)(a1 + 60);
  BYTE8(__src[9]) = *(unsigned char *)(a1 + 64);
  *(_DWORD *)((char *)&__src[9] + 10) = *(_DWORD *)(a1 + 66);
  __src[10] = *(unint64_t *)(a1 + 72);
  unsigned int v9 = *(_DWORD *)(a2 + 52);
  if (v9 >= 2)
  {
    if (v9 >= 5)
    {
      uint64_t v12 = 0x4163125300000000;
      double v11 = 9999000.0;
      double v10 = 9999000.0;
    }
    else
    {
      double v10 = 20.0;
      double v11 = 3.0;
      uint64_t v12 = 0x4033C624DD2F1AA0;
    }
  }
  else
  {
    double v10 = 3.0;
    double v11 = 1.0;
    uint64_t v12 = 0x40069FBE76C8B439;
  }
  double v13 = v8 * 99930819.3;
  memset(&__src[11], 0, 24);
  Geo2ECEF((uint64_t)&__src[11], (uint64_t)&WGS84_Datum, (double *)&__src[2] + 1);
  NK_Transform_State((uint64_t)__src);
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  size_t result = memcpy((void *)(a3 + 32), __src, 0x150uLL);
  int64x2_t v15 = vdupq_n_s64(0x4163125300000000uLL);
  *(int64x2_t *)(a3 + 816) = v15;
  *(int64x2_t *)(a3 + 832) = v15;
  *(void *)(a3 + 848) = 0x4163125300000000;
  *(void *)(a3 + 856) = v12;
  *(double *)(a3 + 864) = v11;
  *(double *)(a3 + 872) = v10;
  *(void *)(a3 + 880) = 0x408F380000000000;
  *(double *)(a3 + 888) = v13;
  *(int64x2_t *)(a3 + 896) = v15;
  *(void *)(a3 + 912) = 0;
  *(void *)(a3 + 744) = 0x4058FF5C28F5C28FLL;
  int64x2_t v16 = vdupq_n_s64(0x4058FF5C28F5C28FuLL);
  *(int64x2_t *)(a3 + 752) = v16;
  *(int64x2_t *)(a3 + 768) = v16;
  *(int64x2_t *)(a3 + 784) = v16;
  *(int64x2_t *)(a3 + 800) = v15;
  long long v17 = *(_OWORD *)(a3 + 336);
  *int v4 = *(_OWORD *)(a3 + 320);
  v4[1] = v17;
  v4[2] = *(_OWORD *)(a3 + 352);
  return result;
}

uint64_t *phiu(uint64_t *result, int a2, unsigned int a3, uint64_t a4, const double *a5, unsigned int a6, double *a7, int a8)
{
  if (a3)
  {
    uint64_t v8 = a3;
    unsigned int v9 = result;
    double v10 = a7;
    do
    {
      uint64_t v11 = *v9++;
      *(void *)v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if (a6 >= 2)
  {
    int v12 = (a6 - 1) * a2;
    int v13 = (a6 - 1) * a8;
    unsigned int v14 = ((a6 + a6 * a6) >> 1) - a6;
    unsigned int v15 = 1 - a6;
    do
    {
      unsigned int v16 = a6 - 1;
      if (a3)
      {
        uint64_t v17 = 0;
        uint64_t v18 = a6 - 1;
        do
        {
          double v19 = 0.0;
          uint64_t v20 = a4;
          if (a6 <= a4)
          {
            double v19 = *(double *)&result[(v12 + v17)];
            uint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = v20;
            unsigned int v22 = v14;
            int v23 = v17;
            do
            {
              double v19 = v19 + *(double *)&result[v23] * a5[v22];
              v23 += a2;
              ++v22;
              --v21;
            }
            while (v21);
          }
          a7[(v17++ + v13)] = v19;
          uint64_t v18 = v20;
        }
        while (v17 != a3);
      }
      v12 -= a2;
      v13 -= a8;
      v14 += v15++;
      --a6;
    }
    while (v16 > 1);
  }
  return result;
}

void DD_Assist_GLON_Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2 + 32;
  uint64_t v8 = 20400;
  do
  {
    if (*(unsigned __int8 *)(v7 + v6) > 0xA5u
      || *(unsigned char *)(*(void *)(a3 + 16272) + v6) && (int)a1 - *(_DWORD *)(a3 + (v6 << 6) + 11224) < 241)
    {
      goto LABEL_38;
    }
    memset(v100, 0, 62);
    if (!Core_Get_GLON_Eph((v6 + 1), a1, v100)
      || *(unsigned char *)(*(void *)(a3 + 16272) + v6) && SLODWORD(v100[0]) <= *(_DWORD *)(a3 + (v6 << 6) + 11224))
    {
      *(void *)(*(void *)(a3 + 11216) + 20 * v6 + 8) = 0;
      goto LABEL_38;
    }
    BOOL v9 = (WORD2(v100[2]) & 0x800) == 0;
    uint64_t v10 = *(void *)(a3 + 11208);
    if (*(unsigned char *)(v10 + v6)) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = (WORD2(v100[2]) & 0x800) == 0;
    }
    if (v11)
    {
      uint64_t v12 = *(void *)(a3 + 16288);
      if (!*(unsigned char *)(v12 + v6)) {
        goto LABEL_20;
      }
      int v13 = *(_DWORD *)(a3 + 36 * v6 + 15352);
      if ((*(unsigned char *)(a3 + 36 * v6 + 15367) & 4) != 0 || v13 + 3600 <= (int)a1)
      {
        if (v13 + 100 < (int)a1)
        {
          *(unsigned char *)(*(void *)(a3 + 16256) + v6) = 0;
          *(unsigned char *)(v12 + v6) = 0;
        }
LABEL_20:
        BOOL v9 = 1;
        goto LABEL_21;
      }
      BOOL v9 = 0;
    }
LABEL_21:
    uint64_t v14 = a3 + (v6 << 6);
    unsigned int v15 = (long long *)(v14 + 11224);
    long long v16 = v100[3];
    *(_OWORD *)(v14 + 11256) = v100[2];
    *(_OWORD *)(v14 + 11272) = v16;
    long long v17 = v100[1];
    *(_OWORD *)(v14 + 11224) = v100[0];
    *(_OWORD *)(v14 + 11240) = v17;
    *(unsigned char *)(*(void *)(a3 + 16248) + v6) = 1;
    *(unsigned char *)(*(void *)(a3 + 16272) + v6) = 1;
    *(unsigned char *)(v10 + v6) = v9;
    int v18 = *(_DWORD *)(v14 + 11228);
    if (v9) {
      int v19 = 1;
    }
    else {
      int v19 = 2;
    }
    uint64_t v20 = *(void *)(a3 + 11216) + 20 * v6;
    uint64_t v21 = (int *)(v20 + 12);
    unsigned int v22 = (int *)(v20 + 8);
    if (v18 == 5) {
      int v23 = v22;
    }
    else {
      int v23 = v21;
    }
    *int v23 = v19;
    if (DWORD2(v100[0]) != 2139062143) {
      *(_DWORD *)(a3 + 4 * v6 + 16336) = DWORD2(v100[0]);
    }
    if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
      EvLog_v("DD_Assist_GLON_Eph received Eph for SV%d ", v6 + 1);
    }
    if ((int)a1 >= 1)
    {
      uint64_t v24 = 0;
      LODWORD(v25) = 0;
      *(unsigned char *)(*(void *)(a3 + 16304) + v6) = 1;
      uint64_t v26 = p_NV;
      double v27 = (_OWORD *)(p_NV + 72 * (v6 + 1));
      long long v28 = *v15;
      long long v29 = v15[1];
      long long v30 = v15[2];
      double v31 = v27 + 1270;
      double v27 = (_OWORD *)((char *)v27 - 72);
      v27[1278] = v15[3];
      v27[1277] = v30;
      v27[1276] = v29;
      v27[1275] = v28;
      uint64_t v32 = v26 + v8;
      __int16 v33 = -9871;
      do
      {
        int v34 = *(unsigned __int8 *)(v32 + v24) ^ HIBYTE(v33);
        __int16 v33 = -12691 * (v33 + (*(unsigned __int8 *)(v32 + v24) ^ HIBYTE(v33))) + 22719;
        uint64_t v25 = (v25 + v34);
        ++v24;
      }
      while (v24 != 64);
      *double v31 = v25;
    }
    uint64_t v35 = 0;
    LODWORD(v36) = 0;
    uint64_t v37 = *(void *)(a3 + 11208);
    uint64_t v38 = p_NV;
    uint64_t v39 = p_NV + 19160;
    uint64_t v40 = *(void *)(v37 + 16);
    *(_OWORD *)(p_NV + 19172) = *(_OWORD *)v37;
    *(void *)(v39 + 28) = v40;
    uint64_t v41 = v38 + 19168;
    __int16 v42 = -9871;
    do
    {
      int v43 = *(unsigned __int8 *)(v41 + v35) ^ HIBYTE(v42);
      __int16 v42 = -12691 * (v42 + (*(unsigned __int8 *)(v41 + v35) ^ HIBYTE(v42))) + 22719;
      uint64_t v36 = (v36 + v43);
      ++v35;
    }
    while (v35 != 32);
    *(void *)(v38 + 19160) = v36;
LABEL_38:
    ++v6;
    v8 += 72;
  }
  while (v6 != 24);
  uint64_t v44 = a4;
  if ((int)a1 >= 1)
  {
    for (uint64_t i = 0; i != 24; ++i)
    {
      if (*(unsigned char *)(*(void *)(a3 + 11208) + i)
        && !*(unsigned char *)(*(void *)(v44 + 904) + i)
        && *(unsigned __int8 *)(v7 + i) <= 0xA5u
        && (!*(unsigned char *)(*(void *)(a3 + 16280) + i) || (int)a1 - *(_DWORD *)(a3 + 108 * i + 12760) >= 241))
      {
        long long v101 = 0u;
        memset(v102, 0, 28);
        memset(v100, 0, sizeof(v100));
        int GLON_GPS_BinEph = EE_Get_GLON_GPS_BinEph((i + 1), a1, (uint64_t)v100);
        uint64_t v47 = *(void *)(a3 + 16280);
        if (!GLON_GPS_BinEph
          || (unsigned int v48 = v100[0], *(unsigned char *)(v47 + i)) && SLODWORD(v100[0]) <= *(_DWORD *)(a3 + 108 * i + 12760))
        {
          *(unsigned char *)(v47 + i) = 0;
        }
        else
        {
          double v49 = (_OWORD *)(a3 + 108 * i + 12760);
          *(_OWORD *)((char *)v49 + 92) = *(_OWORD *)((char *)v102 + 12);
          long long v50 = v102[0];
          long long v51 = v100[3];
          v49[4] = v101;
          v49[5] = v50;
          long long v52 = v100[1];
          v49[2] = v100[2];
          v49[3] = v51;
          _OWORD *v49 = v100[0];
          v49[1] = v52;
          *(unsigned char *)(*(void *)(a3 + 16248) + i) = 1;
          *(unsigned char *)(*(void *)(a3 + 16280) + i) = 1;
          long long v98 = 0u;
          memset(v99, 0, sizeof(v99));
          long long v97 = 0u;
          *(void *)&double v96 = __PAIR64__(DWORD1(v100[0]), v48);
          LOBYTE(v97) = BYTE8(v100[0]);
          *(_WORD *)((char *)&v97 + 1) = *(_WORD *)((char *)v100 + 9);
          unsigned int v53 = 21;
          uint64_t v54 = 11;
          unint64_t v55 = (char *)&v100[1] + 8;
          do
          {
            double v56 = (char *)&v96 + v54;
            *double v56 = *v55;
            *(_WORD *)(v56 + 1) = *(_WORD *)(v55 + 1);
            v55 += 4;
            --v53;
            v54 += 3;
          }
          while (v53 > 1);
          Debug_Log_GPS_Eph(2, i + 101, (uint64_t)&v96);
        }
        uint64_t v44 = a4;
      }
    }
  }
  uint64_t v57 = 0;
  *(void *)&v100[0] = 0;
  WORD4(v100[0]) = 0;
  memset((char *)v100 + 12, 0, 24);
  while (*(unsigned char *)(*(void *)(a3 + 16288) + v57) && (int)a1 - *(_DWORD *)(a3 + 36 * v57 + 15352) <= 1800)
  {
    uint64_t v58 = v57 + 1;
LABEL_78:
    uint64_t v57 = v58;
    if (v58 == 24) {
      goto LABEL_79;
    }
  }
  uint64_t v58 = v57 + 1;
  if (!Core_Get_GLON_Alm((v57 + 1), a1, (uint64_t)v100)
    || *(unsigned char *)(*(void *)(a3 + 16288) + v57) && SLODWORD(v100[0]) <= *(_DWORD *)(a3 + 36 * v57 + 15352))
  {
    goto LABEL_78;
  }
  if ((int)a1 < 1) {
    goto LABEL_68;
  }
  *(void *)uint64_t v95 = 0;
  double v96 = 0.0;
  API_Get_UTC_Cor(1, &v96);
  GPS_To_Glon_Time(0, a1 / 0x93A80, (double)(a1 % 0x93A80), v96, v95, &v95[1], &v94);
  int v59 = v95[1] - WORD4(v100[0]);
  int v60 = v59 + 1461;
  if (v59 >= -730) {
    int v60 = v95[1] - WORD4(v100[0]);
  }
  int v61 = v59 <= 729 ? v60 : v59 - 1461;
  if ((v61 + 7) < 0x1D)
  {
LABEL_68:
    uint64_t v62 = a3 + 36 * v57;
    unint64_t v63 = (long long *)(v62 + 15352);
    *(_DWORD *)(v62 + 15384) = v100[2];
    long long v64 = v100[1];
    *(_OWORD *)(v62 + 15352) = v100[0];
    *(_OWORD *)(v62 + 15368) = v64;
    *(unsigned char *)(*(void *)(a3 + 16256) + v57) = 1;
    *(unsigned char *)(*(void *)(a3 + 16288) + v57) = 1;
    DD_GLON_Alm_Set_Health_Frq((uint64_t)v100, (void *)a3);
    if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
      EvLog_v("DD_Assist_GLON_Alm received Alm for SV%d ", v57 + 1);
    }
    if ((int)a1 >= 1)
    {
      uint64_t v65 = 0;
      LODWORD(v66) = 0;
      uint64_t v67 = p_NV + 48 * (v57 + 1);
      double v68 = (void *)(v67 + 19192);
      int v69 = *((_DWORD *)v63 + 8);
      long long v70 = *v63;
      *(_OWORD *)(v67 + 19216) = v63[1];
      *(_OWORD *)(v67 + 19200) = v70;
      *(_DWORD *)(v67 + 19232) = v69;
      uint64_t v71 = v67 + 19200;
      __int16 v72 = -9871;
      do
      {
        int v73 = *(unsigned __int8 *)(v71 + v65) ^ HIBYTE(v72);
        __int16 v72 = -12691 * (v72 + (*(unsigned __int8 *)(v71 + v65) ^ HIBYTE(v72))) + 22719;
        uint64_t v66 = (v66 + v73);
        ++v65;
      }
      while (v65 != 40);
      *double v68 = v66;
    }
    uint64_t v74 = 0;
    LODWORD(v75) = 0;
    uint64_t v76 = *(void *)(a3 + 11208);
    uint64_t v77 = p_NV;
    uint64_t v78 = p_NV + 19160;
    uint64_t v79 = *(void *)(v76 + 16);
    *(_OWORD *)(p_NV + 19172) = *(_OWORD *)v76;
    *(void *)(v78 + 28) = v79;
    uint64_t v80 = v77 + 19168;
    __int16 v81 = -9871;
    do
    {
      int v82 = *(unsigned __int8 *)(v80 + v74) ^ HIBYTE(v81);
      __int16 v81 = -12691 * (v81 + (*(unsigned __int8 *)(v80 + v74) ^ HIBYTE(v81))) + 22719;
      uint64_t v75 = (v75 + v82);
      ++v74;
    }
    while (v74 != 32);
    *(void *)(v77 + 19160) = v75;
    goto LABEL_78;
  }
  EvLog_v("DD_Assist_GLON_Alm: Rejected! SV %d DayNo too old or new %d", v57 + 1, v61);
LABEL_79:
  *(void *)&v100[0] = 0;
  WORD4(v100[0]) = 0;
  HIDWORD(v100[0]) = 0;
  LOBYTE(v100[1]) = 0;
  DWORD1(v100[1]) = 0;
  BYTE8(v100[1]) = 0;
  double v83 = (unsigned char *)(a3 + 16296);
  if ((!*(unsigned char *)(a3 + 16296) || (int)a1 - *(_DWORD *)(a3 + 16216) >= 43201)
    && Core_Get_GLON_Clk1(a1, v100)
    && (!*v83 || SLODWORD(v100[0]) > *(_DWORD *)(a3 + 16216)))
  {
    uint64_t v84 = 0;
    LODWORD(v85) = 0;
    long long v86 = v100[0];
    *(_OWORD *)(a3 + 16216) = v100[0];
    long long v87 = *(_OWORD *)((char *)v100 + 12);
    *(_OWORD *)(a3 + 16228) = *(_OWORD *)((char *)v100 + 12);
    *double v83 = 1;
    uint64_t v88 = p_NV;
    uint64_t v89 = p_NV + 19200;
    *(_OWORD *)(p_NV + 19208) = v86;
    *(_OWORD *)(v89 + 20) = v87;
    uint64_t v90 = v88 + 19208;
    __int16 v91 = -9871;
    do
    {
      int v92 = *(unsigned __int8 *)(v90 + v84) ^ HIBYTE(v91);
      __int16 v91 = -12691 * (v91 + (*(unsigned __int8 *)(v90 + v84) ^ HIBYTE(v91))) + 22719;
      uint64_t v85 = (v85 + v92);
      ++v84;
    }
    while (v84 != 32);
    *(void *)(v88 + 19200) = v85;
    if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
      EvLog_v("DD_Assist_GLON_UTC received Clk1 ");
    }
  }
}

BOOL NK_Least_Squares_Core(double *a1, double (*a2)[3], signed int a3, BOOL a4, unsigned int a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  _MergedGlobals_6[0] = 0;
  *a8 = -1;
  BOOL v105 = a4;
  if (a4)
  {
    uint64_t v113 = -1;
    int v114 = -1;
    int v13 = (*(char *)(a9 + 494) & 0x80000000) == 0 && *(_DWORD *)(a9 + 500) == 1;
  }
  else
  {
    int v13 = 0;
    xmmword_26AE778AB = 0u;
    xmmword_26AE778BB = 0u;
    xmmword_26AE7789B = 0u;
    uint64_t v113 = -1;
    int v114 = -1;
    *(_OWORD *)(a9 + 400) = 0u;
    *(_OWORD *)(a9 + 416) = 0u;
    *(void *)(a9 + 432) = 0;
  }
  double v109 = 0.0;
  BOOL v14 = NK_Least_Squares_Update(a1, a3, 1, v13, v112, a9);
  BOOL v15 = v14;
  if (!v14) {
    return v15;
  }
  unint64_t __n = 8 * a3;
  if (__n > 0x38) {
    __assert_rtn("NK_Least_Squares_Core", "NK_Least_Squares_Check.cpp", 234, "(sizeof(p_Lsq_Intl->dX)) >= (NumStates*sizeof(p_Lsq_Intl->ACovMat[0]))");
  }
  BOOL v92 = v14;
  unint64_t v93 = a2;
  uint64_t v16 = 0;
  unint64_t v102 = 0;
  int v98 = v13 - a3;
  long long v97 = a8;
  int v17 = a3 + a3 * a3;
  unsigned int v108 = a3;
  uint64_t v106 = a3;
  double v104 = (double *)(a9 + 112);
  char v101 = 1;
  while (2)
  {
    if (*(double *)(a9 + 408) <= 0.0) {
      int v18 = v98;
    }
    else {
      int v18 = v98 + 1;
    }
    memcpy((void *)a9, (const void *)(a9 + 112 + 8 * (v17 / 2)), __n);
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(a9 + 576);
    uint64_t v103 = (v16 + 1);
    uint64_t v21 = v20;
    double v22 = 0.0;
    double v23 = 0.0;
    do
    {
      if (v21) {
        *(void *)(v21 + 8 * v19) = 0;
      }
      if ((int)v16 > 2 || !*(unsigned char *)(*(void *)(a9 + 520) + v19))
      {
        if (!*(unsigned char *)(*(void *)(a9 + 520) + v19)) {
          goto LABEL_39;
        }
LABEL_26:
        BOOL v30 = 1;
        goto LABEL_27;
      }
      if ((int)v16 < 1) {
        goto LABEL_26;
      }
      uint64_t v24 = (unsigned int *)&v113 + 1;
      uint64_t v25 = v103 - 2;
      do
      {
        unsigned int v27 = *v24++;
        uint64_t v26 = v27;
        BOOL v29 = v25-- != 0;
        BOOL v30 = v19 != v26;
      }
      while (v19 != v26 && v29);
LABEL_27:
      uint64_t v31 = *(void *)(a9 + 528);
      unint64_t v9 = v9 & 0xFFFFFFFF00000000 | *(unsigned int *)(a9 + 496);
      NK_Least_Obs_Equ_SV(v19 != *(_DWORD *)(a9 + 512), *(void *)(a9 + 488), v9, *(unsigned __int8 *)(a9 + 4 * v19 + 592), *(_DWORD *)(a9 + 516), &a1[7 * v19], v112, *(double *)(v31 + 8 * v19));
      if (v108)
      {
        double v32 = 0.0;
        __int16 v33 = v112;
        int v34 = (double *)a9;
        uint64_t v35 = v106;
        do
        {
          double v36 = *v33++;
          double v37 = v36;
          double v38 = *v34++;
          double v32 = v32 + v37 * v38;
          --v35;
        }
        while (v35);
      }
      else
      {
        double v32 = 0.0;
      }
      double v39 = *(double *)(v31 + 8 * v19) - v32;
      uint64_t v40 = *(void *)(a9 + 544);
      *(double *)(v40 + 8 * v19) = v39;
      if (v30)
      {
        double v41 = *(double *)(*(void *)(a9 + 536) + 8 * v19);
        double v23 = v23 + 1.0 / v41;
        double v22 = v22 + v39 * v39 * (1.0 / v41);
        ++v18;
        if (v105)
        {
          if (v21)
          {
            uint64_t v42 = *(void *)(a9 + 568);
            *(double *)(v42 + 8 * v19) = v41;
            uint64_t v43 = *(void *)(a9 + 584);
            *(void *)(v43 + 8 * v19) = *(void *)(v40 + 8 * v19);
            invtst(v104, v112, v108, 0.0, 0.0, 1.0e20, &v109);
            double v109 = fabs(v109);
            double v44 = *(double *)(v42 + 8 * v19) - v109;
            *(double *)(v21 + 8 * v19) = v44;
            if (v44 <= 0.0)
            {
              if (v44 < -0.005)
              {
                EvLog_v("NK_Least_Squares_Core:  Suspect Post Res Var %d %d %f %f %f %f ", v19, v18, v44, *(double *)(v42 + 8 * v19), v109, *(double *)(v43 + 8 * v19));
                uint64_t v20 = *(void *)(a9 + 576);
                uint64_t v21 = v20;
              }
              *(void *)(v21 + 8 * v19) = 0;
            }
          }
        }
      }
LABEL_39:
      ++v19;
    }
    while (v19 != 48);
    double v45 = 0.0;
    if (v23 > 0.0) {
      double v45 = sqrt(v22 / v23);
    }
    **(double **)(a9 + 552) = v45;
    double v46 = *(double **)(a9 + 560);
    if (!v46) {
      goto LABEL_157;
    }
    if (v18 < 1) {
      double v47 = 0.0;
    }
    else {
      double v47 = v22 / (double)v18;
    }
    *double v46 = v47;
    if ((int)v16 > 2 || !v105) {
      break;
    }
    BOOL v49 = (int)v16 > 1 || v18 < 2;
    int v50 = v47 < 0.2 || v49;
    if (v50 == 1)
    {
      if ((int)v16 <= 0)
      {
        int v51 = 0;
        if (v101) {
          unsigned int v52 = 0;
        }
        else {
          unsigned int v52 = v102;
        }
        unsigned int v53 = HIDWORD(v102);
        if (v101) {
          unsigned int v53 = 0;
        }
        unint64_t v102 = __PAIR64__(v53, v52);
        unsigned int v54 = -1;
        unint64_t v55 = v97;
        unint64_t v56 = v100;
        goto LABEL_138;
      }
    }
    else if (!v16)
    {
      xmmword_26AE778DB = 0u;
      unk_26AE778EB = 0u;
      xmmword_26AE778CB = 0u;
    }
    double v57 = -30.0;
    if (a5 >= 6)
    {
      if (a5 - 6 > 1)
      {
        EvCrt_Illegal_Default("MeasurementToBeRejected", 0x8D6u);
        uint64_t v20 = *(void *)(a9 + 576);
      }
      else
      {
        double v57 = 0.0;
      }
    }
    unsigned int v58 = 0;
    unsigned int v59 = 0;
    uint64_t v60 = 0;
    unsigned int v54 = -1;
    double v61 = 0.0;
    double v62 = 0.0;
    int v63 = -1;
    while (2)
    {
      double v64 = *(double *)(v20 + 8 * v60);
      if (v64 <= 0.0)
      {
        if (!_MergedGlobals_6[v60 + 49]) {
          goto LABEL_92;
        }
        EvCrt_v("MeasurementToBeRejected: ERROR outlier_tested TRUE", v62, v61);
LABEL_105:
        unsigned int v54 = -1;
        int v51 = 1;
        unint64_t v55 = v97;
LABEL_126:
        unint64_t v56 = v100;
        goto LABEL_132;
      }
      double v65 = *(double *)(*(void *)(a9 + 568) + 8 * v60);
      if (v65 < 0.01) {
        ++v58;
      }
      if (v64 / v65 < 0.01) {
        char v66 = 1;
      }
      else {
        char v66 = v50;
      }
      if (v66)
      {
        BOOL v67 = v64 / v65 >= 0.005 || _MergedGlobals_6[v60 + 49] == 0;
        if (!v67)
        {
          EvLog_v("MeasurementToBeRejected: AddBack %f", v64 / v65);
          goto LABEL_105;
        }
      }
      else
      {
        double v68 = *(double *)(*(void *)(a9 + 584) + 8 * v60);
        int v69 = v65 < 0.01;
        double v70 = v68 * v68 / v64;
        if (v70 <= 4.0) {
          int v69 = 0;
        }
        v59 += v69;
        if (v70 > v62)
        {
          int v63 = v60;
          double v62 = v70;
        }
        if (v68 < v57 && v70 > v61)
        {
          unsigned int v54 = v60;
          double v61 = v70;
        }
        _MergedGlobals_6[v60 + 49] = 1;
      }
LABEL_92:
      if (++v60 != 48) {
        continue;
      }
      break;
    }
    unint64_t v55 = v97;
    if (*(unsigned char *)(a9 + 504) && *(_DWORD *)(a9 + 500) <= 1u && (v54 & 0x80000000) == 0)
    {
      EvLog_v("MaxPosit %f %d", v61, v54);
      double v62 = 999.9;
      goto LABEL_99;
    }
    if (v63 < 0)
    {
      int v51 = 0;
      unsigned int v54 = v63;
      goto LABEL_126;
    }
    unsigned int v54 = v63;
LABEL_99:
    int v71 = *(unsigned __int8 *)(a7 + v54);
    unsigned int v72 = *(unsigned __int8 *)(a6 + v54);
    if (v72 > 0x10)
    {
      if (v72 < 0x21)
      {
        uint64_t v76 = 1;
        if (!*(unsigned char *)(a7 + v54)) {
          uint64_t v76 = 2;
        }
        double v75 = GaussCritVal[v71 == 0];
        double v73 = v75 + (GaussCritVal[v76] - v75) * (double)(int)(v72 - 16) / 17.0;
      }
      else
      {
        uint64_t v74 = 1;
        if (!*(unsigned char *)(a7 + v54)) {
          uint64_t v74 = 2;
        }
        double v73 = GaussCritVal[v74];
      }
    }
    else
    {
      double v73 = GaussCritVal[v71 == 0];
    }
    if (v62 >= v73)
    {
      if (_MergedGlobals_6[v54 + 1]) {
        EvCrt_v("MeasurementToBeRejected: Overridden %d: Gss MaxRatio %d %g %d");
      }
      else {
        EvCrt_v("MeasurementToBeRejected:  %d: Gss MaxRatio %d %g %d");
      }
    }
    else
    {
      if (v18 <= 6)
      {
        uint64_t v77 = v18 - 2;
        if (v72 > 0xC)
        {
          if (v72 < 0x24)
          {
            BOOL v67 = v71 == 0;
            uint64_t v79 = &TauCritVal[3 * (int)v77];
            double v80 = v79[v71 == 0];
            uint64_t v81 = 1;
            if (v67) {
              uint64_t v81 = 2;
            }
            double v73 = v80 + (v79[v81] - v80) * (double)(int)(v72 - 12) / 24.0;
          }
          else
          {
            BOOL v67 = v71 == 0;
            uint64_t v78 = 1;
            if (v67) {
              uint64_t v78 = 2;
            }
            double v73 = TauCritVal[3 * (int)v77 + v78];
          }
        }
        else
        {
          double v73 = TauCritVal[3 * v77 + (v71 == 0)];
        }
      }
      double v82 = **(double **)(a9 + 560);
      if (v62 < v73 * v82)
      {
        int v51 = 0;
        unsigned int v54 = -1;
        goto LABEL_126;
      }
      if (_MergedGlobals_6[v54 + 1]) {
        EvCrt_v("MeasurementToBeRejected: Overridden %d: Tau MaxRatio %d %g %g %g %d %d");
      }
      else {
        EvLog_v("MeasurementToBeRejected: %d: Tau MaxRatio %d %g %g %g %d %d", *(unsigned __int8 *)(a9 + 504), v54, v62, v82, v73, v18, v72);
      }
    }
    unint64_t v56 = v100;
    if (!_MergedGlobals_6[v54 + 49]) {
      EvCrt_v("MeasurementToBeRejected: ERROR outlier_tested FALSE");
    }
    int v51 = 0;
    _MergedGlobals_6[v54 + 49] = 0;
LABEL_132:
    if (v101) {
      unsigned int v83 = v59;
    }
    else {
      unsigned int v83 = v102;
    }
    unsigned int v84 = HIDWORD(v102);
    if (v101) {
      unsigned int v84 = v58;
    }
    unint64_t v102 = __PAIR64__(v84, v83);
    if ((int)v16 > 1)
    {
      int v85 = 0;
    }
    else
    {
LABEL_138:
      *((_DWORD *)v55 + (int)v16) = v54;
      int v85 = 1;
    }
    if ((v54 & 0x80000000) != 0) {
      int v85 = 0;
    }
    if (v51 || v85)
    {
      if (v51)
      {
        uint64_t v86 = (int)v16 - 1;
        double v87 = *(double *)(*(void *)(a9 + 536) + 8 * *((int *)v55 + v86));
        EvLog_v("MeasurementToBeRejected: Add back %d ", *((_DWORD *)v55 + v86));
        int v88 = *((_DWORD *)v55 + v86);
        uint64_t v89 = v88;
        uint64_t v103 = v16;
        uint64_t v16 = v86;
      }
      else
      {
        uint64_t v86 = (int)v16;
        uint64_t v89 = *((int *)v55 + (int)v16);
        double v87 = -*(double *)(*(void *)(a9 + 536) + 8 * v89);
        int v88 = *((_DWORD *)v55 + (int)v16);
      }
      unint64_t v90 = v56 & 0xFFFFFFFF00000000 | *(unsigned int *)(a9 + 496);
      NK_Least_Obs_Equ_SV(v88 != *(_DWORD *)(a9 + 512), *(void *)(a9 + 488), v90, *(unsigned __int8 *)(a9 + 4 * v89 + 592), *(_DWORD *)(a9 + 516), &a1[7 * (int)v89], v112, *(double *)(*(void *)(a9 + 528) + 8 * v89));
      umeas((BOOL)v104, v108, v87, v112, v111, v110, &v109, 1.0e20);
      unint64_t v100 = v90;
      if (v51)
      {
        *((_DWORD *)&v113 + (int)v103) = -1;
        *((_DWORD *)v55 + v86) = -1;
      }
      else
      {
        uint64_t v16 = v103;
        *((_DWORD *)&v113 + (int)v103) = *((_DWORD *)v55 + v86);
      }
      char v101 = 0;
      BOOL v105 = v51 == 0;
      continue;
    }
    break;
  }
  if (!v16 && SHIDWORD(v102) >= 1 && SHIDWORD(v102) <= 2 && v102 == HIDWORD(v102)) {
    _MergedGlobals_6[0] = 1;
  }
LABEL_157:
  if (*(char *)(a9 + 491) >= 1) {
    ud2var((uint64_t)v104, v108, *(unsigned __int8 *)(a9 + 491) + 1, 1u, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 491) + 56));
  }
  BOOL v15 = v92;
  if (*(char *)(a9 + 492) >= 1) {
    ud2var((uint64_t)v104, v108, *(unsigned __int8 *)(a9 + 492) + 1, 1u, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 492) + 56));
  }
  if (*(char *)(a9 + 493) >= 1) {
    ud2var((uint64_t)v104, v108, *(unsigned __int8 *)(a9 + 493) + 1, 1u, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 493) + 56));
  }
  if ((*(char *)(a9 + 488) & 0x80000000) == 0) {
    Comp_NEDvar_UDU((uint64_t)v104, v108, *(unsigned __int8 *)(a9 + 488), v93, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 488) + 56));
  }
  if ((*(char *)(a9 + 494) & 0x80000000) == 0) {
    ud2var((uint64_t)v104, v108, *(unsigned __int8 *)(a9 + 494) + 1, 1u, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 494) + 56));
  }
  return v15;
}

BOOL NK_Least_Squares_Update(double *a1, signed int a2, int a3, int a4, double *a5, uint64_t a6)
{
  v25[8] = *(double *)MEMORY[0x263EF8340];
  *(_OWORD *)(a6 + 112) = 0u;
  uint64_t v11 = a6 + 112;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 384) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 352) = 0u;
  if (a3) {
    double v12 = 1.0e20;
  }
  else {
    double v12 = -1.0;
  }
  *(_OWORD *)(a6 + 304) = 0uLL;
  *(_OWORD *)(a6 + 320) = 0uLL;
  *(_OWORD *)(a6 + 272) = 0uLL;
  *(_OWORD *)(a6 + 288) = 0uLL;
  *(_OWORD *)(a6 + 240) = 0uLL;
  *(_OWORD *)(a6 + 256) = 0uLL;
  *(_OWORD *)(a6 + 208) = 0uLL;
  *(_OWORD *)(a6 + 224) = 0uLL;
  *(_OWORD *)(a6 + 176) = 0uLL;
  *(_OWORD *)(a6 + 192) = 0uLL;
  *(_OWORD *)(a6 + 144) = 0uLL;
  *(_OWORD *)(a6 + 160) = 0uLL;
  *(_OWORD *)(a6 + 128) = 0uLL;
  if (a2 >= 1)
  {
    int v13 = 0;
    do
    {
      int v14 = v13 + 1;
      *(void *)(a6 + 8 * ((v14 * (v13 + 2)) >> 1) + 104) = 0x426D1A94A2000000;
      ++v13;
    }
    while (a2 != v14);
  }
  if (a4 && *(char *)(a6 + 494) >= 1) {
    *(void *)(a6
  }
              + 8
              * (((*(unsigned __int8 *)(a6 + 494)
                 + 2
                 + (*(unsigned __int8 *)(a6 + 494) + 2) * *(unsigned __int8 *)(a6 + 494)) >> 1)
               - 1)
              + 112) = 0x4039000000000000;
  uint64_t v22 = 0;
  if (*(double *)(a6 + 408) > 0.0)
  {
    *((_OWORD *)a5 + 2) = 0u;
    *((_OWORD *)a5 + 3) = 0u;
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
    *a5 = *(double *)(a6 + 416);
    a5[1] = *(double *)(a6 + 424);
    a5[2] = *(double *)(a6 + 432);
    a5[a2] = *(double *)(a6 + 400);
    umeas(v11, a2, *(double *)(a6 + 408), a5, v25, v24, (double *)&v22, 1.0e20);
  }
  uint64_t v15 = 0;
  uint64_t v16 = (unsigned __int8 *)(a6 + 592);
  do
  {
    if (*(unsigned char *)(*(void *)(a6 + 520) + v15))
    {
      unint64_t v6 = v6 & 0xFFFFFFFF00000000 | *(unsigned int *)(a6 + 496);
      NK_Least_Obs_Equ_SV(v15 != *(_DWORD *)(a6 + 512), *(void *)(a6 + 488), v6, *v16, *(_DWORD *)(a6 + 516), a1, a5, *(double *)(*(void *)(a6 + 528) + 8 * v15));
      umeas(v11, a2, *(double *)(*(void *)(a6 + 536) + 8 * v15), a5, v25, v24, (double *)&v22, v12);
    }
    ++v15;
    a1 += 7;
    v16 += 4;
  }
  while (v15 != 48);
  uint64_t v17 = 1;
  ud2var(v11, a2, 1, a2, v23);
  if (a2 >= 1)
  {
    if (v23[0] <= 1000000000.0)
    {
      uint64_t v18 = 1;
      do
      {
        unint64_t v19 = v18;
        if (a2 == v18) {
          break;
        }
        double v20 = v23[v18++];
      }
      while (v20 <= 1000000000.0);
      return v19 >= a2;
    }
    else
    {
      return 0;
    }
  }
  return v17;
}

void NK_Least_Obs_Equ_SV(int a1, unint64_t a2, int a3, int a4, int a5, double *a6, double *a7, double a8)
{
  unint64_t v15 = HIBYTE(a2);
  bzero(a7, 8 * HIBYTE(a2) + 8);
  *a7 = -*a6;
  a7[1] = -a6[1];
  a7[2] = -a6[2];
  if (!a1) {
    goto LABEL_16;
  }
  if (a5 != 1)
  {
    unint64_t v17 = v15 - 1;
    double v18 = 1.0;
LABEL_15:
    a7[v17] = v18;
    goto LABEL_16;
  }
  if (a4 == 2)
  {
    if ((int)(a2 >> 8) >> 24 <= 0) {
      goto LABEL_13;
    }
    unint64_t v16 = HIDWORD(a2);
  }
  else if (a4 == 4)
  {
    if ((int)(a2 >> 16) >> 24 < 1) {
      goto LABEL_13;
    }
    unint64_t v16 = a2 >> 40;
  }
  else
  {
    if ((int)a2 >> 24 <= 0) {
      goto LABEL_13;
    }
    unint64_t v16 = a2 >> 24;
  }
  a7[(char)v16] = 1.0;
LABEL_13:
  if ((int)(a2 >> 24) >> 24 >= 1)
  {
    double v18 = -a6[6];
    unint64_t v17 = SBYTE6(a2);
    goto LABEL_15;
  }
LABEL_16:
  a7[v15] = a8;
}

unsigned __int8 *NK_Least_Squares_Cross_Check(unsigned __int8 *result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v5 = result;
  double v6 = *(double *)(a2 + 11496);
  double v7 = a4[431];
  uint64_t v8 = (unsigned char *)(a3 + 31344);
  *(unsigned char *)(a3 + 31344) = 0;
  double v9 = 0.0;
  if (*((char *)a4 + 3599) < 1
    || a4[*((unsigned __int8 *)a4 + 3599) + 125] >= 9999000.0
    || *(double *)(a3 + 24496) >= 1.3e11)
  {
    int v13 = 0;
    double v12 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
  }
  else
  {
    double v10 = a4[102];
    double v11 = *(double *)(a3 + 736) * 299792458.0;
    double v12 = v10 - v11;
    int v13 = 1;
  }
  if (*((char *)a4 + 3600) < 1
    || a4[*((unsigned __int8 *)a4 + 3600) + 125] >= 9999000.0
    || *(double *)(a3 + 24504) >= 1.3e11)
  {
    int v16 = 0;
    double v14 = 0.0;
    double v15 = 0.0;
  }
  else
  {
    double v14 = a4[104];
    double v15 = *(double *)(a3 + 744) * 299792458.0;
    double v9 = v14 - v15;
    int v16 = 1;
  }
  double v17 = 0.0;
  if (*((char *)a4 + 3601) < 1
    || a4[*((unsigned __int8 *)a4 + 3601) + 125] >= 9999000.0
    || *(double *)(a3 + 24512) >= 1.3e11)
  {
    int v20 = 0;
    double v18 = 0.0;
    double v19 = 0.0;
  }
  else
  {
    double v18 = a4[106];
    double v19 = *(double *)(a3 + 752) * 299792458.0;
    double v17 = v18 - v19;
    int v20 = 1;
  }
  if (*(unsigned __int8 *)a4 >= 5u && *((unsigned char *)a4 + 3464))
  {
    double v21 = v6 + v7;
    double v22 = fabs(v12);
    char v23 = v22 > v21 ? v13 : 0;
    if ((v23 & 1) != 0
      || (fabs(v9) > v21 ? (char v24 = v16) : (char v24 = 0),
          (v24 & 1) != 0 || (fabs(v17) > v21 ? (int v25 = v20) : (int v25 = 0), v25 == 1)))
    {
      uint64_t v26 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v53 = 0;
      uint64_t v27 = a3 + 2960;
      long long v28 = result;
      do
      {
        if (*(unsigned char *)(a3 + v26 + 2960))
        {
          int v29 = *(_DWORD *)(a3 + 4 * v26 + 3056);
          if ((v29 - 1) >= 0x1D)
          {
            if (v29)
            {
              double v32 = v14;
              double v33 = v10;
              double v51 = v17;
              double v52 = v19;
              double v34 = v9;
              double v35 = v15;
              double v36 = v11;
              double v37 = v22;
              size_t result = (unsigned __int8 *)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
              double v22 = v37;
              double v11 = v36;
              double v15 = v35;
              double v9 = v34;
              double v17 = v51;
              double v19 = v52;
              double v10 = v33;
              double v14 = v32;
            }
            else
            {
              int v30 = *v28;
              if (v30 == 4)
              {
                if (v20)
                {
                  LODWORD(v55) = v55 + 1;
                  if (fabs(v17 + *(double *)(v27 + 8 * v26 + 1872)) - fabs(*(double *)(v27 + 8 * v26 + 1872)) <= 0.0) {
                    int v38 = v53 + 1;
                  }
                  else {
                    int v38 = v53 - 1;
                  }
                  LODWORD(v53) = v38;
                }
              }
              else if (v30 == 2)
              {
                if (v16)
                {
                  ++HIDWORD(v55);
                  if (fabs(v9 + *(double *)(v27 + 8 * v26 + 1872)) - fabs(*(double *)(v27 + 8 * v26 + 1872)) <= 0.0) {
                    int v31 = HIDWORD(v53) + 1;
                  }
                  else {
                    int v31 = HIDWORD(v53) - 1;
                  }
                  HIDWORD(v53) = v31;
                }
              }
              else if (v13)
              {
                ++HIDWORD(v54);
                if (fabs(v12 + *(double *)(v27 + 8 * v26 + 1872)) - fabs(*(double *)(v27 + 8 * v26 + 1872)) <= 0.0) {
                  int v39 = v54 + 1;
                }
                else {
                  int v39 = v54 - 1;
                }
                LODWORD(v54) = v39;
              }
            }
          }
        }
        ++v26;
        v28 += 4;
      }
      while (v26 != 48);
      if (v22 < 10000.0) {
        char v40 = v13;
      }
      else {
        char v40 = 0;
      }
      if ((v40 & 1) == 0)
      {
        char v41 = fabs(v9) < 10000.0 ? v16 : 0;
        if ((v41 & 1) == 0)
        {
          char v42 = fabs(v17) < 10000.0 ? v20 : 0;
          if ((v42 & 1) == 0)
          {
            if (v13)
            {
              BOOL v44 = (int)v54 >= 0 && HIDWORD(v54) != 0;
              if (!(HIDWORD(v55) + v55)
                || SHIDWORD(v55) >= 1 && SHIDWORD(v53) > 0
                || (int v45 = 0, (int)v55 >= 1) && (int)v53 >= 1)
              {
                int v45 = 1;
                *uint64_t v8 = 1;
              }
              size_t result = NK_Least_Squares_Cross_Check_Adj(v5, (double *)a3, 1, v44, v45, v11, v10, v12);
            }
            else
            {
              int v45 = 0;
            }
            if (v16)
            {
              BOOL v47 = v53 >= 0 && HIDWORD(v55) != 0;
              if (!(HIDWORD(v54) + v55) || SHIDWORD(v54) >= 1 && (int)v54 > 0 || (int)v55 >= 1 && (int)v53 >= 1)
              {
                int v45 = 1;
                *uint64_t v8 = 1;
              }
              size_t result = NK_Least_Squares_Cross_Check_Adj(v5, (double *)a3, 2, v47, v45, v15, v14, v9);
            }
            if (v20)
            {
              BOOL v49 = (int)v53 >= 0 && v55 != 0;
              if (!(HIDWORD(v54) + HIDWORD(v55))
                || SHIDWORD(v54) >= 1 && (int)v54 > 0
                || (int v50 = 0, SHIDWORD(v55) >= 1) && SHIDWORD(v53) >= 1)
              {
                int v50 = 1;
                *uint64_t v8 = 1;
              }
              return NK_Least_Squares_Cross_Check_Adj(v5, (double *)a3, 4, v49, v50, v19, v18, v17);
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned __int8 *NK_Least_Squares_Cross_Check_Adj(unsigned __int8 *result, double *a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8)
{
  if (a4 && a5)
  {
    int v10 = a3;
    double v12 = result;
    size_t result = (unsigned __int8 *)EvLog_nd("NK_LSq_Cross_Check:  KF Clock bias change: ", 4, a3, a3, (int)a6, (int)a7, (int)a8);
    switch(v10)
    {
      case 4:
        a2[94] = a7 * 0.00000000333564095;
        break;
      case 2:
        a2[93] = a7 * 0.00000000333564095;
        break;
      case 1:
        a2[92] = a7 * 0.00000000333564095;
        break;
    }
    for (uint64_t i = 0; i != 48; ++i)
    {
      if (!*((unsigned char *)a2 + i + 2960))
      {
        int v14 = *((_DWORD *)a2 + i + 764);
        if ((v14 - 1) >= 0x1D)
        {
          if (!v14) {
            goto LABEL_21;
          }
          size_t result = (unsigned __int8 *)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
        }
      }
      if (v10 == 4 || v10 == 2)
      {
        if (*v12 != v10) {
          goto LABEL_21;
        }
      }
      else
      {
        unsigned int v15 = *v12;
        BOOL v16 = v15 > 5;
        int v17 = (1 << v15) & 0x2A;
        if (v16 || v17 == 0) {
          goto LABEL_21;
        }
      }
      a2[i + 604] = a2[i + 604] + a8;
      a2[i + 2448] = a2[i + 2448] + a8;
      a2[i + 652] = a2[i + 652] + a8;
      a2[i + 700] = a2[i + 700] + a8;
LABEL_21:
      v12 += 4;
    }
  }
  return result;
}

void NK_Least_Squares_Check()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  unsigned __int16 v2 = v1;
  unsigned int v121 = v3;
  BOOL v123 = v4;
  int v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  v146[1] = *MEMORY[0x263EF8340];
  v134[5] = 0.0;
  v134[4] = 0.0;
  char v135 = 0;
  uint64_t v120 = v7 + 23120;
  memset(v130, 0, sizeof(v130));
  v117 = (unsigned char *)(v7 + 13963);
  uint64_t v115 = (unsigned char *)(v7 + 8387);
  memset(v131, 0, sizeof(v131));
  long long v132 = 0u;
  float64x2_t v133 = 0u;
  memset(v134, 0, 25);
  uint64_t v137 = 0;
  uint64_t v136 = 0;
  char v138 = 0;
  memset(v139, 0, sizeof(v139));
  LODWORD(__src[0]) = 0;
  WORD2(__src[0]) = 0;
  LODWORD(v140[0]) = 0;
  *(_DWORD *)((char *)v140 + 3) = 0;
  bzero((char *)__src + 6, 0xD3CuLL);
  *(void *)((char *)v140 + 15) = 0;
  *(void *)((char *)v140 + 7) = 0;
  *(void *)((char *)&v140[1] + 7) = 0;
  *(_WORD *)unsigned __int16 v2 = 0;
  memcpy(v2 + 2, __src, 0xD3EuLL);
  uint64_t v118 = (uint64_t)(v2 + 3488);
  *(_OWORD *)(v2 + 3396) = 0u;
  *(_OWORD *)(v2 + 3412) = 0u;
  *(_OWORD *)(v2 + 3428) = 0u;
  *(_OWORD *)(v2 + 3444) = 0u;
  *(_OWORD *)(v2 + 3460) = 0u;
  *(_OWORD *)(v2 + 3476) = 0u;
  *(_OWORD *)(v2 + 3492) = 0u;
  *(_OWORD *)(v2 + 3508) = 0u;
  *(_OWORD *)(v2 + 3524) = 0u;
  *(_OWORD *)(v2 + 3540) = 0u;
  *(_OWORD *)(v2 + 3556) = 0u;
  *((_DWORD *)v2 + 893) = 0;
  *(_OWORD *)(v2 + 3577) = v140[0];
  *(_OWORD *)(v2 + 3592) = *(_OWORD *)((char *)v140 + 15);
  *((_DWORD *)v2 + 848) = -1;
  *((void *)v2 + 429) = 0x416312D000000000;
  int64x2_t v10 = vdupq_n_s64(0x416312D000000000uLL);
  *((int64x2_t *)v2 + 215) = v10;
  *((void *)v2 + 432) = 0x416312D000000000;
  v2[3480] = -1;
  *((_DWORD *)v2 + 872) = -1;
  *((void *)v2 + 441) = 0x416312D000000000;
  *((int64x2_t *)v2 + 221) = v10;
  *((void *)v2 + 444) = 0x416312D000000000;
  v2[3576] = -1;
  uint64_t v116 = (uint64_t)(v2 + 3392);
  memset_pattern16(v2 + 1000, &unk_22BB3FBD0, 0x38uLL);
  memset_pattern16(v2 + 1056, &unk_22BB3FBD0, 0x20uLL);
  *((int64x2_t *)v2 + 61) = vdupq_n_s64(0x4163125300000000uLL);
  v119 = (float64x2_t *)(v2 + 976);
  int v122 = *(unsigned __int8 *)(v8 + 48);
  xmmword_26AE7789B = 0u;
  xmmword_26AE778AB = 0u;
  xmmword_26AE778BB = 0u;
  memset(v145, 0, sizeof(v145));
  memset(v127, 0, 7);
  memset(v141, 0, sizeof(v141));
  memcpy(__src, (const void *)(v8 + 10408), 0x180uLL);
  uint64_t v11 = v8 + 12424;
  memcpy(v140, (const void *)(v8 + 12424), sizeof(v140));
  uint64_t v12 = 0;
  int v13 = (unsigned __int8 *)(v9 + 76);
  uint64_t v124 = v8;
  int v14 = (double *)(v8 + 8880);
  uint64_t v15 = v8 + 12424;
  do
  {
    if (*(unsigned char *)(v11 + v12 - 3888))
    {
      int v16 = *v13;
      if (v16 != 6)
      {
        BOOL v17 = v6 == 1 && v16 == 5;
        BOOL v18 = v17;
        if (!v6 || (v16 != v6 ? (BOOL v19 = !v18) : (BOOL v19 = 0), !v19))
        {
          v141[v12] = 1;
          ++v2[1];
          ++*((unsigned char *)v127 + *v13);
          double v20 = *(double *)v15;
          double v21 = *v14;
          double v22 = *(double *)v15 - *v14;
          *((double *)v140 + v12) = v22;
          if (v22 < 0.01)
          {
            EvLog_v("NK_Least_Squares_Check: now negative %d %f %f %f %f", v12, v22, v20, *(v14 - 1), v21);
            *((void *)v140 + v12) = 0x4058F9999999999ALL;
          }
        }
      }
    }
    if (*(unsigned char *)(v11 + v12 + 1688))
    {
      int v23 = *v13;
      if (v23 != 6)
      {
        BOOL v24 = v6 == 1 && v23 == 5;
        BOOL v25 = v24;
        if (!v6 || v23 == v6 || v25)
        {
          if (!v141[v12])
          {
            v141[v12] = 1;
            ++v2[1];
            ++*((unsigned char *)v127 + *v13);
          }
          *(double *)&__src[v12] = *(double *)(v15 + 3560) / *(double *)(v8 + 656);
          *((void *)v140 + v12) = *(void *)(v15 + 5576);
          _MergedGlobals_6[v12 + 1] = 1;
        }
      }
    }
    ++v12;
    v13 += 4;
    v14 += 3;
    v15 += 8;
  }
  while (v12 != 48);
  int v26 = v122;
  if (v122 == 1) {
    int v27 = 1;
  }
  else {
    int v27 = 2;
  }
  if (v122 == 2) {
    int v27 = 0;
  }
  int v28 = v27;
  HIDWORD(v137) = v27;
  uint64_t v29 = v9;
  *(_DWORD *)((char *)&v136 + 3) = -1;
  LODWORD(v136) = 50462976;
  HIBYTE(v136) = 4;
  LODWORD(v137) = 1;
  *((void *)v2 + 448) = v136;
  *((_DWORD *)v2 + 898) = v137;
  v139[0] = 4;
  int v30 = v2[1];
  v2[3576] = v30 - 4;
  uint64_t v31 = v124;
  BOOL v32 = v123;
  if (((v30 - 4) & 0x80) == 0)
  {
    long long v33 = *(_OWORD *)(v9 + 220);
    *(_OWORD *)&v139[53] = *(_OWORD *)(v9 + 204);
    *(_OWORD *)&v139[57] = v33;
    long long v34 = *(_OWORD *)(v9 + 252);
    *(_OWORD *)&v139[61] = *(_OWORD *)(v9 + 236);
    *(_OWORD *)&v139[65] = v34;
    long long v35 = *(_OWORD *)(v9 + 156);
    *(_OWORD *)&v139[37] = *(_OWORD *)(v9 + 140);
    *(_OWORD *)&v139[41] = v35;
    long long v36 = *(_OWORD *)(v9 + 188);
    *(_OWORD *)&v139[45] = *(_OWORD *)(v9 + 172);
    *(_OWORD *)&v139[49] = v36;
    long long v37 = *(_OWORD *)(v9 + 92);
    *(_OWORD *)&v139[21] = *(_OWORD *)(v9 + 76);
    *(_OWORD *)&v139[25] = v37;
    long long v38 = *(_OWORD *)(v9 + 124);
    *(_OWORD *)&v139[29] = *(_OWORD *)(v9 + 108);
    *(_OWORD *)&v139[33] = v38;
    *(void *)&v139[3] = v141;
    *(void *)&_OWORD v139[5] = __src;
    *(void *)&v139[7] = v140;
    *(void *)&v139[9] = v2 + 408;
    *(void *)&v139[11] = v2 + 792;
    *(void *)&v139[1] = 0x2FFFFFFFFLL;
    *(void *)&v139[13] = v2 + 800;
    *(void *)&v139[15] = v2 + 2240;
    *(void *)&v139[17] = v2 + 2624;
    *(void *)&v139[19] = v2 + 3008;
    char v138 = 0;
    long long v132 = 0u;
    float64x2_t v133 = 0u;
    v134[0] = 0.0;
    if ((v30 - 5) <= 2 && v123)
    {
      if (*(unsigned char *)(v120 + 72)
        && *(_DWORD *)(v120 + 76) == 1
        && (double v39 = *(double *)(v124 + 23224), v39 < 9.0)
        && *(_DWORD *)v124 - *(_DWORD *)(v120 + 92) <= 4999)
      {
        double v40 = -*(double *)(v124 + 928) - *(double *)(v124 + 23216);
      }
      else
      {
        double v40 = -*(double *)(v124 + 928);
        double v39 = 9.0;
      }
      *(double *)&long long v132 = v40;
      *((double *)&v132 + 1) = v39;
      float64x2_t v133 = vnegq_f64(*(float64x2_t *)(v124 + 880));
      v134[0] = -*(double *)(v124 + 896);
    }
    if (NK_Least_Squares_Core((double *)(v124 + 20032), (double (*)[3])(v124 + 832), 4, v123, v121, v9 + 604, (uint64_t)v145, v146, (uint64_t)v130))
    {
      uint64_t v41 = SBYTE3(v136);
      uint64_t v42 = (char)v136;
      if (_MergedGlobals_6[0] == 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v124 + 14112;
        do
        {
          if (*(unsigned char *)(v44 + v43))
          {
            EvLog_d("NK_Least_Squares_Check: Inflate variance ", v43);
            *(double *)(v44 + 8 * v43 + 3888) = *(double *)(v44 + 8 * v43 + 3888) + 1.0;
          }
          ++v43;
        }
        while (v43 != 48);
      }
      int v45 = *(double **)&v139[13];
      double v46 = **(double **)&v139[13];
      uint64_t v31 = v124;
      if (**(double **)&v139[13] < 4.0)
      {
        uint64_t v47 = LODWORD(v146[0]);
        if ((v146[0] & 0x80000000) == 0)
        {
          uint64_t v48 = *(void *)&v139[3];
          *(unsigned char *)(*(void *)&v139[3] + LODWORD(v146[0])) = 0;
          BOOL v49 = (unsigned char *)(v124 + v47 + 14112);
          if (*v49)
          {
            unsigned char *v49 = 0;
            *(_DWORD *)(v124 + 4 * v47 + 14208) = 11;
            int v50 = v117;
          }
          else
          {
            *(unsigned char *)(v124 + 8384 + v47 + 152) = 0;
            *(_DWORD *)(v124 + 8384 + 4 * v47 + 248) = 11;
            int v50 = v115;
          }
          --*v50;
          ++v50[1];
          v145[v47] = 1;
          uint64_t v51 = HIDWORD(v146[0]);
          if ((v146[0] & 0x8000000000000000) == 0)
          {
            *(unsigned char *)(v48 + HIDWORD(v146[0])) = 0;
            if (*v49)
            {
              unsigned char *v49 = 0;
              *(_DWORD *)(v124 + 4 * v47 + 14208) = 11;
              double v52 = v117;
            }
            else
            {
              *(unsigned char *)(v124 + 8384 + v51 + 152) = 0;
              *(_DWORD *)(v124 + 8384 + 4 * v51 + 248) = 11;
              double v52 = v115;
            }
            --*v52;
            ++v52[1];
            v145[v51] = 1;
          }
        }
      }
      uint64_t v53 = HIBYTE(v136);
      if (HIBYTE(v136))
      {
        uint64_t v54 = 0;
        uint64_t v55 = (double *)v130;
        do
        {
          if (v41 == v54)
          {
            *((double *)v2 + 115) = -*(double *)&v130[8 * v41];
          }
          else if (v54 >= v42 && v54 < v42 + 3)
          {
            *((double *)&v142 + v54 - v42) = *(double *)(v124 - 8 * v42 + 688 + 8 * v54) - *v55;
          }
          *(double *)&v2[8 * v54++ + 1056] = sqrt(v55[7]);
          ++v55;
        }
        while (v53 != v54);
        double v46 = *v45;
      }
      BOOL v32 = v123;
      uint64_t v29 = v9;
      int v26 = v122;
      if (v46 > 1.0)
      {
        uint64_t v56 = 0;
        double v57 = sqrt(v46);
        int8x16_t v58 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v57, 0);
        float64x2_t v59 = (float64x2_t)vextq_s8(v58, v58, 8uLL);
        do
        {
          *(float64x2_t *)&v2[v56 + 1072] = vmulq_f64(v59, *(float64x2_t *)&v2[v56 + 1072]);
          v56 -= 16;
        }
        while (v56 != -32);
        EvLog_v("NK_LSq: DO VarFact scaling %f", v57);
      }
      uint64_t v60 = 0;
      *((double *)v2 + 116) = *((double *)v2 + 115) + *(double *)(v124 + 760) * 299792458.0;
      double v61 = (long double *)(v2 + 936);
      long long v62 = v142;
      double v63 = *(double *)&v143;
      double v64 = (double *)(v124 + 848);
      do
      {
        double v65 = *(v64 - 1) * *((double *)&v62 + 1) + *(v64 - 2) * *(double *)&v62;
        double v66 = *v64;
        v64 += 3;
        v61[v60++] = v65 + v66 * v63;
      }
      while (v60 != 3);
      *((double *)v2 + 120) = sqrt(*((double *)v2 + 118) * *((double *)v2 + 118)+ 0.0+ *((double *)v2 + 117) * *((double *)v2 + 117));
      Comp_Track8(v61);
      *((void *)v2 + 121) = v67;
      if (**(double **)&v139[13] <= 1.0)
      {
        NK_ARP_Calc_Slopes(v124 + 20032, v124 + 832, HIBYTE(v136), (uint64_t)v130, v118);
        int v68 = (char)v2[3576];
        BOOL v69 = __OFSUB__(v68, 1);
        int v70 = v68 - 1;
        if (v70 < 0 == v69)
        {
          uint64_t v71 = 0;
          double v72 = 0.0;
          do
          {
            double v73 = *(double *)&v2[v71 + 2624];
            if (v73 > 0.0) {
              double v72 = v72 + *(double *)&v2[v71 + 408] * *(double *)&v2[v71 + 408] / v73;
            }
            v71 += 8;
          }
          while (v71 != 384);
          if (v70 >= 9) {
            int v70 = 9;
          }
          double v74 = sqrt(v72) / g_ARP_cTd_Table[v70 + 10];
          *((double *)v2 + 446) = v74;
          v2[3560] = v74 <= 1.0;
        }
        ARP_Calc(v118);
      }
    }
  }
  bzero(v130, 0x310uLL);
  uint64_t v75 = 0;
  xmmword_26AE778AB = 0u;
  xmmword_26AE778BB = 0u;
  xmmword_26AE7789B = 0u;
  long long v142 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  memset(v127, 0, 7);
  uint64_t v76 = (unsigned __int8 *)(v29 + 76);
  do
  {
    if (*(unsigned char *)(v31 + v75 + 2960))
    {
      if (*(unsigned char *)(v31 + v75 + 49))
      {
        int v77 = *v76;
        if (v77 != 6)
        {
          BOOL v78 = v6 == 1 && v77 == 5;
          BOOL v79 = v78;
          if (!v6 || v77 == v6 || v79)
          {
            *((unsigned char *)&v142 + v75) = 1;
            ++*v2;
            ++*((unsigned char *)v127 + *v76);
          }
        }
      }
    }
    ++v75;
    v76 += 4;
  }
  while (v75 != 48);
  HIDWORD(v137) = v28;
  LODWORD(v137) = 0;
  uint64_t v136 = 0x3FFFFFFFF020100;
  int v80 = 3;
  if (BYTE1(v127[0]) || BYTE1(v127[1]) || HIBYTE(v127[0]))
  {
    BYTE3(v136) = 3;
    int v80 = 4;
    HIBYTE(v136) = 4;
  }
  if (BYTE2(v127[0]))
  {
    BYTE4(v136) = v80++;
    HIBYTE(v136) = v80;
  }
  if (LOBYTE(v127[1]))
  {
    BYTE5(v136) = v80++;
    HIBYTE(v136) = v80;
  }
  if (v26 != 2)
  {
    BYTE6(v136) = v80++;
    HIBYTE(v136) = v80;
  }
  LODWORD(v137) = 2;
  *(void *)(v2 + 3596) = v136;
  *((_DWORD *)v2 + 901) = v137;
  v139[0] = v80;
  int v81 = *v2;
  v2[3480] = v81 - v80;
  if ((((_BYTE)v81 - (_BYTE)v80) & 0x80) == 0)
  {
    double v125 = 0.0;
    double v126 = 0.0;
    long long v82 = *(_OWORD *)(v29 + 220);
    *(_OWORD *)&v139[53] = *(_OWORD *)(v29 + 204);
    *(_OWORD *)&v139[57] = v82;
    long long v83 = *(_OWORD *)(v29 + 252);
    *(_OWORD *)&v139[61] = *(_OWORD *)(v29 + 236);
    *(_OWORD *)&v139[65] = v83;
    long long v84 = *(_OWORD *)(v29 + 156);
    *(_OWORD *)&v139[37] = *(_OWORD *)(v29 + 140);
    *(_OWORD *)&v139[41] = v84;
    long long v85 = *(_OWORD *)(v29 + 188);
    *(_OWORD *)&v139[45] = *(_OWORD *)(v29 + 172);
    *(_OWORD *)&v139[49] = v85;
    long long v86 = *(_OWORD *)(v29 + 92);
    *(_OWORD *)&v139[21] = *(_OWORD *)(v29 + 76);
    *(_OWORD *)&v139[25] = v86;
    long long v87 = *(_OWORD *)(v29 + 124);
    *(_OWORD *)&v139[29] = *(_OWORD *)(v29 + 108);
    *(_OWORD *)&v139[33] = v87;
    *(void *)&v139[3] = &v142;
    *(void *)&_OWORD v139[5] = v31 + 4832;
    *(void *)&v139[7] = v31 + 6848;
    *(void *)&v139[9] = v2 + 8;
    *(void *)&v139[11] = v2 + 392;
    *(void *)&v139[1] = 0x1FFFFFFFFLL;
    *(void *)&v139[13] = v2 + 400;
    *(void *)&v139[15] = v2 + 1088;
    *(void *)&v139[17] = v2 + 1472;
    *(void *)&v139[19] = v2 + 1856;
    char v138 = 1;
    long long v132 = 0u;
    float64x2_t v133 = 0u;
    v134[0] = 0.0;
    if (!v32 || v81 == v80 || (v81 - v80) > 3u) {
      goto LABEL_132;
    }
    if (*(unsigned char *)v120
      && *(_DWORD *)(v120 + 4) == 1
      && (double v88 = *(double *)(v31 + 23152), v88 < 625.0)
      && *(_DWORD *)v31 - *(_DWORD *)(v120 + 20) <= 4999)
    {
      double v89 = *(double *)(v31 + 816);
      double v90 = *(double *)(v31 + 23144);
    }
    else
    {
      if (!Core_Get_Pos_H(*(_DWORD *)v31, 150000, &v126, &v125) || v125 > 500.0) {
        goto LABEL_132;
      }
      double v91 = 4.0;
      if (v125 < 350.0)
      {
        double v91 = 3.0;
        if (v125 < 250.0)
        {
          double v91 = 2.0;
          if (v125 < 150.0) {
            double v91 = 1.5;
          }
        }
      }
      double v88 = v125 * v91;
      if (v125 * v91 < 5625.0) {
        double v88 = 5625.0;
      }
      double v89 = *(double *)(v31 + 816);
      double v90 = v126;
    }
    *(double *)&long long v132 = v89 - v90;
    *((double *)&v132 + 1) = v88;
    float64x2_t v133 = vnegq_f64(*(float64x2_t *)(v31 + 880));
    v134[0] = -*(double *)(v31 + 896);
LABEL_132:
    memset(&v134[1], 0, 24);
    if (!NK_Least_Squares_Core((double *)(v31 + 20032), (double (*)[3])(v31 + 832), HIBYTE(v136), v32, v121, v29 + 604, (uint64_t)v145, v146, (uint64_t)v130))return; {
    int v92 = (char)v136;
    }
    int v93 = SBYTE3(v136);
    int v94 = SBYTE4(v136);
    int v95 = SBYTE5(v136);
    int v96 = SBYTE6(v136);
    if (**(double **)&v139[13] < 4.0)
    {
      uint64_t v97 = LODWORD(v146[0]);
      if ((v146[0] & 0x80000000) == 0)
      {
        uint64_t v98 = *(void *)&v139[3];
        *(unsigned char *)(*(void *)&v139[3] + LODWORD(v146[0])) = 0;
        uint64_t v99 = v31 + 2808;
        *(unsigned char *)(v31 + 2808 + v97 + 152) = 0;
        *(_DWORD *)(v31 + 2808 + 4 * v97 + 248) = 11;
        char v100 = *(unsigned char *)(v31 + 2811);
        *(unsigned char *)(v31 + 2811) = v100 - 1;
        char v101 = *(unsigned char *)(v31 + 2812);
        *(unsigned char *)(v31 + 2812) = v101 + 1;
        uint64_t v102 = HIDWORD(v146[0]);
        if ((v146[0] & 0x8000000000000000) == 0)
        {
          *(unsigned char *)(v98 + HIDWORD(v146[0])) = 0;
          *(unsigned char *)(v99 + v102 + 152) = 0;
          *(_DWORD *)(v99 + 4 * v102 + 248) = 11;
          *(unsigned char *)(v31 + 2811) = v100 - 2;
          *(unsigned char *)(v31 + 2812) = v101 + 2;
        }
      }
    }
    uint64_t v103 = 488;
    while (1)
    {
      uint64_t v104 = (char)v130[v103];
      if ((v104 & 0x80000000) == 0)
      {
        if (v104 == v93)
        {
          *((double *)v2 + 101) = -*(double *)&v130[8 * v104];
        }
        else if (v104 == v94)
        {
          *((double *)v2 + 103) = -*(double *)&v130[8 * v104];
        }
        else if (v104 == v95)
        {
          *((double *)v2 + 105) = -*(double *)&v130[8 * v104];
        }
        else if (v104 == v96)
        {
          *((double *)v2 + 107) = -*(double *)&v130[8 * v104];
        }
        else
        {
          if ((int)v104 < v92 || v92 + 2 < (int)v104) {
            goto LABEL_151;
          }
          *(double *)&v2[8 * v104 + 872] = *(double *)(v31 + 8 * v104 + 664)
                                                       - *(double *)&v130[8 * v104];
        }
        *(double *)&v2[8 * v104 + 1000] = sqrt(*(double *)&v130[8 * v104 + 56]);
      }
LABEL_151:
      if (++v103 == 495)
      {
        if (v93 >= 1) {
          *((double *)v2 + 102) = *((double *)v2 + 101) + *(double *)(v31 + 736) * 299792458.0;
        }
        if (v94 >= 1) {
          *((double *)v2 + 104) = *((double *)v2 + 103) + *(double *)(v31 + 744) * 299792458.0;
        }
        if (v95 >= 1) {
          *((double *)v2 + 106) = *((double *)v2 + 105) + *(double *)(v31 + 752) * 299792458.0;
        }
        if (v96 >= 1) {
          *((double *)v2 + 108) = *(double *)(v31 + 792) + *((double *)v2 + 107);
        }
        ECEF2Geo((double *)v2 + 109, (uint64_t)&WGS84_Datum, (uint64_t)(v2 + 896));
        Comp_NEDvar_UDU((uint64_t)v131, HIBYTE(v136), v92, (double (*)[3])(v31 + 832), v128);
        Comp_ErrorEllipse(v128[0], v128[1], v105, v119->f64, (double *)v2 + 123, (double *)v2 + 124);
        double v106 = **(double **)&v139[13];
        if (**(double **)&v139[13] > 1.0)
        {
          double v107 = sqrt(v106);
          if (v139[0] >= 1)
          {
            unint64_t v108 = v139[0] + 1;
            do
            {
              *(double *)&v2[8 * (v108 - 2) + 1000] = v107
                                                                  * *(double *)&v2[8 * (v108 - 2) + 1000];
              --v108;
            }
            while (v108 > 1);
          }
          float64x2_t *v119 = vmulq_n_f64(*v119, v107);
          EvLog_v("NK_LSq: PR VarFact scaling %f", v107);
          double v106 = **(double **)&v139[13];
        }
        if (v106 <= 1.0)
        {
          NK_ARP_Calc_Slopes(v31 + 20032, v31 + 832, HIBYTE(v136), (uint64_t)v130, v116);
          int v109 = (char)v2[3480];
          BOOL v69 = __OFSUB__(v109, 1);
          int v110 = v109 - 1;
          if (v110 < 0 == v69)
          {
            uint64_t v111 = 0;
            double v112 = 0.0;
            do
            {
              double v113 = *(double *)&v2[v111 + 1472];
              if (v113 > 0.0) {
                double v112 = v112 + *(double *)&v2[v111 + 8] * *(double *)&v2[v111 + 8] / v113;
              }
              v111 += 8;
            }
            while (v111 != 384);
            if (v110 >= 9) {
              int v110 = 9;
            }
            double v114 = sqrt(v112) / g_ARP_cTd_Table[v110 + 10];
            *((double *)v2 + 434) = v114;
            v2[3464] = v114 <= 1.0;
          }
          ARP_Calc(v116);
        }
        return;
      }
    }
  }
}

void *NK_ARP_Calc_Slopes(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a5 + 8) = 0u;
  double v65 = (double *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  BOOL v69 = (double *)(a4 + 112);
  size_t result = (void *)ud2cov((const double *)(a4 + 112), v80, a3);
  uint64_t v11 = 0;
  uint64_t v63 = a2;
  double v64 = (double *)(a2 + 16);
  do
  {
    if (*(unsigned char *)(*(void *)(a4 + 520) + v11))
    {
      int v70 = *(char *)(a4 + 491);
      int v66 = *(char *)(a4 + 493);
      int v67 = *(char *)(a4 + 492);
      uint64_t v71 = *(char *)(a4 + 488);
      int v72 = *(char *)(a4 + 494);
      int v12 = *(unsigned __int8 *)(a4 + 4 * v11 + 592);
      uint64_t v13 = *(unsigned int *)(a4 + 496);
      unint64_t v73 = v10 & 0xFFFFFFFF00000000 | v13;
      NK_Least_Obs_Equ_SV(1, *(void *)(a4 + 488), *(_DWORD *)(a4 + 496), v12, *(_DWORD *)(a4 + 516), (double *)(a1 + 56 * v11), (double *)v81, *(double *)(*(void *)(a4 + 528) + 8 * v11));
      uint64_t v79 = 0;
      memset(v78, 0, sizeof(v78));
      double v14 = *(double *)(*(void *)(a4 + 536) + 8 * v11);
      if (a3)
      {
        unint64_t v15 = 0;
        do
        {
          unint64_t v16 = 0;
          double v17 = *((double *)v78 + v15);
          unint64_t v18 = v15 + 1;
          do
          {
            unint64_t v19 = v16 + 1;
            double v20 = *((double *)v81 + v16);
            if (v16 < v15)
            {
              unint64_t v21 = v16 + (((v15 + 1) * v15) >> 1);
            }
            else
            {
              unint64_t v19 = v16 + 1;
              unint64_t v21 = v15 + ((unint64_t)((v16 + 1) * v16) >> 1);
            }
            double v17 = v17 + v80[v21] * v20;
            unint64_t v16 = v19;
          }
          while (v19 != a3);
          *((double *)v78 + v15++) = v17 / v14;
        }
        while (v18 != a3);
      }
      double v74 = 0.0;
      size_t result = (void *)invtst(v69, (double *)v81, a3, 0.0, 0.0, 1.0e20, &v74);
      double v22 = 1.0 - v74 / v14;
      double v74 = v22;
      if (v22 >= 0.0001)
      {
        uint64_t v23 = 0;
        double v24 = fmax(v22, 0.0001);
        double v74 = v24;
        BOOL v25 = (double *)v78 + v71;
        double v26 = *v25;
        double v27 = v25[1];
        double v28 = v25[2];
        uint64_t v29 = v64;
        do
        {
          double v30 = *(v29 - 1) * v27 + *(v29 - 2) * v26;
          double v31 = *v29;
          v29 += 3;
          *(double *)((char *)&v75 + v23) = v30 + v31 * v28;
          v23 += 8;
        }
        while (v23 != 24);
        double v32 = v14 / v24;
        double v33 = v32 * (v76 * v76 + v75 * v75);
        if (v33 > *v65)
        {
          *(double *)(a5 + 8) = v33;
          *(unsigned char *)a5 = v11;
        }
        double v34 = v32 * (v77 * v77);
        if (v34 > *(double *)(a5 + 16))
        {
          *(double *)(a5 + 16) = v34;
          *(unsigned char *)(a5 + 1) = v11;
        }
        if (v13 == 2)
        {
          switch(v12)
          {
            case 1:
            case 3:
            case 5:
              unsigned int v35 = v70;
              int v36 = v72;
              unint64_t v10 = v73;
              if (v70 >= 1) {
                goto LABEL_27;
              }
              break;
            case 2:
              int v38 = v67;
              goto LABEL_31;
            default:
              if (v12 == 4)
              {
                int v38 = v66;
LABEL_31:
                int v36 = v72;
                unint64_t v10 = v73;
                if (v38 >= 1)
                {
                  double v37 = *((double *)v78 + v38);
                  goto LABEL_33;
                }
              }
              else
              {
                int v36 = v72;
                unint64_t v10 = v73;
              }
              break;
          }
        }
        else
        {
          int v36 = v72;
          unint64_t v10 = v73;
          if (v13 == 1)
          {
            unsigned int v35 = v70;
            if (v70 >= 1)
            {
LABEL_27:
              double v37 = *((double *)v78 + v35);
LABEL_33:
              double v34 = v32 * (v37 * v37);
            }
          }
        }
        if (v34 > *(double *)(a5 + 24))
        {
          *(double *)(a5 + 24) = v34;
          *(unsigned char *)(a5 + 2) = v11;
        }
        if (v36 >= 1)
        {
          double v39 = v32 * (*((double *)v78 + v36) * *((double *)v78 + v36));
          if (v39 > *(double *)(a5 + 32))
          {
            *(double *)(a5 + 32) = v39;
            *(unsigned char *)(a5 + 3) = v11;
          }
        }
      }
      else
      {
        if (*(char *)(a5 + 88) >= 1)
        {
          size_t result = EvLog_v("NK_ARP_Calc_Slopes: Matrix B too small %f %d", v22, *(unsigned __int8 *)(a5 + 88));
          --*(unsigned char *)(a5 + 88);
        }
        unint64_t v10 = v73;
      }
    }
    ++v11;
  }
  while (v11 != 48);
  double v40 = *(double *)(a4 + 408);
  if (v40 > 0.0)
  {
    memset(v81, 0, sizeof(v81));
    uint64_t v41 = *(char *)(a4 + 488);
    uint64_t v42 = (char *)v81 + 8 * v41;
    *(_OWORD *)uint64_t v42 = *(_OWORD *)(a4 + 416);
    *((void *)v42 + 2) = *(void *)(a4 + 432);
    *((void *)v81 + a3) = *(void *)(a4 + 400);
    if (a3)
    {
      unint64_t v43 = 0;
      do
      {
        unint64_t v44 = 0;
        unint64_t v45 = v43 + 1;
        double v46 = 0.0;
        do
        {
          unint64_t v47 = v44 + 1;
          double v48 = *((double *)v81 + v44);
          if (v44 < v43)
          {
            unint64_t v49 = v44 + (((v43 + 1) * v43) >> 1);
          }
          else
          {
            unint64_t v47 = v44 + 1;
            unint64_t v49 = v43 + ((unint64_t)((v44 + 1) * v44) >> 1);
          }
          double v46 = v46 + v80[v49] * v48;
          unint64_t v44 = v47;
        }
        while (v47 != a3);
        *((double *)v78 + v43++) = v46 / v40;
      }
      while (v45 != a3);
    }
    double v74 = 0.0;
    size_t result = (void *)invtst(v69, (double *)v81, a3, 0.0, 0.0, 1.0e20, &v74);
    double v50 = 1.0 - v74 / v40;
    if (v50 >= 0.0000001)
    {
      uint64_t v51 = 0;
      double v52 = fmax(v50, 0.0000001);
      uint64_t v53 = (double *)v78 + v41;
      double v54 = *v53;
      double v55 = v53[1];
      double v56 = v53[2];
      double v57 = (double *)(v63 + 16);
      do
      {
        double v58 = *(v57 - 1) * v55 + *(v57 - 2) * v54;
        double v59 = *v57;
        v57 += 3;
        *(double *)((char *)&v75 + v51) = v58 + v59 * v56;
        v51 += 8;
      }
      while (v51 != 24);
      double v60 = v40 / v52;
      double v61 = v60 * (v76 * v76 + v75 * v75);
      if (v61 > *v65)
      {
        *(double *)(a5 + 8) = v61;
        *(unsigned char *)a5 = 48;
      }
      double v62 = v60 * (v77 * v77);
      if (v62 > *(double *)(a5 + 16))
      {
        *(double *)(a5 + 16) = v62;
        *(unsigned char *)(a5 + 1) = 48;
      }
    }
    else if (*(char *)(a5 + 88) >= 1)
    {
      size_t result = EvLog_v("NK_ARP_Calc_Slopes: Vert Matrix B too small %f %d", 1.0 - v74 / v40, *(unsigned __int8 *)(a5 + 88));
      --*(unsigned char *)(a5 + 88);
    }
  }
  return result;
}

uint64_t NK_ARP_Kalman(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  unint64_t v43 = (unsigned char *)(a2 + 25166);
  uint64_t v42 = (unsigned char *)(a3 + 11528);
  memset(v44, 0, 7);
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  for (uint64_t i = 3056; i != 3248; i += 4)
  {
    uint64_t v8 = *((unsigned __int8 *)a1 + i - 3056);
    if (v8 != 6)
    {
      if (*(unsigned char *)(a2 + v5 + 2960))
      {
        int v9 = *(_DWORD *)(a2 + i);
        if ((v9 - 1) >= 0x1D)
        {
          if (v9)
          {
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          }
          else if (*(unsigned char *)(a2 + v5 + 49))
          {
            ++v44[v8];
            ++v6;
            *((unsigned char *)&v76 + v5) = 1;
          }
        }
      }
    }
    ++v5;
  }
  int v10 = *(unsigned __int8 *)(a2 + 48);
  if (v10 == 1) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  if (v10 == 2) {
    int v12 = 0;
  }
  else {
    int v12 = v11;
  }
  bzero(v46, 0x310uLL);
  int v41 = v12;
  int v53 = v12;
  int v52 = 0;
  *(_DWORD *)&v50[3] = -1;
  *(_DWORD *)double v50 = -16645888;
  signed int v13 = 3;
  unsigned __int8 v51 = 3;
  if (v44[1] || v44[5] || v44[3])
  {
    v50[3] = 3;
    signed int v13 = 4;
    unsigned __int8 v51 = 4;
  }
  if (v44[2])
  {
    v50[4] = v13++;
    unsigned __int8 v51 = v13;
  }
  if (v44[4])
  {
    v50[5] = v13++;
    unsigned __int8 v51 = v13;
  }
  if (v10 != 2)
  {
    v50[6] = v13++;
    unsigned __int8 v51 = v13;
  }
  int v52 = 2;
  unsigned char *v42 = v6 - v13;
  if ((char)(v6 - v13) >= 1 && v43[5] && (*v43 || v43[1] || v43[2]))
  {
    long long v14 = a1[8];
    long long v15 = a1[10];
    long long v16 = a1[11];
    long long v71 = a1[9];
    long long v72 = v15;
    long long v73 = v16;
    long long v17 = a1[4];
    long long v18 = a1[6];
    long long v19 = a1[7];
    long long v67 = a1[5];
    long long v68 = v18;
    long long v69 = v19;
    long long v70 = v14;
    long long v20 = *a1;
    long long v21 = a1[2];
    long long v22 = a1[3];
    long long v63 = a1[1];
    long long v64 = v21;
    uint64_t v49 = 0;
    long long v65 = v22;
    long long v66 = v17;
    uint64_t v55 = 0x1FFFFFFFFLL;
    long long v47 = 0u;
    long long v48 = 0u;
    char v54 = 1;
    double v56 = &v76;
    double v57 = (double *)(a2 + 4832);
    double v58 = (void *)(a2 + 6848);
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = v20;
    if (NK_Least_Squares_Update((double *)(a2 + 20032), v13, 0, 0, v45, (uint64_t)v46))
    {
      NK_ARP_Calc_Slopes(a2 + 20032, a2 + 832, v51, (uint64_t)v46, a3 + 11440);
      ARP_Calc(a3 + 11440);
    }
  }
  memcpy(__dst, (const void *)(a2 + 10408), sizeof(__dst));
  uint64_t result = (uint64_t)memcpy(v74, (const void *)(a2 + 12424), sizeof(v74));
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v26 = 0;
  long long v76 = 0u;
  uint64_t v27 = a2 + 15984;
  long long v77 = 0u;
  long long v78 = 0u;
  memset(v44, 0, 7);
  do
  {
    uint64_t v28 = *((unsigned __int8 *)a1 + v24);
    if (v28 == 6) {
      goto LABEL_40;
    }
    if (*(unsigned char *)(a2 + 8536 + v25))
    {
      int v29 = *(_DWORD *)(a2 + v24 + 8632);
      if ((v29 - 1) >= 0x1D)
      {
        if (v29)
        {
          uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          if (*((unsigned char *)a1 + v24) == 6) {
            goto LABEL_40;
          }
        }
        else
        {
          ++v26;
          ++v44[v28];
          *((unsigned char *)&v76 + v25) = 1;
        }
      }
    }
    if (*(unsigned char *)(a2 + 14112 + v25))
    {
      int v30 = *(_DWORD *)(a2 + v24 + 14208);
      if ((v30 - 1) >= 0x1D)
      {
        if (v30)
        {
          uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
        }
        else
        {
          *((unsigned char *)&v76 + v25) = 1;
          __dst[v25] = *(double *)v27 / *(double *)(a2 + 656);
          v74[v25] = *(void *)(v27 + 2016);
          ++v26;
        }
      }
    }
LABEL_40:
    ++v25;
    v27 += 8;
    v24 += 4;
  }
  while (v25 != 48);
  int v53 = v41;
  *(_DWORD *)&v50[3] = -1;
  *(_DWORD *)double v50 = 50462976;
  unsigned __int8 v51 = 4;
  int v52 = 1;
  v42[96] = v26 - 4;
  if ((char)(v26 - 4) >= 1 && v43[8] && v43[3])
  {
    long long v31 = a1[8];
    long long v32 = a1[10];
    long long v33 = a1[11];
    long long v71 = a1[9];
    long long v72 = v32;
    long long v73 = v33;
    long long v34 = a1[4];
    long long v35 = a1[6];
    long long v36 = a1[7];
    long long v67 = a1[5];
    long long v68 = v35;
    long long v69 = v36;
    long long v70 = v31;
    long long v37 = *a1;
    long long v38 = a1[2];
    long long v39 = a1[3];
    long long v63 = a1[1];
    long long v64 = v38;
    uint64_t v49 = 0;
    long long v65 = v39;
    long long v66 = v34;
    uint64_t v55 = 0x2FFFFFFFFLL;
    long long v47 = 0u;
    long long v48 = 0u;
    char v54 = 0;
    double v56 = &v76;
    double v57 = __dst;
    double v58 = v74;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = v37;
    uint64_t result = NK_Least_Squares_Update((double *)(a2 + 20032), 4, 0, 0, v45, (uint64_t)v46);
    if (result)
    {
      NK_ARP_Calc_Slopes(a2 + 20032, a2 + 832, v51, (uint64_t)v46, a3 + 11536);
      return ARP_Calc(a3 + 11536);
    }
  }
  return result;
}

__n128 NK_Least_Squares_Publish_Soln(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 792);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 808);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 824);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 840);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 920);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 960);
  uint64_t v2 = *(void *)(a2 + 3596);
  *(_DWORD *)(a1 + 532) = *(_DWORD *)(a2 + 3604);
  *(void *)(a1 + 524) = v2;
  uint64_t v3 = *(void *)(a2 + 3584);
  *(_DWORD *)(a1 + 520) = *(_DWORD *)(a2 + 3592);
  *(void *)(a1 + 512) = v3;
  long long v4 = *(_OWORD *)(a2 + 872);
  *(void *)(a1 + 120) = *(void *)(a2 + 888);
  *(_OWORD *)(a1 + 104) = v4;
  long long v5 = *(_OWORD *)(a2 + 896);
  *(void *)(a1 + 144) = *(void *)(a2 + 912);
  *(_OWORD *)(a1 + 128) = v5;
  long long v6 = *(_OWORD *)(a2 + 936);
  *(void *)(a1 + 184) = *(void *)(a2 + 952);
  *(_OWORD *)(a1 + 168) = v6;
  long long v7 = *(_OWORD *)(a2 + 1000);
  long long v8 = *(_OWORD *)(a2 + 1016);
  long long v9 = *(_OWORD *)(a2 + 1032);
  *(void *)(a1 + 280) = *(void *)(a2 + 1048);
  *(_OWORD *)(a1 + 264) = v9;
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 232) = v7;
  long long v10 = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 304) = v10;
  long long v11 = *(_OWORD *)(a2 + 976);
  *(void *)(a1 + 224) = *(void *)(a2 + 992);
  *(_OWORD *)(a1 + 208) = v11;
  long long v12 = *(_OWORD *)(a2 + 3408);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 3392);
  *(_OWORD *)(a1 + 336) = v12;
  long long v13 = *(_OWORD *)(a2 + 3424);
  long long v14 = *(_OWORD *)(a2 + 3440);
  long long v15 = *(_OWORD *)(a2 + 3472);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 3456);
  *(_OWORD *)(a1 + 400) = v15;
  *(_OWORD *)(a1 + 352) = v13;
  *(_OWORD *)(a1 + 368) = v14;
  long long v16 = *(_OWORD *)(a2 + 3504);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 3488);
  *(_OWORD *)(a1 + 432) = v16;
  __n128 result = *(__n128 *)(a2 + 3520);
  long long v18 = *(_OWORD *)(a2 + 3536);
  long long v19 = *(_OWORD *)(a2 + 3568);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 3552);
  *(_OWORD *)(a1 + 496) = v19;
  *(__n128 *)(a1 + 448) = result;
  *(_OWORD *)(a1 + 464) = v18;
  return result;
}

BOOL Track_Meas_Update(int a1, double *a2, unsigned int a3, unsigned __int8 *a4, BOOL a5, _WORD *a6, double a7, double a8, double a9)
{
  v28[3] = *(double *)MEMORY[0x263EF8340];
  if ((*((_DWORD *)a4 + 1) - 1) > 1) {
    return 0;
  }
  a4[12] = 0;
  int v10 = *a4;
  if (*a4)
  {
    double v23 = 0.0;
    double v17 = *((double *)a4 + 5) - *((double *)a4 + 3) * a9;
    *((double *)a4 + 6) = v17;
    if (v17 >= 180.0)
    {
      double v18 = -360.0;
    }
    else
    {
      if (v17 >= -180.0) {
        goto LABEL_9;
      }
      double v18 = 360.0;
    }
    double v17 = v17 + v18;
    *((double *)a4 + 6) = v17;
LABEL_9:
    __double2 v20 = __sincos_stret(a7 * 0.0174532925);
    Comp_Track_velLOS(v20.__cosval * a8, v20.__sinval * a8, a2, v28);
    uint64_t v25 = 0;
    uint64_t v21 = 2;
    memset(v24, 0, sizeof(v24));
    do
    {
      *((double *)v24 + (a1 + v21)) = v28[v21];
      --v21;
    }
    while (v21 != -1);
    *((double *)v24 + a3) = v17;
    umeas(a5, a3, *((double *)a4 + 4), (double *)v24, v27, v26, &v23, *((double *)a4 + 7));
    double v22 = v23;
    if (v23 <= 0.0)
    {
      int v10 = 0;
      *a4 = 0;
      a4[12] = 1;
      ++*a6;
      *((double *)a4 + 8) = v22 + *((double *)a4 + 8);
    }
    else
    {
      *((double *)a4 + 8) = *((double *)a4 + 4) * (v23 * (v27[a3] * v27[a3]));
      int v10 = *a4;
    }
  }
  return v10 != 0;
}

uint64_t NK_Comp_ith_DR_Res(uint64_t result, uint64_t a2, uint64_t a3, double *a4, double a5, double a6, double a7, double a8, double a9)
{
  *a4 = a6 - a9;
  *(unsigned char *)(a3 + result + 104) = 1;
  ++*(unsigned char *)(a3 + 2);
  double v9 = a7 * 0.000025 * a8;
  int v10 = (double *)(a3 + 8 * result);
  v10[205] = v9;
  double v11 = *a4 - a5;
  v10[253] = v11;
  double v12 = *(double *)(a3 + 24 * result + 488) + *(double *)(a3 + 24 * result + 496);
  v10[505] = v12;
  if (*(unsigned char *)(a2 + result + 144))
  {
    uint64_t v13 = a2 + 8 * result;
    double v11 = v11 - *(double *)(v13 + 960) * a8;
    v10[253] = v11;
    double v14 = v12 + *(double *)(v13 + 1344) * a8 * a8;
  }
  else
  {
    double v14 = v9 + v12;
  }
  v10[505] = v14;
  *(double *)(a3 + 8 * result + 2792) = v11;
  if (fabs(v11) < 150000.0)
  {
    *(unsigned char *)(a3 + result + 152) = 1;
    ++*(unsigned char *)(a3 + 3);
  }
  return result;
}

size_t Hal26_InitLowPowerContext(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  g_CommsLPCntxt = 0u;
  xmmword_26AE6CAD8 = 0u;
  unk_26AE6CAE8 = 0u;
  xmmword_26AE6CAF8 = 0u;
  xmmword_26AE6CAC8 = 0u;
  size_t result = gnssOsa_InitCriticalSection("Hal26_InitLowPowerContext", 38, (_opaque_pthread_mutex_t *)&xmmword_26AE6CAC8);
  if (result)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LowPowerTransitionCritic\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 69, "Hal26_InitLowPowerContext", 1552);
      return LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
    }
  }
  return result;
}

size_t Hal26_DeInitLowPowerContext(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  size_t result = gnssOsa_MacDeinitCriticalSection("Hal26_DeInitLowPowerContext", 47, (_opaque_pthread_mutex_t *)&xmmword_26AE6CAC8);
  if (result)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LowPowerTransitionCritic\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 69, "Hal26_DeInitLowPowerContext", 1553);
      return LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
    }
  }
  return result;
}

uint64_t Hal26_UpdateLowPowerCntxt(char a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("Hal26_UpdateLowPowerCntxt", 56, (_opaque_pthread_mutex_t *)&xmmword_26AE6CAC8))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v5, "HAL", 69, "Hal26_UpdateLowPowerCntxt", 1550);
    return LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
  }
  if (a2)
  {
    LODWORD(v7) = 0;
    a1 = 0;
    *(_WORD *)((char *)&g_CommsLPCntxt + 1) = 256;
  }
  else
  {
    *(_WORD *)((char *)&g_CommsLPCntxt + 1) = 1;
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  }
  DWORD1(g_CommsLPCntxt) = v7;
  BYTE8(g_CommsLPCntxt) = a1;
  uint64_t result = gnssOsa_MacExitCriticalSection("Hal26_UpdateLowPowerCntxt", 72, (_opaque_pthread_mutex_t *)&xmmword_26AE6CAC8);
  if (result)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v8, "HAL", 69, "Hal26_UpdateLowPowerCntxt", 1551);
      return LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
    }
  }
  return result;
}

unsigned char *Hal26_HandleLowPowerMsg(unsigned char *result, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2 != 12)
  {
    uint64_t result = (unsigned char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len,%u\n", v7);
    return (unsigned char *)LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
  }
  unsigned __int16 v2 = result;
  if (!result)
  {
    uint64_t result = (unsigned char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx aResp\n");
    return (unsigned char *)LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
  }
  if (!BYTE1(g_CommsLPCntxt))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LPreq ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 68, "Hal26_HandleLowPowerMsg", v2[8]);
      LbsOsaTrace_WriteLog(0xDu, __str, v4, 5, 1);
    }
    uint64_t result = gnssOsa_Calloc("Hal26_HandleLowPowerMsg", 112, 1, 0x10uLL);
    if (result)
    {
      unint64_t v5 = result;
      result[12] = v2[8];
      AgpsSendFsmMsg(129, 129, 8456192, result);
      return (unsigned char *)Hal26_UpdateLowPowerCntxt(v5[12], 0);
    }
  }
  return result;
}

uint64_t Hal26_SendLPResponse(int a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (g_IsProdMode && LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ProdMode LPACK sent\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal26_SendLPResponse");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  if (!gnssOsa_MacEnterCriticalSection("Hal26_GetLatestSeqNum", 79, (_opaque_pthread_mutex_t *)&xmmword_26AE6CAC8))
  {
    char v9 = BYTE8(g_CommsLPCntxt);
    if (gnssOsa_MacExitCriticalSection("Hal26_GetLatestSeqNum", 86, (_opaque_pthread_mutex_t *)&xmmword_26AE6CAC8)&& LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 69, "Hal26_GetLatestSeqNum", 1551);
      LbsOsaTrace_WriteLog(0xDu, __str, v11, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PostedSn,%u,SentSn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 68, "Hal26_SendLPResponse", a1, BYTE8(g_CommsLPCntxt));
      LbsOsaTrace_WriteLog(0xDu, __str, v13, 5, 1);
    }
    *(void *)double v18 = 0xD20004206C42787ALL;
    char v19 = 1;
    char v20 = v9;
    __int16 v21 = a1 + 1;
    char v22 = 10;
    Hal_CommsItfUpdateStatus(2);
    if ((int)Hal22_ZxSendToChip(v18, 0xDuLL) <= 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Lp-ack,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "HAL", 69, "Hal26_SendLPResponse", 1282, BYTE8(g_CommsLPCntxt));
        int v16 = 0;
        goto LABEL_19;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: LP resp %u id\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 68, "Hal26_SendLPResponse", BYTE8(g_CommsLPCntxt));
      int v16 = 5;
LABEL_19:
      LbsOsaTrace_WriteLog(0xDu, __str, v15, v16, 1);
    }
    Hal26_UpdateLowPowerCntxt(0, 1);
    return Hal_CommsItfUpdateStatus(3);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "Hal26_GetLatestSeqNum", 1550);
    LbsOsaTrace_WriteLog(0xDu, __str, v5, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Hal26_SendLPResponse:Seq Num unavailable\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 87, "Hal26_SendLPResponse");
    return LbsOsaTrace_WriteLog(0xDu, __str, v8, 2, 1);
  }
  return result;
}

uint64_t Hal26_HandleConfigureUartLpRes(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
    return LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
  }
  if (a2 <= 0xC)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len,%u\n", v7);
    return LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
  }
  g_ConfigUartLpResponse = a1[8];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Conf UARTLP status,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 68, "Hal26_HandleConfigureUartLpRes", g_ConfigUartLpResponse);
    LbsOsaTrace_WriteLog(0xDu, __str, v5, 5, 1);
  }
  uint64_t result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
  if ((result & 1) == 0)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      __error();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v6);
      return LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
    }
  }
  return result;
}

uint64_t GPS_To_Glon_Time(uint64_t result, int a2, double a3, double a4, int *a5, int *a6, double *a7)
{
  int v7 = (int)a3 / 86400 - (a2 + (result << 10)) + 8 * (a2 + (result << 10));
  int v8 = (v7 - 5839) / 1461;
  *a5 = v8;
  *a6 = v7 - 1461 * v8 - 5838;
  ++*a5;
  double v9 = -86400.0;
  double v10 = a3 + floor(a3 / 86400.0) * -86400.0 + 10800.0 - a4;
  *a7 = v10;
  if (v10 >= 86400.0)
  {
    int v11 = 1;
    goto LABEL_5;
  }
  if (v10 < 0.0)
  {
    int v11 = -1;
    double v9 = 86400.0;
LABEL_5:
    *a7 = v10 + v9;
    goto LABEL_7;
  }
  int v11 = 0;
LABEL_7:
  int v12 = *a6 + v11;
  *a6 = v12;
  if (v12 <= 1461)
  {
    if (v12 > 0) {
      return result;
    }
    int v13 = 1461;
    int v14 = -1;
  }
  else
  {
    int v13 = -1461;
    int v14 = 1;
  }
  *a5 += v14;
  *a6 += v13;
  return result;
}

uint64_t Glon_To_GPS_Time(uint64_t result, int a2, double a3, double a4, int *a5, int *a6, double *a7)
{
  double v7 = -0.5;
  if (a4 > 0.0) {
    double v7 = 0.5;
  }
  double v8 = v7 + a4;
  double v9 = 2147483650.0;
  double v10 = -2147483650.0;
  if (v8 >= -2147483650.0) {
    double v10 = (double)(int)v8;
  }
  if (v8 <= 2147483650.0) {
    double v9 = v10;
  }
  int v11 = a2 + 1461 * result + 4377;
  *a5 = v11 / 7168;
  int v12 = v11 % 7168;
  int v13 = v11 % 7168 / 7;
  *a6 = v13;
  double v14 = 86400.0;
  double v15 = a3 + -10800.0 + v9 + a4 - v9;
  if (v15 >= 86400.0)
  {
    double v15 = v15 + -86400.0;
  }
  else
  {
    double v14 = 0.0;
    if (v15 < 0.0)
    {
      double v15 = v15 + 86400.0;
      double v14 = -86400.0;
    }
  }
  double v16 = v14 + (double)(-7 * v13 + v12) * 86400.0 + v15;
  *a7 = v16;
  double v17 = 604800.0;
  if (v16 >= 604800.0)
  {
    int v18 = 1;
    double v17 = -604800.0;
  }
  else
  {
    if (v16 >= 0.0) {
      return result;
    }
    int v18 = -1;
  }
  *a6 = v18 + v13;
  *a7 = v16 + v17;
  return result;
}

BOOL Is_Future_Leap_Sec_Date_Not_Valid(int a1, int a2, int a3, unsigned __int8 a4)
{
  if (a1 < 1024) {
    return 0;
  }
  switch(a2)
  {
    case 0:
    case 2:
    case 6:
      break;
    case 1:
    case 3:
    case 5:
      a3 |= 0x400u;
      break;
    case 4:
      a3 += 1356;
      break;
    default:
      return 0;
  }
  uint64_t v5 = 0;
  int v6 = a1 - 127;
  if (a3 > a1 - 127) {
    int v6 = a3;
  }
  if (a2 == 4) {
    unsigned __int8 v7 = a4 + 1;
  }
  else {
    unsigned __int8 v7 = a4;
  }
  int v8 = (unint64_t)(3257812231 * (86400 * v7 - 43200)) >> 32;
  int v9 = (int)((v8 >> 16)
           + (v8 >> 31)
           - (((v6 - a3 + 255) & 0xFFFFFF00)
            + a3)
           + 8 * (((v6 - a3 + 255) & 0xFFFFFF00) + a3)
           - 5839)
     % 1461
     + 1;
  do
  {
    int v10 = Glon_Day_Num_of_Quarter_Year_Change[v5];
    BOOL result = v9 != v10;
    if (v9 == v10) {
      break;
    }
  }
  while (v5++ != 15);
  return result;
}

uint64_t VecSortIndexAscR8(uint64_t result, unsigned int a2, int *a3, int a4)
{
  if (a2 >= 2)
  {
    int v4 = 0;
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = a3[v5];
      if ((int)v5 - 1 < 0)
      {
        int v9 = v5;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = v4;
        int v9 = v5;
        do
        {
          uint64_t v10 = a3[v4 + v7];
          double v11 = *(double *)(result + 8 * v10);
          if (a4)
          {
            if (fabs(v11) <= fabs(*(double *)(result + 8 * v6)))
            {
              int v9 = v5 + v7;
              goto LABEL_12;
            }
          }
          else if (v11 <= *(double *)(result + 8 * v6))
          {
            goto LABEL_12;
          }
          a3[(int)v5 + (int)v7] = v10;
          int v9 = v8--;
          --v7;
        }
        while (v4 + 1 + v7 > 0);
        int v9 = 0;
      }
LABEL_12:
      a3[v9] = v6;
      ++v5;
    }
    while (v4++ != a2 - 2);
  }
  return result;
}

uint64_t VecSortDscU1(uint64_t result, unsigned int a2, signed __int8 *a3)
{
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
      a3[i] = i;
    if (a2 >= 2)
    {
      int v4 = 0;
      uint64_t v5 = 1;
      do
      {
        uint64_t v6 = a3[v5];
        int v7 = v5;
        if ((int)v5 - 1 >= 0)
        {
          uint64_t v8 = 0;
          while (1)
          {
            uint64_t v9 = a3[v4 + v8];
            if (*(unsigned __int8 *)(result + v6) <= *(unsigned __int8 *)(result + v9)) {
              break;
            }
            a3[(int)v5 + (int)v8--] = v9;
            if (v4 + 1 + v8 <= 0)
            {
              int v7 = 0;
              goto LABEL_12;
            }
          }
          int v7 = v5 + v8;
        }
LABEL_12:
        a3[v7] = v6;
        ++v5;
      }
      while (v4++ != a2 - 2);
    }
  }
  return result;
}

double *VecSortAscR8(double *result, int a2, signed int a3)
{
  if (a3 > a2 && ((a3 | a2) & 0x80000000) == 0)
  {
    int v4 = result;
    do
    {
      int v5 = a2;
      for (unsigned int i = a3; ; ++i)
      {
        double v7 = v4[a2];
        uint64_t v8 = &v4[v5];
        do
        {
          double v9 = *v8++;
          double v10 = v9;
          int v11 = v5 + 1;
          if (v5 >= a3) {
            break;
          }
          ++v5;
        }
        while (v10 <= v7);
        int v5 = v11 - 1;
        do
        {
          signed int v12 = i;
          double v13 = v4[i--];
        }
        while (v12 > a2 && v13 > v7);
        if ((int)(i + 1) <= v5) {
          break;
        }
        *(v8 - 1) = v13;
        v4[v12] = v10;
      }
      v4[v12] = v7;
      v4[a2] = v13;
      BOOL result = (double *)VecSortAscR8(v4, a2, i);
      a2 = i + 2;
    }
    while ((int)(i + 2) < a3 && ((a2 | a3) & 0x80000000) == 0);
  }
  return result;
}

double *VecMedian8(double *result, int a2)
{
  if (a2) {
    return VecSortAscR8(result, 0, a2 - 1);
  }
  return result;
}

double GN_AGNSS_Get_GAD_Data(_DWORD *a1, char a2, int *a3, int *a4, _WORD *a5, unsigned char *a6, int *a7, _WORD *a8, int *a9, unsigned char *a10, uint64_t a11)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  char v28 = 0;
  API_Get_GAD_Data(a1, a2, a7, a8, &v28, a3, a4, a9, a10, (uint64_t)&v15);
  *a5 = *a8;
  *a6 = v28;
  *(_DWORD *)a11 = v15;
  *(unsigned char *)(a11 + 4) = v16;
  double result = v17;
  *(double *)(a11 + 8) = v17;
  *(unsigned char *)(a11 + 16) = v18;
  *(_WORD *)(a11 + 18) = v19;
  *(_DWORD *)(a11 + 20) = v20;
  *(unsigned char *)(a11 + 24) = v21;
  *(unsigned char *)(a11 + 25) = v22;
  *(_WORD *)(a11 + 26) = v23;
  *(_WORD *)(a11 + 28) = v24;
  *(unsigned char *)(a11 + 30) = v25;
  *(unsigned char *)(a11 + 31) = v26;
  *(unsigned char *)(a11 + 32) = v27;
  return result;
}

BOOL GN_AGNSS_Get_Meas(_DWORD *a1, int a2, char *a3)
{
  char v4 = a2;
  BOOL GNSS_MS_Ass_Meas = API_Get_GNSS_MS_Ass_Meas(a1, a2, a3);
  if (GNSS_MS_Ass_Meas) {
    EvLog_GN_AGNSS_Meas(3u, v4, (uint64_t)a3);
  }
  return GNSS_MS_Ass_Meas;
}

char *EvLog_GN_AGNSS_Meas(unsigned int a1, char a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if ((a2 & 0x10) != 0) {
    char v5 = 81;
  }
  else {
    char v5 = 45;
  }
  if ((a2 & 0x20) != 0) {
    char v6 = 82;
  }
  else {
    char v6 = 45;
  }
  int8x16_t v7 = (int8x16_t)vdupq_n_s32(a2);
  if ((a2 & 0x40) != 0) {
    char v8 = 66;
  }
  else {
    char v8 = 45;
  }
  int16x8_t v9 = (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_22BB402A0));
  *(int8x8_t *)v9.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x2D002D002D002DLL, (int8x8_t)0x4D005300450047);
  unsigned __int32 v28 = vmovn_s16(v9).u32[0];
  char v29 = v5;
  char v30 = v6;
  char v31 = v8;
  uint64_t v32 = 0;
  char v33 = 0;
  double v10 = str_AGNSS_PM(*(_DWORD *)a3);
  double result = EvLog_v("GN_AGNSS_Meas:  PM %s  %s %8d %4d %3d  %3d %u  %2d %3d", (const char *)&v28, v10, *(_DWORD *)(a3 + 4), *(__int16 *)(a3 + 8), *(unsigned __int8 *)(a3 + 10), *(char *)(a3 + 11), *(_DWORD *)(a3 + 12), *(unsigned __int8 *)(a3 + 16), *(unsigned __int8 *)(a3 + 17));
  if ((unsigned __int16)g_Enable_Event_Log >= a1 && *(unsigned char *)(a3 + 16))
  {
    unint64_t v12 = 0;
    double v13 = (int *)(a3 + 40);
    do
    {
      unsigned int v14 = *((unsigned __int8 *)v13 - 11);
      unsigned int v15 = v14 >> 3;
      unsigned int v16 = v14 & 7;
      double v17 = str_AGNSS_PM(*(v13 - 5));
      int v18 = *((unsigned __int8 *)v13 - 16);
      int v19 = *((unsigned __int8 *)v13 - 15);
      int v20 = *((unsigned __int8 *)v13 - 14);
      int v21 = *((unsigned __int8 *)v13 - 13);
      int v22 = *((unsigned __int8 *)v13 - 12);
      int v23 = *((unsigned __int8 *)v13 - 11);
      int v24 = *((__int16 *)v13 - 2);
      int v25 = *((unsigned __int16 *)v13 - 1);
      int v26 = *(v13 - 2);
      int v27 = *v13;
      v13 += 6;
      double result = EvLog_v("GN_AGNSS_Meas_El: %2d %s %3d %3d %2d %d  C %3d %2d (%d,%d,%3d) %7d  D %6d %5d %d", v12++, v17, v18, v19, v20, v21, v22, v23, v15, v16, (int)(((double)v16 * 0.125 + 1.0) * 0.5 * (double)(1 << v15)), v26, v24, v25, v27);
    }
    while (v12 < *(unsigned __int8 *)(a3 + 16));
  }
  return result;
}

uint64_t GN_AGNSS_Get_Assist_Req(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  strcpy(v56, "--- ");
  memset(v57, 0, sizeof(v57));
  uint64_t v58 = 0;
  char v54 = (char *)v57;
  uint64_t v55 = &v59;
  v53[0] = v57;
  v53[1] = v57;
  uint64_t GNSS_Assist_Req = API_Get_GNSS_Assist_Req((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  sprintf1da(v53, GNSS_Assist_Req, (unsigned char *)&v59 + 1, 0, 0);
  unsigned int v9 = 3;
  double v10 = (char *)v53[0];
  do
  {
    v53[0] = v10 + 1;
    *double v10 = 32;
    double v10 = (char *)v53[0];
    if (v53[0] >= (unint64_t)v55)
    {
      double v10 = v54;
      v53[0] = v54;
    }
    --v9;
  }
  while (v9 > 1);
  if (a1)
  {
    if (*a1)
    {
      if (a1[10]) {
        char v11 = 116;
      }
      else {
        char v11 = 84;
      }
      v56[0] = v11;
    }
    if (a1[1])
    {
      if (a1[11]) {
        char v12 = 112;
      }
      else {
        char v12 = 80;
      }
      v56[1] = v12;
    }
    if (a1[2])
    {
      if (a1[12]) {
        char v13 = 105;
      }
      else {
        char v13 = 73;
      }
      v56[2] = v13;
    }
    char v14 = v56[0];
    if (v56[0])
    {
      unsigned int v15 = &v56[1];
      do
      {
        v53[0] = v10 + 1;
        *double v10 = v14;
        double v10 = (char *)v53[0];
        if (v53[0] >= (unint64_t)v55)
        {
          double v10 = v54;
          v53[0] = v54;
        }
        int v16 = *v15++;
        char v14 = v16;
      }
      while (v16);
    }
    double v17 = " G(";
    if (!a1[4]) {
      double v17 = " g(";
    }
    char v18 = *v17;
    if (*v17)
    {
      int v19 = (unsigned __int8 *)(v17 + 1);
      do
      {
        v53[0] = v10 + 1;
        *double v10 = v18;
        double v10 = (char *)v53[0];
        if (v53[0] >= (unint64_t)v55)
        {
          double v10 = v54;
          v53[0] = v54;
        }
        int v20 = *v19++;
        char v18 = v20;
      }
      while (v20);
    }
    sprintf1da(v53, a1[14], (unsigned char *)&v59 + 1, 0, 0);
    sprintf_cm1d(v53, a1[15]);
    sprintf_cm1d(v53, a1[16]);
    int v21 = (unsigned char *)v53[0]++;
    *int v21 = 41;
    int v22 = (char *)v53[0];
    if (v53[0] >= (unint64_t)v55)
    {
      int v22 = v54;
      v53[0] = v54;
    }
    int v23 = " R(";
    if (!a1[5]) {
      int v23 = " r(";
    }
    char v24 = *v23;
    if (*v23)
    {
      int v25 = (unsigned __int8 *)(v23 + 1);
      do
      {
        v53[0] = v22 + 1;
        *int v22 = v24;
        int v22 = (char *)v53[0];
        if (v53[0] >= (unint64_t)v55)
        {
          int v22 = v54;
          v53[0] = v54;
        }
        int v26 = *v25++;
        char v24 = v26;
      }
      while (v26);
    }
    sprintf1da(v53, a1[17], (unsigned char *)&v59 + 1, 0, 0);
    sprintf_cm1d(v53, a1[18]);
    sprintf_cm1d(v53, a1[19]);
    int v27 = (unsigned char *)v53[0]++;
    unsigned char *v27 = 41;
    unsigned __int32 v28 = (char *)v53[0];
    if (v53[0] >= (unint64_t)v55)
    {
      unsigned __int32 v28 = v54;
      v53[0] = v54;
    }
    char v29 = " Q(";
    if (!a1[6]) {
      char v29 = " q(";
    }
    char v30 = *v29;
    if (*v29)
    {
      char v31 = (unsigned __int8 *)(v29 + 1);
      do
      {
        v53[0] = v28 + 1;
        char *v28 = v30;
        unsigned __int32 v28 = (char *)v53[0];
        if (v53[0] >= (unint64_t)v55)
        {
          unsigned __int32 v28 = v54;
          v53[0] = v54;
        }
        int v32 = *v31++;
        char v30 = v32;
      }
      while (v32);
    }
    sprintf1da(v53, a1[20], (unsigned char *)&v59 + 1, 0, 0);
    sprintf_cm1d(v53, a1[21]);
    sprintf_cm1d(v53, a1[22]);
    char v33 = (unsigned char *)v53[0]++;
    *char v33 = 41;
    uint64_t v34 = (char *)v53[0];
    if (v53[0] >= (unint64_t)v55)
    {
      uint64_t v34 = v54;
      v53[0] = v54;
    }
    long long v35 = " S(";
    if (!a1[7]) {
      long long v35 = " s(";
    }
    char v36 = *v35;
    if (*v35)
    {
      long long v37 = (unsigned __int8 *)(v35 + 1);
      do
      {
        v53[0] = v34 + 1;
        *uint64_t v34 = v36;
        uint64_t v34 = (char *)v53[0];
        if (v53[0] >= (unint64_t)v55)
        {
          uint64_t v34 = v54;
          v53[0] = v54;
        }
        int v38 = *v37++;
        char v36 = v38;
      }
      while (v38);
    }
    sprintf1da(v53, a1[23], (unsigned char *)&v59 + 1, 0, 0);
    sprintf_cm1d(v53, a1[24]);
    sprintf_cm1d(v53, a1[25]);
    long long v39 = (unsigned char *)v53[0]++;
    *long long v39 = 41;
    double v40 = (char *)v53[0];
    if (v53[0] >= (unint64_t)v55)
    {
      double v40 = v54;
      v53[0] = v54;
    }
    int v41 = " B(";
    if (!a1[8]) {
      int v41 = " b(";
    }
    char v42 = *v41;
    if (*v41)
    {
      unint64_t v43 = (unsigned __int8 *)(v41 + 1);
      do
      {
        v53[0] = v40 + 1;
        *double v40 = v42;
        double v40 = (char *)v53[0];
        if (v53[0] >= (unint64_t)v55)
        {
          double v40 = v54;
          v53[0] = v54;
        }
        int v44 = *v43++;
        char v42 = v44;
      }
      while (v44);
    }
    sprintf1da(v53, a1[26], (unsigned char *)&v59 + 1, 0, 0);
    sprintf_cm1d(v53, a1[27]);
    sprintf_cm1d(v53, a1[28]);
    unint64_t v45 = (unsigned char *)v53[0]++;
    *unint64_t v45 = 41;
    double v46 = (char *)v53[0];
    if (v53[0] >= (unint64_t)v55)
    {
      double v46 = v54;
      v53[0] = v54;
    }
    long long v47 = " E(";
    if (!a1[9]) {
      long long v47 = " e(";
    }
    char v48 = *v47;
    if (*v47)
    {
      uint64_t v49 = (unsigned __int8 *)(v47 + 1);
      do
      {
        v53[0] = v46 + 1;
        *double v46 = v48;
        double v46 = (char *)v53[0];
        if (v53[0] >= (unint64_t)v55)
        {
          double v46 = v54;
          v53[0] = v54;
        }
        int v50 = *v49++;
        char v48 = v50;
      }
      while (v50);
    }
    sprintf1da(v53, a1[29], (unsigned char *)&v59 + 1, 0, 0);
    sprintf_cm1d(v53, a1[30]);
    sprintf_cm1d(v53, a1[31]);
    unsigned __int8 v51 = (unsigned char *)v53[0]++;
    *unsigned __int8 v51 = 41;
    if (v53[0] >= (unint64_t)v55) {
      v53[0] = v54;
    }
  }
  EvLog_v("GN_AGNSS_Assist_Req: %s", (const char *)v57);
  return GNSS_Assist_Req;
}

uint64_t GN_AGNSS_Set_Bad_SV_List(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  memset(v53, 0, 130);
  long long v51 = 0u;
  long long v52 = 0u;
  *(_OWORD *)int v50 = 0u;
  int v5 = Is_GN_API_Set_Allowed("GN_AGNSS_Set_Bad_SV_List");
  uint64_t result = 0;
  if (!v5) {
    return result;
  }
  Debug_Log_AGNSS_Bad_SV_List(a1, a2, a3);
  uint64_t v7 = *(void *)(p_api + 72) + 253;
  long long v8 = *(_OWORD *)(*(void *)(p_api + 72) + 397);
  long long v9 = *(_OWORD *)(*(void *)(p_api + 72) + 413);
  long long v10 = *(_OWORD *)(*(void *)(p_api + 72) + 365);
  *(_OWORD *)&v57[80] = *(_OWORD *)(*(void *)(p_api + 72) + 381);
  *(_OWORD *)&v57[96] = v8;
  *(_OWORD *)&v57[112] = v9;
  long long v11 = *(_OWORD *)(v7 + 80);
  long long v12 = *(_OWORD *)(v7 + 96);
  long long v13 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)&v57[16] = *(_OWORD *)(v7 + 64);
  *(_OWORD *)&v57[32] = v11;
  long long v14 = *(_OWORD *)v7;
  *(_OWORD *)&v57[48] = v12;
  *(_OWORD *)&v57[64] = v10;
  long long v15 = *(_OWORD *)(v7 + 16);
  long long v16 = *(_OWORD *)(v7 + 32);
  *(_OWORD *)char v54 = v14;
  long long v55 = v15;
  *(_WORD *)&v57[128] = *(_WORD *)(v7 + 176);
  long long v56 = v16;
  *(_OWORD *)double v57 = v13;
  if (!a1)
  {
    int v33 = 0;
    int v34 = 0;
    int v35 = 0;
    int v36 = 0;
    int v37 = 0;
    goto LABEL_75;
  }
  uint64_t v17 = 0;
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  char v23 = 0;
  uint64_t v24 = a1;
  uint64_t v25 = a1 - 1;
  while (2)
  {
    uint64_t v26 = v17;
    while (1)
    {
      int v27 = a2[v26];
      if (v27 != 1) {
        break;
      }
      ++v26;
      char v23 = 1;
      if (v24 == v26) {
        goto LABEL_32;
      }
    }
    if (v27 > 15)
    {
      switch(v27)
      {
        case 16:
          char v20 = 1;
          goto LABEL_22;
        case 32:
          char v19 = 1;
          goto LABEL_22;
        case 64:
          char v18 = 1;
          goto LABEL_22;
      }
    }
    else
    {
      switch(v27)
      {
        case 2:
          char v22 = 1;
          goto LABEL_22;
        case 4:
          uint64_t v21 = 1;
          goto LABEL_22;
        case 8:
          goto LABEL_22;
      }
    }
    uint64_t v47 = v25;
    uint64_t v48 = a1;
    uint64_t v28 = v21;
    EvCrt_Illegal_Default("GN_AGNSS_Set_Bad_SV_List", 0x216u);
    uint64_t v21 = v28;
    uint64_t v25 = v47;
    a1 = v48;
LABEL_22:
    uint64_t v17 = v26 + 1;
    if (v25 != v26) {
      continue;
    }
    break;
  }
  if (v23)
  {
LABEL_32:
    *(_OWORD *)char v54 = 0u;
    long long v55 = 0u;
    *(void *)&long long v30 = 0x101010101010101;
    *((void *)&v30 + 1) = 0x101010101010101;
    *(_OWORD *)int v50 = v30;
    long long v51 = v30;
    if ((v22 & 1) == 0)
    {
LABEL_25:
      if ((v21 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_34;
    }
  }
  else if ((v22 & 1) == 0)
  {
    goto LABEL_25;
  }
  memset(&v57[8], 0, 36);
  *(void *)&long long v31 = 0x101010101010101;
  *((void *)&v31 + 1) = 0x101010101010101;
  *(_OWORD *)((char *)v53 + 8) = v31;
  *(_OWORD *)((char *)&v53[1] + 8) = v31;
  DWORD2(v53[2]) = 16843009;
  if ((v21 & 1) == 0)
  {
LABEL_26:
    if ((v20 & 1) == 0) {
      goto LABEL_27;
    }
LABEL_35:
    *(_WORD *)&v57[89] = 0;
    *(void *)&v57[81] = 0;
    *(void *)((char *)&v53[5] + 1) = 0x101010101010101;
    *(_WORD *)((char *)&v53[5] + 9) = 257;
    if ((v19 & 1) == 0)
    {
LABEL_28:
      if ((v18 & 1) == 0) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    goto LABEL_36;
  }
LABEL_34:
  memset(&v57[91], 0, 39);
  *(void *)&long long v32 = 0x101010101010101;
  *((void *)&v32 + 1) = 0x101010101010101;
  *(_OWORD *)((char *)&v53[5] + 11) = v32;
  *(_OWORD *)((char *)&v53[6] + 11) = v32;
  *(void *)((char *)&v53[7] + 10) = 0x101010101010101;
  if (v20) {
    goto LABEL_35;
  }
LABEL_27:
  if ((v19 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_36:
  long long v56 = 0uLL;
  *(void *)double v57 = 0;
  *(void *)&long long v52 = 0x101010101010101;
  *((void *)&v52 + 1) = 0x101010101010101;
  *(void *)&v53[0] = 0x101010101010101;
  if (v18)
  {
LABEL_29:
    memset(&v57[44], 0, 37);
    *(void *)&long long v29 = 0x101010101010101;
    *((void *)&v29 + 1) = 0x101010101010101;
    *(_OWORD *)((char *)&v53[2] + 12) = v29;
    *(_OWORD *)((char *)&v53[3] + 12) = v29;
    *(void *)((char *)&v53[4] + 9) = 0x101010101010101;
  }
LABEL_30:
  if (a1 > 0xB2)
  {
    EvCrt_v("GN_AGNSS_Set_Bad_SV_List: FAILED: Num_Bad_SV = %d >%d, Out of range!");
    return 0;
  }
  for (uint64_t i = 0; i != v24; ++i)
  {
    int v39 = a2[i];
    if (v39 > 15)
    {
      switch(v39)
      {
        case 16:
          unsigned int v40 = 202;
          int v39 = 193;
          uint64_t v41 = 4;
          break;
        case 32:
          unsigned int v40 = 24;
          uint64_t v41 = 1;
          int v39 = 1;
          break;
        case 64:
          unsigned int v40 = 37;
          int v39 = 1;
          uint64_t v41 = 3;
          break;
        default:
LABEL_61:
          int v44 = str_AGNSS_PM(a2[i]);
          EvCrt_v("GN_AGNSS_Set_Bad_SV_List: FAILED: Bad_SV_Type_List[%d] = 0x%x (%s), Out of range!", i, v39, v44);
          continue;
      }
    }
    else
    {
      switch(v39)
      {
        case 1:
          uint64_t v41 = 0;
          unsigned int v40 = 32;
          break;
        case 2:
          unsigned int v40 = 36;
          int v39 = 1;
          uint64_t v41 = 2;
          break;
        case 4:
          unsigned int v40 = 158;
          int v39 = 120;
          uint64_t v41 = 5;
          break;
        default:
          goto LABEL_61;
      }
    }
    unsigned int v42 = a3[i];
    if (v42 < v39 || v40 < v42)
    {
      EvCrt_v("GN_AGNSS_Set_Bad_SV_List: FAILED: Bad_SV_Id_List[%d] = %d <%d or >%d, Out of range!");
      return 0;
    }
    v54[v42 - v39 + Num_Prn[v41]] = 1;
  }
  int v37 = 0;
  int v36 = 0;
  int v35 = 0;
  int v34 = 0;
  int v33 = 0;
  LODWORD(a1) = 0;
  do
  {
    int v46 = *a2++;
    int v45 = v46;
    if (v46 > 15)
    {
      switch(v45)
      {
        case 16:
          ++v35;
          break;
        case 32:
          ++v33;
          break;
        case 64:
          ++v37;
          break;
        default:
LABEL_73:
          EvCrt_Illegal_Default("GN_AGNSS_Set_Bad_SV_List", 0x2B7u);
          break;
      }
    }
    else
    {
      switch(v45)
      {
        case 1:
          LODWORD(a1) = a1 + 1;
          break;
        case 2:
          ++v36;
          break;
        case 4:
          ++v34;
          break;
        case 8:
          break;
        default:
          goto LABEL_73;
      }
    }
    --v24;
  }
  while (v24);
LABEL_75:
  EvLog_v("GN_AGNSS_Set_Bad_SV_List: G %d Q %d R %d S %d B %d E %d", a1, v35, v33, v34, v37, v36);
  return API_Set_Inhib_SVID(v54, v50);
}

const char *str_AGNSS_PM(int a1)
{
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64) {
        return "B";
      }
      if (a1 == 128) {
        return "H";
      }
    }
    else
    {
      if (a1 == 16) {
        return "Q";
      }
      if (a1 == 32) {
        return "R";
      }
    }
LABEL_16:
    EvCrt_Illegal_Default("str_AGNSS_PM", 0x76u);
    return "X";
  }
  else
  {
    uint64_t result = "X";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "G";
        break;
      case 2:
        uint64_t result = "E";
        break;
      case 4:
        uint64_t result = "S";
        break;
      case 8:
        uint64_t result = "M";
        break;
      default:
        goto LABEL_16;
    }
  }
  return result;
}

uint64_t GN_AGNSS_Set_Not_Brd_SV_List(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGNSS_Set_Not_Brd_SV_List");
  if (!result) {
    return result;
  }
  Debug_Log_AGNSS_Not_Brd_SV_List(a1, a2, a3);
  uint64_t v7 = *(void *)(p_api + 72);
  long long v8 = *(_OWORD *)(v7 + 624);
  *(_OWORD *)&v46[80] = *(_OWORD *)(v7 + 608);
  *(_OWORD *)&v46[96] = v8;
  *(_OWORD *)&v46[112] = *(_OWORD *)(v7 + 640);
  *(_WORD *)&v46[128] = *(_WORD *)(v7 + 656);
  long long v9 = *(_OWORD *)(v7 + 560);
  *(_OWORD *)&v46[16] = *(_OWORD *)(v7 + 544);
  *(_OWORD *)&v46[32] = v9;
  long long v10 = *(_OWORD *)(v7 + 592);
  *(_OWORD *)&v46[48] = *(_OWORD *)(v7 + 576);
  *(_OWORD *)&v46[64] = v10;
  long long v11 = *(_OWORD *)(v7 + 496);
  *(_OWORD *)unint64_t v43 = *(_OWORD *)(v7 + 480);
  long long v44 = v11;
  long long v12 = *(_OWORD *)(v7 + 528);
  long long v45 = *(_OWORD *)(v7 + 512);
  *(_OWORD *)int v46 = v12;
  if (!a1)
  {
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    int v30 = 0;
    goto LABEL_75;
  }
  uint64_t v13 = 0;
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = a1;
  uint64_t v21 = a1 - 1;
  while (2)
  {
    uint64_t v22 = v13;
    while (1)
    {
      int v23 = a2[v22];
      if (v23 != 1) {
        break;
      }
      ++v22;
      char v19 = 1;
      if (v20 == v22) {
        goto LABEL_32;
      }
    }
    if (v23 > 15)
    {
      switch(v23)
      {
        case 16:
          char v16 = 1;
          goto LABEL_22;
        case 32:
          char v15 = 1;
          goto LABEL_22;
        case 64:
          char v14 = 1;
          goto LABEL_22;
      }
    }
    else
    {
      switch(v23)
      {
        case 2:
          uint64_t v18 = 1;
          goto LABEL_22;
        case 4:
          uint64_t v17 = 1;
          goto LABEL_22;
        case 8:
          goto LABEL_22;
      }
    }
    uint64_t v41 = a1;
    unsigned int v42 = a3;
    uint64_t v24 = v17;
    uint64_t v25 = v18;
    uint64_t v40 = v21;
    EvCrt_Illegal_Default("GN_AGNSS_Set_Not_Brd_SV_List", 0x300u);
    uint64_t v18 = v25;
    uint64_t v17 = v24;
    uint64_t v21 = v40;
    a1 = v41;
    a3 = v42;
LABEL_22:
    uint64_t v13 = v22 + 1;
    if (v21 != v22) {
      continue;
    }
    break;
  }
  if (v19)
  {
LABEL_32:
    *(_OWORD *)unint64_t v43 = 0u;
    long long v44 = 0u;
    if ((v18 & 1) == 0)
    {
LABEL_25:
      if ((v17 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_34;
    }
  }
  else if ((v18 & 1) == 0)
  {
    goto LABEL_25;
  }
  memset(&v46[8], 0, 36);
  if ((v17 & 1) == 0)
  {
LABEL_26:
    if ((v16 & 1) == 0) {
      goto LABEL_27;
    }
LABEL_35:
    *(_WORD *)&v46[89] = 0;
    *(void *)&v46[81] = 0;
    if ((v15 & 1) == 0)
    {
LABEL_28:
      if ((v14 & 1) == 0) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    goto LABEL_36;
  }
LABEL_34:
  memset(&v46[91], 0, 39);
  if (v16) {
    goto LABEL_35;
  }
LABEL_27:
  if ((v15 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_36:
  long long v45 = 0uLL;
  *(void *)int v46 = 0;
  if (v14) {
LABEL_29:
  }
    memset(&v46[44], 0, 37);
LABEL_30:
  if (a1 > 0xB2)
  {
    EvCrt_v("GN_AGNSS_Set_Not_Brd_SV_List: FAILED: Num_Not_Brd_SV = %d >%d, Out of range!");
    return 0;
  }
  for (uint64_t i = 0; i != v20; ++i)
  {
    int v32 = a2[i];
    if (v32 > 15)
    {
      switch(v32)
      {
        case 16:
          unsigned int v33 = 202;
          int v32 = 193;
          uint64_t v34 = 4;
          break;
        case 32:
          unsigned int v33 = 24;
          uint64_t v34 = 1;
          int v32 = 1;
          break;
        case 64:
          unsigned int v33 = 37;
          int v32 = 1;
          uint64_t v34 = 3;
          break;
        default:
LABEL_61:
          int v37 = str_AGNSS_PM(a2[i]);
          EvCrt_v("GN_AGNSS_Set_Not_Brd_SV_List: FAILED: Not_Brd_SV_Type_List[%d] = 0x%x (%s), Out of range!", i, v32, v37);
          continue;
      }
    }
    else
    {
      switch(v32)
      {
        case 1:
          uint64_t v34 = 0;
          unsigned int v33 = 32;
          break;
        case 2:
          unsigned int v33 = 36;
          int v32 = 1;
          uint64_t v34 = 2;
          break;
        case 4:
          unsigned int v33 = 158;
          int v32 = 120;
          uint64_t v34 = 5;
          break;
        default:
          goto LABEL_61;
      }
    }
    unsigned int v35 = a3[i];
    if (v35 < v32 || v33 < v35)
    {
      EvCrt_v("GN_AGNSS_Set_Not_Brd_SV_List: FAILED: Not_Brd_SV_Id_List[%d] = %d <%d or >%d, Out of range!");
      return 0;
    }
    v43[v35 - v32 + Num_Prn[v34]] = 1;
  }
  int v30 = 0;
  int v29 = 0;
  int v28 = 0;
  int v27 = 0;
  int v26 = 0;
  LODWORD(a1) = 0;
  do
  {
    int v39 = *a2++;
    int v38 = v39;
    if (v39 > 15)
    {
      switch(v38)
      {
        case 16:
          ++v28;
          break;
        case 32:
          ++v26;
          break;
        case 64:
          ++v30;
          break;
        default:
LABEL_73:
          EvCrt_Illegal_Default("GN_AGNSS_Set_Not_Brd_SV_List", 0x39Bu);
          break;
      }
    }
    else
    {
      switch(v38)
      {
        case 1:
          LODWORD(a1) = a1 + 1;
          break;
        case 2:
          ++v29;
          break;
        case 4:
          ++v27;
          break;
        case 8:
          break;
        default:
          goto LABEL_73;
      }
    }
    --v20;
  }
  while (v20);
LABEL_75:
  EvLog_v("GN_AGNSS_Set_Not_Brd_SV_List: G %d Q %d R %d S %d B %d E %d", a1, v28, v26, v27, v30, v29);
  return API_Set_Not_Broadcast_SVID(v43);
}

uint64_t GN_AGNSS_Set_Ref_Time(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGNSS_Set_Ref_Time")) {
    return 0;
  }
  int v3 = *(_DWORD *)a1;
  int v2 = *(_DWORD *)(a1 + 4);
  char v4 = str_AGNSS_PM(v2);
  EvLog_v("GN_AGNSS_Set_Ref_Time: %d 0x%x (%s) %d %d %d", v3, v2, v4, *(unsigned __int16 *)(a1 + 8), *(_DWORD *)(a1 + 12), *(unsigned __int16 *)(a1 + 16));
  if (!*(_DWORD *)a1)
  {
    EvCrt_v("GN_AGNSS_Set_Ref_Time: FAILED: OS_Time_ms = 0, Out of range!", 0, v29);
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 4);
  if ((v6 - 1) > 0x3F || ((1 << (v6 - 1)) & 0x800000008000800BLL) == 0)
  {
    str_AGNSS_PM(*(_DWORD *)(a1 + 4));
    EvCrt_v("GN_AGNSS_Set_Ref_Time: FAILED: GNSS_Type = 0x%x (%s), Out of range!");
    return 0;
  }
  if (*(__int16 *)(a1 + 8) < 0)
  {
    EvCrt_v("GN_AGNSS_Set_Ref_Time: FAILED: Day = %d <1 or >%d, Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 12) > 0x5265BFFu)
  {
    EvCrt_v("GN_AGNSS_Set_Ref_Time: FAILED: TOD_ms = %d >%d, Out of range!");
    return 0;
  }
  if (!*(_WORD *)(a1 + 16))
  {
    EvCrt_v("GN_AGNSS_Set_Ref_Time: FAILED: Sigma_ms = %d ==0, Out of range!");
    return 0;
  }
  int v5 = *(_DWORD *)a1;
  if ((int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v5) >= 180001)
  {
    EvCrt_v("GN_AGNSS_Set_Ref_Time: FAILED: OS_Time_ms = %d, too old by %d ms");
    return 0;
  }
  Debug_Log_AGNSS_Ref_Time(a1);
  int v7 = *(_DWORD *)(a1 + 4);
  uint64_t v8 = (v7 - 1);
  if (v8 > 0x3F) {
    goto LABEL_40;
  }
  if (((1 << (v7 - 1)) & 0x800000000000800BLL) != 0)
  {
    uint64_t v9 = *(unsigned __int16 *)(a1 + 8);
    int v10 = *(_DWORD *)(a1 + 12);
    if (*(_WORD *)(a1 + 8))
    {
      if (v7 != 64)
      {
        if (v7 != 2) {
          goto LABEL_30;
        }
        uint64_t v9 = (v9 + 7168);
LABEL_23:
        int v11 = 13000;
LABEL_29:
        v10 += v11;
LABEL_30:
        int v20 = Complete_GPS_GNSS_Day(v9, v10 / 1000);
        int v21 = v20 / 7;
        double v22 = (double)v10 * 0.001 + (double)(86400 * (-7 * (__int16)(v20 / 7) + v20));
        for (unint64_t i = 0x4122750000000000; v22 >= 604800.0; LOWORD(v21) = v21 + 1)
          double v22 = v22 + -604800.0;
        while (v22 < 0.0)
        {
          double v22 = v22 + 604800.0;
          LOWORD(v21) = v21 - 1;
        }
        int v24 = *(_DWORD *)a1;
        uint64_t v25 = p_NA;
        *(_DWORD *)(p_NA + 412) = *(_DWORD *)a1;
        *(_WORD *)(v25 + 424) = v21;
        *(double *)(v25 + 416) = v22;
        LOWORD(i) = *(_WORD *)(a1 + 16);
        double v26 = (double)i * 0.001;
        *(double *)(v25 + 432) = v26;
        if (v20 >= 1)
        {
          uint64_t v19 = 1;
          *(unsigned char *)(v25 + 2) = 1;
          API_Set_Ref_Time(v24, v22, v21, v26);
          return v19;
        }
LABEL_37:
        EvCrt_v("GN_AGNSS_Set_Ref_Time: FAILED, GNSS_Day unknown");
        return 0;
      }
      uint64_t v9 = (v9 + 9492);
    }
    else if (v7 != 64)
    {
      if (v7 != 2) {
        goto LABEL_30;
      }
      goto LABEL_23;
    }
    int v11 = 14000;
    goto LABEL_29;
  }
  if (v8 != 31)
  {
LABEL_40:
    int v28 = str_AGNSS_PM(*(_DWORD *)(a1 + 4));
    EvLog_v("GN_AGNSS_Set_Ref_Time: IGNORED, Not Implemented for GNSS Type: %s", v28);
    return 0;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 12);
  int v13 = Complete_Glon_GNSS_Day(*(unsigned __int16 *)(a1 + 8), v12 / 0x3E8);
  uint64_t v14 = p_NA;
  *(unsigned char *)(p_NA + 3) = 1;
  int v15 = *(_DWORD *)a1;
  *(_DWORD *)(v14 + 440) = *(_DWORD *)a1;
  *(_WORD *)(v14 + 444) = (unsigned __int16)v13 / 0x5B5u + 1;
  *(_WORD *)(v14 + 446) = (unsigned __int16)v13 % 0x5B5u;
  double v16 = (double)v12 * 0.001;
  LOWORD(v17) = *(_WORD *)(a1 + 16);
  double v18 = (double)v17 * 0.001;
  *(double *)(v14 + 448) = v16;
  *(double *)(v14 + 456) = v18;
  if (!v13) {
    goto LABEL_37;
  }
  API_Set_Ref_Glon_Time(v15, (unsigned __int16)v13 / 0x5B5u + 1, (unsigned __int16)v13 % 0x5B5u, v16, v18);
  return 1;
}

uint64_t Complete_GPS_GNSS_Day(uint64_t result, int a2)
{
  if ((int)result >= 0x2000) {
    return result;
  }
  uint64_t v2 = *(void *)(p_api + 48);
  if (!*(unsigned char *)(v2 + 5)
    || *(int *)v2 < 3
    || (int v3 = (int)*(double *)(v2 + 24) + 604800 * *(__int16 *)(v2 + 16), v3 < 1))
  {
    if (result)
    {
LABEL_9:
      int v6 = *(__int16 *)(*(void *)(p_api + 72) + 1026);
      int v5 = 7 * v6 + 4096;
      if (v6 <= 1539) {
        int v5 = 14869;
      }
      goto LABEL_11;
    }
    LOWORD(v5) = 0;
    return (unsigned __int16)v5;
  }
  int v4 = v3 - a2;
  int v5 = (v3 - a2 + 43200) / 86400;
  if (!result) {
    return (unsigned __int16)v5;
  }
  if (v4 <= 707745599) {
    goto LABEL_9;
  }
LABEL_11:
  int v7 = v5 - result;
  if (v5 - (int)result >= 4096) {
    int v7 = 4096;
  }
  return ((v5 - result - v7 + 0x1FFF) & 0xFFFFE000) + result;
}

uint64_t Complete_Glon_GNSS_Day(int a1, int a2)
{
  if ((a1 & 0xE000) != 0)
  {
    LOWORD(v5) = a1;
    return (unsigned __int16)(v5 + 1);
  }
  uint64_t v2 = *(void *)(p_api + 48);
  if (!*(unsigned char *)(v2 + 5)) {
    goto LABEL_8;
  }
  if (*(int *)v2 < 3) {
    goto LABEL_8;
  }
  int v3 = (int)*(double *)(v2 + 24) + 604800 * *(__int16 *)(v2 + 16);
  if (v3 < 1) {
    goto LABEL_8;
  }
  unsigned int v4 = v3 - a2 + 54000;
  int v5 = v4 / 0x15180 - 5840;
  if (a1 || v4 < 0x1E148980)
  {
    if (v4 > 0x484337FF)
    {
LABEL_10:
      int v7 = v5 - 4096;
      do
      {
        LOWORD(v5) = a1;
        a1 += 0x2000;
      }
      while (v7 > (unsigned __int16)v5);
      return (unsigned __int16)(v5 + 1);
    }
LABEL_8:
    int v6 = *(__int16 *)(*(void *)(p_api + 72) + 1026);
    int v5 = 7 * v6 - 1743;
    if (v6 <= 1538) {
      int v5 = 9027;
    }
    goto LABEL_10;
  }
  return (unsigned __int16)(v5 + 1);
}

uint64_t GN_AGNSS_Set_Time_Model(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!Is_GN_API_Set_Allowed("GN_AGNSS_Set_Time_Model")) {
    return 0;
  }
  uint64_t v2 = str_AGNSS_PM(*(_DWORD *)a1);
  int v3 = str_AGNSS_PM(*(_DWORD *)(a1 + 24));
  EvLog_v("GN_AGNSS_Set_Time_Model: %s->%s  %d %d  %d %d %d  %d", v2, v3, *(_DWORD *)(a1 + 4), *(unsigned __int16 *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(char *)(a1 + 20), *(char *)(a1 + 21));
  if ((*(_DWORD *)a1 - 2) > 0x3E
    || ((1 << (*(_DWORD *)a1 - 2)) & 0x4000000040000001) == 0)
  {
    str_AGNSS_PM(*(_DWORD *)a1);
    EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: GNSS_Type_From = 0x%x (%s), Out of range!");
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 24);
  if ((v4 - 1) > 0x3F || ((1 << (v4 - 1)) & 0x8000000080008003) == 0)
  {
    str_AGNSS_PM(*(_DWORD *)(a1 + 24));
    EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: GNSS_Type_To = 0x%x (%s), Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 4) >= 0x240C840u)
  {
    EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: Ref_GNSS_TOW = %d >=604800000/16, Out of range!");
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 != 0x7FFFFFFF && (v5 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: tA1 = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  int v6 = *(char *)(a1 + 20);
  if (v6 != 127 && ((char)(v6 - 64) & 0x80000000) == 0)
  {
    EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: tA2 = %d <-64 or >=64, Out of range!");
    return 0;
  }
  unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
  if (v7 != 0x7FFF && v7 >= 0x2000)
  {
    EvCrt_v("GN_AGNSS_Set_Time_Model:  FAILED:  Ref_GNSS_Weeuint64_t k = %d >=8192, Out of range!");
    return 0;
  }
  int v8 = *(char *)(a1 + 21);
  if (v8 != 127 && ((char)(v8 - 64) & 0x80000000) == 0)
  {
    EvCrt_v("GN_AGNSS_Set_Time_Model:  FAILED:  deltaT = %d <-64 or >=64, Out of range!");
    return 0;
  }
  Debug_Log_AGNSS_Time_Model(a1);
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 2)
  {
    int v17 = *(_DWORD *)(a1 + 24);
    if (v17 != 16 && v17 != 1) {
      return 0;
    }
    int v18 = *(_DWORD *)(a1 + 16);
    LOWORD(v27) = *(_DWORD *)(a1 + 12);
    WORD1(v27) = v18;
    LODWORD(v11) = *(_DWORD *)(a1 + 4);
    BYTE4(v27) = (int)((double)v11 * 0.00000444444444);
    LOWORD(v19) = (*(_WORD *)(a1 + 8) - 1024) & 0x3F;
    if (1024 - *(unsigned __int16 *)(a1 + 8) >= 0) {
      int v19 = -((1024 - *(unsigned __int16 *)(a1 + 8)) & 0x3F);
    }
    BYTE5(v27) = v19;
    BYTE6(v27) = *(unsigned char *)(a1 + 28);
    uint64_t v9 = GN_AGAL_Set_GGTO((__int16 *)&v27);
    if ((v9 & 1) == 0) {
      EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED, A-Galileo GGTO");
    }
    return v9;
  }
  if (v12 == 64)
  {
    WORD2(v28) = 0;
    unint64_t v27 = 0x8000800080008000;
    LODWORD(v28) = 2147450879;
    int v20 = *(_DWORD *)(a1 + 16);
    int v21 = *(_DWORD *)(a1 + 24);
    if (v21 > 15)
    {
      if (v21 == 32)
      {
        double v22 = (char *)&v28 + 2;
        LOWORD(v28) = (int)((double)*(int *)(a1 + 12) * 2.91038305e-10);
        goto LABEL_45;
      }
      if (v21 != 16) {
        goto LABEL_46;
      }
    }
    else if (v21 != 1)
    {
      if (v21 == 2)
      {
        double v22 = (char *)&v27 + 6;
        WORD2(v27) = (int)((double)*(int *)(a1 + 12) * 2.91038305e-10);
LABEL_45:
        *(_WORD *)double v22 = (int)((double)v20 * 4.4408921e-15);
      }
LABEL_46:
      BYTE4(v28) = *(unsigned char *)(a1 + 28);
      if ((GN_ABDS_Set_BGTO((__int16 *)&v27) & 1) == 0) {
        EvCrt_v("GN_AGNSS_Set_Time_Model:  FAILED,  A-Beidou BGTO");
      }
      return 1;
    }
    double v22 = (char *)&v27 + 2;
    LOWORD(v27) = (int)((double)*(int *)(a1 + 12) * 2.91038305e-10);
    goto LABEL_45;
  }
  if (v12 != 32) {
    return 0;
  }
  int v13 = *(_DWORD *)(a1 + 24);
  if (v13 != 16 && v13 != 1) {
    return 0;
  }
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  double v26 = 0.0;
  int v25 = 0;
  int v24 = 0;
  int v14 = *(unsigned __int16 *)(a1 + 8);
  signed int v15 = 16 * *(_DWORD *)(a1 + 4) / 0x3E8u;
  API_Get_UTC_Cor(1, &v26);
  GPS_To_Glon_Time(0, v14, (double)v15, v26, &v24, &v25, &v23);
  LOBYTE(v28) = v24;
  int v16 = (int)((double)*(int *)(a1 + 12) * 0.03125);
  LOWORD(v27) = v25;
  HIDWORD(v28) = v16;
  HIDWORD(v27) = 0;
  LOBYTE(v29) = 1;
  BYTE1(v29) = *(unsigned char *)(a1 + 28);
  uint64_t v9 = GN_AGLON_Set_Clk1((unsigned __int16 *)&v27);
  if ((v9 & 1) == 0) {
    EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED, A-Glonass Clk1");
  }
  return v9;
}

uint64_t GN_AGNSS_Set_Acq_Ass(unsigned int *a1)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGNSS_Set_Acq_Ass");
  if (!result) {
    return result;
  }
  EvLog_nd("GN_AGNSS_Set_Acq_Ass: ", 5, v3, *a1, a1[1], a1[2], *((unsigned __int8 *)a1 + 12), *((unsigned __int8 *)a1 + 13));
  if ((unsigned __int16)g_Enable_Event_Log >= 4u && *((unsigned char *)a1 + 13))
  {
    unint64_t v4 = 0;
    int v5 = (unsigned __int8 *)(a1 + 8);
    do
    {
      int v6 = str_AGNSS_PM(*((_DWORD *)v5 - 4));
      int v7 = *(v5 - 12);
      int v8 = *((__int16 *)v5 - 5);
      int v9 = *(v5 - 8);
      int v10 = *(v5 - 7);
      int v11 = *((unsigned __int16 *)v5 - 3);
      int v12 = *(v5 - 4);
      int v13 = *(v5 - 3);
      int v14 = *((unsigned __int16 *)v5 - 1);
      int v15 = *v5;
      v5 += 20;
      EvLog_v("GN_AGNSS_AA_El:  %2d %s %3d   %5d %3d %d   %4d %3d %2d   %3d %2d", v4++, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
    }
    while (v4 < *((unsigned __int8 *)a1 + 13));
  }
  if (*a1 >= 0x36EE80)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Ref_GPS_TOW = %d >=36000000, Out of range!");
    return 0;
  }
  unsigned int v16 = a1[1];
  if (v16 > 0x240C83FF)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Ref_GPS_TOW = %d >=604800000, Out of range!");
    return 0;
  }
  int v17 = a1[2];
  if ((v17 - 1) > 0x3F || ((1 << (v17 - 1)) & 0x800000008000800BLL) == 0)
  {
    if (v17)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      str_AGNSS_PM(v17);
      EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: GNSS_Type = 0x%x (%s), Out of range!");
      return 0;
    }
    if (*a1 || !v16)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: GNSS_Type = 0x%x (%s), Out of range");
      return 0;
    }
  }
  if (!*((unsigned char *)a1 + 12) || (*((unsigned char *)a1 + 12) + 1) >= 0x66u)
  {
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: WARNING: Confidence %d, = 0 or > 100, Treated as not set!", *((unsigned __int8 *)a1 + 12));
    *((unsigned char *)a1 + 12) = -1;
  }
  unsigned int v18 = *((unsigned __int8 *)a1 + 13);
  if (v18 - 49 <= 0xFFFFFFCF)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Num_AA = %d ==0 or >48, Out of range!");
    return 0;
  }
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  memset(v131, 0, sizeof(v131));
  while (1)
  {
    int v21 = a1[v19 + 4];
    if (v21 > 15) {
      break;
    }
    switch(v21)
    {
      case 1:
        unsigned int v22 = 32;
        unsigned int v23 = 1;
        goto LABEL_31;
      case 2:
        unsigned int v22 = 36;
        unsigned int v23 = 1;
        int v21 = 3;
        goto LABEL_31;
      case 4:
        unsigned int v22 = 158;
        unsigned int v23 = 120;
        int v21 = 6;
        goto LABEL_31;
    }
LABEL_46:
    *((_DWORD *)v131 + v20) = 0;
    double v26 = str_AGNSS_PM(v21);
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: sv_Type[%d] = 0x%x (%s), Out of range!", v20, v21, v26);
    unsigned int v18 = *((unsigned __int8 *)a1 + 13);
LABEL_44:
    ++v20;
    v19 += 5;
    if (v20 >= v18)
    {
      Debug_Log_AGNSS_Acq_Ass((uint64_t)a1);
      memcpy(__dst, a1, sizeof(__dst));
      unsigned int v27 = __dst[1];
      if (__dst[1]) {
        goto LABEL_75;
      }
      int v28 = __dst[0];
      if (!__dst[0]) {
        goto LABEL_75;
      }
      uint64_t v29 = *(void *)(p_api + 48);
      if (!*(unsigned char *)(v29 + 5)
        || *(int *)v29 < 3
        || (int v30 = (int)*(double *)(v29 + 24) + 604800 * *(__int16 *)(v29 + 16), v30 < 1))
      {
        unsigned int v27 = 0;
        goto LABEL_75;
      }
      unsigned int v31 = 1000 * (v30 % 0x93A80u);
      unsigned int v32 = a1[2];
      switch(v32)
      {
        case 2u:
          int v121 = 13000;
          break;
        case 0x40u:
          int v121 = 14000;
          break;
        case 0x20u:
          v129[0] = 0.0;
          API_Get_UTC_Cor(1, v129);
          double v33 = -0.5;
          if (v129[0] * 1000.0 > 0.0) {
            double v33 = 0.5;
          }
          double v34 = v129[0] * 1000.0 + v33;
          if (v34 <= 2147483650.0)
          {
            if (v34 >= -2147483650.0) {
              int v35 = (int)v34;
            }
            else {
              int v35 = 0x80000000;
            }
          }
          else
          {
            int v35 = 0x7FFFFFFF;
          }
          int v121 = v35 - 10800000;
          break;
        default:
LABEL_178:
          int v122 = v28 + 86400000;
          if (v28 >= 0) {
            int v122 = v28;
          }
          if (v122 > 86400000) {
            v122 -= 86400000;
          }
          int v123 = v31 - 43200000;
          if (v122 <= (int)(v31 - 43200000)) {
            int v124 = v31 - 43200000;
          }
          else {
            int v124 = v122;
          }
          BOOL v125 = v122 < v123;
          unsigned int v126 = (v124 - v122 - (v122 < v123)) / 0x5265C00;
          if (v125) {
            ++v126;
          }
          unsigned int v27 = v122 + 86400000 * v126;
          __dst[1] = v27;
LABEL_75:
          uint64_t v36 = p_NA;
          if (*(unsigned char *)(p_NA + 297))
          {
            if (__dst[2])
            {
              int v37 = *(_DWORD *)(p_NA + 17668);
              if (v37)
              {
                int v38 = __dst[0] - v37;
                goto LABEL_82;
              }
            }
            if (v27)
            {
              int v39 = *(_DWORD *)(p_NA + 17664);
              if (v39)
              {
                int v38 = v27 - v39;
LABEL_82:
                if (v38 <= 4999)
                {
                  LODWORD(v129[0]) = 0;
                  BYTE4(v129[0]) = 0;
                  memset(&v129[1], 0, 37);
                  LODWORD(v128[0]) = 0;
                  BYTE4(v128[0]) = 0;
                  memset((char *)v128 + 8, 0, 32);
                  *(void *)((char *)&v128[2] + 5) = 0;
                  EvCrt_v("GN_AGNSS_Set_Acq_Ass: %d records from only %d ms ago, merging.", *(unsigned __int8 *)(p_NA + 17672), v38);
                  uint64_t v41 = p_NA;
                  if (*(unsigned char *)(p_NA + 17672))
                  {
                    unint64_t v42 = 0;
                    do
                    {
                      unint64_t v43 = (_DWORD *)(v41 + 28 * v42 + 17676);
                      uint64_t v44 = BYTE1(__dst[3]) + 1;
                      long long v45 = v131;
                      int v46 = (unsigned __int8 *)&__dst[5];
                      while (1)
                      {
                        int v47 = *v46;
                        v46 += 20;
                        if (*(unsigned __int8 *)(v41 + 28 * v42 + 17678) == v47 && *v45 == *(unsigned __int8 *)v43) {
                          break;
                        }
                        ++v45;
                        if (!--v44)
                        {
                          LODWORD(v129[0]) = *(_DWORD *)(v41 + 17664);
                          BYTE4(v129[0]) = 1;
                          LODWORD(v129[1]) = *v43;
                          unint64_t v48 = v41 + 28 * v42;
                          WORD1(v129[2]) = *(_WORD *)(v48 + 17686);
                          HIDWORD(v129[2]) = *(_DWORD *)(v48 + 17688);
                          WORD1(v129[3]) = *(_WORD *)(v48 + 17692);
                          *(double *)((char *)&v129[3] + 4) = *(double *)(v48 + 17696);
                          LODWORD(v128[0]) = __dst[1];
                          Comp_Cur_Acq_Aid((uint64_t)v129, (uint64_t)v128);
                          unsigned __int8 v49 = ++BYTE1(__dst[3]);
                          if (BYTE1(__dst[3]) > 0x30u) {
                            goto LABEL_127;
                          }
                          uint64_t v50 = v49 - 1;
                          long long v51 = &__dst[5 * (int)v50];
                          long long v52 = v51 + 4;
                          *((unsigned char *)v51 + 20) = BYTE10(v128[0]);
                          int v53 = BYTE8(v128[0]);
                          *((_DWORD *)v131 + v50) = BYTE8(v128[0]);
                          switch(v53)
                          {
                            case 0:
                              *long long v52 = 0;
                              break;
                            case 1:
                              *long long v52 = 1;
                              break;
                            case 2:
                              int v54 = 32;
                              goto LABEL_99;
                            case 3:
                              int v54 = 2;
                              goto LABEL_99;
                            case 4:
                              int v54 = 64;
                              goto LABEL_99;
                            case 5:
                              int v54 = 16;
                              goto LABEL_99;
                            case 6:
                              int v54 = 4;
LABEL_99:
                              *long long v52 = v54;
                              break;
                            default:
                              *long long v52 = 0;
                              EvCrt_Illegal_Default("GN_AGNSS_Set_Acq_Ass", 0x77Du);
                              break;
                          }
                          int v55 = 40000 * SWORD2(v128[1]);
                          if (v55 < 0) {
                            BYTE2(v55) = (v55 + 0xFFFF) >> 16;
                          }
                          double v56 = (double)SWORD3(v128[1]);
                          LOBYTE(__dst[5 * (int)v50 + 6]) = BYTE2(v55) + 42;
                          double v57 = v56 * 0.380587346;
                          if (v57 <= 0.0) {
                            double v58 = -0.5;
                          }
                          else {
                            double v58 = 0.5;
                          }
                          double v59 = v57 + v58;
                          if (v59 <= 2147483650.0)
                          {
                            if (v59 >= -2147483650.0) {
                              int v60 = (int)v59;
                            }
                            else {
                              LOWORD(v60) = 0;
                            }
                          }
                          else
                          {
                            LOWORD(v60) = -1;
                          }
                          long long v61 = &__dst[5 * (int)v50];
                          *((unsigned char *)v61 + 25) = 0;
                          long long v62 = (char *)v61 + 25;
                          *(_WORD *)(v62 - 3) = v60;
                          if (WORD1(v128[1]) >= 0xDDu)
                          {
                            uint64_t v63 = 5;
                            while (WORD1(v128[1]) > Acq_Ass_Table_Doppler_Unc[v63])
                            {
                              if (++v63 == 10) {
                                goto LABEL_120;
                              }
                            }
                          }
                          else
                          {
                            LODWORD(v63) = 4;
                            while (WORD1(v128[1]) > Acq_Ass_Table_Doppler_Unc[v63])
                            {
                              LODWORD(v63) = v63 - 1;
                              if (v63 == -1) {
                                goto LABEL_120;
                              }
                            }
                          }
                          *long long v62 = v63;
LABEL_120:
                          char v65 = BYTE12(v128[1]);
                          int v64 = v128[2];
                          __int16 v66 = SLODWORD(v128[2]) % 1023;
                          long long v67 = &__dst[5 * (int)v50];
                          *((unsigned char *)v67 + 29) = 0;
                          long long v68 = (char *)v67 + 29;
                          *(_WORD *)(v68 - 3) = v66;
                          *(v68 - 1) = ((((unint64_t)(2145384445 * v64) >> 32) - v64) >> 9)
                                     + ((int)(((unint64_t)(2145384445 * v64) >> 32) - v64) < 0)
                                     + 36 * v65
                                     + LOBYTE(__dst[1]);
                          uint64_t v69 = 1;
                          while (WORD5(v128[1]) > Acq_Ass_Table_Code_Window[v69])
                          {
                            if (++v69 == 32) {
                              goto LABEL_125;
                            }
                          }
                          *long long v68 = v69;
LABEL_125:
                          uint64_t v41 = p_NA;
                          uint64_t v70 = p_NA + 28 * v42 + 17676;
                          long long v71 = &__dst[5 * (int)v50];
                          *((_WORD *)v71 + 15) = *(_WORD *)(p_NA + 28 * v42 + 17682);
                          *((unsigned char *)v71 + 32) = *(unsigned char *)(v70 + 5);
                          break;
                        }
                      }
                      ++v42;
                    }
                    while (v42 < *(unsigned __int8 *)(v41 + 17672));
                  }
LABEL_127:
                  EvLog_nd("GN_AGNSS_Set_Acq_Ass: (merged) ", 3, v40, __dst[0], __dst[1], BYTE1(__dst[3]));
                  if ((unsigned __int16)g_Enable_Event_Log >= 4u && BYTE1(__dst[3]))
                  {
                    unint64_t v72 = 0;
                    long long v73 = (unsigned __int8 *)&__dst[8];
                    do
                    {
                      double v74 = str_AGNSS_PM(*((_DWORD *)v73 - 4));
                      int v75 = *(v73 - 12);
                      int v76 = *((__int16 *)v73 - 5);
                      int v77 = *(v73 - 8);
                      int v78 = *(v73 - 7);
                      int v79 = *((unsigned __int16 *)v73 - 3);
                      int v80 = *(v73 - 4);
                      int v81 = *(v73 - 3);
                      int v82 = *((unsigned __int16 *)v73 - 1);
                      int v83 = *v73;
                      v73 += 20;
                      EvLog_v("GN_AGNSS_AA_El:  (merged)  %2d %s %3d   %5d %3d %d   %4d %3d %2d   %3d %2d", v72++, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83);
                    }
                    while (v72 < BYTE1(__dst[3]));
                  }
                  unsigned int v27 = __dst[1];
                  uint64_t v36 = p_NA;
                }
              }
            }
          }
          *(_DWORD *)(v36 + 17664) = v27;
          *(_DWORD *)(v36 + 17668) = __dst[0];
          uint64_t v84 = BYTE1(__dst[3]);
          *(unsigned char *)(v36 + 17672) = BYTE1(__dst[3]);
          memset(v129, 0, sizeof(v129));
          memset(v128, 0, sizeof(v128));
          if (!v84)
          {
            bzero((void *)(v36 + 17676), 0x540uLL);
LABEL_166:
            *(unsigned char *)(v36 + 297) = 1;
            if ((unsigned __int16)g_Enable_Event_Log > 3u)
            {
              EvLog_nd("GN_AGNSS_Set_Acq_Ass: (NA) ", 3, (uint64_t)v112, *(unsigned int *)(v36 + 17664), *(unsigned int *)(v36 + 17668), *(unsigned __int8 *)(v36 + 17672));
              uint64_t v117 = p_NA;
              if (*(unsigned char *)(p_NA + 17672))
              {
                unint64_t v118 = 0;
                uint64_t v119 = 17676;
                do
                {
                  uint64_t v120 = (unsigned __int8 *)(v117 + v119);
                  EvLog_v("GN_AGNSS_AA_El:  (NA)  %2d   %d %3d %d   %2d %3d %3d   %4d %4d %5d   %4d %6d %7d", v118++, *v120, v120[2], v120[4], (char)v120[5], *((__int16 *)v120 + 3), *((unsigned __int16 *)v120 + 4), *((unsigned __int16 *)v120 + 5), *((__int16 *)v120 + 6), *((__int16 *)v120 + 7), *((unsigned __int16 *)v120 + 8), *((_DWORD *)v120 + 5), *((_DWORD *)v120 + 6));
                  uint64_t v117 = p_NA;
                  v119 += 28;
                }
                while (v118 < *(unsigned __int8 *)(p_NA + 17672));
              }
            }
            return 1;
          }
          uint64_t v85 = 0;
          long long v86 = (char *)&__dst[8];
          do
          {
            char v87 = *v86;
            v86 += 20;
            *((unsigned char *)v128 + v85++) = v87;
          }
          while (v84 != v85);
          for (uint64_t i = 0; i != v84; ++i)
          {
            uint64_t v89 = 0;
            char v90 = -1;
            int v91 = -1;
            do
            {
              if (*((char *)v128 + v89) > v90)
              {
                char v90 = *((unsigned char *)v128 + v89);
                int v91 = v89;
              }
              ++v89;
            }
            while (v84 != v89);
            *((unsigned char *)v129 + i) = v91;
            *((unsigned char *)v128 + v91) = -99;
          }
          unsigned int v92 = 0;
          int v93 = (unsigned __int8 *)&__dst[7] + 1;
          uint64_t v94 = v84;
          do
          {
            unsigned int v95 = *v93;
            v93 += 20;
            v92 += Acq_Ass_Table_Code_Window[v95];
            --v94;
          }
          while (v94);
          unsigned int v127 = (v92 / v84 + 2) / 3 + 4;
          bzero((void *)(v36 + 17676), 0x540uLL);
          unint64_t v96 = 0;
          uint64_t v97 = 17700;
          uint64_t v98 = v36;
          while (1)
          {
            uint64_t v99 = *((unsigned __int8 *)v129 + v96);
            uint64_t v100 = v98 + v97;
            char v101 = &__dst[5 * v99];
            *(unsigned char *)(v100 - 22) = *((unsigned char *)v101 + 20);
            *(unsigned char *)(v100 - 24) = *((_DWORD *)v131 + v99);
            *(_WORD *)(v100 - 10) = (int)((double)*((__int16 *)v101 + 11) * 2.62751773);
            int v102 = *((unsigned __int8 *)v101 + 24);
            if (v102) {
              break;
            }
            uint64_t v104 = &__dst[5 * v99];
            if (*((unsigned char *)v104 + 25)) {
              __int16 v105 = -42;
            }
            else {
              __int16 v105 = -16;
            }
            *(_WORD *)(v100 - 12) = v105;
            unsigned int v103 = *((unsigned __int8 *)v104 + 25);
            unsigned __int16 v106 = v127;
            if (v103) {
              goto LABEL_150;
            }
LABEL_151:
            double v107 = (_DWORD *)(v98 + v97);
            *(_WORD *)(v98 + v97 - 14) = v106;
            unint64_t v108 = &__dst[5 * v99];
            int v109 = *(_DWORD *)(v98 + 17664) - *((unsigned __int8 *)v108 + 28);
            int v110 = v109 - 604800000;
            if (v109 <= 604800000) {
              int v110 = *(_DWORD *)(v98 + 17664) - *((unsigned __int8 *)v108 + 28);
            }
            if (v109 >= 0) {
              int v111 = v110;
            }
            else {
              int v111 = v109 + 604800000;
            }
            *(v107 - 1) = v111 / 1500;
            double v112 = v107 - 1;
            *double v107 = 1023 * (v111 % 1500);
            uint64_t v36 = v98;
            if (*((_WORD *)v108 + 13))
            {
              Inc_CA_Chips(*((unsigned __int16 *)v108 + 13) - (*((unsigned __int16 *)v108 + 13) > 0x200u), (int *)(v98 + v97), v112);
              uint64_t v36 = p_NA;
            }
            uint64_t v113 = BYTE1(__dst[5 * v99 + 7]);
            unsigned __int16 v114 = Acq_Ass_Table_Code_Window[v113];
            *((_WORD *)v107 - 4) = v114;
            if (v113)
            {
              *(_WORD *)(v98 + v97 - 16) = 16 * v114;
              if ((unint64_t)(v113 - 19) > 0xFFFFFFFFFFFFFFEDLL) {
                goto LABEL_163;
              }
            }
            else
            {
              *(_WORD *)(v98 + v97 - 16) = -1;
            }
            *((_WORD *)v107 - 4) = 512;
LABEL_163:
            uint64_t v115 = &__dst[5 * v99];
            uint64_t v116 = v98 + v97;
            *(_WORD *)(v116 - 18) = *((_WORD *)v115 + 15);
            *(unsigned char *)(v116 - 19) = *((unsigned char *)v115 + 32);
            ++v96;
            v97 += 28;
            uint64_t v98 = v36;
            if (v96 >= BYTE1(__dst[3])) {
              goto LABEL_166;
            }
          }
          *(_WORD *)(v100 - 12) = v102 - 42;
          unsigned int v103 = BYTE1(__dst[5 * v99 + 6]);
LABEL_150:
          unsigned __int16 v106 = Acq_Ass_Table_Doppler_Unc[v103];
          goto LABEL_151;
      }
      v28 += v121;
      goto LABEL_178;
    }
  }
  if (v21 == 16)
  {
    unsigned int v22 = 202;
    unsigned int v23 = 193;
    int v21 = 5;
    goto LABEL_31;
  }
  if (v21 != 32)
  {
    if (v21 == 64)
    {
      unsigned int v22 = 37;
      unsigned int v23 = 1;
      int v21 = 4;
      goto LABEL_31;
    }
    goto LABEL_46;
  }
  unsigned int v22 = 24;
  unsigned int v23 = 1;
  int v21 = 2;
LABEL_31:
  *((_DWORD *)v131 + v20) = v21;
  unsigned int v24 = LOBYTE(a1[v19 + 5]);
  if (v23 > v24 || v22 < v24)
  {
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: sv_Id[%d] = %d <%d or >%d, Out of range!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(HIWORD(a1[v19 + 5]) - 2048) >> 12) <= 0xEu)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Doppler_0[%d] = %d <-2048 or >2047, Out of range!");
    return 0;
  }
  if (LOBYTE(a1[v19 + 6]) >= 0x40u)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Doppler_1[%d] = %d >63, Out of range!");
    return 0;
  }
  if (BYTE1(a1[v19 + 6]) >= 0xAu)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Doppler_Unc[%d] = %d >9, Out of range!");
    return 0;
  }
  if (HIWORD(a1[v19 + 6]) >= 0x400u)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Code_Phase[%d] = %d >1023, Out of range!");
    return 0;
  }
  if (SLOBYTE(a1[v19 + 7]) < 0)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Int_Code_Phase[%d] = %d >127, Out of range!");
    return 0;
  }
  if (BYTE1(a1[v19 + 7]) >= 0x20u)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Code_Window[%d] = %d >31, Out of range!");
    return 0;
  }
  if (HIWORD(a1[v19 + 7]) >= 0x168u)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Azimuth[%d] = %d >359, Out of range!");
    return 0;
  }
  if (LOBYTE(a1[v19 + 8]) < 0x5Bu) {
    goto LABEL_44;
  }
  *(unsigned char *)(p_NA + 297) = 0;
  EvCrt_v("GN_AGNSS_Set_Acq_Ass: FAILED: Elevation[%d] = %d >90, Out of range!");
  return 0;
}

uint64_t GM_Get_Best_SSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = (a4 - 1);
  if (a4 - 1 < 0) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  int v7 = (unsigned __int16 *)(a1 + 36 * v4 + 8);
  int v8 = (unsigned char *)(a2 + 48 * v4 + 12);
  uint64_t v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      unsigned int v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (~*v7 & 0x308) == 0)
      {
        if (*(v8 - 8))
        {
          if (*v8) {
            int v11 = 70;
          }
          else {
            int v11 = 64;
          }
          v10 += v11;
          if (v8[3]) {
            v10 += 128;
          }
        }
        if ((int)v10 <= v6)
        {
          uint64_t v9 = v9;
        }
        else
        {
          int v6 = v10;
          uint64_t v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

void GncP24_55UpdateBceOrbitAssistance(char a1)
{
  uint64_t v192 = *MEMORY[0x263EF8340];
  if (g_OrbitDataAvailable == 1)
  {
    v169[0] = 0;
    int v170 = 0;
    if ((a1 & 1) == 0 && g_BceOrbitDataInjected == 1)
    {
      if (!g_GncP_PEUpdate[0] || (dword_26AE004B8 & 0xC) == 0) {
        return;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v1 = mach_continuous_time();
        unsigned __int16 v2 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Time Jump detected, Re-injecting broadcast data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance");
        LbsOsaTrace_WriteLog(8u, (char *)__str, v2, 4, 1);
      }
    }
    if (g_GncP_PEUpdate[0])
    {
      __int16 v3 = word_26AE003B0;
      if (byte_26AE003A0 && word_26AE003B0 != 0)
      {
        double v5 = *(double *)&qword_26AE003B8;
        if (xofSvcs_GetXofEEStartTime((uint64_t)v169) == 1)
        {
          unint64_t v6 = (unint64_t)v5 + 604800 * v3;
          unint64_t v7 = v170 + 604800 * v169[0];
          unint64_t v8 = v7 - v6;
          unint64_t v162 = v7;
          unint64_t v163 = v6;
          BOOL v9 = v6 >= v7;
          unint64_t v10 = v6 - v7;
          if (v10 != 0 && v9) {
            unint64_t v11 = v10;
          }
          else {
            unint64_t v11 = v8;
          }
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v12 = mach_continuous_time();
            unsigned __int16 v13 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Time GPS,%llu, XoF,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance", v163, v162);
            LbsOsaTrace_WriteLog(8u, (char *)__str, v13, 4, 1);
          }
          if (v11 <= 0x93A7F)
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v14 = mach_continuous_time();
              unsigned __int16 v15 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: AgeCheckOK for Iono,Utc,TM,ChanMap,Gpstime,%llu,EEStartTime,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance", v163, v162);
              LbsOsaTrace_WriteLog(8u, (char *)__str, v15, 4, 1);
            }
            LOBYTE(v165) = 0;
            bzero(__str, 0x4FBuLL);
            if ((GncP24_16XofGetNotBrdCstSvs(1, 1, 0x20u, (uint64_t)__str, (unsigned __int8 *)&v165) & 1) == 0
              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__s, 0x410uLL);
              uint64_t v16 = mach_continuous_time();
              unsigned __int16 v17 = snprintf(__s, 0x40FuLL, "%10u %s%c %s: #%04hx GPS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP24_17UpdtXofAssistNotBrdSv", 257);
              LbsOsaTrace_WriteLog(8u, __s, v17, 2, 1);
            }
            if ((GncP24_16XofGetNotBrdCstSvs(2, 120, 0x27u, (uint64_t)__str, (unsigned __int8 *)&v165) & 1) == 0
              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__s, 0x410uLL);
              uint64_t v18 = mach_continuous_time();
              unsigned __int16 v19 = snprintf(__s, 0x40FuLL, "%10u %s%c %s: #%04hx SBAS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 87, "GncP24_17UpdtXofAssistNotBrdSv", 257);
              LbsOsaTrace_WriteLog(8u, __s, v19, 2, 1);
            }
            if ((GncP24_16XofGetNotBrdCstSvs(3, 193, 0xAu, (uint64_t)__str, (unsigned __int8 *)&v165) & 1) == 0
              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__s, 0x410uLL);
              uint64_t v20 = mach_continuous_time();
              unsigned __int16 v21 = snprintf(__s, 0x40FuLL, "%10u %s%c %s: #%04hx QZSS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 87, "GncP24_17UpdtXofAssistNotBrdSv", 257);
              LbsOsaTrace_WriteLog(8u, __s, v21, 2, 1);
            }
            if ((GncP24_16XofGetNotBrdCstSvs(4, 1, 0x24u, (uint64_t)__str, (unsigned __int8 *)&v165) & 1) == 0
              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__s, 0x410uLL);
              uint64_t v22 = mach_continuous_time();
              unsigned __int16 v23 = snprintf(__s, 0x40FuLL, "%10u %s%c %s: #%04hx GAL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNC", 87, "GncP24_17UpdtXofAssistNotBrdSv", 257);
              LbsOsaTrace_WriteLog(8u, __s, v23, 2, 1);
            }
            if ((GncP24_16XofGetNotBrdCstSvs(5, 1, 0x18u, (uint64_t)__str, (unsigned __int8 *)&v165) & 1) == 0
              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__s, 0x410uLL);
              uint64_t v24 = mach_continuous_time();
              unsigned __int16 v25 = snprintf(__s, 0x40FuLL, "%10u %s%c %s: #%04hx GLO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 87, "GncP24_17UpdtXofAssistNotBrdSv", 257);
              LbsOsaTrace_WriteLog(8u, __s, v25, 2, 1);
            }
            if ((GN_AGNSS_Set_Not_Brd_SV_List(v165, __str, v191) & 1) == 0
              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__s, 0x410uLL);
              uint64_t v26 = mach_continuous_time();
              unsigned __int16 v27 = snprintf(__s, 0x40FuLL, "%10u %s%c %s: #%04hx NotBrd SV list\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNC", 87, "GncP24_17UpdtXofAssistNotBrdSv", 257);
              LbsOsaTrace_WriteLog(8u, __s, v27, 2, 1);
            }
            uint64_t v168 = 0;
            if (xofSvcs_GetIonoModel(&v168) == 1)
            {
              *(_DWORD *)__s = 0;
              *(void *)v182 = v168;
              v182[8] = 1;
              if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v28 = mach_continuous_time();
                unsigned __int16 v29 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:G Iono ZCount,%d,A0,%d,A1,%d,A2,%d,A3,%d,B0,%d,B1,%d,B2,%d,B3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance", *(_DWORD *)__s, v182[0], v182[1], v182[2], v182[3], v182[4], v182[5], v182[6], v182[7]);
                LbsOsaTrace_WriteLog(8u, (char *)__str, v29, 4, 1);
              }
              if ((GN_AGPS_Set_Ion((unsigned int *)__s) & 1) != 0
                || !LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
              {
LABEL_49:
                uint64_t v165 = 0;
                uint64_t v166 = 0;
                int v167 = 0;
                if (xofSvcs_GetGpsUTCModel(&v165) == 1)
                {
                  memset_s(__s, 0x14uLL, 0, 0x14uLL);
                  v182[14] = 1;
                  *(_DWORD *)__s = 0;
                  *(void *)v182 = v165;
                  if ((unsigned __int16)v166 > 0xFFu)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v34 = mach_continuous_time();
                      unsigned __int16 v35 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTC sTot,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 772, (unsigned __int16)v166);
                      LbsOsaTrace_WriteLog(8u, (char *)__str, v35, 2, 1);
                    }
                  }
                  else
                  {
                    v182[8] = v166;
                  }
                  if (WORD1(v166) > 0xFFu)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v36 = mach_continuous_time();
                      unsigned __int16 v37 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTC WNt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 772, WORD1(v166));
                      LbsOsaTrace_WriteLog(8u, (char *)__str, v37, 2, 1);
                    }
                  }
                  else
                  {
                    v182[9] = BYTE2(v166);
                  }
                  if (WORD2(v166) == (unsigned __int16)SBYTE4(v166))
                  {
                    v182[10] = BYTE4(v166);
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v38 = mach_continuous_time();
                    unsigned __int16 v39 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTC DELTAls,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 772, SWORD2(v166));
                    LbsOsaTrace_WriteLog(8u, (char *)__str, v39, 2, 1);
                  }
                  if (HIWORD(v166) > 0xFFu)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v40 = mach_continuous_time();
                      unsigned __int16 v41 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTC WNlsf,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 772, HIWORD(v166));
                      LbsOsaTrace_WriteLog(8u, (char *)__str, v41, 2, 1);
                    }
                  }
                  else
                  {
                    v182[11] = BYTE6(v166);
                  }
                  if ((unsigned __int16)v167 == (unsigned __int16)(char)v167)
                  {
                    v182[12] = v167;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v42 = mach_continuous_time();
                    unsigned __int16 v43 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTC DN,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 772, (__int16)v167);
                    LbsOsaTrace_WriteLog(8u, (char *)__str, v43, 2, 1);
                  }
                  if (HIWORD(v167) == (unsigned __int16)SBYTE2(v167))
                  {
                    v182[13] = BYTE2(v167);
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v44 = mach_continuous_time();
                    unsigned __int16 v45 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTC DELTAlsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 772, SHIWORD(v167));
                    LbsOsaTrace_WriteLog(8u, (char *)__str, v45, 2, 1);
                  }
                  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v46 = mach_continuous_time();
                    unsigned __int16 v47 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:UTC ZCount,%d,A1,%d,A0,%d,Tot,%d,Wnt,%d,dtLs,%d,WNLSF,%d,DN,%d,dtLSF,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance", *(_DWORD *)__s, *(_DWORD *)v182, *(_DWORD *)&v182[4], v182[8], v182[9], v182[10], v182[11], v182[12], v182[13]);
                    LbsOsaTrace_WriteLog(8u, (char *)__str, v47, 4, 1);
                  }
                  if ((GN_AGPS_Set_UTC((unsigned int *)__s) & 1) != 0
                    || !LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                  {
                    goto LABEL_82;
                  }
                  bzero(__str, 0x410uLL);
                  mach_continuous_time();
                  unsigned __int16 v33 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx G UTC Correction\n");
                }
                else
                {
                  if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
                    goto LABEL_82;
                  }
                  bzero(__str, 0x410uLL);
                  mach_continuous_time();
                  unsigned __int16 v33 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTC Model\n");
                }
                LbsOsaTrace_WriteLog(8u, (char *)__str, v33, 2, 1);
LABEL_82:
                if ((GncP24_60UpdateTimeMod(2) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v48 = mach_continuous_time();
                  unsigned __int16 v49 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time model,SBAS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 257);
                  LbsOsaTrace_WriteLog(8u, (char *)__str, v49, 2, 1);
                }
                if ((GncP24_60UpdateTimeMod(3) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v50 = mach_continuous_time();
                  unsigned __int16 v51 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time model,QZSS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 257);
                  LbsOsaTrace_WriteLog(8u, (char *)__str, v51, 2, 1);
                }
                if ((GncP24_60UpdateTimeMod(4) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v52 = mach_continuous_time();
                  unsigned __int16 v53 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time model,GAL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 257);
                  LbsOsaTrace_WriteLog(8u, (char *)__str, v53, 2, 1);
                }
                if ((GncP24_60UpdateTimeMod(5) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v54 = mach_continuous_time();
                  unsigned __int16 v55 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time model,GLO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 257);
                  LbsOsaTrace_WriteLog(8u, (char *)__str, v55, 2, 1);
                }
                if ((GncP24_60UpdateTimeMod(6) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v56 = mach_continuous_time();
                  unsigned __int16 v57 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time model,BDS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", 257);
                  LbsOsaTrace_WriteLog(8u, (char *)__str, v57, 2, 1);
                }
                int v58 = 1;
                *(_WORD *)v164 = 0;
                while (1)
                {
                  int GloChanMap = xofSvcs_GetGloChanMap(v58, v164);
                  if (GloChanMap == 6)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v62 = mach_continuous_time();
                      size_t v63 = (unsigned __int16)snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: GloChanMap not included/Unknown\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance");
                      int v64 = 4;
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    if (GloChanMap == 1)
                    {
                      if ((GN_AGLON_Set_Chan_Num(v164[0], (char)v164[1]) & 1) != 0
                        || !LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                      {
                        goto LABEL_109;
                      }
                      bzero(__str, 0x410uLL);
                      unint64_t v60 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                      unsigned __int16 v61 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLO Chan map SatId,%u\n", v60);
LABEL_107:
                      size_t v63 = v61;
                      int v64 = 2;
LABEL_108:
                      LbsOsaTrace_WriteLog(8u, (char *)__str, v63, v64, 1);
                      goto LABEL_109;
                    }
                    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      unint64_t v65 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                      unsigned __int16 v61 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLO Chan map Cnt,%u\n", v65);
                      goto LABEL_107;
                    }
                  }
LABEL_109:
                  memset_s(v164, 2uLL, 0, 2uLL);
                  if (++v58 == 25)
                  {
                    v179[0] = 0;
                    v180 = 0;
                    if (xofSvcs_GetGpsAlmData((uint64_t)v179) == 1
                      && v179[0]
                      && v179[0] <= 0x20u)
                    {
                      uint64_t v67 = 0;
                      unint64_t v68 = 0;
                      do
                      {
                        v66.i32[0] = *(_DWORD *)((char *)v180 + v67);
                        int16x8_t v69 = (int16x8_t)vmovl_u8(v66);
                        *(int16x4_t *)v69.i8 = vrev32_s16(*(int16x4_t *)v69.i8);
                        *(_DWORD *)__s = vmovn_s16(v69).u32[0];
                        *(_DWORD *)v182 = *(_DWORD *)((char *)v180 + v67 + 28);
                        *(_WORD *)&v182[4] = *(_WORD *)((char *)v180 + v67 + 4);
                        *(_DWORD *)&v182[6] = *(_DWORD *)((char *)v180 + v67 + 6);
                        *(_OWORD *)&v182[12] = *(_OWORD *)((char *)v180 + v67 + 12);
                        v182[28] = 1;
                        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v70 = mach_continuous_time();
                          unsigned __int16 v71 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:G ALM %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v70), "GNC", 73, "GncP24_57UpdateAlmAssist", __s[1], __s[0], __s[2], __s[3], *(__int16 *)v182, *(__int16 *)&v182[2], *(unsigned __int16 *)&v182[4], *(__int16 *)&v182[6], *(__int16 *)&v182[8], *(_DWORD *)&v182[12], *(_DWORD *)&v182[16], *(_DWORD *)&v182[20],
                                  *(_DWORD *)&v182[24]);
                          LbsOsaTrace_WriteLog(8u, (char *)__str, v71, 4, 1);
                        }
                        if ((GN_AGPS_Set_Alm_El((unsigned __int8 *)__s) & 1) == 0
                          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v72 = mach_continuous_time();
                          unsigned __int16 v73 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx G Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v72), "GNC", 87, "GncP24_57UpdateAlmAssist", 257, __s[1]);
                          LbsOsaTrace_WriteLog(8u, (char *)__str, v73, 2, 1);
                        }
                        ++v68;
                        v67 += 32;
                      }
                      while (v68 < v179[0]);
                      if (v180) {
                        free(v180);
                      }
                      v180 = 0;
                    }
                    if (xofSvcs_GetQzssAlmData((uint64_t)v179) == 1
                      && v179[0]
                      && v179[0] <= 0xAu)
                    {
                      uint64_t v75 = 0;
                      unint64_t v76 = 0;
                      do
                      {
                        v74.i32[0] = *(_DWORD *)((char *)v180 + v75);
                        int16x8_t v77 = (int16x8_t)vmovl_u8(v74);
                        *(int16x4_t *)v77.i8 = vrev32_s16(*(int16x4_t *)v77.i8);
                        *(_DWORD *)__s = vmovn_s16(v77).u32[0];
                        *(_DWORD *)v182 = *(_DWORD *)((char *)v180 + v75 + 28);
                        *(_WORD *)&v182[4] = *(_WORD *)((char *)v180 + v75 + 4);
                        *(_DWORD *)&v182[6] = *(_DWORD *)((char *)v180 + v75 + 6);
                        *(_OWORD *)&v182[12] = *(_OWORD *)((char *)v180 + v75 + 12);
                        v182[28] = 1;
                        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v78 = mach_continuous_time();
                          unsigned __int16 v79 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:G ALM %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v78), "GNC", 73, "GncP24_57UpdateAlmAssist", __s[1], __s[0], __s[2], __s[3], *(__int16 *)v182, *(__int16 *)&v182[2], *(unsigned __int16 *)&v182[4], *(__int16 *)&v182[6], *(__int16 *)&v182[8], *(_DWORD *)&v182[12], *(_DWORD *)&v182[16], *(_DWORD *)&v182[20],
                                  *(_DWORD *)&v182[24]);
                          LbsOsaTrace_WriteLog(8u, (char *)__str, v79, 4, 1);
                        }
                        if ((GN_AGPS_Set_Alm_El((unsigned __int8 *)__s) & 1) == 0
                          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v80 = mach_continuous_time();
                          unsigned __int16 v81 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Q Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v80), "GNC", 87, "GncP24_57UpdateAlmAssist", 257, __s[1]);
                          LbsOsaTrace_WriteLog(8u, (char *)__str, v81, 2, 1);
                        }
                        ++v76;
                        v75 += 32;
                      }
                      while (v76 < v179[0]);
                      if (v180) {
                        free(v180);
                      }
                      v180 = 0;
                    }
                    v178 = 0;
                    if (xofSvcs_GetGloAlmData((uint64_t)v177) == 1
                      && v177[0]
                      && v177[0] <= 0x18u)
                    {
                      unint64_t v82 = 0;
                      uint64_t v83 = 33;
                      do
                      {
                        *(_WORD *)__s = *(_WORD *)((char *)v178 + v83 - 29);
                        __s[2] = *((char *)v178 + v83 - 33);
                        __s[3] = *((char *)v178 + v83 - 27);
                        *(_OWORD *)v182 = *(_OWORD *)((char *)v178 + v83 - 25);
                        v182[16] = *((char *)v178 + v83 - 9);
                        *(_WORD *)&v182[18] = *(_WORD *)((char *)v178 + v83 - 7);
                        *(_DWORD *)&v182[20] = *(_DWORD *)((char *)v178 + v83 - 5);
                        *(_WORD *)&v182[24] = *(_WORD *)((char *)v178 + v83 - 1);
                        v182[26] = 1;
                        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v84 = mach_continuous_time();
                          unsigned __int16 v85 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:R ALM %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "GNC", 73, "GncP24_57UpdateAlmAssist", __s[2], *(unsigned __int16 *)__s, __s[3], *(_DWORD *)v182, *(_DWORD *)&v182[4], *(_DWORD *)&v182[8], *(_DWORD *)&v182[12], v182[16], *(unsigned __int16 *)&v182[18], *(__int16 *)&v182[20], *(__int16 *)&v182[22], v182[24],
                                  v182[25]);
                          LbsOsaTrace_WriteLog(8u, (char *)__str, v85, 4, 1);
                        }
                        if ((GN_AGLON_Set_Alm_El((unsigned __int16 *)__s) & 1) == 0
                          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v86 = mach_continuous_time();
                          unsigned __int16 v87 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx R Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v86), "GNC", 87, "GncP24_57UpdateAlmAssist", 257, __s[2]);
                          LbsOsaTrace_WriteLog(8u, (char *)__str, v87, 2, 1);
                        }
                        ++v82;
                        v83 += 36;
                      }
                      while (v82 < v177[0]);
                      if (v178) {
                        free(v178);
                      }
                      v178 = 0;
                    }
                    LOBYTE(v175) = 0;
                    v176 = 0;
                    if (xofSvcs_GetGalAlmData((uint64_t)&v175) == 1
                      && (_BYTE)v175
                      && v175 <= 0x24u)
                    {
                      unint64_t v88 = 0;
                      uint64_t v89 = 20;
                      do
                      {
                        *(_WORD *)__s = *(_WORD *)((char *)v176 + v89 - 20);
                        unsigned int v90 = *(_DWORD *)((char *)v176 + v89 - 16);
                        __s[2] = (v90 / 0x93A80) & 3;
                        *(_WORD *)v182 = v90 % 0x93A80 / 0x258;
                        *(_WORD *)&v182[2] = *(_WORD *)((char *)v176 + v89 - 4);
                        LODWORD(v91) = *(_DWORD *)((char *)v176 + v89 - 12);
                        WORD2(v91) = *(_WORD *)((char *)v176 + v89 - 2);
                        WORD3(v91) = *(_WORD *)((char *)v176 + v89 - 8);
                        *((void *)&v91 + 1) = *(void *)((char *)v176 + v89);
                        *(_OWORD *)&v182[4] = v91;
                        v182[20] = *((char *)v176 + v89 - 5) & 3;
                        unsigned __int8 v92 = *((char *)v176 + v89 - 6);
                        v182[21] = (v92 >> 2) & 3;
                        v182[22] = v92 & 3;
                        v182[23] = 1;
                        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v93 = mach_continuous_time();
                          unsigned __int16 v94 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:E ALM %u,%u,%u,%u,%d,%u,%d,%d,%d,%d,%d,%d,%d,%u,%u,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v93), "GNC", 73, "GncP24_57UpdateAlmAssist", __s[0], __s[1], __s[2], *(unsigned __int16 *)v182, *(__int16 *)&v182[2], *(unsigned __int16 *)&v182[4], *(__int16 *)&v182[6], *(__int16 *)&v182[8], *(__int16 *)&v182[10], *(__int16 *)&v182[12], *(__int16 *)&v182[14], *(__int16 *)&v182[16],
                                  *(__int16 *)&v182[18],
                                  v182[20],
                                  v182[21],
                                  v182[22]);
                          LbsOsaTrace_WriteLog(8u, (char *)__str, v94, 4, 1);
                        }
                        if ((GN_AGAL_Set_Alm_El((unsigned __int8 *)__s) & 1) == 0
                          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v95 = mach_continuous_time();
                          unsigned __int16 v96 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx E Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v95), "GNC", 87, "GncP24_57UpdateAlmAssist", 257, __s[0]);
                          LbsOsaTrace_WriteLog(8u, (char *)__str, v96, 2, 1);
                        }
                        ++v88;
                        v89 += 28;
                      }
                      while (v88 < v175);
                      if (v176) {
                        free(v176);
                      }
                    }
                    if (v11 >> 4 < 0x7E9)
                    {
                      v179[0] = 0;
                      v180 = 0;
                      if (xofSvcs_GetGpsBrdCstEphData((uint64_t)v179) == 1)
                      {
                        if (v179[0] - 1 > 0x1F)
                        {
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v105 = mach_continuous_time();
                            unsigned __int16 v106 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx G BCE NumSats,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 514, v179[0]);
                            LbsOsaTrace_WriteLog(8u, (char *)__str, v106, 2, 1);
                          }
                        }
                        else
                        {
                          unint64_t v97 = 0;
                          uint64_t v98 = 36;
                          do
                          {
                            __s[0] = *((char *)v180 + v98 - 36);
                            __s[1] = 0;
                            __s[2] = *((char *)v180 + v98 - 34);
                            __s[3] = *((char *)v180 + v98 - 35);
                            *(_WORD *)v182 = 0;
                            v182[2] = 0;
                            v182[3] = *((char *)v180 + v98 - 21);
                            v182[4] = *((char *)v180 + v98 - 22);
                            *(_WORD *)&v182[6] = *(_WORD *)((char *)v180 + v98 - 32);
                            *(_WORD *)&v182[8] = *(_WORD *)((char *)v180 + v98 - 30);
                            *(_WORD *)&v182[10] = *(_WORD *)&v182[8];
                            LOWORD(v99) = *(_WORD *)((char *)v180 + v98 - 18);
                            WORD1(v99) = *(_WORD *)((char *)v180 + v98 - 24);
                            DWORD1(v99) = *(_DWORD *)((char *)v180 + v98 + 12);
                            *((int16x4_t *)&v99 + 1) = vrev64_s16(*(int16x4_t *)((char *)v180 + v98 + 16));
                            *(_OWORD *)&v182[12] = v99;
                            HIDWORD(v100) = *(_DWORD *)((char *)v180 + v98 + 24);
                            LODWORD(v100) = HIDWORD(v100);
                            *(_DWORD *)&v182[28] = v100 >> 16;
                            int v183 = *(_DWORD *)((char *)v180 + v98 - 28);
                            *(int32x4_t *)v184 = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)v180 + v98 - 16), *(int8x16_t *)((char *)v180 + v98 - 16), 4uLL), *(int32x4_t *)((char *)v180 + v98 - 16));
                            *(void *)&v184[16] = *(void *)((char *)v180 + v98);
                            *(_DWORD *)&v184[24] = *(_DWORD *)((char *)v180 + v98 + 8);
                            LOBYTE(v185) = 1;
                            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v101 = mach_continuous_time();
                              unsigned __int16 v102 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:G BCE %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v101), "GNC", 73, "GncP24_58UpdateBrdCstEphAssist", __s[0], __s[1], __s[2], __s[3], v182[0], v182[1], v182[2], v182[3], v182[4], *(unsigned __int16 *)&v182[6], *(unsigned __int16 *)&v182[8],
                                       *(unsigned __int16 *)&v182[10],
                                       *(unsigned __int16 *)&v182[12],
                                       *(__int16 *)&v182[14],
                                       *(__int16 *)&v182[16],
                                       *(__int16 *)&v182[18],
                                       *(__int16 *)&v182[20],
                                       *(__int16 *)&v182[22],
                                       *(__int16 *)&v182[24],
                                       *(__int16 *)&v182[26],
                                       *(__int16 *)&v182[28],
                                       *(__int16 *)&v182[30],
                                       v183,
                                       *(_DWORD *)v184,
                                       *(_DWORD *)&v184[4],
                                       *(_DWORD *)&v184[8],
                                       *(_DWORD *)&v184[12],
                                       *(_DWORD *)&v184[16],
                                       *(_DWORD *)&v184[20],
                                       *(_DWORD *)&v184[24]);
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v102, 4, 1);
                            }
                            if ((GN_AGPS_Set_Eph_El((unsigned __int8 *)__s) & 1) == 0
                              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v103 = mach_continuous_time();
                              unsigned __int16 v104 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx G BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v103), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 257, __s[0]);
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v104, 2, 1);
                            }
                            ++v97;
                            v98 += 64;
                          }
                          while (v97 < v179[0]);
                        }
                        if (v180) {
                          free(v180);
                        }
                        v180 = 0;
                      }
                      if (xofSvcs_GetQzssBrdCstEphData((uint64_t)v179) == 1)
                      {
                        if (v179[0] - 1 > 9)
                        {
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v115 = mach_continuous_time();
                            unsigned __int16 v116 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Q BCE NumSats,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 514, v179[0]);
                            LbsOsaTrace_WriteLog(8u, (char *)__str, v116, 2, 1);
                          }
                        }
                        else
                        {
                          unint64_t v107 = 0;
                          uint64_t v108 = 36;
                          do
                          {
                            __s[0] = *((char *)v180 + v108 - 36);
                            __s[1] = 0;
                            __s[2] = *((char *)v180 + v108 - 34);
                            __s[3] = *((char *)v180 + v108 - 35);
                            *(_WORD *)v182 = 0;
                            v182[2] = 0;
                            v182[3] = *((char *)v180 + v108 - 21);
                            v182[4] = *((char *)v180 + v108 - 22);
                            *(_WORD *)&v182[6] = *(_WORD *)((char *)v180 + v108 - 32);
                            *(_WORD *)&v182[8] = *(_WORD *)((char *)v180 + v108 - 30);
                            *(_WORD *)&v182[10] = *(_WORD *)&v182[8];
                            LOWORD(v109) = *(_WORD *)((char *)v180 + v108 - 18);
                            WORD1(v109) = *(_WORD *)((char *)v180 + v108 - 24);
                            DWORD1(v109) = *(_DWORD *)((char *)v180 + v108 + 12);
                            *((int16x4_t *)&v109 + 1) = vrev64_s16(*(int16x4_t *)((char *)v180 + v108 + 16));
                            *(_OWORD *)&v182[12] = v109;
                            HIDWORD(v110) = *(_DWORD *)((char *)v180 + v108 + 24);
                            LODWORD(v110) = HIDWORD(v110);
                            *(_DWORD *)&v182[28] = v110 >> 16;
                            int v183 = *(_DWORD *)((char *)v180 + v108 - 28);
                            *(int32x4_t *)v184 = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)v180 + v108 - 16), *(int8x16_t *)((char *)v180 + v108 - 16), 4uLL), *(int32x4_t *)((char *)v180 + v108 - 16));
                            *(void *)&v184[16] = *(void *)((char *)v180 + v108);
                            *(_DWORD *)&v184[24] = *(_DWORD *)((char *)v180 + v108 + 8);
                            LOBYTE(v185) = 1;
                            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v111 = mach_continuous_time();
                              unsigned __int16 v112 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:G BCE %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "GNC", 73, "GncP24_58UpdateBrdCstEphAssist", __s[0], __s[1], __s[2], __s[3], v182[0], v182[1], v182[2], v182[3], v182[4], *(unsigned __int16 *)&v182[6], *(unsigned __int16 *)&v182[8],
                                       *(unsigned __int16 *)&v182[10],
                                       *(unsigned __int16 *)&v182[12],
                                       *(__int16 *)&v182[14],
                                       *(__int16 *)&v182[16],
                                       *(__int16 *)&v182[18],
                                       *(__int16 *)&v182[20],
                                       *(__int16 *)&v182[22],
                                       *(__int16 *)&v182[24],
                                       *(__int16 *)&v182[26],
                                       *(__int16 *)&v182[28],
                                       *(__int16 *)&v182[30],
                                       v183,
                                       *(_DWORD *)v184,
                                       *(_DWORD *)&v184[4],
                                       *(_DWORD *)&v184[8],
                                       *(_DWORD *)&v184[12],
                                       *(_DWORD *)&v184[16],
                                       *(_DWORD *)&v184[20],
                                       *(_DWORD *)&v184[24]);
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v112, 4, 1);
                            }
                            if ((GN_AGPS_Set_Eph_El((unsigned __int8 *)__s) & 1) == 0
                              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v113 = mach_continuous_time();
                              unsigned __int16 v114 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Q BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v113), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 257, __s[0]);
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v114, 2, 1);
                            }
                            ++v107;
                            v108 += 64;
                          }
                          while (v107 < v179[0]);
                        }
                        if (v180) {
                          free(v180);
                        }
                        v180 = 0;
                      }
                      v177[0] = 0;
                      v178 = 0;
                      if (xofSvcs_GetGloBrdCstEphData((uint64_t)v177) == 1)
                      {
                        if (v177[0] - 1 <= 0x17)
                        {
                          unint64_t v117 = 0;
                          uint64_t v118 = 42;
                          while (1)
                          {
                            __int16 v175 = 0;
                            uint64_t v119 = (char *)v178 + v118;
                            unsigned int v120 = *(unsigned __int16 *)((char *)v178 + v118 - 40);
                            if (v120 < 0x60) {
                              break;
                            }
                            if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              unint64_t v121 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                      * (double)mach_continuous_time());
                              unsigned __int16 v122 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx GloTb,%u SatID,%u\n", v121);
LABEL_205:
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v122, 2, 1);
                            }
LABEL_206:
                            ++v117;
                            v118 += 44;
                            if (v117 >= v177[0]) {
                              goto LABEL_210;
                            }
                          }
                          __s[0] = *(v119 - 42);
                          __s[2] = v120;
                          *(_WORD *)v182 = 0;
                          v182[2] = *(v119 - 41);
                          v182[3] = *(v119 - 27);
                          *(_WORD *)&v182[4] = *(_WORD *)(v119 - 31);
                          v182[6] = *(v119 - 29) != 0;
                          v182[7] = *(v119 - 28);
                          *(_DWORD *)&v182[8] = *(_DWORD *)(v119 - 26);
                          *(int32x4_t *)&v182[12] = vuzp2q_s32(*(int32x4_t *)(v119 - 22), vrev64q_s32(*(int32x4_t *)(v119 - 22)));
                          *(_DWORD *)&v182[28] = *(_DWORD *)(v119 - 6);
                          LOWORD(v183) = *((_WORD *)v119 - 1);
                          BYTE2(v183) = *v119;
                          HIBYTE(v183) = *(v119 - 32);
                          *(_DWORD *)v184 = *(_DWORD *)(v119 - 38);
                          *(_WORD *)&v184[4] = *((_WORD *)v119 - 17);
                          v184[6] = 1;
                          int v123 = xofSvcs_GetGloChanMap(__s[0], (unsigned __int8 *)&v175);
                          char v124 = HIBYTE(v175);
                          if (v123 != 1) {
                            char v124 = 127;
                          }
                          __s[1] = v124;
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v125 = mach_continuous_time();
                            unsigned __int16 v126 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:R BCE %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v125), "GNC", 73, "GncP24_58UpdateBrdCstEphAssist", __s[0], __s[1], __s[2], *(unsigned __int16 *)v182, v182[2], v182[3], v182[4], v182[5], v182[6], v182[7], *(_DWORD *)&v182[8], *(_DWORD *)&v182[12],
                                     *(_DWORD *)&v182[16],
                                     *(_DWORD *)&v182[20],
                                     *(_DWORD *)&v182[24],
                                     *(_DWORD *)&v182[28],
                                     (char)v183,
                                     SBYTE1(v183),
                                     SBYTE2(v183),
                                     SHIBYTE(v183),
                                     *(_DWORD *)v184,
                                     *(__int16 *)&v184[4]);
                            LbsOsaTrace_WriteLog(8u, (char *)__str, v126, 4, 1);
                          }
                          if ((GN_AGLON_Set_Eph_El(__s) & 1) != 0
                            || !LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                          {
                            goto LABEL_206;
                          }
                          bzero(__str, 0x410uLL);
                          unint64_t v127 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          unsigned __int16 v122 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx R BCE gloN,%u\n", v127);
                          goto LABEL_205;
                        }
                        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v128 = mach_continuous_time();
                          unsigned __int16 v129 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx R BCE NumSats,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v128), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 514, v177[0]);
                          LbsOsaTrace_WriteLog(8u, (char *)__str, v129, 2, 1);
                        }
LABEL_210:
                        if (v178) {
                          free(v178);
                        }
                        v178 = 0;
                      }
                      LOBYTE(v175) = 0;
                      v176 = 0;
                      if (xofSvcs_GetGalBrdCstEphData((uint64_t)&v175) == 1)
                      {
                        if (v175 - 1 > 0x23)
                        {
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v139 = mach_continuous_time();
                            unsigned __int16 v140 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx E BCE NumSats,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v139), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 514, v175);
                            LbsOsaTrace_WriteLog(8u, (char *)__str, v140, 2, 1);
                          }
                        }
                        else
                        {
                          unint64_t v130 = 0;
                          uint64_t v131 = 52;
                          do
                          {
                            *(_DWORD *)__s = 0;
                            *(_WORD *)v182 = *(_WORD *)((char *)v176 + v131 - 48);
                            v182[2] = *((char *)v176 + v131 - 52);
                            v182[3] = *((char *)v176 + v131 - 49);
                            *(_WORD *)&v182[4] = *(_WORD *)((char *)v176 + v131 - 34);
                            *(_WORD *)&v182[6] = *(_WORD *)((char *)v176 + v131 - 46);
                            *(int32x4_t *)&v182[8] = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)v176 + v131 - 28), *(int8x16_t *)((char *)v176 + v131 - 28), 4uLL), *(int32x4_t *)((char *)v176 + v131 - 28));
                            *(void *)&v182[24] = *(void *)((char *)v176 + v131 - 12);
                            int v183 = *(_DWORD *)((char *)v176 + v131 - 4);
                            *(int8x16_t *)v184 = vqtbl1q_s8(*(int8x16_t *)((char *)v176 + v131), (int8x16_t)xmmword_22BB0CAF0);
                            *(void *)&v184[16] = *(void *)((char *)v176 + v131 - 44);
                            *(_WORD *)&v184[24] = *((char *)v176 + v131 - 36);
                            *(_WORD *)&v184[26] = *(_WORD *)&v182[6];
                            HIDWORD(v132) = *(_DWORD *)((char *)v176 + v131 - 32);
                            LODWORD(v132) = HIDWORD(v132);
                            LODWORD(v185) = v132 >> 16;
                            BYTE4(v185) = 0;
                            char v133 = *((char *)v176 + v131 - 51);
                            BYTE5(v185) = v133 & 1;
                            BYTE6(v185) = (v133 & 2) != 0;
                            BYTE7(v185) = (v133 & 4) != 0;
                            unsigned int v134 = *((char *)v176 + v131 - 50);
                            BYTE8(v185) = v134 & 3;
                            BYTE9(v185) = (v134 >> 2) & 3;
                            BYTE10(v185) = (v134 >> 4) & 3;
                            BYTE11(v185) = 1;
                            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v135 = mach_continuous_time();
                              unsigned __int16 v136 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:E EPH %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v135), "GNC", 73, "GncP24_58UpdateBrdCstEphAssist", *(_DWORD *)__s, *(unsigned __int16 *)v182, v182[2], v182[3], *(unsigned __int16 *)&v182[4], *(unsigned __int16 *)&v182[6], *(_DWORD *)&v182[8], *(_DWORD *)&v182[12], *(_DWORD *)&v182[16], *(_DWORD *)&v182[20], v183,
                                       *(__int16 *)v184,
                                       *(__int16 *)&v184[2],
                                       *(__int16 *)&v184[4],
                                       *(__int16 *)&v184[6],
                                       *(__int16 *)&v184[8],
                                       *(__int16 *)&v184[10],
                                       *(__int16 *)&v184[12],
                                       *(__int16 *)&v184[14],
                                       *(_DWORD *)&v184[16],
                                       *(_DWORD *)&v184[20],
                                       *(__int16 *)&v184[24],
                                       *(unsigned __int16 *)&v184[26],
                                       (__int16)v185,
                                       SWORD1(v185),
                                       BYTE4(v185),
                                       BYTE5(v185),
                                       BYTE6(v185),
                                       BYTE7(v185),
                                       BYTE8(v185),
                                       BYTE9(v185),
                                       BYTE10(v185));
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v136, 4, 1);
                            }
                            if ((GN_AGAL_Set_Eph_El((uint64_t)__s) & 1) == 0
                              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v137 = mach_continuous_time();
                              unsigned __int16 v138 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx E BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v137), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 257, v182[2]);
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v138, 2, 1);
                            }
                            ++v130;
                            v131 += 68;
                          }
                          while (v130 < v175);
                        }
                        if (v176) {
                          free(v176);
                        }
                        v176 = 0;
                      }
                      v173[0] = 0;
                      v174 = 0;
                      if (xofSvcs_GetBdsBrdCstEphData((uint64_t)v173) == 1)
                      {
                        if (v173[0] - 1 > 0x24)
                        {
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v150 = mach_continuous_time();
                            unsigned __int16 v151 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx B BCE NumSats,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v150), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 514, v173[0]);
                            LbsOsaTrace_WriteLog(8u, (char *)__str, v151, 2, 1);
                          }
                        }
                        else
                        {
                          uint64_t v141 = 0;
                          unint64_t v142 = 0;
                          do
                          {
                            uint64_t v143 = *(void *)((char *)v174 + v141 + 12);
                            __int16 v186 = *(_WORD *)((char *)v174 + v141 + 20);
                            v182[9] = *((unsigned char *)v174 + v141 + 26);
                            v182[8] = *((unsigned char *)v174 + v141 + 27);
                            *(void *)&long long v144 = *(void *)((char *)v174 + v141 + 76);
                            *((void *)&v144 + 1) = v143;
                            long long v185 = v144;
                            *(_OWORD *)&v184[12] = *(_OWORD *)((char *)v174 + v141 + 60);
                            HIDWORD(v145) = *(_DWORD *)((char *)v174 + v141 + 56);
                            LODWORD(v145) = HIDWORD(v145);
                            int v183 = *(_DWORD *)((char *)v174 + v141 + 44);
                            *(_DWORD *)&v184[4] = v145 >> 16;
                            *(_DWORD *)&v184[8] = *(_DWORD *)((char *)v174 + v141 + 52);
                            v182[12] = *((unsigned char *)v174 + v141 + 1);
                            *(int32x4_t *)&v182[16] = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)v174 + v141 + 28), *(int8x16_t *)((char *)v174 + v141 + 28), 4uLL), *(int32x4_t *)((char *)v174 + v141 + 28));
                            v182[10] = *((unsigned char *)v174 + v141);
                            __int16 v187 = *(_WORD *)((char *)v174 + v141 + 22);
                            __int16 v188 = *(_WORD *)((char *)v174 + v141 + 24);
                            *(_DWORD *)v182 = *(_DWORD *)((char *)v174 + v141 + 8);
                            *(_DWORD *)&v182[4] = *(_DWORD *)v182;
                            v182[11] = *((unsigned char *)v174 + v141 + 2);
                            *(_DWORD *)v184 = *(_DWORD *)((char *)v174 + v141 + 48);
                            *(_WORD *)__s = *(_WORD *)((char *)v174 + v141 + 6);
                            char v189 = 1;
                            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v146 = mach_continuous_time();
                              unsigned __int16 v147 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:B BCE %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v146), "GNC", 73, "GncP24_58UpdateBrdCstEphAssist", v182[10], *(unsigned __int16 *)__s, *(_DWORD *)v182, *(_DWORD *)&v182[4], v182[8], v182[9], v182[11], v182[12], *(_DWORD *)&v182[16], *(_DWORD *)&v182[20], *(_DWORD *)&v182[24],
                                       *(_DWORD *)&v182[28],
                                       v183,
                                       *(_DWORD *)v184,
                                       *(__int16 *)&v184[4],
                                       *(__int16 *)&v184[6],
                                       *(_DWORD *)&v184[8],
                                       *(_DWORD *)&v184[24],
                                       *(_DWORD *)&v184[20],
                                       *(_DWORD *)&v184[16],
                                       *(_DWORD *)&v184[12],
                                       DWORD1(v185),
                                       v185,
                                       DWORD2(v185),
                                       HIDWORD(v185),
                                       v186,
                                       v187,
                                       v188);
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v147, 4, 1);
                            }
                            if ((GN_ABDS_Set_Eph_El((unsigned __int16 *)__s) & 1) == 0
                              && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v148 = mach_continuous_time();
                              unsigned __int16 v149 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx B BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v148), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 257, v182[10]);
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v149, 2, 1);
                            }
                            ++v142;
                            v141 += 84;
                          }
                          while (v142 < v173[0]);
                        }
                        if (v174) {
                          free(v174);
                        }
                        v174 = 0;
                      }
                      v171[0] = 0;
                      v172 = 0;
                      if (xofSvcs_GetSbasBrdCstEphData((uint64_t)v171) == 1)
                      {
                        if (v171[0] - 1 > 0x26)
                        {
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v158 = mach_continuous_time();
                            unsigned __int16 v159 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx S BCE NumSats,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v158), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 514, v171[0]);
                            LbsOsaTrace_WriteLog(8u, (char *)__str, v159, 2, 1);
                          }
                        }
                        else
                        {
                          uint64_t v152 = 0;
                          unint64_t v153 = 0;
                          do
                          {
                            *(_WORD *)__s = *(_WORD *)((char *)v172 + v152 + 2);
                            __s[2] = *((unsigned char *)v172 + v152 + 7);
                            *(_DWORD *)v182 = *(__int16 *)((char *)v172 + v152 + 4);
                            *(_DWORD *)&v182[4] = *((char *)v172 + v152 + 6);
                            *(_DWORD *)&v182[8] = *(_DWORD *)((char *)v172 + v152 + 8);
                            *(_DWORD *)&v182[12] = *(_DWORD *)((char *)v172 + v152 + 12);
                            *(_DWORD *)&v182[16] = *(_DWORD *)((char *)v172 + v152 + 16);
                            *(_DWORD *)&v182[20] = *(_DWORD *)((char *)v172 + v152 + 20);
                            *(_DWORD *)&v182[24] = *(_DWORD *)((char *)v172 + v152 + 24);
                            *(_DWORD *)&v182[28] = *(_DWORD *)((char *)v172 + v152 + 28);
                            int v183 = *(__int16 *)((char *)v172 + v152 + 32);
                            *(_DWORD *)v184 = *(__int16 *)((char *)v172 + v152 + 34);
                            *(_DWORD *)&v184[4] = *(__int16 *)((char *)v172 + v152 + 36);
                            v184[8] = 1;
                            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v154 = mach_continuous_time();
                              unsigned __int16 v155 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: ASST:S EPH %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v154), "GNC", 73, "GncP24_58UpdateBrdCstEphAssist", *(unsigned __int16 *)__s, __s[2], *(_DWORD *)v182, *(_DWORD *)&v182[4], *(_DWORD *)&v182[8], *(_DWORD *)&v182[12], *(_DWORD *)&v182[16], *(_DWORD *)&v182[20], *(_DWORD *)&v182[24], *(_DWORD *)&v182[28], v183, *(_DWORD *)v184,
                                       *(_DWORD *)&v184[4]);
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v155, 4, 1);
                            }
                            if ((GN_ASBAS_Set_Eph_El(*((unsigned __int8 *)v172 + v152), *((unsigned __int8 *)v172 + v152 + 38), (unsigned __int16 *)__s) & 1) == 0&& LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v156 = mach_continuous_time();
                              unsigned __int16 v157 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx S BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v156), "GNC", 87, "GncP24_58UpdateBrdCstEphAssist", 257, *((unsigned __int8 *)v172 + v152));
                              LbsOsaTrace_WriteLog(8u, (char *)__str, v157, 2, 1);
                            }
                            ++v153;
                            v152 += 40;
                          }
                          while (v153 < v171[0]);
                        }
                        if (v172) {
                          free(v172);
                        }
                      }
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v160 = mach_continuous_time();
                        unsigned __int16 v161 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: BCEAgeCheckOK Gpstime,%llu,EEStartTime,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v160), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance", v163, v162);
                        LbsOsaTrace_WriteLog(8u, (char *)__str, v161, 4, 1);
                      }
                    }
                    g_BceOrbitDataInjected = 1;
                    return;
                  }
                }
              }
              bzero(__str, 0x410uLL);
              unint64_t v30 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              int v31 = 257;
            }
            else
            {
              if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
                goto LABEL_49;
              }
              bzero(__str, 0x410uLL);
              unint64_t v30 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              int v31 = 769;
            }
            unsigned __int16 v32 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx G Iono\n", v30, "GNC", 87, "GncP24_55UpdateBceOrbitAssistance", v31);
            LbsOsaTrace_WriteLog(8u, (char *)__str, v32, 2, 1);
            goto LABEL_49;
          }
        }
      }
    }
  }
}

uint64_t GncP24_60UpdateTimeMod(int a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  long long v17 = 0uLL;
  unsigned int TimeModel = xofSvcs_GetTimeModel(a1, &v17);
  unsigned __int8 v3 = TimeModel;
  if (TimeModel > 9)
  {
    uint64_t v4 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return v4;
    }
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeModelCheckErrCode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP24_60UpdateTimeMod", 770, v3);
    LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
    return 0;
  }
  uint64_t v4 = 1;
  if (((1 << TimeModel) & 0x3BD) != 0) {
    return 0;
  }
  if (TimeModel == 1)
  {
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
    __s[0] = GncP24_52ConvertAGnssType(a1);
    __s[1] = 1000 * (unsigned __int16)v17;
    __int16 v11 = WORD1(v17);
    uint64_t v12 = *(void *)((char *)&v17 + 4);
    char v13 = BYTE12(v17);
    char v14 = 127;
    int v15 = 1;
    char v16 = 1;
    uint64_t v4 = GN_AGNSS_Set_Time_Model((uint64_t)__s);
    if ((v4 & 1) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time model ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP24_60UpdateTimeMod", 257, a1);
        LbsOsaTrace_WriteLog(8u, __str, v7, 2, 1);
      }
    }
  }
  return v4;
}

uint64_t GN_EE_Get_GPS_Eph_El(unsigned int a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if ((g_OrbitDataAvailable & 1) == 0)
  {
    uint64_t v16 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      return v16;
    }
    bzero(__str, 0x410uLL);
    unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    long long v17 = "%10u %s%c %s: No Xof\n";
    goto LABEL_24;
  }
  unsigned __int16 v7 = &word_26ADFF926;
  if (!byte_26ADFF924) {
    unsigned __int16 v7 = &word_26ADFF928;
  }
  unsigned __int16 v8 = *v7;
  unsigned __int8 v9 = a1 - 33;
  BOOL v10 = (a1 - 33) >= 0xE0u || (a1 + 53) >= 0xF6u;
  char v11 = !v10;
  if (a3 > 0x93A7F || (v11 & 1) != 0 || !a4 || a2 > 0xFFF || a2 < v8)
  {
    uint64_t v16 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return v16;
    }
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    size_t v19 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,TOWs,%u,WeekNo,%u,SrtGpsWkNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 87, "GN_EE_Get_GPS_Eph_El", 515, a1, a3, a2, v8);
    int v20 = 2;
LABEL_28:
    LbsOsaTrace_WriteLog(8u, __str, v19, v20, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SV,%u,Weekno,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 68, "GN_EE_Get_GPS_Eph_El", a1, a2, a3);
    LbsOsaTrace_WriteLog(8u, __str, v14, 5, 1);
  }
  long long v43 = 0u;
  memset(v42, 0, sizeof(v42));
  if (v9 >= 0xE0u)
  {
    if (xofSvcs_GetGpsSvOrbData(a2 | (unint64_t)(a3 << 32), a1, (unsigned __int8 *)v42) == 1)
    {
      if (!v42[0].i8[1])
      {
        int v15 = 1;
        goto LABEL_37;
      }
LABEL_32:
      uint64_t v16 = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
        return v16;
      }
      bzero(__str, 0x410uLL);
      unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sv,%u,Health,%u\n", v23);
      goto LABEL_25;
    }
    goto LABEL_34;
  }
  if ((a1 + 63) < 0xAu)
  {
    if (xofSvcs_GetQzssSvOrbData(a2 | (unint64_t)(a3 << 32), a1, (unsigned __int8 *)v42) == 1)
    {
      if (!v42[0].i8[1]) {
        goto LABEL_21;
      }
      goto LABEL_32;
    }
LABEL_34:
    uint64_t v16 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      return v16;
    }
    bzero(__str, 0x410uLL);
    uint64_t v39 = 769;
    uint64_t v40 = a1;
    unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    long long v17 = "%10u %s%c %s: #%04hx Sv,%u\n";
LABEL_24:
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, v17, v38, "GNC", 68, "GN_EE_Get_GPS_Eph_El", v39, v40, v41);
LABEL_25:
    size_t v19 = v18;
    int v20 = 5;
    goto LABEL_28;
  }
LABEL_21:
  int v15 = 3;
LABEL_37:
  unsigned int BlockLen = xofSvcs_GetBlockLen(v15);
  unint64_t v25 = 604800 * a2 + a3;
  __int16 v26 = v42[0].i16[2];
  __int16 v27 = v42[0].i16[3];
  unint64_t v28 = 604800 * v42[0].u16[2] + 16 * v42[0].u16[3];
  unint64_t v29 = v25 - v28;
  BOOL v10 = v28 >= v25;
  unint64_t v30 = v28 - v25;
  if (!v10) {
    unint64_t v30 = v29;
  }
  if (v30 > 1800 * (unint64_t)BlockLen)
  {
    uint64_t v16 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v16;
    }
    bzero(__str, 0x410uLL);
    uint64_t v31 = mach_continuous_time();
    size_t v19 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW_s,%u,EE GpsWeek,%u,sTOC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 69, "GN_EE_Get_GPS_Eph_El", 770, a1, a2, a3, v42[0].u16[2], v42[0].u16[3]);
    int v20 = 0;
    goto LABEL_28;
  }
  *a4 = v42[0].i8[0];
  a4[1] = 0;
  a4[2] = v42[0].u8[2];
  a4[3] = v42[0].u8[1];
  *((_WORD *)a4 + 2) = 0;
  a4[6] = 0;
  *(_WORD *)(a4 + 7) = *(__int16 *)((char *)&v42[0].i16[7] + 1);
  a4[9] = v42[0].u8[14];
  *((_WORD *)a4 + 5) = v26;
  *((_WORD *)a4 + 6) = v27;
  *((_WORD *)a4 + 7) = v27;
  int32x2_t v32 = *(int32x2_t *)&v42[1].i16[1];
  v32.i16[1] = *(_WORD *)((unint64_t)v42 | 0xC);
  *(int32x2_t *)&long long v33 = vzip1_s32(v32, *(int32x2_t *)&v43);
  *((int16x4_t *)&v33 + 1) = vrev64_s16(*(int16x4_t *)((char *)&v43 + 4));
  HIDWORD(v34) = HIDWORD(v43);
  LODWORD(v34) = HIDWORD(v43);
  *((_OWORD *)a4 + 1) = v33;
  __int32 v35 = v42[0].i32[2];
  *((_DWORD *)a4 + 8) = v34 >> 16;
  *((_DWORD *)a4 + 9) = v35;
  *(int32x4_t *)(a4 + 40) = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)&v42[1] + 4), *(int8x16_t *)((char *)&v42[1] + 4), 4uLL), *(int32x4_t *)((char *)&v42[1] + 4));
  *((void *)a4 + 7) = *(uint64_t *)((char *)v42[2].i64 + 4);
  *((_DWORD *)a4 + 16) = v42[2].i32[3];
  if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v36 = mach_continuous_time();
  unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G EE %u,%u,%u,%u,%u,%u,%d,%d,%d,%d,%u,%u,%u,%u,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%u,%u,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNC", 73, "GN_EE_Get_GPS_Eph_El", *a4, a4[1], a4[2], a4[3], a4[4], a4[5], (char)a4[6], (char)a4[7], (char)a4[8], (char)a4[9], *((unsigned __int16 *)a4 + 5), *((unsigned __int16 *)a4 + 6),
          *((unsigned __int16 *)a4 + 7),
          *((unsigned __int16 *)a4 + 8),
          *((__int16 *)a4 + 9),
          *((__int16 *)a4 + 10),
          *((__int16 *)a4 + 11),
          *((__int16 *)a4 + 12),
          *((__int16 *)a4 + 13),
          *((__int16 *)a4 + 14),
          *((__int16 *)a4 + 15),
          *((__int16 *)a4 + 16),
          *((__int16 *)a4 + 17),
          *((_DWORD *)a4 + 9),
          *((_DWORD *)a4 + 10),
          *((_DWORD *)a4 + 11),
          *((_DWORD *)a4 + 12),
          *((_DWORD *)a4 + 13),
          *((_DWORD *)a4 + 14),
          *((_DWORD *)a4 + 15),
          *((_DWORD *)a4 + 16));
  uint64_t v16 = 1;
  LbsOsaTrace_WriteLog(8u, __str, v37, 4, 1);
  return v16;
}

uint64_t GN_EE_Get_GAL_Eph_El(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if ((g_OrbitDataAvailable & 1) == 0)
  {
    uint64_t v13 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      return v13;
    }
    bzero(__str, 0x410uLL);
    unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v16 = "%10u %s%c %s: No Xof\n";
LABEL_17:
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, v16, v35, "GNC", 68, "GN_EE_Get_GAL_Eph_El", v36, v37, v38);
    goto LABEL_18;
  }
  unsigned __int16 v7 = &word_26ADFF926;
  if (!byte_26ADFF924) {
    unsigned __int16 v7 = &word_26ADFF928;
  }
  unsigned __int16 v8 = *v7;
  if (a3 > 0x93A7F
    || (a1 - 37) < 0xDCu
    || !a4
    || a2 > 0xFFF
    || (unsigned __int16)*v7 - 1024 > a2)
  {
    uint64_t v13 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      size_t v17 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,TOWs,%u,WeekNo,%u,SrtGpsWk,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 87, "GN_EE_Get_GAL_Eph_El", 515, a1, a3, a2, v8);
      int v18 = 2;
      goto LABEL_21;
    }
    return v13;
  }
  unsigned __int16 v10 = a2 + 1024;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SV,%u,Weekno,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 68, "GN_EE_Get_GAL_Eph_El", a1, v10, a3);
    LbsOsaTrace_WriteLog(8u, __str, v12, 5, 1);
  }
  memset(v39, 0, 68);
  if (xofSvcs_GetGalSvOrbData(v10 | (unint64_t)(a3 << 32), a1, (unsigned __int8 *)v39) != 1)
  {
    uint64_t v13 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      return v13;
    }
    bzero(__str, 0x410uLL);
    uint64_t v36 = 769;
    uint64_t v37 = a1;
    unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v16 = "%10u %s%c %s: #%04hx Sv,%u\n";
    goto LABEL_17;
  }
  if (v39[0].i8[2])
  {
    uint64_t v13 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sv,%u,SigHs,%u\n", v14);
LABEL_18:
      size_t v17 = v15;
      int v18 = 5;
LABEL_21:
      LbsOsaTrace_WriteLog(8u, __str, v17, v18, 1);
      return 0;
    }
  }
  else
  {
    unsigned int BlockLen = xofSvcs_GetBlockLen(4);
    unint64_t v22 = (604800 * a2 + a3);
    __int16 v23 = v39[0].i16[2];
    __int16 v24 = v39[0].i16[3];
    unint64_t v25 = 604800 * v39[0].u16[2] + 60 * v39[0].u16[3];
    unint64_t v26 = v22 - v25;
    BOOL v27 = v25 >= v22;
    unint64_t v28 = v25 - v22;
    if (!v27) {
      unint64_t v28 = v26;
    }
    if (v28 > 1800 * (unint64_t)BlockLen)
    {
      uint64_t v13 = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
        return v13;
      }
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      size_t v17 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW_s,%u,EE GalWeek,%u,TOE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNC", 69, "GN_EE_Get_GAL_Eph_El", 770, a1, a2, a3, v39[0].u16[2], v39[0].u16[3]);
      int v18 = 0;
      goto LABEL_21;
    }
    *(_DWORD *)a4 = a3;
    *(_WORD *)(a4 + 4) = v23;
    *(unsigned char *)(a4 + 6) = v39[0].i8[0];
    *(unsigned char *)(a4 + 7) = v39[0].i8[3];
    *(_WORD *)(a4 + 8) = v39[1].i16[1];
    *(_WORD *)(a4 + 10) = v24;
    *(int32x4_t *)(a4 + 12) = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)&v39[1] + 8), *(int8x16_t *)((char *)&v39[1] + 8), 4uLL), *(int32x4_t *)((char *)&v39[1] + 8));
    *(void *)(a4 + 28) = v39[2].i64[1];
    *(_DWORD *)(a4 + 36) = v39[3].i32[0];
    *(int8x16_t *)(a4 + 40) = vqtbl1q_s8(*(int8x16_t *)((char *)&v39[3] + 4), (int8x16_t)xmmword_22BB0CAF0);
    *(void *)(a4 + 56) = v39[0].i64[1];
    *(_WORD *)(a4 + 64) = v39[1].i8[0];
    *(_WORD *)(a4 + 66) = v24;
    HIDWORD(v30) = v39[1].i32[1];
    LODWORD(v30) = v39[1].i32[1];
    *(_DWORD *)(a4 + 68) = v30 >> 16;
    *(unsigned char *)(a4 + 72) = 0;
    __int8 v31 = v39[0].i8[1];
    *(unsigned char *)(a4 + 73) = v39[0].i8[1] & 1;
    *(unsigned char *)(a4 + 74) = (v31 & 2) != 0;
    *(unsigned char *)(a4 + 75) = (v31 & 4) != 0;
    unsigned int v32 = v39[0].u8[2];
    *(unsigned char *)(a4 + 76) = v39[0].i8[2] & 3;
    *(unsigned char *)(a4 + 77) = (v32 >> 2) & 3;
    *(unsigned char *)(a4 + 78) = (v32 >> 4) & 3;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v33 = mach_continuous_time();
      unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:E EE %u,%u,%u,%u,%u,%u,%d,%u,%u,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%u,%d,%d,%u,%u,%u,%u,%u,%u,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNC", 73, "GN_EE_Get_GAL_Eph_El", *(_DWORD *)a4, *(unsigned __int16 *)(a4 + 4), *(unsigned __int8 *)(a4 + 6), *(unsigned __int8 *)(a4 + 7), *(unsigned __int16 *)(a4 + 8), *(unsigned __int16 *)(a4 + 10), *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 24), *(_DWORD *)(a4 + 28),
              *(_DWORD *)(a4 + 32),
              *(_DWORD *)(a4 + 36),
              *(__int16 *)(a4 + 40),
              *(__int16 *)(a4 + 42),
              *(__int16 *)(a4 + 44),
              *(__int16 *)(a4 + 46),
              *(__int16 *)(a4 + 48),
              *(__int16 *)(a4 + 50),
              *(__int16 *)(a4 + 52),
              *(__int16 *)(a4 + 54),
              *(_DWORD *)(a4 + 56),
              *(_DWORD *)(a4 + 60),
              *(__int16 *)(a4 + 64),
              *(unsigned __int16 *)(a4 + 66),
              *(__int16 *)(a4 + 68),
              *(__int16 *)(a4 + 70),
              *(unsigned __int8 *)(a4 + 72),
              *(unsigned __int8 *)(a4 + 73),
              *(unsigned __int8 *)(a4 + 74),
              *(unsigned __int8 *)(a4 + 75),
              *(unsigned __int8 *)(a4 + 76),
              *(unsigned __int8 *)(a4 + 77),
              *(unsigned __int8 *)(a4 + 78));
      uint64_t v13 = 1;
      LbsOsaTrace_WriteLog(8u, __str, v34, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  return v13;
}

uint64_t GN_EE_Get_BDS_Eph_El(uint64_t a1, int a2, uint64_t a3, __int16 *a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if ((g_OrbitDataAvailable & 1) == 0)
  {
    uint64_t v14 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      return v14;
    }
    bzero(__str, 0x410uLL);
    unint64_t v31 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v15 = "%10u %s%c %s: No Xof\n";
LABEL_13:
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, v15, v31, "GNC", 68, "GN_EE_Get_BDS_Eph_El", v32, v33, v34);
LABEL_14:
    size_t v17 = v16;
    int v18 = 5;
LABEL_17:
    LbsOsaTrace_WriteLog(8u, __str, v17, v18, 1);
    return 0;
  }
  unsigned __int16 v7 = &word_26ADFF926;
  if (!byte_26ADFF924) {
    unsigned __int16 v7 = &word_26ADFF928;
  }
  unsigned __int16 v8 = *v7;
  if (a3 > 0x93A7F
    || (a1 - 38) < 0xDBu
    || !a4
    || a2 > 0xFFF
    || (unsigned __int16)*v7 - 1356 > a2)
  {
    uint64_t v14 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      size_t v17 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,TOW_s,%u,WeekNo,%u,SrtGpsWkNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 87, "GN_EE_Get_BDS_Eph_El", 515, a1, a3, a2, v8);
      int v18 = 2;
      goto LABEL_17;
    }
    return v14;
  }
  int v10 = a2 + 1356;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned int v12 = (unsigned __int16)v10;
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SV,%u,Weekno,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 68, "GN_EE_Get_BDS_Eph_El", a1, (unsigned __int16)v10, a3);
    LbsOsaTrace_WriteLog(8u, __str, v13, 5, 1);
  }
  else
  {
    unsigned int v12 = (unsigned __int16)v10;
  }
  memset(v35, 0, 84);
  if (xofSvcs_GetBdsSvOrbData(v12 | (unint64_t)(a3 << 32), a1, (unsigned __int8 *)v35) != 1)
  {
    uint64_t v14 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      return v14;
    }
    bzero(__str, 0x410uLL);
    uint64_t v32 = 769;
    uint64_t v33 = a1;
    unint64_t v31 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v15 = "%10u %s%c %s: #%04hx Sv,%u\n";
    goto LABEL_13;
  }
  if (v35[0].i8[1])
  {
    uint64_t v14 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      return v14;
    }
    bzero(__str, 0x410uLL);
    unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sv,%u,Health,%u\n", v21);
    goto LABEL_14;
  }
  unsigned int BlockLen = xofSvcs_GetBlockLen(6);
  uint64_t v23 = (a3 + 604800 * v10);
  __int32 v24 = v35[0].i32[2];
  uint64_t v25 = 604800 * v35[0].u16[3] + 8 * v35[0].i32[2] + 820108800;
  if (v23 <= v25) {
    unint64_t v26 = v25 - v23;
  }
  else {
    unint64_t v26 = v23 - v25;
  }
  if (v26 > 1800 * (unint64_t)BlockLen)
  {
    uint64_t v14 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v14;
    }
    bzero(__str, 0x410uLL);
    uint64_t v27 = mach_continuous_time();
    size_t v17 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW_s,%u,EE BdsWeek,%u,TOE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNC", 69, "GN_EE_Get_BDS_Eph_El", 770, a1, a2, a3, v35[0].u16[3], v35[0].i32[2]);
    int v18 = 0;
    goto LABEL_17;
  }
  *a4 = v35[0].i16[3];
  *((_DWORD *)a4 + 1) = v24;
  *((_DWORD *)a4 + 2) = v24;
  *((unsigned char *)a4 + 12) = v35[1].i8[11];
  *((unsigned char *)a4 + 13) = v35[1].i8[10];
  *((unsigned char *)a4 + 14) = v35[0].i8[0];
  *((unsigned char *)a4 + 15) = v35[0].i8[2];
  *((unsigned char *)a4 + 16) = v35[0].i8[1];
  *(int32x4_t *)(a4 + 10) = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)&v35[1] + 12), *(int8x16_t *)((char *)&v35[1] + 12), 4uLL), *(int32x4_t *)((char *)&v35[1] + 12));
  *(void *)(a4 + 18) = *(uint64_t *)((char *)&v35[2].i64[1] + 4);
  a4[22] = v35[3].i16[5];
  a4[23] = v35[3].i16[4];
  *((_DWORD *)a4 + 12) = v35[3].i32[1];
  *(void *)&long long v28 = *(uint64_t *)((char *)&v35[4].i64[1] + 4);
  *((void *)&v28 + 1) = *(uint64_t *)((char *)&v35[0].i64[1] + 4);
  *(int8x16_t *)(a4 + 26) = *(int8x16_t *)((char *)&v35[3] + 12);
  *(_OWORD *)(a4 + 34) = v28;
  a4[42] = v35[1].i16[2];
  *(_DWORD *)(a4 + 43) = *(__int32 *)((char *)&v35[1].i32[1] + 2);
  if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v29 = mach_continuous_time();
  unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:B EE %d,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNC", 73, "GN_EE_Get_BDS_Eph_El", *a4, *((_DWORD *)a4 + 1), *((_DWORD *)a4 + 2), *((unsigned __int8 *)a4 + 12), *((unsigned __int8 *)a4 + 13), *((unsigned __int8 *)a4 + 14), *((unsigned __int8 *)a4 + 15), *((unsigned __int8 *)a4 + 16), *((_DWORD *)a4 + 5), *((_DWORD *)a4 + 6), *((_DWORD *)a4 + 7), *((_DWORD *)a4 + 8),
          *((_DWORD *)a4 + 9),
          *((_DWORD *)a4 + 10),
          a4[22],
          a4[23],
          *((_DWORD *)a4 + 12),
          *((_DWORD *)a4 + 13),
          *((_DWORD *)a4 + 14),
          *((_DWORD *)a4 + 15),
          *((_DWORD *)a4 + 16),
          *((_DWORD *)a4 + 17),
          *((_DWORD *)a4 + 18),
          *((_DWORD *)a4 + 19),
          *((_DWORD *)a4 + 20),
          a4[42],
          a4[43],
          a4[44]);
  uint64_t v14 = 1;
  LbsOsaTrace_WriteLog(8u, __str, v30, 4, 1);
  return v14;
}

uint64_t GN_EE_Get_GLON_GPS_Eph_El(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if ((g_OrbitDataAvailable & 1) == 0)
  {
    uint64_t v12 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      return v12;
    }
    bzero(__str, 0x410uLL);
    unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v15 = "%10u %s%c %s: No Xof\n";
LABEL_17:
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, v15, v35, "GNC", 68, "GN_EE_Get_GLON_GPS_Eph_El", v36, v37, v38);
    goto LABEL_18;
  }
  unsigned __int16 v7 = &word_26ADFF926;
  if (!byte_26ADFF924) {
    unsigned __int16 v7 = &word_26ADFF928;
  }
  unsigned __int16 v8 = *v7;
  if (a3 > 0x93A7F || (a1 - 25) < 0xE8u || !a4 || a2 > 0xFFF || a2 < v8)
  {
    uint64_t v12 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,TOW_s,%u,WeekNo,%u,SrtGpsWkNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 87, "GN_EE_Get_GLON_GPS_Eph_El", 515, a1, a3, a2, v8);
      int v17 = 2;
      goto LABEL_21;
    }
    return v12;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SV,%u,Weekno,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 68, "GN_EE_Get_GLON_GPS_Eph_El", a1, a2, a3);
    LbsOsaTrace_WriteLog(8u, __str, v11, 5, 1);
  }
  long long v40 = 0u;
  memset(v39, 0, sizeof(v39));
  if (xofSvcs_GetGloSvOrbData(a2 | (unint64_t)(a3 << 32), a1, (unsigned __int8 *)v39) != 1)
  {
    uint64_t v12 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      return v12;
    }
    bzero(__str, 0x410uLL);
    uint64_t v36 = 769;
    uint64_t v37 = a1;
    unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v15 = "%10u %s%c %s: #%04hx Sv,%u\n";
    goto LABEL_17;
  }
  if (v39[0].i8[1])
  {
    uint64_t v12 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sv,%u,Health,%u\n", v13);
LABEL_18:
      size_t v16 = v14;
      int v17 = 5;
LABEL_21:
      LbsOsaTrace_WriteLog(8u, __str, v16, v17, 1);
      return 0;
    }
  }
  else
  {
    unsigned int BlockLen = xofSvcs_GetBlockLen(5);
    unint64_t v21 = 604800 * a2 + a3;
    __int16 v22 = v39[0].i16[2];
    __int16 v23 = v39[0].i16[3];
    unint64_t v24 = 604800 * v39[0].u16[2] + 16 * v39[0].u16[3];
    unint64_t v25 = v21 - v24;
    BOOL v26 = v24 >= v21;
    unint64_t v27 = v24 - v21;
    if (!v26) {
      unint64_t v27 = v25;
    }
    if (v27 > 1800 * (unint64_t)BlockLen)
    {
      uint64_t v12 = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
        return v12;
      }
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW_s,%u,EE GpsWeek,%u,sTOC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 69, "GN_EE_Get_GLON_GPS_Eph_El", 770, a1, a2, a3, v39[0].u16[2], v39[0].u16[3]);
      int v17 = 0;
      goto LABEL_21;
    }
    *a4 = v39[0].i8[0];
    a4[1] = 0;
    a4[2] = v39[0].u8[2];
    a4[3] = v39[0].u8[1];
    *((_WORD *)a4 + 2) = 0;
    a4[6] = 0;
    *(_WORD *)(a4 + 7) = *(__int16 *)((char *)&v39[0].i16[7] + 1);
    a4[9] = v39[0].u8[14];
    *((_WORD *)a4 + 5) = v22;
    *((_WORD *)a4 + 6) = v23;
    *((_WORD *)a4 + 7) = v23;
    int32x2_t v29 = *(int32x2_t *)&v39[1].i16[1];
    v29.i16[1] = *(_WORD *)((unint64_t)v39 | 0xC);
    *(int32x2_t *)&long long v30 = vzip1_s32(v29, *(int32x2_t *)&v40);
    *((int16x4_t *)&v30 + 1) = vrev64_s16(*(int16x4_t *)((char *)&v40 + 4));
    HIDWORD(v31) = HIDWORD(v40);
    LODWORD(v31) = HIDWORD(v40);
    *((_OWORD *)a4 + 1) = v30;
    __int32 v32 = v39[0].i32[2];
    *((_DWORD *)a4 + 8) = v31 >> 16;
    *((_DWORD *)a4 + 9) = v32;
    *(int32x4_t *)(a4 + 40) = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)&v39[1] + 4), *(int8x16_t *)((char *)&v39[1] + 4), 4uLL), *(int32x4_t *)((char *)&v39[1] + 4));
    *((void *)a4 + 7) = *(uint64_t *)((char *)v39[2].i64 + 4);
    *((_DWORD *)a4 + 16) = v39[2].i32[3];
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v33 = mach_continuous_time();
      unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G EE %u,%u,%u,%u,%u,%u,%d,%d,%d,%d,%u,%u,%u,%u,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%u,%u,%d,%d,%d,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNC", 73, "GN_EE_Get_GLON_GPS_Eph_El", *a4, a4[1], a4[2], a4[3], a4[4], a4[5], (char)a4[6], (char)a4[7], (char)a4[8], (char)a4[9], *((unsigned __int16 *)a4 + 5), *((unsigned __int16 *)a4 + 6),
              *((unsigned __int16 *)a4 + 7),
              *((unsigned __int16 *)a4 + 8),
              *((__int16 *)a4 + 9),
              *((__int16 *)a4 + 10),
              *((__int16 *)a4 + 11),
              *((__int16 *)a4 + 12),
              *((__int16 *)a4 + 13),
              *((__int16 *)a4 + 14),
              *((__int16 *)a4 + 15),
              *((__int16 *)a4 + 16),
              *((__int16 *)a4 + 17),
              *((_DWORD *)a4 + 9),
              *((_DWORD *)a4 + 10),
              *((_DWORD *)a4 + 11),
              *((_DWORD *)a4 + 12),
              *((_DWORD *)a4 + 13),
              *((_DWORD *)a4 + 14),
              *((_DWORD *)a4 + 15),
              *((_DWORD *)a4 + 16));
      uint64_t v12 = 1;
      LbsOsaTrace_WriteLog(8u, __str, v34, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  return v12;
}

uint64_t GncP24_50HandleEeDataInd(uint64_t a1)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    size_t v19 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 69, "GncP24_50HandleEeDataInd", 517);
    int v20 = 0;
LABEL_26:
    LbsOsaTrace_WriteLog(8u, __str, v19, v20, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EEDATA_IND Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP24_50HandleEeDataInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  uint64_t v4 = *(signed __int8 **)(a1 + 24);
  if (!v4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    size_t v19 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EE Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 87, "GncP24_50HandleEeDataInd", 769);
    int v20 = 2;
    goto LABEL_26;
  }
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 2)
  {
    LOBYTE(v59[0]) = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    int v22 = *(_DWORD *)(a1 + 32);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Processing RTI Data Start\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 73, "GncP24_12HandleRtiInd");
      LbsOsaTrace_WriteLog(8u, __str, v24, 4, 1);
    }
    if (v22)
    {
      if (xofScvs_InjectRtiData(v4, v22, (uint64_t)v59) == 1)
      {
        unsigned int v67 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        GncP16_22UpdateStateAssistDataRcvd(&v67);
        v65[0] = 0;
        unsigned int v66 = 0;
        if (xofSvcs_GetRtiInjctTime((uint64_t)v65) == 1
          && (GN_GPS_Set_RTI_Time(v65[0], v66) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiFlCrtTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "GNC", 87, "GncP24_12HandleRtiInd", 257);
          LbsOsaTrace_WriteLog(8u, __str, v26, 2, 1);
        }
        unsigned __int8 v68 = 0;
        if ((GncP24_13UpdateBadSvList(1, 1, 32, (uint64_t)&v72, (uint64_t)v70, &v68) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNC", 87, "GncP24_12UpdtRtiAssistDoNotUseSV", 257);
          LbsOsaTrace_WriteLog(8u, __str, v28, 2, 1);
        }
        if ((GncP24_13UpdateBadSvList(2, 120, 39, (uint64_t)&v72, (uint64_t)v70, &v68) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBAS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNC", 87, "GncP24_12UpdtRtiAssistDoNotUseSV", 257);
          LbsOsaTrace_WriteLog(8u, __str, v30, 2, 1);
        }
        if ((GncP24_13UpdateBadSvList(3, 193, 10, (uint64_t)&v72, (uint64_t)v70, &v68) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v31 = mach_continuous_time();
          unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QZSS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "GncP24_12UpdtRtiAssistDoNotUseSV", 257);
          LbsOsaTrace_WriteLog(8u, __str, v32, 2, 1);
        }
        if ((GncP24_13UpdateBadSvList(4, 1, 36, (uint64_t)&v72, (uint64_t)v70, &v68) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v33 = mach_continuous_time();
          unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GAL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNC", 87, "GncP24_12UpdtRtiAssistDoNotUseSV", 257);
          LbsOsaTrace_WriteLog(8u, __str, v34, 2, 1);
        }
        if ((GncP24_13UpdateBadSvList(5, 1, 24, (uint64_t)&v72, (uint64_t)v70, &v68) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v35 = mach_continuous_time();
          unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 87, "GncP24_12UpdtRtiAssistDoNotUseSV", 257);
          LbsOsaTrace_WriteLog(8u, __str, v36, 2, 1);
        }
        if ((GncP24_13UpdateBadSvList(6, 1, 37, (uint64_t)&v72, (uint64_t)v70, &v68) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v37 = mach_continuous_time();
          unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BDS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "GNC", 87, "GncP24_12UpdtRtiAssistDoNotUseSV", 257);
          LbsOsaTrace_WriteLog(8u, __str, v38, 2, 1);
        }
        if ((GN_GPS_Set_RTI_Bad_SV_List(v68, &v72, (unsigned __int8 *)v70) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v39 = mach_continuous_time();
          unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RTI data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "GNC", 87, "GncP24_12UpdtRtiAssistDoNotUseSV", 257);
          LbsOsaTrace_WriteLog(8u, __str, v40, 2, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v41 = mach_continuous_time();
          unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Processing RTI Data Ends\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "GNC", 73, "GncP24_12HandleRtiInd");
          LbsOsaTrace_WriteLog(8u, __str, v42, 4, 1);
        }
        char v43 = v59[0];
        int v16 = 1;
        uint64_t v44 = v61;
        goto LABEL_74;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RTI\n");
        goto LABEL_72;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataLen\n");
LABEL_72:
      LbsOsaTrace_WriteLog(8u, __str, v49, 2, 1);
    }
    uint64_t v44 = 0;
    int v16 = 0;
    char v43 = 0;
LABEL_74:
    int v51 = *(_DWORD *)(a1 + 12);
    char v56 = v43;
    uint64_t v57 = v44;
    uint64_t v58 = 0;
    uint64_t v52 = &v56;
    int v53 = 2;
    goto LABEL_75;
  }
  if (v5 != 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v45 = mach_continuous_time();
      unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EeType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "GNC", 87, "GncP24_50HandleEeDataInd", 770, *(_DWORD *)(a1 + 16));
      LbsOsaTrace_WriteLog(8u, __str, v46, 2, 1);
    }
    goto LABEL_76;
  }
  LOBYTE(v72) = 0;
  long long v73 = 0uLL;
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Processing XOF Data Start\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP24_11HandleOrbitDataInd");
    LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
  }
  if (v6)
  {
    if (xofScvs_InjectOrbitData((unsigned __int8 *)v4, v6, (uint64_t)&v72) == 1)
    {
      g_OrbitDataAvailable = 1;
      g_BceOrbitDataInjected = 0;
      *(_DWORD *)unint64_t v65 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      GncP16_22UpdateStateAssistDataRcvd((unsigned int *)v65);
      v70[0] = 0;
      unsigned int v71 = 0;
      if (xofSvcs_GetXofInjctTime((uint64_t)v70) == 1
        && (GN_GPS_Set_XOF_Time(v70[0], v71) & 1) == 0
        && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofFlCrtTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncP24_11HandleOrbitDataInd", 257);
        LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
      }
      v59[0] = 0;
      unsigned int v60 = 0;
      if (xofSvcs_GetXofEEStartTime((uint64_t)v59) == 1
        && (GN_GPS_Set_EE_Start_Time(v59[0], v60) & 1) == 0
        && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEEStartTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP24_11HandleOrbitDataInd", 257);
        LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
      }
      GncP24_55UpdateBceOrbitAssistance(1);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Processing XOF Data Ends\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 73, "GncP24_11HandleOrbitDataInd");
        LbsOsaTrace_WriteLog(8u, __str, v14, 4, 1);
      }
      char v15 = v72;
      int v16 = 1;
      long long v17 = v73;
      goto LABEL_69;
    }
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    long long v17 = 0uLL;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XOF\n");
      goto LABEL_67;
    }
  }
  else
  {
    int v47 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    long long v17 = 0uLL;
    if (v47)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataLen\n");
LABEL_67:
      LbsOsaTrace_WriteLog(8u, __str, v48, 2, 1);
      long long v17 = 0uLL;
    }
  }
  char v15 = 0;
  int v16 = 0;
LABEL_69:
  int v51 = *(_DWORD *)(a1 + 12);
  char v63 = v15;
  long long v64 = v17;
  uint64_t v52 = &v63;
  int v53 = 1;
LABEL_75:
  GncP24_03SendApiStatus(v51, v53, v16, (uint64_t)v52);
LABEL_76:
  uint64_t v54 = *(void **)(a1 + 24);
  if (v54) {
    free(v54);
  }
  *(void *)(a1 + 24) = 0;
  return 0;
}

void GncP24_03SendApiStatus(int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned __int16 v8 = gnssOsa_Calloc("GncP24_03SendApiStatus", 166, 1, 0x30uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    v8[4] = a2;
    v8[5] = a3;
    v8[3] = a1;
    *((unsigned char *)v8 + 24) = *(unsigned char *)a4;
    *((_OWORD *)v8 + 2) = *(_OWORD *)(a4 + 8);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EEAPI_IND =>LSIM Api,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 68, "GncP24_03SendApiStatus", v9[4], v9[3]);
      LbsOsaTrace_WriteLog(8u, __str, v11, 5, 1);
    }
    AgpsSendFsmMsg(134, 131, 8783875, v9);
  }
}

uint64_t GncP24_52ConvertAGnssType(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a1 - 1) < 6) {
    return dword_22BB40324[a1 - 1];
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP24_52ConvertAGnssType", 770, a1);
    LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
    return 0;
  }
  return result;
}

uint64_t GncP24_16XofGetNotBrdCstSvs(int a1, char a2, unsigned int a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!a4 || !a5 || *a5 == 255)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v28 = *a5;
    uint64_t v29 = a3;
    uint64_t v26 = 515;
    uint64_t v27 = 255;
    int v20 = "%10u %s%c %s: #%04hx MaxCnt,%u,NotBrdSvCnt,%u,MaxSvCnt,%u\n";
    unint64_t v25 = v19;
    goto LABEL_17;
  }
  unint64_t v30 = 0;
  XofBrdSvBitMasuint64_t k = xofSvcs_GetXofBrdSvBitMask(a1, (uint64_t *)&v30);
  if (XofBrdSvBitMask == 6) {
    return 1;
  }
  if (XofBrdSvBitMask == 1)
  {
    unint64_t v11 = v30;
    int v12 = GncP24_52ConvertAGnssType(a1);
    uint64_t v13 = 0;
    if (a3 - 1 >= 0x3F) {
      int v14 = 63;
    }
    else {
      int v14 = (a3 - 1);
    }
    uint64_t v15 = (v14 + 1);
    unsigned __int8 v16 = *a5;
    while (v16 != 0xFF)
    {
      if (((v11 >> v13) & 1) == 0)
      {
        *(_DWORD *)(a4 + 4 * v16) = v12;
        *(unsigned char *)(a4 + *a5 + 1020) = v13 + a2;
        unsigned __int8 v16 = *a5 + 1;
        *a5 = v16;
      }
      if (v15 == ++v13) {
        return 1;
      }
    }
    int v23 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (v23)
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      uint64_t v26 = 772;
      uint64_t v27 = *a5;
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24);
      int v20 = "%10u %s%c %s: #%04hx NotBrdSvCnt,%u\n";
      goto LABEL_17;
    }
  }
  else
  {
    int v22 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (v22)
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = 770;
      uint64_t v27 = a1;
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v20 = "%10u %s%c %s: #%04hx Constel,%u\n";
LABEL_17:
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, v20, v25, "GNC", 87, "GncP24_16XofGetNotBrdCstSvs", v26, v27, v28, v29);
      LbsOsaTrace_WriteLog(8u, __str, v21, 2, 1);
      return 0;
    }
  }
  return result;
}

uint64_t GncP24_13UpdateBadSvList(int a1, char a2, int a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!a4 || !a5 || !a6 || *a6 == 255)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_10;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v30 = 0;
  uint64_t v29 = 0;
  if (xofSvcs_GetRtiData(a1, (int *)&v27) == 1)
  {
    uint64_t v12 = v30 & v29;
    uint64_t v13 = (HIDWORD(v29) & HIDWORD(v28));
    if ((a1 - 1) >= 6)
    {
      int v19 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      int v14 = 0;
      if (v19)
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 87, "Gncp24_53ConvertGnssType", 770, a1);
        LbsOsaTrace_WriteLog(8u, __str, v21, 2, 1);
        int v14 = 0;
      }
    }
    else
    {
      int v14 = dword_22BB4033C[a1 - 1];
    }
    uint64_t v22 = 0;
    unsigned __int8 v23 = *a6;
    while (v23 != 0xFF)
    {
      if ((((v13 | (unint64_t)(v12 << 32)) >> v22) & 1) == 0)
      {
        *(_DWORD *)(a4 + 4 * v23) = v14;
        *(unsigned char *)(a5 + *a6) = v22 + a2;
        unsigned __int8 v23 = *a6 + 1;
        *a6 = v23;
      }
      if (a3 == ++v22) {
        return 1;
      }
    }
    int v24 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (v24)
    {
      bzero(__str, 0x410uLL);
      unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BadSvCnt,%u\n", v26);
      goto LABEL_10;
    }
  }
  else
  {
    int v18 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (v18)
    {
      bzero(__str, 0x410uLL);
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Constel,%u\n", v25);
LABEL_10:
      LbsOsaTrace_WriteLog(8u, __str, v17, 2, 1);
      return 0;
    }
  }
  return result;
}

size_t GNS_ExecutePpduCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_ExecutePpduCallback");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (g_GnsPpduCallback) {
    g_GnsPpduCallback(a1, a2, a3);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "GNS_ExecutePpduCallback");
    return LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
  }
  return result;
}

size_t lsim21_05PpduSessionAbort(int a1, int a2, int a3, long long *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  memset_s(__s, 0x60uLL, 0, 0x60uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim21_05PpduSessionAbort");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  __s[0] = a1;
  __s[1] = a2;
  __s[3] = a3;
  long long v10 = a4[1];
  long long v17 = *a4;
  long long v18 = v10;
  long long v19 = a4[2];
  int v20 = *((_DWORD *)a4 + 12);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:SESSION_END_IND =>PpduCB,SuplHandle,%u,Code,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "lsim21_05PpduSessionAbort", a1, a3);
    LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  }
  GNS_ExecutePpduCallback(4, 68, (uint64_t)__s);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "lsim21_05PpduSessionAbort");
    return LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
  }
  return result;
}

uint64_t lsim21_11HandlePpduEncodedPdu(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim21_11HandlePpduEncodedPdu");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v5 = 89;
    if (!*(unsigned char *)(a1 + 48)) {
      uint64_t v5 = 78;
    }
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_PPDU_DELIVERY_IND,SuplHandle,%u,ContentType,%u,SessionType,%u,PduType,%u,EncStatus,%u,isFinal,%c\n", (unint64_t)v4, "LSM", 73, "lsim21_11HandlePpduEncodedPdu", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), v5);
    LbsOsaTrace_WriteLog(0xCu, __str, v6, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PduSize,%u,Pdu,%p\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 68, "lsim21_11HandlePpduEncodedPdu", *(unsigned __int16 *)(a1 + 32), *(const void **)(a1 + 40));
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 5, 1);
  }
  int v10 = *(_DWORD *)(a1 + 12);
  int v9 = *(_DWORD *)(a1 + 16);
  int v12 = *(_DWORD *)(a1 + 20);
  int v11 = *(_DWORD *)(a1 + 24);
  int v13 = *(_DWORD *)(a1 + 28);
  uint64_t v14 = *(unsigned __int8 **)(a1 + 40);
  int v15 = *(unsigned __int8 *)(a1 + 48);
  unsigned __int16 v16 = *(_WORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "lsim21_02SendEncodedPdu");
    LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
  }
  if (v12 == 1)
  {
    if (v13 == 14)
    {
      int v19 = v10;
      unsigned int v20 = 0;
      unsigned __int16 v21 = 0;
      int v22 = v9;
      int v23 = v11;
      int v24 = 1;
    }
    else
    {
      unsigned int v20 = v16;
      int v19 = v10;
      unsigned __int16 v21 = v14;
      int v22 = v9;
      int v23 = v11;
      int v24 = 2;
    }
    GN_SUPL_PPDU_Delivery_In(v19, v20, v21, v22, v23, v24, v15 != 0);
    GN_SUPL_Handler();
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
LABEL_20:
      bzero(__str, 0x410uLL);
      uint64_t v27 = mach_continuous_time();
      unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "LSM", 73, "lsim21_02SendEncodedPdu");
      LbsOsaTrace_WriteLog(0xCu, __str, v28, 4, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "LSM", 87, "lsim21_02SendEncodedPdu", 515, v12);
      LbsOsaTrace_WriteLog(0xCu, __str, v26, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_20;
    }
  }
  uint64_t v29 = *(void **)(a1 + 40);
  if (v29) {
    free(v29);
  }
  *(void *)(a1 + 40) = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v30 = mach_continuous_time();
    unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "LSM", 73, "lsim21_11HandlePpduEncodedPdu");
    LbsOsaTrace_WriteLog(0xCu, __str, v31, 4, 1);
  }
  return 0;
}

uint64_t lsim21_12HandlePpduSessionEnd(_DWORD *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim21_12HandlePpduSessionEnd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_PPDU_SESSIONEND_IND,SuplHandle,%u,SessionType,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim21_12HandlePpduSessionEnd", a1[3], a1[4], a1[5]);
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  int v6 = a1[4];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim21_03SendSessionEnd");
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
  }
  if (v6 == 1)
  {
    GN_SUPL_PPDU_SessionEnd_In();
    GN_SUPL_Handler();
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim21_03SendSessionEnd");
    LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "lsim21_12HandlePpduSessionEnd");
    LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  }
  return 0;
}

size_t lsim21_13PpduCbInit(size_t result)
{
  uint64_t v1 = (uint64_t (*)(void, void, void))result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsPpduCallback)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim21_13PpduCbInit", 513);
      size_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsPpduCallbacuint64_t k = v1;
    return result;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim21_13PpduCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

BOOL GN_SUPL_PPDU_Decode_Out(int a1, size_t a2, const void *a3, int a4, int a5, int a6)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "GN_SUPL_PPDU_Decode_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
  }
  if (a2 && a3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u,Size,%u,Datpointer,%p,Type,%u,log,%u,emergency,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "GN_SUPL_PPDU_Decode_Out", a1, a2, a3, a4, a5, a6);
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
    }
    unsigned __int16 v16 = gnssOsa_Calloc("GN_SUPL_PPDU_Decode_Out", 268, 1, a2);
    BOOL v17 = v16 != 0;
    if (v16)
    {
      unsigned __int16 v18 = v16;
      memcpy_s("GN_SUPL_PPDU_Decode_Out", 275, v16, a2, a3, a2);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "lsim21_04PpduSessionStart");
        LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
      }
      memset_s(__s, 0x60uLL, 0, 0x60uLL);
      __s[0] = a1;
      __s[1] = 1;
      char v33 = a5;
      char v34 = a6;
      int v35 = 0;
      int v36 = 0;
      int v37 = 7;
      uint64_t v38 = 0;
      memset(v39, 0, sizeof(v39));
      __int16 v40 = -1;
      char v41 = 0;
      int v42 = 0;
      uint64_t v43 = -1;
      int v44 = 0;
      __int16 v45 = a2;
      unsigned __int16 v46 = v18;
      int v47 = a4;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:ACTIVE_SESSION_PDU =>PpduCB,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "lsim21_04PpduSessionStart", a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
      }
      GNS_ExecutePpduCallback(1, 96, (uint64_t)__s);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 73, "lsim21_04PpduSessionStart");
        LbsOsaTrace_WriteLog(0xCu, __str, v24, 4, 1);
      }
      free(v18);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "LSM", 73, "GN_SUPL_PPDU_Decode_Out");
      LbsOsaTrace_WriteLog(0xCu, __str, v26, 4, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v27 = mach_continuous_time();
      unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PDUSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "LSM", 87, "GN_SUPL_PPDU_Decode_Out", 513, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v28, 2, 1);
    }
    BOOL v17 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "LSM", 73, "GN_SUPL_PPDU_Decode_Out");
      LbsOsaTrace_WriteLog(0xCu, __str, v30, 4, 1);
      return 0;
    }
  }
  return v17;
}

uint64_t GN_SUPL_PPDU_SessionEnd_Out(int a1, int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GN_SUPL_PPDU_SessionEnd_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  long long v8 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v8;
  void v12[2] = *(_OWORD *)(a3 + 32);
  int v13 = *(_DWORD *)(a3 + 48);
  lsim21_05PpduSessionAbort(a1, 1, a2, v12);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "GN_SUPL_PPDU_SessionEnd_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
  }
  return 1;
}

uint64_t GN_SUPL_PPDU_PduRequest_Out(int a1, int a2, int a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v160 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GN_SUPL_PPDU_PduRequest_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v13 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v14 = 89;
    if (a6) {
      uint64_t v15 = 89;
    }
    else {
      uint64_t v15 = 78;
    }
    if (!a4) {
      uint64_t v14 = 78;
    }
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u,PcolType,%u,ReqType,%u,Agnss,%c,CellInfo,%c\n", (unint64_t)v13, "LSM", 73, "GN_SUPL_PPDU_PduRequest_Out", a1, a2, a3, v14, v15);
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
  }
  if (a3 == 2)
  {
    memset_s(&__s, 0x60uLL, 0, 0x60uLL);
    int v156 = a2;
    int __s = a1;
    int v155 = 1;
    if (a6 && *(_DWORD *)a6 == 2)
    {
      unsigned __int16 v20 = gnssOsa_Calloc("GN_SUPL_PPDU_PduRequest_Out", 388, 1, 0x14uLL);
      uint64_t v158 = v20;
      if (!v20)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
          return 0;
        }
LABEL_147:
        bzero(__str, 0x410uLL);
        unint64_t v151 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v152 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v151, "LSM", 73, "GN_SUPL_PPDU_PduRequest_Out");
        LbsOsaTrace_WriteLog(0xCu, __str, v152, 4, 1);
        return 0;
      }
      v20[16] = *(unsigned char *)(a6 + 8);
      int v21 = *(_DWORD *)(a6 + 4);
      if (v21 == 5)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v30 = mach_continuous_time();
          unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTE CI,Mcc,%u,Mnc,%u,Ci,%u,Tac,%u,Pci,%u,Ta,%u,rsrp,%u,rsrq,%u,eARFCN,%u,Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "LSM", 68, "GN_SUPL_PPDU_PduRequest_Out", *(unsigned __int16 *)(a6 + 12), *(unsigned __int16 *)(a6 + 14), *(_DWORD *)(a6 + 16), *(_DWORD *)(a6 + 24), *(unsigned __int16 *)(a6 + 20), *(unsigned __int16 *)(a6 + 36), *(unsigned __int8 *)(a6 + 28), *(unsigned __int8 *)(a6 + 29), *(_DWORD *)(a6 + 32), *(unsigned __int8 *)(a6 + 38));
          LbsOsaTrace_WriteLog(0xCu, __str, v31, 5, 1);
        }
        *((_DWORD *)v158 + 3) = 1;
        *(_WORD *)uint64_t v158 = *(_WORD *)(a6 + 12);
        *((_WORD *)v158 + 1) = *(_WORD *)(a6 + 14);
        *((_DWORD *)v158 + 1) = *(_DWORD *)(a6 + 16);
        LOWORD(v32) = *(_WORD *)(a6 + 20);
      }
      else
      {
        if (v21 == 2)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v33 = mach_continuous_time();
            unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WCDMA CI,Mcc,%u,Mnc,%u,Lac,%u,Ci,%u,Psc,%u,NumMeasRes,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "LSM", 68, "GN_SUPL_PPDU_PduRequest_Out", *(unsigned __int16 *)(a6 + 12), *(unsigned __int16 *)(a6 + 14), *(_DWORD *)(a6 + 16), *(_DWORD *)(a6 + 20), *(unsigned __int16 *)(a6 + 28), *(unsigned __int8 *)(a6 + 30));
            LbsOsaTrace_WriteLog(0xCu, __str, v34, 5, 1);
          }
          unsigned __int16 v24 = v158;
          int v25 = 2;
        }
        else
        {
          if (v21 != 1)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v114 = mach_continuous_time();
              unsigned __int16 v115 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v114), "LSM", 87, "GN_SUPL_PPDU_PduRequest_Out", 770, *(_DWORD *)(a6 + 4));
              LbsOsaTrace_WriteLog(0xCu, __str, v115, 2, 1);
            }
            *((_DWORD *)v158 + 3) = 0;
            if (!a4) {
              goto LABEL_76;
            }
LABEL_40:
            if (!a4[1]) {
              goto LABEL_76;
            }
            unsigned __int16 v157 = gnssOsa_Calloc("GN_SUPL_PPDU_PduRequest_Out", 452, 1, 0x38uLL);
            if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v35 = mach_continuous_time();
              int v36 = (unsigned __int8 *)a4[1];
              unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPL AID REQ,Time,%u,Pos,%u,Iono,%u,Agps,%u,Aglon,%u,Aqzss,%u,Asbas,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "LSM", 68, "GN_SUPL_PPDU_PduRequest_Out", *v36, v36[1], v36[2], v36[3], v36[4], v36[5], v36[6]);
              LbsOsaTrace_WriteLog(0xCu, __str, v37, 5, 1);
            }
            if (!v157)
            {
              if (v158) {
                free(v158);
              }
              uint64_t v158 = 0;
LABEL_146:
              if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
                return 0;
              }
              goto LABEL_147;
            }
            uint64_t v38 = gnssOsa_Calloc("GN_SUPL_PPDU_PduRequest_Out", 464, 1, 8uLL);
            *((void *)v157 + 1) = v38;
            uint64_t v39 = v157;
            __int16 v40 = (void *)*((void *)v157 + 1);
            if (!v40)
            {
              if (v158)
              {
                free(v158);
                uint64_t v39 = v157;
                uint64_t v158 = 0;
                if (!v157) {
                  goto LABEL_145;
                }
              }
              else
              {
                uint64_t v158 = 0;
              }
              goto LABEL_144;
            }
            *__int16 v40 = *(void *)a4[1];
            if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v41 = mach_continuous_time();
              unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IonoReq,%u,RefPosReq,%u,RefTimeReq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "LSM", 68, "GN_SUPL_PPDU_PduRequest_Out", *(unsigned __int8 *)(*((void *)v157 + 1) + 2), *(unsigned __int8 *)(*((void *)v157 + 1) + 1), **((unsigned __int8 **)v157 + 1));
              LbsOsaTrace_WriteLog(0xCu, __str, v42, 5, 1);
            }
            uint64_t v43 = (unsigned char *)a4[1];
            if (v43[3] && a4[2])
            {
              int v44 = gnssOsa_Calloc("GN_SUPL_PPDU_PduRequest_Out", 484, 1, 0xD8uLL);
              *((void *)v157 + 2) = v44;
              __int16 v45 = v157;
              uint64_t v46 = *((void *)v157 + 2);
              if (!v46)
              {
                if (v158)
                {
                  free(v158);
                  __int16 v45 = v157;
                }
                uint64_t v158 = 0;
                unint64_t v132 = (void *)v45[1];
                if (v132)
                {
                  free(v132);
                  __int16 v45 = v157;
                }
                v45[1] = 0;
LABEL_143:
                uint64_t v39 = v157;
                if (!v157)
                {
LABEL_145:
                  unsigned __int16 v157 = 0;
                  goto LABEL_146;
                }
LABEL_144:
                free(v39);
                goto LABEL_145;
              }
              uint64_t v47 = a4[2];
              long long v48 = *(_OWORD *)(v47 + 16);
              *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
              *(_OWORD *)(v46 + 16) = v48;
              long long v49 = *(_OWORD *)(v47 + 32);
              long long v50 = *(_OWORD *)(v47 + 48);
              long long v51 = *(_OWORD *)(v47 + 80);
              *(_OWORD *)(v46 + 64) = *(_OWORD *)(v47 + 64);
              *(_OWORD *)(v46 + 80) = v51;
              *(_OWORD *)(v46 + 32) = v49;
              *(_OWORD *)(v46 + 48) = v50;
              long long v52 = *(_OWORD *)(v47 + 96);
              long long v53 = *(_OWORD *)(v47 + 112);
              long long v54 = *(_OWORD *)(v47 + 144);
              *(_OWORD *)(v46 + 128) = *(_OWORD *)(v47 + 128);
              *(_OWORD *)(v46 + 144) = v54;
              *(_OWORD *)(v46 + 96) = v52;
              *(_OWORD *)(v46 + 112) = v53;
              long long v55 = *(_OWORD *)(v47 + 160);
              long long v56 = *(_OWORD *)(v47 + 176);
              long long v57 = *(_OWORD *)(v47 + 192);
              *(void *)(v46 + 206) = *(void *)(v47 + 206);
              *(_OWORD *)(v46 + 176) = v56;
              *(_OWORD *)(v46 + 192) = v57;
              *(_OWORD *)(v46 + 160) = v55;
              uint64_t v43 = (unsigned char *)a4[1];
            }
            if (v43[4] && a4[3])
            {
              uint64_t v58 = gnssOsa_Calloc("GN_SUPL_PPDU_PduRequest_Out", 500, 1, 0xD8uLL);
              *((void *)v157 + 3) = v58;
              double v59 = v157;
              uint64_t v60 = *((void *)v157 + 3);
              if (!v60)
              {
                if (v158)
                {
                  free(v158);
                  double v59 = v157;
                }
                uint64_t v158 = 0;
                char v133 = (void *)v59[2];
                if (v133)
                {
                  free(v133);
                  double v59 = v157;
                }
                unsigned __int16 v59[2] = 0;
                goto LABEL_140;
              }
              uint64_t v61 = a4[3];
              long long v62 = *(_OWORD *)(v61 + 16);
              *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
              *(_OWORD *)(v60 + 16) = v62;
              long long v63 = *(_OWORD *)(v61 + 32);
              long long v64 = *(_OWORD *)(v61 + 48);
              long long v65 = *(_OWORD *)(v61 + 80);
              *(_OWORD *)(v60 + 64) = *(_OWORD *)(v61 + 64);
              *(_OWORD *)(v60 + 80) = v65;
              *(_OWORD *)(v60 + 32) = v63;
              *(_OWORD *)(v60 + 48) = v64;
              long long v66 = *(_OWORD *)(v61 + 96);
              long long v67 = *(_OWORD *)(v61 + 112);
              long long v68 = *(_OWORD *)(v61 + 144);
              *(_OWORD *)(v60 + 128) = *(_OWORD *)(v61 + 128);
              *(_OWORD *)(v60 + 144) = v68;
              *(_OWORD *)(v60 + 96) = v66;
              *(_OWORD *)(v60 + 112) = v67;
              long long v69 = *(_OWORD *)(v61 + 160);
              long long v70 = *(_OWORD *)(v61 + 176);
              long long v71 = *(_OWORD *)(v61 + 192);
              *(void *)(v60 + 206) = *(void *)(v61 + 206);
              *(_OWORD *)(v60 + 176) = v70;
              *(_OWORD *)(v60 + 192) = v71;
              *(_OWORD *)(v60 + 160) = v69;
              uint64_t v43 = (unsigned char *)a4[1];
            }
            if (v43[5] && a4[4])
            {
              int v72 = gnssOsa_Calloc("GN_SUPL_PPDU_PduRequest_Out", 517, 1, 0xD8uLL);
              *((void *)v157 + 4) = v72;
              long long v73 = v157;
              uint64_t v74 = *((void *)v157 + 4);
              if (!v74)
              {
                if (v158)
                {
                  free(v158);
                  long long v73 = v157;
                }
                uint64_t v158 = 0;
                unsigned int v134 = (void *)v73[2];
                if (v134)
                {
                  free(v134);
                  long long v73 = v157;
                }
                v73[2] = 0;
                uint64_t v135 = v157;
                unsigned __int16 v136 = (void *)*((void *)v157 + 3);
                if (v136)
                {
                  free(v136);
                  uint64_t v135 = v157;
                }
                v135[3] = 0;
                goto LABEL_140;
              }
              uint64_t v75 = a4[4];
              long long v76 = *(_OWORD *)(v75 + 16);
              *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
              *(_OWORD *)(v74 + 16) = v76;
              long long v77 = *(_OWORD *)(v75 + 32);
              long long v78 = *(_OWORD *)(v75 + 48);
              long long v79 = *(_OWORD *)(v75 + 80);
              *(_OWORD *)(v74 + 64) = *(_OWORD *)(v75 + 64);
              *(_OWORD *)(v74 + 80) = v79;
              *(_OWORD *)(v74 + 32) = v77;
              *(_OWORD *)(v74 + 48) = v78;
              long long v80 = *(_OWORD *)(v75 + 96);
              long long v81 = *(_OWORD *)(v75 + 112);
              long long v82 = *(_OWORD *)(v75 + 144);
              *(_OWORD *)(v74 + 128) = *(_OWORD *)(v75 + 128);
              *(_OWORD *)(v74 + 144) = v82;
              *(_OWORD *)(v74 + 96) = v80;
              *(_OWORD *)(v74 + 112) = v81;
              long long v83 = *(_OWORD *)(v75 + 160);
              long long v84 = *(_OWORD *)(v75 + 176);
              long long v85 = *(_OWORD *)(v75 + 192);
              *(void *)(v74 + 206) = *(void *)(v75 + 206);
              *(_OWORD *)(v74 + 176) = v84;
              *(_OWORD *)(v74 + 192) = v85;
              *(_OWORD *)(v74 + 160) = v83;
              uint64_t v43 = (unsigned char *)a4[1];
            }
            if (!v43[6] || !a4[5])
            {
LABEL_63:
              if (v43[7] && a4[6])
              {
                unint64_t v100 = gnssOsa_Calloc("GN_SUPL_PPDU_PduRequest_Out", 555, 1, 0xD8uLL);
                *((void *)v157 + 6) = v100;
                uint64_t v101 = v157;
                uint64_t v102 = *((void *)v157 + 6);
                if (v102)
                {
                  uint64_t v103 = a4[6];
                  long long v104 = *(_OWORD *)(v103 + 16);
                  *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
                  *(_OWORD *)(v102 + 16) = v104;
                  long long v105 = *(_OWORD *)(v103 + 32);
                  long long v106 = *(_OWORD *)(v103 + 48);
                  long long v107 = *(_OWORD *)(v103 + 80);
                  *(_OWORD *)(v102 + 64) = *(_OWORD *)(v103 + 64);
                  *(_OWORD *)(v102 + 80) = v107;
                  *(_OWORD *)(v102 + 32) = v105;
                  *(_OWORD *)(v102 + 48) = v106;
                  long long v108 = *(_OWORD *)(v103 + 96);
                  long long v109 = *(_OWORD *)(v103 + 112);
                  long long v110 = *(_OWORD *)(v103 + 144);
                  *(_OWORD *)(v102 + 128) = *(_OWORD *)(v103 + 128);
                  *(_OWORD *)(v102 + 144) = v110;
                  *(_OWORD *)(v102 + 96) = v108;
                  *(_OWORD *)(v102 + 112) = v109;
                  long long v111 = *(_OWORD *)(v103 + 160);
                  long long v112 = *(_OWORD *)(v103 + 176);
                  long long v113 = *(_OWORD *)(v103 + 192);
                  *(void *)(v102 + 206) = *(void *)(v103 + 206);
                  *(_OWORD *)(v102 + 176) = v112;
                  *(_OWORD *)(v102 + 192) = v113;
                  *(_OWORD *)(v102 + 160) = v111;
                  goto LABEL_76;
                }
                if (v158)
                {
                  free(v158);
                  uint64_t v101 = v157;
                }
                uint64_t v158 = 0;
                unint64_t v142 = (void *)v101[2];
                if (v142)
                {
                  free(v142);
                  uint64_t v101 = v157;
                }
                v101[2] = 0;
                uint64_t v143 = v157;
                long long v144 = (void *)*((void *)v157 + 3);
                if (v144)
                {
                  free(v144);
                  uint64_t v143 = v157;
                }
                v143[3] = 0;
                unint64_t v145 = v157;
                uint64_t v146 = (void *)*((void *)v157 + 4);
                if (v146)
                {
                  free(v146);
                  unint64_t v145 = v157;
                }
                v145[4] = 0;
                unsigned __int16 v147 = v157;
                uint64_t v148 = (void *)*((void *)v157 + 5);
                if (v148)
                {
                  free(v148);
                  unsigned __int16 v147 = v157;
                }
                v147[5] = 0;
                goto LABEL_140;
              }
LABEL_76:
              if (v157)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v116 = mach_continuous_time();
                  unsigned __int16 v117 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:REQUEST_ASSIST_DATA_PDU =>PpduCB,SuplHandle,%u,PcolType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v116), "LSM", 73, "GN_SUPL_PPDU_PduRequest_Out", __s, v156);
                  LbsOsaTrace_WriteLog(0xCu, __str, v117, 4, 1);
                }
                GNS_ExecutePpduCallback(3, 96, (uint64_t)&__s);
                if (v158)
                {
                  free(v158);
                  uint64_t v158 = 0;
                }
                uint64_t v118 = v157;
                if (v157)
                {
                  uint64_t v119 = (void *)*((void *)v157 + 3);
                  if (v119)
                  {
                    free(v119);
                    uint64_t v118 = v157;
                  }
                  v118[3] = 0;
                  unsigned int v120 = v157;
                  unint64_t v121 = (void *)*((void *)v157 + 2);
                  if (v121)
                  {
                    free(v121);
                    unsigned int v120 = v157;
                  }
                  v120[2] = 0;
                  unsigned __int16 v122 = v157;
                  int v123 = (void *)*((void *)v157 + 4);
                  if (v123)
                  {
                    free(v123);
                    unsigned __int16 v122 = v157;
                  }
                  v122[4] = 0;
                  char v124 = v157;
                  uint64_t v125 = (void *)*((void *)v157 + 5);
                  if (v125)
                  {
                    free(v125);
                    char v124 = v157;
                  }
                  v124[5] = 0;
                  unsigned __int16 v126 = v157;
                  unint64_t v127 = (void *)*((void *)v157 + 6);
                  if (v127)
                  {
                    free(v127);
                    unsigned __int16 v126 = v157;
                  }
                  v126[6] = 0;
                  uint64_t v128 = v157;
                  unsigned __int16 v129 = (void *)*((void *)v157 + 1);
                  if (v129)
                  {
                    free(v129);
                    uint64_t v128 = v157;
                  }
                  v128[1] = 0;
                  if (v157) {
                    free(v157);
                  }
                }
                goto LABEL_15;
              }
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v130 = mach_continuous_time();
                unsigned __int16 v131 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AidReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v130), "LSM", 87, "GN_SUPL_PPDU_PduRequest_Out", 513);
                LbsOsaTrace_WriteLog(0xCu, __str, v131, 2, 1);
              }
              if (v158) {
                free(v158);
              }
              uint64_t v158 = 0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
                goto LABEL_147;
              }
              return 0;
            }
            uint64_t v86 = gnssOsa_Calloc("GN_SUPL_PPDU_PduRequest_Out", 535, 1, 0xD8uLL);
            *((void *)v157 + 5) = v86;
            unsigned __int16 v87 = v157;
            uint64_t v88 = *((void *)v157 + 5);
            if (v88)
            {
              uint64_t v89 = a4[5];
              long long v90 = *(_OWORD *)(v89 + 16);
              *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
              *(_OWORD *)(v88 + 16) = v90;
              long long v91 = *(_OWORD *)(v89 + 32);
              long long v92 = *(_OWORD *)(v89 + 48);
              long long v93 = *(_OWORD *)(v89 + 80);
              *(_OWORD *)(v88 + 64) = *(_OWORD *)(v89 + 64);
              *(_OWORD *)(v88 + 80) = v93;
              *(_OWORD *)(v88 + 32) = v91;
              *(_OWORD *)(v88 + 48) = v92;
              long long v94 = *(_OWORD *)(v89 + 96);
              long long v95 = *(_OWORD *)(v89 + 112);
              long long v96 = *(_OWORD *)(v89 + 144);
              *(_OWORD *)(v88 + 128) = *(_OWORD *)(v89 + 128);
              *(_OWORD *)(v88 + 144) = v96;
              *(_OWORD *)(v88 + 96) = v94;
              *(_OWORD *)(v88 + 112) = v95;
              long long v97 = *(_OWORD *)(v89 + 160);
              long long v98 = *(_OWORD *)(v89 + 176);
              long long v99 = *(_OWORD *)(v89 + 192);
              *(void *)(v88 + 206) = *(void *)(v89 + 206);
              *(_OWORD *)(v88 + 176) = v98;
              *(_OWORD *)(v88 + 192) = v99;
              *(_OWORD *)(v88 + 160) = v97;
              uint64_t v43 = (unsigned char *)a4[1];
              goto LABEL_63;
            }
            if (v158)
            {
              free(v158);
              unsigned __int16 v87 = v157;
            }
            uint64_t v158 = 0;
            uint64_t v137 = (void *)v87[2];
            if (v137)
            {
              free(v137);
              unsigned __int16 v87 = v157;
            }
            v87[2] = 0;
            unsigned __int16 v138 = v157;
            uint64_t v139 = (void *)*((void *)v157 + 3);
            if (v139)
            {
              free(v139);
              unsigned __int16 v138 = v157;
            }
            v138[3] = 0;
            unsigned __int16 v140 = v157;
            uint64_t v141 = (void *)*((void *)v157 + 4);
            if (v141)
            {
              free(v141);
              unsigned __int16 v140 = v157;
            }
            v140[4] = 0;
LABEL_140:
            unsigned __int16 v149 = v157;
            uint64_t v150 = (void *)*((void *)v157 + 1);
            if (v150)
            {
              free(v150);
              unsigned __int16 v149 = v157;
            }
            v149[1] = 0;
            goto LABEL_143;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v22 = mach_continuous_time();
            unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GSM CI,Mcc,%u,Mnc,%u,Lac,%u,Ci,%u,Ta,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 68, "GN_SUPL_PPDU_PduRequest_Out", *(unsigned __int16 *)(a6 + 12), *(unsigned __int16 *)(a6 + 14), *(_DWORD *)(a6 + 16), *(_DWORD *)(a6 + 20), *(unsigned __int16 *)(a6 + 24));
            LbsOsaTrace_WriteLog(0xCu, __str, v23, 5, 1);
          }
          unsigned __int16 v24 = v158;
          int v25 = 3;
        }
        v24[3] = v25;
        *(_WORD *)uint64_t v158 = *(_WORD *)(a6 + 12);
        *((_WORD *)v158 + 1) = *(_WORD *)(a6 + 14);
        *((_DWORD *)v158 + 1) = *(_DWORD *)(a6 + 20);
        int v32 = *(_DWORD *)(a6 + 16);
      }
      *((_WORD *)v158 + 4) = v32;
    }
    if (!a4) {
      goto LABEL_76;
    }
    goto LABEL_40;
  }
  if (a3 != 1)
  {
    uint64_t v19 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PDUType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "LSM", 87, "GN_SUPL_PPDU_PduRequest_Out", 515, a3);
      LbsOsaTrace_WriteLog(0xCu, __str, v27, 2, 1);
      uint64_t v19 = 0;
    }
    goto LABEL_27;
  }
  memset_s(&__s, 0x60uLL, 0, 0x60uLL);
  int v156 = a2;
  int __s = a1;
  int v155 = 1;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:REQUEST_CAPABILITIES_PDU =>PpduCB,SuplHandle,%u,PcolType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "GN_SUPL_PPDU_PduRequest_Out", __s, v156);
    LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
  }
  GNS_ExecutePpduCallback(2, 72, (uint64_t)&__s);
LABEL_15:
  uint64_t v19 = 1;
LABEL_27:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v28 = mach_continuous_time();
    unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "LSM", 73, "GN_SUPL_PPDU_PduRequest_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v29, 4, 1);
  }
  return v19;
}

BOOL GN_SUPL_PPDU_Config_Out(const void *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GN_SUPL_PPDU_Config_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (a1)
  {
    memset_s(__s, 0x60uLL, 0, 0x60uLL);
    memcpy_s("GN_SUPL_PPDU_Config_Out", 651, __s, 4u, a1, 4uLL);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:PPDU_CONFIG =>PpduCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GN_SUPL_PPDU_Config_Out");
      LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
    }
    GNS_ExecutePpduCallback(0, 4, (uint64_t)__s);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v6, "LSM", 73, "GN_SUPL_PPDU_Config_Out");
LABEL_12:
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PpduConfig\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "GN_SUPL_PPDU_Config_Out", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v10, "LSM", 73, "GN_SUPL_PPDU_Config_Out");
      goto LABEL_12;
    }
  }
  return a1 != 0;
}

BOOL GNS_PpduInitialize(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_PpduInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("GNS_PpduInitialize", 674, 1, 0x18uLL);
  unsigned __int16 v5 = v4;
  if (v4)
  {
    v4[3] = 5;
    *((void *)v4 + 2) = a1;
    AgpsSendFsmMsg(131, 131, 8635139, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_PpduInitialize");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
  }
  return v5 != 0;
}

uint64_t GNS_PpduEncodedPdu(int a1, int a2, int a3, int a4, int a5, size_t a6, void *a7, char a8)
{
  __int16 v10 = a6;
  uint64_t v31 = *MEMORY[0x263EF8340];
  size_t size = a6;
  __int16 __src = a7;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GNS_PpduEncodedPdu");
    LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
  }
  unsigned __int16 v18 = gnssOsa_Calloc("GNS_PpduEncodedPdu", 734, 1, 0x38uLL);
  if (!v18)
  {
    uint64_t v23 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return v23;
    }
    bzero(__str, 0x410uLL);
    unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v24, "LSM", 73, "GNS_PpduEncodedPdu");
LABEL_15:
    LbsOsaTrace_WriteLog(0xCu, __str, v25, 4, 1);
    return 0;
  }
  uint64_t v19 = v18;
  *((_DWORD *)v18 + 3) = a1;
  *((_DWORD *)v18 + 4) = a2;
  *((_DWORD *)v18 + 5) = a3;
  *((_DWORD *)v18 + 6) = a4;
  *((_DWORD *)v18 + 7) = a5;
  *((unsigned char *)v18 + 48) = a8;
  if (!v10 || !a7) {
    goto LABEL_8;
  }
  memcpy_s("GNS_PpduEncodedPdu", 750, v18 + 4, 0x10u, &size, 0x10uLL);
  unsigned __int16 v20 = gnssOsa_Calloc("GNS_PpduEncodedPdu", 751, 1, (unsigned __int16)size);
  v19[5] = v20;
  if (!v20)
  {
    free(v19);
    uint64_t v23 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return v23;
    }
    bzero(__str, 0x410uLL);
    unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v26, "LSM", 73, "GNS_PpduEncodedPdu");
    goto LABEL_15;
  }
  memcpy_s("GNS_PpduEncodedPdu", 760, v20, (unsigned __int16)size, __src, (unsigned __int16)size);
LABEL_8:
  AgpsSendFsmMsg(131, 131, 8630787, v19);
  if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v21 = mach_continuous_time();
  unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "GNS_PpduEncodedPdu");
  uint64_t v23 = 1;
  LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
  return v23;
}

uint64_t NK_Add_SV_ARes_PN(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a4 + 140))
  {
    int v6 = a6;
    unsigned int v125 = 0;
    double v10 = 0.0;
    BOOL v11 = *(unsigned __int8 *)(a5 + 2809) >= 4u && a2 == 0;
    if (!v11
      && ((*(_DWORD *)(a4 + 20) - 6) > 2 || (int)result > 4 || *(unsigned __int8 *)(a5 + 2808) <= 3u))
    {
      if (*(_DWORD *)(a5 + 968)) {
        double v10 = 16.0;
      }
      else {
        double v10 = 4.0;
      }
    }
    unsigned __int16 v12 = (unsigned __int8 *)(a5 + 13963);
    double v13 = (unsigned __int8 *)(a5 + 8387);
    if (*(unsigned char *)(a4 + 233) && *(int *)(a5 + 12) <= 7)
    {
      unsigned int v120 = (unsigned __int8 *)(a5 + 8387);
      unint64_t v121 = (unsigned __int8 *)(a5 + 13963);
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      unsigned __int16 v122 = (double *)(a4 + 344);
      uint64_t v17 = a5 + 20032;
      uint64_t v18 = 76;
      do
      {
        if (*(_WORD *)(a3 + 2 * v15 + 2768)
          && *(unsigned char *)(a5 + v15 + 2960)
          && *(double *)(a5 + 6848 + 8 * v15) < 10000.0)
        {
          double v19 = (double)*(__int16 *)(a3 + 2 * v15 + 2768);
          double v20 = v19 * v19;
          NK_Obs_Equ_SV((void *)1, 0, *(unsigned __int8 *)(a3 + v18), v17, (uint64_t)v126, *(double *)(a5 + 656));
          LODWORD(v128[0]) = 0;
          if (v19 * v19 > 0.0)
          {
            rnk1_core(v122, 0, v19 * v19, v126, (int *)v128);
            if (LODWORD(v128[0])) {
              ++v14;
            }
          }
          char v16 = 1;
          *(unsigned char *)(a4 + 174) = 1;
          *(double *)(a4 + 224) = v20;
          EvLog_v("Q-Boost 5 %g  Code_PPC %d %g", sqrt(v20), v15, v19);
        }
        ++v15;
        v17 += 56;
        v18 += 4;
      }
      while (v15 != 48);
      unsigned int v125 = v14;
      char v21 = v16 & 1;
      double v13 = v120;
      unsigned __int16 v12 = v121;
      int v6 = a6;
    }
    else
    {
      char v21 = 0;
    }
    unint64_t v22 = 0;
    unsigned int v23 = 0;
    double v24 = *(double *)(a5 + 24496);
    double v25 = *(double *)(a5 + 24504);
    unint64_t v26 = (double *)(a5 + 24496);
    double v27 = *(double *)(a5 + 24512);
    memset(v128, 0, sizeof(v128));
    memset(v127, 0, sizeof(v127));
    do
    {
      uint64_t v28 = *(char *)(a5 + 31345 + v22);
      if (*(unsigned char *)(a5 + v28 + 2960))
      {
        *((void *)v128 + v23) = *(void *)(a5 + 8 * v28 + 4832);
        *((_DWORD *)v127 + v23) = v23;
        ++v23;
      }
      if (v22 > 0x2E) {
        break;
      }
      ++v22;
    }
    while (v23 < 9);
    if (v24 >= v25) {
      double v24 = v25;
    }
    if (v24 >= v27) {
      double v29 = v27;
    }
    else {
      double v29 = v24;
    }
    double v30 = 0.0;
    double v31 = 0.0;
    if (v23 < 5) {
      goto LABEL_45;
    }
    VecSortIndexAscR8((uint64_t)v128, v23, (int *)v127, 0);
    unsigned int v32 = v23 >> 1;
    uint64_t v33 = *((unsigned int *)v127 + (v23 >> 1) - 1);
    double v34 = *((double *)v128 + *((unsigned int *)v127 + (v23 >> 1) + 1));
    double v31 = (v23 & 1) != 0
        ? *((double *)v128 + *((unsigned int *)v127 + v32))
        : (*((double *)v128 + *((unsigned int *)v127 + v32)) + v34) * 0.5;
    if ((v124 = v31, double v35 = *((double *)v128 + v33), v34 * v35 >= 0.0)
      && (double v36 = fabs(v31), vabdd_f64(v34, v35) <= v36 * 0.5)
      && ((double v37 = *((double *)v128 + *((unsigned int *)v127 + v32 - 2)),
           double v38 = *((double *)v128 + *((unsigned int *)v127 + v32 + 2)),
           double v39 = vabdd_f64(v37, v38),
           v37 * v38 >= 0.0)
        ? (BOOL v40 = v39 <= v36)
        : (BOOL v40 = 0),
          v40))
    {
      char v47 = 0;
      double v118 = (v38 + v34 + v31 + v35 + v37) / 5.0;
      double v44 = ((v35 - v118) * (v35 - v118)
           + (v37 - v118) * (v37 - v118)
           + (v31 - v118) * (v31 - v118)
           + (v34 - v118) * (v34 - v118)
           + (v38 - v118) * (v38 - v118))
          / 5.0;
      double v45 = v29 + v44;
    }
    else
    {
LABEL_45:
      uint64_t v41 = 0;
      uint64_t v42 = a5 + 6848;
      do
      {
        if (*(unsigned char *)(v42 + v41 - 3888))
        {
          double v43 = 1.0 / *(double *)(v42 + 8 * v41);
          double v31 = v31 + *(double *)(a5 + 4832 + 8 * v41) * v43;
          double v30 = v30 + v43;
        }
        ++v41;
      }
      while (v41 != 48);
      double v124 = v31;
      *(double *)uint64_t v128 = v30;
      *(void *)&v127[0] = 0;
      double v44 = 0.0;
      if (R8_EQ((const double *)v128, (const double *)v127))
      {
        double v45 = 0.0;
      }
      else
      {
        *(double *)&unint64_t v46 = 1.0 / v30;
        double v31 = v31 * (1.0 / v30);
        double v124 = v31;
        LOBYTE(v46) = *(unsigned char *)(a5 + 2811);
        double v45 = v29 + v30 / (double)v46;
      }
      char v47 = 1;
    }
    *(void *)&v128[0] = 0;
    size_t result = R8_EQ(&v124, (const double *)v128);
    if ((result & 1) == 0)
    {
      uint64_t v52 = 0;
      unsigned int v53 = 0;
      unsigned int v54 = 0;
      uint64_t v55 = a5 + 6848;
      do
      {
        if (*(unsigned char *)(v55 + v52 - 3888))
        {
          if ((*(double *)(a5 + 4832 + 8 * v52) - v31) * (*(double *)(a5 + 4832 + 8 * v52) - v31) <= *(double *)(v55 + 8 * v52) * 25.0) {
            ++v54;
          }
          else {
            ++v53;
          }
        }
        ++v52;
      }
      while (v52 != 48);
      double v56 = 0.0;
      if (v53 >= v54 || v53 && v54 < 3)
      {
        int v57 = 0;
        goto LABEL_86;
      }
    }
    if (v31 != 0.0)
    {
      double v48 = fabs(v31);
      BOOL v49 = v48 >= 149896.229 || *(_DWORD *)(a5 + 968) == 0;
      double v50 = v31 * v31;
      if (v49 && v50 >= v10 * v45)
      {
        int v57 = 1;
LABEL_80:
        double v58 = -(v45 - v31 * v31);
        if (v58 > 0.0)
        {
          char v21 = 1;
          int v59 = v57;
          Apply_Q_Boost(-(v45 - v31 * v31), 0, 1u, (double *)(a4 + 344), &v125, (double *)v128);
          Apply_Q_Boost(-(v45 - v31 * v31), 1u, 1u, (double *)(a4 + 344), &v125, (double *)v128);
          Apply_Q_Boost(-(v45 - v31 * v31), 2u, 1u, (double *)(a4 + 344), &v125, (double *)v128);
          if (v58 >= 10000.0) {
            int v59 = 1;
          }
          *(unsigned char *)(a4 + 169) = 1;
          *(double *)(a4 + 184) = v58;
          size_t result = (uint64_t)EvLog_v("Q-Boost 0 %g  ClkB %g  Vars %g %g %g %g %g", sqrt(v58), v31, sqrt(v29), sqrt(*(double *)(a5 + 24496)), sqrt(*(double *)(a5 + 24504)), sqrt(*(double *)(a5 + 24512)), sqrt(v45));
          int v57 = v59;
          goto LABEL_85;
        }
        goto LABEL_84;
      }
      if ((v47 & 1) == 0
        && ((v6 & 0xFFFFFFFE) != 6 || v50 >= v44 * 25.0 || (*(_DWORD *)(a4 + 20) - 4) <= 4))
      {
        int v57 = 0;
        if (v48 < 3.0 || v50 < v45) {
          goto LABEL_85;
        }
        goto LABEL_80;
      }
    }
LABEL_84:
    int v57 = 0;
LABEL_85:
    double v56 = v31;
LABEL_86:
    char v123 = v21;
    if (*(unsigned __int8 *)(a5 + 2811) >= 3u)
    {
      uint64_t v60 = 0;
      int v61 = 0;
      unsigned int v62 = 0;
      unsigned int v63 = 0;
      unsigned int v64 = -1;
      double v65 = -9999.0;
      uint64_t v66 = 4832;
      do
      {
        if (*(unsigned char *)(a5 + v60 + 2960) && *(double *)(a5 + v66 + 2016) < 10000.0)
        {
          double v67 = (*(double *)(a5 + v66) - v56) * (*(double *)(a5 + v66) - v56) / *(double *)(a5 + v66 + 2400);
          if (v67 <= v10 || (++v62, v61 += *(unsigned __int8 *)(a5 + v60 + 1026), v67 <= v65)) {
            double v67 = v65;
          }
          else {
            unsigned int v64 = v60;
          }
          ++v63;
          double v65 = v67;
        }
        ++v60;
        v66 += 8;
      }
      while (v60 != 48);
      if (*v12 + *v13 >= 3)
      {
        uint64_t v68 = 0;
        int v69 = 0;
        unsigned int v70 = 0;
        unsigned int v71 = 0;
        unsigned int v72 = -1;
        double v73 = -9999.0;
        uint64_t v74 = 12808;
        uint64_t v75 = 10408;
        uint64_t v76 = 18384;
        uint64_t v77 = 15984;
        uint64_t v78 = 14112;
        uint64_t v79 = 8536;
        while (1)
        {
          int v80 = *(unsigned __int8 *)(a5 + v78);
          if (*(unsigned char *)(a5 + v79)) {
            goto LABEL_101;
          }
          if (*(unsigned char *)(a5 + v78)) {
            break;
          }
LABEL_112:
          ++v68;
          v74 += 8;
          v75 += 8;
          v76 += 8;
          v77 += 8;
          ++v79;
          ++v78;
          if (v68 == 48)
          {
            if ((v64 & 0x80000000) != 0) {
              goto LABEL_126;
            }
            goto LABEL_116;
          }
        }
        int v80 = 1;
LABEL_101:
        BOOL v81 = v80 == 0;
        if (v80) {
          uint64_t v82 = v77;
        }
        else {
          uint64_t v82 = v75;
        }
        double v83 = *(double *)(a5 + v82);
        if (v81) {
          uint64_t v84 = v74;
        }
        else {
          uint64_t v84 = v76;
        }
        double v85 = v83 * v83 / *(double *)(a5 + v84);
        if (v85 <= v10 || (++v70, v69 += *(unsigned __int8 *)(a5 + v68 + 1026), v85 <= v73)) {
          double v85 = v73;
        }
        else {
          unsigned int v72 = v68;
        }
        ++v71;
        double v73 = v85;
        goto LABEL_112;
      }
      unsigned int v71 = 0;
      unsigned int v70 = 0;
      int v69 = 0;
      unsigned int v72 = -1;
      if ((v64 & 0x80000000) != 0) {
        goto LABEL_126;
      }
LABEL_116:
      if (v63 >= 3 && *(_DWORD *)(a5 + 968) != 1 && (v62 > 2 || v61 || *(unsigned char *)(a4 + 233) || *(int *)(a5 + 12) <= 7))
      {
        uint64_t v86 = a5 + 8 * v64;
        double v87 = *(double *)(v86 + 4832);
        double v88 = *(double *)(v86 + 7232);
        double v89 = 0.0816326531;
        if (*(unsigned char *)(a4 + 233)) {
          double v89 = 1.0;
        }
        double v90 = -(v88 - v87 * v87 * v89);
        double v91 = v90 * 0.5;
        if (v90 * 0.5 > 0.0)
        {
          Apply_Q_Boost(v90 * 0.5, 0, 1u, (double *)(a4 + 344), &v125, (double *)v128);
          Apply_Q_Boost(v91, 1u, 1u, (double *)(a4 + 344), &v125, (double *)v128);
          Apply_Q_Boost(v91, 2u, 1u, (double *)(a4 + 344), &v125, (double *)v128);
          Apply_Q_Boost(v91, 5u, 3u, (double *)(a4 + 344), &v125, (double *)v128);
          Apply_Q_Boost(v91 + v91, 4u, 1u, (double *)(a4 + 344), &v125, (double *)v128);
          char v123 = 1;
          *(unsigned char *)(a4 + 170) = 1;
          *(double *)(a4 + 192) = v91;
          size_t result = (uint64_t)EvLog_v("Q-Boost 1 %g  PR.Res %d %g %g  tested %d  fail %d %d", sqrt(v91), v64, v87, sqrt(v88), v63, v62, v61);
          int v57 = 1;
        }
      }
LABEL_126:
      if ((v72 & 0x80000000) != 0)
      {
        unint64_t v26 = (double *)(a5 + 24496);
      }
      else
      {
        unint64_t v26 = (double *)(a5 + 24496);
        if (v71 >= 3
          && *(_DWORD *)(a5 + 968) != 1
          && (v70 > 2 || v69 || *(unsigned char *)(a4 + 233) || *(int *)(a5 + 12) <= 7))
        {
          uint64_t v92 = a5 + 13960 + 8 * v72;
          long long v93 = (double *)(v92 + 2024);
          long long v94 = (double *)(v92 + 4424);
          uint64_t v95 = a5 + 8 * v72;
          long long v96 = (double *)(v95 + 10408);
          long long v97 = (double *)(v95 + 12808);
          if (*(unsigned char *)(a5 + 13960 + v72 + 152))
          {
            long long v98 = v93;
          }
          else
          {
            long long v94 = v97;
            long long v98 = v96;
          }
          uint64_t v99 = *(unsigned char *)(a5 + 13960 + v72 + 152) ? 82 : 79;
          double v100 = *v98;
          double v101 = *v94;
          if (*(unsigned char *)(a4 + 233) || !*(_DWORD *)(a4 + 11048)) {
            double v102 = 1.0;
          }
          else {
            double v102 = 0.0816326531;
          }
          double v103 = -(v101 - v100 * v100 * v102);
          double v104 = v103 * 0.5;
          if (v103 * 0.5 > 0.0)
          {
            Apply_Q_Boost(v103 * 0.5, 3u, 1u, (double *)(a4 + 344), &v125, (double *)v128);
            Apply_Q_Boost(v104, 8u, 3u, (double *)(a4 + 344), &v125, (double *)v128);
            *(unsigned char *)(a4 + 171) = 1;
            *(double *)(a4 + 200) = v104;
            size_t result = (uint64_t)EvLog_v("Q-Boost 2 %g  D%c.Res %d %g %g  tested %d  fail %d %d", sqrt(v104), v99, v72, v100, sqrt(v101), v71, v70, v69);
            if (!v125)
            {
LABEL_151:
              *(_DWORD *)(a4 + 144) = 0;
LABEL_152:
              ud2var(a4 + 344, 0xBu, 1, 0xBu, v26);
              Comp_NEDvar_UDU(a4 + 344, 0xBu, 5, (double (*)[3])(a5 + 832), (double *)(a5 + 24536));
              size_t result = Comp_NEDvar_UDU(a4 + 344, 0xBu, 8, (double (*)[3])(a5 + 832), (double *)(a5 + 24560));
LABEL_155:
              uint64_t v106 = 0;
              long long v107 = (const double *)(a5 + 2856);
              int8x16_t v108 = (int8x16_t)vld1q_dup_f64(v107);
              float64x2_t v109 = (float64x2_t)vextq_s8(v108, v108, 8uLL);
              do
              {
                *(float64x2_t *)(a5 + 7216 + v106) = vmulq_f64(v109, *(float64x2_t *)(a5 + 7216 + v106));
                v106 -= 16;
              }
              while (v106 != -384);
              uint64_t v110 = 0;
              long long v111 = (const double *)(a5 + 8432);
              int8x16_t v112 = (int8x16_t)vld1q_dup_f64(v111);
              float64x2_t v113 = (float64x2_t)vextq_s8(v112, v112, 8uLL);
              do
              {
                *(float64x2_t *)(a5 + 12792 + v110) = vmulq_f64(v113, *(float64x2_t *)(a5 + 12792 + v110));
                v110 -= 16;
              }
              while (v110 != -384);
              uint64_t v114 = 0;
              unsigned __int16 v115 = (const double *)(a5 + 14008);
              int8x16_t v116 = (int8x16_t)vld1q_dup_f64(v115);
              float64x2_t v117 = (float64x2_t)vextq_s8(v116, v116, 8uLL);
              do
              {
                *(float64x2_t *)(a5 + 18368 + v114) = vmulq_f64(v117, *(float64x2_t *)(a5 + 18368 + v114));
                v114 -= 16;
              }
              while (v114 != -384);
              if (*(_DWORD *)(a4 + 144) >= 4u)
              {
                *(_OWORD *)(a4 + 216) = 0u;
                *(_OWORD *)(a4 + 200) = 0u;
                *(_OWORD *)(a4 + 184) = 0u;
              }
              return result;
            }
            goto LABEL_148;
          }
        }
      }
    }
    if (!v125)
    {
      if ((v123 & 1) == 0)
      {
        unsigned int v105 = *(_DWORD *)(a4 + 144);
        if (v105 <= 0x5F5E0FF) {
          *(_DWORD *)(a4 + 144) = v105 + 1;
        }
        goto LABEL_155;
      }
      if (!v57) {
        goto LABEL_152;
      }
      goto LABEL_151;
    }
LABEL_148:
    *(unsigned char *)(a4 + 128) = 1;
    *(_DWORD *)(a4 + 132) = 22;
    *(_DWORD *)(a4 + 144) = 0;
    goto LABEL_155;
  }
  return result;
}

void NK_Add_SV_ARes_PN_ClkDrift(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a1 + 140)) {
    return;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  unsigned int v10 = 0;
  double v11 = *(double *)(a2 + 24520);
  double v12 = sqrt(v11) * 0.5;
  double v13 = 0.0;
  double v14 = -1.79769313e308;
  do
  {
    uint64_t v15 = *(char *)(a2 + 31345 + v6);
    if (*(unsigned char *)(a2 + v15 + 8536))
    {
      if (v10 > 2) {
        goto LABEL_17;
      }
    }
    else
    {
      if (*(unsigned char *)(a2 + v15 + 14112)) {
        BOOL v16 = v10 >= 3;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16) {
        goto LABEL_17;
      }
    }
    double v17 = *(double *)(a2 + 8 * v15 + 10408);
    ++v10;
    if (v17 < 0.0) {
      ++v8;
    }
    else {
      ++v9;
    }
    double v13 = v13 + v17;
    double v18 = fabs(v17);
    if (v18 > v12) {
      ++v7;
    }
    if (v18 > v14) {
      double v14 = v18;
    }
LABEL_17:
    ++v6;
  }
  while (v6 != 48);
  if (v9) {
    BOOL v19 = v8 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19 && v7)
  {
    double v20 = -(v11 - (v14 + v14) * (v14 + v14));
    if (v20 > 0.0)
    {
      uint64_t v30 = 0;
      memset(v29, 0, sizeof(v29));
      unsigned int v28 = 0;
      Apply_Q_Boost(v20, 3u, 1u, (double *)(a1 + 344), &v28, (double *)v29);
      if (v28)
      {
        *(_DWORD *)(a1 + 132) = 22;
        *(unsigned char *)(a1 + 128) = 1;
      }
      else
      {
        ud2var(a1 + 344, 0xBu, 1, 0xBu, (double *)(a2 + 24496));
        Comp_NEDvar_UDU(a1 + 344, 0xBu, 5, (double (*)[3])(a2 + 832), (double *)(a2 + 24536));
        Comp_NEDvar_UDU(a1 + 344, 0xBu, 8, (double (*)[3])(a2 + 832), (double *)(a2 + 24560));
      }
    }
    if (fabs(a3) > 0.2)
    {
      double v21 = v13 / (double)v10;
      if (fabs(v21) > v12)
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        *(double *)(a2 + 760) = *(double *)(a2 + 760) + v21 * -0.00000000333564095;
        uint64_t v24 = a2 + 8536;
        do
        {
          if (*(unsigned char *)(v24 + v23))
          {
            uint64_t v25 = v24 + v22;
            *(double *)(v25 + 1872) = *(double *)(v24 + v22 + 1872) - v21;
            *(double *)(v25 + 2640) = *(double *)(v24 + v22 + 2640) - v21;
          }
          if (*(unsigned char *)(a2 + 14112 + v23))
          {
            double v26 = v21 * *(double *)(a2 + 656);
            uint64_t v27 = v24 + v22;
            *(double *)(v27 + 7448) = *(double *)(v24 + v22 + 7448) - v26;
            *(double *)(v27 + 8216) = *(double *)(v24 + v22 + 8216) - v26;
          }
          ++v23;
          v22 += 8;
        }
        while (v23 != 48);
      }
    }
  }
}

uint64_t asn1PE_PosProtocolVersion3GPP(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_9:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 255, *a2);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 255, a2[1]);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 255, a2[2]);
  uint64_t v4 = v7;
  if (v7)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  return v4;
}

uint64_t asn1PE_PosProtocol_VER2(uint64_t a1, unsigned char *a2)
{
  v11[1] = *(int32x2_t *)MEMORY[0x263EF8340];
  uint64_t v4 = Asn1Coder::EncodeSequenceExtension(a1, 1, 1);
  if (a2[1]) {
    BOOL v5 = a2[3] == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 || (a2[2] ? (BOOL v6 = a2[4] == 0) : (BOOL v6 = 0), v6 || (v7 = v4, *a2) && !a2[5] || a2[7] && !a2[6]))
  {
    int v8 = *(_DWORD *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 12);
    uint64_t v7 = 1;
    LODWORD(v4) = 1;
  }
  else
  {
    v11[0] = 0;
    if (v4)
    {
      int v8 = *(_DWORD *)(a1 + 8);
      int v9 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      uint64_t v4 = Asn1Coder::EncodeOpenTypeFieldStart(a1, v11);
      if (v4)
      {
        uint64_t v7 = v4;
        int v8 = *(_DWORD *)(a1 + 8);
        int v9 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
        uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
        if (*(unsigned char *)(a1 + 16))
        {
          int v8 = *(_DWORD *)(a1 + 8);
          int v9 = *(_DWORD *)(a1 + 12);
          LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
        }
        else
        {
          Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[3]);
          uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
          if (*(unsigned char *)(a1 + 16))
          {
            int v8 = *(_DWORD *)(a1 + 8);
            int v9 = *(_DWORD *)(a1 + 12);
            LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
          }
          else
          {
            Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[4]);
            uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
            if (*(unsigned char *)(a1 + 16))
            {
              int v8 = *(_DWORD *)(a1 + 8);
              int v9 = *(_DWORD *)(a1 + 12);
              LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
            }
            else
            {
              Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[5]);
              uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
              if (*(unsigned char *)(a1 + 16))
              {
                int v8 = *(_DWORD *)(a1 + 8);
                int v9 = *(_DWORD *)(a1 + 12);
                LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
              }
              else
              {
                Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[6]);
                uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
                if (*(unsigned char *)(a1 + 16))
                {
                  int v8 = *(_DWORD *)(a1 + 8);
                  int v9 = *(_DWORD *)(a1 + 12);
                  LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
                }
                else
                {
                  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[7]);
                  uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
                  if (*(unsigned char *)(a1 + 16))
                  {
                    int v8 = *(_DWORD *)(a1 + 8);
                    int v9 = *(_DWORD *)(a1 + 12);
                    LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
                  }
                  else if (a2[3] && (uint64_t v4 = asn1PE_PosProtocolVersion3GPP(a1, a2 + 8), v4))
                  {
                    uint64_t v7 = v4;
                    int v8 = *(_DWORD *)(a1 + 8);
                    int v9 = *(_DWORD *)(a1 + 12);
                  }
                  else if (a2[4] || a2[5])
                  {
                    uint64_t v7 = 1;
                    *(unsigned char *)(a1 + 16) = 1;
                    SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
                    int v8 = *(_DWORD *)(a1 + 8);
                    int v9 = *(_DWORD *)(a1 + 12);
                    LODWORD(v4) = 1;
                  }
                  else if (a2[6] && (uint64_t v4 = asn1PE_PosProtocolVersion3GPP(a1, a2 + 11), v4))
                  {
                    uint64_t v7 = v4;
                    int v8 = *(_DWORD *)(a1 + 8);
                    int v9 = *(_DWORD *)(a1 + 12);
                  }
                  else
                  {
                    uint64_t v4 = Asn1Coder::EncodeOpenTypeFieldEnd(a1, v11);
                    uint64_t v7 = v4;
                    if (!v4) {
                      return v7;
                    }
                    int v8 = *(_DWORD *)(a1 + 8);
                    int v9 = *(_DWORD *)(a1 + 12);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  SuplAsn1Logger::TraceError(v4, v8, v9);
  return v7;
}

uint64_t asn1PD_Notification_VER2(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v14[0] = 0;
  int v15 = 0;
  uint64_t v4 = Asn1Coder::DecodeSequenceExtension(a1, (uint64_t)v14);
  int32x2_t v12 = 0;
  int v13 = 0;
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    Asn1Coder::DecodeOpenTypeFieldStart(a1, &v12);
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
      uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v6 = *(_DWORD *)(a1 + 8);
        int v7 = *(_DWORD *)(a1 + 12);
        LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
      }
      else
      {
        int v9 = BitFromBuffer;
        *(unsigned char *)(a2 + 65) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
        uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
        if (*(unsigned char *)(a1 + 16))
        {
          int v6 = *(_DWORD *)(a1 + 8);
          int v7 = *(_DWORD *)(a1 + 12);
          LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
        }
        else if (v9 && (uint64_t v4 = Asn1Coder::SkipSequenceExtension(a1), v4))
        {
          uint64_t v5 = v4;
          int v6 = *(_DWORD *)(a1 + 8);
          int v7 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          __int32 v11 = v12.i32[0];
          *(_DWORD *)(a1 + 8) = v13 + v12.i32[1];
          *(_DWORD *)(a1 + 12) = v11;
          uint64_t v4 = Asn1Coder::SkipSequenceExtensionAddition(a1, v14, 1u);
          uint64_t v5 = v4;
          if (!v4) {
            return v5;
          }
          int v6 = *(_DWORD *)(a1 + 8);
          int v7 = *(_DWORD *)(a1 + 12);
        }
      }
    }
  }
  SuplAsn1Logger::TraceError(v4, v6, v7);
  return v5;
}

void *EPGetPath(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 200;
  uint64_t v4 = *(unsigned __int8 **)(a1 + 200);
  int v6 = (const char *)*((void *)v4 + 2);
  if (v6) {
    int v7 = strnlen(v6, 0x400uLL);
  }
  else {
    int v7 = -1;
  }
  uint64_t v8 = v7;
  memset(v28, 0, sizeof(v28));
  long long v27 = 0u;
  *(_OWORD *)&__n[1] = 0u;
  __n[0] = v7;
  uint64_t v9 = *(void *)(a1 + 712);
  unint64_t v10 = v9 - 1;
  if (v9 != 1)
  {
    unint64_t v13 = 0;
    do
    {
      unsigned int v14 = *v4;
      if (v14 > 0x6F)
      {
        if (v14 - 112 >= 2)
        {
          if (v14 != 128 && v14 != 160) {
            continue;
          }
          goto LABEL_20;
        }
      }
      else
      {
        char v15 = v14 - 16;
        if (v14 - 16 > 0x30) {
          goto LABEL_25;
        }
        if (((1 << v15) & 0x1000000010003) != 0)
        {
          ++v13;
          uint64_t v16 = *(unsigned __int8 ***)(v5 + 8 * v13);
          uint64_t v4 = *v16;
          double v17 = (const char *)v16[1];
          if (v17) {
            char v18 = strnlen(v17, 0x400uLL);
          }
          else {
            char v18 = -1;
          }
          __n[v13] = v18 + 1;
          v8 += (v18 + 1);
          continue;
        }
        if (((1 << v15) & 0x300000000) == 0)
        {
LABEL_25:
          if (v14 != 96) {
            continue;
          }
          goto LABEL_20;
        }
      }
      ++v13;
      char v19 = CUCFGetNumOfDigits(**(void **)(v5 + 8 * v13) + 1);
      __n[v13] = v19 + 2;
      v8 += (v19 + 2);
LABEL_20:
      uint64_t v4 = (unsigned __int8 *)*((void *)v4 + 3);
    }
    while (v13 < v10);
  }
  __int32 v11 = gnssOsa_Calloc("posp_alloc", 18, 1, v8 + 1);
  if (!v11)
  {
    CUCFErrorHandler(a1, 1);
    return v11;
  }
  uint64_t v25 = a2;
  int32x2_t v12 = *(const void ***)(a1 + 200);
  memcpy_s("posp_memcpy", 29, v11, __n[0], v12[2], __n[0]);
  if (*(void *)(a1 + 712) != 1)
  {
    unint64_t v21 = 0;
    uint64_t v22 = (char *)v11;
    while (1)
    {
      unsigned int v23 = *(unsigned __int8 *)v12;
      if (v23 > 0x6F) {
        break;
      }
      char v24 = v23 - 16;
      if (v23 - 16 > 0x30) {
        goto LABEL_43;
      }
      if (((1 << v24) & 0x1000000010003) == 0)
      {
        if (((1 << v24) & 0x300000000) != 0)
        {
LABEL_39:
          v22 += __n[v21++];
          sprintf(v22, "[%llu]", **(void **)(v5 + 8 * v21) + 1);
        }
        else
        {
LABEL_43:
          if (v23 != 96) {
            goto LABEL_41;
          }
        }
        goto LABEL_40;
      }
      v22 += __n[v21++];
      int32x2_t v12 = **(const void ****)(v5 + 8 * v21);
      *uint64_t v22 = 46;
      memcpy_s("posp_memcpy", 29, v22 + 1, __n[v21] - 1, *(const void **)(*(void *)(v5 + 8 * v21) + 8), __n[v21] - 1);
LABEL_41:
      if (v21 >= *(void *)(a1 + 712) - 1) {
        goto LABEL_7;
      }
    }
    if (v23 - 112 < 2) {
      goto LABEL_39;
    }
    if (v23 != 128 && v23 != 160) {
      goto LABEL_41;
    }
LABEL_40:
    int32x2_t v12 = (const void **)v12[3];
    goto LABEL_41;
  }
LABEL_7:
  *((unsigned char *)v11 + v8) = 0;
  *uint64_t v25 = v8 + 1;
  return v11;
}

size_t CUCFErrorHandler(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  size_t result = LOGASN1Error((uint64_t)ErrorMessageArray[a2], 0);
  if (*(unsigned char *)(a1 + 196)) {
    longjmp((int *)(a1 + 4), a2);
  }
  return result;
}

void EPErrorHandler(uint64_t a1, int a2)
{
  v7[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = EPGetPath(a1, v7);
  LOGASN1Error((uint64_t)ErrorMessageArray[a2], (uint64_t)v4);
  if (v4) {
    free(v4);
  }
  *(_DWORD *)a1 = a2;
  uint64_t v5 = *(void (**)(uint64_t))(a1 + 736);
  if (v5) {
    v5(a1);
  }
  if ((a2 & 0xFFFFFFFE) != 0x12 && *(unsigned char *)(a1 + 196))
  {
    int v6 = *(void **)(a1 + 1112);
    if (v6)
    {
      free(v6);
      *(void *)(a1 + 1112) = 0;
    }
    longjmp((int *)(a1 + 4), a2);
  }
}

uint64_t rrl_init_bits_enc(void)
{
  uint64_t v0 = gnssOsa_Calloc("posp_alloc", 18, 1, 0xF2uLL);
  rrl_bits_enc_buf_ptr = (uint64_t)v0;
  if (v0)
  {
    rrl_bits_enc_buf_cur_ptr = (uint64_t)v0;
    rrl_bits_enc_buf_cur_offset = 0;
    rrl_bits_enc_length = 0;
    rrl_bits_enc_error = 0;
    return 1;
  }
  else
  {
    ms_report_exception(2, 3, 70, "rrl_init_bits_enc");
    return 0;
  }
}

uint64_t rrl_finish_bits_enc(unsigned __int8 **a1, unsigned int *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = (void *)rrl_bits_enc_buf_ptr;
  if (rrl_bits_enc_buf_ptr && (rrl_bits_enc_error & 1) == 0)
  {
    int v6 = (unsigned __int8 *)gnssOsa_Calloc("posp_alloc", 18, 1, rrl_bits_enc_length);
    *a1 = v6;
    if (v6)
    {
      memcpy_s("rrl_finish_bits_enc", 101, v6, rrl_bits_enc_length, (const void *)rrl_bits_enc_buf_ptr, rrl_bits_enc_length);
      *a2 = rrl_bits_enc_length;
      uint64_t v3 = 1;
    }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v4 = (void *)rrl_bits_enc_buf_ptr;
  }
  if (v4)
  {
    free(v4);
    rrl_bits_enc_buf_ptr = 0;
  }
  rrl_bits_enc_buf_cur_ptr = 0;
  rrl_bits_enc_buf_cur_offset = 0;
  rrl_bits_enc_length = 0;
  rrl_bits_enc_error = 0;
  return v3;
}

uint64_t rrl_bits_append(uint64_t result, unsigned int a2)
{
  if (rrl_bits_enc_buf_ptr && (rrl_bits_enc_error & 1) == 0)
  {
    if (result > 8
      || ((int v2 = rrl_bits_enc_length, v3 = rrl_bits_enc_buf_cur_offset, rrl_bits_enc_length == 242)
        ? (BOOL v4 = rrl_bits_enc_buf_cur_offset + result >= 9)
        : (BOOL v4 = 0),
          v4))
    {
      rrl_bits_enc_error = 1;
    }
    else if (result)
    {
      uint64_t v5 = (unsigned char *)rrl_bits_enc_buf_cur_ptr;
      unsigned int v6 = result + 1;
      do
      {
        size_t result = (result - 1);
        *uint64_t v5 = *v5 & (-129 >> v3) | (((1 << result) & a2) << (7 - result) >> v3);
        if (v3)
        {
          rrl_bits_enc_buf_cur_offset = ++v3;
          if (v3 == 8)
          {
            char v3 = 0;
            rrl_bits_enc_buf_cur_offset = 0;
            rrl_bits_enc_buf_cur_ptr = (uint64_t)++v5;
          }
        }
        else
        {
          rrl_bits_enc_length = ++v2;
          char v3 = 1;
          rrl_bits_enc_buf_cur_offset = 1;
        }
        --v6;
      }
      while (v6 > 1);
    }
  }
  return result;
}

uint64_t rrl_util_accuracy_to_meter(uint64_t result)
{
  if (result > 0x7F) {
    return 0;
  }
  if (result >= 2)
  {
    unsigned __int8 v1 = 0;
    unint64_t v2 = 1;
    unsigned int v3 = 11;
    do
    {
      if (v3 > 0x173EED7F)
      {
        unsigned int v5 = v3;
      }
      else
      {
        do
        {
          unint64_t v4 = v2;
          unsigned int v5 = 11 * v3;
          ++v2;
          if (result - 1 == v4) {
            break;
          }
          BOOL v6 = v3 >= 0x21CFE52;
          v3 *= 11;
        }
        while (!v6);
      }
      unsigned int v3 = v5 / 0x186A0;
      if (v2 == result) {
        unsigned int v3 = v5;
      }
      else {
        ++v1;
      }
    }
    while (v2 < result);
    int v7 = v1;
    if (~(5 * v1) + (int)result < 2)
    {
      unsigned int v15 = 10;
    }
    else
    {
      int v8 = 0;
      int v9 = result - 5 * v7;
      uint32x4_t v10 = (uint32x4_t)vdupq_n_s32(v9 - 3);
      int32x4_t v11 = (int32x4_t)xmmword_22BB40370;
      v12.i64[0] = 0xA0000000ALL;
      v12.i64[1] = 0xA0000000ALL;
      do
      {
        int8x16_t v13 = (int8x16_t)v11;
        int32x4_t v11 = vmulq_s32(v11, v12);
        v8 += 4;
      }
      while (((v9 + 1) & 0xFFFFFFFC) != v8);
      int8x16_t v14 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v8 - 4), (int8x16_t)xmmword_22BB40360), v10), v13, (int8x16_t)v11);
      *(int32x2_t *)v14.i8 = vmul_s32(*(int32x2_t *)v14.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
      unsigned int v15 = v14.i32[0] * v14.i32[1];
    }
    return v3 / v15 - 10;
  }
  return result;
}

uint64_t PEREncode(unsigned int *a1, unsigned __int8 *a2, int *a3)
{
  v13[1] = *MEMORY[0x263EF8340];
  uint64_t result = *a1;
  if (!result)
  {
    int v7 = setjmp((int *)a1 + 1);
    *((unsigned char *)a1 + 196) = 1;
    if (v7)
    {
      MMSRelease((uint64_t)a1);
    }
    else
    {
      *a1 = 0;
      v13[0] = 0;
      *((void *)a1 + 25) = a2;
      *((void *)a1 + 89) = 1;
      *((void *)a1 + 130) = a2;
      *((void *)a1 + 131) = a3;
      uint64_t v8 = (*((uint64_t (**)(unsigned int *, void *))a1 + 106))(a1, v13);
      *((void *)a1 + 134) = v8;
      *((void *)a1 + 135) = v8 + v13[0];
      uint64_t v9 = (*((uint64_t (**)(unsigned int *, unsigned int *))a1 + 110))(a1, a1 + 276);
      *((void *)a1 + 136) = v9;
      *((void *)a1 + 137) = v9;
      *((unsigned char *)a1 + 1105) = *((unsigned char *)a1 + 1104);
      if ((*((unsigned char *)a1 + 1057) & 8) == 0) {
        *((void *)a1 + 132) = 2080;
      }
      PEREncVal((size_t)a1, a2, a3);
      if (*((void *)a1 + 137) == *((void *)a1 + 136)
        && *((unsigned __int8 *)a1 + 1105) == *((unsigned __int8 *)a1 + 1104))
      {
        PERPutByte((uint64_t)a1, 0);
      }
      if ((a1[264] & 0x10) != 0)
      {
        int32x4_t v11 = (unsigned char *)*((void *)a1 + 137);
        uint64_t v12 = *((unsigned __int8 *)a1 + 1105);
      }
      else
      {
        int v10 = *((unsigned __int8 *)a1 + 1105);
        int32x4_t v11 = (unsigned char *)*((void *)a1 + 137);
        if (v10 != 7)
        {
          *v11 &= -2 << v10;
          int32x4_t v11 = (unsigned char *)(*((void *)a1 + 137) + 1);
          *((void *)a1 + 137) = v11;
          *((unsigned char *)a1 + 1105) = 7;
        }
        uint64_t v12 = 7;
      }
      (*((void (**)(unsigned int *, unsigned char *, uint64_t))a1 + 111))(a1, &v11[-*((void *)a1 + 136)], v12);
      *((void *)a1 + 133) = *((unsigned __int8 *)a1 + 1104)
                            - (unint64_t)*((unsigned __int8 *)a1 + 1105)
                            + 8 * (*((void *)a1 + 137) - *((void *)a1 + 136));
    }
    *((unsigned char *)a1 + 196) = 0;
    return *a1;
  }
  return result;
}

uint64_t Hal15_ReadHwRevision(int a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  v25[0] = 0;
  __int16 v22 = 30274;
  char v23 = a1;
  __int16 v27 = 0;
  char v28 = 0;
  plc00_10EncodeHdrPlCs(&v22, (uint64_t)v26, 9, 0, 1, (uint64_t)v25);
  int v2 = v25[0];
  if (v25[0])
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Encode HeaderErr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "Hal15_ReadHwRevision", 775, v2);
      LbsOsaTrace_WriteLog(0xDu, __str, v4, 0, 1);
    }
    return 0xFFFFFFFFLL;
  }
  int v6 = 10;
  char v29 = 10;
  if (a1 != 77)
  {
    if (a1 != 80) {
      goto LABEL_10;
    }
    int v6 = 9;
  }
  g_HalState = v6;
LABEL_10:
  if ((int)Hal22_ZxSendToChip(v26, 9uLL) <= 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx rev cmd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "Hal15_ReadHwRevision", 1282);
      LbsOsaTrace_WriteLog(0xDu, __str, v13, 0, 1);
    }
    return 4294967289;
  }
  else
  {
    char v7 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1388u);
    if (v7 == 2)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RevResp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 69, "Hal15_ReadHwRevision", 1541);
        LbsOsaTrace_WriteLog(0xDu, __str, v15, 0, 1);
      }
      return 4294967285;
    }
    else if (v7 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RevResp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "HAL", 69, "Hal15_ReadHwRevision", 1543);
        LbsOsaTrace_WriteLog(0xDu, __str, v17, 0, 1);
      }
      return 4294967287;
    }
    else
    {
      if (v7)
      {
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
        uint64_t result = 0;
        if (!IsLoggingAllowed) {
          return result;
        }
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RevResp default\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 69, "Hal15_ReadHwRevision", 515);
        int v11 = 0;
LABEL_28:
        LbsOsaTrace_WriteLog(0xDu, __str, v10, v11, 1);
        return 0;
      }
      if (byte_26AE7B187 == 32)
      {
        int v8 = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
        uint64_t result = 0;
        if (!v8) {
          return result;
        }
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: RevResp rcvd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 73, "Hal15_ReadHwRevision");
        int v11 = 4;
        goto LABEL_28;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RevResp status,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "HAL", 69, "Hal15_ReadHwRevision", 770, byte_26AE7B187);
        LbsOsaTrace_WriteLog(0xDu, __str, v21, 0, 1);
      }
      return 4294967288;
    }
  }
}

uint64_t Hal15_HandleRevResp(unsigned __int8 *__src, size_t __n)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!__src)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
    return LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
  }
  if (__src[2] != 66 || __src[3] != 86)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Packet MC,%c,MID,%c,MIDEx,%c\n", v5, "HAL", 69);
    return LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
  }
  if (__src[8] != 32) {
    goto LABEL_73;
  }
  byte_26AE7B187 = 32;
  dword_26AE023C0 = 4;
  if (__n > 0x6A)
  {
    memcpy_s("Hal15_Rev4Information", 251, &g_RawRevRespCntxt, 0x6Bu, __src, __n);
    if (__src[4] == 80)
    {
      int v7 = byte_26AE7B127 | ((byte_26AE7B128 & 0xF) << 8);
      dword_26AE023BC = v7;
      g_RevisionCntxt = byte_26AE7B125 & 3;
      byte_26AE02331 = (byte_26AE7B125 >> 2) & 3;
      LODWORD(xmmword_26AE023AC) = (byte_26AE7B125 >> 2) & 3;
      DWORD1(xmmword_26AE023AC) = byte_26AE7B125 & 3;
      byte_26AE02332 = byte_26AE7B125 & 0x10;
      word_26AE02334 = byte_26AE7B127 | ((byte_26AE7B128 & 0xF) << 8);
      byte_26AE02337 = byte_26AE7B128 >> 7;
      byte_26AE02338 = byte_26AE7B129 & 0xF;
      byte_26AE02339 = byte_26AE7B129 >> 4;
      *(_DWORD *)byte_26AE0233A = dword_26AE7B12A;
      *(_DWORD *)&byte_26AE0233A[3] = *(int *)((char *)&dword_26AE7B12A + 3);
      byte_26AE02341 = 0;
      *(_DWORD *)&byte_26AE02342[3] = unk_26AE7B134;
      *(_DWORD *)byte_26AE02342 = unk_26AE7B131;
      byte_26AE02349 = 0;
      *(void *)byte_26AE0234A = unk_26AE7B138;
      word_26AE02352 = byte_26AE7B140;
      *(void *)algn_26AE02354 = unk_26AE7B141;
      word_26AE0235C = byte_26AE7B149;
      if (v7 > 2472)
      {
        if (v7 == 2473)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: VerInf CP Spring\n");
            goto LABEL_58;
          }
          goto LABEL_59;
        }
        if (v7 == 3431)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: VerInf CP Bright\n");
            goto LABEL_58;
          }
LABEL_59:
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v14 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            uint64_t v15 = 89;
            if (!byte_26AE02337) {
              uint64_t v15 = 78;
            }
            unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ver,%02x.%02x,ExtProd,%u,ProdType,%u,step,%04x,Dash,%04x,FW,%s,Patch,%s,SW,%s.%s,OTP,%c\n", (unint64_t)v14, "HAL", 73, "Hal15_StorePERev4Info", byte_26AE02331, g_RevisionCntxt, byte_26AE02332, (unsigned __int16)word_26AE02334, byte_26AE02338, byte_26AE02339, byte_26AE0233A, byte_26AE02342, byte_26AE0234A, algn_26AE02354, v15);
            LbsOsaTrace_WriteLog(0xDu, __str, v16, 4, 1);
          }
          LODWORD(xmmword_26AE023AC) = byte_26AE02331;
          DWORD1(xmmword_26AE023AC) = g_RevisionCntxt;
          dword_26AE023BC = (unsigned __int16)word_26AE02334;
          *(void *)algn_26AE023C4 = *(void *)byte_26AE0233A;
          qword_26AE023D8 = *(void *)byte_26AE02342;
          qword_26AE023EC = *(void *)byte_26AE0234A;
          word_26AE023F4 = word_26AE02352;
          qword_26AE02400 = *(void *)algn_26AE02354;
          word_26AE02408 = word_26AE0235C;
          goto LABEL_73;
        }
      }
      else
      {
        if (v7 == 1107)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: VerInf CP Compact\n");
            goto LABEL_58;
          }
          goto LABEL_59;
        }
        if (v7 == 2472)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: VerInf CP Sunshine\n");
LABEL_58:
            LbsOsaTrace_WriteLog(0xDu, __str, v8, 4, 1);
            goto LABEL_59;
          }
          goto LABEL_59;
        }
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
        goto LABEL_73;
      }
LABEL_79:
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Incorrect Product Id\n");
      goto LABEL_8;
    }
    byte_26AE0236C = byte_26AE7B125 & 3;
    byte_26AE0236D = (byte_26AE7B125 >> 2) & 3;
    DWORD2(xmmword_26AE023AC) = (byte_26AE7B125 >> 2) & 3;
    HIDWORD(xmmword_26AE023AC) = byte_26AE7B125 & 3;
    if (word_26AE02334 == 3431 && byte_26AE02331 == 2)
    {
      byte_26AE02377 = byte_26AE7B127;
      byte_26AE02378 = byte_26AE7B129;
      *(_DWORD *)byte_26AE02379 = dword_26AE7B12A;
      *(_DWORD *)&byte_26AE02379[3] = *(int *)((char *)&dword_26AE7B12A + 3);
      byte_26AE02380 = 0;
      *(_DWORD *)algn_26AE02381 = unk_26AE7B131;
      *(_DWORD *)&algn_26AE02381[3] = unk_26AE7B134;
      byte_26AE02388 = 0;
      qword_26AE02389 = unk_26AE7B138;
      word_26AE02391 = byte_26AE7B140;
      *(void *)byte_26AE02393 = unk_26AE7B141;
      word_26AE0239B = byte_26AE7B149;
      goto LABEL_24;
    }
    if (word_26AE02334 == 1107 && byte_26AE02331 == 1)
    {
      byte_26AE02377 = byte_26AE7B127;
      byte_26AE02378 = byte_26AE7B129;
      *(_DWORD *)byte_26AE02379 = dword_26AE7B12A;
      *(_DWORD *)&byte_26AE02379[3] = *(int *)((char *)&dword_26AE7B12A + 3);
      byte_26AE02380 = 0;
      *(_DWORD *)algn_26AE02381 = unk_26AE7B131;
      *(_DWORD *)&algn_26AE02381[3] = unk_26AE7B134;
      byte_26AE02388 = 0;
      qword_26AE02389 = unk_26AE7B138;
      word_26AE02391 = byte_26AE7B140;
      *(void *)byte_26AE02393 = unk_26AE7B141;
      word_26AE0239B = byte_26AE7B149;
      goto LABEL_33;
    }
    byte_26AE0236E = byte_26AE7B126 & 0xF;
    byte_26AE0236F = byte_26AE7B126 >> 4;
    *(_DWORD *)byte_26AE02379 = dword_26AE7B12A;
    *(_DWORD *)&byte_26AE02379[3] = *(int *)((char *)&dword_26AE7B12A + 3);
    byte_26AE02380 = 0;
    *(_DWORD *)algn_26AE02381 = unk_26AE7B131;
    *(_DWORD *)&algn_26AE02381[3] = unk_26AE7B134;
    byte_26AE02388 = 0;
    qword_26AE02389 = unk_26AE7B138;
    word_26AE02391 = byte_26AE7B140;
    *(void *)byte_26AE02393 = unk_26AE7B141;
    word_26AE0239B = byte_26AE7B149;
    if ((unsigned __int16)word_26AE02334 > 0x9A8u)
    {
      if (word_26AE02334 == 2473)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
          goto LABEL_36;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: VerInf ME Spring\n");
        goto LABEL_35;
      }
      if (word_26AE02334 == 3431)
      {
LABEL_24:
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: VerInf ME Bright\n");
LABEL_35:
          LbsOsaTrace_WriteLog(0xDu, __str, v9, 4, 1);
          goto LABEL_36;
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (word_26AE02334 == 1107)
      {
LABEL_33:
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: VerInf ME Compact\n");
          goto LABEL_35;
        }
LABEL_36:
        if ((dword_26AE023BC - 2472) >= 2 && dword_26AE023BC != 3431 && dword_26AE023BC != 1107)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v17 = mach_continuous_time();
            size_t v18 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Incorrect Product\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "HAL", 69, "Hal15_StoreMERev4Info");
            int v19 = 0;
LABEL_71:
            LbsOsaTrace_WriteLog(0xDu, __str, v18, v19, 1);
          }
LABEL_72:
          unk_26AE02414 = *(void *)byte_26AE02379;
          unk_26AE02428 = *(void *)algn_26AE02381;
          qword_26AE0243C = qword_26AE02389;
          word_26AE02444 = word_26AE02391;
          unk_26AE02450 = *(void *)byte_26AE02393;
          word_26AE02458 = word_26AE0239B;
          goto LABEL_73;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HWver,%02x.%02x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 73, "Hal15_StoreMERev4Info", DWORD2(xmmword_26AE023AC), HIDWORD(xmmword_26AE023AC));
          LbsOsaTrace_WriteLog(0xDu, __str, v11, 4, 1);
        }
        if (dword_26AE023BC == 3431 && byte_26AE02331 == 2 || dword_26AE023BC == 1107 && byte_26AE02331 == 1)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
            goto LABEL_69;
          }
          bzero(__str, 0x410uLL);
          unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MMCUver,%u,RFFlavour,%u,Dash,%u,Step,%u,Product,%u\n", v12, "HAL");
        }
        else
        {
          if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
            goto LABEL_69;
          }
          bzero(__str, 0x410uLL);
          unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: BBver,%04x.%04x\n", v23);
        }
        LbsOsaTrace_WriteLog(0xDu, __str, v13, 4, 1);
LABEL_69:
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v20 = mach_continuous_time();
          size_t v18 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: FW,%s,Patch,%s,SW,%s.%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "HAL", 73, "Hal15_StoreMERev4Info", byte_26AE02379, algn_26AE02381, (const char *)&qword_26AE02389, byte_26AE02393);
          int v19 = 4;
          goto LABEL_71;
        }
        goto LABEL_72;
      }
      if (word_26AE02334 == 2472)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
          goto LABEL_36;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: VerInf ME Sunshine\n");
        goto LABEL_35;
      }
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      goto LABEL_73;
    }
    goto LABEL_79;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len,%u\n", v22);
LABEL_8:
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
  }
LABEL_73:
  uint64_t result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
  if ((result & 1) == 0)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      __error();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v21);
      return LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t GM_Cross_Constell(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = 0;
  char v5 = 0;
  int v6 = 0;
  v101[1] = *(double *)MEMORY[0x263EF8340];
  int v7 = (char *)(a2 + 8458);
  unsigned __int16 v8 = (unsigned char *)(result + 4420);
  do
  {
    if ((~*(unsigned __int16 *)(v3 + v4 + 8) & 0x208) == 0)
    {
      switch(*(unsigned char *)(v3 + v4))
      {
        case 0:
          break;
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
          int v6 = 1;
          break;
        case 2:
          char v5 = 1;
          break;
        default:
          uint64_t result = (uint64_t)EvCrt_Illegal_Default("GM_Cross_Constell", 0x76u);
          break;
      }
    }
    v4 += 36;
  }
  while (v4 != 1728);
  if (!v8[2330] && v8[2312] && *(int *)(v3 + 6728) >= 1)
  {
    *(void *)double v100 = 0;
    v101[0] = 0.0;
    API_Get_UTC_Cor(1, v101);
    uint64_t result = GPS_To_Glon_Time(0, *(__int16 *)(v3 + 6734), *(double *)(v3 + 6736), v101[0], &v100[1], v100, (double *)v99);
    *(_WORD *)(v3 + 6748) = v100[1];
    *(_WORD *)(v3 + 6752) = v100[0];
    v8[2330] = 1;
  }
  int v9 = *(_DWORD *)(v3 + 6744);
  if (((v9 == 0) & v5) == 1)
  {
    uint64_t v10 = 0;
    int v11 = 10799999;
    v101[0] = 0.0;
    unint64_t v12 = (_DWORD *)(v3 + 1732);
    while (*(unsigned char *)(v3 + v10) != 2 || (~*(unsigned __int16 *)(v3 + v10 + 8) & 0x208) != 0)
    {
      v12 += 14;
      v10 += 36;
      if (v10 == 1728) {
        goto LABEL_20;
      }
    }
    int v11 = 1500 * *(v12 - 1) + 10799999 + *v12 / 1023 + 1;
LABEL_20:
    uint64_t result = API_Get_UTC_Cor(1, v101);
    double v13 = -0.5;
    if (v101[0] > 0.0) {
      double v13 = 0.5;
    }
    double v14 = v101[0] + v13;
    if (v101[0] + v13 <= 2147483650.0)
    {
      if (v14 >= -2147483650.0) {
        int v15 = (int)v14;
      }
      else {
        int v15 = 0x80000000;
      }
    }
    else
    {
      int v15 = 0x7FFFFFFF;
    }
    *(double *)(v3 + 6760) = (double)((v11 - 1000 * v15) % 86400000) * 0.001;
    int v9 = 3;
    *(_DWORD *)(v3 + 6744) = 3;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_35;
  }
  if (!*v8)
  {
    for (uint64_t i = 0; i != 1728; i += 36)
    {
      if (*(unsigned char *)(v3 + i) == 2) {
        *(_WORD *)(v3 + i + 8) &= ~0x200u;
      }
    }
LABEL_35:
    int v16 = 0;
    goto LABEL_36;
  }
  int v16 = 1;
LABEL_36:
  int v18 = *(_DWORD *)(v3 + 6728);
  if (v18 && v8[2312]) {
    goto LABEL_51;
  }
  if (v8[2330] && v9 >= 1 && *(_WORD *)(v3 + 6748))
  {
    *(void *)double v100 = 0;
    v101[0] = 0.0;
    *(void *)uint64_t v99 = 0;
    API_Get_UTC_Cor(1, (double *)v99);
    uint64_t result = Glon_To_GPS_Time(*(__int16 *)(v3 + 6748), *(__int16 *)(v3 + 6752), *(double *)(v3 + 6760), *(double *)v99, &v100[1], v100, v101);
    int v18 = *(_DWORD *)(v3 + 6728);
    if (v18 <= 2)
    {
      int v19 = *(_DWORD *)(v3 + 6744);
      if (v18 < v19)
      {
        *(double *)(v3 + 6736) = v101[0];
        if (v19 >= 3) {
          int v18 = 3;
        }
        else {
          int v18 = v19;
        }
        *(_DWORD *)(v3 + 6728) = v18;
      }
    }
    __int16 v20 = LOWORD(v100[0]) + (LOWORD(v100[1]) << 10);
    if (!v8[2312])
    {
      *(_WORD *)(v3 + 6734) = v20;
      v8[2312] = 1;
      if (v18) {
        goto LABEL_51;
      }
      goto LABEL_72;
    }
    if (v20 != *(__int16 *)(v3 + 6734))
    {
      uint64_t result = (uint64_t)EvLog_v("GM_Cross_Constell: WeekNo Changing from %d to %d !!", *(__int16 *)(v3 + 6734), v20);
      *(_WORD *)(v3 + 6734) = v20;
      int v18 = *(_DWORD *)(v3 + 6728);
    }
  }
  if (v18)
  {
LABEL_51:
    double v21 = *(double *)(v3 + 6736) * 0.666666667;
    double v22 = -0.5;
    if (v21 > 0.0) {
      double v22 = 0.5;
    }
    double v23 = v21 + v22;
    if (v23 <= 2147483650.0)
    {
      if (v23 >= -2147483650.0) {
        int v24 = (int)v23;
      }
      else {
        int v24 = 0x80000000;
      }
    }
    else
    {
      int v24 = 0x7FFFFFFF;
    }
    uint64_t v25 = 0;
    double v26 = (int *)(v3 + 1728);
    uint64_t result = 4294909696;
    do
    {
      if (*(unsigned char *)(v3 + v25) == 2 && (~*(unsigned __int16 *)(v3 + v25 + 8) & 0x208) == 0)
      {
        int v27 = *v26;
        int v28 = v24 - *v26;
        if (v28 >= 28800) {
          int v29 = 28800;
        }
        else {
          int v29 = v24 - *v26;
        }
        unsigned int v30 = 57600 * ((v24 + 57599 - v27 - v29) / 0xE100u);
        int v31 = v28 - v30;
        if (v31 <= -28800) {
          int v31 = -28800;
        }
        unsigned int v33 = v27 - v24 + v30 + v31;
        BOOL v32 = v33 == 0;
        int v34 = v30 + v27;
        unsigned int v35 = (v33 - (v33 != 0)) / 0xE100;
        if (!v32) {
          ++v35;
        }
        int *v26 = v34 - 57600 * v35;
      }
      v25 += 36;
      v26 += 14;
    }
    while (v25 != 1728);
    goto LABEL_77;
  }
LABEL_72:
  for (uint64_t j = 0; j != 1728; j += 36)
  {
    if (*(unsigned char *)(v3 + j) == 2) {
      *(_WORD *)(v3 + j + 8) &= ~0x200u;
    }
  }
  int v18 = 0;
LABEL_77:
  int v37 = 0;
  if (v18) {
    int v38 = v16;
  }
  else {
    int v38 = 0;
  }
  if ((*(_DWORD *)(v2 + 8444) - 4) >= 3 && ((v6 ^ 1) & 1) == 0 && v38)
  {
    char v94 = v38;
    char v95 = v6;
    long long v96 = v8;
    uint64_t v97 = v2;
    long long v98 = v7;
    uint64_t v39 = 0;
    int v40 = 0;
    uint64_t v41 = 0;
    LODWORD(v101[0]) = -1000;
    v99[0] = -1000;
    uint64_t v42 = (_DWORD *)(v3 + 1732);
    uint64_t v43 = v3;
    do
    {
      if (!*(unsigned char *)v43 || (~*(unsigned __int16 *)(v43 + 8) & 0x208) != 0)
      {
        uint64_t v45 = v41;
      }
      else
      {
        int v44 = v40 + 1;
        if (*(unsigned char *)v43 == 2) {
          uint64_t v45 = v41;
        }
        else {
          uint64_t v45 = (v41 + 1);
        }
        if (*(unsigned char *)v43 == 2)
        {
          ++v40;
          unint64_t v46 = v99;
        }
        else
        {
          unint64_t v46 = (int *)v101;
        }
        if (*(unsigned char *)v43 == 2) {
          int v47 = v44;
        }
        else {
          int v47 = v41 + 1;
        }
        int v48 = *v42 / 1023 + 1500 * *(v42 - 1);
        int v49 = *v46;
        if (*v46 < 1) {
          goto LABEL_102;
        }
        unsigned int v50 = v49 - v48;
        if (v49 - v48 < 0) {
          unsigned int v50 = v48 - v49;
        }
        if (v50 < 0x1F5 || (EvLog_v("GLO_TIM: Bad ToT %d %d", *v46, v48), v47 < 2)) {
LABEL_102:
        }
          *unint64_t v46 = v48;
        else {
          EvLog_v("GLO_TIM: Ignoring ToT from Ch %d SV %d Frq %d", v39, *(unsigned __int8 *)(v43 + 2), *(char *)(v43 + 3));
        }
      }
      ++v39;
      v43 += 36;
      v42 += 14;
      uint64_t v41 = v45;
    }
    while (v39 != 48);
    if (SLODWORD(v101[0]) % 86400000 > v99[0] % 86400000) {
      int v51 = 500;
    }
    else {
      int v51 = -500;
    }
    int v52 = v51 + SLODWORD(v101[0]) % 86400000 - v99[0] % 86400000;
    int v53 = v52 / 1000;
    if (v52 / 1000 <= -43200) {
      int v54 = -43200;
    }
    else {
      int v54 = v52 / 1000;
    }
    if (v52 >= -43200999) {
      int v55 = 0;
    }
    else {
      int v55 = -1;
    }
    BOOL v56 = v52 < -43200999;
    unsigned int v57 = (v55 - v53 + v54) / 0x15180u;
    if (v56) {
      ++v57;
    }
    int v58 = v53 + 86400 * v57;
    if (v58 >= 43199) {
      int v59 = 43199;
    }
    else {
      int v59 = v58;
    }
    signed int v60 = (v58 + ~v59 + 86400) % 0x15180u - (86399 - v59);
    if (v60 >= 0) {
      unsigned int v61 = (v58 + ~v59 + 86400) % 0x15180u - (86399 - v59);
    }
    else {
      unsigned int v61 = 86399 - v59 - (v58 + ~v59 + 86400) % 0x15180u;
    }
    if (v61 >= 0x20)
    {
      EvCrt_v("GM_Get_GPS_GLON_Int_Sec_Offset:  ERROR:  Offset  %d (%d - %d) way too big !", v60, SLODWORD(v101[0]) % 86400000, v99[0] % 86400000);
      if (v60 >= 127) {
        int v62 = 127;
      }
      else {
        int v62 = v60;
      }
      if (v62 <= -127) {
        LOBYTE(v60) = -127;
      }
      else {
        LOBYTE(v60) = v62;
      }
    }
    int v63 = (char)v60;
    if ((v60 & 0x80u) == 0) {
      unsigned int v64 = (char)v60;
    }
    else {
      unsigned int v64 = -(char)v60;
    }
    uint64_t v2 = v97;
    int v7 = v98;
    unsigned __int16 v8 = v96;
    LOBYTE(v38) = v94;
    LOBYTE(v6) = v95;
    if (v64 >= 0x21)
    {
      double v65 = "GLO_TIM: Rejecting Bad (GPS-UTC) integer second offset %d ";
LABEL_136:
      uint64_t result = (uint64_t)EvLog_d(v65, v63);
      int v37 = 0;
      goto LABEL_137;
    }
    if (!(_BYTE)v60)
    {
      *(_DWORD *)(v97 + 8444) = 2;
      int v63 = *v98;
      double v65 = "GLO_TIM: Verifying (GPS-UTC) dtLS ";
      goto LABEL_136;
    }
    char v66 = *v98 + v60;
    *long long v98 = v66;
    v98[3] = v66;
    *(_DWORD *)(v97 + 8444) = 2;
    uint64_t result = (uint64_t)EvLog_d("GLO_TIM: Updating (GPS-UTC) dtLS ", v66);
    int v37 = 1;
  }
LABEL_137:
  int v67 = *(_DWORD *)(v3 + 6744);
  int v68 = *(_DWORD *)(v3 + 6728);
  if (v67 > v68 && (v8[2330] != 0) | v6 & 1)
  {
    v99[0] = 0;
    v100[1] = 0;
    v101[0] = 0.0;
    API_Get_UTC_Cor(1, v101);
    int v69 = (double *)(v3 + 6736);
    Glon_To_GPS_Time(*(__int16 *)(v3 + 6748), *(__int16 *)(v3 + 6752), *(double *)(v3 + 6760), v101[0], v99, &v100[1], (double *)(v3 + 6736));
    if (v8[2330])
    {
      __int16 v71 = LOWORD(v100[1]) + (LOWORD(v99[0]) << 10);
      if (v8[2312])
      {
        if (v71 != *(__int16 *)(v3 + 6734))
        {
          EvLog_v("GM_Cross_Constell: WeekNo Changing from %d to %d !!", *(__int16 *)(v3 + 6734), v71);
          *(_WORD *)(v3 + 6734) = v71;
        }
      }
      else
      {
        *(_WORD *)(v3 + 6734) = v71;
        v8[2312] = 1;
      }
    }
    else
    {
      uint64_t v72 = 0;
      double v73 = (_DWORD *)(v3 + 1732);
      while ((*(unsigned __int8 *)(v3 + v72) | 2) == 2 || (~*(unsigned __int16 *)(v3 + v72 + 8) & 0x208) != 0)
      {
        v73 += 14;
        v72 += 36;
        if (v72 == 1728)
        {
          double v74 = 0.0;
          goto LABEL_150;
        }
      }
      double v74 = (double)(*v73 / 1023 + 1500 * *(v73 - 1)) * 0.001;
LABEL_150:
      double v75 = *v69;
      if (*v69 - v74 >= 43200.0)
      {
        do
          double v75 = v75 + -86400.0;
        while (v75 - v74 >= 43200.0);
        *int v69 = v75;
      }
      if (v74 - v75 >= 43200.0)
      {
        do
          double v75 = v75 + 86400.0;
        while (v74 - v75 >= 43200.0);
        *int v69 = v75;
      }
      EvLog_nd("GLO_TIM: Setting day number ", 2, v70, (int)v75, *(void *)&v74);
    }
    uint64_t v76 = *(unsigned int *)(v3 + 6744);
    *(_DWORD *)(v3 + 6728) = v76;
    if ((int)v76 < 5)
    {
      uint64_t v77 = v76;
    }
    else
    {
      uint64_t v77 = v76;
      if ((((*(_DWORD *)(v2 + 8444) - 2) < 5) & v6) == 0)
      {
        uint64_t v77 = 4;
        *(_DWORD *)(v3 + 6728) = 4;
      }
    }
    uint64_t result = (uint64_t)EvLog_nd("GLO_TIM: Glo->GPS Time transfer", 2, v70, v76, v77);
    int v68 = *(_DWORD *)(v3 + 6728);
    int v67 = *(_DWORD *)(v3 + 6744);
  }
  if (v68 > v67)
  {
    v99[0] = 0;
    v100[1] = 0;
    v101[0] = 0.0;
    API_Get_UTC_Cor(1, v101);
    uint64_t result = GPS_To_Glon_Time(0, *(__int16 *)(v3 + 6734), *(double *)(v3 + 6736), v101[0], v99, &v100[1], (double *)(v3 + 6760));
    uint64_t v79 = *(unsigned int *)(v3 + 6728);
    *(_DWORD *)(v3 + 6744) = v79;
    if (int)v79 < 5 || ((*(_DWORD *)(v2 + 8444) - 2) < 5 ? (char v80 = v38) : (char v80 = 0), (v80)) {
      uint64_t result = (uint64_t)EvLog_nd("GLO_TIM: GPS->Glo Time transfer", 2, v78, v79, v79);
    }
    else {
      *(_DWORD *)(v3 + 6744) = 4;
    }
    if (v8[2312])
    {
      int v81 = *(__int16 *)(v3 + 6734);
      if (v81 >= 1025)
      {
        uint64_t v82 = v100[1];
        if (!v8[2330] || v100[1] != *(__int16 *)(v3 + 6752))
        {
          uint64_t v83 = v99[0];
          *(_WORD *)(v3 + 6748) = v99[0];
          *(_WORD *)(v3 + 6752) = v82;
          v8[2330] = 1;
          uint64_t result = (uint64_t)EvLog_nd("GLO_TIM: GPS->Glo Date transfer", 2, v78, (unsigned __int16)v81, v83, v82);
        }
      }
    }
  }
  if (v37)
  {
    uint64_t v84 = (int *)(v2 + 8440);
    uint64_t v85 = *(void *)(p_api + 48);
    if (*(unsigned char *)(v85 + 5) && *(int *)v85 >= 3) {
      int v86 = (int)*(double *)(v85 + 24) + 604800 * *(__int16 *)(v85 + 16);
    }
    else {
      int v86 = 0;
    }
    uint64_t v87 = 0;
    LODWORD(v88) = 0;
    *uint64_t v84 = v86;
    uint64_t v89 = p_NV;
    uint64_t v90 = *(void *)(v2 + 8456);
    *(_OWORD *)(p_NV + 160) = *(_OWORD *)v84;
    *(void *)(v89 + 176) = v90;
    uint64_t v91 = v89 + 160;
    __int16 v92 = -9871;
    do
    {
      int v93 = *(unsigned __int8 *)(v91 + v87) ^ HIBYTE(v92);
      __int16 v92 = -12691 * (v92 + (*(unsigned __int8 *)(v91 + v87) ^ HIBYTE(v92))) + 22719;
      uint64_t v88 = (v88 + v93);
      ++v87;
    }
    while (v87 != 24);
    *(void *)(v89 + 152) = v88;
    return (uint64_t)EvLog_v("GM_Cross_Constell: Saving Estimated (GPS-UTC) LeapSec %d to NV_Store", *v7);
  }
  return result;
}

void *gnssTest::Device::Device(void *result)
{
  *uint64_t result = &unk_26DF18DB0;
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTestC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS1_8functionIFvN4gnss6ResultEEEE_block_invoke(uint64_t result)
{
  gp_GnssAdaptDeviceTestuint64_t Instance = *(void *)(result + 32);
  return result;
}

void *___ZN8gnssTest19GnssAdaptDeviceTestC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS1_8functionIFvN4gnss6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = a1 + 40;
  uint64_t v2 = (void *)(*(void *)(a1 + 32) + 152);

  return std::function<void ()(gnss::Result)>::operator=(v2, v1);
}

void ___ZN8gnssTest19GnssAdaptDeviceTestC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS1_8functionIFvN4gnss6ResultEEEE_block_invoke_3(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 24);
  if (!v2)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getLogger", "gaGnssAdaptDeviceTest.h", 131, "false && \"Logger null\"");
  }
  gp_Logger = *(void *)(v1 + 24);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
  gnssOsaSetConfigLogLevel(v3, 0);
  *(_DWORD *)__str = 0;
  gnssTest::GnssAdaptDeviceTest::Ga21_01GetPlatformType((gnssTest::GnssAdaptDeviceTest *)v1, (unsigned __int8 *)__str);
  uint64_t v4 = *(void *)(v1 + 8);
  if ((*(_DWORD *)__str - 4) <= 0xFFFFFFFC && v4 == 0)
  {
    gnssOsa_FlushLog();
    __assert_rtn("GnssAdaptDeviceTest_block_invoke", "ga21GnssDeviceTest.cpp", 89, "false && \"GNSS Test Invalid GPIO pointer\"");
  }
  if (!*(void *)(v1 + 16))
  {
    gnssOsa_FlushLog();
    __assert_rtn("getComm", "gaGnssAdaptDeviceTest.h", 130, "false && \"Comm null\"");
  }
  gp_Comm = *(void *)(v1 + 16);
  gp_Gpio = v4;
  g_GpioNotifCB = gnssTest::GnssAdaptDeviceTest::Ga22_23FactoryGpioNotif;
  if (!*(void *)(v1 + 32))
  {
    gnssOsa_FlushLog();
    __assert_rtn("getNvStore", "gaGnssAdaptDeviceTest.h", 132, "false && \"NvStorage null\"");
  }
  gp_NvStorage = *(void *)(v1 + 32);
  int v14 = 0;
  gnssTest::GnssAdaptDeviceTest::Ga21_01GetPlatformType((gnssTest::GnssAdaptDeviceTest *)v1, (unsigned __int8 *)&v14);
  if (GNS_ProductionInitialize(v14, (uint64_t)gnssTest::GnssAdaptDeviceTest::Ga24_02GetHalConnStatus, gnssTest::GnssAdaptDeviceTest::Ga24_04ReceiveProdData))
  {
    if (gnssOsa_SemInit((dispatch_semaphore_s **)(v1 + 80), 0)) {
      return;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga21_02GnssInit", 1539);
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga21_02GnssInit", 1293);
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitError\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "GnssAdaptDeviceTest_block_invoke", 257);
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "GnssAdaptDeviceTest_block_invoke");
  gnssTest::GnssAdaptDeviceTest::Ga22_09ReportInitStatus(v1, (uint64_t)__p, 8);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22B991858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga21_01GetPlatformType(gnssTest::GnssAdaptDeviceTest *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      return (uint64_t)v2;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Null Pltfm\n");
LABEL_9:
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    return 0;
  }
  HalExtensions = gnssTest::GnssAdaptDeviceTest::getHalExtensions(a1);
  unsigned int v5 = (*(uint64_t (**)(void *))(*(void *)HalExtensions + 120))(HalExtensions);
  if (v5 >= 5)
  {
    uint64_t v2 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      return (uint64_t)v2;
    }
    bzero(__str, 0x410uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v10 = gnssTest::GnssAdaptDeviceTest::getHalExtensions(a1);
    (*(void (**)(void *))(*(void *)v10 + 120))(v10);
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Pltfm,%u\n", v9);
    goto LABEL_9;
  }
  *(_DWORD *)uint64_t v2 = v5;
  if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v6 = mach_continuous_time();
  unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Platform Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 73, "Ga21_01GetPlatformType", *v2);
  uint64_t v2 = (unsigned __int8 *)1;
  LbsOsaTrace_WriteLog(0x18u, __str, v7, 4, 1);
  return (uint64_t)v2;
}

void gnssTest::GnssAdaptDeviceTest::~GnssAdaptDeviceTest(gnssTest::GnssAdaptDeviceTest *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26DF18E30;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Destructor\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 65, "~GnssAdaptDeviceTest");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 1, 1);
  }
  uint64_t v4 = *((void *)this + 6);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN8gnssTest19GnssAdaptDeviceTestD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_9_1;
  block[4] = this;
  dispatch_sync(v4, block);
  dispatch_sync((dispatch_queue_t)g_GnssFactoryGlobalStaticQueue, &__block_literal_global_4);
  if (g_GnssFactoryGlobalStaticQueue)
  {
    dispatch_release((dispatch_object_t)g_GnssFactoryGlobalStaticQueue);
    g_GnssFactoryGlobalStaticQueue = 0;
  }
  unsigned int v5 = *((void *)this + 6);
  if (v5)
  {
    dispatch_release(v5);
    *((void *)this + 6) = 0;
  }
  uint64_t v6 = *((void *)this + 9);
  if (v6)
  {
    dispatch_release(v6);
    *((void *)this + 9) = 0;
  }
  unsigned __int16 v7 = *((void *)this + 7);
  if (v7)
  {
    dispatch_release(v7);
    *((void *)this + 7) = 0;
  }
  unsigned __int16 v8 = *((void *)this + 8);
  if (v8)
  {
    dispatch_release(v8);
    *((void *)this + 8) = 0;
  }
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100]((void *)this + 23);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 19);
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
}

{
  uint64_t vars8;

  gnssTest::GnssAdaptDeviceTest::~GnssAdaptDeviceTest(this);
}

{
  uint64_t vars8;

  gnssTest::GnssAdaptDeviceTest::~GnssAdaptDeviceTest(this);

  JUMPOUT(0x230F4E5D0);
}

void sub_22B991DB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void ___ZN8gnssTest19GnssAdaptDeviceTestD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  if (!gnssOsa_DeinitCountingSem((dispatch_object_t *)(v1 + 80))
    && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HdlSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga21_03GnssDeInit", 1540);
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 0, 1);
  }
  if (GNS_ProductionDeInitialize())
  {
    uint64_t v4 = *(NSObject **)(v1 + 72);
    *(void *)__str = MEMORY[0x263EF8330];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8gnssTest19GnssAdaptDeviceTest30Ga21_08UpdateGnssTestDevStatusEb_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_62;
    uint64_t v11 = v1;
    char v12 = 0;
    dispatch_sync(v4, __str);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "Ga21_03GnssDeInit", 1296);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
  }
}

void ___ZN8gnssTest19GnssAdaptDeviceTestD2Ev_block_invoke_2()
{
  gp_GnssAdaptDeviceTestuint64_t Instance = 0;
}

void gnssTest::GnssAdaptDeviceTest::periodic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "periodic");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a4);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse(a1, (const char *)__p, 7, (uint64_t)v10);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "periodic", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
  }
}

void sub_22B9921EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void gnssTest::GnssAdaptDeviceTest::recordIQ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "recordIQ");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a5);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse(a1, (const char *)__p, 7, (uint64_t)v11);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "recordIQ", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
}

void sub_22B992360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void gnssTest::GnssAdaptDeviceTest::commLoopback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "commLoopback");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a5);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse(a1, (const char *)__p, 7, (uint64_t)v11);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "commLoopback", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
}

void sub_22B9924D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *gnssTest::GnssAdaptDeviceTest::cw(uint64_t a1, int a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!*(void *)(a7 + 24))
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  if (*(void *)(a6 + 24))
  {
    int v14 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest2cwEiN4gnss4BandENS_7SubbandEdiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_20;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v19, a7);
    char v24 = a3;
    int v21 = a2;
    int v22 = a4;
    *(double *)&v19[4] = a8;
    int v23 = a5;
    std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v20, a6);
    dispatch_async(v14, block);
    std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v20);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v19);
  }
  uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "cw", 513);
    return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
  }
  return result;
}

void sub_22B992760(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

size_t ___ZN8gnssTest19GnssAdaptDeviceTest2cwEiN4gnss4BandENS_7SubbandEdiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnssTest::GnssAdaptDeviceTest **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "cw_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  int v5 = gnssTest::GnssAdaptDeviceTest::Ga21_07CheckDeviceStatus(v2, 0);
  if (v5 == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DurSecs,%d,Band,%hhu,Subb,%d,SrchRangeHz,%f,IntgTimeMs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "cw_block_invoke", *(_DWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 124), *(_DWORD *)(a1 + 116), *(double *)(a1 + 72), *(_DWORD *)(a1 + 120));
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
    }
    switch(*(unsigned char *)(a1 + 124))
    {
      case 1:
      case 5:
      case 8:
        goto LABEL_7;
      case 4:
        if ((*(_DWORD *)(a1 + 116) - 7) > 0xFFFFFFF1)
        {
LABEL_7:
          int v8 = *(_DWORD *)(a1 + 112);
          if (v8 < 0
            || 1000 * v8 < *(_DWORD *)(a1 + 120)
            || (double v16 = *(double *)(a1 + 72), v16 < 1000.0)
            || v16 > 20000.0)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "cw_block_invoke");
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v51, a1 + 40);
            gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)__p, 4, (uint64_t)v51);
            std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v51);
            if (v40 < 0) {
              operator delete(__p[0]);
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v9 = mach_continuous_time();
              unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CW Test\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "cw_block_invoke", 514);
              LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
            }
            size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v12 = mach_continuous_time();
              unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "cw_block_invoke");
              size_t result = LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
            }
          }
          else
          {
            int v17 = gnssTest::ZxFactoryHandler::Ga23_33CalcIntegrationTime(v16, (uint64_t)v2 + 140, *(unsigned __int8 *)(a1 + 124));
            if (v17 >= 1 && ((int v18 = *(_DWORD *)(a1 + 120), v18 == -1) || v18 >= v17))
            {
              if (v18 == -1) {
                int v31 = v17;
              }
              else {
                int v31 = *(_DWORD *)(a1 + 120);
              }
              BOOL v32 = *((void *)v2 + 9);
              block[0] = MEMORY[0x263EF8330];
              block[1] = 1174405120;
              block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest2cwEiN4gnss4BandENS_7SubbandEdiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke_2;
              block[3] = &__block_descriptor_tmp_19_0;
              block[4] = v2;
              std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v49, a1 + 80);
              dispatch_sync(v32, block);
              LODWORD(v32) = gnssTest::GnssAdaptDeviceTest::Ga22_14TriggerCwModulated((NSObject **)v2, *(_DWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 124), *(_DWORD *)(a1 + 116), 0, v31, *(double *)(a1 + 72));
              std::string::basic_string[abi:ne180100]<0>(v35, "cw_block_invoke");
              std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 40);
              gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v35, (int)v32, (uint64_t)v47);
              std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v47);
              if (v36 < 0) {
                operator delete(v35[0]);
              }
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v33 = mach_continuous_time();
                unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "cw_block_invoke");
                LbsOsaTrace_WriteLog(0x18u, __str, v34, 5, 1);
              }
              size_t result = (size_t)std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v49);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v37, "cw_block_invoke");
              std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v50, a1 + 40);
              gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v37, 4, (uint64_t)v50);
              std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v50);
              if (v38 < 0) {
                operator delete(v37[0]);
              }
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v19 = mach_continuous_time();
                unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CW Integ Time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "cw_block_invoke", 515);
                LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
              }
              size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if (result)
              {
                bzero(__str, 0x410uLL);
                uint64_t v21 = mach_continuous_time();
                unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "cw_block_invoke");
                size_t result = LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
              }
            }
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v41, "cw_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v52, a1 + 40);
          gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v41, 4, (uint64_t)v52);
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v52);
          if (v42 < 0) {
            operator delete(v41[0]);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v27 = mach_continuous_time();
            unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CW Invalid Glonass FCN\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "cw_block_invoke", 514);
            LbsOsaTrace_WriteLog(0x18u, __str, v28, 0, 1);
          }
          size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v29 = mach_continuous_time();
            unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "cw_block_invoke");
            size_t result = LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
          }
        }
        break;
      default:
        std::string::basic_string[abi:ne180100]<0>(v43, "cw_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v53, a1 + 40);
        gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v43, 4, (uint64_t)v53);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v53);
        if (v44 < 0) {
          operator delete(v43[0]);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v23 = mach_continuous_time();
          unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CW Invalid Band\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "cw_block_invoke", 514);
          LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
        }
        size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "cw_block_invoke");
          size_t result = LbsOsaTrace_WriteLog(0x18u, __str, v26, 5, 1);
        }
        break;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "cw_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v54, a1 + 40);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v45, v5, (uint64_t)v54);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v54);
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "cw_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    }
  }
  return result;
}

void sub_22B993134(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga21_07CheckDeviceStatus(gnssTest::GnssAdaptDeviceTest *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  int v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 0;
  uint64_t v12 = 0;
  unsigned __int16 v13 = &v12;
  uint64_t v14 = 0x2000000000;
  int v15 = 0;
  unsigned __int16 v4 = *((void *)a1 + 9);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga21_07CheckDeviceStatusE17e_Ga_CharTestType_block_invoke;
  block[3] = &unk_2648E9020;
  void block[5] = &v12;
  block[6] = a1;
  block[4] = &v16;
  dispatch_sync(v4, block);
  if (*((unsigned char *)v17 + 24))
  {
    if (a2 == 2)
    {
      uint64_t v5 = 1;
    }
    else if (*((_DWORD *)v13 + 6))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Incorrect Power Mode\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga21_07CheckDeviceStatus", 1302);
        LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
      }
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = gnssTest::GnssAdaptDeviceTest::Ga22_08InjectLtlTable(a1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HW Not Ready\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga21_07CheckDeviceStatus", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
    uint64_t v5 = 7;
  }
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v5;
}

void sub_22B9934AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void *___ZN8gnssTest19GnssAdaptDeviceTest2cwEiN4gnss4BandENS_7SubbandEdiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  size_t result = std::function<void ()(std::vector<gnssTest::RfMeasurement>)>::operator=((void *)(v1 + 184), a1 + 40);
  *(unsigned char *)(v1 + 136) = 0;
  return result;
}

void *std::function<void ()(std::vector<gnssTest::RfMeasurement>)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t __copy_helper_block_e8_40c84_ZTSNSt3__18functionIFvNS_6vectorIN8gnssTest13RfMeasurementENS_9allocatorIS3_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c84_ZTSNSt3__18functionIFvNS_6vectorIN8gnssTest13RfMeasurementENS_9allocatorIS3_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE80c84_ZTSNSt3__18functionIFvNS_6vectorIN8gnssTest13RfMeasurementENS_9allocatorIS3_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
}

void sub_22B9936E8(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE80c84_ZTSNSt3__18functionIFvNS_6vectorIN8gnssTest13RfMeasurementENS_9allocatorIS3_EEEEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100]((void *)(a1 + 80));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnssTest::GnssAdaptDeviceTest::modulated(uint64_t a1, int a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!*(void *)(a7 + 24))
  {
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  if (*(void *)(a6 + 24))
  {
    uint64_t v12 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest9modulatedEiN4gnss4BandENS_7SubbandEiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_26_2;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v17, a7);
    char v22 = a3;
    int v19 = a2;
    int v20 = a4;
    int v21 = a5;
    std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v18, a6);
    dispatch_async(v12, block);
    std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v18);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v17);
  }
  size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "modulated", 513);
    return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
  }
  return result;
}

void sub_22B9939B4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *___ZN8gnssTest19GnssAdaptDeviceTest9modulatedEiN4gnss4BandENS_7SubbandEiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnssTest::GnssAdaptDeviceTest **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "modulated_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  int v5 = gnssTest::GnssAdaptDeviceTest::Ga21_07CheckDeviceStatus(v2, 1);
  if (v5 == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DurSecs,%d,Band,%hhu,SubBand,%d,IntegTimeMS,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "modulated_block_invoke", *(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 116), *(_DWORD *)(a1 + 108), *(_DWORD *)(a1 + 112));
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
    }
    int v8 = *(_DWORD *)(a1 + 104);
    if (v8 < 0
      || 1000 * v8 < *(_DWORD *)(a1 + 112)
      || !gnssTest::GnssAdaptDeviceTest::Ga22_05ValidateBands((uint64_t)v2, *(unsigned __int8 *)(a1 + 116), *(_DWORD *)(a1 + 108)))
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "modulated_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a1 + 40);
      gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v28, 4, (uint64_t)v36);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "modulated_block_invoke");
        return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
      }
    }
    else
    {
      int v9 = gnssTest::ZxFactoryHandler::Ga23_33CalcIntegrationTime(10000.0, (uint64_t)v2 + 140, *(unsigned __int8 *)(a1 + 116));
      if (v9 >= 1 && ((int v10 = *(_DWORD *)(a1 + 112), v10 == -1) || v10 >= v9))
      {
        if (v10 == -1) {
          int v20 = v9;
        }
        else {
          int v20 = *(_DWORD *)(a1 + 112);
        }
        int v21 = *((void *)v2 + 9);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 1174405120;
        block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest9modulatedEiN4gnss4BandENS_7SubbandEiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke_2;
        block[3] = &__block_descriptor_tmp_25_1;
        block[4] = v2;
        std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 72);
        dispatch_sync(v21, block);
        LODWORD(v21) = gnssTest::GnssAdaptDeviceTest::Ga22_14TriggerCwModulated((NSObject **)v2, *(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 116), *(_DWORD *)(a1 + 108), 1, v20, 10000.0);
        std::string::basic_string[abi:ne180100]<0>(v24, "modulated_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, a1 + 40);
        gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v24, (int)v21, (uint64_t)v32);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v32);
        if (v25 < 0) {
          operator delete(v24[0]);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v22 = mach_continuous_time();
          unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "modulated_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
        }
        return std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v34);
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v11 = mach_continuous_time();
          unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Mod Integ Time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "modulated_block_invoke", 515);
          LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "modulated_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 40);
        gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)__p, 4, (uint64_t)v35);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v35);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "modulated_block_invoke");
          return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "modulated_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, a1 + 40);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v30, v5, (uint64_t)v37);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v37);
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "modulated_block_invoke");
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
    }
  }
  return result;
}

void sub_22B994028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v62);
  _Unwind_Resume(a1);
}

void *___ZN8gnssTest19GnssAdaptDeviceTest9modulatedEiN4gnss4BandENS_7SubbandEiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  size_t result = std::function<void ()(std::vector<gnssTest::RfMeasurement>)>::operator=((void *)(v1 + 184), a1 + 40);
  *(unsigned char *)(v1 + 136) = 1;
  return result;
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c84_ZTSNSt3__18functionIFvNS_6vectorIN8gnssTest13RfMeasurementENS_9allocatorIS3_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B9941C4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c84_ZTSNSt3__18functionIFvNS_6vectorIN8gnssTest13RfMeasurementENS_9allocatorIS3_EEEEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnssTest::GnssAdaptDeviceTest::powerMode(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest9powerModeENS_9PowerModeENSt3__18functionIFvN4gnss6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_32;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    int v10 = a2;
    dispatch_async(v4, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "powerMode", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void ___ZN8gnssTest19GnssAdaptDeviceTest9powerModeENS_9PowerModeENSt3__18functionIFvN4gnss6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnssTest::GnssAdaptDeviceTest **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "powerMode_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  int v5 = gnssTest::GnssAdaptDeviceTest::Ga21_07CheckDeviceStatus(v2, 2);
  if (v5 == 1)
  {
    int v6 = gnssTest::GnssAdaptDeviceTest::Ga22_18ValidatePowerMode((uint64_t)v2, *(_DWORD *)(a1 + 72));
    if (v6 == 1)
    {
      uint64_t v26 = 0;
      char v27 = &v26;
      uint64_t v28 = 0x2000000000;
      int v29 = 0;
      unsigned __int16 v7 = *((void *)v2 + 9);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest9powerModeENS_9PowerModeENSt3__18functionIFvN4gnss6ResultEEEE_block_invoke_2;
      block[3] = &unk_2648E8FD0;
      block[4] = &v26;
      void block[5] = v2;
      dispatch_sync(v7, block);
      if (*((_DWORD *)v27 + 6) == *(_DWORD *)(a1 + 72))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "powerMode_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 40);
        gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)__p, 0, (uint64_t)v35);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v35);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PwrStateReq,%u,v_CurPowState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "powerMode_block_invoke", 1302, *(_DWORD *)(a1 + 72), *((_DWORD *)v27 + 6));
          LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "powerMode_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
        }
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "powerMode_block_invoke", *(_DWORD *)(a1 + 72));
          LbsOsaTrace_WriteLog(0x18u, __str, v17, 4, 1);
        }
        int v18 = gnssTest::GnssAdaptDeviceTest::Ga22_19TriggerPowerMode((NSObject **)v2, *(_DWORD *)(a1 + 72));
        std::string::basic_string[abi:ne180100]<0>(v21, "powerMode_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 40);
        gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v21, v18, (uint64_t)v34);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
        if (v22 < 0) {
          operator delete(v21[0]);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v19 = mach_continuous_time();
          unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "powerMode_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
        }
      }
      _Block_object_dispose(&v26, 8);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "powerMode_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a1 + 40);
      gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v30, v6, (uint64_t)v36);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
      if (v31 < 0) {
        operator delete(v30[0]);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "powerMode_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "powerMode_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, a1 + 40);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v32, v5, (uint64_t)v37);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v37);
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "powerMode_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
}

void sub_22B9949B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest9powerModeENS_9PowerModeENSt3__18functionIFvN4gnss6ResultEEEE_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 128);
  return result;
}

void gnssTest::GnssAdaptDeviceTest::apSignalGpio(gnssTest::GnssAdaptDeviceTest *a1, int a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    if (gnssTest::GnssAdaptDeviceTest::Ga22_07IsFeatureSupported(a1, 3))
    {
      int v6 = *((void *)a1 + 6);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest12apSignalGpioEiNSt3__18functionIFvN4gnss6ResultEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_37;
      block[4] = a1;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
      int v13 = a2;
      dispatch_async(v6, block);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v12);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "apSignalGpio");
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
      gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)a1, (const char *)__p, 7, (uint64_t)v14);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v14);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "apSignalGpio", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
}

void sub_22B994CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest12apSignalGpioEiNSt3__18functionIFvN4gnss6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnssTest::GnssAdaptDeviceTest **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "apSignalGpio_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  int v5 = gnssTest::GnssAdaptDeviceTest::Ga21_07CheckDeviceStatus(v2, 3);
  if (v5 == 1)
  {
    if ((*(_DWORD *)(a1 + 72) - 2001) > 0xFFFFF8F6)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeoutMs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "apSignalGpio_block_invoke", *(_DWORD *)(a1 + 72));
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
      }
      int v15 = gnssTest::GnssAdaptDeviceTest::Ga22_21TriggerApSignalGpio(v2, *(_DWORD *)(a1 + 72));
      std::string::basic_string[abi:ne180100]<0>(v18, "apSignalGpio_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v24, a1 + 40);
      gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v18, v15, (uint64_t)v24);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "apSignalGpio_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "apSignalGpio_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, a1 + 40);
      gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)__p, 4, (uint64_t)v25);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeoutMs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "apSignalGpio_block_invoke", 514, *(_DWORD *)(a1 + 72));
        LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "apSignalGpio_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "apSignalGpio_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, a1 + 40);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v22, v5, (uint64_t)v26);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "apSignalGpio_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22B995170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, ...)
{
  va_start(va, a19);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  if (a13 < 0) {
    operator delete(a8);
  }
  _Unwind_Resume(a1);
}

void *gnssTest::GnssAdaptDeviceTest::timeMarkGpio(gnssTest::GnssAdaptDeviceTest *a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    *(_DWORD *)__str = 4;
    gnssTest::GnssAdaptDeviceTest::Ga21_01GetPlatformType(a1, (unsigned __int8 *)__str);
    uint64_t v6 = *((void *)a1 + 6);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest12timeMarkGpioEiNSt3__18functionIFvN4gnss6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_40_0;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a3);
    int v12 = a2;
    dispatch_async(v6, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "timeMarkGpio", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest12timeMarkGpioEiNSt3__18functionIFvN4gnss6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnssTest::GnssAdaptDeviceTest **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "timeMarkGpio_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  int v5 = gnssTest::GnssAdaptDeviceTest::Ga21_07CheckDeviceStatus(v2, 4);
  if (v5 == 1)
  {
    if ((*(_DWORD *)(a1 + 72) - 2001) > 0xFFFFF82F)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeoutMs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "timeMarkGpio_block_invoke", *(_DWORD *)(a1 + 72));
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
      }
      int v15 = gnssTest::GnssAdaptDeviceTest::Ga22_25TriggerTimeMark(v2, *(_DWORD *)(a1 + 72));
      std::string::basic_string[abi:ne180100]<0>(v18, "timeMarkGpio_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v24, a1 + 40);
      gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v18, v15, (uint64_t)v24);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "timeMarkGpio_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "timeMarkGpio_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, a1 + 40);
      gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)__p, 4, (uint64_t)v25);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeoutMs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "timeMarkGpio_block_invoke", 514, *(_DWORD *)(a1 + 72));
        LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "timeMarkGpio_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "timeMarkGpio_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, a1 + 40);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v22, v5, (uint64_t)v26);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "timeMarkGpio_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22B995814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, ...)
{
  va_start(va, a19);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  if (a13 < 0) {
    operator delete(a8);
  }
  _Unwind_Resume(a1);
}

void *gnssTest::GnssAdaptDeviceTest::commPing(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!*(void *)(a4 + 24))
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  if (*(void *)(a3 + 24))
  {
    uint64_t v6 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest8commPingEiNSt3__18functionIFvRKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEESA_EEENS2_IFvN4gnss6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_42;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
    std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
    int v13 = a2;
    dispatch_async(v6, block);
    std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v12);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
  }
  uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "commPing", 513);
    return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
  }
  return result;
}

void sub_22B995AB8(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *___ZN8gnssTest19GnssAdaptDeviceTest8commPingEiNSt3__18functionIFvRKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEESA_EEENS2_IFvN4gnss6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnssTest::GnssAdaptDeviceTest **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "commPing_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  int v5 = gnssTest::GnssAdaptDeviceTest::Ga21_07CheckDeviceStatus(v2, 5);
  if (v5 == 1)
  {
    if (*(void *)(a1 + 96) && (*(_DWORD *)(a1 + 104) - 2001) > 0xFFFFF9BE)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeoutMs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "commPing_block_invoke", *(_DWORD *)(a1 + 104));
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
      }
      uint64_t v15 = *((void *)v2 + 9);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest8commPingEiNSt3__18functionIFvRKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEESA_EEENS2_IFvN4gnss6ResultEEEE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_41_0;
      block[4] = v2;
      std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v27, a1 + 72);
      dispatch_sync(v15, block);
      int v16 = gnssTest::GnssAdaptDeviceTest::Ga22_16TriggerCommPing(v2, *(_DWORD *)(a1 + 104));
      std::string::basic_string[abi:ne180100]<0>(v19, "commPing_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, a1 + 40);
      gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v19, v16, (uint64_t)v25);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "commPing_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
      }
      return std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v27);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "commPing_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v28, a1 + 40);
      gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)__p, 4, (uint64_t)v28);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v28);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeoutMs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "commPing_block_invoke", 514, *(_DWORD *)(a1 + 104));
        LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
      }
      uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "commPing_block_invoke");
        return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "commPing_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v29, a1 + 40);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse((uint64_t)v2, (const char *)v23, v5, (uint64_t)v29);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v29);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "commPing_block_invoke");
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22B995FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v51);
  _Unwind_Resume(a1);
}

void *___ZN8gnssTest19GnssAdaptDeviceTest8commPingEiNSt3__18functionIFvRKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEESA_EEENS2_IFvN4gnss6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = a1 + 40;
  uint64_t v2 = (void *)(*(void *)(a1 + 32) + 216);

  return std::function<void ()(std::string const&,std::string const&)>::operator=(v2, v1);
}

void *std::function<void ()(std::string const&,std::string const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t __copy_helper_block_e8_40c89_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c89_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c89_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B996288(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c89_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void gnssTest::GnssAdaptDeviceTest::setNmeaHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "setNmeaHandler");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a4);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse(a1, (const char *)__p, 7, (uint64_t)v10);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setNmeaHandler", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
  }
}

void sub_22B99644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void gnssTest::GnssAdaptDeviceTest::setConfigTestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "setConfigTestContext");
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse(a1, (const char *)__p, 7, (uint64_t)v9);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setConfigTestContext", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
  }
}

void sub_22B9965C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *gnssTest::GnssAdaptDeviceTest::getHalExtensions(gnssTest::GnssAdaptDeviceTest *this)
{
  uint64_t v1 = (const void *)*((void *)this + 5);
  if (!v1
  {
    gnssOsa_FlushLog();
    __assert_rtn("getHalExtensions", "gaGnssAdaptDeviceTest.h", 136, "false && \"Failed to dynamic cast HalExtensions\"");
  }
  return result;
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga21_06GetGnssAdaptDeviceTestInstance(gnssTest::GnssAdaptDeviceTest *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  unsigned __int16 v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest37Ga21_06GetGnssAdaptDeviceTestInstanceEv_block_invoke;
  block[3] = &unk_2648E8FF8;
  block[4] = &v6;
  dispatch_sync((dispatch_queue_t)g_GnssFactoryGlobalStaticQueue, block);
  uint64_t v1 = v7[3];
  if (!v1)
  {
    snprintf(__str, 0x400uLL, "ASSERT,%s,%d,%s", "Ga21_06GetGnssAdaptDeviceTestInstance", 651, "Factory Device not found");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(v10, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(v10, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "Ga21_06GetGnssAdaptDeviceTestInstance", __str);
      LbsOsaTrace_WriteLog(0xEu, v10, v4, 0, 1);
    }
    if (gp_Logger) {
      (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
    }
    __assert_rtn("Ga21_06GetGnssAdaptDeviceTestInstance", "ga21GnssDeviceTest.cpp", 651, "false && \"Factory Device not found\"");
  }
  _Block_object_dispose(&v6, 8);
  return v1;
}

void sub_22B996890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest37Ga21_06GetGnssAdaptDeviceTestInstanceEv_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = gp_GnssAdaptDeviceTestInstance;
  return result;
}

void *___ZN8gnssTest19GnssAdaptDeviceTest24Ga21_07CheckDeviceStatusE17e_Ga_CharTestType_block_invoke(void *result)
{
  uint64_t v1 = result[6];
  *(unsigned char *)(*(void *)(result[4] + 8) + 24) = *(unsigned char *)(v1 + 116);
  *(_DWORD *)(*(void *)(result[5] + 8) + 24) = *(_DWORD *)(v1 + 128);
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest30Ga21_08UpdateGnssTestDevStatusEb_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 116) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t newGnssDeviceTest(void *a1)
{
  if (*a1) {
    operator new();
  }
  return 0;
}

void sub_22B996D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
  if (*(char *)(v11 + 111) < 0) {
    operator delete(*v12);
  }
  uint64_t v17 = *(void *)(v11 + 40);
  *(void *)(v11 + 40) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(v11 + 32);
  *(void *)(v11 + 32) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(v11 + 24);
  *(void *)(v11 + 24) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(v11 + 16);
  *(void *)(v11 + 16) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(v11 + 8);
  *(void *)(v11 + 8) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x230F4E5D0](v11, 0x10B3C40FCDFBD68);
  _Unwind_Resume(a1);
}

uint64_t gnssTest::Device::getObjectVersionNumber(gnssTest::Device *this)
{
  return 2502;
}

void *std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unsigned __int16 v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22B99738C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::string const&,std::string const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unsigned __int16 v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22B9976C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t GenericSetValue(uint64_t result, unsigned char *a2, int a3)
{
  switch((int)result)
  {
    case 1:
      *a2 = a3;
      break;
    case 2:
      *(_WORD *)a2 = a3;
      break;
    case 8:
      *(void *)a2 = a3;
      break;
    default:
      *(_DWORD *)a2 = a3;
      break;
  }
  return result;
}

uint64_t GenericAssignSort(int *a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  for (uint64_t i = a4; ; uint64_t i = *(void *)(i + 24))
  {
    uint64_t v8 = *(uint64_t (***)(void))(i + 16);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8) {
        break;
      }
    }
    if ((*(_DWORD *)i & 0xFFFFFFFE) != 0xAA)
    {
      if ((*(unsigned char *)(i + 4) & 4) == 0)
      {
        if (a1 != a2)
        {
          if (*(_DWORD *)i == 128) {
            size_t v10 = *(unsigned int *)(a4 + 8);
          }
          else {
            size_t v10 = *(unsigned int *)(i + 8);
          }
          memcpy_s("posp_memcpy", 29, a1, v10, a2, v10);
        }
        return (uint64_t)a1;
      }
      if (a1 != a2 && (a3 & 0x10) != 0) {
        GenericFreeSort(a1, i);
      }
      if ((v4 & 0x10) != 0 && a1 == a2)
      {
LABEL_18:
        if ((*(_DWORD *)i - 136) <= 0x2D)
        {
          if (((1 << (*(unsigned char *)i + 120)) & 0x1E1) != 0)
          {
            if (*(void *)a1)
            {
              if ((v4 & 8) != 0) {
                char v15 = 86;
              }
              else {
                char v15 = 84;
              }
              **(unsigned char **)a1 = v15;
            }
          }
          else if (((1 << (*(unsigned char *)i + 120)) & 0x280000000400) != 0)
          {
            *((unsigned char *)a1 + 20) = v4 & 8;
          }
          else if (((1 << (*(unsigned char *)i + 120)) & 0x14) != 0)
          {
            *((unsigned char *)a1 + 4) = v4 & 8;
          }
        }
        return (uint64_t)a1;
      }
      int v12 = *(_DWORD *)i;
      if (*(int *)i > 145)
      {
        switch(v12)
        {
          case 172:
            if (!*(void *)(i + 24)) {
              goto LABEL_72;
            }
            uint64_t v28 = a1;
            int v29 = a2;
            uint64_t v30 = v4;
            goto LABEL_84;
          case 173:
            if ((v4 & 0x20) == 0) {
              memcpy_s("posp_memcpy", 29, a1, *(_DWORD *)(i + 8), a2, *(unsigned int *)(i + 8));
            }
            int v31 = *(_DWORD *)(i + 32);
            if (v31 >= 1)
            {
              uint64_t v32 = 0;
              for (uint64_t j = 0; j < v31; ++j)
              {
                uint64_t v34 = *(void *)(i + 24);
                if ((*(unsigned char *)(*(void *)(v34 + v32) + 4) & 4) != 0)
                {
                  GenericAssignSort((char *)a1 + *(unsigned int *)(v34 + v32 + 8), (char *)a2 + *(unsigned int *)(v34 + v32 + 8), v4 & 0xF | 0x20);
                  int v31 = *(_DWORD *)(i + 32);
                }
                v32 += 24;
              }
            }
            goto LABEL_18;
          case 174:
          case 176:
            memset_s(a1, *(unsigned int *)(i + 8), 0, *(unsigned int *)(i + 8));
            uint64_t v13 = *(unsigned int *)(i + 40);
            switch((int)v13)
            {
              case 1:
                int v14 = *(unsigned __int8 *)a2;
                break;
              case 2:
                int v14 = *(__int16 *)a2;
                break;
              default:
                int v14 = *a2;
                break;
            }
            GenericSetValue(v13, a1, v14);
            GenericAssignSort((char *)a1 + *(unsigned int *)(i + 36), (char *)a2 + *(unsigned int *)(i + 36), v4 & 0xF);
            LOBYTE(v4) = v4 & 0x1F;
            goto LABEL_18;
          case 175:
          case 177:
          case 178:
          case 182:
          case 185:
            goto LABEL_72;
          case 179:
          case 180:
          case 181:
            goto LABEL_59;
          case 183:
          case 184:
            if (*(_DWORD *)(i + 32))
            {
              unsigned int v22 = 0;
              do
              {
                uint64_t v23 = *(_DWORD *)(*(void *)(i + 24) + 8) * v22;
                GenericAssignSort((char *)a1 + v23, (char *)a2 + v23, v4 & 0xF);
                ++v22;
              }
              while (v22 < *(_DWORD *)(i + 32));
            }
            goto LABEL_18;
          case 186:
            unsigned int v35 = *(const char **)a2;
            if ((v4 & 1) != 0 && v35)
            {
              uint64_t v28 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(*(void *)(i + 24) + 8));
              *(void *)a1 = v28;
              int v29 = *(int **)a2;
              uint64_t v30 = 9;
LABEL_84:
              GenericAssignSort(v28, v29, v30);
            }
            else
            {
              *(void *)a1 = v35;
              *(void *)a2 = 0;
            }
            goto LABEL_18;
          default:
            if (v12 != 146) {
              goto LABEL_72;
            }
LABEL_59:
            if (a2[4] && ((v4 & 1) != 0 || (v4 & 2) != 0 && *((unsigned char *)a2 + 20)))
            {
              char v24 = *(const char **)a2;
              char v25 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(i + 32));
              *(void *)a1 = v25;
              if (!v25) {
                goto LABEL_87;
              }
              for (uint64_t k = v25; ; uint64_t k = v27)
              {
                GenericAssignSort(&k[*(unsigned int *)(i + 36)], &v24[*(unsigned int *)(i + 36)], v4 & 7 | 8);
                if (*(_DWORD *)i == 180) {
                  *((_DWORD *)k + 2) = *((_DWORD *)v24 + 2);
                }
                char v24 = *(const char **)v24;
                if (!v24) {
                  break;
                }
                char v27 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(i + 32));
                *(void *)uint64_t k = v27;
              }
              *(void *)uint64_t k = 0;
            }
            else
            {
              uint64_t k = (unsigned char *)*((void *)a2 + 1);
              *(void *)a1 = *(void *)a2;
            }
            *((void *)a1 + 1) = k;
LABEL_87:
            a1[4] = a2[4];
            LOBYTE(v4) = v4 & 0x1F;
            break;
        }
        goto LABEL_18;
      }
      if (v12 <= 140)
      {
        if (v12 == 136) {
          goto LABEL_38;
        }
        if (v12 == 138 || v12 == 140)
        {
          size_t v17 = *a2;
          if (v17 && ((v4 & 1) != 0 || (v4 & 2) != 0 && *((unsigned char *)a2 + 4)))
          {
            uint64_t v18 = gnssOsa_Calloc("posp_alloc", 18, 1, v17);
            *((void *)a1 + 1) = v18;
            memcpy_s("posp_memcpy", 29, v18, *a2, *((const void **)a2 + 1), *a2);
          }
          else
          {
            *((void *)a1 + 1) = *((void *)a2 + 1);
          }
          *a1 = *a2;
          goto LABEL_18;
        }
      }
      else if ((v12 - 141) < 4)
      {
LABEL_38:
        int v16 = *(const char **)a2;
        if (*(void *)a2 && ((v4 & 1) != 0 || (v4 & 2) != 0 && *v16 != 84))
        {
          size_t v19 = strnlen(v16, 0x400uLL);
          size_t v20 = (v19 + 1);
          uint64_t v21 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, v20);
          *(void *)a1 = v21;
          strncpy_s(v21, v20, *(const char **)a2, v19);
        }
        else
        {
          *(void *)a1 = v16;
        }
        goto LABEL_18;
      }
LABEL_72:
      memcpy_s("posp_memcpy", 29, a1, *(_DWORD *)(i + 8), a2, *(unsigned int *)(i + 8));
      goto LABEL_18;
    }
  }

  return v9();
}

void GenericFreeSort(void *a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(void (**)(void))(v4 + 16);
      if (v5)
      {
        v5();
        return;
      }
    }
    int v6 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 - 170) >= 2) {
      break;
    }
    a2 = *(void *)(a2 + 24);
  }
  if (v6 > 145)
  {
    switch(v6)
    {
      case 173:
        int v12 = *(_DWORD *)(a2 + 32);
        if (v12 >= 1)
        {
          uint64_t v13 = 0;
          for (uint64_t i = 0; i < v12; ++i)
          {
            uint64_t v15 = *(void *)(a2 + 24);
            if (*(unsigned char *)(*(void *)(v15 + v13) + 4))
            {
              GenericFreeSort((char *)a1 + *(unsigned int *)(v15 + v13 + 8));
              int v12 = *(_DWORD *)(a2 + 32);
            }
            v13 += 24;
          }
        }
        return;
      case 174:
      case 176:
        switch(*(_DWORD *)(a2 + 40))
        {
          case 1:
            int v7 = *(unsigned __int8 *)a1;
            break;
          case 2:
            int v7 = *(__int16 *)a1;
            break;
          default:
            int v7 = *(_DWORD *)a1;
            break;
        }
        if (v7 < *(_DWORD *)(a2 + 32) && (*(unsigned char *)(*(void *)(*(void *)(a2 + 24) + 8 * v7) + 4) & 1) != 0) {
          GenericFreeSort((char *)a1 + *(unsigned int *)(a2 + 36));
        }
        rsize_t v16 = *(unsigned int *)(a2 + 8);
        memset_s(a1, v16, 0, v16);
        return;
      case 175:
      case 177:
      case 178:
      case 182:
      case 185:
        return;
      case 179:
      case 180:
      case 181:
        goto LABEL_33;
      case 183:
      case 184:
        if ((*(unsigned char *)(*(void *)(a2 + 24) + 4) & 1) != 0 && *(_DWORD *)(a2 + 32))
        {
          unsigned int v10 = 0;
          do
            GenericFreeSort((char *)a1 + *(_DWORD *)(*(void *)(a2 + 24) + 8) * v10++);
          while (v10 < *(_DWORD *)(a2 + 32));
        }
        return;
      case 186:
        uint64_t v9 = (void *)*a1;
        if (!*a1) {
          return;
        }
        if (*(unsigned char *)(*(void *)(a2 + 24) + 4))
        {
          ((void (*)(void))GenericFreeSort)();
          uint64_t v9 = (void *)*a1;
          if (!*a1) {
            goto LABEL_19;
          }
        }
        goto LABEL_18;
      default:
        if (v6 == 146)
        {
LABEL_33:
          while (1)
          {
            uint64_t v11 = (void *)*a1;
            if (!*a1) {
              break;
            }
            if (*(unsigned char *)(*(void *)(a2 + 24) + 4)) {
              GenericFreeSort((char *)v11 + *(unsigned int *)(a2 + 36));
            }
            *a1 = *v11;
            free(v11);
          }
        }
        return;
    }
  }
  if (v6 > 140)
  {
    if ((v6 - 141) >= 4) {
      return;
    }
    goto LABEL_17;
  }
  if (v6 == 136)
  {
LABEL_17:
    uint64_t v9 = (void *)*a1;
    if (*a1)
    {
LABEL_18:
      free(v9);
LABEL_19:
      *a1 = 0;
    }
    return;
  }
  if (v6 == 138 || v6 == 140)
  {
    uint64_t v8 = (void *)a1[1];
    if (v8)
    {
      free(v8);
      a1[1] = 0;
    }
  }
}

uint64_t GenericIsAssigned(unsigned __int8 *a1, uint64_t a2)
{
  while (1)
  {
    int v2 = *(_DWORD *)a2;
    if (*(int *)a2 <= 145) {
      break;
    }
    switch(v2)
    {
      case 170:
      case 171:
      case 183:
      case 184:
        a2 = *(void *)(a2 + 24);
        continue;
      case 172:
      case 175:
      case 177:
      case 178:
      case 180:
      case 182:
        return 1;
      case 173:
        uint64_t v4 = *(unsigned int *)(a2 + 32);
        if ((int)v4 < 1) {
          return 1;
        }
        uint64_t v5 = (unsigned int *)(*(void *)(a2 + 24) + 8);
        break;
      case 174:
      case 176:
        switch(*(_DWORD *)(a2 + 40))
        {
          case 1:
            int v3 = *a1;
            break;
          case 2:
            int v3 = *(__int16 *)a1;
            break;
          default:
            int v3 = *(_DWORD *)a1;
            break;
        }
        uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 8 * v3);
        if ((*(unsigned char *)(v6 + 4) & 1) == 0) {
          return 1;
        }
        uint64_t v5 = (unsigned int *)(a2 + 36);
        a2 = v6;
        goto LABEL_15;
      case 179:
      case 181:
        return a1[20];
      default:
        if (v2 != 146) {
          return 1;
        }
        return a1[20];
    }
    while (1)
    {
      a2 = *((void *)v5 - 1);
      if (*(unsigned char *)(a2 + 4)) {
        break;
      }
      v5 += 6;
      if (!--v4) {
        return 1;
      }
    }
LABEL_15:
    a1 += *v5;
  }
  if (v2 <= 140)
  {
    if (v2 != 136)
    {
      if (v2 == 138 || v2 == 140) {
        return a1[4];
      }
      return 1;
    }
  }
  else if ((v2 - 141) >= 4)
  {
    return 1;
  }
  if (*(void *)a1) {
    return **(unsigned __int8 **)a1 != 84;
  }
  return 1;
}

uint64_t GenericEqualSort(unsigned int *a1, char *a2, uint64_t a3)
{
  while (1)
  {
    for (uint64_t i = a3; ; uint64_t i = *(void *)(i + 24))
    {
      uint64_t v6 = *(void *)(i + 16);
      if (v6)
      {
        int v7 = *(uint64_t (**)(unsigned int *, char *))(v6 + 8);
        if (v7)
        {
          return v7(a1, a2);
        }
      }
      int v8 = *(_DWORD *)i;
      if ((*(_DWORD *)i & 0xFFFFFFFE) != 0xAA) {
        break;
      }
    }
    if ((*(unsigned char *)(i + 4) & 2) == 0) {
      break;
    }
    if (v8 <= 145)
    {
      if (v8 <= 140)
      {
        if (v8 == 136) {
          goto LABEL_26;
        }
        if (v8 == 138 || v8 == 140)
        {
          size_t v17 = *a1;
          if (v17 == *(_DWORD *)a2)
          {
            LOBYTE(v16) = 0;
            uint64_t v18 = (const void *)*((void *)a1 + 1);
            if (v18)
            {
              size_t v19 = (const void *)*((void *)a2 + 1);
              if (v19) {
                LOBYTE(v16) = memcmp(v18, v19, v17) == 0;
              }
            }
          }
          else
          {
            LOBYTE(v16) = 0;
          }
          if (!*((unsigned char *)a1 + 4)) {
            GenericFreeSort(a1, i);
          }
          if (a2[4]) {
            return v16;
          }
          goto LABEL_83;
        }
      }
      else if ((v8 - 141) < 4)
      {
LABEL_26:
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1 && strlen(*(const char **)a1) > 1)
        {
          uint64_t v15 = *(const char **)a2;
          if (!*(void *)a2)
          {
            LOBYTE(v16) = 0;
            goto LABEL_74;
          }
          goto LABEL_73;
        }
        uint64_t v15 = *(const char **)a2;
        if (!*(void *)a2 || strlen(*(const char **)a2) < 2)
        {
          LOBYTE(v16) = 1;
          if (!v14)
          {
LABEL_76:
            if (!v15) {
              return v16;
            }
            goto LABEL_77;
          }
LABEL_74:
          if (*(unsigned char *)v14 == 84)
          {
            GenericFreeSort(a1, i);
            uint64_t v15 = *(const char **)a2;
          }
          goto LABEL_76;
        }
        if (v14)
        {
LABEL_73:
          size_t v30 = strlen((const char *)(v14 - 1));
          LOBYTE(v16) = strncmp((const char *)(v14 + 1), v15 + 1, v30) == 0;
          goto LABEL_74;
        }
        LOBYTE(v16) = 0;
LABEL_77:
        if (*v15 != 84) {
          return v16;
        }
LABEL_83:
        GenericFreeSort(a2, i);
        return v16;
      }
LABEL_69:
      LOBYTE(v16) = 0;
      if (!a1 || !a2) {
        return v16;
      }
LABEL_132:
      size_t v23 = *(unsigned int *)(i + 8);
      goto LABEL_133;
    }
    switch(v8)
    {
      case 172:
        a3 = *(void *)(i + 24);
        if (!a3) {
          goto LABEL_69;
        }
        continue;
      case 173:
        LODWORD(v31) = *(_DWORD *)(i + 32);
        if ((int)v31 < 1) {
          goto LABEL_129;
        }
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        BOOL v34 = a1 == 0;
        if (!a2) {
          BOOL v34 = 1;
        }
        BOOL v51 = v34;
        int v16 = 1;
        int v35 = -1;
        while (1)
        {
          uint64_t v36 = *(void *)(i + 24);
          uint64_t v37 = *(unsigned int *)(v36 + v32 + 8);
          if (v37 == -1)
          {
            if ((_BYTE)v16)
            {
              if (v33 == v31 - 1)
              {
                if (v51) {
                  int v40 = 22;
                }
                else {
                  int v40 = memcmp(a1, a2, *(unsigned int *)(i + 8)) != 0;
                }
                int v35 = 0;
                int v16 = v40 == 0;
                goto LABEL_127;
              }
            }
            else
            {
              int v16 = 0;
            }
            int v35 = 0;
          }
          else
          {
            uint64_t v38 = *(void *)(v36 + v32);
            if ((_BYTE)v16 && (v35 & 0x80000000) == 0)
            {
              if (v51) {
                int v39 = 22;
              }
              else {
                int v39 = memcmp(a1, a2, (v37 - 1)) != 0;
              }
              int v16 = v39 == 0;
              int v35 = -1;
            }
            uint64_t v41 = *(int **)(v36 + v32 + 16);
            if (v41)
            {
              int v42 = *v41;
              BOOL v21 = v42 == 0;
              LODWORD(v41) = v42 != 0;
              BOOL v43 = v21 || a2 != 0;
              if (a2) {
                LODWORD(v41) = 0;
              }
              if (!v43)
              {
LABEL_110:
                if (v41) {
                  int v44 = 0;
                }
                else {
                  int v44 = v16;
                }
                if ((_BYTE)v16) {
                  int v16 = v44;
                }
                else {
                  int v16 = 0;
                }
                if (*(unsigned char *)(v38 + 4))
                {
                  if ((v43 | v41) == 1
                    && !GenericIsAssigned((unsigned __int8 *)a1 + v37, v38))
                  {
                    GenericFreeSort((unsigned int *)((char *)a1 + v37), v38);
                  }
                  if (v43 && !GenericIsAssigned((unsigned __int8 *)&a2[v37], v38)) {
                    GenericFreeSort(&a2[v37], v38);
                  }
                }
                goto LABEL_127;
              }
            }
            else
            {
              BOOL v43 = 1;
            }
            if (!(_BYTE)v16) {
              goto LABEL_110;
            }
            int v16 = GenericEqualSort((char *)a1 + v37, &a2[v37], v38);
          }
LABEL_127:
          ++v33;
          uint64_t v31 = *(int *)(i + 32);
          v32 += 24;
          if (v33 >= v31) {
            return v16;
          }
        }
      case 174:
      case 176:
        switch(*(_DWORD *)(i + 40))
        {
          case 1:
            signed int v9 = *(unsigned __int8 *)a1;
            int v10 = *a2;
            break;
          case 2:
            signed int v9 = *(__int16 *)a1;
            int v10 = *(__int16 *)a2;
            break;
          default:
            signed int v9 = *a1;
            int v10 = *(_DWORD *)a2;
            break;
        }
        if (v9 == v10)
        {
          uint64_t v12 = *(unsigned int *)(i + 36);
          a1 = (unsigned int *)((char *)a1 + v12);
          a2 += v12;
          uint64_t v11 = (uint64_t *)(*(void *)(i + 24) + 8 * v9);
          goto LABEL_20;
        }
        uint64_t v46 = *(void *)(i + 24);
        uint64_t v47 = *(void *)(v46 + 8 * v9);
        if (*(unsigned char *)(v47 + 4))
        {
          int v48 = (unsigned __int8 *)a1 + *(unsigned int *)(i + 36);
          if (!GenericIsAssigned(v48, v47))
          {
            GenericFreeSort(v48, v47);
            uint64_t v46 = *(void *)(i + 24);
          }
        }
        uint64_t v49 = *(void *)(v46 + 8 * v10);
        if (*(unsigned char *)(v49 + 4))
        {
          unsigned int v50 = (unsigned __int8 *)&a2[*(unsigned int *)(i + 36)];
          if (!GenericIsAssigned(v50, *(void *)(v46 + 8 * v10))) {
            GenericFreeSort(v50, v49);
          }
        }
LABEL_131:
        LOBYTE(v16) = 0;
        return v16;
      case 175:
      case 177:
      case 178:
      case 179:
      case 180:
      case 182:
      case 185:
        goto LABEL_69;
      case 181:
        goto LABEL_57;
      case 183:
      case 184:
        if (*(_DWORD *)(i + 32))
        {
          unsigned int v20 = 0;
          LOBYTE(v16) = 1;
          do
          {
            if (!GenericEqualSort((char *)a1 + *(_DWORD *)(*(void *)(i + 24) + 8) * v20, &a2[*(_DWORD *)(*(void *)(i + 24) + 8) * v20], *(void *)(i + 24)))LOBYTE(v16) = 0; {
            ++v20;
            }
          }
          while (v20 < *(_DWORD *)(i + 32));
        }
        else
        {
LABEL_129:
          LOBYTE(v16) = 1;
        }
        return v16;
      case 186:
        a1 = *(unsigned int **)a1;
        a2 = *(char **)a2;
        if (!a1)
        {
          BOOL v45 = a2 == 0;
LABEL_134:
          LOBYTE(v16) = v45;
          return v16;
        }
        if (!a2) {
          goto LABEL_131;
        }
        uint64_t v11 = (uint64_t *)(i + 24);
LABEL_20:
        a3 = *v11;
        break;
      default:
        if (v8 != 146) {
          goto LABEL_69;
        }
LABEL_57:
        unsigned int v24 = a1[4];
        int v25 = *((_DWORD *)a2 + 4);
        LOBYTE(v16) = v24 == v25;
        if (v24 == v25)
        {
          uint64_t v26 = *(void **)a1;
          if (*(void *)a1)
          {
            char v27 = a2;
            do
            {
              char v27 = (void *)*v27;
              int v28 = GenericEqualSort((char *)v26 + *(unsigned int *)(i + 36), (char *)v27 + *(unsigned int *)(i + 36), *(void *)(i + 24));
              LOBYTE(v16) = v28 != 0;
              uint64_t v26 = (void *)*v26;
              if (v28) {
                BOOL v29 = v26 == 0;
              }
              else {
                BOOL v29 = 1;
              }
            }
            while (!v29);
          }
        }
        if (!*((unsigned char *)a1 + 20)) {
          GenericFreeSort(a1, i);
        }
        if (!a2[20]) {
          goto LABEL_83;
        }
        return v16;
    }
  }
  if (a1) {
    BOOL v21 = a2 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  char v22 = v21;
  if (v8 != 128)
  {
    if (v22) {
      goto LABEL_131;
    }
    goto LABEL_132;
  }
  if (v22) {
    goto LABEL_131;
  }
  size_t v23 = *(unsigned int *)(a3 + 8);
LABEL_133:
  BOOL v45 = memcmp(a1, a2, v23) == 0;
  goto LABEL_134;
}

void GenBag_Incl2(int *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(*(void *)(a3 + 24) + 8));
  GenericAssignSort(v6, a1, 10, *(void *)(a3 + 24));
  uint64_t v7 = *(void *)(a3 + 24);
  if (GenericIsAssigned((unsigned __int8 *)v6, v7))
  {
    int v8 = a2;
    while (1)
    {
      int v8 = *(char **)v8;
      if (!v8) {
        goto LABEL_14;
      }
      if (GenericEqualSort((unsigned int *)v6, &v8[*(unsigned int *)(a3 + 36)], *(void *)(a3 + 24))) {
        goto LABEL_12;
      }
    }
  }
  signed int v9 = (int *)gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(v7 + 8));
  GenericAssignSort(v9, v6, 10, *(void *)(a3 + 24));
  int v8 = a2;
  do
    int v8 = *(char **)v8;
  while (v8
       && !GenericEqualSort((unsigned int *)v9, &v8[*(unsigned int *)(a3 + 36)], *(void *)(a3 + 24)));
  GenericFreeSort(v9, *(void *)(a3 + 24));
  if (v9) {
    free(v9);
  }
  if (!v8)
  {
LABEL_14:
    uint64_t v10 = *((void *)a2 + 1);
    uint64_t v11 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(a3 + 32));
    uint64_t v12 = a2;
    if (v10) {
      uint64_t v12 = (char *)*((void *)a2 + 1);
    }
    *(void *)uint64_t v12 = v11;
    *((void *)a2 + 1) = v11;
    GenericAssignSort((int *)&v11[*(unsigned int *)(a3 + 36)], v6, 12, *(void *)(a3 + 24));
    uint64_t v13 = *((void *)a2 + 1);
    *(void *)uint64_t v13 = 0;
    if (*(_DWORD *)a3 == 180) {
      *(_DWORD *)(v13 + 8) = 1;
    }
    goto LABEL_18;
  }
LABEL_12:
  GenericFreeSort(v6, *(void *)(a3 + 24));
  if (*(_DWORD *)a3 != 180) {
    goto LABEL_19;
  }
  ++*((_DWORD *)v8 + 2);
LABEL_18:
  ++*((_DWORD *)a2 + 4);
LABEL_19:
  if (v6)
  {
    free(v6);
  }
}

uint64_t SimUtils::GetInstance(SimUtils *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (SimUtils::GetInstance(void)::pred_simUtils != -1) {
    dispatch_once(&SimUtils::GetInstance(void)::pred_simUtils, &__block_literal_global_5);
  }
  uint64_t result = SimUtils::m_sim_utils;
  if (!SimUtils::m_sim_utils)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GetInstance", "GetInstance");
      LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GetInstance", "SimUtils.cpp", 47, "false && \"Memory allocation failure\"");
  }
  return result;
}

void *___ZN8SimUtils11GetInstanceEv_block_invoke()
{
  uint64_t result = operator new(0x18uLL, MEMORY[0x263F8C180]);
  if (result)
  {
    *(_DWORD *)uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  SimUtils::m_sim_utils = (uint64_t)result;
  return result;
}

char *SimUtils::CreateAndAddSimIdNode(SimUtils *this, int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    unsigned int v5 = 0;
    uint64_t v6 = *((void *)this + 2);
    do
    {
      ++v5;
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
    if (v5 >= 3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No slots available for storing SimId\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "CreateAndAddSimIdNode", 2054);
        LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
      }
      return 0;
    }
  }
  uint64_t result = (char *)operator new(0xF0uLL, MEMORY[0x263F8C180]);
  if (!result)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "CreateAndAddSimIdNode", 1537);
      LbsOsaTrace_WriteLog(0x12u, __str, v13, 0, 1);
    }
    return 0;
  }
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_WORD *)result + 24) = 7275;
  result[64] = 0;
  *(_DWORD *)(result + 66) = -1;
  *((_WORD *)result + 36) = 0;
  *((void *)result + 11) = 0;
  *((void *)result + 12) = 0;
  result[104] = 0;
  *((void *)result + 10) = 0;
  result[113] = 0;
  *(void *)(result + 116) = -1;
  *((_WORD *)result + 64) = 0;
  *((_DWORD *)result + 33) = -65536;
  *((void *)result + 18) = 0;
  *((void *)result + 19) = 0;
  *(void *)(result + 158) = 0;
  *((void *)result + 17) = 0;
  *((void *)result + 22) = 0;
  *((void *)result + 23) = 0;
  *((void *)result + 21) = 0;
  result[192] = 1;
  *((void *)result + 26) = 0;
  *((void *)result + 27) = 0;
  *((_WORD *)result + 104) = -1;
  *((void *)result + 28) = 0;
  *((void *)result + 29) = 0;
  uint64_t v10 = v4;
  *(_DWORD *)uint64_t result = a2;
  while (v10)
  {
    uint64_t v11 = v10;
    uint64_t v10 = *(void *)(v10 + 8);
    if (!v10)
    {
      *(void *)(v11 + 8) = result;
      *((void *)result + 1) = 0;
      return result;
    }
  }
  *((void *)result + 1) = v4;
  *((void *)this + 2) = result;
  return result;
}

uint64_t SimUtils::SetSlpInfo(SimUtils *a1, int a2, uint64_t a3)
{
  uint64_t v4 = (char *)*((void *)a1 + 2);
  if (v4)
  {
    while (*(_DWORD *)v4 != a2)
    {
      uint64_t v4 = (char *)*((void *)v4 + 1);
      if (!v4) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    uint64_t v4 = SimUtils::CreateAndAddSimIdNode(a1, a2);
    if (!v4) {
      return -1;
    }
  }
  v4[16] = *(unsigned char *)a3;
  std::string::operator=((std::string *)v4 + 1, (const std::string *)(a3 + 8));
  __int16 v5 = 0;
  *((_WORD *)v4 + 24) = *(_WORD *)(a3 + 32);
  return v5;
}

uint64_t SimUtils::GetSlpFqdn(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_15:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "GetSlpFqdn", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
    }
    return -1;
  }
  while (*(_DWORD *)v4 != a4)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (!v4) {
      goto LABEL_15;
    }
  }
  memset(&__p, 0, sizeof(__p));
  __int16 v13 = 7275;
  __str[0] = *(unsigned char *)(v4 + 16);
  std::string::operator=(&__p, (const std::string *)(v4 + 24));
  __int16 v13 = *(_WORD *)(v4 + 48);
  if (!__str[0]
    || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]))
      : (std::string::size_type size = __p.__r_.__value_.__l.__size_),
        !size))
  {
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_15;
  }
  *(unsigned char *)a2 = __str[0];
  std::string::operator=((std::string *)(a2 + 8), &__p);
  *(_WORD *)(a2 + 32) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_22B9992BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t SimUtils::UpdateLocationIdInfo(SimUtils *a1, int a2, uint64_t a3)
{
  unint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    while (*(_DWORD *)v4 != a2)
    {
      unint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    unint64_t result = (unint64_t)SimUtils::CreateAndAddSimIdNode(a1, a2);
    unint64_t v4 = result;
    if (!result) {
      return result;
    }
  }
  ASN1T_LocationId::operator=(v4 + 56, a3);
  unint64_t result = mach_continuous_time();
  *(_DWORD *)(v4 + 200) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result);
  return result;
}

BOOL SimUtils::IsItCampedOnLte(SimUtils *this, int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  while (*(_DWORD *)v2 != a2)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
  return *(unsigned char *)(v2 + 56) == 4 && (unsigned __int16 v3 = *(_WORD **)(v2 + 184)) != 0 && *v3 == 3;
}

uint64_t SimInformation::IsLocIdValid(SimInformation *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 56))
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfo\n");
    goto LABEL_7;
  }
  int v1 = *((_DWORD *)this + 50);
  if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v1 >= 0x1389)
  {
    int v2 = LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0);
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx time diff is greater than 5000 millisecs value,%d\n", v6);
LABEL_7:
    LbsOsaTrace_WriteLog(0x12u, __str, v4, 2, 1);
    return 0;
  }
  return 1;
}

uint64_t SimInformation::IsSETIdValid(SimInformation *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*((__int16 *)this + 104) != -1) {
    return 1;
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SET ID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "IsSETIdValid", 770);
    LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
    return 0;
  }
  return result;
}

char *SimUtils::SetSETInfo(char *result, int a2, uint64_t a3)
{
  uint64_t v4 = *((void *)result + 2);
  if (!v4)
  {
LABEL_4:
    uint64_t result = SimUtils::CreateAndAddSimIdNode((SimUtils *)result, a2);
    if (!result) {
      return result;
    }
    *((_WORD *)result + 104) = *(_WORD *)a3;
    if (result + 208 == (char *)a3) {
      return result;
    }
    __int16 v5 = *(char **)(a3 + 8);
    uint64_t v6 = *(char **)(a3 + 16);
    uint64_t v7 = result + 216;
    goto LABEL_9;
  }
  while (*(_DWORD *)v4 != a2)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (!v4) {
      goto LABEL_4;
    }
  }
  *(_WORD *)(v4 + 208) = *(_WORD *)a3;
  if (v4 + 208 != a3)
  {
    __int16 v5 = *(char **)(a3 + 8);
    uint64_t v6 = *(char **)(a3 + 16);
    uint64_t v7 = (void *)(v4 + 216);
LABEL_9:
    return (char *)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v7, v5, v6, v6 - v5);
  }
  return result;
}

void *SimUtils::GetSETInfo(void *result, int a2, uint64_t a3)
{
  uint64_t v3 = result[2];
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        return result;
      }
    }
    *(_WORD *)a3 = *(_WORD *)(v3 + 208);
    if (v3 + 208 != a3)
    {
      uint64_t v4 = *(char **)(v3 + 216);
      __int16 v5 = *(char **)(v3 + 224);
      return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a3 + 8), v4, v5, v5 - v4);
    }
  }
  return result;
}

uint64_t GNSS_Event_Log_Ctl(uint64_t result)
{
  if (result)
  {
    if (g_Enable_Event_Log)
    {
      int v1 = (char **)result;
      **(unsigned char **)uint64_t result = 0;
      uint64_t v3 = *(char **)result;
      int v2 = *(char **)(result + 8);
      if (v2 != *(char **)result)
      {
        uint64_t v4 = *(char **)result;
        if ((unint64_t)v2 > *(void *)result) {
          uint64_t v4 = *(char **)(result + 24);
        }
        unsigned __int16 v5 = (_WORD)v4 - (_WORD)v2;
        if ((_WORD)v4 == (_WORD)v2)
        {
          if ((unint64_t)v2 < *(void *)(result + 24)) {
            goto LABEL_13;
          }
          int v2 = *(char **)(result + 16);
          *(void *)(result + 8) = v2;
        }
        else
        {
          uint64_t result = GN_GPS_Write_Event_Log((unsigned __int16)((_WORD)v4 - (_WORD)v2), v2);
          int v2 = &v1[1][result];
          v1[1] = v2;
          if (v2 < v1[3]) {
            goto LABEL_13;
          }
          int v2 = v1[2];
          v1[1] = v2;
          if (result != v5) {
            goto LABEL_13;
          }
          uint64_t v3 = *v1;
        }
        uint64_t result = GN_GPS_Write_Event_Log((unsigned __int16)((_WORD)v3 - (_WORD)v2), v2);
        int v2 = &v1[1][result];
        v1[1] = v2;
LABEL_13:
        if (v2 == *v1)
        {
          uint64_t v6 = v1[2];
          const void *v1 = v6;
          v1[1] = v6;
        }
      }
    }
  }
  return result;
}

const double *ud2cov(const double *a1, double *a2, unsigned int a3)
{
  uint64_t v4 = *(void *)a1;
  uint64_t result = a1 - 1;
  *(void *)a2 = v4;
  unsigned __int16 v5 = a2 - 1;
  if (a3 >= 2)
  {
    if (a3 + 1 > 3) {
      uint64_t v6 = a3 + 1;
    }
    else {
      uint64_t v6 = 3;
    }
    int v7 = 1;
    int v8 = 2;
    unint64_t v9 = 2;
    do
    {
      int v10 = 0;
      int v11 = v7 + v9;
      double v12 = result[(v7 + v9)];
      v5[(v7 + v9)] = v12;
      int v13 = v8;
      uint64_t v14 = 1;
      do
      {
        uint64_t v15 = 0;
        v10 += v14;
        uint64_t v16 = (v7 + v14);
        double v17 = v12 * result[v16];
        int v18 = v10;
        do
        {
          v5[v18] = v5[v18] + v17 * result[(v13 + v15)];
          v18 += v14 + v15++;
        }
        while (v14 + v15 < v9);
        v5[v16] = v17;
        ++v14;
        ++v13;
      }
      while (v14 != v9);
      v8 += v9++;
      int v7 = v11;
    }
    while (v9 != v6);
  }
  return result;
}

uint64_t DOP4_Upd_U_Meas(uint64_t result, double (*a2)[4])
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  do
  {
    uint64_t v4 = 0;
    double v5 = (*a2)[v2 + 12];
    uint64_t v6 = (double *)v3;
    do
    {
      double v7 = *v6;
      v6 += 4;
      double v5 = v5 + *(double *)(result + v4) * v7;
      v4 += 8;
    }
    while (v4 != 24);
    v18[v2++] = v5;
    uint64_t v3 = (double (*)[4])((char *)v3 + 8);
  }
  while (v2 != 4);
  uint64_t v8 = 0;
  double v9 = v19;
  do
  {
    double v9 = v9 + v18[v8] * *(double *)(result + v8 * 8);
    ++v8;
  }
  while (v8 != 3);
  uint64_t v10 = 0;
  int v11 = a2;
  double v12 = a2;
  double v13 = -1.0 / (v9 + 1.0);
  do
  {
    double v14 = v18[v10];
    (*a2)[4 * v10 + v10] = (*a2)[4 * v10 + v10] + v13 * v14 * v14;
    if (v10)
    {
      uint64_t v15 = 0;
      uint64_t v16 = (double *)v12;
      do
      {
        double v17 = (*v11)[v15] + v13 * v14 * v18[v15];
        (*v11)[v15] = v17;
        *uint64_t v16 = v17;
        v16 += 4;
        ++v15;
      }
      while (v10 != v15);
    }
    ++v10;
    double v12 = (double (*)[4])((char *)v12 + 8);
    ++v11;
  }
  while (v10 != 4);
  return result;
}

BOOL DOP4_Upd_W_Meas(double *a1, double a2, double (*a3)[4])
{
  uint64_t v4 = 0;
  v24[5] = *(double *)MEMORY[0x263EF8340];
  double v5 = a3;
  do
  {
    uint64_t v6 = 0;
    double v7 = (*a3)[v4 + 12];
    uint64_t v8 = (double *)v5;
    do
    {
      double v9 = *v8;
      v8 += 4;
      double v7 = v7 + a1[v6++] * v9;
    }
    while (v6 != 3);
    v24[++v4] = v7;
    double v5 = (double (*)[4])((char *)v5 + 8);
  }
  while (v4 != 4);
  uint64_t v10 = 0;
  double v11 = v24[4];
  do
  {
    double v11 = v11 + v24[v10 + 1] * a1[v10];
    ++v10;
  }
  while (v10 != 3);
  double v12 = v11 + a2;
  v24[0] = v11 + a2;
  double v23 = 0.0;
  BOOL result = R8_EQ(v24, &v23);
  uint64_t v14 = 0;
  double v15 = 1.0 / v12;
  if (result) {
    double v15 = 0.0;
  }
  double v16 = -v15;
  double v17 = a3;
  int v18 = a3;
  do
  {
    double v19 = v24[v14 + 1];
    (*a3)[4 * v14 + v14] = (*a3)[4 * v14 + v14] + v19 * v16 * v19;
    if (v14)
    {
      uint64_t v20 = 0;
      BOOL v21 = (double *)v18;
      do
      {
        double v22 = (*v17)[v20] + v19 * v16 * v24[v20 + 1];
        (*v17)[v20] = v22;
        *BOOL v21 = v22;
        v21 += 4;
        ++v20;
      }
      while (v14 != v20);
    }
    ++v14;
    int v18 = (double (*)[4])((char *)v18 + 8);
    ++v17;
  }
  while (v14 != 4);
  return result;
}

uint64_t DOP4_Upd_U_Elem(uint64_t result, double (*a2)[4])
{
  uint64_t v2 = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = &(*a2)[result + 4];
  do
  {
    *(double *)&long long v4 = *(v3 - 4);
    *((double *)&v4 + 1) = *v3;
    *(_OWORD *)&v13[v2] = v4;
    v3 += 8;
    v2 += 2;
  }
  while (v2 != 4);
  uint64_t v5 = 0;
  double v6 = -1.0 / ((*a2)[4 * result + result] + 1.0);
  double v7 = a2;
  uint64_t v8 = a2;
  do
  {
    double v9 = v13[v5];
    (*a2)[4 * v5 + v5] = (*a2)[4 * v5 + v5] + v6 * v9 * v9;
    if (v5)
    {
      uint64_t v10 = 0;
      double v11 = (double *)v8;
      do
      {
        double v12 = (*v7)[v10] + v6 * v9 * v13[v10];
        (*v7)[v10] = v12;
        *double v11 = v12;
        v11 += 4;
        ++v10;
      }
      while (v5 != v10);
    }
    ++v5;
    uint64_t v8 = (double (*)[4])((char *)v8 + 8);
    ++v7;
  }
  while (v5 != 4);
  return result;
}

double *DOP4_Calc_U(double *result, double *a2)
{
  double v2 = 0.0;
  double v3 = 0.0;
  if (*result > 0.0)
  {
    double v3 = sqrt(*result);
    if (v3 > 99.99) {
      double v3 = 99.99;
    }
  }
  *a2 = v3;
  double v4 = result[5];
  if (v4 > 0.0)
  {
    double v2 = sqrt(v4);
    if (v2 > 99.99) {
      double v2 = 99.99;
    }
  }
  a2[1] = v2;
  double v5 = *result + result[5];
  double v6 = 0.0;
  double v7 = 0.0;
  if (v5 > 0.0)
  {
    double v7 = sqrt(v5);
    if (v7 > 99.99) {
      double v7 = 99.99;
    }
  }
  a2[2] = v7;
  double v8 = result[10];
  if (v8 > 0.0)
  {
    double v6 = sqrt(v8);
    if (v6 > 99.99) {
      double v6 = 99.99;
    }
  }
  a2[3] = v6;
  double v9 = *result + result[5] + result[10];
  double v10 = 0.0;
  double v11 = 0.0;
  if (v9 > 0.0)
  {
    double v11 = sqrt(v9);
    if (v11 > 99.99) {
      double v11 = 99.99;
    }
  }
  a2[4] = v11;
  double v12 = *result + result[5] + result[10] + result[15];
  if (v12 > 0.0)
  {
    double v10 = sqrt(v12);
    if (v10 > 99.99) {
      double v10 = 99.99;
    }
  }
  a2[6] = v10;
  double v13 = result[15];
  double v14 = 0.0;
  if (v13 > 0.0)
  {
    double v14 = sqrt(v13);
    if (v14 > 99.99) {
      double v14 = 99.99;
    }
  }
  a2[5] = v14;
  return result;
}

void GN_SUPL_Handler_Init(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  LcsFunctionEntryExitTrace::LcsFunctionEntryExitTrace((LcsFunctionEntryExitTrace *)v4, 55, "GN_SUPL_Handler_Init");
  uint64_t Instance = LcsSuplGlueLayer::GetInstance(v0);
  if (Instance)
  {
    *(_DWORD *)(Instance + 16) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "SPL", 69, "GN_SUPL_Handler_Init", 1537);
    LbsOsaTrace_WriteLog(0x12u, __str, v3, 0, 1);
  }
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace(v4);
}

void sub_22B99A098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace((void **)va);
  _Unwind_Resume(a1);
}

void GN_SUPL_Handler_DeInit(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  LcsFunctionEntryExitTrace::LcsFunctionEntryExitTrace((LcsFunctionEntryExitTrace *)v3, 71, "GN_SUPL_Handler_DeInit");
  if (!LcsSuplGlueLayer::GetInstance(v0) && LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "SPL", 69, "GN_SUPL_Handler_DeInit", 1537);
    LbsOsaTrace_WriteLog(0x12u, __str, v2, 0, 1);
  }
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace(v3);
}

void sub_22B99A1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace((void **)va);
  _Unwind_Resume(a1);
}

void GN_SUPL_Handler(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  LcsFunctionEntryExitTrace::LcsFunctionEntryExitTrace((LcsFunctionEntryExitTrace *)v4, 87, "GN_SUPL_Handler");
  uint64_t Instance = (SuplProvider *)LcsSuplGlueLayer::GetInstance(v0);
  if (Instance)
  {
    SUPL_Message_Handler(Instance);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "SPL", 69, "GN_SUPL_Handler", 1537);
    LbsOsaTrace_WriteLog(0x12u, __str, v3, 0, 1);
  }
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace(v4);
}

void sub_22B99A2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace((void **)va);
  _Unwind_Resume(a1);
}

BOOL GN_SUPL_Connect_Ind_In(int a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  Trace_GN_SUPL_Connect_Ind_In(a1, a2);
  double v4 = SUPL_Message_Init();
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 5) = a1;
    v4[16] = 0;
    *((_DWORD *)v4 + 7) = a2;
    uint64_t v6 = qword_2684657F8;
    double v7 = (uint64_t *)(qword_2684657F8 + 8);
    if (!qword_2684657F8) {
      double v7 = &SUPL_Queue;
    }
    *double v7 = (uint64_t)v4;
    qword_2684657F8 = (uint64_t)v4;
    *(void *)double v4 = v6;
    *((void *)v4 + 1) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "GN_SUPL_Connect_Ind_In", 1537);
    LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
  }
  return v5 != 0;
}

uint64_t GN_SUPL_Disconnect_Ind_In(int a1, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Handle,%u,status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 73, "GN_SUPL_Disconnect_Ind_In", a1, a2);
    LbsOsaTrace_WriteLog(0x12u, __str, v5, 4, 1);
  }
  uint64_t v6 = SUPL_Message_Init();
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = (uint64_t)v6;
  uint64_t Instance = (LcsSuplGlueLayer *)LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)v6);
  if (!Instance) {
    goto LABEL_12;
  }
  if ((a2 - 10) >= 5 && a2 != 16)
  {
    if (a1) {
      LcsSuplGlueLayer::DeleteSessionInfo(Instance, a1);
    }
LABEL_12:
    uint64_t v9 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Disconnect request Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "GN_SUPL_Disconnect_Ind_In", 2305);
      LbsOsaTrace_WriteLog(0x12u, __str, v13, 0, 1);
      return 0;
    }
    return v9;
  }
  *(_DWORD *)(v7 + 20) = a1;
  uint64_t v9 = 1;
  *(unsigned char *)(v7 + 16) = 1;
  *(_DWORD *)(v7 + 28) = a2;
  uint64_t v10 = qword_2684657F8;
  double v11 = (uint64_t *)(qword_2684657F8 + 8);
  if (!qword_2684657F8) {
    double v11 = &SUPL_Queue;
  }
  *double v11 = v7;
  qword_2684657F8 = v7;
  *(void *)uint64_t v7 = v10;
  *(void *)(v7 + 8) = 0;
  LcsSuplGlueLayer::SendSuplConnectionStatus((uint64_t)Instance, a1, a2);
  return v9;
}

uint64_t GN_SUPL_Push_Delivery_In(unsigned int *a1, unsigned int a2, unsigned __int8 *a3, int a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  Trace_GN_SUPL_Push_Delivery_In(a1, a2, a3);
  if (!a2 || !a3)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PDU is NULL or PDU Size is Zero\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "SPL", 69, "GN_SUPL_Push_Delivery_In", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v18, 0, 1);
    return 0;
  }
  uint64_t Instance = (LcsUtils *)LcsUtils::GetInstance(v8);
  IsItDuplicateSession = (LcsUtils *)LcsUtils::IsItDuplicateSession(Instance, (char *)a3, a2);
  if (IsItDuplicateSession == 1)
  {
    double v11 = (LcsSuplGlueLayer *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (v11)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ignoring the SUPL INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "GN_SUPL_Push_Delivery_In", 2053);
      double v11 = (LcsSuplGlueLayer *)LbsOsaTrace_WriteLog(0x12u, __str, v13, 0, 1);
    }
LABEL_6:
    uint64_t v14 = LcsSuplGlueLayer::GetInstance(v11);
    LcsSuplGlueLayer::SendSuplMsgStatus(v14, 0, 2, 0, 0, 0);
    return 0;
  }
  double v19 = (SuplUtils *)LcsUtils::GetInstance(IsItDuplicateSession);
  uint64_t v20 = (SuplUtils *)SuplUtils::GetInstance(v19);
  if (!SuplUtils::IsSETInfoValid(v20, a4))
  {
    double v11 = (LcsSuplGlueLayer *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (v11)
    {
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Either SET ID or LocationID is not received in SUPL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "SPL", 69, "GN_SUPL_Push_Delivery_In", 515);
      double v11 = (LcsSuplGlueLayer *)LbsOsaTrace_WriteLog(0x12u, __str, v31, 0, 1);
    }
    goto LABEL_6;
  }
  BOOL v21 = operator new(0x18uLL, MEMORY[0x263F8C180]);
  if (!v21)
  {
    int v32 = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    uint64_t result = 0;
    if (!v32) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v33 = mach_continuous_time();
    unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL Session\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "SPL", 69, "GN_SUPL_Push_Delivery_In", 1537);
    LbsOsaTrace_WriteLog(0x12u, __str, v34, 0, 1);
    return 0;
  }
  uint64_t v22 = (uint64_t)v21;
  v21[1] = 0;
  *(_DWORD *)BOOL v21 = 0;
  *((_DWORD *)v21 + 4) = 0;
  double v23 = (LcsSuplGlueLayer *)LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)v21);
  if (!v23)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v35 = mach_continuous_time();
      unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Glue layer Instance is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "SPL", 69, "GN_SUPL_Push_Delivery_In", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v36, 0, 1);
    }
    goto LABEL_23;
  }
  uint64_t v24 = (uint64_t)v23;
  unsigned int RequestId = LcsSuplGlueLayer::GenerateRequestId(v23);
  *(_DWORD *)uint64_t v22 = RequestId;
  *(_DWORD *)(v22 + 16) = RequestId;
  *a1 = RequestId;
  LcsSuplGlueLayer::PushSessionInfo(v24, v22);
  uint64_t v26 = SUPL_Message_Init();
  if (!v26)
  {
LABEL_23:
    *(void *)(v22 + 8) = 0;
    MEMORY[0x230F4E5D0](v22, 0x1020C40903548AELL);
    return 0;
  }
  uint64_t v27 = (uint64_t)v26;
  *((_DWORD *)v26 + 5) = *a1;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v26 + 5, (char *)a3, (char *)&a3[a2], a2);
  *(unsigned char *)(v27 + 32) = a4;
  *(unsigned char *)(v27 + 16) = 2;
  uint64_t v28 = qword_2684657F8;
  BOOL v29 = (uint64_t *)(qword_2684657F8 + 8);
  if (!qword_2684657F8) {
    BOOL v29 = &SUPL_Queue;
  }
  *BOOL v29 = v27;
  qword_2684657F8 = v27;
  *(void *)uint64_t v27 = v28;
  *(void *)(v27 + 8) = 0;
  return 1;
}

uint64_t GN_SUPL_PDU_Delivery_In(int a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a2 || !a3)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PDU is NULL or PDU Size is Zero\n");
LABEL_11:
    LbsOsaTrace_WriteLog(0x12u, __str, v12, 0, 1);
    return 0;
  }
  Trace_GN_SUPL_PDU_Delivery_In(a1, a2, a3);
  uint64_t v6 = SUPL_Message_Init();
  if (!v6)
  {
    int v13 = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_11;
  }
  uint64_t v7 = (uint64_t)v6;
  *((_DWORD *)v6 + 5) = a1;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v6 + 8, (char *)a3, (char *)&a3[a2], a2);
  *(unsigned char *)(v7 + 16) = 3;
  uint64_t v8 = qword_2684657F8;
  uint64_t v9 = (uint64_t *)(qword_2684657F8 + 8);
  if (!qword_2684657F8) {
    uint64_t v9 = &SUPL_Queue;
  }
  *uint64_t v9 = v7;
  qword_2684657F8 = v7;
  *(void *)uint64_t v7 = v8;
  *(void *)(v7 + 8) = 0;
  return 1;
}

BOOL GN_SUPL_Set_Config(unsigned __int16 *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = (SuplUtils *)Trace_GN_SUPL_Set_Config(a1);
  if (a1)
  {
    char v3 = *((unsigned char *)a1 + 14);
    uint64_t Instance = (SuplUtils *)SuplUtils::GetInstance(v2);
    *((unsigned char *)Instance + 279) = v3;
    unsigned __int16 v5 = (SuplUtils *)SuplUtils::GetInstance(Instance);
    *((_DWORD *)v5 + 6) = 1000 * *a1;
    uint64_t v6 = (SuplUtils *)SuplUtils::GetInstance(v5);
    *((_DWORD *)v6 + 7) = 1000 * a1[1];
    uint64_t v7 = (SuplUtils *)SuplUtils::GetInstance(v6);
    *((_DWORD *)v7 + 8) = 1000 * a1[2];
    *(_WORD *)(SuplUtils::GetInstance(v7) + 38) = a1[6];
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "GN_SUPL_Set_Config", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
  }
  return a1 != 0;
}

BOOL GN_SUPL_Set_SlpInfo(unsigned __int8 *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  Trace_gnsDC_SlpInfo((uint64_t)a1);
  if (a1)
  {
    v15[0] = 0;
    __p[1] = 0;
    uint64_t v17 = 0;
    __p[0] = 0;
    __int16 v18 = 7275;
    switch(*((_DWORD *)a1 + 65))
    {
      case 0:
        int IsLoggingAllowed = (SimUtils *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v3 = mach_continuous_time();
          unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SLP Addr Type is not set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "GN_SUPL_Set_SlpInfo", 770);
          int IsLoggingAllowed = (SimUtils *)LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
        }
        break;
      case 1:
        char v9 = 2;
        goto LABEL_13;
      case 2:
        char v9 = 1;
        goto LABEL_13;
      case 3:
        char v9 = 4;
LABEL_13:
        v15[0] = v9;
        int IsLoggingAllowed = (SimUtils *)MEMORY[0x230F4E3E0](__p, a1 + 1);
        break;
      default:
        int IsLoggingAllowed = (SimUtils *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v7 = mach_continuous_time();
          unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SLP Addr Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "GN_SUPL_Set_SlpInfo", 515, *((_DWORD *)a1 + 65));
          int IsLoggingAllowed = (SimUtils *)LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
        }
        break;
    }
    __int16 v18 = *((_WORD *)a1 + 133);
    uint64_t Instance = (SimUtils *)SimUtils::GetInstance(IsLoggingAllowed);
    int v11 = SimUtils::SetSlpInfo(Instance, *a1, (uint64_t)v15);
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SetSlpInfo fn return value,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 73, "GN_SUPL_Set_SlpInfo", v11);
      LbsOsaTrace_WriteLog(0x12u, __str, v13, 4, 1);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "GN_SUPL_Set_SlpInfo", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
  }
  return a1 != 0;
}

void sub_22B99B134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL GN_SUPL_Set_SetIdParams(uint64_t a1, int a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unsigned __int16 v4 = (SuplUtils *)Trace_GN_SUPL_SetIdParams(a1);
  if (a1)
  {
    std::string __p = 0;
    unsigned __int16 v31 = 0;
    uint64_t v32 = 0;
    __int16 v29 = -1;
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::size_type v10 = *(void *)(a1 + 8);
      if (v10)
      {
        __int16 v29 = 1;
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a1, v10);
        uint64_t v5 = (char *)__p;
        unsigned __int16 v6 = v31;
        goto LABEL_9;
      }
    }
    else if (*(unsigned char *)(a1 + 23))
    {
      uint64_t v5 = 0;
      unsigned __int16 v6 = 0;
      __int16 v29 = 1;
      std::string v28 = *(std::string *)a1;
LABEL_9:
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      __str[0] = -1;
      unint64_t v12 = v6 - v5;
      if (v12 > 7)
      {
        if (v12 != 8) {
          unsigned __int16 v31 = v5 + 8;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(&__p, 8 - v12, __str);
      }
      if (size)
      {
        unint64_t v13 = 0;
        std::string::size_type v14 = 0;
        std::string::size_type v15 = size - 1;
        while (1)
        {
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v16 = (std::string *)v28.__r_.__value_.__r.__words[0];
            unsigned int v17 = *(unsigned __int8 *)(v28.__r_.__value_.__r.__words[0] + v14) - 48;
            if (v17 >= 0xA) {
              LOBYTE(v17) = -1;
            }
            if (v15 != v14)
            {
              uint64_t v18 = v14 + 1;
LABEL_28:
              char v19 = v16->__r_.__value_.__s.__data_[v18] - 48;
              if ((v19 & 0xFEu) >= 0xA) {
                char v19 = -1;
              }
              goto LABEL_30;
            }
          }
          else
          {
            uint64_t v16 = &v28;
            unsigned int v17 = v28.__r_.__value_.__s.__data_[v14] - 48;
            if (v17 >= 0xA) {
              LOBYTE(v17) = -1;
            }
            if (v15 != v14)
            {
              uint64_t v18 = v14 | 1;
              goto LABEL_28;
            }
          }
          char v19 = -1;
LABEL_30:
          *((unsigned char *)__p + v13) = v17 | (16 * v19);
          v14 += 2;
          if (v14 < size && v13++ < 7) {
            continue;
          }
          break;
        }
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
    }
    uint64_t Instance = (SimUtils *)SuplUtils::GetInstance(v4);
    int v22 = SuplUtils::SetSETInfo(Instance, a2, (uint64_t)&v29);
    BOOL v7 = v22 == 0;
    if (v22)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SET ID rejected\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "SPL", 69, "GN_SUPL_Set_SetIdParams", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v24, 0, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPL STACK accepted SET ID update\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "SPL", 73, "GN_SUPL_Set_SetIdParams");
      LbsOsaTrace_WriteLog(0x12u, __str, v26, 4, 1);
    }
    if (__p)
    {
      unsigned __int16 v31 = __p;
      operator delete(__p);
    }
    return v7;
  }
  BOOL v7 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "GN_SUPL_Set_SetIdParams", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
    return 0;
  }
  return v7;
}

void sub_22B99B524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

BOOL GN_SUPL_Extd_Set_Config(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = (SuplUtils *)Trace_GN_SUPL_Extd_Set_Config((unsigned char *)a1);
  if (a1)
  {
    uint64_t Instance = (SuplVersionNegotiation *)SuplUtils::GetInstance(v2);
    unsigned __int16 v4 = (unsigned __int8 *)SuplVersionNegotiation::GetInstance(Instance);
    atomic_store(2u, v4 + 2);
    atomic_store(0, v4 + 3);
    uint64_t v5 = (SuplUtils *)SuplUtils::GetInstance((SuplUtils *)v4);
    *((unsigned char *)v5 + 36) = *(unsigned char *)(a1 + 6);
    unsigned __int16 v6 = (SuplUtils *)SuplUtils::GetInstance(v5);
    *((unsigned char *)v6 + 37) = *(unsigned char *)(a1 + 7);
    __int16 v7 = *(_WORD *)(a1 + 1);
    uint64_t v8 = SuplUtils::GetInstance(v6);
    *(unsigned char *)(v8 + 276) = 0;
    *(_WORD *)(v8 + 277) = v7;
    unsigned __int16 v9 = (unsigned __int8 *)SuplUtils::GetInstance((SuplUtils *)v8);
    int v10 = v9[278];
    v24[2] = v10 == 1;
    int v11 = (unsigned __int8 *)SuplUtils::GetInstance((SuplUtils *)v9);
    BOOL v12 = 0;
    if (!v11[279]) {
      BOOL v12 = v11[276] == 1;
    }
    v24[0] = v12;
    unint64_t v13 = (unsigned __int8 *)SuplUtils::GetInstance((SuplUtils *)v11);
    int v14 = v13[277];
    v24[1] = v14 == 1;
    int v15 = *(unsigned __int8 *)(SuplUtils::GetInstance((SuplUtils *)v13) + 279);
    v24[3] = v15 == 1;
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v16 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v17 = 70;
      if (v15 == 1) {
        uint64_t v18 = 84;
      }
      else {
        uint64_t v18 = 70;
      }
      if (v10 == 1) {
        uint64_t v19 = 84;
      }
      else {
        uint64_t v19 = 70;
      }
      uint64_t v23 = v18;
      if (v14 == 1) {
        uint64_t v20 = 84;
      }
      else {
        uint64_t v20 = 70;
      }
      if (v12) {
        uint64_t v17 = 84;
      }
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_PPDU_Config_Out GPS MSA,%c,MSB,%c,Auto,%c,DisableMsa,%c\n", (unint64_t)v16, "SPL", 73, "GN_SUPL_Extd_Set_Config", v17, v20, v19, v23);
      LbsOsaTrace_WriteLog(0x12u, __str, v21, 4, 1);
    }
    GN_SUPL_PPDU_Config_Out(v24);
  }
  return a1 != 0;
}

uint64_t GN_SUPL_Abort(int a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = Trace_GN_SUPL_Abort(a1, a2);
  if (a2 == 255)
  {
    uint64_t result = (uint64_t)SUPL_Message_Init();
    if (result)
    {
      *(_DWORD *)(result + 20) = a1;
      *(unsigned char *)(result + 16) = 11;
      *(unsigned char *)(result + 136) = -1;
      uint64_t v5 = qword_2684657F8;
      unsigned __int16 v6 = (uint64_t *)(qword_2684657F8 + 8);
      if (!qword_2684657F8) {
        unsigned __int16 v6 = &SUPL_Queue;
      }
      *unsigned __int16 v6 = result;
      qword_2684657F8 = result;
      *(void *)uint64_t result = v5;
      *(void *)(result + 8) = 0;
    }
    else
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "GN_SUPL_Abort", 1537);
        return LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
      }
    }
  }
  return result;
}

size_t SUPL_indicate_trigger_UT_expiry(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  size_t result = (size_t)SUPL_Message_Init();
  if (result)
  {
    *(_DWORD *)(result + 20) = a1;
    *(unsigned char *)(result + 16) = 6;
    uint64_t v3 = qword_2684657F8;
    unsigned __int16 v4 = (uint64_t *)(qword_2684657F8 + 8);
    if (!qword_2684657F8) {
      unsigned __int16 v4 = &SUPL_Queue;
    }
    *unsigned __int16 v4 = result;
    qword_2684657F8 = result;
    *(void *)size_t result = v3;
    *(void *)(result + 8) = 0;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "SUPL_indicate_trigger_UT_expiry", 1537);
      return LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t GN_SUPL_Mobile_Info_Ind_In(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v181 = *MEMORY[0x263EF8340];
  Trace_GN_SUPL_LocationId(a1);
  if (v1)
  {
    v155[0] = 0;
    __int16 v156 = 0;
    uint64_t v157 = 0xFFFFFFFFLL;
    unsigned __int16 v159 = 0;
    uint64_t v160 = 0;
    std::string __p = 0;
    char v161 = 0;
    __int16 v162 = 0;
    char v163 = 0;
    uint64_t v164 = -1;
    char v166 = 0;
    unint64_t v167 = 0xFFFF000000000000;
    int64x2_t v168 = 0uLL;
    v169[0] = 0;
    *(void *)((char *)v169 + 6) = 0;
    unsigned __int16 v169[2] = 0;
    v169[3] = 0;
    int v170 = 0;
    char v171 = 1;
    uint64_t v142 = v1;
    switch(*(_DWORD *)(v1 + 4))
    {
      case 0:
      case 4:
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v2 = mach_continuous_time();
          unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RatType is either CDMA or not Set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "SPL", 69, "FillLocationIDInfo", 770);
          LbsOsaTrace_WriteLog(0x12u, __str, v3, 0, 1);
        }
        goto LABEL_231;
      case 1:
        unsigned int v26 = *(unsigned __int16 *)(v1 + 12);
        if (v26 > 0x3E7) {
          goto LABEL_160;
        }
        unsigned int v27 = *(unsigned __int16 *)(v1 + 14);
        if (v27 > 0x3E7) {
          goto LABEL_160;
        }
        unsigned int v28 = *(_DWORD *)(v1 + 16);
        if (HIWORD(v28)) {
          goto LABEL_160;
        }
        unsigned int v29 = *(_DWORD *)(v1 + 20);
        if (HIWORD(v29)) {
          goto LABEL_160;
        }
        v155[0] = 1;
        LOWORD(v157) = v26;
        WORD1(v157) = v27;
        WORD2(v157) = v28;
        HIWORD(v157) = v29;
        if (*(unsigned __int16 *)(v1 + 24) <= 0xFFu)
        {
          char v161 = *(_WORD *)(v1 + 24);
          HIBYTE(v156) = 1;
        }
        if (*(unsigned char *)(v1 + 26))
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          if (*(unsigned __int8 *)(v1 + 26) >= 0xFu) {
            uint64_t v32 = 15;
          }
          else {
            uint64_t v32 = *(unsigned __int8 *)(v1 + 26);
          }
          uint64_t v33 = v1 + 28;
          do
          {
            uint64_t v34 = (unsigned __int16 *)(v33 + 4 * v31);
            unsigned int v35 = *v34;
            if (v35 <= 0x3FF)
            {
              unsigned int v36 = *((unsigned __int8 *)v34 + 2);
              if (v36 <= 0x3F)
              {
                unsigned int v37 = *((unsigned __int8 *)v34 + 3);
                if (v37 <= 0x3F)
                {
                  if (v30 >= v160)
                  {
                    uint64_t v38 = (unsigned int *)__p;
                    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (unsigned char *)__p) >> 2);
                    unint64_t v40 = v39 + 1;
                    if (v39 + 1 > 0x1555555555555555) {
                      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x5555555555555556 * (((char *)v160 - (unsigned char *)__p) >> 2) > v40) {
                      unint64_t v40 = 0x5555555555555556 * (((char *)v160 - (unsigned char *)__p) >> 2);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * (((char *)v160 - (unsigned char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                      unint64_t v41 = 0x1555555555555555;
                    }
                    else {
                      unint64_t v41 = v40;
                    }
                    if (v41)
                    {
                      int v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_NMRelement>>((uint64_t)&v160, v41);
                      uint64_t v38 = (unsigned int *)__p;
                      uint64_t v30 = v159;
                    }
                    else
                    {
                      int v42 = 0;
                    }
                    BOOL v43 = (unsigned int *)&v42[12 * v39];
                    *BOOL v43 = v35;
                    v43[1] = v36;
                    v43[2] = v37;
                    int v44 = v43;
                    if (v30 == v38)
                    {
                      uint64_t v1 = v142;
                    }
                    else
                    {
                      uint64_t v1 = v142;
                      do
                      {
                        uint64_t v45 = *(void *)(v30 - 3);
                        v30 -= 3;
                        unsigned int v46 = v30[2];
                        *(void *)(v44 - 3) = v45;
                        v44 -= 3;
                        v44[2] = v46;
                      }
                      while (v30 != v38);
                      uint64_t v38 = (unsigned int *)__p;
                    }
                    uint64_t v30 = v43 + 3;
                    std::string __p = v44;
                    unsigned __int16 v159 = v43 + 3;
                    uint64_t v160 = (unsigned int *)&v42[12 * v41];
                    if (v38) {
                      operator delete(v38);
                    }
                  }
                  else
                  {
                    *uint64_t v30 = v35;
                    v30[1] = v36;
                    v30[2] = v37;
                    v30 += 3;
                  }
                  unsigned __int16 v159 = v30;
                }
              }
            }
            ++v31;
          }
          while (v31 != v32);
          if (__p != v30) {
            LOBYTE(v156) = 1;
          }
        }
        goto LABEL_231;
      case 2:
        unsigned int v7 = *(unsigned __int16 *)(v1 + 12);
        if (v7 > 0x3E7) {
          goto LABEL_160;
        }
        unsigned int v8 = *(unsigned __int16 *)(v1 + 14);
        if (v8 > 0x3E7) {
          goto LABEL_160;
        }
        unsigned int v9 = *(_DWORD *)(v1 + 20);
        if (v9 >> 28) {
          goto LABEL_160;
        }
        v155[0] = 2;
        LOWORD(v164) = v7;
        WORD1(v164) = v8;
        HIDWORD(v164) = v9;
        unsigned int v10 = *(unsigned __int16 *)(v1 + 24);
        __int16 v11 = *(_WORD *)(v1 + 26);
        char v165 = 0;
        WORD1(v167) = v10;
        if ((v11 & 0xC000) == 0)
        {
          LOWORD(v167) = v11;
          char v166 = 1;
        }
        LOBYTE(v162) = v10 < 0x4000;
        if (*(unsigned __int16 *)(v1 + 28) <= 0x1FFu)
        {
          HIWORD(v167) = *(_WORD *)(v1 + 28);
          HIBYTE(v162) = 1;
        }
        if (*(unsigned char *)(v1 + 30))
        {
          uint64_t v12 = 0;
          if (*(unsigned __int8 *)(v1 + 30) >= 8u) {
            uint64_t v13 = 8;
          }
          else {
            uint64_t v13 = *(unsigned __int8 *)(v1 + 30);
          }
          uint64_t v138 = v13;
          uint64_t v14 = v1 + 32;
          int v15 = (unsigned char *)(v1 + 48);
          do
          {
            *(_WORD *)&v146[1] = 0;
            v146[6] = 0;
            *(_WORD *)&v146[8] = 0;
            v146[14] = -1;
            v147[0] = 0;
            v147[1] = 0;
            *(void *)&v146[16] = 0;
            double v16 = (unsigned __int16 *)(v14 + 392 * v12);
            unsigned int v17 = *v16;
            unsigned __int16 v18 = v16[1];
            void v146[4] = 0;
            *(_DWORD *)&v146[10] = (unsigned __int16)v17;
            if ((v18 & 0xC000) == 0)
            {
              *(_WORD *)&v146[8] = v18;
              v146[6] = 1;
            }
            v146[0] = v17 < 0x4000;
            if ((*(char *)(v14 + 392 * v12 + 4) & 0x80000000) == 0)
            {
              v146[14] = *(unsigned char *)(v14 + 392 * v12 + 4);
              v146[1] = 1;
            }
            if (*(unsigned char *)(v14 + 392 * v12 + 5))
            {
              uint64_t v19 = 0;
              if (*(unsigned __int8 *)(v14 + 392 * v12 + 5) >= 0x20u) {
                uint64_t v20 = 32;
              }
              else {
                uint64_t v20 = *(unsigned __int8 *)(v14 + 392 * v12 + 5);
              }
              uint64_t v139 = v15;
              do
              {
                __str[0] = 0;
                *(_DWORD *)&__str[4] = -1;
                LOWORD(v174) = 0;
                BYTE2(v174) = 0;
                DWORD1(v174) = -1;
                *(_DWORD *)((char *)&v174 + 7) = -1;
                *(void *)&long long v175 = 0xFFFFFFFF00000000;
                BYTE8(v175) = -1;
                *(void *)&long long v177 = 0;
                unsigned int v21 = *((_DWORD *)v15 - 2);
                long long v176 = 0uLL;
                if (!(v21 >> 28))
                {
                  *(_DWORD *)&__str[4] = v21;
                  __str[0] = 1;
                }
                unsigned int v22 = *((unsigned __int16 *)v15 - 2);
                if (v22 <= 0x1FF)
                {
                  v173[0] = 0;
                  WORD2(v174) = v22;
                  if (*(v15 - 2) <= 0x3Fu)
                  {
                    WORD3(v174) = *(v15 - 2);
                    LOBYTE(v174) = 1;
                  }
                  if (((char)*(v15 - 1) & 0x80000000) == 0)
                  {
                    WORD4(v174) = *(v15 - 1);
                    BYTE1(v174) = 1;
                  }
                  if (((*v15 - 46) & 0x80) == 0)
                  {
                    BYTE10(v174) = *v15;
                    BYTE2(v174) = 1;
                  }
                  if (v19 >= v147[1])
                  {
                    uint64_t v19 = (char *)std::vector<ASN1T_CellMeasuredResults>::__push_back_slow_path<ASN1T_CellMeasuredResults const&>((int64x2_t *)&v146[16], (uint64_t)__str);
                  }
                  else
                  {
                    std::vector<ASN1T_CellMeasuredResults>::__construct_one_at_end[abi:ne180100]<ASN1T_CellMeasuredResults const&>((uint64_t)&v146[16], (uint64_t)__str);
                    v19 += 72;
                  }
                  v147[0] = v19;
                }
                v15 += 12;
                --v20;
              }
              while (v20);
              uint64_t v14 = v1 + 32;
              int v15 = v139;
              if (*(char **)&v146[16] != v19) {
                v146[2] = 1;
              }
            }
            if (v146[0] == 1 || v146[1] == 1)
            {
              uint64_t v23 = (void *)v168.i64[1];
              if (v168.i64[1] >= v169[0])
              {
                uint64_t v25 = std::vector<ASN1T_MeasuredResults>::__push_back_slow_path<ASN1T_MeasuredResults const&>(&v168, (uint64_t *)v146);
              }
              else
              {
                uint64_t v24 = *(void *)v146;
                *(void *)(v168.i64[1] + 7) = *(void *)&v146[7];
                *uint64_t v23 = v24;
                v23[2] = 0;
                v23[3] = 0;
                v23[4] = 0;
                std::vector<ASN1T_CellMeasuredResults>::__init_with_size[abi:ne180100]<ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>(v23 + 2, *(uint64_t *)&v146[16], (uint64_t)v147[0], 0x8E38E38E38E38E39 * (((uint64_t)v147[0] - *(void *)&v146[16]) >> 3));
                uint64_t v25 = (uint64_t)(v23 + 5);
              }
              v168.i64[1] = v25;
            }
            *(void *)__str = &v146[16];
            std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
            ++v12;
            v15 += 392;
          }
          while (v12 != v138);
          if (v168.i64[0] != v168.i64[1]) {
            goto LABEL_230;
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v133 = mach_continuous_time();
          unsigned __int16 v134 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WCDMA Serving Cell Info FrequncyInfo is not set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v133), "SPL", 73, "FillLocationIDInfo");
          LbsOsaTrace_WriteLog(0x12u, __str, v134, 4, 1);
        }
        goto LABEL_231;
      case 3:
        unsigned int v78 = *(unsigned __int16 *)(v1 + 12);
        if (v78 > 0x3E7) {
          goto LABEL_160;
        }
        unsigned int v79 = *(unsigned __int16 *)(v1 + 14);
        if (v79 > 0x3E7) {
          goto LABEL_160;
        }
        unsigned int v80 = *(_DWORD *)(v1 + 20);
        if (v80 >> 28) {
          goto LABEL_160;
        }
        v155[0] = 2;
        LOWORD(v164) = v78;
        WORD1(v164) = v79;
        HIDWORD(v164) = v80;
        __int16 v81 = *(_WORD *)(v1 + 24);
        if ((v81 & 0xC000) != 0)
        {
          unsigned __int8 v82 = 0;
        }
        else
        {
          unsigned __int8 v82 = 1;
          char v165 = 1;
          WORD2(v167) = v81;
        }
        __int16 v162 = v82;
        if (!*(unsigned char *)(v1 + 28))
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v135 = mach_continuous_time();
            unsigned __int16 v136 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No measured results exists\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v135), "SPL", 87, "FillLocationIDInfo", 770);
            LbsOsaTrace_WriteLog(0x12u, __str, v136, 2, 1);
          }
          goto LABEL_231;
        }
        uint64_t v91 = 0;
        if (*(unsigned __int8 *)(v1 + 28) >= 8u) {
          uint64_t v92 = 8;
        }
        else {
          uint64_t v92 = *(unsigned __int8 *)(v1 + 28);
        }
        uint64_t v137 = v92;
        do
        {
          char v93 = 0;
          *(_WORD *)&v146[1] = 0;
          v146[6] = 0;
          *(_DWORD *)&v146[8] = 0;
          *(_WORD *)&v146[12] = 0;
          v146[14] = -1;
          v147[0] = 0;
          v147[1] = 0;
          *(void *)&v146[16] = 0;
          __int16 v94 = *(_WORD *)(v1 + 772 * v91 + 32);
          if ((v94 & 0xC000) == 0)
          {
            char v93 = 1;
            void v146[4] = 1;
            *(_WORD *)&v146[12] = v94;
          }
          v146[0] = v93;
          if ((*(char *)(v1 + 772 * v91 + 34) & 0x80000000) == 0)
          {
            v146[14] = *(unsigned char *)(v1 + 772 * v91 + 34);
            v146[1] = 1;
          }
          if (*(unsigned char *)(v1 + 772 * v91 + 35))
          {
            uint64_t v95 = 0;
            if (*(unsigned __int8 *)(v1 + 772 * v91 + 35) >= 0x20u) {
              uint64_t v96 = 32;
            }
            else {
              uint64_t v96 = *(unsigned __int8 *)(v1 + 772 * v91 + 35);
            }
            uint64_t v141 = v96;
            do
            {
              __str[0] = 0;
              *(_DWORD *)&__str[4] = -1;
              LOWORD(v174) = 0;
              BYTE2(v174) = 0;
              DWORD1(v174) = -1;
              *(_DWORD *)((char *)&v174 + 7) = -1;
              *(void *)&long long v175 = 0xFFFFFFFF00000000;
              BYTE8(v175) = -1;
              *(void *)&long long v177 = 0;
              long long v176 = 0uLL;
              v173[0] = -1;
              if (!(*(_DWORD *)(v1 + 772 * v91 + 24 * v95 + 36) >> 28))
              {
                *(_DWORD *)&__str[4] = *(_DWORD *)(v1 + 772 * v91 + 24 * v95 + 36);
                __str[0] = 1;
              }
              int v97 = *(char *)(v1 + 772 * v91 + 24 * v95 + 40);
              if (v97 < 0) {
                goto LABEL_211;
              }
              v173[0] = 1;
              BYTE4(v175) = v97;
              if (*(unsigned __int8 *)(v1 + 772 * v91 + 24 * v95 + 41) <= 0xEu)
              {
                BYTE5(v175) = *(unsigned char *)(v1 + 772 * v91 + 24 * v95 + 41);
                LOBYTE(v175) = 1;
              }
              if ((*(char *)(v1 + 772 * v91 + 24 * v95 + 42) & 0x80000000) == 0)
              {
                WORD3(v175) = *(unsigned __int8 *)(v1 + 772 * v91 + 24 * v95 + 42);
                BYTE1(v175) = 1;
              }
              if (((*(unsigned __int8 *)(v1 + 772 * v91 + 24 * v95 + 43) - 46) & 0x80) == 0)
              {
                BYTE8(v175) = *(unsigned char *)(v1 + 772 * v91 + 24 * v95 + 43);
                BYTE2(v175) = 1;
              }
              uint64_t v98 = v1 + 772 * v91 + 24 * v95;
              int v101 = *(unsigned __int8 *)(v98 + 44);
              double v100 = (unsigned __int8 *)(v98 + 44);
              unsigned __int8 v99 = v101;
              if (!v101)
              {
LABEL_211:
                unint64_t v104 = 0;
              }
              else
              {
                double v102 = 0;
                unint64_t v103 = 0;
                while (1)
                {
                  unint64_t v104 = v176;
                  unsigned int v105 = &v102[-v176];
                  if ((unint64_t)&v102[-v176] >= 0xE) {
                    break;
                  }
                  int v106 = *(char *)(v1 + 772 * v91 + 24 * v95 + v103 + 45);
                  if ((v106 & 0x80000000) == 0)
                  {
                    if ((unint64_t)v102 >= (unint64_t)v177)
                    {
                      unint64_t v108 = v177 - v176;
                      if (2 * ((void)v177 - (void)v176) <= (unint64_t)(v105 + 1)) {
                        uint64_t v109 = (uint64_t)(v105 + 1);
                      }
                      else {
                        uint64_t v109 = 2 * v108;
                      }
                      if (v108 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v110 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v110 = v109;
                      }
                      long long v111 = (char *)operator new(v110);
                      int8x16_t v112 = &v105[(void)v111];
                      float64x2_t v113 = &v105[(void)v111];
                      *float64x2_t v113 = v106;
                      long long v107 = v113 + 1;
                      if (v102 != (unsigned char *)v104)
                      {
                        uint64_t v114 = &v102[~v104];
                        do
                        {
                          char v115 = *--v102;
                          (v114--)[(void)v111] = v115;
                        }
                        while (v102 != (unsigned char *)v104);
                        int8x16_t v112 = v111;
                      }
                      *(void *)&long long v176 = v112;
                      *(void *)&long long v177 = &v111[v110];
                      if (v104) {
                        operator delete((void *)v104);
                      }
                      uint64_t v1 = v142;
                    }
                    else
                    {
                      *double v102 = v106;
                      long long v107 = v102 + 1;
                    }
                    *((void *)&v176 + 1) = v107;
                    unsigned __int8 v99 = *v100;
                    double v102 = v107;
                  }
                  if (v103 <= 0xC && ++v103 < v99) {
                    continue;
                  }
                  unint64_t v104 = v176;
                  break;
                }
                if ((unsigned char *)v104 != v102) {
                  BYTE3(v175) = 1;
                }
              }
              if (v173[0] != 255)
              {
                int8x16_t v116 = (char *)v147[0];
                if (v147[0] >= v147[1])
                {
                  float64x2_t v117 = (void *)std::vector<ASN1T_CellMeasuredResults>::__push_back_slow_path<ASN1T_CellMeasuredResults const&>((int64x2_t *)&v146[16], (uint64_t)__str);
                }
                else
                {
                  std::vector<ASN1T_CellMeasuredResults>::__construct_one_at_end[abi:ne180100]<ASN1T_CellMeasuredResults const&>((uint64_t)&v146[16], (uint64_t)__str);
                  float64x2_t v117 = v116 + 72;
                }
                v147[0] = v117;
              }
              if (v104)
              {
                *((void *)&v176 + 1) = v104;
                operator delete((void *)v104);
              }
              ++v95;
            }
            while (v95 != v141);
            if (*(void **)&v146[16] != v147[0]) {
              v146[2] = 1;
            }
          }
          if (v146[0] == 1 || v146[1] == 1)
          {
            double v118 = (void *)v168.i64[1];
            if (v168.i64[1] >= v169[0])
            {
              uint64_t v120 = std::vector<ASN1T_MeasuredResults>::__push_back_slow_path<ASN1T_MeasuredResults const&>(&v168, (uint64_t *)v146);
            }
            else
            {
              uint64_t v119 = *(void *)v146;
              *(void *)(v168.i64[1] + 7) = *(void *)&v146[7];
              *double v118 = v119;
              _OWORD v118[2] = 0;
              v118[3] = 0;
              v118[4] = 0;
              std::vector<ASN1T_CellMeasuredResults>::__init_with_size[abi:ne180100]<ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>(v118 + 2, *(uint64_t *)&v146[16], (uint64_t)v147[0], 0x8E38E38E38E38E39 * (((uint64_t)v147[0] - *(void *)&v146[16]) >> 3));
              uint64_t v120 = (uint64_t)(v118 + 5);
            }
            v168.i64[1] = v120;
          }
          *(void *)__str = &v146[16];
          std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          ++v91;
        }
        while (v91 != v137);
        if (v168.i64[0] != v168.i64[1]) {
LABEL_230:
        }
          char v163 = 1;
        goto LABEL_231;
      case 5:
        if (*(unsigned __int16 *)(v1 + 20) >= 0x1F8u)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v83 = mach_continuous_time();
            unsigned __int16 v84 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Physical Cell Id Out of Range %d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v83), "SPL", 69, "FillLocationIDInfo", 514, *(unsigned __int16 *)(v1 + 20));
            LbsOsaTrace_WriteLog(0x12u, __str, v84, 0, 1);
          }
          goto LABEL_160;
        }
        v146[0] = 0;
        *(_OWORD *)&v146[8] = 0u;
        *(_OWORD *)unsigned __int16 v147 = 0u;
        long long v148 = 0u;
        *(_OWORD *)unsigned __int16 v149 = 0u;
        uint64_t v150 = 0;
        uint64_t v143 = 0;
        long long v144 = 0;
        uint64_t v145 = 0;
        if (ConvertIntValsToASN1T_CellGlobalIdEUTRA((uint64_t)v146, (unint64_t *)&v143, *(unsigned __int16 *)(v1 + 12), *(unsigned __int16 *)(v1 + 14), *(_DWORD *)(v1 + 16), *(unsigned __int16 *)(v1 + 24)))
        {
          v155[0] = 4;
          uint64_t v47 = (char *)operator new(0xA0uLL, MEMORY[0x263F8C180]);
          if (v47)
          {
            int v48 = v47;
            *((void *)v47 + 13) = 0;
            uint64_t v49 = v47 + 104;
            *((void *)v47 + 17) = 0;
            unsigned __int16 v140 = (int64x2_t *)(v47 + 136);
            *((_DWORD *)v47 + 2) = 0;
            *((void *)v47 + 18) = 0;
            *((void *)v47 + 19) = 0;
            *(_OWORD *)(v47 + 40) = 0u;
            *(_OWORD *)(v47 + 56) = 0u;
            *(_OWORD *)(v47 + 72) = 0u;
            *((void *)v47 + 11) = 0;
            *(_OWORD *)(v47 + 24) = 0u;
            *((void *)v47 + 14) = 0;
            *((void *)v47 + 15) = 0;
            *((_DWORD *)v47 + 32) = 0;
            *(_WORD *)uint64_t v47 = 3;
            *((_WORD *)v47 + 48) = *(_WORD *)(v1 + 20);
            v47[16] = v146[0];
            int v170 = v47;
            std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)v47 + 3, *(char **)&v146[8], *(char **)&v146[16], *(void *)&v146[16] - *(void *)&v146[8]);
            std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)v48 + 6, (char *)v147[1], (char *)v148, v148 - (unint64_t)v147[1]);
            std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v48 + 9, (char *)v149[0], (char *)v149[1], (char *)v149[1] - (char *)v149[0]);
            std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v49, (char *)v143, v144, v144 - (unsigned char *)v143);
            unsigned int v50 = *(unsigned __int8 *)(v1 + 28);
            if (v50 <= 0x61)
            {
              v48[128] = v50;
              v48[8] = 1;
            }
            unsigned int v51 = *(unsigned __int8 *)(v1 + 29);
            if (v51 <= 0x22)
            {
              v48[129] = v51;
              v48[9] = 1;
            }
            unsigned int v52 = *(unsigned __int16 *)(v1 + 36);
            if (v52 <= 0x502)
            {
              *((_WORD *)v48 + 65) = v52;
              v48[10] = 1;
            }
            if (*(unsigned char *)(v1 + 38))
            {
              uint64_t v53 = 0;
              if (*(unsigned __int8 *)(v1 + 38) >= 8u) {
                uint64_t v54 = 8;
              }
              else {
                uint64_t v54 = *(unsigned __int8 *)(v1 + 38);
              }
              uint64_t v55 = v1 + 40;
              do
              {
                __str[0] = 0;
                *(_WORD *)&char __str[2] = 0;
                v173[0] = 0;
                long long v174 = 0u;
                long long v175 = 0u;
                long long v176 = 0u;
                long long v177 = 0u;
                long long v178 = 0u;
                long long v179 = 0u;
                int v180 = 0;
                uint64_t v56 = (unsigned __int16 *)(v55 + 20 * v53);
                if (v56[4] <= 0x1F7u)
                {
                  *(_WORD *)&char __str[2] = v56[4];
                  if (*(unsigned __int8 *)(v55 + 20 * v53 + 10) <= 0x61u)
                  {
                    BYTE2(v180) = *(unsigned char *)(v55 + 20 * v53 + 10);
                    LOBYTE(v180) = 1;
                  }
                  if (*(unsigned __int8 *)(v55 + 20 * v53 + 11) <= 0x22u)
                  {
                    HIBYTE(v180) = *(unsigned char *)(v55 + 20 * v53 + 11);
                    BYTE1(v180) = 1;
                  }
                  __str[0] = ConvertIntValsToASN1T_CellGlobalIdEUTRA((uint64_t)v173, (unint64_t *)&v178 + 1, *v56, *(unsigned __int16 *)(v55 + 20 * v53 + 2), *(_DWORD *)(v55 + 20 * v53 + 4), *(unsigned __int16 *)(v55 + 20 * v53 + 12));
                  int v58 = (_DWORD *)*((void *)v48 + 18);
                  unint64_t v57 = *((void *)v48 + 19);
                  if ((unint64_t)v58 >= v57)
                  {
                    unint64_t v60 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v58 - v140->i64[0]) >> 3);
                    unint64_t v61 = v60 + 1;
                    if (v60 + 1 > 0x222222222222222) {
                      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v62 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v57 - v140->i64[0]) >> 3);
                    if (2 * v62 > v61) {
                      unint64_t v61 = 2 * v62;
                    }
                    if (v62 >= 0x111111111111111) {
                      unint64_t v63 = 0x222222222222222;
                    }
                    else {
                      unint64_t v63 = v61;
                    }
                    uint64_t v154 = v48 + 152;
                    if (v63) {
                      unsigned int v64 = std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>>((uint64_t)(v48 + 152), v63);
                    }
                    else {
                      unsigned int v64 = 0;
                    }
                    double v65 = &v64[30 * v60];
                    unint64_t v151 = v64;
                    v152.i64[0] = (uint64_t)v65;
                    v152.i64[1] = (uint64_t)v65;
                    unint64_t v153 = (char *)&v64[30 * v63];
                    *double v65 = *(_DWORD *)__str;
                    ASN1T_cgi_Info::ASN1T_cgi_Info((uint64_t)(v65 + 2), v173);
                    v64[30 * v60 + 28] = v180;
                    uint64_t v66 = v152.i64[0];
                    uint64_t v59 = v152.i64[1] + 120;
                    v152.i64[1] += 120;
                    uint64_t v68 = *((void *)v48 + 17);
                    unint64_t v67 = *((void *)v48 + 18);
                    if (v67 == v68)
                    {
                      int64x2_t v73 = vdupq_n_s64(v67);
                    }
                    else
                    {
                      uint64_t v69 = 0;
                      do
                      {
                        uint64_t v70 = v67 + v69;
                        uint64_t v71 = v66 + v69;
                        *(_DWORD *)(v71 - 120) = *(_DWORD *)(v67 + v69 - 120);
                        char v72 = *(unsigned char *)(v67 + v69 - 112);
                        *(void *)(v71 - 96) = 0;
                        *(void *)(v71 - 88) = 0;
                        *(void *)(v71 - 104) = 0;
                        *(unsigned char *)(v71 - 112) = v72;
                        *(_OWORD *)(v71 - 104) = *(_OWORD *)(v67 + v69 - 104);
                        *(void *)(v71 - 88) = *(void *)(v67 + v69 - 88);
                        *(void *)(v70 - 104) = 0;
                        *(void *)(v70 - 96) = 0;
                        *(void *)(v70 - 88) = 0;
                        *(void *)(v71 - 80) = 0;
                        *(void *)(v71 - 72) = 0;
                        *(void *)(v71 - 64) = 0;
                        *(_OWORD *)(v71 - 80) = *(_OWORD *)(v67 + v69 - 80);
                        *(void *)(v71 - 64) = *(void *)(v67 + v69 - 64);
                        *(void *)(v70 - 80) = 0;
                        *(void *)(v70 - 72) = 0;
                        *(void *)(v70 - 64) = 0;
                        *(void *)(v71 - 56) = 0;
                        *(void *)(v71 - 48) = 0;
                        *(void *)(v71 - 40) = 0;
                        *(_OWORD *)(v71 - 56) = *(_OWORD *)(v67 + v69 - 56);
                        *(void *)(v71 - 40) = *(void *)(v67 + v69 - 40);
                        *(void *)(v70 - 56) = 0;
                        *(void *)(v70 - 48) = 0;
                        *(void *)(v70 - 40) = 0;
                        *(void *)(v71 - 32) = 0;
                        *(void *)(v71 - 24) = 0;
                        *(void *)(v71 - 16) = 0;
                        *(_OWORD *)(v71 - 32) = *(_OWORD *)(v67 + v69 - 32);
                        *(void *)(v71 - 16) = *(void *)(v67 + v69 - 16);
                        *(void *)(v70 - 32) = 0;
                        *(void *)(v70 - 24) = 0;
                        *(void *)(v70 - 16) = 0;
                        *(_DWORD *)(v71 - 8) = *(_DWORD *)(v67 + v69 - 8);
                        v69 -= 120;
                      }
                      while (v67 + v69 != v68);
                      int64x2_t v73 = *v140;
                      uint64_t v59 = v152.i64[1];
                      v66 += v69;
                    }
                    *((void *)v48 + 17) = v66;
                    *((void *)v48 + 18) = v59;
                    int64x2_t v152 = v73;
                    double v74 = (char *)*((void *)v48 + 19);
                    *((void *)v48 + 19) = v153;
                    unint64_t v153 = v74;
                    unint64_t v151 = (_DWORD *)v73.i64[0];
                    std::__split_buffer<ASN1T_MeasResultEUTRA>::~__split_buffer((uint64_t)&v151);
                  }
                  else
                  {
                    *int v58 = *(_DWORD *)__str;
                    ASN1T_cgi_Info::ASN1T_cgi_Info((uint64_t)(v58 + 2), v173);
                    v58[28] = v180;
                    uint64_t v59 = (uint64_t)(v58 + 30);
                    *((void *)v48 + 18) = v58 + 30;
                  }
                  *((void *)v48 + 18) = v59;
                  if (*((void *)&v178 + 1))
                  {
                    *(void *)&long long v179 = *((void *)&v178 + 1);
                    operator delete(*((void **)&v178 + 1));
                  }
                }
                if ((void)v177)
                {
                  *((void *)&v177 + 1) = v177;
                  operator delete((void *)v177);
                }
                if (*((void *)&v175 + 1))
                {
                  *(void *)&long long v176 = *((void *)&v175 + 1);
                  operator delete(*((void **)&v175 + 1));
                }
                if ((void)v174)
                {
                  *((void *)&v174 + 1) = v174;
                  operator delete((void *)v174);
                }
                ++v53;
              }
              while (v53 != v54);
            }
            char v75 = 1;
            if (*((void *)v48 + 17) != *((void *)v48 + 18)) {
              v48[11] = 1;
            }
LABEL_151:
            if (v143)
            {
              long long v144 = (char *)v143;
              operator delete(v143);
            }
            if (v149[0])
            {
              v149[1] = v149[0];
              operator delete(v149[0]);
            }
            if (v147[1])
            {
              *(void **)&long long v148 = v147[1];
              operator delete(v147[1]);
            }
            if (*(void *)&v146[8])
            {
              *(void *)&v146[16] = *(void *)&v146[8];
              operator delete(*(void **)&v146[8]);
            }
            if ((v75 & 1) == 0)
            {
LABEL_160:
              if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v89 = mach_continuous_time();
                unsigned __int16 v90 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx status of LocID is FALSE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "SPL", 69, "GN_SUPL_Mobile_Info_Ind_In", 770);
                LbsOsaTrace_WriteLog(0x12u, __str, v90, 0, 1);
              }
              goto LABEL_243;
            }
LABEL_231:
            int v121 = *(_DWORD *)v1;
            if (*(_DWORD *)v1)
            {
              if (v121 != 2)
              {
                if (v121 == 1)
                {
                  char v171 = 0;
                }
                else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v128 = mach_continuous_time();
                  unsigned __int16 v129 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx locIdStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v128), "SPL", 69, "FillLocationIDInfo", 770, *(_DWORD *)v1);
                  LbsOsaTrace_WriteLog(0x12u, __str, v129, 0, 1);
                }
                goto LABEL_238;
              }
              char v122 = 1;
            }
            else
            {
              char v122 = 2;
            }
            char v171 = v122;
LABEL_238:
            char v123 = SUPL_Message_Init();
            if (v123)
            {
              uint64_t v124 = (uint64_t)v123;
              unsigned int v125 = (char *)operator new(0x90uLL, MEMORY[0x263F8C180]);
              if (v125)
              {
                *unsigned int v125 = 0;
                *((_WORD *)v125 + 4) = 0;
                *(void *)(v125 + 10) = 0xFFFFFFFFLL;
                *((void *)v125 + 4) = 0;
                *((void *)v125 + 5) = 0;
                *((void *)v125 + 3) = 0;
                v125[48] = 0;
                *((_WORD *)v125 + 28) = 0;
                v125[58] = 0;
                *(void *)(v125 + 60) = -1;
                v125[70] = 0;
                *((void *)v125 + 9) = 0xFFFF000000000000;
                *((void *)v125 + 11) = 0;
                *((void *)v125 + 12) = 0;
                *((void *)v125 + 10) = 0;
                *(void *)(v125 + 102) = 0;
                *((void *)v125 + 15) = 0;
                *((void *)v125 + 16) = 0;
                *((void *)v125 + 14) = 0;
                v125[136] = 1;
                *(void *)(v124 + 128) = v125;
                ASN1T_LocationId::operator=((uint64_t)v125, (uint64_t)v155);
              }
              else
              {
                *(void *)(v124 + 128) = 0;
              }
              *(unsigned char *)(v124 + 16) = 7;
              *(unsigned char *)(v124 + 32) = *(unsigned char *)(v1 + 8);
              uint64_t v130 = qword_2684657F8;
              unsigned __int16 v131 = (uint64_t *)(qword_2684657F8 + 8);
              if (!qword_2684657F8) {
                unsigned __int16 v131 = &SUPL_Queue;
              }
              *unsigned __int16 v131 = v124;
              qword_2684657F8 = v124;
              *(void *)uint64_t v124 = v130;
              *(void *)(v124 + 8) = 0;
              uint64_t v4 = 1;
            }
            else
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v126 = mach_continuous_time();
                unsigned __int16 v127 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v126), "SPL", 69, "GN_SUPL_Mobile_Info_Ind_In", 1537);
                LbsOsaTrace_WriteLog(0x12u, __str, v127, 0, 1);
              }
LABEL_243:
              uint64_t v4 = 0;
            }
            ASN1T_CellInfo::~ASN1T_CellInfo((ASN1T_CellInfo *)v155);
            return v4;
          }
          int v170 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v87 = mach_continuous_time();
            unsigned __int16 v88 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfo Ver2\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v87), "SPL", 69, "FillLocationIDInfo", 1537);
            LbsOsaTrace_WriteLog(0x12u, __str, v88, 0, 1);
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v85 = mach_continuous_time();
          unsigned __int16 v86 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConvertIntValsToASN1T_CellGlobalIdEUTRA function returned error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v85), "SPL", 69, "FillLocationIDInfo", 770);
          LbsOsaTrace_WriteLog(0x12u, __str, v86, 0, 1);
        }
        char v75 = 0;
        goto LABEL_151;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v76 = mach_continuous_time();
          unsigned __int16 v77 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RatType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v76), "SPL", 69, "FillLocationIDInfo", 515, *(_DWORD *)(v1 + 4));
          LbsOsaTrace_WriteLog(0x12u, __str, v77, 0, 1);
        }
        goto LABEL_231;
    }
  }
  uint64_t v4 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "GN_SUPL_Mobile_Info_Ind_In", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    return 0;
  }
  return v4;
}

void sub_22B99CF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p) {
    operator delete(__p);
  }
  gnss::Emergency::Supl::LocationId::~LocationId((gnss::Emergency::Supl::LocationId *)&a26);
  ASN1T_CellInfo::~ASN1T_CellInfo((ASN1T_CellInfo *)&a41);
  _Unwind_Resume(a1);
}

BOOL GN_SUPL_AidRequest_In(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  Trace_GN_SUPL_AidRequest_In(a1, a2, a3);
  unsigned __int16 v6 = SUPL_Message_Init();
  if (!v6)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "GN_SUPL_AidRequest_In", 1537);
      LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
    }
    return v6 != 0;
  }
  *(_DWORD *)&v105[5] = 0;
  *(_DWORD *)&v105[2] = 0;
  if (!a3)
  {
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    char v16 = 0;
    int v17 = 0;
    int v18 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    int16x8_t v93 = 0u;
    __int16 v11 = -254;
LABEL_36:
    v6[16] = 4;
    *((_DWORD *)v6 + 5) = a1;
    unsigned int v27 = operator new(0x10uLL, MEMORY[0x263F8C180]);
    if (!v27)
    {
      *((void *)v6 + 15) = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v31 = mach_continuous_time();
        unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AID Req\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "SPL", 69, "GN_SUPL_AidRequest_In", 1537);
        LbsOsaTrace_WriteLog(0x12u, __str, v32, 0, 1);
      }
      goto LABEL_142;
    }
    void *v27 = 0;
    v27[1] = 0;
    *((void *)v6 + 15) = v27;
    LcsFunctionEntryExitTrace::LcsFunctionEntryExitTrace((LcsFunctionEntryExitTrace *)v100, 937, "ConvertAidReq");
    if (a2)
    {
      unsigned int v28 = *(unsigned __int8 **)(a2 + 8);
      if (v28)
      {
        __int16 v101 = 0;
        *(_OWORD *)double v102 = 0u;
        long long v103 = 0u;
        memset(__p, 0, 25);
        int v29 = *v28;
        if (*v28)
        {
          int v30 = 32;
          LODWORD(v102[0]) = 32;
        }
        else
        {
          int v30 = 0;
        }
        int v38 = v28[1];
        if (v28[1])
        {
          v30 |= 0x10u;
          LODWORD(v102[0]) = v30;
        }
        int v39 = v28[2];
        if (v28[2])
        {
          v30 |= 4u;
          LODWORD(v102[0]) = v30;
        }
        if (v38 | v29 | v39) {
          __int16 v101 = 1;
        }
        if (v28[3])
        {
          uint64_t v40 = *(void *)(a2 + 16);
          if (v40)
          {
            if (*(_DWORD *)v40 == 1)
            {
              if (*(unsigned char *)(v40 + 4))
              {
                v30 |= 2u;
                LODWORD(v102[0]) = v30;
              }
              if (*(unsigned char *)(v40 + 5))
              {
                v30 |= 0x80u;
                LODWORD(v102[0]) = v30;
              }
              if (*(unsigned char *)(v40 + 6))
              {
                v30 |= 1u;
                LODWORD(v102[0]) = v30;
              }
              if (*(unsigned char *)(v40 + 7))
              {
                v30 |= 8u;
                LODWORD(v102[0]) = v30;
              }
              if (*(unsigned char *)(v40 + 8)) {
                LODWORD(v102[0]) = v30 | 0x40;
              }
              if (*(unsigned __int16 *)(v40 + 16) - 1 <= 0x3FE) {
                WORD2(v102[0]) = *(_WORD *)(v40 + 16);
              }
              if (*(unsigned __int8 *)(v40 + 18) - 1 <= 0xA6) {
                BYTE6(v102[0]) = *(unsigned char *)(v40 + 18);
              }
              if (*(unsigned __int8 *)(v40 + 19) - 1 <= 9) {
                LOBYTE(__p[3]) = *(unsigned char *)(v40 + 19);
              }
              if (*(unsigned char *)(v40 + 20))
              {
                if (*(unsigned __int8 *)(v40 + 20) >= 0x21u)
                {
                  unint64_t v47 = 0;
                  int v91 = v17;
                  char v92 = 0;
                  unint64_t v48 = 32;
                  HIBYTE(v102[0]) = 32;
                  char v88 = v16;
                  __int16 v89 = v11;
                  int v90 = v18;
                  do
                  {
                    uint64_t v49 = *(void *)(a2 + 16);
                    unsigned int v51 = (unsigned char *)(v49 + v47 + 21);
                    unsigned int v50 = *v51;
                    if (v50 <= 0x3F && *(unsigned __int16 *)(v49 + 2 * v47 + 86) <= 0xFFu)
                    {
                      unsigned int v52 = (char *)v103;
                      if ((unint64_t)v103 >= *((void *)&v103 + 1))
                      {
                        unint64_t v54 = (unint64_t)v102[1];
                        uint64_t v55 = v103 - (unint64_t)v102[1];
                        int64_t v56 = v103 - (unint64_t)v102[1] + 1;
                        if (v56 < 0) {
                          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v57 = *((void *)&v103 + 1) - (unint64_t)v102[1];
                        if (2 * (*((void *)&v103 + 1) - (unint64_t)v102[1]) > v56) {
                          int64_t v56 = 2 * v57;
                        }
                        if (v57 >= 0x3FFFFFFFFFFFFFFFLL) {
                          size_t v58 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          size_t v58 = v56;
                        }
                        if (v58)
                        {
                          uint64_t v59 = (char *)operator new(v58);
                          LOBYTE(v50) = *v51;
                        }
                        else
                        {
                          uint64_t v59 = 0;
                        }
                        unint64_t v60 = &v59[v55];
                        unint64_t v61 = &v59[v55];
                        *unint64_t v61 = v50;
                        uint64_t v53 = v61 + 1;
                        if (v52 != (char *)v54)
                        {
                          unint64_t v62 = &v52[~v54];
                          do
                          {
                            char v63 = *--v52;
                            (v62--)[(void)v59] = v63;
                          }
                          while (v52 != (char *)v54);
                          unsigned int v52 = (char *)v102[1];
                          unint64_t v60 = v59;
                        }
                        v102[1] = v60;
                        *(void *)&long long v103 = v53;
                        *((void *)&v103 + 1) = &v59[v58];
                        char v16 = v88;
                        if (v52) {
                          operator delete(v52);
                        }
                        __int16 v11 = v89;
                      }
                      else
                      {
                        *(unsigned char *)long long v103 = v50;
                        uint64_t v53 = v52 + 1;
                      }
                      *(void *)&long long v103 = v53;
                      __int16 v64 = *(_WORD *)(*(void *)(a2 + 16) + 2 * v47 + 86);
                      double v65 = (char *)__p[1];
                      if (__p[1] >= __p[2])
                      {
                        unint64_t v67 = (unint64_t)__p[0];
                        int64_t v68 = (char *)__p[1] - (char *)__p[0];
                        int64_t v69 = (char *)__p[1] - (char *)__p[0] + 1;
                        if (v69 < 0) {
                          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v70 = (char *)__p[2] - (char *)__p[0];
                        if (2 * ((char *)__p[2] - (char *)__p[0]) > (unint64_t)v69) {
                          int64_t v69 = 2 * v70;
                        }
                        if (v70 >= 0x3FFFFFFFFFFFFFFFLL) {
                          size_t v71 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          size_t v71 = v69;
                        }
                        if (v71) {
                          char v72 = (char *)operator new(v71);
                        }
                        else {
                          char v72 = 0;
                        }
                        int64x2_t v73 = &v72[v68];
                        double v74 = &v72[v68];
                        *double v74 = v64;
                        uint64_t v66 = v74 + 1;
                        if (v65 != (char *)v67)
                        {
                          char v75 = &v65[~v67];
                          do
                          {
                            char v76 = *--v65;
                            (v75--)[(void)v72] = v76;
                          }
                          while (v65 != (char *)v67);
                          double v65 = (char *)__p[0];
                          int64x2_t v73 = v72;
                        }
                        __p[0] = v73;
                        __p[1] = v66;
                        __p[2] = &v72[v71];
                        char v16 = v88;
                        if (v65) {
                          operator delete(v65);
                        }
                        __int16 v11 = v89;
                      }
                      else
                      {
                        *(unsigned char *)__p[1] = v64;
                        uint64_t v66 = v65 + 1;
                      }
                      __p[1] = v66;
                      int v17 = v91;
                      ++v92;
                      unint64_t v48 = HIBYTE(v102[0]);
                      int v18 = v90;
                    }
                    ++v47;
                  }
                  while (v47 < v48);
                }
                else
                {
                  char v92 = 0;
                }
                HIBYTE(v102[0]) = v92;
              }
              __int16 v101 = 1;
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v45 = mach_continuous_time();
            unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS Assistance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "SPL", 87, "ConvertAidReq", 770);
            LbsOsaTrace_WriteLog(0x12u, __str, v46, 2, 1);
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v41 = mach_continuous_time();
          unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AGPS Assistance not requested\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "SPL", 87, "ConvertAidReq", 770);
          LbsOsaTrace_WriteLog(0x12u, __str, v42, 2, 1);
        }
        unsigned __int16 v77 = operator new(0x48uLL, MEMORY[0x263F8C180]);
        unsigned int v37 = v77;
        if (v77)
        {
          v77[64] = 0;
          *((_OWORD *)v77 + 2) = 0u;
          *((_OWORD *)v77 + 3) = 0u;
          *((_OWORD *)v77 + 1) = 0u;
          *(_WORD *)unsigned __int16 v77 = v101;
          unsigned int v78 = (char *)v102[1];
          *((void **)v77 + 1) = v102[0];
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v77 + 2, v78, (char *)v103, v103 - (void)v78);
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v37 + 5, (char *)__p[0], (char *)__p[1], (char *)__p[1] - (char *)__p[0]);
          v37[64] = __p[3];
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v102[1])
        {
          *(void **)&long long v103 = v102[1];
          operator delete(v102[1]);
        }
        goto LABEL_139;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v35 = mach_continuous_time();
        unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Asst Req\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "SPL", 87, "ConvertAidReq", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v36, 2, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v33 = mach_continuous_time();
      unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "SPL", 69, "ConvertAidReq", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v34, 0, 1);
    }
    unsigned int v37 = 0;
LABEL_139:
    LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace(v100);
    unsigned int v79 = (void *)*((void *)v6 + 15);
    *unsigned int v79 = v37;
    unsigned int v80 = (char *)operator new(0xE8uLL, MEMORY[0x263F8C180]);
    if (v80)
    {
      __int16 v81 = v80;
      *((_WORD *)v80 + 112) = 0;
      unsigned __int8 v82 = v80 + 224;
      int v83 = v18;
      *((_DWORD *)v80 + 57) = 0;
      unsigned __int16 v84 = v80 + 228;
      *((void *)v80 + 25) = 0;
      *((void *)v80 + 26) = 0;
      *(void *)(v80 + 215) = 0;
      *((void *)v80 + 24) = 0;
      v79[1] = v80;
      *(_WORD *)unsigned int v80 = v11;
      *((_DWORD *)v80 + 2) = 0;
      *((_WORD *)v80 + 6) = 0;
      *((_DWORD *)v80 + 4) = 0;
      *((_WORD *)v80 + 10) = 0;
      *((_DWORD *)v80 + 6) = 0;
      *((_WORD *)v80 + 14) = 0;
      *((_DWORD *)v80 + 8) = v95;
      *((_WORD *)v80 + 18) = 0;
      *((_DWORD *)v80 + 10) = HIDWORD(v95);
      *((_WORD *)v80 + 22) = 0;
      *((_DWORD *)v80 + 12) = v96;
      *((_WORD *)v80 + 26) = 0;
      *((_DWORD *)v80 + 14) = HIDWORD(v96);
      *((_WORD *)v80 + 30) = 0;
      v80[64] = v97;
      v80[65] = BYTE4(v97);
      *((_DWORD *)v80 + 17) = v98;
      *((_WORD *)v80 + 36) = 0;
      *((_DWORD *)v80 + 19) = HIDWORD(v98);
      *((_WORD *)v80 + 40) = 0;
      *((_DWORD *)v80 + 21) = v99;
      *((_WORD *)v80 + 44) = 0;
      *((_DWORD *)v80 + 23) = HIDWORD(v99);
      *((_WORD *)v80 + 48) = 0;
      *((_DWORD *)v80 + 25) = v83;
      *((_WORD *)v80 + 52) = 0;
      *((_DWORD *)v80 + 27) = v17;
      *((_WORD *)v80 + 56) = 0;
      v80[116] = 0;
      v80[117] = v16;
      *((_DWORD *)v80 + 30) = 0;
      *((_WORD *)v80 + 62) = 0;
      *((_DWORD *)v80 + 32) = 0;
      *((_WORD *)v80 + 66) = 0;
      *((_DWORD *)v80 + 34) = 0;
      *((_WORD *)v80 + 70) = 0;
      v80[150] = v105[8];
      *(void *)(v80 + 142) = *(void *)v105;
      *((_DWORD *)v80 + 38) = 0;
      *((_WORD *)v80 + 78) = 0;
      *((_DWORD *)v80 + 40) = 0;
      *((_WORD *)v80 + 82) = 0;
      *((_DWORD *)v80 + 42) = 0;
      *((_WORD *)v80 + 86) = 0;
      *((_DWORD *)v80 + 44) = 0;
      *((_WORD *)v80 + 90) = 0;
      *((_DWORD *)v80 + 46) = 0;
      *((_WORD *)v80 + 94) = 0;
      std::vector<UtaLcsShapePoint>::__assign_with_size[abi:ne180100]<UtaLcsShapePoint*,UtaLcsShapePoint*>(v80 + 192, 0, 0, 0);
      *((_WORD *)v81 + 108) = v20;
      *(_DWORD *)(v81 + 218) = vmovn_s16(v93).u32[0];
      v81[222] = v19;
      *unsigned __int8 v82 = WORD2(v94);
      *unsigned __int16 v84 = v94;
    }
    else
    {
      v79[1] = 0;
    }
LABEL_142:
    uint64_t v85 = qword_2684657F8;
    unsigned __int16 v86 = (uint64_t *)(qword_2684657F8 + 8);
    if (!qword_2684657F8) {
      unsigned __int16 v86 = &SUPL_Queue;
    }
    *unsigned __int16 v86 = (uint64_t)v6;
    qword_2684657F8 = (uint64_t)v6;
    *(void *)unsigned __int16 v6 = v85;
    *((void *)v6 + 1) = 0;
    return v6 != 0;
  }
  int v8 = *(_DWORD *)(a3 + 8);
  int v9 = *(_DWORD *)(a3 + 12);
  if (v8 == 2) {
    __int16 v10 = -255;
  }
  else {
    __int16 v10 = -254;
  }
  if (v8 == 1) {
    __int16 v11 = -256;
  }
  else {
    __int16 v11 = v10;
  }
  switch(v9)
  {
    case 0:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Shape is not set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "GN_SUPL_AidRequest_In", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v13, 0, 1);
      }
      return v6 != 0;
    case 1:
      if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
        goto LABEL_34;
      }
      goto LABEL_33;
    case 2:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
        goto LABEL_33;
      }
      goto LABEL_34;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_19;
    case 4:
      char v16 = 0;
      int v17 = 0;
      int v18 = 0;
      uint64_t v98 = 0;
      uint64_t v99 = 0;
      v11 &= 0x303u;
      if (*(_DWORD *)(a3 + 16) == 2) {
        int v23 = *(_DWORD *)(a3 + 20) | 0x800000;
      }
      else {
        int v23 = *(_DWORD *)(a3 + 20);
      }
      LODWORD(v95) = v23;
      HIDWORD(v95) = *(_DWORD *)(a3 + 24);
      LODWORD(v96) = *(unsigned __int8 *)(a3 + 30);
      HIDWORD(v96) = *(unsigned __int8 *)(a3 + 31);
      if (*(unsigned __int8 *)(a3 + 41) == 255) {
        char v24 = 0;
      }
      else {
        char v24 = *(unsigned char *)(a3 + 41);
      }
      LOBYTE(v97) = *(unsigned char *)(a3 + 32);
      BYTE4(v97) = v24;
      goto LABEL_35;
    case 8:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
        goto LABEL_33;
      }
      goto LABEL_34;
    default:
      if (v9 == 16)
      {
        uint64_t v96 = 0;
        uint64_t v97 = 0;
        uint64_t v95 = 0;
        v11 &= 0x903u;
        if (*(_DWORD *)(a3 + 16) == 2) {
          int v43 = *(_DWORD *)(a3 + 20) | 0x800000;
        }
        else {
          int v43 = *(_DWORD *)(a3 + 20);
        }
        LODWORD(v98) = v43;
        HIDWORD(v98) = *(_DWORD *)(a3 + 24);
        if (*(_DWORD *)(a3 + 36) == 2) {
          int v44 = *(unsigned __int16 *)(a3 + 28) | 0x8000;
        }
        else {
          int v44 = *(unsigned __int16 *)(a3 + 28);
        }
        int v17 = *(unsigned __int8 *)(a3 + 40);
        LODWORD(v99) = v44;
        HIDWORD(v99) = *(unsigned __int8 *)(a3 + 30);
        int v18 = *(unsigned __int8 *)(a3 + 31);
        if (*(unsigned __int8 *)(a3 + 41) == 255) {
          char v16 = 0;
        }
        else {
          char v16 = *(unsigned char *)(a3 + 41);
        }
LABEL_35:
        __int16 v20 = *(_WORD *)(a3 + 52);
        v7.i64[0] = *(void *)(a3 + 54);
        int16x8_t v93 = v7;
        char v19 = *(unsigned char *)(a3 + 62);
        LODWORD(v94) = *(_DWORD *)(a3 + 68);
        WORD2(v94) = *(_WORD *)(a3 + 64);
        goto LABEL_36;
      }
      if (v9 == 32)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
LABEL_33:
          bzero(__str, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Shape,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "SPL", 69, "GN_SUPL_AidRequest_In", 770, *(_DWORD *)(a3 + 12));
          LbsOsaTrace_WriteLog(0x12u, __str, v26, 0, 1);
        }
LABEL_34:
        char v16 = 0;
        int v17 = 0;
        int v18 = 0;
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        uint64_t v96 = 0;
        uint64_t v97 = 0;
        uint64_t v95 = 0;
        goto LABEL_35;
      }
LABEL_19:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Shape,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "SPL", 69, "GN_SUPL_AidRequest_In", 515, *(_DWORD *)(a3 + 12));
        LbsOsaTrace_WriteLog(0x12u, __str, v22, 0, 1);
      }
      break;
  }
  return v6 != 0;
}

void sub_22B99DEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t GN_SUPL_PPDU_Delivery_In(int a1, unsigned int a2, unsigned __int8 *a3, int a4, int a5, int a6, int a7)
{
  char v7 = a7;
  uint64_t v65 = *MEMORY[0x263EF8340];
  Trace_GN_SUPL_PPDU_Delivery_In(a1, a2, a3, a4, a5, a6, a7);
  if (a4 == 1)
  {
    std::string __p = 0;
    unint64_t v60 = 0;
    BOOL v62 = 0;
    uint64_t v61 = 0;
    BYTE4(v58) = a6 != 2;
    if (a3)
    {
      LODWORD(v58) = a1;
      BOOL v62 = v7;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)a3, (char *)&a3[a2], a2);
    }
    else
    {
      BYTE4(v58) = 1;
      LODWORD(v58) = a1;
      BOOL v62 = v7;
    }
    int v23 = (char *)operator new(0x28uLL, MEMORY[0x263F8C180]);
    if (!v23)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v35 = mach_continuous_time();
        unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LPP Caps Rsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "SPL", 69, "SUPL_Handle_LPP_Cap_Rsp_Cb", 1537);
        LbsOsaTrace_WriteLog(0x12u, __str, v36, 0, 1);
      }
      goto LABEL_32;
    }
    char v24 = v23;
    *(_DWORD *)int v23 = 0;
    v23[4] = 1;
    *((void *)v23 + 1) = 0;
    uint64_t v25 = v23 + 8;
    *((void *)v23 + 2) = 0;
    *((void *)v23 + 3) = 0;
    v23[32] = 0;
    unsigned __int16 v26 = SUPL_Message_Init();
    if (!v26)
    {
      MEMORY[0x230F4E5D0](v24, 0x1010C40D464F2E8);
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v41 = mach_continuous_time();
        unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "SPL", 69, "SUPL_Handle_LPP_Cap_Rsp_Cb", 1537);
        LbsOsaTrace_WriteLog(0x12u, __str, v42, 0, 1);
      }
      goto LABEL_32;
    }
    uint64_t v27 = (uint64_t)v26;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v25, (char *)__p, v60, v60 - (unsigned char *)__p);
    *(_DWORD *)char v24 = v58;
    unsigned char v24[4] = BYTE4(v58);
    *(unsigned char *)(v27 + 16) = 10;
    *(void *)(v27 + 104) = v24;
    goto LABEL_29;
  }
  if (a4 == 2)
  {
    std::string __p = 0;
    unint64_t v60 = 0;
    uint64_t v61 = 0;
    BOOL v62 = a6 != 2;
    if (a3)
    {
      LODWORD(v58) = a1;
      char v63 = v7;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)a3, (char *)&a3[a2], a2);
    }
    else
    {
      BOOL v62 = 1;
      LODWORD(v58) = a1;
      char v63 = v7;
    }
    unsigned int v28 = operator new(0x28uLL, MEMORY[0x263F8C180]);
    if (!v28)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v37 = mach_continuous_time();
        unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "SPL", 69, "SUPL_Handle_LPP_Ad_Rsp_Cb", 1537);
        LbsOsaTrace_WriteLog(0x12u, __str, v38, 0, 1);
      }
      goto LABEL_32;
    }
    int v29 = v28;
    *(_DWORD *)unsigned int v28 = 0;
    v28[1] = 0;
    int v30 = v28 + 1;
    v28[2] = 0;
    v28[3] = 0;
    *((_WORD *)v28 + 16) = 1;
    uint64_t v31 = SUPL_Message_Init();
    if (!v31)
    {
      MEMORY[0x230F4E5D0](v29, 0x1010C4039DDA56CLL);
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v43 = mach_continuous_time();
        unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "SPL", 69, "SUPL_Handle_LPP_Ad_Rsp_Cb", 1537);
        LbsOsaTrace_WriteLog(0x12u, __str, v44, 0, 1);
      }
      goto LABEL_32;
    }
    uint64_t v27 = (uint64_t)v31;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v30, (char *)__p, v60, v60 - (unsigned char *)__p);
    *(_DWORD *)int v29 = v58;
    *((unsigned char *)v29 + 32) = v62;
    *(unsigned char *)(v27 + 16) = 8;
    *(void *)(v27 + 88) = v29;
LABEL_29:
    uint64_t v32 = qword_2684657F8;
    uint64_t v33 = (uint64_t *)(qword_2684657F8 + 8);
    if (!qword_2684657F8) {
      uint64_t v33 = &SUPL_Queue;
    }
    *uint64_t v33 = v27;
    qword_2684657F8 = v27;
    *(void *)uint64_t v27 = v32;
    *(void *)(v27 + 8) = 0;
LABEL_32:
    unsigned __int16 v34 = (char *)__p;
    if (!__p) {
      return 1;
    }
    unint64_t v60 = (char *)__p;
LABEL_34:
    operator delete(v34);
    return 1;
  }
  if (a4 != 3)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PDU ContentType Unknown\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "SPL", 87, "GN_SUPL_PPDU_Delivery_In", 770);
    LbsOsaTrace_WriteLog(0x12u, __str, v22, 2, 1);
    return 0;
  }
  if (a5 == 3)
  {
    size_t v58 = 0;
    std::string __p = 0;
    unint64_t v60 = 0;
    LOBYTE(v61) = a6 != 2;
    if (a3)
    {
      HIDWORD(v61) = a1;
      BOOL v62 = v7;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v58, (char *)a3, (char *)&a3[a2], a2);
    }
    else
    {
      LOBYTE(v61) = 1;
      HIDWORD(v61) = a1;
      BOOL v62 = v7;
    }
    unint64_t v48 = operator new(0x28uLL, MEMORY[0x263F8C180]);
    if (v48)
    {
      uint64_t v49 = v48;
      *unint64_t v48 = 0;
      v48[1] = 0;
      v48[2] = 0;
      *((unsigned char *)v48 + 24) = v61;
      *((_DWORD *)v48 + 7) = HIDWORD(v61);
      *((unsigned char *)v48 + 32) = v62;
      unsigned int v50 = SUPL_Message_Init();
      if (v50)
      {
        uint64_t v51 = (uint64_t)v50;
        if (v58 != __p) {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v49, v58, (char *)__p, (unsigned char *)__p - v58);
        }
        *(unsigned char *)(v51 + 16) = 9;
        *(void *)(v51 + 96) = v49;
        uint64_t v52 = qword_2684657F8;
        uint64_t v53 = (uint64_t *)(qword_2684657F8 + 8);
        if (!qword_2684657F8) {
          uint64_t v53 = &SUPL_Queue;
        }
        uint64_t *v53 = v51;
        qword_2684657F8 = v51;
        *(void *)uint64_t v51 = v52;
        *(void *)(v51 + 8) = 0;
      }
      else
      {
        MEMORY[0x230F4E5D0](v49, 0x1010C4005AEBDE9);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v54 = mach_continuous_time();
      unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL POS Ind\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "SPL", 69, "SUPL_Handle_LPP_Pos_Cb", 1537);
      LbsOsaTrace_WriteLog(0x12u, __str, v55, 0, 1);
    }
    unsigned __int16 v34 = v58;
    if (!v58) {
      return 1;
    }
    std::string __p = v58;
    goto LABEL_34;
  }
  if (a5 != 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v39 = mach_continuous_time();
      unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PduType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "SPL", 69, "GN_SUPL_PPDU_Delivery_In", 770, a5);
      LbsOsaTrace_WriteLog(0x12u, __str, v40, 0, 1);
    }
    return 1;
  }
  uint64_t v14 = SUPL_Message_Init();
  if (v14)
  {
    unsigned __int16 v15 = v14;
    unsigned char v14[16] = 5;
    *((_DWORD *)v14 + 5) = a1;
    char v16 = operator new(0x28uLL, MEMORY[0x263F8C180]);
    if (v16)
    {
      *char v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      v15[14] = v16;
      *((_DWORD *)v16 + 6) = 3;
      *((_DWORD *)v16 + 7) = a6;
      *((unsigned char *)v16 + 32) = v7;
      if (a2 && a3) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v16, (char *)a3, (char *)&a3[a2], a2);
      }
      uint64_t v17 = qword_2684657F8;
      int v18 = (uint64_t *)(qword_2684657F8 + 8);
      if (!qword_2684657F8) {
        int v18 = &SUPL_Queue;
      }
      *int v18 = (uint64_t)v15;
      qword_2684657F8 = (uint64_t)v15;
      *unsigned __int16 v15 = v17;
      v15[1] = 0;
      return 1;
    }
    v15[14] = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v56 = mach_continuous_time();
      unsigned __int16 v57 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PPDU Rsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "SPL", 69, "GN_SUPL_PPDU_Delivery_In", 1537);
      LbsOsaTrace_WriteLog(0x12u, __str, v57, 0, 1);
    }
    SUPL_Message_Free(v15);
    return 0;
  }
  int v45 = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
  uint64_t result = 0;
  if (v45)
  {
    bzero(__str, 0x410uLL);
    uint64_t v46 = mach_continuous_time();
    unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "SPL", 69, "GN_SUPL_PPDU_Delivery_In", 1537);
    LbsOsaTrace_WriteLog(0x12u, __str, v47, 0, 1);
    return 0;
  }
  return result;
}

void sub_22B99E8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GN_SUPL_PPDU_SessionEnd_In()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PPDU Session Ended\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "SPL", 73, "GN_SUPL_PPDU_SessionEnd_In");
    LbsOsaTrace_WriteLog(0x12u, __str, v1, 4, 1);
  }
  return 1;
}

uint64_t ConvertIntValsToASN1T_CellGlobalIdEUTRA(uint64_t a1, unint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a3 > 0x3E7 || a4 > 0x3E7 || a5 >> 28)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Either MCC %d, MNC %d, CID %d, TAC %d is not in range\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "SPL", 69, "ConvertIntValsToASN1T_CellGlobalIdEUTRA", 514, v9, v8, a5, a6);
      LbsOsaTrace_WriteLog(0x12u, __str, v18, 0, 1);
      return 0;
    }
  }
  else
  {
    uint64_t v12 = *(unsigned char **)(a1 + 56);
    unsigned __int16 v13 = (unsigned char **)(a1 + 56);
    unint64_t v14 = *(void *)(a1 + 64) - (void)v12;
    if (v14 > 3)
    {
      if (v14 != 4) {
        *(void *)(a1 + 64) = v12 + 4;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), 4 - v14);
      uint64_t v12 = *v13;
    }
    unsigned int v19 = 0;
    *uint64_t v12 = a5 >> 20;
    *(unsigned char *)(*(void *)(a1 + 56) + 1) = a5 >> 12;
    *(unsigned char *)(*(void *)(a1 + 56) + 2) = a5 >> 4;
    *(unsigned char *)(*(void *)(a1 + 56) + 3) = 16 * a5;
    *(unsigned char *)(*(void *)(a1 + 56) + 3) >>= 4;
    do
    {
      do
      {
        unsigned int v20 = v19;
        char v21 = v9;
        unsigned int v22 = (unsigned __int16)v9;
        LOWORD(v9) = (unsigned __int16)v9 / 0xAu;
        __str[0] = v21 - 10 * v9;
        std::vector<ASN1T_MCC_MNC_Digit>::insert(a1 + 8, *(char **)(a1 + 8), __str);
        unsigned int v19 = v20 + 1;
      }
      while (v22 > 9);
    }
    while (v20 < 2);
    int v23 = 0;
    do
    {
      do
      {
        char v24 = v8;
        int v25 = v23;
        unsigned int v26 = (unsigned __int16)v8;
        LOWORD(v8) = (unsigned __int16)v8 / 0xAu;
        __str[0] = v24 - 10 * v8;
        std::vector<ASN1T_MCC_MNC_Digit>::insert(a1 + 32, *(char **)(a1 + 32), __str);
        int v23 = v25 - 1;
      }
      while (v26 > 9);
    }
    while (!v25);
    *(unsigned char *)a1 = 1;
    uint64_t v27 = (unsigned char *)*a2;
    unint64_t v28 = a2[1] - *a2;
    if (v28 > 1)
    {
      if (v28 != 2) {
        a2[1] = (unint64_t)(v27 + 2);
      }
    }
    else
    {
      std::vector<unsigned char>::__append(a2, 2 - v28);
      uint64_t v27 = (unsigned char *)*a2;
    }
    unsigned char *v27 = BYTE1(a6);
    *(unsigned char *)(*a2 + 1) = a6;
    return 1;
  }
  return result;
}

void ASN1T_MeasResultEUTRA::~ASN1T_MeasResultEUTRA(ASN1T_MeasResultEUTRA *this)
{
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  unsigned __int16 v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

BOOL GN_SUPL_DecodeSuplInit_In(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = (LcsUtils *)LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PDU_Size,%u,Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 73, "GN_SUPL_DecodeSuplInit_In", a3, a1);
    int IsLoggingAllowed = (LcsUtils *)LbsOsaTrace_WriteLog(0x12u, __str, v10, 4, 1);
  }
  if (!a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT PDU is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "SPL", 69, "GN_SUPL_DecodeSuplInit_In", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v19, 0, 1);
    }
    return 0;
  }
  if (!a3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT Length is 0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "SPL", 69, "GN_SUPL_DecodeSuplInit_In", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v21, 0, 1);
    }
    return 0;
  }
  if (!a4)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Decoded SUPL INIT mesage is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "SPL", 69, "GN_SUPL_DecodeSuplInit_In", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v23, 0, 1);
    }
    return 0;
  }
  uint64_t Instance = (LcsUtils *)LcsUtils::GetInstance(IsLoggingAllowed);
  LcsUtils::TraceBuffer(Instance, a2, a3);
  std::string __p = 0;
  unsigned int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v12 = (SuplUtils *)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)a2, (char *)&a2[a3], a3);
  unsigned __int16 v13 = (SuplVersionNegotiation *)SuplUtils::GetInstance(v12);
  int v14 = SuplUtils::DecodeSUPL_INIT(v13, a1, (uint64_t)&__p, a4);
  BOOL v15 = v14 == 0;
  if (v14)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT Decode failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "SPL", 69, "GN_SUPL_DecodeSuplInit_In", 770);
      LbsOsaTrace_WriteLog(0x12u, __str, v17, 0, 1);
    }
  }
  else
  {
    Trace_GN_SUPL_SuplInitInfo(a4);
  }
  if (__p)
  {
    unsigned int v26 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_22B99F0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LcsFunctionEntryExitTrace::LcsFunctionEntryExitTrace(LcsFunctionEntryExitTrace *this, int a2, char *__s)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(this, __s);
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s:Enter\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 68, "LcsFunctionEntryExitTrace", __s);
    LbsOsaTrace_WriteLog(0x12u, __str, v5, 5, 1);
  }
}

void sub_22B99F1CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace(void **this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    unsigned __int16 v3 = (const char *)this;
    if (*((char *)this + 23) < 0) {
      unsigned __int16 v3 = (const char *)*this;
    }
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s:Exit\n", (unint64_t)v2, "SPL", 68, "~LcsFunctionEntryExitTrace", v3);
    LbsOsaTrace_WriteLog(0x12u, __str, v4, 5, 1);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void sub_22B99F2EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

char *std::vector<UtaLcsShapePoint>::__assign_with_size[abi:ne180100]<UtaLcsShapePoint*,UtaLcsShapePoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<UtaLcsShapePoint>::__vallocate[abi:ne180100](v7, v11);
    unsigned __int16 v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unsigned __int16 v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unsigned __int16 v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<UtaLcsShapePoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<UtaLcsShapePoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<UtaLcsShapePoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::vector<ASN1T_MCC_MNC_Digit>::insert(uint64_t a1, char *__src, char *a3)
{
  unsigned __int16 v3 = a3;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v6[-*(void *)a1 + 1];
    if (v11 < 0) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = __src - v10;
    unint64_t v13 = v7 - (void)v10;
    if (2 * v13 > v11) {
      uint64_t v11 = 2 * v13;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)operator new(v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = &v15[v12];
    size_t v17 = &v15[v14];
    if (v12 == v14)
    {
      if (v12 < 1)
      {
        if ((unint64_t)(2 * v12) <= 1) {
          size_t v19 = 1;
        }
        else {
          size_t v19 = 2 * v12;
        }
        uint64_t v20 = (char *)operator new(v19);
        uint64_t v16 = &v20[v19 >> 2];
        size_t v17 = &v20[v19];
        if (v15)
        {
          operator delete(v15);
          uint64_t v10 = *(char **)a1;
        }
      }
      else
      {
        if (v12 + 1 >= 0) {
          uint64_t v18 = v12 + 1;
        }
        else {
          uint64_t v18 = v12 + 2;
        }
        v16 -= v18 >> 1;
      }
    }
    *uint64_t v16 = *v3;
    unsigned __int16 v21 = v16 + 1;
    if (v10 != __src)
    {
      uint64_t v22 = __src;
      do
      {
        char v23 = *--v22;
        *--uint64_t v16 = v23;
      }
      while (v22 != v10);
    }
    char v24 = *(unsigned char **)(a1 + 8);
    uint64_t v25 = v24 - __src;
    if (v24 != __src) {
      memmove(v21, __src, v24 - __src);
    }
    unsigned int v26 = *(char **)a1;
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = &v21[v25];
    *(void *)(a1 + 16) = v17;
    if (v26)
    {
      operator delete(v26);
    }
  }
  else if (__src == v6)
  {
    *__int16 __src = *a3;
    *(void *)(a1 + 8) = __src + 1;
  }
  else
  {
    uint64_t v8 = __src + 1;
    if (v6)
    {
      *uint64_t v6 = *(v6 - 1);
      uint64_t v9 = v6 + 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    *(void *)(a1 + 8) = v9;
    if (v6 != v8) {
      memmove(__src + 1, __src, v6 - v8);
    }
    if (__src <= v3 && *(void *)(a1 + 8) > (unint64_t)v3) {
      ++v3;
    }
    *__int16 __src = *v3;
  }
}

void sub_22B99F76C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ASN1T_CellMeasuredResults>::__construct_one_at_end[abi:ne180100]<ASN1T_CellMeasuredResults const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = *(void *)a2;
  *(unsigned char *)(v3 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(v3 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(v3 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 48) = 0;
  uint64_t result = std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v3 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 56) - *(void *)(a2 + 48));
  *(void *)(a1 + 8) = v3 + 72;
  return result;
}

void sub_22B99F830(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ASN1T_CellMeasuredResults>::__push_back_slow_path<ASN1T_CellMeasuredResults const&>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1->i64[0];
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
  }
  uint64_t i64 = (uint64_t)a1[1].i64;
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[1].i64[0] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v30 = a1 + 1;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>>(i64, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[72 * v4];
  uint64_t v27 = v10;
  v28.i64[0] = (uint64_t)v11;
  v28.i64[1] = (uint64_t)v11;
  uint64_t v29 = &v10[72 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  v11[8] = *(unsigned char *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  *((void *)v11 + 2) = v12;
  uint64_t v13 = *(void *)(a2 + 32);
  char v14 = *(unsigned char *)(a2 + 40);
  *((void *)v11 + 6) = 0;
  v11 += 48;
  *(v11 - 8) = v14;
  *((void *)v11 - 2) = v13;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v11, *(const void **)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 56) - *(void *)(a2 + 48));
  uint64_t v15 = v28.i64[0];
  uint64_t v16 = v28.i64[1] + 72;
  v28.i64[1] += 72;
  uint64_t v18 = a1->i64[0];
  unint64_t v17 = a1->u64[1];
  if (v17 == a1->i64[0])
  {
    int64x2_t v24 = vdupq_n_s64(v17);
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = v15 + v19;
      uint64_t v21 = v17 + v19;
      *(void *)(v20 - 72) = *(void *)(v17 + v19 - 72);
      *(unsigned char *)(v20 - 64) = *(unsigned char *)(v17 + v19 - 64);
      uint64_t v22 = *(void *)(v17 + v19 - 56);
      *(_DWORD *)(v20 - 48) = *(_DWORD *)(v17 + v19 - 48);
      *(void *)(v20 - 56) = v22;
      uint64_t v23 = *(void *)(v17 + v19 - 40);
      *(unsigned char *)(v20 - 32) = *(unsigned char *)(v17 + v19 - 32);
      *(void *)(v20 - 40) = v23;
      *(void *)(v20 - 16) = 0;
      *(void *)(v20 - 8) = 0;
      *(void *)(v20 - 24) = 0;
      *(_OWORD *)(v20 - 24) = *(_OWORD *)(v17 + v19 - 24);
      *(void *)(v20 - 8) = *(void *)(v17 + v19 - 8);
      *(void *)(v21 - 24) = 0;
      *(void *)(v21 - 16) = 0;
      *(void *)(v21 - 8) = 0;
      v19 -= 72;
    }
    while (v17 + v19 != v18);
    int64x2_t v24 = *a1;
    uint64_t v16 = v28.i64[1];
    v15 += v19;
  }
  a1->i64[0] = v15;
  a1->i64[1] = v16;
  int64x2_t v28 = v24;
  uint64_t v25 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v29;
  uint64_t v29 = v25;
  uint64_t v27 = (char *)v24.i64[0];
  std::__split_buffer<ASN1T_CellMeasuredResults>::~__split_buffer((uint64_t)&v27);
  return v16;
}

void sub_22B99FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__split_buffer<ASN1T_CellMeasuredResults>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 72;
    unint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<ASN1T_MeasuredResults>::__push_back_slow_path<ASN1T_MeasuredResults const&>(int64x2_t *a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1->i64[0];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
  }
  uint64_t i64 = (uint64_t)a1[1].i64;
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v25 = a1 + 1;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>>(i64, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  uint64_t v22 = v10;
  v23.i64[0] = (uint64_t)v11;
  v23.i64[1] = (uint64_t)v11;
  int64x2_t v24 = &v10[40 * v9];
  uint64_t v12 = *a2;
  *(void *)(v11 + 7) = *(uint64_t *)((char *)a2 + 7);
  *(void *)uint64_t v11 = v12;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<ASN1T_CellMeasuredResults>::__init_with_size[abi:ne180100]<ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>((void *)v11 + 2, a2[2], a2[3], 0x8E38E38E38E38E39 * ((a2[3] - a2[2]) >> 3));
  uint64_t v13 = (void *)v23.i64[0];
  uint64_t v14 = v23.i64[1] + 40;
  v23.i64[1] += 40;
  uint64_t v16 = a1->i64[0];
  unint64_t v15 = a1->u64[1];
  if (v15 == a1->i64[0])
  {
    int64x2_t v19 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      uint64_t v17 = *(void *)(v15 - 40);
      v15 -= 40;
      uint64_t v18 = *(void *)(v15 + 7);
      *(v13 - 5) = v17;
      v13 -= 5;
      *(void *)((char *)v13 + 7) = v18;
      v13[3] = 0;
      double v13[4] = 0;
      void v13[2] = 0;
      *((_OWORD *)v13 + 1) = *(_OWORD *)(v15 + 16);
      double v13[4] = *(void *)(v15 + 32);
      *(void *)(v15 + 16) = 0;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0;
    }
    while (v15 != v16);
    int64x2_t v19 = *a1;
    uint64_t v14 = v23.i64[1];
  }
  a1->i64[0] = (uint64_t)v13;
  a1->i64[1] = v14;
  int64x2_t v23 = v19;
  uint64_t v20 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v24;
  int64x2_t v24 = v20;
  uint64_t v22 = (char *)v19.i64[0];
  std::__split_buffer<ASN1T_MeasuredResults>::~__split_buffer((uint64_t)&v22);
  return v14;
}

void sub_22B99FCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__split_buffer<ASN1T_MeasuredResults>::~__split_buffer(uint64_t a1)
{
  v5[1] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    v5[0] = (void **)(i - 24);
    std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100](v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<ASN1T_MeasResultEUTRA>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 120;
    std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100](v4, (void *)(i - 120));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<unsigned char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  unint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      unint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = operator new(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v8[(void)v12];
    unint64_t v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    uint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--uint64_t v14 = v18;
      }
      while (v7 != v17);
      unint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t NK_SV_Res_RTests(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = result;
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 233)) {
    return result;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  uint64_t v61 = (unsigned char *)(a3 + 13963);
  unint64_t v60 = (unsigned char *)(a3 + 8387);
  long long v68 = 0u;
  long long v69 = 0u;
  long long v67 = 0u;
  uint64_t v10 = 3304;
  uint64_t v11 = 4832;
  do
  {
    v66[v6] = 16711680;
    v65[v6 + 48] = 16711680;
    v65[v6] = 16711680;
    if (*(unsigned char *)(a3 + v6 + 2960))
    {
      *((unsigned char *)&v67 + v6) = 1;
      double v12 = *(double *)(a3 + v11);
      unsigned int v13 = (int)v12;
      if ((int)v12 < 0) {
        unsigned int v13 = -v13;
      }
      v66[v6] = v13;
      double v14 = v12 * v12;
      double v15 = *(double *)(a3 + v11 + 2400);
      if (v14 / v15 >= 16711680.0)
      {
        uint64_t result = 16711680;
      }
      else
      {
        uint64_t result = (int)(v14 / v15);
        v65[v6 + 48] = result;
      }
      double v16 = v14 / (v15 - *(double *)(a3 + v10));
      if (v16 >= 16711680.0)
      {
        int v17 = 16711680;
      }
      else
      {
        int v17 = (int)v16;
        v65[v6] = (int)v16;
      }
      if (*(unsigned char *)(a3 + v6 + 49))
      {
        if (v13 < 0x3E8) {
          ++v9;
        }
        if (v13 <= 0xBB7)
        {
          if ((int)result < 9) {
            ++v8;
          }
          if (v17 < 9) {
            ++v7;
          }
        }
      }
    }
    ++v6;
    v10 += 24;
    v11 += 8;
  }
  while (v6 != 48);
  if (v9 <= 0)
  {
    uint64_t v35 = 0;
    int32x4_t v36 = vdupq_n_s32(0xC0000001);
    v37.i64[0] = 0xC0000000C0000000;
    v37.i64[1] = 0xC0000000C0000000;
    unsigned __int16 v38 = (int32x4_t *)v66;
    v39.i64[0] = 0xC0000000C0000000;
    v39.i64[1] = 0xC0000000C0000000;
    v40.i64[0] = 0xC0000000C0000000;
    v40.i64[1] = 0xC0000000C0000000;
    v41.i64[0] = 0xC0000000C0000000;
    v41.i64[1] = 0xC0000000C0000000;
    int32x4_t v42 = v36;
    int32x4_t v43 = v36;
    int32x4_t v44 = v36;
    do
    {
      int8x16_t v45 = vceqzq_s8(*(int8x16_t *)((char *)&v67 + v35));
      int16x8_t v46 = vmovl_s8(*(int8x8_t *)v45.i8);
      int8x16_t v47 = (int8x16_t)vmovl_s16(*(int16x4_t *)v46.i8);
      int8x16_t v48 = (int8x16_t)vmovl_high_s16(v46);
      int16x8_t v49 = vmovl_high_s8(v45);
      int8x16_t v50 = (int8x16_t)vmovl_s16(*(int16x4_t *)v49.i8);
      int8x16_t v51 = (int8x16_t)vmovl_high_s16(v49);
      int32x4_t v53 = v38[2];
      int32x4_t v52 = v38[3];
      int32x4_t v55 = *v38;
      int32x4_t v54 = v38[1];
      v38 += 4;
      int32x4_t v44 = (int32x4_t)vbslq_s8(v51, (int8x16_t)v44, (int8x16_t)vmaxq_s32(v52, v44));
      int32x4_t v43 = (int32x4_t)vbslq_s8(v50, (int8x16_t)v43, (int8x16_t)vmaxq_s32(v53, v43));
      int32x4_t v42 = (int32x4_t)vbslq_s8(v48, (int8x16_t)v42, (int8x16_t)vmaxq_s32(v54, v42));
      int32x4_t v36 = (int32x4_t)vbslq_s8(v47, (int8x16_t)v36, (int8x16_t)vmaxq_s32(v55, v36));
      int32x4_t v41 = (int32x4_t)vbslq_s8(v51, (int8x16_t)v41, (int8x16_t)vminq_s32(v52, v41));
      int32x4_t v40 = (int32x4_t)vbslq_s8(v50, (int8x16_t)v40, (int8x16_t)vminq_s32(v53, v40));
      int32x4_t v39 = (int32x4_t)vbslq_s8(v48, (int8x16_t)v39, (int8x16_t)vminq_s32(v54, v39));
      int32x4_t v37 = (int32x4_t)vbslq_s8(v47, (int8x16_t)v37, (int8x16_t)vminq_s32(v55, v37));
      v35 += 16;
    }
    while (v35 != 48);
    if (vmaxvq_s32(vmaxq_s32(vmaxq_s32(v36, v43), vmaxq_s32(v42, v44)))
       - vminvq_s32(vminq_s32(vminq_s32(v37, v40), vminq_s32(v39, v41))) > 250000)
    {
LABEL_51:
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
    }
  }
  else
  {
    uint64_t v18 = 0;
    int v19 = 0;
    do
    {
      uint64_t result = *((unsigned __int8 *)&v67 + v18);
      if (*((unsigned char *)&v67 + v18))
      {
        uint64_t result = v66[v18];
        BOOL v20 = v9 <= 2 || (int)result <= 50000;
        BOOL v21 = !v20;
        if ((int)result > 250000
          || v21
          || v9 >= 4
          && ((int)result > 30000
           || v9 >= 5
           && ((int)result > 20000
            || v9 >= 6
            && (v9 > 6 ? (BOOL v22 = (int)result <= 10000) : (BOOL v22 = 1),
                v22 ? (int v23 = 0) : (int v23 = 1),
                (int)result > 15000 || v23))))
        {
          ++v19;
          *((unsigned char *)&v67 + v18) = 0;
        }
      }
      ++v18;
    }
    while (v18 != 48);
    if (v19 >= 1 && v9 < v19 + 3) {
      goto LABEL_51;
    }
  }
  int v62 = v7;
  int v59 = v8;
  if (v8 < 7)
  {
    if (v8 != 6 || *(int *)(a3 + 12) < 9) {
      goto LABEL_69;
    }
    goto LABEL_57;
  }
  if (*(int *)(a3 + 12) > 7)
  {
LABEL_57:
    for (uint64_t i = 0; i != 48; ++i)
    {
      if (*((unsigned char *)&v67 + i))
      {
        int v25 = v65[i + 48];
        int v26 = v65[i];
        if (v25 > 80 || v26 > 255)
        {
LABEL_67:
          *((unsigned char *)&v67 + i) = 0;
          uint64_t result = (uint64_t)EvCrt_v("Reasonable fail Ch%d %d %d", i, v25, v26);
          continue;
        }
        if (v62 < 5 || v25 < 36)
        {
          if (v25 < 16) {
            continue;
          }
        }
        else if (!*(unsigned char *)(a3 + 1026 + i))
        {
          goto LABEL_67;
        }
        if (*(unsigned __int8 *)(v64 + 700 + i - 96) - 1 <= *(unsigned __int8 *)(v64 + 700 + i)) {
          goto LABEL_67;
        }
      }
    }
  }
LABEL_69:
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = a4 + 416;
  uint64_t v30 = a2 + 6696;
  uint64_t v31 = a3 + 8536;
  uint64_t v32 = a3 + 14112;
  do
  {
    if (*(unsigned char *)(a3 + v28 + 2960) && !*((unsigned char *)&v67 + v28))
    {
      *(unsigned char *)(a3 + v28 + 2960) = 0;
      *(_DWORD *)(a3 + 4 * v28 + 3056) = 15;
      --*(unsigned char *)(a3 + 2811);
      ++*(unsigned char *)(a3 + 2812);
      if (*(unsigned char *)(v31 + v28))
      {
        *(unsigned char *)(v31 + v28) = 0;
        *(_DWORD *)(a3 + v27 + 8632) = 15;
        --*v60;
        ++v60[1];
      }
      if (*(unsigned char *)(v32 + v28))
      {
        *(unsigned char *)(v32 + v28) = 0;
        *(_DWORD *)(a3 + v27 + 14208) = 15;
        --*v61;
        ++v61[1];
      }
      if (*(unsigned __int8 *)(v64 + v28 + 700) >= *(unsigned __int8 *)(v64 + v28 + 604))
      {
        *(unsigned char *)(v30 + v28) = 0;
        *(unsigned char *)(a4 + v28 + 365) |= 1u;
        *(_DWORD *)(v29 + 4 * v28) = *(_DWORD *)a3;
        uint64_t result = (uint64_t)EvCrt_v("ChanReset %2d : NKSVRT3  C %d SV %3d   JNR %2d >=SNR %2d ", v28, *(unsigned __int8 *)(v64 + v27 + 76), *(unsigned __int8 *)(v64 + v27 + 78), *(unsigned __int8 *)(v64 + v28 + 700), *(unsigned __int8 *)(v64 + v28 + 604));
      }
      if (fabs(*(double *)(v31 + 8 * v28 - 3704)) > 150000.0
        && (~*(unsigned __int16 *)(v64 + 2 * v28 + 316) & 0x300) == 0)
      {
        *(unsigned char *)(v30 + v28) = 0;
        *(unsigned char *)(a4 + v28 + 365) |= 1u;
        *(_DWORD *)(v29 + 4 * v28) = *(_DWORD *)a3;
        uint64_t result = (uint64_t)EvCrt_v("ChanReset %2d : NKSVRT4  C %d SV %3d   Int_ms %8d   Num_Fit %2d %2d", v28, *(unsigned __int8 *)(v64 + v27 + 76), *(unsigned __int8 *)(v64 + v27 + 78), v66[v28], v59, v62);
      }
    }
    ++v28;
    v27 += 4;
  }
  while (v28 != 48);
  if (*(_DWORD *)(a3 + 968) == 1 && !*(unsigned char *)(a2 + 233))
  {
    if (v9 >= 3 && v62 >= 3)
    {
      if (v62 <= 5)
      {
        if (v62 == 5)
        {
          int v33 = 3;
          int v34 = 16;
        }
        else
        {
          if (v62 <= 3) {
            int v34 = 25;
          }
          else {
            int v34 = 20;
          }
          if (v62 > 3) {
            int v33 = 4;
          }
          else {
            int v33 = 5;
          }
        }
      }
      else
      {
        int v33 = 2;
        int v34 = 13;
      }
      for (uint64_t j = 0; j != 48; ++j)
      {
        if (*(unsigned char *)(a3 + j + 2960))
        {
          if (v65[j] > v34 && v65[j + 48] > v33 && !*(unsigned char *)(a3 + j + 1026))
          {
            double v57 = *(double *)(a3 + 4832 + 8 * j);
            if (v57 < -35.0 || v57 > 150.0)
            {
              *(unsigned char *)(a3 + j + 2960) = 0;
              *(_DWORD *)(a3 + 4 * j + 3056) = 16;
              --*(unsigned char *)(a3 + 2811);
              ++*(unsigned char *)(a3 + 2812);
            }
          }
        }
      }
    }
    if (*(unsigned __int8 *)(a3 + 2811) <= 3u && !*(unsigned char *)(a2 + 233))
    {
      uint64_t v58 = 0;
      while (!*(unsigned char *)(a3 + v58 + 2960)
           || *(unsigned char *)(a3 + v58 + 1026)
           || *(unsigned __int16 *)(v64 + 844 + 2 * v58) > 0x7CFu
           || (int)v65[v58 + 48] <= 36 && (int)v65[v58] < 401)
      {
        if (++v58 == 48) {
          return result;
        }
      }
      *(_OWORD *)(a3 + 2992) = 0u;
      *(_OWORD *)(a3 + 2976) = 0u;
      *(_OWORD *)(a3 + 2960) = 0u;
      *(_OWORD *)(a3 + 8536) = 0u;
      *(_OWORD *)(a3 + 8552) = 0u;
      *(_OWORD *)(a3 + 8568) = 0u;
      *(_OWORD *)(a3 + 14112) = 0u;
      *(_OWORD *)(a3 + 14128) = 0u;
      *(_OWORD *)(a3 + 14144) = 0u;
      *(unsigned char *)(a3 + 2811) = 0;
      *unint64_t v60 = 0;
      *uint64_t v61 = 0;
    }
  }
  return result;
}

uint64_t NK_SV_Res_RTests_Riskier_SVs(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)(a2 + 13963);
  uint64_t v3 = (unsigned char *)(a2 + 8387);
  if (*(int *)(a2 + 964) >= 3 && *(double *)(a2 + 24688) <= 100.0 && *(double *)(a2 + 24704) <= 100.0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = result + 76;
    uint64_t v11 = 14112;
    uint64_t v12 = 8632;
    uint64_t v13 = 8536;
    uint64_t v14 = 4832;
    do
    {
      int v15 = *(_DWORD *)(v10 + 4 * v9);
      uint64_t result = v15;
      if (v15 == 4 || v15 == 3 && ((BYTE2(v15) - 14) & 0xFFFFFFFB) == 0)
      {
        uint64_t result = *(unsigned __int8 *)(a2 + v9 + 2960);
        if (*(unsigned char *)(a2 + v9 + 2960))
        {
          uint64_t result = a2 + v14;
          double v16 = *(double *)(a2 + v14 + 2400);
          if (v16 > 0.0)
          {
            uint64_t result = *(unsigned __int8 *)(a2 + v9 + 49);
            if (*(unsigned char *)(a2 + v9 + 49))
            {
              if (*(double *)(a2 + v14) * *(double *)(a2 + v14) / fmin(v16, 10000.0) > 9.0)
              {
                *(unsigned char *)(a2 + v9 + 2960) = 0;
                *(_DWORD *)(a2 + 4 * v9 + 3056) = 15;
                --*(unsigned char *)(a2 + 2811);
                ++*(unsigned char *)(a2 + 2812);
                if (*(unsigned char *)(a2 + v13))
                {
                  *(unsigned char *)(a2 + v13) = 0;
                  *(_DWORD *)(a2 + v12) = 15;
                  --*v3;
                  ++*(unsigned char *)(a2 + 8388);
                }
                if (*(unsigned char *)(a2 + v11))
                {
                  *(unsigned char *)(a2 + v11) = 0;
                  *(_DWORD *)(a2 + v12 + 5576) = 15;
                  --*v2;
                  ++*(unsigned char *)(a2 + 13964);
                }
              }
            }
          }
        }
      }
      ++v9;
      ++v11;
      v12 += 4;
      ++v13;
      v14 += 8;
    }
    while (v9 != 48);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2 + 14112;
    uint64_t v6 = (_DWORD *)(a2 + 8632);
    uint64_t v7 = a2 + 8536;
    do
    {
      int v8 = *(_DWORD *)(result + 76 + 4 * v4);
      if (v8 == 4 || v8 == 3 && ((BYTE2(v8) - 14) & 0xFFFFFFFB) == 0)
      {
        if (*(unsigned char *)(a2 + v4 + 2960))
        {
          *(unsigned char *)(a2 + v4 + 2960) = 0;
          *(_DWORD *)(a2 + 4 * v4 + 3056) = 18;
          --*(unsigned char *)(a2 + 2811);
          ++*(unsigned char *)(a2 + 2812);
        }
        if (*(unsigned char *)(v7 + v4))
        {
          *(unsigned char *)(v7 + v4) = 0;
          *uint64_t v6 = 18;
          --*v3;
          ++*(unsigned char *)(a2 + 8388);
        }
        if (*(unsigned char *)(v5 + v4))
        {
          *(unsigned char *)(v5 + v4) = 0;
          v6[1394] = 18;
          --*v2;
          ++*(unsigned char *)(a2 + 13964);
        }
      }
      ++v4;
      ++v6;
    }
    while (v4 != 48);
  }
  return result;
}

uint64_t NK_SV_Res_RTests_FDist(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*(int *)(a3 + 12) >= 6)
  {
    if (result >= 8)
    {
      EvCrt_Illegal_Default("NK_SV_Res_RTests_FDist", 0x263u);
      int v6 = 9;
      int v5 = 7;
    }
    else
    {
      int v5 = dword_22BB405F8[(int)result];
      int v6 = dword_22BB40618[(int)result];
    }
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    memset(v33, 0, sizeof(v33));
    double v12 = 0.0;
    uint64_t result = 0x4049000000000000;
    do
    {
      if (*(unsigned char *)(a3 + v7 + 2960) && *(unsigned char *)(a3 + v7 + 49) && *(_WORD *)(a2 + 7744 + 2 * v7))
      {
        double v13 = *(double *)(a3 + 4832 + 8 * v7);
        *((double *)v33 + v7) = v13 * v13;
        double v12 = v12 + v13 * v13;
        double v14 = fabs(v13);
        if (v13 > -50.0) {
          unsigned int v15 = v8;
        }
        else {
          unsigned int v15 = v8 + 1;
        }
        if (v13 < 50.0) {
          unsigned int v16 = v9;
        }
        else {
          unsigned int v16 = v9 + 1;
        }
        if (v13 >= 50.0) {
          unsigned int v15 = v8;
        }
        if (v14 >= 50.0) {
          unsigned int v9 = v16;
        }
        else {
          ++v10;
        }
        if (v14 >= 50.0) {
          unsigned int v8 = v15;
        }
        ++v11;
      }
      ++v7;
    }
    while (v7 != 48);
    BOOL v17 = v8 > 1 && v9 > 1;
    unsigned int v18 = v9 >> 1;
    if (!v17) {
      unsigned int v18 = 0;
    }
    unsigned int v19 = v18 + v5;
    unsigned int v20 = v18 + v6;
    BOOL v21 = *(_DWORD *)(a3 + 968) == 1;
    BOOL v22 = v20 < 0xC;
    BOOL v23 = !v21 || !v22;
    if (v21 && v22) {
      unsigned int v24 = 10;
    }
    else {
      unsigned int v24 = v19;
    }
    if (v23) {
      unsigned int v25 = v20;
    }
    else {
      unsigned int v25 = 12;
    }
    if (v10 >= v24)
    {
      if (v11 <= 0x30) {
        unsigned int v26 = v11;
      }
      else {
        unsigned int v26 = 47;
      }
      do
      {
        if (v26 < v25) {
          break;
        }
        uint64_t v27 = 0;
        uint64_t result = 0;
        do
        {
          if (v26 >= v25)
          {
            char v28 = *(unsigned char *)(a3 + 2811);
            if (v28)
            {
              uint64_t v29 = a3 + v27;
              if (*(unsigned char *)(a3 + v27 + 2960))
              {
                if (*(unsigned char *)(v29 + 49) && *(_WORD *)(a2 + 7744 + 2 * v27))
                {
                  double v30 = *(double *)(a3 + 4832 + 8 * v27);
                  if (v30 < -50.0 || v30 > 100.0)
                  {
                    double v32 = *((double *)v33 + v27);
                    if (v32 / ((v12 - v32) / (double)(v26 - 1)) > NK_SV_Res_RTests_FDist(e_CTXT_SES,s_Nav_Kalman_SD *,s_Nav_Kalman_WD *)::F_table[v26 - 1])
                    {
                      *(unsigned char *)(v29 + 2960) = 0;
                      *(_DWORD *)(a3 + 4 * v27 + 3056) = 17;
                      ++*(unsigned char *)(a3 + 2812);
                      *(unsigned char *)(a3 + 2811) = v28 - 1;
                      uint64_t result = 1;
                      --v26;
                      double v12 = v12 - v32;
                    }
                  }
                }
              }
            }
          }
          ++v27;
        }
        while (v27 != 48);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

void SuplAsn1Logger::TraceError(unsigned int a1, int a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  if (a1 >= 7) {
    int v5 = "UNDEFINED_STATUS";
  }
  else {
    int v5 = off_2648E90A8[(char)a1];
  }
  MEMORY[0x230F4E3E0](__p, v5);
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v7 = __p;
    if (v10 < 0) {
      uint64_t v7 = (void **)__p[0];
    }
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Status,%s,CurByte,%u,NextBit,%u\n", (unint64_t)v6, "SPL", 69, "TraceError", 770, (const char *)v7, a2, a3);
    LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_22B9A0D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Asn1Coder::AddBitToBuffer(uint64_t **a1, int a2)
{
  unint64_t v3 = *((unsigned int *)a1 + 2);
  uint64_t v4 = **a1;
  if ((*a1)[1] - v4 <= v3)
  {
    *((unsigned char *)a1 + 16) = 2;
    int v11 = *((_DWORD *)a1 + 3);
    SuplAsn1Logger::TraceError(2u, v3, v11);
  }
  else
  {
    char v5 = *((_DWORD *)a1 + 3);
    int v6 = *(unsigned __int8 *)(v4 + v3);
    int v7 = v6 & (-129 >> v5);
    unsigned int v8 = v6 | (0x80u >> v5);
    if (a2) {
      char v9 = v8;
    }
    else {
      char v9 = v7;
    }
    *(unsigned char *)(v4 + v3) = v9;
    unsigned int v10 = *((_DWORD *)a1 + 3) + 1;
    *((_DWORD *)a1 + 3) = v10;
    if (v10 >= 8) {
      a1[1] = (uint64_t *)(*((_DWORD *)a1 + 2) + 1);
    }
  }
}

uint64_t Asn1Coder::GetBitFromBuffer(uint64_t **a1)
{
  unint64_t v1 = *((unsigned int *)a1 + 2);
  uint64_t v2 = **a1;
  if ((*a1)[1] - v2 <= v1)
  {
    *((unsigned char *)a1 + 16) = 2;
    SuplAsn1Logger::TraceError(2u, v1, *((_DWORD *)a1 + 3));
    return 0;
  }
  else
  {
    unsigned int v3 = *((_DWORD *)a1 + 3);
    uint64_t v4 = ((*(unsigned __int8 *)(v2 + v1) << v3++) >> 7) & 1;
    *((_DWORD *)a1 + 3) = v3;
    if (v3 >= 8) {
      a1[1] = (uint64_t *)(v1 + 1);
    }
  }
  return v4;
}

uint64_t Asn1Coder::EncodeInteger(uint64_t a1, int a2, int a3, int a4)
{
  if (a3 < a2)
  {
    unsigned int v5 = 1;
LABEL_11:
    *(unsigned char *)(a1 + 16) = v5;
    SuplAsn1Logger::TraceError(v5, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    return *(unsigned __int8 *)(a1 + 16);
  }
  unsigned int v5 = 4;
  int v6 = a4 - a2;
  if (a4 < a2 || a4 > a3) {
    goto LABEL_11;
  }
  unsigned int v7 = a3 - a2;
  if (a3 != a2)
  {
    char v8 = -1;
    do
    {
      ++v8;
      BOOL v9 = v7 > 1;
      v7 >>= 1;
    }
    while (v9);
    unsigned int v10 = 1 << v8;
    do
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, v10 & v6);
      BOOL v11 = v10 >= 2;
      v10 >>= 1;
    }
    while (v11);
  }
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t Asn1Coder::DecodeInteger(uint64_t a1, int a2, unsigned int a3, unsigned char *a4)
{
  unsigned int v5 = a3 - a2;
  if ((int)(a3 - a2) < 1)
  {
    uint64_t v14 = 5;
LABEL_14:
    SuplAsn1Logger::TraceError(v14, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    return v14;
  }
  __int16 v8 = a2;
  char v9 = -1;
  do
  {
    ++v9;
    BOOL v10 = v5 > 1;
    v5 >>= 1;
  }
  while (v10);
  unsigned __int8 v11 = 0;
  unsigned int v12 = 1 << v9;
  do
  {
    if (Asn1Coder::GetBitFromBuffer((uint64_t **)a1)) {
      char v13 = v12;
    }
    else {
      char v13 = 0;
    }
    v11 |= v13;
    BOOL v10 = v12 > 1;
    v12 >>= 1;
  }
  while (v10);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_14;
  }
  *a4 = v8 + v11;
  uint64_t v14 = 4;
  if (((v8 + v11) & 0x100) != 0 || a3 < (v8 + v11)) {
    goto LABEL_14;
  }
  return 0;
}

uint64_t Asn1Coder::DecodeInteger(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  unsigned int v5 = a3 - a2;
  if ((int)(a3 - a2) < 1)
  {
    LODWORD(result) = 5;
    uint64_t v15 = 5;
LABEL_14:
    SuplAsn1Logger::TraceError(result, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    return v15;
  }
  char v9 = -1;
  do
  {
    ++v9;
    BOOL v10 = v5 > 1;
    v5 >>= 1;
  }
  while (v10);
  unsigned __int16 v11 = 0;
  unsigned int v12 = 1 << v9;
  do
  {
    if (Asn1Coder::GetBitFromBuffer((uint64_t **)a1)) {
      __int16 v13 = v12;
    }
    else {
      __int16 v13 = 0;
    }
    v11 |= v13;
    BOOL v10 = v12 > 1;
    v12 >>= 1;
  }
  while (v10);
  uint64_t result = *(unsigned __int8 *)(a1 + 16);
  uint64_t v15 = result;
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_14;
  }
  int v16 = a2 + v11;
  *a4 = a2 + v11;
  uint64_t v15 = 4;
  if ((v16 & 0x10000) != 0 || a3 < (unsigned __int16)v16) {
    goto LABEL_14;
  }
  return result;
}

uint64_t Asn1Coder::DecodeInteger(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  unsigned int v5 = a3 - a2;
  if (a3 - a2 < 1)
  {
    uint64_t v14 = 5;
LABEL_14:
    SuplAsn1Logger::TraceError(v14, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    return v14;
  }
  char v9 = -1;
  do
  {
    ++v9;
    BOOL v10 = v5 > 1;
    v5 >>= 1;
  }
  while (v10);
  int v11 = 0;
  unsigned int v12 = 1 << v9;
  do
  {
    if (Asn1Coder::GetBitFromBuffer((uint64_t **)a1)) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = 0;
    }
    v11 |= v13;
    BOOL v10 = v12 > 1;
    v12 >>= 1;
  }
  while (v10);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_14;
  }
  *a4 = v11 + a2;
  uint64_t v14 = 4;
  if (v11 < 0 || v11 + a2 > a3) {
    goto LABEL_14;
  }
  return 0;
}

uint64_t Asn1Coder::DecodeInteger(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  unsigned int v8 = a3 - a2;
  if ((int)(a3 - a2) < 1)
  {
    int v11 = 0;
  }
  else
  {
    char v9 = -1;
    do
    {
      ++v9;
      BOOL v10 = v8 > 1;
      v8 >>= 1;
    }
    while (v10);
    int v11 = 0;
    unsigned int v12 = 1 << v9;
    do
    {
      if (Asn1Coder::GetBitFromBuffer((uint64_t **)a1)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = 0;
      }
      v11 |= v13;
      BOOL v10 = v12 > 1;
      v12 >>= 1;
    }
    while (v10);
    uint64_t v14 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16)) {
      goto LABEL_15;
    }
  }
  uint64_t v14 = 4;
  *a4 = v11 + a2;
  if (__CFADD__(v11, a2) || v11 + a2 > a3)
  {
LABEL_15:
    SuplAsn1Logger::TraceError(v14, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    return v14;
  }
  return 0;
}

uint64_t Asn1Coder::EncodeBitString(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6)
{
  if (*a5 == a5[1])
  {
    *(unsigned char *)(a1 + 16) = 1;
    BOOL v10 = (unsigned __int8 *)(a1 + 16);
    SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    char v9 = v10;
  }
  else
  {
    if (!a6) {
      Asn1Coder::EncodeInteger(a1, a2, a3, a4);
    }
    char v9 = (unsigned __int8 *)(a1 + 16);
    if (!*(unsigned char *)(a1 + 16)) {
      Asn1Coder::AddBitStringToBuffer((uint64_t **)a1, a4, a5, 0);
    }
  }
  return *v9;
}

void Asn1Coder::AddBitStringToBuffer(uint64_t **a1, unsigned int a2, void *a3, int a4)
{
  unint64_t v7 = (unint64_t)a2 >> 3;
  uint64_t v8 = a2 & 7;
  if (a2 >= 8)
  {
    unint64_t v9 = 0;
    if (v7 <= 1) {
      unint64_t v10 = 1;
    }
    else {
      unint64_t v10 = (unint64_t)a2 >> 3;
    }
    do
    {
      if (v9 >= a3[1] - *a3) {
        break;
      }
      uint64_t v11 = 0;
      unsigned __int8 v12 = *(unsigned char *)(*a3 + v9);
      if (a4) {
        unsigned __int8 v12 = (*(unsigned char *)(*a3 + v9) >> 4) | (16 * *(unsigned char *)(*a3 + v9));
      }
      int v13 = v12;
      do
        Asn1Coder::AddBitToBuffer(a1, (0x80u >> v11++) & v13);
      while (v11 != 8);
      ++v9;
    }
    while (v9 != v10);
  }
  if (v8 && a3[1] - *a3 > v7)
  {
    unsigned __int8 v14 = *(unsigned char *)(*a3 + v7);
    if (a4) {
      unsigned __int8 v14 = (*(unsigned char *)(*a3 + v7) >> 4) | (16 * *(unsigned char *)(*a3 + v7));
    }
    int v15 = v14;
    int v16 = 8 - v8;
    do
    {
      Asn1Coder::AddBitToBuffer(a1, (0x80u >> v16++) & v15);
      --v8;
    }
    while (v8);
  }
}

uint64_t Asn1Coder::GetBitStringFromBuffer(uint64_t result, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  int v6 = (uint64_t **)result;
  unint64_t v48 = (unint64_t)a2 >> 3;
  a3[1] = *a3;
  char v47 = a2;
  if (a2 >= 8)
  {
    uint64_t v7 = 0;
    if (v48 <= 1) {
      unint64_t v8 = 1;
    }
    else {
      unint64_t v8 = (unint64_t)a2 >> 3;
    }
    unint64_t v49 = v8;
    do
    {
      unint64_t v10 = (unsigned char *)a3[1];
      unint64_t v9 = a3[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = a4;
        unint64_t v13 = *a3;
        unsigned __int8 v14 = &v10[-*a3];
        unint64_t v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0) {
          goto LABEL_60;
        }
        unint64_t v16 = v9 - v13;
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v17 = v15;
        }
        if (v17) {
          unsigned int v18 = (char *)operator new(v17);
        }
        else {
          unsigned int v18 = 0;
        }
        unsigned int v19 = &v14[(void)v18];
        unsigned int v20 = &v14[(void)v18];
        unsigned char *v20 = 0;
        uint64_t v11 = v20 + 1;
        if (v10 != (unsigned char *)v13)
        {
          BOOL v21 = &v10[~v13];
          do
          {
            char v22 = *--v10;
            (v21--)[(void)v18] = v22;
          }
          while (v10 != (unsigned char *)v13);
          unint64_t v10 = (unsigned char *)*a3;
          unsigned int v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v11;
        a3[2] = (unint64_t)&v18[v17];
        a4 = v12;
        if (v10) {
          operator delete(v10);
        }
        unint64_t v8 = v49;
      }
      else
      {
        *unint64_t v10 = 0;
        uint64_t v11 = v10 + 1;
      }
      uint64_t v23 = 0;
      a3[1] = (unint64_t)v11;
      do
      {
        uint64_t result = Asn1Coder::GetBitFromBuffer(v6);
        int v24 = *(unsigned __int8 *)(*a3 + v7);
        unsigned int v25 = v24 | (0x80u >> v23);
        int v26 = v24 & (-129 >> v23);
        if (result) {
          LOBYTE(v26) = v25;
        }
        *(unsigned char *)(*a3 + v7) = v26;
        ++v23;
      }
      while (v23 != 8);
      if (a4) {
        *(unsigned char *)(*a3 + v7) = (*(unsigned char *)(*a3 + v7) >> 4) | (16 * *(unsigned char *)(*a3 + v7));
      }
      ++v7;
    }
    while (v7 != v8);
  }
  unsigned int v27 = v47 & 7;
  if ((v47 & 7) != 0)
  {
    uint64_t v29 = (unsigned char *)a3[1];
    unint64_t v28 = a3[2];
    if ((unint64_t)v29 >= v28)
    {
      unint64_t v31 = *a3;
      double v32 = &v29[-*a3];
      unint64_t v33 = (unint64_t)(v32 + 1);
      if ((uint64_t)(v32 + 1) < 0) {
LABEL_60:
      }
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      unint64_t v34 = v28 - v31;
      if (2 * v34 > v33) {
        unint64_t v33 = 2 * v34;
      }
      if (v34 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v35 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v35 = v33;
      }
      if (v35) {
        unint64_t v36 = (unint64_t)operator new(v35);
      }
      else {
        unint64_t v36 = 0;
      }
      int32x4_t v37 = &v32[v36];
      unsigned __int16 v38 = (char *)(v36 + v35);
      int32x4_t v39 = &v32[v36];
      *int32x4_t v39 = 0;
      double v30 = v39 + 1;
      if (v29 == (unsigned char *)v31)
      {
        unint64_t v36 = (unint64_t)v37;
      }
      else
      {
        int32x4_t v40 = &v29[~v31];
        do
        {
          char v41 = *--v29;
          (v40--)[v36] = v41;
        }
        while (v29 != (unsigned char *)v31);
        uint64_t v29 = (unsigned char *)*a3;
      }
      *a3 = v36;
      a3[1] = (unint64_t)v30;
      a3[2] = (unint64_t)v38;
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *uint64_t v29 = 0;
      double v30 = v29 + 1;
    }
    a3[1] = (unint64_t)v30;
    if (v27 <= 1) {
      uint64_t v42 = 1;
    }
    else {
      uint64_t v42 = v47 & 7;
    }
    char v43 = 8 - v27;
    do
    {
      uint64_t result = Asn1Coder::GetBitFromBuffer(v6);
      int v44 = *(unsigned __int8 *)(*a3 + v48);
      unsigned int v45 = v44 | (0x80u >> v43);
      int v46 = v44 & (-129 >> v43);
      if (result) {
        LOBYTE(v46) = v45;
      }
      *(unsigned char *)(*a3 + v48) = v46;
      ++v43;
      --v42;
    }
    while (v42);
    if (a4) {
      *(unsigned char *)(*a3 + v48) = (*(unsigned char *)(*a3 + v48) >> 4) | (16 * *(unsigned char *)(*a3 + v48));
    }
  }
  return result;
}

uint64_t Asn1Coder::EncodeOctetString(uint64_t a1, int a2, int a3, int a4, void *a5, int a6, int a7)
{
  if (*a5 == a5[1])
  {
    *(unsigned char *)(a1 + 16) = 1;
    uint64_t v11 = (unsigned __int8 *)(a1 + 16);
    SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  else
  {
    if (!a6) {
      Asn1Coder::EncodeInteger(a1, a2, a3, a4);
    }
    Asn1Coder::AddBitStringToBuffer((uint64_t **)a1, 8 * a4, a5, a7);
    uint64_t v11 = (unsigned __int8 *)(a1 + 16);
  }
  return *v11;
}

uint64_t Asn1Coder::EncodeVisibleStringSubType(uint64_t a1, int a2, unsigned int a3, unsigned int a4, void *a5, int a6, uint64_t a7, int a8)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (a3 > 0xFF || !a7 || !a6 || *a5 == a5[1])
  {
    uint64_t v12 = 1;
    *(unsigned char *)(a1 + 16) = 1;
    SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    return v12;
  }
  if (a8) {
    return 5;
  }
  uint64_t v15 = Asn1Coder::EncodeInteger(a1, a2, a3, a4);
  uint64_t v12 = v15;
  std::string __p = 0;
  unint64_t v36 = 0;
  int32x4_t v37 = 0;
  if (a4 && !v15)
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = a4;
    do
    {
      if (v17 >= a5[1] - *a5) {
        break;
      }
      uint64_t v19 = 0;
      while (*(char *)(*a5 + v17) != *(unsigned __int8 *)(a7 + v19))
      {
        if (a6 == ++v19)
        {
          uint64_t v12 = 4;
          SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
          goto LABEL_41;
        }
      }
      if (v16 >= v37)
      {
        unint64_t v20 = (unint64_t)__p;
        int64_t v33 = v16 - (unsigned char *)__p;
        uint64_t v34 = v18;
        uint64_t v21 = v16 - (unsigned char *)__p + 1;
        if (v21 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v22 = v37 - (unsigned char *)__p;
        if (2 * (v37 - (unsigned char *)__p) > (unint64_t)v21) {
          uint64_t v21 = 2 * v22;
        }
        if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v23 = v21;
        }
        if (v23)
        {
          size_t v32 = v23;
          int v24 = (char *)operator new(v23);
          size_t v23 = v32;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v25 = &v24[v33];
        v24[v33] = v19;
        int v26 = &v24[v33];
        if (v16 != (char *)v20)
        {
          unsigned int v27 = &v16[~v20];
          do
          {
            char v28 = *--v16;
            (v27--)[(void)v24] = v28;
          }
          while (v16 != (char *)v20);
          unint64_t v16 = (char *)__p;
          unsigned int v25 = v24;
        }
        std::string __p = v25;
        int32x4_t v37 = &v24[v23];
        if (v16) {
          operator delete(v16);
        }
        unint64_t v16 = v26;
        uint64_t v18 = v34;
      }
      else
      {
        *unint64_t v16 = v19;
      }
      unint64_t v36 = ++v16;
      ++v17;
    }
    while (v17 != v18);
    goto LABEL_38;
  }
  if (!v15)
  {
LABEL_38:
    unsigned __int8 v29 = 0;
    unsigned int v30 = a6 - 1;
    if (a6 != 1)
    {
      do
      {
        ++v29;
        BOOL v31 = v30 > 1;
        v30 >>= 1;
      }
      while (v31);
    }
    Asn1Coder::AddVisibleStringToBuffer((uint64_t **)a1, v29 * a4, v29, &__p);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 16);
  }
LABEL_41:
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_22B9A1C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Asn1Coder::AddVisibleStringToBuffer(uint64_t **a1, unsigned int a2, char a3, void *a4)
{
  if (a2)
  {
    unsigned int v6 = 0;
    int v7 = 1 << (a3 - 1);
    uint64_t v8 = a2;
    unsigned __int8 v9 = v7;
    do
    {
      if (a4[1] - *a4 <= (unint64_t)v6) {
        break;
      }
      unsigned int v10 = v6;
      Asn1Coder::AddBitToBuffer(a1, v9 & *(unsigned char *)(*a4 + v6));
      BOOL v11 = v9 >> 1 == 0;
      if (v9 >> 1) {
        v9 >>= 1;
      }
      else {
        unsigned __int8 v9 = v7;
      }
      unsigned int v6 = v11 ? v10 + 1 : v10;
      --v8;
    }
    while (v8);
  }
}

uint64_t Asn1Coder::DecodeVisibleStringSubType(uint64_t a1, int a2, unsigned int a3, _DWORD *a4, unint64_t *a5, unsigned int a6, uint64_t a7, int a8)
{
  uint64_t v8 = a1;
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (a3 <= 0xFF && a6 && a7)
  {
    if (!a8) {
      Asn1Coder::DecodeInteger(a1, a2, a3, a4);
    }
    unsigned int v13 = a6 - 1;
    if (a6 != 1)
    {
      unsigned __int8 v14 = 0;
      do
      {
        ++v14;
        BOOL v15 = v13 > 1;
        v13 >>= 1;
      }
      while (v15);
      std::string __p = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v34 = v8;
      Asn1Coder::GetVisibleStringFromBuffer(v8, *a4 * v14, v14, (unint64_t *)&__p);
      unint64_t v16 = (unsigned char *)*a5;
      a5[1] = *a5;
      if (*a4)
      {
        unint64_t v17 = 0;
        while (1)
        {
          uint64_t v18 = __p;
          if (v17 >= v36 - (unsigned char *)__p) {
            break;
          }
          uint64_t v19 = *((unsigned __int8 *)__p + v17);
          if (v19 > a6)
          {
            *(unsigned char *)(v34 + 16) = 4;
            SuplAsn1Logger::TraceError(4u, *(_DWORD *)(v34 + 8), *(_DWORD *)(v34 + 12));
            goto LABEL_34;
          }
          char v20 = *(unsigned char *)(a7 + v19);
          unint64_t v21 = a5[2];
          if ((unint64_t)v16 >= v21)
          {
            unint64_t v23 = *a5;
            int v24 = &v16[-*a5];
            unint64_t v25 = (unint64_t)(v24 + 1);
            if ((uint64_t)(v24 + 1) < 0) {
              std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v26 = v21 - v23;
            if (2 * v26 > v25) {
              unint64_t v25 = 2 * v26;
            }
            if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v27 = v25;
            }
            if (v27) {
              char v28 = (char *)operator new(v27);
            }
            else {
              char v28 = 0;
            }
            unsigned __int8 v29 = &v24[(void)v28];
            unsigned int v30 = &v24[(void)v28];
            *unsigned int v30 = v20;
            unint64_t v22 = v30 + 1;
            if (v16 != (unsigned char *)v23)
            {
              BOOL v31 = &v16[~v23];
              do
              {
                char v32 = *--v16;
                (v31--)[(void)v28] = v32;
              }
              while (v16 != (unsigned char *)v23);
              unint64_t v16 = (unsigned char *)*a5;
              unsigned __int8 v29 = v28;
            }
            *a5 = (unint64_t)v29;
            a5[1] = (unint64_t)v22;
            a5[2] = (unint64_t)&v28[v27];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *unint64_t v16 = v20;
            unint64_t v22 = v16 + 1;
          }
          a5[1] = (unint64_t)v22;
          ++v17;
          unint64_t v16 = v22;
          if (v17 >= *a4) {
            goto LABEL_34;
          }
        }
      }
      else
      {
LABEL_34:
        uint64_t v18 = __p;
      }
      if (v18)
      {
        unint64_t v36 = v18;
        operator delete(v18);
      }
      uint64_t v8 = v34;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 16) = 1;
    SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return *(unsigned __int8 *)(v8 + 16);
}

void sub_22B9A1F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Asn1Coder::GetVisibleStringFromBuffer(uint64_t result, unsigned int a2, int a3, unint64_t *a4)
{
  if (a3)
  {
    a4[1] = *a4;
    if (a2)
    {
      unsigned int v5 = (uint64_t **)result;
      uint64_t v6 = 0;
      unsigned int v7 = 0;
      unsigned int v8 = (1 << (a3 - 1));
      uint64_t v9 = a2;
      unsigned int v10 = v8;
      unsigned int v26 = v8;
      do
      {
        uint64_t v12 = (unsigned char *)a4[1];
        unint64_t v11 = a4[2];
        if ((unint64_t)v12 >= v11)
        {
          unint64_t v14 = *a4;
          BOOL v15 = &v12[-*a4];
          unint64_t v16 = (unint64_t)(v15 + 1);
          if ((uint64_t)(v15 + 1) < 0) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v17 = v11 - v14;
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v18 = v16;
          }
          if (v18) {
            uint64_t v19 = (char *)operator new(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          char v20 = &v15[(void)v19];
          unint64_t v21 = &v15[(void)v19];
          *unint64_t v21 = 0;
          unsigned int v13 = v21 + 1;
          if (v12 != (unsigned char *)v14)
          {
            unint64_t v22 = &v12[~v14];
            do
            {
              char v23 = *--v12;
              (v22--)[(void)v19] = v23;
            }
            while (v12 != (unsigned char *)v14);
            uint64_t v12 = (unsigned char *)*a4;
            char v20 = v19;
          }
          *a4 = (unint64_t)v20;
          a4[1] = (unint64_t)v13;
          a4[2] = (unint64_t)&v19[v18];
          if (v12) {
            operator delete(v12);
          }
          unsigned int v8 = v26;
        }
        else
        {
          *uint64_t v12 = 0;
          unsigned int v13 = v12 + 1;
        }
        a4[1] = (unint64_t)v13;
        uint64_t result = Asn1Coder::GetBitFromBuffer(v5);
        if (result) {
          char v24 = *(unsigned char *)(*a4 + v7) | v10;
        }
        else {
          char v24 = *(unsigned char *)(*a4 + v7) & ~(_BYTE)v10;
        }
        *(unsigned char *)(*a4 + v7) = v24;
        BOOL v25 = v10 >= 2;
        if (v10 >= 2) {
          v10 >>= 1;
        }
        else {
          unsigned int v10 = v8;
        }
        if (!v25) {
          ++v7;
        }
        ++v6;
      }
      while (v6 != v9);
    }
  }
  return result;
}

uint64_t Asn1Coder::EncodeVisibleString7(uint64_t a1, int a2, int a3, int a4, void *a5, int a6)
{
  if (*a5 == a5[1])
  {
    *(unsigned char *)(a1 + 16) = 1;
    uint64_t v9 = (unsigned __int8 *)(a1 + 16);
    SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  else
  {
    if (!a6) {
      Asn1Coder::EncodeInteger(a1, a2, a3, a4);
    }
    Asn1Coder::AddVisibleStringToBuffer((uint64_t **)a1, 7 * a4, 7, a5);
    uint64_t v9 = (unsigned __int8 *)(a1 + 16);
  }
  return *v9;
}

uint64_t Asn1Coder::DecodeVisibleString7(uint64_t a1, int a2, unsigned int a3, _DWORD *a4, unint64_t *a5, int a6)
{
  if (!a6) {
    Asn1Coder::DecodeInteger(a1, a2, a3, a4);
  }
  Asn1Coder::GetVisibleStringFromBuffer(a1, 7 * *a4, 7, a5);
  return *(unsigned __int8 *)(a1 + 16);
}

void Asn1Coder::SkipOpenTypeField(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unsigned int v8 = 0;
  Asn1Coder::DecodeOpenTypeFieldStart(a1, &v7);
  if (!v2)
  {
    unint64_t v3 = v8;
    if (v8)
    {
      unint64_t v4 = 1;
      do
      {
        if (Asn1Coder::DecodeInteger(a1, 0, 0xFFu, &v6)) {
          break;
        }
      }
      while (v4++ < v3);
    }
  }
}

int32x2_t Asn1Coder::DecodeOpenTypeFieldStart(uint64_t a1, int32x2_t *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  int v6 = *(unsigned __int8 *)(a1 + 16);
  __int32 v8 = 0;
  if (!v6)
  {
    if (BitFromBuffer)
    {
      Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
      if (*(unsigned char *)(a1 + 16)) {
        return result;
      }
      unsigned int v7 = 0x3FFF;
    }
    else
    {
      unsigned int v7 = 127;
    }
    if (!Asn1Coder::DecodeInteger(a1, 0, v7, &v8))
    {
      a2[1].i32[0] = v8;
      int32x2_t result = vrev64_s32(*(int32x2_t *)(a1 + 8));
      *a2 = result;
    }
  }
  return result;
}

uint64_t Asn1Coder::SkipSequenceExtensionAddition(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  unint64_t v3 = a3;
  unint64_t v4 = *a2;
  if (a3 < v4)
  {
    char v7 = ~(_BYTE)a3;
    do
    {
      if ((*((_DWORD *)a2 + 1) >> (v7 + v4)))
      {
        Asn1Coder::SkipOpenTypeField(a1);
        if (v8)
        {
          uint64_t v9 = v8;
          SuplAsn1Logger::TraceError(v8, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
          return v9;
        }
        unint64_t v4 = *a2;
      }
      ++v3;
      --v7;
    }
    while (v3 < v4);
  }
  return 0;
}

uint64_t Asn1Coder::SkipSequenceExtension(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  int v4 = 0;
  uint64_t result = Asn1Coder::DecodeSequenceExtension(a1, (uint64_t)v3);
  if (!result) {
    return Asn1Coder::SkipSequenceExtensionAddition(a1, v3, 0);
  }
  return result;
}

uint64_t Asn1Coder::DecodeSequenceExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t result = *(unsigned __int8 *)(a1 + 16);
  char v7 = 0;
  if (!result)
  {
    uint64_t result = Asn1Coder::DecodeInteger(a1, 1, 0x40u, &v7);
    int v6 = 0;
    if (!result)
    {
      char v5 = v7;
      *(unsigned char *)a2 = v7;
      uint64_t result = Asn1Coder::DecodeInteger(a1, 0, ~(-1 << v5), &v6);
      if (!result) {
        *(_DWORD *)(a2 + 4) = v6;
      }
    }
  }
  return result;
}

void Asn1Coder::SkipChoiceExtension(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (!Asn1Coder::DecodeChoiceExtension(a1, &v2))
  {
    Asn1Coder::SkipOpenTypeField(a1);
  }
}

uint64_t Asn1Coder::DecodeChoiceExtension(uint64_t a1, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t result = *(unsigned __int8 *)(a1 + 16);
  char v5 = 0;
  if (!result)
  {
    uint64_t result = Asn1Coder::DecodeInteger(a1, 0, 0x3Fu, &v5);
    if (!result) {
      *a2 = v5;
    }
  }
  return result;
}

uint64_t Asn1Coder::EncodeOpenTypeFieldStart(uint64_t a1, int32x2_t *a2)
{
  *a2 = vrev64_s32(*(int32x2_t *)(a1 + 8));
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t result = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = 64;
    do
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
      BOOL v5 = v4 > 1;
      v4 >>= 1;
    }
    while (v5);
    return *(unsigned __int8 *)(a1 + 16);
  }
  return result;
}

uint64_t Asn1Coder::EncodeOpenTypeFieldEnd(uint64_t a1, int32x2_t *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned __int32 v5 = a2->i32[0] - v4;
  if (a2->i32[0] <= v4) {
    int v6 = 7;
  }
  else {
    int v6 = 255;
  }
  int v7 = v6 & v5;
  if (!v7 || (uint64_t result = Asn1Coder::EncodeInteger(a1, 0, ~(-1 << v7), 0), !result))
  {
    int v9 = *(_DWORD *)(a1 + 8) - a2->i32[1];
    if ((v9 - 1) >= 0x80)
    {
      int v10 = *(_DWORD *)(a1 + 12);
      unsigned int v11 = 128;
      do
      {
        Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
        BOOL v12 = v11 > 1;
        v11 >>= 1;
      }
      while (v12);
      uint64_t result = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16)) {
        return result;
      }
      if (v10) {
        int v13 = v9 - 1;
      }
      else {
        int v13 = v9;
      }
      uint64_t v14 = (v13 + 1);
      if (v13 != -1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = -v14;
        do
        {
          unint64_t v17 = (unsigned char *)(**(void **)a1 + *(unsigned int *)(a1 + 8) + v15);
          *unint64_t v17 = *(v17 - 1);
          --v15;
        }
        while (v16 != v15);
      }
    }
    uint64_t v18 = *(void *)(a1 + 8);
    *(int32x2_t *)(a1 + 8) = vrev64_s32(*a2);
    if ((v9 - 1) <= 0x7F)
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
      uint64_t result = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16)) {
        return result;
      }
      int v19 = 127;
      goto LABEL_22;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, 1);
    uint64_t result = *(unsigned __int8 *)(a1 + 16);
    if (!*(unsigned char *)(a1 + 16))
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
      uint64_t result = *(unsigned __int8 *)(a1 + 16);
      if (!*(unsigned char *)(a1 + 16))
      {
        int v19 = 0x3FFF;
LABEL_22:
        Asn1Coder::EncodeInteger(a1, 0, v19, v9 - 1);
        uint64_t result = 0;
        *(void *)(a1 + 8) = v18;
      }
    }
  }
  return result;
}

uint64_t Asn1Coder::EncodeSequenceExtension(uint64_t a1, int a2, int a3)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t result = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t result = Asn1Coder::EncodeInteger(a1, 1, 64, a2);
    if (!result) {
      return Asn1Coder::EncodeInteger(a1, 0, ~(-1 << a2), a3);
    }
  }
  return result;
}

uint64_t Asn1Coder::EncodeChoiceExtension(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t result = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    int v5 = *a2;
    return Asn1Coder::EncodeInteger(a1, 0, 63, v5);
  }
  return result;
}

uint64_t Asn1Coder::EncodeChoiceExtension(uint64_t a1, int a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t result = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    return Asn1Coder::EncodeInteger(a1, 0, 63, a2);
  }
  return result;
}

uint64_t Asn1Coder::DecodeEnumerationExtension(uint64_t a1, unsigned char *a2)
{
  Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t result = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    return Asn1Coder::DecodeInteger(a1, 0, 0x3Fu, a2);
  }
  return result;
}

uint64_t Init_DB_Sensor(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = result + 26128;
  *(void *)(result + 296) = result + 528;
  *(void *)(result + 304) = result + 26128;
  *(void *)(result + 240) = result + 528;
  *(void *)(result + 312) = 0x32000000020;
  *(_DWORD *)(result + 320) = 25600;
  uint64_t v3 = result + 324;
  do
  {
    *(void *)(v3 + 8 * v1 - 76) = *(void *)(result + 296);
    *(unsigned char *)(v3 + v1++) = 0;
  }
  while (v1 != 6);
  uint64_t v4 = 0;
  uint64_t v5 = result + 51728;
  *(void *)(result + 392) = v2;
  *(void *)(result + 400) = result + 51728;
  *(void *)(result + 336) = v2;
  *(void *)(result + 408) = 0x32000000020;
  *(_DWORD *)(result + 416) = 25600;
  uint64_t v6 = result + 420;
  do
  {
    *(void *)(v6 + 8 * v4 - 76) = *(void *)(result + 392);
    *(unsigned char *)(v6 + v4++) = 0;
  }
  while (v4 != 6);
  uint64_t v7 = 0;
  *(void *)(result + 488) = v5;
  *(void *)(result + 496) = result + 55328;
  *(void *)(result + 432) = v5;
  *(void *)(result + 504) = 0x9600000018;
  *(_DWORD *)(result + 512) = 3600;
  uint64_t v8 = result + 516;
  do
  {
    *(void *)(v8 + 8 * v7 - 76) = *(void *)(result + 488);
    *(unsigned char *)(v8 + v7++) = 0;
  }
  while (v7 != 6);
  return result;
}

void Gnm17_12SendClearNv(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("Gnm17_12SendClearNv", 54, 1, 0x10uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    *((_DWORD *)v2 + 3) = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_REQ =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm17_12SendClearNv");
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(128, 134, 8393216, v3);
  }
}

void Gnm17_13SendPollAssistStatus(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("Gnm17_13SendPollAssistStatus", 76, 1, 0xCuLL);
  if (v0)
  {
    uint64_t v1 = v0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASSIST_STATUS_REQ =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm17_13SendPollAssistStatus");
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
    }
    AgpsSendFsmMsg(128, 134, 8393728, v1);
  }
}

uint64_t Gnm17_31HandleAssistStatus(unsigned char *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASSIST_STATUS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm17_31HandleAssistStatus");
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  if (a1)
  {
    Gnm13_07SendAidStatusCnf((uint64_t)a1, v2, v3, v4, v5, v6);
    Gnm13_13HandleAssistStatus(a1);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm17_31HandleAssistStatus", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v10, 0, 1);
  }
  return 0;
}

uint64_t GNSS_HL_System_Run_Update(uint64_t a1)
{
  SV_Data_Decode_Update_Wrapper(a1);
  SV_Gen_Meas_Update_Wrapper(a1, v2, v3, v4, v5, v6);
  SV_State_Update_Wrapper(a1);
  Nav_Kalman_Update_Wrapper(a1);
  uint64_t v7 = (gnss::GnssAdaptDevice *)mach_continuous_time();
  *(_DWORD *)(*(void *)(a1 + 72) + 1088) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                                * (double)(unint64_t)v7);
  if (!gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v7)) {
    goto LABEL_13;
  }
  int v8 = *(_DWORD *)(a1 + 4);
  if (!v8)
  {
    if (*(_DWORD *)a1 != 11) {
      goto LABEL_13;
    }
    EvLog_v("Set_Sens_Aug_FPE_Exe_State:  NOT Initialised YET, TOW %10.3f");
    goto LABEL_11;
  }
  if (v8 == 2)
  {
    if (*(_DWORD *)a1 == 11) {
      goto LABEL_12;
    }
    *(_DWORD *)(a1 + 4) = 1;
    EvLog_v("Set_Sens_Aug_FPE_Exe_State:  Leaving Co-Running Nav mode, TOW %10.3f");
LABEL_11:
    if (*(_DWORD *)(a1 + 4) != 2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v8 != 1) {
    __assert_rtn("Set_Sens_Aug_FPE_Exe_State", "System_Run_Update.cpp", 201, "FALSE");
  }
  if (*(_DWORD *)a1 == 11)
  {
    EvLog_v("Set_Sens_Aug_FPE_Exe_State:  Entering Co-Running Nav mode, TOW %10.3f", *(double *)(*(void *)(a1 + 48) + 24));
    *(_DWORD *)(a1 + 4) = 2;
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = *(void *)(a1 + 136);
    *(_DWORD *)uint64_t v10 = *(_DWORD *)(v9 + 948);
    *(unsigned char *)(v10 + 6) = *(unsigned char *)(v9 + 43);
    *(_WORD *)(v10 + 4) = g_Enable_LCD_Debug;
    GN_GPS_Get_LibVersion((char *)(v10 + 7));
    Sen_Aug_FPE_Update_Wrapper(a1);
  }
LABEL_13:
  *(_DWORD *)(*(void *)(a1 + 72) + 1092) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                                * (double)mach_continuous_time());
  Fused_Nav_Update_Wrapper(a1);

  return Pre_Positioning_Update_Wrapper();
}

double STANAG_WGS84_Mean_Sea_Level(double *a1)
{
  double v1 = a1[1];
  double v2 = 1.57079633 - *a1;
  if (v2 < 0.0) {
    double v2 = 0.0;
  }
  double v3 = v2 * 5.72957795;
  if (v1 < 0.0) {
    double v1 = v1 + 6.28318531;
  }
  if (v2 > 3.14159265) {
    double v3 = 18.0;
  }
  int v4 = vcvtmd_s64_f64(v3);
  double v5 = v1 * 5.72957795;
  signed int v6 = vcvtmd_s64_f64(v5);
  if (v4 <= 0)
  {
    int v10 = 37 * v4;
    LODWORD(v11) = v6 + 1;
    double v8 = 13.0;
    double v9 = 13.0;
    goto LABEL_14;
  }
  double v7 = -30.0;
  if (v4 <= 0x11)
  {
    uint64_t v12 = 37 * v4 - 37;
    uint64_t v11 = v6 + 1;
    double v9 = (double)STANAG_Geoid_Table[(int)v12 + (uint64_t)v6];
    double v8 = (double)STANAG_Geoid_Table[v12 + v11];
    if (v4 == 17) {
      goto LABEL_12;
    }
    int v10 = 37 * v4;
LABEL_14:
    double v7 = (double)STANAG_Geoid_Table[v10 + (uint64_t)v6];
    double v13 = (double)STANAG_Geoid_Table[v10 + (uint64_t)(int)v11];
    goto LABEL_15;
  }
  double v8 = -30.0;
  double v9 = -30.0;
LABEL_12:
  double v13 = -30.0;
LABEL_15:
  double v14 = v3 - floor(v3);
  double v15 = v5 - floor(v5);
  return (1.0 - v15) * v14 * ((1.0 - v15) * v14) * ((1.0 - v15 + v14) * -6.0 + 9.0 + (1.0 - v15) * v14 * 4.0) * v7
       + (1.0 - v15)
       * (1.0 - v14)
       * ((1.0 - v15)
        * (1.0 - v14))
       * ((1.0 - v15 + 1.0 - v14) * -6.0 + 9.0 + (1.0 - v15) * (1.0 - v14) * 4.0)
       * v9
       + v15 * (1.0 - v14) * (v15 * (1.0 - v14)) * ((v15 + 1.0 - v14) * -6.0 + 9.0 + v15 * (1.0 - v14) * 4.0) * v8
       + v15 * v14 * (v15 * v14) * ((v15 + v14) * -6.0 + 9.0 + v15 * v14 * 4.0) * v13;
}

double *NK_DT_Synch_ProcNoise(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  double v19 = 0.0;
  double v4 = 0.0;
  if (!*(unsigned char *)(a1 + 128))
  {
    double v5 = (unsigned char *)(a2 + 22776);
    if (*(unsigned char *)(a2 + 25170))
    {
      double v6 = *(double *)(a2 + 24168);
      if (v6 <= 1.0)
      {
        if (v6 < 0.0000000025)
        {
          double v19 = 0.0000000025;
          double v4 = 0.0000000025;
        }
      }
      else
      {
        double v7 = *(double *)(a2 + 25216) * *(double *)(a2 + 25216);
        double v8 = *(double *)(a2 + 24528);
        if (v7 <= v8 * 4.0)
        {
          if (v8 < 40000.0)
          {
            double v9 = v8 - v6;
            if (v8 - v6 > 0.0)
            {
              double v10 = v7 <= 1.0 ? v9 * 0.15 : v9 * 0.15 + v7 * 0.02;
              double v4 = v10 <= v9 ? v10 : v8 - v6;
              double v19 = v4;
              if (*v5)
              {
                if (*(_DWORD *)(a2 + 22780) == 1)
                {
                  double v11 = *(double *)(a2 + 22808);
                  if (v11 < v8 && v11 > v6 && v4 > v11 - v6)
                  {
                    double v19 = v11 - v6;
                    double v4 = v11 - v6;
                  }
                }
              }
            }
          }
        }
        else
        {
          double v4 = v7 / 2.25 - v6;
          double v19 = v4;
          if (v4 < 0.0)
          {
            double v19 = 0.0;
            double v4 = 0.0;
          }
        }
        if (v6 + v4 < 4.0)
        {
          double v4 = 4.0 - v6;
          double v19 = 4.0 - v6;
        }
      }
      *(void *)&v20[0] = 0;
      if (!R8_EQ(&v19, (const double *)v20)) {
        *(double *)(a2 + 24168) = v6 + v4;
      }
    }
    if (!*(unsigned char *)(a2 + 16) && *(_DWORD *)(a2 + 22780) == 1 && (*v5 || *(unsigned char *)(a2 + 22792)))
    {
      double v12 = *(double *)(a2 + 22800) - *(double *)(a2 + 792);
      double v13 = v12 * v12;
      if (v13 > 100.0)
      {
        double v14 = *(double *)(a2 + 24168);
        double v15 = *(double *)(a2 + 22816) + v14;
        if (v13 > v15 * 16.0)
        {
          double v4 = v13 / 9.0 - v15;
          double v19 = v4;
          *(double *)(a2 + 24168) = v14 + v4;
        }
      }
    }
  }
  *(void *)&v20[0] = 0;
  uint64_t result = (double *)R8_EQ(&v19, (const double *)v20);
  if ((result & 1) == 0)
  {
    memset(v20, 0, 32);
    memset(&v20[3], 0, 208);
    v20[2] = 0x3FF0000000000000uLL;
    if (v4 > 0.0) {
      uint64_t result = rnk1_core((double *)(a1 + 872), 5u, v4, (double *)v20, &v18);
    }
    double v17 = *(double *)(a2 + 24168);
    *(double *)(a2 + 24256) = v17;
    *(double *)(a2 + 24344) = sqrt(v17);
  }
  return result;
}

double SBAS_EphInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = 16 * *(unsigned __int16 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 12);
  v3.i64[0] = (int)v2;
  v3.i64[1] = SHIDWORD(v2);
  float64x2_t v4 = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)xmmword_22BB408E0);
  uint64_t v5 = *(void *)(a1 + 20);
  v3.i64[0] = (int)v5;
  v3.i64[1] = SHIDWORD(v5);
  *(float64x2_t *)(a2 + 16) = v4;
  *(float64x2_t *)(a2 + 32) = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)vdupq_n_s64(0x3FB47AE147AE147BuLL));
  v4.f64[0] = *(float64_t *)(a1 + 28);
  v3.i64[0] = SLODWORD(v4.f64[0]);
  v3.i64[1] = SHIDWORD(v4.f64[0]);
  float64x2_t v6 = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)xmmword_22BB408F0);
  uint64_t v7 = *(void *)(a1 + 36);
  v3.i64[0] = (int)v7;
  v3.i64[1] = SHIDWORD(v7);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 10);
  *(float64x2_t *)(a2 + 48) = v6;
  *(float64x2_t *)(a2 + 64) = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)xmmword_22BB40900);
  v6.f64[0] = *(float64_t *)(a1 + 44);
  v3.i64[0] = SLODWORD(v6.f64[0]);
  v3.i64[1] = SHIDWORD(v6.f64[0]);
  *(float64x2_t *)(a2 + 80) = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)vdupq_n_s64(0x3EEA36E2EB1C432DuLL));
  double result = (double)*(int *)(a1 + 52) * 0.0000625;
  *(double *)(a2 + 96) = result;
  return result;
}

char *FpeEnabler_UpdateFlags(char *result, int a2, uint64_t *a3)
{
  float64x2_t v4 = (int32x2_t *)result;
  switch(a2)
  {
    case 0:
      result[3] = 1;
      result[9] = 0;
      *((_DWORD *)result + 53) = *((_DWORD *)a3 + 6);
      return result;
    case 1:
      result[4] = 1;
      result[10] = 0;
      *((_DWORD *)result + 54) = *((_DWORD *)a3 + 6);
      return result;
    case 3:
      uint64_t v5 = *a3;
      *((_DWORD *)result + 17) = *((_DWORD *)a3 + 2);
      *(void *)(result + 60) = v5;
      result[144] = 1;
      result[2] = 1;
      *((_DWORD *)result + 46) = 0;
      *(void *)(result + 188) = *(uint64_t *)((char *)a3 + 4);
      return result;
    case 4:
      uint64_t v6 = *a3;
      *((_DWORD *)result + 23) = *((_DWORD *)a3 + 2);
      *(void *)(result + 84) = v6;
      BOOL v7 = 1;
      result[145] = 1;
      int v8 = *((_DWORD *)a3 + 1);
      if (v8 != 1)
      {
        if (v8 != 3)
        {
          if (v8 == 2)
          {
            BOOL v9 = 0;
            BOOL v7 = *((_DWORD *)a3 + 2) == 3;
LABEL_57:
            result[7] = v9;
            *double result = v7 && !v9;
            int v43 = *((_DWORD *)a3 + 2);
            *((_DWORD *)result + 40) = 0;
            *((_DWORD *)result + 41) = v8;
            *((_DWORD *)result + 42) = v43;
            result[220] = 1;
            result[221] = result[56] ^ 1;
            return result;
          }
          BOOL v7 = 0;
        }
        BOOL v9 = 0;
        goto LABEL_57;
      }
      BOOL v7 = 0;
      BOOL v9 = *((_DWORD *)a3 + 2) == 3;
      goto LABEL_57;
    case 5:
      int v10 = *(_DWORD *)a3;
      if (*(_DWORD *)a3)
      {
        *((_DWORD *)result + 49) = 0;
        *((_DWORD *)result + 50) = v10;
        *((_DWORD *)result + 51) = 0;
      }
      return result;
    case 6:
      uint64_t v11 = *a3;
      *((_DWORD *)result + 20) = *((_DWORD *)a3 + 2);
      *((void *)result + 9) = v11;
      result[146] = 1;
      unsigned int v12 = *((_DWORD *)a3 + 1);
      if (v12 == 8)
      {
        BOOL v13 = 0;
        int v14 = *((_DWORD *)a3 + 2);
        BOOL v15 = v14 == 3;
      }
      else
      {
        BOOL v15 = 0;
        BOOL v13 = v12 > 1;
        int v14 = *((_DWORD *)a3 + 2);
      }
      result[8] = v13;
      result[1] = v15 && !v13;
      *((_DWORD *)result + 43) = 0;
      *((_DWORD *)result + 44) = v12;
      *((_DWORD *)result + 45) = v14;
      *((_WORD *)result + 111) = 257;
      return result;
    case 10:
      int v16 = *((_DWORD *)a3 + 4);
      if (v16 == 11)
      {
        double v17 = (double *)(result + 48);
        double v18 = *((double *)result + 6);
        result[5] = *((unsigned char *)a3 + 784);
      }
      else
      {
        double v17 = (double *)(result + 48);
        double v18 = *((double *)result + 6);
        result[5] = 0;
        if (v16 < 9) {
          goto LABEL_62;
        }
      }
      if (v18 > -999.0)
      {
        double v39 = *((double *)a3 + 1) - v18;
        if (v39 > 1.5 || v39 < 0.0)
        {
          __int16 v40 = g_FPE_LogSeverity;
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            unint64_t v41 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v42 = *(double *)(g_TCU + 8);
            }
            else {
              double v42 = 0.0;
            }
            double result = (char *)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Time Diff between EPOCH = %f sec at TOW=%f (TOWstat=%d)", "FpeEnabler_UpdateFlags", 266, v41, v42, *((double *)a3 + 1) - *v17, *((double *)a3 + 1), *((_DWORD *)a3 + 4));
            __int16 v40 = g_FPE_LogSeverity;
          }
          if ((v40 & 0x200) != 0) {
            double result = (char *)LC_LOG_NMEA_GENERIC("%s,FPENW1,%.2f,%.1f,%d", "$PFPEX", *((double *)a3 + 1) - *v17, *((double *)a3 + 1), *((_DWORD *)a3 + 4));
          }
        }
      }
LABEL_62:
      v4[26].i32[0] = *(_DWORD *)a3;
      v4[6] = (int32x2_t)a3[1];
      v4[19] = vadd_s32(v4[19], (int32x2_t)0x100000001);
      ++v4[20].i32[0];
      ++v4[21].i32[1];
      ++v4[23].i32[0];
      ++v4[24].i32[1];
      return result;
    case 12:
      uint64_t v19 = 0;
      char v20 = 0;
      do
      {
        char v21 = result[v19 + 37];
        result[v19 + 38] = v21;
        v20 += v21;
        --v19;
      }
      while (v19 != -24);
      unsigned __int8 v22 = 0;
      char v23 = result[8];
      result[14] = v23;
      for (uint64_t i = 39; i != 45; ++i)
        v22 += result[i];
      if ((g_FPE_LogSeverity & 0x200) != 0)
      {
        unsigned __int8 v25 = v23 + v20;
        int v26 = result[56];
        unsigned int v28 = *((_DWORD *)result + 38);
        unsigned int v27 = *((_DWORD *)result + 39);
        if (v27 >= 0x3E7) {
          unsigned int v27 = 999;
        }
        if (v28 >= 0x3E7) {
          unsigned int v28 = 999;
        }
        unsigned int v29 = *((_DWORD *)result + 40);
        int v30 = *((_DWORD *)result + 41);
        if (v29 >= 0x63) {
          unsigned int v29 = 99;
        }
        int v32 = *((_DWORD *)result + 42);
        unsigned int v31 = *((_DWORD *)result + 43);
        if (v31 >= 0x63) {
          unsigned int v31 = 99;
        }
        unsigned int v33 = *((_DWORD *)result + 46);
        if (v33 >= 0x63) {
          unsigned int v33 = 99;
        }
        if (v4[24].i32[1] >= 0x63u) {
          int v34 = 99;
        }
        else {
          int v34 = v4[24].i32[1];
        }
        double result = (char *)LC_LOG_NMEA_GENERIC("%s,FPEN,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", "$PFPEX", v26, v27, v28, v30, v32, v29, v4[22].i32[0], v4[22].i32[1], v31, v4[23].i32[1], v4[24].i32[0], v33, v4[25].i32[0], v34, v4->u8[0], v4->u8[1], v4->u8[2],
                           v4->u8[3],
                           v4->u8[4],
                           v25,
                           v4->u8[6],
                           v4[1].u8[3],
                           v22);
      }
      __int32 v35 = v4[26].i32[1];
      if (v35 && !v4[1].i8[1])
      {
        int v36 = v4[26].i32[0] - v35;
        if (v36 < 0) {
          int v36 = -v36;
        }
        if (v36 >= 0x7D1 && (g_FPE_LogSeverity & 4) != 0)
        {
          unint64_t v37 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v38 = *(double *)(g_TCU + 8);
          }
          else {
            double v38 = 0.0;
          }
          double result = (char *)LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f OS time difference between EPOCH and last ACCL: %d msec", "FpeEnabler_UpdateFlags", 383, v37, v38, v4[26].i32[0] - v4[26].i32[1]);
        }
      }
      __int32 v44 = v4[27].i32[0];
      if (v44 && !v4[1].i8[2])
      {
        int v45 = v4[26].i32[0] - v44;
        if (v45 < 0) {
          int v45 = -v45;
        }
        if (v45 >= 0x7D1 && (g_FPE_LogSeverity & 4) != 0)
        {
          mach_continuous_time();
          return (char *)LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f OS time difference between EPOCH and last GYRO: %d msec");
        }
      }
      return result;
    case 13:
      result[13] = 1;
      return result;
    case 14:
      return result;
    default:
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        mach_continuous_time();
        return (char *)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f %s");
      }
      return result;
  }
}

const char *FpeEnabler_UpdateState(const char *result, unsigned char *a2, unsigned char *a3)
{
  int64x2_t v3 = result;
  *a2 = 0;
  *a3 = 0;
  if (result[56])
  {
    unsigned int v5 = 0;
    for (uint64_t i = 14; i != 39; ++i)
      v5 += result[i];
    BOOL v7 = result + 6;
    if (result[6])
    {
      if (!result[13])
      {
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          mach_continuous_time();
          double result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Sensor Problem --> stopWorking");
        }
        goto LABEL_31;
      }
LABEL_28:
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        mach_continuous_time();
        double result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f REINIT by external --> stopWorking");
      }
      goto LABEL_31;
    }
    if (result[11])
    {
      if (result[12] || v5 > 0x13)
      {
        if (result[13]) {
          goto LABEL_28;
        }
        if (result[12])
        {
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            mach_continuous_time();
            double result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f too many epochs without sensors --> stopWorking");
          }
          goto LABEL_31;
        }
        if (v5 < 0x14)
        {
LABEL_31:
          *(_WORD *)(v3 + 3) = 0;
          *((unsigned char *)v3 + 5) = 0;
          if (v3[13])
          {
            *(_WORD *)int64x2_t v3 = 0;
            *((unsigned char *)v3 + 2) = 0;
            *((_WORD *)v3 + 111) = 0;
          }
          *((unsigned char *)v3 + 13) = 0;
          *(_OWORD *)(v3 + 152) = 0u;
          *(_OWORD *)(v3 + 168) = 0u;
          *(_OWORD *)(v3 + 184) = 0u;
          *((void *)v3 + 25) = 0;
          *BOOL v7 = 0;
          *((unsigned char *)v3 + 10) = 0;
          *((unsigned char *)v3 + 56) = 0;
          *a3 = 1;
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            mach_continuous_time();
            double result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f FPE En: %f WrkState --> False");
          }
          goto LABEL_35;
        }
        goto LABEL_42;
      }
    }
    else if (v5 > 0x13)
    {
      if (result[13]) {
        goto LABEL_28;
      }
LABEL_42:
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        mach_continuous_time();
        double result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f %u events exceed UAC not-driving events threshold in %u events window");
      }
      goto LABEL_31;
    }
    if (!result[13])
    {
      *((unsigned char *)result + 56) = 1;
      goto LABEL_35;
    }
    goto LABEL_28;
  }
  if (*result && result[1] && result[3] && result[4] && result[2])
  {
    int v8 = *((unsigned __int8 *)result + 5);
    *((unsigned char *)result + 56) = v8;
    if (v8)
    {
      *a2 = 1;
      *((_DWORD *)result + 39) = 0;
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        mach_continuous_time();
        double result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f FPE En: %f WrkState --> True");
      }
    }
  }
  else
  {
    *((unsigned char *)result + 56) = 0;
  }
LABEL_35:
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v9 = *(double *)(g_TCU + 8);
    }
    else {
      double v9 = 0.0;
    }
    double result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f FpeEnablerState: => %u startFlags=[FIV:%u,UAC:%u,DMS:%u,GNSS:%u,ACCL:%u,GYRO:%u] stopFlags=[FIV:%u,UAC:%u,ACCL:%u,GYRO:%u,sensCurGap:%u,sensPrevGap:%u,sensErr:%u,reinit:%u,uacCycBuf:[%u,%u,%u,%u,%u,%u,%u,%u,%u,%u]], sensCycBuf[%u,%u,%u,%u,%u,%u] FpelastRecordTble: [%u,%u,%u,%u,%u,%u]", "FpeEnabler_printState", 551, v10, v9, *((unsigned __int8 *)v3 + 56), *(unsigned __int8 *)v3, *((unsigned __int8 *)v3 + 1), *((unsigned __int8 *)v3 + 2), *((unsigned __int8 *)v3 + 5), *((unsigned __int8 *)v3 + 3), *((unsigned __int8 *)v3 + 4), *((unsigned __int8 *)v3 + 7), *((unsigned __int8 *)v3 + 8), *((unsigned __int8 *)v3 + 9), *((unsigned __int8 *)v3 + 10), *((unsigned __int8 *)v3 + 11),
               *((unsigned __int8 *)v3 + 12),
               *((unsigned __int8 *)v3 + 6),
               *((unsigned __int8 *)v3 + 13),
               *((unsigned __int8 *)v3 + 14),
               *((unsigned __int8 *)v3 + 15),
               *((unsigned __int8 *)v3 + 16),
               *((unsigned __int8 *)v3 + 17),
               *((unsigned __int8 *)v3 + 18),
               *((unsigned __int8 *)v3 + 19),
               *((unsigned __int8 *)v3 + 20),
               *((unsigned __int8 *)v3 + 21),
               *((unsigned __int8 *)v3 + 22),
               *((unsigned __int8 *)v3 + 23),
               *((unsigned __int8 *)v3 + 39),
               *((unsigned __int8 *)v3 + 40),
               *((unsigned __int8 *)v3 + 41),
               *((unsigned __int8 *)v3 + 42),
               *((unsigned __int8 *)v3 + 43),
               *((unsigned __int8 *)v3 + 44),
               *((unsigned __int8 *)v3 + 144),
               *((unsigned __int8 *)v3 + 145),
               *((unsigned __int8 *)v3 + 146),
               *((unsigned __int8 *)v3 + 147),
               *((unsigned __int8 *)v3 + 148),
               *((unsigned __int8 *)v3 + 149));
  }
  *(_WORD *)(v3 + 3) = 0;
  *((unsigned char *)v3 + 5) = 0;
  *(_WORD *)(v3 + 9) = 257;
  return result;
}

uint64_t FpeEnabler_UpdateStopFlags(uint64_t a1, char a2)
{
  uint64_t v2 = 0;
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 6) = a2;
  char v3 = 1;
  do
  {
    int v4 = *(unsigned __int8 *)(a1 + v2 + 43);
    *(unsigned char *)(a1 + v2 + 44) = v4;
    v3 &= v4 != 0;
    --v2;
  }
  while (v2 != -5);
  int v5 = *(unsigned __int8 *)(a1 + 11);
  *(unsigned char *)(a1 + 39) = v5;
  if (!v5) {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 12) = v3;
  char v6 = *(unsigned char *)(a1 + 9);
  if (v6) {
    char v6 = *(unsigned char *)(a1 + 10) != 0;
  }
  *(unsigned char *)(a1 + 11) = v6;
  unsigned __int8 v8 = 0;
  FpeEnabler_UpdateState((const char *)a1, &v9, &v8);
  return v8;
}

void NK_Meas_ARP_Check(unsigned int a1, unsigned char *a2, uint64_t a3, double *a4, double *a5)
{
  double v7 = a5[5];
  if (a5[6] > v7) {
    double v7 = a5[6];
  }
  if (a5[7] > v7) {
    double v7 = a5[7];
  }
  double v8 = v7 * 0.769230769;
  int v9 = cARPCheckMinDynThresh[a1 - 1];
  if (v8 <= (double)v9) {
    double v10 = (double)v9;
  }
  else {
    double v10 = v8;
  }
  double v11 = *a4;
  double v12 = a4[1];
  if (a1 == 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a3 + 2408;
    float64x2_t v15 = (float64x2_t)vdupq_n_s64(0x41124C41D4FDF3B6uLL);
    float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x41024C41D4FDF3B6uLL);
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0xC1124C41D4FDF3B6);
    do
    {
      float64x2_t v18 = vmlsq_f64(*(float64x2_t *)(v14 + v13), v15, vrndmq_f64(vdivq_f64(*(float64x2_t *)(v14 + v13), v15)));
      *(int8x16_t *)(v14 + v13) = vbslq_s8((int8x16_t)vcgtq_f64(v18, v16), (int8x16_t)vaddq_f64(v18, v17), (int8x16_t)v18);
      v13 += 16;
    }
    while (v13 != 384);
  }
  else
  {
    uint64_t v14 = a3 + 2024;
  }
  double v19 = v10 * 0.25;
  if (a1 >= 4) {
    gn_report_assertion_failure("NK_Meas_ARP_Check: index fail");
  }
  uint64_t v20 = 0;
  double v21 = v10 * v10;
  double v22 = v19 * v19;
  uint64_t v23 = 3608;
  do
  {
    if (*(unsigned char *)(a3 + v20 + 152))
    {
      uint64_t v24 = a3 + 4 * v20;
      int v25 = *(_DWORD *)(v24 + 248);
      if ((v25 - 1) >= 0x1D)
      {
        if (v25)
        {
          EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
        }
        else
        {
          BOOL v26 = v12 >= 100.0;
          if (*a2 != 2) {
            BOOL v26 = v11 >= 100.0;
          }
          if (!v26)
          {
            double v27 = *(double *)(a3 + v23 + 432) * 9.0;
            double v28 = *(double *)(v14 + 8 * v20) * *(double *)(v14 + 8 * v20);
            if (v27 <= v21) {
              double v29 = v21;
            }
            else {
              double v29 = *(double *)(a3 + v23 + 432) * 9.0;
            }
            if (v27 <= v22) {
              double v30 = v22;
            }
            else {
              double v30 = *(double *)(a3 + v23 + 432) * 9.0;
            }
            if (v28 >= v29)
            {
              *(unsigned char *)(a3 + v20 + 152) = 0;
              *(_DWORD *)(v24 + 248) = 20;
              --*(unsigned char *)(a3 + 3);
              ++*(unsigned char *)(a3 + 4);
            }
            else if (v28 > v30)
            {
              double v31 = *(double *)(a3 + v23);
              NK_Get_Smooth_Excl_Weight(v28, v30, v29);
              *(double *)(a3 + v23) = v31 / v32;
              *(unsigned char *)(a3 + v20 + 3992) = 1;
            }
          }
        }
      }
    }
    ++v20;
    v23 += 8;
    a2 += 4;
  }
  while (v20 != 48);
}

void NK_Get_Smooth_Excl_Weight(double a1, double a2, double a3)
{
  if (a1 <= a2)
  {
    gn_report_assertion_failure("NK_Get_Smooth_Excl_Weight:  i<=l");
  }
  else if (a1 >= a3)
  {
    gn_report_assertion_failure("NK_Get_Smooth_Excl_Weight:  i>=u");
  }
  else if ((1.0 / (exp(((a1 - a2) / (a3 - a2) + -0.5) * 10.0) + 1.0) + -0.00669285092) / 0.986614298 <= 0.0000001)
  {
    gn_report_assertion_failure("NK_Get_Smooth_Excl_Weight:  w<=0");
  }
}

void NK_Meas_Outlier_Check(int a1, int a2, void *a3, void *a4, void *a5)
{
  char v6 = a4;
  int v8 = a1;
  v47[48] = *(double *)MEMORY[0x263EF8340];
  unsigned int v45 = 0;
  if (a1 != 1)
  {
    if (a4)
    {
      NK_Get_Valid_Keys(a4, (uint64_t)v46, &v45);
      signed int v10 = v45;
      if ((int)v45 >= 1)
      {
        uint64_t v14 = v46;
        uint64_t v15 = v45;
        do
        {
          uint64_t v16 = *v14++;
          v47[v16] = *(double *)&v6[v16 + 253];
          --v15;
        }
        while (v15);
      }
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      gn_report_assertion_failure("NK_Meas_Outlier_Check:  Bad pDO");
      signed int v10 = 0;
      if (a5)
      {
LABEL_12:
        NK_Get_Valid_Keys(a5, (uint64_t)v46, &v45);
        unsigned int v17 = v45;
        if (v10 < (int)v45)
        {
          uint64_t v18 = (int)v45 - (uint64_t)v10;
          double v19 = &v46[v10];
          do
          {
            uint64_t v20 = *v19++;
            v47[v20] = *(double *)&a5[v20 + 253];
            --v18;
          }
          while (v18);
        }
        int v9 = 0;
        signed int v10 = v17;
        goto LABEL_19;
      }
    }
    gn_report_assertion_failure("NK_Meas_Outlier_Check:  Bad pDR");
    int v9 = 0;
    goto LABEL_19;
  }
  int v9 = a3;
  if (!a3)
  {
    gn_report_assertion_failure("NK_Meas_Outlier_Check:  Bad pPR");
    signed int v10 = 0;
    double v21 = 0;
    goto LABEL_20;
  }
  NK_Get_Valid_Keys(a3, (uint64_t)v46, &v45);
  signed int v10 = v45;
  if ((int)v45 >= 1)
  {
    double v11 = v46;
    uint64_t v12 = v45;
    do
    {
      uint64_t v13 = *v11++;
      v47[v13] = *(double *)&v9[v13 + 301];
      --v12;
    }
    while (v12);
  }
LABEL_19:
  double v21 = v47;
  VecSortIndexAscR8((uint64_t)v47, v10, v46, 1);
LABEL_20:
  if (a2) {
    BOOL v22 = 0;
  }
  else {
    BOOL v22 = v8 == 1;
  }
  if (v22) {
    uint64_t v23 = 6;
  }
  else {
    uint64_t v23 = 5;
  }
  int v24 = v10 - 1;
  if (v10 - 1 > (int)v23)
  {
    int v25 = v10 - 3;
    BOOL v26 = &v46[v10 - 2];
    double v27 = &v46[v24];
    while (1)
    {
      uint64_t v29 = *v27--;
      uint64_t v28 = v29;
      double v30 = v21[v29];
      uint64_t v31 = *v26--;
      double v32 = fabs(v30 / v21[v31]);
      double v33 = fabs(v30 / v21[v46[v25]]);
      double v34 = (v32 + v32) * 0.333333333 + -1.0;
      double v35 = (v33 + v33) * 0.25 + -1.0;
      if (v34 <= 0.0 && v35 <= 0.0) {
        return;
      }
      if (v6 && v8 != 1 && *((unsigned char *)v6 + v28 + 152)) {
        break;
      }
      if (v8 == 1)
      {
        int v8 = 1;
      }
      else
      {
        int v9 = a5;
        int v8 = 3;
      }
      if (v9) {
        goto LABEL_38;
      }
      gn_report_assertion_failure("NK_Meas_Outlier_Check:  Bad p_SM");
LABEL_51:
      int v43 = v25-- + 1;
      if ((int)v23 >= v43) {
        return;
      }
    }
    int v8 = 2;
    int v9 = v6;
LABEL_38:
    if (fabs(v30) > cOutlierMinResid[v8 - 1])
    {
      int v44 = v8;
      int v36 = v6;
      uint64_t v37 = v23;
      double v38 = a5;
      if (v34 < 1.0 && v35 < 1.0)
      {
        __int16 v40 = (double *)&v9[v28];
        double v41 = v40[451];
        if (v34 <= v35) {
          double v34 = v35;
        }
        NK_Get_Smooth_Excl_Weight(v34, 0.0, 1.0);
        v40[451] = v41 / v42;
        *((unsigned char *)v9 + v28 + 3992) = 1;
      }
      else
      {
        if (!*((unsigned char *)v9 + v28 + 152)) {
          gn_report_assertion_failure("NK_Meas_Outlier_Check:  Exclusion index fail");
        }
        *((unsigned char *)v9 + v28 + 152) = 0;
        *((_DWORD *)v9 + v28 + 62) = 19;
        --*((unsigned char *)v9 + 3);
        ++*((unsigned char *)v9 + 4);
      }
      a5 = v38;
      uint64_t v23 = v37;
      char v6 = v36;
      int v8 = v44;
    }
    goto LABEL_51;
  }
}

void *NK_Get_Valid_Keys(void *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 0;
  char v6 = result + 19;
  do
  {
    if (*((unsigned char *)v6 + v5))
    {
      int v7 = *((_DWORD *)v6 + v5 + 24);
      if ((v7 - 1) >= 0x1D)
      {
        if (v7) {
          double result = EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
        }
        else {
          *(_DWORD *)(a2 + 4 * (int)(*a3)++) = v5;
        }
      }
    }
    ++v5;
  }
  while (v5 != 48);
  return result;
}

uint64_t NK_Reject_DO_For_Rejected_PR(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v29[12] = *(double *)MEMORY[0x263EF8340];
  double v26 = 0.0;
  uint64_t v22 = a4 + 13960;
  uint64_t v21 = a4 + 8384;
  int v25 = (double *)(a3 + 872);
  uint64_t v8 = a4 + 8536;
  uint64_t v23 = a4 + 6800;
  uint64_t v9 = a4 + 14112;
  do
  {
    uint64_t v10 = a4 + 4 * v7;
    unsigned int v11 = *(_DWORD *)(v10 + 3056);
    if (v11 > 0x1D)
    {
      double result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
    }
    else if (((1 << v11) & 0x3FFFF7FE) == 0 && (v11 || !*(unsigned char *)(v23 + v7)))
    {
      goto LABEL_8;
    }
    if (!*(unsigned char *)(v9 + v7)) {
      goto LABEL_6;
    }
    int v12 = *(_DWORD *)(a4 + v6 + 14208);
    if ((v12 - 1) < 0x1D) {
      goto LABEL_6;
    }
    if (v12)
    {
      double result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
LABEL_6:
      if (!*(unsigned char *)(v8 + v7)) {
        goto LABEL_8;
      }
      int v13 = *(_DWORD *)(a4 + v6 + 8632);
      if ((v13 - 1) < 0x1D) {
        goto LABEL_8;
      }
      if (v13)
      {
        double result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
        goto LABEL_8;
      }
      char v20 = 0;
      uint64_t v14 = 2;
      uint64_t v15 = v21;
      goto LABEL_17;
    }
    uint64_t v14 = 3;
    char v20 = 1;
    uint64_t v15 = v22;
LABEL_17:
    NK_Obs_Equ_SV((void *)v14, *(unsigned __int8 *)(v15 + v7 + 200), *(unsigned __int8 *)(a2 + v6), v5, (uint64_t)v29, *(double *)(a4 + 656));
    uint64_t v16 = (double *)(v15 + 8 * v7);
    v29[11] = v16[253];
    double v17 = v16[505];
    double v18 = v16[451];
    double result = umeas((BOOL)v25, 0xBu, -(v17 * v18), v29, v28, v27, &v26, 1.0e20);
    int v19 = *(_DWORD *)(v10 + 3056);
    if ((v19 - 1) < 0x1D) {
      goto LABEL_18;
    }
    if (v19)
    {
      double result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
LABEL_18:
      *(unsigned char *)(v15 + v7 + 152) = 0;
      *(_DWORD *)(v15 + 4 * v7 + 248) = 24;
      --*(unsigned char *)(v15 + 3);
      ++*(unsigned char *)(v15 + 4);
      goto LABEL_8;
    }
    if (!*(unsigned char *)(v23 + v7)) {
      goto LABEL_18;
    }
    if ((v20 & 1) == 0)
    {
      double result = umeas((BOOL)v25, 0xBu, v17 * v18 * *(double *)(v8 + 8 * v7 - 2120), v29, v28, v27, &v26, 1.0e20);
      *(unsigned char *)(v15 + v7 + 3992) = 1;
    }
LABEL_8:
    ++v7;
    v5 += 56;
    v6 += 4;
  }
  while (v7 != 48);
  return result;
}

void GPS_State_Update_Init(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = (_OWORD *)a7;
  uint64_t v36 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 306) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  unsigned int v11 = (_DWORD *)(a7 + 184);
  uint64_t v12 = 139;
  *(_OWORD *)(a1 + 288) = 0u;
  do
  {
    *unsigned int v11 = 0;
    v11 += 48;
    --v12;
  }
  while (v12);
  if (ST_Get_Time(a3, (__int16 *)(a2 + 8), (_DWORD *)(a2 + 4)))
  {
    uint64_t v13 = 0;
    __int16 v14 = 60;
    __int16 v15 = 15;
    do
    {
      if (*((unsigned char *)a4 + v13 + 39303))
      {
        *(_DWORD *)&v35[24] = 0;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        memset(v35, 0, 21);
        ST_Update_Table(v13, v15, v14, (uint64_t)&v25, a2, a1, a5, a4, a6);
        int v16 = *(_DWORD *)(a2 + 12);
        if ((v16 - 1) <= 1)
        {
          *(unsigned char *)(a1 + 306) = 1;
          if (v16 == 1)
          {
            if (v15 <= 0) {
              __int16 v15 = 15;
            }
            else {
              --v15;
            }
          }
          else if (v14 <= 0)
          {
            __int16 v14 = 59;
          }
          else
          {
            v14 -= 3;
          }
          long long v17 = v34;
          v7[8] = v33;
          v7[9] = v17;
          long long v18 = *(_OWORD *)&v35[16];
          v7[10] = *(_OWORD *)v35;
          v7[11] = v18;
          long long v19 = v30;
          v7[4] = v29;
          v7[5] = v19;
          long long v20 = v32;
          v7[6] = v31;
          v7[7] = v20;
          long long v21 = v26;
          *uint64_t v7 = v25;
          v7[1] = v21;
          long long v22 = v28;
          void v7[2] = v27;
          v7[3] = v22;
        }
      }
      ++v13;
      v7 += 12;
    }
    while (v13 != 149);
    if (*(unsigned char *)(a1 + 306))
    {
      *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 8);
      *(_DWORD *)a1 = *(_DWORD *)(a2 + 4);
    }
  }
}

BOOL ST_Get_Time(uint64_t a1, __int16 *a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a1 + 5);
  int v4 = *(_DWORD *)a1;
  *a2 = *(_WORD *)(a1 + 16);
  *a3 = (int)*(double *)(a1 + 24);
  if (v3) {
    BOOL v5 = v4 <= 2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 8);
    __int16 v16 = 0;
    double v14 = 0.0;
    double v15 = 0.0;
    if (Get_FSP_Time(v8, &v16, &v14, &v15, &v17))
    {
      if (v15 <= 40000.0)
      {
        unsigned int v10 = v15;
        if (v15 >= 2)
        {
          if (v10 >= 0x190) {
            int v11 = 1;
          }
          else {
            int v11 = 2;
          }
          if (v10 >= 9) {
            int v9 = v11;
          }
          else {
            int v9 = 3;
          }
        }
        else
        {
          int v9 = 4;
        }
      }
      else
      {
        int v9 = 0;
      }
      if (v9 > v4)
      {
        *a2 = v16;
        *a3 = (int)v14;
        int v3 = 1;
        int v4 = v9;
      }
    }
  }
  else
  {
    int v3 = 1;
  }
  if (v3) {
    BOOL v12 = v4 <= 0;
  }
  else {
    BOOL v12 = 1;
  }
  return !v12;
}

void ST_Update_Table(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v195 = *MEMORY[0x263EF8340];
  if (a1 >= 0x95) {
    gn_report_assertion_failure("ST_Update_Table : sv < NUM_POS");
  }
  int Constell_Pos = Get_Constell_Pos(a1);
  int v18 = Constell_Pos;
  int v19 = Constell_Pos - 1;
  if ((Constell_Pos - 1) >= 5)
  {
    if (Constell_Pos && Constell_Pos != 6)
    {
      EvCrt_Illegal_Default("ST_Update_Table", 0x306u);
    }
    return;
  }
  int v155 = a2;
  int v156 = a3;
  uint64_t v174 = 0;
  long long v172 = 0u;
  long long v173 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v161 = 0u;
  int v150 = Num_Pos[v19];
  int v154 = Num_Pos_Idx_To_Num_Prn_Idx(a1);
  uint64_t v157 = a4;
  *(_DWORD *)(a4 + 184) = 0;
  uint64_t v20 = a6 + 2 * a1;
  *(_WORD *)(v20 + 6) = 0;
  long long v21 = (_WORD *)(v20 + 6);
  if (a1 >= 0x95) {
    gn_report_assertion_failure("ST_Get_GPS_Orbit : sv < NUM_POS");
  }
  unsigned int v158 = Get_Constell_Pos(a1);
  uint64_t v22 = Num_Pos_Idx_To_Num_Prn_Idx(a1);
  int v23 = v22;
  int v152 = LongPrnIdx_To_ShortPrnIdx(v22, &v158);
  char v24 = Num_Pos_Idx_To_GNSS_Id(a1);
  *(_DWORD *)(a5 + 12) = 0;
  if (!*((unsigned char *)a8 + v23 + 33605) || *(unsigned char *)(a7 + v23 + 253))
  {
LABEL_8:
    uint64_t v25 = v157;
    goto LABEL_9;
  }
  char v32 = v24;
  unsigned int v33 = v158;
  if (v158 == 2)
  {
    long long v34 = (char *)a8 + v23;
    if (!v34[37522]) {
      goto LABEL_8;
    }
    v34[37878] = 0;
    v34[38056] = 0;
    *(_DWORD *)(a5 + 12) = 1;
    if (*(unsigned char *)(a8[2035] + v152))
    {
      *(unsigned char *)(a5 + 16) = 1;
      Get_GPS_Kep_Ephemeris(2, v24, (uint64_t)a8 + 108 * v152 + 12760, (uint64_t)&v161);
      int v35 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v161);
      BOOL v36 = ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(EE)", v35, (uint64_t)&v161);
      uint64_t v37 = a8[2035];
      if (v36)
      {
        if (*(unsigned char *)(v37 + v152) && *(unsigned char *)(a8[2034] + v152))
        {
          unint64_t v38 = HIDWORD(a8[8 * (uint64_t)v152 + 1409]);
          unsigned int v39 = (~v38 & 0xF00) != 0
              ? ST_Get_GPS_Orbit(unsigned char,s_SV_State_Update_WD *,s_DB_Sys_Status *,s_DB_SV_Nav_Mess *,s_Eph_Kep *)::glonURE_table[(v38 >> 8) & 0xF]
              : 0xFFFF;
          unsigned int v78 = SHIBYTE(v161) > 11
              ? 0xFFFF
              : ST_Get_GPS_Orbit(unsigned char,s_SV_State_Update_WD *,s_DB_Sys_Status *,s_DB_SV_Nav_Mess *,s_Eph_Kep *)::gpsURE_table[SHIBYTE(v161)];
          if (v78 > v39) {
            *(_DWORD *)(a5 + 12) = 0;
          }
        }
      }
      else
      {
        *(_DWORD *)(a5 + 12) = 0;
        *(unsigned char *)(v37 + v152) = 0;
      }
    }
    int v46 = *(_DWORD *)(a5 + 12);
    *(unsigned char *)(a8[2039] + v152) = v46 == 1;
    goto LABEL_170;
  }
  __int16 v40 = (char *)a8 + v23;
  if (v40[37344] || v40[37522])
  {
    unsigned __int16 v149 = (char *)a8 + v23 + 37344;
    double v41 = v40 + 37878;
    v40[37878] = 0;
    v40[38056] = 0;
    *(_DWORD *)(a5 + 12) = 1;
    switch(v33)
    {
      case 0u:
      case 6u:
        goto LABEL_143;
      case 1u:
        long long v144 = v40 + 37878;
        *(void *)&long long v185 = 0;
        *((void *)&v185 + 1) = 0x6300000000000000;
        *(_DWORD *)&v186[8] = 0;
        *(void *)__int16 v186 = 0;
        memset(&v186[16], 0, 64);
        long long v187 = 0u;
        long long v188 = 0u;
        long long v189 = 0u;
        long long v190 = 0u;
        long long v191 = 0u;
        long long v192 = 0u;
        long long v193 = 0u;
        uint64_t v194 = 0;
        *(void *)&long long v175 = 0;
        *((void *)&v175 + 1) = 0x6300000000000000;
        *(_DWORD *)&v176[8] = 0;
        *(void *)long long v176 = 0;
        memset(&v176[16], 0, 64);
        long long v177 = 0u;
        long long v178 = 0u;
        long long v179 = 0u;
        long long v180 = 0u;
        long long v181 = 0u;
        long long v182 = 0u;
        long long v183 = 0u;
        uint64_t v184 = 0;
        uint64_t v42 = v152;
        if (*(unsigned char *)(a8[6] + v152))
        {
          Get_GPS_Kep_Ephemeris(1, v24, (uint64_t)a8 + 108 * v152 + 104, (uint64_t)&v185);
          int v43 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v185);
          BOOL v44 = ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v43, (uint64_t)&v185);
          uint64_t v42 = v152;
          int v45 = 1;
          if (!v44)
          {
            int v45 = 0;
            *(unsigned char *)(a8[6] + v152) = 0;
          }
        }
        else
        {
          int v45 = 0;
        }
        if (!*(unsigned char *)(a8[7] + v42)) {
          goto LABEL_93;
        }
        char v70 = v32;
        uint64_t v71 = v42;
        Get_GPS_Kep_Ephemeris(v158, v70, (uint64_t)a8 + 108 * (int)v42 + 3560, (uint64_t)&v175);
        int v72 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v175);
        if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(EE)", v72, (uint64_t)&v175))
        {
          uint64_t v42 = v71;
          if (v45 && SHIBYTE(v175) > SHIBYTE(v185))
          {
            uint64_t v147 = v71;
            int64x2_t v73 = &v185;
            char v74 = 1;
            if (ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v185, (uint64_t)&v175, 1))
            {
              char v74 = 0;
            }
            else
            {
              *unsigned __int16 v149 = 0;
              *((unsigned char *)a8 + v23 + 38234) = 1;
              int64x2_t v73 = &v175;
            }
            uint64_t v42 = v147;
          }
          else
          {
            char v74 = 1;
            int64x2_t v73 = &v175;
          }
          goto LABEL_116;
        }
        *(unsigned char *)(a8[7] + v71) = 0;
        uint64_t v42 = v71;
LABEL_93:
        if (v45)
        {
          char v74 = 0;
          int64x2_t v73 = &v185;
LABEL_116:
          long long v79 = v73[11];
          long long v171 = v73[10];
          long long v172 = v79;
          long long v173 = v73[12];
          uint64_t v174 = *((void *)v73 + 26);
          long long v80 = v73[7];
          long long v167 = v73[6];
          long long v168 = v80;
          long long v81 = v73[9];
          long long v169 = v73[8];
          long long v170 = v81;
          long long v82 = v73[3];
          long long v163 = v73[2];
          long long v164 = v82;
          long long v83 = v73[5];
          long long v165 = v73[4];
          long long v166 = v83;
          long long v84 = v73[1];
          long long v161 = *v73;
          long long v162 = v84;
          uint64_t v85 = a8[10];
          goto LABEL_120;
        }
        goto LABEL_130;
      case 3u:
        long long v144 = v40 + 37878;
        uint64_t v48 = v152;
        int v49 = *(unsigned __int8 *)(a8[2076] + v152);
        int v50 = *(unsigned __int8 *)(a8[2077] + v152);
        BOOL v51 = *(unsigned char *)(a8[2077] + v152) != 0;
        memset(v159, 0, 20);
        memset(&v159[24], 0, 124);
        memset(&v159[152], 0, 41);
        uint64_t v160 = 0;
        if (v49 && v50)
        {
          int32x4_t v52 = &a8[11 * v152];
          uint64_t v53 = (uint64_t)(v52 + 2488);
          if (*((unsigned __int8 *)v52 + 19919) > *((unsigned __int8 *)v52 + 16751))
          {
            long long v185 = 0uLL;
            *(_DWORD *)&v186[8] = 0;
            *(void *)__int16 v186 = 0;
            memset(&v186[16], 0, 64);
            long long v187 = 0uLL;
            long long v188 = 0uLL;
            long long v189 = 0uLL;
            long long v190 = 0uLL;
            long long v191 = 0uLL;
            long long v192 = 0uLL;
            long long v193 = 0uLL;
            uint64_t v194 = 0;
            long long v175 = 0uLL;
            *(_DWORD *)&v176[8] = 0;
            *(void *)long long v176 = 0;
            memset(&v176[16], 0, 64);
            long long v177 = 0uLL;
            long long v178 = 0uLL;
            long long v179 = 0uLL;
            long long v180 = 0uLL;
            long long v181 = 0uLL;
            long long v182 = 0uLL;
            long long v183 = 0uLL;
            uint64_t v184 = 0;
            GAL_EphInt2Real((uint64_t)&a8[11 * v152 + 2092], (uint64_t)v159);
            GAL_EphReal2Kep((uint64_t)v159, (uint64_t)&v185);
            int v54 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v185);
            BOOL v140 = ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v54, (uint64_t)&v185);
            if (!v140) {
              *(unsigned char *)(a8[2076] + v152) = 0;
            }
            GAL_EphInt2Real(v53, (uint64_t)v159);
            GAL_EphReal2Kep((uint64_t)v159, (uint64_t)&v175);
            int v55 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v175);
            if (!ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v55, (uint64_t)&v175))
            {
              BOOL v51 = 0;
              uint64_t v48 = v152;
              *(unsigned char *)(a8[2077] + v152) = 0;
              if (!v140) {
                goto LABEL_130;
              }
              goto LABEL_73;
            }
            if (v140)
            {
              if (ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v185, (uint64_t)&v175, 1))
              {
                BOOL v51 = 0;
                uint64_t v48 = v152;
LABEL_73:
                char v141 = 0;
                uint64_t v67 = (uint64_t)&a8[11 * (int)v48 + 2092];
                int v134 = 1;
                int v135 = v51;
                goto LABEL_124;
              }
              *unsigned __int16 v149 = 0;
              *((unsigned char *)a8 + v23 + 38234) = 1;
            }
            uint64_t v48 = v152;
          }
        }
        else
        {
          if (v49) {
            goto LABEL_73;
          }
          if (!v50) {
            goto LABEL_130;
          }
        }
        uint64_t v67 = (uint64_t)&a8[11 * (int)v48 + 2488];
        char v141 = 1;
        int v134 = 0;
        int v135 = 1;
LABEL_124:
        uint64_t v92 = v48;
        GAL_EphInt2Real(v67, (uint64_t)v159);
        *(unsigned char *)(a8[2080] + v92) = v141;
        if (HIBYTE(v160) == 2 || BYTE4(v160) == 1 || v159[15] == 255)
        {
          int v136 = v159[15];
          int v138 = BYTE4(v160);
          int v143 = HIBYTE(v160);
          *(void *)&long long v185 = 0x4050000000000000;
          int v95 = v159[14];
          *((unsigned char *)a8 + v159[14] + 16699) = 1;
          *(void *)&long long v175 = 0;
          if (R8_EQ((const double *)&v185, (const double *)&v175))
          {
            EvLog_v("ST_Get_GPS_Orbit: DO NOT USE GAL SV with Marginal Health t %d SV %d HS %d DVS %d NAPA %d Sigma %d", *(_DWORD *)(a5 + 4), v95, v143, v138, v136 == 255, 64);
LABEL_130:
            double v41 = v144;
            goto LABEL_143;
          }
          int v96 = 70;
          if (v136 == 255) {
            int v96 = 64;
          }
          char v94 = 8;
          EvLog_v("ST_Get_GPS_Orbit: USE GAL SV with Marginal Health t %d SV %d HS %d DVS %d NAPA %d FOM %d Sigma %d", *(_DWORD *)(a5 + 4), v95, v143, v138, v136 == 255, 8, v96);
          char v93 = 1;
        }
        else
        {
          char v93 = 0;
          char v94 = 0;
          *((unsigned char *)a8 + v159[14] + 16699) = 0;
        }
        GAL_EphReal2Kep((uint64_t)v159, (uint64_t)&v161);
        int v97 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v161);
        if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(GAL)", v97, (uint64_t)&v161))
        {
          if (v93) {
            HIBYTE(v161) = v94;
          }
          goto LABEL_152;
        }
        if (v134) {
          *(unsigned char *)(a8[2076] + v152) = 0;
        }
        double v41 = v144;
        if (v135) {
          *(unsigned char *)(a8[2077] + v152) = 0;
        }
        if (v93) {
          HIBYTE(v161) = v94;
        }
        goto LABEL_143;
      case 4u:
        uint64_t v56 = v152;
        int v57 = *(unsigned __int8 *)(a8[3058] + v152);
        int v58 = *(unsigned __int8 *)(a8[3059] + v152);
        BOOL v59 = *(unsigned char *)(a8[3059] + v152) != 0;
        *(void *)&v159[7] = 0;
        *(void *)unsigned __int16 v159 = 0;
        memset(&v159[16], 0, 168);
        uint64_t v145 = v41;
        if (v57 && v58)
        {
          unint64_t v60 = (char *)a8 + 100 * v152;
          uint64_t v61 = (uint64_t)(v60 + 28220);
          if (v60[28241] > v60[24541])
          {
            long long v185 = 0uLL;
            *(_DWORD *)&v186[8] = 0;
            *(void *)__int16 v186 = 0;
            memset(&v186[16], 0, 64);
            long long v187 = 0uLL;
            long long v188 = 0uLL;
            long long v189 = 0uLL;
            long long v190 = 0uLL;
            long long v191 = 0uLL;
            long long v192 = 0uLL;
            long long v193 = 0uLL;
            uint64_t v194 = 0;
            long long v175 = 0uLL;
            *(_DWORD *)&v176[8] = 0;
            *(void *)long long v176 = 0;
            memset(&v176[16], 0, 64);
            long long v177 = 0uLL;
            long long v178 = 0uLL;
            long long v179 = 0uLL;
            long long v180 = 0uLL;
            long long v181 = 0uLL;
            long long v182 = 0uLL;
            long long v183 = 0uLL;
            uint64_t v184 = 0;
            BDS_EphInt2Real((uint64_t)a8 + 100 * v152 + 24520, (uint64_t)v159);
            BDS_EphReal2Kep((uint64_t)v159, (uint64_t)&v185);
            int v62 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v185);
            BOOL v63 = ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v62, (uint64_t)&v185);
            if (!v63) {
              *(unsigned char *)(a8[3058] + v152) = 0;
            }
            BDS_EphInt2Real(v61, (uint64_t)v159);
            BDS_EphReal2Kep((uint64_t)v159, (uint64_t)&v175);
            int v64 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v175);
            if (!ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v64, (uint64_t)&v175))
            {
              BOOL v59 = 0;
              uint64_t v56 = v152;
              double v41 = v145;
              *(unsigned char *)(a8[3059] + v152) = 0;
              if (!v63) {
                goto LABEL_143;
              }
              goto LABEL_75;
            }
            if (v63)
            {
              if (ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v185, (uint64_t)&v175, 1))
              {
                BOOL v59 = 0;
                uint64_t v56 = v152;
LABEL_75:
                int v139 = v59;
                char v68 = 0;
                uint64_t v69 = (uint64_t)a8 + 100 * (int)v56 + 24520;
                int v137 = 1;
                goto LABEL_246;
              }
              *unsigned __int16 v149 = 0;
              *((unsigned char *)a8 + v23 + 38234) = 1;
            }
            uint64_t v56 = v152;
          }
        }
        else
        {
          if (v57) {
            goto LABEL_75;
          }
          if (!v58) {
            goto LABEL_143;
          }
        }
        int v137 = 0;
        uint64_t v69 = (uint64_t)a8 + 100 * (int)v56 + 28220;
        char v68 = 1;
        int v139 = 1;
LABEL_246:
        uint64_t v132 = v56;
        BDS_EphInt2Real(v69, (uint64_t)v159);
        *(unsigned char *)(a8[3062] + v132) = v68;
        BDS_EphReal2Kep((uint64_t)v159, (uint64_t)&v161);
        int v133 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v161);
        if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(BDS)", v133, (uint64_t)&v161)) {
          goto LABEL_152;
        }
        if (v137) {
          *(unsigned char *)(a8[3058] + v152) = 0;
        }
        double v41 = v145;
        if (v139) {
          *(unsigned char *)(a8[3059] + v152) = 0;
        }
LABEL_143:
        if (BYTE14(v161) != 255) {
          goto LABEL_149;
        }
        if (v158 > 6)
        {
          uint64_t v98 = v41;
          EvCrt_Illegal_Default("ST_Get_GPS_Orbit", 0x71Cu);
        }
        else
        {
          if (((1 << v158) & 0x3A) == 0) {
            goto LABEL_149;
          }
          uint64_t v98 = v41;
          EvLog_v("ST_Get_GPS_Orbit:  %c %d  Alm looking Eph timed-out", aXgrebqs[v158], v152);
        }
        double v41 = v98;
LABEL_149:
        *(_DWORD *)(a5 + 12) = 0;
        if (*v41) {
          goto LABEL_154;
        }
        if (Get_Constell_Prn(v23) == 2) {
          __assert_rtn("ST_Get_GPS_Orbit", "GPS_State_Update.cpp", 1844, "Get_Constell_Prn( (U1)i) != GLON_CONSTELL");
        }
        *unsigned __int16 v149 = 0;
        uint64_t v99 = (char *)a8 + v23;
        v99[38768] = 0;
        v99[38234] = 1;
LABEL_152:
        int v46 = *(_DWORD *)(a5 + 12);
        if (v46 == 2) {
          goto LABEL_156;
        }
        if (!v46) {
          goto LABEL_154;
        }
        goto LABEL_170;
      case 5u:
        *(void *)&long long v185 = 0;
        *((void *)&v185 + 1) = 0x6300000000000000;
        *(_DWORD *)&v186[8] = 0;
        *(void *)__int16 v186 = 0;
        memset(&v186[16], 0, 64);
        long long v187 = 0u;
        long long v188 = 0u;
        long long v189 = 0u;
        long long v190 = 0u;
        long long v191 = 0u;
        long long v192 = 0u;
        long long v193 = 0u;
        uint64_t v194 = 0;
        *(void *)&long long v175 = 0;
        *((void *)&v175 + 1) = 0x6300000000000000;
        *(_DWORD *)&v176[8] = 0;
        *(void *)long long v176 = 0;
        memset(&v176[16], 0, 64);
        long long v177 = 0u;
        long long v178 = 0u;
        long long v179 = 0u;
        long long v180 = 0u;
        long long v181 = 0u;
        long long v182 = 0u;
        long long v183 = 0u;
        uint64_t v184 = 0;
        uint64_t v42 = v152;
        uint64_t v146 = v40 + 37878;
        if (*(unsigned char *)(a8[1069] + v152))
        {
          Get_GPS_Kep_Ephemeris(5, v24, (uint64_t)a8 + 108 * v152 + 8608, (uint64_t)&v185);
          int v65 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v185);
          if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v65, (uint64_t)&v185))
          {
            int v66 = 1;
          }
          else
          {
            int v66 = 0;
            *(unsigned char *)(a8[1069] + v152) = 0;
          }
          double v41 = v146;
          uint64_t v42 = v152;
        }
        else
        {
          int v66 = 0;
        }
        if (!*(unsigned char *)(a8[1070] + v42)) {
          goto LABEL_96;
        }
        int v142 = v66;
        uint64_t v75 = v42;
        Get_GPS_Kep_Ephemeris(v158, v32, (uint64_t)a8 + 108 * (int)v42 + 9688, (uint64_t)&v175);
        int v76 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v175);
        if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(EE)", v76, (uint64_t)&v175))
        {
          uint64_t v42 = v75;
          if (v142 && SHIBYTE(v175) > SHIBYTE(v185))
          {
            uint64_t v148 = v75;
            unsigned __int16 v77 = &v185;
            char v74 = 1;
            if (ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v185, (uint64_t)&v175, 1))
            {
              char v74 = 0;
            }
            else
            {
              *unsigned __int16 v149 = 0;
              *((unsigned char *)a8 + v23 + 38234) = 1;
              unsigned __int16 v77 = &v175;
            }
            uint64_t v42 = v148;
          }
          else
          {
            char v74 = 1;
            unsigned __int16 v77 = &v175;
          }
        }
        else
        {
          *(unsigned char *)(a8[1070] + v75) = 0;
          double v41 = v146;
          uint64_t v42 = v75;
          LOBYTE(v66) = v142;
LABEL_96:
          if ((v66 & 1) == 0) {
            goto LABEL_143;
          }
          char v74 = 0;
          unsigned __int16 v77 = &v185;
        }
        long long v86 = v77[11];
        long long v171 = v77[10];
        long long v172 = v86;
        long long v173 = v77[12];
        uint64_t v174 = *((void *)v77 + 26);
        long long v87 = v77[7];
        long long v167 = v77[6];
        long long v168 = v87;
        long long v88 = v77[9];
        long long v169 = v77[8];
        long long v170 = v88;
        long long v89 = v77[3];
        long long v163 = v77[2];
        long long v164 = v89;
        long long v90 = v77[5];
        long long v165 = v77[4];
        long long v166 = v90;
        long long v91 = v77[1];
        long long v161 = *v77;
        long long v162 = v91;
        uint64_t v85 = a8[1073];
LABEL_120:
        *(unsigned char *)(v85 + v42) = v74;
        goto LABEL_152;
      default:
        char v47 = v40 + 37878;
        EvCrt_Illegal_Default("ST_Get_GPS_Orbit", 0x700u);
        double v41 = v47;
        goto LABEL_143;
    }
  }
  if (!*((unsigned char *)a8 + v23 + 37700)) {
    goto LABEL_8;
  }
LABEL_154:
  double v100 = (char *)a8 + v23;
  if (!v100[37700]) {
    goto LABEL_8;
  }
  v100[38056] = 0;
  v100[38768] = 0;
  *(_DWORD *)(a5 + 12) = 2;
LABEL_156:
  *(_WORD *)__int16 v186 = 0;
  *(void *)&long long v185 = 0;
  *(void *)((char *)&v185 + 7) = 0;
  memset(&v186[4], 0, 76);
  switch(v158)
  {
    case 0u:
    case 2u:
    case 6u:
      goto LABEL_168;
    case 1u:
      Get_GPS_Kep_Almanac((uint64_t)a8 + 44 * v152 + 7016, (uint64_t)&v185);
      goto LABEL_166;
    case 3u:
      memset(v176, 0, 75);
      long long v175 = 0uLL;
      GAL_AlmInt2Real((uint64_t)a8 + 36 * v152 + 23072, (uint64_t)&v175);
      *(_OWORD *)&v186[8] = *(_OWORD *)&v176[56];
      *(void *)&v186[24] = *(void *)&v176[8];
      *(double *)&v186[32] = *(double *)&v176[16] + 0.977384381;
      *(void *)&v186[40] = *(void *)&v176[32];
      *(void *)&v186[48] = *(void *)&v176[48];
      *(void *)((char *)&v185 + 4) = DWORD1(v175) | 0x300000000;
      BYTE12(v185) = BYTE8(v175);
      BYTE13(v185) = v176[74] | (8 * v176[73]);
      BYTE14(v185) = BYTE9(v175);
      *(_WORD *)__int16 v186 = WORD5(v175) + 1024;
      *(_DWORD *)&v186[4] = HIDWORD(v175);
      *(double *)&v186[56] = *(double *)v176 + 5440.5882;
      *(void *)&v186[64] = *(void *)&v176[24];
      *(void *)&v186[72] = *(void *)&v176[40];
      goto LABEL_166;
    case 4u:
      memset(v176, 0, 72);
      long long v175 = 0uLL;
      BDS_AlmInt2Real((uint64_t)a8 + 44 * v152 + 31920, (uint64_t)&v175);
      *(void *)&long long v185 = v175;
      *(void *)&v186[72] = *(void *)&v176[16];
      double v101 = 0.942477796;
      if (BYTE11(v175) <= 5u) {
        double v101 = 0.0;
      }
      *(void *)&v186[24] = *(void *)&v176[8];
      *(double *)&v186[32] = *(double *)&v176[48] + v101;
      *(void *)&v186[48] = *(void *)&v176[24];
      *(void *)&v186[56] = *(void *)v176;
      *(void *)&v186[40] = *(void *)&v176[40];
      *(_OWORD *)&v186[8] = *(_OWORD *)&v176[56];
      *(_DWORD *)&v186[4] = HIDWORD(v175) + 14;
      *(_WORD *)__int16 v186 = WORD4(v175) + 1356;
      if (HIDWORD(v175) + 14 > 604799)
      {
        *(_DWORD *)&v186[4] = HIDWORD(v175) - 604786;
        *(_WORD *)__int16 v186 = WORD4(v175) + 1357;
      }
      *(double *)&v186[64] = *(double *)&v176[32] + 0.0010208961;
      DWORD2(v185) = 4;
      BYTE12(v185) = BYTE11(v175);
      BYTE13(v185) = BYTE10(v175) ^ 1;
      goto LABEL_166;
    case 5u:
      Get_QZSS_Kep_Almanac((uint64_t)a8 + 44 * v152 + 10768, (uint64_t)&v185);
LABEL_166:
      int v102 = Kep_Check_Almanac(*(__int16 *)(a5 + 8), (uint64_t)&v185);
      if (!ST_Check_Alm_Kep_Err((uint64_t)"ST_Get_GPS_Orbit", v102, (uint64_t)&v185)) {
        goto LABEL_168;
      }
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v171 = *(_OWORD *)&v186[48];
      *(void *)&long long v172 = *(void *)&v186[64];
      *((void *)&v172 + 1) = *(void *)&v186[32];
      *(void *)&long long v173 = *(void *)&v186[72];
      *((void *)&v173 + 1) = *(void *)&v186[24];
      uint64_t v174 = *(void *)&v186[40];
      long long v163 = *(_OWORD *)&v186[8];
      DWORD2(v162) = *(_DWORD *)&v186[4];
      WORD1(v162) = *(_WORD *)v186;
      *(void *)((char *)&v161 + 4) = *(void *)((char *)&v185 + 4);
      WORD6(v161) = WORD6(v185);
      int v46 = *(_DWORD *)(a5 + 12);
      break;
    default:
      EvCrt_Illegal_Default("ST_Get_GPS_Orbit", 0x781u);
LABEL_168:
      gn_report_assertion_failure("ST_Get_GPS_Orbit : status == TRUE");
      int v46 = 0;
      *(_DWORD *)(a5 + 12) = 0;
      long long v103 = (char *)a8 + v23;
      if (!v103[38056])
      {
        int v46 = 0;
        v103[37700] = 0;
        v103[38412] = 1;
      }
      break;
  }
LABEL_170:
  if (v46 != 1) {
    goto LABEL_8;
  }
  uint64_t v25 = v157;
  if (*(unsigned char *)(a5 + 16)) {
    goto LABEL_9;
  }
  unint64_t v104 = (char *)a8 + v154 + 38946;
  if (*v104) {
    goto LABEL_9;
  }
  int v105 = a1 - v150;
  int v106 = (char *)a8 + v154;
  if (v106[37700] && v106[33605])
  {
    switch(v19)
    {
      case 0:
        __int16 v107 = *((_WORD *)a8 + 22 * v105 + 3513);
        break;
      case 2:
        __int16 v107 = *((_WORD *)a8 + 18 * v105 + 11541) + 1024;
        break;
      case 3:
        if (*((unsigned __int8 *)a8 + 44 * v105 + 31931) <= 0x93u) {
          __int16 v108 = 1356;
        }
        else {
          __int16 v108 = 1357;
        }
        __int16 v107 = v108 + *((_WORD *)a8 + 22 * v105 + 15964);
        break;
      case 4:
        __int16 v107 = *((_WORD *)a8 + 22 * v105 + 5389);
        break;
      default:
        EvCrt_Illegal_Default("ST_Update_Table", 0x349u);
        goto LABEL_182;
    }
  }
  else
  {
LABEL_182:
    __int16 v107 = 0x7FFF;
  }
  int v109 = *(__int16 *)(a5 + 8);
  int v110 = v109 - v107;
  if (v110 < 0) {
    int v110 = -v110;
  }
  if (v110 <= 2)
  {
    *(_WORD *)long long v176 = 0;
    *(void *)&long long v175 = 0;
    *(void *)((char *)&v175 + 7) = 0;
    memset(&v176[4], 0, 76);
    __int16 v111 = v109;
    switch(v19)
    {
      case 0:
        Get_GPS_Kep_Almanac((uint64_t)a8 + 44 * v105 + 7016, (uint64_t)&v175);
        goto LABEL_198;
      case 1:
        __assert_rtn("ST_Update_Table", "GPS_State_Update.cpp", 862, "FALSE");
      case 2:
        memset(v186, 0, 75);
        long long v185 = 0uLL;
        GAL_AlmInt2Real((uint64_t)a8 + 36 * v105 + 23072, (uint64_t)&v185);
        *(_OWORD *)&v176[8] = *(_OWORD *)&v186[56];
        *(void *)&v176[24] = *(void *)&v186[8];
        *(double *)&v176[32] = *(double *)&v186[16] + 0.977384381;
        *(void *)&v176[40] = *(void *)&v186[32];
        *(void *)&v176[48] = *(void *)&v186[48];
        *(void *)((char *)&v175 + 4) = DWORD1(v185) | 0x300000000;
        BYTE12(v175) = BYTE8(v185);
        BYTE13(v175) = v186[74] | (8 * v186[73]);
        BYTE14(v175) = BYTE9(v185);
        *(_WORD *)long long v176 = WORD5(v185) + 1024;
        *(_DWORD *)&v176[4] = HIDWORD(v185);
        *(double *)&v176[56] = *(double *)v186 + 5440.5882;
        *(void *)&v176[64] = *(void *)&v186[24];
        *(void *)&v176[72] = *(void *)&v186[40];
        goto LABEL_198;
      case 3:
        memset(v186, 0, 72);
        long long v185 = 0uLL;
        BDS_AlmInt2Real((uint64_t)a8 + 44 * v105 + 31920, (uint64_t)&v185);
        *(void *)&long long v175 = v185;
        *(void *)&v176[72] = *(void *)&v186[16];
        double v113 = 0.942477796;
        if (BYTE11(v185) <= 5u) {
          double v113 = 0.0;
        }
        *(void *)&v176[24] = *(void *)&v186[8];
        *(double *)&v176[32] = *(double *)&v186[48] + v113;
        *(void *)&v176[48] = *(void *)&v186[24];
        *(void *)&v176[56] = *(void *)v186;
        *(void *)&v176[40] = *(void *)&v186[40];
        *(_OWORD *)&v176[8] = *(_OWORD *)&v186[56];
        *(_DWORD *)&v176[4] = HIDWORD(v185) + 14;
        *(_WORD *)long long v176 = WORD4(v185) + 1356;
        if (HIDWORD(v185) + 14 > 604799)
        {
          *(_DWORD *)&v176[4] = HIDWORD(v185) - 604786;
          *(_WORD *)long long v176 = WORD4(v185) + 1357;
        }
        *(double *)&v176[64] = *(double *)&v186[32] + 0.0010208961;
        DWORD2(v175) = 4;
        BYTE12(v175) = BYTE11(v185);
        BYTE13(v175) = BYTE10(v185) ^ 1;
        goto LABEL_198;
      case 4:
        Get_QZSS_Kep_Almanac((uint64_t)a8 + 44 * v105 + 10768, (uint64_t)&v175);
        __int16 v111 = *(_WORD *)(a5 + 8);
LABEL_198:
        uint64_t v25 = v157;
        int v114 = Kep_Check_Almanac(v111, (uint64_t)&v175);
        if (!ST_Check_Alm_Kep_Err((uint64_t)"ST_Update_Table", v114, (uint64_t)&v175)) {
          goto LABEL_9;
        }
        long long v189 = 0u;
        long long v190 = 0u;
        long long v187 = 0u;
        long long v188 = 0u;
        memset(&v186[32], 0, 48);
        long long v185 = 0u;
        *(_OWORD *)__int16 v186 = 0u;
        long long v191 = *(_OWORD *)&v176[48];
        *(void *)&long long v192 = *(void *)&v176[64];
        *((void *)&v192 + 1) = *(void *)&v176[32];
        *(void *)&long long v193 = *(void *)&v176[72];
        *((void *)&v193 + 1) = *(void *)&v176[24];
        uint64_t v194 = *(void *)&v176[40];
        *(_OWORD *)&v186[16] = *(_OWORD *)&v176[8];
        *(_DWORD *)&v186[8] = *(_DWORD *)&v176[4];
        *(_WORD *)&v186[2] = *(_WORD *)v176;
        *(void *)((char *)&v185 + 4) = *(void *)((char *)&v175 + 4);
        WORD6(v185) = WORD6(v175);
        if (ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v161, (uint64_t)&v185, 2))
        {
          *unint64_t v104 = 1;
          goto LABEL_9;
        }
        if (Get_Constell_Prn(v154) == 2) {
          __assert_rtn("ST_Update_Table", "GPS_State_Update.cpp", 939, "Get_Constell_Prn( (U1)j_NUM_PRN) != GLON_CONSTELL");
        }
        char v115 = (char *)a8 + v154;
        v115[38234] = 1;
        v115[37344] = 0;
        break;
      default:
        EvCrt_Illegal_Default("ST_Update_Table", 0x38Fu);
        goto LABEL_8;
    }
    goto LABEL_203;
  }
  uint64_t v112 = 0;
  uint64_t v151 = 0;
  uint64_t v153 = 0;
  switch(v19)
  {
    case 0:
      uint64_t v151 = 0;
      uint64_t v153 = 0;
      uint64_t v112 = (uint64_t)a8 + 108 * v105 + 104;
      break;
    case 1:
      break;
    case 2:
      uint64_t v112 = 0;
      uint64_t v151 = 0;
      uint64_t v153 = (uint64_t)&a8[11 * v105 + 2092];
      break;
    case 3:
      uint64_t v112 = 0;
      uint64_t v151 = (uint64_t)a8 + 100 * v105 + 24520;
      uint64_t v153 = 0;
      break;
    case 4:
      uint64_t v151 = 0;
      uint64_t v153 = 0;
      uint64_t v112 = (uint64_t)a8 + 108 * v105 + 8608;
      break;
    default:
      EvCrt_Illegal_Default("ST_Check_Duplicate_Eph", 0xA66u);
      uint64_t v112 = 0;
      uint64_t v151 = 0;
      uint64_t v153 = 0;
      break;
  }
  unsigned int v116 = 0;
  BOOL v117 = 1;
  while (1)
  {
    int v118 = Get_Constell_Pos(v116);
    int v119 = v118 - 1;
    if ((v118 - 1) > 6)
    {
      if (v116 == a1) {
        goto LABEL_232;
      }
      int v121 = 0;
      signed int v120 = v116;
    }
    else
    {
      if (v116 == a1) {
        goto LABEL_232;
      }
      signed int v120 = v116 - Num_Pos[v119];
      int v121 = Num_Prn[v119];
    }
    if (!*((unsigned char *)a8 + v121 + (uint64_t)v120 + 37344)) {
      goto LABEL_232;
    }
    if ((v18 & 0xFFFFFFFB) != 1) {
      goto LABEL_225;
    }
    if (v118 == 5) {
      break;
    }
    if (v118 == 1)
    {
      uint64_t v122 = (uint64_t)a8 + 108 * v120 + 104;
      goto LABEL_220;
    }
LABEL_225:
    if (v18 == 3 && v118 == 3)
    {
      if (Is_GAL_IntEph_Same(v153, (uint64_t)&a8[11 * v120 + 2092])) {
        goto LABEL_234;
      }
    }
    else if (v18 == 4 && v118 == 4 && Is_BDS_IntEph_Same(v151, (uint64_t)a8 + 100 * v120 + 24520))
    {
      goto LABEL_234;
    }
LABEL_232:
    BOOL v117 = v116++ < 0x94;
    if (v116 == 149) {
      goto LABEL_8;
    }
  }
  uint64_t v122 = (uint64_t)a8 + 108 * v120 + 8608;
LABEL_220:
  if (*(_DWORD *)(v112 + 8) != *(_DWORD *)(v122 + 8)) {
    goto LABEL_225;
  }
  uint64_t v123 = 3;
  while (v123 != 26)
  {
    int v124 = *(_DWORD *)(v112 + 4 * v123);
    int v125 = *(_DWORD *)(v122 + 4 * v123++);
    if (v124 != v125)
    {
      if ((unint64_t)(v123 - 4) > 0x16) {
        break;
      }
      goto LABEL_225;
    }
  }
LABEL_234:
  uint64_t v25 = v157;
  if (v117)
  {
    unsigned __int8 v126 = Num_Pos_Idx_To_GNSS_Id(a1);
    LOBYTE(v185) = v126;
    unsigned __int8 v127 = Num_Pos_Idx_To_GNSS_Id(v116);
    BYTE1(v185) = v127;
    if (ST_Get_SNR_Levels(a9, v18, (unsigned __int8 *)&v185, &v175))
    {
      if (BYTE1(v175) + 15 < v175
        || (unsigned __int8 v127 = v126, v175 + 15 < BYTE1(v175)))
      {
        int v128 = GNSS_SVId_Constell_To_Num_Pos_Idx(v127, v18);
        unsigned __int8 v129 = v128;
        int v130 = Num_Pos_Idx_To_Num_Prn_Idx(v128);
        if (Get_Constell_Prn(v130) == 2) {
          __assert_rtn("ST_Update_Table", "GPS_State_Update.cpp", 998, "Get_Constell_Prn( (U1)j_NUM_PRN) != GLON_CONSTELL");
        }
        int v154 = v130;
        unsigned __int16 v131 = (char *)a8 + v130;
        v131[38234] = 1;
        v131[37344] = 0;
        if (a1 == v129) {
LABEL_203:
        }
          *(_DWORD *)(a5 + 12) = 0;
      }
    }
  }
LABEL_9:
  int v26 = *(_DWORD *)(a5 + 12);
  if ((v26 - 1) <= 1)
  {
    int v27 = v156;
    if (v26 == 1) {
      int v27 = v155;
    }
    int v28 = -v27;
    *long long v21 = v28;
    int v29 = *(_DWORD *)(a5 + 4) - (__int16)v28;
    if (v29 <= 604799) {
      int v30 = v29;
    }
    else {
      int v30 = v29 - 604800;
    }
    if (v29 <= 604799) {
      __int16 v31 = *(_WORD *)(a5 + 8);
    }
    else {
      __int16 v31 = *(_WORD *)(a5 + 8) + 1;
    }
    if (DWORD2(v161) == 4 && v26 == 1 && BYTE12(v161) <= 5u) {
      Kep_Calc_SV_Ref_State_BDS_GEO(1, v31, v30, (uint64_t)&v161, v25);
    }
    else {
      Kep_Calc_SV_Ref_State(v26, v31, v30, (uint64_t)&v161, v25);
    }
    if (*(_DWORD *)(a5 + 12) == 1)
    {
      if (*((unsigned char *)a8 + v154 + 38768)) {
        *(_WORD *)(v25 + 166) += 1000;
      }
    }
  }
}

void GPS_State_Update(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  if (!ST_Get_Time(a3, (__int16 *)(a2 + 8), (_DWORD *)(a2 + 4))) {
    return;
  }
  *(_DWORD *)a2 = 0;
  if (!*(unsigned char *)(a1 + 306)) {
    goto LABEL_7;
  }
  int v14 = *(_DWORD *)(a2 + 4);
  int v15 = v14 - *(_DWORD *)a1;
  *(_DWORD *)a2 = v15;
  int v16 = *(unsigned __int16 *)(a2 + 8);
  if (v16 != *(unsigned __int16 *)(a1 + 4))
  {
    if (*(__int16 *)(a1 + 4) + 1 != (__int16)v16)
    {
LABEL_7:
      GPS_State_Update_Init(a1, a2, a3, a4, a6, a7, a8);
      return;
    }
    v15 += 604800;
    *(_DWORD *)a2 = v15;
  }
  if ((v15 - 101) < 0xFFFFFF91) {
    goto LABEL_7;
  }
  uint64_t v17 = 0;
  *(_WORD *)(a1 + 4) = v16;
  int v18 = (_DWORD *)(a8 + 184);
  *(_DWORD *)a1 = v14;
  do
  {
    if (*((unsigned char *)a4 + v17 + 39303) && *v18)
    {
      int v19 = Num_Pos_Idx_To_Num_Prn_Idx(v17);
      if ((*((unsigned char *)a4 + v19 + 37344) || *((unsigned char *)a4 + v19 + 37522) || *((unsigned char *)a4 + v19 + 37700))
        && *((unsigned char *)a4 + v19 + 33605)
        && !*(unsigned char *)(a6 + v19 + 253))
      {
        uint64_t v20 = a1 + 2 * v17;
        int v21 = (__int16)(*(_WORD *)(v20 + 6) + *(_WORD *)a2);
        *(_WORD *)(v20 + 6) += *(_WORD *)a2;
        if (v21 > 450) {
          goto LABEL_7;
        }
      }
      else
      {
        *int v18 = 0;
        *(_WORD *)(a1 + 2 * v17 + 6) = 0;
      }
    }
    ++v17;
    v18 += 48;
  }
  while (v17 != 149);
  uint64_t v22 = 0;
  unsigned __int8 v23 = 0;
  char v24 = (int *)(a8 + 184);
  memset(v97, 0, 149);
  do
  {
    *((unsigned char *)v97 + v22) = 0;
    if (!*((unsigned char *)a4 + v22 + 39303)) {
      goto LABEL_43;
    }
    unsigned int v25 = Get_Constell_Pos(v22) - 1;
    if (v25 >= 7)
    {
      int v27 = 0;
      int v26 = v22;
    }
    else
    {
      int v26 = v22 - Num_Pos[v25];
      int v27 = Num_Prn[v25];
    }
    uint64_t v28 = (v27 + v26);
    int v29 = *v24;
    if (*v24 == 1)
    {
      int v30 = *(char *)(a5 + v28);
      int v31 = *(__int16 *)(a1 + 2 * v22 + 6);
      if (v30 < -2)
      {
        if (v31 <= 60) {
          goto LABEL_43;
        }
LABEL_42:
        *((unsigned char *)v97 + v22) = 1;
        ++v23;
        goto LABEL_43;
      }
      if (v31 > 5) {
        goto LABEL_42;
      }
    }
    else if (v29 && *(__int16 *)(a1 + 2 * v22 + 6) > 60 {
           || (*((unsigned char *)a4 + v28 + 37344) || *((unsigned char *)a4 + v28 + 37522))
    }
           && *((unsigned char *)a4 + v28 + 33605)
           && !*(unsigned char *)(a6 + v28 + 253)
           || !v29 && *((unsigned char *)a4 + v28 + 37700) && *((unsigned char *)a4 + v28 + 33605) && !*(unsigned char *)(a6 + v28 + 253))
    {
      goto LABEL_42;
    }
LABEL_43:
    ++v22;
    v24 += 48;
  }
  while (v22 != 149);
  if (v23 == 1) {
    goto LABEL_100;
  }
  if (v23)
  {
    EvLog_d("SV_State_Update: Immediate Updates = ", v23);
LABEL_100:
    unsigned int v64 = 0;
    do
    {
      uint64_t v65 = v64;
      if (*((unsigned char *)v97 + v64))
      {
        *(_DWORD *)&v96[24] = 0;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        memset(v96, 0, 21);
        ST_Update_Table(v64, 15, 60, (uint64_t)&v86, a2, a1, a6, a4, a7);
        if (*(_DWORD *)(a2 + 12))
        {
          *(unsigned char *)(a1 + 306) = 1;
        }
        else
        {
          *(_DWORD *)&v96[24] = 0;
          *(_WORD *)(a1 + 2 * v65 + 6) = 0;
        }
        long long v66 = v95;
        uint64_t v67 = (_OWORD *)(a8 + 192 * v65);
        v67[8] = v94;
        v67[9] = v66;
        long long v68 = *(_OWORD *)&v96[16];
        v67[10] = *(_OWORD *)v96;
        v67[11] = v68;
        long long v69 = v91;
        v67[4] = v90;
        v67[5] = v69;
        long long v70 = v93;
        v67[6] = v92;
        v67[7] = v70;
        long long v71 = v87;
        *uint64_t v67 = v86;
        v67[1] = v71;
        long long v72 = v89;
        --v23;
        v67[2] = v88;
        v67[3] = v72;
      }
      unsigned int v64 = v65 + 1;
    }
    while (v23);
    goto LABEL_107;
  }
  uint64_t v32 = 0;
  char v33 = 0;
  uint64_t v77 = a1 + 6;
  long long v34 = (char *)a4 + 39303;
  uint64_t v35 = a8 + 184;
  int v81 = *(unsigned __int8 *)(a5 + 534);
  unsigned int v82 = 15;
  int v78 = 90;
  __int16 v75 = 5;
  unsigned __int16 v76 = 20;
  int v36 = -1;
  while (2)
  {
    uint64_t v37 = 0;
    long long v83 = &v34[v32];
    unint64_t v38 = (int *)(v35 + 192 * v32);
    int v39 = v32;
    int v80 = v36;
LABEL_48:
    int Constell_Pos = Get_Constell_Pos((v33 + v37));
    int v42 = *v38;
    v38 += 48;
    int v41 = v42;
    if (v42 && v83[v37])
    {
      if (v81)
      {
        int v43 = Constell_Pos - 1;
        if ((Constell_Pos - 1) >= 7)
        {
          int v45 = 0;
          int v44 = v39;
          int v36 = v39;
        }
        else
        {
          int v36 = v32 + v37;
          int v44 = v32 + v37 - Num_Pos[v43];
          int v45 = Num_Prn[v43];
        }
        int v46 = *(char *)(a5 + v45 + v44);
        if (v46 > -3 || v46 == -99) {
          goto LABEL_57;
        }
      }
      else
      {
        int v36 = v32 + v37;
LABEL_57:
        uint64_t v79 = v77 + 2 * v32;
        int v47 = *(__int16 *)(v79 + 2 * v37);
        if (v47 >= 0) {
          int v48 = *(__int16 *)(v79 + 2 * v37);
        }
        else {
          int v48 = -v47;
        }
        if (v41 == 1)
        {
          if ((unsigned __int16)v48 <= v76)
          {
            if (v82 >= 8 && v47 > v75)
            {
              uint64_t v56 = v32 + v37;
              v32 += v37 + 1;
              v33 += v37 + 1;
              unsigned int v82 = 8;
              __int16 v75 = *(_WORD *)(v79 + 2 * v37);
              BOOL v57 = v56 == 148;
              uint64_t v35 = a8 + 184;
              long long v34 = (char *)a4 + 39303;
              if (!v57) {
                continue;
              }
              goto LABEL_90;
            }
          }
          else
          {
            unsigned int v82 = 5;
            unsigned __int16 v76 = v48;
            int v80 = v36;
          }
        }
        else if (v41 == 2)
        {
          int v49 = v78;
          BOOL v50 = (unsigned __int16)v48 > (unsigned __int16)v78;
          unsigned int v51 = v82;
          if ((unsigned __int16)v48 > (unsigned __int16)v78) {
            int v52 = 6;
          }
          else {
            int v52 = v82;
          }
          if ((unsigned __int16)v48 > (unsigned __int16)v78) {
            int v53 = v48;
          }
          else {
            int v53 = v78;
          }
          int v54 = v80;
          if (!v50) {
            int v36 = v80;
          }
          BOOL v55 = v82 >= 6;
          if (v82 >= 6) {
            unsigned int v51 = v52;
          }
          unsigned int v82 = v51;
          if (v55) {
            int v49 = v53;
          }
          int v78 = v49;
          if (v55) {
            int v54 = v36;
          }
          int v80 = v54;
        }
      }
    }
    break;
  }
  ++v39;
  ++v37;
  if (v32 + v37 != 149) {
    goto LABEL_48;
  }
  unsigned int v58 = v80;
  int v36 = v80;
  long long v34 = (char *)a4 + 39303;
  if (v82 < 8) {
    goto LABEL_98;
  }
LABEL_90:
  uint64_t v59 = 0;
  unint64_t v60 = (int *)(a8 + 184);
  unsigned __int16 v61 = 90;
  unsigned int v58 = v36;
  do
  {
    int v62 = *v60;
    v60 += 48;
    if (v62 && v34[v59])
    {
      int v63 = *(__int16 *)(v77 + 2 * v59);
      if (v63 < 0) {
        int v63 = -v63;
      }
      if ((unsigned __int16)v63 > v61)
      {
        unsigned __int16 v61 = v63;
        unsigned int v58 = v59;
      }
    }
    ++v59;
  }
  while (v59 != 149);
LABEL_98:
  if ((v58 & 0x80000000) == 0)
  {
    unsigned __int8 v23 = 1;
    *((unsigned char *)v97 + v58) = 1;
    goto LABEL_100;
  }
LABEL_107:
  uint64_t v73 = 0;
  *(unsigned char *)(a1 + 306) = 0;
  for (uint64_t i = (_DWORD *)(a8 + 184); !*((unsigned char *)a4 + v73 + 39303) || !*i; i += 48)
  {
    if (++v73 == 149) {
      return;
    }
  }
  *(unsigned char *)(a1 + 306) = 1;
}

uint64_t ST_Cross_Check_SVRS_vs_SVRS(uint64_t a1, uint64_t a2)
{
  double v2 = 0.0;
  uint64_t v3 = 2;
  do
  {
    double v2 = v2 + *(double *)(a1 + 8 * v3) * *(double *)(a1 + 8 * v3);
    unint64_t v4 = v3-- + 1;
  }
  while (v4 > 1);
  double v5 = (*(double *)(a1 + 104) - *(double *)(a2 + 104)) * 2.99792458e11;
  double v6 = 0.0;
  uint64_t v7 = 2;
  do
  {
    double v6 = v6 + *(double *)(a2 + 8 * v7) * *(double *)(a2 + 8 * v7);
    unint64_t v8 = v7-- + 1;
  }
  while (v8 > 1);
  double v9 = (*(double *)(a1 + 96) - *(double *)(a2 + 96)) * 299792458.0;
  double v10 = 0.0;
  uint64_t v11 = 2;
  double v12 = sqrt(v6);
  do
  {
    double v13 = *(double *)(a1 + 8 * v11) - *(double *)(a2 + 8 * v11);
    double v10 = v10 + v13 * v13;
    unint64_t v14 = v11-- + 1;
  }
  while (v14 > 1);
  double v15 = sqrt(v2) - v12;
  double v16 = 0.0;
  uint64_t v17 = 5;
  do
  {
    double v18 = *(double *)(a1 + 8 * v17) - *(double *)(a2 + 8 * v17);
    double v16 = v16 + v18 * v18;
    unint64_t v19 = v17 - 2;
    --v17;
  }
  while (v19 > 1);
  double v20 = sqrt(v10);
  double v21 = sqrt(v16) * 1000.0;
  double v22 = *(double *)(a1 + 112);
  double v23 = *(double *)(a2 + 112);
  double v24 = sqrt(v22 + v23) * 5.0;
  BOOL v25 = fabs(v9) > v24;
  if (fabs(v5) > v24 * 0.05) {
    BOOL v25 = 1;
  }
  if (fabs(v15) > v24) {
    BOOL v25 = 1;
  }
  if (v20 > v24 * 10.0) {
    BOOL v25 = 1;
  }
  int v26 = v21 > v24 * 5.0 || v25;
  if (v26 == 1)
  {
    uint64_t v27 = *(int *)(a1 + 184);
    if (v27 > 2) {
      uint64_t v28 = 120;
    }
    else {
      uint64_t v28 = *(unsigned int *)&asc_22BB409B0[4 * v27];
    }
    uint64_t v31 = *(int *)(a2 + 184);
    if (v31 > 2) {
      uint64_t v32 = 120;
    }
    else {
      uint64_t v32 = *(unsigned int *)&asc_22BB409B0[4 * v31];
    }
    uint64_t v33 = *(int *)(a1 + 176);
    if (v33 > 6) {
      uint64_t v34 = 42;
    }
    else {
      uint64_t v34 = *(unsigned int *)&aX_1[4 * v33];
    }
    EvCrt_v("ST_Cross_Check_SVRS:  %c vs %c  FAIL:  T %d  SV %c %d %d %d  BR %f %f %f  D %f %f  P %f %f  V %f %f  var %f %f", v28, v32, *(_DWORD *)(a1 + 160), v34, *(unsigned __int8 *)(a1 + 180), *(unsigned __int16 *)(a1 + 166), *(unsigned __int16 *)(a2 + 166), v9, v15, v24, v5, v24 * 0.05, v20, v24 * 10.0, v21, v24 * 5.0, sqrt(v22), sqrt(v23));
  }
  else if ((unsigned __int16)g_Enable_Event_Log >= 4u)
  {
    uint64_t v29 = *(int *)(a1 + 184);
    if (v29 > 2) {
      uint64_t v30 = 120;
    }
    else {
      uint64_t v30 = *(unsigned int *)&asc_22BB409B0[4 * v29];
    }
    uint64_t v35 = *(int *)(a2 + 184);
    if (v35 > 2) {
      uint64_t v36 = 120;
    }
    else {
      uint64_t v36 = *(unsigned int *)&asc_22BB409B0[4 * v35];
    }
    uint64_t v37 = *(int *)(a1 + 176);
    if (v37 > 6) {
      uint64_t v38 = 42;
    }
    else {
      uint64_t v38 = *(unsigned int *)&aX_1[4 * v37];
    }
    EvLog_v("ST_Cross_Check_SVRS:  %c vs %c  PASS:  T %d  SV %c %d %d %d  BR %f %f %f  D %f %f  P %f %f  V %f %f  var %f %f", v30, v36, *(_DWORD *)(a1 + 160), v38, *(unsigned __int8 *)(a1 + 180), *(unsigned __int16 *)(a1 + 166), *(unsigned __int16 *)(a2 + 166), v9, v15, v24, v5, v24 * 0.05, v20, v24 * 10.0, v21, v24 * 5.0, sqrt(v22), sqrt(v23));
  }
  return v26 ^ 1u;
}

BOOL ST_Check_Alm_Kep_Err(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    for (int i = 1; (i & a2) == 0; i *= 2)
    {
LABEL_23:
      if (i >= 0x8000) {
        return a2 == 0;
      }
    }
    if (i <= 15)
    {
      switch(i)
      {
        case 1:
          double v6 = (double)*(int *)(a3 + 20);
          break;
        case 2:
          double v6 = (double)*(int *)(a3 + 20);
          break;
        case 4:
          double v6 = *(double *)(a3 + 72);
          break;
        case 8:
          double v6 = *(double *)(a3 + 72);
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_20;
    }
    if (i > 63)
    {
      if (i == 64)
      {
        double v6 = *(double *)(a3 + 56);
        goto LABEL_20;
      }
      if (i == 128)
      {
        double v6 = *(double *)(a3 + 56);
        goto LABEL_20;
      }
    }
    else
    {
      if (i == 16)
      {
        double v6 = *(double *)(a3 + 40);
        goto LABEL_20;
      }
      if (i == 32)
      {
        double v6 = *(double *)(a3 + 40);
        goto LABEL_20;
      }
    }
LABEL_19:
    EvCrt_Illegal_Default("ST_Check_Alm_Kep_Err", 0xAD7u);
    double v6 = 0.0;
LABEL_20:
    if (fabs(v6) >= 0.000001) {
      EvLog_v("%s:  Kep Almanac Error:  Rejected:  SV %c %d  Too %s = %g");
    }
    else {
      EvLog_v("%s:  Kep Almanac Error:  Rejected:  SV %c %d  Too %s = %e");
    }
    goto LABEL_23;
  }
  return a2 == 0;
}

BOOL ST_Check_Eph_Kep_Err(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    for (int i = 1; (i & a2) == 0; i *= 2)
    {
LABEL_31:
      if (i >= 0x8000) {
        return a2 == 0;
      }
    }
    if (i <= 63)
    {
      switch(i)
      {
        case 1:
          double v6 = (double)*(int *)(a3 + 20);
          goto LABEL_28;
        case 2:
          double v6 = (double)*(int *)(a3 + 20);
          goto LABEL_28;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_19;
        case 4:
          double v6 = (double)*(int *)(a3 + 20);
          goto LABEL_28;
        case 8:
          double v6 = (double)*(int *)(a3 + 20);
          goto LABEL_28;
        default:
          if (i == 16)
          {
            double v6 = (double)*(int *)(a3 + 24);
          }
          else
          {
            if (i != 32) {
              goto LABEL_19;
            }
            double v6 = (double)*(int *)(a3 + 24);
          }
          break;
      }
      goto LABEL_28;
    }
    if (i > 511)
    {
      switch(i)
      {
        case 512:
          double v6 = *(double *)(a3 + 200);
          break;
        case 1024:
          double v6 = *(double *)(a3 + 208);
          break;
        case 2048:
          double v6 = *(double *)(a3 + 208);
          break;
        default:
          goto LABEL_19;
      }
    }
    else
    {
      switch(i)
      {
        case 64:
          double v6 = *(double *)(a3 + 168);
          break;
        case 128:
          double v6 = *(double *)(a3 + 168);
          break;
        case 256:
          double v6 = *(double *)(a3 + 200);
          break;
        default:
LABEL_19:
          EvCrt_Illegal_Default("ST_Check_Eph_Kep_Err", 0xB1Du);
          double v6 = 0.0;
          break;
      }
    }
LABEL_28:
    if (fabs(v6) >= 0.000001) {
      EvLog_v("%s:  Kep Ephemeris Error:  Rejected:  SV %c %d  Too %s = %g");
    }
    else {
      EvLog_v("%s:  Kep Ephemeris Error:  Rejected:  SV %c %d  Too %s = %e");
    }
    goto LABEL_31;
  }
  return a2 == 0;
}

uint64_t ST_Cross_Check_Eph_Kep_vs_Eph_Kep(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v14 = 0;
  memset(v13, 0, sizeof(v13));
  if (*(_DWORD *)(a3 + 8) == 4 && *(unsigned __int8 *)(a3 + 12) <= 5u) {
    Kep_Calc_SV_Ref_State_BDS_GEO(1, a1, a2, a3, (uint64_t)v13);
  }
  else {
    Kep_Calc_SV_Ref_State(1, a1, a2, a3, (uint64_t)v13);
  }
  int v12 = 0;
  memset(v11, 0, sizeof(v11));
  if (*(_DWORD *)(a3 + 8) == 4 && a5 == 1 && *(unsigned __int8 *)(a3 + 12) <= 5u) {
    Kep_Calc_SV_Ref_State_BDS_GEO(1, a1, a2, a4, (uint64_t)v11);
  }
  else {
    Kep_Calc_SV_Ref_State(a5, a1, a2, a4, (uint64_t)v11);
  }
  return ST_Cross_Check_SVRS_vs_SVRS((uint64_t)v13, (uint64_t)v11);
}

uint64_t ST_Get_SNR_Levels(uint64_t a1, int a2, unsigned __int8 *a3, _WORD *a4)
{
  int v4 = 0;
  int v5 = 0;
  int v6 = *(_DWORD *)(a1 + 32);
  *a4 = 0;
  uint64_t v7 = (int *)(a1 + 1160);
  for (uint64_t i = 1352; i != 1400; ++i)
  {
    if (*((unsigned __int8 *)v7 - 192) != a2) {
      goto LABEL_10;
    }
    int v9 = *((unsigned __int8 *)v7 - 190);
    if (v9 == *a3 && *v7 > 3)
    {
      int v4 = 1;
      double v10 = a4;
LABEL_9:
      *double v10 = *(unsigned char *)(a1 + i);
      goto LABEL_10;
    }
    if (v9 == a3[1] && *v7 >= 4)
    {
      int v5 = 1;
      double v10 = (char *)a4 + 1;
      goto LABEL_9;
    }
LABEL_10:
    ++v7;
  }
  return (v6 == *(_DWORD *)(a1 + 32)) & v4 & v5;
}

uint64_t GM_Get_Best_SyncSV(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *a6 = -1;
  *a7 = -1;
  memset(v38, 0, sizeof(v38));
  memset(v36, 0, sizeof(v36));
  *(void *)&long long v10 = -1;
  *((void *)&v10 + 1) = -1;
  v37[0] = v10;
  v37[1] = v10;
  v37[2] = v10;
  v37[3] = v10;
  void v37[4] = v10;
  v37[5] = v10;
  memset(v35, 0, sizeof(v35));
  if (a5)
  {
    for (uint64_t i = 0; i != a5; ++i)
    {
      int v12 = *(_DWORD *)(a2 + 36 * i);
      if (Is_Legal(v12)
        && (~*(unsigned __int16 *)(a2 + 36 * i + 8) & 0x208) == 0
        && *(unsigned char *)(a3 + 48 * i + 4)
        && *(unsigned char *)(a3 + 48 * i + 15))
      {
        uint64_t v13 = a3 + 48 * i;
        int v14 = *(_DWORD *)(a1 + 56 * i);
        int v15 = *(_DWORD *)(v13 + 28);
        if (v12 == 2)
        {
          v15 %= 57600;
          v14 %= 57600;
        }
        uint64_t v16 = 0;
        int v17 = *(_DWORD *)(a1 + 56 * i + 4) - *(_DWORD *)(v13 + 32) + 1534500 * (v14 - v15);
        if (v17 < 0) {
          int v18 = -511;
        }
        else {
          int v18 = 511;
        }
        int v19 = (v18 + v17) / 1023;
        *((unsigned char *)v35 + i) = 1;
        *((_WORD *)v36 + i) = v19;
        while (*((unsigned __int16 *)v38 + v16) != (unsigned __int16)v19)
        {
          if (++v16 == 48) {
            goto LABEL_18;
          }
        }
        if (v16 < 0x30)
        {
          int v20 = *((unsigned __int16 *)v37 + v16);
          if (v20 != 0xFFFF)
          {
            __int16 v21 = v20 + 1;
            goto LABEL_25;
          }
        }
LABEL_18:
        uint64_t v16 = 0;
        while (*((__int16 *)v37 + v16) != -1)
        {
          if (++v16 == 48) {
            goto LABEL_26;
          }
        }
        if (v16 <= 0x2F)
        {
          *((_WORD *)v38 + v16) = v19;
          __int16 v21 = 1;
LABEL_25:
          *((_WORD *)v37 + v16) = v21;
        }
      }
LABEL_26:
      ;
    }
  }
  uint64_t v22 = 0;
  LODWORD(v23) = 0;
  __int16 v24 = 0x8000;
  do
  {
    if (*((__int16 *)v37 + v22) <= v24)
    {
      uint64_t v23 = v23;
    }
    else
    {
      __int16 v24 = *((_WORD *)v37 + v22);
      uint64_t v23 = v22;
    }
    ++v22;
  }
  while (v22 != 48);
  if (a5 && v24 >= 1 && v23 <= 0x2F)
  {
    uint64_t v25 = 0;
    int v26 = (_WORD *)(a2 + 8);
    while (1)
    {
      if (*a6 != -1
        || *a7 != -1
        || !*((unsigned char *)v35 + v25)
        || *((unsigned __int16 *)v36 + v25) != *((unsigned __int16 *)v38 + v23))
      {
        goto LABEL_38;
      }
      int v27 = *v26 & 0x300;
      uint64_t v28 = a6;
      if (v27 == 768) {
        goto LABEL_45;
      }
      if (v27 == 512) {
        break;
      }
LABEL_38:
      ++v25;
      v26 += 18;
      if (a5 == v25) {
        goto LABEL_46;
      }
    }
    uint64_t v28 = a7;
LABEL_45:
    _DWORD *v28 = v25;
    goto LABEL_38;
  }
LABEL_46:
  uint64_t result = *a6;
  if (result != -1 || (uint64_t result = GM_Get_Best_SSS(a2, a3, a4, a5), *a6 = result, result != -1))
  {
    if (*(unsigned char *)(a3 + 48 * (int)result + 4)) {
      goto LABEL_49;
    }
  }
  int Best_ASSS = *a7;
  if (*a7 == -1)
  {
    int Best_ASSS = GM_Get_Best_ASSS(a2, a3, a4, a5);
    *a7 = Best_ASSS;
    uint64_t result = *a6;
  }
  if (Best_ASSS < 0 && (result & 0x80000000) == 0)
  {
    *a7 = result;
    int Best_ASSS = result;
    uint64_t result = *a6;
  }
  if (result != -1
    && !*(unsigned char *)(a3 + 48 * (int)result + 4)
    && Best_ASSS != result
    && !*(unsigned char *)(a3 + 48 * Best_ASSS + 4))
  {
LABEL_49:
    *a7 = result;
  }
  return result;
}

uint64_t Init_DB_Time_Sync_NV(int *a1, int *a2, _DWORD *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v44 = 0;
  __int16 v43 = 0;
  double v41 = 0.0;
  double v42 = 0.0;
  __int16 v40 = 0;
  double v38 = 0.0;
  *(_DWORD *)uint64_t v36 = 0;
  *(_DWORD *)uint64_t v37 = 0;
  *(_DWORD *)uint64_t v34 = 0;
  *(_DWORD *)uint64_t v35 = 0;
  unsigned __int16 v33 = 0;
  int v5 = *a1;
  unsigned int v6 = a1[4];
  if (Core_Load_ApxTime(v6, &v43, &v42, &v44))
  {
    int v7 = v44;
    a2[22] = v44;
    int v8 = v43;
    *((_WORD *)a2 + 46) = -v43;
    double v9 = v42;
    a2[24] = (int)(v42 * 1000.0);
    if (v8 >= 1025 && v7 > *a2)
    {
      *a2 = v7;
      *((unsigned char *)a2 + 5) = 1;
      *((double *)a2 + 3) = v9;
      *((_WORD *)a2 + 8) = v8;
      EvLog_v("Init_DBts_NV: ApxG %u %d %g %d", v6, (unsigned __int16)v8, v9, v7);
      unsigned int v10 = *a2;
      if ((*a2 - 4) <= 4)
      {
        double v11 = *((double *)a2 + 3) * 1000.0;
        double v12 = -0.5;
        if (v11 > 0.0) {
          double v12 = 0.5;
        }
        double v13 = v11 + v12;
        if (v13 <= 2147483650.0)
        {
          if (v13 >= -2147483650.0) {
            int v14 = (int)v13;
          }
          else {
            int v14 = 0x80000000;
          }
        }
        else
        {
          int v14 = 0x7FFFFFFF;
        }
        int v15 = a2[2];
        int v16 = a2[3];
        int v17 = v14 - v15;
        LODWORD(v26) = 0;
        LOBYTE(v39) = 0;
        if (Core_Load_TTick_Cal(v15, v16, v14 - v15, (unsigned int *)&v26, (unsigned __int8 *)&v39))
        {
          int v18 = LOBYTE(v39);
          int v19 = LOBYTE(v39) >= 0x5Au ? 6 : 7;
          unsigned int v20 = LOBYTE(v39) >= 0x1Eu ? v19 : 8;
          if (v20 >= v10)
          {
            int v21 = LODWORD(v26);
            Inc_GPS_TOW((double)SLODWORD(v26) * 0.001, (double *)a2 + 3, (__int16 *)a2 + 8);
            *a2 = v20;
            EvLog_v("Init_DBts_NV: Calib %d %g %d %d", v21, *((double *)a2 + 3), v17, v18);
          }
        }
      }
      LODWORD(v39) = 0;
      int v32 = 0;
      double v26 = 0.0;
      API_Get_UTC_Cor(1, &v26);
      GPS_To_Glon_Time(0, *((__int16 *)a2 + 8), *((double *)a2 + 3), v26, &v32, (int *)&v39, (double *)a2 + 9);
      __int16 v22 = LOWORD(v39);
      *((_WORD *)a2 + 34) = LOWORD(v39);
      __int16 v23 = v32;
      *((_WORD *)a2 + 33) = v32;
      *((unsigned char *)a2 + 64) = 1;
      int v24 = *a2;
      a2[15] = *a2;
      EvLog_v("Init_DBts_NV: Glon %d %d %g %d", v23, v22, *((double *)a2 + 9), v24);
      *((_WORD *)a2 + 46) = -*((_WORD *)a2 + 46);
    }
  }
  double v39 = 0.0;
  *a3 = v5;
  a3[1] = v6;
  if (Core_Get_Ref_Time(v6, &v41, &v40, &v39)) {
    return API_Set_Ref_Time(v6, v41, v40, v39);
  }
  if (Core_Get_Glon_Ref_Time(v6, (unsigned __int16 *)v37, &v37[1], &v38, &v39)) {
    return API_Set_Ref_Glon_Time(v6, v37[0], v37[1], v38, v39);
  }
  uint64_t result = Core_Get_UTC_Ref_Time(v6, &v36[1], v36, &v35[1], v35, &v34[1], v34, &v33, &v39);
  if (result)
  {
    LOWORD(v26) = v36[1];
    WORD1(v26) = v36[0];
    WORD2(v26) = v35[1];
    HIWORD(v26) = v35[0];
    unsigned __int16 v27 = v34[1];
    unsigned __int16 v28 = v34[0];
    unsigned __int16 v29 = v33;
    unsigned int v30 = (v39 * 1000.0);
    unsigned int v31 = v6;
    return API_Set_Ref_UTC_Time((unsigned __int16 *)&v26);
  }
  return result;
}

void NK_Crude_Apx_Pos(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  double v9 = (unsigned __int8 *)(a3 + 27088);
  uint64_t v10 = mach_continuous_time();
  double v11 = *(double *)&g_MacClockTicksToMsRelation;
  *((_DWORD *)v9 + 5) = 0;
  *((_DWORD *)v9 + 6) = 0;
  *(void *)(v9 + 1) = 0;
  *(void *)(v9 + 9) = 0;
  int v12 = *v9;
  bzero(v102, 0x240uLL);
  memset(v100, 0, sizeof(v100));
  if (a4[3] > 2)
  {
    int v75 = v12;
    uint64_t v77 = v9;
    uint64_t v72 = a5;
    uint64_t v73 = a4 + 5748;
    unint64_t v74 = (unint64_t)(v11 * (double)v10);
    if (*(unsigned char *)(a3 + 232) && (int)*((double *)a4 + 3) + 604800 * *((__int16 *)a4 + 9) - *(_DWORD *)(a3 + 264) > 60
      || !*(unsigned char *)(a3 + 8272)
      || !*(unsigned char *)(a3 + 8273))
    {
      *(unsigned char *)(a3 + 232) = 0;
    }
    uint64_t v76 = a3;
    int v79 = 0;
    int v78 = 0;
    int v13 = 3;
    memset(v103, 0, 48);
    do
    {
      uint64_t v14 = 0;
      int v15 = v13;
      do
      {
        uint64_t v16 = a1 + 4 * v14;
        int v19 = *(_DWORD *)(v16 + 76);
        int v17 = (_DWORD *)(v16 + 76);
        int v18 = v19;
        if (Is_Legal(v19))
        {
          if (*(int *)(a1 + 4 * v14 + 412) >= 10 && *(unsigned __int8 *)(a1 + v14 + 268) >= 0x40u)
          {
            unsigned int v20 = *(unsigned char *)(a1 + 2 * v14 + 317) & 3;
            if (v15 == v20)
            {
              *(_DWORD *)&v98[24] = 0;
              long long v88 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v93 = 0u;
              long long v94 = 0u;
              long long v95 = 0u;
              long long v96 = 0u;
              long long v97 = 0u;
              memset(v98, 0, 21);
              int v86 = 0;
              char v87 = 0;
              memset(v81, 0, sizeof(v81));
              long long v82 = 0u;
              long long v83 = 0u;
              long long v84 = 0u;
              memset(v85, 0, 30);
              if (v18 != 6)
              {
                unsigned int v21 = GNSS_Id_To_Num_Pos_Idx(v18);
                if (v21 <= 0x94)
                {
                  __int16 v22 = (long long *)(a2 + 192 * v21);
                  long long v23 = v22[9];
                  long long v96 = v22[8];
                  long long v97 = v23;
                  long long v24 = v22[11];
                  *(_OWORD *)uint64_t v98 = v22[10];
                  *(_OWORD *)&v98[16] = v24;
                  long long v25 = v22[5];
                  long long v92 = v22[4];
                  long long v93 = v25;
                  long long v26 = v22[7];
                  long long v94 = v22[6];
                  long long v95 = v26;
                  long long v27 = v22[1];
                  long long v88 = *v22;
                  long long v89 = v27;
                  long long v28 = v22[3];
                  long long v90 = v22[2];
                  long long v91 = v28;
                  if ((*(_DWORD *)&v98[24] - 1) <= 1)
                  {
                    uint64_t v29 = a1 + 8 * v14;
                    double v30 = *(double *)(v29 + 1232);
                    if (v30 < 329771.704)
                    {
                      switch(*v17)
                      {
                        case 2u:
                          unsigned int v31 = 73;
                          break;
                        case 3u:
                          unsigned int v31 = 87;
                          break;
                        case 4u:
                          if ((*v17 & 0xFF0000u) <= 0xA0000) {
                            unsigned int v31 = 129;
                          }
                          else {
                            unsigned int v31 = 81;
                          }
                          break;
                        case 5u:
                        case 6u:
                          unsigned int v31 = 129;
                          break;
                        default:
                          unsigned int v31 = 77;
                          break;
                      }
                      double v30 = v30 + (double)v31 * 299792.458;
                    }
                    if (Comp_CurrState(0x258u, *((__int16 *)a4 + 9), (uint64_t)&v88, (uint64_t)v81, *((double *)a4 + 3), v30))
                    {
                      uint64_t v32 = 0;
                      *((unsigned char *)v103 + v79) = v20;
                      v99[v79] = DWORD2(v85[1]);
                      do
                      {
                        unsigned __int16 v33 = (double *)v81 + v32;
                        double v34 = v33[3];
                        if (v34 <= 0.0) {
                          double v35 = -0.5;
                        }
                        else {
                          double v35 = 0.5;
                        }
                        double v36 = v34 + v35;
                        int v37 = (int)v36;
                        if (v36 < -2147483650.0) {
                          int v37 = 0x80000000;
                        }
                        if (v36 > 2147483650.0) {
                          int v37 = 0x7FFFFFFF;
                        }
                        *(_DWORD *)&v102[12 * v79 + 8 + 4 * v32] = v37;
                        double v38 = v33[6] * 5.25503547;
                        if (v38 <= 0.0) {
                          double v39 = -0.5;
                        }
                        else {
                          double v39 = 0.5;
                        }
                        double v40 = v38 + v39;
                        if (v40 <= 2147483650.0)
                        {
                          if (v40 >= -2147483650.0) {
                            int v41 = (int)v40;
                          }
                          else {
                            LOWORD(v41) = 0;
                          }
                        }
                        else
                        {
                          LOWORD(v41) = -1;
                        }
                        *(_WORD *)&v101[6 * v79 + 4 + 2 * v32--] = v41;
                      }
                      while (v32 != -3);
                      *((unsigned char *)v100 + v79) = *(unsigned char *)v17;
                      double v42 = *(double *)(v29 + 1232);
                      if (v20 <= 1)
                      {
                        switch(*v17)
                        {
                          case 2u:
                            int v43 = 73;
                            break;
                          case 3u:
                            int v43 = 87;
                            break;
                          case 4u:
                            if ((*v17 & 0xFF0000u) <= 0xA0000) {
                              int v43 = 129;
                            }
                            else {
                              int v43 = 81;
                            }
                            break;
                          case 5u:
                          case 6u:
                            int v43 = 129;
                            break;
                          default:
                            int v43 = 77;
                            break;
                        }
                        double v42 = v42 + (double)(v43 - (int)(v42 * 0.00000333564095)) * 299792.458;
                      }
                      double v44 = *(double *)&v83;
                      double v45 = v42 + *((double *)&v82 + 1) * 299792458.0;
                      if (v45 <= 0.0) {
                        double v46 = -0.5;
                      }
                      else {
                        double v46 = 0.5;
                      }
                      double v47 = v45 + v46;
                      int v48 = (int)v47;
                      if (v47 < -2147483650.0) {
                        int v48 = 0x80000000;
                      }
                      if (v47 > 2147483650.0) {
                        int v48 = 0x7FFFFFFF;
                      }
                      v104[v79] = v48;
                      double v49 = v44 * 1575420000.0 - *(double *)(a1 + 8 * v14 + 1616);
                      if (v49 <= 0.0) {
                        double v50 = -0.5;
                      }
                      else {
                        double v50 = 0.5;
                      }
                      double v51 = v49 + v50;
                      if (v51 <= 2147483650.0)
                      {
                        if (v51 >= -2147483650.0) {
                          int v52 = (int)v51;
                        }
                        else {
                          LOWORD(v52) = 0;
                        }
                      }
                      else
                      {
                        LOWORD(v52) = -1;
                      }
                      ++v78;
                      *((_WORD *)&v103[3] + v79++) = v52;
                    }
                  }
                }
              }
            }
          }
        }
        ++v14;
      }
      while (v14 != 48);
      int v13 = v15 - 1;
    }
    while (v15);
    v9[1] = v78;
    __int16 v53 = v103[0];
    *((_DWORD *)v9 + 1) = v103[0];
    if (v78 >= 3 && (v78 != 3 || (v53 & 0xFE00) != 0))
    {
      int v54 = (const double *)(v76 + 240);
      BOOL v55 = NK_Crude_Apx_Pos_Core((uint64_t)v102, (uint64_t)v100, (uint64_t)v101, (uint64_t)v103, (uint64_t)v99, (uint64_t)v104);
      BOOL v56 = v55;
      int32x2_t v57 = vmovn_s64(vcvtq_n_s64_f64(*(float64x2_t *)(v76 + 240), 0xFuLL));
      *(int32x2_t *)(v76 + 27096) = v57;
      v9[16] = v55;
      *(int32x2_t *)(v9 + 20) = v57;
      *(_DWORD *)(v76 + 264) = (int)*((double *)a4 + 3) + 604800 * *((__int16 *)a4 + 9);
      if (*v73) {
        BOOL v58 = (a4[5750] - 3) < 2;
      }
      else {
        BOOL v58 = 0;
      }
      char v59 = v78 < 5 || v55;
      if ((v59 & 1) == 0) {
        ++*(_DWORD *)(v76 + 268);
      }
      BOOL v60 = !v55 && !v58 && *(_DWORD *)(v76 + 268) > 9u;
      if (!v75 && (v55 || v60))
      {
        double v61 = *((double *)a4 + 102);
        *(double *)(v76 + 256) = v61;
        *(void *)&long long v88 = 0;
        if (R8_EQ((const double *)(v76 + 256), (const double *)&v88) || v61 < -500.0 || v61 > 6000.0) {
          *(void *)(v76 + 256) = qword_22BB409E0[*(_DWORD *)(v76 + 20) < 5u];
        }
        *((unsigned char *)a4 + 960) = v56;
        *(unsigned char *)(v76 + 232) = v56;
        if (Horiz_Diff_Sqd((double *)a4 + 100, v54) <= 5625000000.0)
        {
          int v63 = *v73;
        }
        else
        {
          if (v56)
          {
            long long v62 = *(_OWORD *)v54;
            *((void *)a4 + 102) = *(void *)(v76 + 256);
            *((_OWORD *)a4 + 50) = v62;
            Geo2ECEF((uint64_t)(a4 + 200), (uint64_t)&WGS84_Datum, (double *)a4 + 83);
          }
          int v63 = *v73;
          if (*v73) {
            char v64 = v58;
          }
          else {
            char v64 = 1;
          }
          if ((v64 & 1) == 0)
          {
            uint64_t v65 = 0;
            *((_OWORD *)a4 + 58) = 0u;
            *((_OWORD *)a4 + 59) = 0u;
            *((_OWORD *)a4 + 57) = 0u;
            *((_OWORD *)a4 + 43) = 0u;
            *((_OWORD *)a4 + 44) = 0u;
            *((_OWORD *)a4 + 45) = 0u;
            *((_OWORD *)a4 + 46) = 0u;
            *((_OWORD *)a4 + 47) = 0u;
            *(int *)((char *)a4 + 767) = 0;
            *(unsigned char *)(v76 + 128) = 1;
            uint64_t v66 = a1 + 316;
            *(_DWORD *)(v76 + 132) = 35;
            do
            {
              uint64_t v67 = v66 + 4 * v65;
              if (*(int *)(v67 + 96) >= 11 && (~*(unsigned __int16 *)(v66 + 2 * v65) & 0x300) != 0) {
                *(_DWORD *)(v67 + 96) = 10;
              }
              ++v65;
            }
            while (v65 != 48);
          }
        }
        if (v63) {
          char v68 = v58;
        }
        else {
          char v68 = 1;
        }
        if ((v68 & 1) == 0)
        {
          if (*((double *)a4 + 2880) >= 900000000.0 || Horiz_Diff_Sqd((double *)a4 + 2877, v54) >= 5625000000.0)
          {
            if (v78 >= 5)
            {
              *uint64_t v73 = 0;
              *(unsigned char *)(p_NA + 10) = 0;
              a4[6256] = 21;
              EvLog_v("NK_Crude_Apx_Pos: CAP Discrepancy, Clearing Not Trusted Ext Ref Pos");
            }
          }
          else
          {
            BOOL v56 = 0;
          }
        }
        if (!v58 && v60)
        {
          *uint64_t v73 = 0;
          *(unsigned char *)(p_NA + 10) = 0;
          a4[6256] = 22;
          *(void *)(v72 + 16480) = 0x7F7F7F7F7F7F7F7FLL;
          *(void *)&long long v69 = 0x7F7F7F7F7F7F7F7FLL;
          *((void *)&v69 + 1) = 0x7F7F7F7F7F7F7F7FLL;
          *(_OWORD *)(v72 + 16464) = v69;
          *(_OWORD *)(v72 + 16448) = v69;
          *(_OWORD *)(v72 + 16432) = v69;
          *(_OWORD *)(v72 + 16488) = 0u;
          *(_OWORD *)(v72 + 16504) = 0u;
          *(_OWORD *)(v72 + 16520) = 0u;
          *(void *)(v72 + 16536) = 0;
          EvLog_v("NK_Crude_Apx_Pos: CAP Repeated Fail, Clearing Not Trusted Ext Ref Pos & GLO Slot Number mapping");
        }
      }
      if (!v75)
      {
        if (*(unsigned char *)(v76 + 232))
        {
          if (v56)
          {
            *uint64_t v73 = 1;
            int v70 = *a4;
            a4[5753] = *a4;
            *(void *)(a4 + 5749) = 0x300000002;
            *((void *)a4 + 2877) = *(void *)(v76 + 240);
            *((void *)a4 + 2878) = *(void *)(v76 + 248);
            *((int64x2_t *)a4 + 1440) = vdupq_n_s64(0x41C9105220000000uLL);
            *((void *)a4 + 2882) = 0;
            *((void *)a4 + 2887) = 0x4039000000000000;
            a4[5751] = 2;
            double v71 = dbl_22BB0E990[*(_DWORD *)(v76 + 20) < 5u];
            if (!*((unsigned char *)a4 + 23120) || v71 < *((double *)a4 + 2894))
            {
              *((unsigned char *)a4 + 23120) = 1;
              a4[5785] = v70;
              *(void *)(a4 + 5781) = 0x300000002;
              *((void *)a4 + 2893) = *(void *)(v76 + 256);
              *((double *)a4 + 2894) = v71;
              *((void *)a4 + 2897) = 0x4039000000000000;
              a4[5783] = 2;
            }
          }
        }
      }
      *((_WORD *)v77 + 1) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
                          - v74;
    }
    else
    {
      *(unsigned char *)(v76 + 232) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a3 + 232) = 0;
  }
}

BOOL GSpeed_Meas_Update(int a1, double *a2, unsigned int a3, unsigned __int8 *a4, BOOL a5, _WORD *a6, double a7, double a8, double a9, double a10)
{
  v29[3] = *(double *)MEMORY[0x263EF8340];
  if ((*((_DWORD *)a4 + 1) - 1) > 1) {
    return 0;
  }
  a4[12] = 0;
  int v11 = *a4;
  if (*a4)
  {
    double v24 = 0.0;
    double v19 = a7 - *((double *)a4 + 3) * a9;
    *((double *)a4 + 5) = a7;
    *((double *)a4 + 6) = v19;
    __double2 v20 = __sincos_stret(a8 * 0.0174532925);
    Comp_GSpeed_Partial(v20.__cosval * a7, v20.__sinval * a7, a2, v29);
    uint64_t v26 = 0;
    uint64_t v21 = 2;
    memset(v25, 0, sizeof(v25));
    do
    {
      *((double *)v25 + (a1 + v21)) = v29[v21];
      --v21;
    }
    while (v21 != -1);
    *((double *)v25 + a3) = v19;
    umeas(a5, a3, a10 * a10 * *((double *)a4 + 4), (double *)v25, v28, v27, &v24, *((double *)a4 + 7));
    double v22 = v24;
    if (v24 <= 0.0)
    {
      int v11 = 0;
      *a4 = 0;
      a4[12] = 1;
      ++*a6;
      *((double *)a4 + 8) = v22 + *((double *)a4 + 8);
    }
    else
    {
      *((double *)a4 + 8) = *((double *)a4 + 4) * (v24 * (v28[a3] * v28[a3]));
      int v11 = *a4;
    }
  }
  return v11 != 0;
}

void GncS03_07PosEventUpdate(long long *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  double v2 = gnssOsa_Calloc("GncS03_07PosEventUpdate", 48, 1, 0x30uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    long long v4 = *a1;
    long long v5 = a1[1];
    *(_OWORD *)((char *)v2 + 31) = *(long long *)((char *)a1 + 31);
    *double v2 = v4;
    v2[1] = v5;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT =>GNCP Client,%hhu,ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncS03_07PosEventUpdate", *((unsigned __int8 *)v3 + 12), *((unsigned __int16 *)v3 + 7));
      LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
    }
    AgpsSendFsmMsg(130, 134, 8522243, v3);
  }
}

void GncS03_08SessRespSentInd(int a1, int a2, __int16 a3, char a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v8 = gnssOsa_Calloc("GncS03_08SessRespSentInd", 70, 1, 0x18uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    v8[12] = a4;
    *((_WORD *)v8 + 7) = a3;
    *((_DWORD *)v8 + 4) = a1;
    *((_DWORD *)v8 + 5) = a2;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_SESSION_RESP_SENT_IND =>GNCP ID,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncS03_08SessRespSentInd", *((unsigned __int16 *)v9 + 7), v9[12]);
      LbsOsaTrace_WriteLog(8u, __str, v11, 4, 1);
    }
    AgpsSendFsmMsg(130, 134, 8522499, v9);
  }
}

size_t Hal18_HandleBaudResp(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = 513;
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    long long v4 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_14;
  }
  if (a2 <= 0xF)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = 515;
    uint64_t v11 = a2;
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    long long v4 = "%10u %s%c %s: #%04hx len,%u\n";
    goto LABEL_14;
  }
  if (a1[2] != 66 || a1[3] != 85)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    uint64_t v10 = 1312;
    uint64_t v11 = a1[2];
    long long v4 = "%10u %s%c %s: #%04hx resp MC,%u,MID,%u,MIDEx,%u\n";
    unint64_t v9 = v7;
    goto LABEL_14;
  }
  size_t result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
  if ((result & 1) == 0)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v10 = 1542;
      uint64_t v11 = *__error();
      unint64_t v9 = v6;
      long long v4 = "%10u %s%c %s: #%04hx HandleAckSem err,%d\n";
LABEL_14:
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, v4, v9, "HAL", 69, "Hal18_HandleBaudResp", v10, v11, v12, v13);
      return LbsOsaTrace_WriteLog(0xDu, __str, v8, 0, 1);
    }
  }
  return result;
}

size_t pos_protocol_PospCallback()
{
  int v0 = MEMORY[0x270FA5388]();
  size_t v3 = v2;
  v13[20660] = *MEMORY[0x263EF8340];
  if (!v2 || (long long v4 = v1) == 0)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx length,%u or msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 69, "pos_protocol_PospCallback", 513, v3);
    unint64_t v9 = __str;
    return LbsOsaTrace_WriteLog(0x13u, v9, v8, 0, 1);
  }
  int v5 = v0;
  *(void *)__str = 0;
  memset_s(v13, 0x285A0uLL, 0, 0x285A0uLL);
  if ((v5 - 1) <= 3)
  {
    *(_DWORD *)&__str[4] = v3;
    *(_DWORD *)__str = v5;
    memcpy_s("pos_protocol_PospCallback", 61, v13, v3, v4, v3);
    return Process_POSP_Response((unsigned __int8 *)__str);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
  if (result)
  {
    bzero(v11, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(v11, 0x40FuLL, "%10u %s%c %s: #%04hx message,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 69, "pos_protocol_PospCallback", 770, v5);
    unint64_t v9 = v11;
    return LbsOsaTrace_WriteLog(0x13u, v9, v8, 0, 1);
  }
  return result;
}

uint64_t Process_POSP_Response(unsigned __int8 *a1)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "Process_POSP_Response");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "Process_POSP_Response", 513);
      LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (!result) {
      return result;
    }
LABEL_114:
    bzero(__str, 0x410uLL);
    uint64_t v77 = mach_continuous_time();
    unsigned __int16 v78 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v77), "PSP", 68, "Process_POSP_Response");
    return LbsOsaTrace_WriteLog(0x13u, __str, v78, 5, 1);
  }
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 4)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: API,%u,status,%u,sessionId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 77, "TracePOSPContents", *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 2));
      LbsOsaTrace_WriteLog(0x13u, __str, v17, 3, 1);
    }
  }
  else if (v4 == 3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: eAIDREQ SessionId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 73, "TracePOSPContents", *((_DWORD *)a1 + 2));
      LbsOsaTrace_WriteLog(0x13u, __str, v19, 4, 1);
    }
    if (*((void *)a1 + 2))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v20 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v21 = (unsigned __int8 *)*((void *)a1 + 2);
        int v22 = v21[2];
        int v23 = v21[1];
        int v24 = *v21;
        BOOL v25 = v21[3] == 0;
        uint64_t v26 = 84;
        if (v25) {
          uint64_t v27 = 70;
        }
        else {
          uint64_t v27 = 84;
        }
        if (v24) {
          uint64_t v28 = 84;
        }
        else {
          uint64_t v28 = 70;
        }
        if (v23) {
          uint64_t v29 = 84;
        }
        else {
          uint64_t v29 = 70;
        }
        if (!v22) {
          uint64_t v26 = 70;
        }
        unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IONO,%c,REFPOS,%c,REFTIME,%c,GPS req,%c\n", (unint64_t)v20, "PSP", 77, "TracePOSPContents", v26, v29, v28, v27);
        LbsOsaTrace_WriteLog(0x13u, __str, v30, 3, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v33 = mach_continuous_time();
      unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx General Assistance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "PSP", 87, "TracePOSPContents", 513);
      LbsOsaTrace_WriteLog(0x13u, __str, v34, 2, 1);
    }
    uint64_t v35 = *((void *)a1 + 3);
    if (v35)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v36 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        if (*(unsigned char *)(v35 + 4)) {
          uint64_t v37 = 84;
        }
        else {
          uint64_t v37 = 70;
        }
        if (*(unsigned char *)(v35 + 5)) {
          uint64_t v38 = 84;
        }
        else {
          uint64_t v38 = 70;
        }
        if (*(unsigned char *)(v35 + 8)) {
          uint64_t v39 = 84;
        }
        else {
          uint64_t v39 = 70;
        }
        if (*(unsigned char *)(v35 + 7)) {
          uint64_t v40 = 84;
        }
        else {
          uint64_t v40 = 70;
        }
        if (*(unsigned char *)(v35 + 9)) {
          uint64_t v41 = 84;
        }
        else {
          uint64_t v41 = 70;
        }
        if (*(unsigned char *)(v35 + 10)) {
          uint64_t v42 = 84;
        }
        else {
          uint64_t v42 = 70;
        }
        if (*(unsigned char *)(v35 + 6)) {
          uint64_t v43 = 84;
        }
        else {
          uint64_t v43 = 70;
        }
        unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GPS AlmModelId,%u,ALM req,%c,AUX req,%c,Databits req,%c,EPHModelId,%u,EPHreq,%c,gpswk,%u,refMeasreq,%c,RTIreq,%c,SVType,%u,TOE,%u,TOELIMIT,%u,UTCreq,%c,NoOfSats,%u\n", (unint64_t)v36, "PSP", 77, "TracePOSPContents", *(unsigned __int8 *)(v35 + 13), v43, v42, v41, *(unsigned __int8 *)(v35 + 14), v40, *(unsigned __int16 *)(v35 + 16), v39, v38, *(_DWORD *)v35, *(unsigned __int8 *)(v35 + 18),
                *(unsigned __int8 *)(v35 + 19),
                v37,
                *(unsigned __int8 *)(v35 + 20));
        LbsOsaTrace_WriteLog(0x13u, __str, v44, 3, 1);
      }
      if (*(unsigned char *)(v35 + 20))
      {
        unint64_t v45 = 0;
        do
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v46 = mach_continuous_time();
            unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GPS index,%zu,SATID,%u,IODE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "PSP", 77, "TracePOSPContents", v45, *(unsigned __int8 *)(v35 + v45 + 21), *(unsigned __int16 *)(v35 + 2 * v45 + 86));
            LbsOsaTrace_WriteLog(0x13u, __str, v47, 3, 1);
          }
          ++v45;
        }
        while (v45 < *(unsigned __int8 *)(v35 + 20));
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v48 = mach_continuous_time();
      unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS Assistance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "PSP", 87, "TracePOSPContents", 513);
      LbsOsaTrace_WriteLog(0x13u, __str, v49, 2, 1);
    }
  }
  else if (v4 == 2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ePOSN v_FinalReport,%u,v_GnssMask,%u,v_SessionId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 77, "TracePOSPContents", a1[12], a1[13], *((_DWORD *)a1 + 2));
      LbsOsaTrace_WriteLog(0x13u, __str, v6, 3, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 1))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: v_Altitude,%u,v_AxisBearing,%u,v_Confidence,%u,v_DirectOfAlt,%u,v_FixType,%u,v_IncludedAngle,%u,v_InnerRadius,%u,v_Latitude,%u,v_Longitude,%d,v_OffsetAngle,%u,v_ShapeType,%u,v_SignOfLat,%u,v_Status,%u,v_UncertAltitude,%u,v_UncertSemiMajor,%u,v_UncertSemiMinor,%u,v_SpoofingMask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 73, "TracePOSPContents", *((unsigned __int16 *)a1 + 26), a1[56], a1[65], *((_DWORD *)a1 + 15), *((_DWORD *)a1 + 8), a1[66], *((_DWORD *)a1 + 17), *((_DWORD *)a1 + 11), *((_DWORD *)a1 + 12), a1[67],
             *((_DWORD *)a1 + 9),
             *((_DWORD *)a1 + 10),
             *((_DWORD *)a1 + 7),
             a1[64],
             a1[54],
             a1[55],
             *((_DWORD *)a1 + 4));
      LbsOsaTrace_WriteLog(0x13u, __str, v8, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: v_VelType,%u,v_Bearing,%u,v_HorSpeed,%u,v_HorSpeedUnc,%u,v_VertDir,%u,v_VertSpeed,%u,v_VertSpeedUnc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 77, "TracePOSPContents", *((_DWORD *)a1 + 19), *((unsigned __int16 *)a1 + 40), *((unsigned __int16 *)a1 + 41), *((unsigned __int16 *)a1 + 44), a1[84], *((unsigned __int16 *)a1 + 43), *((unsigned __int16 *)a1 + 45));
      LbsOsaTrace_WriteLog(0x13u, __str, v10, 3, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: v_DeltaGnssTod,%u,v_GnssTimeId,%u,v_GnssTodFrac,%u,v_GnssTodMs,%u,v_GnssTodUnc,%u,v_GpsTowMs,%u,v_GpsTowUnc,%u,v_RefDeltaCellTime,%u,GpsWkNum,%u,GpsLeapSec,%d,LocalBBTimeMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "PSP", 77, "TracePOSPContents", a1[107], *((_DWORD *)a1 + 28), *((unsigned __int16 *)a1 + 52), *((_DWORD *)a1 + 25), a1[106], *((_DWORD *)a1 + 23), a1[96], *((_DWORD *)a1 + 27), *((unsigned __int16 *)a1 + 59), *((_DWORD *)a1 + 30), *((_DWORD *)a1 + 31));
      LbsOsaTrace_WriteLog(0x13u, __str, v12, 3, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v31 = mach_continuous_time();
    unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx msgType,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "PSP", 69, "TracePOSPContents", 770, *(_DWORD *)a1);
    LbsOsaTrace_WriteLog(0x13u, __str, v32, 0, 1);
  }
  if ((*(_DWORD *)a1 - 2) >= 3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v64 = mach_continuous_time();
      unsigned __int16 v65 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v64), "PSP", 69, "Process_POSP_Response", 770, *a1);
      LbsOsaTrace_WriteLog(0x13u, __str, v65, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_114;
  }
  int v50 = *((_DWORD *)a1 + 2);
  __int16 v79 = 1794;
  int v81 = v50;
  double v51 = operator new(0x285A8uLL, MEMORY[0x263F8C180]);
  if (!v51)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v66 = mach_continuous_time();
      unsigned __int16 v67 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "PSP", 69, "Process_POSP_Response", 1537);
      LbsOsaTrace_WriteLog(0x13u, __str, v67, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_114;
  }
  int v52 = v51;
  *double v51 = 0;
  __int16 v53 = v51 + 1;
  memset_s(v51 + 1, 0x285A0uLL, 0, 0x285A0uLL);
  int v80 = v52;
  memcpy_s("Process_POSP_Response", 139, v52, 0x285A8u, a1, 0x285A8uLL);
  if (*(_DWORD *)a1 != 3) {
    goto LABEL_86;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v54 = mach_continuous_time();
    unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "PSP", 68, "copyGnssAidReq");
    LbsOsaTrace_WriteLog(0x13u, __str, v55, 5, 1);
  }
  _DWORD *v53 = *((_DWORD *)a1 + 2);
  if (*((void *)a1 + 2))
  {
    BOOL v56 = gnssOsa_Calloc("copyGnssAidReq", 190, 1, 8uLL);
    v52[2] = v56;
    if (!v56)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v68 = mach_continuous_time();
        unsigned __int16 v69 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx General Assistance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v68), "PSP", 69, "copyGnssAidReq", 1537);
        LbsOsaTrace_WriteLog(0x13u, __str, v69, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    memcpy_s("copyGnssAidReq", 194, v56, 8u, *((const void **)a1 + 2), 8uLL);
  }
  if (!*((void *)a1 + 3)) {
    goto LABEL_84;
  }
  int32x2_t v57 = gnssOsa_Calloc("copyGnssAidReq", 206, 1, 0xD8uLL);
  v52[3] = v57;
  if (!v57)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v70 = mach_continuous_time();
      unsigned __int16 v71 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS Assistance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v70), "PSP", 69, "copyGnssAidReq", 1537);
      LbsOsaTrace_WriteLog(0x13u, __str, v71, 0, 1);
    }
    uint64_t v72 = (void *)v52[2];
    if (v72) {
      free(v72);
    }
    v52[2] = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
    {
LABEL_110:
      bzero(__str, 0x410uLL);
      uint64_t v73 = mach_continuous_time();
      unsigned __int16 v74 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v73), "PSP", 68, "copyGnssAidReq");
      LbsOsaTrace_WriteLog(0x13u, __str, v74, 5, 1);
    }
LABEL_111:
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v75 = mach_continuous_time();
      unsigned __int16 v76 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Aid Req\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v75), "PSP", 69, "Process_POSP_Response", 770);
      LbsOsaTrace_WriteLog(0x13u, __str, v76, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_114;
  }
  memcpy_s("copyGnssAidReq", 210, v57, 0xD8u, *((const void **)a1 + 3), 0xD8uLL);
LABEL_84:
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v58 = mach_continuous_time();
    unsigned __int16 v59 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v58), "PSP", 68, "copyGnssAidReq");
    LbsOsaTrace_WriteLog(0x13u, __str, v59, 5, 1);
  }
LABEL_86:
  if (SuplPospPostMessage((unsigned __int8 *)&v79))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v60 = mach_continuous_time();
      unsigned __int16 v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Message posting failed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "PSP", 69, "Process_POSP_Response", 1548, *a1);
      LbsOsaTrace_WriteLog(0x13u, __str, v61, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (result) {
      goto LABEL_90;
    }
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (result)
    {
LABEL_90:
      bzero(__str, 0x410uLL);
      uint64_t v62 = mach_continuous_time();
      unsigned __int16 v63 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "PSP", 68, "Process_POSP_Response");
      return LbsOsaTrace_WriteLog(0x13u, __str, v63, 5, 1);
    }
  }
  return result;
}

void sub_22B9AAC8C(_Unwind_Exception *a1)
{
  MEMORY[0x230F4E5C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t GNS_WlMeas(uint64_t a1, const void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "PSP", 68, "GNS_WlMeas");
    LbsOsaTrace_WriteLog(0x13u, __str, v4, 5, 1);
  }
  int v22 = -1;
  __int16 v20 = 1539;
  uint64_t v5 = (char *)operator new(0xC20uLL, MEMORY[0x263F8C180]);
  if (!v5)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Wlan Meas Msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "GNS_WlMeas", 1537);
      LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
      return 14;
    }
    bzero(__str, 0x410uLL);
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v15, "PSP", 68, "GNS_WlMeas");
    goto LABEL_15;
  }
  unsigned __int16 v6 = v5;
  uint64_t v7 = 32;
  do
  {
    unsigned __int16 v8 = &v5[v7];
    *(void *)(v8 + 31) = 0;
    *(_OWORD *)unsigned __int16 v8 = 0uLL;
    *((_OWORD *)v8 + 1) = 0uLL;
    *((void *)v8 + 5) = 4294934527;
    v7 += 48;
  }
  while (v8 + 48 != v5 + 3104);
  uint64_t v21 = v5;
  memcpy(v5, a2, 0xC20uLL);
  if (SuplPospPostMessage((unsigned __int8 *)&v20))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Message posting failed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 69, "GNS_WlMeas", 1548, v20);
      LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
    }
    MEMORY[0x230F4E5D0](v6, 0x1000C400624F575);
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
      return 14;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v11, "PSP", 68, "GNS_WlMeas");
LABEL_15:
    LbsOsaTrace_WriteLog(0x13u, __str, v12, 5, 1);
    return 14;
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v18 = mach_continuous_time();
  unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 68, "GNS_WlMeas");
  uint64_t v16 = 1;
  LbsOsaTrace_WriteLog(0x13u, __str, v19, 5, 1);
  return v16;
}

size_t posp_TimerExpiry_Ind(int a1, int a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 68, "posp_TimerExpiry_Ind");
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 5, 1);
  }
  int wlan_session_info = find_wlan_session_info();
  if (a2 == 1 && wlan_session_info == a1)
  {
    int v22 = -1;
    __int16 v20 = 1539;
    uint64_t v7 = (char *)operator new(0xC20uLL, MEMORY[0x263F8C180]);
    if (v7)
    {
      *uint64_t v7 = 0;
      *(void *)(v7 + 4) = 0;
      *(void *)(v7 + 10) = 0;
      *(void *)(v7 + 20) = 0;
      uint64_t v8 = 32;
      v7[28] = 0;
      do
      {
        uint64_t v9 = &v7[v8];
        *(void *)(v9 + 31) = 0;
        *(_OWORD *)uint64_t v9 = 0uLL;
        *((_OWORD *)v9 + 1) = 0uLL;
        *((void *)v9 + 5) = 4294934527;
        v8 += 48;
      }
      while (v9 + 48 != v7 + 3104);
      uint64_t v21 = v7;
      *((_DWORD *)v7 + 6) = 11;
      if (!SuplPospPostMessage((unsigned __int8 *)&v20)
        || !LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        goto LABEL_17;
      }
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      uint64_t v18 = 1548;
      uint64_t v19 = v20;
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10);
      unint64_t v11 = "%10u %s%c %s: #%04hx Message posting failed,%u\n";
    }
    else
    {
      if ((LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0) & 1) == 0) {
        goto LABEL_17;
      }
      bzero(__str, 0x410uLL);
      uint64_t v18 = 1537;
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unint64_t v11 = "%10u %s%c %s: #%04hx Wlan Meas Msg\n";
    }
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, v11, v17, "PSP", 69, "posp_TimerExpiry_Ind", v18, v19);
  }
  else
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TmrId,%u,TmrType,%u\n", v12);
  }
  LbsOsaTrace_WriteLog(0x13u, __str, v13, 0, 1);
LABEL_17:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 68, "posp_TimerExpiry_Ind");
    return LbsOsaTrace_WriteLog(0x13u, __str, v16, 5, 1);
  }
  return result;
}

double GM_Apply_LT_Slew(double *a1, __int16 *a2, double *a3, _WORD *a4)
{
  double v6 = *a1 * 1000.0;
  double v7 = -0.5;
  if (v6 > 0.0) {
    double v7 = 0.5;
  }
  double v8 = v6 + v7;
  if (v8 <= 2147483650.0)
  {
    if (v8 >= -2147483650.0) {
      int v9 = (int)v8;
    }
    else {
      int v9 = 0x80000000;
    }
  }
  else
  {
    int v9 = 0x7FFFFFFF;
  }
  Inc_Local_Time(-v9, 604800, a3, a2);
  double result = *a1 + (double)v9 * -0.001;
  *a1 = result;
  a4[1] = v9;
  *a4 = 256;
  a4[2] = v9;
  return result;
}

void NK_Transform_State(uint64_t a1)
{
  ECEF2Geo((double *)(a1 + 40), (uint64_t)&WGS84_Datum, a1 + 176);
  double v2 = STANAG_WGS84_Mean_Sea_Level((double *)(a1 + 176));
  __double2 v3 = __sincos_stret(*(double *)(a1 + 176));
  __double2 v4 = __sincos_stret(*(double *)(a1 + 184));
  uint64_t v5 = 0;
  *(double *)(a1 + 208) = -(v3.__sinval * v4.__cosval);
  *(double *)(a1 + 200) = v2;
  *(double *)(a1 + 216) = -(v3.__sinval * v4.__sinval);
  *(double *)(a1 + 224) = v3.__cosval;
  *(double *)(a1 + 232) = -v4.__sinval;
  *(double *)(a1 + 240) = v4.__cosval;
  *(void *)(a1 + 248) = 0;
  *(double *)(a1 + 256) = -(v3.__cosval * v4.__cosval);
  *(double *)(a1 + 264) = -(v3.__cosval * v4.__sinval);
  *(double *)(a1 + 272) = -v3.__sinval;
  *(double *)(a1 + 280) = v3.__cosval;
  double v6 = (double *)(a1 + 288);
  double v7 = *(double *)(a1 + 64);
  double v8 = *(double *)(a1 + 72);
  double v9 = *(double *)(a1 + 80);
  do
  {
    *v6++ = *(double *)(a1 + 208 + v5 + 8) * v8 + *(double *)(a1 + 208 + v5) * v7 + *(double *)(a1 + 208 + v5 + 16) * v9;
    v5 += 24;
  }
  while (v5 != 72);
  double v10 = *(double *)(a1 + 288) * *(double *)(a1 + 288) + *(double *)(a1 + 296) * *(double *)(a1 + 296);
  *(double *)(a1 + 312) = sqrt(v10 + *(double *)(a1 + 304) * *(double *)(a1 + 304));
  *(double *)(a1 + 320) = sqrt(v10);
}

double GAL_AlmInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  unint64_t v2 = 0x3F60000000000000;
  LOWORD(v2) = *(_WORD *)(a1 + 16);
  double v3 = (double)*(__int16 *)(a1 + 24);
  *(double *)(a2 + 16) = (double)*(__int16 *)(a1 + 14) * 0.001953125;
  *(double *)(a2 + 24) = (double)v2 * 0.0000152587891;
  double v4 = (double)*(__int16 *)(a1 + 26) * 0.0000958737992;
  double v5 = (double)*(__int16 *)(a1 + 20) * 0.0000958737992;
  *(double *)(a2 + 48) = (double)*(__int16 *)(a1 + 22) * 3.6572952e-10;
  *(double *)(a2 + 56) = v3 * 0.0000958737992;
  double v6 = (double)*(__int16 *)(a1 + 18) * 0.000191747598;
  *(_DWORD *)(a2 + 12) = 600 * *(unsigned __int16 *)(a1 + 12);
  *(double *)(a2 + 32) = v6;
  *(double *)(a2 + 40) = v5;
  double v7 = (double)*(__int16 *)(a1 + 28) * 0.00000190734863;
  double v8 = (double)*(__int16 *)(a1 + 30);
  *(double *)(a2 + 64) = v4;
  *(double *)(a2 + 72) = v7;
  double result = v8 * 3.63797881e-12;
  *(double *)(a2 + 80) = v8 * 3.63797881e-12;
  *(unsigned char *)(a2 + 89) = *(unsigned char *)(a1 + 33);
  *(unsigned char *)(a2 + 90) = *(unsigned char *)(a1 + 34);
  return result;
}

uint64_t Init_DB_SA_Assistance(uint64_t result, uint64_t a2)
{
  *(_WORD *)a2 = 1542;
  *(void *)(a2 + 104) = result + 367;
  *(void *)(a2 + 112) = result + 301;
  *(void *)(a2 + 120) = result + 307;
  *(void *)(a2 + 128) = result + 313;
  *(void *)(a2 + 136) = result + 319;
  *(void *)(a2 + 144) = result + 325;
  *(void *)(a2 + 152) = result + 331;
  *(void *)(a2 + 160) = result + 337;
  *(void *)(a2 + 168) = result + 343;
  *(void *)(a2 + 176) = result + 349;
  *(void *)(a2 + 184) = result + 355;
  *(void *)(a2 + 192) = result + 361;
  *(void *)(a2 + 8) = result + 376;
  *(void *)(a2 + 16) = result + 378;
  *(void *)(a2 + 24) = result + 380;
  *(void *)(a2 + 32) = result + 382;
  *(void *)(a2 + 40) = result + 384;
  *(void *)(a2 + 48) = result + 386;
  *(void *)(a2 + 56) = result + 388;
  *(void *)(a2 + 64) = result + 390;
  *(void *)(a2 + 72) = result + 392;
  *(void *)(a2 + 80) = result + 394;
  *(void *)(a2 + 88) = result + 396;
  *(void *)(a2 + 96) = result + 398;
  *(void *)(a2 + 200) = result + 21000;
  *(void *)(a2 + 208) = result + 19172;
  *(void *)(a2 + 216) = result + 19244;
  *(void *)(a2 + 224) = result + 19316;
  *(void *)(a2 + 232) = result + 19388;
  *(void *)(a2 + 240) = result + 19416;
  *(void *)(a2 + 248) = result + 19608;
  *(void *)(a2 + 256) = result + 20040;
  *(void *)(a2 + 264) = result + 20184;
  *(void *)(a2 + 272) = result + 20328;
  *(void *)(a2 + 280) = result + 20472;
  *(void *)(a2 + 288) = result + 20616;
  return result;
}

uint64_t GN_ExtA_Set_Device_Motion_State(unsigned int *a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Device_Motion_State"))
  {
    if ((int)a1[1] < 4)
    {
      if ((int)a1[2] < 4)
      {
        uint64_t v4 = p_NA;
        double v5 = (_DWORD *)(p_NA + 301);
        *(unsigned char *)(p_NA + 306) = *(unsigned char *)(p_NA + 305);
        *(_DWORD *)((char *)v5 + 1) = *v5;
        memmove((void *)(v4 + 19184), (const void *)(v4 + 19172), 0x3CuLL);
        uint64_t v2 = 1;
        *(unsigned char *)(v4 + 301) = 1;
        ++*(_WORD *)(v4 + 378);
        unsigned int v6 = a1[2];
        *(void *)(v4 + 19172) = *(void *)a1;
        *(_DWORD *)(v4 + 19180) = v6;
        Debug_Log_ExtA_DMS(a1);
        return v2;
      }
      EvCrt_v("GN_ExtA_Set_Device_Motion_State: FAILED: Mov_Reliab = %d > GN_EXTA_MAR_HIGH, Out of range!");
    }
    else
    {
      EvCrt_v("GN_ExtA_Set_Device_Motion_State: FAILED: Mov_State = %d > GN_EXTA_DMS_MOVING, Out of range!");
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_User_Activity_Context(unsigned int *a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_User_Activity_Context"))
  {
    if ((int)a1[1] < 12)
    {
      if ((int)a1[2] < 4)
      {
        uint64_t v4 = p_NA;
        double v5 = (_DWORD *)(p_NA + 307);
        *(unsigned char *)(p_NA + 312) = *(unsigned char *)(p_NA + 311);
        *(_DWORD *)(v4 + 308) = *v5;
        memmove((void *)(v4 + 19256), (const void *)(v4 + 19244), 0x3CuLL);
        uint64_t v2 = 1;
        *(unsigned char *)(v4 + 307) = 1;
        ++*(_WORD *)(v4 + 380);
        unsigned int v6 = a1[2];
        *(void *)(v4 + 19244) = *(void *)a1;
        *(_DWORD *)(v4 + 19252) = v6;
        Debug_Log_ExtA_UAC(a1);
        return v2;
      }
      EvCrt_v("GN_ExtA_Set_User_Activity_Context: FAILED: Act_Reliab = %d > GN_EXTA_MAR_HIGH, Out of range!");
    }
    else
    {
      EvCrt_v("GN_ExtA_Set_User_Activity_Context: FAILED: Act_Context = %d > GN_EXTA_UAC_SKY_DIVING, Out of range!");
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_Fixed_In_Vehicle(unsigned int *a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Fixed_In_Vehicle"))
  {
    if ((int)a1[1] < 4)
    {
      if ((int)a1[2] < 4)
      {
        uint64_t v4 = p_NA;
        double v5 = (_DWORD *)(p_NA + 313);
        *(unsigned char *)(p_NA + 318) = *(unsigned char *)(p_NA + 317);
        *(_DWORD *)((char *)v5 + 1) = *v5;
        memmove((void *)(v4 + 19328), (const void *)(v4 + 19316), 0x3CuLL);
        uint64_t v2 = 1;
        *(unsigned char *)(v4 + 313) = 1;
        ++*(_WORD *)(v4 + 382);
        unsigned int v6 = a1[2];
        *(void *)(v4 + 19316) = *(void *)a1;
        *(_DWORD *)(v4 + 19324) = v6;
        Debug_Log_ExtA_FIV(a1);
        return v2;
      }
      EvCrt_v("GN_ExtA_Set_Fixed_In_Vehicle: FAILED: FIV_Reliab = %d > GN_EXTA_MAR_HIGH, Out of range!");
    }
    else
    {
      EvCrt_v("GN_ExtA_Set_Fixed_In_Vehicle: FAILED: FIV_Ind = %d > GN_EXTA_FIV_KNOWN_FIXED, Out of range!");
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_Sig_Env_Sev(signed int a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Sig_Env_Sev"))
  {
    if (a1 < 8)
    {
      uint64_t v3 = p_NA;
      uint64_t v4 = (_DWORD *)(p_NA + 319);
      *(unsigned char *)(p_NA + 324) = *(unsigned char *)(p_NA + 323);
      *(_DWORD *)(v3 + 320) = *v4;
      int v5 = *(_DWORD *)(v3 + 19404);
      *(_OWORD *)(v3 + 19392) = *(_OWORD *)(v3 + 19388);
      *(_DWORD *)(v3 + 19408) = v5;
      uint64_t v2 = 1;
      *(unsigned char *)(v3 + 319) = 1;
      ++*(_WORD *)(v3 + 384);
      *(_DWORD *)(v3 + 19388) = a1;
      Debug_Log_ExtA_SES(a1);
      return v2;
    }
    EvCrt_v("GN_ExtA_Set_Sig_Env_Sev:    FAILED:  SES_Ind = %d  > GN_EXTA_SES_D_URBAN_CAN, Out of range !", a1);
  }
  return 0;
}

uint64_t GN_ExtA_Set_Altitude(uint64_t a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Altitude"))
  {
    double v2 = *(double *)(a1 + 8);
    if (v2 < -500.0 || v2 > 9000.0)
    {
      EvCrt_v("GN_ExtA_Set_Altitude: FAILED: Altitude = %g <%d or >%d, Out of range!");
    }
    else
    {
      double v3 = *(double *)(a1 + 16);
      if (v3 <= 0.01 || v3 > 650.0)
      {
        EvCrt_v("GN_ExtA_Set_Altitude: FAILED: Sigma_Altitude = %g <=0.01m or >650m, Out of range!");
      }
      else
      {
        if (*(int *)(a1 + 24) < 4)
        {
          uint64_t v6 = p_NA;
          double v7 = (_DWORD *)(p_NA + 325);
          *(unsigned char *)(p_NA + 330) = *(unsigned char *)(p_NA + 329);
          *(_DWORD *)((char *)v7 + 1) = *v7;
          memmove((void *)(v6 + 19448), (const void *)(v6 + 19416), 0xA0uLL);
          uint64_t v4 = 1;
          *(unsigned char *)(v6 + 325) = 1;
          ++*(_WORD *)(v6 + 386);
          long long v8 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)(v6 + 19416) = *(_OWORD *)a1;
          *(_OWORD *)(v6 + 19432) = v8;
          Debug_Log_ExtA_Alt(a1);
          return v4;
        }
        EvCrt_v("GN_ExtA_Set_Altitude: FAILED: Trust = %d > GN_EXTA_TRUST_HIGH, Out of range!");
      }
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_Map_Vector_Seg(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_Map_Vector_Seg")) {
    return 0;
  }
  double v2 = *(double *)(a1 + 8);
  if (v2 < -90.0 || v2 > 90.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Latitude = %g <-90.0 or >90.0, Out of range!");
    return 0;
  }
  double v3 = *(double *)(a1 + 16);
  if (v3 < -180.0 || v3 > 360.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Longitude = %g <-180.0 or >360.0, Out of range!");
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v4 = *(double *)(a1 + 24);
    if (v4 < -500.0 || v4 > 6000.0)
    {
      EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Height = %g <%d or >%d, Out of range!");
      return 0;
    }
  }
  double v5 = *(double *)(a1 + 40);
  if (v5 < -180.0 || v5 > 360.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Direction = %d <-180 or >+360, Out of range!");
    return 0;
  }
  double v6 = *(double *)(a1 + 48);
  if (v6 <= 0.0 || v6 > 9999.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Length = %g < 0 or > 9999, Out of range!");
    return 0;
  }
  double v7 = *(double *)(a1 + 56);
  if (v7 <= 0.0 || v7 > 999.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Width = %g < 0 or > 999, Out of range!");
    return 0;
  }
  uint64_t v8 = p_NA;
  double v9 = (_DWORD *)(p_NA + 331);
  *(unsigned char *)(p_NA + 336) = *(unsigned char *)(p_NA + 335);
  *(_DWORD *)(v8 + 332) = *v9;
  memmove((void *)(v8 + 19680), (const void *)(v8 + 19608), 0x168uLL);
  uint64_t v10 = 1;
  *(unsigned char *)(v8 + 331) = 1;
  ++*(_WORD *)(v8 + 388);
  *(_OWORD *)(v8 + 19608) = *(_OWORD *)a1;
  long long v12 = *(_OWORD *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v13 = *(_OWORD *)(a1 + 16);
  *(void *)(v8 + 19672) = *(void *)(a1 + 64);
  *(_OWORD *)(v8 + 19640) = v12;
  *(_OWORD *)(v8 + 19656) = v11;
  *(_OWORD *)(v8 + 19624) = v13;
  Debug_Log_ExtA_MapV(a1);
  return v10;
}

uint64_t GN_ExtA_Set_Speed_Constraint(uint64_t a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Speed_Constraint"))
  {
    if (*(int *)(a1 + 4) < 86400001)
    {
      double v2 = *(double *)(a1 + 8);
      if (v2 >= 0.0)
      {
        double v3 = *(double *)(a1 + 16);
        if (v3 >= 0.0 && v3 <= 100.0)
        {
          if (v3 >= v2)
          {
            uint64_t v7 = p_NA;
            uint64_t v8 = (_DWORD *)(p_NA + 337);
            *(unsigned char *)(p_NA + 342) = *(unsigned char *)(p_NA + 341);
            *(_DWORD *)((char *)v8 + 1) = *v8;
            memmove((void *)(v7 + 20064), (const void *)(v7 + 20040), 0x78uLL);
            uint64_t v5 = 1;
            *(unsigned char *)(v7 + 337) = 1;
            ++*(_WORD *)(v7 + 390);
            uint64_t v9 = *(void *)(a1 + 16);
            *(_OWORD *)(v7 + 20040) = *(_OWORD *)a1;
            *(void *)(v7 + 20056) = v9;
            Debug_Log_ExtA_SpdC(a1);
            return v5;
          }
          EvCrt_v("GN_ExtA_Set_Speed_Constraint: FAILED: Speed_Lower = %g Speed_Upper = %g , Mis-match!");
        }
        else
        {
          EvCrt_v("GN_ExtA_Set_Speed_Constraint: FAILED: Speed_Upper = %g < 0 or > 100 m/s , Out of range!");
        }
      }
      else
      {
        EvCrt_v("GN_ExtA_Set_Speed_Constraint: FAILED: Speed_Lower = %g < 0, Out of range!");
      }
    }
    else
    {
      EvCrt_v("GN_ExtA_Set_Speed_Constraint: FAILED: Duration = %d , Out of range!");
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_Along_Track_Vel(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_Along_Track_Vel")) {
    return 0;
  }
  if (fabs(*(double *)(a1 + 8)) > 100.0)
  {
    EvCrt_v("GN_ExtA_Set_Along_Track_Vel: FAILED: Velocity = %g > +/-100.0 m/s, Out of range!");
    return 0;
  }
  if (*(double *)(a1 + 16) <= 0.0)
  {
    EvCrt_v("GN_ExtA_Set_Along_Track_Vel: FAILED: RMS_Vel = %g <=0, Out of range!");
    return 0;
  }
  uint64_t v2 = p_NA;
  double v3 = (_DWORD *)(p_NA + 343);
  *(unsigned char *)(p_NA + 348) = *(unsigned char *)(p_NA + 347);
  *(_DWORD *)(v2 + 344) = *v3;
  memmove((void *)(v2 + 20208), (const void *)(v2 + 20184), 0x78uLL);
  uint64_t v4 = 1;
  *(unsigned char *)(v2 + 343) = 1;
  ++*(_WORD *)(v2 + 392);
  uint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(v2 + 20184) = *(_OWORD *)a1;
  *(void *)(v2 + 20200) = v5;
  Debug_Log_ExtA_AT_Vel(a1);
  return v4;
}

uint64_t GN_ExtA_Set_Vertical_Vel(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_Vertical_Vel")) {
    return 0;
  }
  if (fabs(*(double *)(a1 + 8)) > 100.0)
  {
    EvCrt_v("GN_ExtA_Set_Vertical_Vel: FAILED: Velocity = %g > +/-100 m/s, Out of range!");
    return 0;
  }
  if (*(double *)(a1 + 16) <= 0.0)
  {
    EvCrt_v("GN_ExtA_Set_Vertical_Vel: FAILED: RMS_Vel = %g <=0, Out of range!");
    return 0;
  }
  uint64_t v2 = p_NA;
  double v3 = (_DWORD *)(p_NA + 349);
  *(unsigned char *)(p_NA + 354) = *(unsigned char *)(p_NA + 353);
  *(_DWORD *)((char *)v3 + 1) = *v3;
  memmove((void *)(v2 + 20352), (const void *)(v2 + 20328), 0x78uLL);
  uint64_t v4 = 1;
  *(unsigned char *)(v2 + 349) = 1;
  ++*(_WORD *)(v2 + 394);
  uint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(v2 + 20328) = *(_OWORD *)a1;
  *(void *)(v2 + 20344) = v5;
  Debug_Log_ExtA_V_Vel(a1);
  return v4;
}

uint64_t GN_ExtA_Set_User_Heading(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_User_Heading")) {
    return 0;
  }
  if (fabs(*(double *)(a1 + 8)) > 360.0)
  {
    EvCrt_v("GN_ExtA_Set_User_Heading: FAILED: Heading = %g > +/-360.0, Out of range!");
    return 0;
  }
  if (*(double *)(a1 + 16) <= 0.0)
  {
    EvCrt_v("GN_ExtA_Set_User_Heading: FAILED: RMS_Heading = %g <=0, Out of range!");
    return 0;
  }
  uint64_t v2 = p_NA;
  double v3 = (_DWORD *)(p_NA + 355);
  *(unsigned char *)(p_NA + 360) = *(unsigned char *)(p_NA + 359);
  *(_DWORD *)(v2 + 356) = *v3;
  memmove((void *)(v2 + 20496), (const void *)(v2 + 20472), 0x78uLL);
  uint64_t v4 = 1;
  *(unsigned char *)(v2 + 355) = 1;
  ++*(_WORD *)(v2 + 396);
  uint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(v2 + 20472) = *(_OWORD *)a1;
  *(void *)(v2 + 20488) = v5;
  Debug_Log_ExtA_Heading(a1);
  return v4;
}

uint64_t GN_ExtA_Set_Tunnel_End_Point(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_Tunnel_End_Point")) {
    return 0;
  }
  double v2 = *(double *)(a1 + 8);
  if (v2 < -90.0 || v2 > 90.0)
  {
    EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: Latitude = %g <-90.0 or >90.0, Out of range!");
  }
  else
  {
    double v3 = *(double *)(a1 + 16);
    if (v3 < -180.0 || v3 > 360.0)
    {
      EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: Longitude = %g <-180.0 or >360.0, Out of range!");
    }
    else if (*(double *)(a1 + 24) <= 0.0)
    {
      EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: SMaj_Sig = %g <=0.0, Out of range!");
    }
    else if (*(double *)(a1 + 32) <= 0.0)
    {
      EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: SMin_Sig = %g <=0.0, Out of range!");
    }
    else
    {
      if (*(__int16 *)(a1 + 40) < 0xB4)
      {
        if (*(unsigned char *)(a1 + 42))
        {
          double v6 = *(double *)(a1 + 48);
          if (v6 < -500.0 || v6 > 6000.0)
          {
            EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: Height = %g <%d or >%d, Out of range!");
            return 0;
          }
          if (*(double *)(a1 + 56) <= 0.0)
          {
            EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: Height_Sig = %g <=0.0, Out of range!");
            return 0;
          }
        }
        uint64_t v7 = p_NA;
        uint64_t v8 = (_DWORD *)(p_NA + 361);
        *(unsigned char *)(p_NA + 366) = *(unsigned char *)(p_NA + 365);
        *(_DWORD *)((char *)v8 + 1) = *v8;
        memmove((void *)(v7 + 20680), (const void *)(v7 + 20616), 0x140uLL);
        uint64_t v4 = 1;
        *(unsigned char *)(v7 + 361) = 1;
        ++*(_WORD *)(v7 + 398);
        long long v9 = *(_OWORD *)(a1 + 48);
        long long v11 = *(_OWORD *)a1;
        long long v10 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(v7 + 20648) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(v7 + 20664) = v9;
        *(_OWORD *)(v7 + 20616) = v11;
        *(_OWORD *)(v7 + 20632) = v10;
        Debug_Log_ExtA_Tunnel_End_Point(a1);
        return v4;
      }
      EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: SMaj_Brg = %d <0 or >=180, Out of range!");
    }
  }
  return 0;
}

double Comp_SVrange_Sag_Corr(float64x2_t *a1, double *a2, float64x2_t *a3, float64x2_t *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  float64x2_t v4 = vsubq_f64(*a4, *a3);
  float64x2_t v17 = v4;
  double v5 = a4[1].f64[0] - a3[1].f64[0];
  double v18 = v5;
  double v6 = 0.0;
  uint64_t v7 = 2;
  do
  {
    double v6 = v6 + v17.f64[v7] * v17.f64[v7];
    unint64_t v8 = v7-- + 1;
  }
  while (v8 > 1);
  uint64_t v9 = 0;
  double v10 = sqrt(v6);
  *a1 = vdivq_f64(v4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0));
  a1[1].f64[0] = v5 / v10;
  int8x16_t v11 = (int8x16_t)vmulq_f64(*a4, (float64x2_t)xmmword_22BB40A10);
  int8x16_t v15 = vextq_s8(v11, v11, 8uLL);
  uint64_t v16 = 0;
  double v12 = 0.0;
  do
  {
    double v12 = v12 + *(double *)&v15.i64[v9] * v17.f64[v9];
    ++v9;
  }
  while (v9 != 3);
  double v13 = v12 * 0.00000000333564095;
  *a2 = v13;
  return v10 - v13;
}

BOOL lsim23_02GnmStopEarlyStartSession(char a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  double v2 = gnssOsa_Calloc("lsim23_02GnmStopEarlyStartSession", 62, 1, 0x10uLL);
  double v3 = v2;
  if (v2)
  {
    v2[12] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_STOP_IND => GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim23_02GnmStopEarlyStartSession");
      LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(131, 128, 8604163, v3);
  }
  return v3 != 0;
}

uint64_t lsim23_11HandleEcallStartInd()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim23_11HandleEcallStartInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_ECALL_START_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim23_11HandleEcallStartInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  g_LsimEcallOngoing = 1;
  uint64_t v4 = gnssOsa_Calloc("lsim23_01GnmStartEarlyStartSession", 41, 1, 0xCuLL);
  if (v4)
  {
    unsigned __int16 v5 = v4;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_START_IND => GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim23_01GnmStartEarlyStartSession");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
    AgpsSendFsmMsg(131, 128, 8603907, v5);
  }
  else
  {
    lsim23_04SendApiStatus(0, 0);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim23_11HandleEcallStartInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  return 0;
}

size_t lsim23_04SendApiStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim23_04SendApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (g_GnsEcallCallback)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>EcallCB,Api,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim23_04SendApiStatus", a1, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
    g_GnsEcallCallback(a1, a2);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ECALL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "lsim23_04SendApiStatus", 258);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "lsim23_04SendApiStatus");
    return LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  }
  return result;
}

uint64_t lsim23_12HandleEcallStopInd()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim23_12HandleEcallStopInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_ECALL_STOP_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim23_12HandleEcallStopInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  g_LsimEcallOngoing = 0;
  if (!lsim23_02GnmStopEarlyStartSession(1)) {
    lsim23_04SendApiStatus(1, 0);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim23_12HandleEcallStopInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  return 0;
}

uint64_t lsim23_15HandleEarlyStartStartRsp(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim23_15HandleEarlyStartStartRsp");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_START_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim23_15HandleEarlyStartStartRsp");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  lsim23_04SendApiStatus(0, *(unsigned int *)(a1 + 12));
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim23_15HandleEarlyStartStartRsp");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  return 0;
}

uint64_t lsim23_16HandleEarlyStartStopRsp(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim23_16HandleEarlyStartStopRsp");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_STOP_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim23_16HandleEarlyStartStopRsp");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (*(unsigned char *)(a1 + 16)) {
    lsim23_04SendApiStatus(1, *(unsigned int *)(a1 + 12));
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim23_16HandleEarlyStartStopRsp");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  return 0;
}

size_t lsim23_21EcallCbInit(size_t result)
{
  unsigned __int16 v1 = (void *)result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsEcallCallback)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim23_21EcallCbInit", 513);
      size_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsEcallCallbacuint64_t k = v1;
    return result;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim23_21EcallCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

uint64_t GNS_EcallInitialize(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_EcallInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = 1;
  unsigned __int16 v5 = gnssOsa_Calloc("GNS_EcallInitialize", 224, 1, 0x18uLL);
  if (!v5) {
    return 6;
  }
  v5[3] = 1;
  *((void *)v5 + 2) = a1;
  AgpsSendFsmMsg(131, 131, 8635139, v5);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_EcallInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  return v4;
}

uint64_t GNS_EcallStart(char a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_EcallStart");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("GNS_EcallStart", 256, 1, 0x10uLL);
  if (v4)
  {
    v4[12] = a1;
    AgpsSendFsmMsg(131, 131, 8631299, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "LSM", 73, "GNS_EcallStart");
      uint64_t v7 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v6, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_EcallStart");
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
    }
    return 6;
  }
  return v7;
}

uint64_t GNS_EcallStop(char a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_EcallStop");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("GNS_EcallStop", 286, 1, 0x10uLL);
  if (v4)
  {
    v4[12] = a1;
    AgpsSendFsmMsg(131, 131, 8631555, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "LSM", 73, "GNS_EcallStop");
      uint64_t v7 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v6, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_EcallStop");
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
    }
    return 6;
  }
  return v7;
}

uint64_t Comp_CurrState(unsigned int a1, int a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  int v6 = *(_DWORD *)(a3 + 184);
  if (v6)
  {
    *(unsigned char *)(a4 + 132) = *(unsigned char *)(a3 + 180);
    *(_DWORD *)(a4 + 128) = *(_DWORD *)(a3 + 176);
    *(_DWORD *)(a4 + 120) = v6;
    *(_WORD *)(a4 + 124) = *(_WORD *)(a3 + 166);
    double v7 = a5 - (double)(*(_DWORD *)(a3 + 160) + 604800 * (*(__int16 *)(a3 + 164) - a2));
    if (a6 > 0.1 || a6 < -0.1) {
      double v7 = v7 + a6 / -299792458.0 - *(double *)(a3 + 96);
    }
    *(double *)a4 = v7;
    double v8 = fabs(v7);
    if (v8 >= (double)a1)
    {
      return 0;
    }
    else
    {
      uint64_t v9 = 0;
      double v10 = v7 * v7;
      double v11 = v7 * v7 * 0.5;
      do
      {
        uint64_t v12 = (double *)(a4 + 32 + v9);
        *(v12 - 3) = *(double *)(a3 + v9)
                   + *(double *)(a3 + 72 + v9 - 48) * v7
                   + *(double *)(a3 + 72 + v9 - 24) * v11
                   + *(double *)(a3 + 72 + v9) * (v7 * v11 * 0.333333333);
        *uint64_t v12 = *(double *)(a3 + 72 + v9 - 48) + *(double *)(a3 + 72 + v9 - 24) * v7 + *(double *)(a3 + 72 + v9) * v11;
        v9 += 8;
      }
      while (v9 != 24);
      double v13 = *(double *)(a3 + 104);
      double v14 = *(double *)(a3 + 96) + v7 * v13;
      *(double *)(a4 + 56) = v14;
      *(double *)(a4 + 64) = v13;
      long long v15 = *(_OWORD *)(a3 + 136);
      long long v16 = *(_OWORD *)(a3 + 120);
      *(void *)(a4 + 112) = *(void *)(a3 + 152);
      *(_OWORD *)(a4 + 80) = v16;
      *(_OWORD *)(a4 + 96) = v15;
      *(double *)(a4 + 56) = v14 - *(double *)(a4 + 80);
      if (v8 <= 30.0) {
        double v17 = *(double *)(a3 + 112);
      }
      else {
        double v17 = *(double *)(a3 + 112) + v10 * (v10 * 8.0e-10 + 0.00003) * (v10 * (v10 * 8.0e-10 + 0.00003));
      }
      *(double *)(a4 + 72) = v17;
      return 1;
    }
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a4 + 125) = 0;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

void LcsSuplGlueLayer::~LcsSuplGlueLayer(LcsSuplGlueLayer *this)
{
  *(void *)this = &unk_26DF190F8;
  *((void *)this + 1) = &unk_26DF19160;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
}

{
  uint64_t vars8;

  *(void *)this = &unk_26DF190F8;
  *((void *)this + 1) = &unk_26DF19160;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;

  JUMPOUT(0x230F4E5D0);
}

uint64_t LcsSuplGlueLayer::GetInstance(LcsSuplGlueLayer *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (LcsSuplGlueLayer::GetInstance(void)::pred_lcsSuplglueLayer != -1) {
    dispatch_once(&LcsSuplGlueLayer::GetInstance(void)::pred_lcsSuplglueLayer, &__block_literal_global_6);
  }
  uint64_t result = LcsSuplGlueLayer::m_suplgluelayer_handle;
  if (!LcsSuplGlueLayer::m_suplgluelayer_handle)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GetInstance", "GetInstance");
      LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GetInstance", "LcsSuplGlueLayer.cpp", 69, "false && \"Memory allocation failure\"");
  }
  return result;
}

void *___ZN16LcsSuplGlueLayer11GetInstanceEv_block_invoke()
{
  uint64_t result = operator new(0x30uLL, MEMORY[0x263F8C180]);
  if (result)
  {
    *uint64_t result = &unk_26DF190F8;
    result[1] = &unk_26DF19160;
    *((_DWORD *)result + 6) = 0;
    *((_DWORD *)result + 4) = 0;
    result[4] = 0;
    result[5] = 0;
  }
  LcsSuplGlueLayer::m_suplgluelayer_handle = (uint64_t)result;
  return result;
}

uint64_t LcsSuplGlueLayer::GenerateRequestId(LcsSuplGlueLayer *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unsigned int v2 = *((_DWORD *)this + 4);
  if (v2 <= 0xFE) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  *((_DWORD *)this + 4) = v3;
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: new requestID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 73, "GenerateRequestId", *((_DWORD *)this + 4));
    LbsOsaTrace_WriteLog(0x12u, __str, v5, 4, 1);
  }
  return *((unsigned int *)this + 4);
}

uint64_t LcsSuplGlueLayer::ConnectReq(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4)
  {
LABEL_4:
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "ConnectReq", 2052, a2);
    LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
    return 0;
  }
  while (*(_DWORD *)v4 != a2)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (!v4) {
      goto LABEL_4;
    }
  }
  unsigned __int8 v23 = -1;
  memset(v24, 0, sizeof(v24));
  int v25 = 0;
  char v26 = 0;
  __int16 v27 = -1;
  char v28 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: requestID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "SPL", 73, "ConnectReq", a2);
    LbsOsaTrace_WriteLog(0x12u, __str, v11, 4, 1);
  }
  switch(*a3)
  {
    case 0u:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AddressType is Not set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "ConnectReq", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v13, 0, 1);
      }
      break;
    case 1u:
      int v16 = 2;
      goto LABEL_17;
    case 2u:
      int v16 = 3;
      goto LABEL_17;
    case 3u:
      int v16 = 1;
LABEL_17:
      int v25 = v16;
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TCP/IP AddressType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "ConnectReq", 515, *a3);
        LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
      }
      break;
  }
  if (((char)a3[31] & 0x80000000) == 0)
  {
    double v17 = a3 + 8;
    size_t v18 = a3[31];
    if (!a3[31]) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  double v17 = (const void *)*((void *)a3 + 1);
  size_t v18 = *((void *)a3 + 2);
  if (v18) {
LABEL_20:
  }
    memmove(v24, v17, v18);
LABEL_21:
  __int16 v27 = *((_WORD *)a3 + 16);
  char v28 = 0;
  Trace_GN_SUPL_Connect_Req_Parms((uint64_t)&v23);
  if (!GN_SUPL_Connect_Req_Out(*(unsigned int *)(v4 + 16), &v23))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Connection rejected\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "SPL", 69, "ConnectReq", 2305);
    LbsOsaTrace_WriteLog(0x12u, __str, v22, 0, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Connection accepted\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "SPL", 73, "ConnectReq");
    LbsOsaTrace_WriteLog(0x12u, __str, v20, 4, 1);
  }
  return 1;
}

uint64_t non-virtual thunk to'LcsSuplGlueLayer::ConnectReq(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1 - 8;

  return LcsSuplGlueLayer::ConnectReq(v3, a2, a3);
}

void LcsSuplGlueLayer::MeasurePositionRsp(uint64_t a1, __int16 *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  LcsFunctionEntryExitTrace::LcsFunctionEntryExitTrace((LcsFunctionEntryExitTrace *)v48, 184, "MeasurePositionRsp");
  uint64_t v8 = *(void *)(a1 + 40);
  if (!v8)
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 69, "MeasurePositionRsp", 2052, a4);
      LbsOsaTrace_WriteLog(0x12u, __str, v10, 0, 1);
    }
    goto LABEL_54;
  }
  while (*(_DWORD *)v8 != a4)
  {
    uint64_t v8 = *(void *)(v8 + 8);
    if (!v8) {
      goto LABEL_4;
    }
  }
  LODWORD(v40) = 0;
  *((void *)&v40 + 1) = 0;
  *(void *)&long long v41 = 0;
  *(void *)((char *)&v41 + 6) = 0;
  HIWORD(v41) = -1;
  char v42 = 0;
  int v43 = 0;
  int v47 = 0;
  long long v45 = 0uLL;
  uint64_t v44 = -1;
  __int16 v46 = 0;
  if (*a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: resultCode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 73, "MeasurePositionRsp", *a2);
      LbsOsaTrace_WriteLog(0x12u, __str, v12, 4, 1);
    }
    int v13 = (unsigned __int16)*a2;
    if (v13 == 65520)
    {
      int v23 = *((unsigned __int8 *)a2 + 2);
      if (v23 == 15)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v28 = mach_continuous_time();
          unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL Positioning Not Permitted\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "SPL", 69, "MeasurePositionRsp", 770);
          LbsOsaTrace_WriteLog(0x12u, __str, v29, 0, 1);
        }
        uint64_t v16 = 3;
      }
      else if (v23 == 6)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL Pos Method Failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "SPL", 69, "MeasurePositionRsp", 2306);
          LbsOsaTrace_WriteLog(0x12u, __str, v25, 0, 1);
        }
        uint64_t v16 = 1;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v30 = mach_continuous_time();
          unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Server Error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "SPL", 69, "MeasurePositionRsp", 2307);
          LbsOsaTrace_WriteLog(0x12u, __str, v31, 0, 1);
        }
        uint64_t v16 = 4;
      }
    }
    else if (v13 == 65519)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Unknown\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "MeasurePositionRsp", 2305);
        LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
      }
      uint64_t v16 = 8;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v26 = mach_continuous_time();
        unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx result code\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "SPL", 69, "MeasurePositionRsp", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v27, 0, 1);
      }
      uint64_t v16 = 0;
    }
    DWORD1(v40) = 7;
    goto LABEL_51;
  }
  DWORD1(v40) = 7;
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Fix type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "SPL", 73, "MeasurePositionRsp", *a3);
    LbsOsaTrace_WriteLog(0x12u, __str, v18, 4, 1);
  }
  if (*a3) {
    int v19 = 2 * (*a3 == 1);
  }
  else {
    int v19 = 1;
  }
  DWORD2(v40) = v19;
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: shape,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "SPL", 68, "MeasurePositionRsp", a3[1]);
    LbsOsaTrace_WriteLog(0x12u, __str, v21, 5, 1);
  }
  if (!a3[1])
  {
    HIDWORD(v40) = 16;
    if (a3[2] == 1)
    {
      int v22 = 2;
    }
    else
    {
      if (a3[2])
      {
        LODWORD(v41) = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v33 = mach_continuous_time();
          unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx hemisphere\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "SPL", 69, "MeasurePositionRsp", 770);
          LbsOsaTrace_WriteLog(0x12u, __str, v34, 0, 1);
        }
LABEL_42:
        *(void *)((char *)&v41 + 4) = *((void *)a3 + 1);
        HIDWORD(v41) = *((_DWORD *)a3 + 4);
        char v42 = -1;
        if (a3[3] == 1)
        {
          int v32 = 2;
        }
        else
        {
          if (a3[3])
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v38 = mach_continuous_time();
              unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Altitude direction\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "SPL", 69, "MeasurePositionRsp", 770);
              LbsOsaTrace_WriteLog(0x12u, __str, v39, 0, 1);
            }
            goto LABEL_49;
          }
          int v32 = 1;
        }
        int v43 = v32;
LABEL_49:
        LOWORD(v44) = *(_WORD *)(a3 + 21);
        *(double *)&uint8x8_t v35 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        LODWORD(v40) = (unint64_t)v35;
        DWORD1(v40) = 1;
        WORD2(v45) = *((_WORD *)a3 + 12);
        v35.i32[0] = *(_DWORD *)(a3 + 26);
        *(void *)((char *)&v45 + 6) = vmovl_u8(v35).u64[0];
        HIWORD(v45) = a3[30];
        __int16 v46 = *((_WORD *)a3 + 16);
        int v47 = v40;
        goto LABEL_50;
      }
      int v22 = 1;
    }
    LODWORD(v41) = v22;
    goto LABEL_42;
  }
LABEL_50:
  uint64_t v16 = 2;
LABEL_51:
  Trace_GN_SUPL_Position_Resp_Out(*(_DWORD *)(v8 + 16), v16, (uint64_t)&v40, 1);
  if ((GN_SUPL_Position_Resp_Out(*(_DWORD *)(v8 + 16), v16, &v40) & 1) == 0
    && LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v36 = mach_continuous_time();
    unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GN_SUPL_Position_Resp_Out call failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "SPL", 69, "MeasurePositionRsp", 770);
    LbsOsaTrace_WriteLog(0x12u, __str, v37, 0, 1);
  }
LABEL_54:
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace(v48);
}

void sub_22B9AEF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace((void **)va);
  _Unwind_Resume(a1);
}

size_t LcsSuplGlueLayer::PushSessionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: requestID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 73, "PushSessionInfo", *(_DWORD *)(a2 + 16));
    size_t result = LbsOsaTrace_WriteLog(0x12u, __str, v6, 4, 1);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  while (v7)
  {
    uint64_t v8 = v7;
    uint64_t v7 = *(void *)(v7 + 8);
    if (!v7)
    {
      *(void *)(v8 + 8) = a2;
      *(void *)(a2 + 8) = 0;
      return result;
    }
  }
  *(void *)(a2 + 8) = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = a2;
  return result;
}

size_t LcsSuplGlueLayer::DeleteSessionInfo(LcsSuplGlueLayer *this, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: requestID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 73, "DeleteSessionInfo", a2);
    LbsOsaTrace_WriteLog(0x12u, __str, v5, 4, 1);
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    uint64_t v7 = (char *)this + 24;
    uint64_t v8 = *((void *)this + 5);
    while (*(_DWORD *)v8 != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)v6 != a2)
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        goto LABEL_12;
      }
    }
    LcsLinkedList::Remove((uint64_t)v7, v6);
LABEL_12:
    *(void *)(v8 + 8) = 0;
    return MEMORY[0x230F4E5D0](v8, 0x1020C40903548AELL);
  }
  else
  {
LABEL_7:
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Session Deletion Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "SPL", 87, "DeleteSessionInfo", 2050);
      return LbsOsaTrace_WriteLog(0x12u, __str, v11, 2, 1);
    }
  }
  return result;
}

uint64_t LcsSuplGlueLayer::DisconnectReq(LcsSuplGlueLayer *this, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_4;
      }
    }
    Trace_GN_SUPL_Disconnect_Req_Out(*(_DWORD *)(v3 + 16));
    GN_SUPL_Disconnect_Req_Out(*(_DWORD *)(v3 + 16));
    return LcsSuplGlueLayer::DeleteSessionInfo(this, a2);
  }
  else
  {
LABEL_4:
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "DisconnectReq", 2052, a2);
      return LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'LcsSuplGlueLayer::DisconnectReq(LcsSuplGlueLayer *this, int a2)
{
  unsigned int v2 = (LcsSuplGlueLayer *)((char *)this - 8);

  return LcsSuplGlueLayer::DisconnectReq(v2, a2);
}

uint64_t LcsSuplGlueLayer::SendDataReq(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: requestID,%u,buflen,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 73, "SendDataReq", a2, *(void *)(a3 + 8) - *(void *)a3);
    LbsOsaTrace_WriteLog(0x12u, __str, v7, 4, 1);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    while (*(_DWORD *)v8 != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_6;
      }
    }
    Trace_GN_SUPL_PDU_Delivery_Out(*(_DWORD *)(v8 + 16), (unsigned __int16)(*(_WORD *)(a3 + 8) - *(void *)a3), *(unsigned __int8 **)a3);
    return GN_SUPL_PDU_Delivery_Out(*(_DWORD *)(v8 + 16), (unsigned __int16)(*(_WORD *)(a3 + 8) - *(void *)a3), *(unsigned __int8 **)a3);
  }
  else
  {
LABEL_6:
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 69, "SendDataReq", 2052, a2);
      LbsOsaTrace_WriteLog(0x12u, __str, v12, 0, 1);
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'LcsSuplGlueLayer::SendDataReq(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a1 - 8;

  return LcsSuplGlueLayer::SendDataReq(v3, a2, a3);
}

uint64_t LcsSuplGlueLayer::GetAidMask(SuplUtils *a1, int a2, unsigned __int8 a3, unsigned int a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a1 + 5);
  if (v4)
  {
    while (*(_DWORD *)v4 != a2)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        goto LABEL_4;
      }
    }
    int v10 = 2;
    char v23 = 2;
    uint64_t Instance = (unsigned char *)SuplUtils::GetInstance(a1);
    SuplUtils::FillSetCapabilities(Instance, (uint64_t)v22, a3, 0);
    if (v23)
    {
      if (v23 == 1)
      {
        int v10 = 3;
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No pref method set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 87, "ConvertPosMethod", 770);
        int v10 = 1;
        LbsOsaTrace_WriteLog(0x12u, __str, v13, 2, 1);
      }
      else
      {
        int v10 = 1;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PrefMethod,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 73, "ConvertPosMethod", v10);
      LbsOsaTrace_WriteLog(0x12u, __str, v15, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPL ConstellationSupport,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "SPL", 73, "ConvertConstellation", a4);
      LbsOsaTrace_WriteLog(0x12u, __str, v17, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnssBitMask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "SPL", 73, "ConvertConstellation", a4 < 2);
      LbsOsaTrace_WriteLog(0x12u, __str, v19, 4, 1);
    }
    BOOL v20 = a4 < 2;
    Trace_GN_SUPL_AidRequest_Out(*(_DWORD *)(v4 + 16), 7000, v10, v20);
    return (__int16)(GN_SUPL_AidRequest_Out(*(_DWORD *)(v4 + 16), 0x1B58u, v10, v20) - 1);
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL session is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "GetAidMask", 2052);
      LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
    }
    return -1;
  }
}

uint64_t LcsSuplGlueLayer::ProcessSuplPosPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a3) {
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3) {
    goto LABEL_10;
  }
  while (*(_DWORD *)v3 != *(_DWORD *)(a3 + 28))
  {
    uint64_t v3 = *(void *)(v3 + 8);
    if (!v3) {
      goto LABEL_10;
    }
  }
  int v5 = *(unsigned __int8 *)(a3 + 24) - 1 < 3 ? (*(unsigned char *)(a3 + 24) - 1) + 1 : 0;
  BOOL v6 = *(unsigned __int8 *)(a3 + 32) == 1;
  Trace_GN_SUPL_PPDU_Decode_Out(*(_DWORD *)(v3 + 16), (unsigned __int16)(*(_WORD *)(a3 + 8) - *(void *)a3), *(void *)a3, v5, v6, v6);
  BOOL v7 = GN_SUPL_PPDU_Decode_Out(*(_DWORD *)(v3 + 16), (unsigned __int16)(*(_WORD *)(a3 + 8) - *(void *)a3), *(const void **)a3, v5, v6, v6);
  __int16 v8 = 0;
  if (!v7)
  {
LABEL_10:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 69, "ProcessSuplPosPayload", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v10, 0, 1);
    }
    return -1;
  }
  return v8;
}

uint64_t LcsSuplGlueLayer::ProtocolSessionEnd(uint64_t a1, int a2, int a3, unsigned __int8 *a4)
{
  uint64_t v4 = a4;
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    int v9 = a3;
    __int16 v10 = 0;
    int v11 = 0;
    int v37 = 0;
    goto LABEL_7;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: shape,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 73, "ProtocolSessionEnd", v4[1]);
    LbsOsaTrace_WriteLog(0x12u, __str, v8, 4, 1);
  }
  if (v4[1])
  {
    int v9 = a3;
    __int16 v10 = 0;
    int v11 = 0;
    int v37 = 0;
    LOBYTE(v4) = 0;
LABEL_7:
    uint64_t v36 = 0;
    int v12 = 7;
    uint64_t v13 = 255;
    unint64_t v14 = -256;
    char v15 = -1;
    uint64_t v38 = 0;
    char v16 = -1;
    goto LABEL_27;
  }
  if (*v4)
  {
    if (*v4 == 1)
    {
      unsigned int v17 = 2;
    }
    else
    {
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      unsigned int v17 = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Fixtype,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "SPL", 69, "ProtocolSessionEnd", 770, *v4);
        LbsOsaTrace_WriteLog(0x12u, __str, v20, 0, 1);
        unsigned int v17 = 0;
      }
    }
  }
  else
  {
    unsigned int v17 = 1;
  }
  if (v4[2])
  {
    if (v4[2] == 1)
    {
      int v21 = 2;
    }
    else
    {
      unsigned int v22 = v17;
      int v23 = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      unsigned int v17 = v22;
      int v21 = 0;
      if (v23)
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx hemisphere,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "SPL", 69, "ProtocolSessionEnd", 770, v4[2]);
        LbsOsaTrace_WriteLog(0x12u, __str, v25, 0, 1);
        unsigned int v17 = v22;
        int v21 = 0;
      }
    }
  }
  else
  {
    int v21 = 1;
  }
  __int16 v34 = *((_WORD *)v4 + 8);
  int v35 = v21;
  char v32 = v4[18];
  char v33 = v4[19];
  uint64_t v38 = *((void *)v4 + 1);
  int v9 = a3;
  if (v4[3])
  {
    if (v4[3] == 1)
    {
      int v26 = 2;
    }
    else
    {
      unsigned int v27 = v17;
      int v28 = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      unsigned int v17 = v27;
      int v26 = 0;
      if (v28)
      {
        bzero(__str, 0x410uLL);
        uint64_t v29 = mach_continuous_time();
        unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Altitude direction,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "SPL", 69, "ProtocolSessionEnd", 770, v4[3]);
        LbsOsaTrace_WriteLog(0x12u, __str, v30, 0, 1);
        unsigned int v17 = v27;
        int v26 = 0;
      }
    }
  }
  else
  {
    int v26 = 1;
  }
  int v37 = v26;
  uint64_t v13 = v4[21];
  unint64_t v14 = (v4[22] << 8) | 0xFFFFFFFFFFFF0000;
  uint64_t v36 = v17 | 0x1000000000;
  int v12 = 1;
  LOBYTE(v4) = -1;
  __int16 v10 = v34;
  int v11 = v35;
  char v16 = v32;
  char v15 = v33;
LABEL_27:
  Trace_GN_SUPL_PPDU_SessionEnd_Out(a2, v9);
  v39[0] = 0;
  v39[1] = v12;
  uint64_t v40 = v36;
  int v41 = v11;
  uint64_t v42 = v38;
  __int16 v43 = v10;
  char v44 = v16;
  char v45 = v15;
  char v46 = (char)v4;
  int v47 = v37;
  unint64_t v48 = v13 | v14;
  int v49 = 0;
  return GN_SUPL_PPDU_SessionEnd_Out(a2, v9, (uint64_t)v39);
}

uint64_t LcsSuplGlueLayer::ProcessLppCapsReq(LcsSuplGlueLayer *this, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_4;
      }
    }
    GN_SUPL_PPDU_PduRequest_Out(*(_DWORD *)(v3 + 16), 3, 1, 0, 0, 0);
    return 0;
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 69, "ProcessLppCapsReq", 2052, a2);
      LbsOsaTrace_WriteLog(0x12u, __str, v5, 0, 1);
    }
    return -1;
  }
}

uint64_t LcsSuplGlueLayer::ProcessLppADReq(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  int v12 = v7;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v13 = *(void *)(v6 + 40);
  if (!v13)
  {
LABEL_5:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(&__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      size_t v18 = (unsigned __int16)snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "SPL", 69, "ProcessLppADReq", 2052, v12);
      p_str = (char *)&__str;
LABEL_57:
      LbsOsaTrace_WriteLog(0x12u, p_str, v18, 0, 1);
      return -1;
    }
    return -1;
  }
  char v14 = v11;
  uint64_t v15 = v10;
  int v16 = v8;
  while (*(_DWORD *)v13 != v7)
  {
    uint64_t v13 = *(void *)(v13 + 8);
    if (!v13) {
      goto LABEL_5;
    }
  }
  LODWORD(v44[0]) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v43 = 0;
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  v44[1] = &v43;
  if (*(_WORD *)v9 == 1)
  {
    int v20 = *(_DWORD *)(v9 + 8);
    if ((v20 & 0x20) != 0)
    {
      LOBYTE(v43) = 1;
      if ((v20 & 0x10) == 0)
      {
LABEL_10:
        if ((v20 & 4) == 0) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
    }
    else if ((v20 & 0x10) == 0)
    {
      goto LABEL_10;
    }
    BYTE1(v43) = 1;
    if ((v20 & 4) == 0)
    {
LABEL_12:
      BYTE3(v43) = 1;
      *(void *)&long long v45 = v58;
      *(_DWORD *)uint64_t v58 = 1;
      if ((v20 & 2) != 0)
      {
        v58[4] = 1;
        if ((v20 & 0x80) == 0)
        {
LABEL_14:
          if ((v20 & 1) == 0) {
            goto LABEL_15;
          }
          goto LABEL_39;
        }
      }
      else if ((v20 & 0x80) == 0)
      {
        goto LABEL_14;
      }
      v58[5] = 1;
      if ((v20 & 1) == 0)
      {
LABEL_15:
        if ((v20 & 8) == 0) {
          goto LABEL_16;
        }
        goto LABEL_40;
      }
LABEL_39:
      v58[6] = 1;
      if ((v20 & 8) == 0)
      {
LABEL_16:
        if ((v20 & 0x40) == 0) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
LABEL_40:
      v58[7] = 1;
      if ((v20 & 0x40) == 0)
      {
LABEL_18:
        *(_WORD *)&v58[16] = *(_WORD *)(v9 + 12);
        v58[18] = *(unsigned char *)(v9 + 14);
        v58[19] = *(unsigned char *)(v9 + 64);
        v58[20] = *(unsigned char *)(v9 + 15);
        uint64_t v21 = v58[20];
        if (v58[20])
        {
          uint64_t v22 = 0;
          uint64_t v23 = *(void *)(v9 + 16);
          unint64_t v24 = *(void *)(v9 + 24) - v23;
          uint64_t v25 = *(void *)(v9 + 40);
          if (*(void *)(v9 + 48) - v25 < v24) {
            unint64_t v24 = *(void *)(v9 + 48) - v25;
          }
          if (v24 >= 0x40) {
            unint64_t v24 = 64;
          }
          do
          {
            if (v24 == v22) {
              break;
            }
            v58[v22 + 21] = *(unsigned char *)(v23 + v22);
            *((_WORD *)v59 + v22) = *(unsigned __int8 *)(v25 + v22);
            ++v22;
          }
          while (v21 != v22);
        }
        goto LABEL_25;
      }
LABEL_17:
      v58[8] = 1;
      goto LABEL_18;
    }
LABEL_11:
    BYTE2(v43) = 1;
    goto LABEL_12;
  }
LABEL_25:
  uint64_t __str = 0;
  char v50 = -1;
  memset_s(v51, 0x1840uLL, 0, 0x1840uLL);
  HIDWORD(__str) = 5;
  char v50 = v14;
  __int16 v26 = *(_WORD *)(v15 + 88);
  __int16 v53 = v26;
  unsigned int v27 = *(unsigned __int8 **)(v15 + 64);
  if (*(void *)(v15 + 72) - (void)v27 != 4)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(v48, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v33 = snprintf(v48, 0x40FuLL, "%10u %s%c %s: #%04hx CellIdentity Invalid\n");
LABEL_56:
      size_t v18 = v33;
      p_str = v48;
      goto LABEL_57;
    }
    return -1;
  }
  unsigned int v52 = 16 * v27[3];
  v52 += v27[2] << 8;
  v52 += v27[1] << 16;
  unsigned int v52 = (v52 + (*v27 << 24)) >> 4;
  if (*(unsigned char *)(v15 + 8) == 1)
  {
    int v28 = *(unsigned __int8 **)(v15 + 16);
    if (*(void *)(v15 + 24) - (void)v28 == 3) {
      v51[0] = 100 * *v28 + 10 * v28[1] + v28[2];
    }
  }
  uint64_t v29 = *(unsigned __int8 **)(v15 + 40);
  uint64_t v30 = *(void *)(v15 + 48) - (void)v29;
  if (v30 == 3)
  {
    __int16 v31 = 100 * *v29 + 10 * v29[1];
    uint64_t v32 = 2;
    goto LABEL_43;
  }
  if (v30 != 2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(v48, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v33 = snprintf(v48, 0x40FuLL, "%10u %s%c %s: #%04hx MNC Invalid\n");
      goto LABEL_56;
    }
    return -1;
  }
  __int16 v31 = 10 * *v29;
  uint64_t v32 = 1;
LABEL_43:
  v51[1] = v31 + v29[v32];
  if (*(unsigned char *)v15 == 1) {
    char v34 = *(unsigned char *)(v15 + 120);
  }
  else {
    char v34 = -1;
  }
  char v55 = v34;
  if (*(unsigned char *)(v15 + 1) == 1) {
    char v35 = *(unsigned char *)(v15 + 121);
  }
  else {
    char v35 = -1;
  }
  char v56 = v35;
  if (*(unsigned char *)(v15 + 2) == 1) {
    __int16 v36 = *(_WORD *)(v15 + 122);
  }
  else {
    __int16 v36 = -1;
  }
  __int16 v57 = v36;
  int v37 = *(unsigned __int8 **)(v15 + 96);
  int v38 = *v37;
  int v54 = v38 << 8;
  int v54 = v37[1] | (v38 << 8);
  LODWORD(__str) = 2;
  if (v16 == 8)
  {
    *(_WORD *)unint64_t v48 = v26;
    Trace_GN_SUPL_PPDU_PduRequest_Out(*(_DWORD *)(v13 + 16), 3, 2, (uint64_t)v44, (uint64_t)v48, (uint64_t)&__str);
    int v39 = *(_DWORD *)(v13 + 16);
    uint64_t v40 = v48;
  }
  else
  {
    Trace_GN_SUPL_PPDU_PduRequest_Out(*(_DWORD *)(v13 + 16), 3, 2, (uint64_t)v44, 0, (uint64_t)&__str);
    int v39 = *(_DWORD *)(v13 + 16);
    uint64_t v40 = 0;
  }
  GN_SUPL_PPDU_PduRequest_Out(v39, 3, 2, v44, (uint64_t)v40, (uint64_t)&__str);
  return 0;
}

uint64_t LcsSuplGlueLayer::SendSuplMsgStatus(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_EventNotif_Out sessionId,%u,suplMsg,%u,posMethod,%u,suplEndCause,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 73, "SendSuplMsgStatus", a2, a3, a4, a5);
    LbsOsaTrace_WriteLog(0x12u, __str, v12, 4, 1);
  }
  if (a6 && LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status %u, Sign of Lat,%u,lat,%u,long,%d,Alt,%u,Dr of Al,%u,UnMjraxis,%u,UnMnraxis,%u,Alt Uncer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "SPL", 73, "SendSuplMsgStatus", *(_DWORD *)(a6 + 4), *(_DWORD *)(a6 + 16), *(_DWORD *)(a6 + 20), *(_DWORD *)(a6 + 24), *(unsigned __int16 *)(a6 + 28), *(_DWORD *)(a6 + 36), *(unsigned __int8 *)(a6 + 30), *(unsigned __int8 *)(a6 + 31), *(unsigned __int8 *)(a6 + 40));
    LbsOsaTrace_WriteLog(0x12u, __str, v14, 4, 1);
  }
  return GN_SUPL_EventNotif_Out(a2, 1, 0, a3, a4, a5, (long long *)a6);
}

uint64_t LcsSuplGlueLayer::SendSuplConnectionStatus(uint64_t a1, int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_EventNotif_Out sessionId,%u,statusCode,%u, InvalidSuplMsg NoPosMeth NoEndCause\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 73, "SendSuplConnectionStatus", a2, a3);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 4, 1);
  }
  return GN_SUPL_EventNotif_Out(a2, 2, a3, 0, 0, 0, 0);
}

BOOL NK_Predict_State(double *a1, double *a2)
{
  uint64_t v4 = 0;
  v14[1] = *(double *)MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a2;
  int v7 = *(_DWORD *)a1 - *(_DWORD *)a2;
  if (v7 <= 1) {
    int v7 = 1;
  }
  double v8 = (double)v7 * 0.001;
  a2[4] = v8;
  *((_DWORD *)a2 + 6) = v6;
  *(_DWORD *)a2 = v5;
  a2[1] = a1[3];
  *((_DWORD *)a2 + 4) = *((_DWORD *)a1 + 3);
  *((_WORD *)a2 + 11) = *((_WORD *)a1 + 9);
  *((unsigned char *)a2 + 20) = *((unsigned char *)a1 + 17);
  *((_DWORD *)a2 + 37) = *((_DWORD *)a1 + 25);
  *((unsigned char *)a2 + 152) = *((unsigned char *)a1 + 104);
  *((_WORD *)a2 + 77) = *((_WORD *)a1 + 53);
  *((_WORD *)a2 + 78) = *((_WORD *)a1 + 54);
  a2[20] = a1[14];
  do
  {
    a2[v4 + 5] = a2[v4 + 5] + a2[v4 + 8] * v8;
    ++v4;
  }
  while (v4 != 3);
  uint64_t v9 = a2 + 14;
  v14[0] = 0.0;
  if (!R8_EQ(a2 + 14, v14)) {
    a2[14] = a2[14] + a2[17] * v8;
  }
  uint64_t v10 = a2 + 15;
  v14[0] = 0.0;
  if (!R8_EQ(a2 + 15, v14)) {
    a2[15] = a2[15] + a2[17] * v8;
  }
  uint64_t v11 = a2 + 16;
  v14[0] = 0.0;
  BOOL result = R8_EQ(a2 + 16, v14);
  if (!result) {
    a2[16] = a2[16] + a2[17] * v8;
  }
  int v13 = *((_DWORD *)a1 + 11);
  if (v13)
  {
    v14[0] = 0.0;
    if (!R8_EQ(a2 + 14, v14)) {
      *uint64_t v9 = *v9 + (double)v13 * -0.001;
    }
    v14[0] = 0.0;
    if (!R8_EQ(v10, v14)) {
      *uint64_t v10 = *v10 + (double)v13 * -0.001;
    }
    v14[0] = 0.0;
    BOOL result = R8_EQ(v11, v14);
    if (!result) {
      *uint64_t v11 = *v11 + (double)v13 * -0.001;
    }
  }
  return result;
}

size_t SuplRrlpExecutePosRsp(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "SuplRrlpExecutePosRsp");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  char v27 = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RRLP Sub Msg Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 65, "SuplRrlpExecutePosRsp", *(unsigned __int8 *)(a1 + 1));
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 1, 1);
  }
  int v6 = *(unsigned __int8 *)(a1 + 1);
  if (v6 == 2)
  {
    uint64_t v10 = **(unsigned __int16 ***)(a1 + 8);
    if (!v10) {
      goto LABEL_17;
    }
    unsigned int v11 = rrl_process_measure_response_stand_alone(v10, &v27, (uint64_t)&v25);
    goto LABEL_14;
  }
  if (v6 == 1)
  {
    unsigned int v11 = rrl_process_assistance_data_request(**(void **)(a1 + 8), *(unsigned char *)(*(void *)(a1 + 8) + 8), &v27, (uint64_t)&v25);
LABEL_14:
    unsigned int v9 = v11;
LABEL_20:
    int v21 = 0;
    uint64_t v22 = 0;
    if (v27 && v9 <= 1)
    {
      char v23 = 0;
      int v21 = v25;
      uint64_t v22 = v26;
    }
    else
    {
      char v23 = 1;
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Error in encoding Rsp msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 69, "SuplRrlpExecutePosRsp", 770);
        LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
      }
    }
    int v24 = *(_DWORD *)(a1 + 16);
    HandleRRLPResponse((uint64_t)&v21);
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Measure Position Response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 69, "SuplRrlpExecutePosRsp", 770);
      unsigned int v9 = 1;
      LbsOsaTrace_WriteLog(0x13u, __str, v13, 0, 1);
    }
    else
    {
      unsigned int v9 = 1;
    }
    goto LABEL_20;
  }
  int v7 = *(unsigned __int16 ***)(a1 + 8);
  double v8 = *v7;
  if (*v7)
  {
    unsigned int v9 = rrl_process_measure_response_msb(*v7, 2, &v27, (uint64_t)&v25);
    if (!*v8) {
      SendStatusReport(*(_DWORD *)(a1 + 16), 2, 0, 0, 0, 255);
    }
    goto LABEL_20;
  }
LABEL_17:
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gps_ptr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "PSP", 69, "SuplRrlpExecutePosRsp", 513);
    LbsOsaTrace_WriteLog(0x13u, __str, v15, 0, 1);
  }
LABEL_26:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "PSP", 68, "SuplRrlpExecutePosRsp");
    return LbsOsaTrace_WriteLog(0x13u, __str, v20, 5, 1);
  }
  return result;
}

uint64_t SuplRrlpExecutePosReq(unsigned int *a1)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  int v41 = 255;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "SuplRrlpExecutePosReq");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  char v42 = 1;
  int v4 = a1[5];
  int v43 = v4;
  int v5 = *((unsigned __int8 *)a1 + 16);
  if ((v5 - 2) >= 2 && v5 != 0)
  {
    if (v5 == 1) {
      int v41 = 0;
    }
    unsigned int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v12 = gnssOsa_Calloc("SuplRrlpExecutePosReq", 140, 1, *a1);
    uint64_t v40 = v12;
    if (!v12)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
        goto LABEL_42;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_25;
    }
    memcpy_s("SuplRrlpExecutePosReq", 149, v12, *a1, *((const void **)a1 + 1), *a1);
    unsigned int v39 = *a1;
    char v38 = 0;
    int v36 = 15;
    int v37 = 3;
    v34[0] = 0;
    void v34[4] = 3;
    memset_s(&v35, 0xCuLL, 0, 0xCuLL);
    int v13 = rrl_process_downlink_message((uint64_t)&v39, 2, &v38, &v36, &v37, (uint64_t)v34);
    LOBYTE(v44) = 0;
    __int16 v45 = 0;
    __int16 v46 = -1;
    char v47 = -1;
    int v48 = -1;
    __int16 v49 = 255;
    T_UTRAN_GPS_TIME_s::T_UTRAN_GPS_TIME_s((T_UTRAN_GPS_TIME_s *)v50);
    uint64_t v14 = 0;
    unsigned char v50[7] = 2;
    __int16 v51 = 32512;
    char v52 = 0;
    __int16 v53 = -1;
    char v54 = -1;
    int v55 = -1;
    __int16 v56 = -1;
    char v57 = 0;
    do
    {
      unsigned __int16 v15 = (char *)&v44 + v14;
      v15[78] = -1;
      *((_DWORD *)v15 + 20) = -1;
      v15[84] = -1;
      v14 += 8;
    }
    while (v14 != 128);
    char v58 = -1;
    uint64_t v59 = 0;
    char v60 = -1;
    char v61 = 0;
    int v62 = -1;
    __int16 v63 = 255;
    T_UTRAN_GPS_TIME_s::T_UTRAN_GPS_TIME_s((T_UTRAN_GPS_TIME_s *)v64);
    v64[28] = 0;
    __int16 v65 = -1;
    char v66 = -1;
    int v67 = -1;
    __int16 v68 = -1;
    __int16 v69 = 255;
    uint64_t v70 = 0;
    char v71 = -1;
    char v72 = 0;
    char v73 = 0;
    uint64_t v74 = 0;
    char v75 = -1;
    char v76 = 0;
    __int16 v77 = 255;
    char v78 = 0;
    uint64_t v79 = 0;
    char v80 = -1;
    char v81 = 0;
    uint64_t v82 = 0x7FFFFFFF7FFFFFFFLL;
    int v83 = 0x800000;
    __int16 v84 = 32639;
    char v85 = 0;
    char v86 = 0;
    uint64_t v87 = 0;
    char v88 = 0;
    char v89 = 0;
    char v90 = 0;
    __int16 v91 = -1;
    int v92 = -1;
    char v93 = 0;
    __int16 v94 = 0;
    char v95 = 0;
    uint64_t v96 = 0;
    char v97 = 0;
    uint64_t v98 = 0;
    char v99 = 0;
    __int16 v100 = -1;
    int v101 = -1;
    __int16 v102 = -1;
    *(void *)((char *)v103 + 5) = -1;
    v103[0] = -1;
    T_GNSS_POSITION_s::T_GNSS_POSITION_s((T_GNSS_POSITION_s *)v104);
    v104[28] = -16777216;
    uint64_t v105 = 0x7F7F7F7F7F7F7F7FLL;
    __int16 v106 = 255;
    unsigned int v30 = 0;
    __int16 v31 = 0;
    char v32 = -1;
    int v33 = -1;
    if (v13)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Decode Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 69, "SuplRrlpExecutePosReq", 770);
        LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
      }
      rrl_clear_gnss_ad(&v44, 1);
      if (v13 == 1 && v38 == 1)
      {
        char v32 = 0;
        unsigned int v30 = v39;
        __int16 v31 = v40;
      }
      else
      {
        if (v13 == -1) {
          char v19 = 1;
        }
        else {
          char v19 = 2;
        }
        char v32 = v19;
      }
      int v33 = v4;
      goto LABEL_41;
    }
    char v29 = 0;
    if (v36 != 2)
    {
      if (!v36)
      {
        *(_WORD *)uint64_t __str = -1;
        int v108 = -1;
        int v109 = -16776961;
        char v110 = 0;
        int v111 = -1;
        __int16 v112 = 255;
        uint64_t v113 = 0x200000003;
        __int16 v114 = -1;
        char v115 = -1;
        int v116 = 0xFFFF;
        char v117 = -1;
        memset_s(__str, 0x2CuLL, 0, 0x2CuLL);
        int v27 = 0;
        if (!rrl_process_measure_request(&v44, __str, &v27, &v29, (uint64_t)&v39, 0))
        {
          if (v44 == 1) {
            SuplRrlpHandleAsstData((uint64_t)&v44, &v28, (uint64_t)&v41);
          }
          uint64_t __s = 0;
          memset_s(&__s, 8uLL, 0, 8uLL);
          if (v27 == 1)
          {
            gps_gnss_start_auto_mode(1, (uint64_t)__str, __s, (uint64_t)&v41);
            goto LABEL_42;
          }
          if (v27 == 2)
          {
            gps_gnss_start_based_mode(1, (uint64_t)__str, __s, (uint64_t)&v41);
            goto LABEL_42;
          }
          rrl_clean_measure_procedure();
          rrl_free_asn_pdu();
          char v32 = 2;
          goto LABEL_58;
        }
        if (v29 == 1)
        {
LABEL_57:
          char v32 = 0;
          unsigned int v30 = v39;
          __int16 v31 = v40;
LABEL_58:
          int v33 = v43;
LABEL_41:
          HandleRRLPResponse((uint64_t)&v30);
        }
LABEL_42:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
        if (!result) {
          return result;
        }
        bzero(__str, 0x410uLL);
        unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v23, "PSP", 68, "SuplRrlpExecutePosReq");
        return LbsOsaTrace_WriteLog(0x13u, __str, v11, 5, 1);
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
        goto LABEL_42;
      }
      bzero(__str, 0x410uLL);
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx v_compType,%d\n", v25);
LABEL_25:
      LbsOsaTrace_WriteLog(0x13u, __str, v18, 0, 1);
      goto LABEL_42;
    }
    if (rrl_process_assistance_data_delivery(&v44, &v29, (uint64_t)&v39))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        size_t v21 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Assisstance data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "PSP", 69, "SuplRrlpExecutePosReq", 770);
        int v22 = 0;
LABEL_55:
        LbsOsaTrace_WriteLog(0x13u, __str, v21, v22, 1);
      }
    }
    else if (v44 == 1)
    {
      SuplRrlpHandleAsstData((uint64_t)&v44, &v28, (uint64_t)&v41);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      size_t v21 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Assistance data not recieved\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "PSP", 87, "SuplRrlpExecutePosReq", 770);
      int v22 = 2;
      goto LABEL_55;
    }
    if (v29 == 1) {
      goto LABEL_57;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_42;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Assistance data\n");
    goto LABEL_25;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos protocol\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 87, "SuplRrlpExecutePosReq", 770);
    LbsOsaTrace_WriteLog(0x13u, __str, v8, 2, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v10, "PSP", 68, "SuplRrlpExecutePosReq");
    return LbsOsaTrace_WriteLog(0x13u, __str, v11, 5, 1);
  }
  return result;
}

size_t SuplRrlpHandleAsstData(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 68, "SuplRrlpHandleAsstData");
    LbsOsaTrace_WriteLog(0x13u, __str, v7, 5, 1);
  }
  if (*(unsigned char *)(a1 + 8) == 1 && *(unsigned char *)(a1 + 9) == 1)
  {
    *a2 = 1;
    gps_set_gps_time(a1 + 16, 0, a3);
  }
  if (*(_WORD *)(a1 + 504) != 1)
  {
    *a2 = 1;
    gps_set_gnss_ref_loc(a1 + 504, *(unsigned __int8 *)(a1 + 616), 0, a3);
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    *a2 = 1;
    if (*(unsigned char *)(a1 + 304) == 1) {
      gps_set_based_aid((unsigned __int8 *)(a1 + 312), 0, a3);
    }
    if (*(unsigned char *)(a1 + 224) == 1)
    {
      uint64_t v8 = *(void *)(a1 + 288);
      if (v8) {
        MEMORY[0x230F4E5A0](v8, 0x1000C804359ADF2);
      }
      *(void *)(a1 + 288) = 0;
    }
    if (*(unsigned char *)(a1 + 336) == 1) {
      gps_set_almanac_aid(a1 + 344, 0, a3);
    }
    if (*(unsigned char *)(a1 + 368) == 1) {
      gps_set_gps_utc_model(a1 + 372, a3);
    }
    if (*(unsigned char *)(a1 + 388) == 1) {
      gps_set_gps_real_time_integrity(a1 + 392, a3);
    }
  }
  if (*(unsigned char *)(a1 + 617) == 1)
  {
    *a2 = 1;
    gps_set_gnss_iono_model(a1 + 618, *(unsigned __int8 *)(a1 + 629), 0, a3);
  }
  rrl_clear_gnss_ad((void *)a1, 0);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 68, "SuplRrlpHandleAsstData");
    return LbsOsaTrace_WriteLog(0x13u, __str, v11, 5, 1);
  }
  return result;
}

char *SuplRrlpSessionEnd(void)
{
  StaticLpPrivate = GetStaticLpPrivate();
  memset_s(StaticLpPrivate + 1344, 0x1CuLL, 0, 0x1CuLL);

  return rrl_free_asn_pdu();
}

size_t SuplRrlpUpdateCap(unsigned __int8 *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "SuplRrlpUpdateCap");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  memset(v9, 0, sizeof(v9));
  if (*a1 == 1)
  {
    BYTE2(v9[0]) = 1;
    WORD2(v9[0]) = *((_WORD *)a1 + 1);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSS ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 69, "SuplRrlpUpdateCap", 770, *a1);
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 0, 1);
  }
  rrl_set_pos_caps((unsigned __int8 *)v9);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 68, "SuplRrlpUpdateCap");
    return LbsOsaTrace_WriteLog(0x13u, __str, v8, 5, 1);
  }
  return result;
}

uint64_t RRLP_Bridge_init(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Initialization Fn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 73, "RRLP_Bridge_init");
    LbsOsaTrace_WriteLog(0x13u, __str, v1, 4, 1);
  }
  return rrl_init();
}

size_t RRLP_Bridge_de_init(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  rrl_clean();
  rrl_destroy();
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: De-Initialization Fn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "PSP", 73, "RRLP_Bridge_de_init");
    return LbsOsaTrace_WriteLog(0x13u, __str, v2, 4, 1);
  }
  return result;
}

double *NK_Set_Constell_Clock_Bias(double *result, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned __int16 v8 = (unsigned __int8 *)result;
  uint64_t v9 = 0;
  uint64_t v49 = *MEMORY[0x263EF8340];
  double v39 = 0.0;
  double v40 = 0.0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v48 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v10 = (double *)(a2 + 4832);
  uint64_t v11 = a2;
  uint64_t v44 = 0;
  do
  {
    if (*(unsigned char *)(v11 + 2960) && *(unsigned char *)(v11 + 49))
    {
      uint64_t v12 = *((unsigned __int8 *)result + v9);
      double v13 = 1.0 / v10[252];
      *((double *)&v45 + v12) = *((double *)&v45 + v12) + *v10 * v13;
      *((double *)&v41 + v12) = v13 + *((double *)&v41 + v12);
    }
    v9 += 4;
    ++v10;
    ++v11;
  }
  while (v9 != 192);
  double v14 = *((double *)&v45 + 1) + *((double *)&v46 + 1) + *((double *)&v47 + 1);
  double v15 = *((double *)&v41 + 1) + *((double *)&v42 + 1) + *((double *)&v43 + 1);
  if (v15 > 0.0) {
    double v14 = fabs(v14) / v15;
  }
  double v16 = *(double *)&v42;
  if (*(double *)&v42 > 0.0) {
    *(double *)&long long v46 = fabs(*(double *)&v46) / *(double *)&v42;
  }
  double v17 = *(double *)&v43;
  if (*(double *)&v43 > 0.0) {
    *(double *)&long long v47 = fabs(*(double *)&v47) / *(double *)&v43;
  }
  if (*(unsigned char *)(a2 + 768) && v14 > 0.0)
  {
    char v18 = 0;
    char v19 = (double *)(a2 + 736);
    int v20 = *(unsigned __int8 *)(a2 + 769);
    int v21 = 1;
  }
  else
  {
    int v20 = *(unsigned __int8 *)(a2 + 769);
    if (*(unsigned char *)(a2 + 769) && *(double *)&v46 > 0.0)
    {
      double v22 = *(double *)(a2 + 744) * 299792458.0;
      int v20 = 1;
      int v21 = 2;
      char v18 = 1;
      goto LABEL_23;
    }
    if (!*(unsigned char *)(a2 + 770) || *(double *)&v47 <= 0.0) {
      return result;
    }
    char v19 = (double *)(a2 + 752);
    int v21 = 4;
    char v18 = 2;
  }
  double v22 = *v19 * 299792458.0;
  if (v20)
  {
    double v23 = 0.0;
    int v20 = 1;
LABEL_28:
    double v24 = 0.0;
    goto LABEL_29;
  }
LABEL_23:
  if (!*(unsigned char *)(a3 + 16296))
  {
    double v23 = 0.0;
    goto LABEL_28;
  }
  double v24 = (double)*(int *)(a3 + 16236) * 9.31322575e-10 * 299792458.0;
  if (v21 == 2) {
    double v23 = (double)*(int *)(a3 + 16236) * 9.31322575e-10 * 299792458.0;
  }
  else {
    double v23 = 0.0;
  }
LABEL_29:
  if (v21 == 4 || (double v25 = 0.0, !*(unsigned char *)(a2 + 770)))
  {
    double v25 = 0.0;
    if (*(int *)(a3 + 33548) >= 1)
    {
      if (*(_WORD *)(a3 + 33556))
      {
        double v26 = *(double *)(a2 + 24) + -14.0;
        if (v26 < 0.0) {
          double v26 = v26 + 604800.0;
        }
        double v27 = ((double)*(__int16 *)(a3 + 33556) * 0.1 + (double)*(__int16 *)(a3 + 33558) * 0.1 * v26) * 0.000000001;
        double v25 = v27 * 299792458.0;
        if (v21 == 4) {
          double v23 = v27 * 299792458.0;
        }
      }
    }
  }
  if (v15 > 0.0 && *(unsigned char *)(a2 + 768) == 0)
  {
    LOWORD(v38) = 1;
    double v39 = *(double *)(a2 + 736) * 299792458.0;
    double v40 = 0.0;
    BYTE2(v38) = 0;
    v35[0] = v21;
    v35[1] = v18;
    unsigned __int16 v35[2] = 1;
    double v36 = v22;
    double v37 = v23;
    size_t result = NK_Adjust_Constell((uint64_t)v35, &v38, (unsigned __int8 *)result, a2, a4, a5);
    *(double *)(a2 + 736) = v39 * 0.00000000333564095;
    *(unsigned char *)(a2 + 768) = BYTE2(v38);
    int v20 = *(unsigned __int8 *)(a2 + 769);
  }
  if (v16 > 0.0 && !v20)
  {
    LOWORD(v38) = 258;
    double v39 = *(double *)(a2 + 744) * 299792458.0;
    double v40 = v24;
    BYTE2(v38) = 0;
    v32[0] = v21;
    v32[1] = v18;
    v32[2] = 1;
    double v33 = v22;
    double v34 = v23;
    size_t result = NK_Adjust_Constell((uint64_t)v32, &v38, v8, a2, a4, a5);
    *(double *)(a2 + 744) = v39 * 0.00000000333564095;
    *(unsigned char *)(a2 + 769) = BYTE2(v38);
  }
  if (v17 > 0.0 && !*(unsigned char *)(a2 + 770))
  {
    LOWORD(v38) = 516;
    double v39 = *(double *)(a2 + 752) * 299792458.0;
    double v40 = v25;
    BYTE2(v38) = 0;
    v29[0] = v21;
    v29[1] = v18;
    v29[2] = 1;
    double v30 = v22;
    double v31 = v23;
    size_t result = NK_Adjust_Constell((uint64_t)v29, &v38, v8, a2, a4, a5);
    *(double *)(a2 + 752) = v39 * 0.00000000333564095;
    *(unsigned char *)(a2 + 770) = BYTE2(v38);
  }
  return result;
}

double *NK_Adjust_Constell(uint64_t a1, double *a2, unsigned __int8 *a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v9 = a3;
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  uint64_t v40 = *MEMORY[0x263EF8340];
  double v14 = *(double *)(a1 + 8) - *(double *)(a1 + 16) + a2[2];
  double v15 = v14 - a2[1];
  memset(v39, 0, sizeof(v39));
  uint64_t v16 = a4 + 4832;
  int v17 = *(unsigned __int8 *)a2;
  char v18 = a3;
  do
  {
    unsigned int v20 = *v18;
    v18 += 4;
    unsigned int v19 = v20;
    size_t result = (double *)(v17 == 4 && v19 == 4);
    BOOL v23 = v19 == 2 && v17 == 2;
    if (v23 || (result & 1) != 0 || v17 == 1 && v19 <= 5 && ((1 << v19) & 0x2A) != 0)
    {
      size_t result = (double *)*(unsigned __int8 *)(a4 + v12 + 2960);
      if (*(unsigned char *)(a4 + v12 + 2960))
      {
        *(double *)(a4 + 19584 + 8 * v12) = v15 + *(double *)(a4 + 19584 + 8 * v12);
        double v24 = v15 + *(double *)(v16 + 8 * v12);
        *(double *)(v16 + 8 * v12) = v24;
        *(double *)(a4 + 5216 + 8 * v12) = v24;
        *(double *)(a4 + 5600 + 8 * v12) = v24;
        if (*(unsigned char *)(a4 + v12 + 49)) {
          *((double *)v39 + v13++) = v24;
        }
      }
    }
    ++v12;
  }
  while (v12 != 48);
  if (!v13) {
    goto LABEL_47;
  }
  size_t result = VecSortAscR8((double *)v39, 0, v13 - 1);
  unsigned int v25 = v13 >> 1;
  if (v13) {
    double v26 = *((double *)v39 + v25);
  }
  else {
    double v26 = (*((double *)v39 + v25 - 1) + *((double *)v39 + v25)) * 0.5;
  }
  a2[1] = v14;
  if (fabs(v26) < 586.104512)
  {
    uint64_t v27 = 0;
    uint64_t v28 = a4 + 6848;
    uint64_t v29 = a4 + 4832;
    do
    {
      unsigned int v31 = *v9;
      v9 += 4;
      unsigned int v30 = v31;
      BOOL v33 = v17 == 4 && v30 == 4;
      BOOL v34 = v30 == 2 && v17 == 2;
      if (v34 || v33 || v17 == 1 && v30 <= 5 && ((1 << v30) & 0x2A) != 0)
      {
        if (*(unsigned char *)(a4 + v27 + 2960))
        {
          *(double *)(a4 + 19584 + 8 * v27) = *(double *)(a4 + 19584 + 8 * v27) - v26;
          double v35 = *(double *)(v29 + 8 * v27) - v26;
          *(double *)(v29 + 8 * v27) = v35;
          *(double *)(a4 + 5216 + 8 * v27) = v35;
          *(double *)(a4 + 5600 + 8 * v27) = v35;
          if ((a5 & 1) == 0)
          {
            double v36 = v35 * 0.5 * (v35 * 0.5);
            if (*(double *)(v28 + 8 * v27) > v36) {
              double v36 = *(double *)(v28 + 8 * v27);
            }
            *(double *)(v28 + 8 * v27) = v36;
          }
        }
      }
      ++v27;
    }
    while (v27 != 48);
    double v14 = a2[1] - v26;
LABEL_47:
    a2[1] = v14;
  }
  uint64_t v37 = *(unsigned __int8 *)(a1 + 1);
  uint64_t v38 = *((unsigned __int8 *)a2 + 1);
  *(double *)(a6 + 8 * (((v38 + 2 + (v38 + 2) * v38) >> 1) - 1)) = fmax(*(double *)(a6+ 8* (((v37 + 2 + (v37 + 2) * v37) >> 1)- 1)), 62500.0);
  *(void *)(a6 + 8 * v38 + 48) = *(void *)(a6 + 8 * v37 + 48);
  return result;
}

uint64_t SmallBufInitBuf(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 196) = 0;
  *(void *)(v2 + 720) = 0;
  *(void *)(*a1 + 728) = 0;
  *(void *)(*a1 + 736) = 0;
  uint64_t v3 = *a1;
  *(unsigned char *)(v3 + 744) = 0;
  *(_OWORD *)(v3 + 1056) = xmmword_22BB42660;
  *(void *)(v3 + 1112) = 0;
  uint64_t v4 = *a1 + 756;
  *(_OWORD *)uint64_t v4 = SmallInit;
  *(_OWORD *)(v4 + 16) = unk_22BB42680;
  *(_OWORD *)(v4 + 32) = xmmword_22BB42690;
  unsigned __int16 v5 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x1000uLL);
  *(void *)uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = 0;
    *(void *)(v4 + 24) = v5;
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 8) = v5 + 4096;
    *(void *)(v4 + 16) = v5;
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v6 = 1;
    CUCFErrorHandler(v7, 1);
  }
  return v6;
}

uint64_t SmallBufCloseBuf(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*(unsigned char *)(v2 + 744))
  {
    uint64_t v3 = 9;
    CUCFErrorHandler(v2, 9);
  }
  else
  {
    if (*(unsigned char *)(v2 + 799)) {
      goto LABEL_7;
    }
    uint64_t v4 = (void *)(v2 + 756);
    unsigned __int16 v5 = *(void **)(v2 + 756);
    if (v5) {
      free(v5);
    }
    *uint64_t v4 = 0;
    uint64_t v2 = *a1;
    if (*a1) {
LABEL_7:
    }
      free((void *)v2);
    uint64_t v3 = 0;
    *a1 = 0;
  }
  return v3;
}

uint64_t SmallBufInitBufWithMemory(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 196) = 0;
  *(void *)(v2 + 720) = 0;
  *(void *)(*a1 + 728) = 0;
  *(void *)(*a1 + 736) = 0;
  uint64_t v3 = *a1;
  *(unsigned char *)(v3 + 744) = 0;
  *(_OWORD *)(v3 + 1056) = xmmword_22BB42660;
  *(void *)(v3 + 1112) = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *a1 + 756;
  *(_OWORD *)(v5 + 32) = xmmword_22BB42690;
  *(_OWORD *)uint64_t v5 = SmallInit;
  *(_OWORD *)(v5 + 16) = unk_22BB42680;
  uint64_t v6 = *a2;
  uint64_t v7 = *a2 + a2[1];
  *(void *)uint64_t v5 = *a2;
  *(void *)(v5 + 8) = v7;
  *(void *)(v5 + 32) = v6;
  uint64_t v8 = v6 + a2[2];
  *(void *)(v5 + 16) = v6;
  *(void *)(v5 + 24) = v8;
  *(unsigned char *)(v4 + 799) = 1;
  return 0;
}

uint64_t SmallBufCloseBufToMemory(void **a1, unsigned __int8 **a2)
{
  if (!a2) {
    return 6;
  }
  uint64_t v3 = (char *)*a1;
  if (v3[744])
  {
    uint64_t v4 = 9;
    CUCFErrorHandler((uint64_t)v3, 9);
  }
  else
  {
    uint64_t v5 = *(unsigned __int8 **)(v3 + 756);
    uint64_t v6 = (unsigned __int8 *)(*(void *)(v3 + 764) - (void)v5);
    *a2 = v5;
    a2[1] = v6;
    uint64_t v7 = *(unsigned __int8 **)(v3 + 772);
    unsigned int v8 = v3[796];
    if (v8 <= v3[797]) {
      uint64_t v9 = *(void *)(v3 + 780) - (void)v7;
    }
    else {
      uint64_t v9 = *(void *)(v3 + 780) - (void)v7 + 1;
    }
    a2[2] = (unsigned __int8 *)v9;
    if (v8 == 7)
    {
      if (v5 != v7) {
        memcpy_s("posp_memcpy", 29, v5, v9, v7, v9);
      }
    }
    else
    {
      *uint64_t v5 = *v7 << (7 - v8);
      uint64_t v11 = *(unsigned __int8 **)(v3 + 772);
      uint64_t v10 = *(unsigned __int8 **)(v3 + 780);
      if (v11 != v10)
      {
        *(void *)(v3 + 772) = v11 + 1;
        if (v11 + 1 != v10)
        {
          uint64_t v10 = v11 + 1;
          do
          {
            *v5 |= *v10 >> (v3[796] + 1);
            *++uint64_t v5 = **(unsigned __int8 **)(v3 + 772) << (7 - v3[796]);
            uint64_t v12 = *(unsigned __int8 **)(v3 + 780);
            uint64_t v10 = (unsigned __int8 *)(*(void *)(v3 + 772) + 1);
            *(void *)(v3 + 772) = v10;
          }
          while (v10 != v12);
        }
        if (v3[797] != 7)
        {
          *v5 |= *v10 >> (v3[796] + 1);
          unsigned int v13 = v3[796];
          if (v13 > v3[797]) {
            v5[1] = **(unsigned __int8 **)(v3 + 772) << (7 - v13);
          }
        }
      }
    }
    if (*a1) {
      free(*a1);
    }
    uint64_t v4 = 0;
    *a1 = 0;
  }
  return v4;
}

uint64_t SmallBufGetLength(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = *(void *)(a1 + 780) - *(void *)(a1 + 772);
      unsigned int v3 = *(unsigned __int8 *)(a1 + 796);
      unsigned int v4 = *(unsigned __int8 *)(a1 + 797);
      goto LABEL_6;
    case 1:
      uint64_t v6 = *(void *)(a1 + 780) - *(void *)(a1 + 772);
      uint64_t v7 = *(unsigned __int8 *)(a1 + 796);
      uint64_t v8 = *(unsigned __int8 *)(a1 + 797);
      goto LABEL_10;
    case 2:
      uint64_t v2 = *(void *)(a1 + 788) - *(void *)(a1 + 772);
      unsigned int v3 = *(unsigned __int8 *)(a1 + 796);
      unsigned int v4 = *(unsigned __int8 *)(a1 + 798);
LABEL_6:
      if (v3 <= v4) {
        return v2;
      }
      else {
        return v2 + 1;
      }
    case 3:
      uint64_t v6 = *(void *)(a1 + 788) - *(void *)(a1 + 772);
      uint64_t v7 = *(unsigned __int8 *)(a1 + 796);
      uint64_t v8 = *(unsigned __int8 *)(a1 + 798);
LABEL_10:
      uint64_t result = v7 - v8 + 8 * v6;
      break;
    case 4:
      unint64_t v9 = *(void *)(a1 + 1064);
      if ((v9 & 7) != 0) {
        uint64_t result = (v9 >> 3) + 1;
      }
      else {
        uint64_t result = v9 >> 3;
      }
      break;
    default:
      uint64_t result = *(void *)(a1 + 1064);
      break;
  }
  return result;
}

uint64_t SmallBufGetMemory(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 756;
  uint64_t result = *(void *)(a1 + 756);
  *a2 = *(void *)(v2 + 8) - result;
  return result;
}

char *SmallBufAppendMemory(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 799))
  {
    CUCFErrorHandler(a1, 7);
    return 0;
  }
  else
  {
    unsigned int v4 = (const void **)(a1 + 756);
    size_t v5 = *(void *)(a1 + 764) - *(void *)(a1 + 756) + a2;
    unsigned int v3 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, v5);
    if (v3)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 764) - *v4;
      memcpy_s("posp_memcpy", 29, v3, v6, *v4, v6);
      uint64_t v7 = (void *)*v4;
      uint64_t v8 = &v3[*(void *)(a1 + 780) - *(void *)(a1 + 756)];
      *(void *)(a1 + 772) = &v3[*(void *)(a1 + 772) - *(void *)(a1 + 756)];
      *(void *)(a1 + 780) = v8;
      *(void *)(a1 + 788) = &v3[*(void *)(a1 + 788) - (void)v7];
      if (v7) {
        free(v7);
      }
      *unsigned int v4 = v3;
      *(void *)(a1 + 764) = &v3[v5];
    }
    else
    {
      CUCFErrorHandler(a1, 1);
    }
  }
  return v3;
}

uint64_t SmallBufGetDataCurr(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(a1 + 798);
  return *(void *)(a1 + 788);
}

uint64_t SmallBufSetDataCurr(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(result + 788) += a2;
  *(unsigned char *)(result + 798) = a3;
  return result;
}

uint64_t SmallBufGetDataEnd(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(a1 + 797);
  return *(void *)(a1 + 780);
}

uint64_t SmallBufSetDataEnd(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(result + 780) += a2;
  *(unsigned char *)(result + 797) = a3;
  return result;
}

uint64_t SmallBufCopyBuf(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2)
  {
    uint64_t v10 = 5;
    uint64_t v11 = a2;
    int v12 = 5;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 752) != *(_DWORD *)(a2 + 752))
  {
    uint64_t v10 = 2;
    uint64_t v11 = a2;
    int v12 = 2;
    goto LABEL_12;
  }
  unsigned int v4 = (void **)(a1 + 756);
  size_t v5 = (const void **)(a2 + 772);
  unsigned int v6 = *(const void **)(a2 + 772);
  uint64_t v7 = *(void *)(a2 + 780) - (void)v6;
  if (*(unsigned char *)(a2 + 797) == 7) {
    size_t v8 = *(void *)(a2 + 780) - (void)v6;
  }
  else {
    size_t v8 = v7 + 1;
  }
  unint64_t v9 = (char *)*v4;
  if (v8 <= *(void *)(a1 + 764) - *(void *)(a1 + 756))
  {
LABEL_18:
    double v15 = &v9[*(void *)(a2 + 788) - (void)v6];
    *(void *)(a1 + 780) = &v9[v7];
    *(void *)(a1 + 788) = v15;
    *(void *)(a1 + 772) = v9;
    memcpy_s("posp_memcpy", 29, v9, v8, *v5, v8);
    uint64_t v10 = 0;
    *(unsigned char *)(a1 + 796) = *(unsigned char *)(a2 + 796);
    *(_WORD *)(a1 + 797) = *(_WORD *)(a2 + 797);
    return v10;
  }
  if (!*(unsigned char *)(a1 + 799))
  {
    double v14 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, v8);
    if (!v14)
    {
      uint64_t v10 = 1;
      uint64_t v11 = a2;
      int v12 = 1;
      goto LABEL_12;
    }
    unint64_t v9 = v14;
    if (*v4) {
      free(*v4);
    }
    *unsigned int v4 = v9;
    *(void *)(a1 + 764) = &v9[v8];
    unsigned int v6 = *v5;
    uint64_t v7 = *(void *)(a2 + 780) - *(void *)(a2 + 772);
    goto LABEL_18;
  }
  uint64_t v10 = 7;
  uint64_t v11 = a2;
  int v12 = 7;
LABEL_12:
  CUCFErrorHandler(v11, v12);
  return v10;
}

uint64_t SmallBufInitWriteMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 744))
  {
    uint64_t v1 = 8;
    CUCFErrorHandler(a1, 8);
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v2 = *(void *)(a1 + 756);
    *(void *)(a1 + 772) = v2;
    *(void *)(a1 + 780) = v2;
    *(void *)(a1 + 788) = v2;
    *(_WORD *)(a1 + 796) = 1799;
    *(unsigned char *)(a1 + 798) = 7;
    *(_DWORD *)a1 = 0;
    *(unsigned char *)(a1 + 744) = 2;
  }
  return v1;
}

uint64_t SmallBufCloseWriteMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 744) == 2)
  {
    uint64_t v1 = 0;
    *(unsigned char *)(a1 + 744) = 0;
  }
  else
  {
    uint64_t v1 = 10;
    CUCFErrorHandler(a1, 10);
  }
  return v1;
}

uint64_t SmallBufInitReadMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 744))
  {
    uint64_t v1 = 8;
    CUCFErrorHandler(a1, 8);
  }
  else
  {
    uint64_t v1 = 0;
    *(void *)(a1 + 788) = *(void *)(a1 + 772);
    *(unsigned char *)(a1 + 798) = *(unsigned char *)(a1 + 796);
    *(_DWORD *)a1 = 0;
    *(unsigned char *)(a1 + 744) = 1;
  }
  return v1;
}

uint64_t SmallBufCloseReadMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 744) == 1)
  {
    uint64_t v1 = 0;
    *(unsigned char *)(a1 + 744) = 0;
  }
  else
  {
    uint64_t v1 = 10;
    CUCFErrorHandler(a1, 10);
  }
  return v1;
}

uint64_t SmallBufCloseDeleteReadMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 744) == 1)
  {
    uint64_t v1 = 0;
    *(void *)(a1 + 772) = *(void *)(a1 + 788);
    *(unsigned char *)(a1 + 796) = *(unsigned char *)(a1 + 798);
    *(unsigned char *)(a1 + 744) = 0;
  }
  else
  {
    uint64_t v1 = 10;
    CUCFErrorHandler(a1, 10);
  }
  return v1;
}

uint64_t SmallBufGetByte(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(unsigned char *)(a1 + 744) != 1)
  {
    int v6 = 11;
    goto LABEL_7;
  }
  uint64_t v2 = (void *)(a1 + 780);
  unsigned int v3 = *(unsigned __int8 **)(a1 + 788);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 798);
  if (v4 - *(unsigned __int8 *)(a1 + 797) + 8 * (*(void *)(a1 + 780) - (void)v3) <= 7)
  {
    size_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 728);
    if (!v5
      || (v5(a1, 1),
          unsigned int v3 = *(unsigned __int8 **)(v1 + 788),
          uint64_t v4 = *(unsigned __int8 *)(v1 + 798),
          v4 - *(unsigned __int8 *)(v1 + 797) + 8 * (*v2 - (void)v3) <= 7))
    {
      a1 = v1;
      int v6 = 12;
LABEL_7:
      CUCFErrorHandler(a1, v6);
      LOBYTE(v7) = 0;
      return v7;
    }
  }
  if (v4 == 7) {
    LOBYTE(v7) = *v3;
  }
  else {
    int v7 = (v3[1] >> (v4 + 1)) | (*v3 << (7 - v4));
  }
  *(void *)(v1 + 788) = v3 + 1;
  return v7;
}

uint64_t SmallBufPeekByte(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(unsigned char *)(a1 + 744) != 1)
  {
    int v5 = 11;
    goto LABEL_7;
  }
  uint64_t v2 = *(unsigned __int8 **)(a1 + 788);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 798);
  if (v3 - *(unsigned __int8 *)(a1 + 797) + 8 * (*(void *)(a1 + 780) - (void)v2) <= 7)
  {
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(a1 + 728);
    if (!v4
      || (v4(a1, 1),
          uint64_t v2 = *(unsigned __int8 **)(v1 + 788),
          uint64_t v3 = *(unsigned __int8 *)(v1 + 798),
          v3 - *(unsigned __int8 *)(v1 + 797) + 8 * (*(void *)(v1 + 780) - (void)v2) <= 7))
    {
      a1 = v1;
      int v5 = 12;
LABEL_7:
      CUCFErrorHandler(a1, v5);
      LOBYTE(v2) = 0;
      return v2;
    }
  }
  if (v3 == 7) {
    LOBYTE(v2) = *v2;
  }
  else {
    LODWORD(v2) = (v2[1] >> (v3 + 1)) | (*v2 << (7 - v3));
  }
  return v2;
}

char *SmallBufPutByte(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  if (result[744])
  {
    uint64_t v4 = result + 764;
    int v5 = result[797];
    int v6 = *(unsigned char **)(result + 780);
    if (v5 == 7)
    {
      if (v6 == (unsigned char *)*v4)
      {
        uint64_t result = SmallBufAppendMemory((uint64_t)result, 4096);
        if (!result) {
          return result;
        }
        int v6 = *(unsigned char **)(v2 + 780);
      }
      *int v6 = a2;
    }
    else
    {
      if (v6 + 1 == (unsigned char *)*v4)
      {
        uint64_t result = SmallBufAppendMemory((uint64_t)result, 4096);
        if (!result) {
          return result;
        }
        LOBYTE(v5) = v2[797];
        int v6 = *(unsigned char **)(v2 + 780);
      }
      *v6 |= a2 >> (7 - v5);
      *(unsigned char *)(*(void *)(v2 + 780) + 1) = a2 << (v2[797] + 1);
    }
    ++*(void *)(v2 + 780);
  }
  else
  {
    return (char *)CUCFErrorHandler((uint64_t)result, 11);
  }
  return result;
}

uint64_t SmallBufGetSeg(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1;
  if (*(unsigned char *)(a1 + 744) != 1)
  {
    int v8 = 11;
    goto LABEL_13;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v4 = (void *)(a1 + 780);
  if (*(unsigned char *)(a1 + 798) != 7) {
    CUCFErrorHandler(a1, 15);
  }
  uint64_t result = *(void *)(v2 + 788);
  unint64_t v6 = *v4 - result;
  if (a2 > v6)
  {
    int v7 = *(void (**)(uint64_t, void))(v2 + 728);
    if (v7)
    {
      v7(v2, (a2 - v6));
      uint64_t result = *(void *)(v2 + 788);
      unint64_t v6 = *v4 - result;
    }
    if (*(unsigned char *)(v2 + 797) != 7) {
      ++v6;
    }
    if (v6 < a2)
    {
      a1 = v2;
      int v8 = 12;
LABEL_13:
      CUCFErrorHandler(a1, v8);
      return 0;
    }
  }
  *(void *)(v2 + 788) = result + a2;
  return result;
}

uint64_t SmallBufSkipSeg(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(result + 744) == 1)
  {
    if (!a2) {
      return result;
    }
    uint64_t v4 = (void *)(result + 780);
    if (*(unsigned char *)(result + 798) != 7) {
      uint64_t result = CUCFErrorHandler(result, 15);
    }
    uint64_t v5 = *(void *)(v2 + 788);
    unint64_t v6 = *v4 - v5;
    if ((uint64_t)a2 <= (uint64_t)v6) {
      goto LABEL_16;
    }
    int v7 = *(uint64_t (**)(uint64_t, void))(v2 + 728);
    if (v7)
    {
      uint64_t result = v7(v2, (a2 - v6));
      uint64_t v5 = *(void *)(v2 + 788);
      unint64_t v6 = *v4 - v5;
    }
    if (*(unsigned char *)(v2 + 797) != 7) {
      ++v6;
    }
    if (v6 >= a2)
    {
LABEL_16:
      *(void *)(v2 + 788) = v5 + a2;
      return result;
    }
    uint64_t result = v2;
    int v8 = 12;
  }
  else
  {
    int v8 = 11;
  }

  return CUCFErrorHandler(result, v8);
}

uint64_t SmallBufPeekSeg(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 744) != 1)
  {
    int v8 = 11;
    goto LABEL_13;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v4 = (void *)(a1 + 780);
  if (*(unsigned char *)(a1 + 798) != 7) {
    CUCFErrorHandler(a1, 15);
  }
  uint64_t result = *(void *)(a1 + 788);
  unint64_t v6 = *v4 - result;
  if (a2 > v6)
  {
    int v7 = *(void (**)(uint64_t, void))(a1 + 728);
    if (v7)
    {
      v7(a1, (a2 - v6));
      uint64_t result = *(void *)(a1 + 788);
      unint64_t v6 = *v4 - result;
    }
    if (*(unsigned char *)(a1 + 797) != 7) {
      ++v6;
    }
    if (v6 < a2)
    {
      int v8 = 12;
LABEL_13:
      CUCFErrorHandler(a1, v8);
      return 0;
    }
  }
  return result;
}

char *SmallBufPutSeg(char *result, unsigned __int8 *__src, size_t a3)
{
  uint64_t v3 = result;
  if (result[744])
  {
    size_t v4 = a3;
    if (!a3) {
      return result;
    }
    unint64_t v6 = result + 764;
    int v7 = *(char **)(result + 780);
    int v8 = &v7[v4];
    if (result[797] == 7)
    {
      if ((unint64_t)v8 > *v6)
      {
        uint64_t result = SmallBufAppendMemory((uint64_t)result, 4096);
        if (!result) {
          return result;
        }
        int v7 = *(char **)(v3 + 780);
      }
      uint64_t result = (char *)memcpy_s("posp_memcpy", 29, v7, v4, __src, v4);
      *(void *)(v3 + 780) += v4;
    }
    else if ((unint64_t)(v8 + 1) <= *v6 || (uint64_t result = SmallBufAppendMemory((uint64_t)result, 4096)) != 0)
    {
      do
      {
        **(unsigned char **)(v3 + 780) |= *__src >> (7 - v3[797]);
        uint64_t v9 = *(void *)(v3 + 780);
        *(void *)(v3 + 780) = v9 + 1;
        int v10 = *__src++;
        *(unsigned char *)(v9 + 1) = v10 << (v3[797] + 1);
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    return (char *)CUCFErrorHandler((uint64_t)result, 11);
  }
  return result;
}

char *SmallBufPutBit(char *result, int a2)
{
  uint64_t v2 = result;
  if (result[744])
  {
    char v3 = a2;
    int v4 = result[797];
    if (v4 == 7)
    {
      uint64_t v5 = *(unsigned char **)(result + 780);
      if (v5 == *(unsigned char **)(result + 764))
      {
        uint64_t result = SmallBufAppendMemory((uint64_t)result, 4096);
        if (!result) {
          return result;
        }
        uint64_t v5 = *(unsigned char **)(v2 + 780);
      }
      *uint64_t v5 = v3 << 7;
      char v6 = 6;
    }
    else
    {
      **(unsigned char **)(result + 780) |= a2 << v4;
      if (result[797])
      {
        char v6 = result[797] - 1;
      }
      else
      {
        ++*(void *)(result + 780);
        char v6 = 7;
      }
    }
    v2[797] = v6;
  }
  else
  {
    return (char *)CUCFErrorHandler((uint64_t)result, 11);
  }
  return result;
}

uint64_t SmallBufGetBit(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(unsigned char *)(a1 + 744) != 1)
  {
    int v8 = 11;
LABEL_9:
    CUCFErrorHandler(a1, v8);
    return 0;
  }
  uint64_t v2 = (unsigned __int8 **)(a1 + 780);
  char v3 = *(unsigned __int8 **)(a1 + 788);
  if (v3 == *(unsigned __int8 **)(a1 + 780) && *(unsigned __int8 *)(a1 + 798) == *(unsigned __int8 *)(a1 + 797))
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(a1 + 728);
    if (!v4 || (v4(a1, 1), char v3 = *(unsigned __int8 **)(v1 + 788), v3 == *v2))
    {
      a1 = v1;
      int v8 = 12;
      goto LABEL_9;
    }
  }
  int v5 = *(unsigned __int8 *)(v1 + 798);
  if (v5 == 7)
  {
    uint64_t result = *v3 >> 7;
    char v7 = 6;
  }
  else
  {
    uint64_t result = (*v3 >> v5) & 1;
    if (*(unsigned char *)(v1 + 798))
    {
      char v7 = v5 - 1;
    }
    else
    {
      *(void *)(v1 + 788) = v3 + 1;
      char v7 = 7;
    }
  }
  *(unsigned char *)(v1 + 798) = v7;
  return result;
}

char *SmallBufPutBits(char *result, unint64_t a2, unsigned int a3)
{
  char v3 = result;
  if (!result[744])
  {
    int v5 = 11;
    goto LABEL_6;
  }
  char v4 = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x21)
  {
    int v5 = 13;
LABEL_6:
    return (char *)CUCFErrorHandler((uint64_t)result, v5);
  }
  int v7 = result[797];
  unsigned __int8 v8 = a3 - v7 + 7;
  char v9 = v8 & 7;
  uint64_t v10 = v8 >> 3;
  unint64_t v11 = *(void *)(result + 780) + v10;
  if ((v8 & 7) != 0) {
    ++v11;
  }
  if (v11 > *(void *)(result + 764))
  {
    uint64_t result = SmallBufAppendMemory((uint64_t)result, 4096);
    if (!result) {
      return result;
    }
    int v7 = v3[797];
  }
  if (v7 == 7) {
    **(unsigned char **)(v3 + 780) = 0;
  }
  if (v8 >= 8u)
  {
    int v12 = (unsigned char *)(*(void *)(v3 + 780) + v10);
    *(void *)(v3 + 780) = v12;
    v3[797] = v9 ^ 7;
    if ((v8 & 7) != 0)
    {
      *int v12 = a2 << (8 - v9);
      a2 >>= v9;
      int v12 = *(unsigned char **)(v3 + 780);
    }
    unsigned int v13 = v12 - 1;
    if (v8 >= 0x10u)
    {
      do
      {
        *v13-- = a2;
        LODWORD(v10) = v10 - 1;
        a2 >>= 8;
      }
      while (v10 > 1u);
    }
    *v13 |= a2;
  }
  else
  {
    **(unsigned char **)(v3 + 780) |= a2 << (v3[797] - v4 + 1);
    v3[797] -= v4;
  }
  return result;
}

unint64_t SmallBufGetBits(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1;
  if (*(unsigned char *)(a1 + 744) != 1)
  {
    int v4 = 11;
    goto LABEL_6;
  }
  unsigned int v3 = a2;
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x21)
  {
    int v4 = 13;
LABEL_6:
    CUCFErrorHandler(a1, v4);
    return 0;
  }
  char v6 = (void *)(a1 + 780);
  int v7 = *(unsigned char **)(a1 + 788);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 798);
  uint64_t v9 = v8 - *(unsigned __int8 *)(a1 + 797) + 8 * (*(void *)(a1 + 780) - (void)v7);
  unint64_t v10 = a2 - v9;
  if (a2 > (unint64_t)v9)
  {
    unint64_t v11 = *(void (**)(uint64_t, uint64_t))(a1 + 728);
    if (v11)
    {
      unint64_t v12 = v10 >> 3;
      if ((v10 & 7) != 0) {
        uint64_t v13 = (v12 + 1);
      }
      else {
        uint64_t v13 = v12;
      }
      v11(a1, v13);
      int v7 = *(unsigned char **)(v2 + 788);
      uint64_t v9 = *(unsigned __int8 *)(v2 + 798) - (unint64_t)*(unsigned __int8 *)(v2 + 797) + 8 * (*v6 - (void)v7);
      LODWORD(v8) = *(unsigned __int8 *)(v2 + 798);
    }
    if (v9 < v3)
    {
      a1 = v2;
      int v4 = 12;
      goto LABEL_6;
    }
  }
  if (v8 == 7)
  {
    unint64_t result = 0;
  }
  else
  {
    unint64_t result = (SmallBufGetBits(sCoder *,unsigned char)::SmallBufBitMask[v8] & *v7);
    if (((~v8 + v3) & 0x80) != 0)
    {
      result >>= -(char)(~(_BYTE)v8 + v3);
      *(unsigned char *)(v2 + 798) = v8 - v3;
      return result;
    }
    *(void *)(v2 + 788) = ++v7;
    *(unsigned char *)(v2 + 798) = 7;
    LOBYTE(v3) = ~(_BYTE)v8 + v3;
  }
  char v14 = v3 & 7;
  if (v3 >= 8u)
  {
    int v15 = v3 >> 3;
    do
    {
      unsigned int v16 = *v7++;
      unint64_t result = v16 | (result << 8);
      --v15;
      *(void *)(v2 + 788) = v7;
    }
    while ((_BYTE)v15);
  }
  if ((v3 & 7) != 0)
  {
    *(unsigned char *)(v2 + 798) = v14 ^ 7;
    return (result << v14) | (*v7 >> (8 - v14));
  }
  return result;
}

size_t SmallBufAlign(size_t result)
{
  int v1 = *(unsigned __int8 *)(result + 744);
  if (v1 == 2)
  {
    if (*(unsigned char *)(result + 797) != 7)
    {
      ++*(void *)(result + 780);
      *(unsigned char *)(result + 797) = 7;
    }
  }
  else if (v1 == 1)
  {
    if (*(unsigned char *)(result + 798) != 7)
    {
      ++*(void *)(result + 788);
      *(unsigned char *)(result + 798) = 7;
    }
  }
  else
  {
    return CUCFErrorHandler(result, 11);
  }
  return result;
}

uint64_t Hal19_HandleBufferResp(uint64_t result, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (!result)
  {
    unint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
    return LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
  }
  if (a2 <= 0xC)
  {
    unint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len,%u\n", v4);
    return LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
  }
  if (*(unsigned char *)(result + 2) == 66 && *(unsigned char *)(result + 3) == 67)
  {
    g_ChipBuffersResp = *(unsigned char *)(result + 9);
    byte_26AE6CA81 = *(unsigned char *)(result + 8);
    Hal08_SetGizar2AvaialbleBuffers(g_ChipBuffersResp);
    unint64_t result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
    if ((result & 1) == 0)
    {
      unint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        __error();
        unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v3);
        return LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
      }
    }
  }
  return result;
}

uint64_t Hal19_GetChiBuffers(void)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  v19[0] = 0;
  qmemcpy(v17, "Bc ", sizeof(v17));
  __int16 v21 = 3;
  char v22 = 0;
  plc00_10EncodeHdrPlCs(v17, (uint64_t)v20, 12, 1u, 1, (uint64_t)v19);
  int v0 = v19[0];
  if (v19[0])
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Hdrerr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 69, "Hal19_GetChiBuffers", 775, v0);
      LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
    }
    return 0xFFFFFFFFLL;
  }
  int v23 = 167772160;
  g_HalState = 12;
  if ((int)Hal22_ZxSendToChip(v20, 0xCuLL) <= 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 69, "Hal19_GetChiBuffers", 1282);
      LbsOsaTrace_WriteLog(0xDu, __str, v10, 0, 1);
    }
    return 4294967289;
  }
  else
  {
    char v4 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1388u);
    if (v4 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 69, "Hal19_GetChiBuffers", 1543);
        LbsOsaTrace_WriteLog(0xDu, __str, v12, 0, 1);
      }
      return 4294967287;
    }
    else
    {
      if (v4)
      {
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
        uint64_t result = 0;
        if (!IsLoggingAllowed) {
          return result;
        }
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 69, "Hal19_GetChiBuffers", 1541);
        int v8 = 0;
LABEL_20:
        LbsOsaTrace_WriteLog(0xDu, __str, v7, v8, 1);
        return 0;
      }
      if (byte_26AE6CA81 == 32)
      {
        int v5 = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
        uint64_t result = 0;
        if (!v5) {
          return result;
        }
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Buffer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal19_GetChiBuffers", g_ChipBuffersResp);
        int v8 = 4;
        goto LABEL_20;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx err,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "HAL", 69, "Hal19_GetChiBuffers", 770, byte_26AE6CA81);
        LbsOsaTrace_WriteLog(0xDu, __str, v16, 0, 1);
      }
      return 4294967288;
    }
  }
}

unsigned char *Hal19_HandlePatchResp(unsigned char *result, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!result)
  {
    uint64_t result = (unsigned char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
    return (unsigned char *)LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
  }
  if (a2 <= 0xB)
  {
    uint64_t result = (unsigned char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len,%u\n", v9);
    return (unsigned char *)LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
  }
  unint64_t v3 = result;
  if (result[2] != 66)
  {
    uint64_t result = (unsigned char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgC,%c \n", v11);
    return (unsigned char *)LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
  }
  uint64_t v4 = result[3];
  char v5 = v4 - 70;
  if ((v4 - 70) > 0x2A)
  {
LABEL_11:
    uint64_t result = (unsigned char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx default - MsgID,%c \n", v10);
    return (unsigned char *)LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
  }
  if (((1 << v5) & 0x601) == 0)
  {
    if (((1 << v5) & 0x60100000000) != 0) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v6 = result[4];
  if (v6 == 80 || v6 == 77)
  {
    unsigned int v7 = v3[8];
    uint64_t v8 = *((unsigned __int16 *)v3 + 5);
    return (unsigned char *)Hal08_HandleSingleAck(v6, v4, v8, v7);
  }
  else
  {
    uint64_t result = (unsigned char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MSGX-ID,%c\n", v12);
      return (unsigned char *)LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
    }
  }
  return result;
}

uint64_t asn1PD_NotificationMode(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  unsigned __int8 v11 = 0;
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = v5;
  }
  else
  {
    if (BitFromBuffer)
    {
      uint64_t v8 = Asn1Coder::DecodeEnumerationExtension(a1, &v11);
      if (v8)
      {
        uint64_t v5 = v8;
        int v6 = *(_DWORD *)(a1 + 8);
        int v7 = *(_DWORD *)(a1 + 12);
        goto LABEL_3;
      }
      unsigned __int8 v10 = v11;
    }
    else
    {
      uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v11);
      if (v8)
      {
        uint64_t v5 = v8;
        int v6 = *(_DWORD *)(a1 + 8);
        int v7 = *(_DWORD *)(a1 + 12);
        goto LABEL_3;
      }
      unsigned __int8 v10 = v11 + 1;
    }
    if (v10 <= 1u)
    {
      uint64_t v5 = 0;
      *a2 = v10;
      return v5;
    }
    uint64_t v5 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = 4;
  }
LABEL_3:
  SuplAsn1Logger::TraceError(v8, v6, v7);
  return v5;
}

uint64_t asn1PD_HistoricReporting(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_18:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *(unsigned char *)(a2 + 24) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_18;
  }
  int v10 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  unsigned __int8 v17 = 0;
  if (v5)
  {
LABEL_17:
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = v5;
    goto LABEL_18;
  }
  if (v10)
  {
    uint64_t v11 = Asn1Coder::DecodeEnumerationExtension(a1, &v17);
    if (v11)
    {
      uint64_t v5 = v11;
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
LABEL_16:
      SuplAsn1Logger::TraceError(v11, v12, v13);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v11 = Asn1Coder::DecodeInteger(a1, 0, 2u, &v17);
    if (v11)
    {
      uint64_t v5 = v11;
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
      goto LABEL_16;
    }
  }
  if (v17 >= 3u)
  {
    uint64_t v5 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    int v12 = *(_DWORD *)(a1 + 8);
    int v13 = *(_DWORD *)(a1 + 12);
    LODWORD(v11) = 4;
    goto LABEL_16;
  }
  *(unsigned char *)a2 = v17;
  if (*(unsigned char *)(a2 + 24))
  {
    int v14 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_16;
    }
    int v16 = v14;
    *(unsigned char *)(a2 + 20) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_16;
    }
    *(unsigned char *)(a2 + 21) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_16;
    }
    *(unsigned char *)(a2 + 22) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a2 + 20) && (uint64_t v5 = asn1PD_TimeWindow(a1, (_DWORD *)(a2 + 4)), v5))
    {
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = v5;
      goto LABEL_16;
    }
    if (*(unsigned char *)(a2 + 21))
    {
      uint64_t v11 = Asn1Coder::DecodeInteger(a1, 1, 0x10000u, (_DWORD *)(a2 + 12));
      if (v11)
      {
        uint64_t v5 = v11;
        int v12 = *(_DWORD *)(a1 + 8);
        int v13 = *(_DWORD *)(a1 + 12);
        goto LABEL_16;
      }
    }
    if (*(unsigned char *)(a2 + 22))
    {
      uint64_t v11 = Asn1Coder::DecodeInteger(a1, 0, 0x15180u, (_DWORD *)(a2 + 16));
      if (v11)
      {
        uint64_t v5 = v11;
        int v12 = *(_DWORD *)(a1 + 8);
        int v13 = *(_DWORD *)(a1 + 12);
        goto LABEL_16;
      }
    }
    if (v16)
    {
      uint64_t v11 = Asn1Coder::SkipSequenceExtension(a1);
      if (v11)
      {
        uint64_t v5 = v11;
        int v12 = *(_DWORD *)(a1 + 8);
        int v13 = *(_DWORD *)(a1 + 12);
        goto LABEL_16;
      }
    }
  }
  if (!v9) {
    return 0;
  }
  uint64_t v8 = Asn1Coder::SkipSequenceExtension(a1);
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_18;
  }
  return v5;
}

uint64_t asn1PD_TimeWindow(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, -525600, -1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_5:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, -525599, 0, a2 + 1);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }
  return v5;
}

uint64_t asn1PD_ProtectionLevel(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_18:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *(unsigned char *)(a2 + 64) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_18;
  }
  int v10 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  unsigned __int8 v17 = 0;
  if (v5)
  {
LABEL_17:
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = v5;
    goto LABEL_18;
  }
  if (v10)
  {
    uint64_t v11 = Asn1Coder::DecodeEnumerationExtension(a1, &v17);
    if (v11)
    {
      uint64_t v5 = v11;
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
LABEL_16:
      SuplAsn1Logger::TraceError(v11, v12, v13);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v11 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v17);
    if (v11)
    {
      uint64_t v5 = v11;
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
      goto LABEL_16;
    }
  }
  if (v17 >= 2u)
  {
    uint64_t v5 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    int v12 = *(_DWORD *)(a1 + 8);
    int v13 = *(_DWORD *)(a1 + 12);
    LODWORD(v11) = 4;
    goto LABEL_16;
  }
  *(unsigned char *)a2 = v17;
  if (*(unsigned char *)(a2 + 64))
  {
    int v14 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_16;
    }
    int v16 = v14;
    Asn1Coder::GetBitStringFromBuffer(a1, 0x40u, (unint64_t *)(a2 + 8), 0);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16)) {
      goto LABEL_21;
    }
    uint64_t v11 = Asn1Coder::DecodeInteger(a1, 0, 0xFFFFu, (_DWORD *)(a2 + 32));
    if (v11)
    {
      uint64_t v5 = v11;
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
      goto LABEL_16;
    }
    Asn1Coder::GetBitStringFromBuffer(a1, 0x20u, (unint64_t *)(a2 + 40), 0);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
LABEL_21:
      SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
      int v12 = *(_DWORD *)(a1 + 8);
      int v13 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = v5;
      goto LABEL_16;
    }
    if (v16)
    {
      uint64_t v11 = Asn1Coder::SkipSequenceExtension(a1);
      if (v11)
      {
        uint64_t v5 = v11;
        int v12 = *(_DWORD *)(a1 + 8);
        int v13 = *(_DWORD *)(a1 + 12);
        goto LABEL_16;
      }
    }
  }
  if (!v9) {
    return 0;
  }
  uint64_t v8 = Asn1Coder::SkipSequenceExtension(a1);
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_18;
  }
  return v5;
}

uint64_t asn1PD_SUPLINIT_VER2(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v14[0] = 0;
  int v15 = 0;
  uint64_t v4 = Asn1Coder::DecodeSequenceExtension(a1, (uint64_t)v14);
  int32x2_t v12 = 0;
  int v13 = 0;
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    Asn1Coder::DecodeOpenTypeFieldStart(a1, &v12);
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
      uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v6 = *(_DWORD *)(a1 + 8);
        int v7 = *(_DWORD *)(a1 + 12);
        LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
      }
      else
      {
        int v9 = BitFromBuffer;
        *(unsigned char *)(a2 + 240) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
        uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
        if (*(unsigned char *)(a1 + 16))
        {
          int v6 = *(_DWORD *)(a1 + 8);
          int v7 = *(_DWORD *)(a1 + 12);
          LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
        }
        else
        {
          *(unsigned char *)(a2 + 241) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
          uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
          if (*(unsigned char *)(a1 + 16))
          {
            int v6 = *(_DWORD *)(a1 + 8);
            int v7 = *(_DWORD *)(a1 + 12);
            LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
          }
          else
          {
            *(unsigned char *)(a2 + 242) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
            uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
            if (*(unsigned char *)(a1 + 16))
            {
              int v6 = *(_DWORD *)(a1 + 8);
              int v7 = *(_DWORD *)(a1 + 12);
              LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
            }
            else
            {
              *(unsigned char *)(a2 + 243) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
              uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
              if (*(unsigned char *)(a1 + 16))
              {
                int v6 = *(_DWORD *)(a1 + 8);
                int v7 = *(_DWORD *)(a1 + 12);
                LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
              }
              else
              {
                *(unsigned char *)(a2 + 244) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
                uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
                if (*(unsigned char *)(a1 + 16))
                {
                  int v6 = *(_DWORD *)(a1 + 8);
                  int v7 = *(_DWORD *)(a1 + 12);
                  LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
                }
                else
                {
                  *(unsigned char *)(a2 + 245) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
                  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
                  if (*(unsigned char *)(a1 + 16))
                  {
                    int v6 = *(_DWORD *)(a1 + 8);
                    int v7 = *(_DWORD *)(a1 + 12);
                    LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
                  }
                  else
                  {
                    *(unsigned char *)(a2 + 246) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
                    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
                    if (*(unsigned char *)(a1 + 16))
                    {
                      int v6 = *(_DWORD *)(a1 + 8);
                      int v7 = *(_DWORD *)(a1 + 12);
                      LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
                    }
                    else
                    {
                      *(unsigned char *)(a2 + 247) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
                      uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
                      if (*(unsigned char *)(a1 + 16)
                        || *(unsigned char *)(a2 + 240)
                        && (uint64_t v5 = asn1PD_NotificationMode(a1, (unsigned __int8 *)(a2 + 248)), v5))
                      {
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                        LODWORD(v4) = v5;
                      }
                      else if (*(unsigned char *)(a2 + 241) {
                             && (uint64_t v4 = asn1PD_SupportedNetworkInformation(a1, (unsigned char *)(a2 + 256)), v4))
                      }
                      {
                        uint64_t v5 = v4;
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                      }
                      else if (*(unsigned char *)(a2 + 242) && (uint64_t v4 = asn1PD_TriggerType(a1, (unsigned char *)(a2 + 352)), v4))
                      {
                        uint64_t v5 = v4;
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                      }
                      else if (*(unsigned char *)(a2 + 243) && (uint64_t v4 = asn1PD_SLPAddress(a1, a2 + 360), v4))
                      {
                        uint64_t v5 = v4;
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                      }
                      else if (*(unsigned char *)(a2 + 244) && (uint64_t v4 = asn1PD_HistoricReporting(a1, a2 + 448), v4))
                      {
                        uint64_t v5 = v4;
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                      }
                      else if (*(unsigned char *)(a2 + 245) && (uint64_t v4 = asn1PD_ProtectionLevel(a1, a2 + 480), v4))
                      {
                        uint64_t v5 = v4;
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                      }
                      else if (*(unsigned char *)(a2 + 246) {
                             && (uint64_t v4 = asn1PD_GNSSPosTechnology(a1, (unsigned char *)(a2 + 552)), v4))
                      }
                      {
                        uint64_t v5 = v4;
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                      }
                      else if (*(unsigned char *)(a2 + 247) {
                             && (uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 255, (_DWORD *)(a2 + 560)), v4))
                      }
                      {
                        uint64_t v5 = v4;
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                      }
                      else if (v9)
                      {
                        uint64_t v5 = 1;
                        *(unsigned char *)(a1 + 16) = 1;
                        SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                        LODWORD(v4) = 1;
                      }
                      else
                      {
                        __int32 v11 = v12.i32[0];
                        *(_DWORD *)(a1 + 8) = v13 + v12.i32[1];
                        *(_DWORD *)(a1 + 12) = v11;
                        uint64_t v4 = Asn1Coder::SkipSequenceExtensionAddition(a1, v14, 1u);
                        uint64_t v5 = v4;
                        if (!v4) {
                          return v5;
                        }
                        int v6 = *(_DWORD *)(a1 + 8);
                        int v7 = *(_DWORD *)(a1 + 12);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  SuplAsn1Logger::TraceError(v4, v6, v7);
  return v5;
}

uint64_t NK_Check_State(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 11032);
  if (v3 >= 0x258)
  {
    uint64_t v4 = 0;
    while (!*(unsigned char *)(a3 + 2960 + v4) || *(unsigned __int8 *)(result + v4) < 0x21u)
    {
      if (++v4 == 48) {
        return result;
      }
    }
    *(unsigned char *)(a3 + 960) = 0;
    *(unsigned char *)(a2 + 233) = 1;
    *(_DWORD *)(a3 + 964) = 0;
    *(unsigned char *)(a2 + 235) = 0;
    if (*(int *)(a3 + 12) >= 10) {
      *(_DWORD *)(a3 + 12) = 9;
    }
    if (v3 >= 0x384) {
      *(_DWORD *)(a2 + 11048) = 0;
    }
  }
  return result;
}

double Trop_Elev_MapF(uint64_t a1)
{
  v4[1] = *(double *)MEMORY[0x263EF8340];
  v4[0] = 0.0;
  BOOL v2 = R8_EQ((const double *)(a1 + 16), v4);
  double result = 1.0;
  if (!v2) {
    return 1.0 / (*(double *)(a1 + 8) + 0.00143 / (*(double *)(a1 + 8) / *(double *)(a1 + 16) + 0.0445));
  }
  return result;
}

void Trop_Niell_MappingFunc::Get_Dry_MappingFunc_OF(Trop_Niell_MappingFunc *this, double a2, double a3, double a4, int a5)
{
  if (*((unsigned char *)this + 66) && a3 >= -500.0 && a3 <= 18000.0) {
    sin(a2 * 0.0174532925);
  }
}

void Trop_Niell_MappingFunc::Set_MappingFunc_Params(Trop_Niell_MappingFunc *this, double a2, int a3)
{
  unsigned int v4 = a3 - 367;
  if ((a3 - 367) >= 0xFFFFFE92)
  {
    if (*((_DWORD *)this + 2) != a3 || !*((unsigned char *)this + 65))
    {
      char v5 = 0;
      *((unsigned char *)this + 65) = 1;
      *((_DWORD *)this + 2) = a3;
      goto LABEL_7;
    }
  }
  else
  {
    *(_WORD *)((char *)this + 65) = 0;
  }
  char v5 = 1;
LABEL_7:
  if (a2 < -90.0 || a2 > 90.0)
  {
    char v7 = 0;
    *((unsigned char *)this + 64) = 0;
LABEL_19:
    *((unsigned char *)this + 66) = v7;
    return;
  }
  if (vabdd_f64(*(double *)this, a2) > 0.5 || !*((unsigned char *)this + 64))
  {
    *((unsigned char *)this + 64) = 1;
    *(double *)this = a2;
    if (v4 < 0xFFFFFE92) {
      return;
    }
    goto LABEL_18;
  }
  if (v4 < 0xFFFFFE92) {
    char v6 = 1;
  }
  else {
    char v6 = v5;
  }
  if ((v6 & 1) == 0)
  {
LABEL_18:
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_a_Dry_Avg, NMF_a_Dry_Amp);
    *((void *)this + 5) = v8;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_b_Dry_Avg, NMF_b_Dry_Amp);
    *((void *)this + 6) = v9;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_c_Dry_Avg, NMF_c_Dry_Amp);
    *((void *)this + 7) = v10;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_a_Wet_Avg, 0);
    *((void *)this + 2) = v11;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_b_Wet_Avg, 0);
    *((void *)this + 3) = v12;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_c_Wet_Avg, 0);
    *((void *)this + 4) = v13;
    char v7 = 1;
    goto LABEL_19;
  }
}

void Trop_Niell_MappingFunc::Get_Wet_MappingFunc_OF(Trop_Niell_MappingFunc *this, double a2, double a3, int a4)
{
  if (*((unsigned char *)this + 66)) {
    fmax(sin(a2 * 0.0174532925), 0.001);
  }
}

void Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(Trop_Niell_MappingFunc *this, const double *a2, const double *a3)
{
  if (a2)
  {
    double v3 = (double)*((int *)this + 2);
    if (*(double *)this < 0.0) {
      double v3 = v3 + 182.625;
    }
    cos((v3 + -28.0) * 0.0172024238);
  }
}

uint64_t SuplUtils::GetInstance(SuplUtils *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (SuplUtils::GetInstance(void)::pred_suplUtils != -1) {
    dispatch_once(&SuplUtils::GetInstance(void)::pred_suplUtils, &__block_literal_global_7);
  }
  uint64_t result = SuplUtils::m_supl_utils;
  if (!SuplUtils::m_supl_utils)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GetInstance", "GetInstance");
      LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GetInstance", "SuplUtils.cpp", 63, "false && \"Memory allocation failure\"");
  }
  return result;
}

char *___ZN9SuplUtils11GetInstanceEv_block_invoke()
{
  uint64_t result = (char *)operator new(0x118uLL, MEMORY[0x263F8C180]);
  if (result)
  {
    *((_OWORD *)result + 15) = 0u;
    *((_OWORD *)result + 16) = 0u;
    *((_OWORD *)result + 13) = 0u;
    *((_OWORD *)result + 14) = 0u;
    *((_OWORD *)result + 11) = 0u;
    *((_OWORD *)result + 12) = 0u;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_WORD *)result + 20) = -254;
    *(_OWORD *)uint64_t result = 0u;
    result[36] = 1;
    *((_WORD *)result + 30) = 0;
    *((_WORD *)result + 38) = 0;
    *((_WORD *)result + 46) = 0;
    result[105] = 0;
    *((_WORD *)result + 60) = 0;
    *((_WORD *)result + 68) = 0;
    *((_WORD *)result + 76) = 0;
    *((_WORD *)result + 82) = 0;
    *((_WORD *)result + 90) = 0;
    *((_DWORD *)result + 46) = 0;
    *(_DWORD *)(result + 187) = 0;
    *((_WORD *)result + 102) = 0;
    *((_WORD *)result + 110) = 0;
    *((void *)result + 30) = 0;
    *((void *)result + 29) = 0;
    *((void *)result + 31) = 0;
    *(void *)(result + 255) = 0;
    result[276] = 0;
    *(void *)(result + 268) = 0;
    *(_WORD *)(result + 277) = 1;
    result[279] = 1;
  }
  SuplUtils::m_supl_utils = (uint64_t)result;
  return result;
}

uint64_t SuplUtils::SetSETInfo(SimUtils *a1, int a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  __int16 v16 = -1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  if (*(_WORD *)a3 != 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
LABEL_6:
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "SetSETInfo", 514);
      LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
    }
    return -4;
  }
  uint64_t v5 = *(char **)(a3 + 16);
  char v6 = *(char **)(a3 + 8);
  if ((unint64_t)(v5 - v6) >= 9)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      goto LABEL_6;
    }
    return -4;
  }
  if (&v16 == (__int16 *)a3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    a1 = (SimUtils *)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v6, v5, v5 - v6);
    uint64_t v10 = (char *)__p;
    uint64_t v11 = v18;
  }
  __str[0] = -1;
  uint64_t v12 = v11 - v10;
  if ((unint64_t)(v11 - v10) > 7)
  {
    if (v12 != 8)
    {
      uint64_t v18 = v10 + 8;
LABEL_17:
      unint64_t v13 = 0;
      do
      {
        v10[v13] = (v10[v13] >> 4) | (16 * v10[v13]);
        ++v13;
        uint64_t v10 = (char *)__p;
      }
      while (v13 < v18 - (unsigned char *)__p);
      goto LABEL_19;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(&__p, 8 - v12, __str);
    uint64_t v10 = (char *)__p;
    uint64_t v11 = v18;
  }
  if (v11 != v10) {
    goto LABEL_17;
  }
LABEL_19:
  __int16 v16 = *(_WORD *)a3;
  uint64_t Instance = (char *)SimUtils::GetInstance(a1);
  SimUtils::SetSETInfo(Instance, a2, (uint64_t)&v16);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_22B9B64E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SuplUtils::FillSetId(SimUtils *a1, uint64_t a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  __int16 v10 = -1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::string __p = 0;
  uint64_t Instance = (void *)SimUtils::GetInstance(a1);
  SimUtils::GetSETInfo(Instance, a3, (uint64_t)&v10);
  if (v10 == 1)
  {
    *(unsigned char *)a2 = 4;
    if ((void **)(a2 + 80) != &__p) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a2 + 80), (char *)__p, v12, v12 - (unsigned char *)__p);
    }
    __str[0] = -1;
    uint64_t v6 = *(void *)(a2 + 80);
    unint64_t v7 = *(void *)(a2 + 88) - v6;
    if (v7 > 7)
    {
      if (v7 != 8) {
        *(void *)(a2 + 88) = v6 + 8;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((void *)(a2 + 80), 8 - v7, __str);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "FillSetId", 514);
    LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
  }
  if (__p)
  {
    uint64_t v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22B9B66A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SuplUtils::FillLocationId(SimUtils *a1, uint64_t a2, int a3)
{
  uint64_t result = SimUtils::GetInstance(a1);
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    while (*(_DWORD *)v6 != a3)
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        return result;
      }
    }
    return ASN1T_LocationId::operator=(a2, v6 + 56);
  }
  return result;
}

uint64_t SuplUtils::ProcessSuplMtlrMessage(SuplProvider *a1, uint64_t a2, const void **a3, int a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v8 = (SuplInitRecd *)operator new(0x200uLL, MEMORY[0x263F8C180]);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    SuplInitRecd::SuplInitRecd(v8);
    __int16 v10 = (SuplProvider *)SuplInitRecd::ProcessSuplInit(v9, a2, a3);
    if (v10)
    {
      int IsLoggingAllowed = (LcsSuplGlueLayer *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "ProcessSuplMtlrMessage", 770);
        int IsLoggingAllowed = (LcsSuplGlueLayer *)LbsOsaTrace_WriteLog(0x12u, __str, v13, 0, 1);
      }
      uint64_t Instance = LcsSuplGlueLayer::GetInstance(IsLoggingAllowed);
      int v15 = SuplUtils::ConvertPosMethod(Instance, *(unsigned __int8 *)(*(void *)(v9 + 40) + 5));
      LcsSuplGlueLayer::SendSuplMsgStatus(Instance, a4, 2, v15, 0, 0);
      SuplInitRecd::~SuplInitRecd((SuplInitRecd *)v9);
      MEMORY[0x230F4E5D0]();
      return -1;
    }
    else
    {
      uint64_t v19 = *(uint64_t **)(v9 + 8);
      if (v19)
      {
        uint64_t v20 = *v19;
        if (v20)
        {
          if (*(unsigned char *)(*(void *)(v20 + 16) + 73))
          {
            uint64_t v21 = (SuplProvider *)SuplProvider::GetInstance(v10);
            SuplProvider::AbortAllSessionsOnPriority(v21);
          }
        }
      }
      *(_DWORD *)uint64_t v9 = a4;
      *(_DWORD *)(v9 + 4) = a2;
      *(unsigned char *)(v9 + 16) = 1;
      if (SuplUtils::StoreSuplInitRecd((uint64_t)a1, a4, v9))
      {
        started = (LcsSuplGlueLayer *)SuplInitRecd::StartSessionTimer((SuplInitRecd *)v9);
        uint64_t v23 = LcsSuplGlueLayer::GetInstance(started);
        int v24 = SuplUtils::ConvertPosMethod(v23, *(unsigned __int8 *)(*(void *)(v9 + 40) + 5));
        unsigned int v25 = (SimUtils *)LcsSuplGlueLayer::SendSuplMsgStatus(v23, a4, 1, v24, 0, 0);
        IsLocIdValid = *(SimInformation **)(SimUtils::GetInstance(v25) + 16);
        if (!IsLocIdValid) {
          goto LABEL_23;
        }
        while (*(_DWORD *)IsLocIdValid != a2)
        {
          IsLocIdValid = (SimInformation *)*((void *)IsLocIdValid + 1);
          if (!IsLocIdValid) {
            goto LABEL_23;
          }
        }
        IsLocIdValid = (SimInformation *)SimInformation::IsLocIdValid(IsLocIdValid);
        if (IsLocIdValid)
        {
          SuplUtils::ProcessWaitingSuplInits(a1);
        }
        else
        {
LABEL_23:
          LcsSuplGlueLayer::GetInstance(IsLocIdValid);
          GN_SUPL_LocIdReq_Out(4095, a2);
        }
        return 0;
      }
      else
      {
        uint64_t v27 = (LcsSuplGlueLayer *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (v27)
        {
          bzero(__str, 0x410uLL);
          uint64_t v28 = mach_continuous_time();
          unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "SPL", 69, "ProcessSuplMtlrMessage", 1537);
          uint64_t v27 = (LcsSuplGlueLayer *)LbsOsaTrace_WriteLog(0x12u, __str, v29, 0, 1);
        }
        uint64_t v30 = LcsSuplGlueLayer::GetInstance(v27);
        int v31 = SuplUtils::ConvertPosMethod(v30, *(unsigned __int8 *)(*(void *)(v9 + 40) + 5));
        LcsSuplGlueLayer::SendSuplMsgStatus(v30, a4, 2, v31, 0, 0);
        SuplInitRecd::~SuplInitRecd((SuplInitRecd *)v9);
        MEMORY[0x230F4E5D0]();
        return -2;
      }
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "SPL", 69, "ProcessSuplMtlrMessage", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v18, 0, 1);
    }
    return -3;
  }
}

void sub_22B9B6B3C(_Unwind_Exception *a1)
{
  MEMORY[0x230F4E5C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t SuplUtils::ConvertPosMethod(uint64_t a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2 >= 0x11)
  {
    uint64_t v2 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Position Method\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "ConvertPosMethod", 770);
      LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = dword_22BB42888[(char)a2];
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Position Method,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 73, "ConvertPosMethod", v2);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 4, 1);
  }
  return v2;
}

uint64_t SuplUtils::StoreSuplInitRecd(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned __int16 v6 = operator new(0x18uLL, MEMORY[0x263F8C180]);
  if (v6)
  {
    v6[1] = 0;
    v6[2] = a3;
    *(_DWORD *)unsigned __int16 v6 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    while (v7)
    {
      uint64_t v8 = v7;
      uint64_t v7 = *(void *)(v7 + 8);
      if (!v7)
      {
        *(void *)(v8 + 8) = v6;
        v6[1] = 0;
        return 1;
      }
    }
    v6[1] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    return 1;
  }
  else
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 69, "StoreSuplInitRecd", 1537);
      LbsOsaTrace_WriteLog(0x12u, __str, v12, 0, 1);
      return 0;
    }
  }
  return result;
}

size_t SuplInitRecd::StartSessionTimer(SuplInitRecd *this)
{
  uint64_t v2 = (int *)((char *)this + 496);
  uint64_t Instance = (SuplUtils *)LcsUtils::GetInstance(this);
  int v4 = *(_DWORD *)this + 0xFFFF;
  uint64_t v5 = SuplUtils::GetInstance(Instance);
  if (*(_WORD *)(v5 + 38)) {
    int v6 = 1000 * *(unsigned __int16 *)(v5 + 38);
  }
  else {
    int v6 = 260000;
  }
  LcsTimer::Init(v2, v4, 0, v6, 1);

  return LcsTimer::Start((LcsTimer *)v2);
}

SuplProvider *SuplUtils::ProcessWaitingSuplInits(SuplProvider *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  for (uint64_t i = *((void *)this + 2); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v2 = *(void *)(i + 16);
    if (v2)
    {
      if (*(unsigned char *)(v2 + 16) == 1)
      {
        *(unsigned char *)(v2 + 16) = 0;
        uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 + 40) + 5);
        this = (SuplProvider *)SuplProvider::GetInstance(this);
        if (this)
        {
          BYTE4(v10) = -1;
          int v11 = 0;
          LOBYTE(v10) = 3;
          uint64_t v4 = *(void *)(i + 16);
          uint64_t v5 = *(uint64_t **)(v4 + 8);
          if (v5)
          {
            uint64_t v6 = *v5;
            if (v6)
            {
              if (*(unsigned char *)(*(void *)(v6 + 16) + 73)) {
                LOBYTE(v10) = 2;
              }
            }
          }
          SuplProvider::InitSessionNode((uint64_t)this, *(_DWORD *)(v4 + 4), *(_DWORD *)v4, &v10, 0);
          RequestedGNSSList = *(SuplInitRecdVer2 **)(*(void *)(i + 16) + 8);
          if (RequestedGNSSList)
          {
            RequestedGNSSList = (SuplInitRecdVer2 *)SuplInitRecdVer2::GetRequestedGNSSList(RequestedGNSSList);
            uint64_t v8 = RequestedGNSSList;
          }
          else
          {
            uint64_t v8 = 0;
          }
          uint64_t Instance = LcsSuplGlueLayer::GetInstance(RequestedGNSSList);
          this = (SuplProvider *)(*(uint64_t (**)(uint64_t, void, uint64_t, SuplInitRecdVer2 *))(*(void *)Instance + 16))(Instance, **(unsigned int **)(i + 16), v3, v8);
        }
      }
    }
  }
  return this;
}

uint64_t SuplUtils::DeleteSuplInitRecd(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(this + 16);
    do
    {
      if (*(_DWORD *)v3 == a2)
      {
        while (*(_DWORD *)v2 != a2)
        {
          uint64_t v2 = *(void *)(v2 + 8);
          if (!v2) {
            goto LABEL_9;
          }
        }
        LcsLinkedList::Remove(this, v2);
LABEL_9:
        uint64_t v4 = *(SuplInitRecd **)(v3 + 16);
        if (v4)
        {
          SuplInitRecd::~SuplInitRecd(v4);
          MEMORY[0x230F4E5D0]();
        }
        *(void *)(v3 + 8) = 0;
        *(void *)(v3 + 16) = 0;
        JUMPOUT(0x230F4E5D0);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
  return this;
}

uint64_t SuplUtils::ValidateSlpId(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int8 *)a3;
  if (v5 == *a2)
  {
    uint64_t v6 = 1;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "ValidateSlpId", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
    }
    uint64_t v6 = 0;
    int v5 = *a2;
  }
  if (v5 == 255)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return v6;
    }
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v15 = 515;
    goto LABEL_16;
  }
  if (v5 == 2)
  {
    uint64_t v10 = (const void *)a3[8];
    size_t v11 = a3[9] - (void)v10;
    uint64_t v12 = (const void *)*((void *)a2 + 8);
    uint64_t v13 = *((void *)a2 + 9);
    goto LABEL_19;
  }
  if (v5 != 1) {
    goto LABEL_12;
  }
  int v9 = a2[8];
  if (v9 == 2)
  {
    uint64_t v10 = (const void *)a3[5];
    size_t v11 = a3[6] - (void)v10;
    uint64_t v12 = (const void *)*((void *)a2 + 5);
    uint64_t v13 = *((void *)a2 + 6);
    goto LABEL_19;
  }
  if (v9 != 1)
  {
LABEL_12:
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return v6;
    }
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v15 = 514;
LABEL_16:
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v14, "SPL", 69, "ValidateSlpId", v15);
    LbsOsaTrace_WriteLog(0x12u, __str, v16, 0, 1);
    return v6;
  }
  uint64_t v10 = (const void *)a3[2];
  size_t v11 = a3[3] - (void)v10;
  uint64_t v12 = (const void *)*((void *)a2 + 2);
  uint64_t v13 = *((void *)a2 + 3);
LABEL_19:
  if (v11 != v13 - (void)v12 || memcmp(v10, v12, v11))
  {
    uint64_t v6 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "SPL", 69, "ValidateSlpId", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v18, 0, 1);
      return 0;
    }
  }
  return v6;
}

uint64_t SuplUtils::ValidateSlpSessionId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  size_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (v4 == *(void *)(a3 + 8) - *(void *)a3 && !memcmp(*(const void **)a2, *(const void **)a3, v4)) {
    return 1;
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "ValidateSlpSessionId", 515);
    LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
    return 0;
  }
  return result;
}

uint64_t SuplUtils::ValidateSetSessionId(SuplUtils *this, int a2, int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 == a3) {
    return 1;
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "ValidateSetSessionId", 515);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    return 0;
  }
  return result;
}

uint64_t SuplUtils::ValidateSetId(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  if (v3 == *a3)
  {
    switch(*a2)
    {
      case 1u:
        size_t v4 = (const void *)*((void *)a2 + 1);
        size_t v5 = *((void *)a2 + 2) - (void)v4;
        unsigned __int16 v6 = (const void *)*((void *)a3 + 1);
        uint64_t v7 = *((void *)a3 + 2);
        goto LABEL_8;
      case 2u:
      case 3u:
      case 5u:
        goto LABEL_5;
      case 4u:
        size_t v4 = (const void *)*((void *)a2 + 10);
        size_t v5 = *((void *)a2 + 11) - (void)v4;
        unsigned __int16 v6 = (const void *)*((void *)a3 + 10);
        uint64_t v7 = *((void *)a3 + 11);
LABEL_8:
        if (v5 == v7 - (void)v6 && !memcmp(v4, v6, v5)) {
          goto LABEL_13;
        }
        goto LABEL_14;
      case 6u:
        int v11 = a2[128];
        if (v11 != a3[128] || (v11 - 1) >= 2) {
          goto LABEL_14;
        }
        goto LABEL_13;
      default:
        if (v3 != 255) {
          goto LABEL_14;
        }
LABEL_5:
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "ValidateSetId", 770);
          uint64_t v10 = 1;
          LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
        }
        else
        {
LABEL_13:
          uint64_t v10 = 1;
        }
        break;
    }
  }
  else
  {
LABEL_14:
    uint64_t v10 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "ValidateSetId", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v13, 0, 1);
      return 0;
    }
  }
  return v10;
}

BOOL SuplUtils::GetFixedSetCapabilities(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t Instance = (SimUtils *)SimUtils::GetInstance((SimUtils *)a1);
  BOOL result = SimUtils::IsItCampedOnLte(Instance, a3);
  *(unsigned char *)(a2 + 9) = !result;
  if (*(unsigned char *)(a1 + 279)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *(unsigned char *)(a1 + 276) == 1 && result;
  }
  *(unsigned char *)a2 = v8;
  *(_WORD *)(a2 + 1) = *(_WORD *)(a1 + 277);
  *(unsigned char *)(a2 + 10) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

BOOL SuplUtils::FillSetCapabilities(unsigned char *a1, uint64_t a2, int a3, int a4)
{
  BOOL result = SuplUtils::GetFixedSetCapabilities((uint64_t)a1, a2, a4);
  if (a1[277] == 1) {
    *(unsigned char *)(a2 + 7) = 1;
  }
  if ((a3 & 0xFFFFFFFD) == 0 && !a1[279] && a1[276] == 1) {
    *(unsigned char *)(a2 + 7) = 0;
  }
  return result;
}

SimInformation *SuplUtils::IsSETInfoValid(SuplUtils *this, int a2)
{
  BOOL result = *(SimInformation **)(SimUtils::GetInstance(this) + 16);
  if (result)
  {
    while (*(_DWORD *)result != a2)
    {
      BOOL result = (SimInformation *)*((void *)result + 1);
      if (!result) {
        return result;
      }
    }
    return (SimInformation *)(SimInformation::IsSETIdValid(result) == 1);
  }
  return result;
}

void SuplUtils::CopySlpSessionId(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a3 + 224 != a2) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)a2, *(char **)(a3 + 224), *(char **)(a3 + 232), *(void *)(a3 + 232) - *(void *)(a3 + 224));
  }
  int v5 = *(unsigned __int8 *)(a3 + 248);
  *(unsigned char *)(a2 + 24) = v5;
  if (v5 == 255)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v11 = 515;
    goto LABEL_18;
  }
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      *(unsigned char *)(a2 + 32) = *(unsigned char *)(a3 + 256);
      int v6 = *(unsigned __int8 *)(a3 + 256);
      if (v6 == 2)
      {
        if (a2 == a3 + 224) {
          return;
        }
        uint64_t v7 = *(char **)(a3 + 288);
        BOOL v8 = *(char **)(a3 + 296);
        unsigned __int16 v9 = (void *)(a2 + 64);
        goto LABEL_22;
      }
      if (v6 == 1)
      {
        if (a2 == a3 + 224) {
          return;
        }
        uint64_t v7 = *(char **)(a3 + 264);
        BOOL v8 = *(char **)(a3 + 272);
        unsigned __int16 v9 = (void *)(a2 + 40);
LABEL_22:
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v9, v7, v8, v8 - v7);
        return;
      }
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v11 = 514;
LABEL_18:
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v10, "SPL", 69, "CopySlpSessionId", v11);
    LbsOsaTrace_WriteLog(0x12u, __str, v14, 0, 1);
    return;
  }
  if (a2 != a3 + 224)
  {
    uint64_t v12 = *(char **)(a3 + 312);
    unsigned __int16 v13 = *(char **)(a3 + 320);
    std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(a2 + 88), v12, v13, v13 - v12);
  }
}

void SuplUtils::ConvertLocEstimatetoAsn1Position(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return;
    }
    goto LABEL_7;
  }
  *(unsigned char *)a2 = 0;
  unsigned int v4 = *(unsigned __int8 *)(a3 + 1);
  if (v4 > 0xA)
  {
LABEL_18:
    if (v4 == 255)
    {
LABEL_4:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "ConvertLocEstimatetoAsn1Position", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
      }
      return;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return;
    }
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "ConvertLocEstimatetoAsn1Position", 515);
    LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
    return;
  }
  if (((1 << v4) & 0x523) != 0) {
    goto LABEL_4;
  }
  if (v4 != 3)
  {
    if (v4 == 9)
    {
      *(unsigned char *)(a2 + 35) = (*(_DWORD *)(a2 + 36) & 0x800000) != 0;
      *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 68) & 0x7FFFFF;
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 76);
      unsigned int v9 = *(unsigned __int16 *)(a3 + 84);
      int v10 = *(_DWORD *)(a3 + 108);
      if (v9 != 0xFFFF && v10 != 255) {
        *(unsigned char *)(a2 + 34) = 1;
      }
      *(unsigned char *)(a2 + 52) = v10;
      *(unsigned char *)(a2 + 48) = v9 >> 15;
      *(_WORD *)(a2 + 50) = v9 & 0x7FFF;
      int v11 = *(_DWORD *)(a3 + 92);
      int v12 = *(_DWORD *)(a3 + 100);
      if (v11 != 255 && v12 != 255 && *(unsigned __int8 *)(a3 + 116) != 255) {
        *(unsigned char *)(a2 + 32) = 1;
      }
      *(unsigned char *)(a2 + 46) = *(unsigned char *)(a3 + 116);
      *(unsigned char *)(a2 + 44) = v11;
      *(unsigned char *)(a2 + 45) = v12;
      *(unsigned char *)(a2 + 33) = 1;
      unsigned __int16 v13 = (unsigned char *)(a3 + 117);
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  int v14 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 36) = v14;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  *(unsigned char *)(a2 + 35) = (v14 & 0x800000) != 0;
  *(unsigned char *)(a2 + 34) = 0;
  *(_WORD *)(a2 + 32) = 257;
  *(unsigned char *)(a2 + 46) = *(unsigned char *)(a3 + 64);
  *(unsigned char *)(a2 + 44) = *(_DWORD *)(a3 + 48);
  *(unsigned char *)(a2 + 45) = *(_DWORD *)(a3 + 56);
  unsigned __int16 v13 = (unsigned char *)(a3 + 65);
LABEL_22:
  uint64_t v16 = (unint64_t *)(a2 + 8);
  int v15 = *(unsigned char **)(a2 + 8);
  *(unsigned char *)(a2 + 47) = *v13;
  unint64_t v17 = *(void *)(a2 + 16) - (void)v15;
  if (v17 > 0xC)
  {
    if (v17 != 13) {
      *(void *)(a2 + 16) = v15 + 13;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(v16, 13 - v17);
    int v15 = (unsigned char *)*v16;
  }
  *int v15 = (*(_WORD *)(a3 + 216) / 0xAu - 10 * ((6554 * (*(unsigned __int16 *)(a3 + 216) / 0xAu)) >> 16)) | 0x30;
  *(unsigned char *)(*v16 + 1) = (*(_WORD *)(a3 + 216) % 0xAu) | 0x30;
  *(unsigned char *)(*v16 + 2) = (*(unsigned char *)(a3 + 218) / 0xAu
                        - 10 * ((unsigned __int16)(26 * (*(unsigned __int8 *)(a3 + 218) / 0xAu)) >> 8)) | 0x30;
  *(unsigned char *)(*v16 + 3) = (*(unsigned char *)(a3 + 218) % 0xAu) | 0x30;
  *(unsigned char *)(*v16 + 4) = (*(unsigned char *)(a3 + 219) / 0xAu
                        - 10 * ((unsigned __int16)(26 * (*(unsigned __int8 *)(a3 + 219) / 0xAu)) >> 8)) | 0x30;
  *(unsigned char *)(*v16 + 5) = (*(unsigned char *)(a3 + 219) % 0xAu) | 0x30;
  *(unsigned char *)(*v16 + 6) = (*(unsigned char *)(a3 + 220) / 0xAu
                        - 10 * ((unsigned __int16)(26 * (*(unsigned __int8 *)(a3 + 220) / 0xAu)) >> 8)) | 0x30;
  *(unsigned char *)(*v16 + 7) = (*(unsigned char *)(a3 + 220) % 0xAu) | 0x30;
  *(unsigned char *)(*v16 + 8) = (*(unsigned char *)(a3 + 221) / 0xAu
                        - 10 * ((unsigned __int16)(26 * (*(unsigned __int8 *)(a3 + 221) / 0xAu)) >> 8)) | 0x30;
  *(unsigned char *)(*v16 + 9) = (*(unsigned char *)(a3 + 221) % 0xAu) | 0x30;
  *(unsigned char *)(*v16 + 10) = (*(unsigned char *)(a3 + 222) / 0xAu
                         - 10 * ((unsigned __int16)(26 * (*(unsigned __int8 *)(a3 + 222) / 0xAu)) >> 8)) | 0x30;
  *(unsigned char *)(*v16 + 11) = (*(unsigned char *)(a3 + 222) % 0xAu) | 0x30;
  *(unsigned char *)(*v16 + 12) = 90;
}

uint64_t SuplUtils::IsItDuplicateSUPLINIT(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  ASN1T_SessionID::ASN1T_SessionID((ASN1T_SessionID *)v14);
  unsigned int v4 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  std::string __p = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v4, v5, v5 - (void)v4);
  v37[0] = &__p;
  v37[1] = 5;
  char v38 = 0;
  int v6 = asn1PD_SessionID((uint64_t)v37, (uint64_t)v14);
  uint64_t v7 = (uint64_t)__p;
  if (__p)
  {
    uint64_t v40 = __p;
    operator delete(__p);
  }
  uint64_t v8 = 0;
  if (!v6 && v14[1])
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      while (1)
      {
        uint64_t v10 = *(void *)(v9 + 16);
        if (*(unsigned char *)(v10 + 49))
        {
          uint64_t v7 = SuplUtils::ValidateSlpSessionId(v7, (uint64_t)v29, v10 + 384);
          if (v7)
          {
            uint64_t v7 = SuplUtils::ValidateSlpId(v7, v30, (void *)(*(void *)(v9 + 16) + 408));
            if (v7) {
              break;
            }
          }
        }
        uint64_t v9 = *(void *)(v9 + 8);
        if (!v9) {
          goto LABEL_10;
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(&__p, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf((char *)&__p, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "IsSessionWithSLPExists", 515);
        LbsOsaTrace_WriteLog(0x12u, (char *)&__p, v13, 0, 1);
      }
      uint64_t v8 = 1;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
  }
  if (v35)
  {
    double v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    char v32 = v31;
    operator delete(v31);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    double v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    int v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    char v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    unsigned __int16 v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  return v8;
}

void sub_22B9B83EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57)
{
  if (__p)
  {
    a57 = (uint64_t)__p;
    operator delete(__p);
  }
  ASN1T_SessionID::~ASN1T_SessionID((ASN1T_SessionID *)&a14);
  _Unwind_Resume(a1);
}

uint64_t SuplUtils::IsQopValid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a3 == 2)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Last know position fix is not valid\n");
    goto LABEL_10;
  }
  if (*(unsigned char *)(a3 + 1) != 9)
  {
    int v7 = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    uint64_t result = 0;
    if (!v7) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Last know position shape type is not valid\n");
    goto LABEL_10;
  }
  if (*(_DWORD *)(a3 + 92) > *(unsigned __int8 *)(a2 + 3))
  {
    int v6 = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: stored semiminor axis is not valid\n");
    goto LABEL_10;
  }
  if (*(unsigned char *)a2 == 1 && *(_DWORD *)(a3 + 108) > *(unsigned __int8 *)(a2 + 4))
  {
    int v8 = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    uint64_t result = 0;
    if (v8)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: vertical accuracy is not valid\n");
LABEL_10:
      LbsOsaTrace_WriteLog(0x12u, __str, v5, 4, 1);
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 1) != 1) {
      return 1;
    }
    int v9 = *(_DWORD *)(a3 + 228);
    if (1000 * *(_DWORD *)(a2 + 8) >= (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                                      * (double)mach_continuous_time())
                                     - v9)
      return 1;
    int v10 = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    uint64_t result = 0;
    if (v10)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: maxlocation age is not valid\n");
      goto LABEL_10;
    }
  }
  return result;
}

char *SuplUtils::StoreLastKnownPositionFix(char *result, uint64_t a2)
{
  if (a2)
  {
    int v3 = result;
    *((_WORD *)result + 20) = *(_WORD *)a2;
    long long v4 = *(_OWORD *)(a2 + 8);
    long long v5 = *(_OWORD *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 40);
    *((_OWORD *)result + 6) = *(_OWORD *)(a2 + 56);
    *((_OWORD *)result + 5) = v6;
    *((_OWORD *)result + 4) = v5;
    *((_OWORD *)result + 3) = v4;
    long long v7 = *(_OWORD *)(a2 + 72);
    long long v8 = *(_OWORD *)(a2 + 88);
    long long v9 = *(_OWORD *)(a2 + 104);
    *((_OWORD *)result + 10) = *(_OWORD *)(a2 + 120);
    *((_OWORD *)result + 9) = v9;
    *((_OWORD *)result + 8) = v8;
    *((_OWORD *)result + 7) = v7;
    long long v10 = *(_OWORD *)(a2 + 136);
    long long v11 = *(_OWORD *)(a2 + 152);
    long long v12 = *(_OWORD *)(a2 + 168);
    *((void *)result + 28) = *(void *)(a2 + 184);
    *((_OWORD *)result + 13) = v12;
    *((_OWORD *)result + 12) = v11;
    *((_OWORD *)result + 11) = v10;
    if (result + 40 != (char *)a2) {
      uint64_t result = std::vector<UtaLcsShapePoint>::__assign_with_size[abi:ne180100]<UtaLcsShapePoint*,UtaLcsShapePoint*>(result + 232, *(char **)(a2 + 192), *(void *)(a2 + 200), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 4);
    }
    *((_OWORD *)v3 + 16) = *(_OWORD *)(a2 + 216);
  }
  return result;
}

uint64_t SuplUtils::GetLastKnownPosition(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a2 = *(_WORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 24) = v5;
  *(_OWORD *)(a2 + 8) = v4;
  long long v7 = *(_OWORD *)(a1 + 112);
  long long v8 = *(_OWORD *)(a1 + 128);
  long long v9 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 104) = v9;
  *(_OWORD *)(a2 + 88) = v8;
  *(_OWORD *)(a2 + 72) = v7;
  long long v10 = *(_OWORD *)(a1 + 176);
  long long v11 = *(_OWORD *)(a1 + 192);
  long long v12 = *(_OWORD *)(a1 + 208);
  *(void *)(a2 + 184) = *(void *)(a1 + 224);
  *(_OWORD *)(a2 + 168) = v12;
  *(_OWORD *)(a2 + 152) = v11;
  *(_OWORD *)(a2 + 136) = v10;
  if (a1 + 40 != a2) {
    std::vector<UtaLcsShapePoint>::__assign_with_size[abi:ne180100]<UtaLcsShapePoint*,UtaLcsShapePoint*>((char *)(a2 + 192), *(char **)(a1 + 232), *(void *)(a1 + 240), (uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 4);
  }
  *(_OWORD *)(a2 + 216) = *(_OWORD *)(a1 + 256);
  return 0;
}

unsigned __int8 *SuplUtils::ConvertSuplAddressToGnSuplAddess(unsigned __int8 *result, char *__str)
{
  int v2 = *result;
  if (v2 == 1)
  {
    int v5 = result[8];
    if (v5 == 2)
    {
      *((_DWORD *)__str + 64) = 2;
      long long v6 = (unsigned __int8 *)*((void *)result + 5);
      return (unsigned __int8 *)snprintf(__str, 0x100uLL, "%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d.%d", *v6, v6[1], v6[2], v6[3], v6[4], v6[5]);
    }
    else if (v5 == 1)
    {
      *((_DWORD *)__str + 64) = 1;
      return (unsigned __int8 *)snprintf(__str, 0x100uLL, "%d.%d.%d.%d");
    }
  }
  else if (v2 == 2)
  {
    *((_DWORD *)__str + 64) = 3;
    int v3 = (unsigned char *)*((void *)result + 8);
    long long v4 = (unsigned char *)*((void *)result + 9);
    if (v4 != v3)
    {
      return (unsigned __int8 *)memmove(__str, v3, v4 - v3);
    }
  }
  else
  {
    *((_DWORD *)__str + 64) = 0;
  }
  return result;
}

uint64_t SuplUtils::DecodeSUPL_INIT(SuplVersionNegotiation *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (*(void *)a3 != *(void *)(a3 + 8))
  {
    __int16 v26 = 0;
    uint64_t Instance = SuplVersionNegotiation::GetInstance(a1);
    int v7 = atomic_load((unsigned __int8 *)(Instance + 1));
    BOOL v8 = v7 == 255;
    uint64_t v9 = 1;
    if (v8) {
      uint64_t v9 = 2;
    }
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)(Instance + v9));
    unsigned __int8 v27 = v10;
    __int16 v28 = 0;
    __int16 v29 = -1;
    uint64_t v30 = 0;
    ASN1T_SessionID::ASN1T_SessionID((ASN1T_SessionID *)v31);
    std::string __p = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
    v55[0] = &__p;
    v55[1] = 0;
    char v56 = 0;
    v22[0] = v55;
    v22[1] = &v26;
    uint64_t v11 = SuplMessage::Decode((SuplMessage *)v22);
    if (v11 || v29 != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "SPL", 69, "DecodeSUPL_INIT", 515);
        LbsOsaTrace_WriteLog(0x12u, __str, v19, 0, 1);
      }
      __int16 v17 = -5;
      goto LABEL_43;
    }
    uint64_t v12 = v30;
    *(unsigned char *)(a4 + 5) = *(unsigned char *)(v30 + 184) == 0;
    *(unsigned char *)(a4 + 6) = v27;
    *(_WORD *)(a4 + 7) = v28;
    *(_DWORD *)(a4 + 12) = SuplUtils::ConvertPosMethod(v11, *(unsigned __int8 *)(v12 + 5));
    *(_DWORD *)(a4 + 272) = 0;
    if (v31[1] == 1) {
      SuplUtils::ConvertSuplAddressToGnSuplAddess(v48, (char *)(a4 + 16));
    }
    *(_DWORD *)(a4 + 536) = 0;
    if (*(unsigned char *)(v12 + 243) == 1) {
      SuplUtils::ConvertSuplAddressToGnSuplAddess((unsigned __int8 *)(v12 + 360), (char *)(a4 + 280));
    }
    *(_DWORD *)(a4 + 800) = 0;
    if (*(unsigned char *)(v12 + 1) == 1) {
      SuplUtils::ConvertSuplAddressToGnSuplAddess((unsigned __int8 *)(v12 + 80), (char *)(a4 + 544));
    }
    *(unsigned char *)(a4 + 808) = *(unsigned char *)(v12 + 73) != 0;
    *(_DWORD *)(a4 + 812) = 0;
    if (*(unsigned char *)v12 == 1)
    {
      unsigned int v13 = *(unsigned __int8 *)(v12 + 13);
      if (v13 <= 4) {
        *(_DWORD *)(a4 + 812) = v13 + 1;
      }
    }
    *(unsigned char *)(a4 + 816) = 0;
    if (*(unsigned char *)(v12 + 246))
    {
      int v14 = *(unsigned __int8 *)(v12 + 552);
      if (v14 == 1) {
        *(unsigned char *)(a4 + 816) = 1;
      }
      else {
        LOBYTE(v14) = 0;
      }
      if (*(unsigned char *)(v12 + 553) == 1)
      {
        LOBYTE(v14) = v14 | 2;
        *(unsigned char *)(a4 + 816) = v14;
      }
      if (*(unsigned char *)(v12 + 554) == 1)
      {
        LOBYTE(v14) = v14 | 4;
        *(unsigned char *)(a4 + 816) = v14;
      }
      if (*(unsigned char *)(v12 + 555) == 1)
      {
        LOBYTE(v14) = v14 | 8;
        *(unsigned char *)(a4 + 816) = v14;
      }
      if (*(unsigned char *)(v12 + 556) == 1)
      {
        LOBYTE(v14) = v14 | 0x10;
        *(unsigned char *)(a4 + 816) = v14;
      }
      if (*(unsigned char *)(v12 + 557) == 1) {
        *(unsigned char *)(a4 + 816) = v14 | 0x20;
      }
    }
    *(unsigned char *)(a4 + 817) = 0;
    if (*(unsigned char *)(v12 + 2) == 1)
    {
      *(unsigned char *)(a4 + 817) = 1;
      *(_WORD *)(a4 + 820) = *(_WORD *)(v12 + 171);
      *(_DWORD *)(a4 + 824) = *(_DWORD *)(v12 + 176);
      *(unsigned char *)(a4 + 828) = *(unsigned char *)(v12 + 180);
    }
    *(_DWORD *)(a4 + 832) = 0;
    if (*(unsigned char *)(v12 + 242) == 1)
    {
      int v20 = *(unsigned __int8 *)(v12 + 352);
      if (v20 == 1)
      {
LABEL_41:
        *(_DWORD *)(a4 + 832) = v20;
        goto LABEL_42;
      }
      if (!*(unsigned char *)(v12 + 352))
      {
        int v20 = 2;
        goto LABEL_41;
      }
    }
LABEL_42:
    __int16 v17 = 0;
    *(unsigned char *)(a4 + 4) = 1;
LABEL_43:
    if (__p)
    {
      int v24 = __p;
      operator delete(__p);
    }
    if (v53)
    {
      char v54 = v53;
      operator delete(v53);
    }
    if (v51)
    {
      char v52 = v51;
      operator delete(v51);
    }
    if (v49)
    {
      char v50 = v49;
      operator delete(v49);
    }
    if (v46)
    {
      long long v47 = v46;
      operator delete(v46);
    }
    if (v44)
    {
      long long v45 = v44;
      operator delete(v44);
    }
    if (v42)
    {
      long long v43 = v42;
      operator delete(v42);
    }
    if (v40)
    {
      uint64_t v41 = v40;
      operator delete(v40);
    }
    if (v38)
    {
      double v39 = v38;
      operator delete(v38);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    if (v34)
    {
      double v35 = v34;
      operator delete(v34);
    }
    if (v32)
    {
      BOOL v33 = v32;
      operator delete(v32);
    }
    ASN1T_UlpMessage::~ASN1T_UlpMessage((ASN1T_UlpMessage *)&v29);
    return v17;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "SPL", 69, "DecodeSUPL_INIT", 515);
    LbsOsaTrace_WriteLog(0x12u, __str, v16, 0, 1);
  }
  return -5;
}

void sub_22B9B8F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
}

void ASN1T_SuplMessage::~ASN1T_SuplMessage(ASN1T_SuplMessage *this)
{
  int v2 = (void *)*((void *)this + 39);
  if (v2)
  {
    *((void *)this + 40) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 36);
  if (v3)
  {
    *((void *)this + 37) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 33);
  if (v4)
  {
    *((void *)this + 34) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 28);
  if (v5)
  {
    *((void *)this + 29) = v5;
    operator delete(v5);
  }
  ASN1T_SETId::U::~U((ASN1T_SuplMessage *)((char *)this + 48));
  ASN1T_UlpMessage::~ASN1T_UlpMessage((ASN1T_SuplMessage *)((char *)this + 8));
}

void SuplUtils::ConvertSuplEndStatusToGNSupl(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (a2 > 0x17) {
    int v3 = 0;
  }
  else {
    int v3 = dword_22BB428CC[(char)a2];
  }
  *a3 = v3;
}

LcsSuplGlueLayer *SuplUtils::AbortAllStoredSuplInits(LcsSuplGlueLayer *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = (uint64_t)this;
    do
    {
      uint64_t v3 = *(void *)(v1 + 8);
      if (*(void *)(v1 + 16))
      {
        uint64_t Instance = LcsSuplGlueLayer::GetInstance(this);
        if (Instance) {
          uint64_t v5 = Instance + 8;
        }
        else {
          uint64_t v5 = 0;
        }
        long long v6 = (SuplPosPayloadHandler *)(*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 8))(v5, **(unsigned int **)(v1 + 16));
        int v7 = (LcsSuplGlueLayer *)SuplPosPayloadHandler::GetInstance(v6);
        uint64_t v8 = **(unsigned int **)(v1 + 16);
        uint64_t v9 = LcsSuplGlueLayer::GetInstance(v7);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 8))(v9, v8, 3, 0);
        SuplPosPayloadHandler::ResetLppParams((uint64_t *)v7);
        this = (LcsSuplGlueLayer *)SuplUtils::DeleteSuplInitRecd(v2, **(_DWORD **)(v1 + 16));
      }
      uint64_t v1 = v3;
    }
    while (v3);
  }
  return this;
}

void GLON_Alm_Apply_Corrns(double *a1, double *a2, uint64_t a3, double a4, double a5, double a6)
{
  double v12 = a2[7];
  __double2 v13 = __sincos_stret(a2[8]);
  double v14 = a1[1] + v12 * v13.__sinval;
  double v15 = a1[3];
  double v16 = a1[2] + v12 * v13.__cosval;
  double v17 = a2[4] + 1.09955743 + a1[4];
  double v18 = sqrt(v16 * v16 + v14 * v14);
  *(double *)a3 = *a1 + a4;
  *(double *)(a3 + 8) = v18;
  *(double *)(a3 + 16) = v15 + a5;
  *(double *)(a3 + 24) = v17;
  if (fabs(v18) <= 2.22044605e-16)
  {
    *(void *)(a3 + 40) = 0;
    double v19 = 0.0;
  }
  else if (fabs(v16) <= 2.22044605e-16)
  {
    if (v14 <= 0.0)
    {
      *(void *)(a3 + 40) = 0xBFF921FB54442D28;
      double v19 = -1.57079633;
    }
    else
    {
      *(void *)(a3 + 40) = 0x3FF921FB54442D28;
      double v19 = 1.57079633;
    }
  }
  else
  {
    double v19 = atan2(v14, v16);
    *(double *)(a3 + 40) = v19;
  }
  *(double *)(a3 + 32) = a1[5] + a6 - v19;
}

void SuplResponseRecd::SuplResponseRecd(SuplResponseRecd *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  SuplState::SuplState(this);
  *(void *)uint64_t v2 = &unk_26DF19340;
  *(unsigned char *)(v2 + 360) = 0;
  *(unsigned char *)(v2 + 16) = 3;
  *(_WORD *)(v2 + 32) = 4;
  uint64_t v3 = (char *)operator new(0x4A0uLL, MEMORY[0x263F8C180]);
  if (!v3)
  {
    *((void *)this + 5) = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return;
    }
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v3 = 0;
  *(void *)(v3 + 15) = 0;
  *(_DWORD *)(v3 + 22) = 0;
  *(void *)(v3 + 4) = 0x200000100000101;
  *((_WORD *)v3 + 6) = 0;
  v3[14] = 0;
  *((_WORD *)v3 + 44) = 0;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  v3[80] = 0;
  *(void *)(v3 + 90) = 0xFFFFFFFFLL;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 15) = 0;
  *((void *)v3 + 13) = 0;
  v3[128] = 0;
  *((_WORD *)v3 + 68) = 0;
  v3[138] = 0;
  *(void *)(v3 + 140) = -1;
  v3[150] = 0;
  *((void *)v3 + 19) = 0xFFFF000000000000;
  *((void *)v3 + 20) = 0;
  *((void *)v3 + 21) = 0;
  *(void *)(v3 + 182) = 0;
  *((void *)v3 + 22) = 0;
  *((void *)v3 + 25) = 0;
  *((void *)v3 + 26) = 0;
  *((void *)v3 + 24) = 0;
  v3[216] = 1;
  *((void *)v3 + 30) = 0;
  *((void *)v3 + 31) = 0;
  *((void *)v3 + 29) = 0;
  *(void *)(v3 + 260) = 0;
  *((_DWORD *)v3 + 67) = 0;
  v3[272] = -1;
  *((_WORD *)v3 + 137) = 0;
  v3[276] = 0;
  *((_DWORD *)v3 + 64) = -16777216;
  *((void *)v3 + 35) = 255;
  *((void *)v3 + 80) = 0;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 34) = 0u;
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 32) = 0u;
  *((_OWORD *)v3 + 33) = 0u;
  *((_OWORD *)v3 + 30) = 0u;
  *((_OWORD *)v3 + 31) = 0u;
  *((_OWORD *)v3 + 28) = 0u;
  *((_OWORD *)v3 + 29) = 0u;
  *((_OWORD *)v3 + 26) = 0u;
  *((_OWORD *)v3 + 27) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  v3[224] = 0;
  *((_OWORD *)v3 + 41) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_OWORD *)v3 + 45) = 0u;
  *((_OWORD *)v3 + 46) = 0u;
  *((_OWORD *)v3 + 47) = 0u;
  *((_OWORD *)v3 + 48) = 0u;
  *((_OWORD *)v3 + 49) = 0u;
  *((_OWORD *)v3 + 50) = 0u;
  v3[792] = -1;
  v3[648] = 0;
  *((_OWORD *)v3 + 51) = 0u;
  *((_OWORD *)v3 + 52) = 0u;
  *((_OWORD *)v3 + 53) = 0u;
  *((_OWORD *)v3 + 54) = 0u;
  *((_OWORD *)v3 + 55) = 0u;
  *((_OWORD *)v3 + 56) = 0u;
  *((_OWORD *)v3 + 57) = 0u;
  *((_OWORD *)v3 + 58) = 0u;
  *((_OWORD *)v3 + 59) = 0u;
  *((_OWORD *)v3 + 60) = 0u;
  *((_OWORD *)v3 + 61) = 0u;
  *((_OWORD *)v3 + 62) = 0u;
  *((_OWORD *)v3 + 63) = 0u;
  *((_OWORD *)v3 + 64) = 0u;
  *((_OWORD *)v3 + 65) = 0u;
  *((_OWORD *)v3 + 66) = 0u;
  *((_OWORD *)v3 + 67) = 0u;
  *((_OWORD *)v3 + 68) = 0u;
  *((_OWORD *)v3 + 69) = 0u;
  *((_OWORD *)v3 + 70) = 0u;
  *((_OWORD *)v3 + 71) = 0u;
  *((_OWORD *)v3 + 72) = 0u;
  *((_OWORD *)v3 + 73) = 0u;
  *((void *)this + 5) = v3;
  long long v4 = operator new(1uLL, MEMORY[0x263F8C180]);
  if (v4)
  {
    *((void *)this + 46) = v4;
    return;
  }
  *((void *)this + 46) = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "SuplResponseRecd", 1537);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
  }
}

void sub_22B9B9620(_Unwind_Exception *a1)
{
  SuplState::~SuplState(v1);
  _Unwind_Resume(a1);
}

void SuplResponseRecd::~SuplResponseRecd(SuplResponseRecd *this)
{
  *(void *)this = &unk_26DF19340;
  if (*((_WORD *)this + 16) == 4)
  {
    uint64_t v2 = (ASN1T_SUPLPOSINIT *)*((void *)this + 5);
    if (v2)
    {
      ASN1T_SUPLPOSINIT::~ASN1T_SUPLPOSINIT(v2);
      MEMORY[0x230F4E5D0]();
    }
    *((void *)this + 5) = 0;
    uint64_t v3 = *((void *)this + 46);
    if (v3) {
      MEMORY[0x230F4E5D0](v3, 0xC400A2AC0F1);
    }
    *((void *)this + 46) = 0;
  }

  SuplState::~SuplState(this);
}

{
  uint64_t vars8;

  SuplResponseRecd::~SuplResponseRecd(this);
}

{
  uint64_t vars8;

  SuplResponseRecd::~SuplResponseRecd(this);

  JUMPOUT(0x230F4E5D0);
}

uint64_t SuplResponseRecd::UpdateState(uint64_t this)
{
  if (*(unsigned char *)(this + 360))
  {
    *(unsigned char *)(this + 360) = 0;
    uint64_t v1 = *(void *)(this + 8);
    return SuplState::UpdateState(this, 4, v1);
  }
  return this;
}

uint64_t SuplResponseRecd::Init(SuplResponseRecd *this)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  std::vector<unsigned char>::vector(v55, 0xBB8uLL);
  v57[0] = v55;
  v57[1] = 0;
  char v58 = 0;
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    long long v4 = *(_OWORD *)(v3 + 432);
    *(void *)(v2 + 18) = *(void *)(v3 + 446);
    *(_OWORD *)(v2 + 4) = v4;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "PrepareSuplPosInit", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
  }
  uint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    __int16 v59 = *(_WORD *)(v7 + 456);
    uint64_t v8 = *(const void **)(v7 + 472);
    uint64_t v60 = *(void *)(v7 + 464);
    char v61 = 0;
    int v62 = 0;
    uint64_t v63 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v61, v8, *(void *)(v7 + 480), *(void *)(v7 + 480) - (void)v8);
    uint64_t v64 = 0;
    __int16 v65 = 0;
    uint64_t v66 = 0;
    uint64_t v9 = (SimUtils *)std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v64, *(const void **)(v7 + 496), *(void *)(v7 + 504), *(void *)(v7 + 504) - *(void *)(v7 + 496));
    char v10 = *(unsigned char *)(v7 + 520);
    char v67 = v10;
    if (v59 == 1)
    {
      int v11 = (v60 >> 6) & 1;
      int v12 = (v60 >> 4) & 1;
      int v13 = (v60 >> 3) & 1;
      int v14 = (v60 >> 5) & 1;
      int v15 = v60 & 1;
      int v16 = (v60 >> 2) & 1;
      int v17 = (v60 >> 1) & 1;
    }
    else
    {
      int v11 = 0;
      int v12 = 0;
      int v13 = 0;
      int v14 = 0;
      int v15 = 0;
      int v16 = 0;
      int v17 = 0;
    }
    if ((v12 | v11 | v13 | v14 | v15 | v16 | v17) == 1)
    {
      *(unsigned char *)uint64_t v2 = 1;
      *(unsigned char *)(v2 + 39) = v11;
      *(unsigned char *)(v2 + 37) = v12;
      *(unsigned char *)(v2 + 41) = v13;
      *(unsigned char *)(v2 + 38) = v14;
      *(unsigned char *)(v2 + 33) = v15;
      *(unsigned char *)(v2 + 35) = v16;
      *(unsigned char *)(v2 + 34) = v17;
      if (v13)
      {
        *(unsigned char *)(v2 + 32) = 1;
        goto LABEL_15;
      }
    }
    else if (v13)
    {
LABEL_15:
      *(_WORD *)(v2 + 50) = WORD2(v60);
      *(unsigned char *)(v2 + 52) = BYTE6(v60);
      *(unsigned char *)(v2 + 54) = v10;
      int v21 = HIBYTE(v60);
      *(unsigned char *)(v2 + 53) = HIBYTE(v60);
      if (v21)
      {
        unint64_t v22 = 0;
        *(unsigned char *)(v2 + 48) = 1;
        uint64_t v23 = *(uint64_t **)(v2 + 56);
        *(void *)(v2 + 64) = v23;
        do
        {
          uint64_t v24 = *((unsigned __int8 *)v61 + v22);
          uint64_t v25 = *((unsigned __int8 *)v64 + v22);
          unint64_t v26 = *(void *)(v2 + 72);
          if ((unint64_t)v23 >= v26)
          {
            unsigned __int8 v27 = *(void **)(v2 + 56);
            uint64_t v28 = v23 - v27;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61) {
              std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = v26 - (void)v27;
            if (v30 >> 2 > v29) {
              unint64_t v29 = v30 >> 2;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              if (v31 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v9 = (SimUtils *)operator new(8 * v31);
            }
            else
            {
              uint64_t v9 = 0;
            }
            char v32 = (uint64_t *)((char *)v9 + 8 * v28);
            *char v32 = v24 | (v25 << 32);
            BOOL v33 = v32 + 1;
            if (v23 != v27)
            {
              do
              {
                uint64_t v34 = *--v23;
                *--char v32 = v34;
              }
              while (v23 != v27);
              uint64_t v23 = *(uint64_t **)(v2 + 56);
            }
            *(void *)(v2 + 56) = v32;
            *(void *)(v2 + 64) = v33;
            *(void *)(v2 + 72) = (char *)v9 + 8 * v31;
            if (v23) {
              operator delete(v23);
            }
            uint64_t v23 = v33;
          }
          else
          {
            *v23++ = v24 | (v25 << 32);
          }
          *(void *)(v2 + 64) = v23;
          if (v22 > 0x1C) {
            break;
          }
          ++v22;
        }
        while (v22 < HIBYTE(v60));
      }
    }
    uint64_t Instance = (SimUtils *)SimUtils::GetInstance(v9);
    BOOL IsItCampedOnLte = SimUtils::IsItCampedOnLte(Instance, *(_DWORD *)(*((void *)this + 1) + 532));
    if (IsItCampedOnLte)
    {
      std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__clear[abi:ne180100]((uint64_t *)(v2 + 744));
      SuplResponseRecdVer2::UpdateLppCapPayload(*((SuplResponseRecdVer2 **)this + 46), (SuplResponseRecd *)((char *)this + 32));
      SuplResponseRecdVer2::UpdateLppADPayload(*((SuplUtils **)this + 46), (uint64_t)this + 32, *((void *)this + 1));
    }
    uint64_t v37 = *((void *)this + 1);
    if (v37)
    {
      if ((*(unsigned char *)(v37 + 380) & 0xFE) != 2) {
        goto LABEL_51;
      }
      *((unsigned char *)this + 48) = 1;
      *((_WORD *)this + 28) = *(_DWORD *)(v37 + 376);
      char v38 = (SimUtils *)SuplUtils::GetInstance((SuplUtils *)IsItCampedOnLte);
      SuplUtils::FillSetId(v38, (uint64_t)this + 64, *(_DWORD *)(*((void *)this + 1) + 532));
      uint64_t v40 = (SimUtils *)SuplUtils::GetInstance(v39);
      SuplUtils::FillLocationId(v40, *((void *)this + 5) + 80, *(_DWORD *)(*((void *)this + 1) + 532));
      uint64_t SuplInitRecd = (SimUtils *)SuplSession::GetSuplInitRecd(*((SuplSession **)this + 1));
      uint64_t v42 = SuplInitRecd;
      if (SuplInitRecd)
      {
        if (*(unsigned char *)(*((void *)SuplInitRecd + 5) + 2) == 1)
        {
          *(_WORD *)uint64_t __str = -254;
          int v69 = 0;
          __int16 v70 = 0;
          int v71 = 0;
          __int16 v72 = 0;
          int v73 = 0;
          __int16 v74 = 0;
          int v75 = 0;
          __int16 v76 = 0;
          int v77 = 0;
          __int16 v78 = 0;
          int v79 = 0;
          __int16 v80 = 0;
          int v81 = 0;
          __int16 v82 = 0;
          __int16 v83 = 0;
          int v84 = 0;
          __int16 v85 = 0;
          int v86 = 0;
          __int16 v87 = 0;
          int v88 = 0;
          __int16 v89 = 0;
          int v90 = 0;
          __int16 v91 = 0;
          int v92 = 0;
          __int16 v93 = 0;
          int v94 = 0;
          __int16 v95 = 0;
          __int16 v96 = 0;
          int v97 = 0;
          __int16 v98 = 0;
          int v99 = 0;
          __int16 v100 = 0;
          int v101 = 0;
          __int16 v102 = 0;
          *(_DWORD *)((char *)v103 + 3) = 0;
          v103[0] = 0;
          void v103[2] = 0;
          __int16 v104 = 0;
          int v105 = 0;
          __int16 v106 = 0;
          int v107 = 0;
          __int16 v108 = 0;
          int v109 = 0;
          __int16 v110 = 0;
          int v111 = 0;
          __int16 v112 = 0;
          __int16 v116 = 0;
          int v117 = 0;
          __int16 v114 = 0;
          v115[0] = 0;
          *(void *)((char *)v115 + 7) = 0;
          std::string __p = 0;
          uint64_t v43 = SuplUtils::GetInstance(SuplInitRecd);
          LastKnownPosition = (SuplUtils *)SuplUtils::GetLastKnownPosition(v43, (uint64_t)__str);
          uint64_t v45 = SuplUtils::GetInstance(LastKnownPosition);
          IsQopValid = (SuplUtils *)SuplUtils::IsQopValid(v45, *((void *)v42 + 5) + 168, (uint64_t)__str);
          if (IsQopValid == 1)
          {
            int v47 = SuplUtils::GetInstance(IsQopValid);
            SuplUtils::ConvertLocEstimatetoAsn1Position(v47, v2 + 224, (uint64_t)__str);
            *(unsigned char *)(v2 + 1) = 1;
          }
          if (__p)
          {
            __int16 v114 = __p;
            operator delete(__p);
          }
        }
        if (SuplInitRecd::FillHash(v42, v2 + 1160, *(unsigned int *)(*((void *)this + 1) + 376), *(_DWORD *)(*((void *)this + 1) + 532))&& LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v48 = mach_continuous_time();
          unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "SPL", 69, "PrepareSuplPosInit", 770);
          LbsOsaTrace_WriteLog(0x12u, __str, v49, 0, 1);
        }
      }
      *(unsigned char *)(v2 + 3) = 1;
      uint64_t v37 = *((void *)this + 1);
      if (v37)
      {
LABEL_51:
        *((_WORD *)this + 24) = *(_WORD *)(v37 + 64);
        *((_WORD *)this + 28) = *(_WORD *)(v37 + 72);
        *((unsigned char *)this + 64) = *(unsigned char *)(v37 + 80);
        ASN1T_SETId::U::operator=((uint64_t)this + 72, v37 + 88);
        if ((SuplResponseRecd *)((char *)this + 48) != (SuplResponseRecd *)(v37 + 64))
        {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 31, *(char **)(v37 + 264), *(char **)(v37 + 272), *(void *)(v37 + 272) - *(void *)(v37 + 264));
          *((unsigned char *)this + 272) = *(unsigned char *)(v37 + 288);
          *((unsigned char *)this + 280) = *(unsigned char *)(v37 + 296);
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 36, *(char **)(v37 + 304), *(char **)(v37 + 312), *(void *)(v37 + 312) - *(void *)(v37 + 304));
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 39, *(char **)(v37 + 328), *(char **)(v37 + 336), *(void *)(v37 + 336) - *(void *)(v37 + 328));
          std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)this + 42, *(char **)(v37 + 352), *(char **)(v37 + 360), *(void *)(v37 + 360) - *(void *)(v37 + 352));
        }
      }
    }
    v56[0] = v57;
    v56[1] = (char *)this + 24;
    if (SuplMessage::Encode((SuplMessage *)v56)
      && LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v50 = mach_continuous_time();
      unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "SPL", 69, "PrepareSuplPosInit", 770);
      LbsOsaTrace_WriteLog(0x12u, __str, v51, 0, 1);
    }
    *(unsigned char *)(*((void *)this + 1) + 408) = 1;
    if (v64)
    {
      __int16 v65 = v64;
      operator delete(v64);
    }
    int IsLoggingAllowed = (LcsSuplGlueLayer *)v61;
    if (v61)
    {
      int v62 = v61;
      operator delete(v61);
    }
    goto LABEL_60;
  }
  int IsLoggingAllowed = (LcsSuplGlueLayer *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "SPL", 69, "PrepareSuplPosInit", 513);
    int IsLoggingAllowed = (LcsSuplGlueLayer *)LbsOsaTrace_WriteLog(0x12u, __str, v20, 0, 1);
  }
LABEL_60:
  uint64_t v52 = LcsSuplGlueLayer::GetInstance(IsLoggingAllowed);
  LcsSuplGlueLayer::SendSuplMsgStatus(v52, *(_DWORD *)(*((void *)this + 1) + 376), 3, 0, 0, 0);
  if (SuplState::SendSuplMessage(this)) {
    *((unsigned char *)this + 360) = 1;
  }
  (*(void (**)(SuplResponseRecd *))(*(void *)this + 16))(this);
  uint64_t v53 = *((unsigned __int8 *)this + 360);
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  return v53;
}

void sub_22B9BA098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ASN1T_SUPLPOSINIT::~ASN1T_SUPLPOSINIT(ASN1T_SUPLPOSINIT *this)
{
  v8[1] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*((void *)this + 145);
  if (v2)
  {
    *((void *)this + 146) = v2;
    operator delete(v2);
  }
  ASN1T_Velocity::U::~U((ASN1T_SUPLPOSINIT *)((char *)this + 800));
  v8[0] = (void **)((char *)this + 768);
  std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v8);
  v8[0] = (void **)((char *)this + 744);
  std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v8);
  uint64_t v3 = (void *)*((void *)this + 89);
  if (v3)
  {
    *((void *)this + 90) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 86);
  if (v4)
  {
    *((void *)this + 87) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 83);
  if (v5)
  {
    *((void *)this + 84) = v5;
    operator delete(v5);
  }
  ASN1T_Velocity::U::~U((ASN1T_SUPLPOSINIT *)((char *)this + 288));
  unsigned __int16 v6 = (void *)*((void *)this + 29);
  if (v6)
  {
    *((void *)this + 30) = v6;
    operator delete(v6);
  }
  ASN1T_CellInfo::~ASN1T_CellInfo((ASN1T_SUPLPOSINIT *)((char *)this + 80));
  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }
}

void DD_Assist_GAL_Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 0;
  uint64_t v112 = *MEMORY[0x263EF8340];
  long long v103 = (unsigned __int8 *)(a4 + 24380);
  uint64_t v104 = a4 + 19904;
  int v106 = a2 - 241;
  do
  {
    if (*(unsigned __int8 *)(v9 + a3 + 56) <= 0xA5u
      && (!*(unsigned char *)(*(void *)(a4 + 16608) + v9)
       || (v106 - *(_DWORD *)(a4 + 88 * v9 + 16736)) <= 0xFFFFF806))
    {
      long long v110 = 0u;
      memset(v111, 0, 23);
      memset(v109, 0, sizeof(v109));
      long long v108 = 0u;
      if (!Core_Get_GAL_Eph((v9 + 1), a2, (uint64_t)&v108)) {
        goto LABEL_9;
      }
      uint64_t v10 = *(void *)(a4 + 16608);
      if (*(unsigned char *)(v10 + v9))
      {
        int v11 = (_DWORD *)(a4 + 88 * v9 + 16736);
        if ((int)v108 <= *v11 && (int)a2 - *v11 > -1801)
        {
LABEL_9:
          *(void *)(*(void *)(a4 + 16568) + 20 * v9 + 8) = 0;
          goto LABEL_50;
        }
        if ((int)v108 - *v11 <= 10799
          && Is_GAL_IntEph_Real(a4 + 88 * v9 + 16736)
          && !Is_GAL_IntEph_Real((uint64_t)&v108))
        {
          *int v11 = a2;
          goto LABEL_50;
        }
      }
      int v12 = (unsigned char *)(a1 + v9 + 17908);
      int v13 = *v12;
      BOOL v14 = v13 != 1 || (v111[22] & 1) == 0;
      if (v14 && (v13 != 2 || (v111[21] & 1) == 0))
      {
        if (v13 != 3 && *v12) {
          char v15 = 1;
        }
        else {
          char v15 = (v111[21] | v111[22]) ^ 1;
        }
        int v16 = *(long long **)(a4 + 16560);
        if ((v15 & 1) != 0 && !*((unsigned char *)v16 + v9) && (uint64_t v17 = *(void *)(a4 + 16624), *(unsigned char *)(v17 + v9)))
        {
          int v18 = *(_DWORD *)(a4 + 36 * v9 + 23072);
          if (v18 + 3600 <= (int)a2
            || ((int v19 = *(unsigned __int8 *)(a4 + 36 * v9 + 23106), v13 != 1) || (v19 & 1) == 0)
            && ((int v20 = *(unsigned __int8 *)(a4 + 36 * v9 + 23105), v13 != 2) || (v20 & 1) == 0)
            && (v13 != 3 && *v12 || ((v20 | v19) & 1) == 0))
          {
            if (v18 + 100 < (int)a2)
            {
              *(unsigned char *)(*(void *)(a4 + 16584) + v9) = 0;
              *(unsigned char *)(v17 + v9) = 0;
              *(unsigned char *)(a1 + v9 + 13009) = -1;
              *(_WORD *)(a1 + 2 * v9 + 13046) = 2048;
              *(_WORD *)(a1 + 36 * gal_E1B_AlmSvId2SubframeId[v9] + 17040) = 0;
              int v16 = *(long long **)(a4 + 16560);
              uint64_t v10 = *(void *)(a4 + 16608);
            }
            goto LABEL_38;
          }
        }
        else if (v15)
        {
LABEL_38:
          uint64_t v21 = a4 + 88 * v9;
          long long v22 = v109[0];
          *(_OWORD *)(v21 + 16736) = v108;
          *(_OWORD *)(v21 + 16752) = v22;
          *(_OWORD *)(v21 + 16800) = *(_OWORD *)v111;
          long long v23 = v109[1];
          *(_OWORD *)(v21 + 16784) = v110;
          *(void *)(v21 + 16816) = *(void *)&v111[16];
          *(_OWORD *)(v21 + 16768) = v23;
          *(unsigned char *)(*(void *)(a4 + 16576) + v9) = 1;
          *(unsigned char *)(v10 + v9) = 1;
          uint64_t v24 = v21 + 16736;
          *((unsigned char *)v16 + v9) = 1;
          uint64_t v25 = *(void *)(a4 + 16568) + 20 * v9;
          unint64_t v26 = (_DWORD *)(v25 + 12);
          unsigned __int8 v27 = (_DWORD *)(v25 + 8);
          if (*(_DWORD *)(v21 + 16740) == 5) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = v26;
          }
          _DWORD *v28 = 1;
          if ((int)a2 >= 1)
          {
            *(unsigned char *)(*(void *)(a4 + 16632) + v9) = 1;
            Core_Save_GAL_Eph((v9 + 1), 0, v24);
            int v16 = *(long long **)(a4 + 16560);
          }
          goto LABEL_47;
        }
      }
      int v16 = *(long long **)(a4 + 16560);
      *((unsigned char *)v16 + v9) = 0;
      uint64_t v29 = *(void *)(a4 + 16568) + 20 * v9;
      uint64_t v30 = (_DWORD *)(v29 + 12);
      unint64_t v31 = (_DWORD *)(v29 + 8);
      if (*(_DWORD *)(a4 + 88 * v9 + 16740) == 5) {
        char v32 = v31;
      }
      else {
        char v32 = v30;
      }
      *char v32 = 2;
LABEL_47:
      uint64_t v33 = 0;
      LODWORD(v34) = 0;
      uint64_t v35 = p_NV;
      uint64_t v36 = p_NV + 7600;
      long long v38 = *v16;
      long long v37 = v16[1];
      *(_DWORD *)(p_NV + 7644) = *((_DWORD *)v16 + 8);
      *(_OWORD *)(v36 + 12) = v38;
      *(_OWORD *)(v36 + 28) = v37;
      uint64_t v39 = v35 + 7608;
      __int16 v40 = -9871;
      do
      {
        int v41 = *(unsigned __int8 *)(v39 + v33) ^ HIBYTE(v40);
        __int16 v40 = -12691 * (v40 + (*(unsigned __int8 *)(v39 + v33) ^ HIBYTE(v40))) + 22719;
        uint64_t v34 = (v34 + v41);
        ++v33;
      }
      while (v33 != 40);
      *(void *)(v35 + 7600) = v34;
      *(void *)(a1 + 8 * v9 + 13118) = 0x400040004000400;
      uint64_t v42 = a1 + 2 * v9;
      *(_WORD *)(v42 + 13406) = 1024;
      *(_WORD *)(v42 + 13478) = 1024;
      *int v12 = 0;
      uint64_t v43 = (_OWORD *)(a1 + 92 * v9);
      v43[863] = 0u;
      uint64_t v43 = (_OWORD *)((char *)v43 + 13732);
      v43[3] = 0u;
      v43[4] = 0u;
      v43[1] = 0u;
      v43[2] = 0u;
      *uint64_t v43 = 0u;
    }
LABEL_50:
    ++v9;
  }
  while (v9 != 36);
  uint64_t v44 = a5;
  if ((int)a2 >= 1)
  {
    uint64_t v45 = 0;
    uint64_t v46 = a3 + 56;
    int v47 = (_OWORD *)(a1 + 13732);
    uint64_t v48 = (_WORD *)(a1 + 13406);
    uint64_t v49 = v104;
    do
    {
      if (*(unsigned char *)(*(void *)(a4 + 16560) + v45)
        && !*(unsigned char *)(*(void *)(v44 + 936) + v45)
        && *(unsigned __int8 *)(v46 + v45) <= 0xA5u
        && (!*(unsigned char *)(*(void *)(a4 + 16616) + v45) || (int)a2 - *(_DWORD *)v49 >= 241))
      {
        long long v110 = 0u;
        memset(v111, 0, 23);
        memset(v109, 0, sizeof(v109));
        long long v108 = 0u;
        int GAL_IntEph = EE_Get_GAL_IntEph((v45 + 1), a2, (uint64_t)&v108);
        uint64_t v51 = *(void *)(a4 + 16616);
        if (!GAL_IntEph || *(unsigned char *)(v51 + v45) && (int)v108 <= *(_DWORD *)v49)
        {
          *(unsigned char *)(v51 + v45) = 0;
        }
        else
        {
          long long v52 = v109[0];
          *(_OWORD *)uint64_t v49 = v108;
          *(_OWORD *)(v49 + 16) = v52;
          *(void *)(v49 + 80) = *(void *)&v111[16];
          long long v53 = *(_OWORD *)v111;
          long long v54 = v109[1];
          *(_OWORD *)(v49 + 48) = v110;
          *(_OWORD *)(v49 + 64) = v53;
          *(_OWORD *)(v49 + 32) = v54;
          *(unsigned char *)(*(void *)(a4 + 16576) + v45) = 1;
          *(unsigned char *)(v51 + v45) = 1;
          Debug_Log_GAL_Eph(2, (uint64_t)&v108);
          *(void *)(a1 + 13118 + 8 * v45) = 0x400040004000400;
          *uint64_t v48 = 1024;
          v48[36] = 1024;
          *(unsigned char *)(a1 + 17908 + v45) = 0;
          *(_OWORD *)((char *)v47 + 76) = 0u;
          v47[3] = 0u;
          void v47[4] = 0u;
          v47[1] = 0u;
          v47[2] = 0u;
          _OWORD *v47 = 0u;
        }
        uint64_t v44 = a5;
      }
      ++v45;
      int v47 = (_OWORD *)((char *)v47 + 92);
      ++v48;
      v49 += 88;
    }
    while (v45 != 36);
  }
  uint64_t v55 = 0;
  int v56 = (int)a2 / 604800 - 1024;
  long long v108 = 0u;
  memset(v109, 0, 19);
  unsigned int v57 = v56 + (((__int16)v56 >> 29) & 3);
  int v107 = (__int16)v57 >> 2;
  int v58 = (__int16)(v56 - (v57 & 0xFFFC));
  uint64_t v59 = 7680;
  while (2)
  {
    if ((!*(unsigned char *)(*(void *)(a4 + 16624) + v55) || (int)a2 - *(_DWORD *)(a4 + 36 * v55 + 23072) >= 1801)
      && Core_Get_GAL_Alm((v55 + 1), a2, (uint64_t)&v108)
      && (!*(unsigned char *)(*(void *)(a4 + 16624) + v55) || (int)v108 > *(_DWORD *)(a4 + 36 * v55 + 23072)))
    {
      uint64_t v60 = (unsigned char *)(a1 + v55 + 17908);
      int v61 = *v60;
      BOOL v62 = v61 != 1 || (BYTE2(v109[1]) & 1) == 0;
      if (!v62 || (v61 == 2 ? (BOOL v63 = (BYTE1(v109[1]) & 1) == 0) : (BOOL v63 = 1), !v63))
      {
LABEL_103:
        __int16 v72 = *(long long **)(a4 + 16560);
        *((unsigned char *)v72 + v55) = 0;
        goto LABEL_104;
      }
      if (v61 != 3 && *v60)
      {
        char v64 = 1;
      }
      else
      {
        char v64 = (BYTE1(v109[1]) | BYTE2(v109[1])) ^ 1;
        if ((v64 & 1) == 0)
        {
LABEL_100:
          if ((v64 & 1) == 0) {
            goto LABEL_103;
          }
          goto LABEL_101;
        }
      }
      if (*(unsigned char *)(*(void *)(a4 + 16560) + v55)) {
        goto LABEL_100;
      }
      uint64_t v65 = *(void *)(a4 + 16608);
      if (!*(unsigned char *)(v65 + v55)) {
        goto LABEL_100;
      }
      int v66 = *(_DWORD *)(a4 + 88 * v55 + 16736);
      if (v66 + 3600 > (int)a2)
      {
        int v67 = *(unsigned __int8 *)(a4 + 88 * v55 + 16822);
        if (v61 == 1 && (v67 & 1) != 0) {
          goto LABEL_103;
        }
        int v68 = *(unsigned __int8 *)(a4 + 88 * v55 + 16821);
        if (v61 == 2 && (v68 & 1) != 0) {
          goto LABEL_103;
        }
        if (v61 == 3 || !*v60) && ((v68 | v67)) {
          goto LABEL_103;
        }
      }
      if (v66 + 100 < (int)a2)
      {
        *(unsigned char *)(*(void *)(a4 + 16576) + v55) = 0;
        *(unsigned char *)(v65 + v55) = 0;
        *(void *)(a1 + 8 * v55 + 13118) = 0x400040004000400;
        uint64_t v69 = a1 + 2 * v55;
        *(_WORD *)(v69 + 13406) = 1024;
        *(_WORD *)(v69 + 13478) = 1024;
        *uint64_t v60 = 0;
        __int16 v70 = (_OWORD *)(a1 + 92 * v55);
        v70[863] = 0u;
        __int16 v70 = (_OWORD *)((char *)v70 + 13732);
        v70[3] = 0u;
        v70[4] = 0u;
        v70[1] = 0u;
        unsigned __int16 v70[2] = 0u;
        *__int16 v70 = 0u;
      }
LABEL_101:
      __int16 v71 = v107;
      switch(v58)
      {
        case 0:
          __int16 v71 = v107 - (WORD5(v108) == 3);
          break;
        case 1:
          break;
        case 2:
          if (WORD5(v108)) {
            __int16 v71 = v107;
          }
          else {
            __int16 v71 = v107 + 1;
          }
          break;
        case 3:
          if (SWORD5(v108) >= 2) {
            __int16 v71 = v107;
          }
          else {
            __int16 v71 = v107 + 1;
          }
          break;
        default:
          EvCrt_Illegal_Default("DD_Assist_GAL_Alm", 0x2BDu);
          __int16 v71 = v107;
          break;
      }
      WORD5(v108) += 4 * v71;
      uint64_t v82 = a4 + 36 * v55;
      long long v83 = v109[0];
      *(_OWORD *)(v82 + 23072) = v108;
      int v84 = (long long *)(v82 + 23072);
      *(_OWORD *)(v82 + 23088) = v83;
      *(_DWORD *)(v82 + 23104) = v109[1];
      *(unsigned char *)(*(void *)(a4 + 16584) + v55) = 1;
      *(unsigned char *)(*(void *)(a4 + 16624) + v55) = 1;
      __int16 v72 = *(long long **)(a4 + 16560);
      *((unsigned char *)v72 + v55) = 1;
      if ((int)a2 >= 1)
      {
        uint64_t v85 = 0;
        LODWORD(v86) = 0;
        uint64_t v87 = p_NV;
        uint64_t v88 = p_NV + 48 * v55;
        __int16 v89 = (void *)(v88 + 7672);
        long long v90 = *v84;
        long long v91 = v84[1];
        *(_DWORD *)(v88 + 7712) = *((_DWORD *)v84 + 8);
        *(_OWORD *)(v88 + 7696) = v91;
        *(_OWORD *)(v88 + 7680) = v90;
        uint64_t v92 = v87 + v59;
        __int16 v93 = -9871;
        do
        {
          int v94 = *(unsigned __int8 *)(v92 + v85) ^ HIBYTE(v93);
          __int16 v93 = -12691 * (v93 + (*(unsigned __int8 *)(v92 + v85) ^ HIBYTE(v93))) + 22719;
          uint64_t v86 = (v86 + v94);
          ++v85;
        }
        while (v85 != 40);
        *__int16 v89 = v86;
        __int16 v72 = *(long long **)(a4 + 16560);
      }
LABEL_104:
      uint64_t v73 = 0;
      LODWORD(v74) = 0;
      uint64_t v75 = p_NV;
      uint64_t v76 = p_NV + 7600;
      long long v78 = *v72;
      long long v77 = v72[1];
      *(_DWORD *)(p_NV + 7644) = *((_DWORD *)v72 + 8);
      *(_OWORD *)(v76 + 12) = v78;
      *(_OWORD *)(v76 + 28) = v77;
      uint64_t v79 = v75 + 7608;
      __int16 v80 = -9871;
      do
      {
        int v81 = *(unsigned __int8 *)(v79 + v73) ^ HIBYTE(v80);
        __int16 v80 = -12691 * (v80 + (*(unsigned __int8 *)(v79 + v73) ^ HIBYTE(v80))) + 22719;
        uint64_t v74 = (v74 + v81);
        ++v73;
      }
      while (v73 != 40);
      *(void *)(v75 + 7600) = v74;
      *(unsigned char *)(a1 + v55 + 13009) = -1;
      *(_WORD *)(a1 + 2 * v55 + 13046) = 2048;
      *(_WORD *)(a1 + 36 * gal_E1B_AlmSvId2SubframeId[v55] + 17040) = 0;
    }
    ++v55;
    v59 += 48;
    if (v55 != 36) {
      continue;
    }
    break;
  }
  *(void *)((char *)&v108 + 6) = 0;
  *(void *)&long long v108 = 0;
  __int16 v95 = (_OWORD *)(v104 + 4464);
  if (((*(_DWORD *)(v104 + 4468) - 4) > 2 || (int)a2 - *(_DWORD *)v95 >= 1801)
    && Core_Get_GAL_GGTO(a2, &v108)
    && ((*(_DWORD *)(v104 + 4468) - 4) > 2 || (int)v108 > *(_DWORD *)v95))
  {
    *__int16 v95 = v108;
    *(void *)(a4 + 24384) = *(void *)(a4 + 24368);
    double v96 = (double)*(__int16 *)(v104 + 4474);
    *(double *)(a4 + 24392) = (double)*(__int16 *)(v104 + 4472) * 2.91038305e-11;
    *(double *)(a4 + 24400) = v96 * 4.4408921e-16;
    *((_DWORD *)v103 + 7) = 3600 * *v103;
    *((_WORD *)v103 + 16) = v103[1];
    if ((int)a2 >= 1)
    {
      uint64_t v97 = 0;
      LODWORD(v98) = 0;
      uint64_t v99 = p_NV;
      uint64_t v100 = p_NV + 7656;
      *(_OWORD *)(p_NV + 7656) = v108;
      __int16 v101 = -9871;
      do
      {
        int v102 = *(unsigned __int8 *)(v100 + v97) ^ HIBYTE(v101);
        __int16 v101 = -12691 * (v101 + (*(unsigned __int8 *)(v100 + v97) ^ HIBYTE(v101))) + 22719;
        uint64_t v98 = (v98 + v102);
        ++v97;
      }
      while (v97 != 16);
      *(void *)(v99 + 7648) = v98;
    }
  }
}

void NK_Set_Accuracy(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v8 = a4 + 24680;
  if (*(unsigned char *)(a4 + 25165))
  {
    if (*(double *)(a4 + 24352) > 30000.0) {
      *(void *)(a4 + 24352) = 0x40DD4C0000000000;
    }
    if (*(double *)(a4 + 24360) > 30000.0) {
      *(void *)(a4 + 24360) = 0x40DD4C0000000000;
    }
    if (*(double *)(a4 + 24368) > 30000.0) {
      *(void *)(a4 + 24368) = 0x40DD4C0000000000;
    }
    if (*(double *)(a4 + 24264) > 900000000.0) {
      *(void *)(a4 + 24264) = 0x41CAD27480000000;
    }
    if (*(double *)(a4 + 24272) > 900000000.0) {
      *(void *)(a4 + 24272) = 0x41CAD27480000000;
    }
    if (*(double *)(a4 + 24280) > 900000000.0) {
      *(void *)(a4 + 24280) = 0x41CAD27480000000;
    }
  }
  double v9 = *(double *)(a4 + 24312);
  if (v9 >= *(double *)(a4 + 24320)) {
    double v9 = *(double *)(a4 + 24320);
  }
  if (v9 <= *(double *)(a4 + 24328)) {
    double v10 = v9;
  }
  else {
    double v10 = *(double *)(a4 + 24328);
  }
  uint64_t v11 = a4 + 24656;
  *(double *)(a4 + 24696) = v10;
  double v12 = v10;
  if (!*(unsigned char *)(a4 + 16))
  {
    if (*(_DWORD *)(a3 + 11048) || (double v13 = 0.0, *(int *)(a4 + 12) >= 9)) {
      double v13 = v10;
    }
    double v12 = sqrt(v13 + *(double *)(a4 + 24256) * 8.98755179e10);
  }
  *(double *)(a4 + 24704) = v12;
  *(void *)(a4 + 24744) = *(void *)(a4 + 24336);
  *(_OWORD *)(a4 + 24656) = *(_OWORD *)(a4 + 24352);
  *(void *)(a4 + 24680) = *(void *)(a4 + 24368);
  double v14 = *(double *)(a4 + 24264);
  double v15 = *(double *)(a4 + 24272);
  *(double *)(a4 + 24672) = sqrt(v14 + v15);
  *(double *)(a4 + 24688) = sqrt(v14 + v15 + *(double *)(a4 + 24280));
  double v16 = *(double *)(a4 + 24288);
  double v17 = 0.0;
  double v18 = *(double *)(a4 + 24296);
  *(double *)(a4 + 24712) = sqrt(v16 + 0.0 + v18);
  *(void *)(a4 + 24720) = *(void *)(a4 + 24392);
  for (uint64_t i = 3036; i != 3039; ++i)
    double v17 = v17 + *(double *)(a4 + 8 * i);
  *(double *)(a4 + 24728) = sqrt(v17);
  double v20 = *(double *)(a4 + 24736);
  double v21 = *(double *)(a4 + 920) * *(double *)(a4 + 920);
  double v22 = *(double *)(a4 + 912) * *(double *)(a4 + 912);
  if (v21 < 0.000001 && v22 < 0.000001)
  {
    double v22 = 0.000001;
    double v21 = 0.000001;
  }
  double v23 = 57.2957795 / (v22 + v21) * ((v16 * v21 + v18 * v22) * (57.2957795 / (v22 + v21)));
  double v24 = 1.0;
  if (*(unsigned char *)(a3 + 11161)) {
    double v24 = 0.5;
  }
  double v25 = 20.0;
  if (*(double *)(a4 + 936) >= v24) {
    double v25 = 10.0;
  }
  double v26 = sqrt(v23);
  double v27 = *(double *)(a4 + 944);
  if (v27 >= 4.0 || v26 >= v25 || *(unsigned __int8 *)(a4 + 24780) > 7u)
  {
    if (v26 >= 180.0)
    {
      double v28 = v26;
      if (*(double *)(a3 + 11144) < v24) {
        goto LABEL_47;
      }
    }
  }
  else
  {
    *(unsigned char *)(a4 + 31436) = 1;
    double v26 = v25;
  }
  double v29 = v26 - v20;
  if (*(_DWORD *)(a3 + 11116) != 3 || (double v28 = v20, v20 < 180.0) && (double v28 = v20, v29 <= 1.0))
  {
    if (v27 >= 4.0)
    {
      double v28 = v26;
    }
    else
    {
      double v28 = v26;
      if (v29 > 5.0)
      {
        double v30 = fabs(v29);
        double v31 = 0.93 / v30 + 0.07;
        BOOL v32 = v30 <= 2.22044605e-16;
        double v33 = 4.18834765e15;
        if (!v32) {
          double v33 = v31;
        }
        double v28 = v20 + fmin(v33, 0.25) * v29;
      }
    }
  }
LABEL_47:
  if (v20 < 180.0)
  {
    double v34 = fabs(*(double *)(a3 + 11200));
    if (v34 > 3.0)
    {
      double v35 = v34 * 0.5;
      if (v28 < v35)
      {
        *(unsigned char *)(a4 + 31437) = 1;
        double v28 = v35;
      }
    }
  }
  *(double *)(a4 + 24736) = fmin(v28, 180.0);
  uint64_t v36 = (double *)(a4 + 24752);
  long long v37 = (double *)(a4 + 24760);
  Comp_ErrorEllipse(v14, v15, *(double *)(a4 + 24400), (double *)(a4 + 24752), (double *)(a4 + 24760), (double *)(a4 + 24768));
  if (*(int *)(a4 + 964) <= 1)
  {
    if (*(unsigned char *)(a4 + 960))
    {
      double v38 = *v36;
      if (*v36 < 9999000.0 && v38 > 1000.0)
      {
        double v39 = v38 / *v37;
        if (v39 > 50.0) {
          *long long v37 = *v37 * v39 * 0.04;
        }
      }
    }
  }
  if (!a1 || *(_DWORD *)a4 <= a1) {
    EvLog_v("TTick_Restart Test: %u %u", 2, a1);
  }
  if (!*(unsigned char *)(a3 + 233)
    && !*(_DWORD *)(a4 + 968)
    && (*(_DWORD *)(a3 + 11028) - 3) >= 0xFFFFFFFE
    && *v36 > 18.0
    && *(double *)(a4 + 2840) <= 0.03
    && *(_DWORD *)a4 < a1 + 5000)
  {
    if (*(_DWORD *)(a3 + 11048) || (double v40 = 0.0, *(int *)(a4 + 12) >= 9)) {
      double v40 = v10 * 1.11265006e-17;
    }
    if (!*(unsigned char *)(a4 + 16)) {
      double v40 = v40 + *(double *)(a4 + 24256) * 0.000001;
    }
    double v41 = sqrt(v40) * 1000000.0;
    double v42 = -0.5;
    if (v41 > 0.0) {
      double v42 = 0.5;
    }
    double v43 = v41 + v42;
    if (v43 <= 2147483650.0)
    {
      if (v43 <= -2147483650.0) {
        double v43 = -2147483650.0;
      }
      if ((int)v43 <= 99900)
      {
        uint64_t v44 = 0;
        int v45 = 0;
        uint64_t v46 = a4 + 3056;
        do
        {
          if (*(unsigned char *)(v46 + v44 - 96))
          {
            int v47 = *(_DWORD *)(v46 + 4 * v44);
            if ((v47 - 1) >= 0x1D)
            {
              if (v47)
              {
                int v67 = v45;
                EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                int v45 = v67;
              }
              else if (*(unsigned __int8 *)(a2 + v44) > 0x23u)
              {
                ++v45;
              }
            }
          }
          ++v44;
        }
        while (v44 != 48);
        if (v45 >= 6)
        {
          double v48 = *v36;
          double v49 = *v36 * dbl_22BB42960[*(_DWORD *)(a3 + 11028) == 1];
          if (v49 < 18.0) {
            double v49 = 18.0;
          }
          *uint64_t v36 = v49;
          if (v49 < *v37) {
            *long long v37 = v49;
          }
          double v50 = *(double *)v8;
          double v51 = *(double *)v8;
          if (*(double *)v8 > 50.0)
          {
            double v51 = v50 * 0.8;
            *(double *)uint64_t v8 = v50 * 0.8;
            if (v50 * 0.8 < 50.0)
            {
              *(void *)uint64_t v8 = 0x4049000000000000;
              double v51 = 50.0;
            }
          }
          EvLog_v("NK_Set_Accuracy: Reset pos acc H %g %g V %g %g", v48, v49, v50, v51);
        }
      }
    }
  }
  double v52 = *(double *)(a4 + 2840);
  if (*(unsigned __int8 *)(v8 + 97) <= 5u && v52 <= *(double *)(a3 + 10888)) {
    double v52 = *(double *)(a3 + 10888);
  }
  double v53 = *(double *)(a4 + 24672);
  if (v52 > 25.0)
  {
    double v54 = sqrt(v52);
    *(double *)(a4 + 24696) = v54 * *(double *)(a4 + 24696);
    *(float64x2_t *)(a4 + 24656) = vmulq_n_f64(*(float64x2_t *)(a4 + 24656), v54);
    double v53 = v54 * v53;
    *(double *)(a4 + 24672) = v53;
    *(float64x2_t *)uint64_t v8 = vmulq_n_f64(*(float64x2_t *)v8, v54);
    *(float64x2_t *)(a4 + 24752) = vmulq_n_f64(*(float64x2_t *)(a4 + 24752), v54);
  }
  if (v53 < 100.0)
  {
    long double v55 = *(double *)(a4 + 2832);
    if (v55 <= 10.0)
    {
      double v56 = 1.0;
    }
    else
    {
      *(void *)&v80[0] = 0;
      double v56 = 1.0;
      if (!R8_EQ((const double *)(a4 + 2832), (const double *)v80)) {
        double v56 = log10(v55);
      }
    }
    unsigned int v57 = *(unsigned __int8 *)(v8 + 98);
    int v58 = *(_DWORD *)(a4 + 968);
    if (v57 <= 9 && v58 == 1)
    {
      double v59 = ((10.0 - (double)v57) / 10.0 + 1.0) * ((10.0 - (double)v57) / 10.0 + 1.0);
    }
    else
    {
      if (v58) {
        goto LABEL_111;
      }
      uint64_t v62 = 0;
      unsigned int v63 = 0;
      memset(v80, 0, sizeof(v80));
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      char v64 = (double *)(a3 + 2104);
      long long v70 = 0u;
      long long v71 = 0u;
      *(_OWORD *)int v68 = 0u;
      long long v69 = 0u;
      do
      {
        if (*(unsigned char *)(a4 + v62 + 2960) && *(_WORD *)(a3 + 7744 + 2 * v62))
        {
          *((double *)v80 + v63) = *(double *)(a4 + 7616 + 8 * v62) * *v64;
          v68[v63] = v63;
          ++v63;
        }
        ++v62;
        v64 += 5;
      }
      while (v62 != 48);
      if (!v63) {
        goto LABEL_111;
      }
      VecSortIndexAscR8((uint64_t)v80, v63, v68, 1);
      unsigned int v65 = 75 * v63 + 37;
      if (v65 >= 0x2BC) {
        unsigned int v66 = v65 / 0x64;
      }
      else {
        unsigned int v66 = 6;
      }
      if (v63 < 7) {
        unsigned int v66 = v63;
      }
      double v59 = fmax(fabs(*((double *)v80 + v68[v66 - 1])) / (v56 * (*v36 + *v37) * 0.5), 1.0);
    }
    double v56 = v56 * v59;
LABEL_111:
    double v60 = fmin(v56, 4.0);
    *(double *)(a4 + 24696) = *(double *)(a4 + 24696) * v60;
    *(float64x2_t *)(a4 + 24656) = vmulq_n_f64(*(float64x2_t *)(a4 + 24656), v60);
    *(double *)(a4 + 24672) = v60 * v53;
    *(float64x2_t *)uint64_t v8 = vmulq_n_f64(*(float64x2_t *)v8, v60);
    *(float64x2_t *)(a4 + 24752) = vmulq_n_f64(*(float64x2_t *)(a4 + 24752), v60);
  }
  uint64_t v61 = 0;
  do
  {
    if (*(double *)(v11 + v61) > 9999000.0) {
      *(void *)(v11 + v61) = 0x4163125300000000;
    }
    v61 += 8;
  }
  while (v61 != 120);
}

size_t lsim13_02SuplConfig(void)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim13_02SuplConfig");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  if ((dword_26AE537A4 & 0x400) != 0) {
    unsigned __int16 v2 = 11;
  }
  else {
    unsigned __int16 v2 = 10;
  }
  unsigned __int16 v15 = v2;
  unsigned __int16 v16 = v2;
  if (byte_26AE537A0) {
    unsigned __int16 v16 = byte_26AE537A0;
  }
  if (byte_26AE537A1) {
    __int16 v3 = byte_26AE537A1;
  }
  else {
    __int16 v3 = 10;
  }
  __int16 v17 = v3;
  __int16 v19 = word_26AE537A2;
  int v4 = dword_26AE5379C;
  int v18 = dword_26AE5379C;
  BOOL v20 = (dword_26AE537A4 & 0x80000) != 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PrefPosM,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "LSM", 68, "lsim13_02SuplConfig", v4);
    LbsOsaTrace_WriteLog(0xCu, __str, v6, 5, 1);
  }
  GN_SUPL_Set_Config(&v15);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim13_03SuplExtdConfig");
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
  }
  v14[6] = (dword_26AE537A4 & 0x800) != 0;
  v14[7] = (dword_26AE537A4 & 0x1000) != 0;
  double v14[2] = byte_26AE537A8;
  v14[0] = byte_26AE537AA;
  v14[1] = byte_26AE537A9;
  v14[5] = byte_26AE537AD;
  v14[3] = byte_26AE537AF;
  unsigned __int8 v14[4] = byte_26AE537AE;
  GN_SUPL_Extd_Set_Config((uint64_t)v14);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim13_03SuplExtdConfig");
    LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim13_02SuplConfig");
    return LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
  }
  return result;
}

uint64_t lsim13_01SetConfig(uint64_t a1)
{
  uint64_t v280 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim13_01SetConfig");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_LSIM_CONFIG_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim13_01SetConfig");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  unsigned __int16 v6 = *(unsigned char **)(a1 + 16);
  if (v6)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim13_04SetUserConfig");
      LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
    }
    if (dword_26AE537A4)
    {
      BOOL v273 = (v6[564] & 1) == 0;
      if ((dword_26AE537A4 & 0x80) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      BOOL v273 = 0;
      if ((dword_26AE537A4 & 0x80) != 0)
      {
LABEL_10:
        BOOL v272 = (v6[564] & 0x80) == 0;
LABEL_13:
        memcpy_s("lsim13_04SetUserConfig", 247, &g_LsimUserConfig, 0x244u, v6, 0x244uLL);
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v9 = mach_continuous_time();
          unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG,Bitmask,%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 77, "lsim13_04SetUserConfig", dword_26AE537A4);
          LbsOsaTrace_WriteLog(0xCu, __str, v10, 3, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          double v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          if ((dword_26AE537A4 & 0x80) != 0) {
            uint64_t v12 = 84;
          }
          else {
            uint64_t v12 = 70;
          }
          if ((dword_26AE537A4 & 0x40) != 0) {
            uint64_t v13 = 84;
          }
          else {
            uint64_t v13 = 70;
          }
          if ((dword_26AE537A4 & 0x20) != 0) {
            uint64_t v14 = 84;
          }
          else {
            uint64_t v14 = 70;
          }
          uint64_t v217 = v13;
          if ((dword_26AE537A4 & 0x10) != 0) {
            uint64_t v15 = 84;
          }
          else {
            uint64_t v15 = 70;
          }
          if ((dword_26AE537A4 & 8) != 0) {
            uint64_t v16 = 84;
          }
          else {
            uint64_t v16 = 70;
          }
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG,UpTrans,%c,CpTrans,%c,PreUpTrans,%c,Mo,%c,Mt,%c\n", (unint64_t)v11, "LSM", 73, "lsim13_04SetUserConfig", v16, v15, v14, v217, v12);
          LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          double v18 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          if ((dword_26AE537A4 & 0x1000) != 0) {
            uint64_t v19 = 84;
          }
          else {
            uint64_t v19 = 70;
          }
          if ((dword_26AE537A4 & 0x800) != 0) {
            uint64_t v20 = 84;
          }
          else {
            uint64_t v20 = 70;
          }
          uint64_t v232 = v20;
          uint64_t v234 = v19;
          if ((dword_26AE537A4 & 0x400) != 0) {
            uint64_t v21 = 84;
          }
          else {
            uint64_t v21 = 70;
          }
          if ((dword_26AE537A4 & 0x2000) != 0) {
            uint64_t v22 = 84;
          }
          else {
            uint64_t v22 = 70;
          }
          uint64_t v218 = v21;
          if ((dword_26AE537A4 & 0x200) != 0) {
            uint64_t v23 = 84;
          }
          else {
            uint64_t v23 = 70;
          }
          if ((dword_26AE537A4 & 0x80000) != 0) {
            uint64_t v24 = 84;
          }
          else {
            uint64_t v24 = 70;
          }
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG,DisableSuplMsa,%c,SuplMultiSess,%c,Tls,%c,SuplV2,%c,SuplV2Lpp,%c,SuplV2Sha1Override,%c\n", (unint64_t)v18, "LSM", 73, "lsim13_04SetUserConfig", v24, v23, v22, v218, v232, v234);
          LbsOsaTrace_WriteLog(0xCu, __str, v25, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          double v26 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          if (dword_26AE537A4) {
            uint64_t v27 = 84;
          }
          else {
            uint64_t v27 = 70;
          }
          if ((dword_26AE537A4 & 0x20000) != 0) {
            uint64_t v28 = 84;
          }
          else {
            uint64_t v28 = 70;
          }
          uint64_t v233 = v28;
          uint64_t v235 = v27;
          if ((dword_26AE537A4 & 0x10000) != 0) {
            uint64_t v29 = 84;
          }
          else {
            uint64_t v29 = 70;
          }
          if ((dword_26AE537A4 & 0x40000) != 0) {
            uint64_t v30 = 84;
          }
          else {
            uint64_t v30 = 70;
          }
          uint64_t v219 = v29;
          if ((dword_26AE537A4 & 0x8000) != 0) {
            uint64_t v31 = 84;
          }
          else {
            uint64_t v31 = 70;
          }
          if ((dword_26AE537A4 & 0x4000) != 0) {
            uint64_t v32 = 84;
          }
          else {
            uint64_t v32 = 70;
          }
          unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG,Fa,%c,CpMoar,%c,NwPfOverride,%c,WifiPos,%c,SntpRft,%c,GnssChipEn,%c\n", (unint64_t)v26, "LSM", 73, "lsim13_04SetUserConfig", v32, v31, v30, v219, v233, v235);
          LbsOsaTrace_WriteLog(0xCu, __str, v33, 4, 1);
        }
        char v34 = 0;
        uint64_t v35 = 0;
        do
        {
          char v36 = v34;
          long long v37 = (char *)&g_LsimUserConfig + 268 * v35;
          int v38 = *((_DWORD *)v37 + 1);
          if (v38 && strnlen((const char *)&g_LsimUserConfig + 268 * v35 + 8, 0x100uLL))
          {
            char v277 = 0;
            unsigned __int16 v278 = -1;
            unsigned __int8 v274 = *v37;
            int v276 = v38;
            double v39 = strncpy(v275, (const char *)&g_LsimUserConfig + 268 * v35 + 8, 0x100uLL);
            char v277 = strnlen(v39, 0x100uLL);
            __int16 v40 = *((_WORD *)&g_LsimUserConfig + 134 * v35 + 132);
            if (!v40) {
              __int16 v40 = 7275;
            }
            unsigned __int16 v278 = v40;
            if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v41 = mach_continuous_time();
              unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG,SimIndex,%u,SimId,%u,Addr,%s,Port,%u,AddType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "LSM", 73, "lsim13_04SetUserConfig", v35, v274, v275, v278, v276);
              LbsOsaTrace_WriteLog(0xCu, __str, v42, 4, 1);
            }
            GN_SUPL_Set_SlpInfo(&v274);
          }
          char v34 = 1;
          uint64_t v35 = 1;
        }
        while ((v36 & 1) == 0);
        if (dword_26AE5379C == 3) {
          dword_26AE5379C = 2;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v43 = mach_continuous_time();
          unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG,PrefPosM,%u,UT2,%us,UT3,%us,SuplSessTo,%us\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "LSM", 73, "lsim13_04SetUserConfig", dword_26AE5379C, byte_26AE537A0, byte_26AE537A1, (unsigned __int16)word_26AE537A2);
          LbsOsaTrace_WriteLog(0xCu, __str, v44, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          double v45 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          uint64_t v46 = 84;
          if (byte_26AE537AC) {
            uint64_t v47 = 84;
          }
          else {
            uint64_t v47 = 70;
          }
          if (byte_26AE537AB) {
            uint64_t v48 = 84;
          }
          else {
            uint64_t v48 = 70;
          }
          if (byte_26AE537AA) {
            uint64_t v49 = 84;
          }
          else {
            uint64_t v49 = 70;
          }
          if (byte_26AE537A9) {
            uint64_t v50 = 84;
          }
          else {
            uint64_t v50 = 70;
          }
          if (!byte_26AE537A8) {
            uint64_t v46 = 70;
          }
          unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG,GPS ,Auto,%c,Msb,%c,Msa,%c,PredEE,%c,SaEE,%c\n", (unint64_t)v45, "LSM", 73, "lsim13_04SetUserConfig", v46, v50, v49, v48, v47);
          LbsOsaTrace_WriteLog(0xCu, __str, v51, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          double v52 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          uint64_t v53 = 84;
          if (byte_26AE537B1) {
            uint64_t v54 = 84;
          }
          else {
            uint64_t v54 = 70;
          }
          if (byte_26AE537B0) {
            uint64_t v55 = 84;
          }
          else {
            uint64_t v55 = 70;
          }
          if (byte_26AE537AF) {
            uint64_t v56 = 84;
          }
          else {
            uint64_t v56 = 70;
          }
          if (byte_26AE537AE) {
            uint64_t v57 = 84;
          }
          else {
            uint64_t v57 = 70;
          }
          if (!byte_26AE537AD) {
            uint64_t v53 = 70;
          }
          unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG,BDS ,Auto,%c,Msb,%c,Msa,%c,PredEE,%c,SaEE,%c\n", (unint64_t)v52, "LSM", 73, "lsim13_04SetUserConfig", v53, v57, v56, v55, v54);
          LbsOsaTrace_WriteLog(0xCu, __str, v58, 4, 1);
        }
        if (v272)
        {
          lsim04_02CloseOtherCpNiSessions(1, 0);
          lsim05_42CloseSuplSessions(3, 0);
        }
        if (v273)
        {
          lsim04_02CloseOtherCpNiSessions(4, 0);
          lsim05_43CloseOtherPospSessions(4, 0);
          lsim05_42CloseSuplSessions(4, 0);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v59 = mach_continuous_time();
          unsigned __int16 v60 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v59), "LSM", 73, "lsim13_04SetUserConfig");
          LbsOsaTrace_WriteLog(0xCu, __str, v60, 4, 1);
        }
        uint64_t v61 = *(void **)(a1 + 16);
        if (v61) {
          free(v61);
        }
        *(void *)(a1 + 16) = 0;
        goto LABEL_126;
      }
    }
    BOOL v272 = 0;
    goto LABEL_13;
  }
LABEL_126:
  uint64_t v62 = *(const void **)(a1 + 24);
  if (v62)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v63 = mach_continuous_time();
      unsigned __int16 v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "LSM", 73, "lsim13_05SetPltConfig");
      LbsOsaTrace_WriteLog(0xCu, __str, v64, 4, 1);
    }
    memcpy_s("lsim13_05SetPltConfig", 364, &g_LsimPltConfig, 0x1Cu, v62, 0x1CuLL);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v65 = mach_continuous_time();
      unsigned __int16 v66 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,MSA AR Mandatory Mask\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v65), "LSM", 73, "lsim13_05SetPltConfig");
      LbsOsaTrace_WriteLog(0xCu, __str, v66, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v67 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((g_LsimPltConfig & 4) != 0) {
        uint64_t v68 = 84;
      }
      else {
        uint64_t v68 = 70;
      }
      if ((g_LsimPltConfig & 2) != 0) {
        uint64_t v69 = 84;
      }
      else {
        uint64_t v69 = 70;
      }
      if (g_LsimPltConfig) {
        uint64_t v70 = 84;
      }
      else {
        uint64_t v70 = 70;
      }
      unsigned __int16 v71 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,Iono,%c,Rfp,%c,Rft,%c\n", (unint64_t)v67, "LSM", 73, "lsim13_05SetPltConfig", v70, v69, v68);
      LbsOsaTrace_WriteLog(0xCu, __str, v71, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v72 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((g_LsimPltConfig & 0x8000000) != 0) {
        uint64_t v73 = 84;
      }
      else {
        uint64_t v73 = 70;
      }
      if ((g_LsimPltConfig & 0x4000000) != 0) {
        uint64_t v74 = 84;
      }
      else {
        uint64_t v74 = 70;
      }
      if ((g_LsimPltConfig & 0x2000000) != 0) {
        uint64_t v75 = 84;
      }
      else {
        uint64_t v75 = 70;
      }
      uint64_t v248 = v74;
      uint64_t v260 = v73;
      if ((g_LsimPltConfig & 0x800000) != 0) {
        uint64_t v76 = 84;
      }
      else {
        uint64_t v76 = 70;
      }
      if ((g_LsimPltConfig & 0x1000000) != 0) {
        uint64_t v77 = 84;
      }
      else {
        uint64_t v77 = 70;
      }
      uint64_t v236 = v76;
      if ((g_LsimPltConfig & 0x100000) != 0) {
        uint64_t v78 = 84;
      }
      else {
        uint64_t v78 = 70;
      }
      if ((g_LsimPltConfig & 0x400000) != 0) {
        uint64_t v79 = 84;
      }
      else {
        uint64_t v79 = 70;
      }
      uint64_t v220 = v78;
      if ((g_LsimPltConfig & 0x200000) != 0) {
        uint64_t v80 = 84;
      }
      else {
        uint64_t v80 = 70;
      }
      if ((g_LsimPltConfig & 0x80000) != 0) {
        uint64_t v81 = 84;
      }
      else {
        uint64_t v81 = 70;
      }
      unsigned __int16 v82 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,GPS ,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v72, "LSM", 73, "lsim13_05SetPltConfig", v81, v80, v79, v220, v77, v236, v75, v248, v260);
      LbsOsaTrace_WriteLog(0xCu, __str, v82, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v83 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((g_LsimPltConfig & 0x80000000000) != 0) {
        uint64_t v84 = 84;
      }
      else {
        uint64_t v84 = 70;
      }
      if ((g_LsimPltConfig & 0x40000000000) != 0) {
        uint64_t v85 = 84;
      }
      else {
        uint64_t v85 = 70;
      }
      if ((g_LsimPltConfig & 0x20000000000) != 0) {
        uint64_t v86 = 84;
      }
      else {
        uint64_t v86 = 70;
      }
      uint64_t v249 = v85;
      uint64_t v261 = v84;
      if ((g_LsimPltConfig & 0x8000000000) != 0) {
        uint64_t v87 = 84;
      }
      else {
        uint64_t v87 = 70;
      }
      if ((g_LsimPltConfig & 0x10000000000) != 0) {
        uint64_t v88 = 84;
      }
      else {
        uint64_t v88 = 70;
      }
      uint64_t v237 = v87;
      if ((g_LsimPltConfig & 0x1000000000) != 0) {
        uint64_t v89 = 84;
      }
      else {
        uint64_t v89 = 70;
      }
      if ((g_LsimPltConfig & 0x4000000000) != 0) {
        uint64_t v90 = 84;
      }
      else {
        uint64_t v90 = 70;
      }
      uint64_t v221 = v89;
      if ((g_LsimPltConfig & 0x2000000000) != 0) {
        uint64_t v91 = 84;
      }
      else {
        uint64_t v91 = 70;
      }
      if ((g_LsimPltConfig & 0x800000000) != 0) {
        uint64_t v92 = 84;
      }
      else {
        uint64_t v92 = 70;
      }
      unsigned __int16 v93 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,GLON,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v83, "LSM", 73, "lsim13_05SetPltConfig", v92, v91, v90, v221, v88, v237, v86, v249, v261);
      LbsOsaTrace_WriteLog(0xCu, __str, v93, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v94 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((g_LsimPltConfig & 0x800000000000000) != 0) {
        uint64_t v95 = 84;
      }
      else {
        uint64_t v95 = 70;
      }
      if ((g_LsimPltConfig & 0x400000000000000) != 0) {
        uint64_t v96 = 84;
      }
      else {
        uint64_t v96 = 70;
      }
      if ((g_LsimPltConfig & 0x200000000000000) != 0) {
        uint64_t v97 = 84;
      }
      else {
        uint64_t v97 = 70;
      }
      uint64_t v250 = v96;
      uint64_t v262 = v95;
      if ((g_LsimPltConfig & 0x80000000000000) != 0) {
        uint64_t v98 = 84;
      }
      else {
        uint64_t v98 = 70;
      }
      if ((g_LsimPltConfig & 0x100000000000000) != 0) {
        uint64_t v99 = 84;
      }
      else {
        uint64_t v99 = 70;
      }
      uint64_t v238 = v98;
      if ((g_LsimPltConfig & 0x10000000000000) != 0) {
        uint64_t v100 = 84;
      }
      else {
        uint64_t v100 = 70;
      }
      if ((g_LsimPltConfig & 0x40000000000000) != 0) {
        uint64_t v101 = 84;
      }
      else {
        uint64_t v101 = 70;
      }
      uint64_t v222 = v100;
      if ((g_LsimPltConfig & 0x20000000000000) != 0) {
        uint64_t v102 = 84;
      }
      else {
        uint64_t v102 = 70;
      }
      if ((g_LsimPltConfig & 0x8000000000000) != 0) {
        uint64_t v103 = 84;
      }
      else {
        uint64_t v103 = 70;
      }
      unsigned __int16 v104 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,BDS ,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v94, "LSM", 73, "lsim13_05SetPltConfig", v103, v102, v101, v222, v99, v238, v97, v250, v262);
      LbsOsaTrace_WriteLog(0xCu, __str, v104, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v105 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((word_26AE6D3FC & 0x800) != 0) {
        uint64_t v106 = 84;
      }
      else {
        uint64_t v106 = 70;
      }
      if ((word_26AE6D3FC & 0x400) != 0) {
        uint64_t v107 = 84;
      }
      else {
        uint64_t v107 = 70;
      }
      if ((word_26AE6D3FC & 0x200) != 0) {
        uint64_t v108 = 84;
      }
      else {
        uint64_t v108 = 70;
      }
      uint64_t v251 = v107;
      uint64_t v263 = v106;
      if ((word_26AE6D3FC & 0x80) != 0) {
        uint64_t v109 = 84;
      }
      else {
        uint64_t v109 = 70;
      }
      if ((word_26AE6D3FC & 0x100) != 0) {
        uint64_t v110 = 84;
      }
      else {
        uint64_t v110 = 70;
      }
      uint64_t v239 = v109;
      if ((word_26AE6D3FC & 0x10) != 0) {
        uint64_t v111 = 84;
      }
      else {
        uint64_t v111 = 70;
      }
      if ((word_26AE6D3FC & 0x40) != 0) {
        uint64_t v112 = 84;
      }
      else {
        uint64_t v112 = 70;
      }
      uint64_t v223 = v111;
      if ((word_26AE6D3FC & 0x20) != 0) {
        uint64_t v113 = 84;
      }
      else {
        uint64_t v113 = 70;
      }
      if ((word_26AE6D3FC & 8) != 0) {
        uint64_t v114 = 84;
      }
      else {
        uint64_t v114 = 70;
      }
      unsigned __int16 v115 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,GAL ,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v105, "LSM", 73, "lsim13_05SetPltConfig", v114, v113, v112, v223, v110, v239, v108, v251, v263);
      LbsOsaTrace_WriteLog(0xCu, __str, v115, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v116 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((word_26AE6D3FA & 0x800) != 0) {
        uint64_t v117 = 84;
      }
      else {
        uint64_t v117 = 70;
      }
      if ((word_26AE6D3FA & 0x400) != 0) {
        uint64_t v118 = 84;
      }
      else {
        uint64_t v118 = 70;
      }
      if ((word_26AE6D3FA & 0x200) != 0) {
        uint64_t v119 = 84;
      }
      else {
        uint64_t v119 = 70;
      }
      uint64_t v252 = v118;
      uint64_t v264 = v117;
      if ((word_26AE6D3FA & 0x80) != 0) {
        uint64_t v120 = 84;
      }
      else {
        uint64_t v120 = 70;
      }
      if ((word_26AE6D3FA & 0x100) != 0) {
        uint64_t v121 = 84;
      }
      else {
        uint64_t v121 = 70;
      }
      uint64_t v240 = v120;
      if ((word_26AE6D3FA & 0x10) != 0) {
        uint64_t v122 = 84;
      }
      else {
        uint64_t v122 = 70;
      }
      if ((word_26AE6D3FA & 0x40) != 0) {
        uint64_t v123 = 84;
      }
      else {
        uint64_t v123 = 70;
      }
      uint64_t v224 = v122;
      if ((word_26AE6D3FA & 0x20) != 0) {
        uint64_t v124 = 84;
      }
      else {
        uint64_t v124 = 70;
      }
      if ((word_26AE6D3FA & 8) != 0) {
        uint64_t v125 = 84;
      }
      else {
        uint64_t v125 = 70;
      }
      unsigned __int16 v126 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,QZSS,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v116, "LSM", 73, "lsim13_05SetPltConfig", v125, v124, v123, v224, v121, v240, v119, v252, v264);
      LbsOsaTrace_WriteLog(0xCu, __str, v126, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v127 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((word_26AE6D3F8 & 0x800) != 0) {
        uint64_t v128 = 84;
      }
      else {
        uint64_t v128 = 70;
      }
      if ((word_26AE6D3F8 & 0x400) != 0) {
        uint64_t v129 = 84;
      }
      else {
        uint64_t v129 = 70;
      }
      if ((word_26AE6D3F8 & 0x200) != 0) {
        uint64_t v130 = 84;
      }
      else {
        uint64_t v130 = 70;
      }
      uint64_t v253 = v129;
      uint64_t v265 = v128;
      if ((word_26AE6D3F8 & 0x80) != 0) {
        uint64_t v131 = 84;
      }
      else {
        uint64_t v131 = 70;
      }
      if ((word_26AE6D3F8 & 0x100) != 0) {
        uint64_t v132 = 84;
      }
      else {
        uint64_t v132 = 70;
      }
      uint64_t v241 = v131;
      if ((word_26AE6D3F8 & 0x10) != 0) {
        uint64_t v133 = 84;
      }
      else {
        uint64_t v133 = 70;
      }
      if ((word_26AE6D3F8 & 0x40) != 0) {
        uint64_t v134 = 84;
      }
      else {
        uint64_t v134 = 70;
      }
      uint64_t v225 = v133;
      if ((word_26AE6D3F8 & 0x20) != 0) {
        uint64_t v135 = 84;
      }
      else {
        uint64_t v135 = 70;
      }
      if ((word_26AE6D3F8 & 8) != 0) {
        uint64_t v136 = 84;
      }
      else {
        uint64_t v136 = 70;
      }
      unsigned __int16 v137 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,SBAS,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v127, "LSM", 73, "lsim13_05SetPltConfig", v136, v135, v134, v225, v132, v241, v130, v253, v265);
      LbsOsaTrace_WriteLog(0xCu, __str, v137, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v138 = mach_continuous_time();
      unsigned __int16 v139 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,MSB AR Mandatory Mask\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v138), "LSM", 73, "lsim13_05SetPltConfig");
      LbsOsaTrace_WriteLog(0xCu, __str, v139, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v140 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((qword_26AE6D3FE & 4) != 0) {
        uint64_t v141 = 84;
      }
      else {
        uint64_t v141 = 70;
      }
      if ((qword_26AE6D3FE & 2) != 0) {
        uint64_t v142 = 84;
      }
      else {
        uint64_t v142 = 70;
      }
      if (qword_26AE6D3FE) {
        uint64_t v143 = 84;
      }
      else {
        uint64_t v143 = 70;
      }
      unsigned __int16 v144 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,Iono,%c,Rfp,%c,Rft,%c\n", (unint64_t)v140, "LSM", 73, "lsim13_05SetPltConfig", v143, v142, v141);
      LbsOsaTrace_WriteLog(0xCu, __str, v144, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v145 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((qword_26AE6D3FE & 0x8000000) != 0) {
        uint64_t v146 = 84;
      }
      else {
        uint64_t v146 = 70;
      }
      if ((qword_26AE6D3FE & 0x4000000) != 0) {
        uint64_t v147 = 84;
      }
      else {
        uint64_t v147 = 70;
      }
      if ((qword_26AE6D3FE & 0x2000000) != 0) {
        uint64_t v148 = 84;
      }
      else {
        uint64_t v148 = 70;
      }
      uint64_t v254 = v147;
      uint64_t v266 = v146;
      if ((qword_26AE6D3FE & 0x800000) != 0) {
        uint64_t v149 = 84;
      }
      else {
        uint64_t v149 = 70;
      }
      if ((qword_26AE6D3FE & 0x1000000) != 0) {
        uint64_t v150 = 84;
      }
      else {
        uint64_t v150 = 70;
      }
      uint64_t v242 = v149;
      if ((qword_26AE6D3FE & 0x100000) != 0) {
        uint64_t v151 = 84;
      }
      else {
        uint64_t v151 = 70;
      }
      if ((qword_26AE6D3FE & 0x400000) != 0) {
        uint64_t v152 = 84;
      }
      else {
        uint64_t v152 = 70;
      }
      uint64_t v226 = v151;
      if ((qword_26AE6D3FE & 0x200000) != 0) {
        uint64_t v153 = 84;
      }
      else {
        uint64_t v153 = 70;
      }
      if ((qword_26AE6D3FE & 0x80000) != 0) {
        uint64_t v154 = 84;
      }
      else {
        uint64_t v154 = 70;
      }
      unsigned __int16 v155 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,GPS ,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v145, "LSM", 73, "lsim13_05SetPltConfig", v154, v153, v152, v226, v150, v242, v148, v254, v266);
      LbsOsaTrace_WriteLog(0xCu, __str, v155, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v156 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((qword_26AE6D3FE & 0x80000000000) != 0) {
        uint64_t v157 = 84;
      }
      else {
        uint64_t v157 = 70;
      }
      if ((qword_26AE6D3FE & 0x40000000000) != 0) {
        uint64_t v158 = 84;
      }
      else {
        uint64_t v158 = 70;
      }
      if ((qword_26AE6D3FE & 0x20000000000) != 0) {
        uint64_t v159 = 84;
      }
      else {
        uint64_t v159 = 70;
      }
      uint64_t v255 = v158;
      uint64_t v267 = v157;
      if ((qword_26AE6D3FE & 0x8000000000) != 0) {
        uint64_t v160 = 84;
      }
      else {
        uint64_t v160 = 70;
      }
      if ((qword_26AE6D3FE & 0x10000000000) != 0) {
        uint64_t v161 = 84;
      }
      else {
        uint64_t v161 = 70;
      }
      uint64_t v243 = v160;
      if ((qword_26AE6D3FE & 0x1000000000) != 0) {
        uint64_t v162 = 84;
      }
      else {
        uint64_t v162 = 70;
      }
      if ((qword_26AE6D3FE & 0x4000000000) != 0) {
        uint64_t v163 = 84;
      }
      else {
        uint64_t v163 = 70;
      }
      uint64_t v227 = v162;
      if ((qword_26AE6D3FE & 0x2000000000) != 0) {
        uint64_t v164 = 84;
      }
      else {
        uint64_t v164 = 70;
      }
      if ((qword_26AE6D3FE & 0x800000000) != 0) {
        uint64_t v165 = 84;
      }
      else {
        uint64_t v165 = 70;
      }
      unsigned __int16 v166 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,GLO ,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v156, "LSM", 73, "lsim13_05SetPltConfig", v165, v164, v163, v227, v161, v243, v159, v255, v267);
      LbsOsaTrace_WriteLog(0xCu, __str, v166, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v167 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((qword_26AE6D3FE & 0x800000000000000) != 0) {
        uint64_t v168 = 84;
      }
      else {
        uint64_t v168 = 70;
      }
      if ((qword_26AE6D3FE & 0x400000000000000) != 0) {
        uint64_t v169 = 84;
      }
      else {
        uint64_t v169 = 70;
      }
      if ((qword_26AE6D3FE & 0x200000000000000) != 0) {
        uint64_t v170 = 84;
      }
      else {
        uint64_t v170 = 70;
      }
      uint64_t v256 = v169;
      uint64_t v268 = v168;
      if ((qword_26AE6D3FE & 0x80000000000000) != 0) {
        uint64_t v171 = 84;
      }
      else {
        uint64_t v171 = 70;
      }
      if ((qword_26AE6D3FE & 0x100000000000000) != 0) {
        uint64_t v172 = 84;
      }
      else {
        uint64_t v172 = 70;
      }
      uint64_t v244 = v171;
      if ((qword_26AE6D3FE & 0x10000000000000) != 0) {
        uint64_t v173 = 84;
      }
      else {
        uint64_t v173 = 70;
      }
      if ((qword_26AE6D3FE & 0x40000000000000) != 0) {
        uint64_t v174 = 84;
      }
      else {
        uint64_t v174 = 70;
      }
      uint64_t v228 = v173;
      if ((qword_26AE6D3FE & 0x20000000000000) != 0) {
        uint64_t v175 = 84;
      }
      else {
        uint64_t v175 = 70;
      }
      if ((qword_26AE6D3FE & 0x8000000000000) != 0) {
        uint64_t v176 = 84;
      }
      else {
        uint64_t v176 = 70;
      }
      unsigned __int16 v177 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,BDS ,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v167, "LSM", 73, "lsim13_05SetPltConfig", v176, v175, v174, v228, v172, v244, v170, v256, v268);
      LbsOsaTrace_WriteLog(0xCu, __str, v177, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v178 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((word_26AE6D40A & 0x800) != 0) {
        uint64_t v179 = 84;
      }
      else {
        uint64_t v179 = 70;
      }
      if ((word_26AE6D40A & 0x400) != 0) {
        uint64_t v180 = 84;
      }
      else {
        uint64_t v180 = 70;
      }
      if ((word_26AE6D40A & 0x200) != 0) {
        uint64_t v181 = 84;
      }
      else {
        uint64_t v181 = 70;
      }
      uint64_t v257 = v180;
      uint64_t v269 = v179;
      if ((word_26AE6D40A & 0x80) != 0) {
        uint64_t v182 = 84;
      }
      else {
        uint64_t v182 = 70;
      }
      if ((word_26AE6D40A & 0x100) != 0) {
        uint64_t v183 = 84;
      }
      else {
        uint64_t v183 = 70;
      }
      uint64_t v245 = v182;
      if ((word_26AE6D40A & 0x10) != 0) {
        uint64_t v184 = 84;
      }
      else {
        uint64_t v184 = 70;
      }
      if ((word_26AE6D40A & 0x40) != 0) {
        uint64_t v185 = 84;
      }
      else {
        uint64_t v185 = 70;
      }
      uint64_t v229 = v184;
      if ((word_26AE6D40A & 0x20) != 0) {
        uint64_t v186 = 84;
      }
      else {
        uint64_t v186 = 70;
      }
      if ((word_26AE6D40A & 8) != 0) {
        uint64_t v187 = 84;
      }
      else {
        uint64_t v187 = 70;
      }
      unsigned __int16 v188 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,GAL ,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v178, "LSM", 73, "lsim13_05SetPltConfig", v187, v186, v185, v229, v183, v245, v181, v257, v269);
      LbsOsaTrace_WriteLog(0xCu, __str, v188, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v189 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((word_26AE6D408 & 0x800) != 0) {
        uint64_t v190 = 84;
      }
      else {
        uint64_t v190 = 70;
      }
      if ((word_26AE6D408 & 0x400) != 0) {
        uint64_t v191 = 84;
      }
      else {
        uint64_t v191 = 70;
      }
      if ((word_26AE6D408 & 0x200) != 0) {
        uint64_t v192 = 84;
      }
      else {
        uint64_t v192 = 70;
      }
      uint64_t v258 = v191;
      uint64_t v270 = v190;
      if ((word_26AE6D408 & 0x80) != 0) {
        uint64_t v193 = 84;
      }
      else {
        uint64_t v193 = 70;
      }
      if ((word_26AE6D408 & 0x100) != 0) {
        uint64_t v194 = 84;
      }
      else {
        uint64_t v194 = 70;
      }
      uint64_t v246 = v193;
      if ((word_26AE6D408 & 0x10) != 0) {
        uint64_t v195 = 84;
      }
      else {
        uint64_t v195 = 70;
      }
      if ((word_26AE6D408 & 0x40) != 0) {
        uint64_t v196 = 84;
      }
      else {
        uint64_t v196 = 70;
      }
      uint64_t v230 = v195;
      if ((word_26AE6D408 & 0x20) != 0) {
        uint64_t v197 = 84;
      }
      else {
        uint64_t v197 = 70;
      }
      if ((word_26AE6D408 & 8) != 0) {
        uint64_t v198 = 84;
      }
      else {
        uint64_t v198 = 70;
      }
      unsigned __int16 v199 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,QZSS,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v189, "LSM", 73, "lsim13_05SetPltConfig", v198, v197, v196, v230, v194, v246, v192, v258, v270);
      LbsOsaTrace_WriteLog(0xCu, __str, v199, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v200 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((word_26AE6D406 & 0x800) != 0) {
        uint64_t v201 = 84;
      }
      else {
        uint64_t v201 = 70;
      }
      if ((word_26AE6D406 & 0x400) != 0) {
        uint64_t v202 = 84;
      }
      else {
        uint64_t v202 = 70;
      }
      if ((word_26AE6D406 & 0x200) != 0) {
        uint64_t v203 = 84;
      }
      else {
        uint64_t v203 = 70;
      }
      uint64_t v259 = v202;
      uint64_t v271 = v201;
      if ((word_26AE6D406 & 0x80) != 0) {
        uint64_t v204 = 84;
      }
      else {
        uint64_t v204 = 70;
      }
      if ((word_26AE6D406 & 0x100) != 0) {
        uint64_t v205 = 84;
      }
      else {
        uint64_t v205 = 70;
      }
      uint64_t v247 = v204;
      if ((word_26AE6D406 & 0x10) != 0) {
        uint64_t v206 = 84;
      }
      else {
        uint64_t v206 = 70;
      }
      if ((word_26AE6D406 & 0x40) != 0) {
        uint64_t v207 = 84;
      }
      else {
        uint64_t v207 = 70;
      }
      uint64_t v231 = v206;
      if ((word_26AE6D406 & 0x20) != 0) {
        uint64_t v208 = 84;
      }
      else {
        uint64_t v208 = 70;
      }
      if ((word_26AE6D406 & 8) != 0) {
        uint64_t v209 = 84;
      }
      else {
        uint64_t v209 = 70;
      }
      unsigned __int16 v210 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG,SBAS,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v200, "LSM", 73, "lsim13_05SetPltConfig", v209, v208, v207, v231, v205, v247, v203, v259, v271);
      LbsOsaTrace_WriteLog(0xCu, __str, v210, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v211 = mach_continuous_time();
      unsigned __int16 v212 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v211), "LSM", 73, "lsim13_05SetPltConfig");
      LbsOsaTrace_WriteLog(0xCu, __str, v212, 4, 1);
    }
    v213 = *(void **)(a1 + 24);
    if (v213) {
      free(v213);
    }
    *(void *)(a1 + 24) = 0;
  }
  lsim13_02SuplConfig();
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v214 = mach_continuous_time();
    unsigned __int16 v215 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v214), "LSM", 73, "lsim13_01SetConfig");
    LbsOsaTrace_WriteLog(0xCu, __str, v215, 4, 1);
  }
  return 0;
}

uint64_t Gnm25_15HandleReqRestoreNv(int a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RestoreReqMask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm25_15HandleReqRestoreNv", a1);
    uint64_t result = LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if ((a1 & 8) != 0 && !(_BYTE)dword_26AE6D439)
  {
    BYTE2(dword_26AE6D439) = 0;
    LOBYTE(dword_26AE6D439) = 1;
    uint64_t result = Gnm27_23RestoreFixedMe((uint64_t)&dword_26AE6D439, v3, v4, v5, v6, v7);
  }
  if ((a1 & 0x10) != 0 && !(_BYTE)dword_26AE6D43E)
  {
    HIWORD(dword_26AE6D43E) = 0;
    LOBYTE(dword_26AE6D43E) = 1;
    Gnm10_29SendFwActivity(1, 1);
    return Gnm29_01RestoreVarMENv(0);
  }
  return result;
}

uint64_t Gnm25_18CheckRestoreStatus(uint64_t a1, const char *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((int)a1 <= 70)
  {
    if (a1 == 32)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s Success\n");
        goto LABEL_17;
      }
      return 1;
    }
    if (a1 != 67)
    {
LABEL_19:
      uint64_t v5 = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        return v5;
      }
      bzero(__str, 0x410uLL);
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v12 = a2;
      uint64_t v13 = a1;
      uint64_t v11 = 770;
      uint64_t v6 = "%10u %s%c %s: #%04hx %s RespStatus,%u\n";
      unint64_t v10 = v7;
LABEL_21:
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, v6, v10, "GNM", 87, "Gnm25_18CheckRestoreStatus", v11, v12, v13);
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
      return 0;
    }
    uint64_t v5 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = (uint64_t)a2;
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v6 = "%10u %s%c %s: %s CS error\n";
      goto LABEL_21;
    }
  }
  else
  {
    if (a1 != 71)
    {
      if (a1 == 78)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s Not required\n");
          goto LABEL_17;
        }
        return 1;
      }
      if (a1 == 84)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s Not required, TCXO\n");
LABEL_17:
          uint64_t v5 = 1;
          LbsOsaTrace_WriteLog(0xBu, __str, v4, 4, 1);
          return v5;
        }
        return 1;
      }
      goto LABEL_19;
    }
    uint64_t v5 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = (uint64_t)a2;
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v6 = "%10u %s%c %s: %s Gen failure\n";
      goto LABEL_21;
    }
  }
  return v5;
}

double GLON_EphInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  int v2 = 900 * *(unsigned __int8 *)(a1 + 13);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 12) = v2;
  *(unsigned char *)(a2 + 20) = *(unsigned char *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 36);
  double v5 = (double)*(int *)(a1 + 40) * 0.000953674316;
  *(double *)(a2 + 24) = (double)*(int *)(a1 + 28) * 0.48828125;
  *(double *)(a2 + 32) = v5;
  *(double *)(a2 + 40) = (double)*(char *)(a1 + 52) * 0.000000931322575;
  *(double *)(a2 + 48) = (double)v3 * 0.48828125;
  int v6 = *(_DWORD *)(a1 + 48);
  double v7 = (double)*(char *)(a1 + 53) * 0.000000931322575;
  *(double *)(a2 + 56) = (double)*(int *)(a1 + 44) * 0.000953674316;
  *(double *)(a2 + 64) = v7;
  *(double *)(a2 + 72) = (double)v4 * 0.48828125;
  *(double *)(a2 + 80) = (double)v6 * 0.000953674316;
  double v8 = (double)*(int *)(a1 + 56) * 9.31322575e-10;
  *(double *)(a2 + 88) = (double)*(char *)(a1 + 54) * 0.000000931322575;
  *(double *)(a2 + 96) = v8;
  double result = (double)*(__int16 *)(a1 + 60) * 9.09494702e-13;
  double v10 = (double)*(char *)(a1 + 55) * 9.31322575e-10;
  *(double *)(a2 + 104) = result;
  *(double *)(a2 + 112) = v10;
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(a1 + 18);
  *(_WORD *)(a2 + 124) = *(_WORD *)(a1 + 22);
  *(_WORD *)(a2 + 126) = *(_WORD *)(a1 + 16);
  *(_DWORD *)(a2 + 16) = ((*(unsigned __int16 *)(a1 + 14) << 31 >> 31) & 0x1E)
                       + 60 * ((*(unsigned __int16 *)(a1 + 14) >> 1) & 0x3F)
                       + 3600 * ((*(unsigned __int16 *)(a1 + 14) >> 7) & 0x1F);
  return result;
}

double NK_Publish_Nav_Soln(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2 + 24584;
  *(_WORD *)a4 = *(_WORD *)(a2 + 24584);
  *(void *)(a4 + 4) = *(void *)(a2 + 24588);
  if (*(unsigned char *)(a4 + 16))
  {
    char v9 = *(unsigned char *)(a3 + 128) ^ 1;
LABEL_3:
    *(unsigned char *)(a4 + 16) = v9;
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a3 + 128) && *(_DWORD *)(a3 + 140) >= 2u && !*(_DWORD *)(a3 + 152))
  {
    char v9 = 1;
    goto LABEL_3;
  }
LABEL_7:
  *(unsigned char *)(a4 + 17) = *(unsigned char *)(a2 + 24597);
  *(void *)(a4 + 20) = *(void *)(a3 + 20);
  memcpy((void *)(a4 + 32), (const void *)(a2 + 624), 0x150uLL);
  double v10 = *(double *)(a4 + 360);
  if (v10 < 0.0)
  {
    do
      double v10 = v10 + 360.0;
    while (v10 < 0.0);
    *(double *)(a4 + 360) = v10;
  }
  unsigned __int16 v33 = (_WORD *)(a3 + 10982);
  if (v10 > 360.0)
  {
    do
      double v10 = v10 + -360.0;
    while (v10 > 360.0);
    *(double *)(a4 + 360) = v10;
  }
  long long v11 = *(_OWORD *)(a4 + 336);
  *(_OWORD *)(a4 + 920) = *(_OWORD *)(a4 + 320);
  *(_OWORD *)(a4 + 936) = v11;
  *(void *)(a4 + 952) = *(void *)(a4 + 352);
  *(double *)(a4 + 960) = v10;
  *(unsigned char *)(a4 + 19) = *(unsigned char *)(a2 + 960);
  *(_DWORD *)(a4 + 12) = *(_DWORD *)(a2 + 964);
  memcpy((void *)(a4 + 368), (const void *)(a2 + 24776), 0x174uLL);
  long long v12 = *(_OWORD *)(a2 + 24600);
  long long v13 = *(_OWORD *)(a2 + 24616);
  long long v14 = *(_OWORD *)(a2 + 24632);
  *(void *)(a4 + 792) = *(void *)(a2 + 24648);
  *(_OWORD *)(a4 + 760) = v13;
  *(_OWORD *)(a4 + 776) = v14;
  *(_OWORD *)(a4 + 744) = v12;
  long long v15 = *(_OWORD *)(a2 + 24688);
  long long v16 = *(_OWORD *)(a2 + 24672);
  long long v17 = *(_OWORD *)(a2 + 24704);
  *(_OWORD *)(a4 + 800) = *(_OWORD *)(a2 + 24656);
  *(_OWORD *)(a4 + 816) = v16;
  *(_OWORD *)(a4 + 832) = v15;
  *(_OWORD *)(a4 + 848) = v17;
  uint64_t v18 = *(void *)(a2 + 24768);
  long long v19 = *(_OWORD *)(a2 + 24752);
  long long v20 = *(_OWORD *)(a2 + 24736);
  *(_OWORD *)(a4 + 864) = *(_OWORD *)(a2 + 24720);
  *(_OWORD *)(a4 + 880) = v20;
  *(_OWORD *)(a4 + 896) = v19;
  *(void *)(a4 + 912) = v18;
  *(double *)(a4 + 880) = fmin(fmax(*(double *)(a4 + 880), 1.0), 180.0);
  *(double *)(a4 + 856) = fmax(*(double *)(a4 + 856), 0.01);
  bzero((void *)(a4 + 968), 0x270uLL);
  uint64_t v21 = 0;
  uint64_t v22 = a3 + 7552;
  uint64_t v23 = 1036;
  uint64_t v24 = 1160;
  do
  {
    uint64_t v25 = a1 + 4 * v21;
    if (*(_DWORD *)(v25 + 412) != 3)
    {
      double v26 = (_DWORD *)(a4 + v24);
      *(v26 - 48) = *(_DWORD *)(v25 + 76);
      _DWORD *v26 = *(_DWORD *)(v25 + 412);
      uint64_t v27 = a4 + v21;
      *(unsigned char *)(v27 + 1352) = *(unsigned char *)(a1 + v21 + 604);
      *(unsigned char *)(v27 + 1544) = *(unsigned char *)(a2 + v21 + 1176);
      if (*(_DWORD *)(v22 + 4 * v21) == 1)
      {
        char v28 = *(unsigned char *)(a2 + v21 + 2960);
        if (v28)
        {
          unsigned int v29 = *(_DWORD *)(a2 + 3056 + 4 * v21);
          if (v29 >= 0x1E)
          {
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
            char v28 = 0;
          }
          else
          {
            char v28 = (v29 & 0x3FFFFFFF) == 0;
          }
        }
        *(unsigned char *)(a4 + v21 + 1496) = v28;
      }
      int v30 = *(_DWORD *)(v25 + 412);
      if (v30 < 15)
      {
        if (v30 < 13) {
          __int16 v31 = *(_WORD *)(a1 + v23 - 192);
        }
        else {
          __int16 v31 = *(_WORD *)(a1 + v23 - 96);
        }
        *(_WORD *)(a4 + 2 * v21 + 1400) = v31;
      }
      else
      {
        *(_WORD *)(a4 + 2 * v21 + 1400) = *(_WORD *)(a1 + v23);
      }
    }
    ++v21;
    v23 += 2;
    v24 += 4;
  }
  while (v21 != 48);
  if (!*(_DWORD *)(v8 + 4))
  {
    *(unsigned char *)(v8 + 193) = 0;
    *(unsigned char *)(v8 + 199) = 0;
    *(unsigned char *)(v8 + 204) = 0;
    *(unsigned char *)(v8 + 209) = 0;
    *(unsigned char *)(a4 + 369) = 0;
    *(unsigned char *)(a4 + 375) = 0;
    *(unsigned char *)(a4 + 380) = 0;
    *(unsigned char *)(a4 + 385) = 0;
    *(_OWORD *)(a4 + 1496) = 0u;
    *(_OWORD *)(a4 + 1512) = 0u;
    *(_OWORD *)(a4 + 1528) = 0u;
  }
  memcpy((void *)(a4 + 1592), (const void *)(a2 + 7616), 0x180uLL);
  *(void *)(a4 + 1976) = *(void *)(a2 + 2824);
  *(void *)(a4 + 1984) = *(void *)(a2 + 2832);
  *(_WORD *)(a4 + 1992) = *v33;
  *(_OWORD *)(a4 + 2000) = *(_OWORD *)(a2 + 8400);
  *(_WORD *)(a4 + 2016) = v33[1];
  *(void *)(a4 + 2024) = *(void *)(a2 + 13976);
  double result = *(double *)(a2 + 13984);
  *(double *)(a4 + 2032) = result;
  *(_WORD *)(a4 + 2040) = v33[2];
  return result;
}

double SV_Data_Decode_Init()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v12 = *MEMORY[0x263EF8340];
  bzero(__src, 0x35A4uLL);
  uint64_t v1 = 5580;
  do
  {
    int v2 = &__src[v1];
    *(void *)int v2 = 0;
    *((_WORD *)v2 + 4) = 0;
    *((_DWORD *)v2 + 3) = 0;
    v2[16] = 0;
    *((_DWORD *)v2 + 5) = 0;
    v1 += 28;
    v2[24] = 0;
  }
  while (v2 + 28 != &__src[5972]);
  memset(&__src[5972], 0, 427);
  memset(&__src[6400], 0, 93);
  memset(&__src[6496], 0, 86);
  bzero(&__src[6584], 0x193DuLL);
  bzero(&__src[13046], 0x2ACuLL);
  bzero(&__src[13732], 0x10DCuLL);
  memcpy((void *)v0, __src, 0x4680uLL);
  memset_pattern16((void *)v0, &memset_pattern_0, 0xC0uLL);
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *(_OWORD *)(v0 + 192) = v3;
  *(_OWORD *)(v0 + 208) = v3;
  memset_pattern16((void *)(v0 + 224), &memset_pattern_1, 0x40uLL);
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  uint64_t v5 = -32;
  do
  {
    uint64_t v6 = v0 + v5;
    *(_OWORD *)(v6 + 18016) = 0uLL;
    *(_OWORD *)(v6 + 18048) = v4;
    v5 += 16;
  }
  while (v5);
  memset_pattern16((void *)(v0 + 3584), &memset_pattern_1, 0x3CuLL);
  *(_WORD *)(v0 + 3652) = -1;
  *(void *)(v0 + 3644) = -1;
  memset_pattern16((void *)(v0 + 3654), &memset_pattern_1, 0x14uLL);
  *(_DWORD *)(v0 + 13041) = -1;
  *(void *)&long long v7 = -1;
  *((void *)&v7 + 1) = -1;
  *(_OWORD *)(v0 + 13009) = v7;
  *(_OWORD *)(v0 + 13025) = v7;
  memset_pattern16((void *)(v0 + 13046), &memset_pattern_2, 0x48uLL);
  memset_pattern16((void *)(v0 + 13118), &unk_22BB429B0, 0x120uLL);
  memset_pattern16((void *)(v0 + 13406), &unk_22BB429B0, 0x48uLL);
  memset_pattern16((void *)(v0 + 13478), &unk_22BB429B0, 0x48uLL);
  for (uint64_t i = 0; i != 36; ++i)
    *(unsigned char *)(v0 + 17908 + i) = 0;
  *(_DWORD *)(v0 + 17980) = -1;
  *(void *)&long long v9 = -1;
  *((void *)&v9 + 1) = -1;
  *(_OWORD *)(v0 + 6456) = v9;
  *(_OWORD *)(v0 + 6472) = v9;
  *(void *)(v0 + 6485) = -1;
  memset_pattern16((void *)(v0 + 6508), &memset_pattern_3, 0x4AuLL);
  double result = 0.0;
  *(void *)(v0 + 6496) = 0;
  *(_DWORD *)(v0 + 6504) = 0;
  return result;
}

void MAPGen_inpMAP2mST(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *((_DWORD *)a3 + 2) = 10;
  TCU_ConvertOStimeToTTICKtime((const char *)a2, *(_DWORD *)a1, a3);
  memset(v18, 0, sizeof(v18));
  VecSet_3x1((const char *)3, (uint64_t)v18, *(double *)(a1 + 16) * 0.0174532925, *(double *)(a1 + 8) * 0.0174532925, *(double *)(a1 + 24));
  memset(v17, 0, sizeof(v17));
  CreateC_e_n((uint64_t)v18, (int *)v17);
  memset(v16, 0, sizeof(v16));
  __double2 v6 = __sincos_stret(*(double *)(a1 + 40) * 0.0174532925);
  double v7 = 0.0;
  VecSet_3x1((const char *)3, (uint64_t)v16, v6.__cosval, v6.__sinval, 0.0);
  Mult_Mat_scalar(*(double *)(a1 + 48), 3, (int *)v16, (const char *)3, (int *)v16);
  memset(v15, 0, sizeof(v15));
  Mult_MatT_Mat(9, (uint64_t)v17, 3, (uint64_t)v16, 3, (uint64_t)v15);
  memset(v14, 0, sizeof(v14));
  VecSet_3x1((const char *)3, (uint64_t)v14, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24));
  InsUtil_Geo2ECEF_Iterative((double *)v14, (uint64_t)(a3 + 16));
  Add_Mat(3, (int *)a3 + 32, 3, (int *)v15, (const char *)3, (int *)a3 + 40);
  Set_Mat_Const((const char *)4, 1u, (const char *)6, (int *)a3 + 4, 0.0);
  Set_Mat_Size((const char *)6, (int *)a3 + 18, 4, 1);
  *(_OWORD *)(a3 + 11) = xmmword_22BB429D0;
  a3[13] = 0.1;
  a3[10] = *(double *)(a1 + 56);
  long long v12 = 0u;
  long long v13 = 0u;
  InsUtil_ECEF2Geo_Iterative(a3 + 20, (uint64_t)&v12, 6378137.0);
  __int16 v8 = g_FPE_LogSeverity;
  if ((g_FPE_LogSeverity & 8) == 0) {
    goto LABEL_9;
  }
  uint64_t v9 = mach_continuous_time();
  double v10 = 0.0;
  if (g_TCU)
  {
    double v7 = *(double *)(g_TCU + 8);
    double v10 = *a3 - *(double *)(g_TCU + 64);
    double v11 = 604800.0;
    if (v10 >= 604800.0)
    {
      double v11 = -604800.0;
    }
    else if (v10 >= 0.0)
    {
      goto LABEL_8;
    }
    double v10 = v10 + v11;
  }
LABEL_8:
  LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: MAP = {tow:%0.3f,LLH_start:[%0.6f %0.6f %0.1f],LLH_end:[%0.6f %0.6f %0.1f],LW:[%0.1f %0.1f]}", "MAPGen_inpMAP2mST", 129, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), v7, v10, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)&v13, *((double *)&v12 + 1), *((double *)&v13 + 1), *(double *)(a1 + 48), *(double *)(a1 + 56));
  __int16 v8 = g_FPE_LogSeverity;
LABEL_9:
  if ((v8 & 0x200) != 0) {
    LC_LOG_NMEA_GENERIC("%s,MAP,%.3f,%.1f,%.1f,%.3f", "$PFPEX", *a3, *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a2 + 40) - *a3);
  }
}

uint64_t MAPGen_run(double *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  __int16 v8 = *(void **)(a3 + 87784);
  uint64_t v9 = *(_DWORD **)(a4 + 128048);
  uint64_t v33 = 0;
  memset(__dst, 0, sizeof(__dst));
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  double v10 = *(double *)(a5 + 40);
  uint64_t result = Cyc_Record_Count_Free(v9, 1u);
  if (!result) {
    return result;
  }
  while (1)
  {
    uint64_t result = Cyc_Record_IsEmpty(v8, a2);
    if (result) {
      break;
    }
    Cyc_Record_Read((uint64_t)v8, a2, __dst);
    MAPGen_inpMAP2mST((uint64_t)__dst, a5, (double *)&v18);
    double v12 = *(double *)&v18;
    double v13 = *a1;
    if (*(double *)&v18 < *a1)
    {
      if (*(double *)&v18 < v13 + -6.0)
      {
        if ((g_FPE_LogSeverity & 4) != 0)
        {
          uint64_t v14 = mach_continuous_time();
          if (g_TCU) {
            double v15 = *(double *)(g_TCU + 8);
          }
          else {
            double v15 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f MAP: ignoring measurement in the past! meas.time=%0.3f, prevTime=%0.3f (diff=%0.3f)", "MAPGen_run", 192, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), v15, *(double *)&v18, *a1, *a1 - *(double *)&v18);
        }
        goto LABEL_17;
      }
      if ((g_FPE_LogSeverity & 4) != 0)
      {
        uint64_t v16 = mach_continuous_time();
        if (g_TCU) {
          double v17 = *(double *)(g_TCU + 8);
        }
        else {
          double v17 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f MAP: using measurement %0.3f sec in the past. meas.time=%0.3f, prevTime=%0.3f", "MAPGen_run", 201, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), v17, *a1 - *(double *)&v18, *(double *)&v18, *a1);
        double v13 = *a1;
      }
      double v12 = v13 + 0.001;
      *(double *)&long long v18 = v13 + 0.001;
    }
    *a1 = v12;
    Cyc_Record_Write((uint64_t)v9, &v18);
LABEL_17:
    uint64_t result = Cyc_Record_Count_Free(v9, 1u);
    if (!result) {
      return result;
    }
  }
  DWORD2(v18) = 12;
  *(double *)&long long v18 = v10 + 0.001;
  *(void *)&long long v19 = 0x4000000000000000;
  if (v10 + 0.001 > *a1)
  {
    *a1 = v10 + 0.001;
    return (uint64_t)Cyc_Record_Write((uint64_t)v9, &v18);
  }
  return result;
}

uint64_t *lpp_session_detect(unsigned __int8 *a1)
{
  if (!**((void **)GetStaticLppPrivate() + 1)) {
    return 0;
  }
  for (uint64_t result = (uint64_t *)**((void **)GetStaticLppPrivate() + 1); result; uint64_t result = (uint64_t *)*result)
  {
    if (*((unsigned __int8 *)result + 16) == *a1 && *((_DWORD *)result + 5) == *((_DWORD *)a1 + 1)) {
      break;
    }
  }
  return result;
}

_LPP_SESSION *lpp_session_create(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v4 = (_LPP_SESSION *)operator new(0x58uLL, MEMORY[0x263F8C180]);
  if (v4)
  {
    uint64_t v5 = v4;
    _LPP_SESSION::_LPP_SESSION(v4);
  }
  else
  {
    if (*((void *)GetStaticLppPrivate() + 1)) {
      uint64_t v6 = *(void *)(*((void *)GetStaticLppPrivate() + 1) + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    lpp_session_delete(v6);
    double v7 = (_LPP_SESSION *)operator new(0x58uLL, MEMORY[0x263F8C180]);
    uint64_t v5 = v7;
    if (!v7)
    {
      int v13 = 2;
      int v14 = 12288;
      int v15 = 105;
      goto LABEL_18;
    }
    _LPP_SESSION::_LPP_SESSION(v7);
  }
  memset_s(v5, 0x58uLL, 0, 0x58uLL);
  *((void *)v5 + 2) = *a1;
  *((unsigned char *)v5 + 24) = 0;
  *(_OWORD *)((char *)v5 + 68) = xmmword_22BB429E0;
  *((unsigned char *)v5 + 84) = 0;
  __int16 v8 = operator new(0x10uLL, MEMORY[0x263F8C180]);
  if (!v8)
  {
    *((void *)v5 + 5) = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "OSA", 69, "lpp_session_create", "lpp_session_create");
      LbsOsaTrace_WriteLog(0xEu, __str, v18, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("lpp_session_create", "lpp_session.cpp", 123, "false && \"Memory allocation failure\"");
  }
  *__int16 v8 = 0;
  v8[1] = 0;
  *((void *)v5 + 5) = v8;
  if (*((unsigned char *)v5 + 16) != 1)
  {
    int v13 = 1;
    int v14 = 0x4000;
    int v15 = 138;
LABEL_18:
    ms_report_exception(v13, v14, v15, "lpp_session_create");
    return v5;
  }
  *((unsigned char *)v5 + 64) = a2;
  *((void *)v5 + 6) = lpp_session_up_process_downlink_message;
  *((void *)v5 + 7) = lpp_session_up_process_uplink_pdu;
  uint64_t v9 = (_LPP_SESSION **)*((void *)GetStaticLppPrivate() + 1);
  if (v9)
  {
    double v10 = (_LPP_SESSION **)*v9;
    *uint64_t v9 = v5;
    *(void *)uint64_t v5 = v10;
    *((void *)v5 + 1) = 0;
    if (v10) {
      uint64_t v9 = v10;
    }
    v9[1] = v5;
  }
  lpp_state_control(0);
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionCreate,type,%u,sessionId,%u,Initiater,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "PSP", 68, "lpp_session_create", *((unsigned __int8 *)v5 + 16), *((_DWORD *)v5 + 5), 0);
    LbsOsaTrace_WriteLog(0x13u, __str, v12, 5, 1);
  }
  return v5;
}

void sub_22B9BE6F4(_Unwind_Exception *a1)
{
  MEMORY[0x230F4E5C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void lpp_session_delete(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionDelete,type,%u,sessionId,%u,Initiater,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "lpp_session_delete", *(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 20), 0);
      LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
    }
    long long v4 = **(void ***)(a1 + 40);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        lpp_transaction_abort((uint64_t)v4);
        long long v4 = v5;
      }
      while (v5);
    }
    lpp_session_destroy((_LPP_SESSION *)a1);
    lpp_state_control(1u);
  }
  else
  {
    ms_report_exception(2, 16426, 194, "lpp_session_delete");
  }
}

void lpp_session_up_process_downlink_message(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    if (*(void *)(a2 + 8) && *(_DWORD *)a2)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      __s[1] = 0;
      double v10 = 0;
      __s[0] = 0;
      int v11 = 0;
      memset_s(__s, 0x30uLL, 0, 0x30uLL);
      double v10 = 0;
      uint64_t v12 = *(void *)(a2 + 8);
      int v11 = *(_DWORD *)a2;
      int v13 = 0;
      double v10 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
      int v4 = decode_asn1_message(0, 0, v12, v11, v10, 0);
      uint64_t v5 = v10;
      *((unsigned char *)v10 + 16) = 0;
      v5[32] = 0;
      if (!v5[1392]) {
        v5[8] = 0;
      }
      if (v4 <= 0)
      {
        if (v5[8] != 1) {
          goto LABEL_19;
        }
        int v8 = lpp_transaction_process_downlink_message(a1, (uint64_t)__s);
        uint64_t v5 = v10;
        if (v8 == 5) {
          goto LABEL_19;
        }
        int v6 = v8;
        if (!v10)
        {
          ms_report_exception(2, 16426, 436, "lpp_session_error_detected");
LABEL_13:
          uint64_t v5 = v10;
LABEL_19:
          GenericFreeSort(v5, (uint64_t)&ySDL_T_LASN_LPP_Message);
          if (v10) {
            free(v10);
          }
          return;
        }
      }
      else
      {
        int v6 = 2;
      }
      if (v5[1392] != 1 || (*((_DWORD *)v5 + 12) & 0xFFFFFFFE) != 6)
      {
        uint64_t v17 = 0;
        int v18 = 0;
        v14[1] = 0;
        int v15 = 0;
        v14[0] = 0;
        int v16 = 0;
        memset_s(v14, 0x30uLL, 0, 0x30uLL);
        uint64_t v7 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
        int v15 = v7;
        v7[8] = v5[8];
        if (v5[8] == 1)
        {
          *(void *)uint64_t v7 = *(void *)v5;
          uint64_t v7 = v15;
        }
        v7[32] = 0;
        v7[9] = 0;
        v7[1392] = 1;
        *((_DWORD *)v7 + 10) = 0;
        *((_DWORD *)v7 + 12) = 7;
        *((_DWORD *)v7 + 14) = 0;
        v7[68] = 1;
        *((_DWORD *)v7 + 16) = v6;
        (*(void (**)(uint64_t, void *))(a1 + 56))(a1, v14);
      }
      goto LABEL_13;
    }
  }
  else
  {
    ms_report_exception(2, 16385, 295, "lpp_session_up_process_downlink_message");
  }
}

void lpp_session_up_process_uplink_pdu(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    int v5 = 16426;
    int v6 = 368;
LABEL_9:
    ms_report_exception(2, v5, v6, "lpp_session_up_process_uplink_pdu");
    return;
  }
  if (!a2)
  {
    int v5 = 16442;
    int v6 = 374;
    goto LABEL_9;
  }
  char v3 = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  unsigned int v10 = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v9 = (_DWORD *)v4;
  *(unsigned char *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 32) = 0;
  if (*(_DWORD *)(v4 + 48) == 5) {
    char v3 = *(unsigned char *)(v4 + 216) == 1 && *(unsigned char *)(v4 + 168) == 1 && *(_DWORD *)(v4 + 164) == 1;
  }
  if (!encode_asn1_message(0, 0, &v11, 0, &v10, (int *)v4)) {
    lpp_send_up_uplink_message(a1 + 16, 0, &v10, v3);
  }
  uint64_t v7 = **(void **)(a1 + 40);
  int v8 = v9;
  if (v7)
  {
    while (*(_DWORD *)(v7 + 16) != *v9 || *(_DWORD *)(v7 + 20) != v9[1])
    {
      uint64_t v7 = *(void *)v7;
      if (!v7) {
        goto LABEL_22;
      }
    }
    if (*(unsigned char *)(v7 + 25) == 2)
    {
      lpp_transaction_delete(v7);
      int v8 = v9;
    }
  }
LABEL_22:
  GenericFreeSort(v8, (uint64_t)&ySDL_T_LASN_LPP_Message);
  if (v9) {
    free(v9);
  }
}

void lpp_session_destroy(_LPP_SESSION *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 5);
  char v3 = (void *)*v2;
  if (*v2)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      if (v2)
      {
        uint64_t v5 = v3[1];
        if (v5) {
          int v6 = (void *)v3[1];
        }
        else {
          int v6 = v2;
        }
        *int v6 = v4;
        if (v4) {
          uint64_t v7 = v4;
        }
        else {
          uint64_t v7 = v2;
        }
        v7[1] = v5;
        *char v3 = 0;
        v3[1] = 0;
      }
      MEMORY[0x230F4E5D0](v3, 0x10A0C405697C842);
      uint64_t v2 = (void *)*((void *)a1 + 5);
      char v3 = v4;
    }
    while (v4);
  }
  lpm_utils_linkedlist_destroy(v2);
  StaticLppPrivate = GetStaticLppPrivate();
  uint64_t v9 = StaticLppPrivate[1];
  if (v9)
  {
    uint64_t v11 = *(void *)a1;
    uint64_t v10 = *((void *)a1 + 1);
    if (v10) {
      int v12 = (void *)*((void *)a1 + 1);
    }
    else {
      int v12 = (void *)StaticLppPrivate[1];
    }
    *int v12 = v11;
    if (v11) {
      uint64_t v9 = v11;
    }
    *(void *)(v9 + 8) = v10;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
  }
  memset_s(a1, 0x58uLL, 0, 0x58uLL);

  JUMPOUT(0x230F4E5D0);
}

uint64_t lpp_session_exists(int a1)
{
  if (!**((void **)GetStaticLppPrivate() + 1)) {
    return 0;
  }
  for (uint64_t result = **((void **)GetStaticLppPrivate() + 1); result; uint64_t result = *(void *)result)
  {
    if (*(_DWORD *)(result + 20) == a1) {
      break;
    }
  }
  return result;
}

void _LPP_SESSION::_LPP_SESSION(_LPP_SESSION *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = -1;
  *((_DWORD *)this + 5) = -1;
  *((unsigned char *)this + 24) = -1;
  *((unsigned char *)this + 84) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  memset_s((char *)this + 64, 1uLL, 0, 1uLL);
  memset_s((char *)this + 68, 8uLL, 0, 8uLL);
  memset_s((char *)this + 76, 8uLL, 0, 8uLL);
}

uint64_t GN_GPS_Write_NMEA(uint64_t a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    return LbsOsaTrace_PrintAsciiBuf(1u, 4u, 1, (uint64_t)a2, a1);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GN_GPS_Write_NMEA", 515, 0);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
    }
    return 0;
  }
}

uint64_t GN_GPS_Write_GNB_Debug(uint64_t a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    return LbsOsaTrace_PrintAsciiBuf(0, 4u, 1, (uint64_t)a2, a1);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GN_GPS_Write_GNB_Debug", 515, 0);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
    }
    return 0;
  }
}

uint64_t GN_GPS_Write_Nav_Debug(uint64_t a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    return LbsOsaTrace_PrintAsciiBuf(2u, 4u, 1, (uint64_t)a2, a1);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GN_GPS_Write_Nav_Debug", 515, 0);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
    }
    return 0;
  }
}

uint64_t GN_GPS_Write_Event_Log(uint64_t a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    return LbsOsaTrace_PrintAsciiBuf(3u, 4u, 0, (uint64_t)a2, a1);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GN_GPS_Write_Event_Log", 515, 0);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
    }
    return 0;
  }
}

uint64_t GN_GPS_Write_LCD_Debug(uint64_t a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    return LbsOsaTrace_PrintAsciiBuf(7u, 4u, 0, (uint64_t)a2, a1);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GN_GPS_Write_LCD_Debug", 515, 0);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
    }
    return 0;
  }
}

uint64_t GN_GPS_Write_GNB_Ctrl(unsigned int a1, char *a2)
{
  v19[255] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned __int16 v10 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return v10;
    }
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Len,%u\n", v16);
LABEL_15:
    LbsOsaTrace_WriteLog(8u, __str, v8, 2, 1);
    return 0;
  }
  if (!a2)
  {
    unsigned __int16 v10 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return v10;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_15;
  }
  int v4 = g_GncPStateInfo;
  BOOL v5 = g_GncPStateInfo == 6 || g_GncPStateInfo == 9;
  if (v5)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GncState,%hhu,IgnoredBytes,%hu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GN_GPS_Write_GNB_Ctrl", v4, a1);
      LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
    }
    return (unsigned __int16)a1;
  }
  else
  {
    unsigned __int16 v10 = 0;
    while (1)
    {
      memset_s(__str, 0x7FCuLL, 0, 0x7FCuLL);
      uint64_t v11 = &a2[v10];
      unsigned __int16 v12 = a1 - v10;
      if ((unsigned __int16)(a1 - v10) >= 0x7F5u)
      {
        unsigned __int16 v13 = 2036;
        while (v11[v13] != 10)
        {
          BOOL v5 = v13-- == 0;
          if (v5) {
            goto LABEL_25;
          }
        }
        if ((v13 & 0x8000) == 0)
        {
          unsigned __int16 v12 = v13 + 1;
          goto LABEL_26;
        }
LABEL_25:
        unsigned __int16 v12 = 2037;
      }
LABEL_26:
      *(_DWORD *)uint64_t __str = v12;
      memcpy_s("GN_GPS_Write_GNB_Ctrl", 337, v19, 0x7F5u, v11, v12);
      if (!GncP03_03EncSendGMH(0x4Du, 0x6Du, 0x4Du, (uint64_t)__str)) {
        break;
      }
      v10 += *(_WORD *)__str;
      if (a1 <= v10) {
        return v10;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(v17, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(v17, 0x40FuLL, "%10u %s%c %s: #%04hx TotalLen,%u,Written,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 87, "GN_GPS_Write_GNB_Ctrl", 774, a1, v10);
      LbsOsaTrace_WriteLog(8u, v17, v15, 2, 1);
    }
  }
  return v10;
}

uint64_t GN_GPS_Hard_Reset_GNB(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (g_GncPStateInfo == 9)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FWReset not done\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "GN_GPS_Hard_Reset_GNB");
      LbsOsaTrace_WriteLog(8u, __str, v1, 4, 1);
    }
    return 0;
  }
  else
  {
    return GncP08_03HandleHardReset();
  }
}

uint64_t asn1PE_Version(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 255, *a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_7:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 255, a2[1]);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 255, a2[2]);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  return v5;
}

uint64_t asn1PD_Version(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 0xFFu, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_7:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 0xFFu, a2 + 1);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 0xFFu, a2 + 2);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  return v5;
}

void ASN1T_UlpMessage::~ASN1T_UlpMessage(ASN1T_UlpMessage *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  switch(*(_WORD *)this)
  {
    case 1:
      uint64_t v2 = (ASN1T_SUPLINIT *)*((void *)this + 1);
      if (!v2) {
        goto LABEL_25;
      }
      ASN1T_SUPLINIT::~ASN1T_SUPLINIT(v2);
      unsigned int v4 = -1055686863;
      goto LABEL_17;
    case 2:
    case 3:
      goto LABEL_5;
    case 4:
      int v7 = (ASN1T_SUPLPOSINIT *)*((void *)this + 1);
      if (!v7) {
        goto LABEL_25;
      }
      ASN1T_SUPLPOSINIT::~ASN1T_SUPLPOSINIT(v7);
      unsigned int v4 = -1914762622;
      goto LABEL_17;
    case 5:
      unsigned __int16 v8 = (void *)*((void *)this + 1);
      if (!v8) {
        goto LABEL_25;
      }
      ASN1T_Velocity::U::~U((ASN1T_Velocity::U *)(v8 + 19));
      *(void *)uint64_t __str = v8 + 15;
      std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      *(void *)uint64_t __str = v8 + 12;
      std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      uint64_t v9 = (void *)v8[8];
      if (v9)
      {
        v8[9] = v9;
        operator delete(v9);
      }
      unsigned __int16 v10 = (void *)v8[5];
      if (v10)
      {
        v8[6] = v10;
        operator delete(v10);
      }
      uint64_t v11 = (void *)v8[2];
      if (v11)
      {
        v8[3] = v11;
        operator delete(v11);
      }
      uint64_t v3 = v8;
      unsigned int v4 = -1028262247;
LABEL_17:
      uint64_t v12 = v4 | 0x1030C4000000000;
      goto LABEL_24;
    case 6:
      unsigned __int16 v13 = (void *)*((void *)this + 1);
      if (!v13) {
        goto LABEL_25;
      }
      uint64_t v14 = (void *)v13[55];
      if (v14)
      {
        v13[56] = v14;
        operator delete(v14);
      }
      ASN1T_Velocity::U::~U((ASN1T_Velocity::U *)(v13 + 9));
      unsigned __int16 v15 = (void *)v13[2];
      if (v15)
      {
        v13[3] = v15;
        operator delete(v15);
      }
      uint64_t v3 = v13;
      uint64_t v12 = 0x1010C402AA3C6D1;
LABEL_24:
      MEMORY[0x230F4E5D0](v3, v12);
LABEL_25:
      *((void *)this + 1) = 0;
      break;
    default:
      if (*(unsigned __int16 *)this != 0xFFFF)
      {
LABEL_5:
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v5 = mach_continuous_time();
          unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "~ASN1T_UlpMessage", 515);
          LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
        }
      }
      break;
  }
}

void sub_22B9BFDE8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t asn1PE_UlpMessage(uint64_t a1, unsigned __int8 **a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 7, *(unsigned __int16 *)a2 - 1);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
    int v8 = *(unsigned __int16 *)a2;
    switch(v8)
    {
      case 6:
        uint64_t v9 = asn1PE_SUPLEND(a1, a2[1]);
        break;
      case 5:
        uint64_t v9 = asn1PE_SUPLPOS(a1, a2[1]);
        break;
      case 4:
        uint64_t v9 = asn1PE_SUPLPOSINIT(a1, a2[1]);
        break;
      default:
        uint64_t v4 = 1;
        SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
LABEL_14:
        int v5 = *(_DWORD *)(a1 + 8);
        int v6 = *(_DWORD *)(a1 + 12);
        LODWORD(v7) = v4;
        goto LABEL_15;
    }
    uint64_t v4 = v9;
    if (!v9) {
      return v4;
    }
    goto LABEL_14;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 12);
  LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return v4;
}

uint64_t asn1PD_UlpMessage(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    return v5;
  }
  if (!BitFromBuffer)
  {
    int v35 = 0;
    uint64_t v6 = Asn1Coder::DecodeInteger(a1, 0, 7u, &v35);
    uint64_t v5 = v6;
    if (v6)
    {
      int v7 = *(_DWORD *)(a1 + 8);
      int v8 = *(_DWORD *)(a1 + 12);
      goto LABEL_7;
    }
    __int16 v10 = v35;
    unsigned __int16 v11 = v35 + 1;
    if (v35 + 1 != *a2)
    {
      switch(*a2)
      {
        case 1u:
          unsigned __int16 v13 = a2 + 4;
          uint64_t v12 = (ASN1T_SUPLINIT *)*((void *)a2 + 1);
          if (!v12) {
            goto LABEL_31;
          }
          ASN1T_SUPLINIT::~ASN1T_SUPLINIT(v12);
          unsigned int v15 = -1055686863;
          goto LABEL_23;
        case 4u:
          unsigned __int16 v13 = a2 + 4;
          unint64_t v16 = (ASN1T_SUPLPOSINIT *)*((void *)a2 + 1);
          if (!v16) {
            goto LABEL_31;
          }
          ASN1T_SUPLPOSINIT::~ASN1T_SUPLPOSINIT(v16);
          unsigned int v15 = -1914762622;
          goto LABEL_23;
        case 5u:
          unsigned __int16 v13 = a2 + 4;
          uint64_t v17 = (void *)*((void *)a2 + 1);
          if (!v17) {
            goto LABEL_31;
          }
          ASN1T_Velocity::U::~U((ASN1T_Velocity::U *)(v17 + 19));
          *(void *)uint64_t __str = v17 + 15;
          std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          *(void *)uint64_t __str = v17 + 12;
          std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          int v18 = (void *)v17[8];
          if (v18)
          {
            v17[9] = v18;
            operator delete(v18);
          }
          uint64_t v19 = (void *)v17[5];
          if (v19)
          {
            v17[6] = v19;
            operator delete(v19);
          }
          uint64_t v20 = (void *)v17[2];
          if (v20)
          {
            unsigned char v17[3] = v20;
            operator delete(v20);
          }
          uint64_t v14 = v17;
          unsigned int v15 = -1028262247;
LABEL_23:
          uint64_t v21 = v15 | 0x1030C4000000000;
          break;
        case 6u:
          unsigned __int16 v13 = a2 + 4;
          long long v22 = (void *)*((void *)a2 + 1);
          if (!v22) {
            goto LABEL_31;
          }
          long long v23 = (void *)v22[55];
          if (v23)
          {
            v22[56] = v23;
            operator delete(v23);
          }
          ASN1T_Velocity::U::~U((ASN1T_Velocity::U *)(v22 + 9));
          long long v24 = (void *)v22[2];
          if (v24)
          {
            v22[3] = v24;
            operator delete(v24);
          }
          uint64_t v14 = v22;
          uint64_t v21 = 0x1010C402AA3C6D1;
          break;
        default:
          goto LABEL_32;
      }
      MEMORY[0x230F4E5D0](v14, v21);
LABEL_31:
      *unsigned __int16 v13 = 0;
    }
LABEL_32:
    *a2 = v11;
    if (v10 != 5)
    {
      if (v10 != 4)
      {
        if (v10)
        {
          *(unsigned char *)(a1 + 16) = 4;
          SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
          uint64_t v5 = 4;
LABEL_50:
          SuplAsn1Logger::TraceError(v5, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
          return v5;
        }
        uint64_t v25 = *((void *)a2 + 1);
        if (v25) {
          goto LABEL_38;
        }
        long long v26 = (ASN1T_SUPLINIT *)operator new(0x238uLL, MEMORY[0x263F8C180]);
        if (v26)
        {
          uint64_t v25 = (uint64_t)v26;
          ASN1T_SUPLINIT::ASN1T_SUPLINIT(v26);
          *((void *)a2 + 1) = v27;
LABEL_38:
          uint64_t v28 = asn1PD_SUPLINIT(a1, v25);
          goto LABEL_47;
        }
        *((void *)a2 + 1) = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
          goto LABEL_56;
        }
LABEL_57:
        uint64_t v5 = 2;
        *(unsigned char *)(a1 + 16) = 2;
        return v5;
      }
      uint64_t v31 = (unsigned char *)*((void *)a2 + 1);
      if (v31) {
        goto LABEL_46;
      }
      uint64_t v32 = (char *)operator new(0x200uLL, MEMORY[0x263F8C180]);
      uint64_t v31 = v32;
      if (v32)
      {
        *(_OWORD *)(v32 + 136) = 0u;
        *(_OWORD *)(v32 + 120) = 0u;
        *(_OWORD *)(v32 + 104) = 0u;
        *(_OWORD *)(v32 + 88) = 0u;
        *(_OWORD *)(v32 + 72) = 0u;
        *(_OWORD *)(v32 + 56) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 8) = 0u;
        v32[144] = -1;
        *(_OWORD *)(v32 + 168) = 0u;
        *(_OWORD *)(v32 + 184) = 0u;
        *(_OWORD *)(v32 + 200) = 0u;
        *(_OWORD *)(v32 + 216) = 0u;
        *(_OWORD *)(v32 + 232) = 0u;
        *(_OWORD *)(v32 + 248) = 0u;
        *(_OWORD *)(v32 + 152) = 0u;
        *((void *)v32 + 63) = 0;
        *(_OWORD *)(v32 + 408) = 0u;
        *(_OWORD *)(v32 + 424) = 0u;
        *(_OWORD *)(v32 + 440) = 0u;
        *(_OWORD *)(v32 + 456) = 0u;
        *(_OWORD *)(v32 + 472) = 0u;
        *(_OWORD *)(v32 + 488) = 0u;
        *(_OWORD *)(v32 + 264) = 0u;
        *(_OWORD *)(v32 + 280) = 0u;
        *(_OWORD *)(v32 + 296) = 0u;
        *(_OWORD *)(v32 + 312) = 0u;
        *(_OWORD *)(v32 + 328) = 0u;
        *(_OWORD *)(v32 + 344) = 0u;
        *(_OWORD *)(v32 + 360) = 0u;
        *(_OWORD *)(v32 + 376) = 0u;
        *(_OWORD *)(v32 + 392) = 0u;
        *uint64_t v32 = 0;
        *((void *)a2 + 1) = v32;
LABEL_46:
        uint64_t v28 = asn1PD_SUPLPOS(a1, v31);
LABEL_47:
        uint64_t v5 = v28;
        if (!v28) {
          return v5;
        }
        goto LABEL_50;
      }
      *((void *)a2 + 1) = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
        goto LABEL_57;
      }
LABEL_56:
      bzero(__str, 0x410uLL);
      uint64_t v33 = mach_continuous_time();
      unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "SPL", 69, "asn1PD_UlpMessage", 1537);
      LbsOsaTrace_WriteLog(0x12u, __str, v34, 0, 1);
      goto LABEL_57;
    }
    uint64_t v29 = *((void *)a2 + 1);
    if (!v29)
    {
      long long v30 = (char *)operator new(0x1D0uLL, MEMORY[0x263F8C180]);
      uint64_t v29 = (uint64_t)v30;
      if (!v30)
      {
        *((void *)a2 + 1) = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      *(_WORD *)long long v30 = 0;
      v30[2] = 0;
      *((void *)v30 + 3) = 0;
      *((void *)v30 + 4) = 0;
      *((void *)v30 + 2) = 0;
      *(void *)(v30 + 44) = 0;
      *((_DWORD *)v30 + 13) = 0;
      v30[56] = -1;
      *((_WORD *)v30 + 29) = 0;
      v30[60] = 0;
      *((_DWORD *)v30 + 10) = -16777216;
      *((void *)v30 + 8) = 255;
      v30[8] = 0;
      *((void *)v30 + 56) = 0;
      *((void *)v30 + 57) = 0;
      *((void *)v30 + 55) = 0;
      *(_OWORD *)(v30 + 88) = 0u;
      *(_OWORD *)(v30 + 104) = 0u;
      *(_OWORD *)(v30 + 120) = 0u;
      *(_OWORD *)(v30 + 136) = 0u;
      *(_OWORD *)(v30 + 152) = 0u;
      *(_OWORD *)(v30 + 168) = 0u;
      *(_OWORD *)(v30 + 184) = 0u;
      *(_OWORD *)(v30 + 200) = 0u;
      *(_OWORD *)(v30 + 216) = 0u;
      *(_OWORD *)(v30 + 232) = 0u;
      *(_OWORD *)(v30 + 248) = 0u;
      *(_OWORD *)(v30 + 264) = 0u;
      *(_OWORD *)(v30 + 280) = 0u;
      *(_OWORD *)(v30 + 296) = 0u;
      *(_OWORD *)(v30 + 312) = 0u;
      *(_OWORD *)(v30 + 72) = 0u;
      *(_OWORD *)(v30 + 328) = 0u;
      *(_OWORD *)(v30 + 344) = 0u;
      *(_OWORD *)(v30 + 360) = 0u;
      *(_OWORD *)(v30 + 376) = 0u;
      *(_OWORD *)(v30 + 392) = 0u;
      *(_OWORD *)(v30 + 408) = 0u;
      *(_OWORD *)(v30 + 417) = 0u;
      *((void *)a2 + 1) = v30;
    }
    uint64_t v28 = asn1PD_SUPLEND(a1, v29);
    goto LABEL_47;
  }
  Asn1Coder::SkipChoiceExtension(a1);
  uint64_t v5 = v6;
  if (v6)
  {
    int v7 = *(_DWORD *)(a1 + 8);
    int v8 = *(_DWORD *)(a1 + 12);
LABEL_7:
    SuplAsn1Logger::TraceError(v6, v7, v8);
  }
  return v5;
}

uint64_t SuplMessage::Encode(SuplMessage *this)
{
  uint64_t v2 = *(unsigned __int16 **)this;
  *((unsigned char *)v2 + 16) = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = *(void *)(*(void *)this + 8);
  uint64_t v4 = SuplMessage::asn1PE_UlpPdu(this);
  if (!v4)
  {
    uint64_t v5 = *(void *)this;
    int v7 = *(_DWORD *)(*(void *)this + 8);
    int v6 = *(_DWORD *)(*(void *)this + 12);
    if (v6) {
      unsigned __int16 v8 = v7 + 1;
    }
    else {
      unsigned __int16 v8 = *(_DWORD *)(*(void *)this + 8);
    }
    **((_WORD **)this + 1) = v8;
    *(void *)(v5 + 8) = v3;
    uint64_t v4 = Asn1Coder::EncodeInteger(v5, 0, 0xFFFF, v8);
    uint64_t v9 = *(void *)this;
    if (!v4)
    {
      *(_DWORD *)(v9 + 8) = v7;
      *(_DWORD *)(v9 + 12) = v6;
    }
    __int16 v10 = *(unint64_t **)v9;
    unint64_t v11 = **((unsigned __int16 **)this + 1);
    unint64_t v12 = v10[1] - *v10;
    if (v11 <= v12)
    {
      if (v11 < v12) {
        v10[1] = *v10 + v11;
      }
    }
    else
    {
      std::vector<unsigned char>::__append(v10, v11 - v12);
    }
  }
  return v4;
}

uint64_t SuplMessage::asn1PE_UlpPdu(SuplMessage *this)
{
  uint64_t v2 = *(void *)this;
  unsigned int v3 = 0x8000;
  do
  {
    Asn1Coder::AddBitToBuffer((uint64_t **)v2, 0);
    BOOL v4 = v3 > 1;
    v3 >>= 1;
  }
  while (v4);
  uint64_t v5 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v6 = *(void *)this;
  if (v5)
  {
    int v7 = *(_DWORD *)(v6 + 8);
    int v8 = *(_DWORD *)(v6 + 12);
    LODWORD(v6) = v5;
LABEL_11:
    SuplAsn1Logger::TraceError(v6, v7, v8);
    return v5;
  }
  uint64_t v5 = asn1PE_Version(v6, (unsigned __int8 *)(*((void *)this + 1) + 2));
  uint64_t v6 = *(void *)this;
  if (v5)
  {
    int v7 = *(_DWORD *)(v6 + 8);
    int v8 = *(_DWORD *)(v6 + 12);
    LODWORD(v6) = v5;
    goto LABEL_11;
  }
  uint64_t v5 = asn1PE_SessionID(v6, (unsigned __int8 *)(*((void *)this + 1) + 24));
  uint64_t v6 = *(void *)this;
  if (v5)
  {
    int v7 = *(_DWORD *)(v6 + 8);
    int v8 = *(_DWORD *)(v6 + 12);
    LODWORD(v6) = v5;
    goto LABEL_11;
  }
  uint64_t v6 = asn1PE_UlpMessage(v6, (unsigned __int8 **)(*((void *)this + 1) + 8));
  uint64_t v5 = v6;
  if (v6)
  {
    int v7 = *(_DWORD *)(*(void *)this + 8);
    int v8 = *(_DWORD *)(*(void *)this + 12);
    goto LABEL_11;
  }
  return v5;
}

uint64_t SuplMessage::Decode(SuplMessage *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)this;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 8) = 0;
  uint64_t v2 = SuplMessage::asn1PD_UlpPdu(this);
  if (v2 && LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "Decode", 770);
    LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
  }
  return v2;
}

uint64_t SuplMessage::asn1PD_UlpPdu(SuplMessage *this)
{
  uint64_t v2 = Asn1Coder::DecodeInteger(*(void *)this, 0, 0xFFFFu, *((_WORD **)this + 1));
  uint64_t v3 = *(void *)this;
  if (v2)
  {
    int v4 = *(_DWORD *)(v3 + 8);
    int v5 = *(_DWORD *)(v3 + 12);
    LODWORD(v3) = v2;
LABEL_15:
    SuplAsn1Logger::TraceError(v3, v4, v5);
    return v2;
  }
  uint64_t v2 = asn1PD_Version(v3, (unsigned char *)(*((void *)this + 1) + 2));
  uint64_t v3 = *(void *)this;
  if (v2)
  {
    int v4 = *(_DWORD *)(v3 + 8);
    int v5 = *(_DWORD *)(v3 + 12);
    LODWORD(v3) = v2;
    goto LABEL_15;
  }
  uint64_t v2 = asn1PD_SessionID(v3, *((void *)this + 1) + 24);
  uint64_t v3 = *(void *)this;
  if (v2)
  {
    int v4 = *(_DWORD *)(v3 + 8);
    int v5 = *(_DWORD *)(v3 + 12);
    LODWORD(v3) = v2;
    goto LABEL_15;
  }
  uint64_t v3 = asn1PD_UlpMessage(v3, (unsigned __int16 *)(*((void *)this + 1) + 8));
  if (v3)
  {
    uint64_t v2 = v3;
    int v4 = *(_DWORD *)(*(void *)this + 8);
    int v5 = *(_DWORD *)(*(void *)this + 12);
    goto LABEL_15;
  }
  int v4 = *(_DWORD *)(*(void *)this + 8);
  int v5 = *(_DWORD *)(*(void *)this + 12);
  if (v5) {
    int v6 = v4 + 1;
  }
  else {
    int v6 = *(_DWORD *)(*(void *)this + 8);
  }
  if (v6 != **((unsigned __int16 **)this + 1))
  {
    uint64_t v2 = 6;
    LODWORD(v3) = 6;
    goto LABEL_15;
  }
  return 0;
}

void ASN1T_SUPLINIT::~ASN1T_SUPLINIT(ASN1T_SUPLINIT *this)
{
  uint64_t v2 = (void *)*((void *)this + 65);
  if (v2)
  {
    *((void *)this + 66) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 61);
  if (v3)
  {
    *((void *)this + 62) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 53);
  if (v4)
  {
    *((void *)this + 54) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 50);
  if (v5)
  {
    *((void *)this + 51) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 47);
  if (v6)
  {
    *((void *)this + 48) = v6;
    operator delete(v6);
  }
  if (*((void *)this + 35))
  {
    std::vector<ASN1T_SupportedWLANApData>::__clear[abi:ne180100]((uint64_t *)this + 35);
    operator delete(*((void **)this + 35));
  }
  uint64_t v7 = (void *)*((void *)this + 27);
  if (v7)
  {
    *((void *)this + 28) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 24);
  if (v8)
  {
    *((void *)this + 25) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 18);
  if (v9)
  {
    *((void *)this + 19) = v9;
    operator delete(v9);
  }
  __int16 v10 = (void *)*((void *)this + 15);
  if (v10)
  {
    *((void *)this + 16) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 12);
  if (v11)
  {
    *((void *)this + 13) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 6);
  if (v12)
  {
    *((void *)this + 7) = v12;
    operator delete(v12);
  }
  unsigned __int16 v13 = (void *)*((void *)this + 2);
  if (v13)
  {
    *((void *)this + 3) = v13;
    operator delete(v13);
  }
}

void std::vector<ASN1T_SupportedWLANApData>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    int v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

const char *CCH_initStates(int *a1)
{
  Set_Mat_Const((const char *)0xF, 0x24u, (const char *)0x400, a1, NAN);
  a1[2050] = 0;
  Set_Mat_Const((const char *)1, 0x17u, (const char *)0x20, a1 + 2052, NAN);
  Set_Vec_Values_By_Idx(0.0, 32, a1 + 2052, __const__Z16CCH_resetFBufferP12CCH_StateObj_ind);
  a1[2118] = 0;
  Set_Mat_Const((const char *)1, 0x24u, (const char *)0x33, a1 + 2120, 0.0);
  Set_Mat_Size((const char *)0x33, a1 + 2224, 0, 0);
  Set_Mat_Size((const char *)0x33, a1 + 2328, 0, 0);
  Set_Mat_Size((const char *)0x33, a1 + 2432, 0, 0);
  Set_Mat_Size((const char *)0x20, a1 + 2536, 0, 0);

  return Set_Mat_Size((const char *)0x400, a1 + 2602, 0, 0);
}

BOOL CCH_Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  int v8 = v7;
  int v10 = v9;
  int v12 = v11;
  uint64_t v14 = v13;
  unsigned int v15 = (_DWORD *)v6;
  uint64_t v138 = *MEMORY[0x263EF8340];
  unint64_t v16 = (int *)(v6 + 8208);
  memset(v68, 0, sizeof(v68));
  Append_To_Row_Vec(32, (_DWORD *)(v6 + 8208), (const char *)0x33, (int *)v68);
  Append_To_Row_Vec(32, v14, (const char *)0x33, (int *)v68);
  Copy_SubMat_to_Mat(1.0, 51, v68, v15[2118], 0, 1024, v15);
  v15[2118] = (v15[2118] + 1) % 0xFu;
  int v17 = v15[2050];
  if ((v17 + 1) < 0x1E) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = 30;
  }
  v15[2050] = v18;
  Set_Mat_Const((const char *)1, 0x17u, (const char *)0x20, v16, NAN);
  Set_Vec_Values_By_Idx(0.0, 32, v16, __const__Z16CCH_resetFBufferP12CCH_StateObj_ind);
  if (v15[2050] == 30)
  {
    unsigned int v19 = v15[2118];
    if (*v15 != 15 || v15[1] != 36)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v21 = *(double *)(g_TCU + 8);
        }
        else {
          double v21 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrix size (%ux%u) is not asexpected (%ux%u)!", "CCH_prepFeatures", 381, v20, v21, *v15, v15[1], 15, 36);
      }
      g_FPE_AssertFlag = 1;
    }
    int v57 = v12;
    Set_Mat_Const((const char *)0xF, 0x33u, (const char *)0x400, v15 + 2602, 0.0);
    int v23 = 0;
    int v24 = 0;
    int v25 = v15[1];
    int v26 = v15[2603];
    do
    {
      for (uint64_t i = 0; i != 36; ++i)
        *(void *)&v15[2 * (v23 + i) + 2604] = *(void *)&v15[2 * v25 * (v19 % 0xF)
                                                                            + 2
                                                                            + 2 * i];
      ++v24;
      v23 += v26;
      ++v19;
    }
    while (v24 != 15);
    int v28 = 36;
    Copy_SubMat_from_Mat(1.0, 1024, v15 + 2602, 14, 0, 1, 0x24u, 51, v15 + 2120);
    long long v136 = 0u;
    long long v135 = 0u;
    long long v134 = 0u;
    long long v133 = 0u;
    long long v132 = 0u;
    long long v131 = 0u;
    long long v130 = 0u;
    long long v128 = xmmword_22BB429F0;
    int v137 = 0;
    int v129 = 26;
    Min_Mat_Scalar_Col_By_Idx(83.0, 1024, v15 + 2602, &v128);
    Max_Mat_Scalar_Col_By_Idx(-83.0, 1024, v15 + 2602, &v128);
    int v67 = 0;
    long long v66 = 0u;
    long long v65 = 0u;
    long long v64 = 0u;
    long long v63 = 0u;
    long long v62 = 0u;
    long long v61 = 0u;
    long long v60 = 0u;
    long long v58 = xmmword_22BB42A00;
    int v59 = 21;
    Min_Mat_Scalar_Col_By_Idx(500.0, 1024, v15 + 2602, &v58);
    Max_Mat_Scalar_Col_By_Idx(-500.0, 1024, v15 + 2602, &v58);
    Min_Mat_Scalar_Col_By_Idx(200.0, 1024, v15 + 2602, dword_22BB42AF8);
    Max_Mat_Scalar_Col_By_Idx(-200.0, 1024, v15 + 2602, dword_22BB42AF8);
    long long v120 = 0u;
    long long v127 = 0u;
    long long v126 = 0u;
    long long v125 = 0u;
    long long v124 = 0u;
    long long v123 = 0u;
    long long v122 = 0u;
    long long v121 = 0u;
    uint64_t v119 = 0x300000001;
    *(void *)((char *)&v120 + 4) = 0x200000001;
    Min_Mat_Scalar_Col_By_Idx(100.0, 1024, v15 + 2602, &v119);
    Max_Mat_Scalar_Col_By_Idx(-100.0, 1024, v15 + 2602, &v119);
    long long v117 = 0u;
    long long v116 = 0u;
    long long v115 = 0u;
    long long v114 = 0u;
    long long v113 = 0u;
    long long v112 = 0u;
    long long v111 = 0u;
    long long v109 = xmmword_22BB42A10;
    int v118 = 0;
    int v110 = 8;
    Min_Mat_Scalar_Col_By_Idx(100.0, 1024, v15 + 2602, &v109);
    Max_Mat_Scalar_Col_By_Idx(-100.0, 1024, v15 + 2602, &v109);
    long long v107 = 0u;
    long long v106 = 0u;
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    long long v102 = 0u;
    long long v101 = 0u;
    long long v99 = xmmword_22BB42A20;
    int v108 = 0;
    int v100 = 11;
    Min_Mat_Scalar_Col_By_Idx(500.0, 1024, v15 + 2602, &v99);
    Max_Mat_Scalar_Col_By_Idx(-500.0, 1024, v15 + 2602, &v99);
    long long v97 = 0u;
    long long v96 = 0u;
    long long v95 = 0u;
    long long v94 = 0u;
    long long v93 = 0u;
    long long v92 = 0u;
    long long v91 = 0u;
    long long v89 = xmmword_22BB42A30;
    int v98 = 0;
    int v90 = 35;
    Abs_Mat_Col_By_Idx(1024, v15 + 2602, &v89);
    Min_Mat_Scalar_Col_By_Idx(10.0, 1024, v15 + 2602, &v89);
    long long v87 = 0u;
    long long v86 = 0u;
    long long v85 = 0u;
    long long v84 = 0u;
    long long v83 = 0u;
    long long v82 = 0u;
    long long v81 = 0u;
    long long v79 = xmmword_22BB42A40;
    int v88 = 0;
    int v80 = 32;
    Abs_Mat_Col_By_Idx(1024, v15 + 2602, &v79);
    Min_Mat_Scalar_Col_By_Idx(10.0, 1024, v15 + 2602, &v79);
    long long v77 = 0u;
    long long v76 = 0u;
    long long v75 = 0u;
    long long v74 = 0u;
    long long v73 = 0u;
    long long v72 = 0u;
    long long v71 = 0u;
    long long v69 = xmmword_22BB42A50;
    int v78 = 0;
    int v70 = 29;
    Min_Mat_Scalar_Col_By_Idx(10.0, 1024, v15 + 2602, &v69);
    Max_Mat_Scalar_Col_By_Idx(-10.0, 1024, v15 + 2602, &v69);
    uint64_t v29 = 0;
    uint64_t v30 = v15[2602];
    do
    {
      if (v30)
      {
        int v31 = 0;
        uint64_t v32 = 0;
        int v33 = v15[2603];
        do
        {
          *(void *)&v15[2 * (v28 + v31) + 2604] = 0;
          ++v32;
          v31 += v33;
        }
        while (v30 != v32);
      }
      ++v29;
      ++v28;
    }
    while (v29 != 15);
    if (v10 && (g_FPE_LogSeverity & 8) != 0)
    {
      unint64_t v34 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      double v35 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
      unsigned int v36 = 14 * v15[2603];
      LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f CCH In 1: VI %5.2f %5.2f %5.2f LS %2d %6.2f %6.2f ExP %7.3f %7.3f %7.3f %7.2f %7.2f %7.2f GNSS %2d %2d %6.3f %6.3f %6.3f %6.3f %2d", "CCH_Run", 541, v34, v35, *(double *)&v15[2 * v36 + 2604], *(double *)&v15[2 * (v36 | 1) + 2604], *(double *)&v15[2 * v36 + 2608], (int)*(double *)&v15[2 * v36 + 2610], *(double *)&v15[2 * v36 + 2612], *(double *)&v15[2 * v36 + 2614], *(double *)&v15[2 * v36 + 2616], *(double *)&v15[2 * v36 + 2618], *(double *)&v15[2 * v36 + 2620], *(double *)&v15[2 * v36 + 2622], *(double *)&v15[2 * v36 + 2624], *(double *)&v15[2 * v36 + 2626], (int)*(double *)&v15[2 * v36 + 2628],
        (int)*(double *)&v15[2 * v36 + 2630],
        *(double *)&v15[2 * v36 + 2632],
        *(double *)&v15[2 * v36 + 2634],
        *(double *)&v15[2 * v36 + 2636],
        *(double *)&v15[2 * v36 + 2638],
        (int)*(double *)&v15[2 * v36 + 2640]);
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v37 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        double v38 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
        int v39 = 14 * v15[2603];
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f CCH In 2: LS %7.2f %7.2f %7.2f FIV %1d %1d Vel %6.2f %6.2f %6.2f Vi %7.4f %7.4f %7.4f BA %7.5f %7.5f %7.5f BG %7.5f %7.5f %7.5f", "CCH_Run", 560, v37, v38, *(double *)&v15[2 * (v39 + 19) + 2604], *(double *)&v15[2 * (v39 + 20) + 2604], *(double *)&v15[2 * (v39 + 21) + 2604], (int)*(double *)&v15[2 * (v39 + 22) + 2604], (int)*(double *)&v15[2 * (v39 + 23) + 2604], *(double *)&v15[2 * (v39 + 24) + 2604], *(double *)&v15[2 * (v39 + 25) + 2604], *(double *)&v15[2 * (v39 + 26) + 2604], *(double *)&v15[2 * (v39 + 27) + 2604], *(double *)&v15[2 * (v39 + 28) + 2604], *(double *)&v15[2 * (v39 + 29) + 2604], *(double *)&v15[2 * (v39 + 30) + 2604], *(double *)&v15[2 * (v39 + 31) + 2604],
          *(double *)&v15[2 * (v39 + 32) + 2604],
          *(double *)&v15[2 * (v39 + 33) + 2604],
          *(double *)&v15[2 * (v39 + 34) + 2604],
          *(double *)&v15[2 * (v39 + 35) + 2604]);
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          unint64_t v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v41 = *(double *)(g_TCU + 8);
          }
          else {
            double v41 = 0.0;
          }
          int v42 = 14 * v15[2603];
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f CCH In 3: VI %1d %1d %1d LS %1d %1d %1d ExP %1d %1d %1d %1d %1d %1d LS %1d %1d %1d", "CCH_Run", 577, v40, v41, (int)*(double *)&v15[2 * (v42 + 36) + 2604], (int)*(double *)&v15[2 * (v42 + 37) + 2604], (int)*(double *)&v15[2 * (v42 + 38) + 2604], (int)*(double *)&v15[2 * (v42 + 39) + 2604], (int)*(double *)&v15[2 * (v42 + 40) + 2604], (int)*(double *)&v15[2 * (v42 + 41) + 2604], (int)*(double *)&v15[2 * (v42 + 42) + 2604], (int)*(double *)&v15[2 * (v42 + 43) + 2604], (int)*(double *)&v15[2 * (v42 + 44) + 2604], (int)*(double *)&v15[2 * (v42 + 45) + 2604], (int)*(double *)&v15[2 * (v42 + 46) + 2604], (int)*(double *)&v15[2 * (v42 + 47) + 2604], (int)*(double *)&v15[2 * (v42 + 48) + 2604], (int)*(double *)&v15[2 * (v42 + 49) + 2604],
            (int)*(double *)&v15[2 * (v42 + 50) + 2604]);
        }
      }
    }
    Sub_Mat(1024, v15 + 2602, 1024, (int *)(*((void *)v15 + 2326) + 119688), (const char *)0x400, v15 + 2602);
    ElMult_Mat_Mat(1024, v15 + 2602, 1024, (int *)(*((void *)v15 + 2326) + 127888), (const char *)0x400, v15 + 2602);
    bzero(&v58, 0x2008uLL);
    Set_Mat_Const((const char *)1, 1u, (const char *)0x400, (int *)&v58, 1.0);
    uint64_t v43 = 0;
    unsigned __int16 v44 = &dword_22BB42C10;
    do
    {
      uint64_t v45 = 0;
      uint64_t v46 = *((unsigned int *)&unk_22BB42C08 + 34 * v43 + 1);
      do
      {
        bzero(&v128, 0x2008uLL);
        int v47 = 1;
        Set_Mat_Size((const char *)0x400, (int *)&v128, 5 * v46 + 1, 1);
        uint64_t v48 = 0;
        *((void *)&v128 + 1) = 0x3FF0000000000000;
        do
        {
          if (v46)
          {
            int v49 = v15[2603] * dword_22BB430D0[34 * v45 + 2 + v48];
            uint64_t v50 = v44;
            unsigned int v51 = v47;
            uint64_t v52 = v46;
            do
            {
              int v53 = *v50++;
              *((void *)&v128 + ++v51) = *(void *)&v15[2 * (v53 + v49) + 2604];
              --v52;
            }
            while (v52);
          }
          ++v48;
          v47 += v46;
        }
        while (v48 != 5);
        Mult_Mat_Mat(1024, *((void *)v15 + 2326) + 24600 * v43 + 8200 * v45 + 144288, 1024, (uint64_t)&v128, 1024, (uint64_t)&v128);
        Append_To_Col_Vec(1024, &v128, (const char *)0x400, (int *)&v58);
        ++v45;
      }
      while (v45 != 3);
      ++v43;
      v44 += 34;
    }
    while (v43 != 9);
    double v54 = 0.0;
    Max_Mat_Scalar(0.0, 1024, (int *)&v58, (const char *)0x400, (int *)&v58);
    Mult_Mat_Mat(11300, *((void *)v15 + 2326), 1024, (uint64_t)&v58, 51, (uint64_t)(v15 + 2224));
    Max_Mat_Scalar(0.0, 51, v15 + 2224, (const char *)0x33, v15 + 2224);
    Append_On_Left_Vec(1.0, 51, v15 + 2224, (const char *)0x33, (uint64_t)(v15 + 2328));
    Mult_Mat_Mat(2601, *((void *)v15 + 2326) + 90408, 51, (uint64_t)(v15 + 2328), 51, (uint64_t)(v15 + 2328));
    Max_Mat_Scalar(0.0, 51, v15 + 2328, (const char *)0x33, v15 + 2328);
    Append_On_Left_Vec(1.0, 51, v15 + 2328, (const char *)0x33, (uint64_t)(v15 + 2432));
    Mult_Mat_Mat(1024, *((void *)v15 + 2326) + 111224, 51, (uint64_t)(v15 + 2432), 51, (uint64_t)(v15 + 2432));
    Max_Mat_Scalar(0.0, 51, v15 + 2432, (const char *)0x33, v15 + 2432);
    Append_On_Left_Vec(1.0, 51, v15 + 2432, (const char *)0x20, (uint64_t)(v15 + 2536));
    Mult_Mat_Mat(32, *((void *)v15 + 2326) + 119424, 32, (uint64_t)(v15 + 2536), 32, (uint64_t)(v15 + 2536));
    double v55 = *((double *)v15 + 1269);
    if (v55 >= -23.0)
    {
      double v54 = 1.0;
      if (v55 <= 23.0) {
        double v54 = 1.0 / (exp(-v55) + 1.0);
      }
    }
    *int v8 = v54;
    double v56 = 0.7;
    if (v57) {
      double v56 = 0.8;
    }
    return v54 <= v56;
  }
  else
  {
    *int v8 = 0.0;
    return 1;
  }
}

void CCH_insertMeas(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v33 = xmmword_22BB42A10;
  int v42 = 0;
  int v34 = 8;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v23 = xmmword_22BB42A20;
  int v32 = 0;
  int v24 = 11;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v14 = 0x300000001;
  *(void *)((char *)&v15 + 4) = 0x200000001;
  switch(a2)
  {
    case 1:
      if (*(double *)(a5 + 8) == 1.0) {
        *(double *)(a1 + 8312) = *(double *)(a1 + 8312) + 1.0;
      }
      if (*(double *)(a5 + 16) == 1.0) {
        *(double *)(a1 + 8320) = *(double *)(a1 + 8320) + 1.0;
      }
      *(double *)(a1 + 8328) = *(double *)(a4 + 8) + *(double *)(a1 + 8328);
      *(double *)(a1 + 8336) = *(double *)(a4 + 16) + *(double *)(a1 + 8336);
      *(double *)(a1 + 8344) = *(double *)(a1 + 8344) + *(double *)(a4 + 8) * *(double *)(a4 + 8);
      *(double *)(a1 + 8352) = *(double *)(a1 + 8352) + *(double *)(a4 + 16) * *(double *)(a4 + 16);
      *(double *)(a1 + 8360) = *(double *)(a1 + 8360) + 1.0;
      break;
    case 2:
      *(void *)(a1 + 8368) = *((void *)a6 + 1);
      *(void *)(a1 + 8376) = *((void *)a6 + 2);
      *(void *)(a1 + 8384) = *((void *)a6 + 3);
      *(void *)(a1 + 8248) = *((void *)a6 + 4);
      *(void *)(a1 + 8256) = *((void *)a6 + 5);
      *(double *)(a1 + 8240) = (double)*(char *)(a3 + 195);
      break;
    case 5:
      int v10 = (_DWORD *)(a1 + 8208);
      int v11 = &v14;
      int v12 = (unsigned int *)a4;
      goto LABEL_13;
    case 6:
    case 10:
    case 11:
      return;
    case 9:
      unsigned __int16 v13 = (_DWORD *)(a1 + 8208);
      Set_Mat_Cols_From_Mat_By_Idx(6, (unsigned int *)a4, &v33, 32, (_DWORD *)(a1 + 8208));
      int v11 = (uint64_t *)&v23;
      int v12 = a6;
      int v10 = v13;
LABEL_13:
      Set_Mat_Cols_From_Mat_By_Idx(6, v12, v11, 32, v10);
      break;
    default:
      if (g_FPE_LogSeverity)
      {
        unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v9 = *(double *)(g_TCU + 8);
        }
        else {
          double v9 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Meas %d not supported!", "CCH_insertMeas", 714, v8, v9, a2);
      }
      g_FPE_AssertFlag = 1;
      break;
  }
}

const char *CCH_logLastFeatures(const char *result)
{
  if (*((_DWORD *)result + 2050) == 30 && (g_FPE_LogSeverity & 0x200) != 0) {
    return LC_LOG_NMEA_GENERIC("%s,CCH_IN,%.1f,%.2f,%.2f,%.2f,%.1f,%.2f,%.2f,%.2f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.2f,%.2f,%.2f,%.2f", "$PFPEX", *((double *)result + 1083), *((double *)result + 1061), *((double *)result + 1062), *((double *)result + 1063), *((double *)result + 1084), *((double *)result + 1067), *((double *)result + 1068), *((double *)result + 1069), *((double *)result + 1070), *((double *)result + 1071), *((double *)result + 1072), *((double *)result + 1080), *((double *)result + 1081), *((double *)result + 1082), *((double *)result + 1079), *((double *)result + 1073), *((double *)result + 1074),
  }
             *((double *)result + 1075),
             sqrt(*((double *)result + 1077)),
             *((double *)result + 1076),
             sqrt(*((double *)result + 1078)));
  return result;
}

uint64_t Get_SS_Order(uint64_t result)
{
  uint64_t v1 = 0;
  *(_WORD *)(result + 176) = 0;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  do
  {
    *(unsigned char *)(result + v1) = PP_GPS_SS_Order_Table[v1];
    ++v1;
  }
  while (v1 != 32);
  for (uint64_t i = 0; i != 36; ++i)
  {
    if ((i + 56) <= 0xB1) {
      *(unsigned char *)(result + 56 + i) = PP_GAL_SS_Order_Table[i] + 56;
    }
  }
  for (uint64_t j = 0; j != 37; ++j)
  {
    if ((j + 92) <= 0xB1) {
      *(unsigned char *)(result + 92 + j) = PP_BDS_SS_Order_Table[j] + 92;
    }
  }
  for (uint64_t k = 129; k != 139; ++k)
  {
    if (k <= 0xB1) {
      *(unsigned char *)(result + k) = k + 1;
    }
  }
  return result;
}

void NK_Limited_Reset(uint64_t a1, uint64_t a2, _DWORD *a3, double a4)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 168) = 0;
  if (*(unsigned char *)(a1 + 128)) {
    goto LABEL_28;
  }
  uint64_t v7 = (unsigned char *)(a2 + 22848);
  if (*(unsigned char *)(a2 + 960)
    || *(unsigned __int8 *)(a2 + 24778) > 2u
    || *(_DWORD *)(a1 + 11048) && *(_DWORD *)(a1 + 11032) < 0x1Fu)
  {
    goto LABEL_27;
  }
  Comp_ErrorEllipse(*(double *)(a2 + 24264), *(double *)(a2 + 24272), *(double *)(a2 + 24400), &v72, &v73, &v74);
  double v9 = v72 * v72;
  double v72 = v72 * v72;
  double v10 = *(double *)(a2 + 24224);
  double v11 = *(double *)(a2 + 24232);
  if (v10 < v11) {
    double v11 = *(double *)(a2 + 24224);
  }
  if (v11 > *(double *)(a2 + 24240)) {
    double v11 = *(double *)(a2 + 24240);
  }
  if (v9 + v11 >= 1600000000.0)
  {
    double v9 = *(double *)(a2 + 24248);
    if (*(unsigned char *)(a2 + 22920)) {
      double v12 = *(double *)(a2 + 22960);
    }
    else {
      double v12 = a4 * 99930819.3 * (a4 * 99930819.3);
    }
LABEL_18:
    if (v9 >= v12 * 0.25) {
      goto LABEL_27;
    }
    goto LABEL_19;
  }
  if (*v7 && v10 >= *(double *)(a2 + 22888) * 0.25 && *(unsigned char *)(a2 + 22992))
  {
    double v12 = *(double *)(a2 + 23064);
    goto LABEL_18;
  }
LABEL_19:
  for (int i = 2; i != 13; ++i)
  {
    uint64_t v14 = a1 + 8 * ((((i - 1) * i) >> 1) - 1);
    *(double *)(v14 + 872) = *(double *)(v14 + 872) * 1.15;
  }
  uint64_t v15 = 3027;
  do
  {
    *(double *)(a2 + 8 * v15) = *(double *)(a2 + 8 * v15) * 1.15;
    unint64_t v16 = v15 - 3016;
    --v15;
  }
  while (v16 > 1);
  uint64_t v17 = 3038;
  do
  {
    *(double *)(a2 + 8 * v17) = *(double *)(a2 + 8 * v17) * 1.15;
    unint64_t v18 = v17 - 3027;
    --v17;
  }
  while (v18 > 1);
  uint64_t v19 = 3049;
  do
  {
    *(double *)(a2 + 8 * v19) = *(double *)(a2 + 8 * v19) * 1.07;
    unint64_t v20 = v19 - 3038;
    --v19;
  }
  while (v20 > 1);
LABEL_27:
  if (*(unsigned char *)(a1 + 128))
  {
LABEL_28:
    unsigned int v21 = *(_DWORD *)(a1 + 132) - 61;
    if (v21 <= 4 && v21 != 2)
    {
      double v23 = *(double *)(a1 + 160);
      Comp_NEDvar_UDU(a1 + 344, 0xBu, 5, (double (*)[3])(a2 + 832), (double *)&v70);
      *(double *)(a2 + 24400) = v24;
      Comp_ErrorEllipse(*(double *)&v70, *((double *)&v70 + 1), v24, &v72, &v73, &v74);
      double v72 = v72 * v72;
      double v25 = v72;
      ud2var(a1 + 344, 0xBu, 1, 0xBu, (double *)(a2 + 24136));
      double v26 = v71;
      if (v71 <= v25) {
        double v26 = v25;
      }
      for (uint64_t j = 3022; j != 3025; ++j)
      {
        if (*(double *)(a2 + 8 * j) > v26) {
          double v26 = *(double *)(a2 + 8 * j);
        }
      }
      *(double *)(a2 + 24192) = v26;
      *(double *)(a2 + 24184) = v26;
      *(double *)(a2 + 24176) = v26;
      double v28 = *(double *)(a2 + 24200);
      if (*(double *)(a2 + 24208) > v28) {
        double v28 = *(double *)(a2 + 24208);
      }
      double v29 = *(double *)(a2 + 24216);
      if (v29 <= v28) {
        double v29 = v28;
      }
      double v30 = fmax(v23, 9.0);
      if (*a3 == 2)
      {
        signed int v31 = *(_DWORD *)(a1 + 20);
        if (v31 <= 3 && v30 * v29 > dbl_22BB432F8[v31])
        {
          int v32 = dword_22BB43320[v31];
          *(_DWORD *)(a1 + 20) = v32;
          unsigned int v33 = v32 - 2;
          if (v33 > 2) {
            double v34 = 100000000.0;
          }
          else {
            double v34 = dbl_22BB432E0[v33];
          }
          double v39 = v34 / v30;
          if (v29 > v39) {
            double v29 = v39;
          }
        }
      }
      *(double *)(a2 + 24216) = v29;
      *(double *)(a2 + 24208) = v29;
      uint64_t v40 = 3027;
      *(double *)(a2 + 24200) = v29;
      do
      {
        *(double *)(a2 + 8 * v40) = v30 * *(double *)(a2 + 8 * v40);
        unint64_t v41 = v40 - 3016;
        --v40;
      }
      while (v41 > 1);
      uint64_t v42 = 2;
      do
      {
        *((double *)&v70 + v42) = v30 * *((double *)&v70 + v42);
        unint64_t v43 = v42-- + 1;
      }
      while (v43 > 1);
      *(double *)(a2 + 24400) = v30 * *(double *)(a2 + 24400);
      bzero((void *)(a1 + 872), 0x210uLL);
      for (uint64_t k = 3017; k != 3028; ++k)
        *(void *)(a1 + 8 * ((((k - 3016) * (k - 3015)) >> 1) - 1) + 872) = *(void *)(a2 + 8 * k);
      *(_OWORD *)(a2 + 24176) = v70;
      *(double *)(a2 + 24192) = v71;
      NK_Recompute_Sigmas((double *)a1, (double *)a2);
      *(unsigned char *)(a1 + 128) = 0;
      *(unsigned char *)(a1 + 168) = 2;
    }
    return;
  }
  for (uint64_t m = 0; m != 11; ++m)
  {
    *((unsigned char *)&v64 + m) = *(unsigned char *)(a2 + 25166 + m) ^ 1;
    if (m == 2)
    {
      if (*(double *)(a2 + 24152) > 1000000000.0) {
        char v65 = 0;
      }
    }
    else if (m == 1)
    {
      if (*(double *)(a2 + 24144) > 1000000000.0) {
        HIBYTE(v64) = 0;
      }
    }
    else if (!m && *(double *)(a2 + 24136) > 1000000000.0)
    {
      LOBYTE(v64) = 0;
    }
  }
  unsigned int v36 = *(_DWORD *)(a2 + 25364);
  if (v36 >= 0x1D4C1)
  {
    __int16 v64 = 257;
    *(unsigned char *)(a2 + 768) = 0;
    *(_WORD *)(a2 + 769) = 0;
    char v65 = 1;
    int v67 = 16843009;
LABEL_61:
    unsigned int v37 = *(double *)(a2 + 944);
    EvLog_v("NK_Limited_Reset: Partial reset velocity: %d  %d  ", v36, v37);
    unsigned int v38 = v37 * v37;
    if (*(_DWORD *)(a2 + 25364) / 0xFA0u > v37)
    {
      *(_OWORD *)(a2 + 704) = 0u;
      *(_OWORD *)(a2 + 720) = 0u;
      *(_OWORD *)(a2 + 688) = 0u;
      *(_OWORD *)(a2 + 912) = 0u;
      *(_OWORD *)(a2 + 928) = 0u;
      *(_OWORD *)(a2 + 944) = 0u;
    }
    char v66 = 1;
    __int16 v68 = 257;
    char v69 = 1;
    goto LABEL_76;
  }
  if (v36 >= 0xFA0) {
    goto LABEL_61;
  }
  unsigned int v38 = 0;
LABEL_76:
  uint64_t v45 = 0;
  unsigned int v46 = 0;
  double v79 = 0.0;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v76 = 0u;
  memset(v75, 0, sizeof(v75));
  int v47 = (double *)(a2 + 24136);
  do
  {
    if (*((unsigned char *)&v64 + v45))
    {
      double v48 = -0.0;
      if (*(_DWORD *)(a2 + 968)) {
        double v49 = v47[45];
      }
      else {
        double v49 = -0.0;
      }
      if (((v45 & 0x7FFFFFFE) == 8 || v45 == 3 || v45 == 10) && v38 != 0) {
        double v48 = (double)v38;
      }
      double v53 = v48 + v47[45] + v49;
      *((double *)v75 + v45) = v53;
      ++v46;
      ++*(_WORD *)(a1 + 10960 + 2 * v45);
      double *v47 = v53;
    }
    ++v45;
    ++v47;
  }
  while (v45 != 11);
  if (BYTE1(v67))
  {
    Comp_NEDvar_UDU(a1 + 344, 0xBu, 5, (double (*)[3])(a2 + 832), (double *)&v70);
    *(double *)(a2 + 24400) = v54;
    Comp_ErrorEllipse(*(double *)&v70, *((double *)&v70 + 1), v54, &v72, &v73, &v74);
    double v55 = v72 * v72;
    double v72 = v55;
    if (v71 > v55) {
      double v55 = v71;
    }
    *(double *)&long long v77 = v55;
    *((double *)&v77 + 1) = v55;
    *((double *)&v76 + 1) = v55;
    *(_OWORD *)(a2 + 24176) = v70;
    *(double *)(a2 + 24192) = v71;
  }
  if ((_BYTE)v68)
  {
    double v56 = *(double *)(a2 + 24560);
    if (*(double *)(a2 + 24568) > v56) {
      double v56 = *(double *)(a2 + 24568);
    }
    if (*(double *)(a2 + 24576) > v56) {
      double v56 = *(double *)(a2 + 24576);
    }
    double v57 = v56 + v56;
    if (*a3 == 2)
    {
      uint64_t v58 = *(int *)(a1 + 20);
      if (v58 <= 3 && v57 > dbl_22BB432F8[v58]) {
        *(_DWORD *)(a1 + 20) = dword_22BB43320[v58];
      }
    }
    *((double *)&v78 + 1) = v57;
    double v79 = v57;
    *(double *)&long long v78 = v57;
    *(double *)(a2 + 24216) = v57;
    *(double *)(a2 + 24208) = v57;
    *(double *)(a2 + 24200) = v57;
  }
  if (v46)
  {
    if (v46 > 9)
    {
      if (v46 == 10)
      {
        uint64_t v59 = -11;
        long long v60 = (double *)v75;
        do
        {
          double v63 = 0.0;
          if (R8_EQ(v60, &v63)) {
            ud2var(a1 + 872, 0xBu, v59 + 12, 1u, v60);
          }
          ++v60;
        }
        while (!__CFADD__(v59++, 1));
      }
      bzero((void *)(a1 + 872), 0x210uLL);
      for (uint64_t n = 0; n != 11; ++n)
        *(void *)(a1 + 8 * ((((n + 1) * (n + 2)) >> 1) - 1) + 872) = *((void *)v75 + n);
    }
    else
    {
      Partial_Reset(11, (double *)v75, (double *)(a1 + 872));
    }
    *(_DWORD *)(a1 + 27000) = *(_DWORD *)(a2 + 624);
    *(unsigned char *)(a1 + 168) = 1;
    *(_DWORD *)(a1 + 144) = 0;
    NK_Recompute_Sigmas((double *)a1, (double *)a2);
  }
}

double *NK_Recompute_Sigmas(double *result, double *a2)
{
  uint64_t v3 = result;
  int v4 = a2 + 3017;
  uint64_t v5 = -11;
  do
  {
    switch((int)v5)
    {
      case -11:
      case -10:
      case -9:
        double v6 = *v4 + v3[906];
        goto LABEL_6;
      case -8:
        double v6 = *v4 + a2[82] * 0.01;
        goto LABEL_6;
      case -7:
        double v6 = *v4;
LABEL_6:
        _OWORD v4[11] = v6;
        break;
      case -6:
        a2[3050] = a2[3050] + v3[910];
        a2[3033] = a2[3022] + v3[907];
        break;
      case -5:
        a2[3034] = a2[3023] + v3[908];
        break;
      case -4:
        a2[3035] = a2[3024] + v3[909];
        break;
      case -3:
        a2[3036] = a2[3025] + a2[82] * 0.0001;
        break;
      case -2:
        a2[3037] = a2[3026] + a2[82] * 0.0001;
        break;
      case -1:
        a2[3038] = a2[3027] + a2[82] * 0.0001;
        break;
      default:
        uint64_t result = (double *)EvCrt_Illegal_Default("NK_Recompute_Sigmas", 0x322u);
        break;
    }
    v4[22] = sqrt(v4[11]);
    ++v4;
  }
  while (!__CFADD__(v5++, 1));
  return result;
}

uint64_t Gnm01_01DefaultMsgHandler(unsigned __int8 *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm01_01DefaultMsgHandler", 517);
      int v8 = 0;
LABEL_43:
      LbsOsaTrace_WriteLog(0xBu, __str, v7, v8, 1);
      return 0;
    }
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FSM:MID,%X,Srce,%u,Dest,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm01_01DefaultMsgHandler", 519, *((_DWORD *)a1 + 1), *a1, a1[1]);
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 2, 1);
  }
  int v4 = *((_DWORD *)a1 + 1);
  if (v4 > 8520962)
  {
    if (v4 > 8591615)
    {
      if (v4 == 8591616)
      {
        Gnm13_03SendAbortCnf(*((_DWORD *)a1 + 3), 0);
        return 0;
      }
      if (v4 == 8786691) {
        goto LABEL_27;
      }
      int v9 = 8787203;
    }
    else
    {
      if (v4 == 8520963 || v4 == 8521220) {
        goto LABEL_20;
      }
      int v9 = 8521475;
    }
    if (v4 != v9) {
      goto LABEL_41;
    }
LABEL_27:
    double v11 = (void *)*((void *)a1 + 2);
    if (v11) {
      free(v11);
    }
    *((void *)a1 + 2) = 0;
    return 0;
  }
  if (v4 > 8520194)
  {
    if (v4 == 8520195)
    {
      double v10 = (void **)*((void *)a1 + 3);
      if (v10[31])
      {
        free(v10[31]);
        double v10 = (void **)*((void *)a1 + 3);
      }
      v10[31] = 0;
      if (v10[9])
      {
        free(v10[9]);
        double v10 = (void **)*((void *)a1 + 3);
      }
      v10[9] = 0;
      if (v10[33])
      {
        free(v10[33]);
        double v10 = (void **)*((void *)a1 + 3);
      }
      goto LABEL_21;
    }
    if (v4 != 8520451 && v4 != 8520707) {
      goto LABEL_41;
    }
LABEL_20:
    double v10 = (void **)*((void *)a1 + 3);
    if (!v10)
    {
LABEL_22:
      *((void *)a1 + 3) = 0;
      return 0;
    }
LABEL_21:
    free(v10);
    goto LABEL_22;
  }
  if (v4 != 8389379)
  {
    if (v4 == 8405248)
    {
      Gnm11_00ApiStatusCB(11, 0, 0, 18);
      return 0;
    }
    if (v4 == 8407043)
    {
      Gnm11_00ApiStatusCB(11, 1, a1[12], 14);
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FSM:SBCFG Request,%u discarded\n", v14);
LABEL_32:
        size_t v7 = v5;
        int v8 = 2;
        goto LABEL_43;
      }
      return 0;
    }
LABEL_41:
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: No memory free done\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm01_01DefaultMsgHandler");
      int v8 = 4;
      goto LABEL_43;
    }
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_CLEAR_GNSS_CACHE discarded\n");
    goto LABEL_32;
  }
  return 0;
}

uint64_t UnCompact_GPS_BinEph(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = *(void *)a2;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(result + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v2 = (unsigned char *)(a2 + 11);
  *(unsigned char *)(result + 10) = *(unsigned char *)(a2 + 10);
  uint64_t v3 = result + 24;
  *(void *)(result + 11) = 0;
  *(void *)(result + 16) = 0;
  for (unsigned int i = 21; i > 1; --i)
  {
    *(unsigned char *)uint64_t v3 = *v2;
    *(unsigned char *)(v3 + 1) = v2[1];
    *(_WORD *)(v3 + 2) = v2[2];
    v3 += 4;
    v2 += 3;
  }
  *(_DWORD *)(result + 104) = 0xFFFFFF;
  return result;
}

size_t SuplLppExecutePosRsp(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "SuplLppExecutePosRsp");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (a1)
  {
    LODWORD(__s) = 255;
    BYTE4(__s) = -1;
    int v22 = -1;
    memset_s(&__s, 0xCuLL, 0, 0xCuLL);
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LPP Sub Msg Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 65, "SuplLppExecutePosRsp", *(unsigned __int8 *)(a1 + 1));
      LbsOsaTrace_WriteLog(0x13u, __str, v5, 1, 1);
    }
    switch(*(unsigned char *)(a1 + 1))
    {
      case 0:
      case 2:
        uint64_t v6 = *(void *)(a1 + 8);
        size_t v7 = *(long long **)v6;
        if (*(void *)v6)
        {
          LODWORD(__s) = 2;
          int v22 = *(_DWORD *)(a1 + 16);
          BYTE4(__s) = 1;
          long long v8 = v7[5];
          v23[4] = v7[4];
          v23[5] = v8;
          v23[6] = v7[6];
          long long v9 = v7[3];
          v23[2] = v7[2];
          v23[3] = v9;
          long long v10 = v7[1];
          v23[0] = *v7;
          v23[1] = v10;
          lpp_t_pos_loc_cnf(v23, __s, v22, *(unsigned char *)(v6 + 9));
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Position data not received\n");
          goto LABEL_20;
        }
        break;
      case 1:
        *(void *)&long long __dst = 0x8000000080000000;
        *((void *)&__dst + 1) = 0xFFFF00007FFFFFFFLL;
        *(_WORD *)long long v27 = 255;
        *(_WORD *)&v27[8] = -1;
        v27[10] = -1;
        *(_DWORD *)&v27[2] = -1;
        v27[6] = -1;
        memset(&v27[11], 0, 32);
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v12 = mach_continuous_time();
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AID_RQD_MSG  \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 73, "SuplLppExecutePosRsp");
          LbsOsaTrace_WriteLog(0x13u, __str, v13, 4, 1);
        }
        LODWORD(__s) = 2;
        int v14 = *(_DWORD *)(a1 + 16);
        int v22 = v14;
        BYTE4(__s) = 1;
        uint64_t v15 = *(void *)(a1 + 8);
        if (*(unsigned char *)(v15 + 8))
        {
          memcpy_s("SuplLppExecutePosRsp", 92, &__dst, 0x3Cu, *(const void **)v15, 0x3CuLL);
          char v16 = 1;
          int v14 = v22;
        }
        else
        {
          char v16 = 0;
        }
        v24[0] = __dst;
        v24[1] = *(_OWORD *)v27;
        v25[0] = *(_OWORD *)&v27[16];
        *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)&v27[28];
        lpp_t_lpi_pos_aid_req(v24, v16, __s, v14);
        break;
      case 6:
        uint64_t v17 = *(long long **)(*(void *)(a1 + 8) + 16);
        LODWORD(__s) = 2;
        int v22 = *(_DWORD *)(a1 + 16);
        BYTE4(__s) = 1;
        lpp_t_pos_meas_cnf(0, v17, 2, __s, v22, *(unsigned __int16 *)v17);
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LPP message\n");
          goto LABEL_20;
        }
        break;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_20:
    LbsOsaTrace_WriteLog(0x13u, __str, v11, 0, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "PSP", 68, "SuplLppExecutePosRsp");
    return LbsOsaTrace_WriteLog(0x13u, __str, v20, 5, 1);
  }
  return result;
}

size_t SuplLppExecuteAdReq(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "SuplLppExecuteAdReq");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_15;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_14:
    LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
    goto LABEL_15;
  }
  uint64_t v4 = (char *)operator new(0x40uLL, MEMORY[0x263F8C180]);
  if (!v4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_15;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSS Aid Req\n");
    goto LABEL_14;
  }
  unsigned __int16 v5 = v4;
  *(void *)uint64_t v4 = 0x8000000080000000;
  *((void *)v4 + 1) = 0xFFFF00007FFFFFFFLL;
  *((_WORD *)v4 + 8) = 255;
  *((_WORD *)v4 + 12) = -1;
  v4[26] = -1;
  *(_DWORD *)(v4 + 18) = -1;
  v4[22] = -1;
  *(_OWORD *)(v4 + 27) = 0u;
  *(_OWORD *)(v4 + 43) = 0u;
  char v6 = *(unsigned char *)(a1 + 46);
  v4[60] = v6;
  if (v6)
  {
    memset_s(v4, 0x3CuLL, 0, 0x3CuLL);
    *((_DWORD *)v5 + 3) = *(_DWORD *)(a1 + 6);
    v5[16] = *(unsigned char *)(a1 + 10);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 11);
    v5[17] = v7;
    v5[18] = *(unsigned char *)(a1 + 42);
    if (v7)
    {
      long long v8 = v5 + 43;
      long long v9 = (unsigned char *)(a1 + 27);
      do
      {
        *long long v8 = *v9;
        *(v8 - 16) = *(v9 - 15);
        ++v8;
        ++v9;
        --v7;
      }
      while (v7);
    }
  }
  lpp_t_supl_ad_req(*(_DWORD *)a1, *(unsigned char *)(a1 + 4), (long long *)v5, 0xFFFF);
LABEL_15:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 68, "SuplLppExecuteAdReq");
    return LbsOsaTrace_WriteLog(0x13u, __str, v13, 5, 1);
  }
  return result;
}

size_t SuplLppUpdatePosCap(unsigned char *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "SuplLppUpdatePosCap");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  BYTE1(v7[0]) = 1;
  if (a1[3] == 1)
  {
    BYTE3(v8) = 1;
    BYTE6(v8) = a1[2];
    BYTE4(v8) = *a1;
    HIBYTE(v8) = a1[4];
  }
  char v10 = 1;
  char v9 = a1[5];
  lpp_t_classmark_ind(v7);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 68, "SuplLppUpdatePosCap");
    return LbsOsaTrace_WriteLog(0x13u, __str, v6, 5, 1);
  }
  return result;
}

size_t SuplLppUpdateCap(unsigned __int8 *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  __int16 v12 = 1;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "SuplLppUpdateCap");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (*a1 == 1)
  {
    LOBYTE(v9) = 1;
    BYTE2(v10) = 1;
    WORD2(v10) = *((_WORD *)a1 + 1);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSS ID,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 69, "SuplLppUpdateCap", 770, *a1);
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 0, 1);
  }
  lpp_t_classmark_ind(&v9);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 68, "SuplLppUpdateCap");
    return LbsOsaTrace_WriteLog(0x13u, __str, v8, 5, 1);
  }
  return result;
}

size_t SuplLppExecuteCapReq(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "SuplLppExecuteCapReq");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  lpp_t_supl_lpp_caps_req(*(_DWORD *)a1, *(unsigned char *)(a1 + 4));
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 68, "SuplLppExecuteCapReq");
    return LbsOsaTrace_WriteLog(0x13u, __str, v6, 5, 1);
  }
  return result;
}

unsigned char *LPP_Bridge_init(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Initialization Fn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 73, "LPP_Bridge_init");
    LbsOsaTrace_WriteLog(0x13u, __str, v1, 4, 1);
  }
  LPP_init();
  return lpp_t_mm_lpm_status_ind(1, 0xFFFF, 0xFFFFFFFFuLL);
}

uint64_t LPP_Bridge_de_init(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: De-Initialization Fn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 73, "LPP_Bridge_de_init");
    LbsOsaTrace_WriteLog(0x13u, __str, v1, 4, 1);
  }
  return LPP_destroy();
}

BOOL Vert_Meas_Update(unsigned int a1, double *a2, unsigned int a3, unsigned __int8 *a4, double *a5, _WORD *a6, double a7)
{
  v20[33] = *(double *)MEMORY[0x263EF8340];
  if (*((int *)a4 + 1) < 1) {
    return 0;
  }
  a4[16] = 0;
  if (*a4)
  {
    double v10 = *((double *)a4 + 4);
    double v11 = a7 - *((double *)a4 + 3);
    *((double *)a4 + 6) = v11;
    uint64_t v18 = 0;
    memset(v17, 0, sizeof(v17));
    double v12 = a2[7];
    *((double *)v17 + a1) = -a2[6];
    *((double *)v17 + a1 + 1) = -v12;
    *((double *)&v17[1] + a1) = -a2[8];
    double v16 = 0.0;
    *((double *)v17 + a3) = v11;
    umeas((BOOL)a5, a3, v10, (double *)v17, v20, v19, &v16, *((double *)a4 + 7));
    double v13 = v16;
    if (v16 <= 0.0)
    {
      int v14 = 0;
      *a4 = 0;
      a4[16] = 1;
      ++*a6;
    }
    else
    {
      double v13 = *((double *)a4 + 4) * (v16 * (v20[a3] * v20[a3]));
      int v14 = *a4;
    }
    *((double *)a4 + 8) = v13;
  }
  else
  {
    int v14 = 0;
  }
  return v14 != 0;
}

void Corr_Old_PR_Est(unsigned __int8 *a1, int a2, int a3, int a4, int a5, unsigned int a6, double *a7, const double *a8, double a9, double a10, double a11, double a12, double *a13, unsigned char *a14, double *a15)
{
  BOOL v18 = a9 <= 5.0;
  BOOL v19 = fabs(a10) <= 5995849.16 && a9 <= 5.0;
  BOOL v20 = fabs(a11) <= 5995849.16 && a9 <= 5.0;
  if (fabs(a12) > 5995849.16) {
    BOOL v18 = 0;
  }
  unsigned int v21 = a14;
  if (a9 > 5.0 || a5 == 0)
  {
    bzero(a14, a6);
  }
  else if (a6)
  {
    int v28 = v19 & a2;
    int v35 = v20 & a3;
    int v29 = v18 & a4;
    double v30 = a1;
    uint64_t v31 = a6;
    while (!*v21)
    {
LABEL_31:
      v30 += 4;
      ++a15;
      a13 += 3;
      ++a7;
      ++v21;
      if (!--v31) {
        return;
      }
    }
    double v32 = PosCor_dot_AveLOS(a8, *a7, a13) + *a15;
    *a15 = v32;
    if (!a1) {
      goto LABEL_25;
    }
    int v33 = *v30;
    if (v33 == 4)
    {
      if (!v29)
      {
LABEL_30:
        *unsigned int v21 = 0;
        goto LABEL_31;
      }
      double v34 = v32 - a12;
      goto LABEL_29;
    }
    if (v33 == 2)
    {
      if (!v35) {
        goto LABEL_30;
      }
      double v34 = v32 - a11;
    }
    else
    {
LABEL_25:
      if (!v28) {
        goto LABEL_30;
      }
      double v34 = v32 - a10;
    }
LABEL_29:
    *a15 = v34;
    goto LABEL_31;
  }
}

double PosCor_dot_AveLOS(const double *a1, double a2, double *a3)
{
  uint64_t v3 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  double v4 = 0.0;
  do
  {
    double v4 = v4 + a1[v3] * a3[v3];
    ++v3;
  }
  while (v3 != 3);
  for (uint64_t i = 0; i != 3; ++i)
    *(double *)((char *)&v9 + i * 8) = a3[i] - -(a1[i] - v4 * a3[i]) / a2;
  uint64_t v6 = 0;
  double v7 = 0.0;
  do
  {
    double v7 = v7 + a1[v6] * (a3[v6] + *(double *)((char *)&v9 + v6 * 8));
    ++v6;
  }
  while (v6 != 3);
  *(_OWORD *)a3 = v9;
  *((void *)a3 + 2) = v10;
  return v7 * 0.5;
}

void *Init_DB_Acq_Aid_Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v34[1] = *(double *)MEMORY[0x263EF8340];
  double v6 = *(double *)(a1 + 168);
  double v7 = *(double *)(a1 + 888);
  double v8 = *(double *)(a1 + 872);
  *(_DWORD *)a3 = *(_DWORD *)(a1 + 32);
  double v9 = (*(double *)(a1 + 40) - *(double *)(a1 + 144)) * 1000.0;
  if (v9 <= 0.0) {
    double v10 = -0.5;
  }
  else {
    double v10 = 0.5;
  }
  double v11 = v9 + v10;
  if (v11 >= -2147483650.0) {
    int v12 = (int)v11;
  }
  else {
    int v12 = 0x80000000;
  }
  if (v11 <= 2147483650.0) {
    int v13 = v12;
  }
  else {
    int v13 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a3 + 32) = v13;
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(a1 + 48);
  double v14 = (*(double *)(a1 + 192) - *(double *)(a1 + 152)) * 1000.0;
  if (v14 <= 0.0) {
    double v15 = -0.5;
  }
  else {
    double v15 = 0.5;
  }
  double v16 = v14 + v15;
  if (v16 <= 2147483650.0)
  {
    if (v16 >= -2147483650.0) {
      int v17 = (int)v16;
    }
    else {
      int v17 = 0x80000000;
    }
  }
  else
  {
    int v17 = 0x7FFFFFFF;
  }
  BOOL v18 = (unsigned __int8 *)(a3 + 6133);
  *(_DWORD *)(a3 + 40) = v17;
  v34[0] = 0.0;
  API_Get_UTC_Cor(1, v34);
  if (v34[0] <= 0.0) {
    double v19 = -0.5;
  }
  else {
    double v19 = 0.5;
  }
  double v20 = v34[0] + v19;
  if (v34[0] + v19 <= 2147483650.0)
  {
    if (v20 >= -2147483650.0) {
      int v21 = (int)v20;
    }
    else {
      LOBYTE(v21) = 0;
    }
  }
  else
  {
    LOBYTE(v21) = -1;
  }
  *(unsigned char *)(a3 + 44) = v21;
  for (uint64_t i = 60; i != 3996; i += 48)
  {
    double v23 = (_OWORD *)(a3 + i);
    *(_OWORD *)((char *)v23 + 29) = 0uLL;
    *double v23 = 0uLL;
    v23[1] = 0uLL;
  }
  size_t result = memset((void *)(a3 + 3996), 255, 0x4DEuLL);
  uint64_t v25 = 0;
  *(_DWORD *)(a3 + 6132) = 0;
  *(unsigned char *)(a3 + 6136) = 0;
  do
  {
    if (*(unsigned char *)(a2 + 33605 + v25))
    {
      int v26 = 0;
      uint64_t v27 = *v18;
      int v28 = (_WORD *)(a3 + 2 * v27 + 4530);
      int v29 = v18;
    }
    else
    {
      uint64_t v27 = v18[2];
      int v28 = (_WORD *)(a3 + 2 * v27 + 4886);
      int v26 = 3;
      int v29 = v18 + 2;
    }
    _WORD *v28 = v25 + 1;
    *int v29 = v27 + 1;
    *(_DWORD *)(a3 + 5420 + 4 * v25++) = v26;
  }
  while (v25 != 178);
  double v30 = fabs(v6);
  double v31 = sqrt(v8 * v8 + v7 * v7);
  int v32 = (int)(v6 * 1000000000.0);
  int v33 = 3 * (int)(v31 + 1313.75887);
  if (v31 >= 21500.0) {
    LOWORD(v33) = -536;
  }
  if (v30 >= 0.000032768) {
    LOWORD(v32) = 0;
  }
  *(_WORD *)(a3 + 4) = v33;
  *(void *)(a3 + 6) = -1;
  *(void *)(a3 + 14) = 0x7FFF7FFF7FFFFFFFLL;
  *(_WORD *)(a3 + 22) = -256;
  *(_WORD *)(a3 + 24) = v32;
  *(_DWORD *)(a3 + 26) = 0xFFFF;
  *(_WORD *)(a3 + 30) = -154;
  *(_DWORD *)(a3 + 48) = 0;
  *(void *)(a3 + 52) = *(void *)(a1 + 20);
  *(_WORD *)(v18 + 77) = 3584;
  *(_OWORD *)(a3 + 6140) = 0u;
  *(_OWORD *)(a3 + 6156) = 0u;
  *(_OWORD *)(a3 + 6172) = 0u;
  *(_OWORD *)(a3 + 6188) = 0u;
  *(void *)(a3 + 6202) = 0;
  *(void *)(a3 + 6216) = a2 + 16336;
  *(void *)(a3 + 6224) = a2 + 16432;
  return result;
}

uint64_t Comp_Cur_Acq_Aid(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  *(_WORD *)(a2 + 16) = *(_WORD *)(result + 16);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(result + 36);
  if (*(unsigned char *)(result + 4))
  {
    int v2 = *(_DWORD *)a2 - *(_DWORD *)result;
    if (*(_DWORD *)a2 == *(_DWORD *)result)
    {
      long long v3 = *(_OWORD *)result;
      long long v4 = *(_OWORD *)(result + 32);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(result + 16);
      *(_OWORD *)(a2 + 32) = v4;
      *(_OWORD *)a2 = v3;
    }
    else if (v2 <= 150000)
    {
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
      int v5 = *(_DWORD *)(result + 18);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32) - v2 + (v2 << 10);
      uint64_t v6 = a2 + 32;
      *(_DWORD *)(a2 + 18) = v5;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
      int v7 = v2 * *(__int16 *)(result + 20);
      if (v7 < 0) {
        HIWORD(v7) = (v7 + 0xFFFF) >> 16;
      }
      __int16 v8 = *(_WORD *)(result + 22) + HIWORD(v7);
      *(_WORD *)(a2 + 22) = v8;
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
      int v9 = (unint64_t)(2924415343 * (*(__int16 *)(result + 22) + v8) * v2) >> 32;
      size_t result = Inc_CA_Chips((v9 >> 21) + (v9 >> 31), (int *)(a2 + 32), (int *)(a2 + 28));
      *(unsigned char *)(v6 - 28) = 1;
    }
  }
  return result;
}

const char *Set_Mat_Size(const char *result, int *a2, int a3, int a4)
{
  if (a4 * a3 <= result)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  else
  {
    *(void *)a2 = 0;
    if (g_FPE_LogSeverity)
    {
      int v6 = (int)result;
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v8 = *(double *)(g_TCU + 8);
      }
      else {
        double v8 = 0.0;
      }
      size_t result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Cannot set mat to size %dx%d, number of elements only %d", "Set_Mat_Size", 71, v7, v8, a3, a4, v6);
    }
    g_FPE_AssertFlag = 1;
  }
  return result;
}

const char *VecSet_3x1(const char *result, uint64_t a2, double a3, double a4, double a5)
{
  int v6 = result;
  if (result > 2)
  {
    *(void *)a2 = 0x100000003;
    *(double *)(a2 + 8) = a3;
    *(double *)(a2 + 16) = a4;
    *(double *)(a2 + 24) = a5;
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v8 = *(double *)(g_TCU + 8);
      }
      else {
        double v8 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Vout has %d elements, while %d are required!", "VecSet_3x1", 93, v7, v8, v6, 3);
    }
    g_FPE_AssertFlag = 1;
    return Set_Mat_Size(v6, (int *)a2, 0, 0);
  }
  return result;
}

void Mult_Mat_Mat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  double v10 = (int *)v9;
  double v11 = v7;
  int v12 = (const double *)v6;
  __C[2601] = *(double *)MEMORY[0x263EF8340];
  if (v6 && v7 && v9)
  {
    int v13 = *(_DWORD *)v6;
    int v14 = *(_DWORD *)(v6 + 4);
    int v16 = *(_DWORD *)v7;
    int __ldc = *((_DWORD *)v7 + 1);
    if (*(_DWORD *)v7 == v14)
    {
      int v17 = v8;
      if (__ldc * v13 > v8)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!");
        }
LABEL_27:
        g_FPE_AssertFlag = 1;
        Set_Mat_Size(v17, v10, 0, 0);
        return;
      }
      if ((__ldc * v13) >= 0xA2A)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f output matrix is too big to fit allocated temp memory! %dx%d");
        }
        goto LABEL_27;
      }
      if (v9 == v6 || (const double *)v9 == v7)
      {
        bzero(__C, 0x5148uLL);
        v22[0] = v13;
        v22[1] = __ldc;
        cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v13, __ldc, v14, 1.0, v12 + 1, v14, v11 + 1, __ldc, 0.0, __C, __ldc);
        Copy_Mat(2601, v22, v17, v10);
      }
      else
      {
        *(_DWORD *)uint64_t v9 = v13;
        *(_DWORD *)(v9 + 4) = __ldc;
        cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v13, __ldc, v14, 1.0, (const double *)(v6 + 8), *(_DWORD *)(v6 + 4), v7 + 1, *((_DWORD *)v7 + 1), 0.0, (double *)(v9 + 8), __ldc);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v21 = *(double *)(g_TCU + 8);
        }
        else {
          double v21 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "Mult_Mat_Mat", 231, v20, v21, v13, v14, v16, __ldc);
      }
      g_FPE_AssertFlag = 1;
      *(void *)double v10 = 0;
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v19 = *(double *)(g_TCU + 8);
      }
      else {
        double v19 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input matrices are NULL: Mat1=%p, Mat2=%p, Mout=%p", "Mult_Mat_Mat", 219, v18, v19, v12, v11, v10);
    }
    g_FPE_AssertFlag = 1;
  }
}

void Copy_Mat(uint64_t a1, int *a2, const char *a3, int *a4)
{
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 > 0x33 || v6 >= 0x34)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v11 = *(double *)(g_TCU + 8);
      }
      else {
        double v11 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix too big: %dx%d", "Copy_Mat", 2176, v10, v11, v5, v6);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a4 = 0;
  }
  else if ((int)v6 * v5 <= a3)
  {
    *a4 = v5;
    a4[1] = v6;
    if (v5)
    {
      int v12 = 0;
      for (int i = 0; i != v5; ++i)
      {
        if (v6)
        {
          unsigned int v14 = a2[1] * i;
          int v15 = v12;
          uint64_t v16 = v6;
          do
          {
            *(void *)&a4[2 * v15++ + 2] = *(void *)&a2[2 * v14++ + 2];
            --v16;
          }
          while (v16);
        }
        v12 += v6;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v9 = *(double *)(g_TCU + 8);
      }
      else {
        double v9 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Copy_Mat", 2184, v8, v9, a3, v6 * v5);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a3, a4, 0, 0);
  }
}

void Mult_MatT_Mat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  unint64_t v10 = (int *)v9;
  double v11 = v7;
  int v12 = (const double *)v6;
  __C[2601] = *(double *)MEMORY[0x263EF8340];
  if (v6 && v7 && v9)
  {
    int v14 = *(_DWORD *)v6;
    int v13 = *(_DWORD *)(v6 + 4);
    int v16 = *(_DWORD *)v7;
    int __ldc = *((_DWORD *)v7 + 1);
    if (*(_DWORD *)v7 == *(_DWORD *)v6)
    {
      int v17 = v8;
      if (__ldc * v13 > v8)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!");
        }
LABEL_27:
        g_FPE_AssertFlag = 1;
        Set_Mat_Size(v17, v10, 0, 0);
        return;
      }
      if ((__ldc * v13) >= 0xA2A)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f output matrix is too big to fit allocated temp memory! %dx%d");
        }
        goto LABEL_27;
      }
      if (v9 == v6 || (const double *)v9 == v7)
      {
        bzero(__C, 0x5148uLL);
        v22[0] = v13;
        v22[1] = __ldc;
        cblas_dgemm(CblasRowMajor, CblasTrans, CblasNoTrans, v13, __ldc, v14, 1.0, v12 + 1, v13, v11 + 1, __ldc, 0.0, __C, __ldc);
        Copy_Mat(2601, v22, v17, v10);
      }
      else
      {
        *(_DWORD *)uint64_t v9 = v13;
        *(_DWORD *)(v9 + 4) = __ldc;
        cblas_dgemm(CblasRowMajor, CblasTrans, CblasNoTrans, v13, __ldc, v14, 1.0, (const double *)(v6 + 8), *(_DWORD *)(v6 + 4), v7 + 1, *((_DWORD *)v7 + 1), 0.0, (double *)(v9 + 8), __ldc);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v21 = *(double *)(g_TCU + 8);
        }
        else {
          double v21 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "Mult_MatT_Mat", 301, v20, v21, v14, v13, v16, __ldc);
      }
      g_FPE_AssertFlag = 1;
      *(void *)unint64_t v10 = 0;
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v19 = *(double *)(g_TCU + 8);
      }
      else {
        double v19 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input matrices are NULL: Mat1=%p, Mat2=%p, Mout=%p", "Mult_MatT_Mat", 285, v18, v19, v12, v11, v10);
    }
    g_FPE_AssertFlag = 1;
  }
}

void Mult_Mat_MatT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  unint64_t v10 = (int *)v9;
  double v11 = (const double *)v7;
  int v12 = (const double *)v6;
  __C[2601] = *(double *)MEMORY[0x263EF8340];
  if (v6 && v7 && v9)
  {
    int v13 = *(_DWORD *)v6;
    int __ldb = *(_DWORD *)(v6 + 4);
    int __ldc = *(_DWORD *)v7;
    int v16 = *(_DWORD *)(v7 + 4);
    if (v16 == __ldb)
    {
      int v17 = v8;
      if (__ldc * v13 > v8)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!");
        }
LABEL_27:
        g_FPE_AssertFlag = 1;
        Set_Mat_Size(v17, v10, 0, 0);
        return;
      }
      if ((__ldc * v13) >= 0xA2A)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f output matrix is too big to fit allocated temp memory! %dx%d");
        }
        goto LABEL_27;
      }
      if (v9 == v6 || v9 == v7)
      {
        bzero(__C, 0x5148uLL);
        v22[0] = v13;
        v22[1] = __ldc;
        cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v13, __ldc, __ldb, 1.0, v12 + 1, __ldb, v11 + 1, __ldb, 0.0, __C, __ldc);
        Copy_Mat(2601, v22, v17, v10);
      }
      else
      {
        *(_DWORD *)uint64_t v9 = v13;
        *(_DWORD *)(v9 + 4) = __ldc;
        cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v13, __ldc, __ldb, 1.0, (const double *)(v6 + 8), *(_DWORD *)(v6 + 4), (const double *)(v7 + 8), *(_DWORD *)(v7 + 4), 0.0, (double *)(v9 + 8), __ldc);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v21 = *(double *)(g_TCU + 8);
        }
        else {
          double v21 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "Mult_Mat_MatT", 371, v20, v21, v13, __ldb, __ldc, v16);
      }
      g_FPE_AssertFlag = 1;
      *(void *)unint64_t v10 = 0;
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v19 = *(double *)(g_TCU + 8);
      }
      else {
        double v19 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input matrices are NULL: Mat1=%p, Mat2=%p, Mout=%p", "Mult_Mat_MatT", 354, v18, v19, v12, v11, v10);
    }
    g_FPE_AssertFlag = 1;
  }
}

void Cross_Vec_Vec(uint64_t a1, double *a2, uint64_t a3, double *a4, const char *a5, int *a6)
{
  v23[4] = *MEMORY[0x263EF8340];
  if (a2 && a4 && a6)
  {
    if (*((_DWORD *)a2 + 1) * *(_DWORD *)a2 == 3 && *((_DWORD *)a4 + 1) * *(_DWORD *)a4 == 3)
    {
      if (a5 > 2)
      {
        double v17 = a2[2];
        double v18 = a2[3];
        double v20 = a4[2];
        double v19 = a4[3];
        v23[0] = 0x100000003;
        *(double *)&v23[1] = v17 * v19 - v18 * v20;
        double v21 = a2[1];
        double v22 = a4[1];
        *(double *)&v23[2] = v18 * v22 - v21 * v19;
        *(double *)&v23[3] = v21 * v20 - v17 * v22;
        Copy_Mat(3, (int *)v23, a5, a6);
      }
      else
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v16 = *(double *)(g_TCU + 8);
          }
          else {
            double v16 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Vout has %d elements, while %d are required!", "Cross_Vec_Vec", 519, v15, v16, a5, 3);
        }
        g_FPE_AssertFlag = 1;
        Set_Mat_Size(a5, a6, 0, 0);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v11 = *(double *)(g_TCU + 8);
        }
        else {
          double v11 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices are not 3x1 or 1x3 vectors. sizes %dx%d , %dx%d are not supported!", "Cross_Vec_Vec", 511, v10, v11, *(_DWORD *)a2, *((_DWORD *)a2 + 1), *(_DWORD *)a4, *((_DWORD *)a4 + 1));
      }
      g_FPE_AssertFlag = 1;
      *(void *)a6 = 0;
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input vectors are NULL: Mat1=%p, Mat2=%p, Mout=%p", "Cross_Vec_Vec", 502, v12, v13, a2, a4, a6);
    }
    g_FPE_AssertFlag = 1;
  }
}

double Dot_Vec_Vec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a4)
  {
    if (*(_DWORD *)(a2 + 4) * *(_DWORD *)a2 == 3 && *(_DWORD *)(a4 + 4) * *(_DWORD *)a4 == 3) {
      return *(double *)(a2 + 16) * *(double *)(a4 + 16)
    }
           + *(double *)(a2 + 8) * *(double *)(a4 + 8)
           + *(double *)(a2 + 24) * *(double *)(a4 + 24);
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f inputs are not 3x1 or 1x3 vectors. sizes %dx%d , %dx%d are not supported!");
    }
  }
  else if (g_FPE_LogSeverity)
  {
    mach_continuous_time();
    LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input vectors are NULL: Mat1=%p, Mat2=%p");
  }
  g_FPE_AssertFlag = 1;
  return 0.0;
}

void ElMult_Mat_Mat(uint64_t a1, int *a2, uint64_t a3, int *a4, const char *a5, int *a6)
{
  if (a2 && a4 && a6)
  {
    int v9 = *a2;
    uint64_t v10 = a2[1];
    int v11 = *a4;
    int v12 = a4[1];
    if (*a4 == *a2 && v12 == v10)
    {
      if ((int)v10 * v9 <= a5)
      {
        *a6 = v9;
        a6[1] = v10;
        if (v9)
        {
          int v21 = 0;
          for (int i = 0; i != v9; ++i)
          {
            if (v10)
            {
              unsigned int v23 = a2[1] * i;
              unsigned int v24 = a4[1] * i;
              int v25 = v21;
              uint64_t v26 = v10;
              do
              {
                *(double *)&a6[2 * v25++ + 2] = *(double *)&a2[2 * v23++ + 2] * *(double *)&a4[2 * v24++ + 2];
                --v26;
              }
              while (v26);
            }
            v21 += v10;
          }
        }
      }
      else
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v20 = *(double *)(g_TCU + 8);
          }
          else {
            double v20 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "ElMult_Mat_Mat", 599, v19, v20, a5, v10 * v9);
        }
        g_FPE_AssertFlag = 1;
        Set_Mat_Size(a5, a6, 0, 0);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v15 = *(double *)(g_TCU + 8);
        }
        else {
          double v15 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "ElMult_Mat_Mat", 591, v14, v15, v9, v10, v11, v12);
      }
      g_FPE_AssertFlag = 1;
      *(void *)a6 = 0;
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v17 = *(double *)(g_TCU + 8);
      }
      else {
        double v17 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input matrices are NULL: Mat1=%p, Mat2=%p, Mout=%p", "ElMult_Mat_Mat", 580, v16, v17, a2, a4, a6);
    }
    g_FPE_AssertFlag = 1;
  }
}

void ElDiv_Mat_Mat(uint64_t a1, int *a2, uint64_t a3, int *a4, const char *a5, int *a6)
{
  if (a2 && a4 && a6)
  {
    int v10 = *a2;
    int v9 = a2[1];
    int v11 = *a4;
    int v12 = a4[1];
    if (*a4 == *a2 && v12 == v9)
    {
      if (v9 * v10 <= a5)
      {
        *a6 = v10;
        a6[1] = v9;
        if (v10)
        {
          int v21 = 0;
          int v22 = v9;
          int v23 = v9;
          do
          {
            if (v9)
            {
              int v24 = 0;
              int v25 = a4[1];
              do
              {
                uint64_t v26 = (v24 + v21 * v25);
                double v27 = *(double *)&a4[2 * v26 + 2];
                if (fabs(v27) <= 1.0e-30)
                {
                  if (g_FPE_LogSeverity)
                  {
                    uint64_t v28 = mach_continuous_time();
                    if (g_TCU) {
                      double v29 = *(double *)(g_TCU + 8);
                    }
                    else {
                      double v29 = 0.0;
                    }
                    LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "ElDiv_Mat_Mat", 660, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), v29, *(double *)&a4[2 * (v24 + v21 * a4[1]) + 2], 1.0e-30);
                    int v25 = a4[1];
                    int v22 = a6[1];
                    uint64_t v26 = (v24 + v21 * v25);
                  }
                  g_FPE_AssertFlag = 1;
                  *(void *)&a4[2 * v26 + 2] = 0x3FF0000000000000;
                  double v27 = 1.0;
                  int v23 = v22;
                }
                *(double *)&a6[2 * (v24 + v21 * v23) + 2] = *(double *)&a2[2 * (v24 + v21 * a2[1]) + 2] / v27;
                ++v24;
              }
              while (v9 != v24);
            }
            ++v21;
          }
          while (v21 != v10);
        }
      }
      else
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v20 = *(double *)(g_TCU + 8);
          }
          else {
            double v20 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "ElDiv_Mat_Mat", 648, v19, v20, a5, v9 * v10);
        }
        g_FPE_AssertFlag = 1;
        Set_Mat_Size(a5, a6, 0, 0);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v15 = *(double *)(g_TCU + 8);
        }
        else {
          double v15 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "ElDiv_Mat_Mat", 640, v14, v15, v10, v9, v11, v12);
      }
      g_FPE_AssertFlag = 1;
      *(void *)a6 = 0;
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v17 = *(double *)(g_TCU + 8);
      }
      else {
        double v17 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input matrices are NULL: Mat1=%p, Mat2=%p, Mout=%p", "ElDiv_Mat_Mat", 629, v16, v17, a2, a4, a6);
    }
    g_FPE_AssertFlag = 1;
  }
}

void ElDiv_Mat_Mat_Cond(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, uint64_t a5, double *a6, const char *a7, int *a8)
{
  if (a2 && a4 && a8 && a6)
  {
    uint64_t v12 = *a2;
    v13.i64[0] = *(void *)a4;
    v13.i64[1] = *(void *)a4;
    v14.i64[0] = *a2;
    v14.i64[1] = *(uint64_t *)a6;
    if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v14, v13)), 0xFuLL))))
    {
      int v20 = HIDWORD(*a2);
      int v21 = HIDWORD(v12) * v12;
      if (HIDWORD(v12) * (int)v12 <= a7)
      {
        *(void *)a8 = v12;
        if (v12)
        {
          int v24 = 0;
          int v25 = HIDWORD(v12);
          int v35 = v12;
          do
          {
            if (v20)
            {
              for (int i = 0; i != v20; ++i)
              {
                if (a6[(i + v24 * *((_DWORD *)a6 + 1)) + 1] == 0.0)
                {
                  double v31 = 0.0;
                }
                else
                {
                  uint64_t v27 = (i + v24 * a4[1]);
                  double v28 = *(double *)&a4[2 * v27 + 2];
                  if (fabs(v28) <= 1.0e-30)
                  {
                    if (g_FPE_LogSeverity)
                    {
                      uint64_t v29 = mach_continuous_time();
                      if (g_TCU) {
                        double v30 = *(double *)(g_TCU + 8);
                      }
                      else {
                        double v30 = 0.0;
                      }
                      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "ElDiv_Mat_Mat_Cond", 719, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), v30, *(double *)&a4[2 * (i + v24 * a4[1]) + 2], 1.0e-30);
                      int v25 = a8[1];
                      uint64_t v27 = (i + v24 * a4[1]);
                    }
                    g_FPE_AssertFlag = 1;
                    *(void *)&a4[2 * v27 + 2] = 0x3FF0000000000000;
                    double v28 = 1.0;
                  }
                  double v31 = *(double *)&a2[(i + v24 * *((_DWORD *)a2 + 1)) + 1] / v28;
                }
                *(double *)&a8[2 * (i + v24 * v25) + 2] = v31;
              }
            }
            ++v24;
          }
          while (v24 != v35);
        }
      }
      else
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v23 = *(double *)(g_TCU + 8);
          }
          else {
            double v23 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "ElDiv_Mat_Mat_Cond", 704, v22, v23, a7, v21);
        }
        g_FPE_AssertFlag = 1;
        Set_Mat_Size(a7, a8, 0, 0);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        uint64_t v32 = *(void *)a4;
        uint64_t v33 = *(void *)a6;
        uint64_t v34 = *a2;
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v16 = *(double *)(g_TCU + 8);
        }
        else {
          double v16 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d, %dx%d", "ElDiv_Mat_Mat_Cond", 696, v15, v16, v34, HIDWORD(v34), v32, HIDWORD(v32), v33, HIDWORD(v33));
      }
      g_FPE_AssertFlag = 1;
      *(void *)a8 = 0;
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v18 = *(double *)(g_TCU + 8);
      }
      else {
        double v18 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input matrices are NULL: Mat1=%p, Mat2=%p, Mout=%p, Mcond=%p", "ElDiv_Mat_Mat_Cond", 683, v17, v18, a2, a4, a8, a6);
    }
    g_FPE_AssertFlag = 1;
  }
}

void Sqrt_Mat(uint64_t a1, int *a2, const char *a3, int *a4)
{
  if (a2 && a4)
  {
    int v7 = *a2;
    int v8 = a2[1];
    unsigned int v9 = v8 * *a2;
    if (v9 <= a3)
    {
      *a4 = v7;
      a4[1] = v8;
      if (v7)
      {
        int v14 = 0;
        int v15 = v8;
        int v20 = v7;
        do
        {
          if (v8)
          {
            for (int i = 0; i != v8; ++i)
            {
              double v17 = *(double *)&a2[2 * (i + v14 * a2[1]) + 2];
              if (v17 < 0.0)
              {
                if (g_FPE_LogSeverity)
                {
                  uint64_t v18 = mach_continuous_time();
                  if (g_TCU) {
                    double v19 = *(double *)(g_TCU + 8);
                  }
                  else {
                    double v19 = 0.0;
                  }
                  LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "Sqrt_Mat", 766, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), v19, v17);
                  int v15 = a4[1];
                }
                g_FPE_AssertFlag = 1;
                double v17 = 1.0;
              }
              *(double *)&a4[2 * (i + v14 * v15) + 2] = sqrt(v17);
            }
          }
          ++v14;
        }
        while (v14 != v20);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v11 = *(double *)(g_TCU + 8);
        }
        else {
          double v11 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Sqrt_Mat", 751, v10, v11, a3, v9);
      }
      g_FPE_AssertFlag = 1;
      Set_Mat_Size(a3, a4, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input matrices are NULL: Min=%p, Mout=%p", "Sqrt_Mat", 742, v12, v13, a2, a4);
    }
    g_FPE_AssertFlag = 1;
  }
}

void Transpose_Mat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  unsigned int v9 = v8;
  unint64_t v10 = v6;
  v24[1024] = *MEMORY[0x263EF8340];
  if (v6 && v8)
  {
    double v11 = v7;
    int v12 = *v6;
    uint64_t v13 = v6[1];
    if ((int)v13 * *v6 <= v7)
    {
      bzero(v24, 0x2000uLL);
      v23[0] = v13;
      v23[1] = v12;
      if (v12)
      {
        unsigned int v18 = 0;
        for (int i = 0; i != v12; ++i)
        {
          unsigned int v20 = v18;
          int v21 = i;
          uint64_t v22 = v13;
          if (v13)
          {
            do
            {
              *(void *)&v23[2 * v21 + 2] = v10[v20 + 1];
              v21 += v12;
              ++v20;
              --v22;
            }
            while (v22);
          }
          v18 += v13;
        }
      }
      Copy_Mat(1024, v23, v11, v9);
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v15 = *(double *)(g_TCU + 8);
        }
        else {
          double v15 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Transpose_Mat", 795, v14, v15, v11, v13 * v12);
      }
      g_FPE_AssertFlag = 1;
      Set_Mat_Size(v11, v9, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v17 = *(double *)(g_TCU + 8);
      }
      else {
        double v17 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input matrices are NULL: Min=%p, Mout=%p", "Transpose_Mat", 786, v16, v17, v10, v9);
    }
    g_FPE_AssertFlag = 1;
  }
}

void Sub_Mat(uint64_t a1, int *a2, uint64_t a3, int *a4, const char *a5, int *a6)
{
  int v7 = *a2;
  uint64_t v8 = a2[1];
  int v9 = *a4;
  int v10 = a4[1];
  if (*a2 == *a4 && v8 == v10)
  {
    if ((int)v8 * v7 <= a5)
    {
      *a6 = v7;
      a6[1] = v8;
      if (v7)
      {
        int v17 = 0;
        for (int i = 0; i != v7; ++i)
        {
          if (v8)
          {
            unsigned int v19 = a2[1] * i;
            unsigned int v20 = a4[1] * i;
            int v21 = v17;
            uint64_t v22 = v8;
            do
            {
              *(double *)&a6[2 * v21++ + 2] = *(double *)&a2[2 * v19++ + 2] - *(double *)&a4[2 * v20++ + 2];
              --v22;
            }
            while (v22);
          }
          v17 += v8;
        }
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v16 = *(double *)(g_TCU + 8);
        }
        else {
          double v16 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Sub_Mat", 841, v15, v16, a5, v8 * v7);
      }
      g_FPE_AssertFlag = 1;
      Set_Mat_Size(a5, a6, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "Sub_Mat", 833, v12, v13, v7, v8, v9, v10);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a6 = 0;
  }
}

void Add_Mat(uint64_t a1, int *a2, uint64_t a3, int *a4, const char *a5, int *a6)
{
  int v7 = *a2;
  uint64_t v8 = a2[1];
  int v9 = *a4;
  int v10 = a4[1];
  if (*a2 == *a4 && v8 == v10)
  {
    if ((int)v8 * v7 <= a5)
    {
      *a6 = v7;
      a6[1] = v8;
      if (v7)
      {
        int v17 = 0;
        for (int i = 0; i != v7; ++i)
        {
          if (v8)
          {
            unsigned int v19 = a2[1] * i;
            unsigned int v20 = a4[1] * i;
            int v21 = v17;
            uint64_t v22 = v8;
            do
            {
              *(double *)&a6[2 * v21++ + 2] = *(double *)&a2[2 * v19++ + 2] + *(double *)&a4[2 * v20++ + 2];
              --v22;
            }
            while (v22);
          }
          v17 += v8;
        }
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v16 = *(double *)(g_TCU + 8);
        }
        else {
          double v16 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Add_Mat", 884, v15, v16, a5, v8 * v7);
      }
      g_FPE_AssertFlag = 1;
      Set_Mat_Size(a5, a6, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "Add_Mat", 876, v12, v13, v7, v8, v9, v10);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a6 = 0;
  }
}

void Add_Mat_ScalarMult(double a1, uint64_t a2, int *a3, uint64_t a4, int *a5, const char *a6, int *a7)
{
  int v8 = *a3;
  uint64_t v9 = a3[1];
  int v10 = *a5;
  int v11 = a5[1];
  if (*a3 == *a5 && v9 == v11)
  {
    if ((int)v9 * v8 <= a6)
    {
      *a7 = v8;
      a7[1] = v9;
      if (v8)
      {
        int v18 = 0;
        for (int i = 0; i != v8; ++i)
        {
          if (v9)
          {
            unsigned int v20 = a3[1] * i;
            unsigned int v21 = a5[1] * i;
            int v22 = v18;
            uint64_t v23 = v9;
            do
            {
              *(double *)&a7[2 * v22++ + 2] = *(double *)&a3[2 * v20++ + 2] + *(double *)&a5[2 * v21++ + 2] * a1;
              --v23;
            }
            while (v23);
          }
          v18 += v9;
        }
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v17 = *(double *)(g_TCU + 8);
        }
        else {
          double v17 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Add_Mat_ScalarMult", 928, v16, v17, a6, v9 * v8);
      }
      g_FPE_AssertFlag = 1;
      Set_Mat_Size(a6, a7, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v14 = *(double *)(g_TCU + 8);
      }
      else {
        double v14 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "Add_Mat_ScalarMult", 920, v13, v14, v8, v9, v10, v11);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a7 = 0;
  }
}

void Min_Mat_Mat(uint64_t a1, int *a2, uint64_t a3, int *a4, const char *a5, int *a6)
{
  int v7 = *a2;
  uint64_t v8 = a2[1];
  int v9 = *a4;
  int v10 = a4[1];
  if (*a2 == *a4 && v8 == v10)
  {
    if ((int)v8 * v7 <= a5)
    {
      *a6 = v7;
      a6[1] = v8;
      if (v7)
      {
        int v17 = 0;
        for (int i = 0; i != v7; ++i)
        {
          if (v8)
          {
            unsigned int v19 = a2[1] * i;
            unsigned int v20 = a4[1] * i;
            int v21 = v17;
            uint64_t v22 = v8;
            do
            {
              double v23 = *(double *)&a2[2 * v19 + 2];
              if (v23 >= *(double *)&a4[2 * v20 + 2]) {
                double v23 = *(double *)&a4[2 * v20 + 2];
              }
              *(double *)&a6[2 * v21++ + 2] = v23;
              ++v20;
              ++v19;
              --v22;
            }
            while (v22);
          }
          v17 += v8;
        }
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v16 = *(double *)(g_TCU + 8);
        }
        else {
          double v16 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Min_Mat_Mat", 972, v15, v16, a5, v8 * v7);
      }
      g_FPE_AssertFlag = 1;
      Set_Mat_Size(a5, a6, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "Min_Mat_Mat", 964, v12, v13, v7, v8, v9, v10);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a6 = 0;
  }
}

void Max_Mat_Mat(uint64_t a1, int *a2, uint64_t a3, int *a4, const char *a5, int *a6)
{
  int v7 = *a2;
  uint64_t v8 = a2[1];
  int v9 = *a4;
  int v10 = a4[1];
  if (*a2 == *a4 && v8 == v10)
  {
    if ((int)v8 * v7 <= a5)
    {
      *a6 = v7;
      a6[1] = v8;
      if (v7)
      {
        int v17 = 0;
        for (int i = 0; i != v7; ++i)
        {
          if (v8)
          {
            unsigned int v19 = a2[1] * i;
            unsigned int v20 = a4[1] * i;
            int v21 = v17;
            uint64_t v22 = v8;
            do
            {
              double v23 = *(double *)&a2[2 * v19 + 2];
              if (v23 <= *(double *)&a4[2 * v20 + 2]) {
                double v23 = *(double *)&a4[2 * v20 + 2];
              }
              *(double *)&a6[2 * v21++ + 2] = v23;
              ++v20;
              ++v19;
              --v22;
            }
            while (v22);
          }
          v17 += v8;
        }
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v16 = *(double *)(g_TCU + 8);
        }
        else {
          double v16 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Max_Mat_Mat", 1016, v15, v16, a5, v8 * v7);
      }
      g_FPE_AssertFlag = 1;
      Set_Mat_Size(a5, a6, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices not compatible: %dx%d , %dx%d", "Max_Mat_Mat", 1008, v12, v13, v7, v8, v9, v10);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a6 = 0;
  }
}

void Max_Mat_Scalar(double a1, uint64_t a2, int *a3, const char *a4, int *a5)
{
  int v7 = *a3;
  uint64_t v8 = a3[1];
  unsigned int v9 = v8 * *a3;
  if (v9 <= a4)
  {
    *a5 = v7;
    a5[1] = v8;
    if (v7)
    {
      int v12 = 0;
      for (int i = 0; i != v7; ++i)
      {
        if (v8)
        {
          unsigned int v14 = a3[1] * i;
          int v15 = v12;
          uint64_t v16 = v8;
          do
          {
            double v17 = *(double *)&a3[2 * v14 + 2];
            if (v17 <= a1) {
              double v17 = a1;
            }
            *(double *)&a5[2 * v15++ + 2] = v17;
            ++v14;
            --v16;
          }
          while (v16);
        }
        v12 += v8;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v11 = *(double *)(g_TCU + 8);
      }
      else {
        double v11 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Max_Mat_Scalar", 1051, v10, v11, a4, v9);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a4, a5, 0, 0);
  }
}

void Min_Mat_Scalar(double a1, uint64_t a2, int *a3, const char *a4, int *a5)
{
  int v7 = *a3;
  uint64_t v8 = a3[1];
  unsigned int v9 = v8 * *a3;
  if (v9 <= a4)
  {
    *a5 = v7;
    a5[1] = v8;
    if (v7)
    {
      int v12 = 0;
      for (int i = 0; i != v7; ++i)
      {
        if (v8)
        {
          unsigned int v14 = a3[1] * i;
          int v15 = v12;
          uint64_t v16 = v8;
          do
          {
            double v17 = *(double *)&a3[2 * v14 + 2];
            if (v17 >= a1) {
              double v17 = a1;
            }
            *(double *)&a5[2 * v15++ + 2] = v17;
            ++v14;
            --v16;
          }
          while (v16);
        }
        v12 += v8;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v11 = *(double *)(g_TCU + 8);
      }
      else {
        double v11 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Min_Mat_Scalar", 1086, v10, v11, a4, v9);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a4, a5, 0, 0);
  }
}

double Max_Vec(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v3 = *(_DWORD *)a2;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input vector is empty: %dx%d");
    }
    goto LABEL_23;
  }
  if (v3 >= 2 && v4 >= 2)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f matrix as input is not supported (input size=%dx%d) enter vector");
    }
LABEL_23:
    g_FPE_AssertFlag = 1;
    return 0.0;
  }
  double result = *(double *)(a2 + 8);
  uint64_t v8 = v4 * v3;
  if (v8 < 2)
  {
    int v10 = 0;
    if (!a3) {
      return result;
    }
    goto LABEL_22;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = v8 - 1;
  do
  {
    double v12 = *(double *)(a2 + 16 + 8 * v9++);
    if (v12 > result)
    {
      int v10 = v9;
      double result = v12;
    }
  }
  while (v11 != v9);
  if (a3) {
LABEL_22:
  }
    *a3 = v10;
  return result;
}

void Max_Vec_Cond(uint64_t a1, unsigned int *a2, uint64_t a3, int *a4, _DWORD *a5)
{
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  if (*a2) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input vector is empty: %dx%d");
    }
    goto LABEL_26;
  }
  if (v5 >= 2 && v6 >= 2)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f matrix as input is not supported (input size=%dx%d) enter vector");
    }
LABEL_26:
    g_FPE_AssertFlag = 1;
    return;
  }
  int First_NonZero_in_Vector_Starting_At = Find_First_NonZero_in_Vector_Starting_At(a3, a4, 0);
  if (First_NonZero_in_Vector_Starting_At < 0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v18 = *(double *)(g_TCU + 8);
      }
      else {
        double v18 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f conditional vector has no non-zero values!", "Max_Vec_Cond", 1183, v17, v18);
    }
    g_FPE_AssertFlag = 1;
  }
  else
  {
    double v13 = *(double *)&a2[2 * First_NonZero_in_Vector_Starting_At + 2];
    uint64_t v14 = v6 * v5;
    if (v14 >= 2)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v14 - 1;
      do
      {
        if (*(double *)&a4[2 * v15 + 4] > 0.0 && *(double *)&a2[2 * v15 + 4] > v13)
        {
          int First_NonZero_in_Vector_Starting_At = v15 + 1;
          double v13 = *(double *)&a2[2 * v15 + 4];
        }
        ++v15;
      }
      while (v16 != v15);
    }
    if (a5) {
      *a5 = First_NonZero_in_Vector_Starting_At;
    }
  }
}

uint64_t Find_First_NonZero_in_Vector_Starting_At(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  int v4 = a2[1];
  if (*a2 != 1 && v4 != 1)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v8 = *(double *)(g_TCU + 8);
      }
      else {
        double v8 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input is not a vector! std::string::size_type size = %dx%d", "Find_First_NonZero_in_Vector_Starting_At", 2818, v7, v8, v3, v4);
    }
    g_FPE_AssertFlag = 1;
    return 0xFFFFFFFFLL;
  }
  if (v4 * v3 <= a3) {
    return 0xFFFFFFFFLL;
  }
  for (int i = (double *)&a2[2 * a3 + 2]; *i == 0.0; ++i)
  {
    a3 = (a3 + 1);
    if (v4 * v3 == a3) {
      return 0xFFFFFFFFLL;
    }
  }
  return a3;
}

void Min_Vec_Cond(uint64_t a1, unsigned int *a2, uint64_t a3, int *a4, _DWORD *a5)
{
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  if (*a2) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input vector is empty: %dx%d");
    }
    goto LABEL_26;
  }
  if (v5 >= 2 && v6 >= 2)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f matrix as input is not supported (input size=%dx%d) enter vector");
    }
LABEL_26:
    g_FPE_AssertFlag = 1;
    return;
  }
  int First_NonZero_in_Vector_Starting_At = Find_First_NonZero_in_Vector_Starting_At(a3, a4, 0);
  if (First_NonZero_in_Vector_Starting_At < 0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v18 = *(double *)(g_TCU + 8);
      }
      else {
        double v18 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f conditional vector has no non-zero values!", "Min_Vec_Cond", 1236, v17, v18);
    }
    g_FPE_AssertFlag = 1;
  }
  else
  {
    double v13 = *(double *)&a2[2 * First_NonZero_in_Vector_Starting_At + 2];
    uint64_t v14 = v6 * v5;
    if (v14 >= 2)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v14 - 1;
      do
      {
        if (*(double *)&a4[2 * v15 + 4] > 0.0 && *(double *)&a2[2 * v15 + 4] < v13)
        {
          int First_NonZero_in_Vector_Starting_At = v15 + 1;
          double v13 = *(double *)&a2[2 * v15 + 4];
        }
        ++v15;
      }
      while (v16 != v15);
    }
    if (a5) {
      *a5 = First_NonZero_in_Vector_Starting_At;
    }
  }
}

const char *Set_Mat_Const(const char *result, unsigned int a2, const char *a3, int *a4, double a5)
{
  int v7 = (int)result;
  if (result > 0x33 || a2 >= 0x34)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v12 = *(double *)(g_TCU + 8);
      }
      else {
        double v12 = 0.0;
      }
      double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix too big: %dx%d", "Set_Mat_Const", 1319, v11, v12, v7, a2);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a4 = 0;
  }
  else if (a2 * result <= a3)
  {
    *a4 = (int)result;
    a4[1] = a2;
    if (result)
    {
      int v13 = 0;
      int v14 = 0;
      do
      {
        int v15 = v13;
        uint64_t v16 = a2;
        if (a2)
        {
          do
          {
            *(double *)&a4[2 * v15++ + 2] = a5;
            --v16;
          }
          while (v16);
        }
        ++v14;
        v13 += a2;
      }
      while (v14 != result);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v10 = *(double *)(g_TCU + 8);
      }
      else {
        double v10 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Set_Mat_Const", 1327, v9, v10, a3, a2 * v7);
    }
    g_FPE_AssertFlag = 1;
    return Set_Mat_Size(a3, a4, 0, 0);
  }
  return result;
}

void Set_Mat_Const_Cond(double a1, uint64_t a2, uint32x2_t *a3, const char *a4, int *a5)
{
  uint32x2_t v5 = *a3;
  uint32x2_t v6 = *(uint32x2_t *)a5;
  *(uint32x2_t *)v7.i8 = *a3;
  v7.i64[1] = *(void *)a5;
  v8.i64[0] = 0x3300000033;
  v8.i64[1] = 0x3300000033;
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(v7, v8))))
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix too big: cond:%dx%d , out:%dx%d");
    }
LABEL_20:
    g_FPE_AssertFlag = 1;
    return;
  }
  int v9 = (int)*a3;
  int v10 = HIDWORD(*(unint64_t *)a3);
  if ((vcgt_u32(v5, v6).u8[0] & 1) != 0 || v5.i32[1] > (unsigned __int32)v6.i32[1])
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix too big: %dx%d");
    }
    goto LABEL_20;
  }
  if (v5.i32[1] * v5.i32[0] <= a4)
  {
    if (v5.i32[0])
    {
      unsigned int v15 = 0;
      int v16 = 0;
      int v17 = 0;
      do
      {
        unsigned int v18 = v15;
        int v19 = v16;
        uint64_t v20 = v5.u32[1];
        if (v5.i32[1])
        {
          do
          {
            if (*(double *)&a3[v18 + 1] > 0.0) {
              *(double *)&a5[2 * v19 + 2] = a1;
            }
            ++v19;
            ++v18;
            --v20;
          }
          while (v20);
        }
        ++v17;
        v16 += v6.i32[1];
        v15 += v5.u32[1];
      }
      while (v17 != v5.i32[0]);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v14 = *(double *)(g_TCU + 8);
      }
      else {
        double v14 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Set_Mat_Const_Cond", 1378, v13, v14, a4, v10 * v9);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a4, a5, 0, 0);
  }
}

const char *Set_Mat_I(const char *result, const char *a2, int *a3, double a4)
{
  unsigned int v5 = result;
  if (result < 0x34)
  {
    if ((int)result * (int)result <= a2)
    {
      *a3 = (int)result;
      a3[1] = (int)result;
      double result = Set_Mat_Const(result, result, a2, a3, 0.0);
      if (v5)
      {
        int v12 = 0;
        int v13 = a3[1] + 1;
        uint64_t v14 = v5;
        do
        {
          *(double *)&a3[2 * v12 + 2] = a4;
          v12 += v13;
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v10 = *(double *)(g_TCU + 8);
        }
        else {
          double v10 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Set_Mat_I", 1416, v9, v10, a2, v5 * v5);
      }
      g_FPE_AssertFlag = 1;
      return Set_Mat_Size(a2, a3, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v7 = *(double *)(g_TCU + 8);
      }
      else {
        double v7 = 0.0;
      }
      double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix too big: %dx%d", "Set_Mat_I", 1408, v6, v7, v5, v5);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a3 = 0;
  }
  return result;
}

void Exp_Mat(double a1, uint64_t a2, int *a3, const char *a4, int *a5)
{
  int v7 = *a3;
  uint64_t v8 = a3[1];
  if ((int)v8 * *a3 <= a4)
  {
    *a5 = v7;
    a5[1] = v8;
    if (v7)
    {
      int v13 = 0;
      for (int i = 0; i != v7; ++i)
      {
        if (v8)
        {
          unsigned int v15 = a3[1] * i;
          uint64_t v16 = v8;
          int v17 = v13;
          do
          {
            *(long double *)&a5[2 * v17++ + 2] = exp(*(double *)&a3[2 * v15++ + 2] * a1);
            --v16;
          }
          while (v16);
        }
        v13 += v8;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v10 = *(double *)(g_TCU + 8);
      }
      else {
        double v10 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Exp_Mat", 1447, v9, v10, a4, v8 * v7);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a4, a5, 0, 0);
  }
}

void Invert_Mat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v114 = *MEMORY[0x263EF8340];
  double v10 = (const char *)*(unsigned int *)v6;
  unsigned int v9 = *((_DWORD *)v6 + 1);
  if (v10 == v9)
  {
    unint64_t v11 = v8;
    int v12 = v7;
    if ((int)v10 * (int)v10 <= v7)
    {
      int v17 = v6;
      if (v10 == 1)
      {
        *(void *)uint64_t v8 = 0x100000001;
        double v18 = v6[1];
        if (fabs(v18) <= 1.0e-30)
        {
          if (g_FPE_LogSeverity)
          {
            unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v20 = *(double *)(g_TCU + 8);
            }
            else {
              double v20 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "Invert_Mat", 1495, v19, v20, v17[1], 1.0e-30);
          }
          g_FPE_AssertFlag = 1;
          v17[1] = 1.0;
          double v18 = 1.0;
        }
        v11[1] = 1.0 / v18;
      }
      else
      {
        int v98 = v8;
        bzero(&v109, 0x2008uLL);
        bzero(&v106, 0x2008uLL);
        Set_Mat_Const(v10, v10, (const char *)0x400, &v109, 0.0);
        long long v97 = v10;
        Set_Mat_Const(v10, v10, (const char *)0x400, &v106, 0.0);
        unsigned int v21 = 0;
        int v99 = *((_DWORD *)v17 + 1);
        unsigned int v22 = v99 - 1;
        do
        {
          v111[v110 * v21] = v17[*((_DWORD *)v17 + 1) * v21 + 1];
          double v23 = v111[0];
          if (fabs(v111[0]) <= 1.0e-30)
          {
            if (g_FPE_LogSeverity)
            {
              uint64_t v24 = mach_continuous_time();
              if (g_TCU) {
                double v25 = *(double *)(g_TCU + 8);
              }
              else {
                double v25 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "LU_decomp_Mat", 1540, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), v25, v111[0], 1.0e-30);
            }
            g_FPE_AssertFlag = 1;
            v111[0] = 1.0;
            double v23 = 1.0;
          }
          *(double *)&v108[v21] = v17[v21 + 1] / v23;
          int v26 = v107;
          v108[v21 + v21 * v107] = 0x3FF0000000000000;
          ++v21;
        }
        while (v21 <= v22);
        unsigned int v100 = v99 - 2;
        if (v100)
        {
          unsigned int v27 = 1;
          do
          {
            unsigned int v28 = v27;
            if (v27 <= 1uLL) {
              uint64_t v29 = 1;
            }
            else {
              uint64_t v29 = v27;
            }
            if (v27 <= v22)
            {
              int v30 = *((_DWORD *)v17 + 1);
              unsigned int v31 = v110;
              unsigned int v32 = v110 * v27;
              unsigned int v33 = v27;
              do
              {
                double v34 = v17[v27 + 1 + v33 * v30];
                int v35 = &v109 + 2 * v27 + 2 * v33 * v31;
                *((double *)v35 + 1) = v34;
                unsigned int v36 = (double *)(v35 + 2);
                unsigned int v37 = v32;
                unsigned int v38 = v27;
                uint64_t v39 = v29;
                do
                {
                  double v34 = v34 - v111[v37] * *(double *)&v108[v38];
                  *unsigned int v36 = v34;
                  v38 += v26;
                  ++v37;
                  --v39;
                }
                while (v39);
                ++v33;
                v32 += v31;
              }
              while (v33 <= v22);
            }
            if (++v27 <= v22)
            {
              unsigned int v40 = v110;
              unsigned int v41 = v28 + 1;
              do
              {
                double v42 = v17[v41 + 1 + *((_DWORD *)v17 + 1) * v28];
                unint64_t v43 = &v106 + 2 * v41 + 2 * v26 * v28;
                *((double *)v43 + 1) = v42;
                unsigned __int16 v44 = (double *)(v43 + 2);
                int v45 = v28 * v40;
                unsigned int v46 = v41;
                uint64_t v47 = v29;
                do
                {
                  double v42 = v42 - v111[v45] * *(double *)&v108[v46];
                  *unsigned __int16 v44 = v42;
                  v46 += v26;
                  ++v45;
                  --v47;
                }
                while (v47);
                uint64_t v48 = v28 + v28 * v40;
                double v49 = v111[v48];
                if (fabs(v49) <= 1.0e-30)
                {
                  if (g_FPE_LogSeverity)
                  {
                    uint64_t v50 = mach_continuous_time();
                    if (g_TCU) {
                      double v51 = *(double *)(g_TCU + 8);
                    }
                    else {
                      double v51 = 0.0;
                    }
                    LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "LU_decomp_Mat", 1562, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), v51, v111[v28 + v28 * v110], 1.0e-30);
                    unsigned int v40 = v110;
                    int v26 = v107;
                    uint64_t v48 = v28 + v28 * v110;
                  }
                  g_FPE_AssertFlag = 1;
                  v111[v48] = 1.0;
                  double v49 = 1.0;
                }
                uint64_t v52 = &v106 + 2 * v41 + 2 * v26 * v28;
                *((double *)v52 + 1) = *((double *)v52 + 1) / v49;
                ++v41;
              }
              while (v41 <= v22);
            }
          }
          while (v27 <= v100);
        }
        double v53 = v17[v22 + 1 + v22 * *((_DWORD *)v17 + 1)];
        unsigned int v54 = v110 * v22;
        double v55 = &v109 + 2 * v22 + 2 * v110 * v22;
        *((double *)v55 + 1) = v53;
        double v56 = (double *)(v55 + 2);
        if (v22 <= 1) {
          uint64_t v57 = 1;
        }
        else {
          uint64_t v57 = v22;
        }
        do
        {
          double v53 = v53 - v111[v54] * *(double *)&v108[v22];
          *double v56 = v53;
          v22 += v26;
          ++v54;
          --v57;
        }
        while (v57);
        LODWORD(v58) = v97;
        *(_DWORD *)int v98 = v97;
        *((_DWORD *)v98 + 1) = v97;
        uint64_t v105 = 0;
        memset(v104, 0, sizeof(v104));
        uint64_t v103 = 0;
        memset(v102, 0, sizeof(v102));
        if (v97)
        {
          unint64_t v59 = 0;
          do
          {
            unint64_t v101 = v59 + 1;
            if (v59 < 0x20)
            {
              Set_Vec_Zeros(v58, (const char *)0x20, (int *)v104);
              *((void *)v104 + v59 + 1) = 0x3FF0000000000000;
            }
            else
            {
              if (g_FPE_LogSeverity)
              {
                uint64_t v60 = mach_continuous_time();
                if (g_TCU) {
                  double v61 = *(double *)(g_TCU + 8);
                }
                else {
                  double v61 = 0.0;
                }
                LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f x has %d elements, while %d are required!", "Set_Vec_one_1", 1675, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), v61, 32, v59 + 1);
              }
              g_FPE_AssertFlag = 1;
              Set_Mat_Size((const char *)0x20, (int *)v104, 0, 0);
            }
            uint64_t v113 = 0;
            memset(v112, 0, sizeof(v112));
            unsigned int v62 = v110;
            Set_Vec_Zeros(v110, (const char *)0x20, (int *)v102);
            Set_Vec_Zeros(v62, (const char *)0x20, (int *)v112);
            double v63 = v111[0];
            if (fabs(v111[0]) <= 1.0e-30)
            {
              if (g_FPE_LogSeverity)
              {
                uint64_t v64 = mach_continuous_time();
                if (g_TCU) {
                  double v65 = *(double *)(g_TCU + 8);
                }
                else {
                  double v65 = 0.0;
                }
                LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "LU_solve_Vec", 1596, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v64), v65, v111[0], 1.0e-30);
              }
              g_FPE_AssertFlag = 1;
              v111[0] = 1.0;
              double v63 = 1.0;
            }
            double v66 = *((double *)v104 + 1) / v63;
            *((double *)v112 + 1) = v66;
            unsigned int v67 = v62 - 1;
            if (v62 == 1)
            {
              *((double *)v102 + 1) = v66;
            }
            else
            {
              unsigned int v68 = 1;
              unsigned int v69 = v110;
              do
              {
                uint64_t v70 = v68;
                if (v68 <= 1uLL) {
                  uint64_t v70 = 1;
                }
                double v71 = *((double *)v104 + v68 + 1);
                double v72 = (double *)v112 + v68;
                v72[1] = v71;
                double v73 = v72 + 1;
                int v74 = v69 * v68;
                long long v75 = (double *)v112 + 1;
                do
                {
                  double v76 = *v75++;
                  double v71 = v71 - v111[v74] * v76;
                  *double v73 = v71;
                  ++v74;
                  --v70;
                }
                while (v70);
                uint64_t v77 = v68 + v68 * v69;
                double v78 = v111[v77];
                if (fabs(v78) <= 1.0e-30)
                {
                  if (g_FPE_LogSeverity)
                  {
                    uint64_t v79 = mach_continuous_time();
                    if (g_TCU) {
                      double v80 = *(double *)(g_TCU + 8);
                    }
                    else {
                      double v80 = 0.0;
                    }
                    LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "LU_solve_Vec", 1605, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v79), v80, v111[v68 + v68 * v110], 1.0e-30);
                    unsigned int v69 = v110;
                    double v71 = *v73;
                    uint64_t v77 = v68 + v68 * v110;
                  }
                  g_FPE_AssertFlag = 1;
                  v111[v77] = 1.0;
                  double v78 = 1.0;
                }
                *double v73 = v71 / v78;
                ++v68;
              }
              while (v68 <= v67);
              *((void *)v102 + v67 + 1) = *((void *)v112 + v67 + 1);
              unsigned int v81 = v62 - 2;
              if (v62 >= 2)
              {
                int v82 = v107 * v81 - 1;
                int v83 = ~v107;
                int v84 = -1;
                do
                {
                  double v85 = *((double *)v112 + v81 + 1);
                  long long v86 = (double *)v102 + v81;
                  v86[1] = v85;
                  long long v87 = v86 + 1;
                  int v88 = v82;
                  int v89 = v84;
                  if (v81 < v67)
                  {
                    do
                    {
                      double v85 = v85 - *(double *)&v108[v62 + v88] * *((double *)v102 + v62 + v89 + 1);
                      *long long v87 = v85;
                      ++v88;
                    }
                    while (!__CFADD__(v89++, 1));
                  }
                  --v81;
                  --v84;
                  v82 += v83;
                }
                while (v81 < v62);
              }
            }
            uint64_t v91 = *(unsigned int *)v98;
            unsigned int v92 = *((_DWORD *)v98 + 1);
            if (v91 == LODWORD(v102[0]))
            {
              long long v93 = (uint64_t *)v102 + 1;
              uint64_t v58 = v97;
              if (v91)
              {
                do
                {
                  double v94 = *(double *)v93++;
                  v98[v59 + 1] = v94;
                  LODWORD(v59) = v59 + v92;
                  --v91;
                }
                while (v91);
              }
            }
            else
            {
              uint64_t v58 = v97;
              if (g_FPE_LogSeverity)
              {
                uint64_t v95 = mach_continuous_time();
                if (g_TCU) {
                  double v96 = *(double *)(g_TCU + 8);
                }
                else {
                  double v96 = 0.0;
                }
                LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f vector size doesn't match matrix size! %d -> %dx%d", "Copy_Vec_to_Mat_Col", 1698, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v95), v96, LODWORD(v102[0]), v91, v92);
              }
              g_FPE_AssertFlag = 1;
              *int v98 = 0.0;
            }
            unint64_t v59 = v101;
          }
          while ((const char *)v101 != v58);
        }
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v14 = *(double *)(g_TCU + 8);
        }
        else {
          double v14 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Ainv has %d elements, while %d are required!", "Invert_Mat", 1485, v13, v14, v12, v10 * v10);
      }
      g_FPE_AssertFlag = 1;
      Set_Mat_Size(v12, (int *)v11, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v16 = *(double *)(g_TCU + 8);
      }
      else {
        double v16 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input cannot be inverted. M=%d != N=%d", "Invert_Mat", 1479, v15, v16, v10, v9);
    }
    g_FPE_AssertFlag = 1;
  }
}

void Set_Vec_Zeros(unsigned int a1, const char *a2, int *a3)
{
  if (a1 < 0x34)
  {
    if (a2 >= a1)
    {
      *a3 = a1;
      a3[1] = 1;
      if (a1)
      {
        bzero(a3 + 2, 8 * a1);
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v9 = *(double *)(g_TCU + 8);
        }
        else {
          double v9 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f x has %d elements, while %d are required!", "Set_Vec_Zeros", 1648, v8, v9, a2, a1);
      }
      g_FPE_AssertFlag = 1;
      Set_Mat_Size(a2, a3, 0, 0);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v6 = *(double *)(g_TCU + 8);
      }
      else {
        double v6 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested vector too big: %dx%d", "Set_Vec_Zeros", 1633, v5, v6, a1, 1);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a3 = 0;
  }
}

void Copy_Vec_to_Mat_diag(uint64_t a1, int *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int *a8)
{
  int v9 = *a2;
  int v10 = a2[1];
  if (*a2 == 1 || v10 == 1)
  {
    unsigned int v12 = *a8;
    unsigned int v13 = a8[1];
    unint64_t v14 = (v10 * v9);
    if (v14) {
      BOOL v15 = v12 > a3;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15 && v13 > a4)
    {
      unsigned int v17 = a6 + a4;
      unsigned int v18 = a4 + v13 * a3;
      unsigned int v19 = a5 + a3;
      unint64_t v20 = 1;
      do
      {
        *(void *)&a8[2 * v18 + 2] = *(void *)&a2[2 * v20];
        if (v20 >= v14) {
          break;
        }
        if (v19 >= v12) {
          break;
        }
        ++v20;
        v18 += a6 + v13 * a5;
        v19 += a5;
        BOOL v21 = v17 >= v13;
        v17 += a6;
      }
      while (!v21);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v23 = *(double *)(g_TCU + 8);
      }
      else {
        double v23 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f first input is not a vector! std::string::size_type size = %dx%d", "Copy_Vec_to_Mat_diag", 1735, v22, v23, v9, v10);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a8 = 0;
  }
}

void Copy_Mat_diag_to_Vec(uint64_t a1, unsigned int *a2, unsigned int a3, int a4, uint64_t a5, _DWORD *a6)
{
  unsigned int v7 = *a2;
  unsigned int v8 = a2[1];
  if (*a2 == v8)
  {
    unsigned int v9 = a4 + a3;
    if (v7 < a4 + a3) {
      unsigned int v9 = *a2;
    }
    if (a4) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = v7;
    }
    *a6 = v10 - a3;
    a6[1] = 1;
    if (v10 > a3)
    {
      int v11 = a2[1] + 1;
      uint64_t v12 = v10 - a3;
      unsigned int v13 = a6 + 2;
      unsigned int v14 = a3 * v11;
      do
      {
        *v13++ = *(void *)&a2[2 * v14 + 2];
        v14 += v11;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v16 = *(double *)(g_TCU + 8);
      }
      else {
        double v16 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f first input is not a square matrix! std::string::size_type size = %dx%d", "Copy_Mat_diag_to_Vec", 1767, v15, v16, v7, v8);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a6 = 0;
  }
}

void Copy_SubMat_to_Mat(double a1, uint64_t a2, _DWORD *a3, int a4, int a5, uint64_t a6, int *a7)
{
  unsigned int v7 = a7[1];
  int v8 = a3[1];
  if (*a7 >= (*a3 + a4)) {
    int v9 = *a3 + a4;
  }
  else {
    int v9 = *a7;
  }
  int v10 = v9 - a4;
  int v11 = v8 + a5;
  if (v7 < v8 + a5) {
    int v11 = a7[1];
  }
  if (a1 == 1.0)
  {
    if (v9 != a4)
    {
      int v12 = 0;
      int v13 = 0;
      int v14 = a5 + v7 * a4;
      do
      {
        int v15 = v12;
        int v16 = v14;
        uint64_t v17 = (v11 - a5);
        if (v11 != a5)
        {
          do
          {
            *(void *)&a7[2 * v16++ + 2] = *(void *)&a3[2 * v15++ + 2];
            --v17;
          }
          while (v17);
        }
        ++v13;
        v14 += v7;
        v12 += v8;
      }
      while (v13 != v10);
    }
  }
  else if (v9 != a4)
  {
    int v18 = 0;
    int v19 = 0;
    int v20 = a5 + v7 * a4;
    do
    {
      int v21 = v18;
      int v22 = v20;
      uint64_t v23 = (v11 - a5);
      if (v11 != a5)
      {
        do
        {
          *(double *)&a7[2 * v22++ + 2] = *(double *)&a3[2 * v21++ + 2] * a1;
          --v23;
        }
        while (v23);
      }
      ++v19;
      v20 += v7;
      v18 += v8;
    }
    while (v19 != v10);
  }
}

void Copy_SubMat_from_Mat(double a1, uint64_t a2, _DWORD *a3, int a4, int a5, int a6, unsigned int a7, uint64_t a8, int *a9)
{
  int v13 = a4;
  if ((a6 + a4) <= *a3 && a7 + a5 <= a3[1])
  {
    *a9 = a6;
    a9[1] = a7;
    if (a6)
    {
      int v16 = 0;
      for (int i = 0; i != a6; ++i)
      {
        if (a7)
        {
          int v18 = a5 + a3[1] * v13;
          int v19 = v16;
          uint64_t v20 = a7;
          do
          {
            *(double *)&a9[2 * v19++ + 2] = *(double *)&a3[2 * v18++ + 2] * a1;
            --v20;
          }
          while (v20);
        }
        ++v13;
        v16 += a7;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v15 = *(double *)(g_TCU + 8);
      }
      else {
        double v15 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix is bigger than input matrix: m0=%d, n0=%d, size=%dx%d", "Copy_SubMat_from_Mat", 1859, v14, v15, v13, a5, a6, a7);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a9 = 0;
  }
}

void Mult_Mat_scalar(double a1, uint64_t a2, int *a3, const char *a4, int *a5)
{
  int v7 = *a3;
  uint64_t v8 = a3[1];
  unsigned int v9 = v8 * *a3;
  if (v9 <= a4)
  {
    *a5 = v7;
    a5[1] = v8;
    if (v7)
    {
      int v12 = 0;
      for (int i = 0; i != v7; ++i)
      {
        if (v8)
        {
          unsigned int v14 = a3[1] * i;
          int v15 = v12;
          uint64_t v16 = v8;
          do
          {
            *(double *)&a5[2 * v15++ + 2] = *(double *)&a3[2 * v14++ + 2] * a1;
            --v16;
          }
          while (v16);
        }
        v12 += v8;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v11 = *(double *)(g_TCU + 8);
      }
      else {
        double v11 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Mult_Mat_scalar", 2012, v10, v11, a4, v9);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a4, a5, 0, 0);
  }
}

void Mat_Eq_Scalar(double a1, uint64_t a2, int *a3, const char *a4, int *a5)
{
  int v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 > 0x33 || v7 >= 0x34)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v12 = *(double *)(g_TCU + 8);
      }
      else {
        double v12 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix too big: %dx%d", "Mat_Eq_Scalar", 2046, v11, v12, v6, v7);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a5 = 0;
  }
  else if ((int)v7 * v6 <= a4)
  {
    *a5 = v6;
    a5[1] = v7;
    if (v6)
    {
      int v13 = 0;
      for (int i = 0; i != v6; ++i)
      {
        if (v7)
        {
          unsigned int v15 = a3[1] * i;
          int v16 = v13;
          uint64_t v17 = v7;
          do
          {
            if (*(double *)&a3[2 * v15 + 2] == a1) {
              double v18 = 1.0;
            }
            else {
              double v18 = 0.0;
            }
            *(double *)&a5[2 * v16++ + 2] = v18;
            ++v15;
            --v17;
          }
          while (v17);
        }
        v13 += v7;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v10 = *(double *)(g_TCU + 8);
      }
      else {
        double v10 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Mat_Eq_Scalar", 2054, v9, v10, a4, v7 * v6);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a4, a5, 0, 0);
  }
}

void Mat_Greater_than_Scalar(double a1, uint64_t a2, int *a3, const char *a4, int *a5)
{
  int v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 > 0x33 || v7 >= 0x34)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v12 = *(double *)(g_TCU + 8);
      }
      else {
        double v12 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix too big: %dx%d", "Mat_Greater_than_Scalar", 2090, v11, v12, v6, v7);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a5 = 0;
  }
  else if ((int)v7 * v6 <= a4)
  {
    *a5 = v6;
    a5[1] = v7;
    if (v6)
    {
      int v13 = 0;
      for (int i = 0; i != v6; ++i)
      {
        if (v7)
        {
          unsigned int v15 = a3[1] * i;
          int v16 = v13;
          uint64_t v17 = v7;
          do
          {
            if (*(double *)&a3[2 * v15 + 2] <= a1) {
              double v18 = 0.0;
            }
            else {
              double v18 = 1.0;
            }
            *(double *)&a5[2 * v16++ + 2] = v18;
            ++v15;
            --v17;
          }
          while (v17);
        }
        v13 += v7;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v10 = *(double *)(g_TCU + 8);
      }
      else {
        double v10 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Mat_Greater_than_Scalar", 2098, v9, v10, a4, v7 * v6);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a4, a5, 0, 0);
  }
}

uint64_t Filter_Rows_from_Mat(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int v7 = *a2;
  if (a4[1] * *a4 != *a2)
  {
    if (g_FPE_LogSeverity)
    {
      int v8 = a2[1];
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v10 = *(double *)(g_TCU + 8);
      }
      else {
        double v10 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input selector vector length does not match given matrix! length=%d, size=%dx%d", "Filter_Rows_from_Mat", 2266, v9, v10, a4[1] * *a4, v7, v8);
    }
    g_FPE_AssertFlag = 1;
  }
  uint64_t result = Find_First_NonZero_in_Vector_Starting_At(a3, a4, 0);
  if (result == -1)
  {
    int v12 = 0;
  }
  else
  {
    int v12 = 0;
    do
    {
      if (result != v12)
      {
        uint64_t v13 = a2[1];
        if (v13)
        {
          int v14 = v13 * result;
          int v15 = v13 * v12;
          do
          {
            *(void *)&a2[2 * v15++ + 2] = *(void *)&a2[2 * v14++ + 2];
            --v13;
          }
          while (v13);
        }
      }
      ++v12;
      uint64_t result = Find_First_NonZero_in_Vector_Starting_At(a3, a4, (result + 1));
    }
    while (result != -1);
  }
  *a2 = v12;
  return result;
}

void Filter_Cols_from_Mat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  int v8 = v7;
  uint64_t v10 = v9;
  int v12 = v11;
  uint64_t v13 = (const char *)v6;
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v14 = *v11;
  int v15 = v11[1];
  if (v7[1] * *v7 != v15)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v17 = *(double *)(g_TCU + 8);
      }
      else {
        double v17 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input selector vector length does not match given matrix! length=%d, size=%dx%d", "Filter_Cols_from_Mat", 2299, v16, v17, v8[1] * *v8, v14, v15);
    }
    g_FPE_AssertFlag = 1;
  }
  int First_NonZero_in_Vector_Starting_At = Find_First_NonZero_in_Vector_Starting_At(v10, v8, 0);
  if (First_NonZero_in_Vector_Starting_At == -1)
  {
    unsigned int v19 = 0;
  }
  else
  {
    unsigned int v19 = 0;
    do
    {
      if (First_NonZero_in_Vector_Starting_At != v19)
      {
        uint64_t v20 = *v12;
        if (v20)
        {
          int v21 = 0;
          unsigned int v22 = v12[1];
          do
          {
            *(void *)&v12[2 * v19 + 2 + 2 * v21] = *(void *)&v12[2 * (First_NonZero_in_Vector_Starting_At + v21) + 2];
            v21 += v22;
            --v20;
          }
          while (v20);
        }
      }
      ++v19;
      int First_NonZero_in_Vector_Starting_At = Find_First_NonZero_in_Vector_Starting_At(v10, v8, (First_NonZero_in_Vector_Starting_At + 1));
    }
    while (First_NonZero_in_Vector_Starting_At != -1);
  }
  bzero(v23, 0x2008uLL);
  Copy_SubMat_from_Mat(1.0, (uint64_t)v13, v12, 0, 0, v14, v19, 1024, v23);
  Copy_Mat(1024, v23, v13, v12);
}

double Norma2_Vec(uint64_t a1, int *a2)
{
  int v2 = *a2;
  int v3 = a2[1];
  if (*a2 != 1 && v3 != 1)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v12 = *(double *)(g_TCU + 8);
      }
      else {
        double v12 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f first input is not a vector! std::string::size_type size = %dx%d", "Norma2_Vec", 2330, v11, v12, v2, v3);
    }
    g_FPE_AssertFlag = 1;
    return 0.0;
  }
  if (!v2) {
    return 0.0;
  }
  int v5 = 0;
  int v6 = 0;
  double result = 0.0;
  do
  {
    int v8 = v5;
    uint64_t v9 = a2[1];
    if (v3)
    {
      do
      {
        double v10 = *(double *)&a2[2 * v8 + 2];
        double result = result + v10 * v10;
        ++v8;
        --v9;
      }
      while (v9);
    }
    ++v6;
    v5 += v3;
  }
  while (v6 != v2);
  return result;
}

void Sum_Mat(uint64_t a1, _DWORD *a2)
{
  if (*a2)
  {
    int v2 = 0;
    int v3 = 0;
    int v4 = a2[1];
    double v5 = 0.0;
    do
    {
      int v6 = v2;
      uint64_t v7 = a2[1];
      if (v4)
      {
        do
        {
          double v5 = v5 + *(double *)&a2[2 * v6++ + 2];
          --v7;
        }
        while (v7);
      }
      ++v3;
      v2 += v4;
    }
    while (v3 != *a2);
  }
}

void SVD_decomp(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, int *a6, const char *a7, uint64_t a8)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (!a2 || !a4 || !a6 || !a8)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f some input matrices are NULL: A=%p, U=%p, S=%p, Vt=%p");
    }
    goto LABEL_21;
  }
  Set_Mat_Size(a3, (int *)a4, 0, 0);
  Set_Mat_Size(a5, a6, 0, 0);
  Set_Mat_Size(a7, (int *)a8, 0, 0);
  __CLPK_integer v18 = *(_DWORD *)a2;
  __CLPK_integer __n = *(_DWORD *)(a2 + 4);
  __uint64_t m = v18;
  if (v18 != __n)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f A=%p is not a square matrix! M=%d, N=%d");
    }
    goto LABEL_21;
  }
  if (v18 >= 4)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f SVD_decomp should operate on [2x2] or [3x3] matrices. A is a [%dx%d] matrix");
    }
LABEL_21:
    g_FPE_AssertFlag = 1;
    return;
  }
  unsigned int v19 = v18 * v18;
  if (v18 * v18 > a3)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v21 = *(double *)(g_TCU + 8);
      }
      else {
        double v21 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f U has %d elements, while %d are required!", "SVD_decomp", 2409, v20, v21, a3, v18 * v18);
    }
    g_FPE_AssertFlag = 1;
    unsigned int v28 = a3;
    uint64_t v29 = (int *)a4;
LABEL_41:
    Set_Mat_Size(v28, v29, 0, 0);
    return;
  }
  if (v19 > a5)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v23 = *(double *)(g_TCU + 8);
      }
      else {
        double v23 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f S has %d elements, while %d are required!", "SVD_decomp", 2415, v22, v23, a5, v18 * v18);
    }
    g_FPE_AssertFlag = 1;
    unsigned int v28 = a5;
    uint64_t v29 = a6;
    goto LABEL_41;
  }
  if (v19 > a7)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v25 = *(double *)(g_TCU + 8);
      }
      else {
        double v25 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f V has %d elements, while %d are required!", "SVD_decomp", 2421, v24, v25, a7, v18 * v18);
    }
    g_FPE_AssertFlag = 1;
    unsigned int v28 = a7;
    uint64_t v29 = (int *)a8;
    goto LABEL_41;
  }
  Transpose_Mat(a1, a2, a1, a2, v16, v17);
  char __jobvt = 65;
  __CLPK_integer __ldu = v18;
  __CLPK_integer __lda = v18;
  __CLPK_integer v35 = 0;
  __CLPK_integer __ldvt = v18;
  uint64_t v44 = 0;
  memset(v43, 0, sizeof(v43));
  __lworuint64_t k = 15;
  memset(v42, 0, sizeof(v42));
  Set_Mat_Size((const char *)3, (int *)v42, 3, 1);
  dgesvd_(&__jobvt, &__jobvt, &__m, &__n, (__CLPK_doublereal *)(a2 + 8), &__lda, (__CLPK_doublereal *)v42 + 1, (__CLPK_doublereal *)(a4 + 8), &__ldu, (__CLPK_doublereal *)(a8 + 8), &__ldvt, (__CLPK_doublereal *)v43, &__lwork, &v35);
  if (v35 < 1)
  {
    Set_Mat_Size(a3, (int *)a4, __m, __m);
    Set_Mat_Size(a5, a6, __m, __m);
    Set_Mat_Size(a7, (int *)a8, __m, __m);
    Copy_Vec_to_Mat_diag(3, (int *)v42, 0, 0, 1, 1, (uint64_t)a5, (unsigned int *)a6);
    Transpose_Mat(a1, a2, a1, a2, v30, v31);
    Transpose_Mat((uint64_t)a3, a4, (uint64_t)a3, a4, v32, v33);
  }
  else if ((g_FPE_LogSeverity & 2) != 0)
  {
    unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v27 = *(double *)(g_TCU + 8);
    }
    else {
      double v27 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f The algorithm computing SVD failed to converge.\n", "SVD_decomp", 2468, v26, v27);
  }
}

uint64_t All_Mat_Greater_Than(double a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  unsigned int v4 = a3[1];
  if (*a3 > 0x33 || v4 > 0x33)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v12 = *(double *)(g_TCU + 8);
      }
      else {
        double v12 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrix dimenssions is too big! std::string::size_type size = %dx%d", "All_Mat_Greater_Than", 2501, v11, v12, v3, v4);
    }
    char v10 = 0;
    g_FPE_AssertFlag = 1;
  }
  else if (v3)
  {
    int v5 = 0;
    BOOL v6 = 0;
    unsigned int v7 = 0;
    while (1)
    {
      uint64_t v8 = a3[1];
      int v9 = v5;
      if (v4) {
        break;
      }
LABEL_8:
      ++v7;
      v5 += v4;
      char v10 = 1;
      BOOL v6 = v7 >= v3;
      if (v7 == v3) {
        return v10 & 1;
      }
    }
    while (*(double *)&a3[2 * v9 + 2] > a1)
    {
      ++v9;
      if (!--v8) {
        goto LABEL_8;
      }
    }
    char v10 = v6;
  }
  else
  {
    char v10 = 1;
  }
  return v10 & 1;
}

uint64_t All_Mat_Smaller_Than(double a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  unsigned int v4 = a3[1];
  if (*a3 > 0x33 || v4 > 0x33)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v12 = *(double *)(g_TCU + 8);
      }
      else {
        double v12 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrix dimenssions is too big! std::string::size_type size = %dx%d", "All_Mat_Smaller_Than", 2532, v11, v12, v3, v4);
    }
    char v10 = 0;
    g_FPE_AssertFlag = 1;
  }
  else if (v3)
  {
    int v5 = 0;
    BOOL v6 = 0;
    unsigned int v7 = 0;
    while (1)
    {
      uint64_t v8 = a3[1];
      int v9 = v5;
      if (v4) {
        break;
      }
LABEL_8:
      ++v7;
      v5 += v4;
      char v10 = 1;
      BOOL v6 = v7 >= v3;
      if (v7 == v3) {
        return v10 & 1;
      }
    }
    while (*(double *)&a3[2 * v9 + 2] < a1)
    {
      ++v9;
      if (!--v8) {
        goto LABEL_8;
      }
    }
    char v10 = v6;
  }
  else
  {
    char v10 = 1;
  }
  return v10 & 1;
}

BOOL Any_Mat_Equal_To(uint64_t a1, unsigned int *a2, int a3, unsigned int a4)
{
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  unsigned int v7 = v6 * *a2;
  if (a4) {
    unsigned int v7 = a4;
  }
  if (v5 > 0x33 || v6 > 0x33)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v19 = *(double *)(g_TCU + 8);
      }
      else {
        double v19 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrix dimenssions is too big! std::string::size_type size = %dx%d", "Any_Mat_Equal_To", 2573, v18, v19, v5, v6);
    }
    BOOL v17 = 0;
    g_FPE_AssertFlag = 1;
  }
  else
  {
    if (v5)
    {
      int v8 = 0;
      int v9 = 0;
      BOOL v10 = 1;
      while (!v6)
      {
LABEL_15:
        BOOL v10 = ++v8 < v5;
        if (v8 == v5) {
          goto LABEL_16;
        }
      }
      int v11 = v9 + v6;
      uint64_t v12 = a2[1];
      while (1)
      {
        BOOL v4 = v9 + 1 <= v7;
        if (v9 + 1 > v7) {
          break;
        }
        double v13 = *(double *)&a2[2 * v9 + 2];
        BOOL v14 = v13 < 0.0;
        double v15 = floor(v13 + 0.5);
        double v16 = -floor(0.5 - v13);
        if (!v14) {
          double v16 = v15;
        }
        if ((int)v16 == a3) {
          break;
        }
        ++v9;
        if (!--v12)
        {
          int v9 = v11;
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_16:
      BOOL v10 = 0;
    }
    return v10 && v4;
  }
  return v17;
}

BOOL Any_Mat_Not_Equal_To(uint64_t a1, unsigned int *a2, int a3, unsigned int a4)
{
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  unsigned int v7 = v6 * *a2;
  if (a4) {
    unsigned int v7 = a4;
  }
  if (v5 > 0x33 || v6 > 0x33)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v19 = *(double *)(g_TCU + 8);
      }
      else {
        double v19 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrix dimenssions is too big! std::string::size_type size = %dx%d", "Any_Mat_Not_Equal_To", 2619, v18, v19, v5, v6);
    }
    BOOL v17 = 0;
    g_FPE_AssertFlag = 1;
  }
  else
  {
    if (v5)
    {
      int v8 = 0;
      int v9 = 0;
      BOOL v10 = 1;
      while (!v6)
      {
LABEL_15:
        BOOL v10 = ++v8 < v5;
        if (v8 == v5) {
          goto LABEL_16;
        }
      }
      int v11 = v9 + v6;
      uint64_t v12 = a2[1];
      while (1)
      {
        BOOL v4 = v9 + 1 <= v7;
        if (v9 + 1 > v7) {
          break;
        }
        double v13 = *(double *)&a2[2 * v9 + 2];
        BOOL v14 = v13 < 0.0;
        double v15 = floor(v13 + 0.5);
        double v16 = -floor(0.5 - v13);
        if (!v14) {
          double v16 = v15;
        }
        if ((int)v16 != a3) {
          break;
        }
        ++v9;
        if (!--v12)
        {
          int v9 = v11;
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_16:
      BOOL v10 = 0;
    }
    return v10 && v4;
  }
  return v17;
}

uint64_t All_Mat_Equal_To(uint64_t a1, unsigned int *a2, int a3, unsigned int a4)
{
  unsigned int v4 = *a2;
  unsigned int v5 = a2[1];
  unsigned int v6 = v5 * *a2;
  if (a4) {
    unsigned int v6 = a4;
  }
  if (v4 > 0x33 || v5 > 0x33)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v18 = *(double *)(g_TCU + 8);
      }
      else {
        double v18 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrix dimenssions is too big! std::string::size_type size = %dx%d", "All_Mat_Equal_To", 2665, v17, v18, v4, v5);
    }
    char v16 = 0;
    g_FPE_AssertFlag = 1;
  }
  else if (v4)
  {
    BOOL v7 = 0;
    unsigned int v8 = 0;
    int v9 = 0;
    while (!v5)
    {
LABEL_15:
      ++v8;
      char v16 = 1;
      BOOL v7 = v8 >= v4;
      if (v8 == v4) {
        return v16 & 1;
      }
    }
    int v10 = v9 + v5;
    uint64_t v11 = a2[1];
    while (v9 + 1 <= v6)
    {
      double v12 = *(double *)&a2[2 * v9 + 2];
      BOOL v13 = v12 < 0.0;
      double v14 = floor(v12 + 0.5);
      double v15 = -floor(0.5 - v12);
      if (!v13) {
        double v15 = v14;
      }
      if ((int)v15 != a3) {
        break;
      }
      ++v9;
      if (!--v11)
      {
        int v9 = v10;
        goto LABEL_15;
      }
    }
    char v16 = v7;
  }
  else
  {
    char v16 = 1;
  }
  return v16 & 1;
}

uint64_t Any_Mat_Greater_Than(double a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  unsigned int v4 = a3[1];
  if (*a3 > 0x33 || v4 > 0x33)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v11 = *(double *)(g_TCU + 8);
      }
      else {
        double v11 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrix dimenssions is too big! std::string::size_type size = %dx%d", "Any_Mat_Greater_Than", 2701, v10, v11, v3, v4);
    }
    uint64_t result = 0;
    g_FPE_AssertFlag = 1;
  }
  else if (v3)
  {
    int v5 = 0;
    int v6 = 0;
    while (1)
    {
      uint64_t v7 = a3[1];
      int v8 = v5;
      if (v4) {
        break;
      }
LABEL_8:
      uint64_t result = 0;
      ++v6;
      v5 += v4;
      if (v6 == v3) {
        return result;
      }
    }
    while (*(double *)&a3[2 * v8 + 2] <= a1)
    {
      ++v8;
      if (!--v7) {
        goto LABEL_8;
      }
    }
    return 1;
  }
  else
  {
    return 0;
  }
  return result;
}

void Sign_Mat(uint64_t a1, int *a2, const char *a3, int *a4)
{
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 > 0x33 || v6 >= 0x34)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v11 = *(double *)(g_TCU + 8);
      }
      else {
        double v11 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix too big: %dx%d", "Sign_Mat", 2732, v10, v11, v5, v6);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a4 = 0;
  }
  else if ((int)v6 * v5 <= a3)
  {
    *a4 = v5;
    a4[1] = v6;
    if (v5)
    {
      int v12 = 0;
      for (int i = 0; i != v5; ++i)
      {
        if (v6)
        {
          unsigned int v14 = a2[1] * i;
          uint64_t v15 = v6;
          int v16 = v12;
          do
          {
            double v17 = *(double *)&a2[2 * v14 + 2];
            BOOL v18 = v17 < 0.0;
            if (v17 <= 0.0) {
              double v19 = 0.0;
            }
            else {
              double v19 = 1.0;
            }
            if (v18) {
              double v19 = -1.0;
            }
            *(double *)&a4[2 * v16++ + 2] = v19;
            ++v14;
            --v15;
          }
          while (v15);
        }
        v12 += v6;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v9 = *(double *)(g_TCU + 8);
      }
      else {
        double v9 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Sign_Mat", 2740, v8, v9, a3, v6 * v5);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a3, a4, 0, 0);
  }
}

void Abs_Mat(uint64_t a1, int *a2, const char *a3, int *a4)
{
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 > 0x33 || v6 >= 0x34)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v11 = *(double *)(g_TCU + 8);
      }
      else {
        double v11 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix too big: %dx%d", "Abs_Mat", 2773, v10, v11, v5, v6);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a4 = 0;
  }
  else if ((int)v6 * v5 <= a3)
  {
    *a4 = v5;
    a4[1] = v6;
    if (v5)
    {
      int v12 = 0;
      for (int i = 0; i != v5; ++i)
      {
        if (v6)
        {
          unsigned int v14 = a2[1] * i;
          uint64_t v15 = v6;
          int v16 = v12;
          do
          {
            double v17 = *(double *)&a2[2 * v14 + 2];
            if (v17 < 0.0) {
              double v17 = -v17;
            }
            *(double *)&a4[2 * v16++ + 2] = v17;
            ++v14;
            --v15;
          }
          while (v15);
        }
        v12 += v6;
      }
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v9 = *(double *)(g_TCU + 8);
      }
      else {
        double v9 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Abs_Mat", 2781, v8, v9, a3, v6 * v5);
    }
    g_FPE_AssertFlag = 1;
    Set_Mat_Size(a3, a4, 0, 0);
  }
}

double Norma_Vec(uint64_t a1, int *a2)
{
  double v2 = Norma2_Vec(a1, a2);
  if (v2 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v4 = *(double *)(g_TCU + 8);
      }
      else {
        double v4 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "Norma_Vec", 2843, v3, v4, v2);
    }
    g_FPE_AssertFlag = 1;
    double v2 = 1.0;
  }
  return sqrt(v2);
}

void Eig2x2(uint64_t a1, int *a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6)
{
  int v8 = *a2;
  int v9 = a2[1];
  if (*a2 != 2 || v9 != 2)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v12 = *(double *)(g_TCU + 8);
      }
      else {
        double v12 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f requested matrix must by 2x2! input is %dx%d", "Eig2x2", 2862, v11, v12, v8, v9);
    }
    g_FPE_AssertFlag = 1;
    *(void *)a4 = 0;
    *(void *)a6 = 0;
    return;
  }
  if (a5 <= 3)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v15 = *(double *)(g_TCU + 8);
      }
      else {
        double v15 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f eigVal has %d elements, while %d are required!", "Eig2x2", 2872, v14, v15, a5, 4);
    }
    g_FPE_AssertFlag = 1;
    double v27 = a5;
    unsigned int v28 = (int *)a6;
LABEL_30:
    Set_Mat_Size(v27, v28, 0, 0);
    return;
  }
  if (a3 <= 3)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v18 = *(double *)(g_TCU + 8);
      }
      else {
        double v18 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f eigVec has %d elements, while %d are required!", "Eig2x2", 2878, v17, v18, a3, 4);
    }
    g_FPE_AssertFlag = 1;
    double v27 = a3;
    unsigned int v28 = (int *)a4;
    goto LABEL_30;
  }
  double v19 = *((double *)a2 + 1);
  double v20 = *((double *)a2 + 2);
  double v21 = *((double *)a2 + 3);
  double v22 = *((double *)a2 + 4);
  Set_Mat_Size(a3, (int *)a4, 2, 2);
  Set_Mat_Size(a5, (int *)a6, 2, 2);
  double v23 = v19 + v22;
  double v24 = v20 * v21 + (v19 - v22) * (v19 - v22) * 0.25;
  if (v24 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v26 = *(double *)(g_TCU + 8);
      }
      else {
        double v26 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "Eig2x2", 2899, v25, v26, v24);
    }
    g_FPE_AssertFlag = 1;
    double v24 = 1.0;
  }
  double v29 = sqrt(v24);
  double v30 = v29 + v23 * 0.5;
  *(double *)(a6 + 8) = v30;
  double v31 = -(v29 - v23 * 0.5);
  *(double *)(a6 + 8 + 8 * (*(_DWORD *)(a6 + 4) + 1)) = v31;
  if (v21 == 0.0)
  {
    if (v20 == 0.0)
    {
      *(void *)(a4 + 8) = 0x3FF0000000000000;
      uint64_t v32 = *(unsigned int *)(a4 + 4);
      *(void *)(a4 + 8 + 8 * v32) = 0;
      *(void *)(a4 + 16) = 0;
      double v21 = 1.0;
    }
    else
    {
      *(double *)(a4 + 8) = v20;
      uint64_t v32 = *(unsigned int *)(a4 + 4);
      *(double *)(a4 + 8 + 8 * v32) = v30 - v19;
      *(double *)(a4 + 16) = v20;
      double v21 = v31 - v19;
    }
  }
  else
  {
    *(double *)(a4 + 8) = v30 - v22;
    uint64_t v32 = *(unsigned int *)(a4 + 4);
    *(double *)(a4 + 8 + 8 * v32) = v21;
    *(double *)(a4 + 16) = v31 - v22;
  }
  *(double *)(a4 + 8 + 8 * (v32 + 1)) = v21;
  double v33 = sqrt(*(double *)(a4 + 8 + 8 * v32) * *(double *)(a4 + 8 + 8 * v32) + *(double *)(a4 + 8) * *(double *)(a4 + 8));
  double v34 = sqrt(v21 * v21 + *(double *)(a4 + 16) * *(double *)(a4 + 16));
  if (fabs(v33) <= 1.0e-30)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v36 = *(double *)(g_TCU + 8);
      }
      else {
        double v36 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "Eig2x2", 2936, v35, v36, v33, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v33 = 1.0;
  }
  if (fabs(v34) <= 1.0e-30)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v37 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v38 = *(double *)(g_TCU + 8);
      }
      else {
        double v38 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "Eig2x2", 2937, v37, v38, v34, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v34 = 1.0;
  }
  *(double *)(a4 + 8) = *(double *)(a4 + 8) / v33;
  uint64_t v39 = *(unsigned int *)(a4 + 4);
  unsigned int v40 = (double *)(a4 + 8 + 8 * v39);
  *unsigned int v40 = *v40 / v33;
  *(double *)(a4 + 16) = *(double *)(a4 + 16) / v34;
  unsigned int v41 = (double *)(a4 + 8 + 8 * (v39 + 1));
  *unsigned int v41 = *v41 / v34;
  if (v31 < v30)
  {
    uint64_t v43 = *(void *)(a6 + 8);
    double v42 = (void *)(a6 + 8);
    unsigned int v44 = *((_DWORD *)v42 - 1) + 1;
    void *v42 = v42[v44];
    v42[v44] = v43;
    *(int8x16_t *)(a4 + 8) = vextq_s8(*(int8x16_t *)(a4 + 8), *(int8x16_t *)(a4 + 8), 8uLL);
    double v45 = *v40;
    *unsigned int v40 = *v41;
    *unsigned int v41 = v45;
  }
}

void Set_Vec_Values_By_Idx(double a1, uint64_t a2, _DWORD *a3, int *a4)
{
  int v4 = *a4;
  int v5 = a4[1];
  if (v5 * *a4)
  {
    unint64_t v9 = 0;
    unsigned int v10 = a3[1] * *a3 - 1;
    do
    {
      uint64_t v11 = a4[v9 + 2];
      if (v11 > v10)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v12 = mach_continuous_time();
          if (g_TCU) {
            double v13 = *(double *)(g_TCU + 8);
          }
          else {
            double v13 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input index at place %u with value of %u exceeds matrix size [%ux%u]", "Set_Vec_Values_By_Idx", 2989, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), v13, v9, v11, *a3, a3[1]);
          int v4 = *a4;
          int v5 = a4[1];
        }
        g_FPE_AssertFlag = 1;
      }
      *(double *)&a3[2 * v11 + 2] = a1;
      ++v9;
    }
    while (v9 < (v4 * v5));
  }
}

void Set_Mat_Cols_By_Idx(double a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  if (a4[1] * *a4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = *a3;
    unsigned int v9 = a3[1];
    do
    {
      unsigned int v10 = a4[v7 + 2];
      if (v10 >= v9)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v11 = mach_continuous_time();
          if (g_TCU) {
            double v12 = *(double *)(g_TCU + 8);
          }
          else {
            double v12 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input index at place %u with value of %u exceeds matrix size [%ux%u]", "Set_Mat_Cols_By_Idx", 3013, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), v12, v7, v10, v8, v9);
        }
        g_FPE_AssertFlag = 1;
      }
      if (v8)
      {
        unsigned int v13 = a3[1];
        uint64_t v14 = v8;
        do
        {
          *(double *)&a3[2 * v10 + 2] = a1;
          v10 += v13;
          --v14;
        }
        while (v14);
      }
      ++v7;
    }
    while (v7 < (a4[1] * *a4));
  }
}

void Set_Mat_Rows_By_Idx(double a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  if (a4[1] * *a4)
  {
    unint64_t v7 = 0;
    unsigned int v8 = *a3;
    uint64_t v9 = a3[1];
    do
    {
      unsigned int v10 = a4[v7 + 2];
      if (v10 >= v8)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v11 = mach_continuous_time();
          if (g_TCU) {
            double v12 = *(double *)(g_TCU + 8);
          }
          else {
            double v12 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input index at place %u with value of %u exceeds matrix size [%ux%u]", "Set_Mat_Rows_By_Idx", 3041, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), v12, v7, v10, v8, v9);
        }
        g_FPE_AssertFlag = 1;
      }
      if (v9)
      {
        unsigned int v13 = a3[1] * v10;
        uint64_t v14 = v9;
        do
        {
          *(double *)&a3[2 * v13++ + 2] = a1;
          --v14;
        }
        while (v14);
      }
      ++v7;
    }
    while (v7 < (a4[1] * *a4));
  }
}

void Set_Mat_Cols_From_Mat_By_Idx(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5 = *a2;
  unsigned int v6 = a5[1];
  if (v5 != *a5)
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input matrices dimensions don't agree! [%ux%u] vs. [%ux%u]");
    }
    goto LABEL_21;
  }
  uint64_t v8 = (a3[1] * *a3);
  if (v8 != a2[1])
  {
    if (g_FPE_LogSeverity)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input vector and small matrix dimensions don't agree! [%u] vs. [%ux%u]");
    }
LABEL_21:
    g_FPE_AssertFlag = 1;
    return;
  }
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      unsigned int v12 = a3[i + 2];
      if (v12 >= v6)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v13 = mach_continuous_time();
          if (g_TCU) {
            double v14 = *(double *)(g_TCU + 8);
          }
          else {
            double v14 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input index at place %u with value of %u exceeds matrix column span [%ux%u]", "Set_Mat_Cols_From_Mat_By_Idx", 3150, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), v14, i, v12, v5, v6);
        }
        g_FPE_AssertFlag = 1;
      }
      if (v5)
      {
        unsigned int v15 = a2[1];
        int v16 = a5[1];
        int v17 = i;
        uint64_t v18 = v5;
        do
        {
          *(void *)&a5[2 * v12 + 2] = *(void *)&a2[2 * v17 + 2];
          v12 += v16;
          v17 += v15;
          --v18;
        }
        while (v18);
      }
    }
  }
}

void Max_Mat_Scalar_Col_By_Idx(double a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v4 = (a4[1] * *a4);
  if (v4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a3;
    unsigned int v10 = a3[1];
    do
    {
      unsigned int v11 = a4[v8 + 2];
      if (v11 >= v10)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v12 = mach_continuous_time();
          if (g_TCU) {
            double v13 = *(double *)(g_TCU + 8);
          }
          else {
            double v13 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input index at place %u with value of %u exceeds matrix column span [%ux%u]", "Max_Mat_Scalar_Col_By_Idx", 3183, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), v13, v8, v11, v9, v10);
        }
        g_FPE_AssertFlag = 1;
      }
      if (v9)
      {
        unsigned int v14 = a3[1];
        uint64_t v15 = v9;
        do
        {
          int v16 = &a3[2 * v11];
          double v18 = *((double *)v16 + 1);
          int v17 = (double *)(v16 + 2);
          double v19 = v18;
          if (v18 <= a1) {
            double v19 = a1;
          }
          *int v17 = v19;
          v11 += v14;
          --v15;
        }
        while (v15);
      }
      ++v8;
    }
    while (v8 != v4);
  }
}

void Min_Mat_Scalar_Col_By_Idx(double a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v4 = (a4[1] * *a4);
  if (v4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a3;
    unsigned int v10 = a3[1];
    do
    {
      unsigned int v11 = a4[v8 + 2];
      if (v11 >= v10)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v12 = mach_continuous_time();
          if (g_TCU) {
            double v13 = *(double *)(g_TCU + 8);
          }
          else {
            double v13 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input index at place %u with value of %u exceeds matrix column span [%ux%u]", "Min_Mat_Scalar_Col_By_Idx", 3226, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), v13, v8, v11, v9, v10);
        }
        g_FPE_AssertFlag = 1;
      }
      if (v9)
      {
        unsigned int v14 = a3[1];
        uint64_t v15 = v9;
        do
        {
          int v16 = &a3[2 * v11];
          double v18 = *((double *)v16 + 1);
          int v17 = (double *)(v16 + 2);
          double v19 = v18;
          if (v18 >= a1) {
            double v19 = a1;
          }
          *int v17 = v19;
          v11 += v14;
          --v15;
        }
        while (v15);
      }
      ++v8;
    }
    while (v8 != v4);
  }
}

void Abs_Mat_Col_By_Idx(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v3 = (a3[1] * *a3);
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    unsigned int v8 = a2[1];
    do
    {
      unsigned int v9 = a3[v6 + 2];
      if (v9 >= v8)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v10 = mach_continuous_time();
          if (g_TCU) {
            double v11 = *(double *)(g_TCU + 8);
          }
          else {
            double v11 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input index at place %u with value of %u exceeds matrix column span [%ux%u]", "Abs_Mat_Col_By_Idx", 3263, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), v11, v6, v9, v7, v8);
        }
        g_FPE_AssertFlag = 1;
      }
      if (v7)
      {
        unsigned int v12 = a2[1];
        uint64_t v13 = v7;
        do
        {
          unsigned int v14 = &a2[2 * v9];
          double v15 = *((double *)v14 + 1);
          if (v15 < 0.0) {
            double v15 = -v15;
          }
          *((double *)v14 + 1) = v15;
          v9 += v12;
          --v13;
        }
        while (v13);
      }
      ++v6;
    }
    while (v6 != v3);
  }
}

const char *Append_To_Row_Vec(uint64_t a1, _DWORD *a2, const char *a3, int *a4)
{
  int v7 = *a2;
  int v8 = a2[1];
  unsigned int v9 = *a4;
  int v10 = a4[1];
  if (*a2 != 1 && v8 != 1)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Added input is not a vector: [%ux%d]", "Append_To_Row_Vec", 3325, v12, v13, v7, v8);
    }
    g_FPE_AssertFlag = 1;
  }
  uint64_t v14 = (v8 * v7);
  if (v9 >= 2)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v16 = *(double *)(g_TCU + 8);
      }
      else {
        double v16 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Input is not a row vector:  [%ux%d]", "Append_To_Row_Vec", 3326, v15, v16, v9, v10);
    }
    g_FPE_AssertFlag = 1;
  }
  if (v10 + (int)v14 <= a3)
  {
    uint64_t result = Set_Mat_Size(a3, a4, 1, v10 + (int)v14);
    if (v14)
    {
      double v20 = (uint64_t *)(a2 + 2);
      do
      {
        uint64_t v21 = *v20++;
        *(void *)&a4[2 * v10++ + 2] = v21;
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v18 = *(double *)(g_TCU + 8);
      }
      else {
        double v18 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Append_To_Row_Vec", 3330, v17, v18, a3, v10 + v14);
    }
    g_FPE_AssertFlag = 1;
    return Set_Mat_Size(a3, a4, 0, 0);
  }
  return result;
}

const char *Append_To_Col_Vec(uint64_t a1, _DWORD *a2, const char *a3, int *a4)
{
  int v7 = *a2;
  int v8 = a2[1];
  unsigned int v9 = *a4;
  unsigned int v10 = a4[1];
  if (*a2 != 1 && v8 != 1)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Added input is not a vector: [%ux%d]", "Append_To_Col_Vec", 3361, v12, v13, v7, v8);
    }
    g_FPE_AssertFlag = 1;
  }
  uint64_t v14 = (v8 * v7);
  if (v10 >= 2)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v16 = *(double *)(g_TCU + 8);
      }
      else {
        double v16 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Input is not a row vector:  [%ux%d]", "Append_To_Col_Vec", 3362, v15, v16, v9, v10);
    }
    g_FPE_AssertFlag = 1;
  }
  unsigned int v17 = v10 + v14;
  if (v17 <= a3)
  {
    uint64_t result = Set_Mat_Size(a3, a4, v9 + v14, 1);
    if (v14)
    {
      uint64_t v21 = (uint64_t *)(a2 + 2);
      do
      {
        uint64_t v22 = *v21++;
        *(void *)&a4[2 * v9++ + 2] = v22;
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v19 = *(double *)(g_TCU + 8);
      }
      else {
        double v19 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Mout has %d elements, while %d are required!", "Append_To_Col_Vec", 3366, v18, v19, a3, v17);
    }
    g_FPE_AssertFlag = 1;
    return Set_Mat_Size(a3, a4, 0, 0);
  }
  return result;
}

const char *Append_On_Left_Vec(double a1, uint64_t a2, unsigned int *a3, const char *a4, uint64_t a5)
{
  unsigned int v9 = *a3;
  unsigned int v10 = a3[1];
  uint64_t v11 = v10 * *a3;
  if (*a3 != 1 && v10 != 1)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v14 = *(double *)(g_TCU + 8);
      }
      else {
        double v14 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Added input is not a vector: [%ux%d]", "Append_On_Left_Vec", 3397, v13, v14, v9, v10);
    }
    g_FPE_AssertFlag = 1;
  }
  if ((int)v11 + 1 <= a4)
  {
    if (v9 <= v10) {
      int v17 = v10 + 1;
    }
    else {
      int v17 = 1;
    }
    if (v9 > v10) {
      int v18 = v9 + 1;
    }
    else {
      int v18 = 1;
    }
    for (uint64_t result = Set_Mat_Size(a4, (int *)a5, v18, v17); v11; --v11)
      *(void *)(a5 + 8 + 8 * v11) = *(void *)&a3[2 * (v11 - 1) + 2];
    *(double *)(a5 + 8) = a1;
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v16 = *(double *)(g_TCU + 8);
      }
      else {
        double v16 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Vout has %d elements, while %d are required!", "Append_On_Left_Vec", 3401, v15, v16, a4, v11 + 1);
    }
    g_FPE_AssertFlag = 1;
    return Set_Mat_Size(a4, (int *)a5, 0, 0);
  }
  return result;
}

const char *Shift_Right_Vec(double a1, uint64_t a2, int *a3, const char *a4, uint64_t a5)
{
  int v10 = *a3;
  int v9 = a3[1];
  unsigned int v11 = v9 * *a3;
  if (*a3 != 1 && v9 != 1)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v14 = *(double *)(g_TCU + 8);
      }
      else {
        double v14 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Added input is not a vector: [%ux%d]", "Shift_Right_Vec", 3441, v13, v14, v10, v9);
    }
    g_FPE_AssertFlag = 1;
  }
  if (v11 <= a4)
  {
    uint64_t result = Set_Mat_Size(a4, (int *)a5, v10, v9);
    uint64_t v18 = v11 - 1;
    if (v11 != 1)
    {
      unsigned int v19 = v11 - 2;
      do
        *(void *)(a5 + 8 + 8 * v18--) = *(void *)&a3[2 * v19-- + 2];
      while (v18);
    }
    *(double *)(a5 + 8) = a1;
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v16 = *(double *)(g_TCU + 8);
      }
      else {
        double v16 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Vout has %d elements, while %d are required!", "Shift_Right_Vec", 3445, v15, v16, a4, v11 + 1);
    }
    g_FPE_AssertFlag = 1;
    return Set_Mat_Size(a4, (int *)a5, 0, 0);
  }
  return result;
}

const char *Shift_Left_Vec(double a1, uint64_t a2, int *a3, const char *a4, int *a5)
{
  int v10 = *a3;
  int v9 = a3[1];
  uint64_t v11 = (v9 * *a3);
  if (*a3 != 1 && v9 != 1)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v14 = *(double *)(g_TCU + 8);
      }
      else {
        double v14 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Added input is not a vector: [%ux%d]", "Shift_Left_Vec", 3478, v13, v14, v10, v9);
    }
    g_FPE_AssertFlag = 1;
  }
  if (v11 <= a4)
  {
    uint64_t result = Set_Mat_Size(a4, a5, v10, v9);
    if (v11 >= 2)
    {
      uint64_t v18 = v11 - 1;
      unsigned int v19 = a5 + 2;
      double v20 = (uint64_t *)(a3 + 4);
      do
      {
        uint64_t v21 = *v20++;
        *v19++ = v21;
        --v18;
      }
      while (v18);
    }
    *(double *)&a5[2 * (v11 - 1) + 2] = a1;
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v16 = *(double *)(g_TCU + 8);
      }
      else {
        double v16 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Vout has %d elements, while %d are required!", "Shift_Left_Vec", 3482, v15, v16, a4, v9 * v10);
    }
    g_FPE_AssertFlag = 1;
    return Set_Mat_Size(a4, a5, 0, 0);
  }
  return result;
}

const char *Diff_Vec(uint64_t a1, _DWORD *a2, const char *a3, int *a4)
{
  unsigned int v7 = *a2;
  unsigned int v8 = a2[1];
  uint64_t v9 = v8 * *a2;
  int v10 = *a2 - 1;
  if (*a2 != 1 && v8 != 1)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Added input is not a vector: [%ux%d]", "Diff_Vec", 3513, v12, v13, v7, v8);
    }
    g_FPE_AssertFlag = 1;
  }
  if ((int)v9 - 1 <= a3)
  {
    if (v7 > v8) {
      int v16 = 1;
    }
    else {
      int v16 = v8 - 1;
    }
    if (v7 <= v8) {
      int v17 = 1;
    }
    else {
      int v17 = v10;
    }
    uint64_t result = Set_Mat_Size(a3, a4, v17, v16);
    if (v9 >= 2)
    {
      uint64_t v19 = v9 - 1;
      double v20 = (double *)(a4 + 2);
      uint64_t v21 = (double *)(a2 + 4);
      do
      {
        *v20++ = *v21 - *(v21 - 1);
        ++v21;
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v15 = *(double *)(g_TCU + 8);
      }
      else {
        double v15 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Vout has %d elements, while %d are required!", "Diff_Vec", 3517, v14, v15, a3, v9 - 1);
    }
    g_FPE_AssertFlag = 1;
    return Set_Mat_Size(a3, a4, 0, 0);
  }
  return result;
}

void Diag_Mult_Mat(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6 = *a2;
  unsigned int v7 = a2[1];
  int v8 = a4[1] * *a4;
  if (v6 != v7)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v10 = *(double *)(g_TCU + 8);
      }
      else {
        double v10 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Input matrix must be square: [%ux%d]", "Diag_Mult_Mat", 3552, v9, v10, v6, v7);
    }
    g_FPE_AssertFlag = 1;
  }
  if (v6 != v8)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v12 = *(double *)(g_TCU + 8);
      }
      else {
        double v12 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Input vector must have same length as matrix rows/columns: mat=[%ux%d], vec=[%ux%u]", "Diag_Mult_Mat", 3553, v11, v12, v6, v7, *a4, a4[1]);
    }
    g_FPE_AssertFlag = 1;
  }
  if (v6)
  {
    int v13 = 0;
    int v14 = a2[1] + 1;
    double v15 = (double *)(a4 + 2);
    do
    {
      double v16 = *v15++;
      *(double *)&a2[2 * v13 + 2] = *(double *)&a2[2 * v13 + 2] * v16;
      v13 += v14;
      --v6;
    }
    while (v6);
  }
}

uint64_t Fused_Nav_Update_Wrapper(uint64_t a1)
{
  return 1;
}

uint64_t GncP12_41HandleClearPosData(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a1)
  {
    memset(&v18, 0, sizeof(v18));
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_REQ,Mask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_41HandleClearPosData", *(_DWORD *)(a1 + 12));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    g_GnssDataClrMasuint64_t k = v4;
    if ((v4 & 0x40000) != 0)
    {
      unint64_t v9 = "FACT";
    }
    else if ((v4 & 0x10000) != 0)
    {
      unint64_t v9 = "COLD";
    }
    else if ((v4 & 0x20000) != 0)
    {
      unint64_t v9 = "WARM";
    }
    else if ((v4 & 0x100000) != 0)
    {
      unint64_t v9 = "HOST";
    }
    else
    {
      if ((v4 & 0x80000) == 0)
      {
        if ((v4 & 0x200000) != 0)
        {
          MEMORY[0x230F4E3E0](&v18, "VHOT");
          int v6 = 0;
        }
        else
        {
          if ((v4 & 4) != 0)
          {
            std::string::push_back(&v18, 80);
            unsigned int v4 = *(_DWORD *)(a1 + 12);
          }
          LOWORD(v5) = v4;
          if ((v4 & 8) != 0)
          {
            std::string::push_back(&v18, 84);
            int v5 = *(_DWORD *)(a1 + 12);
          }
          if ((v5 & 0x80) != 0)
          {
            std::string::push_back(&v18, 70);
            int v5 = *(_DWORD *)(a1 + 12);
          }
          if ((v5 & 0x10) != 0)
          {
            std::string::push_back(&v18, 73);
            int v5 = *(_DWORD *)(a1 + 12);
          }
          if ((v5 & 0x20) != 0)
          {
            std::string::push_back(&v18, 85);
            int v5 = *(_DWORD *)(a1 + 12);
          }
          if (v5)
          {
            std::string::push_back(&v18, 69);
            int v5 = *(_DWORD *)(a1 + 12);
          }
          if ((v5 & 2) != 0)
          {
            std::string::push_back(&v18, 65);
            int v5 = *(_DWORD *)(a1 + 12);
          }
          if ((v5 & 0x40) != 0)
          {
            std::string::push_back(&v18, 72);
            int v5 = *(_DWORD *)(a1 + 12);
          }
          if ((v5 & 0x800) != 0)
          {
            std::string::push_back(&v18, 67);
            int v5 = *(_DWORD *)(a1 + 12);
          }
          if ((v5 & 0x200) != 0)
          {
            xofSvcs_ClrRtiData();
            int v5 = *(_DWORD *)(a1 + 12);
          }
          int v6 = (v4 >> 3) & 1;
          if ((v5 & 0x400) != 0)
          {
            xofSvcs_ClrOrbData();
            xofSvcs_ClrBceOrbData();
            g_OrbitDataAvailable = 0;
            g_BceOrbitDataInjected = 0;
          }
        }
LABEL_40:
        std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v18.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            double v12 = &v18;
            if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              double v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
            }
            unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ValidClearReq DeleteReq,%s,MERstReq,%u\n", (unint64_t)v11, "GNC", 73, "GncP12_41HandleClearPosData", (const char *)v12, v6);
            LbsOsaTrace_WriteLog(8u, __str, v13, 4, 1);
          }
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v14 = &v18;
          }
          else {
            int v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
          }
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v15 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v15 = v18.__r_.__value_.__l.__size_;
          }
          GncP16_27UpdateStateClearNVReqRcvd((const char *)v14, v15, v6);
          if (g_GncPStateInfo > 0x10u) {
            goto LABEL_56;
          }
          char v16 = 1;
          if (((1 << g_GncPStateInfo) & 0x10C08) != 0) {
            goto LABEL_59;
          }
          if (g_GncPStateInfo != 4) {
LABEL_56:
          }
            char v16 = 0;
          GncP04_21SendClearGnssAck(v16);
        }
        else
        {
          GncP04_21SendClearGnssAck(1);
        }
LABEL_59:
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        return 0;
      }
      unint64_t v9 = "VHOT";
    }
    MEMORY[0x230F4E3E0](&v18, v9);
    int v6 = 1;
    goto LABEL_40;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP12_41HandleClearPosData", 517);
    LbsOsaTrace_WriteLog(8u, __str, v8, 0, 1);
  }
  return 0;
}

void sub_22B9CDD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GncP12_42HandleAssistStatus(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASSIST_STATUS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_42HandleAssistStatus");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    GncP16_22UpdateStateAssistDataRcvd(0);
    if (GN_AGNSS_Get_Assist_Req(&v12, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23, (uint64_t)v22, (uint64_t)v21, (uint64_t)v20))
    {
      unsigned int v4 = gnssOsa_Calloc("GncP12_42HandleAssistStatus", 355, 1, 0x588uLL);
      if (v4)
      {
        int v5 = v4;
        v4[3] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        *((unsigned char *)v5 + 16) = v12;
        *(_WORD *)((char *)v5 + 17) = v13;
        *(_DWORD *)((char *)v5 + 19) = v16;
        int v6 = v5 + 6;
        if (v15) {
          GncP11_15PopulateGnssAssist((uint64_t)v6, (uint64_t)v25, v14, v18, v19, v17);
        }
        else {
          *int v6 = 0;
        }
        *((unsigned char *)v5 + 488) = 0;
        *((unsigned char *)v5 + 256) = 0;
        *((unsigned char *)v5 + 720) = 0;
        *((unsigned char *)v5 + 952) = 0;
        *((unsigned char *)v5 + 1184) = 0;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v9 = mach_continuous_time();
          unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASSIST_STATUS_RSP =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP12_42HandleAssistStatus");
          LbsOsaTrace_WriteLog(8u, __str, v10, 4, 1);
        }
        AgpsSendFsmMsg(134, 128, 8786948, v5);
      }
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP12_42HandleAssistStatus", 517);
    LbsOsaTrace_WriteLog(8u, __str, v8, 0, 1);
  }
  return 0;
}

uint64_t GncP12_32HandleGADRefPos(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_RPOS_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_32HandleGADRefPos");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    GncP12_09InjectGadRefPos(a1 + 12, *(_DWORD *)(a1 + 64));
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP12_32HandleGADRefPos", 517);
    LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t GncP12_09InjectGadRefPos(uint64_t a1, int a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  memset_s(&__s, 0x24uLL, 0, 0x24uLL);
  unsigned int __s = *(_DWORD *)a1;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4 == 1)
  {
    char v5 = 0;
  }
  else
  {
    if (v4 != 2)
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LatSign,%u\n", v24);
      return LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    char v5 = 1;
  }
  unsigned __int8 v26 = v5;
  uint64_t v27 = *(void *)(a1 + 20);
  int v6 = *(_DWORD *)(a1 + 36);
  if (v6)
  {
    char v7 = v6 != 1;
    unsigned __int16 v29 = *(_WORD *)(a1 + 28);
    char v8 = *(unsigned char *)(a1 + 40);
  }
  else
  {
    char v7 = -1;
    char v8 = -1;
  }
  char v28 = v7;
  unsigned __int8 v32 = v8;
  unsigned int v11 = *(unsigned __int8 *)(a1 + 32);
  __int16 v30 = *(_WORD *)(a1 + 30);
  int v12 = (int)(float)((float)v11 * 0.5);
  if (v11 >= 0xB4) {
    LOBYTE(v12) = -1;
  }
  unsigned __int8 v31 = v12;
  unsigned __int8 v33 = *(unsigned char *)(a1 + 41);
  uint64_t v34 = -1;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G GADPOS LatSign,%d,Lat,%d,Long,%d,UncSemiMajor,%d,UncSemiMinor,%d,OrienMajorAxis,%d,UncAlt,%d,Confi,%d,AltDir,%d,Alt,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 73, "GncP12_09InjectGadRefPos", v26, v27, HIDWORD(v27), v30, HIBYTE(v30), v31, v32, v33, v28, v29);
    LbsOsaTrace_WriteLog(8u, __str, v14, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G GADPOS Verdirect,%d,Bearing,%d,HorSpeed,%d,VerSpeed,%d,HorUncSpeed,%d,VerUncSpeed,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 73, "GncP12_09InjectGadRefPos", (char)v34, *(__int16 *)((char *)&v34 + 1), *(__int16 *)((char *)&v34 + 3), SBYTE5(v34), BYTE6(v34), HIBYTE(v34));
    LbsOsaTrace_WriteLog(8u, __str, v16, 4, 1);
  }
  uint64_t v17 = *(unsigned int *)(a1 + 48);
  if (v17 >= 5)
  {
    uint64_t v17 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 87, "GncP12_09InjectGadRefPos", 770, *(_DWORD *)(a1 + 48));
      LbsOsaTrace_WriteLog(8u, __str, v19, 2, 1);
      uint64_t v17 = 0;
    }
  }
  int v20 = a2 - 1;
  if (a2 - 1) < 0xA && ((0x36Fu >> v20))
  {
    uint64_t v21 = dword_22BB43360[v20];
  }
  else
  {
    uint64_t v21 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Source,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNC", 87, "GncP12_09InjectGadRefPos", 770, a2);
      LbsOsaTrace_WriteLog(8u, __str, v23, 2, 1);
      uint64_t v21 = 0;
    }
  }
  *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
  uint64_t result = GN_AGPS_Set_GAD_Ref_Pos(&__s, v17, v21);
  if ((result & 1) == 0)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GadPos\n");
      return LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
  }
  return result;
}

uint64_t GncP12_04HandleGpsRefTime(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_RTIME_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_04HandleGpsRefTime");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    memset_s(&__s, 0xCuLL, 0, 0xCuLL);
    int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *(_DWORD *)(a1 + 136);
    int __s = *(_DWORD *)(a1 + 132);
    int v30 = v4;
    unsigned __int16 v31 = *(_WORD *)(a1 + 24);
    if (v5 > 0xB) {
      goto LABEL_39;
    }
    int v6 = 1 << v5;
    if ((v6 & 0x9E0) != 0)
    {
      __int16 v7 = *(_WORD *)(a1 + 16);
      goto LABEL_11;
    }
    if ((v6 & 0x1E) != 0)
    {
      __int16 v7 = 999;
    }
    else
    {
LABEL_39:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v27 = mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Src\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNC", 87, "GncP12_04HandleGpsRefTime", 770);
        LbsOsaTrace_WriteLog(8u, __str, v28, 2, 1);
      }
      __int16 v7 = -1;
    }
LABEL_11:
    unsigned __int16 v32 = v7;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G RefTime OSTime,%u,TOW,%d,WeekNo,%d,RMS,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 73, "GncP12_04HandleGpsRefTime", __s, v30, v31, v32);
      LbsOsaTrace_WriteLog(8u, __str, v12, 4, 1);
    }
    *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
    if ((GN_AGPS_Set_Ref_Time((uint64_t)&__s) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:G Time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "GncP12_04HandleGpsRefTime", 257);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (*(unsigned char *)(a1 + 32))
    {
      memset_s(&v33, 0x98uLL, 0, 0x98uLL);
      unsigned int v15 = *(unsigned __int8 *)(a1 + 32);
      if (v15 >= 0x18) {
        LOBYTE(v15) = 24;
      }
      unsigned __int8 v34 = v15;
      unsigned int v33 = *(_DWORD *)(a1 + 12);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G TOWAssist NumTOWA,%d,TOWms,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 73, "GncP12_04HandleGpsRefTime", v34, v33);
        LbsOsaTrace_WriteLog(8u, __str, v17, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G TOWAssist SV,AntiSF,AlertF,TLMResrvd,TLMWord\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 73, "GncP12_04HandleGpsRefTime");
        LbsOsaTrace_WriteLog(8u, __str, v19, 4, 1);
      }
      if (v34)
      {
        unint64_t v20 = 0;
        uint64_t v21 = (_WORD *)(a1 + 38);
        uint64_t v22 = v35;
        do
        {
          *(v22 - 5) = *((unsigned char *)v21 - 4) + 1;
          *(v22 - 4) = *((unsigned char *)v21 - 1);
          *(_WORD *)(v22 - 3) = *v21;
          *(_WORD *)(v22 - 1) = *(_WORD *)((char *)v21 - 3);
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v23 = mach_continuous_time();
            unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G TOWAssist %2d,%7d,%7d,%10d,%8d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 73, "GncP12_04HandleGpsRefTime", *(v22 - 5), *(v22 - 1), *v22, *(v22 - 4), *(unsigned __int16 *)(v22 - 3));
            LbsOsaTrace_WriteLog(8u, __str, v24, 4, 1);
          }
          if (v20 > 0xE) {
            break;
          }
          v21 += 3;
          ++v20;
          v22 += 6;
        }
        while (v20 < v34);
      }
      if ((GN_AGPS_Set_TOW_Assist(&v33) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:G TOW\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "GNC", 87, "GncP12_04HandleGpsRefTime", 257);
        int v10 = 2;
        goto LABEL_32;
      }
    }
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "GncP12_04HandleGpsRefTime", 517);
    int v10 = 0;
LABEL_32:
    LbsOsaTrace_WriteLog(8u, __str, v9, v10, 1);
  }
  return 0;
}

uint64_t GncP12_02HandleGpsNavModel(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_NAVM_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_02HandleGpsNavModel");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    size_t v18 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 69, "GncP12_02HandleGpsNavModel", 517);
    int v19 = 0;
LABEL_24:
    LbsOsaTrace_WriteLog(8u, __str, v18, v19, 1);
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    size_t v18 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 87, "GncP12_02HandleGpsNavModel", 513);
    int v19 = 2;
    goto LABEL_24;
  }
  *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v5 = 0;
    int v6 = (__int16 *)(v4 + 38);
    do
    {
      memset_s(&__s, 0x48uLL, 0, 0x48uLL);
      unsigned __int8 __s = *((unsigned char *)v6 - 38) + 1;
      unsigned __int8 v23 = *((unsigned char *)v6 - 37);
      __int16 v24 = *(v6 - 18);
      __int16 v25 = v6[10];
      char v26 = *((unsigned char *)v6 - 34);
      __int16 v27 = *(v6 - 5);
      unsigned __int16 v28 = 0;
      unsigned __int16 v29 = *(v6 - 15);
      unsigned __int16 v30 = v6[9];
      unsigned __int16 v31 = *(v6 - 16);
      __int16 v32 = *(v6 - 4);
      __int16 v33 = *v6;
      __int16 v34 = v6[17];
      __int16 v35 = *(v6 - 1);
      __int16 v36 = v6[18];
      __int16 v37 = v6[4];
      __int16 v38 = v6[3];
      __int16 v39 = v6[12];
      __int16 v40 = v6[11];
      int v41 = *(_DWORD *)(v6 - 3);
      int v42 = *(_DWORD *)(v6 + 1);
      *(void *)&long long v7 = *(void *)(v6 + 5);
      *((void *)&v7 + 1) = *(void *)(v6 + 13);
      long long v43 = v7;
      uint64_t v44 = *(void *)(v6 + 19);
      char v45 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G Eph SvId,%d,CodeOnL2,%d,URA,%d,SVHealth,%d,FitIntFlag,%d,AODA,%d,L2PFlag,%d,TGD,%d,AF2,%d,Week,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP12_02HandleGpsNavModel", __s, v23, v24, HIBYTE(v24), v25, HIBYTE(v25), v26, (char)v27, SHIBYTE(v27), v28);
        LbsOsaTrace_WriteLog(8u, __str, v9, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G Eph TOC,%d,TOE,%d,IODC,%d,Af1,%d,dn,%d,IDot,%d,Crs,%d,Crc,%d,Cus,%d,Cuc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncP12_02HandleGpsNavModel", v29, v30, v31, v32, v33, v34, v35, v36, v37, v38);
        LbsOsaTrace_WriteLog(8u, __str, v11, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G Eph Cis,%d,Cic,%d,af0,%d,M0,%d,e,%d,APowHalf,%d,Omega0,%d,I0,%d,W,%d,OmegaDot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 73, "GncP12_02HandleGpsNavModel", v39, v40, v41, v42, v43, DWORD1(v43), DWORD2(v43), HIDWORD(v43), v44, HIDWORD(v44));
        LbsOsaTrace_WriteLog(8u, __str, v13, 4, 1);
      }
      if ((GN_AGPS_Set_Eph_El(&__s) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:G EPH SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 87, "GncP12_02HandleGpsNavModel", 257, __s);
        LbsOsaTrace_WriteLog(8u, __str, v15, 2, 1);
      }
      ++v5;
      v6 += 42;
    }
    while (v5 < *(unsigned __int8 *)(a1 + 24));
  }
  uint64_t v16 = *(void **)(a1 + 16);
  if (v16) {
    free(v16);
  }
  *(void *)(a1 + 16) = 0;
  return 0;
}

uint64_t GncP12_01HandleGpsAlmanac(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_ALMANAC_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_01HandleGpsAlmanac");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
      uint64_t v4 = *(char **)(a1 + 16);
      if (*(unsigned char *)(a1 + 32))
      {
        unint64_t v5 = 0;
        do
        {
          memset_s(&__s, 0x24uLL, 0, 0x24uLL);
          unsigned __int8 v19 = *v4 + 1;
          char __s = v4[2];
          unsigned __int8 v20 = v4[7];
          unsigned __int8 v21 = v4[6];
          int v22 = *(_DWORD *)(v4 + 30);
          unsigned __int16 v23 = *((_WORD *)v4 + 2);
          __int16 v24 = *((_WORD *)v4 + 4);
          __int16 v25 = *((_WORD *)v4 + 14);
          long long v26 = *(_OWORD *)(v4 + 12);
          char v27 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v6 = mach_continuous_time();
            unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G ALM SvId,%d,Wna,%d,SVHealth,%d,toa,%d,Af0,%d,Af1,%d,e,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP12_01HandleGpsAlmanac", v19, __s, v20, v21, (__int16)v22, SHIWORD(v22), v23);
            LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v8 = mach_continuous_time();
            unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G ALM delta_I,%d,OmegaDot,%d,APowHalf,%d,Omega0,%d,w,%d,M0,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP12_01HandleGpsAlmanac", v24, v25, v26, DWORD1(v26), DWORD2(v26), HIDWORD(v26));
            LbsOsaTrace_WriteLog(8u, __str, v9, 4, 1);
          }
          if ((GN_AGPS_Set_Alm_El((unsigned __int8 *)&__s) & 1) == 0
            && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v10 = mach_continuous_time();
            unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:G ALM SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "GncP12_01HandleGpsAlmanac", 257, v19);
            LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
          }
          ++v5;
          v4 += 36;
        }
        while (v5 < *(unsigned __int8 *)(a1 + 32));
        uint64_t v4 = *(char **)(a1 + 16);
      }
      if (v4) {
        free(v4);
      }
      *(void *)(a1 + 16) = 0;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 87, "GncP12_01HandleGpsAlmanac", 513);
      LbsOsaTrace_WriteLog(8u, __str, v15, 2, 1);
    }
    uint64_t v16 = *(void **)(a1 + 24);
    if (v16) {
      free(v16);
    }
    *(void *)(a1 + 24) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "GncP12_01HandleGpsAlmanac", 517);
    LbsOsaTrace_WriteLog(8u, __str, v13, 0, 1);
  }
  return 0;
}

uint64_t GncP12_07HandleGpsRti(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_RTI_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_07HandleGpsRti");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    v17[0] = 0;
    v17[1] = 0;
    *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    LOBYTE(v4) = *(unsigned char *)(a1 + 12);
    if ((_BYTE)v4)
    {
      unsigned __int8 v5 = 0;
      do
      {
        if (v4 <= (v5 + 1)) {
          char v6 = v5 + 1;
        }
        else {
          char v6 = v4;
        }
        unsigned int v7 = (v6 + ~v5);
        if (v7 >= 0xF) {
          unsigned int v7 = 15;
        }
        memset_pattern16(__s, &unk_22BB0CBE0, 4 * v7 + 4);
        unint64_t v8 = 0;
        unsigned __int8 v9 = v5;
        do
        {
          unint64_t v10 = v8;
          *((unsigned char *)v17 + v8) = *(unsigned char *)(a1 + 13 + v5 + v8) + 1;
          ++v8;
        }
        while (v10 <= 0xE && v8 + v5 < v4);
        if ((GN_AGNSS_Set_Bad_SV_List(v8, __s, (unsigned __int8 *)v17) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v11 = mach_continuous_time();
          unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:RTI,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP12_07HandleGpsRti", 257, v8);
          LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
        }
        v5 += v8;
        unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
      }
      while (v4 > (v9 + v8));
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 69, "GncP12_07HandleGpsRti", 517);
    LbsOsaTrace_WriteLog(8u, __str, v14, 0, 1);
  }
  return 0;
}

uint64_t GncP12_13HandleNwGpsPos(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_NETWORK_POS_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_13HandleNwGpsPos");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    GncP12_09InjectGadRefPos(a1 + 12, 10);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP12_13HandleNwGpsPos", 517);
    LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t GncP12_33HandleIonoData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_IONO_MODEL_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_33HandleIonoData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    memset_s(&__s, 0x10uLL, 0, 0x10uLL);
    if (*(_DWORD *)(a1 + 12) == 1)
    {
      unsigned int __s = 0;
      uint64_t v13 = *(void *)(a1 + 16);
      char v14 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G Iono ZCount,%d,A0,%d,A1,%d,A2,%d,A3,%d,B0,%d,B1,%d,B2,%d,B3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP12_33HandleIonoData", __s, (char)v13, SBYTE1(v13), SBYTE2(v13), SBYTE3(v13), SBYTE4(v13), SBYTE5(v13), SBYTE6(v13), SHIBYTE(v13));
        LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
      }
      *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
      if ((GN_AGPS_Set_Ion(&__s) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:G IONO\n");
LABEL_14:
        size_t v8 = v6;
        int v9 = 2;
        goto LABEL_15;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:Iono Type,%u\n", v11);
      goto LABEL_14;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP12_33HandleIonoData", 517);
    int v9 = 0;
LABEL_15:
    LbsOsaTrace_WriteLog(8u, __str, v8, v9, 1);
  }
  return 0;
}

uint64_t GncP12_37HandleUtcModel(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_UTC_MODEL_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_37HandleUtcModel");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12) == 1)
    {
      memset_s(&__s, 0x14uLL, 0, 0x14uLL);
      unsigned int __s = 0;
      uint64_t v13 = *(void *)(a1 + 16);
      int v14 = *(_DWORD *)(a1 + 24);
      __int16 v15 = *(_WORD *)(a1 + 28);
      char v16 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:UTC ZCount,%d,A1,%d,A0,%d,Tot,%d,Wnt,%d,dtLs,%d,WNLSF,%d,DN,%d,dtLSF,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP12_37HandleUtcModel", __s, v13, HIDWORD(v13), v14, BYTE1(v14), SBYTE2(v14), HIBYTE(v14), v15, SHIBYTE(v15));
        LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
      }
      *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
      if ((GN_AGPS_Set_UTC(&__s) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:G UTC\n");
LABEL_14:
        size_t v8 = v6;
        int v9 = 2;
        goto LABEL_15;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:UTC Type,%u\n", v11);
      goto LABEL_14;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP12_37HandleUtcModel", 517);
    int v9 = 0;
LABEL_15:
    LbsOsaTrace_WriteLog(8u, __str, v8, v9, 1);
  }
  return 0;
}

uint64_t GncP12_35HandleGnssRefTime(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_RTIME_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_35HandleGnssRefTime");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP12_35HandleGnssRefTime", 517);
      int v9 = 0;
LABEL_20:
      LbsOsaTrace_WriteLog(8u, __str, v8, v9, 1);
      return 0;
    }
    return 0;
  }
  memset_s(&__s, 0x14uLL, 0, 0x14uLL);
  int v18 = GncP11_03ConvertGnssIDToGn(*(unsigned int *)(a1 + 424));
  *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
  if (v18)
  {
    unsigned __int16 v19 = *(_WORD *)(a1 + 12);
    int v20 = *(unsigned __int16 *)(a1 + 20) + 1000 * *(_DWORD *)(a1 + 16);
    int __s = *(_DWORD *)(a1 + 32);
    unsigned int v4 = *(_DWORD *)(a1 + 428);
    if (v4 > 0xB) {
      goto LABEL_27;
    }
    int v5 = 1 << v4;
    if ((v5 & 0x9E0) != 0)
    {
      __int16 v6 = *(_WORD *)(a1 + 24);
      goto LABEL_14;
    }
    if ((v5 & 0x1E) != 0)
    {
      __int16 v6 = 999;
    }
    else
    {
LABEL_27:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Src\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 87, "GncP12_35HandleGnssRefTime", 770);
        LbsOsaTrace_WriteLog(8u, __str, v15, 2, 1);
      }
      __int16 v6 = -1;
    }
LABEL_14:
    unsigned __int16 v21 = v6;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSS RefTime OSTime,%u,Type,%d,Day,%d,TOD,%d,RMS,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 73, "GncP12_35HandleGnssRefTime", __s, v18, v19, v20, v21);
      LbsOsaTrace_WriteLog(8u, __str, v12, 4, 1);
    }
    if ((GN_AGNSS_Set_Ref_Time((uint64_t)&__s) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GNSS Time\n");
      goto LABEL_19;
    }
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSSId,%u\n", v16);
LABEL_19:
    size_t v8 = v10;
    int v9 = 2;
    goto LABEL_20;
  }
  return 0;
}

uint64_t GncP12_40HandleGnssRti(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_RTI_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_40HandleGnssRti");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
    if (*(unsigned char *)(a1 + 12))
    {
      unint64_t v4 = 0;
      uint64_t v5 = a1 + 272;
      do
      {
        memset(v16, 0, sizeof(v16));
        memset_s(__s, 0x100uLL, 0, 0x100uLL);
        unsigned __int8 v6 = 0;
        while (v4 < *(unsigned __int8 *)(a1 + 12))
        {
          int v7 = GncP11_03ConvertGnssIDToGn(*(unsigned int *)(v5 + 4 * v4 - 256));
          __s[v6] = v7;
          if (v7)
          {
            *((unsigned char *)v16 + v6++) = *(unsigned char *)(v5 + v4) + 1;
          }
          else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v8 = mach_continuous_time();
            unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP12_40HandleGnssRti", 515);
            LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
          }
          ++v4;
          if (v6 >= 0x40u)
          {
            unint64_t v4 = v4;
            goto LABEL_15;
          }
        }
        unint64_t v4 = v4;
        if (!v6) {
          continue;
        }
LABEL_15:
        if ((GN_AGNSS_Set_Bad_SV_List(v6, __s, (unsigned __int8 *)v16) & 1) == 0
          && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:RTI,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "GncP12_40HandleGnssRti", 257, v6);
          LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
        }
      }
      while (v4 < *(unsigned __int8 *)(a1 + 12));
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "GncP12_40HandleGnssRti", 517);
    LbsOsaTrace_WriteLog(8u, __str, v13, 0, 1);
  }
  return 0;
}

uint64_t GncP12_39HandleTimeModel(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_TIME_MODEL_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_39HandleTimeModel");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "GncP12_39HandleTimeModel", 517);
    int v14 = 0;
LABEL_26:
    LbsOsaTrace_WriteLog(8u, __str, v13, v14, 1);
    return 0;
  }
  memset_s(&__s, 0x20uLL, 0, 0x20uLL);
  int __s = GncP11_03ConvertGnssIDToGn(*(unsigned int *)(a1 + 12));
  if (!__s)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSSIDFrom\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 87, "GncP12_39HandleTimeModel", 515);
    int v14 = 2;
    goto LABEL_26;
  }
  *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = 0;
    for (uint64_t i = (_WORD *)(a1 + 42); ; i += 12)
    {
      int v23 = GncP11_03ConvertGnssIDToGn(*(unsigned int *)(i - 3));
      if (v23) {
        break;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSSIDTo\n");
LABEL_19:
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
LABEL_20:
      if (++v4 >= (unint64_t)*(unsigned __int8 *)(a1 + 16)) {
        return 0;
      }
    }
    char v24 = 0;
    int v18 = (unsigned __int16)*(i - 11);
    uint64_t v20 = *(void *)(i - 9);
    char v21 = *((unsigned char *)i - 10);
    __int16 v6 = *i;
    if (((*i + 64) & 0xFF80) != 0) {
      LOBYTE(v6) = 127;
    }
    char v22 = v6;
    int v7 = (unsigned __int16)*(i - 1);
    if (v7 == 0xFFFF) {
      LOWORD(v7) = 0x7FFF;
    }
    unsigned __int16 v19 = v7;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G TIMEMDL TypeFrm,%d,TOW,%d,Week,%d,tA0,%d,tA1,%d,tA2,%d,deltaT,%d,TypeTo,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP12_39HandleTimeModel", __s, v18, v19, v20, HIDWORD(v20), v21, v22, v23);
      LbsOsaTrace_WriteLog(8u, __str, v9, 4, 1);
    }
    if ((GN_AGNSS_Set_Time_Model((uint64_t)&__s) & 1) != 0 || !LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GNSS TimeModel GNSSID,%u\n", v10);
    goto LABEL_19;
  }
  return 0;
}

uint64_t GncP12_03HandleGpsAcqAssist(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_ACQ_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_03HandleGpsAcqAssist");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
    if (*(unsigned char *)(a1 + 28))
    {
      unsigned __int8 v4 = 0;
      do
      {
        memset_s(&__s, 0xE8uLL, 0, 0xE8uLL);
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        unsigned int __s = *(_DWORD *)(a1 + 12);
        uint64_t v7 = v4;
        v4 += 16;
        uint64_t v8 = (unsigned __int8 *)(a1 + 41 + 12 * v7);
        while (v7 + v6 < (unint64_t)*(unsigned __int8 *)(a1 + 28))
        {
          unsigned __int16 v9 = (char *)&__s + v5;
          v9[6] = *(v8 - 11) + 1;
          *((_WORD *)v9 + 4) = *(_WORD *)(v8 - 9);
          v9[10] = *(v8 - 10);
          v9[11] = *(v8 - 7);
          *((_WORD *)v9 + 6) = *(_WORD *)(v8 - 5);
          v9[14] = *(v8 - 6);
          *(_WORD *)(v9 + 15) = *(_WORD *)(v8 - 3);
          int v10 = *(v8 - 1);
          if (v10 == 255) {
            LOBYTE(v10) = 0;
          }
          v9[17] = v10;
          int v11 = *v8;
          if (v11 == 255) {
            LOBYTE(v11) = 0;
          }
          v9[18] = v11;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 1))
          {
            bzero(__str, 0x410uLL);
            uint64_t v12 = mach_continuous_time();
            unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G ACQ SvId,%d,D0,%d,D1,%d,DoppUnc,%d,CodePhase,%d,IntCodePh,%d,GPSBitNo,%d,CodeWind,%d,Azi,%d,Elev,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 73, "GncP12_03HandleGpsAcqAssist", v9[6], *((__int16 *)v9 + 4), v9[10], v9[11], *((unsigned __int16 *)v9 + 6), v9[14], v9[15], v9[16], v9[17], v9[18]);
            LbsOsaTrace_WriteLog(8u, __str, v13, 4, 1);
          }
          ++v6;
          v5 += 14;
          v8 += 12;
          if (v5 == 224)
          {
            LOBYTE(v6) = 16;
            goto LABEL_17;
          }
        }
        unsigned __int8 v4 = v7 + v6;
LABEL_17:
        unsigned __int8 v22 = v6;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:G ACQ RefGPSTOW,%d,NumAA,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 73, "GncP12_03HandleGpsAcqAssist", __s, v22);
          LbsOsaTrace_WriteLog(8u, __str, v15, 4, 1);
        }
        if ((GN_AGPS_Set_Acq_Ass(&__s) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:G ACQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP12_03HandleGpsAcqAssist", 257);
          LbsOsaTrace_WriteLog(8u, __str, v17, 2, 1);
        }
      }
      while (*(unsigned __int8 *)(a1 + 28) > v4);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 69, "GncP12_03HandleGpsAcqAssist", 517);
    LbsOsaTrace_WriteLog(8u, __str, v19, 0, 1);
  }
  return 0;
}

uint64_t GncP12_34HandleGnssAcqAssist(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_ACQ_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_34HandleGnssAcqAssist");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    *(_DWORD *)uint64_t __str = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    GncP16_22UpdateStateAssistDataRcvd((unsigned int *)__str);
    if (!*(unsigned char *)(a1 + 25)) {
      return 0;
    }
    unint64_t v4 = 0;
    uint64_t v31 = a1 + 28;
    uint64_t v32 = a1;
    while (1)
    {
      memset_s(&__s, 0x3D0uLL, 0, 0x3D0uLL);
      unsigned __int8 v36 = *(unsigned char *)(a1 + 24);
      int v35 = GncP11_03ConvertGnssIDToGn(*(unsigned int *)(a1 + 20));
      if (v35)
      {
        int v5 = 0;
        unsigned int v6 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        int v5 = *(_DWORD *)(a1 + 16);
        if (v5 == -1)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v29 = mach_continuous_time();
            size_t v27 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnssTimeID and GpsTow\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNC", 87, "GncP12_34HandleGnssAcqAssist", 515);
            int v28 = 2;
LABEL_38:
            LbsOsaTrace_WriteLog(8u, __str, v27, v28, 1);
          }
          return 0;
        }
        unsigned int v6 = 0;
      }
      unint64_t v7 = 0;
      unsigned int __s = v6;
      int v34 = v5;
      uint64_t v8 = (char *)(v31 + 24 * v4);
      while (v4 < *(unsigned __int8 *)(a1 + 25))
      {
        unsigned __int16 v9 = &__s + 5 * v7;
        unsigned int v10 = GncP11_03ConvertGnssIDToGn(*((unsigned int *)v8 + 1));
        void v9[4] = v10;
        int v11 = v9 + 4;
        if (v10)
        {
          char v12 = *v8;
          unsigned __int16 v13 = &__s + 5 * v7;
          if (v8[20] >= 0) {
            char v14 = (int)((double)v8[20] * 0.703125);
          }
          else {
            char v14 = 0;
          }
          *((unsigned char *)v13 + 32) = v14;
          unsigned __int16 v15 = (unsigned __int8 *)(v13 + 8);
          *(v15 - 12) = v12 + 1;
          *(_DWORD *)(v15 - 10) = *(_DWORD *)(v8 + 10);
          *(_DWORD *)(v15 - 6) = *(_DWORD *)(v8 + 14);
          unsigned int v16 = *((unsigned __int16 *)v8 + 9);
          if (v16 <= 0x1FF) {
            __int16 v17 = (int)((double)v16 * 0.703125);
          }
          else {
            __int16 v17 = 0;
          }
          *((_WORD *)v15 - 1) = v17;
          ++v7;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 1))
          {
            bzero(__str, 0x410uLL);
            uint64_t v18 = mach_continuous_time();
            a1 = v32;
            unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSS ACQ Type,%d,SvId,%d,D0,%d,D1,%d,DoppUnc,%d,CodePhase,%d,IntCodePh,%d,CodeWin,%d,Azi,%d,Elev,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 73, "GncP12_34HandleGnssAcqAssist", *v11, *(v15 - 12), *((__int16 *)v15 - 5), *(v15 - 8), *(v15 - 7), *((unsigned __int16 *)v15 - 3), *(v15 - 4), *(v15 - 3), *((unsigned __int16 *)v15 - 1), *v15);
            LbsOsaTrace_WriteLog(8u, __str, v19, 4, 1);
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v20 = mach_continuous_time();
          unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSSID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 87, "GncP12_34HandleGnssAcqAssist", 515, *((_DWORD *)v8 + 1));
          LbsOsaTrace_WriteLog(8u, __str, v21, 2, 1);
        }
        ++v4;
        v8 += 24;
        if (v7 >= 0x30)
        {
          unint64_t v4 = v4;
          goto LABEL_27;
        }
      }
      unint64_t v4 = v4;
      if (!v7) {
        goto LABEL_32;
      }
LABEL_27:
      unsigned __int8 v37 = v7;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSS ACQ Ref_GNSSTOD,%d,RefGPSTOW,%d,GNSSType,%d,Conf,%d,Num_AA,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNC", 73, "GncP12_34HandleGnssAcqAssist", __s, v34, v35, v36, v37);
        LbsOsaTrace_WriteLog(8u, __str, v23, 4, 1);
      }
      if ((GN_AGNSS_Set_Acq_Ass(&__s) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GNSS ACQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 87, "GncP12_34HandleGnssAcqAssist", 257);
        LbsOsaTrace_WriteLog(8u, __str, v25, 2, 1);
      }
LABEL_32:
      if (v4 >= *(unsigned __int8 *)(a1 + 25)) {
        return 0;
      }
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v26 = mach_continuous_time();
    size_t v27 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNC", 69, "GncP12_34HandleGnssAcqAssist", 517);
    int v28 = 0;
    goto LABEL_38;
  }
  return 0;
}

size_t GncP12_10ClearPeRtiInfo(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  size_t result = GN_GPS_Set_RTI_Bad_SV_List(0, 0, 0);
  if ((result & 1) == 0)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:ClearRTI\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 87, "GncP12_10ClearPeRtiInfo", 257);
      return LbsOsaTrace_WriteLog(8u, __str, v2, 2, 1);
    }
  }
  return result;
}

uint64_t GncP12_06HandleGpsFta(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_FTA_PULSE_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_06HandleGpsFta");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = g_GncPStateInfo;
    if ((g_GncPStateInfo - 9) > 0xFDu)
    {
      memset_s(&__s, 0x20uLL, 0, 0x20uLL);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:FTA,Wk,%u,TowSec,%u,TowFracNs,%u,UncUs,%u, OsTimeMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 73, "GncP12_06HandleGpsFta", *(unsigned __int16 *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 32));
        LbsOsaTrace_WriteLog(8u, __str, v12, 4, 1);
      }
      LODWORD(v9) = *(_DWORD *)(a1 + 16);
      LODWORD(v10) = *(_DWORD *)(a1 + 20);
      double __s = (double)v9 + (double)v10 * 0.000000001;
      unsigned __int16 v24 = *(_WORD *)(a1 + 12);
      int v25 = *(_DWORD *)(a1 + 24);
      int v26 = -1;
      int v27 = *(_DWORD *)(a1 + 32);
      unsigned __int8 v28 = 1;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:FTA G,TOW,%f,WeekNo,%d,AbsRMSus,%d,RelRMSns,%d,OS_Time_ms,%u,MultPulses,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 73, "GncP12_06HandleGpsFta", __s, v24, v25, v26, v27, v28);
        LbsOsaTrace_WriteLog(8u, __str, v14, 4, 1);
      }
      if (GN_AGPS_Set_EFSP_Time((uint64_t)&__s))
      {
        int v15 = 1;
      }
      else
      {
        int v15 = 0;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:FTA G\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP12_06HandleGpsFta", 257);
          LbsOsaTrace_WriteLog(8u, __str, v17, 2, 1);
          int v15 = 0;
        }
      }
      uint64_t v18 = gnssOsa_Calloc("GncP12_06HandleGpsFta", 1281, 1, 0x14uLL);
      if (v18)
      {
        unsigned __int16 v19 = v18;
        *((_DWORD *)v18 + 3) = *(_DWORD *)(a1 + 36);
        *((_DWORD *)v18 + 4) = v15;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v20 = mach_continuous_time();
          unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_FTA_STATUS_IND =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 73, "GncP12_06HandleGpsFta");
          LbsOsaTrace_WriteLog(8u, __str, v21, 4, 1);
        }
        AgpsSendFsmMsg(134, 131, 8595204, v19);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ignored in State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP12_06HandleGpsFta", 262, v4);
      int v7 = 4;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v6, v7, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "GncP12_06HandleGpsFta", 517);
    int v7 = 0;
    goto LABEL_9;
  }
  return 0;
}

BOOL G5K_ME_Poll_New_Meas(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, unsigned char *a6)
{
  v205[1] = *(double *)MEMORY[0x263EF8340];
  v205[0] = 0.0;
  *a6 = 0;
  if (!*(unsigned char *)(a1 + 402)) {
    return 0;
  }
  uint64_t v7 = a1;
  API_Get_UTC_Cor(1, v205);
  double v9 = -0.5;
  if (v205[0] > 0.0) {
    double v9 = 0.5;
  }
  double v10 = v205[0] + v9;
  if (v205[0] + v9 <= 2147483650.0)
  {
    if (v10 >= -2147483650.0) {
      int v11 = (int)v10;
    }
    else {
      LOBYTE(v11) = 0;
    }
  }
  else
  {
    LOBYTE(v11) = -1;
  }
  char v189 = v11;
  unsigned __int16 v199 = (unsigned __int16 *)(v7 + 10848);
  uint64_t v13 = a4;
  if (*a3 && *(_DWORD *)(v7 + 448) - *a3 < 0
    || *(unsigned char *)(v7 + 403) && *(_DWORD *)a4 && *(_DWORD *)(v7 + 512) - *(_DWORD *)a4 < 0
    || *(unsigned char *)(v7 + 408) && (int v14 = a5[672]) != 0 && *(_DWORD *)(v7 + 10816) - v14 < 0
    || *(unsigned char *)(v7 + 412) && (int v15 = a5[673]) != 0 && *(_DWORD *)(v7 + 10820) - v15 < 0
    || *(unsigned char *)(v7 + 416) && (int v16 = a5[674]) != 0 && *(_DWORD *)(v7 + 10824) - v16 < 0
    || *(unsigned char *)(v7 + 420) && (int v17 = a5[675]) != 0 && *(_DWORD *)(v7 + 10828) - v17 < 0)
  {
    *(unsigned char *)(v7 + 403) = 0;
    *(unsigned char *)(v7 + 408) = 0;
    *(unsigned char *)(v7 + 412) = 0;
    *(unsigned char *)(v7 + 416) = 0;
    *(unsigned char *)(v7 + 420) = 0;
    *(unsigned char *)(v7 + 465) = 0;
    *(_DWORD *)(a4 + 7460) = 0;
    *a6 = 1;
  }
  uint64_t v188 = v7 + 402;
  int v18 = *(_DWORD *)(v7 + 508);
  if (!v18 || v18 != *(_DWORD *)(v7 + 448) || *(_DWORD *)(v7 + 460) <= *(_DWORD *)(a2 + 948))
  {
    unsigned __int16 v19 = (unsigned char *)(a4 + 7456);
    *(_DWORD *)(v7 + 508) = 0;
    uint64_t v20 = *(unsigned int *)(v7 + 512);
    if (!*(unsigned char *)(v7 + 403) || v20 != *(_DWORD *)(v7 + 448))
    {
      if (v20)
      {
        unsigned __int16 v26 = *(_WORD *)(v7 + 398) + 1;
        *(_WORD *)(v7 + 398) = v26;
        EvLog_nd("ME_Poll_New: Missed {H", 5, v8, v26, *(unsigned __int8 *)(v7 + 406), *(unsigned __int16 *)(v7 + 400), v20, *(unsigned int *)(v7 + 448));
        unsigned __int16 v19 = (unsigned char *)(a4 + 7456);
        uint64_t v13 = a4;
      }
      uint64_t v27 = 0;
      *(_DWORD *)uint64_t v13 = *(_DWORD *)(v7 + 448);
      *(_DWORD *)(v13 + 4) = *(_DWORD *)(v7 + 468);
      *(_WORD *)(v13 + 21) = 0;
      *(_DWORD *)(v13 + 24) = 0;
      do
      {
        uint64_t v28 = v13 + 2720 + v27;
        *(unsigned char *)(v28 + 32) = 0;
        *(_OWORD *)uint64_t v28 = 0uLL;
        *(_OWORD *)(v28 + 16) = 0uLL;
        v27 += 36;
      }
      while (v27 != 1728);
      *unsigned __int16 v19 = 0;
      v19[1] = v189;
      goto LABEL_281;
    }
    unsigned int v21 = v20 - *(_DWORD *)a4;
    if (v21 <= 1) {
      int v22 = 1;
    }
    else {
      int v22 = v20 - *(_DWORD *)a4;
    }
    double v23 = (double)v22;
    uint64_t v187 = v7 + 11172;
    *(_DWORD *)(a4 + 24) = 0;
    *(_WORD *)(a4 + 21) = 0;
    if (*(unsigned char *)(v7 + 11158))
    {
      uint64_t v24 = 0;
      int v25 = (_DWORD *)(v7 + 10832);
      do
      {
        if (*(unsigned char *)(v7 + 558 + v24))
        {
          *int v25 = v20;
          goto LABEL_49;
        }
        v24 += 20;
      }
      while (v24 != 160);
      if ((int)v20 - *(_DWORD *)(v7 + 10832) >= 12001)
      {
        *(_OWORD *)(v7 + 11120) = 0u;
        *(_OWORD *)(v7 + 11136) = 0u;
        *(_OWORD *)(v7 + 11088) = 0u;
        *(_OWORD *)(v7 + 11104) = 0u;
        *(_OWORD *)(v7 + 11056) = 0u;
        *(_OWORD *)(v7 + 11072) = 0u;
        *(_OWORD *)(v7 + 11024) = 0u;
        *(_OWORD *)(v7 + 11040) = 0u;
        *(_OWORD *)(v7 + 10992) = 0u;
        *(_OWORD *)(v7 + 11008) = 0u;
        *(_OWORD *)(v7 + 10960) = 0u;
        *(_OWORD *)(v7 + 10976) = 0u;
        *(_OWORD *)(v7 + 10928) = 0u;
        *(_OWORD *)(v7 + 10944) = 0u;
        *(_OWORD *)(v7 + 10896) = 0u;
        *(_OWORD *)(v7 + 10912) = 0u;
        *(_OWORD *)(v7 + 10864) = 0u;
        *(_OWORD *)(v7 + 10880) = 0u;
        *(_OWORD *)int v25 = 0u;
        *(_OWORD *)(v7 + 10848) = 0u;
        *(void *)(v7 + 11151) = 0;
      }
LABEL_49:
      uint64_t v29 = 20;
      uint64_t v30 = (_WORD *)(v7 + 10848);
      do
      {
        if (*v30)
        {
          if ((int)v20 - *((_DWORD *)v30 - 2) < 150000)
          {
            int v31 = *((_DWORD *)v30 - 1) + v21;
            *((_DWORD *)v30 - 1) = v31;
            if (*((unsigned char *)v30 - 12) == 2)
            {
              if (v31 >= 86400000)
              {
                int v32 = v31 - 86400000;
LABEL_58:
                *((_DWORD *)v30 - 1) = v32;
              }
            }
            else if (v31 >= 604800000)
            {
              int v32 = v31 - 604800000;
              goto LABEL_58;
            }
          }
          else
          {
            *(void *)(v30 - 6) = 0;
            *(void *)(v30 - 2) = 0;
          }
        }
        v30 += 8;
        --v29;
      }
      while (v29);
    }
    uint64_t v33 = 0;
    uint64_t v186 = (_DWORD *)(v7 + 526);
    uint64_t v198 = v7;
    double v34 = 100.0 / v23;
    int v197 = v20;
    do
    {
      uint64_t v35 = v7 + 20 * v33;
      if (*(unsigned char *)(v35 + 558))
      {
        *(_DWORD *)(v7 + 10832) = v20;
        *((unsigned char *)v199 + 310) = 1;
        uint64_t v195 = (unsigned char *)(v7 + 20 * v33 + 556);
        unsigned int v36 = *v195;
        if (v36 <= 0xF)
        {
          unsigned int v36 = 0;
          *uint64_t v195 = 0;
        }
        double v200 = (char *)(v7 + 20 * v33 + 557);
        unsigned int v37 = *v200;
        if (v37 <= 0xF)
        {
          unsigned int v37 = 0;
          *double v200 = 0;
        }
        if (v37 == v36)
        {
          LOBYTE(v36) = v36 + 1;
          *uint64_t v195 = v36;
        }
        if (*((unsigned __int8 *)v199 + 308) != v36 || v37 != *((unsigned __int8 *)v199 + 309))
        {
          char v38 = 0;
          uint64_t v196 = (unsigned char *)(v35 + 540);
          uint64_t v194 = v33;
          uint64_t v39 = (int *)(v7 + 20 * v33);
          __int16 v40 = v39 + 136;
          uint64_t v201 = v39 + 138;
          uint64_t v202 = v39 + 137;
          char v41 = 1;
          do
          {
            char v42 = v38;
            if (v41)
            {
              unsigned int v43 = *v195;
              if (*v195)
              {
                int v44 = *v200;
                int v45 = (int)(255 * (v43 - v44)) / (int)v43;
              }
              else
              {
                int v45 = 0;
                int v44 = *v200;
              }
              uint64_t v47 = v202;
              if (!v44)
              {
                int v45 = v43 >> 1;
                uint64_t v47 = v202;
              }
            }
            else
            {
              char v46 = *v200;
              if (!*v200) {
                goto LABEL_108;
              }
              int v45 = 1;
              uint64_t v47 = v201;
            }
            uint64_t v48 = 0;
            double v49 = (char *)v199 + 3;
            do
            {
              int v50 = *(unsigned __int16 *)(v49 - 3);
              if (*(_WORD *)(v49 - 3))
              {
                int v51 = *(_DWORD *)(v49 - 15);
                if (Is_Legal(v51))
                {
                  int v52 = *v40;
                  if (Is_Legal(*v40))
                  {
                    if (v52 == v51)
                    {
                      int v53 = *(_DWORD *)(v49 - 7);
                      unsigned int v54 = *v47 - v53 >= 0 ? *v47 - v53 : v53 - *v47;
                      if (v54 <= 0x14)
                      {
                        if (*v47 != v53) {
                          *(_DWORD *)(v49 - 7) = (*v47 - v53) * v45 / (v45 + v50) + v53;
                        }
                        *(_WORD *)(v49 - 3) = v45 + v50 + 24;
                        ++*(v49 - 1);
                        unsigned char *v49 = *v196;
                        uint64_t v7 = v198;
                        goto LABEL_102;
                      }
                    }
                  }
                }
              }
              ++v48;
              v49 += 16;
            }
            while (v48 != 20);
            uint64_t v55 = 0;
            int v56 = 0xFFFFFFF;
            uint64_t v7 = v198;
            uint64_t v57 = v199;
            uint64_t v48 = 0xFFFFFFFFLL;
            do
            {
              int v59 = *v57;
              v57 += 8;
              int v58 = v59;
              if (!v59)
              {
                uint64_t v48 = v55;
                goto LABEL_99;
              }
              BOOL v60 = v56 <= v58;
              if (v56 >= v58) {
                int v56 = v58;
              }
              if (!v60) {
                uint64_t v48 = v55;
              }
              ++v55;
            }
            while (v55 != 20);
            if ((v48 & 0x80000000) != 0) {
              goto LABEL_103;
            }
LABEL_99:
            uint64_t v61 = v198 + 16 * v48;
            unsigned int v62 = v201;
            if (v41) {
              unsigned int v62 = v202;
            }
            *(_DWORD *)(v61 + 10844) = *v62;
            *(_WORD *)(v61 + 10848) = v45;
            *(unsigned char *)(v61 + 10850) = 0;
            *(unsigned char *)(v61 + 10851) = *v196;
            *(_DWORD *)(v61 + 10836) = *v40;
LABEL_102:
            *(_DWORD *)(v7 + 16 * v48 + 10840) = v197;
LABEL_103:
            char v41 = 0;
            char v38 = 1;
          }
          while ((v42 & 1) == 0);
          char v46 = *v200;
LABEL_108:
          uint64_t v33 = v194;
          *((unsigned char *)v199 + 308) = *v195;
          *((unsigned char *)v199 + 309) = v46;
          LODWORD(v20) = v197;
        }
      }
      ++v33;
    }
    while (v33 != 8);
    if (*((unsigned char *)v199 + 310))
    {
      uint64_t v63 = 0;
      unsigned int v64 = 0;
      unsigned int v65 = -1;
      double v66 = v199;
      do
      {
        unsigned int v68 = *v66;
        v66 += 8;
        unsigned int v67 = v68;
        BOOL v69 = (int)v64 <= (int)v68;
        if (v64 < v68) {
          unsigned int v65 = v63;
        }
        if (v69) {
          unsigned int v64 = v67;
        }
        ++v63;
      }
      while (v63 != 20);
      if ((v65 & 0x80000000) == 0 && v64)
      {
        uint64_t v70 = v7 + 16 * v65;
        unsigned int v71 = *(unsigned __int16 *)(v70 + 10848);
        if (v71 >= 0xFF) {
          LOBYTE(v71) = -1;
        }
        *(_DWORD *)(a4 + 24) = *(_DWORD *)(v70 + 10844);
        *(unsigned char *)(a4 + 22) = v71;
        *(unsigned char *)(a4 + 21) = *(unsigned char *)(v70 + 10851);
        *(_DWORD *)(a4 + 28) = *(_DWORD *)(v70 + 10836);
      }
    }
    if (!*(unsigned char *)(v7 + 529) && !*(unsigned char *)(v7 + 530) && !*(unsigned char *)(v7 + 531))
    {
      for (uint64_t i = 0; i != 1728; i += 36)
      {
        uint64_t v73 = v7 + i;
        unsigned int v74 = *(unsigned __int8 *)(v7 + i + 3396);
        BOOL v75 = v74 >= 2;
        char v76 = v74 - 2;
        if (v75)
        {
          *(unsigned char *)(v73 + 3396) = v76;
          *(_WORD *)(v7 + 529) = 514;
          *(unsigned char *)(v7 + 531) = 2;
        }
        unsigned int v77 = *(unsigned __int8 *)(v73 + 3397);
        BOOL v75 = v77 >= 2;
        char v78 = v77 - 2;
        if (v75) {
          *(unsigned char *)(v73 + 3397) = v78;
        }
      }
    }
    memcpy((void *)(a4 + 2720), (const void *)(v7 + 3392), 0x6C0uLL);
    memcpy((void *)(a4 + 32), (const void *)(v7 + 704), 0xA80uLL);
    memcpy((void *)(a4 + 4448), (const void *)(v7 + 5120), 0x3C0uLL);
    memcpy((void *)(a4 + 5408), (const void *)(v7 + 6080), 0x800uLL);
    *(void *)a4 = *(void *)(v7 + 512);
    *(_WORD *)(a4 + 8) = *(_WORD *)(v7 + 520);
    *(_DWORD *)(a4 + 10) = *(_DWORD *)(v7 + 522);
    *(_DWORD *)(a4 + 14) = *v186;
    *(unsigned char *)(a4 + 18) = *(unsigned char *)(v7 + 530);
    *(_WORD *)(a4 + 19) = *(_WORD *)(v7 + 531);
    *(_WORD *)(a4 + 7456) = v199[156];
    if (*(_DWORD *)(v7 + 460)) {
      ++*(_DWORD *)(a4 + 7460);
    }
    uint64_t v80 = *(unsigned __int8 *)(v7 + 405);
    uint64_t v81 = *(unsigned __int8 *)(v7 + 406);
    uint64_t v82 = (v80 - v81);
    if ((int)v82 < 1)
    {
      if ((v82 & 0x80000000) != 0)
      {
        uint64_t v84 = (v82 + 48);
        unsigned __int16 v85 = *(_WORD *)(v7 + 400) + v84;
        *(_WORD *)(v7 + 400) = v85;
        unsigned __int16 v86 = *(_WORD *)(v7 + 396) + 1;
        *(_WORD *)(v7 + 396) = v86;
        EvLog_nd("ME_Poll_New: Missed {M & {T", 3, v8, v84, v85, v86);
        uint64_t v87 = 0;
        uint64_t v88 = a4 + 32;
        do
        {
          uint64_t v89 = a4 + 2720 + v87;
          *(unsigned char *)(v89 + 32) = 0;
          *(_OWORD *)uint64_t v89 = 0uLL;
          *(_OWORD *)(v89 + 16) = 0uLL;
          *(void *)(v88 + 48) = 0;
          *(_OWORD *)(v88 + 16) = 0uLL;
          *(_OWORD *)(v88 + 32) = 0uLL;
          v87 += 36;
          *(_OWORD *)uint64_t v88 = 0uLL;
          v88 += 56;
        }
        while (v87 != 1728);
        EvLog("ME_Poll_New: Flushing due to missed {T");
      }
    }
    else
    {
      unsigned __int16 v83 = *(_WORD *)(v7 + 400) + v80 - v81;
      *(_WORD *)(v7 + 400) = v83;
      EvLog_nd("ME_Poll_New: Missed {M", 4, v8, v82, v83, v80, v81);
    }
    *(_OWORD *)(a2 + 1548) = 0u;
    *(_OWORD *)(a2 + 1564) = 0u;
    *(_OWORD *)(a2 + 1516) = 0u;
    *(_OWORD *)(a2 + 1532) = 0u;
    *(_OWORD *)(a2 + 1484) = 0u;
    *(_OWORD *)(a2 + 1500) = 0u;
    *(_OWORD *)(a2 + 1452) = 0u;
    *(_OWORD *)(a2 + 1468) = 0u;
    *(_OWORD *)(a2 + 1420) = 0u;
    *(_OWORD *)(a2 + 1436) = 0u;
    *(_OWORD *)(a2 + 1388) = 0u;
    *(_OWORD *)(a2 + 1404) = 0u;
    if (*(unsigned char *)(v187 + 91))
    {
      *(unsigned char *)(a2 + 1457) = 1;
      *(_WORD *)(a2 + 1446) = *(_WORD *)(v187 + 80);
      unsigned int v90 = *(unsigned __int16 *)(v187 + 82);
      if (v90 >= 0x64)
      {
        double v91 = v34 * (double)v90;
        v79.i64[0] = -0.5;
        if (v91 > 0.0) {
          *(double *)v79.uint64_t i64 = 0.5;
        }
        double v92 = v91 + *(double *)v79.i64;
        if (v92 <= 2147483650.0)
        {
          v79.i16[3] = -15904;
          if (v92 >= -2147483650.0) {
            unsigned int v90 = (int)v92;
          }
          else {
            LOBYTE(v90) = 0;
          }
        }
        else
        {
          LOBYTE(v90) = -1;
        }
      }
      *(unsigned char *)(a2 + 1448) = v90;
      *(_WORD *)(a2 + 1450) = *(_WORD *)(v187 + 84);
      *(unsigned char *)(a2 + 1452) = *(unsigned char *)(v187 + 86);
      *(_WORD *)(a2 + 1454) = *(_WORD *)(v187 + 88);
      *(unsigned char *)(a2 + 1456) = *(unsigned char *)(v187 + 90);
    }
    if (*(unsigned char *)(v187 + 5))
    {
      *(_WORD *)(a2 + 1390) = 256;
      *(_WORD *)(a2 + 1388) = *(_WORD *)v187;
      unsigned int v93 = *(unsigned __int8 *)(v187 + 4);
      if (v93 < 0x64)
      {
LABEL_162:
        *(unsigned char *)(a2 + 1390) = v93;
        goto LABEL_163;
      }
      if (*(_WORD *)(v187 + 2))
      {
        double v94 = v34 * (double)*(unsigned __int16 *)(v187 + 2);
        v79.i64[0] = -0.5;
        if (v94 > 0.0) {
          *(double *)v79.uint64_t i64 = 0.5;
        }
        double v95 = v94 + *(double *)v79.i64;
        if (v95 <= 2147483650.0)
        {
          v79.i16[3] = -15904;
          if (v95 >= -2147483650.0) {
            unsigned int v93 = (int)v95;
          }
          else {
            LOBYTE(v93) = 0;
          }
        }
        else
        {
          LOBYTE(v93) = -1;
        }
        goto LABEL_162;
      }
    }
LABEL_163:
    if (*(unsigned char *)(v187 + 76))
    {
      *(unsigned char *)(a2 + 1444) = 1;
      *(_WORD *)(a2 + 1392) = *(_WORD *)(v187 + 8);
      *(void *)&long long v96 = *(void *)(v187 + 10);
      WORD4(v96) = *(_WORD *)(v187 + 18);
      WORD5(v96) = *(_WORD *)(v187 + 30);
      v79.i32[0] = *(unsigned __int16 *)(v7 + 11204);
      v79.i16[2] = *(_WORD *)(v7 + 11206);
      HIDWORD(v96) = vmovn_s32(v79).u32[0];
      *(_OWORD *)(a2 + 1394) = v96;
      *(_DWORD *)(a2 + 1410) = *(_DWORD *)(v187 + 36);
      *(void *)&long long v96 = *(void *)(v187 + 50);
      *(void *)(a2 + 1414) = v96;
      *(_WORD *)(a2 + 1422) = *(_WORD *)(v187 + 58);
      LOWORD(v96) = *(_WORD *)(v187 + 20);
      double v97 = v34 * (double)(unint64_t)v96;
      double v98 = -0.5;
      if (v97 <= 0.0) {
        double v99 = -0.5;
      }
      else {
        double v99 = 0.5;
      }
      double v100 = v97 + v99;
      if (v100 <= 2147483650.0)
      {
        if (v100 >= -2147483650.0) {
          int v101 = (int)v100;
        }
        else {
          LOBYTE(v101) = 0;
        }
      }
      else
      {
        LOBYTE(v101) = -1;
      }
      *(unsigned char *)(a2 + 1424) = v101;
      LOWORD(v100) = *(_WORD *)(v187 + 22);
      double v102 = v34 * (double)*(unint64_t *)&v100;
      if (v102 > 0.0) {
        double v98 = 0.5;
      }
      double v103 = v102 + v98;
      if (v103 <= 2147483650.0)
      {
        if (v103 >= -2147483650.0) {
          int v104 = (int)v103;
        }
        else {
          LOBYTE(v104) = 0;
        }
      }
      else
      {
        LOBYTE(v104) = -1;
      }
      *(unsigned char *)(a2 + 1425) = v104;
      LOWORD(v103) = *(_WORD *)(v187 + 24);
      double v105 = v34 * (double)*(unint64_t *)&v103;
      double v106 = -0.5;
      if (v105 <= 0.0) {
        double v107 = -0.5;
      }
      else {
        double v107 = 0.5;
      }
      double v108 = v105 + v107;
      if (v108 <= 2147483650.0)
      {
        if (v108 >= -2147483650.0) {
          int v109 = (int)v108;
        }
        else {
          LOBYTE(v109) = 0;
        }
      }
      else
      {
        LOBYTE(v109) = -1;
      }
      *(unsigned char *)(a2 + 1426) = v109;
      LOWORD(v108) = *(_WORD *)(v187 + 26);
      double v110 = v34 * (double)*(unint64_t *)&v108;
      if (v110 > 0.0) {
        double v106 = 0.5;
      }
      double v111 = v110 + v106;
      if (v111 <= 2147483650.0)
      {
        if (v111 >= -2147483650.0) {
          int v112 = (int)v111;
        }
        else {
          LOBYTE(v112) = 0;
        }
      }
      else
      {
        LOBYTE(v112) = -1;
      }
      *(unsigned char *)(a2 + 1427) = v112;
      LOWORD(v111) = *(_WORD *)(v187 + 28);
      double v113 = v34 * (double)*(unint64_t *)&v111;
      double v114 = -0.5;
      if (v113 <= 0.0) {
        double v115 = -0.5;
      }
      else {
        double v115 = 0.5;
      }
      double v116 = v113 + v115;
      if (v116 <= 2147483650.0)
      {
        if (v116 >= -2147483650.0) {
          int v117 = (int)v116;
        }
        else {
          LOBYTE(v117) = 0;
        }
      }
      else
      {
        LOBYTE(v117) = -1;
      }
      *(unsigned char *)(a2 + 1428) = v117;
      LOWORD(v116) = *(_WORD *)(v187 + 40);
      double v118 = v34 * (double)*(unint64_t *)&v116;
      if (v118 > 0.0) {
        double v114 = 0.5;
      }
      double v119 = v118 + v114;
      if (v119 <= 2147483650.0)
      {
        if (v119 >= -2147483650.0) {
          int v120 = (int)v119;
        }
        else {
          LOBYTE(v120) = 0;
        }
      }
      else
      {
        LOBYTE(v120) = -1;
      }
      *(unsigned char *)(a2 + 1429) = v120;
      LOWORD(v119) = *(_WORD *)(v187 + 42);
      double v121 = v34 * (double)*(unint64_t *)&v119;
      double v122 = -0.5;
      if (v121 <= 0.0) {
        double v123 = -0.5;
      }
      else {
        double v123 = 0.5;
      }
      double v124 = v121 + v123;
      if (v124 <= 2147483650.0)
      {
        if (v124 >= -2147483650.0) {
          int v125 = (int)v124;
        }
        else {
          LOBYTE(v125) = 0;
        }
      }
      else
      {
        LOBYTE(v125) = -1;
      }
      *(unsigned char *)(a2 + 1430) = v125;
      LOWORD(v124) = *(_WORD *)(v187 + 44);
      double v126 = v34 * (double)*(unint64_t *)&v124;
      if (v126 > 0.0) {
        double v122 = 0.5;
      }
      double v127 = v126 + v122;
      if (v127 <= 2147483650.0)
      {
        if (v127 >= -2147483650.0) {
          int v128 = (int)v127;
        }
        else {
          LOBYTE(v128) = 0;
        }
      }
      else
      {
        LOBYTE(v128) = -1;
      }
      *(unsigned char *)(a2 + 1431) = v128;
      LOWORD(v127) = *(_WORD *)(v187 + 46);
      double v129 = v34 * (double)*(unint64_t *)&v127;
      double v130 = -0.5;
      if (v129 <= 0.0) {
        double v131 = -0.5;
      }
      else {
        double v131 = 0.5;
      }
      double v132 = v129 + v131;
      if (v132 <= 2147483650.0)
      {
        if (v132 >= -2147483650.0) {
          int v133 = (int)v132;
        }
        else {
          LOBYTE(v133) = 0;
        }
      }
      else
      {
        LOBYTE(v133) = -1;
      }
      *(unsigned char *)(a2 + 1432) = v133;
      LOWORD(v132) = *(_WORD *)(v187 + 48);
      double v134 = v34 * (double)*(unint64_t *)&v132;
      if (v134 > 0.0) {
        double v130 = 0.5;
      }
      double v135 = v134 + v130;
      if (v135 <= 2147483650.0)
      {
        if (v135 >= -2147483650.0) {
          int v136 = (int)v135;
        }
        else {
          LOBYTE(v136) = 0;
        }
      }
      else
      {
        LOBYTE(v136) = -1;
      }
      *(unsigned char *)(a2 + 1433) = v136;
      LOWORD(v135) = *(_WORD *)(v187 + 60);
      double v137 = v34 * (double)*(unint64_t *)&v135;
      double v138 = -0.5;
      if (v137 <= 0.0) {
        double v139 = -0.5;
      }
      else {
        double v139 = 0.5;
      }
      double v140 = v137 + v139;
      if (v140 <= 2147483650.0)
      {
        if (v140 >= -2147483650.0) {
          int v141 = (int)v140;
        }
        else {
          LOBYTE(v141) = 0;
        }
      }
      else
      {
        LOBYTE(v141) = -1;
      }
      *(unsigned char *)(a2 + 1434) = v141;
      LOWORD(v140) = *(_WORD *)(v187 + 62);
      double v142 = v34 * (double)*(unint64_t *)&v140;
      if (v142 > 0.0) {
        double v138 = 0.5;
      }
      double v143 = v142 + v138;
      if (v143 <= 2147483650.0)
      {
        if (v143 >= -2147483650.0) {
          int v144 = (int)v143;
        }
        else {
          LOBYTE(v144) = 0;
        }
      }
      else
      {
        LOBYTE(v144) = -1;
      }
      *(unsigned char *)(a2 + 1435) = v144;
      LOWORD(v143) = *(_WORD *)(v187 + 64);
      double v145 = v34 * (double)*(unint64_t *)&v143;
      double v146 = -0.5;
      if (v145 <= 0.0) {
        double v147 = -0.5;
      }
      else {
        double v147 = 0.5;
      }
      double v148 = v145 + v147;
      if (v148 <= 2147483650.0)
      {
        if (v148 >= -2147483650.0) {
          int v149 = (int)v148;
        }
        else {
          LOBYTE(v149) = 0;
        }
      }
      else
      {
        LOBYTE(v149) = -1;
      }
      *(unsigned char *)(a2 + 1436) = v149;
      LOWORD(v148) = *(_WORD *)(v187 + 66);
      double v150 = v34 * (double)*(unint64_t *)&v148;
      if (v150 > 0.0) {
        double v146 = 0.5;
      }
      double v151 = v150 + v146;
      if (v151 <= 2147483650.0)
      {
        if (v151 >= -2147483650.0) {
          int v152 = (int)v151;
        }
        else {
          LOBYTE(v152) = 0;
        }
      }
      else
      {
        LOBYTE(v152) = -1;
      }
      *(unsigned char *)(a2 + 1437) = v152;
      LOWORD(v151) = *(_WORD *)(v187 + 68);
      double v153 = v34 * (double)*(unint64_t *)&v151;
      double v154 = -0.5;
      if (v153 > 0.0) {
        double v154 = 0.5;
      }
      double v155 = v153 + v154;
      if (v155 <= 2147483650.0)
      {
        if (v155 >= -2147483650.0) {
          int v156 = (int)v155;
        }
        else {
          LOBYTE(v156) = 0;
        }
      }
      else
      {
        LOBYTE(v156) = -1;
      }
      *(unsigned char *)(a2 + 1438) = v156;
      *(_DWORD *)(a2 + 1440) = *(_DWORD *)(v7 + 11244);
    }
    if (*(unsigned char *)(v187 + 208))
    {
      long long v157 = *(_OWORD *)(v7 + 11280);
      long long v158 = *(_OWORD *)(v7 + 11312);
      *(_OWORD *)(a2 + 1492) = *(_OWORD *)(v7 + 11296);
      *(_OWORD *)(a2 + 1508) = v158;
      *(_OWORD *)(a2 + 1476) = v157;
      long long v159 = *(_OWORD *)(v7 + 11328);
      long long v160 = *(_OWORD *)(v7 + 11344);
      long long v161 = *(_OWORD *)(v7 + 11360);
      *(void *)(a2 + 1572) = *(void *)(v7 + 11376);
      *(_OWORD *)(a2 + 1540) = v160;
      *(_OWORD *)(a2 + 1556) = v161;
      *(_OWORD *)(a2 + 1524) = v159;
    }
    if (*(unsigned char *)(v187 + 106)) {
      *(_OWORD *)(a2 + 1460) = *(_OWORD *)(v7 + 11264);
    }
LABEL_281:
    if (*(unsigned char *)(v7 + 408) && *(_DWORD *)(v7 + 10816) == *(_DWORD *)(v7 + 448)
      || *(unsigned char *)(v7 + 412) && *(_DWORD *)(v7 + 10820) == *(_DWORD *)(v7 + 448)
      || *(unsigned char *)(v7 + 416) && *(_DWORD *)(v7 + 10824) == *(_DWORD *)(v7 + 448)
      || *(unsigned char *)(v7 + 420) && *(_DWORD *)(v7 + 10828) == *(_DWORD *)(v7 + 448))
    {
      memcpy(a5, (const void *)(v7 + 8128), 0xA80uLL);
      if (*(unsigned char *)(v7 + 408))
      {
        a5[672] = *(_DWORD *)(v7 + 10816);
        uint64_t v162 = *(unsigned __int8 *)(v7 + 409);
        uint64_t v163 = *(unsigned __int8 *)(v7 + 410);
        uint64_t v164 = (v162 - v163);
        if ((int)v164 >= 1)
        {
          unsigned __int8 v165 = *(unsigned char *)(v7 + 411) + v162 - v163;
          *(unsigned char *)(v7 + 411) = v165;
          EvLog_nd("ME_Poll_New: Missed {G", 4, v8, v164, v165, v162, v163);
        }
      }
      if (*(unsigned char *)(v7 + 412))
      {
        a5[673] = *(_DWORD *)(v7 + 10820);
        uint64_t v166 = *(unsigned __int8 *)(v7 + 413);
        uint64_t v167 = *(unsigned __int8 *)(v7 + 414);
        uint64_t v168 = (v166 - v167);
        if ((int)v168 >= 1)
        {
          unsigned __int8 v169 = *(unsigned char *)(v7 + 415) + v166 - v167;
          *(unsigned char *)(v7 + 415) = v169;
          EvLog_nd("ME_Poll_New: Missed {F", 4, v8, v168, v169, v166, v167);
        }
      }
      if (*(unsigned char *)(v7 + 416))
      {
        a5[674] = *(_DWORD *)(v7 + 10824);
        uint64_t v170 = *(unsigned __int8 *)(v7 + 417);
        uint64_t v171 = *(unsigned __int8 *)(v7 + 418);
        uint64_t v172 = (v170 - v171);
        if ((int)v172 >= 1)
        {
          unsigned __int8 v173 = *(unsigned char *)(v7 + 419) + v170 - v171;
          *(unsigned char *)(v7 + 419) = v173;
          EvLog_nd("ME_Poll_New: Missed {A I", 4, v8, v172, v173, v170, v171);
        }
      }
      if (*(unsigned char *)(v7 + 420))
      {
        a5[675] = *(_DWORD *)(v7 + 10828);
        uint64_t v174 = *(unsigned __int8 *)(v7 + 421);
        uint64_t v175 = *(unsigned __int8 *)(v7 + 422);
        uint64_t v176 = (v174 - v175);
        if ((int)v176 >= 1)
        {
          unsigned __int8 v177 = *(unsigned char *)(v7 + 423) + v174 - v175;
          *(unsigned char *)(v7 + 423) = v177;
          EvLog_nd("ME_Poll_New: Missed {C", 4, v8, v176, v177, v174, v175);
        }
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)(v7 + 448);
    unsigned int v178 = *(_DWORD *)(v7 + 468);
    a3[4] = v178;
    *(unsigned char *)(a2 + 20) = *(unsigned __int8 *)(v7 + 491) == *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned char *)(v7 + 424))
    {
      unsigned int v179 = *(_DWORD *)(v7 + 432);
      if (v179)
      {
        uint64_t v204 = 0;
        *(void *)&v203[0] = v178;
        v203[1] = (double)*(int *)(v7 + 428) * 0.001;
        unsigned int v180 = v179 / 0x3E8;
        if (v179 < 0x3E8) {
          unsigned int v180 = 1;
        }
        LODWORD(v204) = v180;
        Core_Set_Clk_Drift("ME {O eFA:", v203, v8);
      }
    }
    goto LABEL_306;
  }
  EvCrt_d("ME_Poll_New: Invalid TTick", v18);
LABEL_306:
  uint64_t v181 = 0;
  *(unsigned char *)(v7 + 424) = 0;
  *(unsigned char *)(v7 + 412) = 0;
  *(unsigned char *)(v7 + 416) = 0;
  *(unsigned char *)(v7 + 420) = 0;
  *(_WORD *)(v7 + 413) = 0;
  *(_WORD *)(v7 + 417) = 0;
  *(_WORD *)(v7 + 421) = 0;
  *(void *)uint64_t v188 = 0;
  *(unsigned char *)(v188 + 8) = 0;
  do
  {
    uint64_t v182 = v7 + 540 + v181;
    *(void *)uint64_t v182 = 0;
    *(void *)(v182 + 8) = 0;
    *(_DWORD *)(v182 + 15) = 0;
    v181 += 20;
  }
  while (v181 != 160);
  uint64_t v183 = 0;
  uint64_t v184 = v7;
  do
  {
    *(void *)(v184 + 752) = 0;
    *(_OWORD *)(v184 + 720) = 0uLL;
    *(_OWORD *)(v184 + 736) = 0uLL;
    *(_OWORD *)(v184 + 704) = 0uLL;
    uint64_t v185 = v7 + 3392 + v183;
    *(unsigned char *)(v185 + 32) = 0;
    *(_OWORD *)uint64_t v185 = 0uLL;
    *(_OWORD *)(v185 + 16) = 0uLL;
    *(void *)(v184 + 8173) = 0;
    *(_OWORD *)(v184 + 8160) = 0uLL;
    v183 += 36;
    *(_OWORD *)(v184 + 8144) = 0uLL;
    *(_OWORD *)(v184 + 8128) = 0uLL;
    v184 += 56;
  }
  while (v183 != 1728);
  *(_DWORD *)(v7 + 11172) = 0;
  *(_WORD *)(v7 + 11176) = 0;
  *(_OWORD *)(v7 + 11180) = 0u;
  *(_OWORD *)(v7 + 11196) = 0u;
  *(_OWORD *)(v7 + 11212) = 0u;
  *(_OWORD *)(v7 + 11228) = 0u;
  *(void *)(v7 + 11241) = 0;
  *((unsigned char *)v199 + 312) = 0;
  *(_DWORD *)(v7 + 11380) = 0;
  *(_OWORD *)(v7 + 11252) = 0u;
  *(_OWORD *)(v7 + 11268) = 0u;
  *(_OWORD *)(v7 + 11284) = 0u;
  *(_OWORD *)(v7 + 11300) = 0u;
  *(_OWORD *)(v7 + 11316) = 0u;
  *(_OWORD *)(v7 + 11332) = 0u;
  *(_OWORD *)(v7 + 11348) = 0u;
  *(_OWORD *)(v7 + 11364) = 0u;
  *((unsigned char *)v199 + 313) = v189;
  BOOL result = *(_DWORD *)(v7 + 508) == 0;
  *(_OWORD *)(v7 + 10816) = 0u;
  return result;
}

void *G5K_ME_Flush_Data()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v1 = v0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(_WORD *)(v0 + 412) = 0;
  *(unsigned char *)(v0 + 416) = 0;
  *(unsigned char *)(v0 + 420) = 0;
  *(unsigned char *)(v0 + 424) = 0;
  *(unsigned char *)(v0 + 500) = 0;
  *(unsigned char *)(v0 + 414) = 0;
  *(_WORD *)(v0 + 417) = 0;
  *(_WORD *)(v0 + 421) = 0;
  *(_DWORD *)(v0 + 496) = 0;
  *(unsigned char *)(v0 + 465) = 0;
  *(void *)(v0 + 402) = 0;
  uint64_t v2 = 540;
  *(unsigned char *)(v0 + 410) = 0;
  do
  {
    uint64_t v3 = v0 + v2;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 15) = 0;
    v2 += 20;
  }
  while (v2 != 700);
  *(void *)(v0 + 11151) = 0;
  *(_OWORD *)(v0 + 11136) = 0u;
  *(_OWORD *)(v0 + 11120) = 0u;
  *(_OWORD *)(v0 + 11104) = 0u;
  *(_OWORD *)(v0 + 11088) = 0u;
  *(_OWORD *)(v0 + 11072) = 0u;
  *(_OWORD *)(v0 + 11056) = 0u;
  *(_OWORD *)(v0 + 11040) = 0u;
  *(_OWORD *)(v0 + 11024) = 0u;
  *(_OWORD *)(v0 + 11008) = 0u;
  *(_OWORD *)(v0 + 10992) = 0u;
  *(_OWORD *)(v0 + 10976) = 0u;
  *(_OWORD *)(v0 + 10960) = 0u;
  *(_OWORD *)(v0 + 10944) = 0u;
  *(_OWORD *)(v0 + 10928) = 0u;
  *(_OWORD *)(v0 + 10912) = 0u;
  *(_OWORD *)(v0 + 10896) = 0u;
  *(_OWORD *)(v0 + 10880) = 0u;
  *(_OWORD *)(v0 + 10864) = 0u;
  *(_OWORD *)(v0 + 10848) = 0u;
  *(_OWORD *)(v0 + 10832) = 0u;
  int v4 = *(_DWORD *)(v0 + 504);
  uint64_t v5 = *(void *)(v0 + 394);
  char v6 = *(unsigned char *)(v0 + 411);
  char v7 = *(unsigned char *)(v0 + 415);
  char v8 = *(unsigned char *)(v0 + 419);
  char v9 = *(unsigned char *)(v0 + 423);
  bzero(__src, 0x2C78uLL);
  uint64_t v10 = 135;
  do
  {
    int v11 = &__src[v10];
    *(unsigned char *)int v11 = 0;
    *(void *)(v11 + 1) = 0;
    *(void *)((char *)v11 + 11) = 0;
    v10 += 5;
  }
  while (v11 + 5 != &__src[175]);
  uint64_t v12 = 176;
  do
  {
    uint64_t v13 = &__src[v12];
    *(void *)uint64_t v13 = 0;
    *((_WORD *)v13 + 4) = 0;
    *(void *)(v13 + 3) = 0;
    *((_WORD *)v13 + 10) = 0;
    *((void *)v13 + 6) = 0;
    *((void *)v13 + 3) = 0;
    *((void *)v13 + 4) = 0;
    v12 += 14;
    *((_WORD *)v13 + 20) = 0;
  }
  while (v13 + 14 != &__src[848]);
  for (uint64_t i = 848; i != 1280; i += 9)
  {
    int v15 = &__src[i];
    *((unsigned char *)v15 + 32) = 0;
    *(_OWORD *)int v15 = 0uLL;
    *((_OWORD *)v15 + 1) = 0uLL;
  }
  uint64_t v16 = 0x3FFFFFFFFFFFFF10;
  do
  {
    int v17 = &__src[v16];
    *((_WORD *)v17 + 3048) = 0;
    *((_OWORD *)v17 + 380) = 0uLL;
    v16 += 5;
  }
  while (v16 * 4);
  uint64_t v18 = 0x3FFFFFFFFFFFFE00;
  do
  {
    *(void *)&__src[v18 + 2032] = 0;
    *(void *)((char *)&__src[v18 + 2033] + 2) = 0;
    v18 += 4;
  }
  while (v18 * 4);
  uint64_t v19 = 2032;
  do
  {
    uint64_t v20 = &__src[v19];
    _DWORD *v20 = 0;
    *((unsigned char *)v20 + 52) = 0;
    v19 += 14;
  }
  while (v20 + 14 != &__src[2704]);
  LOWORD(__src[2790]) = 0;
  __src[2811] = 0;
  LOBYTE(__src[2812]) = 0;
  memset(&__src[2795], 0, 62);
  __src[2815] = 0;
  *(_DWORD *)((char *)&__src[2813] + 3) = 0;
  __src[2813] = 0;
  memset(&__src[2704], 0, 343);
  *(void *)((char *)&__src[2792] + 2) = 0;
  *(void *)&__src[2791] = 0;
  BOOL result = memcpy((void *)v1, __src, 0x2C78uLL);
  *(void *)(v1 + 384) = v1;
  *(_DWORD *)(v1 + 504) = v4;
  *(void *)(v1 + 394) = v5;
  *(unsigned char *)(v1 + 411) = v6;
  *(unsigned char *)(v1 + 415) = v7;
  *(unsigned char *)(v1 + 419) = v8;
  *(unsigned char *)(v1 + 423) = v9;
  return result;
}

void Gnm35_11SendV1FwDbgCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v28 = *MEMORY[0x263EF8340];
  memset_s(__s, 0x7FCuLL, 0, 0x7FCuLL);
  memset_s(v25, 0x7FCuLL, 0, 0x7FCuLL);
  *(_DWORD *)&v23[3] = 0;
  long long v23[7] = 0;
  strcpy(v23, "Dd");
  strcpy(v22, "Di");
  __s[0] = 83;
  v25[0] = 83;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v23[3], 5u);
  if ((v23[7] & 8) != 0)
  {
    char v6 = 4;
  }
  else
  {
    if ((v23[7] & 2) != 0) {
      char v6 = 2;
    }
    else {
      char v6 = 1;
    }
    if ((v23[7] & 4) != 0) {
      char v6 = 3;
    }
  }
  void v25[4] = v6;
  v25[10] = v6;
  v25[11] = v6;
  if (*(_DWORD *)&v23[3]) {
    BOOL v7 = v23[7] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    int v8 = 0;
  }
  else {
    int v8 = 3088;
  }
  *(_DWORD *)&v23[3] = 0;
  long long v23[7] = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v23[3], 6u);
  if ((v23[7] & 8) != 0)
  {
    char v9 = 4;
  }
  else if ((v23[7] & 4) != 0)
  {
    char v9 = 3;
  }
  else if ((v23[7] & 2) != 0)
  {
    char v9 = 2;
  }
  else
  {
    char v9 = 1;
  }
  double v25[9] = v9;
  if (*(_DWORD *)&v23[3]) {
    BOOL v10 = v23[7] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    v8 |= 0x200u;
  }
  *(_DWORD *)&v23[3] = 0;
  long long v23[7] = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v23[3], 7u);
  if ((v23[7] & 8) != 0)
  {
    char v11 = 4;
  }
  else if ((v23[7] & 4) != 0)
  {
    char v11 = 3;
  }
  else if ((v23[7] & 2) != 0)
  {
    char v11 = 2;
  }
  else
  {
    char v11 = 1;
  }
  v25[6] = v11;
  if (*(_DWORD *)&v23[3]) {
    BOOL v12 = v23[7] == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12) {
    v8 |= 0x40u;
  }
  *(_DWORD *)&v23[3] = 0;
  long long v23[7] = 0;
  char v13 = 4;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v23[3], 4u);
  if ((v23[7] & 8) == 0)
  {
    if ((v23[7] & 4) != 0)
    {
      char v13 = 3;
    }
    else if ((v23[7] & 2) != 0)
    {
      char v13 = 2;
    }
    else
    {
      char v13 = 1;
    }
  }
  v25[7] = v13;
  if (*(_DWORD *)&v23[3]) {
    BOOL v14 = v23[7] == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14) {
    v8 |= 0x80u;
  }
  *(_DWORD *)&v23[3] = 0;
  long long v23[7] = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v23[3], 0x14u);
  if ((v23[7] & 8) != 0)
  {
    char v15 = 4;
  }
  else if ((v23[7] & 4) != 0)
  {
    char v15 = 3;
  }
  else if ((v23[7] & 2) != 0)
  {
    char v15 = 2;
  }
  else
  {
    char v15 = 1;
  }
  v25[8] = v15;
  if (*(_DWORD *)&v23[3]) {
    BOOL v16 = v23[7] == 0;
  }
  else {
    BOOL v16 = 1;
  }
  unsigned int v17 = v8 | 0x100;
  if (v16) {
    unsigned int v17 = v8;
  }
  if (v17 <= 1) {
    LOWORD(v17) = 1;
  }
  __int16 v27 = v17;
  Gnm07_06EncodeNSend((unsigned __int8 *)v23, (uint64_t)__s, "EXT DEBUG CFG");
  Gnm07_06EncodeNSend((unsigned __int8 *)v22, (uint64_t)v25, "INT DEBUG CFG");
  uint64_t v18 = gnssOsa_Calloc("Gnm35_11SendV1FwDbgCfg", 136, 1, 0x50uLL);
  if (v18)
  {
    uint64_t v19 = v18;
    double v18[3] = 64;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CFG_UPDATE_IND =>GNCP CfgMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 73, "Gnm35_11SendV1FwDbgCfg", v19[3]);
      LbsOsaTrace_WriteLog(0xBu, __str, v21, 4, 1);
    }
    AgpsSendFsmMsg(128, 134, 8394499, v19);
  }
}

uint64_t Gnm35_32MapV1TaDebugConfig(int a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unsigned int TaTraceCfg = Gnm34_15GetTaTraceCfg(a1);
  unsigned int v2 = TaTraceCfg;
  if (TaTraceCfg >= 7)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    LOBYTE(v3) = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TaLogSeverity,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm35_32MapV1TaDebugConfig", 770, v2);
      LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
      LOBYTE(v3) = 0;
    }
  }
  else
  {
    return (0x4030403020100uLL >> (8 * TaTraceCfg));
  }
  return v3;
}

uint64_t Gnm35_15SendV2DbgCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v16 = *MEMORY[0x263EF8340];
  memset_s(&__s, 0x7FCuLL, 0, 0x7FCuLL);
  memset_s(&v9, 0x7FCuLL, 0, 0x7FCuLL);
  qmemcpy(v8, "DfP", sizeof(v8));
  __int16 __s = 339;
  char DebugElCfgV2 = Gnm35_51GetDebugElCfgV2(5u);
  char v14 = Gnm35_51GetDebugElCfgV2(5u);
  char v15 = Gnm35_51GetDebugElCfgV2(5u);
  Gnm07_06EncodeNSend(v8, (uint64_t)&__s, "GCPU DEBUG CFG");
  qmemcpy(v7, "DmM", sizeof(v7));
  __int16 v9 = 339;
  char v10 = Gnm35_51GetDebugElCfgV2(0x14u);
  char v11 = Gnm35_51GetDebugElCfgV2(4u);
  return Gnm07_06EncodeNSend(v7, (uint64_t)&v9, "MCPU DEBUG CFG");
}

uint64_t Gnm35_51GetDebugElCfgV2(unsigned int a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v11 = 0;
  char v12 = 0;
  if (LbsOsaTrace_GetModuleConfig((uint64_t)&v11, a1))
  {
    if ((v12 & 2) != 0) {
      char v2 = 2;
    }
    else {
      char v2 = 1;
    }
    if ((v12 & 4) != 0) {
      char v3 = 3;
    }
    else {
      char v3 = v2;
    }
    if ((v12 & 8) != 0) {
      unsigned __int8 v4 = 4;
    }
    else {
      unsigned __int8 v4 = v3;
    }
    if (v11) {
      BOOL v5 = v12 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5) {
      return 0;
    }
    else {
      return v4;
    }
  }
  else
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    unsigned __int8 v6 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Module,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm35_51GetDebugElCfgV2", 770, a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
      return 0;
    }
  }
  return v6;
}

uint64_t Gnm35_15SendV1TaDbgCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v16 = *MEMORY[0x263EF8340];
  memset_s(&__s, 0x7FCuLL, 0, 0x7FCuLL);
  memset_s(&v9, 0x7FCuLL, 0, 0x7FCuLL);
  qmemcpy(v8, "DfP", sizeof(v8));
  __int16 __s = 595;
  char v13 = Gnm35_32MapV1TaDebugConfig(1);
  char v14 = Gnm35_32MapV1TaDebugConfig(2);
  char v15 = Gnm35_32MapV1TaDebugConfig(3);
  Gnm07_06EncodeNSend(v8, (uint64_t)&__s, "GCPU TA DEBUG CFG");
  qmemcpy(v7, "DmM", sizeof(v7));
  __int16 v9 = 595;
  char v10 = Gnm35_32MapV1TaDebugConfig(5);
  char v11 = Gnm35_32MapV1TaDebugConfig(4);
  return Gnm07_06EncodeNSend(v7, (uint64_t)&v9, "MCPU TA DEBUG CFG");
}

void Gnm35_12SendDbgCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (g_HWStatus)
  {
    int v6 = qword_26AE53174;
    if (qword_26AE53174 != 3431 || HIDWORD(qword_26AE53174) != 2 || dword_26AE5317C != 1)
    {
      if (qword_26AE53174 != 1107 && qword_26AE53174 != 2472)
      {
        if (qword_26AE53174 != 2473)
        {
          int v9 = g_GnssHw;
          goto LABEL_23;
        }
LABEL_18:
        uint64_t v10 = Gnm35_15SendV2DbgCfg(a1, a2, a3, a4, a5, a6);
        Gnm35_15SendV1TaDbgCfg(v10, v11, v12, v13, v14, v15);
        return;
      }
LABEL_27:
      Gnm35_15SendV2DbgCfg(a1, a2, a3, a4, a5, a6);
      return;
    }
LABEL_15:
    Gnm35_11SendV1FwDbgCfg(a1, a2, a3, a4, a5, a6);
    return;
  }
  int v9 = g_GnssHw;
  if (g_GnssHw == 2) {
    goto LABEL_18;
  }
  if (!g_GnssHw) {
    goto LABEL_15;
  }
  if ((g_GnssHw | 2) == 3) {
    goto LABEL_27;
  }
  int v6 = qword_26AE53174;
LABEL_23:
  BOOL v16 = v6 == 848;
  BOOL v17 = v9 == 4;
  if (g_HWStatus) {
    BOOL v18 = v16;
  }
  else {
    BOOL v18 = v17;
  }
  if (v18) {
    goto LABEL_27;
  }
}

uint64_t Gnm35_31HandleDMessages(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  switch(*(unsigned char *)(a2 + 1))
  {
    case 'D':
      int v3 = *a1;
      unsigned __int8 v4 = "ExtDbgCfg";
      goto LABEL_8;
    case 'F':
      int v3 = *a1;
      unsigned __int8 v4 = "GcpuDbgCfg";
      goto LABEL_8;
    case 'I':
      int v3 = *a1;
      unsigned __int8 v4 = "IntDbgCfg";
      goto LABEL_8;
    case 'M':
      int v3 = *a1;
      unsigned __int8 v4 = "McpuDbgCfg";
LABEL_8:
      Gnm35_21HandleDRspStatus(v3, v4);
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm35_31HandleDMessages", 778, *(unsigned __int8 *)(a2 + 1));
        LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
      }
      break;
  }
  return 0;
}

size_t Gnm35_21HandleDRspStatus(int a1, const char *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 == 32)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm35_21HandleDRspStatus", a2);
    int v6 = 4;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx %s Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm35_21HandleDRspStatus", 257, a2, a1);
    int v6 = 2;
  }
  return LbsOsaTrace_WriteLog(0xBu, __str, v5, v6, 1);
}

uint64_t GncP01_00InitPeUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  GN_GPS_Initialise(a1, a2, a3, a4, a5, a6);
  uint64_t result = gnssOsa_InitCriticalSection("GncP01_00InitPeUpdate", 92, &g_PosUpdateCritic);
  g_GncP_PEUpdate[6360] = 0;
  g_GncP_PEUpdate[0] = 0;
  word_26AE01CEC = 0;
  *(&byte_26AE00392 + 6492) = 0;
  g_GncP_PEUpdate[8080] = 0;
  qword_26AE02328 = 0;
  return result;
}

void gncP01_01DeInitPeUpdate(void)
{
  if (qword_26AE02328) {
    free((void *)qword_26AE02328);
  }
  qword_26AE02328 = 0;
}

void *GncP01_05ClearGncPosData(void)
{
  MEMORY[0x270FA5388]();
  __src[1012] = *MEMORY[0x263EF8340];
  bzero(__src, 0x1FA0uLL);
  uint64_t v0 = 0;
  WORD2(__src[797]) = -1;
  WORD2(__src[798]) = -1;
  do
  {
    uint64_t v1 = (char *)__src + v0;
    *((_DWORD *)v1 + 1611) = 0;
    char v2 = (char *)&__src[806] + v0;
    *((_DWORD *)v2 - 3) = 0;
    *(v2 - 8) = 0;
    *((unsigned char *)&__src[806] + v0) = -1;
    *((_WORD *)v1 + 3225) = -1;
    *((_DWORD *)v1 + 1613) = -1;
    v2[8] = -1;
    v0 += 28;
    *((_DWORD *)v1 + 1615) = -1;
  }
  while (v0 != 56);
  *(void *)((char *)&__src[811] + 4) = 0;
  uint64_t v3 = 8024;
  do
  {
    uint64_t v4 = (char *)__src + v3;
    *(void *)uint64_t v4 = 0;
    v4[8] = 127;
    *((_WORD *)v4 + 5) = 0;
    *((_DWORD *)v4 + 3) = 0;
    v4[16] = 0;
    *((_DWORD *)v4 + 5) = 0;
    v3 += 28;
    *((_WORD *)v4 + 12) = 0;
  }
  while (v4 + 28 != (char *)&__src[1010]);
  LOBYTE(__src[1010]) = 0;
  __src[1011] = 0;
  return memcpy(&g_GncP_PEUpdate, __src, 0x1FA0uLL);
}

void *GncP01_27PopulateGadData(uint64_t a1)
{
  int v2 = DWORD1(xmmword_26AE01C68);
  if (g_GncP_PEUpdate) {
    BOOL v3 = *(&g_GncP_PEUpdate + 6360) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3 || DWORD1(xmmword_26AE01C68) != dword_26AE00394) {
    goto LABEL_27;
  }
  if (!GncP11_30CheckUtcValidity((unsigned __int16)word_26AE003A2, (unsigned __int16)word_26AE003A4, (unsigned __int16)word_26AE003A6, (unsigned __int16)word_26AE003A8, (unsigned __int16)word_26AE003AA, (unsigned __int16)word_26AE003AC, (unsigned __int16)word_26AE003AE))
  {
    int v2 = DWORD1(xmmword_26AE01C68);
LABEL_27:
    *(_DWORD *)a1 = v2;
    *(_DWORD *)(a1 + 24) = v2;
    *(_DWORD *)(a1 + 28) = 7;
    goto LABEL_28;
  }
  int v5 = dword_26AE00398;
  int v6 = DWORD2(xmmword_26AE01C68);
  *(_DWORD *)a1 = DWORD2(xmmword_26AE01C68);
  *(_DWORD *)(a1 + 4) = v5;
  *(unsigned char *)(a1 + 13) = *((unsigned char *)&qword_26AE003B8 + 6356);
  int v7 = dword_26AE004D0 & 0x7707FFFF;
  *(_DWORD *)(a1 + 16) = dword_26AE004B8 & 0x373F;
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 28) = 0x200000001;
  *(void *)(a1 + 44) = qword_26AE01C98;
  *(_WORD *)(a1 + 52) = word_26AE01CA2;
  *(unsigned char *)(a1 + 54) = *((unsigned char *)&qword_26AE003D0 + 6356);
  *(unsigned char *)(a1 + 55) = *((unsigned char *)&qword_26AE003D0 + 6357);
  *(unsigned char *)(a1 + 64) = *((unsigned char *)&qword_26AE003D0 + 6359);
  *(unsigned char *)(a1 + 65) = *((unsigned char *)&qword_26AE003D8 + 6352);
  *(_WORD *)(a1 + 66) = -1;
  *(void *)(a1 + 68) = 0xFFFFFFFFLL;
  if (*((unsigned char *)&unk_26AE003C4 + 6352)) {
    int v8 = 2;
  }
  else {
    int v8 = 1;
  }
  *(_DWORD *)(a1 + 36) = 16;
  *(_DWORD *)(a1 + 40) = v8;
  unsigned int v9 = *((unsigned __int8 *)&qword_26AE003D0 + 6358);
  char v10 = 2 * v9;
  if (v9 > 0x59) {
    char v10 = -1;
  }
  *(unsigned char *)(a1 + 56) = v10;
  if (*((unsigned char *)&qword_26AE003D0 + 6352)) {
    int v11 = 2 * (*((unsigned char *)&qword_26AE003D0 + 6352) == 1);
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a1 + 60) = v11;
  *(_DWORD *)(a1 + 76) = 8;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)((char *)&xmmword_26AE01CA8 + 2);
  *(unsigned char *)(a1 + 84) = *((unsigned char *)&qword_26AE003D8 + 6353);
  *(_WORD *)(a1 + 86) = *((char *)&qword_26AE003D8 + 6358);
  int v12 = *((unsigned __int8 *)&qword_26AE003D8 + 6359);
  if (v12 == 255) {
    LOWORD(v12) = -1;
  }
  *(_WORD *)(a1 + 88) = v12;
  int v13 = *((unsigned __int8 *)&unk_26AE003E0 + 6352);
  if (v13 == 255) {
    LOWORD(v13) = -1;
  }
  *(_WORD *)(a1 + 90) = v13;
  *(_DWORD *)(a1 + 100) = dword_26AE01C78 % 0x36EE80u;
  *(unsigned char *)(a1 + 106) = *((unsigned char *)&word_26AE003AE + 6352);
  *(unsigned char *)(a1 + 107) = -1;
  *(_DWORD *)(a1 + 108) = xmmword_26AE01C88;
  *(_DWORD *)(a1 + 112) = GncP11_02ConvertAGnssID(HIDWORD(xmmword_26AE01C68));
  *(_DWORD *)(a1 + 92) = dword_26AE01C80;
  *(unsigned char *)(a1 + 96) = *((unsigned char *)&word_26AE003AE + 6352);
  if (word_26AE01C7C >= 0) {
    __int16 v14 = (int)((double)word_26AE01C7C * 0.4);
  }
  else {
    __int16 v14 = 0;
  }
  *(_WORD *)(a1 + 104) = v14;
  unsigned int v15 = llround(*(double *)&qword_26AE003D8);
  *(_WORD *)(a1 + 118) = word_26AE003B0;
  int v16 = dword_26AE00398;
  *(_DWORD *)(a1 + 120) = v15;
  *(_DWORD *)(a1 + 124) = v16;
  *(unsigned char *)(a1 + 116) = byte_26AE003A1;
LABEL_28:
  uint64_t result = memcpy_s("GncP01_27PopulateGadData", 1173, (void *)(a1 + 128), 0x38u, (char *)&xmmword_26AE01CA8 + 12, 0x38uLL);
  *(unsigned char *)(a1 + 184) = BYTE1(xmmword_26AE01C68);
  return result;
}

uint64_t GncP01_32ExecutePE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v182 = *MEMORY[0x263EF8340];
  GN_GPS_Update();
  memset_s(__s, 0x18C8uLL, 0, 0x18C8uLL);
  uint64_t result = 0;
  if (*(_DWORD *)xmmword_26AE66D18) {
    BOOL v7 = *(_DWORD *)xmmword_26AE66D18 == Last_Published_Nav_Data_TTag;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return result;
  }
  memcpy(__s, (const void *)xmmword_26AE66D18, sizeof(__s));
  Last_Published_Nav_Data_TTag = __s[0];
  int v8 = &g_Crc32_RemTable[230];
  if (*(_DWORD *)(*(void *)(p_api + 88) + 32) != __s[0])
  {
    memcpy(__s, (const void *)xmmword_26AE66D18, sizeof(__s));
    Last_Published_Nav_Data_TTag = __s[0];
  }
  if (gnssOsa_MacEnterCriticalSection("GncP01_31Update", 1216, &g_PosUpdateCritic))
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(v180, 0x410uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v11 = 1550;
      goto LABEL_191;
    }
    return result;
  }
  unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  LOWORD(v180[0]) = 0;
  BYTE2(v180[0]) = 0;
  HIDWORD(v180[0]) = 0;
  v180[794] = 0;
  memset_s(v180, 0x18D8uLL, 0, 0x18D8uLL);
  HIDWORD(v180[0]) = v12;
  LOBYTE(v180[0]) = 0;
  if ((void)xmmword_26AE66D18 && *(_DWORD *)xmmword_26AE66D18)
  {
    memcpy(&v180[1], (const void *)xmmword_26AE66D18, 0x18C8uLL);
    LOBYTE(v180[0]) = WORD1(v180[2]) != 0;
    BYTE1(v180[0]) = GN_AGPS_Get_UTC((uint64_t)v181);
  }
  uint64_t v13 = 0;
  char v14 = BYTE5(v180[40]);
  v181[0] = 0;
  *(_DWORD *)&v181[2] = 0;
  memset(&v181[8], 0, 27);
  char v15 = 1;
  while (1)
  {
    char v16 = v15;
    if (!GncP04_08GetNextSessInstn(v13, v181, 1u)) {
      break;
    }
    char v15 = 0;
    BOOL v17 = (char *)&v180[794] + 4 * v13;
    v17[1] = v181[0];
    *((_WORD *)v17 + 1) = *(_WORD *)&v181[2];
    *BOOL v17 = v14;
    uint64_t v13 = 1;
    if ((v16 & 1) == 0)
    {
      LOBYTE(v13) = 2;
      break;
    }
  }
  BYTE2(v180[0]) = v13;
  if (!LOBYTE(v180[0]) && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(v181, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: No Valid Nav\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 87, "GncP01_18UpdateNavData");
    LbsOsaTrace_WriteLog(8u, v181, v19, 2, 1);
  }
  memcpy(g_GncP_PEUpdate, v180, 0x18D8uLL);
  uint64_t v20 = 0;
  char v21 = 1;
  do
  {
    while (1)
    {
      char v22 = v21;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v20 + 8) == 1) {
        break;
      }
      char v21 = 0;
      uint64_t v20 = 1;
      if ((v22 & 1) == 0) {
        goto LABEL_27;
      }
    }
    char v21 = 0;
    char v23 = *((unsigned char *)&g_GncPCntxtInfo + 36 * v20 + 9);
    uint64_t v20 = 1;
  }
  while ((v22 & ((v23 & 2) == 0)) != 0);
  if ((v23 & 2) != 0)
  {
LABEL_35:
    uint64_t v28 = 0;
    *(_WORD *)uint64_t v181 = 0;
    *(void *)&v181[8] = 0;
    *(_DWORD *)&v181[16] = 0;
    *(_WORD *)&v181[20] = -1;
    v181[22] = 0;
    *(_DWORD *)&v181[24] = 0;
    *(_WORD *)&v181[28] = -1;
    *(_DWORD *)&v181[32] = 0;
    v181[36] = 0;
    do
    {
      uint64_t v29 = &v181[v28];
      *((_DWORD *)v29 + 21) = 0;
      *((_DWORD *)v29 + 19) = 0;
      v29[80] = 0;
      v29[88] = -1;
      *((_WORD *)v29 + 45) = -1;
      *((_DWORD *)v29 + 23) = -1;
      v29[96] = -1;
      v28 += 28;
      *((_DWORD *)v29 + 25) = -1;
    }
    while (v28 != 56);
    *(_DWORD *)&v181[4] = v12;
    GN_AGNSS_Get_GAD_Data(&v181[8], 255, (int *)&v181[12], (int *)&v181[16], &v181[20], &v181[22], (int *)&v181[24], &v181[28], (int *)&v181[32], &v181[36], (uint64_t)&v181[40]);
    if (!v30)
    {
LABEL_94:
      uint64_t v51 = 0;
      v165[0] = 0;
      int v166 = 0;
      memset(v169, 0, sizeof(v169));
      uint64_t v167 = 0;
      uint64_t v168 = 0;
      char v52 = 1;
      while (1)
      {
        char v53 = v52;
        if (!GncP04_08GetNextSessInstn(v51, v165, 2u)) {
          break;
        }
        uint64_t v171 = 0;
        unsigned int v172 = 0;
        __int16 v173 = -1;
        v174[0] = 0;
        int v175 = 0;
        __int16 v176 = -1;
        int v177 = 0;
        v178[0] = 0;
        if (v169[9] == 1) {
          unsigned __int8 v55 = v169[6] | 0x80;
        }
        else {
          unsigned __int8 v55 = v169[6];
        }
        unsigned __int8 v161 = v55;
        LOWORD(v54) = *(_WORD *)v169;
        *(double *)&unint64_t v56 = rint(log((double)v54 / 10.0 + 1.0) / 0.0953101798);
        int v57 = (uint64_t)*(double *)&v56;
        unsigned __int8 v162 = (uint64_t)*(double *)&v56;
        LOWORD(v56) = *(_WORD *)&v169[2];
        uint64_t v58 = (uint64_t)rint(log((double)v56 / 45.0 + 1.0) / 0.0246926126);
        unsigned __int8 v163 = v58;
        if (!v57) {
          unsigned __int8 v162 = -1;
        }
        if (!(_BYTE)v58) {
          unsigned __int8 v163 = -1;
        }
        int v164 = HIDWORD(v167) + v167;
        int v59 = &v181[28 * v51 + 76];
        v59[1] = v165[0];
        *((_WORD *)v59 + 1) = v166;
        *int v59 = 0;
        GN_AGNSS_Get_GAD_Data(0, v161, (int *)&v171 + 1, (int *)&v172, &v173, v174, &v175, &v176, &v177, v178, (uint64_t)&v179);
        if (v60)
        {
          *int v59 = GN_AGPS_Qual_Pos(0, &v162);
          uint64_t v61 = &v181[28 * v51 + 76];
          v61[4] = v178[0];
          *((_DWORD *)v61 + 2) = GncP11_02ConvertAGnssID(HIDWORD(v171));
          char v62 = v174[0];
          v61[12] = v174[0];
          *((_DWORD *)v61 + 4) = v172 % 0x36EE80;
          *((_DWORD *)v61 + 6) = v175;
          v61[20] = v62;
          if (v173 < 0) {
            __int16 v63 = -1;
          }
          else {
            __int16 v63 = (int)((double)v173 * 0.4);
          }
          *((_WORD *)v61 + 7) = v63;
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(v180, 0x410uLL);
          uint64_t v64 = mach_continuous_time();
          unsigned int v65 = &v181[28 * v51 + 76];
          unsigned __int16 v66 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: ID,%u,Qual,%u,GnssUsed,%u,TimeGnssId,%u,ToD,%u,TodUnc,%u,ToDSubMs,%u,ToW,%u,ToWUnc,%u,ReqConst,%u,HAcc,%u,VAcc,%u,Deadline,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v64), "GNC", 68, "GncP01_19QualGadReqs", *((unsigned __int16 *)v59 + 1), *v59, v65[4], *((_DWORD *)v65 + 2), *((_DWORD *)v65 + 4), v65[12], *((unsigned __int16 *)v65 + 7), *((_DWORD *)v65 + 6), v65[20], v161, v162,
                  v163,
                  v164);
          LbsOsaTrace_WriteLog(8u, (char *)v180, v66, 5, 1);
        }
        char v52 = 0;
        uint64_t v51 = 1;
        if ((v53 & 1) == 0)
        {
          LOBYTE(v51) = 2;
          break;
        }
      }
      v181[1] = v51;
      if (!v181[0] && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(v180, 0x410uLL);
        uint64_t v67 = mach_continuous_time();
        unsigned __int16 v68 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: No Valid GAD\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v67), "GNC", 87, "GncP01_20UpdateGADData");
        LbsOsaTrace_WriteLog(8u, (char *)v180, v68, 2, 1);
      }
      xmmword_26AE01CC8 = *(_OWORD *)&v181[96];
      unk_26AE01CD8 = *(_OWORD *)&v181[112];
      dword_26AE01CE8 = *(_DWORD *)&v181[128];
      xmmword_26AE01C88 = *(_OWORD *)&v181[32];
      *(_OWORD *)&qword_26AE01C98 = *(_OWORD *)&v181[48];
      xmmword_26AE01CA8 = *(_OWORD *)&v181[64];
      unk_26AE01CB8 = *(_OWORD *)&v181[80];
      xmmword_26AE01C68 = *(_OWORD *)v181;
      *(_OWORD *)&dword_26AE01C78 = *(_OWORD *)&v181[16];
      int v8 = g_Crc32_RemTable + 920;
      goto LABEL_116;
    }
    if (v181[44] < 2u)
    {
      if (*(_DWORD *)&v181[48] < 0x800000u)
      {
        if ((*(_DWORD *)&v181[52] - 0x800000) >> 24 == 255)
        {
          if (v181[56] - 2 > 0xFC)
          {
            if (v181[60] <= -2)
            {
              int v38 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
              char v32 = 0;
              if (v38)
              {
                bzero(v180, 0x410uLL);
                unint64_t v143 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx UncSemiMj,%u\n", v143);
                goto LABEL_92;
              }
            }
            else if (v181[61] <= -2)
            {
              int v39 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
              char v32 = 0;
              if (v39)
              {
                bzero(v180, 0x410uLL);
                unint64_t v144 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx UncSemiMi,%u\n", v144);
                goto LABEL_92;
              }
            }
            else if (v181[63] <= -2)
            {
              int v40 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
              char v32 = 0;
              if (v40)
              {
                bzero(v180, 0x410uLL);
                unint64_t v145 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx UncAlt,%u\n", v145);
                goto LABEL_92;
              }
            }
            else if ((v181[62] + 1) >= 0x5Bu)
            {
              int v41 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
              char v32 = 0;
              if (v41)
              {
                bzero(v180, 0x410uLL);
                unint64_t v146 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx UncMjAx,%u\n", v146);
                goto LABEL_92;
              }
            }
            else if ((v181[64] + 1) >= 0x66u)
            {
              int v42 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
              char v32 = 0;
              if (v42)
              {
                bzero(v180, 0x410uLL);
                unint64_t v147 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx Conf,%u\n", v147);
                goto LABEL_92;
              }
            }
            else if (v181[65] - 2 > 0xFC)
            {
              if (*(unsigned __int16 *)&v181[66] - 360 > 0xFE96)
              {
                if (*(__int16 *)&v181[68] > -2)
                {
                  if (v181[70] > -2)
                  {
                    if (*(_DWORD *)&v181[16] <= 0x5265BFFu)
                    {
                      if (*(unsigned __int16 *)&v181[20] - 10000 > 0xD8EE)
                      {
                        if ((v181[22] & 0x80000000) != 0)
                        {
                          int v49 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
                          char v32 = 0;
                          if (v49)
                          {
                            bzero(v180, 0x410uLL);
                            unint64_t v154 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                    * (double)mach_continuous_time());
                            unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx ToDUnc,%u\n", v154);
                            goto LABEL_92;
                          }
                        }
                        else if (*(_DWORD *)&v181[24] < 0x240C8400u)
                        {
                          if (*(unsigned __int16 *)&v181[28] - 10000 > 0xD8EE)
                          {
                            char v32 = 1;
                            goto LABEL_93;
                          }
                          int v50 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
                          char v32 = 0;
                          if (v50)
                          {
                            bzero(v180, 0x410uLL);
                            unint64_t v155 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                    * (double)mach_continuous_time());
                            unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx ToWSubMS,%d\n", v155);
                            goto LABEL_92;
                          }
                        }
                        else
                        {
                          int v48 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
                          char v32 = 0;
                          if (v48)
                          {
                            bzero(v180, 0x410uLL);
                            unint64_t v153 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                    * (double)mach_continuous_time());
                            unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx ToW,%u\n", v153);
                            goto LABEL_92;
                          }
                        }
                      }
                      else
                      {
                        int v47 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
                        char v32 = 0;
                        if (v47)
                        {
                          bzero(v180, 0x410uLL);
                          unint64_t v152 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx ToDSubMS,%d\n", v152);
                          goto LABEL_92;
                        }
                      }
                    }
                    else
                    {
                      int v46 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
                      char v32 = 0;
                      if (v46)
                      {
                        bzero(v180, 0x410uLL);
                        unint64_t v151 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                * (double)mach_continuous_time());
                        unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx ToD,%u\n", v151);
                        goto LABEL_92;
                      }
                    }
                  }
                  else
                  {
                    int v45 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
                    char v32 = 0;
                    if (v45)
                    {
                      bzero(v180, 0x410uLL);
                      unint64_t v150 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                      unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx VertSpd,%d\n", v150);
                      goto LABEL_92;
                    }
                  }
                }
                else
                {
                  int v44 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
                  char v32 = 0;
                  if (v44)
                  {
                    bzero(v180, 0x410uLL);
                    unint64_t v149 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                    unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx HorSpd,%d\n", v149);
                    goto LABEL_92;
                  }
                }
              }
              else
              {
                int v43 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
                char v32 = 0;
                if (v43)
                {
                  bzero(v180, 0x410uLL);
                  unint64_t v148 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx Bearing,%d\n", v148);
                  goto LABEL_92;
                }
              }
            }
            else
            {
              int v37 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
              char v32 = 0;
              if (v37)
              {
                bzero(v180, 0x410uLL);
                unint64_t v142 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx VertDir,%d\n", v142);
                goto LABEL_92;
              }
            }
          }
          else
          {
            int v36 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
            char v32 = 0;
            if (v36)
            {
              bzero(v180, 0x410uLL);
              unint64_t v141 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx AltDir,%d\n", v141);
              goto LABEL_92;
            }
          }
        }
        else
        {
          int v35 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          char v32 = 0;
          if (v35)
          {
            bzero(v180, 0x410uLL);
            unint64_t v140 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx Long,%d\n", v140);
            goto LABEL_92;
          }
        }
      }
      else
      {
        int v34 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
        char v32 = 0;
        if (v34)
        {
          bzero(v180, 0x410uLL);
          unint64_t v139 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx Lat,%u\n", v139);
          goto LABEL_92;
        }
      }
    }
    else
    {
      int v31 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      char v32 = 0;
      if (v31)
      {
        bzero(v180, 0x410uLL);
        unint64_t v138 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v33 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx LatSgn,%u\n", v138);
LABEL_92:
        LbsOsaTrace_WriteLog(8u, (char *)v180, v33, 2, 1);
        char v32 = 0;
      }
    }
LABEL_93:
    v181[0] = v32;
    goto LABEL_94;
  }
LABEL_27:
  uint64_t v24 = 0;
  char v25 = 1;
  do
  {
    while (1)
    {
      char v26 = v25;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v24 + 8) == 1) {
        break;
      }
      char v25 = 0;
      uint64_t v24 = 1;
      if ((v26 & 1) == 0) {
        goto LABEL_34;
      }
    }
    char v25 = 0;
    char v27 = *((unsigned char *)&g_GncPCntxtInfo + 36 * v24 + 9);
    uint64_t v24 = 1;
  }
  while ((v26 & ((v27 & 4) == 0)) != 0);
  if ((v27 & 4) != 0) {
    goto LABEL_35;
  }
LABEL_34:
  LOBYTE(xmmword_26AE01C68) = 0;
LABEL_116:
  uint64_t v69 = 0;
  char v70 = 1;
  do
  {
    while (1)
    {
      char v71 = v70;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v69 + 8) == 1) {
        break;
      }
      char v70 = 0;
      uint64_t v69 = 1;
      if ((v71 & 1) == 0) {
        goto LABEL_123;
      }
    }
    char v70 = 0;
    char v72 = *((unsigned char *)&g_GncPCntxtInfo + 36 * v69 + 9);
    uint64_t v69 = 1;
  }
  while ((v71 & ((v72 & 4) == 0)) != 0);
  if ((v72 & 4) == 0)
  {
LABEL_123:
    word_26AE01CEC = 0;
    byte_26AE01CEE = 0;
    goto LABEL_167;
  }
  v180[0] = 0;
  uint64_t v73 = 1532;
  do
  {
    unsigned int v74 = (char *)v180 + v73;
    *(void *)unsigned int v74 = 0;
    v74[8] = 127;
    *((_WORD *)v74 + 5) = 0;
    *((_DWORD *)v74 + 3) = 0;
    v74[16] = 0;
    *((_DWORD *)v74 + 5) = 0;
    v73 += 28;
    *((_WORD *)v74 + 12) = 0;
  }
  while (v74 + 28 != (char *)&v180[198] + 4);
  memset_s(v180, 0x634uLL, 0, 0x634uLL);
  if (g_GncP_PEUpdate[0]) {
    int v75 = dword_26AE0039C;
  }
  else {
    int v75 = v12;
  }
  HIDWORD(v180[0]) = v75;
  if (!GN_AGNSS_Get_Meas(0, 255, (char *)&v180[45]))
  {
    LOBYTE(v180[0]) = 0;
    goto LABEL_147;
  }
  if (HIDWORD(v180[45]) > 0x5265BFF)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      goto LABEL_147;
    }
    bzero(v181, 0x410uLL);
    unint64_t v156 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v76 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx ToD,%u\n", v156);
LABEL_146:
    LbsOsaTrace_WriteLog(8u, v181, v76, 2, 1);
    goto LABEL_147;
  }
  if (LOWORD(v180[46]) - 10000 <= 0xD8EE)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      goto LABEL_147;
    }
    bzero(v181, 0x410uLL);
    unint64_t v157 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v76 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx ToDSubMS,%d\n", v157);
    goto LABEL_146;
  }
  if (SBYTE2(v180[46]) < 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      goto LABEL_147;
    }
    bzero(v181, 0x410uLL);
    unint64_t v159 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v76 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx ToDUnc,%u\n", v159);
    goto LABEL_146;
  }
  if (SBYTE3(v180[46]) <= -2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      goto LABEL_147;
    }
    bzero(v181, 0x410uLL);
    unint64_t v158 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v76 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx DeltaToD,%d\n", v158);
    goto LABEL_146;
  }
  if (LOBYTE(v180[47]) > 0x30u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      goto LABEL_147;
    }
    bzero(v181, 0x410uLL);
    unint64_t v160 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v76 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx NumGnssMeas,%u\n", v160);
    goto LABEL_146;
  }
  if (!LOBYTE(v180[47])) {
    goto LABEL_261;
  }
  uint64_t v114 = 0;
  unint64_t v115 = 0;
  BOOL v116 = 0;
  while (1)
  {
    int v117 = HIDWORD(v180[v114 + 47]);
    if (v117 <= 15)
    {
      switch(v117)
      {
        case 1:
          if (LOBYTE(v180[v114 + 48]) < 0x22u) {
            goto LABEL_230;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
            goto LABEL_260;
          }
          bzero(v181, 0x410uLL);
          unint64_t v131 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,GSVId,%u\n", v131);
          break;
        case 2:
        case 8:
          goto LABEL_230;
        case 4:
          if ((LOBYTE(v180[v114 + 48]) + 96) > 0xD7u) {
            goto LABEL_230;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
            goto LABEL_260;
          }
          bzero(v181, 0x410uLL);
          unint64_t v133 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,SSVId,%u\n", v133);
          break;
        default:
          goto LABEL_274;
      }
      goto LABEL_259;
    }
    if (v117 > 63)
    {
      if (v117 != 64 && v117 != 128)
      {
LABEL_274:
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(v181, 0x410uLL);
          unint64_t v137 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,Type,%u\n", v137);
          goto LABEL_259;
        }
        goto LABEL_260;
      }
      goto LABEL_230;
    }
    if (v117 == 16) {
      break;
    }
    if (v117 != 32) {
      goto LABEL_274;
    }
    if (LOBYTE(v180[v114 + 48]) >= 0x1Au)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(v181, 0x410uLL);
        unint64_t v135 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,RSVId,%u\n", v135);
LABEL_259:
        LbsOsaTrace_WriteLog(8u, v181, v121, 2, 1);
        goto LABEL_260;
      }
      goto LABEL_260;
    }
LABEL_230:
    if (SBYTE1(v180[v114 + 48]) < 0)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_260;
      }
      bzero(v181, 0x410uLL);
      unint64_t v120 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,CPAmb,%u\n", v120);
      goto LABEL_259;
    }
    if (BYTE2(v180[v114 + 48]) >= 0x40u)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_260;
      }
      bzero(v181, 0x410uLL);
      unint64_t v122 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,SNR,%u\n", v122);
      goto LABEL_259;
    }
    if (BYTE3(v180[v114 + 48]) >= 4u)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_260;
      }
      bzero(v181, 0x410uLL);
      unint64_t v123 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,MPath,%u\n", v123);
      goto LABEL_259;
    }
    if (SBYTE4(v180[v114 + 48]) < 0)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_260;
      }
      bzero(v181, 0x410uLL);
      unint64_t v124 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,IntCP,%u\n", v124);
      goto LABEL_259;
    }
    if (BYTE5(v180[v114 + 48]) >= 0x40u)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_260;
      }
      bzero(v181, 0x410uLL);
      unint64_t v125 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,PhRMS,%u\n", v125);
      goto LABEL_259;
    }
    if (LODWORD(v180[v114 + 49]) > 0x200000)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_260;
      }
      bzero(v181, 0x410uLL);
      unint64_t v126 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,CP,%u\n", v126);
      goto LABEL_259;
    }
    if (HIWORD(v180[v114 + 49]) >= 0xFDE9u)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_260;
      }
      bzero(v181, 0x410uLL);
      unint64_t v127 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,CarrLk,%u\n", v127);
      goto LABEL_259;
    }
    BOOL v116 = v115++ > 0x2E || v115 >= LOBYTE(v180[47]);
    v114 += 3;
    if (3 * LOBYTE(v180[47]) == v114) {
      goto LABEL_260;
    }
  }
  if ((LOBYTE(v180[v114 + 48]) + 53) > 0xF5u) {
    goto LABEL_230;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(v181, 0x410uLL);
    unint64_t v136 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v121 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: #%04hx Idx,%u,QSVId,%u\n", v136);
    goto LABEL_259;
  }
LABEL_260:
  if (v116)
  {
LABEL_261:
    LOBYTE(v180[0]) = 1;
    BOOL v128 = GncP04_24Is3GPPMeasFTAPrefReq();
    if (v128) {
      LOBYTE(v128) = API_Get_GPS_MS_Ass_Meas(0, 1, (uint64_t)&v180[23]);
    }
    BYTE2(v180[0]) = v128;
    BOOL v129 = GncP04_25Is3GPPMeasGPSPrefReq();
    if (v129) {
      LOBYTE(v129) = API_Get_GPS_MS_Ass_Meas(0, 0, (uint64_t)&v180[1]);
    }
    BYTE1(v180[0]) = v129;
  }
LABEL_147:
  uint64_t v77 = 0;
  v165[0] = 0;
  int v166 = 0;
  memset(v169, 0, sizeof(v169));
  uint64_t v167 = 0;
  uint64_t v168 = 0;
  char v78 = 1;
  while (1)
  {
    char v79 = v78;
    if (!GncP04_08GetNextSessInstn(v77, v165, 4u)) {
      break;
    }
    memset_s(v181, 0x494uLL, 0, 0x494uLL);
    unsigned __int8 v80 = v165[0];
    uint64_t v81 = (unsigned __int8 *)&v180[191] + 28 * v77 + 4;
    *((_WORD *)v81 + 1) = v166;
    v81[1] = v80;
    *uint64_t v81 = 0;
    v81[8] = 127;
    uint64_t v82 = v81 + 8;
    if (GN_AGNSS_Get_Meas(0, v169[6], v181))
    {
      *uint64_t v81 = v181[17];
      int v83 = GncP11_02ConvertAGnssID(*(unsigned int *)v181);
      uint64_t v84 = (char *)&v180[191] + 28 * v77 + 4;
      *((_DWORD *)v84 + 1) = v83;
      *((_DWORD *)v84 + 3) = *(_DWORD *)&v181[4] % 0x36EE80u;
      *uint64_t v82 = v181[10];
      int v85 = (int)((double)*(__int16 *)&v181[8] * 0.4);
      if ((unsigned __int16)(*(_WORD *)&v181[8] >> 4) > 0x270u) {
        LOWORD(v85) = -1;
      }
      *((_WORD *)v84 + 5) = v85;
      unsigned __int16 v86 = v84 + 16;
      if (v181[11] == 255)
      {
        *unsigned __int16 v86 = -1;
        *((_DWORD *)&v180[194] + 7 * v77) = 0;
      }
      else
      {
        *unsigned __int16 v86 = v181[11];
        int v87 = GncP11_02ConvertAGnssID(*(unsigned int *)&v181[20]);
        uint64_t v88 = (char *)&v180[191] + 28 * v77 + 4;
        *((_DWORD *)v88 + 5) = v87;
        v88[24] = 1;
        v88[25] = v181[24] - 1;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(&v171, 0x410uLL);
      uint64_t v89 = mach_continuous_time();
      unsigned __int16 v90 = snprintf((char *)&v171, 0x40FuLL, "%10u %s%c %s: ID,%u,Qual,%u,TimeGnssId,%u,ToD,%u,TodUnc,%u,ReqConst,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "GNC", 68, "GncP01_21QualMeasReqs", *((unsigned __int16 *)v81 + 1), *v81, *((_DWORD *)&v180[192] + 7 * v77), *((_DWORD *)&v180[193] + 7 * v77), *v82, v169[6]);
      LbsOsaTrace_WriteLog(8u, (char *)&v171, v90, 5, 1);
    }
    char v78 = 0;
    uint64_t v77 = 1;
    if ((v79 & 1) == 0)
    {
      LOBYTE(v77) = 2;
      break;
    }
  }
  BYTE3(v180[0]) = v77;
  if (LOBYTE(v180[0]))
  {
    int v8 = g_Crc32_RemTable + 920;
    if (!(BYTE1(v180[0]) | BYTE2(v180[0])) && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(v181, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v91 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: No GPS Meas\n");
      goto LABEL_165;
    }
  }
  else
  {
    int v8 = &g_Crc32_RemTable[230];
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(v181, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v91 = snprintf(v181, 0x40FuLL, "%10u %s%c %s: No GNSS Meas\n");
LABEL_165:
      LbsOsaTrace_WriteLog(8u, v181, v91, 2, 1);
    }
  }
  memcpy(&word_26AE01CEC, v180, 0x634uLL);
LABEL_167:
  uint64_t v92 = 0;
  char v93 = 1;
  do
  {
    while (1)
    {
      char v94 = v93;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v92 + 8) == 1) {
        break;
      }
      char v93 = 0;
      uint64_t v92 = 1;
      if ((v94 & 1) == 0)
      {
        long long v96 = (void *)qword_26AE02328;
LABEL_174:
        if (v96) {
          free(v96);
        }
        qword_26AE02328 = 0;
        goto LABEL_188;
      }
    }
    char v93 = 0;
    char v95 = *((unsigned char *)&g_GncPCntxtInfo + 36 * v92 + 9);
    uint64_t v92 = 1;
  }
  while ((v94 & ((v95 & 8) == 0)) != 0);
  long long v96 = (void *)qword_26AE02328;
  if ((v95 & 8) == 0) {
    goto LABEL_174;
  }
  if (qword_26AE02328
    || (long long v96 = gnssOsa_Calloc("GncP01_28UpdateRawMeas", 1186, 1, 0x288F8uLL), (qword_26AE02328 = (uint64_t)v96) != 0))
  {
    int v97 = *(_DWORD *)(*(void *)(*((void *)v8 + 71) + 88) + 32);
    if (v97) {
      BOOL v98 = v97 == Last_Published_Raw_Meas_TTag;
    }
    else {
      BOOL v98 = 1;
    }
    char v99 = !v98;
    if (!v98)
    {
      API_Get_Raw_Meas_Data(v96);
      Last_Published_Raw_Meas_TTag = v97;
    }
    byte_26AE02320 = v99;
  }
LABEL_188:
  if (!gnssOsa_MacExitCriticalSection("GncP01_31Update", 1231, &g_PosUpdateCritic))
  {
    g_MEResetInfo = 0;
    GncP03_10SndNewUpdtSM();
    int v102 = (unsigned __int16)g_GncPCntxtInfo;
    if ((_WORD)g_GncPCntxtInfo)
    {
      if ((void)xmmword_26AE66D18)
      {
        if (*(_DWORD *)xmmword_26AE66D18)
        {
          memcpy(v181, (const void *)xmmword_26AE66D18, sizeof(v181));
          double v103 = gnssOsa_Calloc("GncP01_51SndNmeaUpdt", 1425, 1, 0x18uLL);
          if (v103)
          {
            int v104 = v103;
            double v105 = (char *)gnssOsa_Calloc("GncP01_51SndNmeaUpdt", 1431, 20480, 1uLL);
            v104[2] = v105;
            if (v105)
            {
              double v106 = v105;
              if ((v102 & 0x200) != 0 && *((void *)&xmmword_26AE66D18 + 1) && **((_DWORD **)&xmmword_26AE66D18 + 1))
              {
                double v107 = v180;
                memcpy(v180, *((const void **)&xmmword_26AE66D18 + 1), sizeof(v180));
              }
              else
              {
                double v107 = 0;
              }
              int v108 = GN_GPS_Encode_NMEA(0x5000u, v106, v102, v181, v107);
              *((_WORD *)v104 + 6) = v108;
              if (v108)
              {
                if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                {
                  bzero(&v171, 0x410uLL);
                  uint64_t v109 = mach_continuous_time();
                  unsigned __int16 v110 = snprintf((char *)&v171, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_NMEA_DATA_IND =>GNM Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "GNC", 73, "GncP01_51SndNmeaUpdt", *((unsigned __int16 *)v104 + 6));
                  LbsOsaTrace_WriteLog(8u, (char *)&v171, v110, 4, 1);
                }
                AgpsSendFsmMsg(134, 128, 8786691, v104);
                goto LABEL_211;
              }
              if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
              {
                bzero(&v171, 0x410uLL);
                uint64_t v111 = mach_continuous_time();
                unsigned __int16 v112 = snprintf((char *)&v171, 0x40FuLL, "%10u %s%c %s: Encode Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "GNC", 87, "GncP01_51SndNmeaUpdt");
                LbsOsaTrace_WriteLog(8u, (char *)&v171, v112, 2, 1);
              }
              double v113 = (void *)v104[2];
              if (v113) {
                free(v113);
              }
            }
            free(v104);
          }
        }
      }
    }
LABEL_211:
    GncP16_19ChkQualUpdtMEFixInt();
    GncP24_55UpdateBceOrbitAssistance(0);
    return 1;
  }
  int v100 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
  uint64_t result = 0;
  if (v100)
  {
    bzero(v180, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v11 = 1551;
LABEL_191:
    unsigned __int16 v101 = snprintf((char *)v180, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v10, "GNC", 69, "GncP01_31Update", v11);
    LbsOsaTrace_WriteLog(8u, (char *)v180, v101, 0, 1);
    return 0;
  }
  return result;
}

unsigned __int8 *GncP01_33CheckSessionQualMet(unsigned __int8 *result)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (result[5])
  {
    uint64_t v5 = 0;
    int v6 = *result;
    char v7 = 1;
    while (1)
    {
      char v8 = v7;
      unsigned int v9 = &g_GncP_PEUpdate[4 * v5];
      if (v9[6353] == v6 && *((unsigned __int16 *)v9 + 3177) == *((unsigned __int16 *)v1 + 1)) {
        break;
      }
      char v7 = 0;
      uint64_t result = 0;
      uint64_t v5 = 1;
      if ((v8 & 1) == 0) {
        return result;
      }
    }
    char v14 = &g_GncP_PEUpdate[4 * v5];
    uint64_t v15 = 6352;
    goto LABEL_21;
  }
  if ((result[5] & 2) != 0)
  {
    uint64_t v10 = 0;
    int v11 = *result;
    char v12 = 1;
    while (1)
    {
      char v13 = v12;
      if (g_GncP_PEUpdate[28 * v10 + 6437] == v11
        && *(unsigned __int16 *)&g_GncP_PEUpdate[28 * v10 + 6438] == *((unsigned __int16 *)v1 + 1))
      {
        break;
      }
      char v12 = 0;
      uint64_t result = 0;
      uint64_t v10 = 1;
      if ((v13 & 1) == 0) {
        return result;
      }
    }
    char v14 = &g_GncP_PEUpdate[28 * v10];
    uint64_t v15 = 6436;
LABEL_21:
    int v16 = v14[v15];
    return (unsigned __int8 *)(v16 != 0);
  }
  if ((result[5] & 8) != 0)
  {
    int v16 = byte_26AE02320;
    return (unsigned __int8 *)(v16 != 0);
  }
  if ((result[5] & 4) != 0)
  {
    uint64_t v17 = 0;
    int v18 = *result;
    char v19 = 1;
    while (1)
    {
      char v20 = v19;
      if (g_GncP_PEUpdate[28 * v17 + 8025] == v18
        && *(unsigned __int16 *)&g_GncP_PEUpdate[28 * v17 + 8026] == *((unsigned __int16 *)v1 + 1))
      {
        break;
      }
      char v19 = 0;
      uint64_t result = 0;
      uint64_t v17 = 1;
      if ((v20 & 1) == 0) {
        return result;
      }
    }
    return (unsigned __int8 *)(g_GncP_PEUpdate[28 * v17 + 8032] <= 0x5Fu
                            && g_GncP_PEUpdate[28 * v17 + 8024] == 255);
  }
  else
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ID,%u,Output,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP01_33CheckSessionQualMet", 770, *((unsigned __int16 *)v1 + 1), v1[5]);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
      return 0;
    }
  }
  return result;
}

uint64_t GncP01_34HandleRespSentInd(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_SESSION_RESP_SENT_IND ID,%u,Type,%u,OSTtag,%u,BBTtag,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP01_34HandleRespSentInd", *(unsigned __int16 *)(a1 + 14), *(unsigned __int8 *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    int v4 = *(unsigned __int8 *)(a1 + 12);
    if ((v4 | 2) == 3) {
      GN_AGPS_Mark_Response_Sent(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
    }
    else {
      GN_GPS_Mark_Single_Pos_Used(v4 != 2, *(unsigned __int16 *)(a1 + 14), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncP01_34HandleRespSentInd", 517);
    LbsOsaTrace_WriteLog(8u, __str, v6, 0, 1);
  }
  return 0;
}

void *GncP01_50GetNavData(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  char v23 = (unsigned char *)(a1 + 5960);
  if (g_GncP_PEUpdate[0])
  {
    *(_DWORD *)a1 = dword_26AE0039C;
    if (GncP11_30CheckUtcValidity((unsigned __int16)word_26AE003A2, (unsigned __int16)word_26AE003A4, (unsigned __int16)word_26AE003A6, (unsigned __int16)word_26AE003A8, (unsigned __int16)word_26AE003AA, (unsigned __int16)word_26AE003AC, (unsigned __int16)word_26AE003AE))
    {
      *(void *)(a1 + 8) = *(void *)&dword_26AE00398;
      *(_WORD *)(a1 + 16) = *(_WORD *)&byte_26AE003A0;
      *(unsigned char *)(a1 + 18) = byte_26AE00391;
      *(void *)(a1 + 20) = *(void *)&word_26AE003A2;
      *(_WORD *)(a1 + 28) = word_26AE003AA;
      *(_DWORD *)(a1 + 30) = *(_DWORD *)&word_26AE003AC;
      *(_WORD *)(a1 + 36) = word_26AE003B0;
      *(void *)(a1 + 40) = qword_26AE00430;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)&qword_26AE003B8;
      *(void *)(a1 + 64) = unk_26AE003C8;
      *(int8x16_t *)(a1 + 72) = vextq_s8(*(int8x16_t *)&qword_26AE003D0, *(int8x16_t *)&qword_26AE003D0, 8uLL);
      *(_OWORD *)(a1 + 88) = unk_26AE003E0;
      *(_OWORD *)(a1 + 104) = unk_26AE003F0;
      *(_OWORD *)(a1 + 120) = unk_26AE00400;
      *(_OWORD *)(a1 + 136) = unk_26AE00410;
      *(_OWORD *)(a1 + 152) = unk_26AE00420;
      *(_OWORD *)(a1 + 168) = *(_OWORD *)algn_26AE00438;
      *(_OWORD *)(a1 + 184) = unk_26AE00448;
      *(_OWORD *)(a1 + 200) = unk_26AE00458;
      *(_OWORD *)(a1 + 216) = unk_26AE00468;
      *(_OWORD *)(a1 + 232) = unk_26AE00478;
      *(_OWORD *)(a1 + 248) = unk_26AE00488;
      *(void *)(a1 + 288) = qword_26AE00498;
      *(_OWORD *)(a1 + 264) = xmmword_26AE004A0;
      *(void *)(a1 + 280) = qword_26AE004B0;
      *(_DWORD *)(a1 + 304) = dword_26AE004B8 & 0x373F;
      switch(dword_26AE004C0)
      {
        case 0:
          *(unsigned char *)(a1 + 296) = 0;
          break;
        case 1:
          char v2 = 1;
          goto LABEL_13;
        case 2:
        case 3:
          char v2 = 2;
          goto LABEL_13;
        case 4:
        case 5:
          char v2 = 3;
LABEL_13:
          *(unsigned char *)(a1 + 296) = v2;
          break;
        default:
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v5 = mach_continuous_time();
            unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FixType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP01_14PopulateNavDataContent", 770, dword_26AE004C0);
            LbsOsaTrace_WriteLog(8u, __str, v6, 2, 1);
          }
          break;
      }
      *(_WORD *)(a1 + 297) = unk_26AE004D5;
      *(unsigned char *)(a1 + 299) = byte_26AE004D4;
      *(unsigned char *)(a1 + 300) = GncP11_23ConvertUsrState(dword_26AE004BC);
      *(unsigned char *)(a1 + 301) = GncP11_24ConvertGnssContent(dword_26AE004C4);
      *(unsigned char *)(a1 + 312) = GncP11_25ConvertReliab(dword_26AE004C8);
      *(unsigned char *)(a1 + 313) = GncP11_32ConvertEstimatedTech(dword_26AE004CC);
      *(_DWORD *)(a1 + 308) = dword_26AE004D0 & 0x7707FFFF;
      int v7 = byte_26AE004D7;
      *(unsigned char *)(a1 + 314) = byte_26AE004D7;
      *(unsigned char *)(a1 + 315) = byte_26AE004D8;
      if (v7)
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0x54Cu;
        uint64_t v10 = 0xA40u;
        do
        {
          int v11 = &g_GncP_PEUpdate[4 * v8];
          uint64_t v12 = a1 + v8;
          *(unsigned char *)(a1 + v8 + 316) = GncP11_01ConvertGnssID(*((_DWORD *)v11 + 83));
          int v13 = GncP11_05ConvertGnssSignalID(*((unsigned int *)v11 + 211));
          uint64_t v14 = a1 + 4 * v8;
          *(_DWORD *)(v14 + 444) = v13;
          *(unsigned char *)(v12 + 1340) = g_GncP_PEUpdate[v8 + 1740];
          *(unsigned char *)(v12 + 1468) = g_GncP_PEUpdate[v8 + 1868];
          uint64_t v15 = &g_GncP_PEUpdate[8 * v8];
          *(void *)(a1 + 8 * v8 + 1600) = *((void *)v15 + 250);
          int v16 = (void *)(a1 + v10);
          *int v16 = *(void *)&g_GncP_PEUpdate[v10 + 400];
          v16[128] = *(void *)&g_GncP_PEUpdate[v10 + 1424];
          v16[256] = *(void *)&g_GncP_PEUpdate[v10 + 2448];
          unint64_t v17 = a1 + 3648 + v8;
          *(unsigned char *)(v17 + 2048) = g_GncP_PEUpdate[v8 + 6096];
          *(unsigned char *)(v17 + 2176) = g_GncP_PEUpdate[v8 + 6224];
          uint64_t v18 = a1 + v9 - 400;
          int v19 = (*(unsigned __int8 *)(a1 + v9 - 398) << 16) & 0xE00000 | ((g_GncP_PEUpdate[v9 + 2] & 0x1F) << 16);
          *(_WORD *)uint64_t v18 = *(_WORD *)&g_GncP_PEUpdate[v9];
          *(unsigned char *)(v18 + 2) = BYTE2(v19);
          if (!*(unsigned char *)(a1 + v8 + 316) || !*(_DWORD *)(v14 + 444))
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v20 = mach_continuous_time();
              unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstID,%u,SVId,%u,SigID,%u,FreqCh,%u,SNR,%.2f,Used,%u,Conf,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 87, "GncP01_14PopulateNavDataContent", 770, *((_DWORD *)v11 + 83), g_GncP_PEUpdate[v8 + 1740], *((_DWORD *)v11 + 211), g_GncP_PEUpdate[v8 + 1868], *((double *)v15 + 250), g_GncP_PEUpdate[v8 + 6096], g_GncP_PEUpdate[v8 + 6224]);
              LbsOsaTrace_WriteLog(8u, __str, v21, 2, 1);
            }
          }
          if ((++v8 & 0x80) != 0) {
            break;
          }
          v9 += 3;
          v10 += 8;
        }
        while (v8 < *(unsigned __int8 *)(a1 + 314));
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid UTC Y,%u,M,%u,D,%u,H,%u,M,%u,S,%u,MS,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP01_14PopulateNavDataContent", 770, (unsigned __int16)word_26AE003A2, (unsigned __int16)word_26AE003A4, (unsigned __int16)word_26AE003A6, (unsigned __int16)word_26AE003A8, (unsigned __int16)word_26AE003AA, (unsigned __int16)word_26AE003AC, (unsigned __int16)word_26AE003AE);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
    }
  }
  else
  {
    *(_DWORD *)a1 = dword_26AE00394;
  }
  uint64_t result = memcpy_s("GncP01_50GetNavData", 1399, (void *)(a1 + 5952), 8u, &byte_26AE00392 + 6350, 8uLL);
  *char v23 = byte_26AE00392;
  return result;
}

size_t GncP_GetNavData(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("GncP_GetNavData", 1482, &g_PosUpdateCritic))
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v4 = 1550;
    goto LABEL_7;
  }
  GncP01_50GetNavData(a1);
  size_t result = gnssOsa_MacExitCriticalSection("GncP_GetNavData", 1490, &g_PosUpdateCritic);
  if (result)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v4 = 1551;
LABEL_7:
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v3, "GNC", 69, "GncP_GetNavData", v4);
      return LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
    }
  }
  return result;
}

size_t GncP_GetGADData(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("GncP_GetGADData", 1501, &g_PosUpdateCritic))
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v4 = 1550;
    goto LABEL_7;
  }
  GncP01_27PopulateGadData(a1);
  size_t result = gnssOsa_MacExitCriticalSection("GncP_GetGADData", 1509, &g_PosUpdateCritic);
  if (result)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v4 = 1551;
LABEL_7:
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v3, "GNC", 69, "GncP_GetGADData", v4);
      return LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
    }
  }
  return result;
}

uint64_t GncP_GetLatestUpdtOsTime(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("GncP_GetLatestUpdtOsTime", 1522, &g_PosUpdateCritic))
  {
    uint64_t v0 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 69, "GncP_GetLatestUpdtOsTime", 1550);
      LbsOsaTrace_WriteLog(8u, __str, v2, 0, 1);
      return 0;
    }
  }
  else
  {
    unint64_t v3 = &dword_26AE00394;
    if (g_GncP_PEUpdate[0]) {
      unint64_t v3 = &dword_26AE0039C;
    }
    uint64_t v0 = *v3;
    if (gnssOsa_MacExitCriticalSection("GncP_GetLatestUpdtOsTime", 1537, &g_PosUpdateCritic)
      && LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP_GetLatestUpdtOsTime", 1551);
      LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
    }
  }
  return v0;
}

uint64_t GncP_GetMeasData(int a1, uint64_t a2, int a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("GncP_GetMeasData", 1553, &g_PosUpdateCritic))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v7, "GNC", 69, "GncP_GetMeasData", 1550);
    return LbsOsaTrace_WriteLog(8u, __str, v8, 0, 1);
  }
  *(_DWORD *)a2 = dword_26AE01CF0;
  *(_DWORD *)(a2 + 4) = dword_26AE00398;
  if (g_GncP_PEUpdate[6492]) {
    BOOL v9 = g_GncP_PEUpdate[0] == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    *(unsigned char *)(a2 + 28) |= 2u;
    *(unsigned char *)(a2 + 8) = *((unsigned char *)&unk_26AE00511 + 6484);
    *(_DWORD *)(a2 + 24) = dword_26AE004D0 & 0x7707FFFF;
    *(_DWORD *)(a2 + 20) = dword_26AE004B8 & 0x373F;
    *(_DWORD *)(a2 + 704) = dword_26AE01E58 % 0x36EE80u;
    *(unsigned char *)(a2 + 710) = *((unsigned char *)&unk_26AE0050A + 6484);
    *(_DWORD *)(a2 + 712) = dword_26AE01E60;
    *(_DWORD *)(a2 + 716) = GncP11_02ConvertAGnssID(dword_26AE01E54);
    *(_DWORD *)(a2 + 696) = -1;
    *(unsigned char *)(a2 + 700) = -1;
    int v10 = (int)((double)word_26AE01E5C * 0.4);
    if ((unsigned __int16)((unsigned __int16)word_26AE01E5C >> 4) > 0x270u) {
      LOWORD(v10) = -1;
    }
    *(_WORD *)(a2 + 708) = v10;
    *(unsigned char *)(a2 + 711) = *((unsigned char *)&unk_26AE0050B + 6484);
    *(_WORD *)(a2 + 722) = word_26AE003B0;
    *(_DWORD *)(a2 + 724) = llround(*(double *)&qword_26AE003D8);
    *(_DWORD *)(a2 + 728) = dword_26AE00398;
    *(unsigned char *)(a2 + 720) = byte_26AE003A1;
    if (*((unsigned char *)&unk_26AE00510 + 6484))
    {
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = &g_GncP_PEUpdate[24 * v11 + 6872];
        int v13 = GncP11_02ConvertAGnssID(*(unsigned int *)v12);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Index,%u,GnssId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GncP01_13PopulateGnssMeasData", v11, *(_DWORD *)v12);
          LbsOsaTrace_WriteLog(8u, __str, v15, 5, 1);
        }
        unsigned int v16 = *(unsigned __int8 *)(a2 + 732);
        if (*(unsigned char *)(a2 + 732))
        {
          uint64_t v17 = *(unsigned __int8 *)(a2 + 732);
          uint64_t v18 = a2 + 748;
          do
          {
            if (v13 == *(_DWORD *)(v18 - 12))
            {
              if (*(unsigned __int8 *)(v18 - 2) <= 0x3FuLL)
              {
                GncP01_12ConvertOneGnssSvMeas(a1, v13, v18 + 20 * *(unsigned __int8 *)(v18 - 2), (uint64_t)v12);
                ++*(unsigned char *)(v18 - 2);
              }
              goto LABEL_26;
            }
            v18 += 10280;
            --v17;
          }
          while (v17);
          if (v16 <= 0xF) {
            goto LABEL_21;
          }
        }
        else
        {
          unsigned int v16 = 0;
LABEL_21:
          uint64_t v19 = a2 + 10280 * v16;
          *(_DWORD *)(v19 + 736) = v13;
          *(unsigned char *)(v19 + 740) = 1;
          *(unsigned char *)(v19 + 744) = 1;
          unsigned int v20 = g_GncP_PEUpdate[24 * v11 + 6877];
          if (v20 >= 0x7F) {
            LOBYTE(v20) = 127;
          }
          *(unsigned char *)(v19 + 745) = v20;
          GncP01_12ConvertOneGnssSvMeas(a1, v13, v19 + 748, (uint64_t)v12);
          ++*(unsigned char *)(v19 + 746);
          ++*(unsigned char *)(a2 + 732);
        }
LABEL_26:
        if (v11 > 0x2E) {
          break;
        }
        ++v11;
      }
      while (v11 < byte_26AE01E64);
    }
    if (*(unsigned char *)(a2 + 732)) {
      int v21 = 1;
    }
    else {
      int v21 = 7;
    }
    *(_DWORD *)(a2 + 692) = v21;
    if (a3)
    {
      if (!byte_26AE01CEE) {
        goto LABEL_43;
      }
      *(unsigned char *)(a2 + 28) |= 1u;
      uint64_t v22 = &dword_26AE01DA4;
      *(_DWORD *)(a2 + 696) = dword_26AE01DA4;
      *(unsigned char *)(a2 + 700) = byte_26AE01DA8;
    }
    else
    {
      if (!HIBYTE(word_26AE01CEC)) {
        goto LABEL_43;
      }
      *(unsigned char *)(a2 + 28) |= 1u;
      *(_DWORD *)(a2 + 696) = dword_26AE01CF4;
      *(unsigned char *)(a2 + 700) = *((unsigned char *)&dword_26AE00398 + 6496);
      *(_WORD *)(a2 + 722) = word_26AE003B0;
      uint64_t v22 = &dword_26AE00398 + 1623;
      *(_DWORD *)(a2 + 724) = llround(*(double *)&qword_26AE003D8);
      *(_DWORD *)(a2 + 728) = dword_26AE00398;
      *(unsigned char *)(a2 + 720) = byte_26AE003A1;
    }
    unsigned int v23 = *((unsigned __int8 *)v22 + 12);
    if (*((unsigned char *)v22 + 12))
    {
      uint64_t v24 = 0;
      *(_DWORD *)(a2 + 44) = 1;
      *(_DWORD *)(a2 + 32) = *v22;
      *(unsigned char *)(a2 + 40) = *((unsigned char *)v22 + 4);
      *(unsigned char *)(a2 + 49) = v23;
      *(_DWORD *)(a2 + 36) = v22[2];
      *(unsigned char *)(a2 + 48) = *((unsigned char *)v22 + 5);
      *(unsigned char *)(a2 + 41) = *((unsigned char *)v22 + 6);
      if (v23 >= 0x10) {
        unsigned int v23 = 16;
      }
      uint64_t v25 = 10 * v23;
      do
      {
        uint64_t v26 = a2 + v24;
        *(unsigned char *)(v26 + 50) = *((unsigned char *)v22 + v24 + 14) - 1;
        *(unsigned char *)(v26 + 51) = *((unsigned char *)v22 + v24 + 15);
        *(_DWORD *)(v26 + 52) = *(int *)((char *)v22 + v24 + 16);
        *(_DWORD *)(v26 + 56) = *(int *)((char *)v22 + v24 + 20);
        v24 += 10;
      }
      while (v25 != v24);
    }
    else
    {
      *(_DWORD *)(a2 + 44) = 7;
    }
  }
LABEL_43:
  memcpy_s("GncP_GetMeasData", 1614, (void *)(a2 + 165288), 0x38u, &unk_26AE022E8, 0x38uLL);
  *(unsigned char *)(a2 + 165344) = byte_26AE01CEF;
  uint64_t result = gnssOsa_MacExitCriticalSection("GncP_GetMeasData", 1617, &g_PosUpdateCritic);
  if (result)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v27, "GNC", 69, "GncP_GetMeasData", 1551);
      return LbsOsaTrace_WriteLog(8u, __str, v8, 0, 1);
    }
  }
  return result;
}

uint64_t GncP_GetDetailedMeasData(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("GncP_GetDetailedMeasData", 1630, &g_PosUpdateCritic))
  {
    uint64_t v2 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncP_GetDetailedMeasData", 1550);
      LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
      return 0;
    }
  }
  else
  {
    if (byte_26AE02320) {
      BOOL v5 = qword_26AE02328 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = GncP27_30PopulateRawMeas(qword_26AE02328, a1);
    }
    if (gnssOsa_MacExitCriticalSection("GncP_GetDetailedMeasData", 1642, &g_PosUpdateCritic)
      && LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 69, "GncP_GetDetailedMeasData", 1551);
      LbsOsaTrace_WriteLog(8u, __str, v7, 0, 1);
    }
  }
  return v2;
}

size_t GncP01_12ConvertOneGnssSvMeas(int a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a3 && a4)
  {
    if (a2 == 4) {
      char v7 = -120;
    }
    else {
      char v7 = -1;
    }
    if (a2 == 16) {
      char v7 = 63;
    }
    *(unsigned char *)a3 = *(unsigned char *)(a4 + 4) + v7;
    *(_WORD *)(a3 + 1) = *(_WORD *)(a4 + 6);
    *(_WORD *)(a3 + 4) = *(_WORD *)(a4 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 12);
    *(_WORD *)(a3 + 12) = *(_WORD *)(a4 + 16);
    int v8 = *(_DWORD *)(a4 + 20);
    if (v8 < 0)
    {
      *(unsigned char *)(a3 + 3) |= 1u;
      double v9 = -floor((double)v8 * 0.015625);
    }
    else
    {
      double v9 = floor((double)v8 * 0.015625);
    }
    *(_DWORD *)(a3 + 16) = v9;
    if (v9 >> 25)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AccDelta,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "GncP01_12ConvertOneGnssSvMeas", 772, *(_DWORD *)(a3 + 16));
        LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
      }
      *(_DWORD *)(a3 + 16) = 0x1FFFFFF;
    }
    size_t result = mach_continuous_time();
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result) - a1 < *(unsigned __int16 *)(a4 + 18)) {
      *(unsigned char *)(a3 + 3) |= 2u;
    }
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP01_12ConvertOneGnssSvMeas", 513);
      return LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
    }
  }
  return result;
}

uint64_t NK_Comp_ith_DO_Res(uint64_t result, double *a2, uint64_t a3, uint64_t a4, double *a5, double a6)
{
  *(double *)(a4 + 8 * result + 26304) = *(double *)(a3 + 40) * a2[1]
                                                       + *(double *)(a3 + 32) * *a2
                                                       + *(double *)(a3 + 48) * a2[2]
                                                       - *(double *)(a3 + 64) * 299792458.0;
  *a5 = (*(double *)(a3 + 40) - *(double *)(a4 + 696)) * a2[1]
      + (*(double *)(a3 + 32) - *(double *)(a4 + 688)) * *a2
      + (*(double *)(a3 + 48) - *(double *)(a4 + 704)) * a2[2]
      + (*(double *)(a4 + 760) - *(double *)(a3 + 64)) * 299792458.0;
  double v6 = *(double *)(a3 + 72) * dbl_22BB43390[*(_DWORD *)(a3 + 120) == 1];
  *(double *)(a4 + 8384 + 8 * result + 1640) = v6;
  uint64_t v7 = a4 + 8384 + result;
  *(unsigned char *)(v7 + 104) = 1;
  ++*(unsigned char *)(a4 + 8386);
  int v8 = *(unsigned __int8 *)(v7 + 56);
  if (v8 || *(unsigned char *)(a4 + result + 14016))
  {
    double v9 = *a5 + a6 * 0.190293673;
    uint64_t v10 = a4 + 8384 + 8 * result;
    *(double *)(v10 + 2024) = v9;
    double v11 = *(double *)(a4 + 8384 + 24 * result + 488)
        + *(double *)(a4 + 8384 + 24 * result + 496);
    if (*(unsigned char *)(a4 + result + 1224))
    {
      uint64_t v12 = a4 + 8 * result;
      double v9 = v9 - *(double *)(v12 + 2040);
      *(double *)(v10 + 2024) = v9;
      double v6 = *(double *)(v12 + 2424);
    }
    *(double *)(v10 + 4040) = v11 + v6;
    *(double *)(a4 + 8 * result + 11176) = v9;
    if (v8)
    {
      if (fabs(v9) < 6000.0)
      {
        uint64_t v13 = a4 + result;
        *(unsigned char *)(v13 + 8536) = 1;
        ++*(unsigned char *)(a4 + 8387);
        *(unsigned char *)(v13 + 26160) = 1;
      }
    }
  }
  return result;
}

void DD_Assist_BDS_Data(int *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  uint64_t v98 = *MEMORY[0x263EF8340];
  int v85 = (char *)a4 + 33548;
  double v9 = (char *)a4 + 28220;
  uint64_t v92 = a1 + 1627;
  char v94 = a1 + 1614;
  int v10 = a2 - 241;
  char v95 = a1 + 1624;
  uint64_t v88 = a1 + 1626;
  char v93 = a1 + 1625;
  int v89 = a2 - 241;
  unsigned int v91 = a2;
  do
  {
    if (*(unsigned __int8 *)(v8 + v6 + 92) > 0xA5u
      || *(unsigned char *)(a4[3058] + v8) && (v10 - *((_DWORD *)a4 + 25 * v8 + 6130)) > 0xFFFFF806)
    {
      goto LABEL_43;
    }
    int v97 = 0;
    memset(v96, 0, 23);
    memset(&v96[24], 0, 70);
    if (!Core_Get_BDS_Eph((v8 + 1), v7, (uint64_t)v96)
      || (uint64_t v11 = a4[3058], *(unsigned char *)(v11 + v8))
      && (int v12 = *((_DWORD *)a4 + 25 * v8 + 6130), *(int *)v96 <= v12)
      && (int)v7 - v12 > -1801)
    {
      *(void *)(a4[3053] + 20 * v8 + 8) = 0;
      goto LABEL_43;
    }
    int v13 = v96[22];
    BOOL v14 = v96[22] == 0;
    unsigned __int16 v15 = v95;
    if (v8 >= 0x13
      && (unsigned __int16 v15 = v93, (v8 - 19) >= 0xB)
      && (unsigned __int16 v15 = v88, (v8 - 30) > 6))
    {
      int v16 = 0;
      if (!*(unsigned char *)(v11 + v8)) {
        goto LABEL_19;
      }
    }
    else
    {
      int v16 = *v15;
      if (!*(unsigned char *)(v11 + v8)) {
        goto LABEL_19;
      }
    }
    uint64_t v17 = (unsigned int *)a4 + 25 * v8 + 6130;
    if ((int)(*(_DWORD *)v96 - *v17) <= 10799)
    {
      uint64_t v87 = a4[3058];
      BOOL v86 = v96[22] == 0;
      BOOL v18 = Is_BDS_IntEph_Real((uint64_t)a4 + 100 * v8 + 24520);
      BOOL v14 = v86;
      uint64_t v11 = v87;
      if (v18)
      {
        BOOL v19 = Is_BDS_IntEph_Real((uint64_t)v96);
        BOOL v14 = v86;
        uint64_t v11 = v87;
        if (!v19)
        {
          uint64_t v7 = v91;
          *uint64_t v17 = v91;
          uint64_t v6 = a3;
          int v10 = v89;
          goto LABEL_43;
        }
      }
    }
LABEL_19:
    uint64_t v20 = a4[3052];
    if (v16 < 1)
    {
      uint64_t v7 = v91;
      uint64_t v6 = a3;
      int v10 = v89;
    }
    else
    {
      int v10 = v89;
      if (*(unsigned __int8 *)(v20 + v8) | v13)
      {
        uint64_t v7 = v91;
        uint64_t v6 = a3;
      }
      else
      {
        uint64_t v21 = a4[3060];
        uint64_t v6 = a3;
        if (*(unsigned char *)(v21 + v8))
        {
          if (*((unsigned char *)a4 + 44 * v8 + 31962) || v16 + 3600 <= (int)v91)
          {
            int v22 = v16 + 100;
            uint64_t v7 = v91;
            if (v22 < (int)v91)
            {
              *(unsigned char *)(a4[3055] + v8) = 0;
              *(unsigned char *)(v21 + v8) = 0;
              *((unsigned char *)v94 + v8) = -1;
              uint64_t v20 = a4[3052];
              uint64_t v11 = a4[3058];
            }
            BOOL v14 = 1;
            goto LABEL_32;
          }
          BOOL v14 = 0;
        }
        else
        {
          BOOL v14 = 1;
        }
        uint64_t v7 = v91;
      }
    }
LABEL_32:
    uint64_t v23 = (uint64_t)a4 + 100 * v8 + 24520;
    long long v24 = *(_OWORD *)&v96[80];
    *(_OWORD *)(v23 + 64) = *(_OWORD *)&v96[64];
    *(_OWORD *)(v23 + 80) = v24;
    *(_DWORD *)(v23 + 96) = v97;
    long long v25 = *(_OWORD *)&v96[16];
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v96;
    *(_OWORD *)(v23 + 16) = v25;
    long long v26 = *(_OWORD *)&v96[48];
    *(_OWORD *)(v23 + 32) = *(_OWORD *)&v96[32];
    *(_OWORD *)(v23 + 48) = v26;
    *(unsigned char *)(a4[3054] + v8) = 1;
    *(unsigned char *)(v11 + v8) = 1;
    *(unsigned char *)(v20 + v8) = v14;
    if (v14) {
      int v27 = 1;
    }
    else {
      int v27 = 2;
    }
    uint64_t v28 = a4[3053] + 20 * v8;
    uint64_t v29 = (int *)(v28 + 12);
    int v30 = (int *)(v28 + 8);
    if (*((_DWORD *)a4 + 25 * v8 + 6131) == 5) {
      int v31 = v30;
    }
    else {
      int v31 = v29;
    }
    *int v31 = v27;
    if ((int)v7 >= 1)
    {
      *(unsigned char *)(a4[3061] + v8) = 1;
      Core_Save_BDS_Eph((v8 + 1), 0, v23);
      uint64_t v20 = a4[3052];
    }
    uint64_t v32 = 0;
    LODWORD(v33) = 0;
    uint64_t v34 = p_NV;
    uint64_t v35 = p_NV + 12856;
    uint64_t v36 = *(void *)(v20 + 29);
    long long v37 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)(p_NV + 12868) = *(_OWORD *)v20;
    *(_OWORD *)(v35 + 28) = v37;
    *(void *)(v35 + 41) = v36;
    uint64_t v38 = v34 + 12864;
    __int16 v39 = -9871;
    do
    {
      int v40 = *(unsigned __int8 *)(v38 + v32) ^ HIBYTE(v39);
      __int16 v39 = -12691 * (v39 + (*(unsigned __int8 *)(v38 + v32) ^ HIBYTE(v39))) + 22719;
      uint64_t v33 = (v33 + v40);
      ++v32;
    }
    while (v32 != 48);
    *(void *)(v34 + 12856) = v33;
    *((_WORD *)v92 + v8) = 255;
LABEL_43:
    ++v8;
  }
  while (v8 != 37);
  if ((int)v7 >= 1)
  {
    uint64_t v41 = 0;
    uint64_t v42 = v6 + 92;
    do
    {
      if (*(unsigned char *)(a4[3052] + v41)
        && !*(unsigned char *)(*(void *)(a5 + 928) + v41)
        && *(unsigned __int8 *)(v42 + v41) <= 0xA5u
        && (!*(unsigned char *)(a4[3059] + v41) || (int)v7 - *(_DWORD *)v9 >= 241))
      {
        int v97 = 0;
        memset(v96, 0, 23);
        memset(&v96[24], 0, 70);
        int BDS_IntEph = EE_Get_BDS_IntEph((v41 + 1), v7, (uint64_t)v96);
        uint64_t v44 = a4[3059];
        if (!BDS_IntEph || *(unsigned char *)(v44 + v41) && *(int *)v96 <= *(_DWORD *)v9)
        {
          *(unsigned char *)(v44 + v41) = 0;
        }
        else
        {
          long long v45 = *(_OWORD *)&v96[16];
          *(_OWORD *)double v9 = *(_OWORD *)v96;
          *((_OWORD *)v9 + 1) = v45;
          *((_DWORD *)v9 + 24) = v97;
          long long v46 = *(_OWORD *)&v96[80];
          *((_OWORD *)v9 + 4) = *(_OWORD *)&v96[64];
          *((_OWORD *)v9 + 5) = v46;
          long long v47 = *(_OWORD *)&v96[48];
          *((_OWORD *)v9 + 2) = *(_OWORD *)&v96[32];
          *((_OWORD *)v9 + 3) = v47;
          *(unsigned char *)(a4[3054] + v41) = 1;
          *(unsigned char *)(v44 + v41) = 1;
          *((_WORD *)v92 + v41) = 255;
          Debug_Log_BDS_Eph(2, (uint64_t)v96);
        }
      }
      ++v41;
      v9 += 100;
    }
    while (v41 != 37);
  }
  uint64_t v48 = 0;
  memset(v96, 0, 44);
  while (2)
  {
    if (*(unsigned char *)(a4[3060] + v48) && (int)v7 - *((_DWORD *)a4 + 11 * v48 + 7980) <= 1800)
    {
      uint64_t v49 = v48 + 1;
    }
    else
    {
      uint64_t v49 = v48 + 1;
      if (Core_Get_BDS_Alm((v48 + 1), v7, v96)
        && (!*(unsigned char *)(a4[3060] + v48) || *(int *)v96 > *((_DWORD *)a4 + 11 * v48 + 7980)))
      {
        int v50 = v95;
        if (v48 >= 0x13
          && (int v50 = v93, (v48 - 19) >= 0xB)
          && (int v50 = v88, (v48 - 30) >= 7))
        {
          BOOL v52 = v96[42] != 0;
          uint64_t v53 = a4[3052];
        }
        else
        {
          int v51 = *v50;
          BOOL v52 = v96[42] != 0;
          uint64_t v53 = a4[3052];
          if (v51 >= 1 && v96[42] && !*(unsigned char *)(v53 + v48))
          {
            uint64_t v54 = a4[3058];
            if (*(unsigned char *)(v54 + v48))
            {
              int v55 = *((_DWORD *)a4 + 25 * v48 + 6130);
              if (*((unsigned char *)a4 + 100 * v48 + 24542)) {
                BOOL v56 = v55 + 3600 <= (int)v7;
              }
              else {
                BOOL v56 = 1;
              }
              if (!v56)
              {
                BOOL v52 = 0;
                goto LABEL_80;
              }
              if (v55 + 100 < (int)v7)
              {
                *(unsigned char *)(a4[3054] + v48) = 0;
                *(unsigned char *)(v54 + v48) = 0;
                *((_WORD *)v92 + v48) = 255;
              }
            }
            BOOL v52 = 1;
          }
        }
LABEL_80:
        int v57 = (_OWORD *)((char *)a4 + 44 * v48);
        uint64_t v58 = v57 + 1995;
        long long v59 = *(_OWORD *)&v96[16];
        v57[1995] = *(_OWORD *)v96;
        v57[1996] = v59;
        *(_OWORD *)((char *)v57 + 31948) = *(_OWORD *)&v96[28];
        *(unsigned char *)(a4[3055] + v48) = 1;
        *(unsigned char *)(a4[3060] + v48) = 1;
        *(unsigned char *)(v53 + v48) = v52;
        if ((int)v7 >= 1)
        {
          uint64_t v60 = 0;
          LODWORD(v61) = 0;
          char v62 = (_OWORD *)(p_NV + 56 * (v48 + 1));
          __int16 v63 = (void *)v62 + 1611;
          long long v64 = *(long long *)((char *)v58 + 28);
          long long v65 = *v58;
          v62[807] = v58[1];
          v62[806] = v65;
          *(_OWORD *)((char *)v62 + 12924) = v64;
          unsigned __int16 v66 = v62 + 806;
          __int16 v67 = -9871;
          do
          {
            int v68 = *((unsigned __int8 *)v66 + v60) ^ HIBYTE(v67);
            __int16 v67 = -12691 * (v67 + (*((unsigned __int8 *)v66 + v60) ^ HIBYTE(v67))) + 22719;
            uint64_t v61 = (v61 + v68);
            ++v60;
          }
          while (v60 != 48);
          *__int16 v63 = v61;
          uint64_t v53 = a4[3052];
        }
        uint64_t v69 = 0;
        LODWORD(v70) = 0;
        uint64_t v71 = p_NV;
        uint64_t v72 = p_NV + 12856;
        uint64_t v73 = *(void *)(v53 + 29);
        long long v74 = *(_OWORD *)(v53 + 16);
        *(_OWORD *)(p_NV + 12868) = *(_OWORD *)v53;
        *(_OWORD *)(v72 + 28) = v74;
        *(void *)(v72 + 41) = v73;
        uint64_t v75 = v71 + 12864;
        __int16 v76 = -9871;
        do
        {
          int v77 = *(unsigned __int8 *)(v75 + v69) ^ HIBYTE(v76);
          __int16 v76 = -12691 * (v76 + (*(unsigned __int8 *)(v75 + v69) ^ HIBYTE(v76))) + 22719;
          uint64_t v70 = (v70 + v77);
          ++v69;
        }
        while (v69 != 48);
        *(void *)(v71 + 12856) = v70;
        *((unsigned char *)v94 + v48) = -1;
      }
    }
    uint64_t v48 = v49;
    if (v49 != 37) {
      continue;
    }
    break;
  }
  memset(v96, 0, 20);
  if (((*((_DWORD *)v85 + 1) - 4) > 2 || (int)v7 - *(_DWORD *)v85 >= 1801)
    && Core_Get_BDS_BGTO(v7, (uint64_t)v96)
    && ((*((_DWORD *)v85 + 1) - 4) > 2 || *(int *)v96 > *(_DWORD *)v85))
  {
    *(_OWORD *)int v85 = *(_OWORD *)v96;
    *((_DWORD *)v85 + 4) = *(_DWORD *)&v96[16];
    if ((int)v7 >= 1)
    {
      uint64_t v78 = 0;
      LODWORD(v79) = 0;
      uint64_t v80 = p_NV;
      *(_DWORD *)(p_NV + 12936) = *(_DWORD *)&v96[16];
      uint64_t v81 = v80 + 12920;
      *(_OWORD *)(v80 + 12920) = *(_OWORD *)v96;
      __int16 v82 = -9871;
      do
      {
        int v83 = *(unsigned __int8 *)(v81 + v78) ^ HIBYTE(v82);
        __int16 v82 = -12691 * (v82 + (*(unsigned __int8 *)(v81 + v78) ^ HIBYTE(v82))) + 22719;
        uint64_t v79 = (v79 + v83);
        ++v78;
      }
      while (v78 != 24);
      *(void *)(v80 + 12912) = v79;
    }
  }
}

uint64_t Gnm27_04ComputeCS(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unsigned __int16 v2 = 0;
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      __int16 v4 = *a1++;
      v2 += v4;
      --v3;
    }
    while (v3);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CalcCS,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 68, "Gnm27_04ComputeCS", v2);
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 5, 1);
  }
  return v2;
}

void *Gnm27_21HandleFixedMeRestoreNoAck(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_FIXED_ME_NV_RESTORE_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm27_21HandleFixedMeRestoreNoAck");
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm27_21HandleFixedMeRestoreNoAck", 517);
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 0, 1);
    }
    return 0;
  }
  if (!BYTE1(dword_26AE6D439)) {
    return 0;
  }
  BYTE1(dword_26AE6D439) = 0;
  if (BYTE2(dword_26AE6D439) <= 2u)
  {
    Gnm27_23RestoreFixedMe((uint64_t)&dword_26AE6D439, v2, v3, v4, v5, v6);
    return 0;
  }
  byte_26AE6D43D = 0;
  dword_26AE6D439 = 0;
  if (g_GnssHw - 1 >= 3)
  {
    snprintf(v14, 0x400uLL, "ASSERT: %s %d MWB : Beta table restore timeout after max attempts", "Gnm27_21HandleFixedMeRestoreNoAck", 145);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "OSA", 69, "Gnm27_21HandleFixedMeRestoreNoAck", v14);
      LbsOsaTrace_WriteLog(0xEu, __str, v13, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Gnm27_21HandleFixedMeRestoreNoAck", "gnm27NvXOCalib.cpp", 146, "false && \"Beta table restore timeout after max attempts\"");
  }
  Gnm03_60BaseBandResetReq(4);
  return &a_GnmResetState;
}

uint64_t Gnm27_23RestoreFixedMe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (unsigned char *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v35 = *MEMORY[0x263EF8340];
  bzero(v29, 0x7FCuLL);
  v29[1] = -1;
  bzero(&v33[1], 0x7D2uLL);
  uint64_t v28 = 0;
  if (!gnssOsa_getNvSize(4, &v28) || !v28)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(v34, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(v34, 0x40FuLL, "%10u %s%c %s: #%04hx ME Beta File\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm27_32ReadCalibData", 1572);
      LbsOsaTrace_WriteLog(0xBu, v34, v15, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(v34, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(v34, 0x40FuLL, "%10u %s%c %s: Populating default Beta Table\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 87, "Gnm27_32ReadCalibData");
      LbsOsaTrace_WriteLog(0xBu, v34, v17, 2, 1);
    }
    v33[0] = 0;
    memcpy(&v33[1], &g_BetaC0, 0x1F4uLL);
    memcpy(&v33[501], &g_BetaC1, 0x1F4uLL);
    memcpy(&v33[1001], &g_BetaC2, 0x1F4uLL);
    memcpy(&v33[1501], &g_BetaC3, 0x1F4uLL);
    goto LABEL_15;
  }
  v33[0] = 0;
  size_t Nv = gnssOsa_readNv(4, &v33[1], 0x7D2uLL);
  if (Nv == 2002)
  {
    if (!v33[0])
    {
      int v8 = *(unsigned __int16 *)&v33[2001];
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
      {
        bzero(v34, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(v34, 0x40FuLL, "%10u %s%c %s: ME RcvdPayloadCS,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 68, "Gnm27_05VerifyCS", v8);
        LbsOsaTrace_WriteLog(0xBu, v34, v10, 5, 1);
      }
      if (v8 != Gnm27_04ComputeCS((unsigned __int8 *)&v33[1], 0x7D0u))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(v34, 0x410uLL);
          uint64_t v11 = mach_continuous_time();
          size_t v12 = (unsigned __int16)snprintf(v34, 0x40FuLL, "%10u %s%c %s: #%04hx ME ComputedPayloadCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm27_05VerifyCS", 771);
          int v13 = 2;
LABEL_19:
          LbsOsaTrace_WriteLog(0xBu, v34, v12, v13, 1);
          goto LABEL_20;
        }
        goto LABEL_20;
      }
    }
LABEL_15:
    memcpy(__dst, v33, sizeof(__dst));
    int v30 = 2000;
    memcpy(v31, &__dst[1], sizeof(v31));
    Gnm26_03SendXRestoreFixedMeCalib(v29);
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
      goto LABEL_23;
    }
    bzero(v33, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    size_t v19 = (unsigned __int16)snprintf(v33, 0x40FuLL, "%10u %s%c %s: Restoring ME Fixed data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 73, "Gnm27_23RestoreFixedMe");
    int v20 = 4;
    goto LABEL_22;
  }
  size_t v21 = Nv;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(v34, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(v34, 0x40FuLL, "%10u %s%c %s: #%04hx ME Beta NV File ReqRead,%u,ActualRead,%zu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNM", 69, "Gnm27_32ReadCalibData", 1571, 2002, v21);
    int v13 = 0;
    goto LABEL_19;
  }
LABEL_20:
  int v30 = 0;
  Gnm26_03SendXRestoreFixedMeCalib(v29);
  if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
    goto LABEL_23;
  }
  bzero(v33, 0x410uLL);
  uint64_t v23 = mach_continuous_time();
  size_t v19 = (unsigned __int16)snprintf(v33, 0x40FuLL, "%10u %s%c %s: Sending error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNM", 87, "Gnm27_23RestoreFixedMe");
  int v20 = 2;
LABEL_22:
  LbsOsaTrace_WriteLog(0xBu, v33, v19, v20, 1);
LABEL_23:
  uint64_t result = AgpsFsmStartTimer(0x802D06u, 0xFAu);
  if (result)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    char v25 = 0;
    if (result)
    {
      bzero(v33, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(v33, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNM", 87, "Gnm27_23RestoreFixedMe", 1544);
      uint64_t result = LbsOsaTrace_WriteLog(0xBu, v33, v27, 2, 1);
      char v25 = 0;
    }
  }
  else
  {
    char v25 = 1;
  }
  v6[1] = v25;
  ++v6[2];
  *uint64_t v6 = 0;
  return result;
}

void *Gnm27_22HandleFixedMeRestoreAck(unsigned __int8 *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1[1])
  {
    int v7 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WP Restore ACK SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm27_22HandleFixedMeRestoreAck", 770, a1[1]);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
      int v7 = 0;
    }
  }
  else
  {
    int v7 = Gnm25_18CheckRestoreStatus(*a1, "Fixed ME");
  }
  if (BYTE1(dword_26AE6D439))
  {
    if (AgpsFsmStopTimer(8400134) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm27_22HandleFixedMeRestoreAck", 1545);
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 2, 1);
    }
    BYTE1(dword_26AE6D439) = 0;
  }
  if (v7)
  {
    byte_26AE6D43D = 0;
    dword_26AE6D439 = 0;
    Gnm10_29SendFwActivity(1, 1);
    HIWORD(dword_26AE6D43E) = 0;
    LOBYTE(dword_26AE6D43E) = 1;
    Gnm29_01RestoreVarMENv(0);
    return 0;
  }
  if (BYTE2(dword_26AE6D439) <= 2u)
  {
    Gnm27_23RestoreFixedMe((uint64_t)&dword_26AE6D439, v2, v3, v4, v5, v6);
    return 0;
  }
  byte_26AE6D43D = 0;
  dword_26AE6D439 = 0;
  if (g_GnssHw - 1 >= 3)
  {
    snprintf(v15, 0x400uLL, "ASSERT: %s %d MWB : Beta table restore failed after max attempts", "Gnm27_22HandleFixedMeRestoreAck", 221);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 69, "Gnm27_22HandleFixedMeRestoreAck", v15);
      LbsOsaTrace_WriteLog(0xEu, __str, v14, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Gnm27_22HandleFixedMeRestoreAck", "gnm27NvXOCalib.cpp", 222, "false && \"Beta table restore failed after max attempts\"");
  }
  Gnm03_60BaseBandResetReq(5);
  return &a_GnmResetState;
}

uint64_t Gnm38_02HandleBMessages(unsigned __int8 *a1, unsigned __int8 *a2, uint8x8_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a2[1] != 66)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u\n", v11);
LABEL_37:
    LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
    return 0;
  }
  memset(v21, 0, 13);
  int v5 = g_HWStatus[0];
  if (g_HWStatus[0])
  {
    int v6 = qword_26AE53174;
    BOOL v8 = dword_26AE5317C == 1 && HIDWORD(qword_26AE53174) == 2 && qword_26AE53174 == 3431;
    if (!v8 && qword_26AE53174 != 1107)
    {
      uint64_t v9 = 0;
      int v10 = 0;
LABEL_22:
      if (v6 == 2472) {
        goto LABEL_30;
      }
      int v13 = g_GnssHw;
      goto LABEL_27;
    }
  }
  else
  {
    int v13 = g_GnssHw;
    if (g_GnssHw != 3 && g_GnssHw != 0)
    {
      uint64_t v9 = 0;
      int v10 = 0;
      goto LABEL_25;
    }
  }
  if (a2[2] != 80)
  {
LABEL_35:
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDExtn,%u\n", v19, "GNM");
    goto LABEL_37;
  }
  Gnm37_27MapSbCfgPlcToGnmBright((uint64_t)v21, (uint64_t)(a1 + 4));
  uint64_t v9 = *a1;
  int v10 = a1[1];
  if (v5)
  {
    int v6 = qword_26AE53174;
    goto LABEL_22;
  }
  int v13 = g_GnssHw;
LABEL_25:
  if (v13 == 1) {
    goto LABEL_30;
  }
  int v6 = qword_26AE53174;
LABEL_27:
  BOOL v15 = v6 == 2473;
  BOOL v16 = v13 == 2;
  if (!v5) {
    BOOL v15 = v16;
  }
  if (!v15) {
    goto LABEL_32;
  }
LABEL_30:
  if (a2[2] != 77) {
    goto LABEL_35;
  }
  Gnm37_28MapSbCfgPlcToGnmSunshine((uint64_t)v21, (uint64_t)(a1 + 4), a3);
  uint64_t v9 = *a1;
  int v10 = a1[1];
LABEL_32:
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Rx zx%c%c%c,Status,%u,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 73, "Gnm38_02HandleBMessages", *a2, a2[1], a2[2], v9, v10);
    LbsOsaTrace_WriteLog(0xBu, __str, v18, 4, 1);
  }
  Gnm37_12HandleSbConfigRsp(v9, v10, v21);
  return 0;
}

size_t Gnm38_12SendSBCfg(size_t result, unsigned int a2, uint64_t a3)
{
  int v5 = result;
  v25[255] = *MEMORY[0x263EF8340];
  if ((_BYTE)g_HWStatus)
  {
    int v6 = HIDWORD(g_HWStatus);
    BOOL v8 = dword_26AE5317C == 1 && dword_26AE53178 == 2 && HIDWORD(g_HWStatus) == 3431;
    if (!v8 && HIDWORD(g_HWStatus) != 1107)
    {
      if (HIDWORD(g_HWStatus) == 2472) {
        goto LABEL_28;
      }
      int v9 = g_GnssHw;
      goto LABEL_24;
    }
LABEL_15:
    memset_s(&__s, 0x7FCuLL, 0, 0x7FCuLL);
    qmemcpy(v21, "BbP", sizeof(v21));
    char __s = a2;
    char v24 = v5;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: zxBbP ReqType,%c,ReqId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm38_10SendSBCfgBright", a2, v5);
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    if (a2 != 71)
    {
      if (a2 == 83)
      {
        if (a3)
        {
          Gnm37_25MapSbCfgGnmToPlcBright((uint64_t)v25, a3);
LABEL_34:
          unsigned __int16 v18 = "SET SIDEBAND CFG REQ";
          return Gnm07_06EncodeNSend(v21, (uint64_t)&__s, v18);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
        if (result) {
          goto LABEL_42;
        }
        return result;
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      if (!result) {
        return result;
      }
LABEL_38:
      bzero(__str, 0x410uLL);
      unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RequestType:%u\n", v19);
      return LbsOsaTrace_WriteLog(0xBu, __str, v20, 2, 1);
    }
LABEL_35:
    unsigned __int16 v18 = "GET SIDEBAND CFG REQ";
    return Gnm07_06EncodeNSend(v21, (uint64_t)&__s, v18);
  }
  int v9 = g_GnssHw;
  switch(g_GnssHw)
  {
    case 3:
      goto LABEL_15;
    case 1:
      goto LABEL_28;
    case 0:
      goto LABEL_15;
  }
  int v6 = HIDWORD(g_HWStatus);
LABEL_24:
  BOOL v12 = v6 == 2473;
  BOOL v13 = v9 == 2;
  if ((_BYTE)g_HWStatus) {
    BOOL v14 = v12;
  }
  else {
    BOOL v14 = v13;
  }
  if (!v14) {
    return result;
  }
LABEL_28:
  memset_s(&__s, 0x7FCuLL, 0, 0x7FCuLL);
  qmemcpy(v21, "BbM", sizeof(v21));
  char __s = a2;
  char v24 = v5;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: zxBbM ReqType,%c,ReqId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm38_11SendSBCfgSunshine", a2, v5);
    LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
  }
  if (a2 == 71) {
    goto LABEL_35;
  }
  if (a2 != 83)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_38;
  }
  if (a3)
  {
    Gnm37_26MapSbCfgGnmToPlcSunshine((uint64_t)v25, a3, v15);
    goto LABEL_34;
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  if (result)
  {
LABEL_42:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBConfig\n");
    return LbsOsaTrace_WriteLog(0xBu, __str, v20, 2, 1);
  }
  return result;
}

uint64_t isMeasDataType(unsigned int a1)
{
  if (a1 < 0xF) {
    return (0x47FFu >> a1) & 1;
  }
  if (g_FPE_LogSeverity)
  {
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v4 = *(double *)(g_TCU + 8);
    }
    else {
      double v4 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Unknown e_FpeMeasType %d", "isMeasDataType", 86, v3, v4, a1);
  }
  uint64_t result = 0;
  g_FPE_AssertFlag = 1;
  return result;
}

uint64_t ExtMeasExtract_Init(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 87720);
  uint64_t v3 = a1 + 78248;
  uint64_t v4 = a1 + 77960;
  uint64_t v5 = a1 + 77672;
  uint64_t v6 = a1 + 52688;
  bzero((void *)(a1 + 8), 0x15720uLL);
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 25888;
  *(void *)(a1 + 56) = a1 + 288;
  *(void *)(a1 + 64) = a1 + 25888;
  *(void *)a1 = a1 + 288;
  *(void *)(a1 + 72) = 0x32000000020;
  *(_DWORD *)(a1 + 80) = 25600;
  do
  {
    *(void *)(a1 + 8 * v7 + 8) = *(void *)(a1 + 56);
    *(unsigned char *)(a1 + v7++ + 84) = 0;
  }
  while (v7 != 6);
  uint64_t v9 = 0;
  *(void *)(a1 + 96) = v8;
  uint64_t v10 = a1 + 51488;
  *(void *)(a1 + 152) = v8;
  *(void *)(a1 + 160) = a1 + 51488;
  *(void *)(a1 + 168) = 0x32000000020;
  *(_DWORD *)(a1 + 176) = 25600;
  do
  {
    *(void *)(a1 + 8 * v9 + 104) = *(void *)(a1 + 152);
    *(unsigned char *)(a1 + v9++ + 180) = 0;
  }
  while (v9 != 6);
  uint64_t v11 = 0;
  *(void *)(a1 + 192) = v10;
  *(void *)(a1 + 248) = v10;
  *(void *)(a1 + 256) = v6;
  *(void *)(a1 + 264) = 0x3200000018;
  *(_DWORD *)(a1 + 272) = 1200;
  do
  {
    *(void *)(a1 + 8 * v11 + 200) = *(void *)(a1 + 248);
    *(unsigned char *)(a1 + v11++ + 276) = 0;
  }
  while (v11 != 6);
  uint64_t v12 = 0;
  *(void *)(v6 + 56) = a1 + 52784;
  *(void *)(v6 + 64) = v5;
  *(void *)uint64_t v6 = a1 + 52784;
  *(void *)(v6 + 72) = 0x300002068;
  *(_DWORD *)(v6 + 80) = 24888;
  uint64_t v13 = a1 + 52772;
  do
  {
    *(void *)(v13 + 8 * v12 - 76) = *(void *)(v6 + 56);
    *(unsigned char *)(v13 + v12++) = 0;
  }
  while (v12 != 6);
  uint64_t v14 = 0;
  uint64_t v15 = a1 + 78824;
  *(void *)(v5 + 56) = a1 + 78440;
  *(void *)(v5 + 64) = a1 + 78824;
  *(void *)uint64_t v5 = a1 + 78440;
  *(void *)(v5 + 72) = 0x200000000CLL;
  *(_DWORD *)(v5 + 80) = 384;
  uint64_t v16 = a1 + 77756;
  do
  {
    *(void *)(v16 + 8 * v14 - 76) = *(void *)(v5 + 56);
    *(unsigned char *)(v16 + v14++) = 0;
  }
  while (v14 != 6);
  uint64_t v17 = 0;
  *(void *)(v5 + 96) = v15;
  uint64_t v18 = a1 + 79208;
  *(void *)(v5 + 152) = v15;
  *(void *)(v5 + 160) = a1 + 79208;
  *(void *)(v5 + 168) = 0x200000000CLL;
  *(_DWORD *)(v5 + 176) = 384;
  uint64_t v19 = a1 + 77852;
  do
  {
    *(void *)(v19 + 8 * v17 - 76) = *(void *)(v5 + 152);
    *(unsigned char *)(v19 + v17++) = 0;
  }
  while (v17 != 6);
  uint64_t v20 = 0;
  *(void *)(v5 + 192) = v18;
  uint64_t v21 = a1 + 79592;
  *(void *)(v5 + 248) = v18;
  *(void *)(v5 + 256) = a1 + 79592;
  *(void *)(v5 + 264) = 0x200000000CLL;
  *(_DWORD *)(v5 + 272) = 384;
  uint64_t v22 = a1 + 77948;
  do
  {
    *(void *)(v22 + 8 * v20 - 76) = *(void *)(v5 + 248);
    *(unsigned char *)(v22 + v20++) = 0;
  }
  while (v20 != 6);
  uint64_t v23 = 0;
  uint64_t v24 = a1 + 85608;
  *(void *)(v3 + 56) = a1 + 85480;
  *(void *)(v3 + 64) = a1 + 85608;
  *(void *)uint64_t v3 = a1 + 85480;
  *(void *)(v3 + 72) = 0x2000000004;
  *(_DWORD *)(v3 + 80) = 128;
  uint64_t v25 = a1 + 78332;
  do
  {
    *(void *)(v25 + 8 * v23 - 76) = *(void *)(v3 + 56);
    *(unsigned char *)(v25 + v23++) = 0;
  }
  while (v23 != 6);
  uint64_t v26 = 0;
  uint64_t v27 = a1 + 80616;
  *(void *)(v4 + 56) = v21;
  *(void *)(v4 + 64) = a1 + 80616;
  *(void *)uint64_t v4 = v21;
  *(void *)(v4 + 72) = 0x2000000020;
  *(_DWORD *)(v4 + 80) = 1024;
  uint64_t v28 = a1 + 78044;
  do
  {
    *(void *)(v28 + 8 * v26 - 76) = *(void *)(v4 + 56);
    *(unsigned char *)(v28 + v26++) = 0;
  }
  while (v26 != 6);
  uint64_t v29 = 0;
  *(void *)(v4 + 96) = v27;
  uint64_t v30 = a1 + 82920;
  *(void *)(v4 + 152) = v27;
  *(void *)(v4 + 160) = a1 + 82920;
  *(void *)(v4 + 168) = 0x2000000048;
  *(_DWORD *)(v4 + 176) = 2304;
  uint64_t v31 = a1 + 78140;
  do
  {
    *(void *)(v31 + 8 * v29 - 76) = *(void *)(v4 + 152);
    *(unsigned char *)(v31 + v29++) = 0;
  }
  while (v29 != 6);
  uint64_t v32 = 0;
  *(void *)(v4 + 192) = v30;
  *(void *)(v4 + 248) = v30;
  *(void *)(v4 + 256) = a1 + 85480;
  *(void *)(v4 + 264) = 0x2000000050;
  *(_DWORD *)(v4 + 272) = 2560;
  uint64_t v33 = a1 + 78236;
  do
  {
    *(void *)(v33 + 8 * v32 - 76) = *(void *)(v4 + 248);
    *(unsigned char *)(v33 + v32++) = 0;
  }
  while (v32 != 6);
  uint64_t v34 = 0;
  *(void *)(v3 + 96) = v24;
  *(void *)(v3 + 152) = v24;
  *(void *)(v3 + 160) = a1 + 87656;
  *(void *)(v3 + 168) = 0x2000000040;
  *(_DWORD *)(v3 + 176) = 2048;
  uint64_t v35 = a1 + 78428;
  do
  {
    *(void *)(v35 + 8 * v34 - 76) = *(void *)(v3 + 152);
    *(unsigned char *)(v35 + v34++) = 0;
  }
  while (v34 != 6);
  *uint64_t v2 = a1;
  v2[1] = a1 + 96;
  v2[2] = a1 + 192;
  v2[3] = v5;
  v2[4] = v5 + 192;
  v2[5] = v3;
  v2[6] = v5 + 96;
  v2[7] = v4;
  v2[8] = v4 + 96;
  v2[9] = v4 + 192;
  v2[14] = v3 + 96;
  v2[10] = v6;
  return 1;
}

void *ExtMeasExtract_extractData(uint64_t a1, unsigned int a2, const void *a3)
{
  if ((isMeasDataType(a2) & 1) == 0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v7 = *(double *)(g_TCU + 8);
      }
      else {
        double v7 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f meas type not in range", "ExtMeasExtract_extractData", 208, v6, v7);
    }
    g_FPE_AssertFlag = 1;
  }
  uint64_t v8 = *(void *)(a1 + 8 * a2 + 87720);

  return Cyc_Record_Write(v8, a3);
}

uint64_t ExtMeasExtract_FlushMemory(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = isMeasDataType(a3);
  if ((result & 1) == 0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v8 = *(double *)(g_TCU + 8);
      }
      else {
        double v8 = 0.0;
      }
      uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f meas type not in range", "ExtMeasExtract_FlushMemory", 247, v7, v8);
    }
    g_FPE_AssertFlag = 1;
  }
  uint64_t v9 = *(void **)(a1 + 8 * a3 + 87720);
  v9[a2 + 1] = *v9;
  *((unsigned char *)v9 + a2 + 84) = 0;
  return result;
}

void NK_Set_TTFF(uint64_t a1, int *a2)
{
  uint64_t v4 = a2 + 6194;
  uint64_t v5 = (unsigned __int8 *)(a2 + 5748);
  double v6 = 0.0;
  for (uint64_t i = 3033; i != 3036; ++i)
    double v6 = v6 + *(double *)&a2[2 * i];
  if (*((unsigned char *)a2 + 25171))
  {
    if (v6 < 40000.0 && a2[6341] <= 0x13 && *(_DWORD *)(a1 + 11028) >= 2u)
    {
      *((unsigned char *)a2 + 960) = 1;
      if (!*(_DWORD *)(a1 + 11048)) {
        *(_DWORD *)(a1 + 11048) = *a2 - *(_DWORD *)(a1 + 26996);
      }
    }
  }
  if (!*(_DWORD *)(a1 + 11048))
  {
    *((unsigned char *)a2 + 25165) = 0;
    if (*(unsigned char *)(a1 + 232)
      && *((double *)a2 + 3044) < 30000.0
      && *((double *)a2 + 3045) < 30000.0
      && *((double *)a2 + 3046) < 30000.0)
    {
      *((unsigned char *)a2 + 25165) = 1;
    }
    unsigned int v8 = 100000;
    if (!*((unsigned char *)a2 + 960))
    {
      *(unsigned char *)(a1 + 128) = 1;
      *(_DWORD *)(a1 + 132) = 93;
      *(_DWORD *)(a1 + 152) = -1;
LABEL_44:
      unsigned int v12 = a2[6341];
      if (v12 > v8)
      {
        *((unsigned char *)a2 + 960) = 0;
        *(unsigned char *)(a1 + 233) = 1;
        memset_pattern16(a2 + 6056, &unk_22BB43BC0, 0x58uLL);
        memset_pattern16(a2 + 6078, &unk_22BB43BD0, 0x58uLL);
        double v6 = 1.00979801e14;
      }
      if (v12 >= 0x3E9 && !*(unsigned char *)(a1 + 128)) {
        *(unsigned char *)(a1 + 7) = 1;
      }
      goto LABEL_49;
    }
    if (a2[6206] || a2[3] > 8 || *((unsigned __int8 *)a2 + 24778) >= 2u && v6 <= 3600000000.0)
    {
      int v9 = *v5;
      if (v9
        && *((double *)a2 + 2883) > 900000000.0
        && (*((unsigned __int8 *)a2 + 24778) < 2u || a2[6341] > 0x64))
      {
        int v9 = 1;
      }
      else if (a2[6341] <= 0x186A0 {
             && a2[3] >= 2
      }
             && (a2[242]
              || (!*(unsigned char *)(a1 + 233) || *(int *)(a1 + 152) <= 2)
              && (*((double *)a2 + 3087) >= 90000.0 || *v4 || a2[6201] == 1)))
      {
LABEL_37:
        if (v9)
        {
          double v10 = *((double *)a2 + 2883);
          if (v10 >= 4.8e10 || v10 <= 900000000.0) {
            unsigned int v8 = 100000;
          }
          else {
            unsigned int v8 = 600000;
          }
        }
        goto LABEL_44;
      }
    }
    else
    {
      int v9 = *v5;
    }
    *(unsigned char *)(a1 + 128) = 1;
    *(_DWORD *)(a1 + 132) = 93;
    *(_DWORD *)(a1 + 152) = -1;
    goto LABEL_37;
  }
LABEL_49:
  if (v6 <= 3600000000.0)
  {
    if (*(_DWORD *)(a1 + 11028) && v4[2] >= 3u)
    {
      uint64_t v13 = 0;
      int v14 = *a2;
      do
      {
        if (v14 - *(_DWORD *)(a1 + 6120 + 4 * v13) >= 180001) {
          *(unsigned char *)(a1 + 6696 + v13) = 0;
        }
        ++v13;
      }
      while (v13 != 48);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 6712) = 0u;
    *(_OWORD *)(a1 + 6728) = 0u;
    *(_OWORD *)(a1 + 6696) = 0u;
  }
}

uint64_t DD_Delete_Bad_GPS_Data(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  double v6 = a4 + 877;
  unint64_t v7 = a4 + 13;
  unsigned int v8 = (_WORD *)(a1 + 4);
  uint64_t v9 = 1984;
  uint64_t result = 256;
  do
  {
    uint64_t v11 = a4[4];
    if (*(unsigned char *)(v11 + v5))
    {
      *((_DWORD *)v8 - 1) = 16777472;
      *unsigned int v8 = 256;
      *(_WORD *)(a2 + 2 * v5) = 256;
      *(unsigned char *)(v11 + v5) = 0;
      *(unsigned char *)(a4[2] + v5) = 0;
      *(unsigned char *)(a4[6] + v5) = 0;
      *(_OWORD *)((char *)v7 + 92) = 0uLL;
      v7[4] = 0uLL;
      v7[5] = 0uLL;
      void v7[2] = 0uLL;
      unsigned char v7[3] = 0uLL;
      *unint64_t v7 = 0uLL;
      v7[1] = 0uLL;
      *(unsigned char *)(a4[12] + v5) = 0;
      *(unsigned char *)(a4[9] + v5) = 1;
      unsigned int v12 = (_OWORD *)(p_NV + v9);
      *((void *)v12 - 1) = 0xFFFFFFFFLL;
      *unsigned int v12 = 0uLL;
      v12[1] = 0uLL;
      void v12[2] = 0uLL;
      long long v12[3] = 0uLL;
      void v12[4] = 0uLL;
      v12[5] = 0uLL;
      *(_OWORD *)((char *)v12 + 92) = 0uLL;
    }
    if (*(unsigned char *)(a4[5] + v5))
    {
      *(unsigned char *)(a3 + v5) = -1;
      *(unsigned char *)(a4[5] + v5) = 0;
      *(unsigned char *)(a4[3] + v5) = 0;
      *(unsigned char *)(a4[8] + v5) = 0;
      *(_OWORD *)((char *)v6 + 28) = 0uLL;
      *double v6 = 0uLL;
      v6[1] = 0uLL;
      *(unsigned char *)(a4[12] + v5) = 0;
      uint64_t v13 = p_NV + v4;
      *(void *)(v13 + 184) = 0xFFFFFFFFLL;
      *(_OWORD *)(v13 + 192) = 0uLL;
      *(_OWORD *)(v13 + 208) = 0uLL;
      *(_OWORD *)(v13 + 220) = 0uLL;
    }
    ++v5;
    v4 += 56;
    v9 += 120;
    double v6 = (_OWORD *)((char *)v6 + 44);
    unint64_t v7 = (_OWORD *)((char *)v7 + 108);
    v8 += 3;
  }
  while (v5 != 32);
  return result;
}

uint64_t DD_Delete_Inhib_GPS_Data(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = a5 + 877;
  unsigned int v8 = (_WORD *)(a2 + 4);
  uint64_t v9 = 1984;
  double v10 = a5;
  do
  {
    if (*(unsigned char *)(result + v6))
    {
      *((_DWORD *)v8 - 1) = 16777472;
      *unsigned int v8 = 256;
      *(_WORD *)(a3 + 2 * v6) = 256;
      *(unsigned char *)(a5[4] + v6) = 0;
      *(unsigned char *)(a5[2] + v6) = 0;
      *(unsigned char *)(a5[6] + v6) = 0;
      *(_OWORD *)((char *)v10 + 196) = 0uLL;
      *(_OWORD *)(v10 + 23) = 0uLL;
      *(_OWORD *)(v10 + 21) = 0uLL;
      *(_OWORD *)(v10 + 19) = 0uLL;
      *(_OWORD *)(v10 + 17) = 0uLL;
      *(_OWORD *)(v10 + 15) = 0uLL;
      *(_OWORD *)(v10 + 13) = 0uLL;
      *(unsigned char *)(a5[7] + v6) = 0;
      *(_OWORD *)((char *)v10 + 3652) = 0uLL;
      *(_OWORD *)(v10 + 453) = 0uLL;
      *(_OWORD *)(v10 + 455) = 0uLL;
      *(_OWORD *)(v10 + 449) = 0uLL;
      *(_OWORD *)(v10 + 451) = 0uLL;
      *(_OWORD *)(v10 + 445) = 0uLL;
      *(_OWORD *)(v10 + 447) = 0uLL;
      *(unsigned char *)(a5[12] + v6) = 0;
      *(unsigned char *)(a5[9] + v6) = 1;
      uint64_t v11 = (_OWORD *)(p_NV + v9);
      *((void *)v11 - 1) = 0xFFFFFFFFLL;
      *uint64_t v11 = 0uLL;
      v11[1] = 0uLL;
      int32x2_t v11[2] = 0uLL;
      v11[3] = 0uLL;
      void v11[4] = 0uLL;
      v11[5] = 0uLL;
      *(_OWORD *)((char *)v11 + 92) = 0uLL;
      *(unsigned char *)(a4 + v6) = -1;
      *(unsigned char *)(a5[5] + v6) = 0;
      *(unsigned char *)(a5[3] + v6) = 0;
      *(unsigned char *)(a5[8] + v6) = 0;
      *(_OWORD *)((char *)v7 + 28) = 0uLL;
      *unint64_t v7 = 0uLL;
      v7[1] = 0uLL;
      uint64_t v12 = p_NV + v5;
      *(void *)(v12 + 184) = 0xFFFFFFFFLL;
      *(_OWORD *)(v12 + 192) = 0uLL;
      *(_OWORD *)(v12 + 208) = 0uLL;
      *(_OWORD *)(v12 + 220) = 0uLL;
    }
    ++v6;
    v9 += 120;
    v5 += 56;
    unint64_t v7 = (_OWORD *)((char *)v7 + 44);
    double v10 = (void *)((char *)v10 + 108);
    v8 += 3;
  }
  while (v6 != 32);
  return result;
}

uint64_t DD_Check_Age_GPS_Data(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)result < 1) {
    return result;
  }
  int v7 = result;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v37 = (result + 900);
  if ((int)result <= 86400) {
    int v11 = 86400;
  }
  else {
    int v11 = result;
  }
  int v12 = v11 - 86400;
  uint64_t v13 = *(void *)(a6 + 48);
  int v14 = (unsigned char *)(a6 + 39302);
  int v36 = (result - a2 / 0x3E8) & ~((int)(result - a2 / 0x3E8) >> 31);
  uint64_t v15 = (int *)(a6 + 104);
  do
  {
    if (!*(unsigned char *)(v13 + v8)) {
      goto LABEL_17;
    }
    int v16 = *v15;
    if (*v15 < v12 && v16 >= 1)
    {
LABEL_15:
      char v10 = 1;
      *(unsigned char *)(*(void *)(a6 + 32) + v8) = 1;
      goto LABEL_17;
    }
    if (v16)
    {
      if (v16 > (int)v37)
      {
        uint64_t v9 = (v9 + 1);
        if (!*v14) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      *uint64_t v15 = v36;
    }
LABEL_17:
    ++v8;
    v15 += 27;
  }
  while (v8 != 32);
  if ((int)v9 >= 1)
  {
    EvLog_nd("DD_Check_Age_GPS_Data: Deleting EPH since in the future", 1, a3, v9);
    if (*v14) {
      EvLog("DD_Check_Age_GPS_Data: Skipping since SkipFutureCheck set");
    }
  }
  uint64_t v35 = v14;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (v7 <= 15724800) {
    int v20 = 15724800;
  }
  else {
    int v20 = v7;
  }
  int v21 = v20 - 15724800;
  uint64_t v22 = 7016;
  do
  {
    if (*(unsigned char *)(*(void *)(a6 + 64) + v18))
    {
      int v23 = *(_DWORD *)(a6 + v22);
      if (v23 >= v21 || v23 < 1)
      {
        if (v23)
        {
          if (v23 > (int)v37)
          {
            uint64_t v19 = (v19 + 1);
            EvLog_v("DD_Check_Age_GPS_Data: Future almanac deleted SV %d age %d thresh %d", v18 + 1, (v7 - v23) / 604800, 0);
            if (!*v14)
            {
              char v10 = 1;
              *(unsigned char *)(*(void *)(a6 + 40) + v18) = 1;
            }
          }
        }
        else
        {
          *(_DWORD *)(a6 + v22) = v36;
        }
      }
      else
      {
        char v10 = 1;
        *(unsigned char *)(*(void *)(a6 + 40) + v18) = 1;
        EvLog_v("DD_Check_Age_GPS_Data: Old almanac deleted SV %d age %d thresh %d", v18 + 1, (v7 - v23) / 604800, (v7 - v21) / 604800);
      }
    }
    ++v18;
    v22 += 44;
  }
  while (v18 != 32);
  if ((int)v19 >= 1)
  {
    EvLog_nd("DD_Check_Age_GPS_Data: Deleting ALM since in the future", 1, a3, v19);
    if (*v14) {
      EvLog("DD_Check_Age_GPS_Data: Skipping since SkipFutureCheck set");
    }
  }
  if (v7 <= 2419200) {
    int v25 = 2419200;
  }
  else {
    int v25 = v7;
  }
  int v26 = v25 - 2419200;
  if (*(_DWORD *)(a6 + 8428))
  {
    uint64_t v27 = (int *)(a6 + 8424);
    int v28 = *(_DWORD *)(a6 + 8424);
    if (v28 >= v26 || v28 < 1)
    {
      if (v28)
      {
        if (v28 > (int)v37)
        {
          EvLog_nd("DD_Check_Age_GPS_Data: Deleting Iono Model since in the future", 2, a3, *(unsigned int *)(a6 + 8424), v37);
          if (!*v35) {
            goto LABEL_53;
          }
          EvLog("DD_Check_Age_GPS_Data: Skipping since SkipFutureCheck set");
        }
      }
      else
      {
        int *v27 = v36;
      }
    }
    else
    {
LABEL_53:
      *(void *)uint64_t v27 = 0;
      *(void *)(a6 + 8432) = 0;
    }
  }
  if (*(_DWORD *)(a6 + 8444))
  {
    uint64_t v30 = (int *)(a6 + 8440);
    int v31 = *(_DWORD *)(a6 + 8440);
    if (v31 >= v26 || v31 < 1)
    {
      if (v31)
      {
        if (v31 > (int)v37)
        {
          EvLog_nd("DD_Check_Age_GPS_Data: Deleting UTC since in the future", 2, a3, *(unsigned int *)(a6 + 8440), v37);
          if (!*v35) {
            goto LABEL_58;
          }
          EvLog("DD_Check_Age_GPS_Data: Skipping since SkipFutureCheck set");
        }
      }
      else
      {
        *uint64_t v30 = v36;
      }
    }
    else
    {
LABEL_58:
      *(void *)uint64_t v30 = 0;
      *(void *)(a6 + 8448) = 0;
      *(void *)(a6 + 8456) = 0;
    }
  }
  uint64_t result = a3;
  if (v10)
  {
    return DD_Delete_Bad_GPS_Data(a3, a4, a5, (void *)a6);
  }
  return result;
}

uint64_t DD_Proc_GPS_Data(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v159 = *MEMORY[0x263EF8340];
  BOOL v136 = 0;
  uint64_t v10 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v11 = a6 + 108 * v10;
  int v14 = *(_DWORD *)(v11 + 208);
  int v12 = (_DWORD *)(v11 + 208);
  int v13 = v14;
  if (!v14) {
    *(unsigned char *)(*(void *)(a6 + 96) + v10) = 0;
  }
  unsigned int v15 = *(unsigned __int16 *)(a2 + 56);
  if ((v15 & 1) == 0 || *(unsigned __int8 *)(a2 + 18) << 16 != 9109504) {
    return result;
  }
  if ((v15 & 2) == 0)
  {
LABEL_6:
    *(unsigned char *)(a2 + 12) = 0;
    return result;
  }
  unint64_t v16 = *(unsigned int *)(a2 + 20);
  uint64_t v17 = (v16 >> 2) & 7;
  *(unsigned char *)(a2 + 12) = (v16 >> 2) & 7;
  if ((v17 - 6) < 0xFFFFFFFB) {
    return result;
  }
  unint64_t v132 = v16;
  double v134 = (unsigned __int8 *)result;
  unsigned __int8 v135 = 0;
  uint64_t v18 = v10;
  uint64_t result = DD_Predict_Subframe_Number(a4, &v135);
  uint64_t v19 = v17;
  uint64_t v20 = v18;
  if (!result || v17 == v135 || *a3 || *(unsigned char *)(*(void *)(a6 + 48) + v18))
  {
    if ((v17 - 1) < 3) {
      goto LABEL_14;
    }
    if ((v17 - 4) >= 2)
    {
      return (uint64_t)EvCrt_Illegal_Default("DD_Proc_GPS_Data", 0x3B3u);
    }
    uint64_t v25 = (uint64_t)v134;
    if ((~v15 & 0x3FE) != 0) {
      return result;
    }
    if (!*(unsigned char *)(a4 + 5)) {
      return result;
    }
    int v26 = *(__int16 *)(a4 + 16);
    if (v26 < 1025) {
      return result;
    }
    unsigned int v27 = *(_DWORD *)(a2 + 24);
    int v28 = HIWORD(v27) & 0x3F;
    *(unsigned char *)(a2 + 13) = BYTE2(v27) & 0x3F;
    int v29 = (v27 >> 22) & 3;
    *(unsigned char *)(a2 + 14) = v29;
    if (v29 == 1)
    {
      uint64_t v30 = (v28 - 1);
      if (v30 > 0x1F)
      {
LABEL_114:
        if (v28 == 51)
        {
          uint64_t result = DD_Proc_GPS_Health_Subframe(a2 + 16, *a5, v25, v25 + 224, v25 + 192, (long long **)a6);
          uint64_t v25 = (uint64_t)v134;
          *(_WORD *)(a6 + 8464) = 0;
          *(void *)&long long v87 = 0x101010101010101;
          *((void *)&v87 + 1) = 0x101010101010101;
          *(_OWORD *)(a6 + 8466) = v87;
          *(_OWORD *)(a6 + 8482) = v87;
          *((_OWORD *)v134 + 1125) = 0u;
          *((_OWORD *)v134 + 1124) = 0u;
          *(void *)&long long v88 = -1;
          *((void *)&v88 + 1) = -1;
          *((_OWORD *)v134 + 1126) = v88;
          *((_OWORD *)v134 + 1127) = v88;
          int v89 = *(_OWORD **)(a6 + 96);
          *int v89 = 0u;
          v89[1] = 0u;
          int v28 = *(unsigned __int8 *)(a2 + 13);
        }
        if (v28 == 56)
        {
          uint64_t result = (uint64_t)DD_Proc_GPS_ION_UTC_Subframe(*(unsigned __int8 *)(a2 + 8), (_DWORD *)(a2 + 16), *a5, v26, *(void *)(a6 + 96), a6);
          uint64_t v25 = (uint64_t)v134;
          int v28 = *(unsigned __int8 *)(a2 + 13);
        }
        if (v28 != 63) {
          return result;
        }
        uint64_t result = DD_Proc_GPS_AS_SV_Config_Subframe((const unsigned int *)(a2 + 16), *a5, (unsigned __int8 *)(v25 + 17984), v25, v25 + 224, v25 + 192, (_OWORD **)a6);
        unsigned __int16 v90 = *(long long **)a6;
        uint64_t v91 = *(unsigned __int8 *)(a2 + 8);
        if (!*(unsigned char *)(*(void *)a6 + v91)) {
          return result;
        }
        uint64_t v92 = a6 + 8466;
        char v93 = v134 + 18016;
        uint64_t v94 = -32;
        while (1)
        {
          char v95 = *(v93 - 32);
          if ((v95 & 7u) - 1 <= 3) {
            break;
          }
          *(unsigned char *)(*(void *)(a6 + 96) + v91) = 1;
          unsigned int v96 = *v93;
          if (v96 <= 1) {
            goto LABEL_127;
          }
LABEL_128:
          ++v93;
          if (__CFADD__(v94++, 1)) {
            return result;
          }
        }
        unsigned int v96 = *v93;
        if (v96 >= 2)
        {
          if (*((unsigned char *)v90 + v94 + 32) && *(unsigned char *)(a6 + 37344 + v94 + 32)) {
            *(unsigned char *)(v92 + v94 + 32) = (v95 & 8) != 0;
          }
          goto LABEL_128;
        }
LABEL_127:
        *(unsigned char *)(v92 + v94 + 32) = v96;
        goto LABEL_128;
      }
      uint64_t result = Decode_GPS_Check_Alm_TOA((const unsigned int *)(a2 + 16), *(unsigned char *)(*(void *)a6 + v30), v26, &v134[v30 + 192], (__int16 *)(a2 + 10), &v136);
      if (result)
      {
        uint64_t result = DD_Proc_GPS_Alm_Subframe(*(unsigned __int8 *)(a2 + 13), *(_WORD *)(a2 + 10), a2 + 16, *a5, (uint64_t)v134, (uint64_t)(v134 + 224), (void *)a6);
        uint64_t v25 = (uint64_t)v134;
      }
      else
      {
        uint64_t v25 = (uint64_t)v134;
        if (v136)
        {
          uint64_t result = *(unsigned __int8 *)(a2 + 13);
          uint64_t v85 = a6 + 44 * result;
          int v86 = *(_DWORD *)(v85 + 6972);
          *(_DWORD *)(v85 + 6972) = *a5;
          if (!v86 && *a5 >= 1)
          {
            uint64_t result = Core_Save_GPS_Alm(result, 0, (long long *)(v85 + 6972));
            uint64_t v25 = (uint64_t)v134;
          }
        }
      }
    }
    int v28 = *(unsigned __int8 *)(a2 + 13);
    goto LABEL_114;
  }
  if ((v17 != 1 || v135 != 2) && (v17 != 2 || v135 != 3) && (v17 != 3 || v135 != 4))
  {
    uint64_t result = (uint64_t)EvCrt_v("DD_Proc_GPS_Data:  SV %2d Subframe Number Error - decoded %d  expected %d", (int)v18 + 1, v17, (char)v135);
    goto LABEL_6;
  }
LABEL_14:
  *(unsigned char *)(a2 + 13) = 0;
  BOOL v21 = v13 != 0xFFFFFF;
  unint64_t v126 = a5;
  uint64_t v127 = a6;
  uint64_t v125 = a2 + 16;
  if (v13 == 0xFFFFFF)
  {
    LOBYTE(v31) = v132;
    uint64_t v22 = v134;
    if (*(unsigned char *)(*(void *)a6 + v18)) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v22 = v134;
    if (*(unsigned char *)(*(void *)a6 + v18))
    {
      if (!*(unsigned char *)(*(void *)(a6 + 48) + v18))
      {
        uint64_t v121 = 0x100000000;
        goto LABEL_41;
      }
      uint64_t v23 = 0;
      do
      {
        int v24 = 1 << (8 * ((v132 >> 2) & 7) - 8 + v23);
        if ((v13 & v24) == 0
          && ((v15 >> v23) & 1) != 0
          && *(_DWORD *)(a2 + 24 + 4 * v23) == *(_DWORD *)(a6
                                                         + 108 * v18
                                                         + 4 * (8 * v17 - 8)
                                                         + 112
                                                         + 4 * v23))
        {
          v13 |= v24;
          *int v12 = v13;
        }
        ++v23;
      }
      while (v23 != 8);
      if (v13 != 0xFFFFFF)
      {
        LODWORD(v121) = 0;
        int v32 = 1;
        goto LABEL_40;
      }
      int v31 = *(_DWORD *)(a2 + 20);
LABEL_39:
      LODWORD(v121) = v21;
      v22[v18 + 18016] = (v31 & 0x20) != 0;
      uint64_t v20 = *(unsigned __int8 *)(a2 + 8);
      uint64_t v19 = *(unsigned __int8 *)(a2 + 12);
      unsigned int v15 = *(unsigned __int16 *)(a2 + 56);
      int v32 = *(unsigned __int8 *)(*(void *)a6 + v20);
LABEL_40:
      HIDWORD(v121) = v32;
      goto LABEL_41;
    }
  }
  uint64_t v121 = 0;
LABEL_41:
  uint64_t v33 = 0;
  int v34 = 0;
  int v35 = 0;
  int v36 = 0;
  int v37 = 0;
  uint64_t v123 = v19;
  uint64_t v124 = (uint64_t)(v22 + 288);
  uint64_t v128 = a2;
  BOOL v129 = v22 + 3360;
  uint64_t v122 = v19 - 1;
  uint64_t v38 = &v22[6 * v20 + 3360 + 2 * v122];
  int v131 = v20 + 1;
  uint64_t v133 = v20;
  uint64_t v39 = (uint64_t)&v22[96 * v20 + 256 + 32 * v19];
  uint64_t v40 = a2 + 24;
  do
  {
    int v41 = 1 << (v33 + 2);
    int v42 = (unsigned __int16)(v41 & *(_WORD *)v38);
    if (v42) {
      ++v37;
    }
    if ((v41 & v15) != 0)
    {
      ++v36;
      BOOL v43 = v42 == 0;
    }
    else
    {
      BOOL v43 = 1;
    }
    if (!v43)
    {
      ++v35;
      int v44 = *(_DWORD *)(v39 + 4 * v33);
      if (*(_DWORD *)(v40 + 4 * v33) != v44)
      {
        int v45 = v34 + 1;
        uint64_t v46 = v19;
        uint64_t v47 = v39;
        uint64_t result = (uint64_t)EvLog_v("DD_Proc_GPS_Eph_Subframe: SV %d SF %d Diff Wd %d 0x%x 0x%x", v131, v19, (int)v33 + 2, *(_DWORD *)(v40 + 4 * v33), v44);
        uint64_t v39 = v47;
        int v34 = v45;
        uint64_t v19 = v46;
        uint64_t v20 = v133;
        uint64_t v22 = v134;
      }
    }
    ++v33;
  }
  while (v33 != 8);
  uint64_t v48 = v126;
  uint64_t v49 = v129;
  if (v34 >= 1)
  {
    if (v34 == 1
      && v35 >= 4
      && (v19 == 1 && (v15 & 0x3C4) != 0x3C4 || v19 >= 2 && (v15 & 0x3FC) != 0x3FC))
    {
      return result;
    }
    int v37 = 0;
    uint64_t v50 = 2 * v19 - 2;
    *(_WORD *)&v129[6 * v20 + v50] = 0;
    *(_WORD *)&v22[6 * v20 + v50] = 256;
  }
  if (v35 - v34 <= 1)
  {
    if (v36 >= v37)
    {
      *(_WORD *)&v129[6 * v20 - 2 + 2 * v123] = v15;
      long long v61 = *(_OWORD *)(v128 + 40);
      char v62 = (_OWORD *)(v124 + 96 * v20 + 32 * (v123 - 1));
      *char v62 = *(_OWORD *)(v128 + 24);
      v62[1] = v61;
    }
    uint64_t result = v125;
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v52 = (uint64_t)&v129[6 * v20 + 2 * v19];
    int v55 = *(unsigned __int16 *)(v52 - 2);
    uint64_t v53 = (_WORD *)(v52 - 2);
    int v54 = v55;
    uint64_t v56 = v128 + 24;
    uint64_t v57 = (uint64_t)&v22[96 * v20 + 256 + 32 * v19];
    uint64_t result = v125;
    do
    {
      int v58 = 1 << (v51 + 2);
      int v59 = v58 & v54;
      if ((v58 & v15) != 0 && v59 == 0)
      {
        *(_DWORD *)(v57 + 4 * v51) = *(_DWORD *)(v56 + 4 * v51);
        v54 |= (unsigned __int16)(1 << (v51 + 2));
        _WORD *v53 = v54;
      }
      else if ((v58 & v15) == 0 && v59)
      {
        *(_DWORD *)(v56 + 4 * v51) = *(_DWORD *)(v57 + 4 * v51);
        v15 |= (unsigned __int16)(1 << (v51 + 2));
      }
      ++v51;
    }
    while (v51 != 8);
  }
  if ((v19 - 1) <= 2)
  {
    unsigned int v63 = 0x90207u >> (8 * (v19 - 1));
    if ((v15 >> (v63 & 0xF)))
    {
      int v64 = *(unsigned __int8 *)(result + 4 * (v63 & 0xF) + 2);
      if ((v19 != 1 || (v15 & 0x3C4) == 0x3C4) && (v19 < 2 || (v15 & 0x3FC) == 0x3FC))
      {
        long long v65 = v22 + 224;
        unsigned __int16 v66 = &v22[6 * v20];
        __int16 v67 = (unsigned __int16 *)&v66[2 * v122];
        int v68 = *v67;
        if (v64 != v68) {
          *__int16 v67 = v64;
        }
        if (v64 != *(unsigned __int16 *)&v65[2 * v20])
        {
          for (uint64_t i = 0; i != 6; i += 2)
          {
            if (2 * v122 != i) {
              *(_WORD *)&v22[6 * v20 + 3360 + i] = 0;
            }
          }
          *(_WORD *)&v65[2 * v20] = v64;
        }
        uint64_t v70 = &v129[6 * v20];
        int v71 = *(unsigned __int16 *)v70;
        if ((~v71 & 0x3C4) != 0
          || (uint64_t v72 = &v129[6 * v20],
              int v74 = *((unsigned __int16 *)v72 + 1),
              uint64_t v73 = v72 + 2,
              (~v74 & 0x3FC) != 0)
          || (uint64_t v75 = &v129[6 * v20],
              int v77 = *((unsigned __int16 *)v75 + 2),
              __int16 v76 = v75 + 4,
              (~v77 & 0x3FC) != 0)
          || (int v78 = *(unsigned __int16 *)v66, v78 != *(unsigned __int16 *)&v22[6 * v20 + 2])
          || v78 != *(unsigned __int16 *)&v22[6 * v20 + 4])
        {
LABEL_134:
          if ((~v71 & 0x3C4) != 0) {
            return result;
          }
          uint64_t v98 = &v49[6 * v20];
          int v100 = *((unsigned __int16 *)v98 + 1);
          char v99 = v98 + 2;
          if ((~v100 & 0x3FC) != 0) {
            return result;
          }
          unsigned __int16 v101 = &v49[6 * v20];
          int v103 = *((unsigned __int16 *)v101 + 2);
          int v102 = v101 + 4;
          if ((~v103 & 0x3FC) != 0) {
            return result;
          }
          int v104 = *(unsigned __int16 *)v66;
          if (v104 != *(unsigned __int16 *)&v22[6 * v20 + 2]
            || v104 != *(unsigned __int16 *)&v22[6 * v20 + 4])
          {
            return result;
          }
          double v105 = v48;
          double v106 = v22 + 3552;
          unint64_t v107 = *(unsigned int *)(v124 + 96 * v20);
          unint64_t v108 = 0xE4FE7F3uLL >> ((v107 >> 2) & 0x1F);
          if (v64 == v68 && *(_DWORD *)(v127 + 108 * v133 + 208) == 0xFFFFFF)
          {
            if (!HIDWORD(v121) && (v108 & 1) != 0)
            {
              v106[v133] = 1;
              *(_WORD *)uint64_t v70 = 0;
              *char v99 = 0;
              *int v102 = 0;
              return result;
            }
            BOOL v109 = v106[v133] == 0;
          }
          else
          {
            BOOL v109 = 0;
            v106[v133] = 1;
          }
          *(_WORD *)uint64_t v70 = 0;
          *char v99 = 0;
          *int v102 = 0;
          if (!HIDWORD(v121) || (v108 & 1) == 0) {
            goto LABEL_161;
          }
          signed int v110 = (v107 >> 14) & 0x3FF;
          if (*(unsigned char *)(a4 + 5))
          {
            do
            {
              unsigned __int16 v111 = v110;
              v110 += 1024;
            }
            while (*(__int16 *)(a4 + 16) - 512 > (__int16)v111);
            if (*(unsigned __int16 *)(a4 + 16) == v111) {
              goto LABEL_161;
            }
            if (*(int *)a4 < 3) {
              goto LABEL_161;
            }
            int v112 = (int)*(double *)(a4 + 24);
            if ((v112 - 32) >= 0x93A41) {
              goto LABEL_161;
            }
          }
          else
          {
            signed int v113 = *(__int16 *)(*(void *)(p_api + 72) + 1026);
            if (v110 > v113) {
              LOWORD(v113) = (v107 >> 14) & 0x3FF;
            }
            unsigned __int16 v111 = ((v110 ^ 0x3FF) + v113) & 0xFC00 | v110;
            int v112 = (int)*(double *)(a4 + 24);
          }
          int v114 = (__int16)v111;
          uint64_t result = DD_Submit_WeekNum((v133 + 1), (__int16)v111, v127, v124, a4);
          if (result)
          {
            int v115 = v112 + 604800 * v114;
            if (*(int *)a4 <= 2) {
              int v115 = 0;
            }
            *double v105 = v115;
            uint64_t v116 = v128;
            if (!v109) {
              return result;
            }
LABEL_163:
            uint64_t v117 = *(unsigned __int8 *)(v116 + 8);
            uint64_t v118 = v127 + 108 * v117;
            int v120 = *(_DWORD *)(v118 + 104);
            uint64_t v119 = v118 + 104;
            *(_DWORD *)uint64_t v119 = v115;
            *(_DWORD *)(v119 + 4) = 4;
            if (((v120 != 0) & ~v121) == 0 && *v105 >= 1)
            {
              *(unsigned char *)(*(void *)(v127 + 72) + v117) = 1;
              return Core_Save_GPS_Eph((v117 + 1), 0, (long long *)v119);
            }
            return result;
          }
LABEL_161:
          uint64_t v116 = v128;
          if (!v109) {
            return result;
          }
          int v115 = *v105;
          goto LABEL_163;
        }
        uint64_t v79 = (long long *)(v124 + 96 * v20);
        long long v80 = v79[3];
        long long v154 = v79[2];
        long long v155 = v80;
        long long v81 = v79[5];
        long long v156 = v79[4];
        long long v157 = v81;
        long long v82 = v79[1];
        long long v152 = *v79;
        int v158 = 0;
        v151[0] = *v126;
        v151[1] = 4;
        long long v153 = v82;
        memset(v137, 0, sizeof(v137));
        int v138 = 0;
        long long v139 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        long long v142 = 0u;
        long long v143 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        long long v146 = 0u;
        long long v147 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        uint64_t v150 = 0;
        Get_GPS_Kep_Ephemeris(1, v20 + 1, (uint64_t)v151, (uint64_t)v137);
        int v83 = Kep_Check_Ephemeris(*v126 / 604800, *v126 % 604800, (uint64_t)v137);
        __int16 v84 = v83;
        uint64_t result = ST_Check_Eph_Kep_Err((uint64_t)"DD_Proc_GPS_Eph_Subframe:", v83, (uint64_t)v137);
        if ((result & 1) == 0)
        {
          if ((v84 & 0xC) != 0) {
            *(_WORD *)uint64_t v70 = 0;
          }
          if ((v84 & 0x3F0) != 0) {
            *uint64_t v73 = 0;
          }
          if ((v84 & 0xC00) != 0)
          {
            *__int16 v76 = 0;
LABEL_132:
            *(unsigned char *)(*(void *)(v127 + 96) + v133) = 1;
            goto LABEL_133;
          }
          if ((v84 & 0xFFC) != 0) {
            goto LABEL_132;
          }
        }
LABEL_133:
        int v71 = *(unsigned __int16 *)v70;
        uint64_t v48 = v126;
        LODWORD(v20) = v133;
        uint64_t v22 = v134;
        uint64_t v49 = v129;
        goto LABEL_134;
      }
    }
  }
  return result;
}

BOOL DD_Predict_Subframe_Number(uint64_t a1, unsigned char *a2)
{
  if (*(int *)a1 < 4)
  {
    LOBYTE(v3) = -1;
  }
  else
  {
    double v2 = (double)((int)(*(double *)(a1 + 24) + 0.5) % 30) / 6.0 + 4.5;
    unsigned int v3 = (int)v2 - 5 * ((((103 * (int)v2) >> 15) & 1) + ((103 * (int)v2) >> 9)) + 1;
  }
  BOOL result = *(_DWORD *)a1 > 3;
  *a2 = v3;
  return result;
}

BOOL DD_Proc_GPS_Alm_Subframe(unsigned int a1, __int16 a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  int v12 = ((*(_DWORD *)(a3 + 16) & 0xE0) == 0) & (0xE4FE7F3uLL >> (*(_DWORD *)(a3 + 16) & 0x1F));
  uint64_t v13 = (a1 - 1);
  if (*(unsigned char *)(*a7 + v13)) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14) {
    goto LABEL_12;
  }
  if (*(unsigned char *)(*a7 + v13)) {
    int v15 = 0;
  }
  else {
    int v15 = ((*(_DWORD *)(a3 + 16) & 0xE0) == 0) & (0xE4FE7F3uLL >> (*(_DWORD *)(a3 + 16) & 0x1F));
  }
  if (v15 == 1)
  {
    uint64_t v16 = a7[6];
    if (*(unsigned char *)(v16 + v13))
    {
      uint64_t v17 = (char *)a7 + 108 * (a1 - 1);
      int v18 = *((_DWORD *)v17 + 26);
      if (((0xE4FE7F3uLL >> (((unint64_t)*((unsigned int *)v17 + 28) >> 2) & 0x1F)) & 1) == 0 && v18 + 3600 > a4)
      {
LABEL_12:
        LOBYTE(v12) = 0;
        goto LABEL_16;
      }
      if (v18 + 100 < a4)
      {
        *(unsigned char *)(a7[2] + v13) = 0;
        *(unsigned char *)(v16 + v13) = 0;
        uint64_t v19 = a5 + 6 * (a1 - 1);
        *(_DWORD *)uint64_t v19 = 16777472;
        *(_WORD *)(v19 + 4) = 256;
        *(_WORD *)(a6 + 2 * v13) = 256;
      }
    }
    LOBYTE(v12) = 1;
  }
LABEL_16:
  uint64_t v50 = 0;
  int v49 = a4;
  long long v51 = *(_OWORD *)(a3 + 8);
  long long v52 = *(_OWORD *)(a3 + 24);
  __int16 v44 = 0;
  memset(v43, 0, 15);
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  memset(v48, 0, sizeof(v48));
  Get_GPS_Kep_Almanac((uint64_t)&v49, (uint64_t)v43);
  int v20 = Kep_Check_Almanac(a4 / 604800, (uint64_t)v43);
  if (v20) {
    *(unsigned char *)(a7[12] + v13) = 1;
  }
  BOOL result = ST_Check_Alm_Kep_Err((uint64_t)"DD_Proc_GPS_Alm_Subframe:", v20, (uint64_t)v43);
  if (result)
  {
    uint64_t v22 = (_OWORD *)*a7;
    *((unsigned char *)v22 + v13) = v12;
    uint64_t v23 = (char *)a7 + 44 * v13;
    int v24 = (long long *)(v23 + 7016);
    *((_WORD *)v23 + 3513) = a2;
    long long v25 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v23 + 7044) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v23 + 7028) = v25;
    *((_DWORD *)v23 + 1754) = a4;
    *((_DWORD *)v23 + 1755) = 4;
    *(unsigned char *)(a7[3] + v13) = 1;
    *(unsigned char *)(a7[8] + v13) = 1;
    if (*((unsigned char *)v22 + v13)) {
      int v26 = 1;
    }
    else {
      int v26 = 2;
    }
    *(_DWORD *)(a7[1] + 20 * v13 + 4) = v26;
    if (a4 >= 1)
    {
      uint64_t v27 = 0;
      LODWORD(v28) = 0;
      uint64_t v29 = p_NV + 56 * a1;
      uint64_t v30 = (void *)(v29 + 128);
      long long v31 = *v24;
      long long v32 = v24[1];
      *(_OWORD *)(v29 + 164) = *(long long *)((char *)v24 + 28);
      *(_OWORD *)(v29 + 152) = v32;
      *(_OWORD *)(v29 + 136) = v31;
      uint64_t v33 = v29 + 136;
      __int16 v34 = -9871;
      do
      {
        int v35 = *(unsigned __int8 *)(v33 + v27) ^ HIBYTE(v34);
        __int16 v34 = -12691 * (v34 + (*(unsigned __int8 *)(v33 + v27) ^ HIBYTE(v34))) + 22719;
        uint64_t v28 = (v28 + v35);
        ++v27;
      }
      while (v27 != 48);
      *uint64_t v30 = v28;
      uint64_t v22 = (_OWORD *)*a7;
    }
    uint64_t v36 = 0;
    LODWORD(v37) = 0;
    uint64_t v38 = p_NV;
    long long v39 = v22[1];
    *(_OWORD *)(p_NV + 92) = *v22;
    *(_OWORD *)(v38 + 108) = v39;
    uint64_t v40 = v38 + 88;
    __int16 v41 = -9871;
    do
    {
      int v42 = *(unsigned __int8 *)(v40 + v36) ^ HIBYTE(v41);
      __int16 v41 = -12691 * (v41 + (*(unsigned __int8 *)(v40 + v36) ^ HIBYTE(v41))) + 22719;
      uint64_t v37 = (v37 + v42);
      ++v36;
    }
    while (v36 != 40);
    *(void *)(v38 + 80) = v37;
  }
  return result;
}

uint64_t DD_Proc_GPS_Health_Subframe(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, long long **a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t result = Decode_GPS_Health_Subframe(a1, (BOOL *)&v29);
  uint64_t v12 = 0;
  uint64_t v13 = (_WORD *)(a3 + 4);
  uint64_t v14 = 4;
  uint64_t v15 = 7016;
  uint64_t v16 = 104;
  do
  {
    if (*((unsigned char *)*a6 + v12))
    {
      if (*((unsigned char *)&v29 + v12)) {
        goto LABEL_4;
      }
    }
    else if (*((unsigned char *)&v29 + v12))
    {
      uint64_t result = (uint64_t)a6 + v15;
      int v18 = a6[6];
      int v19 = *((unsigned __int8 *)v18 + v12);
      if (!*((unsigned char *)v18 + v12)
        || ((0xE4FE7F3uLL >> (((unint64_t)*(unsigned int *)((char *)a6 + v16 + 8) >> 2) & 0x1F)) & 1) != 0
        || *(_DWORD *)((char *)a6 + v16) + 3600 <= a2)
      {
        int v20 = a6[8];
        if (!*((unsigned char *)v20 + v12)) {
          goto LABEL_18;
        }
        uint64_t result = *(unsigned int *)result;
        if (((0xE4FE7F3uLL >> (*(_DWORD *)((unsigned char *)a6 + v15 + 20) & 0x1F)) & 1) != 0 || (int)result + 3600 <= a2)
        {
          uint64_t result = (result + 100);
          if ((int)result < a2)
          {
            *((unsigned char *)a6[3] + v12) = 0;
            *((unsigned char *)v20 + v12) = 0;
            *(unsigned char *)(a5 + v12) = -1;
            int v18 = a6[6];
            int v19 = *((unsigned __int8 *)v18 + v12);
          }
LABEL_18:
          if (v19 && *(_DWORD *)((char *)a6 + v16) + 100 < a2)
          {
            *((unsigned char *)a6[2] + v12) = 0;
            *((unsigned char *)v18 + v12) = 0;
            *((_DWORD *)v13 - 1) = 16777472;
            *uint64_t v13 = 256;
            *(_WORD *)(a4 + 2 * v12) = 256;
          }
LABEL_4:
          int v17 = 1;
          goto LABEL_14;
        }
      }
      *((unsigned char *)&v29 + v12) = 0;
    }
    int v17 = 2;
LABEL_14:
    *(_DWORD *)((char *)a6[1] + v14) = v17;
    ++v12;
    v14 += 20;
    v13 += 3;
    v15 += 44;
    v16 += 108;
  }
  while (v12 != 24);
  uint64_t v21 = 0;
  LODWORD(v22) = 0;
  uint64_t v23 = *a6;
  *uint64_t v23 = v29;
  *((void *)v23 + 2) = v30;
  uint64_t v24 = p_NV;
  long long v25 = **a6;
  *(_OWORD *)(p_NV + 108) = (*a6)[1];
  *(_OWORD *)(v24 + 92) = v25;
  uint64_t v26 = v24 + 88;
  __int16 v27 = -9871;
  do
  {
    int v28 = *(unsigned __int8 *)(v26 + v21) ^ HIBYTE(v27);
    __int16 v27 = -12691 * (v27 + (*(unsigned __int8 *)(v26 + v21) ^ HIBYTE(v27))) + 22719;
    uint64_t v22 = (v22 + v28);
    ++v21;
  }
  while (v21 != 40);
  *(void *)(v24 + 80) = v22;
  return result;
}

char *DD_Proc_GPS_ION_UTC_Subframe(unsigned int a1, _DWORD *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  int v9 = a2[7];
  int v8 = a2[8];
  unsigned int v10 = a2[9];
  unsigned int v11 = HIWORD(v10);
  if (BYTE2(v8) >= 0x21u)
  {
    int v12 = SBYTE2(v10);
LABEL_3:
    uint64_t result = EvCrt_v("DD_Proc_GPS_ION_UTC_Subframe:  Rejected:  Invalid UTC Model  %d %d %d  %d %d %d", a2[7], BYTE1(a2[7]), SBYTE2(v8), v12, BYTE1(a2[8]), a2[8]);
    *(unsigned char *)(a5 + a1) = 1;
    return result;
  }
  int v12 = SBYTE2(v10);
  int v14 = BYTE2(v8) - SBYTE2(v10);
  if (v14 < 0) {
    int v14 = SBYTE2(v10) - BYTE2(v8);
  }
  BOOL v15 = (v8 - 8) < 0xF9u || v14 > 1;
  if (v15 || BYTE1(v9) >= 0x93u) {
    goto LABEL_3;
  }
  int v40 = a2[2];
  int v41 = a2[3];
  int v18 = a2[5];
  int v42 = a2[4];
  int v19 = a2[6];
  if (BYTE2(v10) != BYTE2(v8))
  {
    int v43 = a2[6];
    int v20 = a3;
    BOOL v21 = Is_Future_Leap_Sec_Date_Not_Valid(a3 / 604800, 1, BYTE1(v8), v8);
    int v19 = v43;
    a3 = v20;
    if (v21) {
      return EvCrt_v("DD_Proc_GPS_ION_UTC_Subframe:  Rejected:  Invalid UTC Future Leap Second date  %d  %d %d %d");
    }
  }
  int v39 = a4;
  int v44 = v18 << 8 >> 8;
  int v22 = (v19 << 8) | BYTE2(v9);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  int v23 = a3;
  uint64_t result = (char *)Core_Get_GPS_UTC(a3, (uint64_t)&v45);
  if (!result) {
    goto LABEL_26;
  }
  if (BYTE2(v47) != BYTE2(v8)) {
    goto LABEL_20;
  }
  int v24 = SBYTE5(v47) - (char)v11;
  if (v24 < 0) {
    int v24 = (char)v11 - SBYTE5(v47);
  }
  if (v24 >= 2)
  {
LABEL_20:
    *(unsigned char *)(a6 + 8464) = 1;
    return EvCrt_v("DD_Proc_GPS_ION_UTC_Subframe:  Rejected:  OTA UTC Leap Seconds  %d  %d  incompatible with Assistance  %d  %d");
  }
  int v25 = v39 - 1024 - BYTE1(v47);
  if (v25 >= 127) {
    int v25 = 127;
  }
  int v26 = v39 - 1024 - v9;
  if (v26 >= 127) {
    int v26 = 127;
  }
  if (vabdd_f64((double)v44* 8.8817842e-16* (double)(int)(v23- 619315200- (BYTE1(v9) << 12)- 604800 * ((v39 - 769 - (v26 + v9)) & 0xFFFFFF00 | v9))+ (double)v22 * 9.31322575e-10, (double)(int)v46* 8.8817842e-16* (double)(int)(v23- 619315200- (v47 << 12)- 604800 * ((v39 - 769 - BYTE1(v47) - v25) & 0xFFFFFF00 | BYTE1(v47)))+ (double)SHIDWORD(v46) * 9.31322575e-10) > 0.000001)
  {
    *(unsigned char *)(a6 + 8465) = 1;
    return EvCrt_v("DD_Proc_GPS_ION_UTC_Subframe:  Rejected:  OTA UTC Correction  %d ns incompatible with Assistance %d ns");
  }
  else
  {
LABEL_26:
    *(_DWORD *)(a6 + 8424) = v23;
    *(unsigned char *)(a6 + 8432) = BYTE1(v40);
    *(unsigned char *)(a6 + 8433) = v40;
    *(unsigned char *)(a6 + 8434) = BYTE2(v41);
    *(unsigned char *)(a6 + 8435) = BYTE1(v41);
    *(unsigned char *)(a6 + 8436) = v41;
    *(unsigned char *)(a6 + 8437) = BYTE2(v42);
    *(unsigned char *)(a6 + 8438) = BYTE1(v42);
    *(unsigned char *)(a6 + 8439) = v42;
    *(_DWORD *)(a6 + 8440) = v23;
    *(_DWORD *)(a6 + 8448) = v44;
    *(_DWORD *)(a6 + 8452) = v22;
    *(unsigned char *)(a6 + 8456) = BYTE1(v9);
    *(unsigned char *)(a6 + 8457) = v9;
    *(unsigned char *)(a6 + 8458) = BYTE2(v8);
    *(unsigned char *)(a6 + 8459) = BYTE1(v8);
    *(unsigned char *)(a6 + 8460) = v8;
    *(unsigned char *)(a6 + 8461) = v11;
    *(_WORD *)(a6 + 8462) = 0;
    *(_DWORD *)(a6 + 8428) = 4;
    *(_DWORD *)(a6 + 8444) = 4;
    if (v23 >= 1)
    {
      uint64_t v27 = 0;
      LODWORD(v28) = 0;
      uint64_t v29 = p_NV;
      *(_OWORD *)(p_NV + 136) = *(_OWORD *)(a6 + 8424);
      uint64_t v30 = v29 + 136;
      __int16 v31 = -9871;
      do
      {
        int v32 = *(unsigned __int8 *)(v30 + v27) ^ HIBYTE(v31);
        __int16 v31 = -12691 * (v31 + (*(unsigned __int8 *)(v30 + v27) ^ HIBYTE(v31))) + 22719;
        uint64_t v28 = (v28 + v32);
        ++v27;
      }
      while (v27 != 16);
      uint64_t v33 = 0;
      LODWORD(v34) = 0;
      *(void *)(v29 + 128) = v28;
      long long v35 = *(_OWORD *)(a6 + 8440);
      *(void *)(v29 + 176) = *(void *)(a6 + 8456);
      *(_OWORD *)(v29 + 160) = v35;
      uint64_t v36 = v29 + 160;
      __int16 v37 = -9871;
      do
      {
        int v38 = *(unsigned __int8 *)(v36 + v33) ^ HIBYTE(v37);
        __int16 v37 = -12691 * (v37 + (*(unsigned __int8 *)(v36 + v33) ^ HIBYTE(v37))) + 22719;
        uint64_t v34 = (v34 + v38);
        ++v33;
      }
      while (v33 != 24);
      *(void *)(v29 + 152) = v34;
    }
  }
  return result;
}

uint64_t DD_Proc_GPS_AS_SV_Config_Subframe(const unsigned int *a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD **a7)
{
  v31[1] = *(int8x8_t *)MEMORY[0x263EF8340];
  Decode_GPS_AS_SV_Config_Subframe((uint64_t)a1, a3);
  Decode_GPS_Health_From_AS_Subfr(a1, v31);
  uint64_t v13 = (_WORD *)(a4 + 148);
  uint64_t v14 = 24;
  uint64_t v15 = 484;
  uint64_t v16 = 8072;
  uint64_t v17 = 2696;
  do
  {
    uint64_t result = (uint64_t)v31 + v14;
    if (*((unsigned char *)*a7 + v14))
    {
      if (v31[-3].i8[v14]) {
        goto LABEL_4;
      }
    }
    else if (v31[-3].i8[v14])
    {
      int v20 = a7[6];
      int v21 = *((unsigned __int8 *)v20 + v14);
      if (!*((unsigned char *)v20 + v14)
        || ((0xE4FE7F3uLL >> (((unint64_t)*(unsigned int *)((char *)a7 + v17 + 8) >> 2) & 0x1F)) & 1) != 0
        || *(_DWORD *)((char *)a7 + v17) + 3600 <= a2)
      {
        int v22 = a7[8];
        if (!*((unsigned char *)v22 + v14)) {
          goto LABEL_18;
        }
        int v23 = *(_DWORD *)((char *)a7 + v16);
        if (((0xE4FE7F3uLL >> (*(_DWORD *)((unsigned char *)a7 + v16 + 20) & 0x1F)) & 1) != 0 || v23 + 3600 <= a2)
        {
          uint64_t result = (v23 + 100);
          if ((int)result < a2)
          {
            *((unsigned char *)a7[3] + v14) = 0;
            *((unsigned char *)v22 + v14) = 0;
            *(unsigned char *)(a6 + v14) = -1;
            int v20 = a7[6];
            int v21 = *((unsigned __int8 *)v20 + v14);
          }
LABEL_18:
          if (v21 && *(_DWORD *)((char *)a7 + v17) + 100 < a2)
          {
            *((unsigned char *)a7[2] + v14) = 0;
            *((unsigned char *)v20 + v14) = 0;
            *((_DWORD *)v13 - 1) = 16777472;
            *uint64_t v13 = 256;
            *(_WORD *)(a5 + 2 * v14) = 256;
          }
LABEL_4:
          int v19 = 1;
          goto LABEL_14;
        }
      }
      *(unsigned char *)(result - 24) = 0;
    }
    int v19 = 2;
LABEL_14:
    *(_DWORD *)((char *)a7[1] + v15) = v19;
    ++v14;
    v15 += 20;
    v13 += 3;
    v16 += 44;
    v17 += 108;
  }
  while (v14 != 32);
  uint64_t v24 = 0;
  LODWORD(v25) = 0;
  *((int8x8_t *)*a7 + 3) = v31[0];
  uint64_t v26 = p_NV;
  long long v27 = (*a7)[1];
  *(_OWORD *)(p_NV + 92) = **a7;
  *(_OWORD *)(v26 + 108) = v27;
  uint64_t v28 = v26 + 88;
  __int16 v29 = -9871;
  do
  {
    int v30 = *(unsigned __int8 *)(v28 + v24) ^ HIBYTE(v29);
    __int16 v29 = -12691 * (v29 + (*(unsigned __int8 *)(v28 + v24) ^ HIBYTE(v29))) + 22719;
    uint64_t v25 = (v25 + v30);
    ++v24;
  }
  while (v24 != 40);
  *(void *)(v26 + 80) = v25;
  return result;
}

uint64_t DD_Save_New_GPS_Eph(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 7016;
  do
  {
    if (!*(unsigned char *)(a3 + v11)) {
      goto LABEL_22;
    }
    uint64_t v13 = (long long *)(a2 + v8);
    unint64_t v14 = *(unsigned int *)(a2 + v8);
    if (!DD_Check_New_GPS_Eph(v11, a2, (uint64_t)a5))
    {
      *(unsigned char *)(a3 + v11) = 0;
      double v13[4] = 0u;
      v13[5] = 0u;
      void v13[2] = 0u;
      v13[3] = 0u;
      *uint64_t v13 = 0u;
      v13[1] = 0u;
      goto LABEL_22;
    }
    unint64_t v15 = (0xE4FE7F3uLL >> ((v14 >> 2) & 0x1F)) & 1;
    uint64_t v16 = *a5;
    if (v15) {
      BOOL v17 = *(unsigned char *)(*a5 + v11) == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      uint64_t v18 = a5[8];
      if (!*(unsigned char *)(v18 + v11)) {
        goto LABEL_18;
      }
      int v19 = *(_DWORD *)((char *)a5 + v12);
      if (((0xE4FE7F3uLL >> (*(_DWORD *)((unsigned char *)a5 + v12 + 20) & 0x1F)) & 1) == 0 && v19 + 3600 > a1)
      {
        *(unsigned char *)(v16 + v11) = 0;
LABEL_15:
        int v20 = 2;
        goto LABEL_20;
      }
      if (v19 + 100 < a1)
      {
        *(unsigned char *)(a5[3] + v11) = 0;
        *(unsigned char *)(v18 + v11) = 0;
        *(unsigned char *)(a4 + v11) = -1;
        *(unsigned char *)(*a5 + v11) = 1;
      }
      else
      {
LABEL_18:
        *(unsigned char *)(v16 + v11) = v15;
      }
    }
    else
    {
      *(unsigned char *)(v16 + v11) = v15;
      if (!v15) {
        goto LABEL_15;
      }
    }
    int v20 = 1;
LABEL_20:
    uint64_t v21 = a5[2];
    *(_DWORD *)(a5[1] + v9) = v20;
    long long v22 = v13[2];
    long long v23 = v13[3];
    long long v24 = v13[4];
    long long v25 = v13[5];
    long long v26 = *v13;
    long long v27 = v13[1];
    *(_DWORD *)((char *)a5 + v10 + 104) = a1;
    uint64_t v28 = (uint64_t)a5 + v10 + 104;
    *(_OWORD *)(v28 + 24) = v27;
    *(_OWORD *)(v28 + 8) = v26;
    *(_OWORD *)(v28 + 88) = v25;
    *(_OWORD *)(v28 + 72) = v24;
    *(_OWORD *)(v28 + 56) = v23;
    *(_OWORD *)(v28 + 40) = v22;
    *(unsigned char *)(v21 + v11) = 1;
    *(unsigned char *)(a5[6] + v11) = 1;
    *(_DWORD *)(v28 + 104) = 0;
    *(unsigned char *)(a5[11] + v11) = 0;
    *(unsigned char *)(a3 + v11) = 0;
    if (a1 >= 1)
    {
      *(unsigned char *)(a5[9] + v11) = 1;
      Core_Save_GPS_Eph((v11 + 1), 0, (long long *)v28);
    }
LABEL_22:
    ++v11;
    v10 += 108;
    v9 += 20;
    v12 += 44;
    v8 += 96;
  }
  while (v11 != 32);
  return 1;
}

BOOL DD_Check_New_GPS_Eph(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(*(void *)(a3 + 48) + a1);
  uint64_t v4 = a3 + 108 * a1;
  long long v5 = *(_OWORD *)(v4 + 160);
  long long v16 = *(_OWORD *)(v4 + 144);
  long long v17 = v5;
  long long v6 = *(_OWORD *)(v4 + 192);
  long long v18 = *(_OWORD *)(v4 + 176);
  long long v19 = v6;
  long long v7 = *(_OWORD *)(v4 + 128);
  long long v14 = *(_OWORD *)(v4 + 112);
  long long v15 = v7;
  if (!v3) {
    return 1;
  }
  uint64_t v8 = a2 + 96 * a1;
  if (((*(_DWORD *)(v8 + 20) ^ DWORD1(v15)) & 0xFF0000) != 0) {
    return 1;
  }
  uint64_t v10 = 0;
  int v11 = *(_DWORD *)(v4 + 208);
  int32x4_t v12 = 0uLL;
  do
  {
    int32x4_t v12 = vsubq_s32(v12, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)&v14 + v10), *(int32x4_t *)(v8 + v10))));
    v10 += 16;
  }
  while (v10 != 96);
  if (vaddvq_s32(v12)) {
    BOOL v13 = v11 == 0xFFFFFF;
  }
  else {
    BOOL v13 = 0;
  }
  return !v13;
}

uint64_t DD_Submit_WeekNum(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(*(void *)(a3 + 48) + (char)(a1 - 1))) {
    BOOL v8 = DD_Check_New_GPS_Eph((a1 - 1), a4, a3);
  }
  else {
    BOOL v8 = 0;
  }
  if (!*(unsigned char *)(a5 + 5))
  {
    EvLog_v("Week Num initialised to %d from SV%d");
LABEL_16:
    *(_WORD *)(a5 + 16) = a2;
    uint64_t v11 = 1;
    *(unsigned char *)(a5 + 5) = 1;
    *(_DWORD *)(a5 + 48) = -1;
    *(_WORD *)(a5 + 52) = -1;
    *(_DWORD *)(a5 + 54) = 0;
    *(_WORD *)(a5 + 58) = 0;
    goto LABEL_29;
  }
  int v9 = *(unsigned __int16 *)(a5 + 16);
  char v10 = v9 == (unsigned __int16)a2 || v8;
  if (v10)
  {
    uint64_t v11 = 0;
    if (v9 != (unsigned __int16)a2 && v8)
    {
      uint64_t v12 = 0;
      while (*(unsigned __int16 *)(a5 + 2 * v12 + 48) != (unsigned __int16)a2)
      {
        if (++v12 == 3) {
          goto LABEL_19;
        }
      }
      if (v12 >= 3)
      {
LABEL_19:
        uint64_t v13 = 0;
        while (*(__int16 *)(a5 + 2 * v13 + 48) != -1)
        {
          if (++v13 == 3) {
            goto LABEL_27;
          }
        }
        if (v13 < 3)
        {
          uint64_t v11 = 0;
          uint64_t v14 = a5 + 2 * v13;
          *(_WORD *)(v14 + 48) = a2;
          *(_WORD *)(v14 + 54) = 1;
          goto LABEL_29;
        }
LABEL_27:
        *(_WORD *)(a5 + 52) = -1;
        *(_DWORD *)(a5 + 48) = -1;
        *(_DWORD *)(a5 + 54) = 0;
        *(_WORD *)(a5 + 58) = 0;
        EvLog_v("GPS DD_Submit_WeekNum: WeekNum Candidate overflow, %d >= %d", v13, 3);
        goto LABEL_28;
      }
      uint64_t v15 = a5 + 2 * v12;
      int v16 = (__int16)++*(_WORD *)(v15 + 54);
      if (v16 < 3) {
        goto LABEL_28;
      }
      EvLog_v("Week Num Candidate %d accepted based on %d observations");
      goto LABEL_16;
    }
  }
  else
  {
    EvCrt_v("DD_Submit_WeekNum:  Week Num Candidate %d found on SV%d which fails bit validation check", a2, a1);
LABEL_28:
    uint64_t v11 = 0;
  }
LABEL_29:
  EvLog_v("Week Num Submit %d %d SV %d", v11, a2, a1);
  return v11;
}

{
  BOOL v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (*(unsigned char *)(*(void *)(a3 + 8552) + (char)(a1 + 63))) {
    BOOL v8 = DD_Check_New_QZSS_Eph((a1 + 63), a4, a3);
  }
  else {
    BOOL v8 = 0;
  }
  if (!*(unsigned char *)(a5 + 5))
  {
    EvLog_v("Week Num initialised to %d from SV%d");
LABEL_16:
    *(_WORD *)(a5 + 16) = a2;
    uint64_t v11 = 1;
    *(unsigned char *)(a5 + 5) = 1;
    *(_DWORD *)(a5 + 48) = -1;
    *(_WORD *)(a5 + 52) = -1;
    *(_DWORD *)(a5 + 54) = 0;
    *(_WORD *)(a5 + 58) = 0;
    goto LABEL_29;
  }
  int v9 = *(unsigned __int16 *)(a5 + 16);
  char v10 = v9 == (unsigned __int16)a2 || v8;
  if (v10)
  {
    uint64_t v11 = 0;
    if (v9 != (unsigned __int16)a2 && v8)
    {
      uint64_t v12 = 0;
      while (*(unsigned __int16 *)(a5 + 2 * v12 + 48) != (unsigned __int16)a2)
      {
        if (++v12 == 3) {
          goto LABEL_19;
        }
      }
      if (v12 >= 3)
      {
LABEL_19:
        uint64_t v13 = 0;
        while (*(__int16 *)(a5 + 2 * v13 + 48) != -1)
        {
          if (++v13 == 3) {
            goto LABEL_27;
          }
        }
        if (v13 < 3)
        {
          uint64_t v11 = 0;
          uint64_t v14 = a5 + 2 * v13;
          *(_WORD *)(v14 + 48) = a2;
          *(_WORD *)(v14 + 54) = 1;
          goto LABEL_29;
        }
LABEL_27:
        *(_WORD *)(a5 + 52) = -1;
        *(_DWORD *)(a5 + 48) = -1;
        *(_DWORD *)(a5 + 54) = 0;
        *(_WORD *)(a5 + 58) = 0;
        EvLog_v("QZSS DD_Submit_WeekNum: WeekNum Candidate overflow, %d >= %d", v13, 3);
        goto LABEL_28;
      }
      uint64_t v15 = a5 + 2 * v12;
      int v16 = (__int16)++*(_WORD *)(v15 + 54);
      if (v16 < 3) {
        goto LABEL_28;
      }
      EvLog_v("Week Num Candidate %d accepted based on %d observations");
      goto LABEL_16;
    }
  }
  else
  {
    EvCrt_v("DD_Submit_WeekNum:  Week Num Candidate %d found on SV%d which fails bit validation check", a2, a1);
LABEL_28:
    uint64_t v11 = 0;
  }
LABEL_29:
  EvLog_v("Week Num Submit %d %d SV %d", v11, a2, a1);
  return v11;
}

void Comp_Track8(long double *a1)
{
  if (fabs(*a1) > 0.0005 || fabs(a1[1]) > 0.0005) {
    atan2(a1[1], *a1);
  }
}

uint64_t ds_Config(char **a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v144 = *MEMORY[0x263EF8340];
  BOOL v8 = *a1;
  char v9 = 83;
  uint64_t v10 = 1u;
  do
  {
    *a1 = v8 + 1;
    *BOOL v8 = v9;
    BOOL v8 = *a1;
    if (*a1 >= a1[3])
    {
      BOOL v8 = a1[2];
      *a1 = v8;
    }
    char v9 = aSoftwareConfig[v10++];
  }
  while (v10 != 32);
  *a1 = v8 + 1;
  *BOOL v8 = 10;
  uint64_t v11 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v11 = a1[2];
  }
  char v12 = 83;
  uint64_t v13 = 1u;
  do
  {
    *a1 = v11 + 1;
    *uint64_t v11 = v12;
    uint64_t v11 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v11 = a1[2];
      *a1 = v11;
    }
    char v12 = aSystemStatus[v13++];
  }
  while (v13 != 16);
  char v14 = 32;
  uint64_t v15 = 1u;
  do
  {
    *a1 = v11 + 1;
    *uint64_t v11 = v14;
    uint64_t v11 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v11 = a1[2];
      *a1 = v11;
    }
    char v14 = aFixInt[v15++];
  }
  while (v15 != 10);
  sprintf_4f((uint64_t)a1, *(_DWORD *)(a2 + 948), 4);
  uint64_t v16 = 0;
  long long v17 = *a1;
  char v18 = 32;
  do
  {
    *a1 = v17 + 1;
    *long long v17 = v18;
    long long v17 = *a1;
    if (*a1 >= a1[3])
    {
      long long v17 = a1[2];
      *a1 = v17;
    }
    char v18 = aRunTimeout[++v16];
  }
  while (v16 != 16);
  sprintf_4f((uint64_t)a1, *(_DWORD *)(a2 + 956), 4);
  uint64_t v19 = 0;
  uint64_t v20 = *a1;
  char v21 = 32;
  do
  {
    *a1 = v20 + 1;
    char *v20 = v21;
    uint64_t v20 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v20 = a1[2];
      *a1 = v20;
    }
    char v21 = aBirthGpsWn[++v19];
  }
  while (v19 != 16);
  sprintf_5d(a1, *(__int16 *)(a2 + 1028));
  long long v22 = *a1;
  char v23 = 32;
  uint64_t v24 = 1u;
  do
  {
    *a1 = v22 + 1;
    *long long v22 = v23;
    long long v22 = *a1;
    if (*a1 >= a1[3])
    {
      long long v22 = a1[2];
      *a1 = v22;
    }
    char v23 = aAccMasks[v24++];
  }
  while (v24 != 14);
  sprintf_ACC(a1, *(double *)(a2 + 960));
  sprintf_ACC(a1, *(double *)(a2 + 976));
  sprintf_ACC(a1, *(double *)(a2 + 968));
  sprintf_ACC(a1, *(double *)(a2 + 984));
  long long v25 = (*a1)++;
  *long long v25 = 10;
  long long v26 = *a1;
  if (*a1 >= a1[3]) {
    long long v26 = a1[2];
  }
  char v27 = 32;
  uint64_t v28 = 1u;
  do
  {
    *a1 = v26 + 1;
    char *v26 = v27;
    long long v26 = *a1;
    if (*a1 >= a1[3])
    {
      long long v26 = a1[2];
      *a1 = v26;
    }
    char v27 = aNomclkdriftNsS[v28++];
  }
  while (v28 != 36);
  double v29 = *(double *)(a2 + 992) * 1000000000.0;
  double v30 = -0.5;
  if (v29 > 0.0) {
    double v30 = 0.5;
  }
  double v31 = v29 + v30;
  if (v31 <= 2147483650.0)
  {
    if (v31 >= -2147483650.0) {
      unsigned int v32 = (int)v31;
    }
    else {
      unsigned int v32 = 0x80000000;
    }
  }
  else
  {
    unsigned int v32 = 0x7FFFFFFF;
  }
  sprintf_6d(a1, v32);
  uint64_t v33 = *a1;
  char v34 = 32;
  uint64_t v35 = 1u;
  do
  {
    *a1 = v33 + 1;
    *uint64_t v33 = v34;
    uint64_t v33 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v33 = a1[2];
      *a1 = v33;
    }
    char v34 = aNomclkdriftdev[v35++];
  }
  while (v35 != 25);
  double v36 = *(double *)(a2 + 1000) * 1000000000.0;
  double v37 = -0.5;
  if (v36 > 0.0) {
    double v37 = 0.5;
  }
  double v38 = v36 + v37;
  if (v38 <= 2147483650.0)
  {
    if (v38 >= -2147483650.0) {
      unsigned int v39 = (int)v38;
    }
    else {
      unsigned int v39 = 0x80000000;
    }
  }
  else
  {
    unsigned int v39 = 0x7FFFFFFF;
  }
  sprintf_6d(a1, v39);
  int v40 = *a1;
  char v41 = 32;
  uint64_t v42 = 1u;
  do
  {
    *a1 = v40 + 1;
    *int v40 = v41;
    int v40 = *a1;
    if (*a1 >= a1[3])
    {
      int v40 = a1[2];
      *a1 = v40;
    }
    char v41 = aDynamics[v42++];
  }
  while (v42 != 13);
  sprintf_2d(a1, *(_DWORD *)(a2 + 52));
  int v43 = *a1;
  char v44 = 32;
  uint64_t v45 = 1u;
  do
  {
    *a1 = v43 + 1;
    *int v43 = v44;
    int v43 = *a1;
    if (*a1 >= a1[3])
    {
      int v43 = a1[2];
      *a1 = v43;
    }
    char v44 = aMpathEnv[v45++];
  }
  while (v45 != 14);
  sprintf_2d(a1, *(unsigned __int8 *)(a2 + 65));
  uint64_t v46 = (*a1)++;
  *uint64_t v46 = 10;
  uint64_t v47 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v47 = a1[2];
  }
  char v48 = 80;
  uint64_t v49 = 1u;
  do
  {
    *a1 = v47 + 1;
    char *v47 = v48;
    uint64_t v47 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v47 = a1[2];
      *a1 = v47;
    }
    char v48 = aProcessNoiseBo[v49++];
  }
  while (v49 != 27);
  sprintf_sgR8(a1, a4[4]);
  uint64_t v50 = *a1;
  char v51 = 32;
  uint64_t v52 = 1u;
  do
  {
    *a1 = v50 + 1;
    *uint64_t v50 = v51;
    uint64_t v50 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v50 = a1[2];
      *a1 = v50;
    }
    char v51 = aClkGSens[v52++];
  }
  while (v52 != 14);
  sprintf_sgR8(a1, a4[5]);
  uint64_t v53 = *a1;
  char v54 = 32;
  uint64_t v55 = 1u;
  do
  {
    *a1 = v53 + 1;
    char *v53 = v54;
    uint64_t v53 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v53 = a1[2];
      *a1 = v53;
    }
    char v54 = aClkPhase[v55++];
  }
  while (v55 != 14);
  sprintf_sgR8(a1, a4[7]);
  uint64_t v56 = *a1;
  char v57 = 32;
  uint64_t v58 = 1u;
  do
  {
    *a1 = v56 + 1;
    *uint64_t v56 = v57;
    uint64_t v56 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v56 = a1[2];
      *a1 = v56;
    }
    char v57 = aClkFreq[v58++];
  }
  while (v58 != 14);
  sprintf_sgR8(a1, a4[8]);
  int v59 = (*a1)++;
  *int v59 = 10;
  uint64_t v60 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v60 = a1[2];
  }
  char v61 = 32;
  uint64_t v62 = 1u;
  do
  {
    *a1 = v60 + 1;
    *uint64_t v60 = v61;
    uint64_t v60 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v60 = a1[2];
      *a1 = v60;
    }
    char v61 = aHorzPos[v62++];
  }
  while (v62 != 27);
  sprintf_sgR8(a1, a4[9]);
  unsigned int v63 = *a1;
  char v64 = 32;
  uint64_t v65 = 1u;
  do
  {
    *a1 = v63 + 1;
    *unsigned int v63 = v64;
    unsigned int v63 = *a1;
    if (*a1 >= a1[3])
    {
      unsigned int v63 = a1[2];
      *a1 = v63;
    }
    char v64 = aVertPos[v65++];
  }
  while (v65 != 14);
  sprintf_sgR8(a1, a4[10]);
  unsigned __int16 v66 = *a1;
  char v67 = 32;
  uint64_t v68 = 1u;
  do
  {
    *a1 = v66 + 1;
    *unsigned __int16 v66 = v67;
    unsigned __int16 v66 = *a1;
    if (*a1 >= a1[3])
    {
      unsigned __int16 v66 = a1[2];
      *a1 = v66;
    }
    char v67 = aHorzAcc[v68++];
  }
  while (v68 != 14);
  sprintf_sgR8(a1, a4[13]);
  uint64_t v69 = *a1;
  char v70 = 32;
  uint64_t v71 = 1u;
  do
  {
    *a1 = v69 + 1;
    *uint64_t v69 = v70;
    uint64_t v69 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v69 = a1[2];
      *a1 = v69;
    }
    char v70 = aVertAcc[v71++];
  }
  while (v71 != 14);
  sprintf_sgR8(a1, a4[14]);
  uint64_t v72 = (*a1)++;
  *uint64_t v72 = 10;
  uint64_t v73 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v73 = a1[2];
  }
  char v74 = 82;
  uint64_t v75 = 1u;
  do
  {
    *a1 = v73 + 1;
    *uint64_t v73 = v74;
    uint64_t v73 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v73 = a1[2];
      *a1 = v73;
    }
    char v74 = aReferencePosit[v75++];
  }
  while (v75 != 24);
  uint64_t v141 = a2;
  uint64_t v142 = a3;
  uint64_t v76 = 0;
  char v77 = 1;
  while (1)
  {
    int v78 = &a4[v76];
    double v79 = v78[3379] * 57.2957795;
    double v80 = -v79;
    if (v79 >= 0.0) {
      double v80 = v78[3379] * 57.2957795;
    }
    unsigned int v81 = (int)v80;
    double v82 = (v80 - (double)(int)v80) * 60.0;
    unsigned int v83 = (int)v82;
    double v84 = (v82 - (double)(int)v82) * 60.0;
    sprintf_3d(a1, v81);
    sprintf_3d(a1, v83);
    double v85 = v84 * 100000.0 <= 0.0 ? -0.5 : 0.5;
    double v86 = v84 * 100000.0 + v85;
    if (v86 <= 2147483650.0) {
      unsigned int v87 = v86 >= -2147483650.0 ? (int)v86 : 0x80000000;
    }
    else {
      unsigned int v87 = 0x7FFFFFFF;
    }
    sprintf_8f((uint64_t)a1, v87, 6);
    double v88 = v78[3379];
    if ((v77 & 1) == 0) {
      break;
    }
    char v77 = 0;
    if (v88 >= 0.0) {
      int v89 = " N ";
    }
    else {
      int v89 = " S ";
    }
    char v90 = *v89;
    uint64_t v76 = 1;
    if (*v89)
    {
      uint64_t v91 = *a1;
      uint64_t v92 = (unsigned __int8 *)(v89 + 1);
      do
      {
        *a1 = v91 + 1;
        *uint64_t v91 = v90;
        uint64_t v91 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v91 = a1[2];
          *a1 = v91;
        }
        int v93 = *v92++;
        char v90 = v93;
      }
      while (v93);
      char v77 = 0;
      uint64_t v76 = 1;
    }
  }
  uint64_t v94 = " E ";
  if (v88 < 0.0) {
    uint64_t v94 = " W ";
  }
  char v95 = *v94;
  if (*v94)
  {
    unsigned int v96 = *a1;
    int v97 = (unsigned __int8 *)(v94 + 1);
    do
    {
      *a1 = v96 + 1;
      *unsigned int v96 = v95;
      unsigned int v96 = *a1;
      if (*a1 >= a1[3])
      {
        unsigned int v96 = a1[2];
        *a1 = v96;
      }
      int v98 = *v97++;
      char v95 = v98;
    }
    while (v98);
  }
  sprintf_sgR8(a1, a4[3381]);
  char v99 = (*a1)++;
  *char v99 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)a1);
  int v100 = *a1;
  char v101 = 71;
  uint64_t v102 = 1u;
  do
  {
    *a1 = v100 + 1;
    *int v100 = v101;
    int v100 = *a1;
    if (*a1 >= a1[3])
    {
      int v100 = a1[2];
      *a1 = v100;
    }
    char v101 = aGlonassL1ofInt[v102++];
  }
  while (v102 != 35);
  uint64_t v103 = 9 * *(unsigned __int8 *)(v141 + 1022);
  char v104 = ICB_Model_Name[v103];
  if (v104)
  {
    double v105 = &ICB_Model_Name[v103 + 1];
    do
    {
      *a1 = v100 + 1;
      *int v100 = v104;
      int v100 = *a1;
      if (*a1 >= a1[3])
      {
        int v100 = a1[2];
        *a1 = v100;
      }
      int v106 = *v105++;
      char v104 = v106;
    }
    while (v106);
  }
  char v107 = 32;
  uint64_t v108 = 1u;
  do
  {
    *a1 = v100 + 1;
    *int v100 = v107;
    int v100 = *a1;
    if (*a1 >= a1[3])
    {
      int v100 = a1[2];
      *a1 = v100;
    }
    char v107 = asc_22BAF44D6[v108++];
  }
  while (v108 != 4);
  strcpy(v143, "-7");
  LOBYTE(v109) = 45;
  uint64_t v110 = 1;
  do
  {
    *a1 = v100 + 1;
    *int v100 = v109;
    int v100 = *a1;
    if (*a1 >= a1[3])
    {
      int v100 = a1[2];
      *a1 = v100;
    }
    int v109 = v143[v110++];
  }
  while (v109);
  char v111 = 46;
  uint64_t v112 = 1u;
  do
  {
    *a1 = v100 + 1;
    *int v100 = v111;
    int v100 = *a1;
    if (*a1 >= a1[3])
    {
      int v100 = a1[2];
      *a1 = v100;
    }
    char v111 = asc_22BAF44DA[v112++];
  }
  while (v112 != 4);
  v143[1] = 0;
  LOBYTE(v113) = 54;
  uint64_t v114 = 1;
  do
  {
    *a1 = v100 + 1;
    *int v100 = v113;
    int v100 = *a1;
    if (*a1 >= a1[3])
    {
      int v100 = a1[2];
      *a1 = v100;
    }
    int v113 = v143[v114++];
  }
  while (v113);
  *a1 = v100 + 1;
  *int v100 = 93;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  for (uint64_t i = 0; i != 112; i += 8)
  {
    double v116 = *(double *)(v141 + 1152 + i) * 100.0;
    if (v116 <= 2147483650.0)
    {
      if (v116 >= -2147483650.0) {
        unsigned int v117 = (int)v116;
      }
      else {
        unsigned int v117 = 0x80000000;
      }
    }
    else
    {
      unsigned int v117 = 0x7FFFFFFF;
    }
    sprintf_9f((uint64_t)a1, v117, 3);
  }
  uint64_t v118 = (*a1)++;
  *uint64_t v118 = 10;
  uint64_t v119 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v119 = a1[2];
  }
  char v120 = 66;
  uint64_t v121 = 1u;
  do
  {
    *a1 = v119 + 1;
    char *v119 = v120;
    uint64_t v119 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v119 = a1[2];
      *a1 = v119;
    }
    char v120 = aBeidouB1InterC[v121++];
  }
  while (v121 != 32);
  uint64_t v122 = 9 * *(unsigned __int8 *)(v141 + 1022);
  char v123 = ICB_Model_Name[v122];
  if (v123)
  {
    uint64_t v124 = &ICB_Model_Name[v122 + 1];
    do
    {
      *a1 = v119 + 1;
      char *v119 = v123;
      uint64_t v119 = *a1;
      if (*a1 >= a1[3])
      {
        uint64_t v119 = a1[2];
        *a1 = v119;
      }
      int v125 = *v124++;
      char v123 = v125;
    }
    while (v125);
  }
  double v126 = *(double *)(v141 + 1264) * 100.0;
  if (v126 <= 2147483650.0)
  {
    if (v126 >= -2147483650.0) {
      unsigned int v127 = (int)v126;
    }
    else {
      unsigned int v127 = 0x80000000;
    }
  }
  else
  {
    unsigned int v127 = 0x7FFFFFFF;
  }
  sprintf_9f((uint64_t)a1, v127, 3);
  uint64_t v128 = (*a1)++;
  *uint64_t v128 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)a1);
  BOOL v129 = *a1;
  char v130 = 73;
  uint64_t v131 = 1u;
  do
  {
    *a1 = v129 + 1;
    *BOOL v129 = v130;
    BOOL v129 = *a1;
    if (*a1 >= a1[3])
    {
      BOOL v129 = a1[2];
      *a1 = v129;
    }
    char v130 = aInitialData[v131++];
  }
  while (v131 != 16);
  for (unsigned int j = 3; j > 1; --j)
  {
    *a1 = v129 + 1;
    *BOOL v129 = 32;
    BOOL v129 = *a1;
    if (*a1 >= a1[3])
    {
      BOOL v129 = a1[2];
      *a1 = v129;
    }
  }
  sprintf_6d(a1, *(_DWORD *)(v141 + 1288));
  sprintf_sgR8(a1, *(double *)(v141 + 1304));
  sprintf_sgR8(a1, *(double *)(v141 + 1296));
  uint64_t v133 = *a1;
  for (unsigned int k = 3; k > 1; --k)
  {
    *a1 = v133 + 1;
    *uint64_t v133 = 32;
    uint64_t v133 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v133 = a1[2];
      *a1 = v133;
    }
  }
  unsigned __int8 v135 = &g_TOW_Stat_As_String[10 * *(unsigned int *)(v142 + 88) + 1];
  char v136 = 32;
  do
  {
    *a1 = v133 + 1;
    *uint64_t v133 = v136;
    uint64_t v133 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v133 = a1[2];
      *a1 = v133;
    }
    int v137 = *v135++;
    char v136 = v137;
  }
  while (v137);
  sprintf_10u(a1, *(_DWORD *)(v142 + 100));
  sprintf_6d(a1, *(__int16 *)(v142 + 92));
  sprintf_10d(a1, *(_DWORD *)(v142 + 96));
  int v138 = (*a1)++;
  *int v138 = 10;
  long long v139 = *a1;
  if (*a1 >= a1[3]) {
    long long v139 = a1[2];
  }
  *a1 = v139 + 1;
  *long long v139 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }

  return GNSS_Nav_Debug_Flush_Check((uint64_t)a1);
}

uint64_t asn1PD_SupportedWcdmaInfo(uint64_t a1, unsigned char *a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_5:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_5;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v8 = Asn1Coder::SkipSequenceExtension(a1);
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }
  return v5;
}

uint64_t asn1PD_SupportedWLANApsChannel11a(uint64_t a1, unsigned char *a2)
{
  *a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
LABEL_33:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  a2[1] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[2] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[3] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[4] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[5] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[6] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[7] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[8] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[9] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[10] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[11] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[12] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[13] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[14] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  a2[15] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_33;
  }
  return v4;
}

uint64_t asn1PD_SupportedWLANApsChannel11bg(uint64_t a1, unsigned char *a2)
{
  *a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
LABEL_29:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  a2[1] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[2] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[3] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[4] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[5] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[6] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[7] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[8] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[9] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[10] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[11] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[12] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  a2[13] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_29;
  }
  return v4;
}

uint64_t asn1PD_SupportedWLANApsList(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
  unsigned __int8 v37 = 0;
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    unsigned int v8 = v5;
LABEL_7:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *(unsigned char *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    unsigned int v8 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_7;
  }
  *(unsigned char *)(a2 + 1) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  LOBYTE(v5) = *(unsigned char *)(a1 + 16);
  if ((_BYTE)v5)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    unsigned int v8 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_7;
  }
  unsigned int v5 = Asn1Coder::DecodeInteger(a1, 1, 0x80u, &v37);
  double v36 = (int64x2_t *)(a2 + 8);
  std::vector<ASN1T_SupportedWLANApData>::__clear[abi:ne180100]((uint64_t *)(a2 + 8));
  if (!v5 && v37)
  {
    uint64_t v11 = 0;
    while (1)
    {
      int v42 = 0;
      char v44 = 0;
      uint64_t v45 = 0;
      std::string __p = 0;
      char v46 = -1;
      int v12 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
      unsigned int v13 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16)
        || (int v14 = v12,
            int v42 = 48,
            Asn1Coder::GetBitStringFromBuffer(a1, 0x30u, (unint64_t *)&__p, 0),
            unsigned int v13 = *(unsigned __int8 *)(a1 + 16),
            *(unsigned char *)(a1 + 16)))
      {
        SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        goto LABEL_28;
      }
      LOBYTE(v38) = 0;
      int v15 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
      unsigned int v13 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16)) {
        break;
      }
      if (v15) {
        unsigned int v16 = Asn1Coder::DecodeEnumerationExtension(a1, &v38);
      }
      else {
        unsigned int v16 = Asn1Coder::DecodeInteger(a1, 0, 2u, &v38);
      }
      unsigned int v13 = v16;
      if (v16)
      {
        SuplAsn1Logger::TraceError(v16, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        goto LABEL_27;
      }
      if (v38 >= 3u)
      {
        unsigned int v13 = 4;
        *(unsigned char *)(a1 + 16) = 4;
        SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        goto LABEL_27;
      }
      char v46 = (char)v38;
      if (v14)
      {
        unsigned int v17 = Asn1Coder::SkipSequenceExtension(a1);
        unsigned int v13 = v17;
        if (v17) {
          SuplAsn1Logger::TraceError(v17, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        }
      }
      else
      {
        unsigned int v13 = 0;
      }
LABEL_28:
      unint64_t v19 = *(void *)(a2 + 16);
      unint64_t v18 = *(void *)(a2 + 24);
      if (v19 >= v18)
      {
        unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v36->i64[0]) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0x666666666666666) {
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v36->i64[0]) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x333333333333333) {
          unint64_t v24 = 0x666666666666666;
        }
        else {
          unint64_t v24 = v22;
        }
        uint64_t v41 = a2 + 24;
        if (v24)
        {
          if (v24 > 0x666666666666666) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v25 = operator new(40 * v24);
        }
        else
        {
          long long v25 = 0;
        }
        long long v26 = &v25[40 * v21];
        double v38 = v25;
        v39.i64[0] = (uint64_t)v26;
        v39.i64[1] = (uint64_t)v26;
        int v40 = &v25[40 * v24];
        *(_DWORD *)long long v26 = v42;
        *((void *)v26 + 2) = 0;
        *((void *)v26 + 3) = 0;
        *((void *)v26 + 1) = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v26 + 1, __p, (uint64_t)v44, v44 - (unsigned char *)__p);
        v25[40 * v21 + 32] = v46;
        uint64_t v27 = v39.i64[0];
        uint64_t v20 = v39.i64[1] + 40;
        v39.i64[1] += 40;
        uint64_t v29 = *(void *)(a2 + 8);
        unint64_t v28 = *(void *)(a2 + 16);
        if (v28 == v29)
        {
          int64x2_t v33 = vdupq_n_s64(v28);
        }
        else
        {
          uint64_t v30 = 0;
          do
          {
            uint64_t v31 = v27 + v30;
            uint64_t v32 = v28 + v30;
            *(_DWORD *)(v31 - 40) = *(_DWORD *)(v28 + v30 - 40);
            *(void *)(v31 - 24) = 0;
            *(void *)(v31 - 16) = 0;
            *(void *)(v31 - 32) = 0;
            *(_OWORD *)(v31 - 32) = *(_OWORD *)(v28 + v30 - 32);
            *(void *)(v31 - 16) = *(void *)(v28 + v30 - 16);
            *(void *)(v32 - 32) = 0;
            *(void *)(v32 - 24) = 0;
            *(void *)(v32 - 16) = 0;
            *(unsigned char *)(v31 - 8) = *(unsigned char *)(v28 + v30 - 8);
            v30 -= 40;
          }
          while (v28 + v30 != v29);
          int64x2_t v33 = *v36;
          uint64_t v20 = v39.i64[1];
          v27 += v30;
        }
        *(void *)(a2 + 8) = v27;
        *(void *)(a2 + 16) = v20;
        int64x2_t v39 = v33;
        char v34 = *(char **)(a2 + 24);
        *(void *)(a2 + 24) = v40;
        int v40 = v34;
        double v38 = (unsigned char *)v33.i64[0];
        std::__split_buffer<ASN1T_SupportedWLANApData>::~__split_buffer((uint64_t)&v38);
      }
      else
      {
        *(_DWORD *)unint64_t v19 = v42;
        *(void *)(v19 + 16) = 0;
        *(void *)(v19 + 24) = 0;
        *(void *)(v19 + 8) = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v19 + 8), __p, (uint64_t)v44, v44 - (unsigned char *)__p);
        *(unsigned char *)(v19 + 32) = v46;
        uint64_t v20 = v19 + 40;
        *(void *)(a2 + 16) = v20;
      }
      *(void *)(a2 + 16) = v20;
      if (v13)
      {
        SuplAsn1Logger::TraceError(v13, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        LOBYTE(v5) = v13;
      }
      if (__p)
      {
        char v44 = __p;
        operator delete(__p);
      }
      if (v13) {
        return v5;
      }
      if (++v11 >= (unint64_t)v37) {
        goto LABEL_56;
      }
    }
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
LABEL_27:
    SuplAsn1Logger::TraceError(v13, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    goto LABEL_28;
  }
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    unsigned int v8 = v5;
    goto LABEL_7;
  }
LABEL_56:
  if (*(unsigned char *)a2)
  {
    unsigned int v35 = asn1PD_SupportedWLANApsChannel11a(a1, (unsigned char *)(a2 + 32));
    LOBYTE(v5) = v35;
    if (v35) {
      goto LABEL_63;
    }
  }
  if (*(unsigned char *)(a2 + 1))
  {
    unsigned int v35 = asn1PD_SupportedWLANApsChannel11bg(a1, (unsigned char *)(a2 + 48));
    LOBYTE(v5) = v35;
    if (v35) {
      goto LABEL_63;
    }
  }
  if (!v9)
  {
    LOBYTE(v5) = 0;
    return v5;
  }
  unsigned int v35 = Asn1Coder::SkipSequenceExtension(a1);
  LOBYTE(v5) = v35;
  if (v35) {
LABEL_63:
  }
    SuplAsn1Logger::TraceError(v35, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v5;
}

void sub_22B9DF150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
}

uint64_t asn1PD_SupportedWLANInfo(uint64_t a1, unsigned char *a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_27:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[1] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[2] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[3] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[4] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[5] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[6] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[7] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[8] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[9] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[10] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  a2[11] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_27;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v8 = Asn1Coder::SkipSequenceExtension(a1);
  uint64_t v5 = v8;
  if (!v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_27;
  }
  return v5;
}

uint64_t asn1PD_SupportedNetworkInformation(uint64_t a1, unsigned char *a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_11:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[1] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[2] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[3] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  if (*a2)
  {
    uint64_t v8 = asn1PD_SupportedWLANInfo(a1, a2 + 4);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_11;
    }
  }
  if (a2[1])
  {
    uint64_t v8 = asn1PD_SupportedWLANApsList(a1, (uint64_t)(a2 + 16));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_11;
    }
  }
  a2[80] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[81] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  if (a2[2])
  {
    uint64_t v8 = asn1PD_SupportedWcdmaInfo(a1, a2 + 82);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_11;
    }
  }
  a2[83] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[84] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[85] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[86] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[87] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[88] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[89] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[90] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  a2[91] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  if (v9) {
    Asn1Coder::SkipSequenceExtension(a1);
  }
  return 0;
}

uint64_t asn1PD_GNSSPosTechnology(uint64_t a1, unsigned char *a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  a2[1] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  a2[2] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  a2[3] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  a2[4] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
LABEL_14:
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = v5;
    goto LABEL_15;
  }
  a2[5] = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_14;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v8 = Asn1Coder::SkipSequenceExtension(a1);
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  return v5;
}

uint64_t asn1PE_MCC_MNC_Digit(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 9, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_CellGlobalIdEUTRA(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
LABEL_25:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v8 = *(_DWORD *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 12);
    unsigned int v10 = *(unsigned __int8 *)(a1 + 16);
LABEL_24:
    SuplAsn1Logger::TraceError(v10, v8, v9);
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = v4;
    goto LABEL_25;
  }
  if (*a2)
  {
    uint64_t v11 = *((void *)a2 + 1);
    uint64_t v12 = *((void *)a2 + 2);
    if (v12 - v11 != 3)
    {
      *(unsigned char *)(a1 + 16) = 4;
      SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
      uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v13 = *(_DWORD *)(a1 + 8);
        int v14 = *(_DWORD *)(a1 + 12);
        LODWORD(v15) = *(unsigned __int8 *)(a1 + 16);
LABEL_23:
        SuplAsn1Logger::TraceError(v15, v13, v14);
        int v8 = *(_DWORD *)(a1 + 8);
        int v9 = *(_DWORD *)(a1 + 12);
        unsigned int v10 = v4;
        goto LABEL_24;
      }
      uint64_t v11 = *((void *)a2 + 1);
      uint64_t v12 = *((void *)a2 + 2);
    }
    if (v12 != v11)
    {
      unint64_t v16 = 0;
      while (1)
      {
        uint64_t v15 = asn1PE_MCC_MNC_Digit(a1, *(unsigned char *)(v11 + v16));
        if (v15) {
          break;
        }
        ++v16;
        uint64_t v11 = *((void *)a2 + 1);
        if (v16 >= *((void *)a2 + 2) - v11) {
          goto LABEL_14;
        }
      }
      uint64_t v4 = v15;
      int v13 = *(_DWORD *)(a1 + 8);
      int v14 = *(_DWORD *)(a1 + 12);
      goto LABEL_23;
    }
  }
LABEL_14:
  uint64_t v15 = Asn1Coder::EncodeInteger(a1, 2, 3, *((_DWORD *)a2 + 10) - *((_DWORD *)a2 + 8));
  if (v15)
  {
    uint64_t v4 = v15;
    int v13 = *(_DWORD *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 12);
    goto LABEL_23;
  }
  uint64_t v17 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v17)
  {
    unint64_t v18 = 0;
    while (1)
    {
      uint64_t v15 = asn1PE_MCC_MNC_Digit(a1, *(unsigned char *)(v17 + v18));
      if (v15) {
        break;
      }
      ++v18;
      uint64_t v17 = *((void *)a2 + 4);
      if (v18 >= *((void *)a2 + 5) - v17) {
        goto LABEL_20;
      }
    }
    uint64_t v4 = v15;
    int v13 = *(_DWORD *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 12);
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v19 = Asn1Coder::EncodeBitString(a1, 0, 0, 0x1Cu, (void *)a2 + 7, 1);
  uint64_t v4 = v19;
  if (v19)
  {
    SuplAsn1Logger::TraceError(v19, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = v4;
    goto LABEL_25;
  }
  return v4;
}

uint64_t asn1PE_TrackingAreaCode(uint64_t a1, void *a2)
{
  uint64_t v3 = Asn1Coder::EncodeBitString(a1, 0, 0, 0x10u, a2, 1);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_PhysCellId(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 503, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_RSRP_Range(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 97, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_RSRQ_Range(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 34, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_MeasResultListEUTRA(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 1, 8, -286331153 * ((unint64_t)(a2[1] - *a2) >> 3));
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_31;
  }
  uint64_t v8 = *a2;
  if (a2[1] == *a2) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  while (1)
  {
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v8 + v9));
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v18 = *(_DWORD *)(a1 + 8);
      int v19 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_30;
    }
    uint64_t v11 = asn1PE_PhysCellId(a1, *(_WORD *)(v8 + v9 + 2));
    if (v11)
    {
      uint64_t v5 = v11;
      int v18 = *(_DWORD *)(a1 + 8);
      int v19 = *(_DWORD *)(a1 + 12);
      goto LABEL_30;
    }
    if (*(unsigned char *)(v8 + v9))
    {
      uint64_t v12 = asn1PE_CellGlobalIdEUTRA(a1, (unsigned __int8 *)(v8 + v9 + 8));
      if (v12)
      {
        uint64_t v5 = v12;
        int v22 = *(_DWORD *)(a1 + 8);
        int v23 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        uint64_t v12 = asn1PE_TrackingAreaCode(a1, (void *)(v8 + v9 + 88));
        if (!v12) {
          goto LABEL_10;
        }
        uint64_t v5 = v12;
        int v22 = *(_DWORD *)(a1 + 8);
        int v23 = *(_DWORD *)(a1 + 12);
      }
      SuplAsn1Logger::TraceError(v12, v22, v23);
      int v18 = *(_DWORD *)(a1 + 8);
      int v19 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = v5;
      goto LABEL_30;
    }
LABEL_10:
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v20 = *(_DWORD *)(a1 + 8);
      int v21 = *(_DWORD *)(a1 + 12);
      LODWORD(v15) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_28;
    }
    uint64_t v13 = v8 + v9;
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v13 + 114) < 0x62u);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v20 = *(_DWORD *)(a1 + 8);
      int v21 = *(_DWORD *)(a1 + 12);
      LODWORD(v15) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_28;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v13 + 115) < 0x23u);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v20 = *(_DWORD *)(a1 + 8);
      int v21 = *(_DWORD *)(a1 + 12);
      LODWORD(v15) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_28;
    }
    unsigned int v14 = *(unsigned __int8 *)(v13 + 114);
    if (v14 <= 0x61)
    {
      uint64_t v15 = asn1PE_RSRP_Range(a1, v14);
      if (v15) {
        break;
      }
    }
    unsigned int v16 = *(unsigned __int8 *)(v13 + 115);
    if (v16 < 0x23)
    {
      uint64_t v17 = asn1PE_RSRQ_Range(a1, v16);
      if (v17)
      {
        uint64_t v5 = v17;
        goto LABEL_29;
      }
    }
    ++v10;
    uint64_t v8 = *a2;
    v9 += 120;
    if (v10 >= 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3)) {
      return 0;
    }
  }
  uint64_t v5 = v15;
  int v20 = *(_DWORD *)(a1 + 8);
  int v21 = *(_DWORD *)(a1 + 12);
LABEL_28:
  SuplAsn1Logger::TraceError(v15, v20, v21);
LABEL_29:
  int v18 = *(_DWORD *)(a1 + 8);
  int v19 = *(_DWORD *)(a1 + 12);
  LODWORD(v11) = v5;
LABEL_30:
  SuplAsn1Logger::TraceError(v11, v18, v19);
  int v6 = *(_DWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 12);
  LODWORD(v4) = v5;
LABEL_31:
  SuplAsn1Logger::TraceError(v4, v6, v7);
  return v5;
}

uint64_t asn1PE_LteCellInformation(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_17:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_17;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_17;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_17;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[3]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_17;
  }
  uint64_t v7 = asn1PE_CellGlobalIdEUTRA(a1, a2 + 8);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
  uint64_t v7 = asn1PE_PhysCellId(a1, *((_WORD *)a2 + 44));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
  uint64_t v7 = asn1PE_TrackingAreaCode(a1, (void *)a2 + 12);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
  if (*a2)
  {
    uint64_t v7 = asn1PE_RSRP_Range(a1, a2[120]);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_17;
    }
  }
  if (a2[1])
  {
    uint64_t v7 = asn1PE_RSRQ_Range(a1, a2[121]);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_17;
    }
  }
  if (a2[2])
  {
    uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 1282, *((unsigned __int16 *)a2 + 61));
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_17;
    }
  }
  if (!a2[3]) {
    return 0;
  }
  uint64_t v7 = asn1PE_MeasResultListEUTRA(a1, (uint64_t *)a2 + 16);
  uint64_t v4 = v7;
  if (v7)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
  return v4;
}

uint64_t asn1PE_CellInfo_VER2(uint64_t a1, uint64_t a2)
{
  v13[1] = *(int32x2_t *)MEMORY[0x263EF8340];
  uint64_t v4 = Asn1Coder::EncodeChoiceExtension(a1, 0);
  v13[0] = 0;
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    uint64_t v4 = Asn1Coder::EncodeOpenTypeFieldStart(a1, v13);
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
      uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v6 = *(_DWORD *)(a1 + 8);
        int v7 = *(_DWORD *)(a1 + 12);
        LODWORD(v4) = *(unsigned __int8 *)(a1 + 16);
      }
      else
      {
        uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 5, **(unsigned __int16 **)(a2 + 128) - 1);
        if (v4)
        {
          uint64_t v5 = v4;
          int v6 = *(_DWORD *)(a1 + 8);
          int v7 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          uint64_t v8 = *(void *)(a2 + 128);
          switch(*(_WORD *)v8)
          {
            case 1:
              uint64_t v5 = 1;
              *(unsigned char *)(a1 + 16) = 1;
              int v9 = *(_DWORD *)(a1 + 8);
              int v10 = *(_DWORD *)(a1 + 12);
              unsigned int v11 = 1;
              goto LABEL_18;
            case 2:
              uint64_t v5 = 1;
              *(unsigned char *)(a1 + 16) = 1;
              int v9 = *(_DWORD *)(a1 + 8);
              int v10 = *(_DWORD *)(a1 + 12);
              unsigned int v11 = 1;
              goto LABEL_18;
            case 3:
              uint64_t v5 = asn1PE_LteCellInformation(a1, (unsigned __int8 *)(v8 + 8));
              if (v5) {
                goto LABEL_19;
              }
              uint64_t v4 = Asn1Coder::EncodeOpenTypeFieldEnd(a1, v13);
              uint64_t v5 = v4;
              if (!v4) {
                return v5;
              }
              int v6 = *(_DWORD *)(a1 + 8);
              int v7 = *(_DWORD *)(a1 + 12);
              break;
            case 4:
              uint64_t v5 = 1;
              *(unsigned char *)(a1 + 16) = 1;
              int v9 = *(_DWORD *)(a1 + 8);
              int v10 = *(_DWORD *)(a1 + 12);
              unsigned int v11 = 1;
              goto LABEL_18;
            case 5:
              uint64_t v5 = 1;
              *(unsigned char *)(a1 + 16) = 1;
              int v9 = *(_DWORD *)(a1 + 8);
              int v10 = *(_DWORD *)(a1 + 12);
              unsigned int v11 = 1;
              goto LABEL_18;
            default:
              uint64_t v5 = 4;
              *(unsigned char *)(a1 + 16) = 4;
              int v9 = *(_DWORD *)(a1 + 8);
              int v10 = *(_DWORD *)(a1 + 12);
              unsigned int v11 = 4;
LABEL_18:
              SuplAsn1Logger::TraceError(v11, v9, v10);
LABEL_19:
              int v6 = *(_DWORD *)(a1 + 8);
              int v7 = *(_DWORD *)(a1 + 12);
              LODWORD(v4) = v5;
              break;
          }
        }
      }
    }
  }
  SuplAsn1Logger::TraceError(v4, v6, v7);
  return v5;
}

uint64_t std::__split_buffer<ASN1T_SupportedWLANApData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_01TriggerProdIndReq(NSObject **this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga22_01TriggerProdIndReq");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  long long v25 = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  if (!gnssTest::ZxFactoryHandler::Ga23_34BuildZxProdIndProdMsg((uint64_t)this + 140, (unint64_t *)&v25)|| v26 == v25)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga22_01TriggerProdIndReq");
      LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    }
    uint64_t v13 = 8;
  }
  else
  {
    memset(&v24, 0, sizeof(v24));
    int v22 = 0;
    uint64_t v23 = 0;
    std::string __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v25, (uint64_t)v26, v26 - v25);
    gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)this + 140, &__p, &v24);
    if (__p)
    {
      int v22 = __p;
      operator delete(__p);
    }
    gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip((gnssTest::GnssAdaptDeviceTest *)this, (unsigned __int16)((_WORD)v26 - (_WORD)v25), v25);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v5 = &v24;
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v5 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxReq,%s\n", (unint64_t)v4, "ADP", 68, "Ga22_01TriggerProdIndReq", v26 - v25, (const char *)v5);
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
    }
    if (gnssOsa_SemWaitTimeOut(this[10], 0xC8u))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        double v8 = *(double *)&g_MacClockTicksToMsRelation;
        int v9 = __error();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v8 * (double)v7), "ADP", 69, "Ga22_01TriggerProdIndReq", 1543, *v9);
        LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga22_01TriggerProdIndReq");
        LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
      }
      uint64_t v13 = 6;
    }
    else if (gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode((gnssTest::GnssAdaptDeviceTest *)this) == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "Ga22_01TriggerProdIndReq");
        LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
      }
      uint64_t v13 = 1;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "Ga22_01TriggerProdIndReq");
        LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
      }
      uint64_t v13 = 8;
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  if (v25)
  {
    long long v26 = v25;
    operator delete(v25);
  }
  return v13;
}

void sub_22B9E0C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode(gnssTest::GnssAdaptDeviceTest *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  unsigned __int16 v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 8;
  uint64_t v1 = *((void *)this + 9);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_34GetStatusCodeEv_block_invoke;
  block[3] = &unk_2648F5B18;
  block[4] = &v5;
  void block[5] = this;
  dispatch_sync(v1, block);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void gnssTest::GnssAdaptDeviceTest::Ga22_02HandleProdIndicationRsp(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_02HandleProdIndicationRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  memset(&v26, 0, sizeof(v26));
  std::string v24 = 0;
  uint64_t v25 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  gnssTest::ZxHandler::Ga23_00GetZxBufAsStr(a1 + 140, &__p, &v26);
  if (__p)
  {
    std::string v24 = __p;
    operator delete(__p);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v7 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxRsp,%s\n", (unint64_t)v6, "ADP", 68, "Ga22_02HandleProdIndicationRsp", *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (const char *)v7);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  if (gnssTest::ZxFactoryHandler::Ga23_15ParseZxProdModeIndProdMsg(a1 + 140, (void *)a2))
  {
    uint64_t v9 = *(NSObject **)(a1 + 72);
    *(void *)uint64_t __str = MEMORY[0x263EF8330];
    uint64_t v28 = 0x40000000;
    uint64_t v29 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
    uint64_t v30 = &__block_descriptor_tmp_98_0;
    uint64_t v31 = a1;
    int v32 = 1;
    dispatch_sync(v9, __str);
    if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a1 + 80))
      && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      double v11 = *(double *)&g_MacClockTicksToMsRelation;
      unsigned __int16 v12 = __error();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v11 * (double)v10), "ADP", 87, "Ga22_02HandleProdIndicationRsp", 1542, *v12);
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
LABEL_21:
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "Ga22_02HandleProdIndicationRsp");
      LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
    }
  }
  else
  {
    uint64_t v14 = *(NSObject **)(a1 + 72);
    *(void *)uint64_t __str = MEMORY[0x263EF8330];
    uint64_t v28 = 0x40000000;
    uint64_t v29 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
    uint64_t v30 = &__block_descriptor_tmp_98_0;
    uint64_t v31 = a1;
    int v32 = 8;
    dispatch_sync(v14, __str);
    if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a1 + 80))
      && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      double v16 = *(double *)&g_MacClockTicksToMsRelation;
      unsigned __int16 v17 = __error();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v16 * (double)v15), "ADP", 87, "Ga22_02HandleProdIndicationRsp", 1542, *v17);
      LbsOsaTrace_WriteLog(0x18u, __str, v18, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Prod Ind Rsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "Ga22_02HandleProdIndicationRsp", 776);
      LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      goto LABEL_21;
    }
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_22B9E1348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_03TriggerCpMeRomCsReq(NSObject **this)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga22_03TriggerCpMeRomCsReq");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  char v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (gnssTest::ZxFactoryHandler::Ga23_03BuildZxCpRomCSProdMsg((uint64_t)this + 140, (unint64_t *)&v46)&& v47 != v46)
  {
    memset(&v45, 0, sizeof(v45));
    int v43 = 0;
    uint64_t v44 = 0;
    std::string __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v46, (uint64_t)v47, v47 - v46);
    gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)this + 140, &__p, &v45);
    if (__p)
    {
      int v43 = __p;
      operator delete(__p);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      unsigned __int16 v5 = &v45;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned __int16 v5 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CPCS,Size,%u,ZxReq,%s\n", (unint64_t)v4, "ADP", 68, "Ga22_03TriggerCpMeRomCsReq", v47 - v46, (const char *)v5);
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
    }
    gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip((gnssTest::GnssAdaptDeviceTest *)this, (unsigned __int16)((_WORD)v47 - (_WORD)v46), v46);
    if (gnssOsa_SemWaitTimeOut(this[10], 0x12Cu))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        double v8 = *(double *)&g_MacClockTicksToMsRelation;
        uint64_t v9 = __error();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v8 * (double)v7), "ADP", 69, "Ga22_03TriggerCpMeRomCsReq", 1543, *v9);
        LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga22_03TriggerCpMeRomCsReq");
        LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
      }
LABEL_16:
      uint64_t v13 = 6;
      goto LABEL_17;
    }
    uint64_t StatusCode = gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode((gnssTest::GnssAdaptDeviceTest *)this);
    if (StatusCode != 1)
    {
      uint64_t v13 = StatusCode;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP-ME ROM CS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "Ga22_03TriggerCpMeRomCsReq", 1302);
        LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
      }
      goto LABEL_17;
    }
    uint64_t v47 = v46;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      *v45.__r_.__value_.__l.__data_ = 0;
      v45.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v45.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v45.__r_.__value_.__s + 23) = 0;
    }
    if (!gnssTest::ZxFactoryHandler::Ga23_05BuildZxMeRomCSProdMsg((uint64_t)this + 140, (unint64_t *)&v46)|| v47 == v46)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v31 = mach_continuous_time();
        unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Build CPCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 69, "Ga22_03TriggerCpMeRomCsReq", 775);
        LbsOsaTrace_WriteLog(0x18u, __str, v32, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v33 = mach_continuous_time();
        unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "Ga22_03TriggerCpMeRomCsReq");
        LbsOsaTrace_WriteLog(0x18u, __str, v34, 5, 1);
      }
    }
    else
    {
      int64x2_t v39 = 0;
      int v40 = 0;
      uint64_t v41 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v39, v46, (uint64_t)v47, v47 - v46);
      gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)this + 140, &v39, &v45);
      if (v39)
      {
        int v40 = v39;
        operator delete(v39);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v22 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v23 = &v45;
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v23 = (std::string *)v45.__r_.__value_.__r.__words[0];
        }
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MECS,Size,%u,ZxReq,%s\n", (unint64_t)v22, "ADP", 68, "Ga22_03TriggerCpMeRomCsReq", v47 - v46, (const char *)v23);
        LbsOsaTrace_WriteLog(0x18u, __str, v24, 5, 1);
      }
      gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip((gnssTest::GnssAdaptDeviceTest *)this, (unsigned __int16)((_WORD)v47 - (_WORD)v46), v46);
      if (gnssOsa_SemWaitTimeOut(this[10], 0x12Cu))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          double v26 = *(double *)&g_MacClockTicksToMsRelation;
          uint64_t v27 = __error();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v26 * (double)v25), "ADP", 69, "Ga22_03TriggerCpMeRomCsReq", 1543, *v27);
          LbsOsaTrace_WriteLog(0x18u, __str, v28, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "Ga22_03TriggerCpMeRomCsReq");
          LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
        }
        goto LABEL_16;
      }
      if (gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode((gnssTest::GnssAdaptDeviceTest *)this) == 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v35 = mach_continuous_time();
          unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 68, "Ga22_03TriggerCpMeRomCsReq");
          LbsOsaTrace_WriteLog(0x18u, __str, v36, 5, 1);
        }
        uint64_t v13 = 1;
        goto LABEL_17;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v37 = mach_continuous_time();
        unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "Ga22_03TriggerCpMeRomCsReq");
        LbsOsaTrace_WriteLog(0x18u, __str, v38, 5, 1);
      }
    }
    uint64_t v13 = 8;
LABEL_17:
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    goto LABEL_24;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Build CPCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga22_03TriggerCpMeRomCsReq", 775);
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "Ga22_03TriggerCpMeRomCsReq");
    LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
  }
  uint64_t v13 = 8;
LABEL_24:
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  return v13;
}

void sub_22B9E1D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::GnssAdaptDeviceTest::Ga22_04HandleCpMeRomCsRsp(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga22_04HandleCpMeRomCsRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  memset(&v25, 0, sizeof(v25));
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  gnssTest::ZxHandler::Ga23_00GetZxBufAsStr(a1 + 140, &__p, &v25);
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v9 = &v25;
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RomCSType,%u,Size,%u,ZxRsp,%s\n", (unint64_t)v8, "ADP", 68, "Ga22_04HandleCpMeRomCsRsp", a3, *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (const char *)v9);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
  }
  if (a3 == 1)
  {
    char v11 = gnssTest::ZxFactoryHandler::Ga23_06ParseZxMeRomCSProdMsg(a1 + 140, (void *)a2);
  }
  else
  {
    if (a3) {
      goto LABEL_19;
    }
    char v11 = gnssTest::ZxFactoryHandler::Ga23_04ParseZxCpRomCSProdMsg(a1 + 140, (void *)a2);
  }
  if ((v11 & 1) == 0)
  {
LABEL_19:
    unsigned __int16 v17 = *(NSObject **)(a1 + 72);
    *(void *)uint64_t __str = MEMORY[0x263EF8330];
    uint64_t v27 = 0x40000000;
    unsigned __int16 v28 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
    uint64_t v29 = &__block_descriptor_tmp_98_0;
    uint64_t v30 = a1;
    int v31 = 8;
    dispatch_sync(v17, __str);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Rom Resp,RomCSType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "Ga22_04HandleCpMeRomCsRsp", 784, a3);
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  unsigned __int16 v12 = *(NSObject **)(a1 + 72);
  *(void *)uint64_t __str = MEMORY[0x263EF8330];
  uint64_t v27 = 0x40000000;
  unsigned __int16 v28 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
  uint64_t v29 = &__block_descriptor_tmp_98_0;
  uint64_t v30 = a1;
  int v31 = 1;
  dispatch_sync(v12, __str);
  if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a1 + 80))
    && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    double v14 = *(double *)&g_MacClockTicksToMsRelation;
    unsigned __int16 v15 = __error();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v14 * (double)v13), "ADP", 87, "Ga22_04HandleCpMeRomCsRsp", 1542, *v15);
    LbsOsaTrace_WriteLog(0x18u, __str, v16, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
LABEL_22:
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "Ga22_04HandleCpMeRomCsRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
  }
LABEL_23:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_22B9E230C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL gnssTest::GnssAdaptDeviceTest::Ga22_05ValidateBands(uint64_t a1, int a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      BOOL v3 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Band,%u,PRN,Fcn,%d,%d\n", v6, "ADP");
        goto LABEL_4;
      }
      break;
    case 1:
      BOOL v3 = (a3 - 1) < 0x20;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_13;
      }
      break;
    case 2:
    case 3:
    case 6:
    case 7:
    case 9:
    case 10:
      BOOL v3 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Band,%u,PRN,%d,Fcn,%d\n", v4, "ADP");
LABEL_4:
        LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
        goto LABEL_5;
      }
      break;
    case 4:
      BOOL v3 = (a3 + 7) < 0xE;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_15;
      }
      break;
    case 5:
      BOOL v3 = (a3 - 1) < 0x25;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
LABEL_13:
        bzero(__str, 0x410uLL);
        unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Band,%u,PRN,%d\n", v7);
        goto LABEL_16;
      }
      break;
    case 8:
      BOOL v3 = (a3 - 1) < 0x24;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
LABEL_15:
        bzero(__str, 0x410uLL);
        unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Band,%u,Fcn,%d\n", v9);
LABEL_16:
        LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
      }
      break;
    default:
LABEL_5:
      BOOL v3 = 0;
      break;
  }
  return v3;
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_07IsFeatureSupported(gnssTest::GnssAdaptDeviceTest *a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v8 = 4;
  gnssTest::GnssAdaptDeviceTest::Ga21_01GetPlatformType(a1, (unsigned __int8 *)&v8);
  BOOL v3 = a2 == 3 && v8 == 1;
  uint64_t v4 = !v3;
  if (v3 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Unsupported Pltfm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "Ga22_07IsFeatureSupported", 264);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
  }
  return v4;
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_08InjectLtlTable(gnssTest::GnssAdaptDeviceTest *this)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga22_08InjectLtlTable");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2000000000;
  char v29 = 0;
  uint64_t v4 = *((void *)this + 9);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest21Ga22_08InjectLtlTableEv_block_invoke;
  block[3] = &unk_2648F5758;
  block[4] = &v26;
  void block[5] = this;
  dispatch_sync(v4, block);
  if (*((unsigned char *)v27 + 24))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "Ga22_08InjectLtlTable");
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
    }
LABEL_6:
    uint64_t v7 = 1;
    goto LABEL_15;
  }
  memcpy(__dst, &unk_22BB43C20, sizeof(__dst));
  if (off_26AE6D248) {
    off_26AE6D248(818, __dst);
  }
  if (gnssOsa_SemWaitTimeOut(*((NSObject **)this + 10), 0x12Cu))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      double v9 = *(double *)&g_MacClockTicksToMsRelation;
      uint64_t v10 = __error();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v9 * (double)v8), "ADP", 69, "Ga22_08InjectLtlTable", 1543, *v10);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "Ga22_08InjectLtlTable");
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
    uint64_t v7 = 6;
  }
  else
  {
    unsigned __int16 v15 = *((void *)this + 9);
    v24[0] = MEMORY[0x263EF8330];
    v24[1] = 0x40000000;
    long long v24[2] = ___ZN8gnssTest19GnssAdaptDeviceTest21Ga22_08InjectLtlTableEv_block_invoke_2;
    v24[3] = &unk_2648F5780;
    unsigned char v24[4] = &v26;
    v24[5] = this;
    dispatch_sync(v15, v24);
    if (*((unsigned char *)v27 + 24))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL Injected Successfully\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "Ga22_08InjectLtlTable");
        LbsOsaTrace_WriteLog(0x18u, __str, v17, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "Ga22_08InjectLtlTable");
        LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
      }
      goto LABEL_6;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL Load Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "Ga22_08InjectLtlTable", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "Ga22_08InjectLtlTable");
      LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
    }
    uint64_t v7 = 8;
  }
LABEL_15:
  _Block_object_dispose(&v26, 8);
  return v7;
}

void sub_22B9E2DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest21Ga22_08InjectLtlTableEv_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 137);
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest21Ga22_08InjectLtlTableEv_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 137);
  return result;
}

void *gnssTest::GnssAdaptDeviceTest::Ga22_09ReportInitStatus(uint64_t a1, uint64_t a2, int a3)
{
  _OWORD v16[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x4802000000;
  double v14 = __Block_byref_object_copy__2;
  unsigned __int16 v15 = __Block_byref_object_dispose__2;
  v16[3] = 0;
  uint64_t v5 = *(NSObject **)(a1 + 72);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest23Ga22_09ReportInitStatusENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4gnss6ResultE_block_invoke;
  block[3] = &unk_2648F57A8;
  block[4] = &v11;
  void block[5] = a1;
  dispatch_sync(v5, block);
  std::string::basic_string[abi:ne180100]<0>(__p, "Ga22_09ReportInitStatus");
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(v12 + 5));
  gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse(a1, (const char *)__p, a3, (uint64_t)v10);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  _Block_object_dispose(&v11, 8);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
}

void sub_22B9E2FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](&a22);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a26, 8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = a2 + 40;

  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](v2, v3);
}

void *__Block_byref_object_dispose__2(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
}

void *___ZN8gnssTest19GnssAdaptDeviceTest23Ga22_09ReportInitStatusENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4gnss6ResultE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40) + 152;
  uint64_t v2 = (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  return std::function<void ()(gnss::Result)>::operator=(v2, v1);
}

void *gnssTest::GnssAdaptDeviceTest::Ga22_11TestStatusResponse(uint64_t a1, const char *a2, int a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (a2[23] < 0) {
      a2 = *(const char **)a2;
    }
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s,%u\n", (unint64_t)v8, "ADP", 73, "Ga22_11TestStatusResponse", a2, a3);
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 4, 1);
  }
  uint64_t v10 = *(NSObject **)(a1 + 72);
  *(void *)uint64_t __str = MEMORY[0x263EF8330];
  uint64_t v19 = 0x40000000;
  uint64_t v20 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
  unsigned __int16 v21 = &__block_descriptor_tmp_98_0;
  uint64_t v22 = a1;
  int v23 = 0;
  dispatch_sync(v10, __str);
  if (*(void *)(a4 + 24))
  {
    uint64_t v11 = *(NSObject **)(a1 + 64);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest25Ga22_11TestStatusResponseENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4gnss6ResultENS1_8functionIFvS9_EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_25_2;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a4);
    int v17 = a3;
    dispatch_async(v11, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Status CB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga22_11TestStatusResponse", 258);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest25Ga22_11TestStatusResponseENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4gnss6ResultENS1_8functionIFvS9_EEE_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

void gnssTest::GnssAdaptDeviceTest::Ga22_13HandleLtlRsp(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_13HandleLtlRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  memset(&v26, 0, sizeof(v26));
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  gnssTest::ZxHandler::Ga23_00GetZxBufAsStr(a1 + 140, &__p, &v26);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v7 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxRsp,%s\n", (unint64_t)v6, "ADP", 68, "Ga22_13HandleLtlRsp", *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (const char *)v7);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  char v9 = gnssTest::ZxFactoryHandler::Ga23_35ParseLtlRespMsg(a1 + 140, (void *)a2);
  uint64_t v10 = *(NSObject **)(a1 + 72);
  if (v9)
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest19Ga22_13HandleLtlRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2;
    block[3] = &__block_descriptor_tmp_28;
    void block[4] = a1;
    dispatch_sync(v10, block);
    uint64_t v11 = *(NSObject **)(a1 + 72);
    *(void *)uint64_t __str = MEMORY[0x263EF8330];
    uint64_t v28 = 0x40000000;
    char v29 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
    uint64_t v30 = &__block_descriptor_tmp_98_0;
    uint64_t v31 = a1;
    int v32 = 1;
    dispatch_sync(v11, __str);
  }
  else
  {
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 0x40000000;
    int v22[2] = ___ZN8gnssTest19GnssAdaptDeviceTest19Ga22_13HandleLtlRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke;
    char v22[3] = &__block_descriptor_tmp_26;
    v22[4] = a1;
    dispatch_sync(v10, v22);
    uint64_t v12 = *(NSObject **)(a1 + 72);
    *(void *)uint64_t __str = MEMORY[0x263EF8330];
    uint64_t v28 = 0x40000000;
    char v29 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
    uint64_t v30 = &__block_descriptor_tmp_98_0;
    uint64_t v31 = a1;
    int v32 = 8;
    dispatch_sync(v12, __str);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Parse LTL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga22_13HandleLtlRsp", 776);
      LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
    }
  }
  if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a1 + 80))
    && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    double v16 = *(double *)&g_MacClockTicksToMsRelation;
    int v17 = __error();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v16 * (double)v15), "ADP", 87, "Ga22_13HandleLtlRsp", 1542, *v17);
    LbsOsaTrace_WriteLog(0x18u, __str, v18, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "Ga22_13HandleLtlRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_22B9E3924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest19Ga22_13HandleLtlRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 137) = 0;
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest19Ga22_13HandleLtlRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 137) = 1;
  return result;
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_14TriggerCwModulated(NSObject **a1, int a2, int a3, int a4, int a5, int a6, double a7)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga22_14TriggerCwModulated");
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
  }
  int v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  memset(&v42, 0, sizeof(v42));
  if (!gnssTest::ZxFactoryHandler::Ga23_07BuildZxMeCwModProdMsg((uint64_t)a1 + 140, (unint64_t *)&v43, a3, a4, a5, a6, a7)|| v44 == v43)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 68, "Ga22_14TriggerCwModulated");
      LbsOsaTrace_WriteLog(0x18u, __str, v27, 5, 1);
    }
    uint64_t v25 = 0;
  }
  else
  {
    std::string __p = 0;
    int v40 = 0;
    uint64_t v41 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v43, (uint64_t)v44, v44 - v43);
    gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)a1 + 140, &__p, &v42);
    if (__p)
    {
      int v40 = __p;
      operator delete(__p);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v16 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      int v17 = &v42;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v17 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxReq,%s\n", (unint64_t)v16, "ADP", 68, "Ga22_14TriggerCwModulated", v44 - v43, (const char *)v17);
      LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
    }
    int v19 = 1000 * a2;
    if (!a2) {
      int v19 = 20000;
    }
    int v20 = v19 / (a6 + 100);
    if (v20)
    {
      int v21 = 0;
      while (1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v22 = mach_continuous_time();
          unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Iteration,%u,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "Ga22_14TriggerCwModulated", v20, v21 + 1);
          LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
        }
        gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip((gnssTest::GnssAdaptDeviceTest *)a1, (unsigned __int16)((_WORD)v44 - (_WORD)v43), v43);
        if (gnssOsa_SemWaitTimeOut(a1[10], a6 + 100))
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v31 = mach_continuous_time();
            double v32 = *(double *)&g_MacClockTicksToMsRelation;
            uint64_t v33 = __error();
            unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v32 * (double)v31), "ADP", 69, "Ga22_14TriggerCwModulated", 1543, *v33);
            LbsOsaTrace_WriteLog(0x18u, __str, v34, 0, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v35 = mach_continuous_time();
            unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 68, "Ga22_14TriggerCwModulated");
            LbsOsaTrace_WriteLog(0x18u, __str, v36, 5, 1);
          }
          uint64_t v25 = 6;
          goto LABEL_24;
        }
        uint64_t StatusCode = gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode((gnssTest::GnssAdaptDeviceTest *)a1);
        if (StatusCode != 1) {
          break;
        }
        if (v20 == ++v21)
        {
          uint64_t v25 = 1;
          goto LABEL_30;
        }
      }
      uint64_t v25 = StatusCode;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v37 = mach_continuous_time();
        unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Test Completed with Failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 69, "Ga22_14TriggerCwModulated", 257);
        LbsOsaTrace_WriteLog(0x18u, __str, v38, 0, 1);
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_24;
      }
      goto LABEL_31;
    }
    uint64_t v25 = 0;
LABEL_30:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
LABEL_31:
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "Ga22_14TriggerCwModulated");
      LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
    }
  }
LABEL_24:
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  return v25;
}

void sub_22B9E4068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::GnssAdaptDeviceTest::Ga22_15HandleCwModulatedRsp(NSObject **a1, uint64_t a2, int a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga22_15HandleCwModulatedRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  memset(&v55, 0, sizeof(v55));
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)a1 + 140, &__p, &v55);
  if (__p)
  {
    uint64_t v53 = __p;
    operator delete(__p);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    char v9 = &v55;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v9 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxRsp,%s\n", (unint64_t)v8, "ADP", 68, "Ga22_15HandleCwModulatedRsp", *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (const char *)v9);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
  }
  if (*(void *)(a2 + 8) - *(void *)a2 > 8uLL)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    uint64_t v51 = 0x7FF8000000000000;
    if (gnssTest::ZxFactoryHandler::Ga23_08ParseZxMeCwModProdMsg((uint64_t)a1 + 140, (void *)a2, (uint64_t)&v49, a3))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CN0,%f,Power,%f,FreqOffsetHz,%f,band,%u,fcn,%d,prn,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "Ga22_15HandleCwModulatedRsp", *((double *)&v49 + 1), *(double *)&v50, *((double *)&v50 + 1), v49, DWORD1(v49), DWORD1(v49));
        LbsOsaTrace_WriteLog(0x18u, __str, v21, 4, 1);
      }
      if ((*((double *)&v49 + 1) < 26.0
         || *(double *)&v50 < -160.0
         || *((double *)&v50 + 1) < -3200.0
         || *((double *)&v50 + 1) > 3200.0)
        && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Meas are out of range\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 87, "Ga22_15HandleCwModulatedRsp", 770);
        LbsOsaTrace_WriteLog(0x18u, __str, v23, 2, 1);
      }
      uint64_t v24 = operator new(0x28uLL);
      long long v25 = v50;
      _OWORD *v24 = v49;
      v24[1] = v25;
      *((void *)v24 + 4) = v51;
      v56[0] = 0;
      v56[1] = v56;
      void v56[2] = 0x4802000000;
      uint64_t v56[3] = __Block_byref_object_copy__34;
      v56[4] = __Block_byref_object_dispose__35;
      v57[3] = 0;
      uint64_t v26 = a1[9];
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_15HandleCwModulatedRspERNSt3__16vectorIhNS1_9allocatorIhEEEE17e_Ga_CharTestType_block_invoke;
      block[3] = &unk_2648F5810;
      void block[4] = v56;
      void block[5] = a1;
      dispatch_sync(v26, block);
      unsigned __int16 v27 = a1[8];
      v44[0] = MEMORY[0x263EF8330];
      v44[1] = 1174405120;
      void v44[2] = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_15HandleCwModulatedRspERNSt3__16vectorIhNS1_9allocatorIhEEEE17e_Ga_CharTestType_block_invoke_2;
      v44[3] = &unk_26DF1A158;
      v44[4] = v56;
      uint64_t v45 = 0;
      char v46 = 0;
      uint64_t v47 = 0;
      std::vector<gnssTest::RfMeasurement>::__init_with_size[abi:ne180100]<gnssTest::RfMeasurement*,gnssTest::RfMeasurement*>(&v45, v24, (uint64_t)v24 + 40, 1uLL);
      dispatch_async(v27, v44);
      uint64_t v28 = a1[9];
      *(void *)uint64_t __str = MEMORY[0x263EF8330];
      uint64_t v59 = 0x40000000;
      uint64_t v60 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
      char v61 = &__block_descriptor_tmp_98_0;
      uint64_t v62 = a1;
      int v63 = 1;
      dispatch_sync(v28, __str);
      if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v29 = mach_continuous_time();
        double v30 = *(double *)&g_MacClockTicksToMsRelation;
        uint64_t v31 = __error();
        unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v30 * (double)v29), "ADP", 87, "Ga22_15HandleCwModulatedRsp", 1542, *v31);
        LbsOsaTrace_WriteLog(0x18u, __str, v32, 2, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v33 = mach_continuous_time();
        unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "Ga22_15HandleCwModulatedRsp");
        LbsOsaTrace_WriteLog(0x18u, __str, v34, 5, 1);
      }
      if (v45)
      {
        char v46 = v45;
        operator delete(v45);
      }
      _Block_object_dispose(v56, 8);
      std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v57);
      operator delete(v24);
    }
    else
    {
      uint64_t v35 = a1[9];
      *(void *)uint64_t __str = MEMORY[0x263EF8330];
      uint64_t v59 = 0x40000000;
      uint64_t v60 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
      char v61 = &__block_descriptor_tmp_98_0;
      uint64_t v62 = a1;
      int v63 = 8;
      dispatch_sync(v35, __str);
      if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v36 = mach_continuous_time();
        double v37 = *(double *)&g_MacClockTicksToMsRelation;
        unsigned __int16 v38 = __error();
        unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v37 * (double)v36), "ADP", 87, "Ga22_15HandleCwModulatedRsp", 1542, *v38);
        LbsOsaTrace_WriteLog(0x18u, __str, v39, 2, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v40 = mach_continuous_time();
        unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CWMod Invalid Pl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 69, "Ga22_15HandleCwModulatedRsp", 776);
        LbsOsaTrace_WriteLog(0x18u, __str, v41, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v42 = mach_continuous_time();
        unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 68, "Ga22_15HandleCwModulatedRsp");
        LbsOsaTrace_WriteLog(0x18u, __str, v43, 5, 1);
      }
    }
  }
  else
  {
    uint64_t v11 = a1[9];
    *(void *)uint64_t __str = MEMORY[0x263EF8330];
    uint64_t v59 = 0x40000000;
    uint64_t v60 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
    char v61 = &__block_descriptor_tmp_98_0;
    uint64_t v62 = a1;
    int v63 = 8;
    dispatch_sync(v11, __str);
    if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      double v13 = *(double *)&g_MacClockTicksToMsRelation;
      uint64_t v14 = __error();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v13 * (double)v12), "ADP", 87, "Ga22_15HandleCwModulatedRsp", 1542, *v14);
      LbsOsaTrace_WriteLog(0x18u, __str, v15, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CWMod Invalid Pl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "Ga22_15HandleCwModulatedRsp", 776);
      LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "Ga22_15HandleCwModulatedRsp");
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
    }
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
}

void sub_22B9E4B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 64;
  uint64_t v3 = *(void *)(a2 + 64);
  if (!v3)
  {
    uint64_t v2 = result + 64;
    goto LABEL_5;
  }
  if (v3 != a2 + 40)
  {
    *(void *)(result + 64) = v3;
LABEL_5:
    *(void *)uint64_t v2 = 0;
    return result;
  }
  *(void *)(result + 64) = result + 40;
  return (*(uint64_t (**)(void))(**(void **)v2 + 24))();
}

void sub_22B9E4CCC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *__Block_byref_object_dispose__35(uint64_t a1)
{
  int v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v1);
}

void *___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_15HandleCwModulatedRspERNSt3__16vectorIhNS1_9allocatorIhEEEE17e_Ga_CharTestType_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40) + 184;
  uint64_t v2 = (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  return std::function<void ()(std::vector<gnssTest::RfMeasurement>)>::operator=(v2, v1);
}

void ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_15HandleCwModulatedRspERNSt3__16vectorIhNS1_9allocatorIhEEEE17e_Ga_CharTestType_block_invoke_2(void *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = (const void *)a1[5];
  uint64_t v2 = *(void *)(a1[4] + 8);
  unsigned __int16 v5 = 0;
  uint64_t v6 = 0;
  std::string __p = 0;
  std::vector<gnssTest::RfMeasurement>::__init_with_size[abi:ne180100]<gnssTest::RfMeasurement*,gnssTest::RfMeasurement*>(&__p, v1, a1[6], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[6] - (void)v1) >> 3));
  uint64_t v3 = *(void *)(v2 + 64);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 48))(v3, &__p);
  if (__p)
  {
    unsigned __int16 v5 = __p;
    operator delete(__p);
  }
}

void sub_22B9E4E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void *__copy_helper_block_e8_40c66_ZTSNSt3__16vectorIN8gnssTest13RfMeasurementENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = (void *)(a1 + 40);
  v3[2] = 0;
  uint64_t v4 = *(const void **)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);

  return std::vector<gnssTest::RfMeasurement>::__init_with_size[abi:ne180100]<gnssTest::RfMeasurement*,gnssTest::RfMeasurement*>(v3, v4, v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - (uint64_t)v4) >> 3));
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__16vectorIN8gnssTest13RfMeasurementENS_9allocatorIS2_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_16TriggerCommPing(gnssTest::GnssAdaptDeviceTest *this, unsigned int a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_16TriggerCommPing");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  uint64_t v6 = *((void *)this + 9);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest22Ga22_16TriggerCommPingEj_block_invoke;
  block[3] = &__block_descriptor_tmp_38;
  void block[4] = this;
  dispatch_sync(v6, block);
  uint64_t v45 = 0;
  char v46 = 0;
  uint64_t v47 = 0;
  if (gnssTest::ZxFactoryHandler::Ga23_16BuildZxPingProdMsg((uint64_t)this + 140, (unint64_t *)&v45, 0)
    && v46 != v45)
  {
    memset(&v44, 0, sizeof(v44));
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    std::string __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v45, (uint64_t)v46, v46 - v45);
    gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)this + 140, &__p, &v44);
    if (__p)
    {
      uint64_t v42 = __p;
      operator delete(__p);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v7 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      double v8 = &v44;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v8 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxReqCP,%s\n", (unint64_t)v7, "ADP", 68, "Ga22_16TriggerCommPing", v46 - v45, (const char *)v8);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
    }
    gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip(this, (unsigned __int16)((_WORD)v46 - (_WORD)v45), v45);
    unsigned int v10 = a2 >> 1;
    if (gnssOsa_SemWaitTimeOut(*((NSObject **)this + 10), v10))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        double v12 = *(double *)&g_MacClockTicksToMsRelation;
        double v13 = __error();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v12 * (double)v11), "ADP", 69, "Ga22_16TriggerCommPing", 1543, *v13);
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "Ga22_16TriggerCommPing");
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
      }
    }
    else
    {
      char v46 = v45;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        *v44.__r_.__value_.__l.__data_ = 0;
        v44.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v44.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v44.__r_.__value_.__s + 23) = 0;
      }
      if (!gnssTest::ZxFactoryHandler::Ga23_16BuildZxPingProdMsg((uint64_t)this + 140, (unint64_t *)&v45, 1)
        || v46 == v45)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v31 = mach_continuous_time();
          unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ping ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 69, "Ga22_16TriggerCommPing", 775);
          LbsOsaTrace_WriteLog(0x18u, __str, v32, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v33 = mach_continuous_time();
          unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "Ga22_16TriggerCommPing");
          LbsOsaTrace_WriteLog(0x18u, __str, v34, 5, 1);
        }
        uint64_t StatusCode = 0;
        goto LABEL_43;
      }
      unsigned __int16 v38 = 0;
      unsigned __int16 v39 = 0;
      uint64_t v40 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v38, v45, (uint64_t)v46, v46 - v45);
      gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)this + 140, &v38, &v44);
      if (v38)
      {
        unsigned __int16 v39 = v38;
        operator delete(v38);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v22 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        unsigned __int16 v23 = &v44;
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned __int16 v23 = (std::string *)v44.__r_.__value_.__r.__words[0];
        }
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxReqME,%s\n", (unint64_t)v22, "ADP", 68, "Ga22_16TriggerCommPing", v46 - v45, (const char *)v23);
        LbsOsaTrace_WriteLog(0x18u, __str, v24, 5, 1);
      }
      gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip(this, (unsigned __int16)((_WORD)v46 - (_WORD)v45), v45);
      if (!gnssOsa_SemWaitTimeOut(*((NSObject **)this + 10), v10))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v36 = mach_continuous_time();
          unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "Ga22_16TriggerCommPing");
          LbsOsaTrace_WriteLog(0x18u, __str, v37, 5, 1);
        }
        uint64_t StatusCode = gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode(this);
        goto LABEL_43;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        double v26 = *(double *)&g_MacClockTicksToMsRelation;
        unsigned __int16 v27 = __error();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v26 * (double)v25), "ADP", 69, "Ga22_16TriggerCommPing", 1543, *v27);
        LbsOsaTrace_WriteLog(0x18u, __str, v28, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v29 = mach_continuous_time();
        unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "Ga22_16TriggerCommPing");
        LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
      }
    }
    uint64_t StatusCode = 6;
LABEL_43:
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    goto LABEL_45;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Build Ping Msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "Ga22_16TriggerCommPing", 775);
    LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "Ga22_16TriggerCommPing");
    LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
  }
  uint64_t StatusCode = 0;
LABEL_45:
  if (v45)
  {
    char v46 = v45;
    operator delete(v45);
  }
  return StatusCode;
}

void sub_22B9E5850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest22Ga22_16TriggerCommPingEj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(char *)(v1 + 111) < 0)
  {
    **(unsigned char **)(v1 + 88) = 0;
    *(void *)(v1 + 96) = 0;
  }
  else
  {
    *(unsigned char *)(v1 + 88) = 0;
    *(unsigned char *)(v1 + 111) = 0;
  }
  return result;
}

void gnssTest::GnssAdaptDeviceTest::Ga22_17HandleCommPingRsp(NSObject **a1, void *a2)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_17HandleCommPingRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  uint64_t v57 = 0;
  uint64_t v58 = &v57;
  uint64_t v59 = 0x4002000000;
  uint64_t v60 = __Block_byref_object_copy__43;
  char v61 = __Block_byref_object_dispose__44;
  std::string __p = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v6 = a1[9];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke;
  block[3] = &unk_2648F5858;
  void block[4] = &v57;
  void block[5] = a1;
  dispatch_sync(v6, block);
  char v55 = 0;
  if (gnssTest::ZxFactoryHandler::Ga23_21ParseZxPingProdMsg((uint64_t)a1 + 140, a2, (uint64_t)(v58 + 5), &v55))
  {
    uint64_t v51 = 0;
    uint64_t v52 = &v51;
    uint64_t v53 = 0x2000000000;
    char v54 = 0;
    if (v55 == 1)
    {
      unsigned __int16 v19 = a1[9];
      v49[0] = MEMORY[0x263EF8330];
      v49[1] = 0x40000000;
      v49[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_3;
      v49[3] = &unk_2648F58A8;
      void v49[4] = &v51;
      v49[5] = a1;
      dispatch_sync(v19, v49);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME Ping response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "Ga22_17HandleCommPingRsp");
        LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
      }
    }
    else if (v55)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Unknown CPU Type\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 69, "Ga22_17HandleCommPingRsp", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v23, 0, 1);
      }
    }
    else
    {
      char v54 = 1;
      double v7 = a1[9];
      v50[0] = MEMORY[0x263EF8330];
      v50[1] = 0x40000000;
      double v50[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2;
      v50[3] = &unk_2648F5880;
      void v50[4] = &v57;
      v50[5] = a1;
      dispatch_sync(v7, v50);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CP Ping response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga22_17HandleCommPingRsp");
        LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v24 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v25 = (const char *)(v58 + 5);
      if (*((char *)v58 + 63) < 0) {
        uint64_t v25 = *(const char **)v25;
      }
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FW Ver Resp,%s\n", (unint64_t)v24, "ADP", 68, "Ga22_17HandleCommPingRsp", v25);
      LbsOsaTrace_WriteLog(0x18u, __str, v26, 5, 1);
    }
    if (*((unsigned char *)v52 + 24) && v55 == 1)
    {
      *((unsigned char *)v52 + 24) = 0;
      uint64_t v65 = 0;
      unsigned __int16 v66 = &v65;
      uint64_t v67 = 0x4802000000;
      uint64_t v68 = __Block_byref_object_copy__53;
      uint64_t v69 = __Block_byref_object_dispose__54;
      v70[3] = 0;
      unsigned __int16 v27 = a1[9];
      v48[0] = MEMORY[0x263EF8330];
      v48[1] = 0x40000000;
      v48[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_55;
      v48[3] = &unk_2648F58D0;
      v48[4] = &v65;
      v48[5] = a1;
      dispatch_sync(v27, v48);
      uint64_t v28 = v66[8];
      if (v28)
      {
        uint64_t v29 = a1[8];
        v47[0] = MEMORY[0x263EF8330];
        v47[1] = 0x40000000;
        v47[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2_58;
        v47[3] = &unk_2648F58F8;
        void v47[4] = &v65;
        v47[5] = &v57;
        dispatch_async(v29, v47);
        unsigned __int16 v30 = a1[9];
        *(void *)uint64_t __str = MEMORY[0x263EF8330];
        uint64_t v72 = 0x40000000;
        uint64_t v73 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
        char v74 = &__block_descriptor_tmp_98_0;
        uint64_t v75 = a1;
        int v76 = 1;
        dispatch_sync(v30, __str);
      }
      else
      {
        unsigned __int16 v32 = a1[9];
        *(void *)uint64_t __str = MEMORY[0x263EF8330];
        uint64_t v72 = 0x40000000;
        uint64_t v73 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
        char v74 = &__block_descriptor_tmp_98_0;
        uint64_t v75 = a1;
        int v76 = 0;
        dispatch_sync(v32, __str);
        if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v33 = mach_continuous_time();
          double v34 = *(double *)&g_MacClockTicksToMsRelation;
          uint64_t v35 = __error();
          unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v34 * (double)v33), "ADP", 87, "Ga22_17HandleCommPingRsp", 1542, *v35);
          LbsOsaTrace_WriteLog(0x18u, __str, v36, 2, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v37 = mach_continuous_time();
          unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Ver Report CB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 69, "Ga22_17HandleCommPingRsp", 516);
          LbsOsaTrace_WriteLog(0x18u, __str, v38, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v39 = mach_continuous_time();
          unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 68, "Ga22_17HandleCommPingRsp");
          LbsOsaTrace_WriteLog(0x18u, __str, v40, 5, 1);
        }
      }
      _Block_object_dispose(&v65, 8);
      std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v70);
      if (!v28) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v31 = a1[9];
      *(void *)uint64_t __str = MEMORY[0x263EF8330];
      uint64_t v72 = 0x40000000;
      uint64_t v73 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
      char v74 = &__block_descriptor_tmp_98_0;
      uint64_t v75 = a1;
      int v76 = 8;
      dispatch_sync(v31, __str);
    }
    if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v41 = mach_continuous_time();
      double v42 = *(double *)&g_MacClockTicksToMsRelation;
      uint64_t v43 = __error();
      unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v42 * (double)v41), "ADP", 87, "Ga22_17HandleCommPingRsp", 1542, *v43);
      LbsOsaTrace_WriteLog(0x18u, __str, v44, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v45 = mach_continuous_time();
      unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "ADP", 68, "Ga22_17HandleCommPingRsp");
      LbsOsaTrace_WriteLog(0x18u, __str, v46, 5, 1);
    }
LABEL_41:
    _Block_object_dispose(&v51, 8);
    goto LABEL_42;
  }
  unsigned int v10 = a1[9];
  *(void *)uint64_t __str = MEMORY[0x263EF8330];
  uint64_t v72 = 0x40000000;
  uint64_t v73 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
  char v74 = &__block_descriptor_tmp_98_0;
  uint64_t v75 = a1;
  int v76 = 8;
  dispatch_sync(v10, __str);
  if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    double v12 = *(double *)&g_MacClockTicksToMsRelation;
    double v13 = __error();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v12 * (double)v11), "ADP", 87, "Ga22_17HandleCommPingRsp", 1542, *v13);
    LbsOsaTrace_WriteLog(0x18u, __str, v14, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ping Rsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "Ga22_17HandleCommPingRsp", 776);
    LbsOsaTrace_WriteLog(0x18u, __str, v16, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "Ga22_17HandleCommPingRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
  }
LABEL_42:
  _Block_object_dispose(&v57, 8);
  if (SHIBYTE(v64) < 0) {
    operator delete(__p);
  }
}

void sub_22B9E6534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62)
{
  _Block_object_dispose(&a62, 8);
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v62);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a51, 8);
  if (a61 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__43(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__44(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v1 = *(void **)(a1 + 40);
    operator delete(v1);
  }
}

std::string *___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = (const std::string *)(*(void *)(a1 + 40) + 88);
  uint64_t v2 = (std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  return std::string::operator=(v2, v1);
}

std::string *___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  __n128 result = std::string::operator=((std::string *)(v1 + 88), (const std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  *(unsigned char *)(v1 + 138) = 1;
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_3(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v1 + 138);
  *(unsigned char *)(v1 + 138) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 64;
  uint64_t v3 = *(void *)(a2 + 64);
  if (!v3)
  {
    uint64_t v2 = result + 64;
    goto LABEL_5;
  }
  if (v3 != a2 + 40)
  {
    *(void *)(result + 64) = v3;
LABEL_5:
    *(void *)uint64_t v2 = 0;
    return result;
  }
  *(void *)(result + 64) = result + 40;
  return (*(uint64_t (**)(void))(**(void **)v2 + 24))();
}

void sub_22B9E6880(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *__Block_byref_object_dispose__54(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v1);
}

void *___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_55(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40) + 216;
  uint64_t v2 = (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  return std::function<void ()(std::string const&,std::string const&)>::operator=(v2, v1);
}

void ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_17HandleCommPingRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2_58(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "NA");
  uint64_t v3 = *(void *)(v1 + 64);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v3 + 48))(v3, v2 + 40, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22B9E6A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_18ValidatePowerMode(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 < 5)
  {
    if ((a2 & 0xFFFFFFFB) != 0) {
      return 7;
    }
    else {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "Ga22_18ValidatePowerMode", 514, a2);
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 0, 1);
    }
    return 4;
  }
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_19TriggerPowerMode(NSObject **a1, unsigned int a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_19TriggerPowerMode");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  double v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  *(_DWORD *)uint64_t __str = 0;
  gnssTest::GnssAdaptDeviceTest::Ga21_01GetPlatformType((gnssTest::GnssAdaptDeviceTest *)a1, (unsigned __int8 *)__str);
  if (!gnssTest::ZxFactoryHandler::Ga23_11BuildZxMePowerProdMsg((uint64_t)a1 + 140, (unint64_t *)&v34, a2, (*(_DWORD *)__str - 1) < 3)|| v35 == v34)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PwrMode\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "Ga22_19TriggerPowerMode", 775);
      LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "Ga22_19TriggerPowerMode");
      LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
    }
    uint64_t StatusCode = 0;
  }
  else
  {
    memset(&v33, 0, sizeof(v33));
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    std::string __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v34, (uint64_t)v35, v35 - v34);
    gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)a1 + 140, &__p, &v33);
    if (__p)
    {
      uint64_t v31 = __p;
      operator delete(__p);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = &v33;
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxReq,%s\n", (unint64_t)v6, "ADP", 68, "Ga22_19TriggerPowerMode", v35 - v34, (const char *)v7);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
    }
    unsigned __int16 v9 = a1[9];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest23Ga22_19TriggerPowerModeENS_9PowerModeE_block_invoke;
    block[3] = &__block_descriptor_tmp_63;
    void block[4] = a1;
    unsigned int v29 = a2;
    dispatch_sync(v9, block);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PowerTestState START\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga22_19TriggerPowerMode");
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
    }
    gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip((gnssTest::GnssAdaptDeviceTest *)a1, (unsigned __int16)((_WORD)v35 - (_WORD)v34), v34);
    if (gnssOsa_SemWaitTimeOut(a1[10], 0xC8u))
    {
      gnssTest::GnssAdaptDeviceTest::Ga22_27GnssStopFWTest(a1);
      double v12 = a1[9];
      v27[0] = MEMORY[0x263EF8330];
      v27[1] = 0x40000000;
      v27[2] = ___ZN8gnssTest19GnssAdaptDeviceTest23Ga22_19TriggerPowerModeENS_9PowerModeE_block_invoke_2;
      v27[3] = &__block_descriptor_tmp_65;
      void v27[4] = a1;
      dispatch_sync(v12, v27);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        double v14 = *(double *)&g_MacClockTicksToMsRelation;
        uint64_t v15 = __error();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v14 * (double)v13), "ADP", 69, "Ga22_19TriggerPowerMode", 1543, *v15);
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "Ga22_19TriggerPowerMode");
        LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
      }
      uint64_t StatusCode = 6;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "Ga22_19TriggerPowerMode");
        LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
      }
      uint64_t StatusCode = gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode((gnssTest::GnssAdaptDeviceTest *)a1);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  return StatusCode;
}

void sub_22B9E7184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a36) {
    operator delete(a36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest23Ga22_19TriggerPowerModeENS_9PowerModeE_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(_WORD *)(v1 + 132) = 256;
  *(_DWORD *)(v1 + 124) = *(_DWORD *)(result + 40);
  return result;
}

void gnssTest::GnssAdaptDeviceTest::Ga22_27GnssStopFWTest(NSObject **this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unsigned __int16 v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga22_27GnssStopFWTest");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  if (gnssTest::ZxFactoryHandler::Ga23_24BuildZxStopProdMsg((uint64_t)this + 140, (unint64_t *)&v19)&& v20 != v19)
  {
    memset(&v18, 0, sizeof(v18));
    unsigned __int16 v16 = 0;
    uint64_t v17 = 0;
    std::string __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v19, (uint64_t)v20, v20 - v19);
    gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)this + 140, &__p, &v18);
    if (__p)
    {
      unsigned __int16 v16 = __p;
      operator delete(__p);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      unsigned __int16 v5 = &v18;
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned __int16 v5 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxReq,%s\n", (unint64_t)v4, "ADP", 68, "Ga22_27GnssStopFWTest", v20 - v19, (const char *)v5);
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
    }
    gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip((gnssTest::GnssAdaptDeviceTest *)this, (unsigned __int16)((_WORD)v20 - (_WORD)v19), v19);
    if (gnssOsa_SemWaitTimeOut(this[10], 0x7D0u))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopTest\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga22_27GnssStopFWTest", 1543);
        LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_22;
      }
    }
    else if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      goto LABEL_22;
    }
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "Ga22_27GnssStopFWTest");
    LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
LABEL_22:
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    goto LABEL_24;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Stop Zx mesg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "Ga22_27GnssStopFWTest", 775);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga22_27GnssStopFWTest");
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
  }
LABEL_24:
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
}

void sub_22B9E772C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest23Ga22_19TriggerPowerModeENS_9PowerModeE_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 137) = 0;
  return result;
}

void gnssTest::GnssAdaptDeviceTest::Ga22_20HandleMePowerModeRsp(NSObject **a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_20HandleMePowerModeRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  memset(&v50, 0, sizeof(v50));
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)a1 + 140, &__p, &v50);
  if (__p)
  {
    uint64_t v48 = __p;
    operator delete(__p);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v7 = &v50;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxRsp,%s\n", (unint64_t)v6, "ADP", 68, "Ga22_20HandleMePowerModeRsp", *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (const char *)v7);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  int v46 = 0;
  *(_DWORD *)uint64_t __str = 0;
  gnssTest::GnssAdaptDeviceTest::Ga21_01GetPlatformType((gnssTest::GnssAdaptDeviceTest *)a1, (unsigned __int8 *)__str);
  if (gnssTest::ZxFactoryHandler::Ga23_12ParseZxMePowerProdMsg((uint64_t)a1 + 140, (void *)a2, &v46, (*(_DWORD *)__str - 1) < 3))
  {
    uint64_t v42 = 0;
    uint64_t v43 = &v42;
    uint64_t v44 = 0x2000000000;
    int v45 = 0;
    uint64_t v9 = a1[9];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_20HandleMePowerModeRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke;
    block[3] = &unk_2648F5960;
    void block[4] = &v42;
    void block[5] = a1;
    int v41 = v46;
    dispatch_sync(v9, block);
    if (v46 == *((_DWORD *)v43 + 6))
    {
      if (v46)
      {
        if (v46 == 4 && LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CurPowState LP entered\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 73, "Ga22_20HandleMePowerModeRsp");
          LbsOsaTrace_WriteLog(0x18u, __str, v11, 4, 1);
        }
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CurPowState Normal\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 73, "Ga22_20HandleMePowerModeRsp");
          LbsOsaTrace_WriteLog(0x18u, __str, v26, 4, 1);
        }
        unsigned __int16 v27 = a1[9];
        v39[0] = MEMORY[0x263EF8330];
        v39[1] = 0x40000000;
        _DWORD v39[2] = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_20HandleMePowerModeRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2;
        int8x16_t v39[3] = &__block_descriptor_tmp_70;
        v39[4] = a1;
        dispatch_sync(v27, v39);
      }
      uint64_t v28 = a1[9];
      *(void *)uint64_t __str = MEMORY[0x263EF8330];
      uint64_t v52 = 0x40000000;
      uint64_t v53 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
      char v54 = &__block_descriptor_tmp_98_0;
      char v55 = a1;
      int v56 = 1;
      dispatch_sync(v28, __str);
      if (!gnssOsa_SemRelease(a1[10]))
      {
        uint64_t v31 = a1[9];
        *(void *)uint64_t __str = MEMORY[0x263EF8330];
        uint64_t v52 = 0x40000000;
        uint64_t v53 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
        char v54 = &__block_descriptor_tmp_98_0;
        char v55 = a1;
        int v56 = 8;
        dispatch_sync(v31, __str);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v32 = mach_continuous_time();
          double v33 = *(double *)&g_MacClockTicksToMsRelation;
          double v34 = __error();
          unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v33 * (double)v32), "ADP", 87, "Ga22_20HandleMePowerModeRsp", 1542, *v34);
          LbsOsaTrace_WriteLog(0x18u, __str, v35, 2, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v36 = mach_continuous_time();
          unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "Ga22_20HandleMePowerModeRsp");
          LbsOsaTrace_WriteLog(0x18u, __str, v37, 5, 1);
        }
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v21 = a1[9];
      v38[0] = MEMORY[0x263EF8330];
      v38[1] = 0x40000000;
      v38[2] = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_20HandleMePowerModeRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_3;
      v38[3] = &__block_descriptor_tmp_71_0;
      v38[4] = a1;
      dispatch_sync(v21, v38);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PwrModeRsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 69, "Ga22_20HandleMePowerModeRsp", 1302);
        LbsOsaTrace_WriteLog(0x18u, __str, v23, 0, 1);
      }
      uint64_t v24 = a1[9];
      *(void *)uint64_t __str = MEMORY[0x263EF8330];
      uint64_t v52 = 0x40000000;
      uint64_t v53 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
      char v54 = &__block_descriptor_tmp_98_0;
      char v55 = a1;
      int v56 = 8;
      dispatch_sync(v24, __str);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "Ga22_20HandleMePowerModeRsp");
      LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
    }
LABEL_35:
    _Block_object_dispose(&v42, 8);
    goto LABEL_36;
  }
  unsigned __int16 v12 = a1[9];
  *(void *)uint64_t __str = MEMORY[0x263EF8330];
  uint64_t v52 = 0x40000000;
  uint64_t v53 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
  char v54 = &__block_descriptor_tmp_98_0;
  char v55 = a1;
  int v56 = 8;
  dispatch_sync(v12, __str);
  if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    double v14 = *(double *)&g_MacClockTicksToMsRelation;
    uint64_t v15 = __error();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v14 * (double)v13), "ADP", 87, "Ga22_20HandleMePowerModeRsp", 1542, *v15);
    LbsOsaTrace_WriteLog(0x18u, __str, v16, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Parse Pwr Mode Rsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "Ga22_20HandleMePowerModeRsp", 776);
    LbsOsaTrace_WriteLog(0x18u, __str, v18, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "Ga22_20HandleMePowerModeRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
  }
LABEL_36:
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

void sub_22B9E8190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_20HandleMePowerModeRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 124);
  *(_DWORD *)(v1 + 128) = *(_DWORD *)(result + 48);
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_20HandleMePowerModeRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 137) = 0;
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_20HandleMePowerModeRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_3(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 137) = 0;
  return result;
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_21TriggerApSignalGpio(gnssTest::GnssAdaptDeviceTest *this, int a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_21TriggerApSignalGpio");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  double v6 = *((void *)this + 9);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest26Ga22_21TriggerApSignalGpioEj_block_invoke;
  block[3] = &__block_descriptor_tmp_73;
  void block[4] = this;
  dispatch_sync(v6, block);
  uint64_t v44 = 0;
  int v45 = 0;
  uint64_t v46 = 0;
  if (!gnssTest::ZxFactoryHandler::Ga23_22BuildZxApSignalGpioProdMsg((unsigned char *)this + 140, (unint64_t *)&v44, 100)|| v45 == v44)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPIO Enc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "Ga22_21TriggerApSignalGpio", 775);
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga22_21TriggerApSignalGpio");
      LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    }
    uint64_t v16 = 0;
  }
  else
  {
    memset(&v43, 0, sizeof(v43));
    int v41 = 0;
    uint64_t v42 = 0;
    std::string __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v44, (uint64_t)v45, v45 - v44);
    gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)this + 140, &__p, &v43);
    if (__p)
    {
      int v41 = __p;
      operator delete(__p);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v7 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      unsigned __int16 v8 = &v43;
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned __int16 v8 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeoutMs,%u,Size,%u,ZxReq,%s\n", (unint64_t)v7, "ADP", 68, "Ga22_21TriggerApSignalGpio", a2, v45 - v44, (const char *)v8);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
    }
    if (a2 < 200)
    {
      int v10 = 0;
LABEL_23:
      uint64_t v36 = 0;
      unsigned __int16 v37 = &v36;
      uint64_t v38 = 0x2000000000;
      int v39 = 0;
      uint64_t v17 = *((void *)this + 9);
      v35[0] = MEMORY[0x263EF8330];
      v35[1] = 0x40000000;
      unsigned __int16 v35[2] = ___ZN8gnssTest19GnssAdaptDeviceTest26Ga22_21TriggerApSignalGpioEj_block_invoke_2;
      _OWORD v35[3] = &unk_2648F59E8;
      void v35[4] = &v36;
      unsigned char v35[5] = this;
      dispatch_sync(v17, v35);
      if (v10 == *((_DWORD *)v37 + 6))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "Ga22_21TriggerApSignalGpio");
          LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
        }
        uint64_t v16 = 1;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v20 = mach_continuous_time();
          unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Wake cnt mismatch WakeReq,%u,ApWakeEvt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "Ga22_21TriggerApSignalGpio", 770, v10, *((_DWORD *)v37 + 6));
          LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v22 = mach_continuous_time();
          unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "Ga22_21TriggerApSignalGpio");
          LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
        }
        uint64_t v16 = 8;
      }
      _Block_object_dispose(&v36, 8);
    }
    else
    {
      int v10 = a2 / 200;
      int v11 = v10;
      while (1)
      {
        gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip(this, (unsigned __int16)((_WORD)v45 - (_WORD)v44), v44);
        if (gnssOsa_SemWaitTimeOut(*((NSObject **)this + 10), 0xC8u)) {
          break;
        }
        if (gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode(this) != 1)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v30 = mach_continuous_time();
            unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPIO Rsp Fail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "Ga22_21TriggerApSignalGpio", 257);
            LbsOsaTrace_WriteLog(0x18u, __str, v31, 0, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v32 = mach_continuous_time();
            unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "Ga22_21TriggerApSignalGpio");
            LbsOsaTrace_WriteLog(0x18u, __str, v33, 5, 1);
          }
          uint64_t v16 = 8;
          goto LABEL_43;
        }
        if (!--v11) {
          goto LABEL_23;
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        double v25 = *(double *)&g_MacClockTicksToMsRelation;
        unsigned __int16 v26 = __error();
        unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v25 * (double)v24), "ADP", 69, "Ga22_21TriggerApSignalGpio", 1543, *v26);
        LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v28 = mach_continuous_time();
        unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 68, "Ga22_21TriggerApSignalGpio");
        LbsOsaTrace_WriteLog(0x18u, __str, v29, 5, 1);
      }
      uint64_t v16 = 6;
    }
LABEL_43:
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
  }
  if (v44)
  {
    int v45 = v44;
    operator delete(v44);
  }
  return v16;
}

void sub_22B9E8B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest26Ga22_21TriggerApSignalGpioEj_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 112) = 0;
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest26Ga22_21TriggerApSignalGpioEj_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 112);
  return result;
}

void gnssTest::GnssAdaptDeviceTest::Ga22_22HandleApSignalGpioRsp(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_22HandleApSignalGpioRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  memset(&v26, 0, sizeof(v26));
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  gnssTest::ZxHandler::Ga23_00GetZxBufAsStr(a1 + 140, &__p, &v26);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    double v7 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      double v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxRsp,%s\n", (unint64_t)v6, "ADP", 68, "Ga22_22HandleApSignalGpioRsp", *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (const char *)v7);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  if (gnssTest::ZxFactoryHandler::Ga23_23ParseZxApSignalGpioProdMsg((unsigned __int8 *)(a1 + 140), (void *)a2))
  {
    unsigned __int16 v9 = *(NSObject **)(a1 + 72);
    *(void *)uint64_t __str = MEMORY[0x263EF8330];
    uint64_t v28 = 0x40000000;
    unsigned __int16 v29 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
    uint64_t v30 = &__block_descriptor_tmp_98_0;
    uint64_t v31 = a1;
    int v32 = 1;
    dispatch_sync(v9, __str);
    if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a1 + 80))
      && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      double v11 = *(double *)&g_MacClockTicksToMsRelation;
      uint64_t v12 = __error();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v11 * (double)v10), "ADP", 87, "Ga22_22HandleApSignalGpioRsp", 1542, *v12);
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
LABEL_21:
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "Ga22_22HandleApSignalGpioRsp");
      LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
    }
  }
  else
  {
    uint64_t v14 = *(NSObject **)(a1 + 72);
    *(void *)uint64_t __str = MEMORY[0x263EF8330];
    uint64_t v28 = 0x40000000;
    unsigned __int16 v29 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
    uint64_t v30 = &__block_descriptor_tmp_98_0;
    uint64_t v31 = a1;
    int v32 = 8;
    dispatch_sync(v14, __str);
    if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a1 + 80))
      && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      double v16 = *(double *)&g_MacClockTicksToMsRelation;
      uint64_t v17 = __error();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v16 * (double)v15), "ADP", 87, "Ga22_22HandleApSignalGpioRsp", 1542, *v17);
      LbsOsaTrace_WriteLog(0x18u, __str, v18, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AP Sig GPIO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "Ga22_22HandleApSignalGpioRsp", 776);
      LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      goto LABEL_21;
    }
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_22B9E9234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::GnssAdaptDeviceTest::Ga22_23FactoryGpioNotif (gnssTest::GnssAdaptDeviceTest *a1)
{
  int v1 = (int)a1;
  uint64_t v12 = *MEMORY[0x263EF8340];
  GnssAdaptDeviceTestuint64_t Instance = gnssTest::GnssAdaptDeviceTest::Ga21_06GetGnssAdaptDeviceTestInstance(a1);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Notif event,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 73, "Ga22_24HandleGpioNotif", v1);
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 4, 1);
  }
  unsigned __int16 v5 = *(NSObject **)(GnssAdaptDeviceTestInstance + 56);
  *(void *)uint64_t __str = MEMORY[0x263EF8330];
  uint64_t v7 = 0x40000000;
  unsigned __int16 v8 = ___ZN8gnssTest19GnssAdaptDeviceTest22Ga22_24HandleGpioNotifEN7GnssHal16GpioNotificationE_block_invoke;
  unsigned __int16 v9 = &__block_descriptor_tmp_84;
  uint64_t v10 = GnssAdaptDeviceTestInstance;
  int v11 = v1;
  dispatch_async(v5, __str);
}

size_t ___ZN8gnssTest19GnssAdaptDeviceTest22Ga22_24HandleGpioNotifEN7GnssHal16GpioNotificationE_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga22_24HandleGpioNotif_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if ((v5 - 2) >= 4 && v5 != 0)
  {
    if (v5 == 1)
    {
      uint64_t v10 = *(NSObject **)(v2 + 72);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest22Ga22_24HandleGpioNotifEN7GnssHal16GpioNotificationE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_82;
      void block[4] = v2;
      int v14 = 1;
      dispatch_sync(v10, block);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioNotif,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 87, "Ga22_24HandleGpioNotif_block_invoke", 770, *(_DWORD *)(a1 + 40));
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 2, 1);
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga22_24HandleGpioNotif_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
  }
  return result;
}

size_t ___ZN8gnssTest19GnssAdaptDeviceTest22Ga22_24HandleGpioNotifEN7GnssHal16GpioNotificationE_block_invoke_2(size_t result)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 133))
  {
    size_t v2 = result;
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Pwr Mode GPIO event,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 73, "Ga22_24HandleGpioNotif_block_invoke_2", *(_DWORD *)(v2 + 40));
      size_t result = LbsOsaTrace_WriteLog(0x18u, __str, v4, 4, 1);
    }
    *(unsigned char *)(v1 + 132) = 1;
  }
  else
  {
    ++*(_DWORD *)(v1 + 112);
  }
  return result;
}

uint64_t gnssTest::GnssAdaptDeviceTest::Ga22_25TriggerTimeMark(gnssTest::GnssAdaptDeviceTest *this, unsigned int a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_25TriggerTimeMark");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  uint64_t v28 = 0;
  unsigned __int16 v29 = 0;
  uint64_t v30 = 0;
  if (!gnssTest::ZxFactoryHandler::Ga23_24BuildZxTimeMarkProdMsg((uint64_t)this + 140, (unint64_t *)&v28)|| v29 == v28)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Timemark\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "Ga22_25TriggerTimeMark", 775);
      LbsOsaTrace_WriteLog(0x18u, __str, v18, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "Ga22_25TriggerTimeMark");
      LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
    }
    uint64_t StatusCode = 8;
  }
  else
  {
    memset(&v27, 0, sizeof(v27));
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    std::string __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v28, (uint64_t)v29, v29 - v28);
    gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)this + 140, &__p, &v27);
    if (__p)
    {
      uint64_t v25 = __p;
      operator delete(__p);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Size,%u,ZxReq,%s\n", (unint64_t)v6, "ADP", 68, "Ga22_25TriggerTimeMark", v29 - v28, (const char *)v7);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
    }
    unsigned __int16 v9 = *((void *)this + 9);
    *(void *)uint64_t __str = MEMORY[0x263EF8330];
    uint64_t v32 = 0x40000000;
    uint64_t v33 = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_35UpdateTimeMarkStatusEb_block_invoke;
    double v34 = &__block_descriptor_tmp_100_0;
    unsigned __int16 v35 = this;
    char v36 = 0;
    dispatch_sync(v9, __str);
    gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip(this, (unsigned __int16)((_WORD)v29 - (_WORD)v28), v28);
    if (gnssOsa_SemWaitTimeOut(*((NSObject **)this + 10), a2))
    {
      gnssTest::GnssAdaptDeviceTest::Ga22_27GnssStopFWTest((NSObject **)this);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        double v11 = *(double *)&g_MacClockTicksToMsRelation;
        unsigned __int16 v12 = __error();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v11 * (double)v10), "ADP", 69, "Ga22_25TriggerTimeMark", 1543, *v12);
        LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga22_25TriggerTimeMark");
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
      }
      uint64_t StatusCode = 6;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "Ga22_25TriggerTimeMark");
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
      }
      uint64_t StatusCode = gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode(this);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  if (v28)
  {
    unsigned __int16 v29 = v28;
    operator delete(v28);
  }
  return StatusCode;
}

void sub_22B9E9CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::GnssAdaptDeviceTest::Ga22_26HandleTimeMarkRsp(NSObject **a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga22_26HandleTimeMarkRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  int v69 = 0;
  unsigned __int16 v68 = 0;
  if (gnssTest::ZxFactoryHandler::Ga23_25ParseZxTimeMarkProdMsg((uint64_t)a1 + 140, (uint64_t *)a2, &v69, &v68))
  {
    memset(&v66, 0, sizeof(v66));
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    std::string __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    gnssTest::ZxHandler::Ga23_00GetZxBufAsStr((uint64_t)a1 + 140, &__p, &v66);
    if (__p)
    {
      uint64_t v64 = __p;
      operator delete(__p);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = &v66;
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TTick,%u,SubMsCount,%u,Size,%u,ZxRsp,%s\n", (unint64_t)v6, "ADP", 73, "Ga22_26HandleTimeMarkRsp", v69, v68, *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (const char *)v7);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 4, 1);
    }
    uint64_t v59 = 0;
    uint64_t v60 = &v59;
    uint64_t v61 = 0x2000000000;
    char v62 = 0;
    unsigned __int16 v9 = a1[9];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2;
    block[3] = &unk_2648F5A70;
    void block[4] = &v59;
    void block[5] = a1;
    dispatch_sync(v9, block);
    if (*((unsigned char *)v60 + 24))
    {
      uint64_t v10 = a1[6];
      v55[0] = MEMORY[0x263EF8330];
      v55[1] = 0x40000000;
      void v55[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_5;
      v55[3] = &__block_descriptor_tmp_94;
      _OWORD v55[4] = a1;
      dispatch_async(v10, v55);
      double v11 = a1[9];
      *(void *)uint64_t __str = MEMORY[0x263EF8330];
      uint64_t v71 = 0x40000000;
      uint64_t v72 = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_35UpdateTimeMarkStatusEb_block_invoke;
      uint64_t v73 = &__block_descriptor_tmp_100_0;
      char v74 = a1;
      LOBYTE(v75) = 0;
      dispatch_sync(v11, __str);
      unsigned __int16 v12 = a1[9];
      *(void *)uint64_t __str = MEMORY[0x263EF8330];
      uint64_t v71 = 0x40000000;
      uint64_t v72 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
      uint64_t v73 = &__block_descriptor_tmp_98_0;
      char v74 = a1;
      int v75 = 1;
      dispatch_sync(v12, __str);
      if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        double v14 = *(double *)&g_MacClockTicksToMsRelation;
        unsigned __int16 v15 = __error();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v14 * (double)v13), "ADP", 87, "Ga22_26HandleTimeMarkRsp", 1542, *v15);
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 2, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeMark Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "Ga22_26HandleTimeMarkRsp");
        LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
      }
    }
    else
    {
      if (v68 && v69)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeMark failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "Ga22_26HandleTimeMarkRsp");
          LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
        }
        uint64_t v31 = a1[6];
        v57[0] = MEMORY[0x263EF8330];
        v57[1] = 0x40000000;
        void v57[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_3;
        v57[3] = &__block_descriptor_tmp_91;
        void v57[4] = a1;
        dispatch_async(v31, v57);
        uint64_t v32 = a1[9];
        *(void *)uint64_t __str = MEMORY[0x263EF8330];
        uint64_t v71 = 0x40000000;
        uint64_t v72 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
        uint64_t v73 = &__block_descriptor_tmp_98_0;
        char v74 = a1;
        int v75 = 8;
        dispatch_sync(v32, __str);
        if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v33 = mach_continuous_time();
          double v34 = *(double *)&g_MacClockTicksToMsRelation;
          unsigned __int16 v35 = __error();
          unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v34 * (double)v33), "ADP", 87, "Ga22_26HandleTimeMarkRsp", 1542, *v35);
          LbsOsaTrace_WriteLog(0x18u, __str, v36, 2, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v37 = mach_continuous_time();
          unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimemarkRsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 69, "Ga22_26HandleTimeMarkRsp", 776);
          LbsOsaTrace_WriteLog(0x18u, __str, v38, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v39 = mach_continuous_time();
          unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 68, "Ga22_26HandleTimeMarkRsp");
          LbsOsaTrace_WriteLog(0x18u, __str, v40, 5, 1);
        }
        goto LABEL_37;
      }
      int v41 = a1[9];
      *(void *)uint64_t __str = MEMORY[0x263EF8330];
      uint64_t v71 = 0x40000000;
      uint64_t v72 = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_35UpdateTimeMarkStatusEb_block_invoke;
      uint64_t v73 = &__block_descriptor_tmp_100_0;
      char v74 = a1;
      LOBYTE(v75) = 1;
      dispatch_sync(v41, __str);
      if ((Hal25_TriggerTimeMarkStrobe(0) & 1) == 0)
      {
        uint64_t v44 = a1[6];
        v56[0] = MEMORY[0x263EF8330];
        v56[1] = 0x40000000;
        void v56[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_4;
        uint64_t v56[3] = &__block_descriptor_tmp_92;
        v56[4] = a1;
        dispatch_async(v44, v56);
        int v45 = a1[9];
        *(void *)uint64_t __str = MEMORY[0x263EF8330];
        uint64_t v71 = 0x40000000;
        uint64_t v72 = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_35UpdateTimeMarkStatusEb_block_invoke;
        uint64_t v73 = &__block_descriptor_tmp_100_0;
        char v74 = a1;
        LOBYTE(v75) = 0;
        dispatch_sync(v45, __str);
        uint64_t v46 = a1[9];
        *(void *)uint64_t __str = MEMORY[0x263EF8330];
        uint64_t v71 = 0x40000000;
        uint64_t v72 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
        uint64_t v73 = &__block_descriptor_tmp_98_0;
        char v74 = a1;
        int v75 = 8;
        dispatch_sync(v46, __str);
        if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v47 = mach_continuous_time();
          double v48 = *(double *)&g_MacClockTicksToMsRelation;
          uint64_t v49 = __error();
          unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v48 * (double)v47), "ADP", 87, "Ga22_26HandleTimeMarkRsp", 1542, *v49);
          LbsOsaTrace_WriteLog(0x18u, __str, v50, 2, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v51 = mach_continuous_time();
          unsigned __int16 v52 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Timemark Hal Trigger\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), "ADP", 69, "Ga22_26HandleTimeMarkRsp", 776);
          LbsOsaTrace_WriteLog(0x18u, __str, v52, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v53 = mach_continuous_time();
          unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "ADP", 68, "Ga22_26HandleTimeMarkRsp");
          LbsOsaTrace_WriteLog(0x18u, __str, v54, 5, 1);
        }
        goto LABEL_37;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v42 = mach_continuous_time();
      unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 68, "Ga22_26HandleTimeMarkRsp");
      LbsOsaTrace_WriteLog(0x18u, __str, v43, 5, 1);
    }
LABEL_37:
    _Block_object_dispose(&v59, 8);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v19 = a1[6];
  v67[0] = MEMORY[0x263EF8330];
  v67[1] = 0x40000000;
  v67[2] = ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke;
  v67[3] = &__block_descriptor_tmp_86;
  v67[4] = a1;
  dispatch_async(v19, v67);
  unsigned __int16 v20 = a1[9];
  *(void *)uint64_t __str = MEMORY[0x263EF8330];
  uint64_t v71 = 0x40000000;
  uint64_t v72 = ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke;
  uint64_t v73 = &__block_descriptor_tmp_98_0;
  char v74 = a1;
  int v75 = 8;
  dispatch_sync(v20, __str);
  if (!gnssOsa_SemRelease(a1[10]) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    double v22 = *(double *)&g_MacClockTicksToMsRelation;
    unsigned __int16 v23 = __error();
    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v22 * (double)v21), "ADP", 87, "Ga22_26HandleTimeMarkRsp", 1542, *v23);
    LbsOsaTrace_WriteLog(0x18u, __str, v24, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v25 = mach_continuous_time();
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimemarkRsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 69, "Ga22_26HandleTimeMarkRsp", 776);
    LbsOsaTrace_WriteLog(0x18u, __str, v26, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v27 = mach_continuous_time();
    unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 68, "Ga22_26HandleTimeMarkRsp");
    LbsOsaTrace_WriteLog(0x18u, __str, v28, 5, 1);
  }
}

void sub_22B9EAAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);

  gnssTest::GnssAdaptDeviceTest::Ga22_27GnssStopFWTest(v1);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 139);
  return result;
}

void ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);

  gnssTest::GnssAdaptDeviceTest::Ga22_27GnssStopFWTest(v1);
}

void ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_4(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);

  gnssTest::GnssAdaptDeviceTest::Ga22_27GnssStopFWTest(v1);
}

void ___ZN8gnssTest19GnssAdaptDeviceTest24Ga22_26HandleTimeMarkRspERNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke_5(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);

  gnssTest::GnssAdaptDeviceTest::Ga22_27GnssStopFWTest(v1);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_33SetStatusCodeEN4gnss6ResultE_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 120) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest20Ga22_34GetStatusCodeEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 120);
  return result;
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest27Ga22_35UpdateTimeMarkStatusEb_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 139) = *(unsigned char *)(result + 40);
  return result;
}

void *std::vector<gnssTest::RfMeasurement>::__init_with_size[abi:ne180100]<gnssTest::RfMeasurement*,gnssTest::RfMeasurement*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned __int16 v5 = result;
    if (a4 >= 0x666666666666667) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    size_t result = operator new(40 * a4);
    unsigned __int16 v8 = result;
    *unsigned __int16 v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      size_t result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22B9EAEB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::Ga06_00GnssPeriodicFixCB(gnss::GnssAdaptDevice *a1, uint64_t a2, uint64_t *a3)
{
  int v4 = (int)a1;
  uint64_t v83 = *MEMORY[0x263EF8340];
  Deviceuint64_t Instance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    uint64_t v6 = DeviceInstance;
    uint64_t v7 = *a3;
    unsigned __int16 v8 = (long long *)a3[1];
    int v9 = *((_DWORD *)a3 + 4);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Result,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 73, "Ga06_01ReportPvtm", v4, v9);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 4, 1);
    }
    if (v4)
    {
      if (v4 == 8)
      {
        unsigned __int16 v12 = *(NSObject **)(v6 + 288);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 0x40000000;
        block[2] = ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke;
        block[3] = &__block_descriptor_tmp_12;
        void block[4] = v6;
        char v76 = 8;
        dispatch_async(v12, block);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PVTM Resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga06_01ReportPvtm", 769, v4);
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
      }
    }
    else if (v9 == 2)
    {
      if (v7) {
        operator new();
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v43 = mach_continuous_time();
        unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NavData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "ADP", 69, "Ga06_01ReportPvtm", 770);
        LbsOsaTrace_WriteLog(0x18u, __str, v44, 0, 1);
      }
    }
    else if (v9 == 4)
    {
      if (v8)
      {
        unsigned __int16 v15 = &v51;
        uint64_t v51 = 0;
        unsigned __int16 v52 = &v51;
        uint64_t v53 = 0x13802000000;
        unsigned __int16 v54 = __Block_byref_object_copy__3;
        char v55 = __Block_byref_object_dispose__3;
        unsigned __int16 v59 = 0;
        __int16 v62 = 0;
        uint64_t v72 = 0;
        __int16 v73 = 0;
        uint64_t v74 = 0;
        long long v56 = 0u;
        long long v57 = 0u;
        memset(v58, 0, sizeof(v58));
        *(void *)uint64_t v60 = 0;
        *(void *)((char *)&v60[2] + 1) = 0;
        *(void *)&v60[7] = 0;
        char v61 = 0;
        uint64_t v64 = 0;
        uint64_t v63 = 0;
        *(void *)((char *)&v65[1] + 3) = 0;
        *(void *)uint64_t v65 = 0;
        *(void *)&v65[5] = 0;
        *(void *)&v65[7] = 0;
        __int16 v66 = 0;
        v68[0] = 0;
        uint64_t v67 = 0;
        *(void *)((char *)v68 + 6) = 0;
        memset(v71, 0, sizeof(v71));
        long long v70 = 0u;
        long long v69 = 0u;
        unsigned __int16 v59 = *((_WORD *)v8 + 32);
        int v16 = v59;
        if (v59)
        {
          int v17 = *((unsigned __int16 *)v8 + 32);
          unsigned __int16 v18 = (char *)operator new[](176 * *((unsigned __int16 *)v8 + 32), MEMORY[0x263F8C180]);
          if (!v18)
          {
            *(void *)uint64_t v60 = 0;
            snprintf((char *)block, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_01ReportPvtm", 101, "Memory allocation failed for SigMeas ");
            if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v45 = mach_continuous_time();
              unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "OSA", 69, "Ga06_01ReportPvtm", (const char *)block);
              LbsOsaTrace_WriteLog(0xEu, __str, v46, 0, 1);
            }
            if (gp_Logger) {
              (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
            }
            __assert_rtn("Ga06_01ReportPvtm", "ga06GnssPvtmUtils.cpp", 101, "false && \"Memory allocation failed for SigMeas \"");
          }
          if (v17)
          {
            uint64_t v19 = v18;
            do
            {
              *(_DWORD *)uint64_t v19 = 0xFFFF;
              *((_WORD *)v19 + 2) = 0;
              *((_WORD *)v19 + 37) = 0;
              *((void *)v19 + 15) = 0;
              v19[128] = 0;
              *(_DWORD *)(v19 + 170) = 0;
              *((void *)v19 + 2) = 0;
              *((void *)v19 + 3) = 0;
              *((void *)v19 + 1) = 0;
              double v19[32] = 0;
              *(_OWORD *)(v19 + 40) = 0uLL;
              *(_OWORD *)(v19 + 56) = 0uLL;
              v19[72] = 0;
              *((_OWORD *)v19 + 5) = 0uLL;
              *((_OWORD *)v19 + 6) = 0uLL;
              *(void *)(v19 + 111) = 0;
              *(_OWORD *)(v19 + 136) = 0uLL;
              *(_OWORD *)(v19 + 152) = 0uLL;
              v19[168] = 0;
              v19 += 176;
            }
            while (v19 != &v18[176 * v17]);
          }
          *(void *)uint64_t v60 = v18;
          memcpy_s("Ga06_01ReportPvtm", 108, v18, 176 * v16, *((const void **)v8 + 9), 176 * *((unsigned __int16 *)v8 + 32));
          unsigned __int16 v15 = v52;
        }
        int v20 = *((unsigned __int16 *)v8 + 120);
        *((_WORD *)v15 + 140) = v20;
        if (v20)
        {
          int v21 = *((unsigned __int16 *)v8 + 120);
          double v22 = (char *)operator new[](104 * *((unsigned __int16 *)v8 + 120), MEMORY[0x263F8C180]);
          if (!v22)
          {
            v15[36] = 0;
            snprintf((char *)block, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_01ReportPvtm", 118, "Memory allocation failed for SVUsage");
            if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v47 = mach_continuous_time();
              unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "OSA", 69, "Ga06_01ReportPvtm", (const char *)block);
              LbsOsaTrace_WriteLog(0xEu, __str, v48, 0, 1);
            }
            if (gp_Logger) {
              (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
            }
            __assert_rtn("Ga06_01ReportPvtm", "ga06GnssPvtmUtils.cpp", 118, "false && \"Memory allocation failed for SVUsage\"");
          }
          if (v21)
          {
            unsigned __int16 v23 = v22;
            do
            {
              *(_WORD *)unsigned __int16 v23 = 0;
              int v23[2] = 0;
              *((void *)v23 + 1) = 0;
              *((void *)v23 + 2) = 0;
              *((_WORD *)v23 + 12) = 0;
              *((_OWORD *)v23 + 2) = 0uLL;
              *((_OWORD *)v23 + 3) = 0uLL;
              *((_OWORD *)v23 + 4) = 0uLL;
              *((_OWORD *)v23 + 5) = 0uLL;
              *((void *)v23 + 12) = 0;
              v23 += 104;
            }
            while (v23 != &v22[104 * v21]);
          }
          v15[36] = (uint64_t)v22;
          memcpy_s("Ga06_01ReportPvtm", 127, v22, 104 * *((unsigned __int16 *)v15 + 140), *((const void **)v8 + 31), 104 * *((unsigned __int16 *)v8 + 120));
          unsigned __int16 v15 = v52;
        }
        int v24 = *((unsigned __int16 *)v8 + 128);
        *((_WORD *)v15 + 148) = v24;
        if (v24)
        {
          int v25 = *((unsigned __int16 *)v8 + 128);
          unsigned __int16 v26 = (char *)operator new[](312 * *((unsigned __int16 *)v8 + 128), MEMORY[0x263F8C180]);
          if (!v26)
          {
            v15[38] = 0;
            snprintf((char *)block, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_01ReportPvtm", 137, "Memory allocation failed for SVState");
            if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v49 = mach_continuous_time();
              unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "OSA", 69, "Ga06_01ReportPvtm", (const char *)block);
              LbsOsaTrace_WriteLog(0xEu, __str, v50, 0, 1);
            }
            if (gp_Logger) {
              (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
            }
            __assert_rtn("Ga06_01ReportPvtm", "ga06GnssPvtmUtils.cpp", 137, "false && \"Memory allocation failed for SVState\"");
          }
          if (v25)
          {
            uint64_t v27 = v26;
            do
            {
              char *v27 = 0;
              *((_WORD *)v27 + 1) = 0;
              void v27[4] = 0;
              v27[8] = 0;
              *((void *)v27 + 21) = 0;
              *((_WORD *)v27 + 88) = 0;
              *(_DWORD *)(v27 + 178) = 0;
              *((_OWORD *)v27 + 1) = 0uLL;
              *((_OWORD *)v27 + 2) = 0uLL;
              *((_OWORD *)v27 + 3) = 0uLL;
              *((_OWORD *)v27 + 4) = 0uLL;
              *((_OWORD *)v27 + 5) = 0uLL;
              *((_OWORD *)v27 + 6) = 0uLL;
              *((_OWORD *)v27 + 7) = 0uLL;
              *((_OWORD *)v27 + 8) = 0uLL;
              *((_OWORD *)v27 + 9) = 0uLL;
              *(void *)(v27 + 157) = 0;
              *(_OWORD *)(v27 + 200) = 0uLL;
              *(_OWORD *)(v27 + 216) = 0uLL;
              *(_OWORD *)(v27 + 232) = 0uLL;
              *(_OWORD *)(v27 + 248) = 0uLL;
              unsigned __int16 v28 = v27 + 312;
              *(_OWORD *)(v27 + 184) = 0uLL;
              uint64_t v29 = v27 + 184;
              _OWORD v29[5] = 0uLL;
              v29[6] = 0uLL;
              v29[7] = 0uLL;
              uint64_t v27 = v28;
            }
            while (v28 != &v26[312 * v25]);
          }
          v15[38] = (uint64_t)v26;
          memcpy_s("Ga06_01ReportPvtm", 148, v26, 312 * *((unsigned __int16 *)v15 + 148), *((const void **)v8 + 33), (312 * v25));
          unsigned __int16 v15 = v52;
        }
        long long v30 = *v8;
        long long v31 = v8[1];
        long long v32 = v8[2];
        *(_OWORD *)((char *)v15 + 84) = *(long long *)((char *)v8 + 44);
        *(_OWORD *)(v15 + 9) = v32;
        *(_OWORD *)(v15 + 7) = v31;
        *(_OWORD *)(v15 + 5) = v30;
        long long v33 = v8[9];
        long long v34 = v8[10];
        long long v35 = v8[8];
        *(_OWORD *)(v15 + 19) = v8[7];
        *(_OWORD *)(v15 + 25) = v34;
        *(_OWORD *)(v15 + 23) = v33;
        *(_OWORD *)(v15 + 21) = v35;
        long long v36 = v8[13];
        long long v37 = v8[14];
        long long v38 = v8[12];
        *(_OWORD *)(v15 + 27) = v8[11];
        *(_OWORD *)(v15 + 33) = v37;
        *(_OWORD *)(v15 + 31) = v36;
        *(_OWORD *)(v15 + 29) = v38;
        long long v39 = v8[5];
        *(_OWORD *)(v15 + 17) = v8[6];
        *(_OWORD *)(v15 + 15) = v39;
        unsigned __int16 v40 = *(NSObject **)(v6 + 288);
        *(void *)uint64_t __str = MEMORY[0x263EF8330];
        uint64_t v78 = 0x40000000;
        double v79 = ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_14;
        double v80 = &unk_2648F5B80;
        uint64_t v82 = v6;
        unsigned int v81 = &v51;
        dispatch_async(v40, __str);
        _Block_object_dispose(&v51, 8);
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v41 = mach_continuous_time();
        unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeasData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 69, "Ga06_01ReportPvtm", 770);
        LbsOsaTrace_WriteLog(0x18u, __str, v42, 0, 1);
      }
    }
  }
}

void sub_22B9EBA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

size_t ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Positioning Session Aborted,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga06_01ReportPvtm_block_invoke", 1025, *(unsigned __int8 *)(a1 + 40));
    size_t result = LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
  }
  *(unsigned char *)(v2 + 89) = 0;
  return result;
}

void *__Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 40);
  uint64_t v3 = (const void *)(a2 + 40);

  return memcpy(v2, v3, 0x110uLL);
}

uint64_t *___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_14(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v400 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v367 = 0;
  v368 = &v367;
  uint64_t v369 = 0x3002000000;
  v370 = __Block_byref_object_copy__15;
  v371 = __Block_byref_object_dispose__16;
  uint64_t v372 = 0;
  uint64_t v3 = *(void *)(v2 + 280);
  uint64_t v342 = v2;
  if ((v3 & 2) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    unsigned __int16 v5 = (char *)operator new(0x88uLL, MEMORY[0x263F8C180]);
    if (!v5)
    {
      v360 = 0;
      snprintf(v385, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_04GetMeasReport", 525, "Memory allocation failed for Measurement Report");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v327 = mach_continuous_time();
        unsigned __int16 v328 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v327), "OSA", 69, "Ga06_04GetMeasReport", v385);
        LbsOsaTrace_WriteLog(0xEu, __str, v328, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_04GetMeasReport", "ga06GnssPvtmUtils.cpp", 525, "false && \"Memory allocation failed for Measurement Report\"");
    }
    *(void *)unsigned __int16 v5 = -1;
    _Q0 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(v5 + 8) = _Q0;
    *(int64x2_t *)(v5 + 24) = _Q0;
    *((_WORD *)v5 + 20) = 0;
    int64x2_t v344 = _Q0;
    *((int64x2_t *)v5 + 3) = _Q0;
    *((int32x2_t *)v5 + 8) = vdup_n_s32(0x7FC00000u);
    *((_DWORD *)v5 + 18) = 2143289344;
    *((void *)v5 + 10) = 0x8000000000000000;
    __asm { FMOV            V0.2S, #-1.0 }
    *((void *)v5 + 11) = _Q0.i64[0];
    *((void *)v5 + 12) = 0x7FF8000000000000;
    *((_DWORD *)v5 + 26) = -1082130432;
    *((void *)v5 + 15) = 0;
    *((void *)v5 + 16) = 0;
    *((void *)v5 + 14) = 0;
    v360 = v5;
    if (*(unsigned __int16 *)(v4 + 104) >= 0x100u) {
      uint64_t v11 = 256;
    }
    else {
      uint64_t v11 = *(unsigned __int16 *)(v4 + 104);
    }
    uint64_t v347 = v11;
    if (v11)
    {
      uint64_t v12 = 0;
      int32x4_t v343 = vdupq_n_s32(0x7FC00000u);
      do
      {
        *(_DWORD *)v374 = 0;
        *(_WORD *)&v374[4] = 0;
        v374[6] = 127;
        *(void *)&v374[8] = 0;
        *(_DWORD *)&v374[15] = 0;
        memset(&v374[24], 255, 24);
        *(void *)&long long v375 = 0x7FF8000000000000;
        DWORD2(v375) = -1082130432;
        long long v376 = xmmword_22BB43F90;
        long long v377 = xmmword_22BB43F90;
        long long v378 = xmmword_22BB43F90;
        v379[0] = 1;
        *(void *)&v379[8] = -1;
        *(void *)&v379[16] = -1;
        *(_OWORD *)&v379[24] = xmmword_22BB43F90;
        v379[40] = 0;
        v380 = 0;
        float v381 = -1.0;
        __int16 v382 = 0;
        uint64_t v13 = *(void *)(v4 + 112);
        if (v13)
        {
          if (*(unsigned __int16 *)(v4 + 104) <= (unsigned __int16)v12)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v16 = mach_continuous_time();
              unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Indx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "Ga06_05GetMeasSvId", 514);
              LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
            }
          }
          else
          {
            switch(*(unsigned char *)(v13 + 176 * v12 + 2))
            {
              case 0:
                *(_DWORD *)v374 = 0;
                goto LABEL_24;
              case 1:
              case 2:
              case 3:
                int v14 = *(unsigned __int16 *)(v13 + 176 * v12 + 4);
                if ((v14 - 1) <= 0x1F)
                {
                  *(_DWORD *)v374 = 1;
                  goto LABEL_23;
                }
                if ((v14 - 193) <= 9)
                {
                  int v18 = 16;
                  goto LABEL_22;
                }
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v37 = mach_continuous_time();
                  unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PRN,%d,Signal,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 87, "Ga06_05GetMeasSvId", 770, *(__int16 *)(*(void *)(v4 + 112) + 176 * v12 + 4), *(unsigned __int8 *)(*(void *)(v4 + 112) + 176 * v12 + 2));
                  LbsOsaTrace_WriteLog(0x18u, __str, v38, 2, 1);
                }
                break;
              case 4:
                __int16 v27 = *(_WORD *)(v13 + 176 * v12 + 4);
                if ((unsigned __int16)(v27 + 7) > 0xDu)
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v39 = mach_continuous_time();
                    unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLON SvID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 87, "Ga06_05GetMeasSvId", 772, *(__int16 *)(*(void *)(v4 + 112) + 176 * v12 + 4));
                    LbsOsaTrace_WriteLog(0x18u, __str, v40, 2, 1);
                  }
                  break;
                }
                *(_DWORD *)v374 = 2;
                v374[6] = v27;
                int v28 = *(__int16 *)(v13 + 176 * v12);
                if (v28 < 0) {
                  goto LABEL_24;
                }
                unsigned int v29 = (unsigned __int16)v28;
                if ((unsigned __int16)v28 >= *(unsigned __int16 *)(v4 + 280)) {
                  goto LABEL_24;
                }
                uint64_t v30 = *(void *)(v4 + 288);
                if (!v30) {
                  goto LABEL_24;
                }
                if (*(unsigned __int8 *)(v30 + 104 * v29 + 1) - 25 <= 0xFFFFFFE7)
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v31 = mach_continuous_time();
                    unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLON SlotNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 87, "Ga06_05GetMeasSvId", 772, *(unsigned __int8 *)(*(void *)(v4 + 288) + 104 * v29 + 1));
                    LbsOsaTrace_WriteLog(0x18u, __str, v32, 2, 1);
                  }
                  break;
                }
                v374[4] = *(unsigned char *)(v30 + 104 * v29 + 1);
                switch(*(unsigned char *)(v30 + 104 * v29 + 2))
                {
                  case 0:
                  case 1:
                    v374[5] = 0;
                    break;
                  case 2:
                    v374[5] = 1;
                    break;
                  case 3:
                    char v125 = 2;
                    goto LABEL_133;
                  case 4:
                    char v125 = 3;
LABEL_133:
                    v374[5] = v125;
                    break;
                  default:
                    v374[5] = 0;
                    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v126 = mach_continuous_time();
                      unsigned __int16 v127 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLON SlotNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v126), "ADP", 87, "Ga06_05GetMeasSvId", 770, *(unsigned __int8 *)(*(void *)(v4 + 288) + 104 * v29 + 2));
                      LbsOsaTrace_WriteLog(0x18u, __str, v127, 2, 1);
                    }
                    break;
                }
                goto LABEL_24;
              case 5:
              case 6:
                int v14 = *(unsigned __int16 *)(v13 + 176 * v12 + 4);
                if ((v14 - 1) <= 0x3E)
                {
                  int v18 = 4;
                  goto LABEL_22;
                }
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v25 = mach_continuous_time();
                  unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BEID SvID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 87, "Ga06_05GetMeasSvId", 770, *(__int16 *)(*(void *)(v4 + 112) + 176 * v12 + 4));
                  LbsOsaTrace_WriteLog(0x18u, __str, v26, 2, 1);
                }
                break;
              case 7:
              case 8:
                int v14 = *(unsigned __int16 *)(v13 + 176 * v12 + 4);
                if ((v14 - 1) > 0x31)
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v33 = mach_continuous_time();
                    unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GAL SvId,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 87, "Ga06_05GetMeasSvId", 772, *(__int16 *)(*(void *)(v4 + 112) + 176 * v12 + 4));
                    LbsOsaTrace_WriteLog(0x18u, __str, v34, 2, 1);
                  }
                }
                else
                {
                  int v18 = 8;
LABEL_22:
                  *(_DWORD *)v374 = v18;
LABEL_23:
                  v374[4] = v14;
LABEL_24:
                  uint64_t v19 = *(void *)(v4 + 112);
                  if (v19)
                  {
                    uint64_t v20 = v19 + 176 * v12;
                    int v22 = *(unsigned __int8 *)(v20 + 2);
                    int v21 = (unsigned __int8 *)(v20 + 2);
                    switch(v22)
                    {
                      case 0:
                      case 9:
                        v374[8] = 0;
                        break;
                      case 1:
                        v374[8] = 1;
                        goto LABEL_60;
                      case 2:
                        v374[8] = 2;
                        uint64_t v42 = v19 + 176 * v12;
                        v374[9] = *(unsigned char *)(v42 + 32) & 1;
                        v374[10] = *(unsigned char *)(v42 + 32) & 1;
                        goto LABEL_54;
                      case 3:
                        char v41 = 3;
                        goto LABEL_59;
                      case 4:
                        v374[8] = 4;
                        uint64_t v42 = v19 + 176 * v12;
                        *(_WORD *)&v374[9] = *(unsigned char *)(v42 + 32) & 1;
LABEL_54:
                        v374[11] = (*(unsigned char *)(v42 + 32) & 2) != 0;
                        v374[12] = (*(unsigned char *)(v42 + 32) & 4) != 0;
                        v374[13] = (*(unsigned char *)(v42 + 32) & 8) != 0;
                        break;
                      case 5:
                        char v41 = 5;
                        goto LABEL_59;
                      case 6:
                        char v41 = 7;
                        goto LABEL_59;
                      case 7:
                        char v41 = 8;
LABEL_59:
                        v374[8] = v41;
LABEL_60:
                        uint64_t v45 = v19 + 176 * v12;
                        v374[9] = *(unsigned char *)(v45 + 32) & 1;
                        v374[10] = (*(unsigned char *)(v45 + 32) & 2) != 0;
                        v374[11] = (*(unsigned char *)(v45 + 32) & 4) != 0;
                        v374[12] = (*(unsigned char *)(v45 + 32) & 8) != 0;
                        break;
                      case 8:
                        v374[8] = 9;
                        break;
                      default:
                        v374[8] = 0;
                        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v43 = mach_continuous_time();
                          unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Meas SigId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "ADP", 87, "Ga06_06GetMeasSyncState", 770, *v21);
                          LbsOsaTrace_WriteLog(0x18u, __str, v44, 2, 1);
                        }
                        break;
                    }
                    uint64_t v46 = *(void *)(v4 + 112);
                    uint64_t v47 = v46 + 176 * v12;
                    *(_OWORD *)&v374[24] = *(_OWORD *)(v47 + 8);
                    *(void *)&v374[40] = *(void *)(v47 + 24);
                    HIBYTE(v382) = *(unsigned char *)(v47 + 118);
                    *(void *)&long long v375 = *(void *)(v47 + 40);
                    float v48 = *(double *)(v47 + 48);
                    *((float *)&v375 + 2) = v48;
                    long long v376 = *(_OWORD *)(v47 + 80);
                    double v49 = *(double *)(v47 + 104);
                    if (v49 > 0.0)
                    {
                      *(void *)&long long v377 = *(void *)(v46 + 176 * v12 + 96);
                      *((double *)&v377 + 1) = v49;
                    }
                    if (*(unsigned char *)(v46 + 176 * v12 + 128) == 2)
                    {
                      uint64_t v50 = v46 + 176 * v12;
                      *(uint64x2_t *)&v379[8] = vcvtq_u64_f64(*(float64x2_t *)(v50 + 136));
                      *(_OWORD *)&v379[24] = *(_OWORD *)(v50 + 152);
                      v379[40] = 0;
                    }
                    uint64_t v51 = v46 + 176 * v12;
                    float v52 = *(double *)(v51 + 56);
                    float v381 = v52;
                    int v53 = *(unsigned __int8 *)(v51 + 168);
                    if (v53)
                    {
                      if (v53 == 1)
                      {
                        LOBYTE(v382) = 1;
                      }
                      else if (v53 == 2)
                      {
                        LOBYTE(v382) = 2;
                      }
                      else
                      {
                        LOBYTE(v382) = 0;
                        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v54 = mach_continuous_time();
                          unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Multipath Ind,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "ADP", 87, "Ga06_04GetMeasReport", 770, *(unsigned __int8 *)(*(void *)(v4 + 112) + 176 * v12 + 168));
                          LbsOsaTrace_WriteLog(0x18u, __str, v55, 2, 1);
                        }
                      }
                    }
                    else
                    {
                      LOBYTE(v382) = 0;
                    }
                    if ((v3 & 4) != 0)
                    {
                      long long v56 = (char *)operator new(0x98uLL, MEMORY[0x263F8C180]);
                      if (!v56)
                      {
                        v352 = 0;
                        snprintf(v385, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_07GetMeasExtn", 1151, "Memory allocation failed for MeasExtn");
                        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v339 = mach_continuous_time();
                          unsigned __int16 v340 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v339), "OSA", 69, "Ga06_07GetMeasExtn", v385);
                          LbsOsaTrace_WriteLog(0xEu, __str, v340, 0, 1);
                        }
                        if (gp_Logger) {
                          (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
                        }
                        __assert_rtn("Ga06_07GetMeasExtn", "ga06GnssPvtmUtils.cpp", 1151, "false && \"Memory allocation failed for MeasExtn\"");
                      }
                      *(void *)long long v56 = v343.i64[0];
                      *(int64x2_t *)(v56 + 8) = v344;
                      v56[24] = 0;
                      *((int32x4_t *)v56 + 2) = v343;
                      *((int32x4_t *)v56 + 3) = v343;
                      *((void *)v56 + 8) = 0xFFFF7FC00000;
                      v56[72] = 0;
                      v56[76] = 0;
                      v56[80] = 0;
                      v56[84] = 0;
                      v56[88] = 0;
                      *((_WORD *)v56 + 46) = 0;
                      v56[124] = 0;
                      *((void *)v56 + 17) = 0;
                      *((void *)v56 + 18) = 0;
                      *((void *)v56 + 16) = 0;
                      *((void *)v56 + 12) = 0;
                      *((void *)v56 + 13) = 0;
                      v56[120] = 0;
                      *((void *)v56 + 14) = 0;
                      v352 = (unsigned __int16 **)v56;
                      if (*(unsigned __int16 *)(v4 + 104) <= (unsigned __int16)v12)
                      {
                        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v66 = mach_continuous_time();
                          unsigned __int16 v67 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Indx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "ADP", 69, "Ga06_07GetMeasExtn", 514);
                          LbsOsaTrace_WriteLog(0x18u, __str, v67, 0, 1);
                        }
                        v373 = 0;
                        unsigned __int16 v68 = v352;
                        v352 = 0;
                        if (v68)
                        {
                          std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100]((uint64_t)&v352, v68);
                          uint64_t v60 = v373;
                        }
                        else
                        {
                          uint64_t v60 = 0;
                        }
                      }
                      else
                      {
                        uint64_t v57 = *(void *)(v4 + 112) + 176 * v12;
                        *((_WORD *)v56 + 34) = *(_WORD *)(v57 + 114);
                        *(_DWORD *)long long v56 = 0;
                        float v58 = *(double *)(v57 + 64);
                        *((float *)v56 + 1) = v58;
                        *((_WORD *)v56 + 35) = *(_WORD *)(v57 + 74);
                        v56[72] = *(unsigned char *)(v57 + 72);
                        *((unsigned char *)v352 + 92) = gnss::GnssAdaptDevice::Ga06_17GetDetectionMethod(*(unsigned __int8 *)(v57 + 112));
                        char DetectionMethod = gnss::GnssAdaptDevice::Ga06_17GetDetectionMethod(*(unsigned __int8 *)(*(void *)(v4 + 112) + 176 * v12 + 113));
                        uint64_t v60 = (float *)v352;
                        *((unsigned char *)v352 + 93) = DetectionMethod;
                        LOWORD(v61) = *(_WORD *)(*(void *)(v4 + 112) + 176 * v12 + 170);
                        *(float *)&unsigned int v62 = (float)v61 * 0.001;
                        v60[19] = *(float *)&v62;
                        *((unsigned char *)v60 + 80) = 1;
                        LOWORD(v62) = *(_WORD *)(*(void *)(v4 + 112) + 176 * v12 + 172);
                        v60[21] = (float)v62 * 0.001;
                        *((unsigned char *)v60 + 88) = 1;
                        if ((*(__int16 *)(*(void *)(v4 + 112) + 176 * v12) & 0x80000000) == 0)
                        {
                          unsigned int v63 = *(unsigned __int16 *)(*(void *)(v4 + 112) + 176 * v12);
                          if (v63 < *(unsigned __int16 *)(v4 + 280))
                          {
                            uint64_t v64 = *(void *)(v4 + 288);
                            if (v64)
                            {
                              uint64_t v65 = v64 + 104 * *(unsigned __int16 *)(*(void *)(v4 + 112) + 176 * v12);
                              *((void *)v60 + 1) = *(void *)(v65 + 8);
                              *((void *)v60 + 2) = *(void *)(v65 + 80);
                              switch(*(unsigned char *)(v65 + 24))
                              {
                                case 0:
                                  *((unsigned char *)v60 + 24) = 0;
                                  break;
                                case 1:
                                  char v69 = 2;
                                  goto LABEL_92;
                                case 2:
                                  *((unsigned char *)v60 + 24) = 1;
                                  break;
                                case 3:
                                  char v69 = 3;
                                  goto LABEL_92;
                                case 4:
                                  char v69 = 4;
LABEL_92:
                                  *((unsigned char *)v60 + 24) = v69;
                                  break;
                                default:
                                  *((unsigned char *)v60 + 24) = 0;
                                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                                  {
                                    bzero(__str, 0x410uLL);
                                    uint64_t v123 = mach_continuous_time();
                                    unsigned __int16 v124 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ToTsource,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v123), "ADP", 87, "Ga06_07GetMeasExtn", 770, *(unsigned __int8 *)(*(void *)(v4 + 288) + 104 * v63 + 24));
                                    LbsOsaTrace_WriteLog(0x18u, __str, v124, 2, 1);
                                  }
                                  break;
                              }
                              long long v70 = (double *)(*(void *)(v4 + 288) + 104 * v63);
                              double v71 = v70[12];
                              uint64_t v60 = (float *)v352;
                              if (v71 >= 3.40282347e38) {
                                double v71 = 3.40282347e38;
                              }
                              float v72 = v71;
                              *((float *)v352 + 16) = v72;
                              float v73 = v70[4];
                              v60[8] = v73;
                              float v74 = v70[7];
                              v60[9] = v74;
                              float v75 = v70[10];
                              v60[10] = v75;
                              float v76 = v70[5];
                              _WORD v60[11] = v76;
                              float v77 = v70[8];
                              v60[12] = v77;
                              float v78 = v70[11];
                              v60[13] = v78;
                              float v79 = v70[6];
                              v60[14] = v79;
                              float v80 = v70[9];
                              v60[15] = v80;
                            }
                          }
                        }
                      }
                      v373 = 0;
                      unsigned int v81 = v380;
                      v380 = v60;
                      if (v81)
                      {
                        std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100]((uint64_t)&v380, v81);
                        uint64_t v82 = v373;
                        v373 = 0;
                        if (v82) {
                          std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100]((uint64_t)&v373, v82);
                        }
                      }
                    }
                    uint64_t v83 = v360;
                    unint64_t v84 = v360[15];
                    unint64_t v85 = v360[16];
                    if (v84 >= v85)
                    {
                      uint64_t v95 = v360[14];
                      uint64_t v96 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v84 - v95) >> 4);
                      unint64_t v97 = v96 + 1;
                      if ((unint64_t)(v96 + 1) > 0x1745D1745D1745DLL) {
                        std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v98 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v85 - v95) >> 4);
                      if (2 * v98 > v97) {
                        unint64_t v97 = 2 * v98;
                      }
                      if (v98 >= 0xBA2E8BA2E8BA2ELL) {
                        unint64_t v99 = 0x1745D1745D1745DLL;
                      }
                      else {
                        unint64_t v99 = v97;
                      }
                      if (v99)
                      {
                        if (v99 > 0x1745D1745D1745DLL) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        int v100 = (char *)operator new(176 * v99);
                      }
                      else
                      {
                        int v100 = 0;
                      }
                      long long v101 = *(_OWORD *)v379;
                      uint64_t v102 = &v100[176 * v96];
                      *((_OWORD *)v102 + 6) = v378;
                      *((_OWORD *)v102 + 7) = v101;
                      uint64_t v103 = &v100[176 * v99];
                      *((_OWORD *)v102 + 8) = *(_OWORD *)&v379[16];
                      *(_OWORD *)(v102 + 137) = *(_OWORD *)&v379[25];
                      long long v104 = v375;
                      *((_OWORD *)v102 + 2) = *(_OWORD *)&v374[32];
                      *((_OWORD *)v102 + 3) = v104;
                      long long v105 = v377;
                      *((_OWORD *)v102 + 4) = v376;
                      *((_OWORD *)v102 + 5) = v105;
                      long long v106 = *(_OWORD *)&v374[16];
                      *(_OWORD *)uint64_t v102 = *(_OWORD *)v374;
                      *((_OWORD *)v102 + 1) = v106;
                      char v107 = v380;
                      v380 = 0;
                      *((void *)v102 + 20) = v107;
                      *((float *)v102 + 42) = v381;
                      *((_WORD *)v102 + 86) = v382;
                      uint64_t v94 = v102 + 176;
                      uint64_t v108 = (char *)v83[14];
                      int v109 = (char *)v83[15];
                      if (v109 == v108)
                      {
                        v83[14] = v102;
                        v83[15] = v94;
                        v83[16] = v103;
                        if (!v109) {
                          goto LABEL_120;
                        }
                      }
                      else
                      {
                        do
                        {
                          long long v110 = *((_OWORD *)v109 - 10);
                          *((_OWORD *)v102 - 11) = *((_OWORD *)v109 - 11);
                          *((_OWORD *)v102 - 10) = v110;
                          long long v111 = *((_OWORD *)v109 - 9);
                          long long v112 = *((_OWORD *)v109 - 8);
                          long long v113 = *((_OWORD *)v109 - 6);
                          *((_OWORD *)v102 - 7) = *((_OWORD *)v109 - 7);
                          *((_OWORD *)v102 - 6) = v113;
                          *((_OWORD *)v102 - 9) = v111;
                          *((_OWORD *)v102 - 8) = v112;
                          long long v114 = *((_OWORD *)v109 - 5);
                          long long v115 = *((_OWORD *)v109 - 4);
                          long long v116 = *((_OWORD *)v109 - 3);
                          *(_OWORD *)(v102 - 39) = *(_OWORD *)(v109 - 39);
                          *((_OWORD *)v102 - 4) = v115;
                          *((_OWORD *)v102 - 3) = v116;
                          *((_OWORD *)v102 - 5) = v114;
                          uint64_t v117 = *((void *)v109 - 2);
                          *((void *)v109 - 2) = 0;
                          *((void *)v102 - 2) = v117;
                          LODWORD(v117) = *((_DWORD *)v109 - 2);
                          *((_WORD *)v102 - 2) = *((_WORD *)v109 - 2);
                          *((_DWORD *)v102 - 2) = v117;
                          v102 -= 176;
                          v109 -= 176;
                        }
                        while (v109 != v108);
                        int v109 = (char *)v83[14];
                        uint64_t v118 = (char *)v83[15];
                        v83[14] = v102;
                        v83[15] = v94;
                        v83[16] = v103;
                        if (v118 != v109)
                        {
                          uint64_t v119 = v118 - 16;
                          do
                          {
                            char v120 = *(void **)v119;
                            *(void *)uint64_t v119 = 0;
                            if (v120) {
                              std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100]((uint64_t)v119, v120);
                            }
                            uint64_t v121 = v119 - 160;
                            v119 -= 176;
                          }
                          while (v121 != v109);
                        }
                        if (!v109) {
                          goto LABEL_120;
                        }
                      }
                      operator delete(v109);
                    }
                    else
                    {
                      long long v86 = *(_OWORD *)&v374[16];
                      *(_OWORD *)unint64_t v84 = *(_OWORD *)v374;
                      *(_OWORD *)(v84 + 16) = v86;
                      long long v87 = *(_OWORD *)&v374[32];
                      long long v88 = v375;
                      long long v89 = v377;
                      *(_OWORD *)(v84 + 64) = v376;
                      *(_OWORD *)(v84 + 80) = v89;
                      *(_OWORD *)(v84 + 32) = v87;
                      *(_OWORD *)(v84 + 48) = v88;
                      long long v90 = v378;
                      long long v91 = *(_OWORD *)v379;
                      long long v92 = *(_OWORD *)&v379[16];
                      *(_OWORD *)(v84 + 137) = *(_OWORD *)&v379[25];
                      *(_OWORD *)(v84 + 112) = v91;
                      *(_OWORD *)(v84 + 128) = v92;
                      *(_OWORD *)(v84 + 96) = v90;
                      int v93 = v380;
                      v380 = 0;
                      *(void *)(v84 + 160) = v93;
                      *(float *)&int v93 = v381;
                      *(_WORD *)(v84 + 172) = v382;
                      *(_DWORD *)(v84 + 168) = v93;
                      uint64_t v94 = (char *)(v84 + 176);
                    }
LABEL_120:
                    int v15 = 0;
                    v83[15] = v94;
                    goto LABEL_121;
                  }
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v23 = mach_continuous_time();
                    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SVMeasElem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "Ga06_06GetMeasSyncState", 513);
                    LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
                  }
                }
                break;
              default:
                *(_DWORD *)v374 = 0;
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v35 = mach_continuous_time();
                  unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SigID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 87, "Ga06_05GetMeasSvId", 770, *(unsigned __int8 *)(*(void *)(v4 + 112) + 176 * v12 + 2));
                  LbsOsaTrace_WriteLog(0x18u, __str, v36, 2, 1);
                }
                goto LABEL_24;
            }
          }
          int v15 = 4;
        }
        else
        {
          int v15 = 2;
        }
LABEL_121:
        uint64_t v122 = v380;
        v380 = 0;
        if (v122) {
          std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100]((uint64_t)&v380, v122);
        }
        if ((v15 | 4) != 4) {
          break;
        }
        ++v12;
      }
      while (v12 != v347);
      unsigned __int16 v5 = (char *)v360;
      uint64_t v1 = a1;
      uint64_t v2 = v342;
    }
    *(void *)unsigned __int16 v5 = *(void *)(v4 + 40);
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(v4 + 80);
    *((_OWORD *)v5 + 3) = *(_OWORD *)(v4 + 48);
    if (*(double *)(v4 + 256) <= 0.0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v136 = mach_continuous_time();
        unsigned __int16 v137 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsBiasUncns is unknown\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v136), "ADP", 68, "Ga06_04GetMeasReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v137, 5, 1);
      }
    }
    else
    {
      *((void *)v5 + 10) = *(void *)(v4 + 240);
      double v128 = *(double *)(v4 + 248);
      if ((v128 < -0.5 || v128 > 0.5) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v129 = mach_continuous_time();
        unsigned __int16 v130 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpsBiassubns,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v129), "ADP", 87, "Ga06_04GetMeasReport", 514, *(double *)(v4 + 248));
        LbsOsaTrace_WriteLog(0x18u, __str, v130, 2, 1);
      }
      float v131 = *(double *)(v4 + 248);
      uint64_t v132 = (uint64_t)v360;
      *((float *)v360 + 22) = v131;
      double v133 = *(double *)(v4 + 256);
      if (v133 <= 3.40282347e38)
      {
        float v138 = v133;
        *(float *)(v132 + 92) = v138;
      }
      else
      {
        *(_DWORD *)(v132 + 92) = 2139095039;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v134 = mach_continuous_time();
          unsigned __int16 v135 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RxGpsBiasUncns larger than float max,limiting to float max,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v134), "ADP", 68, "Ga06_04GetMeasReport", *(double *)(v4 + 256));
          LbsOsaTrace_WriteLog(0x18u, __str, v135, 5, 1);
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v139 = mach_continuous_time();
        unsigned __int16 v140 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: OffsetNs,%lld,SubOffsetNs,%f,OffsetUncNs,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v139), "ADP", 68, "Ga06_04GetMeasReport", v360[10], *((float *)v360 + 22), *((float *)v360 + 23));
        LbsOsaTrace_WriteLog(0x18u, __str, v140, 5, 1);
      }
    }
    uint64_t v141 = (uint64_t)v360;
    v360[12] = *(void *)(v4 + 264);
    double v142 = *(double *)(v4 + 272);
    if (v142 <= 3.40282347e38)
    {
      float v145 = v142;
      *(float *)(v141 + 104) = v145;
    }
    else
    {
      *(_DWORD *)(v141 + 104) = 2139095039;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v143 = mach_continuous_time();
        unsigned __int16 v144 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RxGpsFrqUncppb larger than float max,limiting to float max,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v143), "ADP", 68, "Ga06_04GetMeasReport", *(double *)(v4 + 272));
        LbsOsaTrace_WriteLog(0x18u, __str, v144, 5, 1);
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v146 = mach_continuous_time();
      unsigned __int16 v147 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DriftPpb,%f,DriftUncPpb,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v146), "ADP", 68, "Ga06_04GetMeasReport", *((double *)v360 + 12), *((float *)v360 + 26));
      LbsOsaTrace_WriteLog(0x18u, __str, v147, 5, 1);
    }
    uint64_t v148 = (uint64_t)v360;
    v360 = 0;
    uint64_t v366 = v148;
    std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100]((uint64_t *)&v360, 0);
    uint64_t v149 = v366;
    uint64_t v366 = 0;
    std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](v368 + 5, v149);
    std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&v366, 0);
    uint64_t v3 = *(void *)(v2 + 280);
  }
  *(void *)v374 = 0;
  *(void *)&v374[8] = v374;
  *(void *)&v374[16] = 0x4002000000;
  *(void *)&v374[24] = __Block_byref_object_copy__17;
  *(void *)&v374[32] = __Block_byref_object_dispose__18;
  *(void *)&v374[40] = 0;
  long long v375 = 0uLL;
  if ((v3 & 0x10) != 0)
  {
    uint64_t v150 = *(void *)(*(void *)(v1 + 32) + 8);
    unsigned int v151 = *(unsigned __int16 *)(v150 + 296);
    if (*(_WORD *)(v150 + 296))
    {
      long long v152 = 0;
      long long v153 = 0;
      v348 = 0;
      long long v154 = 0;
      unint64_t v155 = 0;
      uint64_t v156 = 0;
      uint64_t v157 = *(void *)(v150 + 304);
      do
      {
        if (*(_WORD *)(v157 + 312 * v155 + 176))
        {
          unsigned __int8 v158 = 0;
          while (2)
          {
            uint64_t v159 = v158;
            unsigned __int8 v161 = *(unsigned char *)(v157 + 312 * v155 + v158 + 178);
            int v160 = v161;
            switch(v161)
            {
              case 0u:
                goto LABEL_197;
              case 1u:
                goto LABEL_173;
              case 2u:
                unsigned __int8 v161 = 2;
                goto LABEL_173;
              case 3u:
                unsigned __int8 v161 = 3;
                goto LABEL_173;
              case 4u:
                unsigned __int8 v161 = 4;
                goto LABEL_173;
              case 5u:
                unsigned __int8 v161 = 5;
                goto LABEL_173;
              case 6u:
                int v160 = 7;
                unsigned __int8 v161 = 6;
                goto LABEL_173;
              case 7u:
                int v160 = 8;
                unsigned __int8 v161 = 7;
                goto LABEL_173;
              case 8u:
                int v160 = 9;
                unsigned __int8 v161 = 8;
                goto LABEL_173;
              default:
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v162 = mach_continuous_time();
                  unsigned __int16 v163 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BandID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v162), "ADP", 87, "Ga06_08GetBandCorrection", 770, v160);
                  LbsOsaTrace_WriteLog(0x18u, __str, v163, 2, 1);
                }
                int v160 = 0;
                unsigned __int8 v161 = 0;
LABEL_173:
                uint64_t v164 = 1 << v161;
                uint64_t v157 = *(void *)(v150 + 304);
                if (((1 << v161) & v156) == 0)
                {
                  uint64_t v165 = v157 + 312 * v155 + 8 * v159;
                  double v166 = *(double *)(v165 + 216) * 3.33564095;
                  float v167 = *(double *)(v165 + 248) * 3.33564095;
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v168 = mach_continuous_time();
                    unsigned __int16 v169 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: BAND,%u,RfTimeBiasNs,%f,RfTimeBiasUncNs,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v168), "ADP", 73, "Ga06_08GetBandCorrection", v160, v166, v167);
                    LbsOsaTrace_WriteLog(0x18u, __str, v169, 4, 1);
                  }
                  if (v154 >= v348)
                  {
                    unint64_t v170 = 0xAAAAAAAAAAAAAAABLL * (v154 - v152) + 1;
                    if (v170 > 0xAAAAAAAAAAAAAAALL) {
                      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x5555555555555556 * (v348 - v152) > v170) {
                      unint64_t v170 = 0x5555555555555556 * (v348 - v152);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * (v348 - v152) >= 0x555555555555555) {
                      unint64_t v171 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v171 = v170;
                    }
                    if (v171)
                    {
                      if (v171 > 0xAAAAAAAAAAAAAAALL) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      unsigned int v172 = (char *)operator new(24 * v171);
                    }
                    else
                    {
                      unsigned int v172 = 0;
                    }
                    __int16 v173 = (float *)&v172[8 * (v154 - v152)];
                    *(double *)__int16 v173 = v166;
                    v173[2] = v167;
                    v173[3] = NAN;
                    *((unsigned char *)v173 + 16) = v160;
                    if (v154 == v152)
                    {
                      __int16 v176 = &v172[8 * (v154 - v152)];
                    }
                    else
                    {
                      uint64_t v174 = &v172[8 * (v154 - v152)];
                      do
                      {
                        long long v175 = *(_OWORD *)(v154 - 3);
                        __int16 v176 = v174 - 24;
                        *(v174 - 8) = *((unsigned char *)v154 - 8);
                        *(_OWORD *)(v174 - 24) = v175;
                        v154 -= 3;
                        v174 -= 24;
                      }
                      while (v154 != v152);
                    }
                    v348 = (double *)&v172[24 * v171];
                    long long v153 = (double *)(v173 + 6);
                    if (v152) {
                      operator delete(v152);
                    }
                    long long v152 = (double *)v176;
                  }
                  else
                  {
                    *long long v154 = v166;
                    *((float *)v154 + 2) = v167;
                    *((_DWORD *)v154 + 3) = 2143289344;
                    long long v153 = v154 + 3;
                    *((unsigned char *)v154 + 16) = v160;
                  }
                  v156 |= v164;
                  uint64_t v157 = *(void *)(v150 + 304);
                  long long v154 = v153;
                }
LABEL_197:
                unsigned __int8 v158 = v159 + 1;
                if (*(unsigned __int16 *)(v157 + 312 * v155 + 176) > (v159 + 1)) {
                  continue;
                }
                unsigned int v151 = *(unsigned __int16 *)(v150 + 296);
                break;
            }
            break;
          }
        }
        ++v155;
      }
      while (v155 < v151);
      int v177 = *(void **)&v374[8];
      uint64_t v179 = (void *)(*(void *)&v374[8] + 40);
      unsigned int v178 = *(void **)(*(void *)&v374[8] + 40);
      if (v178)
      {
        *(void *)(*(void *)&v374[8] + 48) = v178;
        operator delete(v178);
        *uint64_t v179 = 0;
        v179[1] = 0;
        v179[2] = 0;
      }
      unsigned int v180 = v348;
    }
    else
    {
      unsigned int v180 = 0;
      long long v153 = 0;
      long long v152 = 0;
      int v177 = v374;
    }
    v177[5] = v152;
    v177[6] = v153;
    v177[7] = v180;
    uint64_t v1 = a1;
    uint64_t v2 = v342;
    uint64_t v3 = *(void *)(v342 + 280);
  }
  v360 = 0;
  v361 = (uint64_t *)&v360;
  uint64_t v362 = 0x3002000000;
  v363 = __Block_byref_object_copy__19;
  v364 = __Block_byref_object_dispose__20;
  v365 = 0;
  if ((v3 & 0x20) != 0)
  {
    uint64_t v181 = *(void *)(*(void *)(v1 + 32) + 8);
    uint64_t v182 = (unsigned __int16 **)operator new(0x28uLL, MEMORY[0x263F8C180]);
    if (!v182)
    {
      snprintf(v385, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_09GetTimeConv", 1384, "Memory allocation failed for TimeConversion");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v329 = mach_continuous_time();
        unsigned __int16 v330 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v329), "OSA", 69, "Ga06_09GetTimeConv", v385);
        LbsOsaTrace_WriteLog(0xEu, __str, v330, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_09GetTimeConv", "ga06GnssPvtmUtils.cpp", 1384, "false && \"Memory allocation failed for TimeConversion\"");
    }
    uint64_t v183 = v182;
    v182[4] = 0;
    *(_OWORD *)uint64_t v182 = 0u;
    *((_OWORD *)v182 + 1) = 0u;
    v352 = v182;
    uint64_t v184 = (unsigned __int16 *)operator new(0x40uLL, MEMORY[0x263F8C180]);
    if (!v184)
    {
      snprintf(v385, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_10GetTimeConvGPS", 1414, "Memory allocation failed for GpsTimeInfo");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v331 = mach_continuous_time();
        unsigned __int16 v332 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v331), "OSA", 69, "Ga06_10GetTimeConvGPS", v385);
        LbsOsaTrace_WriteLog(0xEu, __str, v332, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_10GetTimeConvGPS", "ga06GnssPvtmUtils.cpp", 1414, "false && \"Memory allocation failed for GpsTimeInfo\"");
    }
    uint64_t v185 = v184;
    *((unsigned char *)v184 + 10) = 0;
    *((void *)v184 + 2) = 0;
    v184[12] = 0x8000;
    *((void *)v184 + 4) = 0;
    *(int64x2_t *)(v184 + 20) = vdupq_n_s64(0x7FF8000000000000uLL);
    *((void *)v184 + 7) = 0x7FF8000000000000;
    *uint64_t v184 = *(_WORD *)(v181 + 120);
    unsigned __int8 v186 = *(unsigned char *)(v181 + 134);
    v184[4] = (char)v186;
    uint64_t v187 = *(unsigned __int16 *)(v181 + 130);
    if (*(_WORD *)(v181 + 130)
      && (uint64_t v188 = *(unsigned __int8 *)(v181 + 132), *(unsigned char *)(v181 + 132))
      && (unsigned __int16 v189 = *(char *)(v181 + 133), *(unsigned char *)(v181 + 133)))
    {
      if (v186 == v189)
      {
        *((unsigned char *)v184 + 10) = 1;
      }
      else
      {
        *((unsigned char *)v184 + 10) = 2;
        *((void *)v184 + 2) = 604800000000000 * v187 + 86400000000000 * v188;
        v184[12] = v189;
      }
    }
    else
    {
      *((unsigned char *)v184 + 10) = 0;
    }
    *((void *)v184 + 4) = 604800000000000 * *(unsigned __int16 *)(v181 + 136)
                          + 1000000000 * *(unsigned int *)(v181 + 140);
    *(_OWORD *)(v184 + 20) = *(_OWORD *)(v181 + 144);
    *((void *)v184 + 7) = *(void *)(v181 + 160);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v190 = mach_continuous_time();
      unsigned __int16 v191 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Week,%u,CurLeapSec,%d,NewLeapSecKnwdg,%hhu,TimeOfChangeNs,%llu,NewLeapSec,%d,TimeNs,%llu,OffsetNs,%f,DriftPpb,%f,AccelPpbPerSec,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v190), "ADP", 68, "Ga06_10GetTimeConvGPS", *v185, (__int16)v185[4], *((unsigned __int8 *)v185 + 10), *((void *)v185 + 2), (__int16)v185[12], *((void *)v185 + 4), *((double *)v185 + 5), *((double *)v185 + 6), *((double *)v185 + 7));
      LbsOsaTrace_WriteLog(0x18u, __str, v191, 5, 1);
    }
    uint64_t v192 = *v183;
    *uint64_t v183 = v185;
    if (v192) {
      MEMORY[0x230F4E5D0](v192, 0x1000C4079AA8B5ELL);
    }
    uint64_t v193 = (unsigned __int16 *)operator new(0x18uLL, MEMORY[0x263F8C180]);
    if (!v193)
    {
      snprintf(v385, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_11GetTimeConvGlonass", 1480, "Memory allocation failed for GlonTimeInfo");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v333 = mach_continuous_time();
        unsigned __int16 v334 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v333), "OSA", 69, "Ga06_11GetTimeConvGlonass", v385);
        LbsOsaTrace_WriteLog(0xEu, __str, v334, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_11GetTimeConvGlonass", "ga06GnssPvtmUtils.cpp", 1480, "false && \"Memory allocation failed for GlonTimeInfo\"");
    }
    uint64_t v194 = v193;
    uint64_t v195 = *(unsigned __int8 *)(v181 + 124);
    *uint64_t v193 = v195;
    uint64_t v196 = *(unsigned __int16 *)(v181 + 122);
    v193[1] = v196;
    *((void *)v193 + 1) = 126230400000000000 * v195 + 86400000000000 * v196;
    *((double *)v193 + 2) = -*(double *)(v181 + 184);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v197 = mach_continuous_time();
      unsigned __int16 v198 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: 4YrPeriod,%u,Day,%u,CollecnTimeNs,%llu,OffsetNs,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v197), "ADP", 68, "Ga06_11GetTimeConvGlonass", *v194, v194[1], *((void *)v194 + 1), *((double *)v194 + 2));
      LbsOsaTrace_WriteLog(0x18u, __str, v198, 5, 1);
    }
    unsigned __int16 v199 = v183[1];
    v183[1] = v194;
    if (v199) {
      MEMORY[0x230F4E5D0](v199, 0x1000C40D315E998);
    }
    double v200 = (unsigned __int16 *)operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!v200)
    {
      snprintf(v385, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_12GetTimeConvBeidou", 1515, "Memory allocation failed for BeidouTimeInfo");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v335 = mach_continuous_time();
        unsigned __int16 v336 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v335), "OSA", 69, "Ga06_12GetTimeConvBeidou", v385);
        LbsOsaTrace_WriteLog(0xEu, __str, v336, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_12GetTimeConvBeidou", "ga06GnssPvtmUtils.cpp", 1515, "false && \"Memory allocation failed for BeidouTimeInfo\"");
    }
    uint64_t v201 = v200;
    *double v200 = *(_WORD *)(v181 + 126);
    *((void *)v200 + 1) = 604800000000000 * *(unsigned __int16 *)(v181 + 216)
                          + 1000000000 * *(unsigned int *)(v181 + 220);
    *((_OWORD *)v200 + 1) = *(_OWORD *)(v181 + 224);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v202 = mach_continuous_time();
      unsigned __int16 v203 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Week,%u,GpsTimeNs,%llu,OffsetNs,%f,DriftPpb,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v202), "ADP", 73, "Ga06_12GetTimeConvBeidou", *v201, *((void *)v201 + 1), *((double *)v201 + 2), *((double *)v201 + 3));
      LbsOsaTrace_WriteLog(0x18u, __str, v203, 4, 1);
    }
    uint64_t v204 = v183[2];
    v183[2] = v201;
    if (v204) {
      MEMORY[0x230F4E5D0](v204, 0x1000C4095D96C66);
    }
    uint64_t v205 = (unsigned __int16 *)operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!v205)
    {
      snprintf(v385, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_13GetTimeConvGalileo", 1550, "Memory allocation failed for GalTimeInfo");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v337 = mach_continuous_time();
        unsigned __int16 v338 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v337), "OSA", 69, "Ga06_13GetTimeConvGalileo", v385);
        LbsOsaTrace_WriteLog(0xEu, __str, v338, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_13GetTimeConvGalileo", "ga06GnssPvtmUtils.cpp", 1550, "false && \"Memory allocation failed for GalTimeInfo\"");
    }
    uint64_t v206 = v205;
    *uint64_t v205 = *(_WORD *)(v181 + 128);
    *((void *)v205 + 1) = 604800000000000 * *(unsigned __int16 *)(v181 + 192)
                          + 1000000000 * *(unsigned int *)(v181 + 196);
    *((_OWORD *)v205 + 1) = *(_OWORD *)(v181 + 200);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v207 = mach_continuous_time();
      unsigned __int16 v208 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Week,%u,TimeNs,%llu,OffsetNs,%f,DriftPpb,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v207), "ADP", 73, "Ga06_13GetTimeConvGalileo", *v206, *((void *)v206 + 1), *((double *)v206 + 2), *((double *)v206 + 3));
      LbsOsaTrace_WriteLog(0x18u, __str, v208, 4, 1);
    }
    uint64_t v209 = v183[3];
    v183[3] = v206;
    if (v209) {
      MEMORY[0x230F4E5D0](v209, 0x1000C4095D96C66);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v210 = mach_continuous_time();
      unsigned __int16 v211 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Time info populated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v210), "ADP", 68, "Ga06_09GetTimeConv");
      LbsOsaTrace_WriteLog(0x18u, __str, v211, 5, 1);
    }
    uint64_t v212 = (uint64_t)(v361 + 5);
    v213 = (uint64_t *)v361[5];
    v373 = 0;
    v361[5] = (uint64_t)v183;
    if (v213)
    {
      std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](v212, v213);
      uint64_t v214 = (uint64_t *)v373;
      v373 = 0;
      if (v214) {
        std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100]((uint64_t)&v373, v214);
      }
    }
    uint64_t v3 = *(void *)(v2 + 280);
  }
  v352 = 0;
  v353 = &v352;
  uint64_t v354 = 0x4002000000;
  v355 = __Block_byref_object_copy__21;
  v356 = __Block_byref_object_dispose__22;
  uint64_t v357 = 0;
  unint64_t v358 = 0;
  unint64_t v359 = 0;
  if ((v3 & 8) != 0)
  {
    uint64_t v216 = *(void *)(*(void *)(v1 + 32) + 8);
    if (*(unsigned __int16 *)(v216 + 296) >= 0x100u) {
      unint64_t v217 = 256;
    }
    else {
      unint64_t v217 = *(unsigned __int16 *)(v216 + 296);
    }
    unint64_t v345 = v217;
    if (v217)
    {
      v399 = &v359;
      *(void *)uint64_t __str = std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvInfo>>(v217);
      v396 = *(char **)__str;
      v397 = *(char **)__str;
      uint64_t v398 = *(void *)__str + 136 * v218;
      std::vector<gnss::SvInfo>::__swap_out_circular_buffer(&v357, __str);
      std::__split_buffer<gnss::SvInfo>::~__split_buffer((uint64_t)__str);
      uint64_t v219 = 0;
      uint64_t v220 = 0;
      int64x2_t v346 = vdupq_n_s64(0x7FF8000000000000uLL);
      int32x2_t v221 = vdup_n_s32(0x7FC00000u);
      do
      {
        *(_DWORD *)v385 = 0;
        *(_WORD *)&v385[4] = 0;
        v385[6] = 127;
        *(void *)&v385[8] = 0x7FF8000000000000;
        char v386 = 0;
        long long __p = 0u;
        long long v388 = 0u;
        int64x2_t v389 = v346;
        int64x2_t v390 = v346;
        long long v391 = (unint64_t)v221;
        v393[1] = 0;
        v394 = 0;
        v393[0] = 0;
        __int16 v392 = 0;
        uint64_t v222 = *(void *)(v216 + 304);
        switch(*(unsigned char *)(v222 + 312 * v220))
        {
          case 0:
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v223 = mach_continuous_time();
              unsigned __int16 v224 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No Constel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v223), "ADP", 68, "Ga06_14GetSvInfo");
              LbsOsaTrace_WriteLog(0x18u, __str, v224, 5, 1);
            }
            goto LABEL_253;
          case 1:
            int v229 = 1;
            *(_DWORD *)v385 = 1;
            v385[4] = *(unsigned char *)(v222 + 312 * v220 + 2);
            break;
          case 2:
            *(_DWORD *)v385 = 2;
            uint64_t v225 = v222 + 312 * v220;
            v385[4] = *(unsigned char *)(v225 + 4);
            v385[6] = *(unsigned char *)(v225 + 2);
            goto LABEL_259;
          case 3:
            int v226 = 16;
            goto LABEL_256;
          case 5:
            *(_DWORD *)v385 = 4;
            goto LABEL_258;
          case 6:
            int v226 = 8;
LABEL_256:
            *(_DWORD *)v385 = v226;
LABEL_258:
            v385[4] = *(unsigned char *)(v222 + 312 * v220 + 2);
LABEL_259:
            int v229 = 1;
            break;
          default:
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v227 = mach_continuous_time();
              unsigned __int16 v228 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Const,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v227), "ADP", 87, "Ga06_14GetSvInfo", 770, *(unsigned __int8 *)(*(void *)(v216 + 304) + 312 * v220));
              LbsOsaTrace_WriteLog(0x18u, __str, v228, 2, 1);
            }
LABEL_253:
            int v229 = 0;
            break;
        }
        switch(*(unsigned char *)(*(void *)(v216 + 304) + 312 * v220 + 8))
        {
          case 0:
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v230 = mach_continuous_time();
              unsigned __int16 v231 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SvPosSrc,Unknown\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v230), "ADP", 73, "Ga06_14GetSvInfo");
              LbsOsaTrace_WriteLog(0x18u, __str, v231, 4, 1);
            }
            goto LABEL_270;
          case 1:
            char v232 = 1;
            goto LABEL_267;
          case 2:
            char v232 = 2;
LABEL_267:
            char v386 = v232;
            break;
          case 3:
            char v386 = 0;
            break;
          case 4:
            char v386 = 4;
            break;
          default:
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v233 = mach_continuous_time();
              unsigned __int16 v234 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvPosSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v233), "ADP", 87, "Ga06_14GetSvInfo", 770, *(unsigned __int8 *)(*(void *)(v216 + 304) + 312 * v220 + 8));
              LbsOsaTrace_WriteLog(0x18u, __str, v234, 2, 1);
            }
LABEL_270:
            int v229 = 0;
            break;
        }
        double v235 = *(double *)(*(void *)(v216 + 304) + 312 * v220 + 16);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v236 = mach_continuous_time();
          unsigned __int16 v237 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ConstelId,%u,v_SVId,%d,ApplicableTimeSec,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v236), "ADP", 68, "Ga6_21GetAnchorPositions", *(unsigned __int8 *)(*(void *)(v216 + 304) + 312 * v220), *(__int16 *)(*(void *)(v216 + 304) + 312 * v220 + 2), v235);
          LbsOsaTrace_WriteLog(0x18u, __str, v237, 5, 1);
        }
        uint64_t v238 = *(void *)(v216 + 304);
        uint64_t v239 = v238 + 312 * v220;
        long long v349 = *(_OWORD *)(v239 + 24);
        uint64_t v240 = *(void *)(v239 + 40);
        uint64_t v241 = (char *)operator new(0x20uLL);
        *(double *)uint64_t v241 = (v235 + -15.0) * 1000000000.0;
        *(_OWORD *)(v241 + 8) = v349;
        *((void *)v241 + 3) = v240;
        uint64_t v242 = v238 + 312 * v220;
        long long v350 = *(_OWORD *)(v242 + 48);
        uint64_t v243 = *(void *)(v242 + 64);
        uint64_t v244 = (char *)operator new(0x40uLL);
        *((double *)v244 + 4) = (v235 + -5.0) * 1000000000.0;
        *(_OWORD *)(v244 + 40) = v350;
        *((void *)v244 + 7) = v243;
        long long v245 = *((_OWORD *)v241 + 1);
        *(_OWORD *)uint64_t v244 = *(_OWORD *)v241;
        *((_OWORD *)v244 + 1) = v245;
        operator delete(v241);
        uint64_t v246 = *(void *)(v216 + 304) + 312 * v220;
        long long v351 = *(_OWORD *)(v246 + 72);
        uint64_t v247 = *(void *)(v246 + 88);
        uint64_t v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvPositionAtTime>>(4uLL);
        uint64_t v250 = v248;
        uint64_t v251 = v249;
        *((double *)v248 + 8) = (v235 + 5.0) * 1000000000.0;
        *(_OWORD *)(v248 + 72) = v351;
        *((void *)v248 + 11) = v247;
        for (uint64_t i = 32; i != -32; i -= 32)
        {
          uint64_t v253 = &v248[i];
          long long v254 = *(_OWORD *)&v244[i + 16];
          *(_OWORD *)uint64_t v253 = *(_OWORD *)&v244[i];
          *((_OWORD *)v253 + 1) = v254;
        }
        uint64_t v255 = &v248[32 * v249];
        operator delete(v244);
        unint64_t v256 = (unint64_t)(v250 + 96);
        double v257 = (v235 + 15.0) * 1000000000.0;
        uint64_t v258 = (void *)(*(void *)(v216 + 304) + 312 * v220);
        uint64_t v260 = v258[12];
        uint64_t v259 = v258[13];
        uint64_t v261 = v258[14];
        if (v251 < 4)
        {
          uint64_t v262 = 4;
          if ((unint64_t)((v255 - v250) >> 4) > 4) {
            uint64_t v262 = (v255 - v250) >> 4;
          }
          if ((unint64_t)(v255 - v250) >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v263 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v263 = v262;
          }
          if (v263) {
            unint64_t v263 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvPositionAtTime>>(v263);
          }
          else {
            uint64_t v264 = 0;
          }
          uint64_t v265 = 0;
          unint64_t v256 = v263 + 96;
          *(double *)(v263 + 96) = v257;
          *(void *)(v263 + 104) = v260;
          uint64_t v255 = (char *)(v263 + 32 * v264);
          *(void *)(v263 + 112) = v259;
          *(void *)(v263 + 120) = v261;
          do
          {
            uint64_t v266 = v256 + v265;
            long long v267 = *(_OWORD *)&v250[v265 + 80];
            *(_OWORD *)(v266 - 32) = *(_OWORD *)&v250[v265 + 64];
            *(_OWORD *)(v266 - 16) = v267;
            v265 -= 32;
          }
          while (v265 != -96);
          operator delete(v250);
          uint64_t v250 = (unsigned char *)(v256 - 96);
        }
        else
        {
          *((double *)v250 + 12) = v257;
          *((void *)v250 + 13) = v260;
          *((void *)v250 + 14) = v259;
          *((void *)v250 + 15) = v261;
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        *(void *)&long long __p = v250;
        *((void *)&__p + 1) = v256 + 32;
        *(void *)&long long v388 = v255;
        uint64_t v268 = *(void *)(v216 + 304) + 312 * v220;
        int64x2_t v389 = *(int64x2_t *)(v268 + 120);
        v390.i64[0] = *(void *)(v268 + 136);
        double v269 = *(double *)(v268 + 144);
        if (v269 <= 3.40282347e38)
        {
          float v272 = v269;
          *(float *)&long long v391 = v272;
        }
        else
        {
          LODWORD(v391) = 2139095039;
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v270 = mach_continuous_time();
            unsigned __int16 v271 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx URAPosm beyond float max limit, assigning max\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v270), "ADP", 87, "Ga06_14GetSvInfo", 772);
            LbsOsaTrace_WriteLog(0x18u, __str, v271, 2, 1);
          }
        }
        double v273 = *(double *)(*(void *)(v216 + 304) + 312 * v220 + 152);
        if (v273 <= 3.40282347e38)
        {
          float v276 = v273;
          *((float *)&v391 + 1) = v276;
        }
        else
        {
          DWORD1(v391) = 2139095039;
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v274 = mach_continuous_time();
            unsigned __int16 v275 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx URAClockns beyond float max limit, assigning max\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v274), "ADP", 87, "Ga06_14GetSvInfo", 770);
            LbsOsaTrace_WriteLog(0x18u, __str, v275, 2, 1);
          }
        }
        BYTE8(v391) = gnss::GnssAdaptDevice::Ga06_19GetSvHealthAndIntegrity(*(unsigned __int8 *)(*(void *)(v216 + 304)
                                                                                               + 312 * v220
                                                                                               + 160));
        BYTE10(v391) = gnss::GnssAdaptDevice::Ga06_19GetSvHealthAndIntegrity(*(unsigned __int8 *)(*(void *)(v216 + 304)
                                                                                                + 312 * v220
                                                                                                + 161));
        BYTE12(v391) = gnss::GnssAdaptDevice::Ga06_19GetSvHealthAndIntegrity(*(unsigned __int8 *)(*(void *)(v216 + 304)
                                                                                                + 312 * v220
                                                                                                + 162));
        BYTE14(v391) = gnss::GnssAdaptDevice::Ga06_19GetSvHealthAndIntegrity(*(unsigned __int8 *)(*(void *)(v216 + 304)
                                                                                                + 312 * v220
                                                                                                + 163));
        LOBYTE(v392) = gnss::GnssAdaptDevice::Ga06_19GetSvHealthAndIntegrity(*(unsigned __int8 *)(*(void *)(v216 + 304)
                                                                                                + 312 * v220
                                                                                                + 164));
        uint64_t v277 = *(void *)(v216 + 304) + 312 * v220;
        unint64_t v278 = *(unsigned __int16 *)(v277 + 176);
        if (*(_WORD *)(v277 + 176))
        {
          v279 = (char *)v393[1];
          uint64_t v280 = (char *)v393[0];
          unint64_t v281 = ((char *)v393[1] - (char *)v393[0]) >> 5;
          if (v278 <= v281)
          {
            if (v278 < v281) {
              v393[1] = (char *)v393[0] + 32 * v278;
            }
          }
          else if (v278 - v281 <= (v394 - (char *)v393[1]) >> 5)
          {
            v288 = (char *)v393[1] + 32 * (v278 - v281);
            do
            {
              *(void *)v279 = 0;
              *(int64x2_t *)(v279 + 8) = v346;
              *((void *)v279 + 3) = 0x7FF8000000000000;
              v279 += 32;
            }
            while (v279 != v288);
            v393[1] = v288;
          }
          else
          {
            unint64_t v282 = (v394 - (char *)v393[0]) >> 4;
            if (v282 <= v278) {
              unint64_t v282 = *(unsigned __int16 *)(v277 + 176);
            }
            if ((unint64_t)(v394 - (char *)v393[0]) >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v283 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v283 = v282;
            }
            if (v283 >> 59) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v284 = (char *)operator new(32 * v283);
            v285 = &v284[32 * v281];
            v286 = v285;
            do
            {
              *(void *)v286 = 0;
              *(int64x2_t *)(v286 + 8) = v346;
              *((void *)v286 + 3) = 0x7FF8000000000000;
              v286 += 32;
            }
            while (v286 != &v284[32 * v278]);
            if (v279 != v280)
            {
              do
              {
                long long v287 = *((_OWORD *)v279 - 1);
                *((_OWORD *)v285 - 2) = *((_OWORD *)v279 - 2);
                *((_OWORD *)v285 - 1) = v287;
                v285 -= 32;
                v279 -= 32;
              }
              while (v279 != v280);
              v279 = v280;
            }
            v393[0] = v285;
            v393[1] = &v284[32 * v278];
            v394 = &v284[32 * v283];
            if (v279) {
              operator delete(v279);
            }
          }
          uint64_t v289 = *(void *)(v216 + 304);
          if (*(_WORD *)(v289 + 312 * v220 + 176))
          {
            uint64_t v290 = 0;
            unint64_t v291 = 0;
            do
            {
              v292 = v393[0];
              unsigned int v293 = *(unsigned __int8 *)(v289 + v219 + v291 + 178);
              if (v293 >= 9)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v295 = mach_continuous_time();
                  unsigned __int16 v296 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BandID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v295), "ADP", 87, "Ga06_22GetBandName", 770, v293);
                  LbsOsaTrace_WriteLog(0x18u, __str, v296, 2, 1);
                }
                char v294 = 0;
              }
              else
              {
                char v294 = byte_22BB440A9[(char)v293];
              }
              v292[v290] = v294;
              uint64_t v289 = *(void *)(v216 + 304);
              double v297 = *(double *)(v289 + 312 * v220 + 168);
              if (v297 > 0.0) {
                *(double *)&v292[v290 + 8] = v297 * 3.33564095;
              }
              double v298 = *(double *)(v289 + v219 + 8 * v291 + 184);
              if (v298 > 0.0) {
                *(double *)&v292[v290 + 16] = v298 * 3.33564095;
              }
              if (*(unsigned char *)(v289 + 312 * v220 + 8)) {
                *(void *)&v292[v290 + 24] = *(void *)(v289 + v219 + 8 * v291 + 280);
              }
              if (v291 > 2) {
                break;
              }
              ++v291;
              v290 += 32;
            }
            while (v291 < *(unsigned __int16 *)(v289 + 312 * v220 + 176));
          }
        }
        if (v229)
        {
          unint64_t v299 = v358;
          if (v358 >= v359)
          {
            unint64_t v306 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v358 - v357) >> 3);
            unint64_t v307 = v306 + 1;
            if (v306 + 1 > 0x1E1E1E1E1E1E1E1) {
              std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
            }
            if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v359 - v357) >> 3) > v307) {
              unint64_t v307 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v359 - v357) >> 3);
            }
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v359 - v357) >> 3) >= 0xF0F0F0F0F0F0F0) {
              unint64_t v308 = 0x1E1E1E1E1E1E1E1;
            }
            else {
              unint64_t v308 = v307;
            }
            v399 = &v359;
            v309 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvInfo>>(v308);
            v310 = &v309[136 * v306];
            *(void *)uint64_t __str = v309;
            v396 = v310;
            uint64_t v398 = (uint64_t)&v309[136 * v311];
            long long v312 = *(_OWORD *)v385;
            v310[16] = v386;
            *(_OWORD *)v310 = v312;
            *((void *)v310 + 4) = 0;
            *((void *)v310 + 5) = 0;
            *((void *)v310 + 3) = 0;
            *(_OWORD *)(v310 + 24) = __p;
            *((void *)v310 + 5) = v388;
            long long __p = 0uLL;
            uint64_t v313 = *((void *)&v388 + 1);
            long long v388 = 0uLL;
            *((void *)v310 + 6) = v313;
            int64x2_t v314 = v389;
            int64x2_t v315 = v390;
            long long v316 = v391;
            *((_WORD *)v310 + 52) = v392;
            *(_OWORD *)(v310 + 88) = v316;
            *(int64x2_t *)(v310 + 72) = v315;
            *(int64x2_t *)(v310 + 56) = v314;
            *((void *)v310 + 15) = 0;
            *((void *)v310 + 16) = 0;
            *((void *)v310 + 14) = 0;
            *((_OWORD *)v310 + 7) = *(_OWORD *)v393;
            *((void *)v310 + 16) = v394;
            v393[0] = 0;
            v393[1] = 0;
            v394 = 0;
            v397 = v310 + 136;
            std::vector<gnss::SvInfo>::__swap_out_circular_buffer(&v357, __str);
            unint64_t v305 = v358;
            std::__split_buffer<gnss::SvInfo>::~__split_buffer((uint64_t)__str);
          }
          else
          {
            long long v300 = *(_OWORD *)v385;
            *(unsigned char *)(v358 + 16) = v386;
            *(_OWORD *)unint64_t v299 = v300;
            *(void *)(v299 + 32) = 0;
            *(void *)(v299 + 40) = 0;
            *(void *)(v299 + 24) = 0;
            *(_OWORD *)(v299 + 24) = __p;
            *(void *)(v299 + 40) = v388;
            long long __p = 0uLL;
            uint64_t v301 = *((void *)&v388 + 1);
            long long v388 = 0uLL;
            *(void *)(v299 + 48) = v301;
            int64x2_t v302 = v389;
            int64x2_t v303 = v390;
            long long v304 = v391;
            *(_WORD *)(v299 + 104) = v392;
            *(_OWORD *)(v299 + 88) = v304;
            *(int64x2_t *)(v299 + 72) = v303;
            *(int64x2_t *)(v299 + 56) = v302;
            *(void *)(v299 + 112) = 0;
            *(void *)(v299 + 120) = 0;
            *(void *)(v299 + 128) = 0;
            *(_OWORD *)(v299 + 112) = *(_OWORD *)v393;
            *(void *)(v299 + 128) = v394;
            v393[0] = 0;
            v393[1] = 0;
            v394 = 0;
            unint64_t v305 = v299 + 136;
          }
          unint64_t v358 = v305;
        }
        if (v393[0])
        {
          v393[1] = v393[0];
          operator delete(v393[0]);
        }
        uint64_t v317 = *((void *)&v388 + 1);
        *((void *)&v388 + 1) = 0;
        if (v317) {
          MEMORY[0x230F4E5D0](v317, 0x1000C40AC4F46D1);
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        ++v220;
        v219 += 312;
      }
      while (v220 != v345);
    }
    int v215 = -252645135 * ((unint64_t)((char *)v353[6] - (char *)v353[5]) >> 3);
    uint64_t v1 = a1;
    uint64_t v2 = v342;
  }
  else
  {
    int v215 = 0;
  }
  v318 = *(void **)(*(void *)(v1 + 32) + 8);
  uint64_t v319 = v318[14];
  if (v319)
  {
    MEMORY[0x230F4E5A0](v319, 0x1000C807B0C7242);
    v318 = *(void **)(*(void *)(v1 + 32) + 8);
  }
  uint64_t v320 = v318[36];
  if (v320)
  {
    MEMORY[0x230F4E5A0](v320, 0x1000C80F973AAC2);
    v318 = *(void **)(*(void *)(v1 + 32) + 8);
  }
  uint64_t v321 = v318[38];
  if (v321)
  {
    MEMORY[0x230F4E5A0](v321, 0x1000C80E6928973);
    v318 = *(void **)(*(void *)(v1 + 32) + 8);
  }
  v318[14] = 0;
  *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 288) = 0;
  *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 304) = 0;
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v385, v2 + 312);
  v322 = *(NSObject **)(v2 + 296);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_23;
  block[3] = &unk_26DF1A190;
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v384, (uint64_t)v385);
  void block[4] = &v367;
  void block[5] = &v352;
  void block[6] = v374;
  void block[7] = &v360;
  dispatch_async(v322, block);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v323 = mach_continuous_time();
    unsigned __int16 v324 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Meas update,SvInfo Size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v323), "ADP", 73, "Ga06_01ReportPvtm_block_invoke", v215);
    LbsOsaTrace_WriteLog(0x18u, __str, v324, 4, 1);
  }
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v384);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v385);
  _Block_object_dispose(&v352, 8);
  *(void *)uint64_t __str = &v357;
  std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  _Block_object_dispose(&v360, 8);
  v325 = v365;
  v365 = 0;
  if (v325) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100]((uint64_t)&v365, v325);
  }
  _Block_object_dispose(v374, 8);
  if (*(void *)&v374[40])
  {
    *(void *)&long long v375 = *(void *)&v374[40];
    operator delete(*(void **)&v374[40]);
  }
  _Block_object_dispose(&v367, 8);
  return std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&v372, 0);
}

void sub_22B9EF480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  unsigned __int16 v59 = (void *)a43;
  a43 = 0;
  if (v59) {
    std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100]((uint64_t)&a43, v59);
  }
  uint64_t v60 = (void *)STACK[0x260];
  STACK[0x260] = 0;
  if (v60) {
    std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100](a38, v60);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&a51, 0);
  _Block_object_dispose(&a58, 8);
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](a24, 0);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t *__Block_byref_object_dispose__16(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 40);

  return std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](v1, 0);
}

__n128 __Block_byref_object_copy__17(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v1 = (void *)(a1 + 40);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3)
  {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

__n128 __Block_byref_object_copy__21(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
  v1[1] = *(void ***)MEMORY[0x263EF8340];
  v1[0] = (void **)(a1 + 40);
  std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_23(void *a1)
{
  v14[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1[4] + 8);
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  uint64_t v13 = v2;
  v14[0] = 0;
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = *(void *)(a1[6] + 8);
  uint64_t v5 = *(void *)(a1[7] + 8);
  uint64_t v6 = *(uint64_t **)(v5 + 40);
  *(void *)(v5 + 40) = 0;
  uint64_t v11 = 0;
  uint64_t v12 = v6;
  uint64_t v7 = a1[11];
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void *, uint64_t *, uint64_t, uint64_t, uint64_t **, uint64_t *))(*(void *)v7 + 48))(v7, v14, &v13, v3 + 40, v4 + 40, &v12, &v11);
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    MEMORY[0x230F4E5D0](v8, 0x1000C400A747E1ELL);
  }
  int v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100]((uint64_t)&v12, v9);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&v13, 0);
  uint64_t result = v14[0];
  v14[0] = 0;
  if (result) {
    return MEMORY[0x230F4E5D0](result, 0x1000C4043D32D5CLL);
  }
  return result;
}

void sub_22B9EFBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13)
{
  if (a10) {
    MEMORY[0x230F4E5D0](a10, 0x1000C400A747E1ELL);
  }
  int v14 = a11;
  a11 = 0;
  if (v14) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100]((uint64_t)&a11, v14);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&a12, 0);
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    MEMORY[0x230F4E5D0](v15, 0x1000C4043D32D5CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_64c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 64;
  uint64_t v3 = a1 + 64;

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_64c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 64);

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_2(void *a1)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[4];
  uint64_t v72 = 0;
  float v73 = &v72;
  uint64_t v74 = 0x3002000000;
  float v75 = __Block_byref_object_copy__30;
  float v76 = __Block_byref_object_dispose__31;
  uint64_t v77 = 0;
  if ((*(unsigned char *)(v1 + 280) & 1) == 0)
  {
LABEL_133:
    *(void *)unsigned int v81 = 0;
    uint64_t v82 = v81;
    uint64_t v83 = 0x4002000000;
    unint64_t v84 = __Block_byref_object_copy__21;
    unint64_t v85 = __Block_byref_object_dispose__22;
    memset(v86, 0, 24);
    v68[0] = 0;
    v68[1] = v68;
    void v68[2] = 0x4002000000;
    v68[3] = __Block_byref_object_copy__17;
    int v68[4] = __Block_byref_object_dispose__18;
    long long __p = 0;
    long long v70 = 0;
    uint64_t v71 = 0;
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v80, v1 + 312);
    long long v56 = *(NSObject **)(v1 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_2_34;
    block[3] = &unk_26DF1A1C8;
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v79, (uint64_t)v80);
    void block[4] = &v72;
    void block[5] = v81;
    void block[6] = v68;
    dispatch_async(v56, block);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v57 = mach_continuous_time();
      unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PVT update Sent out\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "ADP", 77, "Ga06_01ReportPvtm_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v58, 3, 1);
    }
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v79);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v80);
    _Block_object_dispose(v68, 8);
    if (__p)
    {
      long long v70 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v81, 8);
    *(void *)uint64_t __str = v86;
    std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    goto LABEL_138;
  }
  uint64_t v3 = (unsigned int *)a1[5];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (char *)operator new(0xC8uLL, MEMORY[0x263F8C180]);
  if (!v4)
  {
    snprintf(v81, 0x400uLL, "ASSERT,%s,%d,%s", "Ga06_02GetPvtmInfo", 265, "Memory allocation failed for FixData");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v66 = mach_continuous_time();
      unsigned __int16 v67 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "OSA", 69, "Ga06_02GetPvtmInfo", v81);
      LbsOsaTrace_WriteLog(0xEu, __str, v67, 0, 1);
    }
    if (gp_Logger) {
      (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
    }
    __assert_rtn("Ga06_02GetPvtmInfo", "ga06GnssPvtmUtils.cpp", 265, "false && \"Memory allocation failed for FixData\"");
  }
  uint64_t v5 = v4;
  *((_DWORD *)v4 + 2) = -1082130432;
  v4[12] = 0;
  *((_DWORD *)v4 + 4) = 0;
  *((void *)v4 + 3) = -1;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = _Q1;
  *((_OWORD *)v4 + 6) = _Q1;
  *((void *)v4 + 14) = 0;
  uint64_t v11 = v4 + 112;
  *((_DWORD *)v4 + 32) = 0;
  *((void *)v4 + 15) = 0;
  *(_OWORD *)(v4 + 136) = _Q1;
  *(_OWORD *)(v4 + 152) = xmmword_22BB43F90;
  *(_OWORD *)(v4 + 168) = _Q1;
  *((void *)v4 + 23) = 0;
  *((_DWORD *)v4 + 48) = 0;
  *(void *)uint64_t v4 = vcvtad_u64_f64(*((double *)v3 + 5) * 1000000000.0) + 604800000000000 * *((__int16 *)v3 + 14);
  double v12 = *((double *)v3 + 4) * 1000000000.0;
  if (v12 <= 3.40282347e38)
  {
    float v13 = v12;
    if (!*((unsigned char *)v3 + 9)) {
      float v13 = 3.4028e38;
    }
  }
  else
  {
    float v13 = 3.4028e38;
  }
  *((float *)v4 + 2) = v13;
  char v14 = *((unsigned char *)v3 + 10);
  if (v14) {
    char v14 = *((unsigned char *)v3 + 9) != 0;
  }
  v4[12] = v14;
  double v15 = *((double *)v3 + 8);
  if (v15 > 2147483650.0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx UtcCorr,%.9f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "Ga06_02GetPvtmInfo", 770, v15);
      LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
    }
    MEMORY[0x230F4E5D0](v5, 0x1000C4043D32D5CLL);
    uint64_t v5 = 0;
    goto LABEL_126;
  }
  double v18 = -0.5;
  if (v15 > 0.0) {
    double v18 = 0.5;
  }
  *((_DWORD *)v4 + 4) = (int)(v15 + v18);
  int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LeapSec BeforeRound,%.9f,AfterRound,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "Ga06_02GetPvtmInfo", v15, *((_DWORD *)v5 + 4));
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
  }
  double v22 = v15 - (double)(unint64_t)v15;
  if (v22 > 0.0000005 && v22 < 0.9999995)
  {
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx UtcCorr beyond 500ns from seconds boundary,%.9f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 87, "Ga06_02GetPvtmInfo", 770, v15);
      int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v24, 2, 1);
    }
  }
  *((void *)v5 + 3) = 1000000 * *v3;
  *((_OWORD *)v5 + 3) = *(_OWORD *)(v3 + 26);
  double v25 = *((double *)v3 + 15);
  *((double *)v5 + 8) = v25;
  *((double *)v5 + 9) = v25 - *((double *)v3 + 16);
  *((_OWORD *)v5 + 5) = *((_OWORD *)v3 + 12);
  *((_OWORD *)v5 + 6) = *((_OWORD *)v3 + 13);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = 0;
  int v27 = 0;
  int v28 = v3 + 77;
  do
  {
    if (*((unsigned char *)v3 + v26 + 5688))
    {
      int v29 = *((unsigned __int8 *)v28 + v26);
      switch(*((unsigned char *)v28 + v26))
      {
        case 0:
          break;
        case 1:
          v27 |= 1u;
          break;
        case 2:
          v27 |= 2u;
          break;
        case 3:
          v27 |= 0x10u;
          break;
        case 5:
          v27 |= 4u;
          break;
        case 6:
          v27 |= 8u;
          break;
        default:
          int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
          if (IsLoggingAllowed)
          {
            bzero(__str, 0x410uLL);
            uint64_t v30 = mach_continuous_time();
            unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 87, "Ga06_03GetConstlUsedInFix", 770, v29);
            int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v31, 2, 1);
          }
          break;
      }
    }
    ++v26;
  }
  while (v26 != 128);
  *uint64_t v11 = v27;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  switch(*((unsigned char *)v3 + 304))
  {
    case 0:
      *((_DWORD *)v5 + 29) = 0;
      break;
    case 1:
      int v32 = 10;
      goto LABEL_44;
    case 2:
      int v32 = 25;
      goto LABEL_44;
    case 3:
      int v32 = 50;
      goto LABEL_44;
    case 4:
      int v32 = 75;
LABEL_44:
      *((_DWORD *)v5 + 29) = v32;
      break;
    default:
      int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v34 = mach_continuous_time();
        unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Rel,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 87, "Ga06_02GetPvtmInfo", 770, *((unsigned __int8 *)v3 + 304));
        int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v35, 2, 1);
      }
      break;
  }
  unsigned int v33 = v3[75];
  if (!v33)
  {
    *((void *)v5 + 15) = 0;
    goto LABEL_92;
  }
  if (v33)
  {
    *((void *)v5 + 15) |= 2uLL;
    if ((v33 & 2) == 0)
    {
LABEL_48:
      if ((v33 & 4) == 0) {
        goto LABEL_49;
      }
      goto LABEL_72;
    }
  }
  else if ((v33 & 2) == 0)
  {
    goto LABEL_48;
  }
  *((void *)v5 + 15) |= 1uLL;
  if ((v33 & 4) == 0)
  {
LABEL_49:
    if ((v33 & 0x40) == 0) {
      goto LABEL_50;
    }
    goto LABEL_73;
  }
LABEL_72:
  *((void *)v5 + 15) |= 4uLL;
  if ((v33 & 0x40) == 0)
  {
LABEL_50:
    if ((v33 & 0x80) == 0) {
      goto LABEL_51;
    }
    goto LABEL_74;
  }
LABEL_73:
  *((void *)v5 + 15) |= 8uLL;
  if ((v33 & 0x80) == 0)
  {
LABEL_51:
    if ((v33 & 0x100) == 0) {
      goto LABEL_52;
    }
    goto LABEL_75;
  }
LABEL_74:
  *((void *)v5 + 15) |= 0x10uLL;
  if ((v33 & 0x100) == 0)
  {
LABEL_52:
    if ((v33 & 0x200) == 0) {
      goto LABEL_53;
    }
    goto LABEL_76;
  }
LABEL_75:
  *((void *)v5 + 15) |= 0x400uLL;
  if ((v33 & 0x200) == 0)
  {
LABEL_53:
    if ((v33 & 0x400) == 0) {
      goto LABEL_54;
    }
    goto LABEL_77;
  }
LABEL_76:
  *((void *)v5 + 15) |= 0x800uLL;
  if ((v33 & 0x400) == 0)
  {
LABEL_54:
    if ((v33 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_78;
  }
LABEL_77:
  *((void *)v5 + 15) |= 0x1000uLL;
  if ((v33 & 0x800) == 0)
  {
LABEL_55:
    if ((v33 & 0x1000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_79;
  }
LABEL_78:
  *((void *)v5 + 15) |= 0x200000uLL;
  if ((v33 & 0x1000) == 0)
  {
LABEL_56:
    if ((v33 & 0x2000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_80;
  }
LABEL_79:
  *((void *)v5 + 15) |= 0x2000uLL;
  if ((v33 & 0x2000) == 0)
  {
LABEL_57:
    if ((v33 & 0x4000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_81;
  }
LABEL_80:
  *((void *)v5 + 15) |= 0x100uLL;
  if ((v33 & 0x4000) == 0)
  {
LABEL_58:
    if ((v33 & 0x8000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_82;
  }
LABEL_81:
  *((void *)v5 + 15) |= 0x200uLL;
  if ((v33 & 0x8000) == 0)
  {
LABEL_59:
    if ((v33 & 0x10000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_83;
  }
LABEL_82:
  *((void *)v5 + 15) |= 0x4000uLL;
  if ((v33 & 0x10000) == 0)
  {
LABEL_60:
    if ((v33 & 0x20000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_84;
  }
LABEL_83:
  *((void *)v5 + 15) |= 0x8000uLL;
  if ((v33 & 0x20000) == 0)
  {
LABEL_61:
    if ((v33 & 0x40000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_85;
  }
LABEL_84:
  *((void *)v5 + 15) |= 0x20000uLL;
  if ((v33 & 0x40000) == 0)
  {
LABEL_62:
    if ((v33 & 0x1000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_86;
  }
LABEL_85:
  *((void *)v5 + 15) |= 0x10000uLL;
  if ((v33 & 0x1000000) == 0)
  {
LABEL_63:
    if ((v33 & 0x2000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_87;
  }
LABEL_86:
  *((void *)v5 + 15) |= 0x20uLL;
  if ((v33 & 0x2000000) == 0)
  {
LABEL_64:
    if ((v33 & 0x4000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_88;
  }
LABEL_87:
  *((void *)v5 + 15) |= 0x40uLL;
  if ((v33 & 0x4000000) == 0)
  {
LABEL_65:
    if ((v33 & 0x10000000) == 0) {
      goto LABEL_66;
    }
LABEL_89:
    *((void *)v5 + 15) |= 0x40000uLL;
    if ((v33 & 0x20000000) == 0)
    {
LABEL_67:
      if ((v33 & 0x40000000) == 0) {
        goto LABEL_92;
      }
      goto LABEL_91;
    }
    goto LABEL_90;
  }
LABEL_88:
  *((void *)v5 + 15) |= 0x80uLL;
  if ((v33 & 0x10000000) != 0) {
    goto LABEL_89;
  }
LABEL_66:
  if ((v33 & 0x20000000) == 0) {
    goto LABEL_67;
  }
LABEL_90:
  *((void *)v5 + 15) |= 0x80000uLL;
  if ((v33 & 0x40000000) != 0) {
LABEL_91:
  }
    *((void *)v5 + 15) |= 0x100000uLL;
LABEL_92:
  switch(*((unsigned char *)v3 + 293))
  {
    case 0:
      *((_DWORD *)v5 + 32) = 0;
      break;
    case 1:
      int v36 = 1;
      goto LABEL_100;
    case 2:
      int v36 = 2;
      goto LABEL_100;
    case 3:
      int v36 = 3;
      goto LABEL_100;
    case 4:
      int v36 = 4;
LABEL_100:
      *((_DWORD *)v5 + 32) = v36;
      break;
    default:
      int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v64 = mach_continuous_time();
        unsigned __int16 v65 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnssContent,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v64), "ADP", 87, "Ga06_02GetPvtmInfo", 770, *((unsigned __int8 *)v3 + 293));
        int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v65, 2, 1);
      }
      break;
  }
  *((void *)v5 + 17) = *((void *)v3 + 17);
  *((void *)v5 + 18) = *((void *)v3 + 28);
  *((void *)v5 + 19) = *((void *)v3 + 19);
  *((void *)v5 + 20) = *((void *)v3 + 29);
  double v37 = *((double *)v3 + 18);
  if (v37 < 0.0 || v37 >= 360.0 || (double v38 = *((double *)v3 + 30), v38 <= 0.0))
  {
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v39 = mach_continuous_time();
      unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Course,%f,Uncertainty,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 69, "Ga06_02GetPvtmInfo", 515, *((double *)v3 + 18), *((double *)v3 + 30));
      int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v40, 0, 1);
    }
  }
  else
  {
    *((double *)v5 + 21) = v37;
    *((double *)v5 + 22) = v38;
  }
  *((void *)v5 + 23) = gnss::GnssAdaptDevice::Ga06_18GetGnssSpoofingFlag(IsLoggingAllowed, v3[74]);
  switch(*((unsigned char *)v3 + 305))
  {
    case 0:
      *((_DWORD *)v5 + 48) = 0;
      break;
    case 1:
      int v41 = 1;
      goto LABEL_112;
    case 2:
      int v41 = 2;
      goto LABEL_112;
    case 3:
      int v41 = 3;
LABEL_112:
      *((_DWORD *)v5 + 48) = v41;
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v62 = mach_continuous_time();
        unsigned __int16 v63 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EstimationTech,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "ADP", 87, "Ga06_02GetPvtmInfo", 770, *((unsigned __int8 *)v3 + 305));
        LbsOsaTrace_WriteLog(0x18u, __str, v63, 2, 1);
      }
      break;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v42 = mach_continuous_time();
    unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: spoofingFlags,%llu,Rel,%u,AssisUsed,%llu,GnssContentInFix,%u,EstimTech,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 73, "Ga06_02GetPvtmInfo", *((void *)v5 + 23), *((_DWORD *)v5 + 29), *((void *)v5 + 15), *((_DWORD *)v5 + 32), *((_DWORD *)v5 + 48));
    LbsOsaTrace_WriteLog(0x18u, __str, v43, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v44 = mach_continuous_time();
    unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%f,Lon,%f,Alt,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "ADP", 73, "Ga06_02GetPvtmInfo", *((double *)v5 + 6), *((double *)v5 + 7), *((double *)v5 + 8));
    LbsOsaTrace_WriteLog(0x18u, __str, v45, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v46 = mach_continuous_time();
    unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeNS,%llu,TimeUncNs,%f,LeapStart,%d,ClkNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "ADP", 73, "Ga06_02GetPvtmInfo", *(void *)v5, *((float *)v5 + 2), *((_DWORD *)v5 + 4), *((void *)v5 + 3));
    LbsOsaTrace_WriteLog(0x18u, __str, v47, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    unint64_t v48 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (v5[12]) {
      uint64_t v49 = 84;
    }
    else {
      uint64_t v49 = 70;
    }
    unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LeapSecValid,%c,VUnc,%f,HMajUnc,%f,HMinUnc,%f,HAzmBrg,%f,HS,%f,HSpeedUnc,%f,VVel,%f,VVelUnc,%f\n", v48, "ADP", 73, "Ga06_02GetPvtmInfo", v49, *((double *)v5 + 10), *((double *)v5 + 11), *((double *)v5 + 12), *((double *)v5 + 13), *((double *)v5 + 17), *((double *)v5 + 18), *((double *)v5 + 19), *((double *)v5 + 20));
    LbsOsaTrace_WriteLog(0x18u, __str, v50, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v51 = mach_continuous_time();
    unsigned __int16 v52 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: U,%f,S,%u,C,%f,CUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), "ADP", 73, "Ga06_02GetPvtmInfo", *((double *)v5 + 9), *((_DWORD *)v5 + 28), *((double *)v5 + 21), *((double *)v5 + 22));
    LbsOsaTrace_WriteLog(0x18u, __str, v52, 4, 1);
  }
LABEL_126:
  uint64_t v53 = v73[5];
  v73[5] = (uint64_t)v5;
  if (v53) {
    MEMORY[0x230F4E5D0](v53, 0x1000C4043D32D5CLL);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v73[5])
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v54 = mach_continuous_time();
      unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Reporting PVTM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "ADP", 68, "Ga06_01ReportPvtm_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v55, 5, 1);
    }
    goto LABEL_133;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v60 = mach_continuous_time();
    unsigned __int16 v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Fix\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "ADP", 69, "Ga06_01ReportPvtm_block_invoke", 770);
    LbsOsaTrace_WriteLog(0x18u, __str, v61, 0, 1);
  }
LABEL_138:
  _Block_object_dispose(&v72, 8);
  uint64_t result = v77;
  uint64_t v77 = 0;
  if (result) {
    return MEMORY[0x230F4E5D0](result, 0x1000C4043D32D5CLL);
  }
  return result;
}

void sub_22B9F0F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  MEMORY[0x230F4E5D0](v37, 0x1000C4043D32D5CLL);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Block_object_dispose(&a32, 8);
  uint64_t v39 = a37;
  a37 = 0;
  if (v39) {
    MEMORY[0x230F4E5D0](v39, 0x1000C4043D32D5CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__31(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    JUMPOUT(0x230F4E5D0);
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_2_34(void *a1)
{
  v12[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1[4] + 8);
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  uint64_t v11 = 0;
  v12[0] = v2;
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = *(void *)(a1[6] + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v5 = a1[10];
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void *, uint64_t *, uint64_t, uint64_t, uint64_t **, uint64_t *))(*(void *)v5 + 48))(v5, v12, &v11, v3 + 40, v4 + 40, &v10, &v9);
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6) {
    MEMORY[0x230F4E5D0](v6, 0x1000C400A747E1ELL);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100]((uint64_t)&v10, v7);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&v11, 0);
  uint64_t result = v12[0];
  v12[0] = 0;
  if (result) {
    return MEMORY[0x230F4E5D0](result, 0x1000C4043D32D5CLL);
  }
  return result;
}

void sub_22B9F1280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13)
{
  if (a10) {
    MEMORY[0x230F4E5D0](a10, 0x1000C400A747E1ELL);
  }
  char v14 = a11;
  a11 = 0;
  if (v14) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100]((uint64_t)&a11, v14);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&a12, 0);
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    MEMORY[0x230F4E5D0](v15, 0x1000C4043D32D5CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_56c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 56;
  uint64_t v3 = a1 + 56;

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_56c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 56);

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v1);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrI19s_Gnm_AppCStructNavEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrI19s_Gnm_AppCStructNavEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t gnss::GnssAdaptDevice::Ga06_18GetGnssSpoofingFlag(gnss::GnssAdaptDevice *this, unsigned int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2 & 0x20F | (((a2 >> 4) & 1) << 6) | (a2 >> 4) & 0x10 | (a2 >> 3) & 0x80 | (a2 >> 7) & 0x20 | (a2 >> 5) & 0x100;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnsAsstSpoofMask,%u,Spoofing Flag,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 73, "Ga06_18GetGnssSpoofingFlag", a2, v3);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 4, 1);
  }
  return v3;
}

uint64_t gnss::GnssAdaptDevice::Ga06_17GetDetectionMethod(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (result >= 5)
  {
    int v1 = result;
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Default MeasModelCode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 87, "Ga06_17GetDetectionMethod", 770, v1);
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 2, 1);
      return 0;
    }
  }
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga06_19GetSvHealthAndIntegrity(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (result >= 3)
  {
    int v1 = result;
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HealthUnknown,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 87, "Ga06_19GetSvHealthAndIntegrity", 770, v1);
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 2, 1);
      return 0;
    }
  }
  return result;
}

void gnss::SvInfo::~SvInfo(gnss::SvInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    MEMORY[0x230F4E5D0](v3, 0x1000C40AC4F46D1);
  }
  unsigned __int16 v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

void gnss::GnssAdaptDevice::Ga06_15GnssRegisterNmeaCB(gnss::GnssAdaptDevice *a1, void *a2, unsigned __int16 a3)
{
  int v5 = (int)a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  Deviceuint64_t Instance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    if (v5)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Report Err,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga06_16ReportNmea", 769, v5);
        LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
      }
    }
    else if (a2)
    {
      uint64_t v9 = DeviceInstance;
      std::string::basic_string[abi:ne180100](&__dst, a2, a3);
      uint64_t v10 = *(NSObject **)(v9 + 288);
      *(void *)uint64_t __str = MEMORY[0x263EF8330];
      uint64_t v15 = 1174405120;
      uint64_t v16 = ___ZN4gnss15GnssAdaptDevice17Ga06_16ReportNmeaE11e_Gnm_Error17s_Gnm_AppNmeaData_block_invoke;
      unsigned __int16 v17 = &__block_descriptor_tmp_108;
      uint64_t v18 = v9;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = __dst;
      }
      dispatch_async(v10, __str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NMEA Payload\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 87, "Ga06_16ReportNmea", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 2, 1);
    }
  }
}

void sub_22B9F1A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_16ReportNmeaE11e_Gnm_Error17s_Gnm_AppNmeaData_block_invoke(uint64_t a1)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = MEMORY[0x263F8C338] + 64;
  v57[0] = MEMORY[0x263F8C338] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  v54[0] = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *(uint64_t *)((char *)v54 + *(void *)(v54[0] - 24)) = v4;
  v54[1] = 0;
  int v5 = (std::ios_base *)((char *)v54 + *(void *)(v54[0] - 24));
  std::ios_base::init(v5, v55);
  uint64_t v6 = MEMORY[0x263F8C338] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  v54[0] = v6;
  v57[0] = v3;
  std::stringbuf::basic_stringbuf[abi:ne180100]((uint64_t)v55, (const std::string *)(a1 + 40), 8);
  uint64_t v44 = 0;
  unsigned __int16 v45 = &v44;
  uint64_t v46 = 0x4002000000;
  unsigned __int16 v47 = __Block_byref_object_copy__103;
  unint64_t v48 = __Block_byref_object_dispose__104;
  memset(v49, 0, 24);
  memset(&v43, 0, sizeof(v43));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, (uint64_t)&v43);
  uint64_t v41 = a1;
  if ((*((unsigned char *)&v55[2] + *(void *)(v54[0] - 24)) & 5) != 0) {
    first = 0;
  }
  else {
    first = (std::string *)v54;
  }
  unsigned __int16 v8 = v45;
  unsigned __int16 v50 = first;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v51, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
    first = v50;
  }
  else
  {
    std::string v51 = v43;
  }
  std::string::size_type size = (std::string *)v51.__r_.__value_.__l.__size_;
  uint64_t v10 = (std::string::value_type *)v51.__r_.__value_.__r.__words[0];
  *(_DWORD *)((char *)v58 + 3) = *(_DWORD *)((char *)&v51.__r_.__value_.__r.__words[2] + 3);
  int v11 = v51.__r_.__value_.__r.__words[2];
  HIBYTE(v58[0]) = v51.__r_.__value_.__s.__data_[19];
  int v12 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
  memset(&v51, 0, sizeof(v51));
  v59[0] = v11;
  *(_DWORD *)((char *)v59 + 3) = *(_DWORD *)((char *)v58 + 3);
  *(_DWORD *)((char *)v58 + 3) = 0;
  v58[0] = 0;
  unsigned __int16 v52 = first;
  int v42 = v12;
  if (v12 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v10, (std::string::size_type)size);
    first = v52;
    std::string::size_type size = (std::string *)__p.__r_.__value_.__l.__size_;
    float v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    LOBYTE(v12) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = __PAIR128__((unint64_t)size, (unint64_t)v10);
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v59[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v59 + 3);
    float v13 = (std::string *)v10;
  }
  LODWORD(v60) = __p.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)&v60 + 3) = *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3);
  memset(&__p, 0, sizeof(__p));
  v70.__first_ = first;
  if ((v12 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v70.__begin_, (const std::string::value_type *)v13, (std::string::size_type)size);
    first = v70.__first_;
    begiuint64_t n = v70.__begin_;
    char value_high = HIBYTE(v70.__end_cap_.__value_);
  }
  else
  {
    v70.__begin_ = v13;
    v70.__end_ = size;
    LODWORD(v70.__end_cap_.__value_) = v60;
    *(_DWORD *)((char *)&v70.__end_cap_.__value_ + 3) = *(_DWORD *)((char *)&v60 + 3);
    char value_high = v12;
    begiuint64_t n = v13;
  }
  v66[1] = v70.__end_;
  *(void **)((char *)&v66[1] + 7) = *(void **)((char *)&v70.__end_ + 7);
  *(void *)uint64_t __str = first;
  v66[0] = begin;
  HIBYTE(v66[2]) = value_high;
  v66[3] = 0;
  if ((v12 & 0x80) != 0) {
    operator delete(v13);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long __s = *(_OWORD *)v66;
  uint64_t v60 = first;
  uint64_t v62 = v66[2];
  memset(v66, 0, 24);
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  unsigned __int16 v67 = 0;
  if (first)
  {
    while (1)
    {
      unint64_t v17 = v8[6];
      unint64_t v16 = v8[7];
      if (v17 >= v16)
      {
        unint64_t v19 = v8[5];
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v19) >> 3) + 1;
        if (v20 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v19) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        unint64_t v22 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v20;
        v70.__end_cap_.__value_ = (std::allocator<std::string> *)(v8 + 7);
        if (v22)
        {
          if (v22 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = (std::string *)operator new(24 * v22);
        }
        else
        {
          uint64_t v23 = 0;
        }
        std::__split_buffer<std::string>::pointer v25 = (std::string *)((char *)v23 + 8 * ((uint64_t)(v17 - v19) >> 3));
        v70.__first_ = v23;
        v70.__begin_ = v25;
        v70.__end_ = v25;
        v70.__end_cap_.__value_ = &v23[v22];
        if (SHIBYTE(v62) < 0)
        {
          std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          unint64_t v19 = v8[5];
          unint64_t v17 = v8[6];
          std::__split_buffer<std::string>::pointer v25 = v70.__begin_;
          std::__split_buffer<std::string>::pointer end = v70.__end_;
        }
        else
        {
          *(_OWORD *)&v25->__r_.__value_.__l.__data_ = __s;
          v25->__r_.__value_.__r.__words[2] = (std::string::size_type)v62;
          std::__split_buffer<std::string>::pointer end = (std::string *)((char *)v23 + 8 * ((uint64_t)(v17 - v19) >> 3));
        }
        if (v17 == v19)
        {
          int64x2_t v28 = vdupq_n_s64(v19);
        }
        else
        {
          do
          {
            long long v27 = *(_OWORD *)(v17 - 24);
            v25[-1].__r_.__value_.__r.__words[2] = *(void *)(v17 - 8);
            *(_OWORD *)&v25[-1].__r_.__value_.__l.__data_ = v27;
            --v25;
            *(void *)(v17 - 16) = 0;
            *(void *)(v17 - 8) = 0;
            *(void *)(v17 - 24) = 0;
            v17 -= 24;
          }
          while (v17 != v19);
          int64x2_t v28 = *(int64x2_t *)(v8 + 5);
        }
        std::__split_buffer<std::string>::pointer v24 = end + 1;
        v8[5] = (uint64_t)v25;
        v8[6] = (uint64_t)&end[1];
        *(int64x2_t *)&v70.__begin_ = v28;
        int v29 = (std::string *)v8[7];
        v8[7] = (uint64_t)v70.__end_cap_.__value_;
        v70.__end_cap_.__value_ = v29;
        v70.__first_ = (std::__split_buffer<std::string>::pointer)v28.i64[0];
        std::__split_buffer<std::string>::~__split_buffer(&v70);
      }
      else
      {
        if (SHIBYTE(v62) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v8[6], (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          long long v18 = __s;
          *(void *)(v17 + 16) = v62;
          *(_OWORD *)unint64_t v17 = v18;
        }
        std::__split_buffer<std::string>::pointer v24 = (std::__split_buffer<std::string>::pointer)(v17 + 24);
        v8[6] = v17 + 24;
      }
      v8[6] = (uint64_t)v24;
      uint64_t v30 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v60, (uint64_t)&__s);
      if ((*((unsigned char *)v30 + *(void *)(*v30 - 24) + 32) & 5) != 0) {
        break;
      }
      if (!v60) {
        goto LABEL_45;
      }
    }
    uint64_t v60 = 0;
  }
LABEL_45:
  unsigned __int16 v31 = (void *)__s;
  int v32 = SHIBYTE(v62);
  long long __s = 0uLL;
  uint64_t v62 = 0;
  if (v42 < 0) {
    operator delete(v10);
  }
  unsigned int v33 = (uint64_t *)MEMORY[0x263F8C2C0];
  if (SHIBYTE(v69) < 0) {
    operator delete(v67);
  }
  if (SHIBYTE(v66[2]) < 0)
  {
    operator delete(v66[0]);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_51;
    }
  }
  else if ((v32 & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(v31);
LABEL_51:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)&v70, v2 + 408);
  if (v70.__end_cap_.__value_)
  {
    uint64_t v34 = *(NSObject **)(v2 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice17Ga06_16ReportNmeaE11e_Gnm_Error17s_Gnm_AppNmeaData_block_invoke_2;
    block[3] = &unk_26DF1A230;
    std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)v64, (uint64_t)&v70);
    void block[4] = &v44;
    dispatch_async(v34, block);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v35 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(char *)(v41 + 63) < 0) {
        uint64_t v36 = *(void *)(v41 + 48);
      }
      else {
        uint64_t v36 = *(unsigned __int8 *)(v41 + 63);
      }
      unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NMEA Sent len,%zu\n", (unint64_t)v35, "ADP", 77, "Ga06_16ReportNmea_block_invoke", v36);
      LbsOsaTrace_WriteLog(0x18u, __str, v39, 3, 1);
    }
    std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](v64);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v37 = mach_continuous_time();
    unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NMEA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 69, "Ga06_16ReportNmea_block_invoke", 516);
    LbsOsaTrace_WriteLog(0x18u, __str, v38, 0, 1);
  }
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](&v70);
  _Block_object_dispose(&v44, 8);
  *(void *)uint64_t __str = v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  v54[0] = *v33;
  *(uint64_t *)((char *)v54 + *(void *)(v54[0] - 24)) = v33[3];
  v55[0] = MEMORY[0x263F8C318] + 16;
  if (v56 < 0) {
    operator delete((void *)v55[8]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x230F4E540](v57);
}

void sub_22B9F2398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100]((void *)(v43 - 136));
  _Block_object_dispose(&a26, 8);
  a34 = a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  std::istringstream::~istringstream((uint64_t)&a43);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__103(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__104(uint64_t a1)
{
  v1[1] = *(void ***)MEMORY[0x263EF8340];
  v1[0] = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_16ReportNmeaE11e_Gnm_Error17s_Gnm_AppNmeaData_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t __copy_helper_block_e8_40c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](v1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x230F4E540](a1 + 120);
  return a1;
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::size_type v4 = *(void *)(a2 + 48);
    int v5 = *(const std::string::value_type **)(a2 + 40);
    std::string::__init_copy_ctor_external(v2, v5, v4);
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v1 = *(void **)(a1 + 40);
    operator delete(v1);
  }
}

uint64_t *std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  v3[1] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    v3[0] = (void **)(v2 + 112);
    std::vector<gnss::Measurement>::__destroy_vector::operator()[abi:ne180100](v3);
    return (uint64_t *)MEMORY[0x230F4E5D0](v2, 0x1020C40B6788CC9);
  }
  return result;
}

void std::vector<gnss::Measurement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<gnss::Measurement>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<gnss::Measurement>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void *a2)
{
  std::string::size_type v4 = *(void **)(a1 + 8);
  if (v4 != a2)
  {
    int v5 = v4 - 2;
    do
    {
      uint64_t v6 = (void *)*v5;
      *int v5 = 0;
      if (v6) {
        std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
      uint64_t v7 = v5 - 20;
      v5 -= 22;
    }
    while (v7 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[4];
    a2[4] = 0;
    if (v3) {
      MEMORY[0x230F4E5D0](v3, 0x1000C4095D96C66);
    }
    uint64_t v4 = a2[3];
    a2[3] = 0;
    if (v4) {
      MEMORY[0x230F4E5D0](v4, 0x1000C4095D96C66);
    }
    uint64_t v5 = a2[2];
    a2[2] = 0;
    if (v5) {
      MEMORY[0x230F4E5D0](v5, 0x1000C4095D96C66);
    }
    uint64_t v6 = a2[1];
    a2[1] = 0;
    if (v6) {
      MEMORY[0x230F4E5D0](v6, 0x1000C40D315E998);
    }
    uint64_t v7 = *a2;
    *a2 = 0;
    if (v7) {
      MEMORY[0x230F4E5D0](v7, 0x1000C4079AA8B5ELL);
    }
    JUMPOUT(0x230F4E5D0);
  }
}

void std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 17;
        std::allocator<gnss::SvInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<gnss::SvInfo>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[14];
  if (v3)
  {
    a2[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a2[6];
  a2[6] = 0;
  if (v4) {
    MEMORY[0x230F4E5D0](v4, 0x1000C40AC4F46D1);
  }
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    a2[4] = v5;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x230F4E5D0);
}

uint64_t std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    JUMPOUT(0x230F4E5D0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::__on_zero_shared_weak(void *__p)
{
  operator delete(__p);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[16];
    if (v3)
    {
      a2[17] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[12];
    if (v4)
    {
      a2[13] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x230F4E5D0);
  }
}

uint64_t *std::vector<gnss::SvInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 136;
      long long v6 = *(_OWORD *)(v3 - 136);
      *(unsigned char *)(v4 - 120) = *(unsigned char *)(v3 - 120);
      *(_OWORD *)(v4 - 136) = v6;
      *(void *)(v4 - 112) = 0;
      *(_OWORD *)(v4 - 104) = 0uLL;
      *(_OWORD *)(v4 - 112) = *(_OWORD *)(v3 - 112);
      *(void *)(v4 - 96) = *(void *)(v3 - 96);
      uint64_t v7 = *(void *)(v3 - 88);
      *(_OWORD *)(v3 - 112) = 0uLL;
      *(_OWORD *)(v3 - 96) = 0uLL;
      *(void *)(v4 - 88) = v7;
      long long v8 = *(_OWORD *)(v3 - 80);
      long long v9 = *(_OWORD *)(v3 - 64);
      long long v10 = *(_OWORD *)(v3 - 48);
      *(_WORD *)(v4 - 32) = *(_WORD *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = v9;
      *(_OWORD *)(v4 - 48) = v10;
      *(_OWORD *)(v4 - 80) = v8;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 136;
      v3 -= 136;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v11 = *result;
  *uint64_t result = v5;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvInfo>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a1);
}

uint64_t std::__split_buffer<gnss::SvInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 136;
    std::allocator<gnss::SvInfo>::destroy[abi:ne180100](v4, (void *)(i - 136));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  MEMORY[0x230F4E440](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  long long v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    char v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_22B9F36C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  if (a2)
  {
    std::locale::~locale(&a10);
    __cxa_begin_catch(exception_object);
    uint64_t v12 = *v10;
    *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + 32) |= 1u;
    if ((*((unsigned char *)v10 + *(void *)(v12 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x22B9F3668);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  begiuint64_t n = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvPositionAtTime>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void SuplResponseRecdVer2::UpdateLppADPayload(SuplUtils *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(SuplUtils::GetInstance(a1) + 36))
  {
    std::string __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    if (a3)
    {
      uint64_t v5 = 0;
      uint64_t v8 = *(char **)(a3 + 32);
      uint64_t v7 = a3 + 32;
      uint64_t v6 = v8;
      if ((void **)v7 != &__p)
      {
        long long v9 = *(char **)(v7 + 8);
        if (v6 != v9)
        {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v6, v9, v9 - v6);
          uint64_t v5 = (char *)__p;
        }
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "UpdateLppADPayload", 513);
        LbsOsaTrace_WriteLog(0x12u, __str, v13, 0, 1);
      }
      uint64_t v5 = 0;
    }
    char v14 = v21;
    if (v5 == v21)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "SPL", 69, "UpdateLppADPayload", 513);
        LbsOsaTrace_WriteLog(0x12u, __str, v19, 0, 1);
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a2 + 8);
      *(void *)uint64_t __str = 0;
      std::__split_buffer<std::string>::pointer v24 = 0;
      uint64_t v25 = 0;
      *(_WORD *)(v15 + 656) = 4;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__str, v5, v14, v14 - v5);
      int v16 = *(void **)(v15 + 752);
      if ((unint64_t)v16 >= *(void *)(v15 + 760))
      {
        uint64_t v17 = std::vector<ASN1T_PosPayLoad_lpppayload>::__push_back_slow_path<ASN1T_PosPayLoad_lpppayload const&>((uint64_t *)(v15 + 744), (uint64_t)__str);
      }
      else
      {
        *int v16 = 0;
        v16[1] = 0;
        _OWORD v16[2] = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v16, *(const void **)__str, (uint64_t)v24, (size_t)v24 - *(void *)__str);
        uint64_t v17 = (uint64_t)(v16 + 3);
        *(void *)(v15 + 752) = v16 + 3;
      }
      *(void *)(v15 + 752) = v17;
      *(unsigned char *)(v15 + 736) = 1;
      *(unsigned char *)(v15 + 2) = 1;
      if (*(void *)__str)
      {
        std::__split_buffer<std::string>::pointer v24 = *(const void **)__str;
        operator delete(*(void **)__str);
      }
    }
    if (__p)
    {
      uint64_t v21 = (char *)__p;
      operator delete(__p);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "SPL", 69, "UpdateLppADPayload", 770);
    LbsOsaTrace_WriteLog(0x12u, __str, v11, 0, 1);
  }
}

void sub_22B9F3B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
}

void SuplResponseRecdVer2::UpdateLppCapPayload(SuplResponseRecdVer2 *this, ASN1T_UlpMessage *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t Instance = (SuplLppProvider *)SuplUtils::GetInstance(this);
  if (*((unsigned char *)Instance + 36))
  {
    std::string __p = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    uint64_t v4 = SuplLppProvider::GetInstance(Instance);
    if (&__p == (void **)v4
      || (uint64_t v5 = *(char **)(v4 + 8), *(char **)v4 == v5)
      || (std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(char **)v4, v5, (unint64_t)&v5[-*(void *)v4]), uint64_t v6 = (char *)__p, v7 = v16, __p == v16))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 69, "UpdateLppCapPayload", 513);
        LbsOsaTrace_WriteLog(0x12u, __str, v12, 0, 1);
      }
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      *(void *)uint64_t __str = 0;
      unsigned __int16 v19 = 0;
      uint64_t v20 = 0;
      *(_WORD *)(v8 + 656) = 4;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__str, v6, v7, v7 - v6);
      long long v9 = *(void **)(v8 + 752);
      if ((unint64_t)v9 >= *(void *)(v8 + 760))
      {
        uint64_t v10 = std::vector<ASN1T_PosPayLoad_lpppayload>::__push_back_slow_path<ASN1T_PosPayLoad_lpppayload const&>((uint64_t *)(v8 + 744), (uint64_t)__str);
      }
      else
      {
        *long long v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v9, *(const void **)__str, (uint64_t)v19, (size_t)v19 - *(void *)__str);
        uint64_t v10 = (uint64_t)(v9 + 3);
        *(void *)(v8 + 752) = v9 + 3;
      }
      *(void *)(v8 + 752) = v10;
      *(unsigned char *)(v8 + 736) = 1;
      *(unsigned char *)(v8 + 2) = 1;
      if (*(void *)__str)
      {
        unsigned __int16 v19 = *(const void **)__str;
        operator delete(*(void **)__str);
      }
    }
    if (__p)
    {
      int v16 = (char *)__p;
      operator delete(__p);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "SPL", 69, "UpdateLppCapPayload", 770);
    LbsOsaTrace_WriteLog(0x12u, __str, v14, 0, 1);
  }
}

void sub_22B9F3E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v21 = v19;
  *(void *)(v20 + 752) = v21;
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t asn1PD_TriggerType(uint64_t a1, unsigned char *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  int v5 = *(unsigned __int8 *)(a1 + 16);
  char v12 = 0;
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = BitFromBuffer == 0;
  }
  if (v6)
  {
    uint64_t v10 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v12);
    if (v10)
    {
      uint64_t v7 = v10;
      int v8 = *(_DWORD *)(a1 + 8);
      int v9 = *(_DWORD *)(a1 + 12);
LABEL_13:
      SuplAsn1Logger::TraceError(v10, v8, v9);
      return v7;
    }
  }
  else
  {
    uint64_t v10 = Asn1Coder::DecodeEnumerationExtension(a1, &v12);
    if (v10)
    {
      uint64_t v7 = v10;
      int v8 = *(_DWORD *)(a1 + 8);
      int v9 = *(_DWORD *)(a1 + 12);
      goto LABEL_13;
    }
  }
  if (*a2 > 1u)
  {
    uint64_t v7 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    int v8 = *(_DWORD *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 12);
    LODWORD(v10) = 4;
    goto LABEL_13;
  }
  uint64_t v7 = 0;
  *a2 = v12;
  return v7;
}

uint64_t GncP00_04HandleInitInd()
{
  *(void *)&v15[972] = *MEMORY[0x263EF8340];
  uint64_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_INIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP00_04HandleInitInd");
    uint64_t IsLoggingAllowed = LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
  }
  GncP01_00InitPeUpdate(IsLoggingAllowed, v1, v2, v3, v4, v5);
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)uint64_t __str = 0u;
  long long v12 = 0u;
  uint64_t v8 = 4;
  do
  {
    int v9 = &__str[v8];
    *int v9 = 0;
    *(_DWORD *)(v9 + 2) = 0;
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 3) = 0;
    *((void *)v9 + 1) = 0;
    *(_DWORD *)(v9 + 31) = 0;
    v8 += 36;
  }
  while (v9 + 36 != v15);
  xmmword_26AE541D8 = v13;
  unk_26AE541E8 = *(_OWORD *)v14;
  unk_26AE541F4 = *(_OWORD *)&v14[12];
  g_GncPCntxtInfo = *(_OWORD *)__str;
  unk_26AE541C8 = v12;
  GncP05_30InitConfig();
  g_GnssDataClrMasunsigned int k = 0;
  g_GncPStateInfo = 0u;
  *(_OWORD *)&byte_26AE54218 = 0u;
  qword_26AE54228 = 0;
  g_GncPMeData = 0;
  g_GncPMeData = 0;
  g_GncPMeData = 0;
  g_GncPMeData = 0;
  g_MEResetInfo = 0;
  g_MEResetInfo = 0;
  xofScvs_Init();
  g_OrbitDataAvailable = 0;
  g_BceOrbitDataInjected = 0;
  g_TimeMarkState = 1;
  return 0;
}

uint64_t GncP00_06HandleDeInitInd()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_DEINIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "GncP00_06HandleDeInitInd");
    LbsOsaTrace_WriteLog(8u, __str, v1, 4, 1);
  }
  xofSvcs_Deinit();
  g_OrbitDataAvailable = 0;
  g_BceOrbitDataInjected = 0;
  GncP02_13ClearMEBuf();
  if (g_GncPMeData == 1) {
    AgpsFsmStopTimer(8789510);
  }
  GncP25_02StopTimemarkSessTimer();
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTicunsigned int k = 0;
  g_TimeMarkState = 1;
  GncP16_99DeInitStateHndlr();
  if (g_MEResetInfo == 1) {
    AgpsFsmStopTimer(8790022);
  }
  gncP01_01DeInitPeUpdate();
  return 0;
}

uint64_t GncP00_03DefaultMessage(unsigned __int8 *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FSM:MID,%x, Srce,%u, Dest,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncP00_03DefaultMessage", 520, *((_DWORD *)a1 + 1), *a1, a1[1]);
      int v4 = 2;
LABEL_6:
      LbsOsaTrace_WriteLog(8u, __str, v3, v4, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncP00_03DefaultMessage", 517);
    int v4 = 0;
    goto LABEL_6;
  }
  return 0;
}

void GncP00_01Init(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncP00_01Init", 146, 1, 0x10uLL);
  if (v0)
  {
    unsigned __int16 v1 = v0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_INIT_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP00_01Init");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    AgpsSendFsmMsg(134, 134, 8788995, v1);
  }
}

void GncP00_02DeInit(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncP00_02DeInit", 165, 1, 0x10uLL);
  if (v0)
  {
    unsigned __int16 v1 = v0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_DEINIT_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP00_02DeInit");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    AgpsSendFsmMsg(134, 134, 8789251, v1);
  }
}

void GncP00_07DestMissingHandler(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP00_07DestMissingHandler", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 == 8786691 || v4 == 8787203 || v4 == 8788739)
  {
    uint64_t v5 = *(void **)(a1 + 16);
    if (v5) {
      free(v5);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP00_07DestMissingHandler", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
  }
}

void UNB_TropModel::Set_UNB_TropModel_Params(UNB_TropModel *this, double a2, double a3, int a4)
{
  BOOL v6 = a2 <= 18000.0 && a2 >= -500.0;
  *((unsigned char *)this + 25) = v6;
  *((double *)this + 2) = a2;
  BOOL v7 = a3 < -90.0;
  if (a3 > 90.0) {
    BOOL v7 = 1;
  }
  if (v7)
  {
    char v8 = 0;
    *((unsigned char *)this + 24) = 0;
    *((unsigned char *)this + 96) = 0;
  }
  else if (vabdd_f64(*((double *)this + 1), a3) <= 0.5 && *((unsigned char *)this + 24))
  {
    char v8 = 1;
  }
  else
  {
    char v8 = 1;
    *((unsigned char *)this + 24) = 1;
    *((unsigned char *)this + 27) = 1;
    *((double *)this + 1) = a3;
  }
  if ((a4 - 367) >= 0xFFFFFE92)
  {
    if (*(_DWORD *)this == a4 && *((unsigned char *)this + 26))
    {
      BOOL v9 = *((unsigned char *)this + 27) == 0;
    }
    else
    {
      BOOL v9 = 0;
      *((_WORD *)this + 13) = 257;
      *(_DWORD *)this = a4;
    }
    if (!v7 && !v9)
    {
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenT0, UNB_ZenTa);
      double v11 = v10;
      *((double *)this + 7) = v10;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenP0, UNB_ZenPa);
      double v13 = v12;
      *((double *)this + 6) = v12;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenW0, UNB_ZenWa);
      *((void *)this + 11) = v14;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenB0, UNB_ZenBa);
      *((void *)this + 8) = v15;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenL0, UNB_ZenLa);
      double v17 = v16;
      *((double *)this + 9) = v16;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenW0_T, UNB_ZenWa_T);
      double v19 = v18;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenB0_T, UNB_ZenBa_T);
      double v21 = v20 * 0.001;
      *((double *)this + 8) = v20 * 0.001;
      double v22 = (v13 * 0.00000314 + 1.00062 + (v11 + -273.15) * (v11 + -273.15) * 0.00000056)
          * (exp(v11 * -0.019121316 + v11 * v11 * 0.000012378847 + 33.9371105 + -6343.1645 / v11)
           * 0.01
           * (v19
            * 0.01));
      *((double *)this + 11) = v22;
      *((unsigned char *)this + 28) = 0;
      if (v6)
      {
        double v23 = v21 * 287.053763;
        long double v24 = 9.80665 / (v21 * 287.053763);
        double v25 = v11 - v21 * a2;
        long double v26 = v25 / v11;
        long double v27 = v13 * pow(v26, v24);
        double v28 = v17 + 1.0;
        *((long double *)this + 11) = v22 * pow(v26, v28 * v24);
        *((long double *)this + 6) = v27;
        *((double *)this + 7) = v25;
        long double v29 = tan(*((double *)this + 1) * 0.0174532925);
        long double v30 = atan(v29 * 0.99330562);
        *((long double *)this + 10) = v25
                                    * (v23 / (v28 * ((cos(v30 + v30) * -0.00266 + 1.0 + a2 * -0.00000028) * -9.784))
                                     + 1.0);
        *((unsigned char *)this + 28) = 1;
      }
      *((unsigned char *)this + 96) = v8;
      *((unsigned char *)this + 27) = 0;
    }
  }
  else
  {
    *((unsigned char *)this + 26) = 0;
    *((unsigned char *)this + 96) = 0;
  }
  long double v31 = (cos(*((double *)this + 1) * 0.0174532925 + *((double *)this + 1) * 0.0174532925) * -0.00266
       + 1.0
       + a2 * -0.00000028)
      * 9.784;
  *((long double *)this + 4) = v31;
  *((long double *)this + 5) = 0.0222765202 / v31;
}

BOOL UNB_TropModel::Get_Zenith_Delays_Meter(UNB_TropModel *this, double a2, double a3, int a4, double *a5, double *a6)
{
  *a5 = 0.0;
  *a6 = 0.0;
  UNB_TropModel::Set_UNB_TropModel_Params(this, a2, a3, a4);
  return UNB_TropModel::Get_Dry_Zenith_Delay(this, a5)
      && (UNB_TropModel::Get_Wet_Zenith_Delay(this, a6) & 1) != 0;
}

uint64_t UNB_TropModel::Get_Dry_Zenith_Delay(UNB_TropModel *this, double *a2)
{
  *a2 = 0.0;
  if (!*((unsigned char *)this + 96) || !*((unsigned char *)this + 25)) {
    return 0;
  }
  double v3 = *((double *)this + 5) * *((double *)this + 6);
  *a2 = v3;
  double v4 = 1.0;
  if (!*((unsigned char *)this + 28))
  {
    double v5 = *((double *)this + 8);
    long double v6 = log(1.0 - v5 * *((double *)this + 2) / *((double *)this + 7));
    double v4 = exp(v6 * 9.80665 / (v5 * 287.053763));
  }
  *a2 = v3 * v4;
  return 1;
}

uint64_t UNB_TropModel::Get_Wet_Zenith_Delay(UNB_TropModel *this, double *a2)
{
  *a2 = 0.0;
  if (!*((unsigned char *)this + 96) || !*((unsigned char *)this + 25)) {
    return 0;
  }
  double v3 = 1.0;
  double v4 = *((double *)this + 9) + 1.0;
  double v5 = (*((double *)this + 10) * 16.5220718 + 377600.0)
     * 0.000001
     * 287.053763
     / (*((double *)this + 8) * -287.053763 + *((double *)this + 4) * v4);
  *a2 = v5;
  double v6 = v5 * (*((double *)this + 11) / *((double *)this + 7));
  *a2 = v6;
  if (!*((unsigned char *)this + 28))
  {
    double v7 = *((double *)this + 8);
    long double v8 = log(1.0 - v7 * *((double *)this + 2) / *((double *)this + 7));
    double v3 = exp((v4 * 9.80665 / (v7 * 287.053763) + -1.0) * v8);
  }
  *a2 = v6 * v3;
  return 1;
}

void UNB_TropModel::Get_Weather_Param(UNB_TropModel *this, const double *a2, const double *a3)
{
  if (a2 && a3)
  {
    double v3 = (double)*(int *)this;
    double v4 = *((double *)this + 1);
    if (v4 < 0.0) {
      double v3 = v3 + 182.625;
    }
    cos((v3 + -28.0) * 0.0172024238);
  }
}

uint64_t Gnm15_04HandleNoCostPos(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_NO_COST_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_04HandleNoCostPos");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = *(_DWORD *)(a1 + 16);
    int v5 = *(_DWORD *)(a1 + 20);
    int v6 = *(unsigned __int8 *)(a1 + 12);
    double v7 = *(const void **)(a1 + 24);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v9 = 78;
      if (v6) {
        uint64_t v9 = 89;
      }
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Time,%u,Age,%u,Valid,%c\n", (unint64_t)v8, "GNM", 73, "Gnm15_04HandleNoCostPos", v4, v5 != 0, v9);
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
    }
    if (!v6 || v7)
    {
      if (v6)
      {
        BOOL v15 = v5 != 0;
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm15_02UpdatePosEstimate");
          LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
        }
        memcpy(&unk_268465810, v7, 0x1738uLL);
        dword_268465804 = v4;
        unk_268465808 = v15;
        g_PosEstimate = 1;
      }
      double v18 = *(void **)(a1 + 24);
      if (v18) {
        free(v18);
      }
      *(void *)(a1 + 24) = 0;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NavData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm15_04HandleNoCostPos", 513);
      int v13 = 2;
LABEL_14:
      LbsOsaTrace_WriteLog(0xBu, __str, v12, v13, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 69, "Gnm15_04HandleNoCostPos", 517);
    int v13 = 0;
    goto LABEL_14;
  }
  return 0;
}

uint64_t Gnm15_09UpdateNmeaData(char *a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NmeaLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm15_09UpdateNmeaData", a2);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (!a1)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NmeaData\n");
    return LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
  }
  if (!a2)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NmeaLen\n");
    return LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
  }
  if (!off_26AE66D90)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    return LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NmeaCB Succ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm15_09UpdateNmeaData");
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  return off_26AE66D90(0, a1, a2);
}

uint64_t Gnm15_10HandleGncSNmeaData(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_NMEA_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_10HandleGncSNmeaData");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm15_09UpdateNmeaData(*(char **)(a1 + 16), *(unsigned __int16 *)(a1 + 12));
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4) {
      free(v4);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm15_10HandleGncSNmeaData", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 0, 1);
  }
  return 0;
}

uint64_t Gnm15_11HandleNavData(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_NAV_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_11HandleNavData");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    int v5 = *(unsigned __int8 *)(a1 + 18);
    int v6 = *(unsigned __int16 *)(a1 + 16);
    int v7 = *(unsigned __int8 *)(a1 + 19);
    uint64_t v8 = *(void *)(a1 + 24);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v10 = 78;
      if (v7) {
        uint64_t v10 = 89;
      }
      uint64_t v25 = v10;
      uint64_t v11 = 84;
      if (!v5) {
        uint64_t v11 = 70;
      }
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Time,%u,Final,%c,SessId,%u,Valid,%c\n", (unint64_t)v9, "GNM", 73, "Gnm15_11HandleNavData", v4, v11, v6, v25);
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 4, 1);
    }
    if (v7 && !v8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NavData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 87, "Gnm15_11HandleNavData", 513);
        int v15 = 2;
LABEL_16:
        LbsOsaTrace_WriteLog(0xBu, __str, v14, v15, 1);
        return 0;
      }
      return 0;
    }
    if (!(_BYTE)dword_26AE53250 && (*(unsigned char *)(v8 + 296) & 1) == 0)
    {
      double v17 = *(double *)(v8 + 32);
      if (v17 < 10.0) {
        Gnm53_13SetReferenceTime((unint64_t)(*(double *)(v8 + 40) + (double)(604800 * *(__int16 *)(v8 + 28))), (int)(v17 * 1000.0), *(_DWORD *)(v8 + 4), 2);
      }
    }
    InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v6);
    if (InstnFromInstnId)
    {
      double v19 = InstnFromInstnId;
      uint64_t v20 = *((void *)InstnFromInstnId + 1);
      if (v20)
      {
        if (*((unsigned char *)InstnFromInstnId + 2) == 1)
        {
          if ((*(unsigned char *)(v20 + 4) & 2) != 0)
          {
            Gnm11_01UpdateNavData((uint64_t)InstnFromInstnId, v8, v5, v7 != 0, v4);
            if (v5)
            {
              Gnm02_23StopNafSession((uint64_t)v19);
              Gnm02_21DeleteInstn(v19);
            }
          }
          goto LABEL_34;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", v24);
          goto LABEL_33;
        }
LABEL_34:
        double v22 = *(void **)(a1 + 24);
        if (v22) {
          free(v22);
        }
        *(void *)(a1 + 24) = 0;
        return 0;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        goto LABEL_34;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnInfo\n");
    }
    else
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        goto LABEL_34;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n");
    }
LABEL_33:
    LbsOsaTrace_WriteLog(0xBu, __str, v21, 2, 1);
    goto LABEL_34;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 69, "Gnm15_11HandleNavData", 517);
    int v15 = 0;
    goto LABEL_16;
  }
  return 0;
}

uint64_t Gnm15_12HandleGncPNmeaData(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_NMEA_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_12HandleGncPNmeaData");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm15_09UpdateNmeaData(*(char **)(a1 + 16), *(unsigned __int16 *)(a1 + 12));
    unsigned int v4 = *(void **)(a1 + 16);
    if (v4) {
      free(v4);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm15_12HandleGncPNmeaData", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 0, 1);
  }
  return 0;
}

uint64_t Gnm15_13HandleGadData(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_POS_GAD_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_13HandleGadData");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = *(_DWORD *)(a1 + 12);
    int v5 = *(unsigned __int16 *)(a1 + 16);
    int v6 = *(unsigned __int8 *)(a1 + 18);
    int v7 = *(unsigned __int8 *)(a1 + 19);
    size_t v8 = *(void *)(a1 + 24);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v10 = 78;
      if (v7) {
        uint64_t v11 = 89;
      }
      else {
        uint64_t v11 = 78;
      }
      if (v6) {
        uint64_t v10 = 89;
      }
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Time,%u,Final,%c,SessId,%u,Valid,%c\n", (unint64_t)v9, "GNM", 73, "Gnm15_13HandleGadData", v4, v10, v5, v11);
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 4, 1);
    }
    if (v7 && !v8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GadData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 87, "Gnm15_13HandleGadData", 513);
        int v15 = 2;
LABEL_17:
        LbsOsaTrace_WriteLog(0xBu, __str, v14, v15, 1);
        return 0;
      }
      return 0;
    }
    InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v5);
    if (InstnFromInstnId)
    {
      unint64_t v18 = (unint64_t)InstnFromInstnId;
      uint64_t v19 = *((void *)InstnFromInstnId + 1);
      if (v19)
      {
        if (*((unsigned char *)InstnFromInstnId + 2) == 2)
        {
          *(_DWORD *)(v8 + 28) = Gnm05_22PopulateGnssShapeType(v8 + 16, *(_DWORD *)(v19 + 16));
          *(_DWORD *)(v8 + 68) = Gnm05_23PopulateGnssVelocityType(v8 + 72, *(_DWORD *)(v19 + 12));
        }
        Gnm13_09SendAsstGadData(v18, v8, v6 != 0);
        goto LABEL_28;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType\n");
        goto LABEL_27;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n");
LABEL_27:
      LbsOsaTrace_WriteLog(0xBu, __str, v20, 2, 1);
    }
LABEL_28:
    unsigned __int16 v21 = *(void **)(a1 + 24);
    if (v21) {
      free(v21);
    }
    *(void *)(a1 + 24) = 0;
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 69, "Gnm15_13HandleGadData", 517);
    int v15 = 0;
    goto LABEL_17;
  }
  return 0;
}

uint64_t Gnm15_14Handle3GPPMeas(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_3GPPMEAS_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_14Handle3GPPMeas");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = *(_DWORD *)(a1 + 12);
    int v5 = *(unsigned __int16 *)(a1 + 16);
    int v6 = *(unsigned __int8 *)(a1 + 18);
    int v7 = *(unsigned __int8 *)(a1 + 19);
    size_t v8 = *(const void **)(a1 + 24);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v10 = 78;
      if (v7) {
        uint64_t v11 = 89;
      }
      else {
        uint64_t v11 = 78;
      }
      if (v6) {
        uint64_t v10 = 89;
      }
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Time,%u,Final,%c,SessId,%u,Valid,%c\n", (unint64_t)v9, "GNM", 73, "Gnm15_14Handle3GPPMeas", v4, v10, v5, v11);
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 4, 1);
    }
    if (v7 && !v8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx 3gppMeas\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 87, "Gnm15_14Handle3GPPMeas", 513);
        int v15 = 2;
LABEL_17:
        LbsOsaTrace_WriteLog(0xBu, __str, v14, v15, 1);
        return 0;
      }
      return 0;
    }
    InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v5);
    if (InstnFromInstnId)
    {
      if (*((void *)InstnFromInstnId + 1))
      {
        Gnm13_11SendAsstGnssMeas((unint64_t)InstnFromInstnId, v8, v6 != 0);
LABEL_26:
        uint64_t v19 = *(void **)(a1 + 24);
        if (v19) {
          free(v19);
        }
        *(void *)(a1 + 24) = 0;
        return 0;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        goto LABEL_26;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType\n");
    }
    else
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        goto LABEL_26;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n");
    }
    LbsOsaTrace_WriteLog(0xBu, __str, v18, 2, 1);
    goto LABEL_26;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 69, "Gnm15_14Handle3GPPMeas", 517);
    int v15 = 0;
    goto LABEL_17;
  }
  return 0;
}

uint64_t Gnm15_15HandleRawMeasData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_RAWMEAS_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_15HandleRawMeasData");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm15_15HandleRawMeasData", 517);
    int v9 = 0;
LABEL_24:
    LbsOsaTrace_WriteLog(0xBu, __str, v8, v9, 1);
    return 0;
  }
  if (!*(void *)(a1 + 24))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Meas\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 87, "Gnm15_15HandleRawMeasData", 513);
    int v9 = 2;
    goto LABEL_24;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RawMeasData SessId,%u,UpdtTime,%u,FinaUpdt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm15_15HandleRawMeasData", *(unsigned __int16 *)(a1 + 16), *(_DWORD *)(a1 + 12), *(unsigned __int8 *)(a1 + 18));
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(*(unsigned __int16 *)(a1 + 16));
  if (InstnFromInstnId && *((void *)InstnFromInstnId + 1) && *((unsigned char *)InstnFromInstnId + 2) == 1)
  {
    Gnm11_04SendAppMeasData((size_t)InstnFromInstnId, *(unsigned int *)(a1 + 12), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 18));
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm15_15HandleRawMeasData", 2052);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 2, 1);
  }
  unsigned __int16 v12 = *(void ***)(a1 + 24);
  if (v12[31])
  {
    free(v12[31]);
    unsigned __int16 v12 = *(void ***)(a1 + 24);
  }
  v12[31] = 0;
  if (v12[9])
  {
    free(v12[9]);
    unsigned __int16 v12 = *(void ***)(a1 + 24);
  }
  v12[9] = 0;
  if (v12[33])
  {
    free(v12[33]);
    unsigned __int16 v12 = *(void ***)(a1 + 24);
  }
  free(v12);
  *(void *)(a1 + 24) = 0;
  return 0;
}

uint64_t Gnm15_16HandleTruthPosRsp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_VAL_TRUTH_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm15_16HandleTruthPosRsp");
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  if (v6)
  {
    memset_s(__s, 0x7FCuLL, 0, 0x7FCuLL);
    unsigned __int16 v19 = 0;
    int v24 = 0;
    char v25 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    memset(v33, 0, sizeof(v33));
    char IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    qmemcpy(v20, "VNP", sizeof(v20));
    __s[7] = 116;
    if (*(unsigned char *)(v6 + 12)) {
      char v9 = 32;
    }
    else {
      char v9 = 71;
    }
    __s[0] = v9;
    int PlcGnssHw = Gnm03_64GetPlcGnssHw();
    plc00_05EncodeMsg((unsigned __int8 *)2, v20, (uint64_t)__s, (uint64_t)__str, 2048, &v19, (uint64_t)&v24, PlcGnssHw);
    if (v24)
    {
      if (IsLoggingAllowed)
      {
        if (plc00_15GetExtErrAsString(&v24, v22, 0x104uLL) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(v21, 0x410uLL);
          unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v12 = snprintf(v21, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,Err,%s\n", v11, "GNM");
LABEL_17:
          size_t v14 = v12;
          int v15 = v21;
          int v16 = 2;
          goto LABEL_18;
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(v21, 0x410uLL);
        unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v12 = snprintf(v21, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u\n", v17);
        goto LABEL_17;
      }
    }
    else
    {
      Gnm06_01HandleTmZXData((unsigned __int8 *)__str, v19);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm15_16HandleTruthPosRsp", 517);
    int v15 = __str;
    int v16 = 0;
LABEL_18:
    LbsOsaTrace_WriteLog(0xBu, v15, v14, v16, 1);
  }
  return 0;
}

uint64_t Fused_Nav_Update(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(__src, 0, sizeof(__src));
  memset(v21, 0, sizeof(v21));
  memset(&v20[79], 0, 48);
  memset(v20, 0, 315);
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  uint64_t v23 = 0;
  memset(v24, 0, 14);
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 14) = *(void *)((char *)&v24[1] + 2);
  *((_WORD *)a2 + 11) = 0;
  a2[24] = 0;
  memcpy(a2 + 25, __src, 0x120uLL);
  *(_OWORD *)(a2 + 313) = 0u;
  *(_OWORD *)(a2 + 329) = 0u;
  *(_OWORD *)(a2 + 345) = 0u;
  *(_OWORD *)(a2 + 361) = 0u;
  *(_OWORD *)(a2 + 377) = 0u;
  *(_OWORD *)(a2 + 393) = 0u;
  *(_OWORD *)(a2 + 409) = 0u;
  *(_OWORD *)(a2 + 425) = 0u;
  *(_OWORD *)(a2 + 441) = 0u;
  *(_OWORD *)(a2 + 457) = 0u;
  *(_OWORD *)(a2 + 473) = 0u;
  *(_OWORD *)(a2 + 489) = 0u;
  *(_OWORD *)(a2 + 505) = 0u;
  *(_OWORD *)(a2 + 521) = 0u;
  *(_OWORD *)(a2 + 537) = 0u;
  a2[553] = 0;
  memcpy(a2 + 554, v21, 0x198uLL);
  *(_OWORD *)(a2 + 962) = *(_OWORD *)&v20[85];
  *(void *)(a2 + 978) = *(void *)&v20[89];
  *(_OWORD *)(a2 + 986) = *(_OWORD *)&v20[79];
  *(void *)(a2 + 1002) = *(void *)&v20[83];
  *(_OWORD *)(a2 + 1010) = *(_OWORD *)&v20[72];
  *(_OWORD *)(a2 + 1021) = *(_OWORD *)((char *)&v20[74] + 3);
  a2[1037] = 0;
  *((_WORD *)a2 + 519) = 0;
  a2[1040] = 0;
  memcpy(a2 + 1041, v20, 0x120uLL);
  *(_OWORD *)(a2 + 1329) = 0u;
  *(_OWORD *)(a2 + 1345) = 0u;
  *(_OWORD *)(a2 + 1361) = 0u;
  *(_OWORD *)(a2 + 1377) = 0u;
  *(_OWORD *)(a2 + 1393) = 0u;
  *(_OWORD *)(a2 + 1409) = 0u;
  *(_OWORD *)(a2 + 1425) = 0u;
  *(_OWORD *)(a2 + 1441) = 0u;
  *(_OWORD *)(a2 + 1457) = 0u;
  *(_OWORD *)(a2 + 1473) = 0u;
  *(_OWORD *)(a2 + 1489) = 0u;
  *(_OWORD *)(a2 + 1505) = 0u;
  *(_OWORD *)(a2 + 1521) = 0u;
  *(_OWORD *)(a2 + 1537) = 0u;
  *(_OWORD *)(a2 + 1553) = 0u;
  a2[1569] = 0;
  memcpy(a2 + 1570, v19, 0x198uLL);
  *(_OWORD *)(a2 + 1978) = *(_OWORD *)((char *)&v18[1] + 8);
  *(void *)(a2 + 1994) = *((void *)&v18[2] + 1);
  *(_OWORD *)(a2 + 2002) = v18[0];
  *(void *)(a2 + 2018) = *(void *)&v18[1];
  *(void *)(a2 + 2034) = 0;
  *(void *)(a2 + 2042) = 0;
  *(void *)(a2 + 2026) = 0;
  *((void *)a2 + 256) = 0;
  memcpy((void *)a7, a6, 0x800uLL);
  if (*(unsigned char *)(a3 + 46))
  {
    FN_GNSS_To_Nav_Soln((uint64_t)a6, (uint64_t)a2);
    memcpy((void *)(a1 + 1016), (const void *)a1, 0x3F8uLL);
    size_t v14 = (gnss::GnssAdaptDevice *)memcpy((void *)a1, a2, 0x3F8uLL);
    int v15 = (gnss::GnssAdaptDevice *)gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v14);
    if (v15) {
      int v15 = (gnss::GnssAdaptDevice *)FN_SA_FPE_To_Nav_Soln(a4, (uint64_t)(a2 + 1016));
    }
    if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v15)
      && FN_Fuse_With_SA_FPE((uint64_t)a2, a1, a5))
    {
      FN_Publish_Fused_Soln(a1, a7);
      uint64_t v16 = 0;
      *(_OWORD *)(a7 + 944) = *(_OWORD *)(a7 + 344);
      *(void *)(a7 + 960) = *(void *)(a7 + 360);
      do
      {
        *(void *)(a7 + v16 + 920) = *(void *)(a7 + v16 + 320);
        v16 += 8;
      }
      while (v16 != 24);
    }
  }
  return 1;
}

void *GetStaticLppPrivate(void)
{
  {
    _LPP_PRIVATE::_LPP_PRIVATE((_LPP_PRIVATE *)&GetStaticLppPrivate(void)::lpp_prv);
  }
  return &GetStaticLppPrivate(void)::lpp_prv;
}

void sub_22B9F7360(_Unwind_Exception *a1)
{
}

void _LPP_PRIVATE::_LPP_PRIVATE(_LPP_PRIVATE *this)
{
  *(_DWORD *)((char *)this + 3) = 0;
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 7) = 1;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 6) = -1;
  *((unsigned char *)this + 28) = 0;
  memset_s((char *)this + 18, 6uLL, 0, 6uLL);
}

void lpp_process_downlink_message(unsigned __int8 *a1, char a2)
{
  uint64_t v4 = lpp_session_detect(a1);
  if (v4 || (uint64_t v4 = lpp_session_create(a1, a2)) != 0)
  {
    unsigned __int16 v5 = (void (*)(void))*((void *)v4 + 6);
    v5();
  }
  else
  {
    ms_report_exception(2, 16423, 62, "lpp_process_downlink_message");
  }
}

void lpp_reset(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  GetStaticLppPrivate();
  if (byte_26AE6D291 == 2)
  {
    GetStaticLppPrivate();
    uint64_t v2 = *(void **)qword_26AE6D298;
    if (*(void *)qword_26AE6D298)
    {
      int v3 = 0;
      do
      {
        while (1)
        {
          uint64_t v4 = (uint64_t)v2;
          uint64_t v2 = (void *)*v2;
          if (a1)
          {
            if (a1 == 1) {
              break;
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v5 = mach_continuous_time();
              unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 87, "lpp_reset", 770, a1);
              LbsOsaTrace_WriteLog(0x13u, __str, v6, 2, 1);
            }
            if (v3 != 1) {
              break;
            }
          }
          lpp_session_delete(v4);
          int v3 = 1;
          if (!v2) {
            return;
          }
        }
        int v3 = 0;
      }
      while (v2);
    }
  }
}

void lpp_send_up_uplink_message(uint64_t a1, int a2, unsigned int *a3, char a4)
{
  if (a1 && a3)
  {
    if (a2)
    {
      ms_report_exception(2, 16424, 149, "lpp_send_up_uplink_message");
      uint64_t v8 = 0;
      int v9 = 0;
    }
    else
    {
      uint64_t v8 = gnssOsa_Calloc("posp_alloc", 18, 1, *a3);
      memcpy_s("lpp_send_up_uplink_message", 142, v8, *a3, *((const void **)a3 + 1), *a3);
      int v9 = *a3;
    }
    int v10 = *(_DWORD *)(a1 + 4);
    send_supl_pos_ind(v10, a2, v9, v8, a4);
  }
}

void lpp_control_loc_info_rsp(uint64_t a1)
{
  uint64_t v2 = lpp_session_detect(*(unsigned __int8 **)a1);
  if (v2)
  {
    if (**(unsigned char **)(a1 + 8) == 1)
    {
      int v3 = *((_DWORD *)v2 + 18);
      if (v3 == 256)
      {
        uint64_t i = 0;
      }
      else
      {
        for (uint64_t i = *(void *)v2[5]; i; uint64_t i = *(void *)i)
        {
          if (*(_DWORD *)(i + 16) == *((_DWORD *)v2 + 17) && *(_DWORD *)(i + 20) == v3) {
            break;
          }
        }
      }
      int v7 = *((_DWORD *)v2 + 20);
      if (v7 != 256)
      {
        uint64_t v8 = *(void *)v2[5];
        if (v8)
        {
          while (*(_DWORD *)(v8 + 16) != *((_DWORD *)v2 + 19) || *(_DWORD *)(v8 + 20) != v7)
          {
            uint64_t v8 = *(void *)v8;
            if (!v8) {
              goto LABEL_15;
            }
          }
          uint64_t i = v8;
          goto LABEL_16;
        }
      }
LABEL_15:
      if (i)
      {
LABEL_16:
        SendStatusReport(*(_DWORD *)(i + 32), 2, 0, 0, 0, 255);
        int v9 = *(unsigned char **)(a1 + 8);
        lpp_transaction_act(i, 7u, v9);
        return;
      }
    }
    int v5 = 16425;
    int v6 = 193;
  }
  else
  {
    int v5 = 16426;
    int v6 = 169;
  }

  ms_report_exception(2, v5, v6, "lpp_control_loc_info_rsp");
}

size_t lpp_state_control(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  size_t result = (size_t)GetStaticLppPrivate();
  if (byte_26AE6D291 == 2)
  {
    if (a1 != 1) {
      return result;
    }
    size_t result = (size_t)GetStaticLppPrivate();
    if (*(void *)qword_26AE6D298) {
      return result;
    }
    GetStaticLppPrivate();
    byte_26AE6D291 = 1;
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    GetStaticLppPrivate();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LPP Current State,Active,Next State,%u\n");
    goto LABEL_18;
  }
  if (byte_26AE6D291 == 1)
  {
    if (a1 == 1)
    {
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IDLE state\n");
      goto LABEL_21;
    }
    if (a1) {
      return result;
    }
    GetStaticLppPrivate();
    byte_26AE6D291 = 2;
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    GetStaticLppPrivate();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LPP Current State,Idle,Next State,%u\n");
LABEL_18:
    size_t v5 = v4;
    int v6 = 5;
    return LbsOsaTrace_WriteLog(0x13u, __str, v5, v6, 1);
  }
  if (byte_26AE6D291) {
    return result;
  }
  if (a1 < 2)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Inactive State\n");
LABEL_21:
    size_t v5 = v3;
    int v6 = 2;
    return LbsOsaTrace_WriteLog(0x13u, __str, v5, v6, 1);
  }
  if (a1 == 2)
  {
    GetStaticLppPrivate();
    byte_26AE6D291 = 1;
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      GetStaticLppPrivate();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LPP Current State,Inactive,Next State,%u\n");
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t Hal24_PatchDnldBright(int *a1)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v2 = mach_continuous_time();
  double v3 = *(double *)&g_MacClockTicksToMsRelation;
  uint64_t ChiBuffers = Hal19_GetChiBuffers();
  if (ChiBuffers) {
    return ChiBuffers;
  }
  Hal08_SetGizar2AvaialbleBuffers(g_ChipBuffersResp);
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: fw BufferSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "Hal24_PatchDnldBright", g_ChipBuffersResp);
    LbsOsaTrace_WriteLog(0xDu, __str, v6, 4, 1);
  }
  uint64_t v7 = Hal08_FastPatchDnld(0, 0x50u, 111);
  if (v7 == -3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Cnf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 65, "Hal24_PatchDnldBright", 1288);
      LbsOsaTrace_WriteLog(0xDu, __str, v15, 1, 1);
    }
    *a1 = 19;
    return 4294967293;
  }
  uint64_t ChiBuffers = v7;
  if (v7)
  {
    int v16 = 19;
    goto LABEL_52;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Cnf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 73, "Hal24_PatchDnldBright", 1287);
    LbsOsaTrace_WriteLog(0xDu, __str, v9, 4, 1);
  }
  uint64_t v10 = Hal08_FastPatchDnld(0, 0x50u, 112);
  if (v10 == -3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CPPtc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "HAL", 65, "Hal24_PatchDnldBright", 1288);
    int v13 = 1;
    goto LABEL_18;
  }
  uint64_t ChiBuffers = v10;
  if (v10)
  {
    int v16 = 4;
    goto LABEL_52;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CPPtc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 73, "Hal24_PatchDnldBright", 1287);
    int v13 = 4;
LABEL_18:
    LbsOsaTrace_WriteLog(0xDu, __str, v12, v13, 1);
  }
LABEL_19:
  uint64_t v18 = Hal08_FastPatchDnld(0, 0x50u, 102);
  if (v18 == -3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0)) {
      goto LABEL_27;
    }
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    size_t v20 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CPSsf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "HAL", 65, "Hal24_PatchDnldBright", 1288);
    int v21 = 1;
    goto LABEL_26;
  }
  uint64_t ChiBuffers = v18;
  if (v18)
  {
    int v16 = 7;
    goto LABEL_52;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    size_t v20 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CPSsf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 73, "Hal24_PatchDnldBright", 1287);
    int v21 = 4;
LABEL_26:
    LbsOsaTrace_WriteLog(0xDu, __str, v20, v21, 1);
  }
LABEL_27:
  uint64_t v23 = Hal17_SoftReset(80, 32);
  if (v23)
  {
    uint64_t ChiBuffers = v23;
    *a1 = 14;
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP\n");
LABEL_30:
      LbsOsaTrace_WriteLog(0xDu, __str, v24, 0, 1);
      return ChiBuffers;
    }
    return ChiBuffers;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v25 = mach_continuous_time();
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "HAL", 73, "Hal24_PatchDnldBright", 1289);
    LbsOsaTrace_WriteLog(0xDu, __str, v26, 4, 1);
  }
  usleep(0x4E20u);
  uint64_t v27 = Hal08_FastPatchDnld(0, 0x4Du, 102);
  if (v27 != -3)
  {
    uint64_t ChiBuffers = v27;
    if (!v27)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
        goto LABEL_41;
      }
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      size_t v29 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MESsf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "HAL", 73, "Hal24_PatchDnldBright", 1287);
      int v30 = 4;
      goto LABEL_40;
    }
    int v16 = 8;
LABEL_52:
    *a1 = v16;
    return ChiBuffers;
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0)) {
    goto LABEL_41;
  }
  bzero(__str, 0x410uLL);
  uint64_t v31 = mach_continuous_time();
  size_t v29 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MESsf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "HAL", 65, "Hal24_PatchDnldBright", 1288);
  int v30 = 1;
LABEL_40:
  LbsOsaTrace_WriteLog(0xDu, __str, v29, v30, 1);
LABEL_41:
  uint64_t v32 = Hal08_FastPatchDnld(0, 0x4Du, 112);
  if (v32 == -3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0)) {
      goto LABEL_49;
    }
    bzero(__str, 0x410uLL);
    uint64_t v36 = mach_continuous_time();
    size_t v34 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "HAL", 65, "Hal24_PatchDnldBright", 1288);
    int v35 = 1;
    goto LABEL_48;
  }
  uint64_t ChiBuffers = v32;
  if (v32)
  {
    int v16 = 5;
    goto LABEL_52;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v33 = mach_continuous_time();
    size_t v34 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "HAL", 73, "Hal24_PatchDnldBright", 1287);
    int v35 = 4;
LABEL_48:
    LbsOsaTrace_WriteLog(0xDu, __str, v34, v35, 1);
  }
LABEL_49:
  uint64_t v37 = Hal17_SoftReset(77, 32);
  if (v37)
  {
    uint64_t ChiBuffers = v37;
    int v16 = 15;
    goto LABEL_52;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v39 = mach_continuous_time();
    unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "HAL", 73, "Hal24_PatchDnldBright", 1289);
    LbsOsaTrace_WriteLog(0xDu, __str, v40, 4, 1);
  }
  uint64_t v41 = Hal11_WaitCalibComplete();
  if (v41)
  {
    uint64_t ChiBuffers = v41;
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return ChiBuffers;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Calib\n");
    goto LABEL_30;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v42 = mach_continuous_time();
    unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: calib complete\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "HAL", 73, "Hal24_PatchDnldBright");
    LbsOsaTrace_WriteLog(0xDu, __str, v43, 4, 1);
  }
  g_HalState = 0;
  uint64_t ChiBuffers = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v44 = mach_continuous_time();
    unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bright init,starttick %u ms\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "HAL", 65, "Hal24_PatchDnldBright", (unint64_t)(v3 * (double)v2));
    LbsOsaTrace_WriteLog(0xDu, __str, v45, 1, 1);
    return 0;
  }
  return ChiBuffers;
}

void HAL24_BrightStackDumpHandler(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2 <= 0xB1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len,%u\n", v18);
LABEL_11:
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
    return;
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx aResp\n");
    goto LABEL_11;
  }
  int v5 = a1[4];
  if (v5 == 77)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME\n");
  }
  else if (v5 == 80)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CP\n");
  }
  else
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Stackdump unk\n");
  }
  LbsOsaTrace_WriteLog(0xDu, __str, v6, 4, 1);
LABEL_17:
  int v7 = *((unsigned __int16 *)a1 + 4);
  switch(v7)
  {
    case 3:
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 69, "HAL24_BrightStackDumpHandler", 1299);
        int v8 = 1;
        LbsOsaTrace_WriteLog(0xDu, __str, v11, 0, 1);
      }
      else
      {
        int v8 = 1;
      }
      break;
    case 2:
      int v8 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "HAL24_BrightStackDumpHandler", 1300);
        int v14 = 0;
LABEL_29:
        LbsOsaTrace_WriteLog(0xDu, __str, v13, v14, 1);
        int v8 = 0;
      }
      break;
    case 1:
      int v8 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx %usec\n", v19);
LABEL_28:
        size_t v13 = v9;
        int v14 = 4;
        goto LABEL_29;
      }
      break;
    default:
      int v8 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Unk\n");
        goto LABEL_28;
      }
      break;
  }
  StackDumpString = (char *)Hal11_GetStackDumpString(a1[11], a1[10]);
  GnssDbgMgr_HandleStackDump(a2, a1, v8, StackDumpString);
  if (v8 && *((__int16 *)a1 + 5) != -4087)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "HAL", 65, "HAL24_BrightStackDumpHandler", 1306);
      LbsOsaTrace_WriteLog(0xDu, __str, v17, 1, 1);
    }
    if (g_HalCallbacks) {
      g_HalCallbacks(6);
    }
  }
}

uint64_t GNSS_GNB_Debug_Ctl(uint64_t result)
{
  if (result)
  {
    if (g_Enable_GNB_Debug)
    {
      unsigned __int16 v1 = (char **)result;
      **(unsigned char **)size_t result = 0;
      unsigned __int16 v3 = *(char **)result;
      uint64_t v2 = *(char **)(result + 8);
      if (v2 != *(char **)result)
      {
        unsigned __int16 v4 = *(char **)result;
        if ((unint64_t)v2 > *(void *)result) {
          unsigned __int16 v4 = *(char **)(result + 24);
        }
        unsigned __int16 v5 = (_WORD)v4 - (_WORD)v2;
        if ((_WORD)v4 == (_WORD)v2)
        {
          if ((unint64_t)v2 < *(void *)(result + 24)) {
            goto LABEL_13;
          }
          uint64_t v2 = *(char **)(result + 16);
          *(void *)(result + 8) = v2;
        }
        else
        {
          size_t result = GN_GPS_Write_GNB_Debug((unsigned __int16)((_WORD)v4 - (_WORD)v2), v2);
          uint64_t v2 = &v1[1][result];
          v1[1] = v2;
          if (v2 < v1[3]) {
            goto LABEL_13;
          }
          uint64_t v2 = v1[2];
          v1[1] = v2;
          if (result != v5) {
            goto LABEL_13;
          }
          unsigned __int16 v3 = *v1;
        }
        size_t result = GN_GPS_Write_GNB_Debug((unsigned __int16)((_WORD)v3 - (_WORD)v2), v2);
        uint64_t v2 = &v1[1][result];
        v1[1] = v2;
LABEL_13:
        if (v2 == *v1)
        {
          unsigned __int16 v6 = v1[2];
          unsigned char *v1 = v6;
          v1[1] = v6;
        }
      }
    }
  }
  return result;
}

void NK_Define_Meas_Innov_Sat_Thresh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double *)(a2 + 11480);
  double v6 = 1.0 / v5;
  BOOL v7 = v5 <= 50.0;
  double v8 = 0.02;
  if (v7) {
    double v8 = v6;
  }
  double v34 = v8;
  __double2 v9 = __sincos_stret(*(double *)(a1 + 952) * 0.0174532925);
  uint64_t v10 = 0;
  unsigned __int16 v11 = (double *)(a2 + 2104);
  uint64_t v12 = -384;
  uint64_t v13 = 2960;
  uint64_t v14 = 14112;
  uint64_t v15 = 8536;
  double v16 = 0.5;
  unsigned __int16 v17 = "Any_SV_Meas_Edit";
  do
  {
    if (*(_DWORD *)(a2 + 11032) > *(unsigned __int16 *)(a2 + 16) || *(_DWORD *)(a1 + 968) != 1) {
      goto LABEL_23;
    }
    unsigned int v18 = *(_DWORD *)(a2 + 140);
    if (v18 >= *(_DWORD *)(a2 + 144)) {
      unsigned int v18 = *(_DWORD *)(a2 + 144);
    }
    if (v18 >= *(_DWORD *)(a2 + 148)) {
      unsigned int v18 = *(_DWORD *)(a2 + 148);
    }
    if (v18 >= 0xB)
    {
      if (*(unsigned char *)(a1 + v13) || *(unsigned char *)(a1 + v15) || *(unsigned char *)(a1 + v14))
      {
        double v19 = v11[240];
        double v20 = v11[239];
        double v21 = *v11 * (v9.__sinval * v20 + v9.__cosval * v19);
        double v22 = *v11 * (v9.__cosval * v20 + -v9.__sinval * v19);
        double v23 = 0.0;
        if (*(unsigned char *)(a1 + v13))
        {
          int v24 = *(_DWORD *)(a1 + v10 + 3056);
          if ((v24 - 1) >= 0x1D)
          {
            if (v24)
            {
              uint64_t v33 = v17;
              EvCrt_Illegal_Default(v17, 0xA6u);
              unsigned __int16 v17 = v33;
              double v16 = 0.5;
            }
            else
            {
              double v23 = v21 * v16 * 9.8 * (v21 * v16 * 9.8);
            }
          }
        }
      }
      else
      {
        double v23 = 0.0;
        double v22 = 0.0;
        double v21 = 0.0;
      }
      *(double *)(a1 + v12 + 6368) = v23;
      double v25 = 0.0;
      double v26 = 0.0;
      if (*(unsigned char *)(a1 + v15))
      {
        int v27 = *(_DWORD *)(a1 + v10 + 8632);
        if ((v27 - 1) >= 0x1D)
        {
          if (v27)
          {
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
            unsigned __int16 v17 = "Any_SV_Meas_Edit";
            double v16 = 0.5;
            double v26 = 0.0;
          }
          else
          {
            double v31 = fmin(v34 * (*(double *)(a3 + 320) * *(double *)(a3 + 320)), 9.8);
            double v26 = v21 * 9.8 * (v21 * 9.8) + v22 * v31 * (v22 * v31);
          }
        }
      }
      *(double *)(a1 + v12 + 11944) = v26;
      if (*(unsigned char *)(a1 + v14))
      {
        int v28 = *(_DWORD *)(a1 + v10 + 14208);
        if ((v28 - 1) >= 0x1D)
        {
          if (v28)
          {
            uint64_t v32 = v17;
            EvCrt_Illegal_Default(v17, 0xA6u);
            unsigned __int16 v17 = v32;
            double v16 = 0.5;
          }
          else
          {
            double v29 = v22 * fmin(v34 * (*(double *)(a3 + 320) * *(double *)(a3 + 320)), 9.8);
            double v25 = v21 * 9.8 * (v21 * 9.8) + v29 * v29;
          }
        }
      }
    }
    else
    {
LABEL_23:
      uint64_t v30 = a1 + v12;
      *(void *)(v30 + 6368) = 0x412E82F0051EB852;
      *(void *)(v30 + 11944) = 0x412E82F0051EB852;
      double v25 = 999800.01;
    }
    *(double *)(a1 + v12 + 17520) = v25;
    v10 += 4;
    ++v13;
    v12 += 8;
    v11 += 5;
    ++v14;
    ++v15;
  }
  while (v10 != 192);
}

const double *NK_SV_Meas_Innov_Sat(double *a1, int a2, int a3, uint64_t a4, double *a5, double a6)
{
  uint64_t v9 = 0;
  v23[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v10 = a2;
  unsigned __int16 v11 = (double *)(a4 + 8 * a2 + 2024);
  double v12 = *v11;
  double v13 = 0.0;
  do
  {
    double v13 = v13 + a1[v9] * a5[v9 + 66];
    ++v9;
  }
  while (v9 != 11);
  v23[0] = 0.0;
  double v14 = v12 - v13;
  uint64_t v15 = a4 + 8 * a2;
  double v16 = *(double *)(v15 + 4040);
  size_t result = invtst(a5, a1, 0xBu, v16 - *(double *)(a4 + 24 * a2 + 496), 0.0, a6, v23);
  double v18 = cMIS_SatThresh_Sigma[a3 - 1] * cMIS_SatThresh_Sigma[a3 - 1] * v23[0];
  if (v18 <= *(double *)(v15 + 3176)) {
    double v18 = *(double *)(v15 + 3176);
  }
  *(double *)(v15 + 3176) = v18;
  if (v14 * v14 > v18)
  {
    double v19 = sqrt(v18);
    if (v14 >= v19) {
      double v20 = v19;
    }
    else {
      double v20 = v14;
    }
    double v21 = -v19;
    if (v20 > v21) {
      double v21 = v20;
    }
    *(unsigned char *)(a4 + v10 + 3560) = 1;
    *unsigned __int16 v11 = v12 - (v14 - v21);
    double v22 = v14 * 0.5 * (v14 * 0.5);
    if (v16 > v22) {
      double v22 = v16;
    }
    *(double *)(v15 + 4040) = v22;
  }
  return result;
}

uint64_t Gnm11_00ApiStatusCB(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_GnmCBs)
  {
    uint64_t v7 = result;
    if (result)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v9 = 78;
        if (a2) {
          uint64_t v9 = 89;
        }
        size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Result,%hhu,HandleValid,%c,Handle,%u,ApiType,%hhu\n", (unint64_t)v8, "GNM", 87, "Gnm11_00ApiStatusCB", v7, v9, a3, a4);
        int v11 = 2;
LABEL_11:
        LbsOsaTrace_WriteLog(0xBu, __str, v10, v11, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v13 = 78;
      if (a2) {
        uint64_t v13 = 89;
      }
      size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Result,%hhu,HandleValid,%c,Handle,%u,ApiType,%hhu\n", (unint64_t)v12, "GNM", 73, "Gnm11_00ApiStatusCB", 0, v13, a3, a4);
      int v11 = 4;
      goto LABEL_11;
    }
    return g_GnmCBs(v7, a2, a3, a4);
  }
  return result;
}

uint64_t Gnm11_01UpdateNavData(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  double v5 = *(unsigned int **)(result + 8);
  if (*((unsigned char *)v5 + 64) == 1 && (v5[2] & 1) != 0)
  {
    double v6 = (uint64_t (*)(uint64_t, uint64_t, void *))*((void *)v5 + 7);
    if (v6)
    {
      if (a4)
      {
        Gnm05_31PrintNavSoln(a2);
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NavData Succ sent NAFId,%u,NavStatus,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm11_01UpdateNavData", *v5, a3);
          LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
        }
        uint64_t v12 = *v5;
        v19[0] = a2;
        v19[1] = 0;
        int v20 = 2;
        char v21 = a3;
        size_t result = v6(0, v12, v19);
        if (v5[9] == v5[3] && *(unsigned char *)(a2 + 288)) {
          v5[9] = a5;
        }
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v13 = mach_continuous_time();
          unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NavData Err sent NAFId,%u,NavStatus,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 87, "Gnm11_01UpdateNavData", *v5, a3);
          LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
        }
        uint64_t v15 = *v5;
        v16[0] = 0;
        v16[1] = 0;
        int v17 = 0;
        char v18 = a3;
        size_t result = v6(6, v15, v16);
      }
      v5[10] = a5;
      if ((v5[1] & 2) != 0) {
        ++v5[12];
      }
    }
  }
  return result;
}

size_t Gnm11_04SendAppMeasData(size_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a3)
  {
    unsigned __int16 v4 = *(unsigned int **)(result + 8);
    if ((v4[1] & 2) != 0 && *((unsigned char *)v4 + 64) == 1 && (v4[2] & 8) != 0)
    {
      double v5 = (void (*)(void, uint64_t, void *))*((void *)v4 + 7);
      if (v5)
      {
        uint64_t v7 = *v4;
        v10[0] = 0;
        v10[1] = a3;
        int v11 = 4;
        char v12 = a4;
        v5(0, v7, v10);
        size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Meas Succ sent NAFId,%u,NavStatus,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm11_04SendAppMeasData", *v4, a4);
          return LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
        }
      }
    }
  }
  return result;
}

uint64_t Gnm11_07StartPosResp(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned int **)(a1 + 8);
  uint64_t v3 = *v2;
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StartPosReqResp Success NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm11_07StartPosResp", v3);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    return Gnm11_00ApiStatusCB(0, 1, v3, v2[1] & 2);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StartPosReqResp Error NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm11_07StartPosResp", v3);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
    }
    Gnm11_00ApiStatusCB(11, 1, *v2, v2[1] & 2);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Delete NAF Session NAFId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm11_07StartPosResp", *v2);
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    Gnm02_23StopNafSession(a1);
    return Gnm02_21DeleteInstn((unsigned __int16 *)a1);
  }
}

void Gnm11_08StopPosResp(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = **(unsigned int **)(a1 + 8);
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Success NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm11_08StopPosResp", v3);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    if (Gnm02_21DeleteInstn((unsigned __int16 *)a1)) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 11;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StopPosReqResp Error NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm11_08StopPosResp", v3);
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
    }
    Gnm02_21DeleteInstn((unsigned __int16 *)a1);
    uint64_t v6 = 11;
  }
  Gnm11_00ApiStatusCB(v6, 1, v3, 1);
  if (!HIWORD(g_GnmInstances[0]))
  {
    g_XOTimerStatus = 0;
    g_PrevUsedLtl = 0;
    bzero(&g_LTLDataPPM, 0x5E2uLL);
    g_AgeingTimeGpsSeconds = 0;
  }
}

size_t Gnm33_09GetModuleLogCfg(unsigned int a1, char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v8 = 0;
  char v9 = 0;
  size_t result = LbsOsaTrace_GetModuleConfig((uint64_t)&v8, a1);
  if (!result)
  {
    a2[1] = 0;
LABEL_7:
    char v7 = 1;
    goto LABEL_8;
  }
  a2[1] = v9;
  int v4 = v8;
  if (v8 == 1)
  {
    char v7 = 0;
    goto LABEL_8;
  }
  if (!v8) {
    goto LABEL_7;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  if (!result) {
    goto LABEL_7;
  }
  bzero(__str, 0x410uLL);
  uint64_t v5 = mach_continuous_time();
  unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dest,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm33_01GetGnmDestnType", 770, v4);
  char v7 = 1;
  size_t result = LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
LABEL_8:
  *a2 = v7;
  return result;
}

size_t Gnm33_10InitTraceCfg(void)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  int v59 = 0;
  int v55 = 0;
  unsigned __int8 v56 = 0;
  uint64_t v58 = 0x332E352E322E76;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:%s Version,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm33_00PrintTraceConfig", "INITIALIZED", (const char *)&v58);
    LbsOsaTrace_WriteLog(0xBu, __str, v1, 4, 1);
  }
  int v3 = g_LbsOsaTrace_Config;
  int v2 = dword_26AE6D0F8;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v5 = 89;
    if (!v3) {
      uint64_t v5 = 78;
    }
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG: FlowTraces,%c\n", (unint64_t)v4, "GNM", 73, "Gnm33_00PrintTraceConfig", v5);
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v7 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v8 = 78;
    if (v2 == 1) {
      uint64_t v8 = 89;
    }
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG: PrivateOnly,%c\n", (unint64_t)v7, "GNM", 73, "Gnm33_00PrintTraceConfig", v8);
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:GNB Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 1u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:NMA Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 2u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:PEN Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 3u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:PEE Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 4u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:MEC Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v19, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 5u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:GZR Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v21, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 6u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:CEX Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v23, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 7u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v24 = mach_continuous_time();
    unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:SEN Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v25, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 8u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v26 = mach_continuous_time();
    unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:GNC Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v27, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 9u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v28 = mach_continuous_time();
    unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:SLG Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v29, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0xAu);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v30 = mach_continuous_time();
    unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:SLP Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v31, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0xBu);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v32 = mach_continuous_time();
    unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:GNM Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v33, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0xCu);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v34 = mach_continuous_time();
    unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:LSM Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v35, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0xDu);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v36 = mach_continuous_time();
    unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:HAL Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v37, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0xEu);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v38 = mach_continuous_time();
    unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:OSA Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v39, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0xFu);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v40 = mach_continuous_time();
    unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:SRV Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v41, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0x10u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v42 = mach_continuous_time();
    unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:AML Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v43, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0x11u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v44 = mach_continuous_time();
    unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:OP1 Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v45, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0x12u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v46 = mach_continuous_time();
    unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:SPL Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v47, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0x13u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v48 = mach_continuous_time();
    unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:PSP Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v49, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0x14u);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v50 = mach_continuous_time();
    unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:MEI Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    LbsOsaTrace_WriteLog(0xBu, __str, v51, 4, 1);
  }
  int v55 = 0;
  unsigned __int8 v56 = 0;
  LbsOsaTrace_GetModuleConfig((uint64_t)&v55, 0x15u);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v53 = mach_continuous_time();
    unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TRACECFG:SLC Destn,%u,Sev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "GNM", 73, "Gnm33_00PrintTraceConfig", v55, v56);
    return LbsOsaTrace_WriteLog(0xBu, __str, v54, 4, 1);
  }
  return result;
}

uint64_t Gnm33_16GetTraceCfg(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, unsigned char *))
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  memset_s(__s, 0x270uLL, 0, 0x270uLL);
  __s[0] = g_LbsOsaTrace_Config;
  __s[1] = dword_26AE6D0F8;
  Gnm33_09GetModuleLogCfg(0, v9);
  Gnm33_09GetModuleLogCfg(1u, v10);
  Gnm33_09GetModuleLogCfg(2u, v11);
  Gnm33_09GetModuleLogCfg(3u, v12);
  Gnm33_09GetModuleLogCfg(4u, v13);
  Gnm33_09GetModuleLogCfg(5u, v14);
  Gnm33_09GetModuleLogCfg(6u, v15);
  Gnm33_09GetModuleLogCfg(7u, v16);
  Gnm33_09GetModuleLogCfg(8u, v17);
  Gnm33_09GetModuleLogCfg(9u, v18);
  Gnm33_09GetModuleLogCfg(0xAu, v19);
  Gnm33_09GetModuleLogCfg(0xBu, v20);
  Gnm33_09GetModuleLogCfg(0xCu, v21);
  Gnm33_09GetModuleLogCfg(0xDu, v22);
  Gnm33_09GetModuleLogCfg(0xEu, v23);
  Gnm33_09GetModuleLogCfg(0xFu, v24);
  Gnm33_09GetModuleLogCfg(0x10u, v25);
  Gnm33_09GetModuleLogCfg(0x11u, v26);
  Gnm33_09GetModuleLogCfg(0x12u, v27);
  Gnm33_09GetModuleLogCfg(0x13u, v28);
  Gnm33_09GetModuleLogCfg(0x14u, v29);
  Gnm33_09GetModuleLogCfg(0x15u, v30);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GetCfgCB returned TraceCfg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm33_16GetTraceCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  return a2(a1, 3, __s);
}

void *gnss::GnssAdaptDevice::startEmergencyPreemptiveSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!*(void *)(a3 + 24))
  {
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  if (*(void *)(a4 + 24))
  {
    unsigned __int16 v5 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice31startEmergencyPreemptiveSessionEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
    block[3] = &__block_descriptor_tmp_16;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
    dispatch_async(v5, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
  }
  size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "startEmergencyPreemptiveSession", 513);
    return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
  return result;
}

void sub_22B9FAFD0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice31startEmergencyPreemptiveSessionEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "startEmergencyPreemptiveSession_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(unsigned char *)(v2 + 89) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PVTM req active\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 87, "startEmergencyPreemptiveSession_block_invoke", 2056);
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 2, 1);
    }
    std::function<void ()(gnss::Result)>::operator=((void *)(v2 + 600), a1 + 40);
    std::function<void ()(gnss::Result)>::operator=((void *)(v2 + 632), a1 + 72);
    unsigned int v7 = GNS_EcallStart(0);
    if (v7 == 1)
    {
      *(unsigned char *)(v2 + 176) = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EcallStart invoked\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 73, "startEmergencyPreemptiveSession_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v9, 4, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "startEmergencyPreemptiveSession_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EcallStart,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "startEmergencyPreemptiveSession_block_invoke", 257, v7);
        LbsOsaTrace_WriteLog(0x18u, __str, v18, 0, 1);
      }
      int v19 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v2, v7);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v22, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, v19, (uint64_t)v22, (uint64_t)"startEmergencyPreemptiveSession_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v22);
      std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100]((void *)(v2 + 600));
      std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100]((void *)(v2 + 632));
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "startEmergencyPreemptiveSession_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v23, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v23, (uint64_t)"startEmergencyPreemptiveSession_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v23);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "startEmergencyPreemptiveSession_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "startEmergencyPreemptiveSession_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
    }
  }
  return result;
}

void sub_22B9FB550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::stopEmergencyPreemptiveSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 24))
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice30stopEmergencyPreemptiveSessionENSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
    block[3] = &__block_descriptor_tmp_12_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "stopEmergencyPreemptiveSession", 513);
    return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
  }
  return result;
}

void sub_22B9FB790(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice30stopEmergencyPreemptiveSessionENSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "stopEmergencyPreemptiveSession_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    std::function<void ()(gnss::Result)>::operator=((void *)(v2 + 664), a1 + 40);
    std::function<void ()(gnss::Result)>::operator=((void *)(v2 + 696), a1 + 72);
    unsigned int v5 = GNS_EcallStop(0);
    if (v5 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EcallStop invoked\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 73, "stopEmergencyPreemptiveSession_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v7, 4, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "stopEmergencyPreemptiveSession_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EcallStop,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "stopEmergencyPreemptiveSession_block_invoke", 257, v5);
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 0, 1);
      }
      int v17 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v2, v5);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v20, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, v17, (uint64_t)v20, (uint64_t)"stopEmergencyPreemptiveSession_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v20);
      std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100]((void *)(v2 + 664));
      std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100]((void *)(v2 + 696));
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "stopEmergencyPreemptiveSession_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v21, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v21, (uint64_t)"stopEmergencyPreemptiveSession_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v21);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "stopEmergencyPreemptiveSession_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "stopEmergencyPreemptiveSession_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
  }
  return result;
}

void sub_22B9FBC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setEmergencySessionSummaryReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice32setEmergencySessionSummaryReportENSt3__18functionIFNS_6ResultERKNS_9Emergency13SummaryReportEEEENS2_IFvS3_EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_14_0;
    void block[4] = a1;
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setEmergencySessionSummaryReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22B9FBE20(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

size_t ___ZN4gnss15GnssAdaptDevice32setEmergencySessionSummaryReportENSt3__18functionIFNS_6ResultERKNS_9Emergency13SummaryReportEEEENS2_IFvS3_EEE_block_invoke(uint64_t a1)
{
  v16[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setEmergencySessionSummaryReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (!*(void *)(a1 + 64) && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SummaryReport\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setEmergencySessionSummaryReport_block_invoke", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
  }
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
  uint64_t v7 = v2 + 728;
  if (__str != (char *)(v2 + 728))
  {
    uint64_t v8 = v15;
    uint64_t v9 = *(void *)(v2 + 752);
    if (v15 == __str)
    {
      if (v9 == v7)
      {
        (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v16);
        (*(void (**)(char *))(*(void *)v15 + 32))(v15);
        uint64_t v15 = 0;
        (*(void (**)(void, char *))(**(void **)(v2 + 752) + 24))(*(void *)(v2 + 752), __str);
        (*(void (**)(void))(**(void **)(v2 + 752) + 32))(*(void *)(v2 + 752));
        *(void *)(v2 + 752) = 0;
        uint64_t v15 = __str;
        (*(void (**)(void *, uint64_t))(v16[0] + 24))(v16, v2 + 728);
        (*(void (**)(void *))(v16[0] + 32))(v16);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 728);
        (*(void (**)(char *))(*(void *)v15 + 32))(v15);
        uint64_t v15 = *(char **)(v2 + 752);
      }
      *(void *)(v2 + 752) = v7;
    }
    else if (v9 == v7)
    {
      (*(void (**)(uint64_t, char *))(*(void *)v7 + 24))(v2 + 728, __str);
      (*(void (**)(void))(**(void **)(v2 + 752) + 32))(*(void *)(v2 + 752));
      *(void *)(v2 + 752) = v15;
      uint64_t v15 = __str;
    }
    else
    {
      uint64_t v15 = *(char **)(v2 + 752);
      *(void *)(v2 + 752) = v8;
    }
  }
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](__str);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a1 + 72);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v13, (uint64_t)"setEmergencySessionSummaryReport_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setEmergencySessionSummaryReport_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
  }
  return result;
}

void sub_22B9FC298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c71_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency13SummaryReportEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B9FC340(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c71_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency13SummaryReportEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::setEmergencyPositionReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice26setEmergencyPositionReportENSt3__18functionIFNS_6ResultERKNS_9Emergency6Cplane14PositionReportEEEENS2_IFvS3_EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_16_0;
    void block[4] = a1;
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setEmergencyPositionReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22B9FC544(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice26setEmergencyPositionReportENSt3__18functionIFNS_6ResultERKNS_9Emergency6Cplane14PositionReportEEEENS2_IFvS3_EEE_block_invoke(uint64_t a1)
{
  v19[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setEmergencyPositionReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(void *)(a1 + 64))
  {
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
    uint64_t v5 = v2 + 760;
    if (__str != (char *)(v2 + 760))
    {
      uint64_t v6 = v18;
      uint64_t v7 = *(void *)(v2 + 784);
      if (v18 == __str)
      {
        if (v7 == v5)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v19);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 784) + 24))(*(void *)(v2 + 784), __str);
          (*(void (**)(void))(**(void **)(v2 + 784) + 32))(*(void *)(v2 + 784));
          *(void *)(v2 + 784) = 0;
          uint64_t v18 = __str;
          (*(void (**)(void *, uint64_t))(v19[0] + 24))(v19, v2 + 760);
          (*(void (**)(void *))(v19[0] + 32))(v19);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 760);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = *(char **)(v2 + 784);
        }
        *(void *)(v2 + 784) = v5;
      }
      else if (v7 == v5)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 24))(v2 + 760, __str);
        (*(void (**)(void))(**(void **)(v2 + 784) + 32))(*(void *)(v2 + 784));
        *(void *)(v2 + 784) = v18;
        uint64_t v18 = __str;
      }
      else
      {
        uint64_t v18 = *(char **)(v2 + 784);
        *(void *)(v2 + 784) = v6;
      }
    }
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](__str);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v15, (uint64_t)"setEmergencyPositionReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setEmergencyPositionReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v16, (uint64_t)"setEmergencyPositionReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx e911 PosReport\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setEmergencyPositionReport_block_invoke", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setEmergencyPositionReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22B9FCA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c79_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane14PositionReportEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B9FCB20(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c79_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane14PositionReportEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::setEmergencyMeasurementReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice29setEmergencyMeasurementReportENSt3__18functionIFNS_6ResultERKNS_9Emergency6Cplane17MeasurementReportEEEENS2_IFvS3_EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_18_0;
    void block[4] = a1;
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setEmergencyMeasurementReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22B9FCD24(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice29setEmergencyMeasurementReportENSt3__18functionIFNS_6ResultERKNS_9Emergency6Cplane17MeasurementReportEEEENS2_IFvS3_EEE_block_invoke(uint64_t a1)
{
  v19[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setEmergencyMeasurementReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(void *)(a1 + 64))
  {
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
    uint64_t v5 = v2 + 824;
    if (__str != (char *)(v2 + 824))
    {
      uint64_t v6 = v18;
      uint64_t v7 = *(void *)(v2 + 848);
      if (v18 == __str)
      {
        if (v7 == v5)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v19);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 848) + 24))(*(void *)(v2 + 848), __str);
          (*(void (**)(void))(**(void **)(v2 + 848) + 32))(*(void *)(v2 + 848));
          *(void *)(v2 + 848) = 0;
          uint64_t v18 = __str;
          (*(void (**)(void *, uint64_t))(v19[0] + 24))(v19, v2 + 824);
          (*(void (**)(void *))(v19[0] + 32))(v19);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 824);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = *(char **)(v2 + 848);
        }
        *(void *)(v2 + 848) = v5;
      }
      else if (v7 == v5)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 24))(v2 + 824, __str);
        (*(void (**)(void))(**(void **)(v2 + 848) + 32))(*(void *)(v2 + 848));
        *(void *)(v2 + 848) = v18;
        uint64_t v18 = __str;
      }
      else
      {
        uint64_t v18 = *(char **)(v2 + 848);
        *(void *)(v2 + 848) = v6;
      }
    }
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](__str);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v15, (uint64_t)"setEmergencyMeasurementReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setEmergencyMeasurementReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v16, (uint64_t)"setEmergencyMeasurementReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx e911 MeasReport\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setEmergencyMeasurementReport_block_invoke", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setEmergencyMeasurementReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22B9FD24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c82_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane17MeasurementReportEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B9FD300(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c82_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane17MeasurementReportEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::setEmergencyMeasurementWithEstimateReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice41setEmergencyMeasurementWithEstimateReportENSt3__18functionIFNS_6ResultERKNS_9Emergency6Cplane29MeasurementReportWithEstimateEEEENS2_IFvS3_EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_20_0;
    void block[4] = a1;
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setEmergencyMeasurementWithEstimateReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22B9FD504(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice41setEmergencyMeasurementWithEstimateReportENSt3__18functionIFNS_6ResultERKNS_9Emergency6Cplane29MeasurementReportWithEstimateEEEENS2_IFvS3_EEE_block_invoke(uint64_t a1)
{
  v19[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setEmergencyMeasurementWithEstimateReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(void *)(a1 + 64))
  {
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
    uint64_t v5 = v2 + 856;
    if (__str != (char *)(v2 + 856))
    {
      uint64_t v6 = v18;
      uint64_t v7 = *(void *)(v2 + 880);
      if (v18 == __str)
      {
        if (v7 == v5)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v19);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 880) + 24))(*(void *)(v2 + 880), __str);
          (*(void (**)(void))(**(void **)(v2 + 880) + 32))(*(void *)(v2 + 880));
          *(void *)(v2 + 880) = 0;
          uint64_t v18 = __str;
          (*(void (**)(void *, uint64_t))(v19[0] + 24))(v19, v2 + 856);
          (*(void (**)(void *))(v19[0] + 32))(v19);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 856);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = *(char **)(v2 + 880);
        }
        *(void *)(v2 + 880) = v5;
      }
      else if (v7 == v5)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 24))(v2 + 856, __str);
        (*(void (**)(void))(**(void **)(v2 + 880) + 32))(*(void *)(v2 + 880));
        *(void *)(v2 + 880) = v18;
        uint64_t v18 = __str;
      }
      else
      {
        uint64_t v18 = *(char **)(v2 + 880);
        *(void *)(v2 + 880) = v6;
      }
    }
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](__str);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v15, (uint64_t)"setEmergencyMeasurementWithEstimateReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setEmergencyMeasurementWithEstimateReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v16, (uint64_t)"setEmergencyMeasurementWithEstimateReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx e911 MeasReportWithEstimate\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setEmergencyMeasurementWithEstimateReport_block_invoke", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setEmergencyMeasurementWithEstimateReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22B9FDA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c94_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane29MeasurementReportWithEstimateEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B9FDAE0(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c94_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane29MeasurementReportWithEstimateEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::startEmergencyPositionRequest(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    long long v6 = a2[1];
    long long v21 = *a2;
    *(_OWORD *)uint64_t v22 = v6;
    *(_OWORD *)&v22[12] = *(long long *)((char *)a2 + 28);
    long long v15 = *a3;
    uint64_t v16 = *((void *)a3 + 2);
    uint64_t v7 = mach_continuous_time();
    double v8 = *(double *)&g_MacClockTicksToMsRelation;
    unsigned __int16 v9 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice29startEmergencyPositionRequestERKNS_9Emergency6Cplane15PositionRequestERKNS2_7ContextENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_49_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v18, a4);
    long long v19 = v15;
    uint64_t v20 = v16;
    int v23 = (unint64_t)(v8 * (double)v7);
    dispatch_async(v9, block);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "startEmergencyPositionRequest");
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
    }
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v18);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "startEmergencyPositionRequest", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
    }
  }
  return result;
}

void sub_22B9FDDB8(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *___ZN4gnss15GnssAdaptDevice29startEmergencyPositionRequestERKNS_9Emergency6Cplane15PositionRequestERKNS2_7ContextENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  v147[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(v6 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "startEmergencyPositionRequest_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
  }
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::__value_func[abi:ne180100]((uint64_t)v147, v7 + 760);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::__value_func[abi:ne180100]((uint64_t)v146, v7 + 824);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::__value_func[abi:ne180100]((uint64_t)v145, v7 + 856);
  if (*(unsigned char *)(v7 + 89) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PVTM req active\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 87, "startEmergencyPositionRequest_block_invoke", 2056);
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 2, 1);
  }
  if (v147[3] || *(_DWORD *)(v6 + 100) != 1)
  {
    char IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      double v15 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(unsigned char *)(v6 + 91)) {
        uint64_t v16 = 84;
      }
      else {
        uint64_t v16 = 70;
      }
      if (*(unsigned char *)(v6 + 90)) {
        uint64_t v17 = 84;
      }
      else {
        uint64_t v17 = 70;
      }
      if (*(unsigned char *)(v6 + 89)) {
        uint64_t v18 = 84;
      }
      else {
        uint64_t v18 = 70;
      }
      if (*(unsigned char *)(v6 + 88)) {
        uint64_t v19 = 84;
      }
      else {
        uint64_t v19 = 70;
      }
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: include1xMsb,%c,optimizeGnssMeasWith1xMsb,%c,optimizeAfltMeasWith1xMsb,%c,useCdmaTimeForMeas,%c\n", (unint64_t)v15, "ADP", 73, "startEmergencyPositionRequest_block_invoke", v19, v18, v17, v16);
      char IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v20, 4, 1);
    }
    if (!v146[3] && !*(_DWORD *)(v6 + 100) && !*(unsigned char *)(v6 + 88))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v143, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 7, (uint64_t)v143, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v143);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v37 = mach_continuous_time();
        unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeasReportCb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 258);
        LbsOsaTrace_WriteLog(0x18u, __str, v38, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    if (!v145[3] && !*(_DWORD *)(v6 + 100) && *(unsigned char *)(v6 + 88))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v142, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 7, (uint64_t)v142, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v142);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v32 = mach_continuous_time();
        unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeasRepwithEstimate\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 258);
        LbsOsaTrace_WriteLog(0x18u, __str, v33, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    if (!*(unsigned char *)(v7 + 88))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v141, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 7, (uint64_t)v141, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v141);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v26 = mach_continuous_time();
        unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 1302);
        LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    if (*(_WORD *)(v6 + 96))
    {
      char IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Periodic Sessions\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 87, "startEmergencyPositionRequest_block_invoke", 515);
        char IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v22, 2, 1);
      }
    }
    int v23 = *(_DWORD *)(v6 + 100);
    if (v23 == -1)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v140, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 4, (uint64_t)v140, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v140);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v28 = mach_continuous_time();
        unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Methodtype\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v29, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    if (*(unsigned __int16 *)(v6 + 104) - 1 >= 0x80)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v139, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 4, (uint64_t)v139, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v139);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v30 = mach_continuous_time();
        unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 514, *(unsigned __int16 *)(v6 + 104));
        LbsOsaTrace_WriteLog(0x18u, __str, v31, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    if ((*(_WORD *)(v6 + 124) & 1) == 0)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v138, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 4, (uint64_t)v138, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v138);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Id should be GPS only\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v25, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    int v34 = *(_DWORD *)(v6 + 132);
    if (v34 == -1)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v137, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 4, (uint64_t)v137, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v137);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v39 = mach_continuous_time();
        unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v40, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    if (*(char *)(v6 + 106) < 0)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v136, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 4, (uint64_t)v136, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v136);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v41 = mach_continuous_time();
        unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HAcc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 514);
        LbsOsaTrace_WriteLog(0x18u, __str, v42, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    if (*(_DWORD *)(v6 + 116))
    {
      if (*(char *)(v6 + 113) < 0)
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v135, v6 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 4, (uint64_t)v135, (uint64_t)"startEmergencyPositionRequest_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v135);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v47 = mach_continuous_time();
          unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx VAcc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 514);
          LbsOsaTrace_WriteLog(0x18u, __str, v48, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
          goto LABEL_94;
        }
        goto LABEL_204;
      }
      if (*(unsigned __int8 *)(v6 + 114) >= 0x65u)
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v134, v6 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 4, (uint64_t)v134, (uint64_t)"startEmergencyPositionRequest_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v134);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v35 = mach_continuous_time();
          unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx VConf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 514);
          LbsOsaTrace_WriteLog(0x18u, __str, v36, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
          goto LABEL_94;
        }
        goto LABEL_204;
      }
    }
    if (*(unsigned __int8 *)(v6 + 112) >= 0x65u)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v133, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 4, (uint64_t)v133, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v133);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v43 = mach_continuous_time();
        unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HConf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 514);
        LbsOsaTrace_WriteLog(0x18u, __str, v44, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    if (*(unsigned char *)(v6 + 126) && (*(unsigned char *)(v6 + 126) & 0xB7) == 0)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v132, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 4, (uint64_t)v132, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v132);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v45 = mach_continuous_time();
        unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ShapeType Not Supported, %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 515, *(unsigned __int8 *)(v6 + 126));
        LbsOsaTrace_WriteLog(0x18u, __str, v46, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_94;
      }
      goto LABEL_204;
    }
    if (v34 == 3)
    {
      HalExtensions = gnss::GnssAdaptDevice::getHalExtensions((gnss::GnssAdaptDevice *)v7);
      *(double *)(v7 + 112) = (*(double (**)(void *))(*(void *)HalExtensions + 104))(HalExtensions);
      char IsLoggingAllowed = (gnss::GnssAdaptDevice *)gnss::GnssAdaptDevice::Ga10_07FTAssistanceRequest((gnss::GnssAdaptDevice *)v7);
      int v23 = *(_DWORD *)(v6 + 100);
    }
    if (!v23 && *(_DWORD *)(v6 + 132) != 3)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v131, v6 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 5, (uint64_t)v131, (uint64_t)"startEmergencyPositionRequest_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v131);
      gnss::Emergency::Cplane::MeasurementReport::MeasurementReport((uint64_t)__str);
      *(void *)&__str[12] = *(void *)(v6 + 132);
      *(_DWORD *)uint64_t __str = -9;
      __str[4] |= 4u;
      *(_DWORD *)&char __str[8] = 0;
      *(_DWORD *)&__str[1392] = 0;
      unsigned __int16 v65 = *(NSObject **)(v7 + 296);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN4gnss15GnssAdaptDevice29startEmergencyPositionRequestERKNS_9Emergency6Cplane15PositionRequestERKNS2_7ContextENSt3__18functionIFvNS_6ResultEEEE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_35_0;
      std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::__value_func[abi:ne180100]((uint64_t)v128, (uint64_t)v146);
      memcpy(v129, __str, sizeof(v129));
      dispatch_async(v65, block);
      gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport(v7, *(_DWORD *)(v6 + 136), 0, 22);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(v126, 0x410uLL);
        uint64_t v66 = mach_continuous_time();
        unsigned __int16 v67 = snprintf((char *)v126, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "ADP", 68, "startEmergencyPositionRequest_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, (char *)v126, v67, 5, 1);
      }
      std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v128);
      goto LABEL_204;
    }
    if (!gnss::GnssAdaptDevice::Ga10_11SetGuardTimeOut(IsLoggingAllowed)
      && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v52 = mach_continuous_time();
      unsigned __int16 v53 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetGuardTimeOut\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v53, 0, 1);
    }
    unsigned __int16 v54 = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
    if (v54)
    {
      bzero(__str, 0x410uLL);
      double v55 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(unsigned char *)(v6 + 72)) {
        uint64_t v56 = 84;
      }
      else {
        uint64_t v56 = 70;
      }
      if (*(unsigned char *)(v6 + 73)) {
        uint64_t v57 = 84;
      }
      else {
        uint64_t v57 = 70;
      }
      unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EarlyReturn,%c,HeloEnabled,%c\n", (unint64_t)v55, "ADP", 73, "startEmergencyPositionRequest_block_invoke", v57, v56);
      unsigned __int16 v54 = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v58, 4, 1);
    }
    int v59 = *(_DWORD *)(v6 + 132) != 3 && *(unsigned char *)(v6 + 73) != 0;
    if (!gnss::GnssAdaptDevice::Ga10_12SetEarlyReturn(v54, v59)
      && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v60 = mach_continuous_time();
      unsigned __int16 v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetEarlyReturn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v61, 0, 1);
    }
    *(void *)&v126[0] = 0xFFFFFFFF00000000;
    memset((char *)v126 + 12, 0, 27);
    *(_DWORD *)((char *)v126 + 6) = -1;
    switch(*(_DWORD *)(v6 + 100))
    {
      case 0xFFFFFFFF:
        uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
        if (v62)
        {
          bzero(__str, 0x410uLL);
          uint64_t v63 = mach_continuous_time();
          unsigned __int16 v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 262);
          uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v64, 0, 1);
        }
        break;
      case 0:
        LODWORD(v126[0]) = 1;
        if (*(_DWORD *)(v6 + 132) == 3) {
          BYTE6(v126[2]) = *(unsigned char *)(v6 + 91);
        }
        uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
        if (v62)
        {
          bzero(__str, 0x410uLL);
          uint64_t v70 = mach_continuous_time();
          unsigned __int16 v71 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MSA e911 Session\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v70), "ADP", 73, "startEmergencyPositionRequest_block_invoke");
          uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v71, 4, 1);
        }
        break;
      case 1:
        LODWORD(v126[0]) = 2;
        uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
        if (v62)
        {
          bzero(__str, 0x410uLL);
          uint64_t v72 = mach_continuous_time();
          unsigned __int16 v73 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MSB e911 Session\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v72), "ADP", 73, "startEmergencyPositionRequest_block_invoke");
          uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v73, 4, 1);
        }
        break;
      case 2:
        LODWORD(v126[0]) = 3;
        uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
        if (v62)
        {
          bzero(__str, 0x410uLL);
          uint64_t v74 = mach_continuous_time();
          unsigned __int16 v75 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Standalone e911 Session\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "ADP", 73, "startEmergencyPositionRequest_block_invoke");
          uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v75, 4, 1);
        }
        break;
      default:
        uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
        if (v62)
        {
          bzero(__str, 0x410uLL);
          uint64_t v68 = mach_continuous_time();
          unsigned __int16 v69 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Method Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v68), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 515, *(_DWORD *)(v6 + 100));
          uint64_t v62 = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v69, 0, 1);
        }
        break;
    }
    if (*(unsigned char *)(v6 + 106)) {
      BYTE6(v126[0]) = *(unsigned char *)(v6 + 106);
    }
    if (*(unsigned char *)(v6 + 112)) {
      BYTE7(v126[0]) = *(unsigned char *)(v6 + 112);
    }
    if (*(_DWORD *)(v6 + 116))
    {
      if (*(unsigned char *)(v6 + 113)) {
        BYTE8(v126[0]) = *(unsigned char *)(v6 + 113);
      }
      if (*(unsigned char *)(v6 + 114)) {
        BYTE9(v126[0]) = *(unsigned char *)(v6 + 114);
      }
    }
    if (!gnss::GnssAdaptDevice::Ga10_30SetTargetE911VertAccM(v62, *(double *)(v6 + 80))
      && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v76 = mach_continuous_time();
      unsigned __int16 v77 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetTargetE911VertAccM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v76), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v77, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v78 = mach_continuous_time();
      unsigned __int16 v79 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HAcc,%u,VAcc,%u,HConf,%u,VConf,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v78), "ADP", 73, "startEmergencyPositionRequest_block_invoke", BYTE6(v126[0]), BYTE8(v126[0]), BYTE7(v126[0]), BYTE9(v126[0]));
      LbsOsaTrace_WriteLog(0x18u, __str, v79, 4, 1);
    }
    if (*(_DWORD *)(v6 + 108) == 1)
    {
      int v80 = *(unsigned __int8 *)(v6 + 127);
      if (*(unsigned char *)(v6 + 127))
      {
        if ((v80 & 0xF) == 0) {
          goto LABEL_152;
        }
        int v81 = HIDWORD(v126[1]) | v80;
      }
      else
      {
        int v81 = 8;
      }
      HIDWORD(v126[1]) = v81;
    }
LABEL_152:
    char v82 = *(unsigned char *)(v6 + 126);
    if (v82)
    {
      LODWORD(v126[2]) |= 1u;
      if ((v82 & 2) == 0)
      {
LABEL_154:
        if ((v82 & 4) == 0) {
          goto LABEL_155;
        }
        goto LABEL_178;
      }
    }
    else if ((*(unsigned char *)(v6 + 126) & 2) == 0)
    {
      goto LABEL_154;
    }
    LODWORD(v126[2]) |= 2u;
    if ((v82 & 4) == 0)
    {
LABEL_155:
      if ((v82 & 0x10) == 0) {
        goto LABEL_156;
      }
      goto LABEL_179;
    }
LABEL_178:
    LODWORD(v126[2]) |= 4u;
    if ((v82 & 0x10) == 0)
    {
LABEL_156:
      if ((v82 & 0x20) == 0) {
        goto LABEL_158;
      }
      goto LABEL_157;
    }
LABEL_179:
    LODWORD(v126[2]) |= 8u;
    if ((v82 & 0x20) == 0)
    {
LABEL_158:
      HIDWORD(v126[0]) = 1000 * *(unsigned __int16 *)(v6 + 104);
      BYTE5(v126[2]) = *(_DWORD *)(v6 + 120) == 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v83 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v84 = 84;
        if (!*(unsigned char *)(v6 + 72)) {
          uint64_t v84 = 70;
        }
        unsigned __int16 v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ShapeType,%u,Vel,%u,RespTimeMs,%u,Allowed,%u,VerReq,%u,posProtocol,%d,SessId,%u,HeloEnabled,%c\n", (unint64_t)v83, "ADP", 73, "startEmergencyPositionRequest_block_invoke", LODWORD(v126[2]), HIDWORD(v126[1]), HIDWORD(v126[0]), BYTE5(v126[2]), *(_DWORD *)(v6 + 116), *(_DWORD *)(v6 + 132), *(_DWORD *)(v6 + 136), v84);
        LbsOsaTrace_WriteLog(0x18u, __str, v85, 4, 1);
      }
      WORD2(v126[0]) = 1;
      if (*(_DWORD *)(v6 + 100) == 1) {
        int v86 = 3;
      }
      else {
        int v86 = 1;
      }
      *(void *)((char *)&v126[1] + 4) = 0;
      LODWORD(v126[1]) = v86;
      BYTE4(v126[2]) = 1;
      *(_DWORD *)uint64_t __str = *(_DWORD *)(v6 + 136);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)&__str[8], v6 + 40);
      long long v87 = (uint64_t **)(v7 + 208);
      std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::function<void ()(gnss::Result)>>>((uint64_t **)(v7 + 208), (unsigned int *)__str, __str);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](&__str[8]);
      unsigned int v88 = GNS_CpLocReq(*(_DWORD *)(v6 + 136), (uint64_t)v126, 1);
      if (v88 != 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v108 = mach_continuous_time();
          unsigned __int16 v109 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpLocReq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v108), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 257, v88);
          LbsOsaTrace_WriteLog(0x18u, __str, v109, 0, 1);
        }
        int v110 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v7, v88);
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v125, v6 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, v110, (uint64_t)v125, (uint64_t)"startEmergencyPositionRequest_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v125);
        uint64_t v113 = *(void *)(v7 + 216);
        uint64_t v112 = v7 + 216;
        uint64_t v111 = v113;
        if (v113)
        {
          unsigned int v114 = *(_DWORD *)(v6 + 136);
          uint64_t v115 = v112;
          do
          {
            unsigned int v116 = *(_DWORD *)(v111 + 32);
            BOOL v117 = v116 >= v114;
            if (v116 >= v114) {
              uint64_t v118 = (uint64_t *)v111;
            }
            else {
              uint64_t v118 = (uint64_t *)(v111 + 8);
            }
            if (v117) {
              uint64_t v115 = v111;
            }
            uint64_t v111 = *v118;
          }
          while (*v118);
          if (v115 != v112 && v114 >= *(_DWORD *)(v115 + 32)) {
            std::map<unsigned int,std::function<void ()(gnss::Result)>>::erase[abi:ne180100](v87, (uint64_t *)v115);
          }
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v119 = mach_continuous_time();
          unsigned __int16 v120 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v119), "ADP", 68, "startEmergencyPositionRequest_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v120, 5, 1);
        }
        goto LABEL_204;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v89 = mach_continuous_time();
        unsigned __int16 v90 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CpLocReq success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "ADP", 73, "startEmergencyPositionRequest_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v90, 4, 1);
      }
      __str[60] = 0;
      *(_DWORD *)&__str[64] = -1;
      *(_WORD *)&__str[68] = 0;
      *(_OWORD *)&__str[72] = xmmword_22BB0C140;
      memset(&__str[88], 0, 22);
      *(_WORD *)&__str[110] = -1;
      __str[112] = 0;
      *(_DWORD *)&__str[116] = 0;
      *(void *)&__str[120] = -1;
      *(void *)&__str[128] = 0;
      *(_DWORD *)&__str[136] = -1;
      __str[140] = -1;
      *(void *)&__str[156] = -1;
      *(void *)&__str[142] = -1;
      *(_DWORD *)&__str[149] = -1;
      *(void *)&__str[164] = 0x7FFFFFFFLL;
      __str[172] = 0;
      *(_WORD *)&__str[174] = -1;
      *(void *)&__str[176] = 0xFFFFFFFF7FFFFFFFLL;
      *(void *)&__str[184] = 0;
      *(_OWORD *)uint64_t __str = v126[0];
      *(_OWORD *)&char __str[16] = v126[1];
      *(void *)&__str[31] = *(void *)((char *)&v126[1] + 15);
      int v91 = *(_DWORD *)(v6 + 136);
      int v92 = *(_DWORD *)(v6 + 132);
      *(_DWORD *)&__str[40] = *(_DWORD *)(v6 + 140);
      *(_DWORD *)&__str[44] = v92;
      __str[48] = *(unsigned char *)(v6 + 72);
      *(_DWORD *)&__str[56] = -1;
      *(_DWORD *)&__str[52] = v91;
      *(_WORD *)&__str[192] = *(_WORD *)(v6 + 89);
      uint64_t v93 = *(void *)(v7 + 128);
      *(unsigned char *)(v7 + 120) = *(unsigned char *)(v6 + 88);
      uint64_t v94 = *(void *)(v7 + 136) - v93;
      unint64_t v95 = v94 / 196;
      if (*(void *)(v7 + 136) != v93)
      {
        if (v95 <= 1) {
          uint64_t v96 = 1;
        }
        else {
          uint64_t v96 = v94 / 196;
        }
        if (*(_DWORD *)(v93 + 52) == v91)
        {
          unint64_t v97 = 0;
LABEL_174:
          if (v97 < v95)
          {
            uint64_t v98 = v93 + 196 * v97;
            __str[60] = *(unsigned char *)(v98 + 60);
            *(_OWORD *)uint64_t v98 = *(_OWORD *)__str;
            long long v99 = *(_OWORD *)&__str[80];
            long long v100 = *(_OWORD *)&__str[96];
            long long v101 = *(_OWORD *)&__str[128];
            *(_OWORD *)(v98 + 112) = *(_OWORD *)&__str[112];
            *(_OWORD *)(v98 + 128) = v101;
            *(_OWORD *)(v98 + 80) = v99;
            *(_OWORD *)(v98 + 96) = v100;
            long long v102 = *(_OWORD *)&__str[144];
            long long v103 = *(_OWORD *)&__str[160];
            long long v104 = *(_OWORD *)&__str[176];
            *(_WORD *)(v98 + 192) = *(_WORD *)&__str[192];
            *(_OWORD *)(v98 + 160) = v103;
            *(_OWORD *)(v98 + 176) = v104;
            *(_OWORD *)(v98 + 144) = v102;
            long long v105 = *(_OWORD *)&__str[16];
            long long v106 = *(_OWORD *)&__str[32];
            long long v107 = *(_OWORD *)&__str[64];
            *(_OWORD *)(v98 + 48) = *(_OWORD *)&__str[48];
            *(_OWORD *)(v98 + 64) = v107;
            *(_OWORD *)(v98 + 16) = v105;
            *(_OWORD *)(v98 + 32) = v106;
          }
          goto LABEL_203;
        }
        unint64_t v97 = 0;
        uint64_t v121 = (int *)(v93 + 248);
        uint64_t v122 = v96 - 1;
        while (v122 != v97)
        {
          int v123 = *v121;
          v121 += 49;
          ++v97;
          if (v123 == v91)
          {
            if (v97 < v95) {
              goto LABEL_174;
            }
            break;
          }
        }
      }
      if (v95 <= 3) {
        std::vector<gnss::AgnssSummaryReport>::push_back[abi:ne180100]((void **)(v7 + 128), (uint64_t)__str);
      }
LABEL_203:
      *(unsigned char *)(v7 + 1024) = 1;
      goto LABEL_204;
    }
LABEL_157:
    LODWORD(v126[2]) |= 0x10u;
    goto LABEL_158;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v144, v6 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v7, 7, (uint64_t)v144, (uint64_t)"startEmergencyPositionRequest_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v144);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosnReportCb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "startEmergencyPositionRequest_block_invoke", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
LABEL_94:
    bzero(__str, 0x410uLL);
    uint64_t v49 = mach_continuous_time();
    unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "ADP", 68, "startEmergencyPositionRequest_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v50, 5, 1);
  }
LABEL_204:
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](v145);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v146);
  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v147);
}