uint64_t ssl_cipher_id_cmp_void(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  v2 = a1[4];
  v3 = a2[4];
  v4 = v2 > v3;
  if (v2 >= v3) {
    v5 = 0;
  }
  else {
    v5 = -1;
  }
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t bssl::tls13_add_finished(bssl **this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v2 = *this;
  *(void *)v10 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[2] = v3;
  v11[3] = v3;
  v11[0] = v3;
  v11[1] = v3;
  if (bssl::tls13_finished_mac((bssl *)this, (bssl::SSL_HANDSHAKE *)v11, v10, (unint64_t *)(*((unsigned char *)v2 + 180) & 1)))
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[1] = v4;
    v9[2] = v4;
    v9[0] = v4;
    CBB_zero(v9);
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[1] = v5;
    v8[2] = v5;
    v8[0] = v5;
    if ((*(unsigned int (**)(bssl *, _OWORD *, _OWORD *, uint64_t))(*(void *)v2 + 88))(v2, v9, v8, 20)
      && CBB_add_bytes((uint64_t)v8, v11, *(size_t *)v10))
    {
      uint64_t v6 = bssl::ssl_add_message_cbb((uint64_t)v2, (uint64_t)v9);
    }
    else
    {
      uint64_t v6 = 0;
    }
    CBB_cleanup((uint64_t)v9);
  }
  else
  {
    bssl::ssl_send_alert(v2, (ssl_st *)2, 80);
    ERR_put_error(16, 0, 142, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 854);
    return 0;
  }
  return v6;
}

void sub_1BA0DFC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bssl::tls13_process_finished(char *a1, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v4 = *(bssl **)a1;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[2] = v5;
  v10[3] = v5;
  v10[0] = v5;
  v10[1] = v5;
  if (a3)
  {
    if ((*((unsigned char *)v4 + 180) & 1) == 0) {
      bssl::tls13_process_finished();
    }
    uint64_t v6 = a1 + 328;
    uint64_t v7 = *((void *)a1 + 4);
  }
  else
  {
    *(void *)v9 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = bssl::tls13_finished_mac((bssl *)a1, (bssl::SSL_HANDSHAKE *)v10, v9, (unint64_t *)((*((unsigned char *)v4 + 180) & 1) == 0));
    if (!result) {
      return result;
    }
    uint64_t v7 = *(void *)v9;
    uint64_t v6 = (char *)v10;
  }
  if (CBS_mem_equal(a2 + 8, v6, v7)) {
    return 1;
  }
  bssl::ssl_send_alert(v4, (ssl_st *)2, 51);
  ERR_put_error(16, 0, 142, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 472);
  return 0;
}

uint64_t bssl::tls13_finished_mac(bssl *this, bssl::SSL_HANDSHAKE *a2, unsigned __int8 *a3, unint64_t *a4)
{
  int v4 = (int)a4;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)this + 4);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = v9;
  long long v19 = v9;
  *(_OWORD *)v16 = v9;
  long long v17 = v9;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (bssl *)((char *)this + 424);
  uint64_t result = bssl::SSLTranscript::GetHash((bssl *)((char *)this + 424), v16, &v15);
  if (result)
  {
    uint64_t v12 = 136;
    if (v4) {
      uint64_t v12 = 184;
    }
    v13 = (char *)this + v12;
    v14 = (EVP_MD *)bssl::SSLTranscript::Digest(v10);
    return bssl::tls13_verify_data((unsigned __int8 *)a2, a3, v14, (uint64_t)v13, v8, v16, v15);
  }
  return result;
}

uint64_t bssl::tls13_verify_data(unsigned __int8 *a1, void *a2, EVP_MD *md, uint64_t a4, uint64_t a5, const unsigned __int8 *a6, size_t a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  key[2] = v14;
  key[3] = v14;
  key[0] = v14;
  key[1] = v14;
  int v15 = EVP_MD_size(md);
  unsigned int md_len = 0;
  BOOL v16 = CRYPTO_tls13_hkdf_expand_label((int)key, v15, md, a4, a5, "finished", 8uLL, 0, 0);
  uint64_t result = 0;
  if (v16)
  {
    uint64_t result = (uint64_t)HMAC(md, key, v15, a6, a7, a1, &md_len);
    if (result)
    {
      *a2 = md_len;
      return 1;
    }
  }
  return result;
}

unsigned __int8 *__cdecl HMAC(const EVP_MD *evp_md, const void *key, int key_len, const unsigned __int8 *d, size_t n, unsigned __int8 *md, unsigned int *md_len)
{
  if (md) {
    long long v9 = md;
  }
  else {
    long long v9 = (unsigned __int8 *)&HMAC_static_out_buffer;
  }
  int v10 = EVP_MD_type(evp_md);
  uint64_t v11 = boringssl_crypto_hash_nid_to_cc_digest(v10);
  if (v11)
  {
    uint64_t v12 = (unsigned int *)v11;
    v13 = malloc_type_malloc(((*(void *)(v11 + 8) + *(void *)(v11 + 16) + 19) & 0xFFFFFFFFFFFFFFF8) + *(void *)(v11 + 8), 0x16E08630uLL);
    if (!v13) {
      return 0;
    }
    long long v14 = v13;
    cchmac_init();
    cchmac_update();
    cchmac_final();
    cc_clear();
    free(v14);
    if (md_len)
    {
      unsigned int v15 = *v12;
LABEL_13:
      *unsigned int md_len = v15;
    }
  }
  else
  {
    BOOL v16 = (void *)g_boringssl_log;
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      HMAC_cold_1(v16, evp_md);
    }
    long long v9 = 0;
    if (md_len)
    {
      unsigned int v15 = 0;
      goto LABEL_13;
    }
  }
  return v9;
}

uint64_t bssl::ssl_add_message_cbb(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 96))(a1, a2, &v8))
  {
    long long v3 = *(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 104);
    OPENSSL_free(0);
    uint64_t v6 = v8;
    uint64_t v7 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v4 = v3(a1, &v6);
    OPENSSL_free(v6);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v4 = 0;
  }
  OPENSSL_free(v8);
  return v4;
}

void sub_1BA0E0168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t bssl::ssl_ext_key_share_parse_serverhello(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  memset(v14, 170, sizeof(v14));
  if (CBS_get_u16((unsigned __int16 **)a4, v14)
    && CBS_get_u16_length_prefixed((unsigned __int8 **)a4, (unint64_t *)&v14[1])
    && !*(void *)(a4 + 8))
  {
    uint64_t v10 = *(void *)(a1 + 392);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    if (v11 != v14[0])
    {
      uint64_t v12 = *(void *)(a1 + 400);
      if (!v12 || (int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12), v13 != v14[0]))
      {
        *a3 = 47;
        ERR_put_error(16, 0, 243, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2349);
        return 0;
      }
      uint64_t v10 = *(void *)(a1 + 400);
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, char *, void, void))(*(void *)v10 + 40))(v10, a2, a3, *(void *)&v14[1], *(void *)&v14[5]))
    {
      *(_WORD *)(*(void *)(a1 + 1520) + 6) = v14[0];
      std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100]((void **)(a1 + 392), 0);
      std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100]((void **)(a1 + 400), 0);
      return 1;
    }
    uint64_t result = 0;
    char v9 = 80;
  }
  else
  {
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2340);
    uint64_t result = 0;
    char v9 = 50;
  }
  *a3 = v9;
  return result;
}

BOOL bssl::ssl_setup_key_shares(bssl *this, unint64_t a2)
{
  uint64_t v4 = *(void **)this;
  long long v5 = (void **)((char *)this + 392);
  std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100]((void **)this + 49, 0);
  uint64_t v6 = (void **)((char *)this + 400);
  std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100]((void **)this + 50, 0);
  uint64_t v7 = (char *)this + 616;
  OPENSSL_free(*((void **)this + 77));
  *(_OWORD *)((char *)this + 616) = 0u;
  if (*((unsigned __int16 *)this + 15) >= 0x304u)
  {
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v22[1] = v9;
    v22[2] = v9;
    v22[0] = v9;
    CBB_zero(v22);
    if (!CBB_init((uint64_t)v22, 0x40uLL)) {
      goto LABEL_23;
    }
    if (a2) {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v4[15] + 832) & 0x20) != 0)
    {
      unsigned int grease_value = bssl::ssl_get_grease_value((uint64_t)this, 1u);
      if (!CBB_add_u16((uint64_t)v22, grease_value)
        || !CBB_add_u16((uint64_t)v22, 1u)
        || !CBB_add_u8((uint64_t)v22, 0))
      {
        goto LABEL_23;
      }
    }
    uint64_t v14 = *((void *)this + 1);
    unint64_t v15 = *(void *)(v14 + 112);
    if (v15)
    {
      BOOL v16 = *(__int16 **)(v14 + 104);
      a2 = (unsigned __int16)*v16;
      if (v15 == 1)
      {
LABEL_5:
        unint64_t v10 = 0;
        goto LABEL_6;
      }
    }
    else
    {
      BOOL v16 = &bssl::kDefaultGroups;
      a2 = 29;
      unint64_t v15 = 4;
    }
    for (unint64_t i = 1; i < v15; ++i)
    {
      unint64_t v10 = (unsigned __int16)v16[i];
      if ((a2 == 25497) == (v10 == 25497))
      {
        unint64_t v10 = 0;
      }
      else if (v10 == a2)
      {
        __assert_rtn("ssl_setup_key_shares", "extensions.cc", 2284, "second_group_id != group_id");
      }
      if (v10) {
        break;
      }
    }
LABEL_6:
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[1] = v11;
    v21[2] = v11;
    v21[0] = v11;
    bssl::SSLKeyShare::Create((void *)a2, &v20);
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100](v5, v12);
    std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100](&v20, 0);
    if (*v5)
    {
      if (CBB_add_u16((uint64_t)v22, a2))
      {
        if (CBB_add_u16_length_prefixed((uint64_t *)v22, (uint64_t)v21))
        {
          if ((*(uint64_t (**)(void, _OWORD *))(**v5 + 24))(*v5, v21))
          {
            if (!v10
              || (bssl::SSLKeyShare::Create((void *)v10, &v20),
                  int v13 = v20,
                  uint64_t v20 = 0,
                  std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100](v6, v13),
                  std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100](&v20, 0),
                  *v6)
              && CBB_add_u16((uint64_t)v22, v10)
              && CBB_add_u16_length_prefixed((uint64_t *)v22, (uint64_t)v21)
              && ((*(uint64_t (**)(void, _OWORD *))(**v6 + 24))(*v6, v21) & 1) != 0)
            {
              BOOL v8 = bssl::CBBFinishArray((uint64_t)v22, (uint64_t)v7);
LABEL_24:
              CBB_cleanup((uint64_t)v22);
              return v8;
            }
          }
        }
      }
    }
LABEL_23:
    BOOL v8 = 0;
    goto LABEL_24;
  }
  return 1;
}

void sub_1BA0E0608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  CBB_cleanup((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100](void **a1, void *a2)
{
  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    (*(void (**)(void *))*v2)(v2);
    OPENSSL_free(v2);
  }
}

BOOL bssl::CBBFinishArray(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  int v3 = CBB_finish(a1, &v8, &v7);
  if (v3)
  {
    unint64_t v5 = v7;
    unint64_t v4 = v8;
    OPENSSL_free(*(void **)a2);
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 204);
  }
  return v3 != 0;
}

BOOL bssl::anonymous namespace'::X25519KeyShare::Generate(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v5[0] = v3;
  v5[1] = v3;
  X25519_keypair(v5, (unsigned __int8 *)(a1 + 8));
  return CBB_add_bytes(a2, v5, 0x20uLL) != 0;
}

void *bssl::SSLKeyShare::Create@<X0>(void *this@<X0>, void *a2@<X8>)
{
  switch((int)this)
  {
    case 21:
      long long v3 = EC_group_p224();
      unint64_t v4 = OPENSSL_malloc(0x20uLL);
      if (!v4) {
        goto LABEL_15;
      }
      *unint64_t v4 = &unk_1F1397DD8;
      v4[1] = 0;
      v4[2] = v3;
      __int16 v5 = 21;
      goto LABEL_14;
    case 22:
    case 26:
    case 27:
    case 28:
      goto LABEL_7;
    case 23:
      unint64_t v7 = EC_group_p256();
      unint64_t v4 = OPENSSL_malloc(0x20uLL);
      if (!v4) {
        goto LABEL_15;
      }
      *unint64_t v4 = &unk_1F1397DD8;
      v4[1] = 0;
      v4[2] = v7;
      __int16 v5 = 23;
      goto LABEL_14;
    case 24:
      unint64_t v8 = EC_group_p384();
      unint64_t v4 = OPENSSL_malloc(0x20uLL);
      if (!v4) {
        goto LABEL_15;
      }
      *unint64_t v4 = &unk_1F1397DD8;
      v4[1] = 0;
      v4[2] = v8;
      __int16 v5 = 24;
      goto LABEL_14;
    case 25:
      long long v9 = EC_group_p521();
      unint64_t v4 = OPENSSL_malloc(0x20uLL);
      if (!v4) {
        goto LABEL_15;
      }
      *unint64_t v4 = &unk_1F1397DD8;
      v4[1] = 0;
      v4[2] = v9;
      __int16 v5 = 25;
LABEL_14:
      *((_WORD *)v4 + 12) = v5;
LABEL_15:
      unint64_t v10 = 0;
      *a2 = v4;
    case 29:
      this = OPENSSL_malloc(0x28uLL);
      if (!this) {
        goto LABEL_19;
      }
      uint64_t v6 = &unk_1F1397E28;
      goto LABEL_18;
    default:
      if (this == 25497)
      {
        this = OPENSSL_malloc(0x1E88uLL);
        if (this)
        {
          uint64_t v6 = &unk_1F1397E78;
LABEL_18:
          *this = v6;
        }
LABEL_19:
        *a2 = this;
      }
      else
      {
LABEL_7:
        *a2 = 0;
      }
      return this;
  }
}

unsigned char *X25519_keypair(unsigned char *a1, unsigned __int8 *buf)
{
  RAND_bytes(buf, 32);
  *buf |= 7u;
  buf[31] = buf[31] & 0x3F | 0x80;

  return X25519_public_from_private(a1, (uint64_t)buf);
}

uint64_t bssl::anonymous namespace'::X25519KeyShare::GroupID(bssl::_anonymous_namespace_::X25519KeyShare *this)
{
  return 29;
}

uint64_t bssl::anonymous namespace'::X25519KeyShare::Decap(uint64_t a1, uint64_t a2, unsigned char *a3, int64x2_t *a4, uint64_t a5)
{
  *a3 = 80;
  OPENSSL_free(0);
  unint64_t v10 = (char *)OPENSSL_malloc(0x20uLL);
  long long v11 = v10;
  if (v10)
  {
    if (a5 == 32 && X25519(v10, (long long *)(a1 + 8), a4))
    {
      OPENSSL_free(*(void **)a2);
      *(void *)a2 = v11;
      *(void *)(a2 + 8) = 32;
      uint64_t v12 = 1;
      long long v11 = 0;
    }
    else
    {
      *a3 = 50;
      ERR_put_error(16, 0, 108, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_key_share.cc", 170);
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  OPENSSL_free(v11);
  return v12;
}

void sub_1BA0E0AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL X25519(char *a1, long long *a2, int64x2_t *a3)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  unint64_t v87 = 0xAAAAAAAAAAAAAAAALL;
  v3.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v3.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  int64x2_t v85 = v3;
  int64x2_t v86 = v3;
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  v72[0] = v3;
  v72[1] = v3;
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  v70[0] = v3;
  v70[1] = v3;
  unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
  v68[0] = v3;
  v68[1] = v3;
  unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
  v66[0] = v3;
  v66[1] = v3;
  unint64_t v65 = 0xAAAAAAAAAAAAAAAALL;
  v64[0] = v3;
  v64[1] = v3;
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  v62[0] = v3;
  v62[1] = v3;
  unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
  int64x2_t v59 = v3;
  int64x2_t v60 = v3;
  long long v4 = a2[1];
  long long v88 = *a2;
  long long v89 = v4;
  LOBYTE(v88) = v88 & 0xF8;
  HIBYTE(v89) = HIBYTE(v4) & 0x3F | 0x40;
  int64x2_t v5 = a3[1];
  int64x2_t v90 = *a3;
  int64x2_t v91 = v5;
  v91.i8[15] = v5.i8[15] & 0x7F;
  fe_frombytes_strict((unint64_t *)&v85, (unsigned int *)&v90);
  unsigned int v6 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v81 = 0;
  unint64_t v82 = 1;
  int64x2_t v79 = 0u;
  int64x2_t v80 = 0u;
  v77[0] = v85;
  v77[1] = v86;
  unsigned int v7 = 254;
  unint64_t v78 = v87;
  long long v75 = 0u;
  uint64_t v74 = 1;
  int8x16_t v58 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL);
  int8x16_t v76 = 0u;
  do
  {
    uint64_t v8 = 0;
    unsigned int v9 = v7;
    unsigned int v10 = v6;
    unsigned int v6 = (*((unsigned __int8 *)&v88 + ((unint64_t)v7 >> 3)) >> (v7 & 7)) & 1;
    uint64_t v11 = -(uint64_t)(v6 ^ v10);
    do
    {
      uint64_t v12 = *(unint64_t *)((char *)&v82 + v8 * 8);
      uint64_t v13 = v77[0].i64[v8];
      uint64_t v14 = (v13 ^ v12) & v11;
      *(unint64_t *)((char *)&v82 + v8 * 8) = v14 ^ v12;
      v77[0].i64[v8++] = v14 ^ v13;
    }
    while (v8 != 5);
    for (uint64_t i = 0; i != 5; ++i)
    {
      uint64_t v16 = v79.i64[i];
      uint64_t v17 = *(uint64_t *)((char *)&v74 + i * 8);
      uint64_t v18 = (v17 ^ v16) & v11;
      v79.i64[i] = v18 ^ v16;
      *(uint64_t *)((char *)&v74 + i * 8) = v18 ^ v17;
    }
    fe_sub(v62, v77, (int64x2_t *)&v74);
    fe_sub(&v59, (int64x2_t *)&v82, &v79);
    fe_add(v68, (int64x2_t *)&v82, &v79);
    fe_add(v66, v77, (int64x2_t *)&v74);
    fe_mul_impl((uint64_t)&v74, (unint64_t *)v62, (unint64_t *)v68);
    fe_mul_impl((uint64_t)&v79, (unint64_t *)v66, (unint64_t *)&v59);
    fe_sq_tl((uint64_t)v72, (unint64_t *)&v59);
    fe_sq_tl((uint64_t)v70, (unint64_t *)v68);
    fe_add(v64, (int64x2_t *)&v74, &v79);
    fe_sub(v66, (int64x2_t *)&v74, &v79);
    fe_mul_impl((uint64_t)&v82, (unint64_t *)v70, (unint64_t *)v72);
    fe_sub(&v59, v70, v72);
    fe_sq_tl((uint64_t)&v79, (unint64_t *)v66);
    for (uint64_t j = 0; j != 5; ++j)
    {
      if (v59.i64[j] >= 0x1A666666666665uLL) {
        X25519_cold_1();
      }
    }
    uint64_t v20 = 0;
    uint64_t v21 = (v61 * (unsigned __int128)0x1DB42uLL) >> 64;
    uint64_t v22 = 121666 * v61;
    uint64_t v23 = (v60.u64[1] * (unsigned __int128)0x1DB42uLL) >> 64;
    uint64_t v24 = 121666 * v60.i64[1];
    uint64_t v25 = (__int128)(v59.u64[0] * (unsigned __int128)0x1DB42uLL) >> 51;
    BOOL v26 = __CFADD__(v25, 121666 * v59.i64[1]);
    uint64_t v27 = v25 + 121666 * v59.i64[1];
    uint64_t v28 = 121666 * v60.i64[0];
    uint64_t v29 = (v59.u64[1] * (unsigned __int128)0x1DB42uLL) >> 64;
    if (v26) {
      ++v29;
    }
    *((void *)&v31 + 1) = v29;
    *(void *)&long long v31 = v27;
    uint64_t v30 = v31 >> 51;
    uint64_t v32 = v27 & 0x7FFFFFFFFFFFFLL;
    BOOL v26 = __CFADD__(v30, v28);
    uint64_t v33 = v30 + v28;
    if (v26) {
      uint64_t v34 = ((v60.u64[0] * (unsigned __int128)0x1DB42uLL) >> 64) + 1;
    }
    else {
      uint64_t v34 = (v60.u64[0] * (unsigned __int128)0x1DB42uLL) >> 64;
    }
    *((void *)&v36 + 1) = v34;
    *(void *)&long long v36 = v33;
    uint64_t v35 = v36 >> 51;
    BOOL v26 = __CFADD__(v35, v24);
    uint64_t v37 = v35 + v24;
    if (v26) {
      ++v23;
    }
    *((void *)&v39 + 1) = v23;
    *(void *)&long long v39 = v37;
    uint64_t v38 = v39 >> 51;
    uint64_t v40 = v33 & 0x7FFFFFFFFFFFFLL;
    BOOL v26 = __CFADD__(v38, v22);
    uint64_t v41 = v38 + v22;
    if (v26) {
      ++v21;
    }
    *((void *)&v42 + 1) = v21;
    *(void *)&long long v42 = v41;
    v43.i64[0] = v37;
    v43.i64[1] = v41;
    unint64_t v44 = ((121666 * v59.i64[0]) & 0x7FFFFFFFFFFFELL) + 19 * (v42 >> 51);
    uint64_t v45 = v44 & 0x7FFFFFFFFFFFFLL;
    unint64_t v46 = v32 + (v44 >> 51);
    uint64_t v74 = v45;
    *(void *)&long long v75 = v46 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v75 + 1) = v40 + (v46 >> 51);
    int8x16_t v76 = vandq_s8(v43, v58);
    do
    {
      if (*(unint64_t *)((char *)&v74 + v20) >= 0x8CCCCCCCCCCCDLL) {
        X25519_cold_2();
      }
      v20 += 8;
    }
    while (v20 != 40);
    fe_sq_tl((uint64_t)v77, (unint64_t *)v64);
    fe_add(v62, v72, (int64x2_t *)&v74);
    fe_mul_impl((uint64_t)&v74, (unint64_t *)&v85, (unint64_t *)&v79);
    fe_mul_impl((uint64_t)&v79, (unint64_t *)&v59, (unint64_t *)v62);
    unsigned int v7 = v9 - 1;
  }
  while (v9);
  uint64_t v47 = 0;
  uint64_t v48 = -(uint64_t)v6;
  do
  {
    uint64_t v49 = *(unint64_t *)((char *)&v82 + v47 * 8);
    uint64_t v50 = v77[0].i64[v47];
    uint64_t v51 = (v50 ^ v49) & v48;
    *(unint64_t *)((char *)&v82 + v47 * 8) = v51 ^ v49;
    v77[0].i64[v47++] = v51 ^ v50;
  }
  while (v47 != 5);
  for (uint64_t k = 0; k != 5; ++k)
  {
    uint64_t v53 = v79.i64[k];
    uint64_t v54 = *(uint64_t *)((char *)&v74 + k * 8);
    uint64_t v55 = (v54 ^ v53) & v48;
    v79.i64[k] = v55 ^ v53;
    *(uint64_t *)((char *)&v74 + k * 8) = v55 ^ v54;
  }
  int64x2_t v90 = v79;
  int64x2_t v91 = v80;
  uint64_t v92 = v81;
  fe_loose_invert((uint64_t)&v79, (unint64_t *)&v90);
  fe_mul_impl((uint64_t)&v82, &v82, (unint64_t *)&v79);
  fe_tobytes(a1, &v82);
  return CRYPTO_memcmp(X25519_kZeros, a1, 32) != 0;
}

uint64_t fe_mul_impl(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (a2[i] >= 0x1A666666666665) {
      fe_mul_impl_cold_1();
    }
  }
  for (uint64_t j = 0; j != 5; ++j)
  {
    if (a3[j] >= 0x1A666666666665) {
      fe_mul_impl_cold_2();
    }
  }
  uint64_t v5 = 0;
  unint64_t v6 = a2[4];
  unint64_t v8 = a3[3];
  unint64_t v7 = a3[4];
  unint64_t v10 = a3[1];
  unint64_t v9 = a3[2];
  unint64_t v11 = *a3;
  unint64_t v12 = a2[2];
  unint64_t v13 = a2[3];
  unint64_t v14 = *a2;
  unint64_t v15 = a2[1];
  signed long long v17 = v13 * (unsigned __int128)(19 * v9)
      + 19 * v10 * (unsigned __int128)v6
      + v12 * (unsigned __int128)(19 * v8)
      + v15 * (unsigned __int128)(19 * v7)
      + v14 * (unsigned __int128)v11;
  unsigned long long v18 = v13 * (unsigned __int128)(19 * v7) + 19 * v8 * (unsigned __int128)v6;
  uint64_t v19 = (v13 * (unsigned __int128)(19 * v8)
       + 19 * v9 * (unsigned __int128)v6
       + v12 * (unsigned __int128)(19 * v7)
       + v11 * (unsigned __int128)v15
       + v14 * (unsigned __int128)v10) >> 64;
  uint64_t v20 = v13 * 19 * v8 + 19 * v9 * v6 + v12 * 19 * v7 + v11 * v15 + v14 * v10;
  uint64_t v21 = v17 >> 51;
  BOOL v22 = __CFADD__(v20, v21);
  uint64_t v23 = v20 + v21;
  if (v22) {
    ++v19;
  }
  *((void *)&v25 + 1) = v19;
  *(void *)&long long v25 = v23;
  uint64_t v24 = v25 >> 51;
  uint64_t v26 = (v18 + v15 * (unsigned __int128)v10 + v11 * (unsigned __int128)v12 + v14 * (unsigned __int128)v9) >> 64;
  uint64_t v27 = v18 + v15 * v10 + v11 * v12 + v14 * v9;
  BOOL v22 = __CFADD__(v27, v24);
  uint64_t v28 = v27 + v24;
  if (v22) {
    ++v26;
  }
  unsigned long long v29 = v12 * (unsigned __int128)v10
      + 19 * v7 * (unsigned __int128)v6
      + v15 * (unsigned __int128)v9
      + v11 * (unsigned __int128)v13
      + v14 * (unsigned __int128)v8;
  unsigned long long v30 = v12 * (unsigned __int128)v9
      + v13 * (unsigned __int128)v10
      + v15 * (unsigned __int128)v8
      + v11 * (unsigned __int128)v6;
  unsigned long long v32 = v30 + v14 * (unsigned __int128)v7;
  uint64_t v31 = *((void *)&v32 + 1);
  *((void *)&v33 + 1) = v26;
  *(void *)&long long v33 = v28;
  uint64_t v34 = v29 + (v33 >> 51);
  *((void *)&v33 + 1) = v30;
  *(void *)&long long v33 = v34;
  uint64_t v35 = v33 >> 51;
  if (__CFADD__((void)v32, v35)) {
    uint64_t v31 = *((void *)&v32 + 1) + 1;
  }
  *((void *)&v36 + 1) = v31;
  *(void *)&long long v36 = v32 + v35;
  unint64_t v37 = (v17 & 0x7FFFFFFFFFFFFLL) + 19 * (v36 >> 51);
  v38.i64[0] = v34;
  v38.i64[1] = v32 + v35;
  uint64_t v39 = v37 & 0x7FFFFFFFFFFFFLL;
  unint64_t v40 = (v23 & 0x7FFFFFFFFFFFFLL) + (v37 >> 51);
  *(void *)uint64_t result = v39;
  *(void *)(result + 8) = v40 & 0x7FFFFFFFFFFFFLL;
  *(void *)(result + 16) = (v28 & 0x7FFFFFFFFFFFFLL) + (v40 >> 51);
  *(int8x16_t *)(result + 24) = vandq_s8(v38, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL));
  do
  {
    if (*(void *)(result + v5) >= 0x8CCCCCCCCCCCDuLL) {
      fe_mul_impl_cold_3();
    }
    v5 += 8;
  }
  while (v5 != 40);
  return result;
}

int64x2_t *fe_add(int64x2_t *result, int64x2_t *a2, int64x2_t *a3)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (a2->i64[i] >= 0x8CCCCCCCCCCCDuLL) {
      fe_add_cold_1();
    }
  }
  for (uint64_t j = 0; j != 5; ++j)
  {
    if (a3->i64[j] >= 0x8CCCCCCCCCCCDuLL) {
      fe_add_cold_2();
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = a3[2].i64[0] + a2[2].i64[0];
  int64x2_t v7 = vaddq_s64(a3[1], a2[1]);
  *uint64_t result = vaddq_s64(*a3, *a2);
  result[1] = v7;
  result[2].i64[0] = v6;
  do
  {
    if (result->i64[v5] >= 0x1A666666666665uLL) {
      fe_add_cold_3();
    }
    ++v5;
  }
  while (v5 != 5);
  return result;
}

int64x2_t *fe_sub(int64x2_t *result, int64x2_t *a2, int64x2_t *a3)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (a2->i64[i] >= 0x8CCCCCCCCCCCDuLL) {
      fe_sub_cold_1();
    }
  }
  for (uint64_t j = 0; j != 5; ++j)
  {
    if (a3->i64[j] >= 0x8CCCCCCCCCCCDuLL) {
      fe_sub_cold_2();
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2[2].i64[0] - a3[2].i64[0] + 0xFFFFFFFFFFFFELL;
  int64x2_t v7 = vaddq_s64(vsubq_s64(a2[1], a3[1]), vdupq_n_s64(0xFFFFFFFFFFFFEuLL));
  *uint64_t result = vaddq_s64(vsubq_s64(*a2, *a3), (int64x2_t)xmmword_1BA192B30);
  result[1] = v7;
  result[2].i64[0] = v6;
  do
  {
    if (result->i64[v5] >= 0x1A666666666665uLL) {
      fe_sub_cold_3();
    }
    ++v5;
  }
  while (v5 != 5);
  return result;
}

uint64_t fe_sq_tl(uint64_t result, unint64_t *a2)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (a2[i] >= 0x1A666666666665) {
      fe_sq_tl_cold_1();
    }
  }
  uint64_t v3 = 0;
  unint64_t v5 = a2[3];
  unint64_t v4 = a2[4];
  unint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  uint64_t v8 = 2 * v7;
  unint64_t v9 = *a2;
  unint64_t v10 = (v5 * (unsigned __int128)(38 * v4)) >> 64;
  uint64_t v11 = v5 * 38 * v4;
  unint64_t v12 = (v7 * (unsigned __int128)(38 * v4)) >> 64;
  uint64_t v13 = v7 * 38 * v4;
  signed long long v14 = v6 * (unsigned __int128)(38 * v4) + v7 * (unsigned __int128)(38 * v5) + v9 * (unsigned __int128)v9;
  uint64_t v15 = (v6 * (unsigned __int128)(2 * v5) + v7 * (unsigned __int128)v7 + v9 * (unsigned __int128)(2 * v4)) >> 64;
  uint64_t v16 = v6 * 2 * v5 + v7 * v7 + v9 * 2 * v4;
  unsigned long long v19 = v6 * (unsigned __int128)(2 * v7) + 19 * v4 * (unsigned __int128)v4 + v9 * (unsigned __int128)(2 * v5);
  uint64_t v18 = v19 >> 64;
  uint64_t v17 = v19;
  uint64_t v21 = v6 * v6 + v11 + v9 * v8;
  uint64_t v20 = (v6 * (unsigned __int128)v6 + __PAIR128__(v10, v11) + v9 * (unsigned __int128)(unint64_t)v8) >> 64;
  unsigned long long v23 = __PAIR128__(v12, v13) + 19 * v5 * (unsigned __int128)v5 + v9 * (unsigned __int128)(2 * v6);
  uint64_t v22 = *((void *)&v23 + 1);
  uint64_t v24 = v14 >> 51;
  if (__CFADD__((void)v23, v24)) {
    uint64_t v22 = *((void *)&v23 + 1) + 1;
  }
  *((void *)&v26 + 1) = v22;
  *(void *)&long long v26 = v23 + v24;
  uint64_t v25 = v26 >> 51;
  BOOL v27 = __CFADD__(v21, v25);
  uint64_t v28 = v21 + v25;
  if (v27) {
    ++v20;
  }
  *((void *)&v30 + 1) = v20;
  *(void *)&long long v30 = v28;
  uint64_t v29 = v30 >> 51;
  BOOL v27 = __CFADD__(v17, v29);
  uint64_t v31 = v17 + v29;
  if (v27) {
    uint64_t v32 = v18 + 1;
  }
  else {
    uint64_t v32 = v18;
  }
  *((void *)&v34 + 1) = v32;
  *(void *)&long long v34 = v31;
  uint64_t v33 = v34 >> 51;
  BOOL v27 = __CFADD__(v16, v33);
  uint64_t v35 = v16 + v33;
  if (v27) {
    ++v15;
  }
  *((void *)&v36 + 1) = v15;
  *(void *)&long long v36 = v35;
  unint64_t v37 = (v14 & 0x7FFFFFFFFFFFFLL) + 19 * (v36 >> 51);
  v38.i64[0] = v31;
  v38.i64[1] = v35;
  unint64_t v39 = ((v23 + v24) & 0x7FFFFFFFFFFFFLL) + (v37 >> 51);
  *(void *)uint64_t result = v37 & 0x7FFFFFFFFFFFFLL;
  *(void *)(result + 8) = v39 & 0x7FFFFFFFFFFFFLL;
  *(void *)(result + 16) = (v28 & 0x7FFFFFFFFFFFFLL) + (v39 >> 51);
  *(int8x16_t *)(result + 24) = vandq_s8(v38, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL));
  do
  {
    if (*(void *)(result + v3) >= 0x8CCCCCCCCCCCDuLL) {
      fe_sq_tl_cold_2();
    }
    v3 += 8;
  }
  while (v3 != 40);
  return result;
}

unsigned char *X25519_public_from_private(unsigned char *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v3 = *(_OWORD *)(a2 + 16);
  int8x16_t v16 = *(int8x16_t *)a2;
  long long v17 = v3;
  v16.i8[0] &= 0xF8u;
  HIBYTE(v17) = HIBYTE(v3) & 0x3F | 0x40;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[3] = (int64x2_t)v4;
  v15[4] = (int64x2_t)v4;
  v15[1] = (int64x2_t)v4;
  v15[2] = (int64x2_t)v4;
  v14[2] = v4;
  v15[0] = (int64x2_t)v4;
  v14[0] = v4;
  v14[1] = v4;
  v13[0] = v4;
  v13[1] = v4;
  x25519_ge_scalarmult_base(v13, &v16);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  v5.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v5.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v5;
  v11[1] = v5;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v5;
  v9[1] = v5;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v5;
  v7[1] = v5;
  fe_add(v11, v15, (int64x2_t *)((char *)v14 + 8));
  fe_sub(v9, v15, (int64x2_t *)((char *)v14 + 8));
  fe_loose_invert((uint64_t)v7, (unint64_t *)v9);
  fe_mul_impl((uint64_t)v7, (unint64_t *)v11, (unint64_t *)v7);
  return fe_tobytes(a1, v7);
}

unsigned char *fe_tobytes(unsigned char *result, void *a2)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (a2[i] >= 0x8CCCCCCCCCCCDuLL) {
      fe_tobytes_cold_1();
    }
  }
  unint64_t v3 = *a2 - 0x7FFFFFFFFFFEDLL;
  unint64_t v4 = a2[1] - -(uint64_t)(v3 >> 51) - 0x7FFFFFFFFFFFFLL;
  unint64_t v5 = a2[2] - -(uint64_t)(v4 >> 51) - 0x7FFFFFFFFFFFFLL;
  unint64_t v6 = a2[3] - -(uint64_t)(v5 >> 51) - 0x7FFFFFFFFFFFFLL;
  uint64_t v7 = v3 & 0x7FFFFFFFFFFFFLL;
  uint64_t v8 = v4 & 0x7FFFFFFFFFFFFLL;
  uint64_t v9 = v5 & 0x7FFFFFFFFFFFFLL;
  uint64_t v10 = v6 & 0x7FFFFFFFFFFFFLL;
  uint64_t v11 = a2[4] - -(uint64_t)(v6 >> 51) - 0x7FFFFFFFFFFFFLL;
  if ((v11 & 0x7F8000000000000) != 0) {
    uint64_t v12 = -1;
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v13 = (v12 & 0x7FFFFFFFFFFEDLL) + v7;
  result[1] = BYTE1(v13);
  result[2] = BYTE2(v13);
  result[3] = (unint64_t)((v12 & 0xFFFFFFED) + v7) >> 24;
  result[4] = BYTE4(v13);
  result[5] = BYTE5(v13);
  unint64_t v14 = (v12 & 0x7FFFFFFFFFFFFLL) + v8 + (v13 >> 51);
  *uint64_t result = v13;
  result[6] = BYTE6(v13) & 7 | (8 * (v12 + v8 + (v13 >> 51)));
  result[7] = v14 >> 5;
  result[8] = v14 >> 13;
  result[9] = v14 >> 21;
  result[10] = v14 >> 29;
  result[11] = v14 >> 37;
  unint64_t v15 = v9 + (v12 & 0x7FFFFFFFFFFFFLL) + (v14 >> 51);
  result[12] = (v14 >> 45) & 0x3F | (((_BYTE)v9 + (_BYTE)v12 + (v14 >> 51)) << 6);
  result[13] = v15 >> 2;
  result[14] = v15 >> 10;
  result[15] = v15 >> 18;
  result[16] = v15 >> 26;
  result[17] = v15 >> 34;
  result[18] = v15 >> 42;
  unint64_t v16 = v10 + (v12 & 0x7FFFFFFFFFFFFLL) + (v15 >> 51);
  result[19] = ((v15 & 0x4000000000000) != 0) | (2 * (v10 + v12 + (v15 >> 51)));
  result[20] = v16 >> 7;
  result[21] = v16 >> 15;
  result[22] = v16 >> 23;
  result[23] = v16 >> 31;
  result[24] = v16 >> 39;
  unint64_t v17 = v11 + v12 + (v16 >> 51);
  result[25] = (v16 >> 47) & 0xF | (16 * v17);
  result[26] = v17 >> 4;
  result[27] = v17 >> 12;
  result[28] = v17 >> 20;
  result[29] = v17 >> 28;
  result[30] = v17 >> 36;
  result[31] = (v17 >> 44) & 0x7F;
  return result;
}

uint64_t x25519_ge_scalarmult_base(long long *a1, int8x16_t *a2)
{
  uint64_t v3 = 0;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[2] = v4;
  long long v27 = v4;
  v26[0] = v4;
  v26[1] = v4;
  v5.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v5.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  do
  {
    int8x16_t v6 = *a2++;
    v29.val[0] = vandq_s8(v6, v5);
    v29.val[1] = (int8x16_t)vshrq_n_u8((uint8x16_t)v6, 4uLL);
    uint64_t v7 = (char *)&v26[v3];
    vst2q_s8(v7, v29);
    v3 += 2;
  }
  while (v3 != 4);
  uint64_t v8 = 0;
  int v9 = 0;
  do
  {
    int v10 = *((unsigned __int8 *)v26 + v8) + v9;
    int v9 = (v10 + 8) << 24 >> 28;
    *((unsigned char *)v26 + v8++) = v10 - ((v10 + 8) & 0xF0);
  }
  while (v8 != 63);
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[8] = v11;
  v23[9] = v11;
  v23[6] = v11;
  v23[7] = v11;
  v23[4] = v11;
  v23[5] = v11;
  v23[2] = v11;
  v23[3] = v11;
  v23[0] = v11;
  v23[1] = v11;
  v19[0] = v11;
  v19[1] = v11;
  v19[2] = v11;
  v19[3] = v11;
  v19[4] = v11;
  v19[5] = v11;
  v19[6] = v11;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  HIBYTE(v27) += v9;
  ge_p3_0((uint64_t)a1);
  int v12 = 0;
  unint64_t v13 = 1;
  do
  {
    table_select((uint64_t)v19, v12, *((char *)v26 + v13));
    ge_madd((uint64_t)v23, (uint64_t)a1, (unint64_t *)v19);
    x25519_ge_p1p1_to_p3((uint64_t)a1, (unint64_t *)v23);
    ++v12;
    BOOL v14 = v13 >= 0x3E;
    v13 += 2;
  }
  while (!v14);
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[5] = v15;
  v21[6] = v15;
  _OWORD v21[3] = v15;
  v21[4] = v15;
  v21[1] = v15;
  v21[2] = v15;
  v21[0] = v15;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  v24[5] = v15;
  v24[6] = v15;
  v24[3] = v15;
  v24[4] = v15;
  v24[1] = v15;
  v24[2] = v15;
  v24[0] = v15;
  ge_p3_to_p2((uint64_t)v24, a1);
  ge_p2_dbl((uint64_t)v23, (uint64_t)v24);
  x25519_ge_p1p1_to_p2((uint64_t)v21, (unint64_t *)v23);
  ge_p2_dbl((uint64_t)v23, (uint64_t)v21);
  x25519_ge_p1p1_to_p2((uint64_t)v21, (unint64_t *)v23);
  ge_p2_dbl((uint64_t)v23, (uint64_t)v21);
  x25519_ge_p1p1_to_p2((uint64_t)v21, (unint64_t *)v23);
  ge_p2_dbl((uint64_t)v23, (uint64_t)v21);
  x25519_ge_p1p1_to_p3((uint64_t)a1, (unint64_t *)v23);
  int v16 = 0;
  unint64_t v17 = 0;
  do
  {
    table_select((uint64_t)v19, v16, *((char *)v26 + v17));
    ge_madd((uint64_t)v23, (uint64_t)a1, (unint64_t *)v19);
    uint64_t result = x25519_ge_p1p1_to_p3((uint64_t)a1, (unint64_t *)v23);
    ++v16;
    BOOL v14 = v17 >= 0x3E;
    v17 += 2;
  }
  while (!v14);
  return result;
}

uint64_t x25519_ge_p1p1_to_p3(uint64_t a1, unint64_t *a2)
{
  long long v4 = a2 + 15;
  fe_mul_impl(a1, a2, a2 + 15);
  fe_mul_impl(a1 + 40, a2 + 5, a2 + 10);
  fe_mul_impl(a1 + 80, a2 + 10, v4);

  return fe_mul_impl(a1 + 120, a2, a2 + 5);
}

uint64_t table_select(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = 0;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  memset(v40, 0, sizeof(v40));
  long long v39 = 0u;
  char v38 = ((a3 - 1) & ~(uint64_t)a3) < 0;
  v40[15] = v38;
  int8x16_t v6 = (char *)&k25519Precomp + 768 * a2;
  do
  {
    uint64_t v7 = (char *)&k25519Precomp + 768 * a2 + 96 * v4;
    if (&v41 > (uint64_t *)v7 && v7 + 96 > &v38) {
      table_select_cold_1();
    }
    uint64_t v9 = 0;
    int8x16_t v10 = vdupq_n_s8((uint64_t)((++v4 ^ (unint64_t)(a3 - 2 * ((a3 >> 31) & a3))) - 1) >> 63);
    do
    {
      *(int8x16_t *)(&v38 + v9) = veorq_s8(vandq_s8(*(int8x16_t *)&v6[v9], v10), *(int8x16_t *)(&v38 + v9));
      v9 += 16;
    }
    while (v9 != 96);
    v6 += 96;
  }
  while (v4 != 8);
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  v11.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v11.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  int64x2_t v35 = v11;
  int64x2_t v36 = v11;
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  int64x2_t v32 = v11;
  int64x2_t v33 = v11;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  int64x2_t v29 = v11;
  int64x2_t v30 = v11;
  fe_frombytes_strict((unint64_t *)&v35, (unsigned int *)&v38);
  fe_frombytes_strict((unint64_t *)&v32, (unsigned int *)&v40[15]);
  fe_frombytes_strict((unint64_t *)&v29, (unsigned int *)&v40[47]);
  int64x2_t v12 = v36;
  int64x2_t v13 = v35;
  int64x2_t v14 = v36;
  *(int64x2_t *)a1 = v35;
  *(int64x2_t *)(a1 + 16) = v12;
  int64x2_t v15 = v33;
  *(int64x2_t *)(a1 + 40) = v32;
  int64x2_t v16 = v32;
  *(int64x2_t *)(a1 + 56) = v33;
  int64x2_t v17 = v30;
  *(int64x2_t *)(a1 + 80) = v29;
  *(int64x2_t *)(a1 + 96) = v17;
  v22[0] = v16;
  v22[1] = v15;
  v18.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v18.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v18;
  v27[1] = v18;
  unint64_t v19 = v37;
  *(void *)(a1 + 32) = v37;
  unint64_t v20 = v34;
  *(void *)(a1 + 72) = v34;
  *(void *)(a1 + 112) = v31;
  unint64_t v23 = v20;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  int64x2_t v24 = v13;
  int64x2_t v25 = v14;
  unint64_t v26 = v19;
  fe_neg(v27, &v29);
  return cmov(a1, (uint64_t)v22, (a3 >> 7) & 1);
}

unint64_t *fe_frombytes_strict(unint64_t *result, unsigned int *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 31);
  if (v2 >> 7 == 1) {
    fe_frombytes_strict_cold_1();
  }
  uint64_t v3 = 0;
  uint64_t v4 = *((unsigned __int8 *)a2 + 30);
  unint64_t v5 = *((unsigned __int8 *)a2 + 6);
  unint64_t v6 = ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) & 0xFFF8FFFFFFFFFFFFLL | ((v5 & 7) << 48) | *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  unint64_t v7 = *((unsigned __int8 *)a2 + 12);
  uint64_t v8 = *((unsigned __int8 *)a2 + 29);
  uint64_t v9 = *((unsigned __int8 *)a2 + 28);
  uint64_t v10 = *((unsigned __int8 *)a2 + 27);
  uint64_t v11 = *((unsigned __int8 *)a2 + 26);
  unint64_t v12 = *(unsigned int *)((char *)a2 + 22);
  unint64_t v13 = ((v7 & 0x3F) << 45) | ((unint64_t)*((unsigned __int8 *)a2 + 11) << 37) | ((unint64_t)*((unsigned __int8 *)a2 + 10) << 29) | ((unint64_t)*((unsigned __int8 *)a2 + 9) << 21) | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 13) | (32 * *((unsigned __int8 *)a2 + 7)) | (v5 >> 3);
  unint64_t v14 = a2[4];
  unint64_t v15 = ((v14 & 0x1FFFFFF) << 26) | ((unint64_t)*((unsigned __int8 *)a2 + 15) << 18) | ((unint64_t)*((unsigned __int8 *)a2 + 14) << 10) | (4 * *((unsigned __int8 *)a2 + 13)) | (v7 >> 6);
  unint64_t v16 = ((v12 & 0xFFFFFFF) << 23) | ((unint64_t)*((unsigned __int8 *)a2 + 21) << 15) | ((unint64_t)*((unsigned __int8 *)a2 + 20) << 7) | (v14 >> 25);
  *uint64_t result = v6;
  result[1] = v13;
  result[2] = v15;
  result[3] = v16;
  result[4] = (v2 << 44) | (v4 << 36) | (v8 << 28) | (v9 << 20) | (v10 << 12) | (16 * v11) | (v12 >> 28);
  do
  {
    if (result[v3] >= 0x8CCCCCCCCCCCDLL) {
      fe_frombytes_strict_cold_2();
    }
    ++v3;
  }
  while (v3 != 5);
  return result;
}

int64x2_t *ge_madd(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  v6.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v6.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v6;
  v11[1] = v6;
  unint64_t v7 = (int64x2_t *)(a2 + 40);
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v6;
  v9[1] = v6;
  fe_add((int64x2_t *)a1, (int64x2_t *)(a2 + 40), (int64x2_t *)a2);
  fe_sub((int64x2_t *)(a1 + 40), v7, (int64x2_t *)a2);
  fe_mul_impl((uint64_t)v11, (unint64_t *)a1, a3);
  fe_mul_impl((uint64_t)v13, (unint64_t *)(a1 + 40), a3 + 5);
  fe_mul_impl((uint64_t)v9, a3 + 10, (unint64_t *)(a2 + 120));
  fe_add((int64x2_t *)(a1 + 120), (int64x2_t *)(a2 + 80), (int64x2_t *)(a2 + 80));
  fe_sub((int64x2_t *)a1, v11, v13);
  fe_add((int64x2_t *)(a1 + 40), v11, v13);
  fe_carry((unint64_t *)v11, (void *)(a1 + 120));
  fe_add((int64x2_t *)(a1 + 80), v11, v9);
  return fe_sub((int64x2_t *)(a1 + 120), v11, v9);
}

unint64_t *fe_carry(unint64_t *result, void *a2)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (a2[i] >= 0x1A666666666665uLL) {
      fe_carry_cold_1();
    }
  }
  uint64_t v3 = 0;
  unint64_t v4 = a2[1] + (*a2 >> 51);
  unint64_t v5 = a2[2] + (v4 >> 51);
  unint64_t v6 = a2[3] + (v5 >> 51);
  unint64_t v7 = a2[4] + (v6 >> 51);
  unint64_t v8 = (*a2 & 0x7FFFFFFFFFFFFLL) + 19 * (v7 >> 51);
  unint64_t v9 = (v4 & 0x7FFFFFFFFFFFFLL) + (v8 >> 51);
  *uint64_t result = v8 & 0x7FFFFFFFFFFFFLL;
  result[1] = v9 & 0x7FFFFFFFFFFFFLL;
  result[2] = (v5 & 0x7FFFFFFFFFFFFLL) + (v9 >> 51);
  result[3] = v6 & 0x7FFFFFFFFFFFFLL;
  result[4] = v7 & 0x7FFFFFFFFFFFFLL;
  do
  {
    if (result[v3] >= 0x8CCCCCCCCCCCDLL) {
      fe_carry_cold_2();
    }
    ++v3;
  }
  while (v3 != 5);
  return result;
}

int64x2_t *fe_neg(int64x2_t *result, int64x2_t *a2)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (a2->i64[i] >= 0x8CCCCCCCCCCCDuLL) {
      fe_neg_cold_1();
    }
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0xFFFFFFFFFFFFELL - a2[2].i64[0];
  int64x2_t v5 = vsubq_s64(vdupq_n_s64(0xFFFFFFFFFFFFEuLL), a2[1]);
  *uint64_t result = vsubq_s64((int64x2_t)xmmword_1BA192B30, *a2);
  result[1] = v5;
  result[2].i64[0] = v4;
  do
  {
    if (result->i64[v3] >= 0x1A666666666665uLL) {
      fe_neg_cold_2();
    }
    ++v3;
  }
  while (v3 != 5);
  return result;
}

uint64_t cmov(uint64_t result, uint64_t a2, unsigned int a3)
{
  for (uint64_t i = 0; i != 40; i += 8)
    *(void *)(result + i) = *(void *)(a2 + i) & -(uint64_t)a3 | *(void *)(result + i) & (a3 - 1);
  for (uint64_t j = 0; j != 40; j += 8)
    *(void *)(result + 40 + j) = *(void *)(a2 + 40 + j) & -(uint64_t)a3 | *(void *)(result + 40 + j) & (a3 - 1);
  for (uint64_t k = 0; k != 40; k += 8)
    *(void *)(result + 80 + k) = *(void *)(a2 + 80 + k) & -(uint64_t)a3 | *(void *)(result + 80 + k) & (a3 - 1);
  return result;
}

int64x2_t *ge_p2_dbl(uint64_t a1, uint64_t a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  v4.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v4.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v4;
  v13[1] = v4;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v4;
  v11[1] = v4;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v4;
  v9[1] = v4;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v4;
  v7[1] = v4;
  fe_sq_tt((uint64_t)v13, (unint64_t *)a2);
  fe_sq_tt((uint64_t)v11, (unint64_t *)(a2 + 40));
  fe_sq_tt((uint64_t)v9, (unint64_t *)(a2 + 80));
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  v5.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v5.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v5;
  v15[1] = v5;
  fe_add(v15, v9, v9);
  fe_carry((unint64_t *)v9, v15);
  fe_add((int64x2_t *)(a1 + 40), (int64x2_t *)a2, (int64x2_t *)(a2 + 40));
  fe_sq_tl((uint64_t)v7, (unint64_t *)(a1 + 40));
  fe_add((int64x2_t *)(a1 + 40), v11, v13);
  fe_sub((int64x2_t *)(a1 + 80), v11, v13);
  fe_carry((unint64_t *)v11, (void *)(a1 + 40));
  fe_sub((int64x2_t *)a1, v7, v11);
  fe_carry((unint64_t *)v11, (void *)(a1 + 80));
  return fe_sub((int64x2_t *)(a1 + 120), v9, v11);
}

uint64_t x25519_ge_p1p1_to_p2(uint64_t a1, unint64_t *a2)
{
  int64x2_t v4 = a2 + 15;
  fe_mul_impl(a1, a2, a2 + 15);
  int64x2_t v5 = a2 + 5;
  unint64_t v6 = a2 + 10;
  fe_mul_impl(a1 + 40, v5, v6);

  return fe_mul_impl(a1 + 80, v6, v4);
}

uint64_t fe_loose_invert(uint64_t a1, unint64_t *a2)
{
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v4;
  v20[1] = v4;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v4;
  v18[1] = v4;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v4;
  v16[1] = v4;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v4;
  v14[1] = v4;
  fe_sq_tl((uint64_t)v20, a2);
  fe_sq_tt((uint64_t)v18, (unint64_t *)v20);
  fe_sq_tt((uint64_t)v18, (unint64_t *)v18);
  fe_mul_impl((uint64_t)v18, a2, (unint64_t *)v18);
  fe_mul_impl((uint64_t)v20, (unint64_t *)v20, (unint64_t *)v18);
  fe_sq_tt((uint64_t)v16, (unint64_t *)v20);
  fe_mul_impl((uint64_t)v18, (unint64_t *)v18, (unint64_t *)v16);
  fe_sq_tt((uint64_t)v16, (unint64_t *)v18);
  int v5 = 4;
  do
  {
    fe_sq_tt((uint64_t)v16, (unint64_t *)v16);
    --v5;
  }
  while (v5);
  fe_mul_impl((uint64_t)v18, (unint64_t *)v16, (unint64_t *)v18);
  fe_sq_tt((uint64_t)v16, (unint64_t *)v18);
  int v6 = 9;
  do
  {
    fe_sq_tt((uint64_t)v16, (unint64_t *)v16);
    --v6;
  }
  while (v6);
  fe_mul_impl((uint64_t)v16, (unint64_t *)v16, (unint64_t *)v18);
  fe_sq_tt((uint64_t)v14, (unint64_t *)v16);
  int v7 = 19;
  do
  {
    fe_sq_tt((uint64_t)v14, (unint64_t *)v14);
    --v7;
  }
  while (v7);
  fe_mul_impl((uint64_t)v16, (unint64_t *)v14, (unint64_t *)v16);
  fe_sq_tt((uint64_t)v16, (unint64_t *)v16);
  int v8 = 9;
  do
  {
    fe_sq_tt((uint64_t)v16, (unint64_t *)v16);
    --v8;
  }
  while (v8);
  fe_mul_impl((uint64_t)v18, (unint64_t *)v16, (unint64_t *)v18);
  fe_sq_tt((uint64_t)v16, (unint64_t *)v18);
  int v9 = 49;
  do
  {
    fe_sq_tt((uint64_t)v16, (unint64_t *)v16);
    --v9;
  }
  while (v9);
  fe_mul_impl((uint64_t)v16, (unint64_t *)v16, (unint64_t *)v18);
  fe_sq_tt((uint64_t)v14, (unint64_t *)v16);
  int v10 = 99;
  do
  {
    fe_sq_tt((uint64_t)v14, (unint64_t *)v14);
    --v10;
  }
  while (v10);
  fe_mul_impl((uint64_t)v16, (unint64_t *)v14, (unint64_t *)v16);
  fe_sq_tt((uint64_t)v16, (unint64_t *)v16);
  int v11 = 49;
  do
  {
    fe_sq_tt((uint64_t)v16, (unint64_t *)v16);
    --v11;
  }
  while (v11);
  fe_mul_impl((uint64_t)v18, (unint64_t *)v16, (unint64_t *)v18);
  fe_sq_tt((uint64_t)v18, (unint64_t *)v18);
  int v12 = 4;
  do
  {
    fe_sq_tt((uint64_t)v18, (unint64_t *)v18);
    --v12;
  }
  while (v12);
  return fe_mul_impl(a1, (unint64_t *)v18, (unint64_t *)v20);
}

uint64_t fe_sq_tt(uint64_t result, unint64_t *a2)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (a2[i] >= 0x1A666666666665) {
      fe_sq_tt_cold_1();
    }
  }
  uint64_t v3 = 0;
  unint64_t v5 = a2[3];
  unint64_t v4 = a2[4];
  unint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  uint64_t v8 = 2 * v7;
  unint64_t v9 = *a2;
  unint64_t v10 = (v5 * (unsigned __int128)(38 * v4)) >> 64;
  uint64_t v11 = v5 * 38 * v4;
  unint64_t v12 = (v7 * (unsigned __int128)(38 * v4)) >> 64;
  uint64_t v13 = v7 * 38 * v4;
  signed long long v14 = v6 * (unsigned __int128)(38 * v4) + v7 * (unsigned __int128)(38 * v5) + v9 * (unsigned __int128)v9;
  uint64_t v15 = (v6 * (unsigned __int128)(2 * v5) + v7 * (unsigned __int128)v7 + v9 * (unsigned __int128)(2 * v4)) >> 64;
  uint64_t v16 = v6 * 2 * v5 + v7 * v7 + v9 * 2 * v4;
  unsigned long long v19 = v6 * (unsigned __int128)(2 * v7) + 19 * v4 * (unsigned __int128)v4 + v9 * (unsigned __int128)(2 * v5);
  uint64_t v18 = v19 >> 64;
  uint64_t v17 = v19;
  uint64_t v21 = v6 * v6 + v11 + v9 * v8;
  uint64_t v20 = (v6 * (unsigned __int128)v6 + __PAIR128__(v10, v11) + v9 * (unsigned __int128)(unint64_t)v8) >> 64;
  unsigned long long v23 = __PAIR128__(v12, v13) + 19 * v5 * (unsigned __int128)v5 + v9 * (unsigned __int128)(2 * v6);
  uint64_t v22 = *((void *)&v23 + 1);
  uint64_t v24 = v14 >> 51;
  if (__CFADD__((void)v23, v24)) {
    uint64_t v22 = *((void *)&v23 + 1) + 1;
  }
  *((void *)&v26 + 1) = v22;
  *(void *)&long long v26 = v23 + v24;
  uint64_t v25 = v26 >> 51;
  BOOL v27 = __CFADD__(v21, v25);
  uint64_t v28 = v21 + v25;
  if (v27) {
    ++v20;
  }
  *((void *)&v30 + 1) = v20;
  *(void *)&long long v30 = v28;
  uint64_t v29 = v30 >> 51;
  BOOL v27 = __CFADD__(v17, v29);
  uint64_t v31 = v17 + v29;
  if (v27) {
    uint64_t v32 = v18 + 1;
  }
  else {
    uint64_t v32 = v18;
  }
  *((void *)&v34 + 1) = v32;
  *(void *)&long long v34 = v31;
  uint64_t v33 = v34 >> 51;
  BOOL v27 = __CFADD__(v16, v33);
  uint64_t v35 = v16 + v33;
  if (v27) {
    ++v15;
  }
  *((void *)&v36 + 1) = v15;
  *(void *)&long long v36 = v35;
  unint64_t v37 = (v14 & 0x7FFFFFFFFFFFFLL) + 19 * (v36 >> 51);
  v38.i64[0] = v31;
  v38.i64[1] = v35;
  unint64_t v39 = ((v23 + v24) & 0x7FFFFFFFFFFFFLL) + (v37 >> 51);
  *(void *)uint64_t result = v37 & 0x7FFFFFFFFFFFFLL;
  *(void *)(result + 8) = v39 & 0x7FFFFFFFFFFFFLL;
  *(void *)(result + 16) = (v28 & 0x7FFFFFFFFFFFFLL) + (v39 >> 51);
  *(int8x16_t *)(result + 24) = vandq_s8(v38, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL));
  do
  {
    if (*(void *)(result + v3) >= 0x8CCCCCCCCCCCDuLL) {
      fe_sq_tt_cold_2();
    }
    v3 += 8;
  }
  while (v3 != 40);
  return result;
}

__n128 ge_p3_to_p2(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(long long *)((char *)a2 + 40);
  long long v5 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  __n128 result = (__n128)a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v7;
  return result;
}

double ge_p3_0(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  return result;
}

uint64_t __boringssl_helper_xpc_array_union_block_invoke(uint64_t a1, int a2, xpc_object_t value)
{
  return 1;
}

uint64_t bssl::ext_ec_point_add_extension(uint64_t *a1)
{
  uint64_t result = CBB_add_u16((uint64_t)a1, 0xBu);
  if (result)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v5[1] = v3;
    _OWORD v5[2] = v3;
    v4[2] = v3;
    v5[0] = v3;
    v4[0] = v3;
    v4[1] = v3;
    uint64_t result = CBB_add_u16_length_prefixed(a1, (uint64_t)v5);
    if (result)
    {
      uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v5, (uint64_t)v4);
      if (result)
      {
        uint64_t result = CBB_add_u8((uint64_t)v4, 0);
        if (result) {
          return CBB_flush(a1) != 0;
        }
      }
    }
  }
  return result;
}

BOOL bssl::tls13_get_cert_verify_signature_input(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4, size_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[1] = v10;
  v17[2] = v10;
  v17[0] = v10;
  CBB_zero(v17);
  if (!CBB_init((uint64_t)v17, 0xE2uLL)) {
    goto LABEL_15;
  }
  uint64_t v11 = 64;
  do
  {
    if (!CBB_add_u8((uint64_t)v17, 0x20u)) {
      goto LABEL_15;
    }
    --v11;
  }
  while (v11);
  if (a3 < 4 && CBB_add_bytes((uint64_t)v17, off_1E61F3068[a3], *(void *)&asc_1BA190170[8 * a3]))
  {
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __dst[2] = v12;
    __dst[3] = v12;
    __dst[0] = v12;
    __dst[1] = v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    if (a4)
    {
      if (a5 - 65 < 0xFFFFFFFFFFFFFFC0)
      {
        int v13 = 105;
LABEL_18:
        ERR_put_error(16, 0, 65, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", v13);
        BOOL v14 = 0;
        goto LABEL_16;
      }
      memcpy(__dst, a4, a5);
      unint64_t v16 = a5;
    }
    else
    {
      if (!bssl::SSLTranscript::GetHash((bssl::SSLTranscript *)(a1 + 424), (unsigned __int8 *)__dst, &v16))
      {
        int v13 = 112;
        goto LABEL_18;
      }
      a5 = v16;
    }
    if (!CBB_add_bytes((uint64_t)v17, __dst, a5)) {
      goto LABEL_15;
    }
    BOOL v14 = bssl::CBBFinishArray((uint64_t)v17, a2);
  }
  else
  {
LABEL_15:
    BOOL v14 = 0;
  }
LABEL_16:
  CBB_cleanup((uint64_t)v17);
  return v14;
}

void sub_1BA0E2A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CBB_cleanup((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CBB_add_u8(uint64_t a1, unsigned int a2)
{
  return cbb_add_u(a1, a2, 1uLL);
}

BOOL CRYPTO_tls13_hkdf_expand_label(int a1, int a2, EVP_MD *a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7, const void *a8, size_t a9)
{
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[1] = v15;
  v21[2] = v15;
  _OWORD v20[2] = v15;
  v21[0] = v15;
  v20[0] = v15;
  v20[1] = v15;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v19 = 0;
  CBB_zero(v21);
  if (CBB_init((uint64_t)v21, a7 + a9 + 10)
    && CBB_add_u16((uint64_t)v21, (unsigned __int16)a2)
    && CBB_add_u8_length_prefixed((uint64_t *)v21, (uint64_t)v20)
    && CBB_add_bytes((uint64_t)v20, "tls13 ", 6uLL)
    && CBB_add_bytes((uint64_t)v20, a6, a7)
    && CBB_add_u8_length_prefixed((uint64_t *)v21, (uint64_t)v20)
    && CBB_add_bytes((uint64_t)v20, a8, a9)
    && CBB_finish((uint64_t)v21, &v19, &v18))
  {
    BOOL v16 = HKDF_expand(a1, a2, a3);
    OPENSSL_free(v19);
  }
  else
  {
    CBB_cleanup((uint64_t)v21);
    return 0;
  }
  return v16;
}

uint64_t CBB_add_bytes(uint64_t a1, const void *a2, size_t a3)
{
  __dst = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CBB_add_space(a1, &__dst, a3);
  if (result)
  {
    if (a3) {
      memcpy(__dst, a2, a3);
    }
    return 1;
  }
  return result;
}

uint64_t cbb_add_length_prefixed(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = CBB_flush(a1);
  if (result)
  {
    return cbb_add_child((uint64_t)a1, a2, a3, 0);
  }
  return result;
}

uint64_t CBB_add_asn1(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (!CBB_flush(a1)) {
    return 0;
  }
  if ((a3 & 0x1FFFFFFF) < 0x1F)
  {
    if (!cbb_add_u((uint64_t)a1, HIBYTE(a3) & 0xE0 | a3, 1uLL)) {
      return 0;
    }
  }
  else if (!cbb_add_u((uint64_t)a1, HIBYTE(a3) | 0x1F, 1uLL) {
         || !add_base128_integer((uint64_t)a1, a3 & 0x1FFFFFFF))
  }
  {
    return 0;
  }

  return cbb_add_child((uint64_t)a1, a2, 1u, 1);
}

uint64_t cbb_add_child(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (*(void *)a1) {
    cbb_add_child_cold_2();
  }
  char v4 = a4;
  if (a3 != 1 && a4) {
    cbb_add_child_cold_1();
  }
  uint64_t v8 = (void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v8 = (void *)*v8;
  }
  uint64_t v9 = v8[1];
  uint64_t v11 = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = cbb_buffer_reserve((uint64_t)v8, &v11, a3);
  if (result)
  {
    v8[1] += a3;
    if (a3) {
      bzero(v11, a3);
    }
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t result = 1;
    *(unsigned char *)(a2 + 8) = 1;
    *(void *)(a2 + 16) = v8;
    *(void *)(a2 + 24) = v9;
    *(unsigned char *)(a2 + 32) = a3;
    *(unsigned char *)(a2 + 33) = *(unsigned char *)(a2 + 33) & 0xFE | v4 & 1;
    *(void *)a1 = a2;
  }
  return result;
}

uint64_t cbb_add_u(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CBB_add_space(a1, &v9, a3);
  if (result)
  {
    if (a3)
    {
      unint64_t v7 = a3 - 1;
      do
      {
        *(unsigned char *)(v9 + v7) = a2;
        a2 >>= 8;
        --v7;
      }
      while (v7 < a3);
    }
    if (a2)
    {
      uint64_t v8 = a1 + 16;
      if (*(unsigned char *)(a1 + 8)) {
        uint64_t v8 = *(void *)v8;
      }
      uint64_t result = 0;
      *(unsigned char *)(v8 + 24) |= 2u;
      *(void *)a1 = 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t CBB_add_space(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = CBB_flush((uint64_t *)a1);
  if (result)
  {
    int v7 = *(unsigned __int8 *)(a1 + 8);
    uint64_t v8 = (void *)(a1 + 16);
    if (v7) {
      uint64_t v8 = (void *)*v8;
    }
    uint64_t result = cbb_buffer_reserve((uint64_t)v8, a2, a3);
    if (result)
    {
      v8[1] += a3;
      return 1;
    }
  }
  return result;
}

uint64_t CBB_flush(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v3 = *(void *)v2;
    if (!*(void *)v2) {
      return 0;
    }
  }
  if ((*(unsigned char *)(v3 + 24) & 2) != 0) {
    return 0;
  }
  uint64_t v4 = *a1;
  if (!*a1) {
    return 1;
  }
  if (!*(unsigned char *)(v4 + 8)) {
    CBB_flush_cold_1();
  }
  if (*(void *)(v4 + 16) != v3) {
    CBB_flush_cold_3();
  }
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 32);
  if (!CBB_flush(*a1)) {
    goto LABEL_33;
  }
  unint64_t v7 = v5 + v6;
  unint64_t v8 = *(void *)(v4 + 24);
  if (v5 + v6 < v8) {
    goto LABEL_33;
  }
  unint64_t v9 = *(void *)(v3 + 8);
  size_t v10 = v9 - v7;
  if (v9 < v7) {
    goto LABEL_33;
  }
  LODWORD(v11) = *(unsigned __int8 *)(v4 + 32);
  if (*(unsigned char *)(v4 + 33))
  {
    if (v11 != 1) {
      CBB_flush_cold_2();
    }
    if (v10 > 0xFFFFFFFE)
    {
      int v12 = 221;
LABEL_32:
      ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bytestring/cbb.c", v12);
      goto LABEL_33;
    }
    if (v10 >> 24)
    {
      char v14 = -124;
      int v15 = 5;
    }
    else if (v10 >> 16)
    {
      char v14 = -125;
      int v15 = 4;
    }
    else if (v10 <= 0xFF)
    {
      if (v10 <= 0x7F)
      {
        LOBYTE(v15) = 1;
        char v14 = v10;
        size_t v10 = 0;
LABEL_26:
        uint64_t v11 = *(void *)v3;
        *(void *)(v4 + 24) = v8 + 1;
        *(unsigned char *)(v11 + v8) = v14;
        LOBYTE(v11) = v15 - 1;
        *(unsigned char *)(v4 + 32) = v15 - 1;
        goto LABEL_27;
      }
      char v14 = -127;
      int v15 = 2;
    }
    else
    {
      char v14 = -126;
      int v15 = 3;
    }
    uint64_t v16 = (v15 - 1);
    if (!cbb_buffer_reserve(v3, 0, v16))
    {
LABEL_33:
      if (*((unsigned char *)a1 + 8)) {
        uint64_t v2 = *(void *)v2;
      }
      uint64_t result = 0;
      *(unsigned char *)(v2 + 24) |= 2u;
      goto LABEL_36;
    }
    uint64_t v17 = *(void *)v3;
    *(void *)(v3 + 8) += v16;
    memmove((void *)(v17 + v7 + v16), (const void *)(v17 + v7), v10);
    unint64_t v8 = *(void *)(v4 + 24);
    goto LABEL_26;
  }
LABEL_27:
  if ((_BYTE)v11)
  {
    unint64_t v18 = v11 - 1;
    do
    {
      *(unsigned char *)(*(void *)v3 + *(void *)(v4 + 24) + v18) = v10;
      v10 >>= 8;
      --v18;
    }
    while (v18 < *(unsigned __int8 *)(v4 + 32));
  }
  if (v10)
  {
    int v12 = 260;
    goto LABEL_32;
  }
  *(void *)(v4 + 16) = 0;
  uint64_t result = 1;
LABEL_36:
  *a1 = 0;
  return result;
}

uint64_t cbb_buffer_reserve(uint64_t result, void *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 8);
    BOOL v5 = __CFADD__(v4, a3);
    unint64_t v6 = v4 + a3;
    if (v5)
    {
      int v7 = 81;
LABEL_5:
      ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bytestring/cbb.c", v7);
LABEL_6:
      uint64_t result = 0;
      *(unsigned char *)(v3 + 24) |= 2u;
      return result;
    }
    uint64_t v9 = *(void *)(result + 16);
    if (v6 > v9)
    {
      if ((*(unsigned char *)(result + 24) & 1) == 0)
      {
        int v7 = 87;
        goto LABEL_5;
      }
      if (2 * v9 < v6 || v9 < 0) {
        unint64_t v11 = v6;
      }
      else {
        unint64_t v11 = 2 * v9;
      }
      int v12 = OPENSSL_realloc(*(void **)result, v11);
      if (!v12) {
        goto LABEL_6;
      }
      *(void *)uint64_t v3 = v12;
      *(void *)(v3 + 16) = v11;
    }
    if (a2) {
      *a2 = *(void *)v3 + *(void *)(v3 + 8);
    }
    return 1;
  }
  return result;
}

uint64_t CBB_add_u8_length_prefixed(uint64_t *a1, uint64_t a2)
{
  return cbb_add_length_prefixed(a1, a2, 1u);
}

void *OPENSSL_realloc(void *a1, unint64_t a2)
{
  if (a1)
  {
    size_t v4 = *(a1 - 1);
    BOOL v5 = OPENSSL_malloc(a2);
    unint64_t v6 = v5;
    if (v5)
    {
      if (v4 >= a2) {
        size_t v7 = a2;
      }
      else {
        size_t v7 = v4;
      }
      memcpy(v5, a1, v7);
      OPENSSL_free(a1);
    }
    return v6;
  }
  else
  {
    return OPENSSL_malloc(a2);
  }
}

uint64_t CBB_finish(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    ERR_put_error(14, 0, 66, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bytestring/cbb.c", 127);
    return 0;
  }
  uint64_t result = CBB_flush((uint64_t *)a1);
  if (result)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t result = 0;
      if (!a2 || !a3) {
        return result;
      }
    }
    else if (!a2)
    {
      goto LABEL_10;
    }
    *a2 = *(void *)(a1 + 16);
LABEL_10:
    if (a3) {
      *a3 = *(void *)(a1 + 24);
    }
    *(void *)(a1 + 16) = 0;
    CBB_cleanup(a1);
    return 1;
  }
  return result;
}

void CBB_cleanup(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    CBB_cleanup_cold_1();
  }
  if (*(unsigned char *)(a1 + 40))
  {
    v1 = *(void **)(a1 + 16);
    OPENSSL_free(v1);
  }
}

uint64_t CBB_init(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t result = (uint64_t)OPENSSL_malloc(a2);
  if (!a2 || result)
  {
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 16) = result;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = a2;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a1 + 40) & 0xFC | 1;
    return 1;
  }
  return result;
}

void *OPENSSL_zalloc(unint64_t a1)
{
  uint64_t v2 = OPENSSL_malloc(a1);
  uint64_t v3 = v2;
  if (a1 && v2) {
    bzero(v2, a1);
  }
  return v3;
}

void *OPENSSL_malloc(unint64_t a1)
{
  if (a1 <= 0xFFFFFFFFFFFFFFF7 && (uint64_t v2 = malloc_type_malloc(a1 + 8, 0xD575B04uLL)) != 0)
  {
    void *v2 = a1;
    return v2 + 1;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/mem.c", 288);
    return 0;
  }
}

int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx)
{
  OPENSSL_free((void *)ctx->engine);
  md_data = (void (**)(void))ctx->md_data;
  if (ctx->flags)
  {
    if (!md_data) {
      EVP_MD_CTX_cleanup_cold_1();
    }
    goto LABEL_5;
  }
  if (md_data) {
LABEL_5:
  }
    (*md_data)();
  *(_OWORD *)&ctx->digest = 0u;
  *(_OWORD *)&ctx->flags = 0u;
  return 1;
}

void OPENSSL_free(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (char *)(a1 - 1);
    uint64_t v1 = *(a1 - 1);
    if (v1 != -8) {
      bzero(a1 - 1, v1 + 8);
    }
    free(v2);
  }
}

double CBB_zero(_OWORD *a1)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

BOOL HKDF_expand(int a1, int a2, EVP_MD *md)
{
  int v3 = EVP_MD_type(md);
  boringssl_crypto_hash_nid_to_cc_digest(v3);
  return cchkdf_expand() == 0;
}

int EVP_MD_type(const EVP_MD *md)
{
  return md->type;
}

uint64_t boringssl_crypto_hash_nid_to_cc_digest(int a1)
{
  switch(a1)
  {
    case 672:
      uint64_t result = MEMORY[0x1F40CB148]();
      break;
    case 673:
      uint64_t result = MEMORY[0x1F40CB150]();
      break;
    case 674:
      uint64_t result = MEMORY[0x1F40CB158]();
      break;
    case 675:
      uint64_t result = MEMORY[0x1F40CB140]();
      break;
    default:
      if (a1 == 64)
      {
        uint64_t result = MEMORY[0x1F40CB138]();
      }
      else if (a1 == 4)
      {
        uint64_t result = MEMORY[0x1F40CAF80]();
      }
      else
      {
        if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
          boringssl_crypto_hash_nid_to_cc_digest_cold_1();
        }
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t bssl::ssl_cipher_process_rulestr(unsigned __int8 *a1, uint64_t **a2, void *a3, int a4)
{
  unsigned __int8 v4 = *a1;
  if (!*a1) {
    return 1;
  }
  size_t v7 = (const char *)a1;
  int v8 = 0;
  char v9 = 0;
LABEL_3:
  ++v7;
  while (1)
  {
    if ((v9 & 1) == 0)
    {
      if (v4 <= 0x2Cu)
      {
        if (v4 == 33)
        {
          char v45 = 0;
          int v11 = 2;
        }
        else
        {
          if (v4 != 43) {
            goto LABEL_18;
          }
          char v45 = 0;
          int v11 = 4;
        }
        goto LABEL_25;
      }
      if (v4 == 45)
      {
        char v45 = 0;
        int v11 = 3;
LABEL_25:
        int v38 = v11;
        goto LABEL_26;
      }
      if (v4 == 64)
      {
        int v38 = 5;
        char v45 = 1;
LABEL_26:
        if ((v8 & 1) == 0)
        {
          int v43 = 1;
          goto LABEL_28;
        }
        int v35 = 168;
        int v34 = 1221;
LABEL_110:
        ERR_put_error(16, 0, v35, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cipher.cc", v34);
        return 0;
      }
      if (v4 != 91) {
        goto LABEL_18;
      }
      int v8 = 1;
LABEL_11:
      char v9 = 1;
LABEL_33:
      unsigned __int8 v4 = *v7;
      if (!*v7)
      {
        if (v9)
        {
          int v35 = 158;
          int v34 = 1335;
          goto LABEL_110;
        }
        return 1;
      }
      goto LABEL_3;
    }
    if (v4 != 93) {
      break;
    }
    if (*a3) {
      *(unsigned char *)(*a3 + 9) = 0;
    }
    char v9 = 0;
    int v10 = *(unsigned __int8 *)v7++;
    unsigned __int8 v4 = v10;
    if (!v10) {
      return 1;
    }
  }
  if (v4 == 124) {
    goto LABEL_11;
  }
  if (!OPENSSL_isalnum((char)v4))
  {
    int v35 = 224;
    int v34 = 1191;
    goto LABEL_110;
  }
LABEL_18:
  char v45 = 0;
  int v43 = 0;
  --v7;
  int v38 = 1;
LABEL_28:
  if (v4 == 58 || (a4 & 1) != 0)
  {
    if (v4 == 58) {
      goto LABEL_32;
    }
  }
  else if (v4 <= 0x3Bu && ((1 << v4) & 0x800100100000000) != 0)
  {
LABEL_32:
    ++v7;
    goto LABEL_33;
  }
  int v37 = v8;
  long long v42 = a3;
  char v40 = 0;
  int v41 = a4;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v49 = 0xAAAAAAAAAAAA0000;
  v48.i64[0] = -1;
  v48.i64[1] = -1;
  v12.i64[0] = -1;
  v12.i64[1] = -1;
  int8x16_t v39 = v12;
  char v13 = 1;
  char v14 = v7;
  BYTE2(v49) = v43;
  while (2)
  {
    for (size_t i = 0; ; ++i)
    {
      unsigned __int8 v16 = v14[i];
      if (!OPENSSL_isalnum((char)v16))
      {
        int v17 = v16;
        if (v16 - 45 > 0x32 || ((1 << (v16 - 45)) & 0x4000000000003) == 0) {
          break;
        }
      }
    }
    if (!i)
    {
      int v34 = 1250;
LABEL_109:
      int v35 = 158;
      goto LABEL_110;
    }
    if ((v45 & 1) == 0)
    {
      if (v16 != 43 && (v13 & 1) != 0)
      {
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = bssl::kCiphers[v19];
          if (!strncmp(v20, v14, i) && !v20[i]) {
            break;
          }
          uint64_t v21 = bssl::kCiphers[v19 + 1];
          if (!strncmp(v21, v14, i) && !v21[i]) {
            break;
          }
          v19 += 5;
          if (v19 == 190) {
            goto LABEL_55;
          }
        }
        LODWORD(v46) = bssl::kCiphers[v19 + 2];
      }
LABEL_55:
      if (v46)
      {
LABEL_62:
        int v24 = HIDWORD(v46);
      }
      else
      {
        uint64_t v22 = 0;
        while (1)
        {
          unsigned long long v23 = (&bssl::kCipherAliases)[v22];
          if (!strncmp(v23, v14, i) && !v23[i]) {
            break;
          }
          v22 += 4;
          if (v22 == 116)
          {
            if ((v41 & 1) == 0)
            {
LABEL_61:
              char v40 = 1;
              goto LABEL_62;
            }
            int v34 = 1299;
            goto LABEL_109;
          }
        }
        int8x16_t v39 = vandq_s8(v39, *(int8x16_t *)&(&bssl::kCipherAliases)[v22 + 1]);
        int8x16_t v48 = v39;
        v43 |= *((unsigned __int8 *)&bssl::kCipherAliases + 8 * v22 + 26);
        BYTE2(v49) = v43;
        int v24 = LOWORD((&bssl::kCipherAliases)[v22 + 3]);
        if (HIDWORD(v46))
        {
          if (HIDWORD(v46) != v24) {
            goto LABEL_61;
          }
          int v24 = HIDWORD(v46);
        }
        LOWORD(v49) = v24;
      }
      if (v17 != 43)
      {
        size_t v7 = &v14[i];
        int v8 = v37;
        if ((v40 & 1) == 0)
        {
          a3 = v42;
          bssl::ssl_cipher_apply_rule(v46, (uint64_t)&v47, v38, -1, v9 & 1, a2, v42);
          a4 = v41;
          goto LABEL_33;
        }
        goto LABEL_103;
      }
      HIDWORD(v46) = v24;
      char v13 = 0;
      v14 += i + 1;
      continue;
    }
    break;
  }
  if (i != 8 || strncmp(v7, "STRENGTH", 8uLL))
  {
    int v34 = 1316;
    goto LABEL_109;
  }
  uint64_t v25 = *a2;
  if (*a2)
  {
    LODWORD(v26) = 0;
    do
    {
      if (*((unsigned char *)v25 + 8) && SSL_CIPHER_get_bits((const SSL_CIPHER *)*v25, 0) > (int)v26) {
        LODWORD(v26) = SSL_CIPHER_get_bits((const SSL_CIPHER *)*v25, 0);
      }
      uint64_t v25 = (uint64_t *)v25[2];
    }
    while (v25);
  }
  else
  {
    LODWORD(v26) = 0;
  }
  v50[0] = 0;
  v50[1] = 0;
  int v27 = bssl::Array<int>::Init((uint64_t)v50, (v26 + 1));
  uint64_t v28 = v50[0];
  if (v27)
  {
    bzero(v50[0], 4 * (v26 + 1));
    for (uint64_t j = *a2; j; uint64_t j = (uint64_t *)j[2])
    {
      if (*((unsigned char *)j + 8))
      {
        unsigned int bits = SSL_CIPHER_get_bits((const SSL_CIPHER *)*j, 0);
        ++*((_DWORD *)v50[0] + bits);
      }
    }
    uint64_t v26 = v26;
    do
    {
      if (*((int *)v50[0] + v26) >= 1) {
        bssl::ssl_cipher_apply_rule(0, 0, 4, v26, 0, a2, v42);
      }
    }
    while (v26-- > 0);
    uint64_t v28 = v50[0];
  }
  OPENSSL_free(v28);
  int v8 = v37;
  if (v27)
  {
    size_t v7 = v14 + 8;
    unsigned int v32 = *((unsigned __int8 *)v14 + 8);
    if (v14[8])
    {
      a4 = v41;
      a3 = v42;
      while (1)
      {
        if (v32 == 58 || (v41 & 1) != 0)
        {
          if (v32 == 58) {
            goto LABEL_33;
          }
        }
        else if (v32 <= 0x3B && ((1 << v32) & 0x800100100000000) != 0)
        {
          goto LABEL_33;
        }
        unsigned int v33 = *(unsigned __int8 *)++v7;
        unsigned int v32 = v33;
        if (!v33) {
          goto LABEL_33;
        }
      }
    }
LABEL_103:
    a4 = v41;
    a3 = v42;
    goto LABEL_33;
  }
  return 0;
}

void sub_1BA0E3D24(_Unwind_Exception *a1)
{
  bssl::Array<unsigned short>::~Array(v1 - 96);
  _Unwind_Resume(a1);
}

BOOL OPENSSL_isalnum(int a1)
{
  return (a1 - 48) < 0xA || (a1 & 0xFFFFFFDF) - 65 < 0x1A;
}

uint64_t bssl::ssl_cipher_apply_rule(uint64_t result, uint64_t a2, int a3, int a4, char a5, uint64_t **a6, void *a7)
{
  int v10 = result;
  if (!result
    && a4 == -1
    && !*(_WORD *)(a2 + 24)
    && (!*(_DWORD *)(a2 + 8) || !*(_DWORD *)(a2 + 12) || !*(_DWORD *)(a2 + 16) || !*(_DWORD *)(a2 + 20)))
  {
    return result;
  }
  int v11 = *a6;
  int8x16_t v12 = (uint64_t *)*a7;
  if (a3 == 3) {
    char v13 = (uint64_t *)*a7;
  }
  else {
    char v13 = *a6;
  }
  if (a3 == 3) {
    char v14 = *a6;
  }
  else {
    char v14 = (uint64_t *)*a7;
  }
  if (v14) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    goto LABEL_97;
  }
  unsigned int v33 = a6;
  int v34 = a7;
  while (2)
  {
    int v35 = v11;
    unsigned __int8 v16 = v13;
    while (1)
    {
      if (a3 == 3) {
        uint64_t v17 = 3;
      }
      else {
        uint64_t v17 = 2;
      }
      char v13 = (uint64_t *)v16[v17];
      uint64_t result = *v16;
      if (v10)
      {
        if (*(_DWORD *)(result + 16) == v10) {
          goto LABEL_48;
        }
        goto LABEL_24;
      }
      if ((a4 & 0x80000000) == 0)
      {
        uint64_t result = SSL_CIPHER_get_bits((const SSL_CIPHER *)result, 0);
        if (result == a4) {
          goto LABEL_48;
        }
        goto LABEL_24;
      }
      int v18 = *(_DWORD *)(result + 20);
      if ((v18 & *(_DWORD *)(a2 + 8)) == 0) {
        goto LABEL_24;
      }
      int v19 = *(_DWORD *)(result + 24);
      if ((v19 & *(_DWORD *)(a2 + 12)) == 0) {
        goto LABEL_24;
      }
      int v20 = *(_DWORD *)(result + 28);
      if ((v20 & *(_DWORD *)(a2 + 16)) == 0 || (*(_DWORD *)(result + 32) & *(_DWORD *)(a2 + 20)) == 0) {
        goto LABEL_24;
      }
      if (*(_WORD *)(a2 + 24)) {
        break;
      }
      if (v20 != 32) {
        goto LABEL_45;
      }
LABEL_24:
      if (v16 != v14)
      {
        unsigned __int8 v16 = v13;
        if (v13) {
          continue;
        }
      }
      a6 = v33;
      a7 = v34;
      int v11 = v35;
      goto LABEL_97;
    }
    if (v18 == 16 || v19 == 16)
    {
      int v22 = 772;
    }
    else if (*(_DWORD *)(result + 36) == 1)
    {
      int v22 = 768;
    }
    else
    {
      int v22 = 771;
    }
    if (v20 == 32 || v22 != *(unsigned __int16 *)(a2 + 24)) {
      goto LABEL_24;
    }
LABEL_45:
    if (!*(unsigned char *)(a2 + 26) && (v20 == 1 || *(_DWORD *)(result + 16) == 50380839)) {
      goto LABEL_24;
    }
LABEL_48:
    unsigned long long v23 = v16 + 2;
    if (a3 == 4)
    {
      if (*((unsigned char *)v16 + 8))
      {
        int v11 = v35;
        if (v12 != v16)
        {
          uint64_t v26 = v16[2];
          uint64_t v27 = v16[3];
          if (v35 == v16) {
            int v11 = (uint64_t *)v16[2];
          }
          if (v27)
          {
            *(void *)(v27 + 16) = v26;
            uint64_t v26 = *v23;
          }
          if (v26) {
            *(void *)(v26 + 24) = v27;
          }
          v12[2] = (uint64_t)v16;
          _OWORD v16[2] = 0;
          v16[3] = (uint64_t)v12;
          int8x16_t v12 = v16;
        }
        *((unsigned char *)v16 + 9) = 0;
        goto LABEL_82;
      }
    }
    else
    {
      if (a3 != 1)
      {
        if (a3 == 3)
        {
          int v11 = v35;
          if (*((unsigned char *)v16 + 8))
          {
            if (v35 != v16)
            {
              uint64_t v29 = v16[2];
              uint64_t v28 = v16[3];
              if (v12 == v16) {
                int8x16_t v12 = (uint64_t *)v16[3];
              }
              if (v29)
              {
                *(void *)(v29 + 24) = v28;
                uint64_t v28 = v16[3];
              }
              if (v28) {
                *(void *)(v28 + 16) = v29;
              }
              v35[3] = (uint64_t)v16;
              _OWORD v16[2] = (uint64_t)v35;
              v16[3] = 0;
              int v11 = v16;
            }
            *((_WORD *)v16 + 4) = 0;
          }
        }
        else
        {
          int v11 = v35;
          if (a3 == 2)
          {
            long long v30 = (uint64_t *)v16[3];
            if (v35 == v16) {
              int v11 = (uint64_t *)v16[2];
            }
            else {
              v30[2] = v16[2];
            }
            if (v12 == v16) {
              int8x16_t v12 = v30;
            }
            *((unsigned char *)v16 + 8) = 0;
            uint64_t v31 = v16[2];
            if (v31)
            {
              *(void *)(v31 + 24) = v30;
              long long v30 = (uint64_t *)v16[3];
            }
            if (v30) {
              v30[2] = v31;
            }
            *unsigned long long v23 = 0;
            v16[3] = 0;
          }
        }
        goto LABEL_82;
      }
      if (!*((unsigned char *)v16 + 8))
      {
        int v11 = v35;
        if (v12 != v16)
        {
          uint64_t v24 = v16[2];
          uint64_t v25 = v16[3];
          if (v35 == v16) {
            int v11 = (uint64_t *)v16[2];
          }
          if (v25)
          {
            *(void *)(v25 + 16) = v24;
            uint64_t v24 = *v23;
          }
          if (v24) {
            *(void *)(v24 + 24) = v25;
          }
          v12[2] = (uint64_t)v16;
          _OWORD v16[2] = 0;
          v16[3] = (uint64_t)v12;
          int8x16_t v12 = v16;
        }
        *((unsigned char *)v16 + 8) = 1;
        *((unsigned char *)v16 + 9) = a5;
        goto LABEL_82;
      }
    }
    int v11 = v35;
LABEL_82:
    if (v16 == v14)
    {
      a6 = v33;
      a7 = v34;
    }
    else
    {
      a6 = v33;
      a7 = v34;
      if (v13) {
        continue;
      }
    }
    break;
  }
LABEL_97:
  *a6 = v11;
  *a7 = v12;
  return result;
}

void EVP_PKEY_CTX_free(EVP_PKEY **a1)
{
  if (a1)
  {
    if (*a1)
    {
      uint64_t v2 = *(void (**)(EVP_PKEY **))&(*a1)->save_parameters;
      if (v2) {
        v2(a1);
      }
    }
    EVP_PKEY_free(a1[2]);
    EVP_PKEY_free(a1[3]);
    OPENSSL_free(a1);
  }
}

void EVP_PKEY_free(EVP_PKEY *pkey)
{
  if (pkey && CRYPTO_refcount_dec_and_test_zero((unsigned int *)pkey))
  {
    ptr = pkey->pkey.ptr;
    if (ptr)
    {
      int v3 = (void (*)(EVP_PKEY *))*((void *)ptr + 20);
      if (v3)
      {
        v3(pkey);
        *(void *)&pkey->references = 0;
        pkey->save_type = 0;
      }
    }
    OPENSSL_free(pkey);
  }
}

void pkey_rsa_cleanup(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    BN_free(*(BIGNUM **)(v1 + 8));
    OPENSSL_free(*(void **)(v1 + 48));
    OPENSSL_free(*(void **)(v1 + 56));
    OPENSSL_free((void *)v1);
  }
}

uint64_t bssl::ssl_add_client_hello(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3 = *(void *)this;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = v4;
  _OWORD v18[2] = v4;
  v18[0] = v4;
  CBB_zero(v18);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[1] = v5;
  v17[2] = v5;
  v17[0] = v5;
  uint64_t v6 = *((void *)this + 193);
  char v16 = -86;
  char v14 = 0;
  size_t v15 = 0;
  if (!(*(unsigned int (**)(uint64_t, _OWORD *, _OWORD *, uint64_t))(*(void *)v3 + 88))(v3, v18, v17, 1)) {
    goto LABEL_9;
  }
  size_t v7 = (const ssl_session_st *)(2 * (v6 != 0));
  if (!bssl::ssl_write_client_hello_without_extensions((uint64_t)this, (uint64_t *)v17, (int)v7, 0)) {
    goto LABEL_9;
  }
  unint64_t v8 = CBB_len((uint64_t)v17);
  if (!bssl::ssl_add_clienthello_tlsext((uint64_t)this, (uint64_t *)v17, 0, &v16, v7, v8)
    || ((*(uint64_t (**)(uint64_t, _OWORD *, void **))(*(void *)v3 + 96))(v3, v18, &v14) & 1) == 0)
  {
    goto LABEL_9;
  }
  if (!v16) {
    goto LABEL_8;
  }
  if (v6) {
    __assert_rtn("ssl_add_client_hello", "handshake_client.cc", 384, "type != ssl_client_hello_outer");
  }
  if (bssl::tls13_write_psk_binder((uint64_t *)this, (ssl_session_st *)((char *)this + 424), (char *)v14, v15, 0))
  {
LABEL_8:
    char v9 = *(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 104);
    OPENSSL_free(0);
    int8x16_t v12 = v14;
    size_t v13 = v15;
    char v14 = 0;
    size_t v15 = 0;
    uint64_t v10 = v9(v3, &v12);
    OPENSSL_free(v12);
    int8x16_t v12 = 0;
    size_t v13 = 0;
  }
  else
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  OPENSSL_free(v14);
  CBB_cleanup((uint64_t)v18);
  return v10;
}

void sub_1BA0E4358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  bssl::Array<unsigned short>::~Array((uint64_t)va1);
  CBB_cleanup(v2 - 80);
  _Unwind_Resume(a1);
}

BOOL bssl::tls_finish_message(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return bssl::CBBFinishArray(a2, a3);
}

uint64_t bssl::tls_init_message(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  if (CBB_init((uint64_t)a2, 0x40uLL)
    && CBB_add_u8((uint64_t)a2, a4)
    && CBB_add_u24_length_prefixed(a2, a3))
  {
    return 1;
  }
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", 176);
  CBB_cleanup((uint64_t)a2);
  return 0;
}

uint64_t CBB_add_u24_length_prefixed(uint64_t *a1, uint64_t a2)
{
  return cbb_add_length_prefixed(a1, a2, 3u);
}

BOOL bssl::ssl_add_clienthello_tlsext(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned char *a4, const ssl_session_st *a5, uint64_t a6)
{
  *a4 = 0;
  if (a5 != 1)
  {
    if (a3) {
      bssl::ssl_add_clienthello_tlsext();
    }
    uint64_t v38 = *(void *)a1;
    *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v84 = v39;
    long long v85 = v39;
    long long v83 = v39;
    if (!CBB_add_u16_length_prefixed(a2, (uint64_t)&v83))
    {
      int v47 = 3895;
LABEL_52:
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v47);
      return 0;
    }
    *(_DWORD *)(a1 + 376) = 0;
    if ((*(_WORD *)(*(void *)(v38 + 120) + 832) & 0x20) != 0)
    {
      unsigned int grease_value = bssl::ssl_get_grease_value(a1, 2u);
      if (!bssl::add_padding_extension((uint64_t *)&v83, grease_value, 0)) {
        return 0;
      }
    }
    long long v75 = a2;
    v77 = a4;
    for (uint64_t i = 0; i != 28; ++i)
    {
      uint64_t v42 = i;
      if (*(void *)(a1 + 720)) {
        uint64_t v42 = *(unsigned __int8 *)(*(void *)(a1 + 712) + i);
      }
      unint64_t v43 = CBB_len((uint64_t)&v83);
      if (!(*(unsigned int (**)(uint64_t, long long *, long long *, const ssl_session_st *))&bssl::kExtensions[20 * v42 + 4])(a1, &v83, &v83, a5))
      {
        ERR_put_error(16, 0, 147, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 3918);
        ERR_add_error_dataf("extension %u", v48, v49, v50, v51, v52, v53, v54, bssl::kExtensions[20 * v42]);
        return 0;
      }
      unint64_t v44 = CBB_len((uint64_t)&v83);
      if (v44 != v43) {
        *(_DWORD *)(a1 + 376) |= 1 << v42;
      }
    }
    BOOL v45 = v44 - v43 == 4;
    if ((*(_WORD *)(*(void *)(v38 + 120) + 832) & 0x20) != 0)
    {
      unsigned int v56 = bssl::ssl_get_grease_value(a1, 3u);
      BOOL v45 = 0;
      BOOL v35 = 0;
      uint64_t v46 = v75;
      if (!bssl::add_padding_extension((uint64_t *)&v83, v56, 1uLL)) {
        return v35;
      }
    }
    else
    {
      uint64_t v46 = v75;
    }
    uint64_t v57 = *(void *)a1;
    if (bssl::should_offer_psk((uint64_t *)a1, a5))
    {
      digest = bssl::ssl_session_get_digest(*(bssl **)(v57 + 104), v58);
      uint64_t v60 = EVP_MD_size(digest) + *(void *)(*(void *)(v57 + 104) + 240) + 15;
    }
    else
    {
      uint64_t v60 = 0;
    }
    if (SSL_is_dtls((unsigned __int8 **)v38)
      || *(void *)(v38 + 168)
      || (*(_WORD *)(*(void *)(v38 + 48) + 220) & 0x2000) != 0)
    {
LABEL_74:
      unint64_t v73 = CBB_len((uint64_t)&v83);
      if (bssl::ext_pre_shared_key_add_clienthello((uint64_t *)a1, (uint64_t *)&v83, v77, a5))
      {
        if (v60 != CBB_len((uint64_t)&v83) - v73) {
          bssl::ssl_add_clienthello_tlsext();
        }
        if (!CBB_len((uint64_t)&v83)) {
          CBB_discard_child(v46);
        }
        return CBB_flush(v46) != 0;
      }
      int v47 = 3992;
      goto LABEL_52;
    }
    unint64_t v61 = a6 + v60 + CBB_len((uint64_t)&v83);
    unint64_t v62 = v61 + 6;
    BOOL v63 = v60 == 0;
    unint64_t v64 = v61 + 11;
    size_t v65 = v45 & v63;
    if (!v45 || !v63) {
      unint64_t v64 = v62;
    }
    if ((v64 & 0xFFFFFFFFFFFFFF00) == 0x100)
    {
      if (v62 > 0x1FB)
      {
        size_t v65 = 1;
        goto LABEL_73;
      }
      size_t v65 = 508 - v62;
    }
    if (!v65) {
      goto LABEL_74;
    }
LABEL_73:
    if (!bssl::add_padding_extension((uint64_t *)&v83, 0x15u, v65)) {
      return 0;
    }
    goto LABEL_74;
  }
  uint64_t v10 = *(void *)a1;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v84 = v11;
  long long v85 = v11;
  long long v83 = v11;
  CBB_zero(&v83);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v82[1] = v12;
  v82[2] = v12;
  v82[0] = v12;
  CBB_zero(v82);
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v81[1] = v13;
  v81[2] = v13;
  v80[2] = v13;
  v81[0] = v13;
  v80[0] = v13;
  v80[1] = v13;
  if (CBB_add_u16_length_prefixed(a2, (uint64_t)v81)
    && CBB_add_u16_length_prefixed(a3, (uint64_t)v80)
    && CBB_init((uint64_t)&v83, 0x40uLL)
    && CBB_init((uint64_t)v82, 0x40uLL))
  {
    *(_DWORD *)(a1 + 380) = 0;
    if ((*(_WORD *)(*(void *)(v10 + 120) + 832) & 0x20) == 0
      || (unsigned int v14 = bssl::ssl_get_grease_value(a1, 2u), bssl::add_padding_extension((uint64_t *)&v83, v14, 0))
      && CBB_add_u16((uint64_t)v82, v14))
    {
      uint64_t v74 = v10;
      int8x16_t v76 = a4;
      size_t v15 = a2;
      for (uint64_t j = 0; j != 28; ++j)
      {
        uint64_t v17 = j;
        if (*(void *)(a1 + 720)) {
          uint64_t v17 = *(unsigned __int8 *)(*(void *)(a1 + 712) + j);
        }
        unint64_t v18 = CBB_len((uint64_t)v81);
        unint64_t v19 = CBB_len((uint64_t)&v83);
        int v20 = &bssl::kExtensions[20 * v17];
        if (((*((uint64_t (**)(uint64_t, _OWORD *, long long *, uint64_t))v20 + 1))(a1, v81, &v83, 1) & 1) == 0)
        {
          ERR_put_error(16, 0, 147, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 3811);
          ERR_add_error_dataf("extension %u", v66, v67, v68, v69, v70, v71, v72, *v20);
          goto LABEL_71;
        }
        unint64_t v21 = CBB_len((uint64_t)v81);
        unint64_t v22 = CBB_len((uint64_t)&v83);
        if (v21 != v18 && v22 != v19) {
          __assert_rtn("ssl_add_clienthello_tlsext_inner", "extensions.cc", 3820, "bytes_written == 0 || bytes_written_compressed == 0");
        }
        if (v21 != v18 || v22 != v19) {
          *(_DWORD *)(a1 + 380) |= 1 << v17;
        }
        if (v22 != v19 && !CBB_add_u16((uint64_t)v82, (unsigned __int16)*v20)) {
          goto LABEL_71;
        }
      }
      unsigned long long v23 = v15;
      if ((*(_WORD *)(*(void *)(v74 + 120) + 832) & 0x20) == 0
        || (unsigned int v24 = bssl::ssl_get_grease_value(a1, 3u), bssl::add_padding_extension((uint64_t *)&v83, v24, 1uLL))
        && CBB_add_u16((uint64_t)v82, v24))
      {
        uint64_t v25 = CBB_data((uint64_t)v81);
        size_t v26 = CBB_len((uint64_t)v81);
        if (CBB_add_bytes((uint64_t)v80, v25, v26))
        {
          if (!CBB_len((uint64_t)&v83)) {
            goto LABEL_85;
          }
          *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v79[1] = v27;
          v79[2] = v27;
          v78[2] = v27;
          v79[0] = v27;
          v78[0] = v27;
          v78[1] = v27;
          uint64_t v28 = CBB_data((uint64_t)&v83);
          size_t v29 = CBB_len((uint64_t)&v83);
          if (CBB_add_bytes((uint64_t)v81, v28, v29))
          {
            if (CBB_add_u16((uint64_t)v80, 0xFD00u))
            {
              if (CBB_add_u16_length_prefixed((uint64_t *)v80, (uint64_t)v79))
              {
                if (CBB_add_u8_length_prefixed((uint64_t *)v79, (uint64_t)v78))
                {
                  long long v30 = CBB_data((uint64_t)v82);
                  size_t v31 = CBB_len((uint64_t)v82);
                  if (CBB_add_bytes((uint64_t)v78, v30, v31))
                  {
                    if (CBB_flush((uint64_t *)v80))
                    {
LABEL_85:
                      unint64_t v32 = CBB_len((uint64_t)v81);
                      if (bssl::ext_pre_shared_key_add_clienthello((uint64_t *)a1, (uint64_t *)v81, v76, (const ssl_session_st *)1))
                      {
                        unsigned int v33 = CBB_data((uint64_t)v81);
                        unint64_t v34 = CBB_len((uint64_t)v81);
                        if (CBB_add_bytes((uint64_t)v80, (char *)v33 + v32, v34 - v32))
                        {
                          if (CBB_flush(v23))
                          {
                            BOOL v35 = CBB_flush(a3) != 0;
                            goto LABEL_50;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_71:
    BOOL v35 = 0;
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 3787);
    BOOL v35 = 0;
  }
LABEL_50:
  CBB_cleanup((uint64_t)v82);
  CBB_cleanup((uint64_t)&v83);
  return v35;
}

void sub_1BA0E4B00(_Unwind_Exception *a1)
{
  CBB_cleanup(v1 - 192);
  CBB_cleanup(v1 - 144);
  _Unwind_Resume(a1);
}

unint64_t CBB_len(uint64_t a1)
{
  if (*(void *)a1) {
    CBB_len_cold_2();
  }
  if (!*(unsigned char *)(a1 + 8)) {
    return *(void *)(a1 + 24);
  }
  unint64_t v1 = *(void *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32);
  unint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  unint64_t result = v2 - v1;
  if (v2 < v1) {
    CBB_len_cold_1();
  }
  return result;
}

uint64_t bssl::ssl_get_grease_value(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned char *)(a1 + a2 + 1630) & 0xF0 | 0xA;
  uint64_t result = v3 | (v3 << 8);
  if (a2 == 3)
  {
    if (v3 == (*(unsigned char *)(a1 + 1632) & 0xF0 | 0xA)) {
      return result ^ 0x1010;
    }
    else {
      return result;
    }
  }
  return result;
}

BOOL bssl::add_padding_extension(uint64_t *a1, unsigned int a2, size_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = v5;
  int64x2_t v7[2] = v5;
  v7[0] = v5;
  if (CBB_add_u16((uint64_t)a1, a2)
    && CBB_add_u16_length_prefixed(a1, (uint64_t)v7)
    && CBB_add_zeros((uint64_t)v7, a3))
  {
    return CBB_flush(a1) != 0;
  }
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 3766);
  return 0;
}

uint64_t CBB_add_zeros(uint64_t a1, size_t a2)
{
  uint64_t v4 = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CBB_add_space(a1, &v4, a2);
  if (result)
  {
    if (a2) {
      bzero(v4, a2);
    }
    return 1;
  }
  return result;
}

uint64_t bssl::ext_quic_transport_params_add_clienthello_impl(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(*(void *)a1 + 168);
  if (!*(void *)(v3 + 232))
  {
    if (!v4) {
      return 1;
    }
LABEL_13:
    ERR_put_error(16, 0, 305, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2599);
    return 0;
  }
  if (!v4) {
    goto LABEL_13;
  }
  if (*(unsigned __int16 *)(a1 + 28) <= 0x303u) {
    bssl::ext_quic_transport_params_add_clienthello_impl();
  }
  unsigned int v6 = *(_WORD *)(v3 + 301) & 0x200;
  if (a3 != v6 >> 9) {
    return 1;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = v8;
  int64x2_t v11[2] = v8;
  v11[0] = v8;
  if (v6) {
    unsigned int v9 = 65445;
  }
  else {
    unsigned int v9 = 57;
  }
  uint64_t result = CBB_add_u16((uint64_t)a2, v9);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v11);
    if (result)
    {
      uint64_t result = CBB_add_bytes((uint64_t)v11, *(const void **)(*(void *)(a1 + 8) + 224), *(void *)(*(void *)(a1 + 8) + 232));
      if (result) {
        return CBB_flush(a2) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_alps_add_clienthello_impl(uint64_t a1, uint64_t *a2, int a3)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!*(void *)(v4 + 136)) {
    return 1;
  }
  if (!*(void *)(v4 + 144)) {
    return 1;
  }
  if ((*(_WORD *)(*(void *)(*(void *)a1 + 48) + 220) & 0x20) != 0) {
    return 1;
  }
  unsigned int v5 = *(_WORD *)(v4 + 301) & 0x2000;
  if (a3 != v5 >> 13) {
    return 1;
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = v7;
  _OWORD v16[2] = v7;
  v16[0] = v7;
  v15[1] = v7;
  int64x2_t v15[2] = v7;
  _OWORD v14[2] = v7;
  v15[0] = v7;
  if (v5) {
    unsigned int v8 = 17613;
  }
  else {
    unsigned int v8 = 17513;
  }
  v14[0] = v7;
  v14[1] = v7;
  uint64_t result = CBB_add_u16((uint64_t)a2, v8);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v16);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v16, (uint64_t)v15);
      if (result)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        uint64_t v11 = *(void *)(v10 + 144);
        if (v11)
        {
          uint64_t v12 = *(void *)(v10 + 152);
          uint64_t v13 = v12 + 32 * v11;
          while (1)
          {
            uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v15, (uint64_t)v14);
            if (!result) {
              break;
            }
            uint64_t result = CBB_add_bytes((uint64_t)v14, *(const void **)v12, *(void *)(v12 + 8));
            if (!result) {
              break;
            }
            v12 += 32;
            if (v12 == v13) {
              return CBB_flush(a2) != 0;
            }
          }
        }
        else
        {
          return CBB_flush(a2) != 0;
        }
      }
    }
  }
  return result;
}

bssl *bssl::should_offer_psk(uint64_t *a1, const ssl_session_st *a2)
{
  if (*((unsigned __int16 *)a1 + 15) < 0x304u) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t result = *(bssl **)(*a1 + 104);
  if (result)
  {
    int v5 = (int)a2;
    unsigned int v6 = bssl::ssl_session_protocol_version(result, a2);
    uint64_t result = 0;
    if (v5 != 2 && v6 >= 0x304) {
      return (bssl *)((*(_WORD *)(*(void *)(v4 + 48) + 220) & 0x2000) == 0
    }
                   || *(_DWORD *)(*(void *)(*(void *)(v4 + 104) + 200) + 36) == *(_DWORD *)(a1[194] + 36));
  }
  return result;
}

uint64_t bssl::ext_quic_transport_params_add_clienthello_legacy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return bssl::ext_quic_transport_params_add_clienthello_impl(a1, a3, 1);
}

uint64_t bssl::ext_server_certificate_type_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u || !*(void *)(*(void *)(a1 + 8) + 176)) {
    return 1;
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v5;
  v8[2] = v5;
  int64x2_t v7[2] = v5;
  v8[0] = v5;
  v7[0] = v5;
  v7[1] = v5;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0x14u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v8);
    if (result)
    {
      uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v8, (uint64_t)v7);
      if (result)
      {
        uint64_t result = CBB_add_bytes((uint64_t)v7, *(const void **)(*(void *)(a1 + 8) + 168), *(void *)(*(void *)(a1 + 8) + 176));
        if (result) {
          return CBB_flush(a3) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_client_certificate_type_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u || !*(void *)(*(void *)(a1 + 8) + 200)) {
    return 1;
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v5;
  v8[2] = v5;
  int64x2_t v7[2] = v5;
  v8[0] = v5;
  v7[0] = v5;
  v7[1] = v5;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0x13u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v8);
    if (result)
    {
      uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v8, (uint64_t)v7);
      if (result)
      {
        uint64_t result = CBB_add_bytes((uint64_t)v7, *(const void **)(*(void *)(a1 + 8) + 192), *(void *)(*(void *)(a1 + 8) + 200));
        if (result) {
          return CBB_flush(a3) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_psk_key_exchange_modes_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = v5;
  int64x2_t v7[2] = v5;
  v6[2] = v5;
  v7[0] = v5;
  v6[0] = v5;
  v6[1] = v5;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0x2Du);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v7);
    if (result)
    {
      uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v7, (uint64_t)v6);
      if (result)
      {
        uint64_t result = CBB_add_u8((uint64_t)v6, 1u);
        if (result) {
          return CBB_flush(a3) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_quic_transport_params_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return bssl::ext_quic_transport_params_add_clienthello_impl(a1, a3, 0);
}

uint64_t bssl::ext_delegated_credential_add_clienthello()
{
  return 1;
}

uint64_t bssl::ext_supported_versions_add_clienthello(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  long long v7 = *(unsigned char ***)a1;
  if (*(unsigned __int16 *)(a1 + 28) <= 0x303u) {
    a3 = a2;
  }
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = v9;
  _OWORD v14[2] = v9;
  int64x2_t v13[2] = v9;
  v14[0] = v9;
  v13[0] = v9;
  v13[1] = v9;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0x2Bu);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v14);
    if (result)
    {
      uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v14, (uint64_t)v13);
      if (result)
      {
        if ((*((_WORD *)v7[15] + 416) & 0x20) == 0
          || (unsigned int grease_value = bssl::ssl_get_grease_value(a1, 4u),
              uint64_t result = CBB_add_u16((uint64_t)v13, grease_value),
              result))
        {
          if (a4 == 1) {
            unsigned int v11 = 772;
          }
          else {
            unsigned int v11 = 0;
          }
          int v12 = bssl::ssl_add_supported_versions((unsigned char ***)a1, (uint64_t)v13, v11);
          uint64_t result = 0;
          if (v12) {
            return CBB_flush(a3) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_supported_groups_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0xAu);
  if (result)
  {
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v15[1] = v7;
    int64x2_t v15[2] = v7;
    _OWORD v14[2] = v7;
    v15[0] = v7;
    v14[0] = v7;
    v14[1] = v7;
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v15);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v15, (uint64_t)v14);
      if (result)
      {
        if ((*(_WORD *)(*(void *)(v5 + 120) + 832) & 0x20) == 0
          || (unsigned int grease_value = bssl::ssl_get_grease_value(a1, 1u),
              uint64_t result = CBB_add_u16((uint64_t)v14, grease_value),
              result))
        {
          uint64_t v9 = *(void *)(a1 + 8);
          uint64_t v10 = *(void *)(v9 + 112);
          if (v10)
          {
            unsigned int v11 = *(__int16 **)(v9 + 104);
          }
          else
          {
            unsigned int v11 = &bssl::kDefaultGroups;
            uint64_t v10 = 4;
          }
          uint64_t v12 = 2 * v10;
          while (1)
          {
            unsigned int v13 = (unsigned __int16)*v11;
            if (v13 != 25497 || *(unsigned __int16 *)(a1 + 30) >= 0x304u)
            {
              uint64_t result = CBB_add_u16((uint64_t)v14, v13);
              if (!result) {
                break;
              }
            }
            ++v11;
            v12 -= 2;
            if (!v12) {
              return CBB_flush(a3) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ticket_request_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v6 + 216) && !*(unsigned char *)(v6 + 217)) {
    return 1;
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v7;
  v8[2] = v7;
  v8[0] = v7;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0x3Au);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v8);
    if (result)
    {
      uint64_t result = CBB_add_u8((uint64_t)v8, *(unsigned __int8 *)(*(void *)(a1 + 8) + 216));
      if (result)
      {
        uint64_t result = CBB_add_u8((uint64_t)v8, *(unsigned __int8 *)(*(void *)(a1 + 8) + 217));
        if (result) {
          return CBB_flush(a3) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_pre_shared_key_add_clienthello(uint64_t *a1, uint64_t *a2, unsigned char *a3, const ssl_session_st *a4)
{
  uint64_t v6 = *a1;
  *a3 = 0;
  if (!bssl::should_offer_psk(a1, a4)) {
    return 1;
  }
  v22[0] = 0xAAAAAAAAAAAAAAAALL;
  v22[1] = 0xAAAAAAAAAAAAAAAALL;
  bssl::ssl_get_current_time(v6, (uint64_t)v22);
  int v7 = v22[0];
  uint64_t v8 = *(void *)(v6 + 104);
  int v9 = *(_DWORD *)(v8 + 192);
  int v10 = *(_DWORD *)(v8 + 376);
  int v11 = *(char *)(v8 + 440);
  digest = bssl::ssl_session_get_digest((bssl *)v8, v12);
  size_t v14 = EVP_MD_size(digest);
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[1] = v15;
  v21[2] = v15;
  v21[0] = v15;
  v20[1] = v15;
  _OWORD v20[2] = v15;
  v19[2] = v15;
  v20[0] = v15;
  v19[0] = v15;
  v19[1] = v15;
  v18[1] = v15;
  _OWORD v18[2] = v15;
  v17[2] = v15;
  v18[0] = v15;
  v17[0] = v15;
  v17[1] = v15;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x29u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v21);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v21, (uint64_t)v20);
      if (result)
      {
        uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v20, (uint64_t)v19);
        if (result)
        {
          uint64_t result = CBB_add_bytes((uint64_t)v19, *(const void **)(*(void *)(v6 + 104) + 232), *(void *)(*(void *)(v6 + 104) + 240));
          if (result)
          {
            uint64_t result = CBB_add_u32((uint64_t)v20, (v10 + 1000 * (v7 - v9)) & ~(v11 >> 31));
            if (result)
            {
              uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v21, (uint64_t)v18);
              if (result)
              {
                uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v18, (uint64_t)v17);
                if (result)
                {
                  uint64_t result = CBB_add_zeros((uint64_t)v17, v14);
                  if (result)
                  {
                    *a3 = 1;
                    return CBB_flush(a2) != 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::cert_compression_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 120);
  uint64_t v4 = *(void *)(v3 + 704);
  if (!v4) {
    return 1;
  }
  uint64_t v6 = *(void *)(v3 + 712);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = v7;
  int64x2_t v13[2] = v7;
  uint64_t v8 = v6 + 24 * v4;
  v12[2] = v7;
  v13[0] = v7;
  v12[0] = v7;
  v12[1] = v7;
  char v9 = 1;
  while (2)
  {
    for (v6 += 24; !*(void *)(v6 - 16); v6 += 24)
    {
      if (v6 == v8)
      {
        if (v9) {
          return 1;
        }
        return CBB_flush(a3) != 0;
      }
    }
    if ((v9 & 1) == 0
      || (uint64_t result = CBB_add_u16((uint64_t)a3, 0x1Bu), result)
      && (uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v13), result)
      && (uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v13, (uint64_t)v12), result))
    {
      uint64_t result = CBB_add_u16((uint64_t)v12, *(unsigned __int16 *)(v6 - 8));
      if (result)
      {
        char v9 = 0;
        if (v6 != v8) {
          continue;
        }
        return CBB_flush(a3) != 0;
      }
    }
    break;
  }
  return result;
}

uint64_t bssl::ext_early_data_add_clienthello(unsigned char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 48);
  if ((*(_WORD *)(v3 + 220) & 0x2000) != 0)
  {
    if (!*(_DWORD *)(v3 + 256)) {
      bssl::ext_early_data_add_clienthello();
    }
    return 1;
  }
  if ((a1[1585] & 8) == 0) {
    return 1;
  }
  uint64_t result = CBB_add_u16((uint64_t)a3, 0x2Au);
  if (result)
  {
    uint64_t result = CBB_add_u16((uint64_t)a3, 0);
    if (result) {
      return CBB_flush(a3) != 0;
    }
  }
  return result;
}

uint64_t bssl::ext_channel_id_add_clienthello(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!*(void *)(*(void *)(a1 + 8) + 120)) {
    return 1;
  }
  int is_dtls = SSL_is_dtls(*(unsigned __int8 ***)a1);
  uint64_t result = 1;
  if (a4 != 2 && !is_dtls)
  {
    uint64_t result = CBB_add_u16(a2, 0x7550u);
    if (result) {
      return CBB_add_u16(a2, 0) != 0;
    }
  }
  return result;
}

uint64_t bssl::ext_key_share_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  if (!*(void *)(a1 + 624)) {
    bssl::ext_key_share_add_clienthello();
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v6;
  v8[2] = v6;
  int64x2_t v7[2] = v6;
  v8[0] = v6;
  v7[0] = v6;
  v7[1] = v6;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0x33u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v8);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v8, (uint64_t)v7);
      if (result)
      {
        uint64_t result = CBB_add_bytes((uint64_t)v7, *(const void **)(a1 + 616), *(void *)(a1 + 624));
        if (result) {
          return CBB_flush(a3) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ec_point_add_clienthello(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (a4 == 1 || *(unsigned __int16 *)(a1 + 28) > 0x303u) {
    return 1;
  }
  else {
    return bssl::ext_ec_point_add_extension(a2);
  }
}

uint64_t bssl::ext_alps_add_clienthello_old(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return bssl::ext_alps_add_clienthello_impl(a1, a3, 0);
}

uint64_t bssl::ext_sigalgs_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x303u) {
    return 1;
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v6;
  v8[2] = v6;
  int64x2_t v7[2] = v6;
  v8[0] = v6;
  v7[0] = v6;
  v7[1] = v6;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0xDu);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v8);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v8, (uint64_t)v7);
      if (result)
      {
        uint64_t result = bssl::tls12_add_verify_sigalgs(a1, (uint64_t)v7);
        if (result) {
          return CBB_flush(a3) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ticket_add_clienthello(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t result = 1;
  if (a4 != 1)
  {
    uint64_t v17 = v4;
    uint64_t v18 = v5;
    if (*(unsigned __int16 *)(a1 + 28) <= 0x303u)
    {
      uint64_t v9 = *(void *)a1;
      if ((SSL_get_options(*(void *)a1) & 0x4000) != 0)
      {
        return 1;
      }
      else
      {
        if ((*(_WORD *)(*(void *)(v9 + 48) + 220) & 0x20) == 0
          && (int v11 = *(bssl **)(v9 + 104)) != 0
          && *((void *)v11 + 30)
          && bssl::ssl_session_protocol_version(v11, v10) <= 0x303)
        {
          uint64_t v12 = *(void *)(v9 + 104);
          size_t v14 = *(const void **)(v12 + 232);
          size_t v13 = *(void *)(v12 + 240);
        }
        else
        {
          size_t v13 = 0;
          size_t v14 = 0;
        }
        *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v16[1] = v15;
        _OWORD v16[2] = v15;
        v16[0] = v15;
        uint64_t result = CBB_add_u16((uint64_t)a2, 0x23u);
        if (result)
        {
          uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v16);
          if (result)
          {
            uint64_t result = CBB_add_bytes((uint64_t)v16, v14, v13);
            if (result) {
              return CBB_flush(a2) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_cookie_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 544)) {
    return 1;
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v5;
  v8[2] = v5;
  int64x2_t v7[2] = v5;
  v8[0] = v5;
  v7[0] = v5;
  v7[1] = v5;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0x2Cu);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v8);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v8, (uint64_t)v7);
      if (result)
      {
        uint64_t result = CBB_add_bytes((uint64_t)v7, *(const void **)(a1 + 536), *(void *)(a1 + 544));
        if (result) {
          return CBB_flush(a3) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_srtp_add_clienthello(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (unsigned __int8 **)*a1;
  srtp_profiles = (const EVP_MD_CTX *)SSL_get_srtp_profiles(*a1);
  if (!srtp_profiles) {
    return 1;
  }
  long long v6 = (EVP_MD_CTX *)srtp_profiles;
  if (!EVP_MD_CTX_md(srtp_profiles) || !SSL_is_dtls(v4)) {
    return 1;
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = v7;
  _OWORD v14[2] = v7;
  int64x2_t v13[2] = v7;
  v14[0] = v7;
  v13[0] = v7;
  v13[1] = v7;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0xEu);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v14);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v14, (uint64_t)v13);
      if (result)
      {
        uint64_t v9 = EVP_MD_CTX_md(v6);
        if (v9)
        {
          int v10 = v9;
          unint64_t v11 = 0;
          while (1)
          {
            uint64_t v12 = OPENSSL_sk_value((unint64_t *)v6, v11);
            uint64_t result = CBB_add_u16((uint64_t)v13, *((unsigned __int16 *)v12 + 4));
            if (!result) {
              break;
            }
            if (v10 == (const EVP_MD *)++v11) {
              goto LABEL_11;
            }
          }
        }
        else
        {
LABEL_11:
          uint64_t result = CBB_add_u8((uint64_t)v14, 0);
          if (result) {
            return CBB_flush(a3) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ocsp_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((*(_WORD *)(*(void *)(a1 + 8) + 301) & 4) == 0) {
    return 1;
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = v5;
  v6[2] = v5;
  v6[0] = v5;
  uint64_t result = CBB_add_u16((uint64_t)a3, 5u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v6);
    if (result)
    {
      uint64_t result = CBB_add_u8((uint64_t)v6, 1u);
      if (result)
      {
        uint64_t result = CBB_add_u16((uint64_t)v6, 0);
        if (result)
        {
          uint64_t result = CBB_add_u16((uint64_t)v6, 0);
          if (result) {
            return CBB_flush(a3) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_alps_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return bssl::ext_alps_add_clienthello_impl(a1, a3, 1);
}

uint64_t bssl::ext_alpn_add_clienthello(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  if (!*(void *)(a1[1] + 136))
  {
    if (*(void *)(v3 + 168))
    {
      ERR_put_error(16, 0, 307, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1382);
      return 0;
    }
    return 1;
  }
  if ((*(_WORD *)(*(void *)(v3 + 48) + 220) & 0x20) != 0) {
    return 1;
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = v6;
  int64x2_t v9[2] = v6;
  v8[2] = v6;
  v9[0] = v6;
  v8[0] = v6;
  v8[1] = v6;
  uint64_t result = CBB_add_u16((uint64_t)a3, 0x10u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a3, (uint64_t)v9);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v9, (uint64_t)v8);
      if (result)
      {
        uint64_t result = CBB_add_bytes((uint64_t)v8, *(const void **)(a1[1] + 128), *(void *)(a1[1] + 136));
        if (result) {
          return CBB_flush(a3) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_sni_add_clienthello(void *a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (a4 == 2)
  {
    uint64_t v5 = a1[193];
    long long v6 = *(const void **)(v5 + 32);
    size_t v7 = *(void *)(v5 + 40);
  }
  else
  {
    long long v6 = *(const void **)(*a1 + 160);
    if (!v6) {
      return 1;
    }
    size_t v7 = strlen(*(const char **)(*a1 + 160));
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = v8;
  v12[2] = v8;
  v12[0] = v8;
  v11[1] = v8;
  int64x2_t v11[2] = v8;
  v10[2] = v8;
  v11[0] = v8;
  v10[0] = v8;
  v10[1] = v8;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v12);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v12, (uint64_t)v11);
      if (result)
      {
        uint64_t result = CBB_add_u8((uint64_t)v11, 0);
        if (result)
        {
          uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v11, (uint64_t)v10);
          if (result)
          {
            uint64_t result = CBB_add_bytes((uint64_t)v10, v6, v7);
            if (result) {
              return CBB_flush(a2) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CBB_add_u16_length_prefixed(uint64_t *a1, uint64_t a2)
{
  return cbb_add_length_prefixed(a1, a2, 2u);
}

uint64_t bssl::ext_sct_add_clienthello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(*(void *)(a1 + 8) + 301) & 2) == 0) {
    return 1;
  }
  uint64_t result = CBB_add_u16(a3, 0x12u);
  if (result) {
    return CBB_add_u16(a3, 0) != 0;
  }
  return result;
}

uint64_t bssl::ext_npn_add_clienthello(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = *a1;
  if (!*(void *)(*(void *)(v5 + 120) + 592)
    || (*(_WORD *)(*(void *)(v5 + 48) + 220) & 0x20) != 0
    || SSL_is_dtls((unsigned __int8 **)v5))
  {
    return 1;
  }
  uint64_t result = 1;
  if (a4 != 1 && *((unsigned __int16 *)a1 + 14) <= 0x303u)
  {
    uint64_t result = CBB_add_u16(a2, 0x3374u);
    if (result) {
      return CBB_add_u16(a2, 0) != 0;
    }
  }
  return result;
}

uint64_t bssl::ext_ems_add_clienthello(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = 1;
  if (a4 != 1 && *(unsigned __int16 *)(a1 + 28) <= 0x303u)
  {
    uint64_t result = CBB_add_u16(a2, 0x17u);
    if (result) {
      return CBB_add_u16(a2, 0) != 0;
    }
  }
  return result;
}

uint64_t bssl::ext_ech_add_clienthello(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (a4 == 1)
  {
    uint64_t result = CBB_add_u16((uint64_t)a2, 0xFE0Du);
    if (result)
    {
      uint64_t result = CBB_add_u16((uint64_t)a2, 1u);
      if (result)
      {
        int v6 = CBB_add_u8((uint64_t)a2, 1u);
        return v6 != 0;
      }
    }
  }
  else if (*(void *)(a1 + 576))
  {
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[1] = v8;
    int64x2_t v9[2] = v8;
    v9[0] = v8;
    uint64_t result = CBB_add_u16((uint64_t)a2, 0xFE0Du);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v9);
      if (result)
      {
        uint64_t result = CBB_add_u8((uint64_t)v9, 0);
        if (result)
        {
          uint64_t result = CBB_add_bytes((uint64_t)v9, *(const void **)(a1 + 568), *(void *)(a1 + 576));
          if (result)
          {
            int v6 = CBB_flush(a2);
            return v6 != 0;
          }
        }
      }
    }
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t bssl::ext_ri_add_clienthello(unsigned __int16 *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t result = 1;
  if (a4 != 1 && a1[14] <= 0x303u)
  {
    uint64_t v6 = *(void *)a1;
    if ((*(unsigned char *)(*(void *)(*(void *)a1 + 48) + 455) != 0) != (*(_WORD *)(*(void *)(*(void *)a1 + 48)
                                                                                   + 220) & 0x20u) >> 5)
      bssl::ext_ri_add_clienthello();
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[1] = v8;
    v10[2] = v8;
    int64x2_t v9[2] = v8;
    v10[0] = v8;
    v9[0] = v8;
    v9[1] = v8;
    uint64_t result = CBB_add_u16((uint64_t)a2, 0xFF01u);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v10);
      if (result)
      {
        uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v10, (uint64_t)v9);
        if (result)
        {
          uint64_t result = CBB_add_bytes((uint64_t)v9, (const void *)(*(void *)(v6 + 48) + 443), *(unsigned __int8 *)(*(void *)(v6 + 48) + 455));
          if (result) {
            return CBB_flush(a2) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ssl_write_client_hello_without_extensions(uint64_t a1, uint64_t *a2, int a3, char a4)
{
  uint64_t v8 = *(void *)a1;
  uint64_t result = CBB_add_u16((uint64_t)a2, *(unsigned __int16 *)(a1 + 1588));
  if (result)
  {
    int v10 = (const void *)(a3 == 1 ? a1 + 504 : *(void *)(v8 + 48) + 48);
    uint64_t result = CBB_add_bytes((uint64_t)a2, v10, 0x20uLL);
    if (result)
    {
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v30[1] = v11;
      v30[2] = v11;
      v30[0] = v11;
      uint64_t result = CBB_add_u8_length_prefixed(a2, (uint64_t)v30);
      if (result)
      {
        if ((*(_WORD *)(*(void *)(v8 + 48) + 220) & 0x20) != 0
          || (a4 & 1) != 0
          || (uint64_t result = CBB_add_bytes((uint64_t)v30, (const void *)(a1 + 1597), *(unsigned __int8 *)(a1 + 1629)),
              result))
        {
          if (!SSL_is_dtls((unsigned __int8 **)v8)
            || (uint64_t result = CBB_add_u8_length_prefixed(a2, (uint64_t)v30), result)
            && (uint64_t result = CBB_add_bytes((uint64_t)v30, *(const void **)(a1 + 552), *(void *)(a1 + 560)), result))
          {
            uint64_t v12 = *(void *)a1;
            BOOL v13 = *(void *)(*(void *)(a1 + 8) + 64) == 0;
            *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v31[1] = v14;
            v31[2] = v14;
            v31[0] = v14;
            long long v15 = (ssl_credential_st *)CBB_add_u16_length_prefixed(a2, (uint64_t)v31);
            if (!v15) {
              return 0;
            }
            if ((*(_WORD *)(*(void *)(v12 + 120) + 832) & 0x20) != 0)
            {
              unsigned int grease_value = bssl::ssl_get_grease_value(a1, 0);
              long long v15 = (ssl_credential_st *)CBB_add_u16((uint64_t)v31, grease_value);
              if (!v15) {
                return 0;
              }
            }
            if (*(unsigned __int16 *)(a1 + 30) >= 0x304u)
            {
              unsigned int v17 = *(unsigned __int16 *)(*(void *)(v12 + 8) + 301);
              int v18 = (v17 & 0x800) != 0 ? (v17 >> 12) & 1 : ssl_credential_st::UsesPrivateKey(v15);
              if (!v18
                && (*(unsigned char *)(*(void *)(**(void **)(a1 + 8) + 120) + 248) & 4) != 0
                && bssl::ssl_tls13_cipher_meets_policy(4867, *(_DWORD *)(*(void *)(v12 + 8) + 296))
                && !CBB_add_u16((uint64_t)v31, 0x1303u)
                || (*(unsigned char *)(*(void *)(**(void **)(a1 + 8) + 120) + 248) & 2) != 0
                && bssl::ssl_tls13_cipher_meets_policy(4865, *(_DWORD *)(*(void *)(v12 + 8) + 296))
                && !CBB_add_u16((uint64_t)v31, 0x1301u)
                || (*(unsigned char *)(*(void *)(**(void **)(a1 + 8) + 120) + 248) & 2) != 0
                && bssl::ssl_tls13_cipher_meets_policy(4866, *(_DWORD *)(*(void *)(v12 + 8) + 296))
                && !CBB_add_u16((uint64_t)v31, 0x1302u)
                || v18
                && (*(unsigned char *)(*(void *)(**(void **)(a1 + 8) + 120) + 248) & 4) != 0
                && bssl::ssl_tls13_cipher_meets_policy(4867, *(_DWORD *)(*(void *)(v12 + 8) + 296))
                && !CBB_add_u16((uint64_t)v31, 0x1303u))
              {
                return 0;
              }
            }
            if (a3 != 1 && *(unsigned __int16 *)(a1 + 28) <= 0x303u)
            {
              ciphers = SSL_get_ciphers((const SSL *)v12);
              int v20 = EVP_MD_CTX_md((const EVP_MD_CTX *)ciphers);
              if (!v20) {
                goto LABEL_49;
              }
              unint64_t v21 = v20;
              char v22 = 0;
              unint64_t v23 = 0;
              int v24 = 8 * v13;
              uint64_t v25 = (char *)&v20[-1].ctx_size + 7;
              do
              {
                while (1)
                {
                  size_t v26 = OPENSSL_sk_value((unint64_t *)ciphers, v23);
                  if ((*((_DWORD *)v26 + 5) & v24) != 0) {
                    break;
                  }
                  uint64_t v27 = (uint64_t)v26;
                  if ((v26[3] & v24) != 0
                    || SSL_CIPHER_get_min_version(v26) > *(unsigned __int16 *)(a1 + 30)
                    || SSL_CIPHER_get_max_version(v27) < *(unsigned __int16 *)(a1 + 28))
                  {
                    break;
                  }
                  unsigned int protocol_id = SSL_CIPHER_get_protocol_id(v27);
                  if (!CBB_add_u16((uint64_t)v31, protocol_id)) {
                    return 0;
                  }
                  char v22 = 1;
                  if (v25 == (char *)v23++) {
                    goto LABEL_51;
                  }
                }
                ++v23;
              }
              while (v21 != (const EVP_MD *)v23);
              if ((v22 & 1) == 0)
              {
LABEL_49:
                if (*(unsigned __int16 *)(a1 + 30) <= 0x303u)
                {
                  ERR_put_error(16, 0, 175, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 309);
                  return 0;
                }
              }
            }
LABEL_51:
            if ((*(unsigned char *)(v12 + 149) & 4) != 0 && !CBB_add_u16((uint64_t)v31, 0x5600u)) {
              return 0;
            }
            uint64_t result = CBB_flush(a2);
            if (result)
            {
              uint64_t result = CBB_add_u8((uint64_t)a2, 1u);
              if (result) {
                return CBB_add_u8((uint64_t)a2, 0) != 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CBB_add_u16(uint64_t a1, unsigned int a2)
{
  return cbb_add_u(a1, a2, 2uLL);
}

uint64_t SSL_CIPHER_get_protocol_id(uint64_t a1)
{
  if (HIBYTE(*(_DWORD *)(a1 + 16)) != 3) {
    SSL_CIPHER_get_protocol_id_cold_1();
  }
  return (unsigned __int16)*(_DWORD *)(a1 + 16);
}

uint64_t SSL_CIPHER_get_min_version(_DWORD *a1)
{
  if (a1[5] == 16 || a1[6] == 16) {
    return 772;
  }
  if (a1[9] == 1) {
    return 768;
  }
  return 771;
}

uint64_t SSL_CIPHER_get_max_version(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) == 16)
  {
    return 772;
  }
  else if (*(_DWORD *)(a1 + 24) == 16)
  {
    return 772;
  }
  else
  {
    return 771;
  }
}

uint64_t bssl::ssl_tls13_cipher_meets_policy(int a1, int a2)
{
  switch(a2)
  {
    case 0:
      return 1;
    case 2:
      LOBYTE(v2) = a1 - 1;
      if ((a1 - 4865) >= 3) {
        bssl::ssl_tls13_cipher_meets_policy();
      }
      break;
    case 1:
      if ((a1 - 4865) >= 3) {
        bssl::ssl_tls13_cipher_meets_policy();
      }
      unsigned int v2 = 3u >> ((a1 - 1) & 7);
      break;
    default:
      bssl::ssl_tls13_cipher_meets_policy();
  }
  return v2 & 1;
}

uint64_t bssl::ssl_add_supported_versions(unsigned char ***a1, uint64_t a2, unsigned int a3)
{
  if (***a1) {
    uint64_t v6 = 4;
  }
  else {
    uint64_t v6 = 8;
  }
  if (***a1) {
    size_t v7 = (unsigned __int16 *)&bssl::kDTLSVersions;
  }
  else {
    size_t v7 = (unsigned __int16 *)&bssl::kTLSVersions;
  }
  do
  {
    unsigned int v8 = *v7;
    if (!bssl::ssl_supports_version((uint64_t)a1, v8)) {
      goto LABEL_15;
    }
    unsigned int v9 = v8;
    if (v8 - 769 >= 4)
    {
      if (v8 == 65277)
      {
        unsigned int v9 = 771;
      }
      else
      {
        if (v8 != 65279) {
          goto LABEL_15;
        }
        unsigned int v9 = 770;
      }
    }
    if (v9 >= a3)
    {
      uint64_t result = CBB_add_u16(a2, v8);
      if (!result) {
        return result;
      }
    }
LABEL_15:
    ++v7;
    v6 -= 2;
  }
  while (v6);
  return 1;
}

BOOL bssl::ssl_supports_version(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 8;
  if (***(unsigned char ***)a1) {
    uint64_t v2 = 4;
  }
  uint64_t v3 = (unsigned __int16 *)&bssl::kDTLSVersions;
  if (!***(unsigned char ***)a1) {
    uint64_t v3 = (unsigned __int16 *)&bssl::kTLSVersions;
  }
  uint64_t v4 = v2 - 2;
  do
  {
    int v6 = *v3++;
    int v5 = v6;
    BOOL v7 = v6 == a2 || v4 == 0;
    v4 -= 2;
  }
  while (!v7);
  if (v5 != a2) {
    return 0;
  }
  if (a2 - 769 >= 4)
  {
    if (a2 == 65277)
    {
      a2 = 771;
    }
    else
    {
      if (a2 != 65279) {
        return 0;
      }
      a2 = 770;
    }
  }
  if (*(unsigned __int16 *)(a1 + 28) > a2) {
    return 0;
  }
  return a2 <= *(unsigned __int16 *)(a1 + 30);
}

BOOL bssl::tls12_add_verify_sigalgs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 264);
  if (v4)
  {
    int v5 = *(__int16 **)(v3 + 256);
  }
  else
  {
    int v5 = &bssl::kVerifySignatureAlgorithms;
    uint64_t v4 = 10;
  }
  uint64_t v6 = 2 * v4 - 2;
  do
  {
    unsigned int v7 = (unsigned __int16)*v5++;
    int v8 = CBB_add_u16(a2, v7);
    if (v8) {
      BOOL v9 = v6 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    v6 -= 2;
  }
  while (!v9);
  return v8 != 0;
}

uint64_t SSL_get_srtp_profiles(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    SSL_get_srtp_profiles_cold_1();
  }
  uint64_t v2 = *(void *)(v1 + 272);
  if (!v2) {
    return *(void *)(*(void *)(a1 + 120) + 696);
  }
  return v2;
}

uint64_t SSL_get_options(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

void pkey_ec_cleanup(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1) {
    OPENSSL_free(v1);
  }
}

void cbb_add_child_cold_2()
{
  __assert_rtn("cbb_add_child", "cbb.c", 296, "cbb->child == NULL");
}

void CBB_cleanup_cold_1()
{
}

uint64_t __boringssl_context_set_ciphersuites_from_list_block_invoke(uint64_t a1, size_t a2)
{
  *(_WORD *)(*(void *)(a1 + 40) + 2 * a2) = xpc_array_get_uint64(*(xpc_object_t *)(a1 + 32), a2);
  return 1;
}

uint64_t bssl::do_seal_record(bssl *this, ssl_st *a2, char *a3, char *a4, unsigned __int8 *a5, char *a6, const unsigned __int8 *a7)
{
  char v9 = (char)a5;
  char v32 = (char)a5;
  long long v14 = *(bssl::SSLAEADContext **)(*((void *)this + 6) + 272);
  if (*(void *)v14)
  {
    unsigned int v15 = bssl::SSLAEADContext::ProtocolVersion(*(bssl::SSLAEADContext **)(*((void *)this + 6) + 272));
    if (v15 < 0x304)
    {
      uint64_t v16 = 0;
    }
    else
    {
      char v9 = 23;
      uint64_t v16 = 1;
    }
    if (v15 >= 0x304) {
      unsigned int v17 = &v32;
    }
    else {
      unsigned int v17 = 0;
    }
  }
  else
  {
    uint64_t v16 = 0;
    unsigned int v17 = 0;
  }
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  if (!bssl::SSLAEADContext::SuffixLen(v14, &v31, (uint64_t)a7, v16)
    || (bssl::SSLAEADContext::CiphertextLen(v14, &v30, (unint64_t)a7, v16) & 1) == 0)
  {
    int v25 = 200;
    int v26 = 384;
LABEL_25:
    ERR_put_error(16, 0, v25, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", v26);
    return 0;
  }
  uint64_t v28 = v17;
  size_t v29 = a4;
  int v18 = &a7[(void)a6];
  if (a6 != a3 && v18 > (const unsigned __int8 *)a3 && &a7[(void)a3] > (const unsigned __int8 *)a6) {
    bssl::do_seal_record();
  }
  if (SSL_is_dtls((unsigned __int8 **)this)) {
    uint64_t v19 = 13;
  }
  else {
    uint64_t v19 = 5;
  }
  uint64_t v20 = bssl::SSLAEADContext::ExplicitNonceLen(*(bssl::SSLAEADContext **)(*((void *)this + 6) + 264));
  if (v18 > (const unsigned __int8 *)a2 && (char *)a2 + v19 + v20 > a6) {
    bssl::do_seal_record();
  }
  if (v18 > (const unsigned __int8 *)v29 && &v29[v31] > a6) {
    bssl::do_seal_record();
  }
  LOBYTE(a2->version) = v9;
  unsigned int v21 = bssl::SSLAEADContext::RecordVersion(v14);
  *(_WORD *)((char *)&a2->version + 1) = __rev16(v21);
  *(_WORD *)((char *)&a2->version + 3) = bswap32((unsigned __int16)v30) >> 16;
  unint64_t v23 = *(void *)(*((void *)this + 6) + 8);
  if (v23 == -1)
  {
    int v25 = 69;
    int v26 = 408;
    goto LABEL_25;
  }
  if (!bssl::SSLAEADContext::SealScatter((uint64_t)v14, (char *)&a2->type + 1, a3, v29, a2->version, v21, v23, v22, (uint64_t)a2, 5, a6, (uint64_t)a7, v28, v16))return 0; {
  ++*(void *)(*((void *)this + 6) + 8);
  }
  uint64_t v24 = 1;
  bssl::ssl_do_msg_callback((uint64_t)this, 1, 256, (uint64_t)a2, 5);
  return v24;
}

void nw_boringssl_read(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return;
  }
  if ((*(unsigned char *)(v2 + 475) & 1) == 0
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_boringssl_read_cold_1();
  }
  if ((*(unsigned char *)(v2 + 388) & 1) != 0 || *(void *)(v2 + 272) || (*(unsigned char *)(v2 + 389) & 2) != 0) {
    return;
  }
  *(unsigned char *)(v2 + 389) |= 2u;
  if (boringssl_session_get_state(*(void *)(v2 + 336)) < 2)
  {
    if (*(void *)(v2 + 320))
    {
      nw_queue_cancel_source();
      *(void *)(v2 + 320) = 0;
    }
    nw_protocol_boringssl_handshake_negotiate((void *)v2);
    goto LABEL_134;
  }
  if (*(char *)(v2 + 388) < 0) {
    goto LABEL_129;
  }
  char v3 = 0;
  uint64_t v4 = v2 + 391;
  int v5 = "nw_boringssl_read";
  while (1)
  {
    if (*(_DWORD *)(v2 + 380) > 0x800000u)
    {
      if ((*(unsigned char *)(v2 + 475) & 1) == 0)
      {
        if (datapath_logging_enabled)
        {
          BOOL v45 = g_boringssl_log;
          if (g_boringssl_log)
          {
            if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
            {
              int v48 = *(_DWORD *)(v2 + 380);
              *(_DWORD *)buf = 136447234;
              uint64_t v53 = v5;
              __int16 v54 = 1024;
              int v55 = 636;
              __int16 v56 = 2082;
              uint64_t v57 = v4;
              __int16 v58 = 2048;
              uint64_t v59 = v2;
              __int16 v60 = 1024;
              int v61 = v48;
              int v47 = "%{public}s(%d) %{public}s[%p] Above maximum input threshold, skipping read and resuspending (%u bytes)";
LABEL_149:
              _os_log_debug_impl(&dword_1BA0DE000, v45, OS_LOG_TYPE_DEBUG, v47, buf, 0x2Cu);
            }
          }
        }
      }
LABEL_127:
      char v19 = *(unsigned char *)(v2 + 388);
      goto LABEL_128;
    }
    uint64_t v6 = *(void *)(a1 + 40);
    if (!v6) {
      goto LABEL_28;
    }
    if ((*(unsigned char *)(v6 + 475) & 1) == 0)
    {
      if (datapath_logging_enabled)
      {
        long long v36 = g_boringssl_log;
        if (g_boringssl_log)
        {
          if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            uint64_t v53 = "nw_protocol_boringssl_read_one_record";
            __int16 v54 = 1024;
            int v55 = 1306;
            __int16 v56 = 2082;
            uint64_t v57 = v6 + 391;
            __int16 v58 = 2048;
            uint64_t v59 = v6;
            _os_log_debug_impl(&dword_1BA0DE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] ", buf, 0x26u);
          }
        }
      }
    }
    if ((boringssl_session_get_state(*(void *)(v6 + 336)) & 0xFFFFFFFE) != 2)
    {
      if ((*(unsigned char *)(v6 + 475) & 1) == 0)
      {
        if (datapath_logging_enabled)
        {
          uint64_t v38 = g_boringssl_log;
          if (g_boringssl_log)
          {
            if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              uint64_t v53 = "nw_protocol_boringssl_read_one_record";
              __int16 v54 = 1024;
              int v55 = 1310;
              __int16 v56 = 2082;
              uint64_t v57 = v6 + 391;
              __int16 v58 = 2048;
              uint64_t v59 = v6;
              _os_log_debug_impl(&dword_1BA0DE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Cannot get any bytes in current state", buf, 0x26u);
            }
          }
        }
      }
      goto LABEL_28;
    }
    uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v6 + 80))(*(void *)(v6 + 336), 0, 0x7FFFFFFFLL, 1);
    if ((*(unsigned char *)(v6 + 475) & 1) == 0)
    {
      if (datapath_logging_enabled)
      {
        int v37 = g_boringssl_log;
        if (g_boringssl_log)
        {
          if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136447234;
            uint64_t v53 = "nw_protocol_boringssl_read_one_record";
            __int16 v54 = 1024;
            int v55 = 1319;
            __int16 v56 = 2082;
            uint64_t v57 = v6 + 391;
            __int16 v58 = 2048;
            uint64_t v59 = v6;
            __int16 v60 = 1024;
            int v61 = v7;
            _os_log_debug_impl(&dword_1BA0DE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] peeked %d bytes", buf, 0x2Cu);
          }
        }
      }
    }
    int v8 = *(void **)(v6 + 336);
    if (v8)
    {
      if (*(_DWORD *)v8 == -1252936367)
      {
        uint64_t v9 = v8[1];
        if (v9)
        {
          if ((int)v7 < 1)
          {
            if (boringssl_session_get_state(*(void *)(v6 + 336)) == 4) {
              goto LABEL_28;
            }
            uint64_t v20 = *(const SSL **)(v9 + 400);
            if (v20)
            {
              int error = SSL_get_error(v20, v7);
              if ((*(unsigned char *)(v6 + 475) & 1) == 0)
              {
                if (datapath_logging_enabled)
                {
                  int v41 = g_boringssl_log;
                  if (g_boringssl_log)
                  {
                    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136447234;
                      uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                      __int16 v54 = 1024;
                      int v55 = 1375;
                      __int16 v56 = 2082;
                      uint64_t v57 = v6 + 391;
                      __int16 v58 = 2048;
                      uint64_t v59 = v6;
                      __int16 v60 = 1024;
                      int v61 = error;
                      _os_log_debug_impl(&dword_1BA0DE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] read error code %d", buf, 0x2Cu);
                    }
                  }
                }
              }
              if (error == 1)
              {
                ERR_print_errors_cb((int (__cdecl *)(const char *, size_t, void *))nw_protocol_error_print, v8);
                nw_protocol_boringssl_internal_error((void *)v6, -9810);
                nw_protocol_boringssl_disconnect(a1);
              }
              else if (error == 6)
              {
                nw_protocol_boringssl_input_finished(a1);
              }
            }
            else if ((*(unsigned char *)(v6 + 475) & 1) == 0)
            {
              uint64_t v35 = g_boringssl_log;
              if (g_boringssl_log)
              {
                if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446978;
                  uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                  __int16 v54 = 1024;
                  int v55 = 1371;
                  __int16 v56 = 2082;
                  uint64_t v57 = v6 + 391;
                  __int16 v58 = 2048;
                  uint64_t v59 = v6;
                  unsigned int v15 = v35;
                  uint64_t v16 = "%{public}s(%d) %{public}s[%p] cannot peek into the session";
                  uint32_t v34 = 38;
                  goto LABEL_79;
                }
              }
            }
            goto LABEL_28;
          }
          uint64_t buffer_manager_with_context = nw_frame_get_buffer_manager_with_context();
          if (buffer_manager_with_context)
          {
            uint64_t v11 = buffer_manager_with_context;
            uint64_t v12 = (void *)nw_mem_buffer_allocate();
            if (v12)
            {
LABEL_47:
              uint64_t v22 = v4;
              unint64_t v23 = v5;
              int v24 = (*(uint64_t (**)(void, void *, uint64_t, void))(v6 + 80))(*(void *)(v6 + 336), v12, v7, 0);
              char v25 = *(unsigned char *)(v6 + 475);
              if ((v25 & 1) == 0)
              {
                if (datapath_logging_enabled)
                {
                  oslog = g_boringssl_log;
                  if (g_boringssl_log)
                  {
                    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136447234;
                      uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                      __int16 v54 = 1024;
                      int v55 = 1350;
                      __int16 v56 = 2082;
                      uint64_t v57 = v6 + 391;
                      __int16 v58 = 2048;
                      uint64_t v59 = v6;
                      __int16 v60 = 1024;
                      int v61 = v24;
                      _os_log_debug_impl(&dword_1BA0DE000, oslog, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Actually read %d bytes", buf, 0x2Cu);
                    }
                    char v25 = *(unsigned char *)(v6 + 475);
                  }
                }
              }
              if (v24 != v7 && (v25 & 1) == 0)
              {
                osloga = g_boringssl_log;
                if (g_boringssl_log)
                {
                  if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136447490;
                    uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                    __int16 v54 = 1024;
                    int v55 = 1352;
                    __int16 v56 = 2082;
                    uint64_t v57 = v6 + 391;
                    __int16 v58 = 2048;
                    uint64_t v59 = v6;
                    __int16 v60 = 1024;
                    int v61 = v24;
                    __int16 v62 = 1024;
                    int v63 = v7;
                    _os_log_error_impl(&dword_1BA0DE000, osloga, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] Unexpected read result %d != %d", buf, 0x32u);
                  }
                  char v25 = *(unsigned char *)(v6 + 475);
                }
              }
              if ((v25 & 1) == 0)
              {
                if (datapath_logging_enabled)
                {
                  long long v39 = g_boringssl_log;
                  if (g_boringssl_log)
                  {
                    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136447234;
                      uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                      __int16 v54 = 1024;
                      int v55 = 1403;
                      __int16 v56 = 2082;
                      uint64_t v57 = v6 + 391;
                      __int16 v58 = 2048;
                      uint64_t v59 = v6;
                      __int16 v60 = 1024;
                      int v61 = v7;
                      _os_log_debug_impl(&dword_1BA0DE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] bytes read: %u", buf, 0x2Cu);
                    }
                  }
                }
              }
              uint64_t v27 = nw_frame_create();
              uint64_t v28 = (void *)v27;
              if (v11)
              {
                if (v27)
                {
                  nw_frame_set_buffer_used_manager();
LABEL_58:
                  id v29 = boringssl_context_copy_metadata(*(void *)(v6 + 336));
                  if (v29)
                  {
                    boringssl_context_is_dtls(*(void *)(v6 + 336));
                    nw_frame_set_metadata();
                  }
                  id v30 = v28;
                  nw_frame_array_append();
                  nw_frame_array_append();

                  *(_DWORD *)(v6 + 380) += v7;
                  int v5 = v23;
                  uint64_t v4 = v22;
                  goto LABEL_61;
                }
                if ((*(unsigned char *)(v6 + 475) & 1) == 0)
                {
                  oslogb = g_boringssl_log;
                  if (g_boringssl_log)
                  {
                    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136447234;
                      uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                      __int16 v54 = 1024;
                      int v55 = 1410;
                      __int16 v56 = 2082;
                      uint64_t v57 = v6 + 391;
                      __int16 v58 = 2048;
                      uint64_t v59 = v6;
                      __int16 v60 = 1024;
                      int v61 = v7;
                      _os_log_error_impl(&dword_1BA0DE000, oslogb, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] nw_frame_create failed for %d bytes", buf, 0x2Cu);
                    }
                  }
                }
                nw_mem_buffer_free();
              }
              else
              {
                if (v27)
                {
                  nw_frame_set_buffer_used_malloc();
                  goto LABEL_58;
                }
                if ((*(unsigned char *)(v6 + 475) & 1) == 0)
                {
                  uint64_t v42 = g_boringssl_log;
                  if (g_boringssl_log)
                  {
                    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136447234;
                      uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                      __int16 v54 = 1024;
                      int v55 = 1418;
                      __int16 v56 = 2082;
                      uint64_t v57 = v6 + 391;
                      __int16 v58 = 2048;
                      uint64_t v59 = v6;
                      __int16 v60 = 1024;
                      int v61 = v7;
                      _os_log_error_impl(&dword_1BA0DE000, v42, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] nw_frame_create failed for %d bytes", buf, 0x2Cu);
                    }
                  }
                }
                free(v12);
              }

              int v5 = v23;
              uint64_t v4 = v22;
              goto LABEL_28;
            }
            if ((*(unsigned char *)(v6 + 475) & 1) == 0)
            {
              if (datapath_logging_enabled)
              {
                char v40 = g_boringssl_log;
                if (g_boringssl_log)
                {
                  if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136447234;
                    uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                    __int16 v54 = 1024;
                    int v55 = 1329;
                    __int16 v56 = 2082;
                    uint64_t v57 = v6 + 391;
                    __int16 v58 = 2048;
                    uint64_t v59 = v6;
                    __int16 v60 = 1024;
                    int v61 = v7;
                    _os_log_debug_impl(&dword_1BA0DE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Failed to allocate %d bytes for input_buffer from buffer manager", buf, 0x2Cu);
                  }
                }
              }
            }
            BOOL v13 = malloc_type_malloc(v7, 0xFBEE1C37uLL);
            if (!v13)
            {
              if ((*(unsigned char *)(v6 + 475) & 1) == 0)
              {
                uint64_t v14 = g_boringssl_log;
                if (g_boringssl_log)
                {
                  if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136447234;
                    uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                    __int16 v54 = 1024;
                    int v55 = 1335;
                    __int16 v56 = 2082;
                    uint64_t v57 = v6 + 391;
                    __int16 v58 = 2048;
                    uint64_t v59 = v6;
                    __int16 v60 = 1024;
                    int v61 = v7;
                    unsigned int v15 = v14;
                    uint64_t v16 = "%{public}s(%d) %{public}s[%p] Failed to allocate %d bytes for input_buffer";
LABEL_74:
                    uint32_t v34 = 44;
LABEL_79:
                    _os_log_error_impl(&dword_1BA0DE000, v15, OS_LOG_TYPE_ERROR, v16, buf, v34);
                    goto LABEL_28;
                  }
                }
              }
              goto LABEL_28;
            }
          }
          else
          {
            BOOL v13 = malloc_type_malloc(v7, 0x7226F300uLL);
            if (!v13)
            {
              if ((*(unsigned char *)(v6 + 475) & 1) == 0)
              {
                uint64_t v33 = g_boringssl_log;
                if (g_boringssl_log)
                {
                  if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136447234;
                    uint64_t v53 = "nw_protocol_boringssl_read_one_record";
                    __int16 v54 = 1024;
                    int v55 = 1342;
                    __int16 v56 = 2082;
                    uint64_t v57 = v6 + 391;
                    __int16 v58 = 2048;
                    uint64_t v59 = v6;
                    __int16 v60 = 1024;
                    int v61 = v7;
                    unsigned int v15 = v33;
                    uint64_t v16 = "%{public}s(%d) %{public}s[%p] Failed to allocate %d bytes for input_buffer";
                    goto LABEL_74;
                  }
                }
              }
LABEL_28:
              if ((v3 & 1) == 0) {
                goto LABEL_129;
              }
              goto LABEL_29;
            }
          }
          uint64_t v12 = v13;
          uint64_t v11 = 0;
          goto LABEL_47;
        }
      }
    }
LABEL_61:
    if (*(_DWORD *)(v2 + 380) <= 0x800000u)
    {
      char v3 = 1;
      goto LABEL_36;
    }
    if ((*(unsigned char *)(v2 + 475) & 1) == 0)
    {
      if (datapath_logging_enabled)
      {
        unint64_t v31 = g_boringssl_log;
        if (g_boringssl_log)
        {
          if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
          {
            int v32 = *(_DWORD *)(v2 + 380);
            *(_DWORD *)buf = 136447234;
            uint64_t v53 = v5;
            __int16 v54 = 1024;
            int v55 = 655;
            __int16 v56 = 2082;
            uint64_t v57 = v4;
            __int16 v58 = 2048;
            uint64_t v59 = v2;
            __int16 v60 = 1024;
            int v61 = v32;
            _os_log_debug_impl(&dword_1BA0DE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Passed max input threshold, stopping reading to deliver data (%u bytes)", buf, 0x2Cu);
          }
        }
      }
    }
LABEL_29:
    uint64_t v17 = *(void *)(a1 + 48);
    if (!v17) {
      goto LABEL_35;
    }
    uint64_t v18 = *(void *)(v17 + 24);
    if (!v18 || !*(void *)(v18 + 64)) {
      goto LABEL_35;
    }
    *(unsigned char *)(v2 + 388) |= 0x40u;
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 24) + 64))();
    char v19 = *(unsigned char *)(v2 + 388);
    if ((v19 & 0x40) != 0) {
      break;
    }
    char v3 = 0;
LABEL_37:
    if (v19 < 0) {
      goto LABEL_129;
    }
  }
  if (*(_DWORD *)(v2 + 380) <= 0x8000u)
  {
LABEL_35:
    char v3 = 0;
LABEL_36:
    char v19 = *(unsigned char *)(v2 + 388);
    goto LABEL_37;
  }
  if ((*(unsigned char *)(v2 + 475) & 1) == 0)
  {
    if (datapath_logging_enabled)
    {
      BOOL v45 = g_boringssl_log;
      if (g_boringssl_log)
      {
        if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
        {
          int v46 = *(_DWORD *)(v2 + 380);
          *(_DWORD *)buf = 136447234;
          uint64_t v53 = v5;
          __int16 v54 = 1024;
          int v55 = 683;
          __int16 v56 = 2082;
          uint64_t v57 = v4;
          __int16 v58 = 2048;
          uint64_t v59 = v2;
          __int16 v60 = 1024;
          int v61 = v46;
          int v47 = "%{public}s(%d) %{public}s[%p] input_available unacknowledged, data (%u bytes) over readahead threshold, "
                "suspending reads";
          goto LABEL_149;
        }
        goto LABEL_127;
      }
    }
  }
LABEL_128:
  *(unsigned char *)(v2 + 388) = v19 | 0x80;
LABEL_129:
  if (*(unsigned char *)(v2 + 389))
  {
    uint64_t v43 = *(void *)(a1 + 48);
    if (v43)
    {
      uint64_t v44 = *(void *)(v43 + 24);
      if (v44)
      {
        if (*(void *)(v44 + 184))
        {
          *(unsigned char *)(v2 + 389) &= ~1u;
          (*(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 24) + 184))();
        }
      }
    }
  }
LABEL_134:
  *(unsigned char *)(v2 + 389) &= ~2u;
}

uint64_t nw_protocol_boringssl_read_bytes(void *a1, uint64_t a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  uint64_t v6 = v5;
  if ((!v5 || (v5[475] & 1) == 0)
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_read_bytes_cold_7();
  }
  uint64_t v7 = 0xFFFFFFFFLL;
  if (v6
    && a2
    && a3
    && boringssl_session_get_state(*((void *)v6 + 42)) <= 3
    && (boringssl_session_is_cancelled(*((void *)v6 + 42)) & 1) == 0)
  {
    if ((v6[390] & 2) != 0)
    {
      if ((v6[475] & 1) == 0
        && datapath_logging_enabled
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_read_bytes_cold_6();
      }
    }
    else if ((v6[475] & 1) == 0 && g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_read_bytes_cold_5();
    }
    if (nw_frame_array_is_empty()
      && (*(_DWORD *)buf = 0, !nw_protocol_boringssl_read_frames(v6, *((void *)v6 + 5), buf)))
    {
      if ((v6[390] & 2) != 0)
      {
        if ((v6[475] & 1) == 0
          && datapath_logging_enabled
          && g_boringssl_log
          && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
        {
          nw_protocol_boringssl_read_bytes_cold_2();
        }
      }
      else if ((v6[475] & 1) == 0 {
             && g_boringssl_log
      }
             && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_read_bytes_cold_1();
      }
      uint64_t v7 = 0;
    }
    else
    {
      int v8 = nw_frame_array_first();
      if (!*((void *)v6 + 46)) {
        objc_storeStrong((id *)v6 + 46, v8);
      }
      if (v8)
      {
        do
        {
          if (*((void **)v6 + 46) != v8 && (v6[475] & 1) == 0)
          {
            uint64_t v12 = g_boringssl_log;
            if (g_boringssl_log)
            {
              if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_FAULT))
              {
                uint64_t v13 = *((void *)v6 + 46);
                *(_DWORD *)buf = 136447490;
                char v19 = "nw_protocol_boringssl_read_bytes";
                __int16 v20 = 1024;
                int v21 = 268;
                __int16 v22 = 2082;
                unint64_t v23 = v6 + 391;
                __int16 v24 = 2048;
                char v25 = v6;
                __int16 v26 = 2048;
                *(void *)uint64_t v27 = v13;
                *(_WORD *)&v27[8] = 2048;
                *(void *)&v27[10] = v8;
                _os_log_fault_impl(&dword_1BA0DE000, v12, OS_LOG_TYPE_FAULT, "%{public}s(%d) %{public}s[%p] current input frame (%p) does not match frame being processed (%p)", buf, 0x3Au);
              }
            }
          }
          uint64_t v9 = nw_frame_array_next();
          uint64_t v10 = nw_frame_unclaimed_bytes();
          boringssl_context_is_dtls(*((void *)v6 + 42));
          v6[389] |= 0x40u;
          char v11 = nw_frame_claim();
          *((_DWORD *)v6 + 94) = *((_DWORD *)v6 + 94);
          if ((nw_frame_unclaim() & 1) == 0 && (v6[475] & 1) == 0)
          {
            if (datapath_logging_enabled)
            {
              oslog = g_boringssl_log;
              if (g_boringssl_log)
              {
                if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                {
                  int v15 = *((_DWORD *)v6 + 94);
                  *(_DWORD *)buf = 136447490;
                  char v19 = "nw_protocol_boringssl_read_bytes";
                  __int16 v20 = 1024;
                  int v21 = 290;
                  __int16 v22 = 2082;
                  unint64_t v23 = v6 + 391;
                  __int16 v24 = 2048;
                  char v25 = v6;
                  __int16 v26 = 1024;
                  *(_DWORD *)uint64_t v27 = v15;
                  *(_WORD *)&v27[4] = 2048;
                  *(void *)&v27[6] = v8;
                  _os_log_debug_impl(&dword_1BA0DE000, oslog, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] failed to unclaim %d bytes from %p", buf, 0x36u);
                }
              }
            }
          }
          *((_DWORD *)v6 + 94) = 0;
          objc_storeStrong((id *)v6 + 46, v9);
          nw_frame_array_remove();
          nw_frame_finalize();
          if ((v11 & 1) == 0 && (v6[475] & 1) == 0)
          {
            if (datapath_logging_enabled)
            {
              uint64_t v14 = g_boringssl_log;
              if (g_boringssl_log)
              {
                if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136447490;
                  char v19 = "nw_protocol_boringssl_read_bytes";
                  __int16 v20 = 1024;
                  int v21 = 299;
                  __int16 v22 = 2082;
                  unint64_t v23 = v6 + 391;
                  __int16 v24 = 2048;
                  char v25 = v6;
                  __int16 v26 = 1024;
                  *(_DWORD *)uint64_t v27 = 0;
                  *(_WORD *)&v27[4] = 2048;
                  *(void *)&v27[6] = v10;
                  _os_log_debug_impl(&dword_1BA0DE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] failed to claim %d bytes from %p", buf, 0x36u);
                }
              }
            }
          }
          uint64_t v7 = 0;
          *((_DWORD *)v6 + 94) = 0;
          objc_storeStrong((id *)v6 + 46, v9);

          int v8 = v9;
        }
        while (v9);
      }
      else
      {
        uint64_t v7 = 0;
      }
      if ((v6[390] & 2) != 0)
      {
        if ((v6[475] & 1) == 0
          && datapath_logging_enabled
          && g_boringssl_log
          && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
        {
          nw_protocol_boringssl_read_bytes_cold_4();
        }
      }
      else if ((v6[475] & 1) == 0 {
             && g_boringssl_log
      }
             && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_read_bytes_cold_3();
      }
    }
  }

  return v7;
}

uint64_t boringssl_session_get_state(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(unsigned int *)(v1 + 300);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_is_cancelled(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return (*(unsigned __int8 *)(v1 + 556) >> 1) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_is_dtls(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -1252936367 && (uint64_t v1 = *(void *)(a1 + 8)) != 0) {
    return (*(unsigned __int8 *)(v1 + 556) >> 5) & 1;
  }
  else {
    return 1;
  }
}

uint64_t boringssl_session_read(void *a1, void *a2, int a3, int a4)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v5 = a1[1];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  if (a3)
  {
    uint64_t v7 = *(SSL **)(v5 + 400);
    if (v7)
    {
      if (a2 || (a4 & 1) != 0)
      {
        if (a4) {
          uint64_t v16 = SSL_peek(v7, a2, a3);
        }
        else {
          uint64_t v16 = SSL_read(v7, a2, a3);
        }
        uint64_t v6 = v16;
        if ((int)v16 <= 0)
        {
          uint64_t error = SSL_get_error(*(const SSL **)(v5 + 400), v16);
          uint64_t v18 = error;
          if ((error - 5) >= 2)
          {
            if (error == 2)
            {
              ++*(void *)(v5 + 496);
              id WeakRetained = objc_loadWeakRetained((id *)(v5 + 16));
              if (!WeakRetained
                || (uint64_t v28 = WeakRetained,
                    id v29 = objc_loadWeakRetained((id *)(v5 + 16)),
                    char v30 = v29[475],
                    v29,
                    v28,
                    (v30 & 1) == 0))
              {
                id v31 = objc_loadWeakRetained((id *)(v5 + 16));
                if (v31)
                {
                  int v32 = objc_loadWeakRetained((id *)(v5 + 16));
                  char v33 = v32[475] & 1;
                }
                else
                {
                  char v33 = 0;
                }

                if ((v33 & 1) == 0 && datapath_logging_enabled && g_boringssl_log)
                {
                  uint64_t v35 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
                    boringssl_session_read_cold_2();
                  }
                }
              }
            }
            else
            {
              ERR_print_errors_cb((int (__cdecl *)(const char *, size_t, void *))boringssl_session_handshake_error_print, a1);
            }
          }
          else
          {
            id v19 = objc_loadWeakRetained((id *)(v5 + 16));
            if (!v19
              || (__int16 v20 = v19,
                  int v21 = objc_loadWeakRetained((id *)(v5 + 16)),
                  char v22 = v21[475],
                  v21,
                  v20,
                  (v22 & 1) == 0))
            {
              id v23 = objc_loadWeakRetained((id *)(v5 + 16));
              if (v23)
              {
                __int16 v24 = objc_loadWeakRetained((id *)(v5 + 16));
                char v25 = v24[475] & 1;
              }
              else
              {
                char v25 = 0;
              }

              if ((v25 & 1) == 0 && datapath_logging_enabled && g_boringssl_log)
              {
                uint32_t v34 = (id)g_boringssl_log;
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
                  boringssl_session_read_cold_1(v5, v18, v34);
                }
              }
            }
          }
        }
      }
      else
      {
        id v8 = objc_loadWeakRetained((id *)(v5 + 16));
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = objc_loadWeakRetained((id *)(v5 + 16));
          char v11 = v10[475];

          if (v11) {
            return 0xFFFFFFFFLL;
          }
        }
        id v12 = objc_loadWeakRetained((id *)(v5 + 16));
        if (v12)
        {
          uint64_t v13 = objc_loadWeakRetained((id *)(v5 + 16));
          BOOL v14 = (v13[475] & 1) == 0;
        }
        else
        {
          BOOL v14 = 1;
        }

        uint64_t v6 = 0xFFFFFFFFLL;
        if (v14 && g_boringssl_log)
        {
          __int16 v26 = (id)g_boringssl_log;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            boringssl_session_read_cold_3(v5, v26);
          }

          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return v6;
}

int SSL_get_error(const SSL *s, int ret_code)
{
  if (ret_code > 0) {
    return 0;
  }
  unsigned int v5 = ERR_peek_error();
  if (v5)
  {
    if (HIBYTE(v5) == 2) {
      return 5;
    }
    else {
      return 1;
    }
  }
  int result = *((_DWORD *)s->handshake_func + 49);
  if (!ret_code)
  {
    if (result == 6) {
      return 6;
    }
    else {
      return 5;
    }
  }
  if ((result - 11) >= 0xA && result != 4)
  {
    if (result == 3)
    {
      bbio = s->bbio;
      if (BIO_should_write((uint64_t)bbio)) {
        return 3;
      }
      if (!BIO_should_read((uint64_t)bbio)) {
        goto LABEL_26;
      }
    }
    else
    {
      if (result != 2) {
        return 5;
      }
      if (!*(void *)&s->hit)
      {
        bbio = s->wbio;
        if (!BIO_should_read((uint64_t)bbio))
        {
          if (!BIO_should_write((uint64_t)bbio))
          {
LABEL_26:
            if (BIO_should_io_special((uint64_t)bbio))
            {
              int retry_reason = BIO_get_retry_reason(bbio);
              if (retry_reason == 3) {
                int v9 = 8;
              }
              else {
                int v9 = 5;
              }
              if (retry_reason == 2) {
                return 7;
              }
              else {
                return v9;
              }
            }
            return 5;
          }
          return 3;
        }
      }
    }
    return 2;
  }
  return result;
}

unint64_t ERR_peek_error(void)
{
  unint64_t result = (unint64_t)err_get_state();
  if (result)
  {
    int v1 = *(_DWORD *)(result + 388);
    if (v1 == *(_DWORD *)(result + 384)) {
      return 0;
    }
    else {
      return *(unsigned int *)(result + 24 * (((_BYTE)v1 + 1) & 0xF) + 16);
    }
  }
  return result;
}

int SSL_peek(SSL *ssl, void *buf, int num)
{
  if (*(void *)&ssl->hit)
  {
    ERR_put_error(16, 0, 66, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 1313);
    LODWORD(v3) = -1;
  }
  else
  {
    LODWORD(v3) = num;
    int impl = ssl_read_impl(ssl);
    if (impl < 1)
    {
      LODWORD(v3) = impl;
    }
    else if ((int)v3 >= 1)
    {
      handshake_func = ssl->handshake_func;
      if (*((void *)handshake_func + 17) >= (unint64_t)v3) {
        size_t v3 = v3;
      }
      else {
        size_t v3 = *((void *)handshake_func + 17);
      }
      if (buf && v3) {
        memcpy(buf, *((const void **)handshake_func + 16), v3);
      }
    }
  }
  return v3;
}

uint64_t ssl_read_impl(ssl_st *a1)
{
  *((_DWORD *)a1->handshake_func + 49) = 0;
  ERR_clear_error();
  ERR_clear_system_error();
  if (!*(void *)&a1->rwstate)
  {
    int v4 = 226;
    int v5 = 1230;
LABEL_28:
    ERR_put_error(16, 0, v4, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", v5);
    return 0xFFFFFFFFLL;
  }
  handshake_func = a1->handshake_func;
  if (*((_DWORD *)handshake_func + 43) == 2)
  {
    ERR_restore_state(*((void **)handshake_func + 23));
    return 0xFFFFFFFFLL;
  }
  while (2)
  {
    uint64_t v6 = a1->handshake_func;
    if (*((void *)v6 + 17)) {
      return 1;
    }
    if ((*((_WORD *)v6 + 110) & 0x1000) != 0)
    {
      *((_DWORD *)v6 + 49) = 19;
      return 0xFFFFFFFFLL;
    }
    while (1)
    {
      uint64_t v7 = *((void *)a1->handshake_func + 35);
      if (!v7 || (*(_WORD *)(v7 + 1584) & 0x1008) != 0) {
        break;
      }
      uint64_t v8 = SSL_do_handshake(a1);
      if ((v8 & 0x80000000) != 0) {
        return v8;
      }
      if (!v8)
      {
        int v4 = 215;
        int v5 = 1254;
        goto LABEL_28;
      }
    }
    unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[0] = v9;
    v21[1] = v9;
    if ((*(unsigned int (**)(ssl_st *, _OWORD *))(*(void *)&a1->version + 24))(a1, v21))
    {
      uint64_t v10 = *((void *)a1->handshake_func + 35);
      if (!v10 || (int v11 = *(_DWORD *)(v10 + 1584), (v11 & 8) != 0))
      {
        if (!ssl_do_post_handshake((uint64_t)a1, (uint64_t)v21))
        {
          bssl::ssl_set_read_error((bssl *)a1, v15);
          return 0xFFFFFFFFLL;
        }
        (*(void (**)(ssl_st *))(*(void *)&a1->version + 32))(a1);
      }
      else
      {
        *(_DWORD *)(v10 + 1584) = v11 & 0xFFFFEFFF;
      }
      int v14 = 2;
    }
    else
    {
      unsigned __int8 v20 = 50;
      id v19 = 0;
      int v12 = bssl::ssl_open_app_data(a1, (uint64_t)a1->handshake_func + 128, &v19, &v20);
      char v18 = -86;
      uint64_t v13 = bssl::ssl_handle_open_record((bssl *)a1, &v18, v12, v19, v20);
      if ((int)v13 < 1)
      {
        int v14 = 1;
        uint64_t v1 = v13;
      }
      else if (v18)
      {
        int v14 = 0;
      }
      else
      {
        uint64_t v16 = a1->handshake_func;
        if (!*((void *)v16 + 17)) {
          ssl_read_impl();
        }
        int v14 = 0;
        *((unsigned char *)v16 + 212) = 0;
      }
    }
    if (v14 != 1) {
      continue;
    }
    return v1;
  }
}

uint64_t bssl::ssl_handle_open_record(bssl *a1, unsigned char *a2, int a3, ssl_st *a4, int a5)
{
  *a2 = 0;
  uint64_t v6 = *((void *)a1 + 6);
  unint64_t v7 = *(unsigned __int16 *)(v6 + 92);
  if (a3 == 2) {
    goto LABEL_4;
  }
  if (v7 < (unint64_t)a4) {
    abort();
  }
  *(_WORD *)(v6 + 88) += (_WORD)a4;
  LOWORD(v7) = v7 - (_WORD)a4;
  *(_WORD *)(v6 + 92) = v7;
  *(_WORD *)(v6 + 94) -= (_WORD)a4;
  if (!a3) {
    return 1;
  }
LABEL_4:
  if (!(_WORD)v7)
  {
    *(_WORD *)(v6 + 88) = *(_WORD *)(v6 + 90);
    *(_WORD *)(v6 + 92) = 0;
    *(_WORD *)(v6 + 94) = *(_WORD *)(v6 + 96);
  }
  uint64_t v8 = 1;
  switch(a3)
  {
    case 0:
      return v8;
    case 1:
      goto LABEL_9;
    case 2:
      uint64_t buffer_extend_to = bssl::ssl_read_buffer_extend_to(a1, (unint64_t)a4);
      if ((int)buffer_extend_to < 1)
      {
        uint64_t v8 = buffer_extend_to;
      }
      else
      {
        uint64_t v8 = 1;
LABEL_9:
        *a2 = 1;
      }
      break;
    case 3:
      uint64_t v8 = 0;
      *(_DWORD *)(v6 + 196) = 6;
      return v8;
    case 4:
      if (a5) {
        bssl::ssl_send_alert(a1, (ssl_st *)2, a5);
      }
      return 0xFFFFFFFFLL;
    default:
      bssl::ssl_handle_open_record();
  }
  return v8;
}

uint64_t bssl::tls_open_record(bssl *a1, char *a2, uint64_t a3, unsigned __int8 **a4, ssl_st *a5, unsigned __int16 *a6, unint64_t a7)
{
  *a4 = 0;
  if (*(_DWORD *)(*((void *)a1 + 6) + 172) == 1) {
    return 3;
  }
  if (!bssl::tls_can_accept_handshake_data(a1, a5, (unsigned __int8 *)a3)) {
    return 4;
  }
  int v47 = a6;
  unint64_t v48 = a7;
  char v46 = -86;
  unsigned __int16 v45 = -21846;
  unsigned __int16 v44 = -21846;
  if (!CBS_get_u8(&v47, &v46)
    || !CBS_get_u16(&v47, &v45)
    || !CBS_get_u16(&v47, &v44))
  {
    uint64_t v20 = 5;
    goto LABEL_13;
  }
  int v15 = *(bssl::SSLAEADContext **)(*((void *)a1 + 6) + 264);
  int v16 = v45;
  if (*(void *)v15)
  {
    if (v16 == bssl::SSLAEADContext::RecordVersion(v15)) {
      goto LABEL_9;
    }
LABEL_15:
    ERR_put_error(16, 0, 247, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", 231);
    char v19 = 70;
    goto LABEL_16;
  }
  if ((v45 & 0xFF00) != 0x300) {
    goto LABEL_15;
  }
LABEL_9:
  if (v44 < 0x4141uLL)
  {
    uint64_t v42 = (char *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
    if (CBS_get_bytes((uint64_t *)&v47, &v42, v44))
    {
      if (a7 >= 5) {
        uint64_t v21 = 5;
      }
      else {
        uint64_t v21 = a7;
      }
      bssl::ssl_do_msg_callback((uint64_t)a1, 0, 256, (uint64_t)a6, v21);
      *a4 = (unsigned __int8 *)(a7 - v48);
      if ((*(_WORD *)(*((void *)a1 + 6) + 220) & 2) != 0
        && bssl::ssl_protocol_version(a1, v22) >= 0x304
        && SSL_in_init((uint64_t)a1)
        && v46 == 20
        && v44 == 1
        && *v42 == 1)
      {
        uint64_t v24 = *((void *)a1 + 6);
        unsigned int v25 = ++*(unsigned char *)(v24 + 210);
        if (v25 < 0x21) {
          return 1;
        }
        int v26 = 219;
        int v27 = 263;
        goto LABEL_67;
      }
      uint64_t v28 = *((void *)a1 + 6);
      if ((*(_WORD *)(v28 + 220) & 1) == 0 || **(void **)(v28 + 264) || v46 != 23)
      {
        if (*(void *)v28 == -1)
        {
          ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", 280);
          char v19 = 80;
          goto LABEL_16;
        }
        BOOL v29 = bssl::SSLAEADContext::Open(*(bssl::SSLAEADContext **)(v28 + 264), (char **)a3, v46, v45, *(void *)v28, (int)a6, v21, v23, v42, v43);
        uint64_t v31 = *((void *)a1 + 6);
        __int16 v32 = *(_WORD *)(v31 + 220);
        if (v29)
        {
          *(_WORD *)(v31 + 220) = v32 & 0xFFFE;
          char v33 = (void *)*((void *)a1 + 6);
          ++*v33;
          uint32_t v34 = (bssl::SSLAEADContext *)v33[33];
          if (*(void *)v34)
          {
            unsigned int v35 = bssl::SSLAEADContext::ProtocolVersion(v34);
            unint64_t v36 = 0x4000;
            if (v35 > 0x303) {
              unint64_t v36 = 16385;
            }
            unint64_t v37 = *(void *)(a3 + 8);
            if (v37 <= v36)
            {
              if (v35 >= 0x304)
              {
                if (v46 == 23)
                {
                  while (v37)
                  {
                    int v38 = *(unsigned __int8 *)(*(void *)a3 + v37 - 1);
                    char v46 = *(unsigned char *)(*(void *)a3 + v37 - 1);
                    if (v37 >= v37 - 1) {
                      --v37;
                    }
                    *(void *)(a3 + 8) = v37;
                    if (v38) {
                      goto LABEL_57;
                    }
                  }
                  ERR_put_error(16, 0, 139, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", 327);
                  char v19 = 51;
                }
                else
                {
                  ERR_put_error(16, 0, 251, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", 320);
                  char v19 = 50;
                }
                goto LABEL_16;
              }
LABEL_57:
              uint64_t v39 = *((void *)a1 + 6);
              if (v37)
              {
                *(unsigned char *)(v39 + 210) = 0;
              }
              else
              {
                unsigned int v40 = ++*(unsigned char *)(v39 + 210);
                if (v40 >= 0x21)
                {
                  int v26 = 219;
                  int v27 = 340;
LABEL_67:
                  ERR_put_error(16, 0, v26, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", v27);
                  char v19 = 10;
                  goto LABEL_16;
                }
              }
              char v41 = v46;
              if (v46 != 22)
              {
                if (v46 == 21) {
                  return bssl::ssl_process_alert(a1, a5, *(unsigned __int8 **)a3, v37);
                }
                if (bssl::tls_has_unprocessed_handshake_data(a1, v30))
                {
                  int v26 = 225;
                  int v27 = 357;
                  goto LABEL_67;
                }
                uint64_t v39 = *((void *)a1 + 6);
                char v41 = v46;
              }
              uint64_t result = 0;
              *(unsigned char *)(v39 + 211) = 0;
              *a2 = v41;
              return result;
            }
          }
          else
          {
            unint64_t v37 = *(void *)(a3 + 8);
            if (v37 <= 0x4000) {
              goto LABEL_57;
            }
          }
          int v17 = 136;
          int v18 = 312;
          goto LABEL_11;
        }
        if ((v32 & 1) == 0 || !**(void **)(v31 + 264))
        {
          ERR_put_error(16, 0, 139, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", 294);
          char v19 = 20;
          goto LABEL_16;
        }
        ERR_clear_error();
      }
      return bssl::skip_early_data(a1, a5, *a4);
    }
    uint64_t v20 = v44 + 5;
LABEL_13:
    *a4 = (unsigned __int8 *)v20;
    return 2;
  }
  int v17 = 146;
  int v18 = 238;
LABEL_11:
  ERR_put_error(16, 0, v17, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", v18);
  char v19 = 22;
LABEL_16:
  LOBYTE(a5->version) = v19;
  return 4;
}

uint64_t CBS_get_u16(unsigned __int16 **a1, _WORD *a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  BOOL v3 = v2 >= 2;
  unint64_t v4 = v2 - 2;
  if (!v3) {
    return 0;
  }
  uint64_t v6 = (*a1)++;
  a1[1] = (unsigned __int16 *)v4;
  *a2 = bswap32(*v6) >> 16;
  return 1;
}

uint64_t CBS_get_u8(void *a1, unsigned char *a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  BOOL v3 = (unsigned char *)(*a1)++;
  a1[1] = v2 - 1;
  *a2 = *v3;
  return 1;
}

uint64_t bssl::tls_can_accept_handshake_data(bssl *this, const ssl_st *a2, unsigned __int8 *a3)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v5;
  v11[1] = v5;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  if (bssl::parse_message((uint64_t)this, (uint64_t)v11, (uint64_t *)&v10))
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", 523);
    char v7 = 80;
LABEL_5:
    uint64_t result = 0;
    LOBYTE(a2->version) = v7;
    return result;
  }
  unint64_t v8 = v10;
  if (v8 > bssl::ssl_max_handshake_message_len(this, v6) + 4)
  {
    ERR_put_error(16, 0, 150, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", 530);
    char v7 = 47;
    goto LABEL_5;
  }
  return 1;
}

uint64_t bssl::tls_get_message(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = bssl::parse_message(a1, a2, &v8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    __int16 v6 = *(_WORD *)(v5 + 220);
    if ((v6 & 0x10) == 0)
    {
      if (!*(unsigned char *)a2)
      {
        bssl::ssl_do_msg_callback(a1, 0, 22, *(void *)(a2 + 24), *(void *)(a2 + 32));
        uint64_t v5 = *(void *)(a1 + 48);
        __int16 v6 = *(_WORD *)(v5 + 220);
      }
      *(_WORD *)(v5 + 220) = v6 | 0x10;
    }
  }
  return v4;
}

uint64_t bssl::parse_message(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(uint64_t **)(*(void *)(a1 + 48) + 224);
  if (v4
    && (unsigned int v13 = -1431655766,
        uint64_t v8 = v4,
        uint64_t v7 = *v4,
        v14[0] = v8[1],
        v14[1] = v7,
        CBS_get_u8(v14, (unsigned char *)(a2 + 1)))
    && CBS_get_u24(v14, (int *)&v13))
  {
    uint64_t result = CBS_get_bytes(v14, (void *)(a2 + 8), v13);
    if (result)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = v13 + 4;
      *(void *)(a2 + 24) = *(void *)(*(void *)(v10 + 224) + 8);
      *(void *)(a2 + 32) = v11;
      *(unsigned char *)a2 = (*(unsigned char *)(v10 + 220) & 8) != 0;
      return 1;
    }
    uint64_t v12 = v13 + 4;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v12 = 4;
  }
  *a3 = v12;
  return result;
}

uint64_t bssl::ssl_max_handshake_message_len(bssl *this, const ssl_st *a2)
{
  if (SSL_in_init((uint64_t)this))
  {
    if (*((unsigned char *)this + 180) & 1) == 0 || (*(unsigned char *)(*((void *)this + 1) + 300))
    {
      unsigned int v5 = *((_DWORD *)this + 38);
      if (v5 <= 0x4000) {
        return 0x4000;
      }
      else {
        return v5;
      }
    }
    else
    {
      return 0x4000;
    }
  }
  else if (bssl::ssl_protocol_version(this, v3) >= 0x304)
  {
    if (*((unsigned char *)this + 180)) {
      return 1;
    }
    else {
      return 0x4000;
    }
  }
  else
  {
    return 0;
  }
}

BOOL SSL_in_init(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 280);
  return v1 && ((*(_DWORD *)(v1 + 1584) >> 3) & 1) == 0;
}

uint64_t bssl::ssl_protocol_version(bssl *this, const ssl_st *a2)
{
  if ((*(_WORD *)(*((void *)this + 6) + 220) & 2) == 0) {
    bssl::ssl_protocol_version();
  }
  uint64_t result = *((unsigned __int16 *)this + 8);
  if ((result - 769) >= 4)
  {
    if (result == 65277)
    {
      return 771;
    }
    else
    {
      if (result != 65279) {
        bssl::ssl_protocol_version();
      }
      return 770;
    }
  }
  return result;
}

uint64_t CBS_get_bytes(uint64_t *a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  BOOL v4 = v3 >= a3;
  unint64_t v5 = v3 - a3;
  if (!v4) {
    return 0;
  }
  uint64_t v7 = *a1;
  *a1 += a3;
  a1[1] = v5;
  *a2 = v7;
  a2[1] = a3;
  return 1;
}

uint64_t bssl::ssl_open_app_data(void *a1, uint64_t a2, void *a3, unsigned char *a4)
{
  *a3 = 0;
  uint64_t v5 = a1[6];
  if (*(_DWORD *)(v5 + 172) == 2)
  {
    ERR_restore_state(*(void **)(v5 + 184));
    *a4 = 0;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    if (result != 4) {
      return result;
    }
    uint64_t v8 = a1[6];
    *(_DWORD *)(v8 + 172) = 2;
    long long v9 = (uint64_t *)(v8 + 184);
    uint64_t v10 = ERR_save_state();
    std::unique_ptr<err_save_state_st,bssl::internal::Deleter>::reset[abi:ne180100](v9, (uint64_t)v10);
  }
  return 4;
}

uint64_t bssl::tls_open_app_data(uint64_t a1, ssl_st *a2, unsigned __int8 **a3, ssl_st *a4, unsigned __int16 *a5, unint64_t a6)
{
  if ((bssl::ssl_can_read((bssl *)a1, a2) & 1) == 0) {
    bssl::tls_open_app_data();
  }
  if (!**(void **)(*(void *)(a1 + 48) + 264)) {
    bssl::tls_open_app_data();
  }
  char v22 = -86;
  long long v21 = 0uLL;
  uint64_t result = bssl::tls_open_record((bssl *)a1, &v22, (uint64_t)&v21, a3, a4, a5, a6);
  if (!result)
  {
    BOOL v14 = (*(unsigned char *)(a1 + 180) & 1) != 0 && SSL_in_early_data(a1) != 0;
    if (v22 != 23)
    {
      if (v22 == 22)
      {
        if ((*(unsigned char *)(a1 + 180) & 1) != 0 && bssl::ssl_protocol_version((bssl *)a1, v13) <= 0x303)
        {
          ERR_put_error(16, 0, 182, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_pkt.cc", 330);
          char v15 = 100;
LABEL_19:
          LOBYTE(a4->version) = v15;
          return 4;
        }
        if ((bssl::tls_append_handshake_data(a1, (const void *)v21, *((size_t *)&v21 + 1)) & 1) == 0)
        {
          char v15 = 80;
          goto LABEL_19;
        }
        return 1;
      }
      int v19 = 225;
      int v20 = 343;
LABEL_16:
      ERR_put_error(16, 0, v19, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_pkt.cc", v20);
      char v15 = 10;
      goto LABEL_19;
    }
    uint64_t v16 = *((void *)&v21 + 1);
    if (v14)
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 280);
      uint64_t v18 = *(unsigned __int16 *)(v17 + 1590);
      if (*((void *)&v21 + 1) > (unint64_t)(14336 - v18))
      {
        int v19 = 300;
        int v20 = 350;
        goto LABEL_16;
      }
      *(_WORD *)(v17 + 1590) = v18 + WORD4(v21);
    }
    if (v16)
    {
      uint64_t result = 0;
      *(_OWORD *)&a2->version = v21;
      return result;
    }
    return 1;
  }
  return result;
}

uint64_t bssl::ssl_can_read(bssl *this, const ssl_st *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 6) + 280);
  if (!v2) {
    return 1;
  }
  unsigned int v3 = *(_DWORD *)(v2 + 1584);
  if ((v3 & 8) != 0) {
    return 1;
  }
  else {
    return (v3 >> 12) & 1;
  }
}

uint64_t bssl::ssl_record_prefix_len(unsigned __int8 **this, const ssl_st *a2)
{
  if (SSL_is_dtls(this)) {
    uint64_t v3 = 13;
  }
  else {
    uint64_t v3 = 5;
  }
  return bssl::SSLAEADContext::ExplicitNonceLen(*((bssl::SSLAEADContext **)this[6] + 33)) + v3;
}

uint64_t bssl::SSLAEADContext::ExplicitNonceLen(bssl::SSLAEADContext *this)
{
  if (*((unsigned char *)this + 609)) {
    return *((unsigned __int8 *)this + 605);
  }
  else {
    return 0;
  }
}

uint64_t bssl::ssl_read_buffer_extend_to(bssl *this, unint64_t a2)
{
  BOOL v4 = (_WORD *)*((void *)this + 6);
  if (!v4[46])
  {
    v4[44] = v4[45];
    v4[46] = 0;
    v4[47] = v4[48];
  }
  if (SSL_is_dtls((unsigned __int8 **)this)) {
    a2 = 16717;
  }
  __int16 v6 = (bssl::SSLBuffer *)(*((void *)this + 6) + 80);
  int v7 = bssl::ssl_record_prefix_len((unsigned __int8 **)this, v5);
  if (!bssl::SSLBuffer::EnsureCap(v6, v7, a2)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((void *)this + 3))
  {
    ERR_put_error(16, 0, 119, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_buffer.cc", 213);
    return 0xFFFFFFFFLL;
  }
  int is_dtls = SSL_is_dtls((unsigned __int8 **)this);
  uint64_t v9 = *((void *)this + 6);
  if (is_dtls)
  {
    if (*(_WORD *)(v9 + 92))
    {
      int v10 = 68;
      int v11 = 156;
LABEL_15:
      ERR_put_error(16, 0, v10, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_buffer.cc", v11);
      uint64_t result = 0xFFFFFFFFLL;
      goto LABEL_16;
    }
    uint64_t result = BIO_read(*((BIO **)this + 3), (void *)(*(void *)(v9 + 80) + *(unsigned __int16 *)(v9 + 88)), *(unsigned __int16 *)(v9 + 94));
    if ((int)result > 0)
    {
      uint64_t v14 = *(unsigned __int16 *)(v9 + 92);
      if ((unint64_t)*(unsigned __int16 *)(v9 + 94) - v14 < result) {
LABEL_28:
      }
        abort();
      *(_WORD *)(v9 + 92) = v14 + result;
      return 1;
    }
  }
  else
  {
    if (a2 > *(unsigned __int16 *)(v9 + 94))
    {
      int v10 = 121;
      int v11 = 175;
      goto LABEL_15;
    }
    unint64_t v15 = *(unsigned __int16 *)(v9 + 92);
    if (a2 <= v15) {
      return 1;
    }
    while (1)
    {
      uint64_t result = BIO_read(*((BIO **)this + 3), (void *)(*(void *)(v9 + 80) + *(unsigned __int16 *)(v9 + 88) + v15), a2 - v15);
      if ((int)result <= 0) {
        break;
      }
      uint64_t v16 = *(unsigned __int16 *)(v9 + 92);
      if ((unint64_t)*(unsigned __int16 *)(v9 + 94) - v16 < result) {
        goto LABEL_28;
      }
      unsigned __int16 v17 = v16 + result;
      *(_WORD *)(v9 + 92) = v16 + result;
      unint64_t v15 = (unsigned __int16)(v16 + result);
      uint64_t result = 1;
      if (a2 <= v17) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 6) + 196) = 2;
LABEL_16:
  unsigned int v13 = (_WORD *)*((void *)this + 6);
  if (!v13[46])
  {
    v13[44] = v13[45];
    v13[46] = 0;
    v13[47] = v13[48];
  }
  return result;
}

uint64_t SSL_is_dtls(unsigned __int8 **a1)
{
  return **a1;
}

int BIO_read(BIO *b, void *data, int len)
{
  if (!b || !b->method || (bread = b->method->bread) == 0)
  {
    int v6 = 115;
    int v7 = 129;
LABEL_9:
    ERR_put_error(17, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/bio.c", v7);
    return -2;
  }
  if (!LODWORD(b->cb_arg))
  {
    int v6 = 114;
    int v7 = 133;
    goto LABEL_9;
  }
  if (len < 1) {
    return 0;
  }
  int result = ((uint64_t (*)(BIO *, void *))bread)(b, data);
  if (result >= 1) {
    b->next_bio = (bio_st *)((char *)b->next_bio + result);
  }
  return result;
}

uint64_t boringssl_bio_read(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(v3 + 8))(*(void *)v3);
    if ((int)result > 0) {
      return result;
    }
    BIO_set_retry_read(a1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t bssl::SSLBuffer::EnsureCap(bssl::SSLBuffer *this, int a2, unint64_t a3)
{
  if (a3 >= 0x10000)
  {
    int v3 = 68;
    int v4 = 68;
LABEL_3:
    ERR_put_error(16, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_buffer.cc", v4);
    return 0;
  }
  if (*((unsigned __int16 *)this + 7) < a3)
  {
    if (a3 <= 5)
    {
      uint64_t v12 = 0;
      int v11 = (char *)this + 18;
      LOWORD(v9) = a3;
    }
    else
    {
      if (a3 <= 0x4145) {
        uint64_t v9 = 16709;
      }
      else {
        uint64_t v9 = a3;
      }
      int v10 = (char *)malloc_type_malloc(v9 + 7, 0x8BDA0CE4uLL);
      if (!v10)
      {
        int v3 = 65;
        int v4 = 99;
        goto LABEL_3;
      }
      int v11 = v10;
      uint64_t v12 = (-a2 - (int)v10) & 7;
    }
    if (*((_WORD *)this + 6)) {
      memmove(&v11[v12], (const void *)(*(void *)this + *((unsigned __int16 *)this + 4)), *((unsigned __int16 *)this + 6));
    }
    if (*((unsigned char *)this + 23)) {
      free(*(void **)this);
    }
    *(void *)this = v11;
    *((unsigned char *)this + 23) = a3 > 5;
    *((_WORD *)this + 4) = v12;
    *((_WORD *)this + 7) = v9;
    *((_WORD *)this + 8) = v9;
    *((_WORD *)this + 5) = v12;
  }
  return 1;
}

int *ERR_clear_system_error()
{
  uint64_t result = __error();
  *uint64_t result = 0;
  return result;
}

void ERR_clear_error(void)
{
  state = err_get_state();
  if (state)
  {
    uint64_t v1 = state;
    for (uint64_t i = 0; i != 48; i += 3)
    {
      int v3 = &v1[i];
      free((void *)v1[i + 1]);
      *int v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    free((void *)v1[49]);
    v1[48] = 0;
    v1[49] = 0;
  }
}

void *err_get_state()
{
  thread_local = CRYPTO_get_thread_local(0);
  if (!thread_local)
  {
    uint64_t v2 = malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
    thread_local = v2;
    if (v2)
    {
      v2[23] = 0u;
      v2[24] = 0u;
      v2[21] = 0u;
      v2[22] = 0u;
      v2[19] = 0u;
      v2[20] = 0u;
      v2[17] = 0u;
      v2[18] = 0u;
      v2[15] = 0u;
      v2[16] = 0u;
      v2[13] = 0u;
      v2[14] = 0u;
      v2[11] = 0u;
      v2[12] = 0u;
      v2[9] = 0u;
      v2[10] = 0u;
      v2[7] = 0u;
      v2[8] = 0u;
      v2[5] = 0u;
      v2[6] = 0u;
      v2[3] = 0u;
      v2[4] = 0u;
      v2[1] = 0u;
      v2[2] = 0u;
      _OWORD *v2 = 0u;
      if (!CRYPTO_set_thread_local(0, (uint64_t)v2, (void (*)(uint64_t))err_state_free)) {
        return 0;
      }
    }
  }
  return thread_local;
}

void *CRYPTO_get_thread_local(int a1)
{
  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init)) {
    abort();
  }
  if (!g_thread_local_key_created) {
    return 0;
  }
  uint64_t result = pthread_getspecific(g_thread_local_key);
  if (result) {
    return (void *)result[a1];
  }
  return result;
}

uint64_t bssl::SSLAEADContext::RecordVersion(bssl::SSLAEADContext *this)
{
  if (*((_WORD *)this + 303))
  {
    if (bssl::SSLAEADContext::ProtocolVersion(this) > 0x303) {
      return 771;
    }
    else {
      return (unsigned __int16)*((_WORD *)this + 303);
    }
  }
  else
  {
    if (*(void *)this) {
      bssl::SSLAEADContext::RecordVersion();
    }
    if (*((unsigned char *)this + 608)) {
      return (unsigned __int16)-257;
    }
    else {
      return 769;
    }
  }
}

uint64_t bssl::SSLAEADContext::ProtocolVersion(bssl::SSLAEADContext *this)
{
  unsigned __int16 v2 = -21846;
  if ((bssl::ssl_protocol_version_from_wire((bssl *)&v2, (unsigned __int16 *)*((unsigned __int16 *)this + 303)) & 1) == 0) {
    bssl::SSLAEADContext::ProtocolVersion();
  }
  return v2;
}

uint64_t bssl::ssl_protocol_version_from_wire(bssl *this, unsigned __int16 *a2)
{
  if ((a2 - 769) < 4) {
    goto LABEL_6;
  }
  if (a2 == 65277)
  {
    LOWORD(a2) = 771;
    goto LABEL_6;
  }
  if (a2 == 65279)
  {
    LOWORD(a2) = 770;
LABEL_6:
    *(_WORD *)this = (_WORD)a2;
    return 1;
  }
  return 0;
}

uint64_t BIO_should_read(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 1;
}

uint64_t nw_protocol_boringssl_read_frames(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  int v6 = v5;
  if (!a3)
  {
LABEL_18:
    uint64_t v7 = 0;
    goto LABEL_19;
  }
  if boringssl_session_get_state(v5[42]) > 3 || (boringssl_session_is_cancelled(v6[42]))
  {
    uint64_t v7 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }
  if (!a2 || (uint64_t v8 = *(void *)(a2 + 24)) == 0 || !*(void *)(v8 + 80))
  {
    if ((*((unsigned char *)v6 + 475) & 1) == 0
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      nw_protocol_boringssl_read_frames_cold_1();
    }
    goto LABEL_18;
  }
  v14[0] = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = 0xAAAAAAAAAAAAAAAALL;
  nw_frame_array_init();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, void *))(*(void *)(a2 + 24) + 80))(a2, v6 + 1, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v14);
  *a3 = 0;
  uint64_t v9 = nw_frame_array_first();
  if (v9)
  {
    int v10 = (void *)v9;
    do
    {
      uint64_t v11 = nw_frame_array_next();
      nw_frame_unclaimed_bytes();
      *a3 = *a3;
      nw_frame_array_remove();
      nw_frame_array_append();
      if (nw_frame_is_wake_packet())
      {
        *((unsigned char *)v6 + 390) |= 0x10u;
        if ((*((unsigned char *)v6 + 475) & 1) == 0)
        {
          if (g_boringssl_log)
          {
            log = g_boringssl_log;
            if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446978;
              uint64_t v16 = "nw_protocol_boringssl_read_frames";
              __int16 v17 = 1024;
              int v18 = 216;
              __int16 v19 = 2082;
              int v20 = (char *)v6 + 391;
              __int16 v21 = 2048;
              char v22 = v6;
              _os_log_impl(&dword_1BA0DE000, log, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Frame with wake flag detected", buf, 0x26u);
            }
          }
        }
      }

      int v10 = (void *)v11;
    }
    while (v11);
  }
LABEL_19:

  return v7;
}

void boringssl_context_message_handler(int a1, int a2, uint64_t a3, char *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (a3 == 256 && a2 == 0 || a7 == 0) {
    return;
  }
  if (*(_DWORD *)a7 != -1252936367) {
    return;
  }
  uint64_t v10 = *(void *)(a7 + 8);
  if (!v10 || a3 == 23 && boringssl_session_get_state(a7) > 1) {
    return;
  }
  boringssl_session_update_flight_time(a7, a1, a5);
  if (*(_DWORD *)a7 != -1252936367) {
    goto LABEL_35;
  }
  uint64_t v15 = *(void *)(a7 + 8);
  if (!v15) {
    goto LABEL_35;
  }
  if ((a3 - 20) < 4)
  {
    uint64_t v16 = off_1E61FD8F8[(int)a3 - 20];
    __int16 v17 = (id *)(v15 + 16);
    id WeakRetained = objc_loadWeakRetained((id *)(v15 + 16));
    if (WeakRetained)
    {
      __int16 v19 = WeakRetained;
      int v20 = objc_loadWeakRetained(v17);
      char v21 = v20[475];

      if (v21) {
        goto LABEL_35;
      }
    }
    id v22 = objc_loadWeakRetained(v17);
    if (v22)
    {
      uint64_t v23 = objc_loadWeakRetained(v17);
      BOOL v24 = (v23[475] & 1) == 0;
    }
    else
    {
      BOOL v24 = 1;
    }

    if (!v24 || !g_boringssl_log) {
      goto LABEL_35;
    }
    char v33 = (id)g_boringssl_log;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      id v34 = objc_loadWeakRetained(v17);
      if (v34)
      {
        unint64_t v48 = (char *)objc_loadWeakRetained(v17);
        unsigned int v35 = v48 + 391;
      }
      else
      {
        unsigned int v35 = &unk_1BA179713;
      }
      id v45 = objc_loadWeakRetained(v17);
      char v46 = v45;
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "boringssl_context_log_message";
      int v47 = "Writing";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2304;
      *(_WORD *)&buf[18] = 2082;
      if (!a1) {
        int v47 = "Reading";
      }
      *(void *)&buf[20] = v35;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v45;
      *(_WORD *)&buf[38] = 2082;
      uint64_t v57 = v47;
      *(_WORD *)__int16 v58 = 2082;
      *(void *)&v58[2] = v16;
      *(_WORD *)&v58[10] = 2048;
      *(void *)&v58[12] = a5;
      _os_log_debug_impl(&dword_1BA0DE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] %{public}s %{public}s %zu bytes", buf, 0x44u);

      if (v34) {
    }
      }
LABEL_34:

LABEL_35:
    if (a3 == 22)
    {
      if (a4)
      {
        if (a5)
        {
          char v41 = *a4;
          *(unsigned char *)(v10 + 308) = *a4;
          if (*(void *)(v10 + 208))
          {
            if (*(void *)(v10 + 216))
            {
              dispatch_data_t v42 = dispatch_data_create(a4, a5, 0, 0);
              unint64_t v43 = *(NSObject **)(v10 + 208);
              blocuint64_t k = MEMORY[0x1E4F143A8];
              uint64_t v50 = 3221225472;
              uint64_t v51 = __boringssl_context_message_handler_block_invoke;
              uint64_t v52 = &unk_1E61FD7D8;
              LOBYTE(v55) = v41;
              dispatch_data_t v53 = v42;
              uint64_t v54 = v10;
              unsigned __int16 v44 = v42;
              dispatch_async(v43, &block);
            }
          }
        }
      }
    }
    return;
  }
  unsigned int v25 = (id *)(v15 + 16);
  id v26 = objc_loadWeakRetained((id *)(v15 + 16));
  if (!v26
    || (int v27 = v26, v28 = objc_loadWeakRetained(v25),
                   char v29 = v28[475],
                   v28,
                   v27,
                   (v29 & 1) == 0))
  {
    id v30 = objc_loadWeakRetained(v25);
    if (v30)
    {
      uint64_t v31 = objc_loadWeakRetained(v25);
      BOOL v32 = (v31[475] & 1) == 0;
    }
    else
    {
      BOOL v32 = 1;
    }

    if (v32)
    {
      if (g_boringssl_log)
      {
        char v33 = (id)g_boringssl_log;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
          boringssl_context_message_handler_cold_1((uint64_t)v25, a3, (uint64_t)v33, v36, v37, v38, v39, v40, (int)v48, block, v50, (uint64_t)v51, (uint64_t)v52, (uint64_t)v53, v54, v55, *(uint64_t *)buf, *(uint64_t *)&buf[8], *(uint64_t *)&buf[16],
        }
            *(uint64_t *)&buf[24],
            *(uint64_t *)&buf[32],
            (uint64_t)v57,
            *(uint64_t *)v58,
            *(uint64_t *)&v58[8]);
        goto LABEL_34;
      }
    }
  }
}

uint64_t bssl::ssl_do_msg_callback(uint64_t ssl, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(ssl + 64);
  if (v5)
  {
    uint64_t v10 = ssl;
    if (a3)
    {
      if (a3 == 256)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = SSL_version((const SSL *)ssl);
        uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64);
      }
    }
    else
    {
      uint64_t v11 = 2;
    }
    uint64_t v12 = *(void *)(v10 + 72);
    return v5(a2, v11, a3, a4, a5, v10, v12);
  }
  return ssl;
}

uint64_t BIO_set_retry_read(uint64_t result)
{
  *(_DWORD *)(result + 24) |= 9u;
  return result;
}

BOOL bssl::SSLAEADContext::Open(bssl::SSLAEADContext *this, char **a2, char a3, __int16 a4, unint64_t a5, int a6, int a7, int a8, char *a9, unint64_t a10)
{
  uint64_t v11 = a9;
  size_t v12 = a10;
  __dst[5] = *MEMORY[0x1E4F143B8];
  if (!*(void *)this)
  {
    *a2 = a9;
    a2[1] = (char *)a10;
    return 1;
  }
  char v17 = *((unsigned char *)this + 609);
  if ((v17 & 8) != 0)
  {
    unsigned int v19 = 0;
  }
  else
  {
    unint64_t v18 = bssl::SSLAEADContext::MaxOverhead(this);
    unsigned int v19 = a10 - v18;
    if (a10 < v18)
    {
      int v20 = 256;
LABEL_22:
      ERR_put_error(16, 0, 112, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_aead_ctx.cc", v20);
      return 0;
    }
    char v17 = *((unsigned char *)this + 609);
  }
  memset(&__dst[3], 170, 13);
  if ((v17 & 0x10) == 0)
  {
    __dst[3] = bswap64(a5);
    LOBYTE(__dst[4]) = a3;
    BYTE1(__dst[4]) = HIBYTE(a4);
    BYTE2(__dst[4]) = a4;
    if ((v17 & 8) == 0) {
      *(_WORD *)((char *)&__dst[4] + 3) = bswap32(v19) >> 16;
    }
  }
  memset(__dst, 170, 24);
  size_t v22 = *((unsigned __int8 *)this + 604);
  int v23 = *((unsigned __int8 *)this + 604);
  if ((v17 & 4) != 0)
  {
    v22 -= *((unsigned __int8 *)this + 605);
    if (v22) {
      bzero(__dst, v22);
    }
  }
  else if (*((unsigned char *)this + 604))
  {
    memcpy(__dst, (char *)this + 592, *((unsigned __int8 *)this + 604));
  }
  else
  {
    size_t v22 = 0;
  }
  unint64_t v24 = *((unsigned __int8 *)this + 605);
  if (v17)
  {
    size_t v12 = a10 - v24;
    if (a10 < v24)
    {
      int v20 = 283;
      goto LABEL_22;
    }
    if (*((unsigned char *)this + 605)) {
      memcpy((char *)__dst + v22, a9, *((unsigned __int8 *)this + 605));
    }
    uint64_t v11 = &a9[v24];
  }
  else
  {
    if (v24 != 8) {
      bssl::SSLAEADContext::Open();
    }
    *(void *)((char *)__dst + v22) = bswap64(a5);
    unint64_t v24 = 8;
  }
  uint64_t v25 = v22 + v24;
  if ((v17 & 4) != 0)
  {
    if (v25 != v23) {
      bssl::SSLAEADContext::Open();
    }
    if (v23)
    {
      id v26 = (char *)this + 592;
      int v27 = __dst;
      size_t v28 = v22 + v24;
      do
      {
        char v29 = *v26++;
        *v27++ ^= v29;
        --v28;
      }
      while (v28);
    }
  }
  size_t v32 = 0xAAAAAAAAAAAAAAAALL;
  int v30 = EVP_AEAD_CTX_open((unsigned __int8 *)this + 8, v11, &v32, v12, (uint64_t)__dst, v25, v11, v12);
  BOOL result = v30 != 0;
  if (v30)
  {
    size_t v31 = v32;
    if (v12 < v32) {
      size_t v31 = v12;
    }
    *a2 = v11;
    a2[1] = (char *)v31;
  }
  return result;
}

uint64_t bssl::SSLAEADContext::MaxOverhead(bssl::SSLAEADContext *this)
{
  if (*((unsigned char *)this + 609)) {
    uint64_t v1 = *((unsigned __int8 *)this + 605);
  }
  else {
    uint64_t v1 = 0;
  }
  if (*(void *)this)
  {
    uint64_t v2 = EVP_AEAD_CTX_aead((uint64_t)this + 8);
    uint64_t v3 = EVP_AEAD_max_overhead(v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  return v3 + v1;
}

uint64_t EVP_AEAD_max_overhead(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t EVP_AEAD_CTX_aead(uint64_t a1)
{
  return *(void *)a1;
}

id boringssl_context_copy_metadata(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -1252936367 && (uint64_t v1 = *(void *)(a1 + 8)) != 0) {
    return *(id *)(v1 + 520);
  }
  else {
    return 0;
  }
}

BOOL bssl::tls_has_unprocessed_handshake_data(bssl *this, const ssl_st *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if ((*(_WORD *)(v2 + 220) & 0x10) != 0)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[0] = v5;
    v9[1] = v5;
    if (bssl::parse_message((uint64_t)this, (uint64_t)v9, &v8)) {
      unint64_t v3 = v10;
    }
    else {
      unint64_t v3 = 0;
    }
    uint64_t v2 = *((void *)this + 6);
  }
  else
  {
    unint64_t v3 = 0;
  }
  int v6 = *(unint64_t **)(v2 + 224);
  return v6 && *v6 > v3;
}

int SSL_read(SSL *ssl, void *buf, int num)
{
  unsigned int v4 = SSL_peek(ssl, buf, num);
  int v5 = v4;
  if ((int)v4 >= 1)
  {
    handshake_func = ssl->handshake_func;
    unint64_t v7 = *((void *)handshake_func + 17);
    if (v7 < v4) {
      abort();
    }
    *((void *)handshake_func + 16) += v4;
    *((void *)handshake_func + 17) = v7 - v4;
    uint64_t v8 = ssl->handshake_func;
    if (!*((void *)v8 + 17)) {
      bssl::SSLBuffer::DiscardConsumed((_WORD *)v8 + 40);
    }
  }
  return v5;
}

_WORD *bssl::SSLBuffer::DiscardConsumed(_WORD *this)
{
  if (!this[6])
  {
    this[4] = this[5];
    this[6] = 0;
    this[7] = this[8];
  }
  return this;
}

uint64_t CBS_get_u24(uint64_t *a1, int *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = v2 - 3;
  if (v2 < 3) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = *a1;
  *a1 += 3;
  a1[1] = v3;
  do
    int v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 3);
  *a2 = v6;
  return 1;
}

int SSL_version(const SSL *ssl)
{
  return bssl::ssl_version((bssl *)ssl, v1);
}

uint64_t bssl::ssl_version(bssl *this, const ssl_st *a2)
{
  if (!SSL_in_early_data((uint64_t)this) || (*((unsigned char *)this + 180) & 1) != 0) {
    unint64_t v3 = (unsigned __int16 *)((char *)this + 16);
  }
  else {
    unint64_t v3 = (unsigned __int16 *)(*(void *)(*(void *)(*((void *)this + 6) + 280) + 1528) + 4);
  }
  return *v3;
}

uint64_t boringssl_session_in_early_data(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0)
    {
      BOOL result = *(void *)(v1 + 400);
      if (result) {
        return SSL_in_early_data(result) != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SSL_in_early_data(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 280);
  if (v1) {
    return (*(_DWORD *)(v1 + 1584) >> 10) & 1;
  }
  else {
    return 0;
  }
}

uint64_t boringssl_session_update_flight_time(uint64_t result, int a2, uint64_t a3)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t v3 = *(void *)(result + 8);
      if (v3)
      {
        if (*(_DWORD *)(v3 + 300) <= 1u)
        {
          BOOL result = boringssl_session_in_early_data(result);
          if ((result & 1) == 0)
          {
            if ((*(unsigned char *)(v3 + 556) & 1) != 0 && ((*(unsigned __int8 *)(v3 + 558) >> 1) & 1) != a2)
            {
              if (*(void *)(v3 + 440))
              {
                BOOL result = boringssl_helper_get_current_time_ms();
                *(void *)(v3 + 448) += result - *(void *)(v3 + 440);
                *(void *)(v3 + 440) = 0;
                if (!*(void *)(v3 + 464)) {
                  *(void *)(v3 + 464) = result;
                }
              }
            }
            else
            {
              BOOL result = boringssl_helper_get_current_time_ms();
              *(void *)(v3 + 440) = result;
              if (!*(void *)(v3 + 456)) {
                *(void *)(v3 + 456) = *(void *)(v3 + 440);
              }
              *(unsigned char *)(v3 + 558) = *(unsigned char *)(v3 + 558) & 0xFD | (2 * (a2 & 1));
              *(unsigned char *)(v3 + 556) |= 1u;
            }
            int v6 = &OBJC_IVAR___boringssl_concrete_boringssl_ctx_inbound_byte_count;
            if (a2 == 1) {
              int v6 = &OBJC_IVAR___boringssl_concrete_boringssl_ctx_outbound_byte_count;
            }
            *(void *)(v3 + *v6) += a3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::SSLAEADContext::CiphertextLen(bssl::SSLAEADContext *this, unint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  if (*(void *)this)
  {
    uint64_t result = EVP_AEAD_CTX_tag_len((uint64_t *)this + 1, &v11, a3, a4);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t v11 = a4;
  }
  if (*((unsigned char *)this + 609)) {
    uint64_t v8 = *((unsigned __int8 *)this + 605);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v8 + a3 + v11;
  uint64_t v11 = v9;
  if (v9 < a3 || v9 >= 0xFFFF)
  {
    ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_aead_ctx.cc", 207);
    return 0;
  }
  else
  {
    *a2 = v9;
    return 1;
  }
}

uint64_t bssl::SSLAEADContext::SealScatter(uint64_t a1, char *a2, char *a3, char *a4, char a5, __int16 a6, unint64_t a7, int a8, uint64_t a9, uint64_t a10, char *__src, uint64_t a12, void *a13, uint64_t a14)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 609)) {
    uint64_t v20 = *(unsigned __int8 *)(a1 + 605);
  }
  else {
    uint64_t v20 = 0;
  }
  size_t v43 = 0xAAAAAAAAAAAAAAAALL;
  if (*(void *)a1)
  {
    char v21 = a4;
    int v22 = EVP_AEAD_CTX_tag_len((uint64_t *)(a1 + 8), (uint64_t *)&v43, a12, a14);
    a4 = v21;
    if (!v22)
    {
      int v23 = 200;
      int v24 = 322;
LABEL_16:
      ERR_put_error(16, 0, v23, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_aead_ctx.cc", v24);
      return 0;
    }
  }
  else
  {
    size_t v43 = a14;
  }
  uint64_t v25 = &__src[a12];
  if (__src != a3 && v25 > a3 && &a3[a12] > __src || v25 > a2 && &a2[v20] > __src || v25 > a4 && &a4[v43] > __src)
  {
    int v23 = 189;
    int v24 = 328;
    goto LABEL_16;
  }
  uint64_t v27 = (uint64_t)a13;
  if (!*(void *)a1)
  {
    if (a12)
    {
      char v29 = a4;
      memmove(a3, __src, a12);
      a4 = v29;
    }
    if (a14) {
      memmove(a4, a13, a14);
    }
    return 1;
  }
  *(void *)((char *)v45 + 5) = 0xAAAAAAAAAAAAAAAALL;
  v45[0] = 0xAAAAAAAAAAAAAAAALL;
  char v28 = *(unsigned char *)(a1 + 609);
  if ((v28 & 0x10) == 0)
  {
    v45[0] = bswap64(a7);
    LOBYTE(v45[1]) = a5;
    BYTE1(v45[1]) = HIBYTE(a6);
    BYTE2(v45[1]) = a6;
    if ((v28 & 8) == 0) {
      *(_WORD *)((char *)&v45[1] + 3) = bswap32(a12) >> 16;
    }
  }
  memset(__dst, 170, sizeof(__dst));
  size_t v30 = *(unsigned __int8 *)(a1 + 604);
  char v41 = a4;
  if ((v28 & 4) != 0)
  {
    v30 -= *(unsigned __int8 *)(a1 + 605);
    if (!v30) {
      goto LABEL_33;
    }
    uint64_t v40 = (uint64_t)a13;
    char v31 = v28;
    bzero(__dst, v30);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 604))
    {
      size_t v30 = 0;
      if ((v28 & 2) == 0)
      {
LABEL_34:
        if (*(unsigned char *)(a1 + 605) != 8) {
          bssl::SSLAEADContext::SealScatter();
        }
        uint64_t v32 = v27;
        *(void *)((char *)__dst + v30) = bswap64(a7);
        unsigned int v33 = 8;
        if ((v28 & 1) == 0) {
          goto LABEL_47;
        }
        goto LABEL_41;
      }
      goto LABEL_38;
    }
    uint64_t v40 = (uint64_t)a13;
    char v31 = v28;
    memcpy(__dst, (const void *)(a1 + 592), v30);
  }
  char v28 = v31;
  uint64_t v27 = v40;
LABEL_33:
  if ((v28 & 2) == 0) {
    goto LABEL_34;
  }
LABEL_38:
  if ((v28 & 1) == 0) {
    bssl::SSLAEADContext::SealScatter();
  }
  uint64_t result = RAND_bytes((unsigned __int8 *)__dst + v30, *(unsigned __int8 *)(a1 + 605));
  if (result)
  {
    uint64_t v32 = v27;
    unsigned int v33 = *(unsigned __int8 *)(a1 + 605);
    char v28 = *(unsigned char *)(a1 + 609);
    if ((v28 & 1) == 0)
    {
LABEL_47:
      uint64_t v34 = v30 + v33;
      if ((v28 & 4) != 0)
      {
        if (v34 != *(unsigned __int8 *)(a1 + 604)) {
          bssl::SSLAEADContext::SealScatter();
        }
        if (*(unsigned char *)(a1 + 604))
        {
          unsigned int v35 = (char *)(a1 + 592);
          uint64_t v36 = __dst;
          size_t v37 = v30 + v33;
          do
          {
            char v38 = *v35++;
            *v36++ ^= v38;
            --v37;
          }
          while (v37);
        }
      }
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      int v39 = EVP_AEAD_CTX_seal_scatter((uint64_t *)(a1 + 8), a3, v41, &v42, v43, (uint64_t)__dst, v34, __src, a12, v32, a14);
      uint64_t result = v39 != 0;
      if (v39)
      {
        if (v42 != v43) {
          bssl::SSLAEADContext::SealScatter();
        }
      }
      return result;
    }
LABEL_41:
    if ((v28 & 4) != 0) {
      bssl::SSLAEADContext::SealScatter();
    }
    if (v25 > a2 && &a2[v33] > __src)
    {
      int v23 = 189;
      int v24 = 374;
      goto LABEL_16;
    }
    if (v33)
    {
      memcpy(a2, (char *)__dst + *(unsigned __int8 *)(a1 + 604), v33);
      char v28 = *(unsigned char *)(a1 + 609);
    }
    goto LABEL_47;
  }
  return result;
}

uint64_t CRYPTO_set_thread_local(unsigned int a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init)) {
    abort();
  }
  if (!g_thread_local_key_created) {
    goto LABEL_9;
  }
  int v6 = pthread_getspecific(g_thread_local_key);
  if (!v6)
  {
    uint64_t v8 = malloc_type_malloc(0x28uLL, 0x80040B8603338uLL);
    if (!v8) {
      goto LABEL_9;
    }
    int v6 = v8;
    *((void *)v8 + 4) = 0;
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    if (pthread_setspecific(g_thread_local_key, v8))
    {
      free(v6);
      goto LABEL_9;
    }
  }
  if (!pthread_mutex_lock(&g_destructors_lock))
  {
    *((void *)&g_destructors + a1) = a3;
    pthread_mutex_unlock(&g_destructors_lock);
    *((void *)v6 + a1) = a2;
    return 1;
  }
LABEL_9:
  a3(a2);
  return 0;
}

void bssl::tls_open_app_data()
{
}

{
  __assert_rtn("tls_open_app_data", "s3_pkt.cc", 313, "ssl_can_read(ssl)");
}

uint64_t nw_protocol_boringssl_cache_entry_deallocator(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return MEMORY[0x1F41817F8]();
  }
  return result;
}

void nw_protocol_boringssl_frame_input_finalizer(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  int v6 = v5;
  if ((!v5 || (*((unsigned char *)v5 + 475) & 1) == 0)
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_frame_input_finalizer_cold_1();
  }
  if (v4 && v6)
  {
    nw_frame_array_remove();
    uint64_t buffer = nw_frame_get_buffer();
    if (buffer)
    {
      uint64_t v8 = (void *)buffer;
      if (nw_frame_buffer_get_manager()) {
        nw_mem_buffer_free();
      }
      else {
        free(v8);
      }
    }
  }
}

void *nw_protocol_boringssl_allocate_options()
{
  return malloc_type_calloc(1uLL, 0x170uLL, 0x10F00400E22A4EFuLL);
}

BOOL __boringssl_session_is_eap_configured_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2 && *(unsigned char *)(a2 + 360) != 1) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return a2 != 0;
}

uint64_t bssl::compare_uint16_t(bssl *this, unsigned __int16 *a2, const void *a3)
{
  unsigned int v3 = *(unsigned __int16 *)this;
  unsigned int v4 = *a2;
  BOOL v5 = v3 >= v4;
  BOOL v6 = v3 > v4;
  if (v5) {
    return v6;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void bssl::ssl_handshake_new(ssl_st *this@<X0>, bssl::SSL_HANDSHAKE **a2@<X8>)
{
  uint64_t v8 = this;
  unsigned int v4 = (BUF_MEM **)bssl::New<bssl::SSL_HANDSHAKE,ssl_st *&>(&v8);
  uint64_t v7 = v4;
  if (v4 && bssl::SSLTranscript::Init(v4 + 53))
  {
    method = v8->method;
    BOOL v6 = (bssl::SSL_HANDSHAKE *)v7;
    v7[1] = (BUF_MEM *)method;
    if (!method) {
      __assert_rtn("ssl_handshake_new", "handshake.cc", 209, "hs->config");
    }
    uint64_t v7 = 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  *a2 = v6;
  std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSL_HANDSHAKE **)&v7, 0);
}

void sub_1BA0EB088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, bssl::SSL_HANDSHAKE *a9)
{
}

bssl::SSL_HANDSHAKE *bssl::New<bssl::SSL_HANDSHAKE,ssl_st *&>(ssl_st **a1)
{
  uint64_t result = (bssl::SSL_HANDSHAKE *)OPENSSL_malloc(0x668uLL);
  if (result) {
    return bssl::SSL_HANDSHAKE::SSL_HANDSHAKE(result, *a1);
  }
  return result;
}

BOOL bssl::SSLTranscript::Init(BUF_MEM **this)
{
  unint64_t v2 = BUF_MEM_new();
  std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, v2);
  unsigned int v3 = *this;
  if (*this)
  {
    unsigned int v4 = (EVP_MD_CTX *)(this + 1);
    EVP_MD_CTX_cleanup(v4);
    EVP_MD_CTX_init(v4);
  }
  return v3 != 0;
}

unint64_t ec_point_to_bytes(uint64_t a1, uint64_t a2, int a3, char *a4, unint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = ec_point_byte_len(a1, a3);
  if (v9 <= a5)
  {
    unint64_t v10 = v9;
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    ec_felem_to_bytes(a1);
    if (BN_num_bytes((const BIGNUM *)(a1 + 320)) != 0xAAAAAAAAAAAAAAAALL) {
      ec_point_to_bytes_cold_2();
    }
    if (a3 == 4)
    {
      ec_felem_to_bytes(a1);
      if (v14 != BN_num_bytes((const BIGNUM *)(a1 + 320))) {
        ec_point_to_bytes_cold_1();
      }
      char v11 = 4;
    }
    else
    {
      __int16 v16 = -21846;
      *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      int64x2_t v15[2] = v12;
      _OWORD v15[3] = v12;
      v15[0] = v12;
      v15[1] = v12;
      ec_felem_to_bytes(a1);
      char v11 = (*((unsigned char *)v15 + v14 - 1) & 1) + a3;
    }
    *a4 = v11;
  }
  else
  {
    ERR_put_error(15, 0, 100, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/oct.c", 97);
    return 0;
  }
  return v10;
}

uint64_t ec_felem_to_bytes(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
}

void ec_GFp_mont_felem_to_bytes(uint64_t a1, char *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[2] = v7;
  _OWORD v8[3] = v7;
  v8[0] = v7;
  v8[1] = v7;
  bn_from_montgomery_small((unint64_t *)v8, *(int *)(a1 + 328), a4, *(int *)(a1 + 328), a1 + 296);
  ec_GFp_simple_felem_to_bytes(a1, a2, a3, (char *)v8);
}

void ec_GFp_simple_felem_to_bytes(uint64_t a1, char *a2, unint64_t *a3, char *a4)
{
  unint64_t v8 = BN_num_bytes((const BIGNUM *)(a1 + 320));
  bn_words_to_big_endian(a2, v8, a4, *(int *)(a1 + 328));
  *a3 = v8;
}

void bn_from_montgomery_small(unint64_t *a1, unint64_t num, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (num > 9) {
    goto LABEL_11;
  }
  unint64_t v7 = 2 * num;
  if (*(_DWORD *)(a5 + 32) != num || v7 < a4) {
    goto LABEL_11;
  }
  memset(v10, 0, sizeof(v10));
  if (a4) {
    __memcpy_chk();
  }
  if (!bn_from_montgomery_in_place(a1, num, (unint64_t *)v10, v7, a5)) {
LABEL_11:
  }
    abort();
  OPENSSL_cleanse(v10, 16 * num);
}

uint64_t ec_point_byte_len(uint64_t a1, int a2)
{
  if (a2 == 2 || a2 == 4)
  {
    unsigned int v3 = BN_num_bytes((const BIGNUM *)(a1 + 320));
    uint64_t v4 = v3;
    if (a2 != 4) {
      uint64_t v4 = 0;
    }
    return v4 + v3 + 1;
  }
  else
  {
    ERR_put_error(15, 0, 111, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/oct.c", 79);
    return 0;
  }
}

uint64_t RSA_verify_PKCS1_PSS_mgf1(uint64_t a1, const void *a2, const EVP_MD *a3, const EVP_MD *a4, char *a5, int a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = a3;
  }
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&ctx.digest = v12;
  *(_OWORD *)&ctx.flags = v12;
  EVP_MD_CTX_init(&ctx);
  size_t v13 = EVP_MD_size(a3);
  size_t v14 = v13;
  if (a6 == -2) {
    goto LABEL_9;
  }
  if (a6 == -1)
  {
    a6 = v13;
    goto LABEL_9;
  }
  if (a6 > -3)
  {
LABEL_9:
    int v17 = (BN_num_bits(*(const BIGNUM **)(a1 + 8)) - 1) & 7;
    unsigned int v18 = RSA_size((const RSA *)a1);
    if (*a5 >> v17)
    {
      int v15 = 122;
      int v16 = 240;
      goto LABEL_21;
    }
    uint64_t v19 = v18;
    if (v17) {
      uint64_t v20 = a5;
    }
    else {
      uint64_t v20 = a5 + 1;
    }
    if (v17) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = -1;
    }
    unint64_t v22 = v18 - (unint64_t)(v17 == 0);
    if (v22 < v14 + 2 || (a6 & 0x80000000) == 0 && v22 < v14 + 2 + a6)
    {
      int v15 = 113;
      int v16 = 250;
      goto LABEL_21;
    }
    if (v20[v22 - 1] != 188)
    {
      int v15 = 127;
      int v16 = 254;
      goto LABEL_21;
    }
    uint64_t v38 = v21;
    unint64_t v26 = v22 + ~v14;
    uint64_t v27 = (unsigned __int8 *)OPENSSL_malloc(v26);
    int v24 = v27;
    if (v27)
    {
      __s2 = &v20[v26];
      if (PKCS1_MGF1(v27, v26, (const unsigned __int8 *)&v20[v26], v14, v11))
      {
        if (v26)
        {
          char v28 = v24;
          unint64_t v29 = v26;
          do
          {
            char v30 = *v20++;
            *v28++ ^= v30;
            --v29;
          }
          while (v29);
        }
        if (v17) {
          *(unsigned char *)v24 &= 0xFFu >> (8 - v17);
        }
        unint64_t v31 = 0;
        do
        {
          int v32 = *((unsigned __int8 *)v24 + v31);
          unint64_t v33 = v31 + 1;
          if (v31 >= v26 - 1) {
            break;
          }
          ++v31;
        }
        while (!v32);
        if (v32 == 1)
        {
          if (a6 < 0 || ~v14 + v38 + v19 - a6 == v33)
          {
            *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v42 = v36;
            long long v43 = v36;
            *(_OWORD *)md = v36;
            long long v41 = v36;
            if (!EVP_DigestInit_ex(&ctx, a3, 0)
              || !EVP_DigestUpdate(&ctx, &kPSSZeroes, 8uLL)
              || !EVP_DigestUpdate(&ctx, a2, v14)
              || !EVP_DigestUpdate(&ctx, (char *)v24 + v33, v26 - v33)
              || !EVP_DigestFinal_ex(&ctx, md, 0))
            {
              goto LABEL_41;
            }
            if (!v14 || !memcmp(md, __s2, v14))
            {
              uint64_t v23 = 1;
              goto LABEL_22;
            }
            int v34 = 105;
            int v35 = 299;
          }
          else
          {
            int v34 = 138;
            int v35 = 287;
          }
        }
        else
        {
          int v34 = 139;
          int v35 = 281;
        }
        ERR_put_error(4, 0, v34, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/rsa/padding.c", v35);
      }
    }
LABEL_41:
    uint64_t v23 = 0;
    goto LABEL_22;
  }
  int v15 = 138;
  int v16 = 233;
LABEL_21:
  ERR_put_error(4, 0, v15, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/rsa/padding.c", v16);
  uint64_t v23 = 0;
  int v24 = 0;
LABEL_22:
  OPENSSL_free(v24);
  EVP_MD_CTX_cleanup(&ctx);
  return v23;
}

BOOL bssl::ssl_public_key_verify(bssl *a1, uint64_t a2, uint64_t a3, evp_pkey_st *a4, EVP_PKEY *a5, const void *a6, size_t a7)
{
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v17.digest = v14;
  *(_OWORD *)&v17.flags = v14;
  EVP_MD_CTX_init(&v17);
  BOOL v15 = (bssl::setup_ctx(a1, (ssl_st *)&v17, a5, a4, 1) & 1) != 0
     && EVP_DigestVerify((uint64_t)&v17, a2, a3, a6, a7) != 0;
  EVP_MD_CTX_cleanup(&v17);
  return v15;
}

void sub_1BA0EB900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t bssl::setup_ctx(bssl *this, ssl_st *a2, EVP_PKEY *a3, evp_pkey_st *a4, int a5)
{
  int v6 = (int)a4;
  if (!bssl::ssl_pkey_supports_algorithm(this, a3, a4))
  {
    ERR_put_error(16, 0, 245, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_privkey.cc", 185);
    return 0;
  }
  if (v6 == 65281)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    long long v12 = &word_1F1397BF0;
    do
    {
      int v13 = (unsigned __int16)*v12;
      v12 += 16;
      --v11;
    }
    while (v13 != v6);
    if (v11 == -12)
    {
      long long v14 = 0;
      uint64_t v9 = 12;
      goto LABEL_11;
    }
    uint64_t v9 = -v11;
  }
  long long v14 = (const EVP_MD *)(*((uint64_t (**)(void))&bssl::kSignatureAlgorithms + 4 * v9 + 2))();
LABEL_11:
  BOOL v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  if (a5)
  {
    uint64_t result = EVP_DigestVerifyInit((uint64_t)a2, &v15, v14, 0, (uint64_t)a3);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = EVP_DigestSignInit((uint64_t)a2, &v15, v14, 0, (uint64_t)a3);
    if (!result) {
      return result;
    }
  }
  if ((unint64_t)(v9 - 8) < 0xFFFFFFFFFFFFFFFDLL) {
    return 1;
  }
  uint64_t result = EVP_PKEY_CTX_set_rsa_padding(v15);
  if (result)
  {
    uint64_t result = EVP_PKEY_CTX_set_rsa_pss_saltlen(v15);
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t EVP_PKEY_CTX_ctrl(uint64_t *a1, int a2, int a3)
{
  if (!a1 || (uint64_t v3 = *a1) == 0 || (v4 = *(uint64_t (**)(void))(v3 + 112)) == 0)
  {
    int v6 = 101;
    int v7 = 192;
    goto LABEL_11;
  }
  if (a2 != -1 && *(_DWORD *)v3 != a2)
  {
    int v6 = 125;
    int v7 = 196;
    goto LABEL_11;
  }
  int v5 = *((_DWORD *)a1 + 8);
  if (!v5)
  {
    int v6 = 123;
    int v7 = 201;
    goto LABEL_11;
  }
  if (a3 != -1 && (v5 & a3) == 0)
  {
    int v6 = 114;
    int v7 = 206;
LABEL_11:
    ERR_put_error(6, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_ctx.c", v7);
    return 0;
  }

  return v4();
}

uint64_t pkey_rsa_ctrl(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 40);
  switch(a2)
  {
    case 4097:
      if (a3 > 6 || ((1 << a3) & 0x5A) == 0) {
        goto LABEL_21;
      }
      uint64_t v11 = *(void *)(v5 + 24);
      if (a3 == 3 && v11)
      {
        ERR_put_error(6, 0, 115, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_rsa.c", 375);
LABEL_21:
        int v8 = 109;
        int v9 = 403;
        goto LABEL_45;
      }
      if (a3 == 4)
      {
        if ((*(unsigned char *)(a1 + 32) & 0xC0) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        if (a3 != 6) {
          goto LABEL_54;
        }
        if ((*(unsigned char *)(a1 + 32) & 0x18) == 0) {
          goto LABEL_21;
        }
      }
      if (!v11) {
        *(void *)(v5 + 24) = EVP_sha1();
      }
LABEL_54:
      *(_DWORD *)(v5 + 16) = a3;
      return 1;
    case 4098:
      int v7 = *(_DWORD *)(v5 + 16);
      goto LABEL_23;
    case 4099:
    case 4100:
      if (*(_DWORD *)(v5 + 16) != 6)
      {
        int v8 = 116;
        int v9 = 420;
        goto LABEL_45;
      }
      if (a2 == 4100)
      {
        int v7 = *(_DWORD *)(v5 + 40);
LABEL_23:
        *(_DWORD *)a4 = v7;
      }
      else
      {
        if (a3 < -2) {
          return 0;
        }
        *(_DWORD *)(v5 + 4std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = a3;
      }
      return 1;
    case 4101:
      if (a3 <= 255)
      {
        int v8 = 112;
        int v9 = 435;
        goto LABEL_45;
      }
      *(_DWORD *)uint64_t v5 = a3;
      return 1;
    case 4102:
      if (!a4) {
        return 0;
      }
      BN_free(*(BIGNUM **)(v5 + 8));
      *(void *)(v5 + 8) = a4;
      return 1;
    case 4103:
    case 4104:
      if (*(_DWORD *)(v5 + 16) != 4)
      {
        int v8 = 115;
        int v9 = 452;
        goto LABEL_45;
      }
      if (a2 == 4104) {
        goto LABEL_14;
      }
      goto LABEL_37;
    case 4105:
    case 4106:
      if ((*(_DWORD *)(v5 + 16) | 2) != 6)
      {
        int v8 = 113;
        int v9 = 477;
        goto LABEL_45;
      }
      if (a2 != 4106)
      {
        *(void *)(v5 + 32) = a4;
        return 1;
      }
      uint64_t v10 = *(void *)(v5 + 32);
      if (v10) {
        goto LABEL_15;
      }
      goto LABEL_14;
    case 4107:
      if (*(_DWORD *)(v5 + 16) == 4)
      {
        OPENSSL_free(*(void **)(v5 + 56));
        uint64_t v12 = *(void *)(a4 + 8);
        *(void *)(v5 + 56) = *(void *)a4;
        *(void *)(v5 + 64) = v12;
        return 1;
      }
      int v8 = 115;
      int v9 = 493;
      goto LABEL_45;
    case 4108:
      if (*(_DWORD *)(v5 + 16) == 4)
      {
        uint64_t v13 = *(void *)(v5 + 64);
        *(void *)a4 = *(void *)(v5 + 56);
        *(void *)(a4 + 8) = v13;
        return 1;
      }
      int v8 = 115;
      int v9 = 505;
      goto LABEL_45;
    default:
      if (a2 == 1)
      {
        if (!a4 || *(_DWORD *)(v5 + 16) != 3)
        {
LABEL_37:
          *(void *)(v5 + 24) = a4;
          return 1;
        }
        int v8 = 115;
        int v9 = 375;
        goto LABEL_45;
      }
      if (a2 != 2)
      {
        int v8 = 101;
        int v9 = 512;
LABEL_45:
        ERR_put_error(6, 0, v8, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_rsa.c", v9);
        return 0;
      }
LABEL_14:
      uint64_t v10 = *(void *)(v5 + 24);
LABEL_15:
      *(void *)a4 = v10;
      return 1;
  }
}

uint64_t do_sigver_init(uint64_t a1, void *a2, const EVP_MD *a3, ENGINE *a4, uint64_t a5, int a6)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t result = (uint64_t)EVP_PKEY_CTX_new(a5, (uint64_t)a4);
    *(void *)(a1 + 16) = result;
    if (!result) {
      return result;
    }
  }
  CRYPTO_once(&md_pctx_ops_once, md_pctx_ops_init);
  *(void *)(a1 + 24) = &md_pctx_ops_storage;
  uint64_t v12 = *(uint64_t **)(a1 + 16);
  if (a6 == 1)
  {
    uint64_t result = EVP_PKEY_verify_init(v12);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = EVP_PKEY_sign_init(v12);
    if (!result) {
      return result;
    }
  }
  if (!a3)
  {
    uint64_t v14 = 56;
    if (!a6) {
      uint64_t v14 = 40;
    }
    if (*(void *)(**(void **)(a1 + 16) + v14))
    {
      ERR_put_error(6, 0, 119, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/digestsign/digestsign.c", 109);
      return 0;
    }
    goto LABEL_18;
  }
  uint64_t result = EVP_PKEY_CTX_set_signature_md(*(uint64_t **)(a1 + 16));
  if (result)
  {
    uint64_t v13 = 56;
    if (!a6) {
      uint64_t v13 = 40;
    }
    if (!*(void *)(**(void **)(a1 + 16) + v13)
      || (uint64_t result = EVP_DigestInit_ex((EVP_MD_CTX *)a1, a3, a4), result))
    {
LABEL_18:
      if (a2) {
        *a2 = *(void *)(a1 + 16);
      }
      return 1;
    }
  }
  return result;
}

BOOL bssl::ssl_pkey_supports_algorithm(bssl *this, EVP_PKEY *a2, evp_pkey_st *a3)
{
  int v3 = (int)a3;
  uint64_t v6 = -13;
  for (uint64_t i = &dword_1F1397BD8; *((unsigned __int16 *)i - 4) != a3; i += 8)
  {
    if (__CFADD__(v6++, 1)) {
      return 0;
    }
  }
  int v9 = EVP_PKEY_id((uint64_t)a2);
  if (v9 != *(i - 1)) {
    return 0;
  }
  int v11 = v9;
  if ((unint64_t)(v6 + 5) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v12 = EVP_PKEY_size(a2);
    uint64_t v13 = (const EVP_MD *)(*((uint64_t (**)(void))i + 1))();
    if (2 * EVP_MD_size(v13) + 2 > (unint64_t)v12) {
      return 0;
    }
  }
  if (bssl::ssl_protocol_version(this, v10) > 0x302)
  {
    if (v3 != 65281)
    {
      if (bssl::ssl_protocol_version(this, v14) >= 0x304)
      {
        if (v11 == 408)
        {
          if ((unint64_t)(v6 + 1) < 0xFFFFFFFFFFFFFFFDLL) {
            return 0;
          }
          EVP_MD_CTX v17 = (const EC_KEY *)EVP_PKEY_get0_EC_KEY((uint64_t)a2);
          unsigned int v18 = EC_KEY_get0_group(v17);
          if (EC_GROUP_get_curve_name(v18) != *i) {
            return 0;
          }
        }
        else if (v11 == 6 && (unint64_t)(v6 + 5) < 0xFFFFFFFFFFFFFFFDLL)
        {
          return 0;
        }
      }
      return 1;
    }
    return 0;
  }
  return v3 == 65281 || v3 == 515;
}

int RSA_size(const RSA *a1)
{
  if (a1) {
    LODWORD(a1) = BN_num_bytes((const BIGNUM *)a1->version);
  }
  return (int)a1;
}

uint64_t EVP_PKEY_verify_init(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0 && (*(void *)(v1 + 56) || *(void *)(v1 + 64)))
  {
    *((_DWORD *)a1 + 8) = 16;
    return 1;
  }
  else
  {
    ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_ctx.c", 240);
    return 0;
  }
}

uint64_t EVP_PKEY_id(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

void *EVP_PKEY_CTX_new(uint64_t a1, uint64_t a2)
{
  if (!a1 || (uint64_t v3 = *(void *)(a1 + 16)) == 0)
  {
    ERR_put_error(6, 0, 67, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_ctx.c", 116);
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_ctx.c", 122);
    ERR_add_error_dataf("algorithm %d", v6, v7, v8, v9, v10, v11, v12, **(_DWORD **)(a1 + 16));
    return 0;
  }

  return evp_pkey_ctx_new((unsigned int *)a1, a2, v4);
}

uint64_t EVP_DigestVerifyInit(uint64_t a1, void *a2, const EVP_MD *a3, ENGINE *a4, uint64_t a5)
{
  return do_sigver_init(a1, a2, a3, a4, a5, 1);
}

BOOL EVP_DigestVerifyFinal(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)(**(void **)(a1 + 16) + 56))
  {
    *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&ctx.digest = v2;
    *(_OWORD *)&ctx.flagunsigned int s = v2;
    long long v9 = v2;
    long long v10 = v2;
    *(_OWORD *)md = v2;
    long long v8 = v2;
    unsigned int s = -1431655766;
    EVP_MD_CTX_init(&ctx);
    BOOL v3 = EVP_MD_CTX_copy_ex(&ctx, (const EVP_MD_CTX *)a1)
      && EVP_DigestFinal_ex(&ctx, md, &s)
      && EVP_PKEY_verify(*(_DWORD **)(a1 + 16)) != 0;
    EVP_MD_CTX_cleanup(&ctx);
  }
  else
  {
    ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/digestsign/digestsign.c", 186);
    return 0;
  }
  return v3;
}

uint64_t EVP_PKEY_verify(_DWORD *a1)
{
  if (!a1 || !*(void *)a1 || (uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 56)) == 0)
  {
    int v3 = 125;
    int v4 = 250;
LABEL_9:
    ERR_put_error(6, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_ctx.c", v4);
    return 0;
  }
  if (a1[8] != 16)
  {
    int v3 = 126;
    int v4 = 254;
    goto LABEL_9;
  }

  return v1();
}

uint64_t EVP_DigestVerify(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(*(void *)v6 + 56))
  {
    if (EVP_DigestVerifyUpdate(a1, a4, a5))
    {
      return EVP_DigestVerifyFinal(a1);
    }
    return 0;
  }
  long long v8 = *(uint64_t (**)(void))(*(void *)v6 + 64);
  if (!v8)
  {
    ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/digestsign/digestsign.c", 255);
    return 0;
  }

  return v8();
}

uint64_t EVP_DigestVerifyUpdate(uint64_t a1, const void *a2, size_t a3)
{
  if (*(void *)(**(void **)(a1 + 16) + 56))
  {
    return EVP_DigestUpdate((EVP_MD_CTX *)a1, a2, a3);
  }
  else
  {
    ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/digestsign/digestsign.c", 144);
    return 0;
  }
}

uint64_t EVP_PKEY_CTX_set_signature_md(uint64_t *a1)
{
  return EVP_PKEY_CTX_ctrl(a1, -1, 56);
}

int EVP_PKEY_size(EVP_PKEY *pkey)
{
  if (pkey && (ptr = pkey->pkey.ptr) != 0 && (long long v2 = (uint64_t (*)(void))*((void *)ptr + 15)) != 0) {
    return v2();
  }
  else {
    return 0;
  }
}

uint64_t pkey_rsa_verify(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(RSA **)(v11 + 8);
  uint64_t v13 = *(EVP_MD **)(v10 + 24);
  if (!v13)
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    int v17 = EVP_PKEY_size((EVP_PKEY *)v11);
    uint64_t result = setup_tbuf(v10, a1);
    if (!result) {
      return result;
    }
    if (RSA_verify_raw((uint64_t)v12, &v22, *(unsigned __int8 **)(v10 + 48), v17, (uint64_t)a2, a3, *(_DWORD *)(v10 + 16)))BOOL v18 = v22 == a5; {
    else
    }
      BOOL v18 = 0;
    if (v18) {
      return CRYPTO_memcmp(a4, *(char **)(v10 + 48), a5) == 0;
    }
    return 0;
  }
  int v14 = *(_DWORD *)(v10 + 16);
  if (v14 != 6)
  {
    if (v14 == 1)
    {
      int v15 = EVP_MD_type(*(const EVP_MD **)(v10 + 24));
      return RSA_verify(v15, (const unsigned __int8 *)a4, a5, a2, a3, v12);
    }
    return 0;
  }
  uint64_t v19 = *(const EVP_MD **)(v10 + 32);
  int v20 = *(_DWORD *)(v10 + 40);
  uint64_t v21 = *(void *)(v11 + 8);

  return RSA_verify_pss_mgf1(v21, a4, a5, v13, v19, v20, (uint64_t)a2, a3);
}

uint64_t int_rsa_size(uint64_t a1)
{
  return RSA_size(*(const RSA **)(a1 + 8));
}

uint64_t RSA_verify_pss_mgf1(uint64_t a1, const void *a2, uint64_t a3, EVP_MD *md, const EVP_MD *a5, int a6, uint64_t a7, uint64_t a8)
{
  if (EVP_MD_size(md) == a3)
  {
    if (a1) {
      size_t v15 = BN_num_bytes(*(const BIGNUM **)(a1 + 8));
    }
    else {
      size_t v15 = 0;
    }
    size_t v25 = v15;
    BOOL v18 = (unsigned __int8 *)malloc_type_malloc(v15, 0xBE024A50uLL);
    if (v18)
    {
      int v20 = (char *)v18;
      if (RSA_verify_raw(a1, &v25, v18, v19, a7, a8, 3))
      {
        size_t v21 = v25;
        if (a1) {
          uint64_t v22 = BN_num_bytes(*(const BIGNUM **)(a1 + 8));
        }
        else {
          uint64_t v22 = 0;
        }
        if (v21 == v22)
        {
          uint64_t v23 = RSA_verify_PKCS1_PSS_mgf1(a1, a2, md, a5, v20, a6);
LABEL_17:
          free(v20);
          return v23;
        }
        ERR_put_error(4, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", 372);
      }
      uint64_t v23 = 0;
      goto LABEL_17;
    }
    int v16 = 65;
    int v17 = 362;
  }
  else
  {
    int v16 = 125;
    int v17 = 355;
  }
  ERR_put_error(4, 0, v16, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", v17);
  return 0;
}

uint64_t RSA_verify_raw(uint64_t a1, void *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if (!a1)
  {
    int v11 = 67;
    int v12 = 234;
    goto LABEL_19;
  }
  if (BN_num_bytes(*(const BIGNUM **)(a1 + 8)) >= 0x401)
  {
    int v11 = 500;
    int v12 = 238;
LABEL_19:
    ERR_put_error(4, 0, v11, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", v12);
    return 0;
  }
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  char v28 = 0;
  uint64_t v13 = *(const BIGNUM **)(a1 + 8);
  if (!v13 || !*(void *)(a1 + 16))
  {
    int v11 = 144;
    int v12 = 247;
    goto LABEL_19;
  }
  unsigned int v14 = BN_num_bytes(v13);
  if (!RSA_public_key_to_bytes(&v28, &v27, a1) || !v28) {
    return 0;
  }
  uint64_t v15 = ccrsa_import_pub_n();
  int v16 = malloc_type_malloc(24 * v15 + 40, 0xC89EEC74uLL);
  if (!v16)
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      RSA_verify_raw_cold_1();
    }
    return 0;
  }
  int v17 = v16;
  *int v16 = v15;
  BOOL v18 = malloc_type_malloc(8 * v15, 0x100004000313F17uLL);
  uint64_t v19 = malloc_type_malloc(8 * v15, 0x100004000313F17uLL);
  int v20 = v19;
  if (!v18 || !v19)
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      RSA_verify_raw_cold_2();
    }
    free(v17);
    if (v18) {
      free(v18);
    }
    if (v20) {
      free(v20);
    }
    return 0;
  }
  ccn_zero();
  ccn_zero();
  ccn_read_uint();
  if (ccrsa_import_pub() || ccrsa_pub_crypt()) {
    goto LABEL_14;
  }
  if (a7 == 3)
  {
    *a2 = v14;
    ccn_write_uint_padded();
    uint64_t v23 = a3;
    if ((v14 & 0x80000000) == 0)
    {
LABEL_34:
      *a2 = v14;
      uint64_t v21 = 1;
LABEL_43:
      if (v23 != a3 && v23) {
        free(v23);
      }
      goto LABEL_15;
    }
    goto LABEL_39;
  }
  int v24 = (unsigned __int8 *)malloc_type_malloc(v14, 0xA9F1C97BuLL);
  if (v24)
  {
    uint64_t v23 = v24;
    *a2 = v14;
    ccn_write_uint_padded();
    if (a7 != 1)
    {
      int v25 = 143;
      int v26 = 314;
      goto LABEL_42;
    }
    if (RSA_padding_check_PKCS1_type_1(a3, (int)a2, (const unsigned __int8 *)v14, (int)v23, v14))
    {
      unsigned int v14 = *(_DWORD *)a2;
      if ((*(_DWORD *)a2 & 0x80000000) == 0) {
        goto LABEL_34;
      }
    }
LABEL_39:
    int v25 = 136;
    int v26 = 319;
LABEL_42:
    ERR_put_error(4, 0, v25, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", v26);
    uint64_t v21 = 0;
    goto LABEL_43;
  }
  ERR_put_error(4, 0, 65, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", 295);
LABEL_14:
  uint64_t v21 = 0;
LABEL_15:
  if (v28)
  {
    OPENSSL_free(v28);
    char v28 = 0;
  }
  free(v18);
  free(v20);
  free(v17);
  return v21;
}

uint64_t RSA_public_key_to_bytes(void *a1, void *a2, uint64_t a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v6;
  v8[2] = v6;
  v8[0] = v6;
  CBB_zero(v8);
  if (CBB_init((uint64_t)v8, 0)
    && RSA_marshal_public_key((uint64_t *)v8, a3)
    && CBB_finish((uint64_t)v8, a1, a2))
  {
    return 1;
  }
  ERR_put_error(4, 0, 121, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/rsa_extra/rsa_asn1.c", 145);
  CBB_cleanup((uint64_t)v8);
  return 0;
}

uint64_t RSA_marshal_public_key(uint64_t *a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = v4;
  v6[2] = v4;
  v6[0] = v4;
  if (CBB_add_asn1(a1, (uint64_t)v6, 0x20000010u)
    && marshal_integer((uint64_t *)v6, *(const BIGNUM **)(a2 + 8))
    && marshal_integer((uint64_t *)v6, *(const BIGNUM **)(a2 + 16))
    && CBB_flush(a1))
  {
    return 1;
  }
  ERR_put_error(4, 0, 121, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/rsa_extra/rsa_asn1.c", 132);
  return 0;
}

uint64_t marshal_integer(uint64_t *a1, const BIGNUM *a2)
{
  if (a2)
  {
    return BN_marshal_asn1(a1, a2);
  }
  else
  {
    ERR_put_error(4, a2, 144, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/rsa_extra/rsa_asn1.c", 84);
    return 0;
  }
}

uint64_t marshal_integer_0(uint64_t *a1, const BIGNUM *a2)
{
  if (a2)
  {
    return BN_marshal_asn1(a1, a2);
  }
  else
  {
    ERR_put_error(10, a2, 67, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/dsa/dsa_asn1.c", 145);
    return 0;
  }
}

uint64_t BN_marshal_asn1(uint64_t *a1, const BIGNUM *a2)
{
  if (BN_is_negative((uint64_t)a2))
  {
    int v4 = 109;
    int v5 = 41;
  }
  else
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[1] = v6;
    _OWORD v9[2] = v6;
    v9[0] = v6;
    if (CBB_add_asn1(a1, (uint64_t)v9, 2u)
      && ((BN_num_bits(a2) & 7) != 0 || CBB_add_u8((uint64_t)v9, 0)))
    {
      unsigned int v7 = BN_num_bytes(a2);
      if (BN_bn2cbb_padded((uint64_t)v9, v7, (uint64_t)a2))
      {
        if (CBB_flush(a1)) {
          return 1;
        }
      }
    }
    int v4 = 118;
    int v5 = 52;
  }
  ERR_put_error(3, 0, v4, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bn_extra/bn_asn1.c", v5);
  return 0;
}

uint64_t BN_num_bytes(const BIGNUM *a1)
{
  return (BN_num_bits(a1) + 7) >> 3;
}

int BN_num_bits(const BIGNUM *a)
{
  uint64_t top = a->top;
  int v2 = top & ((int)top >> 31);
  uint64_t v3 = 8 * top - 8;
  int v4 = a->top;
  while (1)
  {
    BOOL v5 = __OFSUB__(v4--, 1);
    if (v4 < 0 != v5) {
      break;
    }
    d = a->d;
    uint64_t v7 = *(unint64_t *)((char *)a->d + v3);
    v3 -= 8;
    if (v7)
    {
      int v2 = v4 + 1;
      return BN_num_bits_word(d[v2 - 1]) + ((v2 - 1) << 6);
    }
  }
  if ((top & 0x80000000) == 0) {
    return 0;
  }
  d = a->d;
  return BN_num_bits_word(d[v2 - 1]) + ((v2 - 1) << 6);
}

int BN_num_bits_word(unint64_t a1)
{
  unint64_t v1 = HIDWORD(a1);
  if (!HIDWORD(a1)) {
    unint64_t v1 = a1;
  }
  int v2 = (a1 != 0) | (32 * (HIDWORD(a1) != 0)) | (16 * (v1 >> 16 != 0));
  if (v1 >> 16) {
    v1 >>= 16;
  }
  int v3 = v2 | (8 * (v1 > 0xFF));
  if (v1 > 0xFF) {
    v1 >>= 8;
  }
  int v4 = v3 | (4 * (v1 > 0xF));
  if (v1 > 0xF) {
    v1 >>= 4;
  }
  int v5 = v4 | (2 * (v1 > 3));
  if (v1 > 3) {
    v1 >>= 2;
  }
  if (v1 <= 1) {
    return v5;
  }
  else {
    return v5 + 1;
  }
}

BOOL BN_is_negative(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) != 0;
}

uint64_t BN_bn2cbb_padded(uint64_t a1, unint64_t a2, uint64_t a3)
{
  long long v6 = (char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CBB_add_space(a1, &v6, a2);
  if (result) {
    return BN_bn2bin_padded(v6, a2, a3) != 0;
  }
  return result;
}

uint64_t BN_bn2bin_padded(char *a1, unint64_t a2, uint64_t a3)
{
  int v4 = *(char **)a3;
  uint64_t v5 = *(int *)(a3 + 8);
  if (a2 < 8 * v5)
  {
    int v6 = 0;
    unint64_t v7 = a2 - 8 * v5;
    long long v8 = &v4[a2];
    do
    {
      int v9 = *v8++;
      v6 |= v9;
    }
    while (!__CFADD__(v7++, 1));
    if (v6) {
      return 0;
    }
  }
  bn_words_to_big_endian(a1, a2, v4, v5);
  return 1;
}

void bn_words_to_big_endian(char *a1, unint64_t a2, char *a3, uint64_t a4)
{
  unint64_t v4 = 8 * a4;
  if (a2 >= 8 * a4)
  {
    BOOL v10 = 1;
  }
  else
  {
    int v5 = 0;
    unint64_t v6 = a2 - v4;
    unint64_t v7 = &a3[a2];
    do
    {
      int v8 = *v7++;
      v5 |= v8;
    }
    while (!__CFADD__(v6++, 1));
    BOOL v10 = v5 == 0;
  }
  if (!v10) {
    bn_words_to_big_endian_cold_1();
  }
  if (v4 >= a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = 8 * a4;
  }
  if (v11)
  {
    int v12 = &a1[a2 - 1];
    uint64_t v13 = v11;
    do
    {
      char v14 = *a3++;
      *v12-- = v14;
      --v13;
    }
    while (v13);
  }
  if (a2 > v4)
  {
    size_t v15 = a2 - v11;
    bzero(a1, v15);
  }
}

uint64_t EVP_PKEY_CTX_set_rsa_pss_saltlen(uint64_t *a1)
{
  return EVP_PKEY_CTX_ctrl(a1, 6, 24);
}

uint64_t EVP_PKEY_CTX_set_rsa_padding(uint64_t *a1)
{
  return EVP_PKEY_CTX_ctrl(a1, 6, -1);
}

const EC_GROUP *__cdecl EC_KEY_get0_group(const EC_KEY *a1)
{
  return *(const EC_GROUP **)a1;
}

int EC_GROUP_get_curve_name(const EC_GROUP *a1)
{
  return *((_DWORD *)a1 + 128);
}

int PKCS1_MGF1(unsigned __int8 *mask, uint64_t len, const unsigned __int8 *seed, uint64_t seedlen, const EVP_MD *dgst)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&ctx.digest = v10;
  *(_OWORD *)&ctx.flagunsigned int s = v10;
  EVP_MD_CTX_init(&ctx);
  unint64_t v11 = EVP_MD_size(dgst);
  if (len)
  {
    unint64_t v12 = v11;
    unsigned int v13 = 0;
    while (1)
    {
      unsigned int d = bswap32(v13);
      if (!EVP_DigestInit_ex(&ctx, dgst, 0)
        || !EVP_DigestUpdate(&ctx, seed, seedlen)
        || !EVP_DigestUpdate(&ctx, &d, 4uLL))
      {
        break;
      }
      if (len < v12)
      {
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v21 = v14;
        long long v22 = v14;
        *(_OWORD *)munsigned int d = v14;
        long long v20 = v14;
        if (EVP_DigestFinal_ex(&ctx, md, 0))
        {
          memcpy(mask, md, len);
          goto LABEL_12;
        }
        break;
      }
      if (!EVP_DigestFinal_ex(&ctx, mask, 0)) {
        break;
      }
      mask += v12;
      ++v13;
      len -= v12;
      if (!len) {
        goto LABEL_12;
      }
    }
    int v15 = 0;
  }
  else
  {
LABEL_12:
    int v15 = 1;
  }
  EVP_MD_CTX_cleanup(&ctx);
  return v15;
}

int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt)
{
  return 1;
}

uint64_t digest_update_wrapper(uint64_t a1)
{
  return digest_update(*(void *)(a1 + 8));
}

uint64_t digest_update(uint64_t a1)
{
  if (!a1) {
    digest_update_cold_1();
  }
  uint64_t result = CCDigestUpdate();
  if (result) {
    digest_update_cold_2();
  }
  return result;
}

int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
{
  if (ctx->digest == type) {
    goto LABEL_5;
  }
  unint64_t final_high = HIDWORD(type->final);
  if (!final_high) {
    EVP_DigestInit_ex_cold_2();
  }
  unint64_t v6 = (ENGINE *)OPENSSL_malloc(final_high);
  if (v6)
  {
    unint64_t v7 = v6;
    OPENSSL_free((void *)ctx->engine);
    ctx->digest = type;
    ctx->engine = v7;
LABEL_5:
    if (ctx->flags && !ctx->md_data) {
      EVP_DigestInit_ex_cold_1();
    }
    ((void (*)(EVP_MD_CTX *))type->flags)(ctx);
    LODWORD(v6) = 1;
  }
  return (int)v6;
}

uint64_t digest_init(uint64_t a1)
{
  if (!a1) {
    digest_init_cold_1();
  }
  uint64_t result = CCDigestInit();
  if (result) {
    digest_init_cold_2();
  }
  return result;
}

uint64_t sha256_init(uint64_t a1)
{
  return digest_init(*(void *)(a1 + 8));
}

uint64_t bssl::derive_secret_with_transcript(uint64_t a1, int a2, int a3, bssl::SSLTranscript *this, const void *a5, size_t a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = v12;
  long long v19 = v12;
  *(_OWORD *)int v16 = v12;
  long long v17 = v12;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = bssl::SSLTranscript::GetHash(this, v16, &v15);
  if (result)
  {
    long long v14 = (EVP_MD *)bssl::SSLTranscript::Digest(this);
    return CRYPTO_tls13_hkdf_expand_label(a2, a3, v14, a1 + 40, *(void *)(a1 + 32), a5, a6, v16, v15);
  }
  return result;
}

const EVP_MD *bssl::SSLTranscript::Digest(bssl::SSLTranscript *this)
{
  return EVP_MD_CTX_md((const EVP_MD_CTX *)((char *)this + 8));
}

uint64_t bssl::SSLTranscript::GetHash(bssl::SSLTranscript *this, unsigned __int8 *a2, unint64_t *a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&ctx.digest = v6;
  *(_OWORD *)&ctx.flagunsigned int s = v6;
  EVP_MD_CTX_init(&ctx);
  unsigned int s = -1431655766;
  if (EVP_MD_CTX_copy_ex(&ctx, (const EVP_MD_CTX *)((char *)this + 8)) && EVP_DigestFinal_ex(&ctx, a2, &s))
  {
    *a3 = s;
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  EVP_MD_CTX_cleanup(&ctx);
  return v7;
}

void sub_1BA0ED4C4(_Unwind_Exception *a1, uint64_t a2, EVP_MD_CTX *ctx, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t ctxa)
{
}

int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned __int8 *md, unsigned int *s)
{
  if (ctx->digest->pkey_type >= 0x41u) {
    EVP_DigestFinal_ex_cold_1();
  }
  ((void (*)(void))ctx->digest->update)();
  digest = ctx->digest;
  if (s) {
    *unsigned int s = digest->pkey_type;
  }
  OPENSSL_cleanse(ctx->engine, HIDWORD(digest->final));
  return 1;
}

void OPENSSL_cleanse(void *ptr, size_t len)
{
  if (len) {
    bzero(ptr, len);
  }
}

uint64_t digest_final_wrapper(uint64_t a1)
{
  return digest_final(*(void *)(a1 + 8));
}

uint64_t digest_final(uint64_t a1)
{
  if (!a1) {
    digest_final_cold_1();
  }
  uint64_t result = CCDigestFinal();
  if (result) {
    digest_final_cold_2();
  }
  return result;
}

void EVP_MD_CTX_init(EVP_MD_CTX *ctx)
{
  *(_OWORD *)&ctx->digest = 0u;
  *(_OWORD *)&ctx->flagunsigned int s = 0u;
}

int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)
{
  if (!in) {
    goto LABEL_13;
  }
  if (!in->flags)
  {
    digest = in->digest;
    if (in->digest)
    {
      unint64_t v6 = 0;
LABEL_9:
      if (out->digest == digest)
      {
        engine = out->engine;
        out->engine = 0;
LABEL_16:
        EVP_MD_CTX_cleanup(out);
        out->digest = in->digest;
        out->engine = engine;
        if (in->digest)
        {
          size_t final_high = HIDWORD(in->digest->final);
          if (final_high) {
            memcpy(engine, in->engine, final_high);
          }
        }
        md_data = in->md_data;
        out->flagunsigned int s = v6;
        out->md_data = md_data;
        LODWORD(v5) = 1;
        if (v6 && !md_data) {
          EVP_MD_CTX_copy_ex_cold_1();
        }
        return v5;
      }
      unint64_t v9 = HIDWORD(digest->final);
      if (!v9) {
        EVP_MD_CTX_copy_ex_cold_2();
      }
      long long v10 = (ENGINE *)OPENSSL_malloc(v9);
      if (v10)
      {
        engine = v10;
        goto LABEL_16;
      }
      if (v6) {
        (*(void (**)(unint64_t))in->md_data)(v6);
      }
LABEL_14:
      LODWORD(v5) = 0;
      return v5;
    }
LABEL_13:
    ERR_put_error(29, 0, 100, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/digest/digest.c", 138);
    goto LABEL_14;
  }
  unint64_t v4 = (uint64_t (**)(void))in->md_data;
  if (!v4) {
    EVP_MD_CTX_copy_ex_cold_3();
  }
  uint64_t v5 = v4[1]();
  if (v5)
  {
    unint64_t v6 = v5;
    digest = in->digest;
    if (!in->digest)
    {
      engine = 0;
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  return v5;
}

uint64_t sha384_init(uint64_t a1)
{
  return digest_init(*(void *)(a1 + 8));
}

void EVP_MD_CTX_copy_ex_cold_1()
{
  __assert_rtn("EVP_MD_CTX_copy_ex", "digest.c", 180, "out->pctx == NULL || out->pctx_ops != NULL");
}

EVP_PKEY **EVP_PKEY_CTX_dup(uint64_t a1)
{
  if (!*(void *)a1 || !*(void *)(*(void *)a1 + 16)) {
    return 0;
  }
  int v2 = (EVP_PKEY **)OPENSSL_zalloc(0x30uLL);
  int v3 = v2;
  if (v2)
  {
    *(_OWORD *)int v2 = *(_OWORD *)a1;
    *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
    unint64_t v4 = *(unsigned int **)(a1 + 16);
    if (v4)
    {
      EVP_PKEY_up_ref(v4);
      v3[2] = *(EVP_PKEY **)(a1 + 16);
    }
    uint64_t v5 = *(unsigned int **)(a1 + 24);
    if (v5)
    {
      EVP_PKEY_up_ref(v5);
      v3[3] = *(EVP_PKEY **)(a1 + 24);
    }
    if ((*(int (**)(EVP_PKEY **, uint64_t))(*(void *)a1 + 16))(v3, a1) <= 0)
    {
      *int v3 = 0;
      EVP_PKEY_CTX_free(v3);
      ERR_put_error(6, 0, 6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_ctx.c", 180);
      return 0;
    }
  }
  return v3;
}

void *evp_pkey_ctx_new(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = OPENSSL_zalloc(0x30uLL);
  uint64_t v7 = v6;
  if (v6)
  {
    *unint64_t v6 = a3;
    v6[1] = a2;
    *((_DWORD *)v6 + 8) = 0;
    if (a1)
    {
      EVP_PKEY_up_ref(a1);
      int64x2_t v7[2] = a1;
    }
    int v8 = *(int (**)(void *))(a3 + 8);
    if (v8 && v8(v7) <= 0)
    {
      EVP_PKEY_free((EVP_PKEY *)v7[2]);
      OPENSSL_free(v7);
      return 0;
    }
  }
  return v7;
}

uint64_t EVP_PKEY_up_ref(unsigned int *a1)
{
  return 1;
}

uint64_t boringssl_ciphers_create_set_bitmask(EVP_MD_CTX *a1)
{
  if (!EVP_MD_CTX_md(a1)) {
    return 0;
  }
  unint64_t v2 = 0;
  uint64_t v3 = 0;
  do
  {
    unint64_t v4 = OPENSSL_sk_value((unint64_t *)a1, v2);
    if (v4)
    {
      iunsigned int d = SSL_CIPHER_get_id((uint64_t)v4);
      uint64_t v6 = 0;
      while (supported_bitmasks[v6] != id)
      {
        v6 += 8;
        if (v6 == 304) {
          goto LABEL_9;
        }
      }
      v3 |= *(void *)&supported_bitmasks[v6 + 4];
    }
LABEL_9:
    ++v2;
  }
  while (v2 < (unint64_t)EVP_MD_CTX_md(a1));
  return v3;
}

const SSL *boringssl_context_info_handler(const SSL *result, int a2, char *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = (const SSL *)SSL_get_ex_data(result, 0);
    if (result)
    {
      uint64_t v7 = (SSL *)result;
      if (result->version == -1252936367)
      {
        methounsigned int d = result->method;
        if (method)
        {
          if (a2 > 0x2000)
          {
            if (a2 > 16387)
            {
              if (a2 == 16388)
              {
                boringssl_context_alert_callback_handler(v6, 16388, (int)a3, 1);
              }
              else if (a2 == 16392)
              {
                boringssl_context_alert_callback_handler(v6, 16392, (int)a3, 0);
              }
            }
          }
          else if (a2 > 4096)
          {
            if (a2 == 4097)
            {
              uint64_t v23 = SSL_state(v6);
              LODWORD(method[1].ssl_shutdown) = v23;
              get_ssl_methounsigned int d = method[1].get_ssl_method;
              if (get_ssl_method) {
                (*((void (**)(ssl_method_st *(__cdecl *)(int), uint64_t))get_ssl_method + 2))(get_ssl_method, v23);
              }
              id WeakRetained = objc_loadWeakRetained((id *)&method->ssl_clear);
              if (!WeakRetained
                || (int v26 = WeakRetained,
                    unint64_t v27 = (unsigned __int8 *)objc_loadWeakRetained((id *)&method->ssl_clear),
                    a3 = (char *)v27[475],
                    v27,
                    v26,
                    (a3 & 1) == 0))
              {
                id v28 = objc_loadWeakRetained((id *)&method->ssl_clear);
                if (v28)
                {
                  unint64_t v29 = objc_loadWeakRetained((id *)&method->ssl_clear);
                  BOOL v30 = (v29[475] & 1) == 0;
                }
                else
                {
                  BOOL v30 = 1;
                }

                if (v30)
                {
                  if (g_boringssl_log)
                  {
                    size_t v37 = (id)g_boringssl_log;
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                    {
                      id v38 = objc_loadWeakRetained((id *)&method->ssl_clear);
                      if (v38)
                      {
                        a3 = (char *)objc_loadWeakRetained((id *)&method->ssl_clear);
                        int v39 = a3 + 391;
                      }
                      else
                      {
                        int v39 = &unk_1BA179713;
                      }
                      id v48 = objc_loadWeakRetained((id *)&method->ssl_clear);
                      if ((BYTE4(method[2].ssl_renegotiate_check) & 0x10) != 0) {
                        uint64_t v49 = "Server";
                      }
                      else {
                        uint64_t v49 = "Client";
                      }
                      int v51 = 136447490;
                      uint64_t v52 = "boringssl_context_info_handler";
                      __int16 v53 = 1024;
                      int v54 = 2248;
                      __int16 v55 = 2082;
                      __int16 v56 = v39;
                      __int16 v57 = 2048;
                      id v58 = v48;
                      __int16 v59 = 2082;
                      __int16 v60 = v49;
                      __int16 v61 = 2082;
                      __int16 v62 = SSL_state_string_long(v6);
                      _os_log_impl(&dword_1BA0DE000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] %{public}s handshake state: %{public}s", (uint8_t *)&v51, 0x3Au);

                      if (v38) {
                    }
                      }
                  }
                }
              }
              if (nw_settings_get_signposts_enabled() && kdebug_is_enabled())
              {
                SSL_state_int((uint64_t)v6, v50);
                kdebug_trace();
              }
            }
          }
          else if (a2 == 16)
          {
            id v16 = objc_loadWeakRetained((id *)&method->ssl_clear);
            if (!v16
              || (long long v17 = v16,
                  long long v18 = objc_loadWeakRetained((id *)&method->ssl_clear),
                  char v19 = v18[475],
                  v18,
                  v17,
                  (v19 & 1) == 0))
            {
              id v20 = objc_loadWeakRetained((id *)&method->ssl_clear);
              if (v20)
              {
                long long v21 = objc_loadWeakRetained((id *)&method->ssl_clear);
                BOOL v22 = (v21[475] & 1) == 0;
              }
              else
              {
                BOOL v22 = 1;
              }

              if (v22)
              {
                if (g_boringssl_log)
                {
                  int v34 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                  {
                    id v35 = objc_loadWeakRetained((id *)&method->ssl_clear);
                    if (v35)
                    {
                      uint64_t v3 = (char *)objc_loadWeakRetained((id *)&method->ssl_clear);
                      long long v36 = v3 + 391;
                    }
                    else
                    {
                      long long v36 = &unk_1BA179713;
                    }
                    id v44 = objc_loadWeakRetained((id *)&method->ssl_clear);
                    id v45 = v44;
                    char v46 = BYTE4(method[2].ssl_renegotiate_check);
                    uint64_t v52 = "boringssl_context_info_handler";
                    __int16 v53 = 1024;
                    int v51 = 136447234;
                    int v54 = 2231;
                    if ((v46 & 0x10) != 0) {
                      int v47 = "Server";
                    }
                    else {
                      int v47 = "Client";
                    }
                    __int16 v55 = 2082;
                    __int16 v56 = v36;
                    __int16 v57 = 2048;
                    id v58 = v44;
                    __int16 v59 = 2082;
                    __int16 v60 = v47;
                    _os_log_impl(&dword_1BA0DE000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] %{public}s handshake started", (uint8_t *)&v51, 0x30u);

                    if (v35) {
                  }
                    }
                }
              }
            }
            boringssl_session_set_state((uint64_t)v7, 1);
          }
          else if (a2 == 32)
          {
            id v9 = objc_loadWeakRetained((id *)&method->ssl_clear);
            if (!v9
              || (long long v10 = v9,
                  unint64_t v11 = objc_loadWeakRetained((id *)&method->ssl_clear),
                  char v12 = v11[475],
                  v11,
                  v10,
                  (v12 & 1) == 0))
            {
              id v13 = objc_loadWeakRetained((id *)&method->ssl_clear);
              if (v13)
              {
                long long v14 = objc_loadWeakRetained((id *)&method->ssl_clear);
                BOOL v15 = (v14[475] & 1) == 0;
              }
              else
              {
                BOOL v15 = 1;
              }

              if (v15)
              {
                if (g_boringssl_log)
                {
                  unint64_t v31 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                  {
                    id v32 = objc_loadWeakRetained((id *)&method->ssl_clear);
                    if (v32)
                    {
                      uint64_t v3 = (char *)objc_loadWeakRetained((id *)&method->ssl_clear);
                      unint64_t v33 = v3 + 391;
                    }
                    else
                    {
                      unint64_t v33 = &unk_1BA179713;
                    }
                    id v40 = objc_loadWeakRetained((id *)&method->ssl_clear);
                    long long v41 = v40;
                    char v42 = BYTE4(method[2].ssl_renegotiate_check);
                    uint64_t v52 = "boringssl_context_info_handler";
                    __int16 v53 = 1024;
                    int v51 = 136447234;
                    int v54 = 2237;
                    if ((v42 & 0x10) != 0) {
                      long long v43 = "Server";
                    }
                    else {
                      long long v43 = "Client";
                    }
                    __int16 v55 = 2082;
                    __int16 v56 = v33;
                    __int16 v57 = 2048;
                    id v58 = v40;
                    __int16 v59 = 2082;
                    __int16 v60 = v43;
                    _os_log_impl(&dword_1BA0DE000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] %{public}s handshake done", (uint8_t *)&v51, 0x30u);

                    if (v32) {
                  }
                    }
                }
              }
            }
            boringssl_session_finish_handshake(v7);
          }
          uint64_t result = (const SSL *)nw_settings_get_signposts_enabled();
          if (result)
          {
            uint64_t result = (const SSL *)kdebug_is_enabled();
            if (result) {
              return (const SSL *)kdebug_trace();
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t *OPENSSL_sk_value(unint64_t *result, unint64_t a2)
{
  if (result)
  {
    if (*result <= a2) {
      return 0;
    }
    else {
      return *(unint64_t **)(result[1] + 8 * a2);
    }
  }
  return result;
}

void *__cdecl CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx)
{
  if (idx < 0) {
    return 0;
  }
  suint64_t k = ad->sk;
  if (!sk || (unint64_t)EVP_MD_CTX_md((const EVP_MD_CTX *)sk) <= idx) {
    return 0;
  }
  uint64_t v5 = (unint64_t *)ad->sk;

  return OPENSSL_sk_value(v5, idx);
}

const EVP_MD *__cdecl EVP_MD_CTX_md(const EVP_MD *ctx)
{
  if (ctx) {
    return *(const EVP_MD **)&ctx->type;
  }
  return ctx;
}

void *__cdecl SSL_get_ex_data(const SSL *ssl, int idx)
{
  return CRYPTO_get_ex_data((const CRYPTO_EX_DATA *)&ssl->d1, idx);
}

uint64_t SSL_CIPHER_get_id(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

const char *bssl::ssl_client_handshake_state(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  int v2 = *((_DWORD *)this + 5);
  uint64_t result = "TLS client start_connect";
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "TLS client enter_early_data";
      break;
    case 2:
      uint64_t result = "TLS client early_reverify_server_certificate";
      break;
    case 3:
      uint64_t result = "TLS client read_hello_verify_request";
      break;
    case 4:
      uint64_t result = "TLS client read_server_hello";
      break;
    case 5:
      uint64_t result = bssl::tls13_client_handshake_state((uint64_t)this);
      break;
    case 6:
      uint64_t result = "TLS client read_server_certificate";
      break;
    case 7:
      uint64_t result = "TLS client read_certificate_status";
      break;
    case 8:
      uint64_t result = "TLS client verify_server_certificate";
      break;
    case 9:
      uint64_t result = "TLS client reverify_server_certificate";
      break;
    case 10:
      uint64_t result = "TLS client read_server_key_exchange";
      break;
    case 11:
      uint64_t result = "TLS client read_certificate_request";
      break;
    case 12:
      uint64_t result = "TLS client read_server_hello_done";
      break;
    case 13:
      uint64_t result = "TLS client send_client_certificate";
      break;
    case 14:
      uint64_t result = "TLS client send_client_key_exchange";
      break;
    case 15:
      uint64_t result = "TLS client send_client_certificate_verify";
      break;
    case 16:
      uint64_t result = "TLS client send_client_finished";
      break;
    case 17:
      uint64_t result = "TLS client finish_flight";
      break;
    case 18:
      uint64_t result = "TLS client read_session_ticket";
      break;
    case 19:
      uint64_t result = "TLS client process_change_cipher_spec";
      break;
    case 20:
      uint64_t result = "TLS client read_server_finished";
      break;
    case 21:
      uint64_t result = "TLS client finish_client_handshake";
      break;
    case 22:
      uint64_t result = "TLS client done";
      break;
    default:
      uint64_t result = "TLS client unknown";
      break;
  }
  return result;
}

const char *__cdecl SSL_state_string_long(const SSL *s)
{
  uint64_t v3 = (bssl *)*((void *)s->handshake_func + 35);
  if (!v3) {
    return "SSL negotiation finished successfully";
  }
  if (BYTE4(s->param)) {
    return bssl::ssl_server_handshake_state(v3, v1);
  }
  return bssl::ssl_client_handshake_state(v3, v1);
}

int SSL_state(const SSL *ssl)
{
  uint64_t v1 = *((void *)ssl->handshake_func + 35);
  if (!v1 || (*(_DWORD *)(v1 + 1584) & 8) != 0) {
    return 3;
  }
  else {
    return 12288;
  }
}

const char *bssl::tls13_client_handshake_state(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 24);
  if (v1 > 0xE) {
    return "TLS 1.3 client unknown";
  }
  else {
    return off_1E61F2FF0[v1];
  }
}

uint64_t boringssl_session_set_state(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_DWORD *)(v2 + 30std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = a2;
  return result;
}

SSL *boringssl_session_finish_handshake(SSL *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (result->version == -1252936367)
    {
      methounsigned int d = result->method;
      if (method)
      {
        session = SSL_get_session((const SSL *)method[1].num_ciphers);
        boringssl_session_set_peer_verification_state_from_session((uint64_t)v1, (uint64_t)session);
        if ((BYTE4(method[2].ssl_renegotiate_check) & 0x10) != 0)
        {
          id WeakRetained = objc_loadWeakRetained((id *)&method->ssl_clear);
          if (WeakRetained)
          {
            uint64_t v5 = WeakRetained;
            uint64_t v6 = objc_loadWeakRetained((id *)&method->ssl_clear);
            uint64_t v7 = v6[40];

            if (v7)
            {
              int v8 = objc_loadWeakRetained((id *)&method->ssl_clear);
              uint64_t v9 = v8[40];

              if (v9)
              {
                id v10 = objc_loadWeakRetained((id *)&method->ssl_clear);
                nw_queue_cancel_source();

                unint64_t v11 = objc_loadWeakRetained((id *)&method->ssl_clear);
                v11[40] = 0;
              }
            }
          }
        }
        if (v1->version == -1252936367)
        {
          char v12 = v1->method;
          if (v12)
          {
            HIDWORD(v12[1].ssl_write) = 2;
            if (v1->version == -1252936367)
            {
              id v13 = v1->method;
              if (v13) {
                v13[1].ssl3_enc = (ssl3_enc_method *)boringssl_helper_get_current_time_ms();
              }
            }
          }
        }
        boringssl_session_update_metadata((uint64_t)v1);
        boringssl_context_update_encryption_level((uint64_t)v1);
        boringssl_metrics_log_connection(v1);
        return (SSL *)boringssl_metrics_log_ech((uint64_t)v1);
      }
    }
  }
  return result;
}

uint64_t boringssl_context_evaluate_trust_async(uint64_t a1, __SecTrust *a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = v6;
  if (a1 && *(_DWORD *)a1 == -1252936367)
  {
    uint64_t v8 = 0;
    if (v6)
    {
      if (a2)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (v9)
        {
          if (*(void *)(v9 + 120) && *(void *)(v9 + 128))
          {
            id v10 = (id *)(v9 + 16);
            id WeakRetained = objc_loadWeakRetained((id *)(v9 + 16));
            if (!WeakRetained
              || (char v12 = WeakRetained,
                  id v13 = (unsigned __int8 *)objc_loadWeakRetained(v10),
                  uint64_t v3 = (char *)v13[475],
                  v13,
                  v12,
                  (v3 & 1) == 0))
            {
              id v14 = objc_loadWeakRetained(v10);
              if (v14)
              {
                BOOL v15 = objc_loadWeakRetained(v10);
                BOOL v16 = (v15[475] & 1) == 0;
              }
              else
              {
                BOOL v16 = 1;
              }

              if (v16)
              {
                if (g_boringssl_log)
                {
                  unint64_t v29 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                  {
                    id v30 = objc_loadWeakRetained(v10);
                    if (v30)
                    {
                      uint64_t v3 = (char *)objc_loadWeakRetained(v10);
                      unint64_t v31 = v3 + 391;
                    }
                    else
                    {
                      unint64_t v31 = &unk_1BA179713;
                    }
                    id v34 = objc_loadWeakRetained(v10);
                    int v35 = 136446978;
                    long long v36 = "boringssl_context_evaluate_trust_async";
                    __int16 v37 = 1024;
                    int v38 = 1783;
                    __int16 v39 = 2082;
                    id v40 = v31;
                    __int16 v41 = 2048;
                    id v42 = v34;
                    _os_log_impl(&dword_1BA0DE000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] Performing external trust evaluation", (uint8_t *)&v35, 0x26u);

                    if (v30) {
                  }
                    }
                }
              }
            }
            boringssl_session_update_metadata(a1);
            uint64_t v33 = boringssl_context_evaluate_trust_async_external(a1, a2, v7);
          }
          else
          {
            long long v18 = (id *)(v9 + 16);
            id v19 = objc_loadWeakRetained((id *)(v9 + 16));
            if (!v19
              || (id v20 = v19,
                  long long v21 = objc_loadWeakRetained(v18),
                  char v22 = v21[475],
                  v21,
                  v20,
                  (v22 & 1) == 0))
            {
              id v23 = objc_loadWeakRetained(v18);
              if (v23)
              {
                int v24 = objc_loadWeakRetained(v18);
                BOOL v25 = (v24[475] & 1) == 0;
              }
              else
              {
                BOOL v25 = 1;
              }

              if (v25)
              {
                if (g_boringssl_log)
                {
                  int v26 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                  {
                    id v27 = objc_loadWeakRetained(v18);
                    if (v27)
                    {
                      uint64_t v3 = (char *)objc_loadWeakRetained(v18);
                      id v28 = v3 + 391;
                    }
                    else
                    {
                      id v28 = &unk_1BA179713;
                    }
                    id v32 = objc_loadWeakRetained(v18);
                    int v35 = 136446978;
                    long long v36 = "boringssl_context_evaluate_trust_async";
                    __int16 v37 = 1024;
                    int v38 = 1787;
                    __int16 v39 = 2082;
                    id v40 = v28;
                    __int16 v41 = 2048;
                    id v42 = v32;
                    _os_log_impl(&dword_1BA0DE000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] Performing local trust evaluation", (uint8_t *)&v35, 0x26u);

                    if (v27) {
                  }
                    }
                }
              }
            }
            uint64_t v33 = boringssl_context_evaluate_trust_async_internal(a1, (uint64_t)a2, v7);
          }
          uint64_t v8 = v33;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void boringssl_session_update_metadata(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -1252936367)
  {
    uint64_t v1 = *(void **)(a1 + 8);
    if (v1)
    {
      id v3 = v1;
      id v2 = v3;
      nw_protocol_metadata_access_handle();
    }
  }
}

uint64_t boringssl_context_evaluate_trust_async_external(uint64_t a1, __SecTrust *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = v5;
  if (a1 && *(_DWORD *)a1 == -1252936367)
  {
    uint64_t v7 = 0;
    if (v5)
    {
      if (a2)
      {
        uint64_t v8 = *(void **)(a1 + 8);
        if (v8)
        {
          sec_trust_t v9 = sec_trust_create(a2);
          uint64_t v10 = MEMORY[0x1BA9E5C70](v8[15]);
          unint64_t v11 = (void *)v10;
          if (v9) {
            BOOL v12 = v10 == 0;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v7 = !v12;
          if (!v12)
          {
            id v13 = v8;
            v30[0] = MEMORY[0x1E4F143A8];
            v30[1] = 3221225472;
            v30[2] = __boringssl_context_evaluate_trust_async_external_block_invoke;
            _OWORD v30[3] = &unk_1E61FD738;
            uint64_t v35 = a1;
            id v36 = v13;
            id v14 = v13;
            unint64_t v31 = v14;
            id v33 = v6;
            __int16 v37 = a2;
            id v34 = v11;
            id v32 = v9;
            BOOL v15 = (void *)MEMORY[0x1BA9E5C70](v30);
            *((unsigned char *)v14 + 558) |= 8u;
            id WeakRetained = objc_loadWeakRetained(v14 + 2);
            if (!WeakRetained
              || (long long v17 = WeakRetained,
                  long long v18 = objc_loadWeakRetained(v14 + 2),
                  char v19 = v18[475],
                  v18,
                  v17,
                  (v19 & 1) == 0))
            {
              id v20 = objc_loadWeakRetained(v14 + 2);
              if (v20)
              {
                long long v21 = objc_loadWeakRetained(v14 + 2);
                BOOL v22 = (v21[475] & 1) == 0;
              }
              else
              {
                BOOL v22 = 1;
              }

              if (v22)
              {
                if (g_boringssl_log)
                {
                  int v24 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                  {
                    id v25 = objc_loadWeakRetained(v14 + 2);
                    if (v25)
                    {
                      unint64_t v29 = (char *)objc_loadWeakRetained(v14 + 2);
                      int v26 = v29 + 391;
                    }
                    else
                    {
                      int v26 = &unk_1BA179713;
                    }
                    id v27 = objc_loadWeakRetained(v14 + 2);
                    *(_DWORD *)buf = 136446978;
                    __int16 v39 = "boringssl_context_evaluate_trust_async_external";
                    __int16 v40 = 1024;
                    int v41 = 1768;
                    __int16 v42 = 2082;
                    uint64_t v43 = v26;
                    __int16 v44 = 2048;
                    id v45 = v27;
                    _os_log_impl(&dword_1BA0DE000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] Asyncing for external verify block", buf, 0x26u);

                    if (v25) {
                  }
                    }
                }
              }
            }
            if (v15)
            {
              id v28 = v14[16];
              if (v28)
              {
                v14[63] = (char *)v14[63] + 1;
                dispatch_async(v28, v15);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

BOOL boringssl_metrics_log_ech(uint64_t a1)
{
  if (!a1 || *(_DWORD *)a1 != -1252936367 || !*(void *)(a1 + 8)) {
    return 0;
  }
  if (metricsQueueToken != -1)
  {
    uint64_t v5 = a1;
    dispatch_once(&metricsQueueToken, &__block_literal_global_80);
    a1 = v5;
  }
  if (!boringssl_context_metrics_queue) {
    return 0;
  }
  xpc_object_t ech_event = boringssl_metrics_create_ech_event(a1);
  if (!ech_event) {
    return 0;
  }
  id v2 = ech_event;
  BOOL v3 = boringssl_metrics_log_event((uint64_t)"TLSExperimentECHConnectionEvent", ech_event, (void *)boringssl_context_metrics_queue);

  return v3;
}

BOOL boringssl_metrics_log_connection(SSL *a1)
{
  if (!a1 || a1->version != -1252936367 || !a1->method) {
    return 0;
  }
  if (metricsQueueToken != -1)
  {
    uint64_t v5 = a1;
    dispatch_once(&metricsQueueToken, &__block_literal_global_3);
    a1 = v5;
  }
  if (!boringssl_context_metrics_queue) {
    return 0;
  }
  xpc_object_t connection_event = boringssl_metrics_create_connection_event(a1);
  if (!connection_event) {
    return 0;
  }
  id v2 = connection_event;
  BOOL v3 = boringssl_metrics_log_event((uint64_t)"TLSConnectionEvent", connection_event, (void *)boringssl_context_metrics_queue);

  return v3;
}

BOOL boringssl_metrics_log_event(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a3;
  if (a1)
  {
    xpc_object_t v6 = xpc_copy(a2);
    BOOL v7 = v6 != 0;
    if (v6)
    {
      uint64_t v8 = (const char *)TLS_METRIC_PROCESS_IDENTIFIER;
      whitelisted_bundle_identifier = (const char *)boringssl_config_get_whitelisted_bundle_identifier();
      xpc_dictionary_set_string(v6, v8, whitelisted_bundle_identifier);
      id v10 = v6;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = __boringssl_metrics_log_metric_block_invoke;
      _OWORD v12[3] = &unk_1E61F2C20;
      id v13 = v10;
      uint64_t v14 = a1;
      dispatch_async(v5, v12);
    }
    else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      boringssl_metrics_log_event_cold_1();
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

uint64_t boringssl_config_get_whitelisted_bundle_identifier()
{
  if (boringssl_config_get_whitelisted_bundle_identifier_onceToken != -1) {
    dispatch_once(&boringssl_config_get_whitelisted_bundle_identifier_onceToken, &__block_literal_global_2);
  }
  return global_bundle_identifier;
}

uint64_t pkey_rsa_init(uint64_t a1)
{
  uint64_t result = (uint64_t)OPENSSL_zalloc(0x48uLL);
  if (result)
  {
    uint64_t v3 = result;
    *(_DWORD *)uint64_t result = 2048;
    uint64_t result = 1;
    *(_DWORD *)(v3 + 16) = 1;
    *(_DWORD *)(v3 + 4std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = -2;
    *(void *)(a1 + 4std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v3;
  }
  return result;
}

BIGNUM *pkey_rsa_copy(uint64_t a1, uint64_t a2)
{
  uint64_t result = (BIGNUM *)OPENSSL_zalloc(0x48uLL);
  if (result)
  {
    uint64_t v5 = result;
    LODWORD(result->d) = 2048;
    result->neg = 1;
    result[1].neg = -2;
    *(void *)(a1 + 4std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = result;
    uint64_t v6 = *(void *)(a2 + 40);
    LODWORD(result->d) = *(_DWORD *)v6;
    BOOL v7 = *(const BIGNUM **)(v6 + 8);
    if (!v7 || (uint64_t result = BN_dup(v7), (*(void *)&v5->top = result) != 0))
    {
      v5->neg = *(_DWORD *)(v6 + 16);
      *(_OWORD *)&v5[1].unsigned int d = *(_OWORD *)(v6 + 24);
      v5[1].neg = *(_DWORD *)(v6 + 40);
      if (*(void *)(v6 + 56))
      {
        OPENSSL_free(*(void **)&v5[2].top);
        uint64_t result = (BIGNUM *)OPENSSL_memdup(*(const void **)(v6 + 56), *(void *)(v6 + 64));
        *(void *)&v5[2].uint64_t top = result;
        if (!result) {
          return result;
        }
        *(void *)&v5[2].neg = *(void *)(v6 + 64);
      }
      return (BIGNUM *)1;
    }
  }
  return result;
}

uint64_t pkey_ec_verify(uint64_t a1, unsigned __int8 *sig, int siglen, unsigned __int8 *dgst, int dgstlen)
{
  return ECDSA_verify(0, dgst, dgstlen, sig, siglen, *(EC_KEY **)(*(void *)(a1 + 16) + 8));
}

uint64_t pkey_ec_init(uint64_t a1)
{
  uint64_t result = (uint64_t)OPENSSL_zalloc(0x10uLL);
  if (result)
  {
    *(void *)(a1 + 4std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = result;
    return 1;
  }
  return result;
}

uint64_t pkey_ec_copy(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t)OPENSSL_zalloc(0x10uLL);
  if (result)
  {
    *(void *)(a1 + 4std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = result;
    *(_OWORD *)uint64_t result = *(_OWORD *)*(void *)(a2 + 40);
    return 1;
  }
  return result;
}

uint64_t EVP_PKEY_get0_EC_KEY(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == 408) {
    return *(void *)(a1 + 8);
  }
  ERR_put_error(6, 0, 106, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec_asn1.c", 320);
  return 0;
}

uint64_t pkey_ec_ctrl(uint64_t a1, int a2, int nid, EVP_MD *md)
{
  unint64_t v4 = *(void **)(a1 + 40);
  if (a2 <= 2)
  {
    if (a2 == 1)
    {
      int v7 = EVP_MD_type(md);
      if ((v7 - 672) < 4 || v7 == 64)
      {
        *unint64_t v4 = md;
        return 1;
      }
      int v8 = 111;
      int v9 = 177;
      goto LABEL_13;
    }
    if (a2 == 2)
    {
      *(void *)&md->type = *v4;
      return 1;
    }
LABEL_12:
    int v8 = 101;
    int v9 = 202;
LABEL_13:
    ERR_put_error(6, 0, v8, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec.c", v9);
    return 0;
  }
  if (a2 == 3) {
    return 1;
  }
  if (a2 != 4109) {
    goto LABEL_12;
  }
  uint64_t result = (uint64_t)EC_GROUP_new_by_curve_name(nid);
  if (result)
  {
    v4[1] = result;
    return 1;
  }
  return result;
}

void boringssl_context_alert_callback_handler(const SSL *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int v8 = SSL_get_ex_data(a1, 0);
  if (v8)
  {
    int v9 = v8;
    if (*v8 == -1252936367)
    {
      uint64_t v10 = *((void *)v8 + 1);
      if (v10)
      {
        unint64_t v11 = (char *)BYTE1(a3);
        if (BYTE1(a3) == 1)
        {
          id WeakRetained = objc_loadWeakRetained((id *)(v10 + 16));
          if (!WeakRetained
            || (id v20 = WeakRetained,
                long long v21 = objc_loadWeakRetained((id *)(v10 + 16)),
                char v22 = v21[475],
                v21,
                v20,
                (v22 & 1) == 0))
          {
            id v23 = objc_loadWeakRetained((id *)(v10 + 16));
            if (v23)
            {
              int v24 = objc_loadWeakRetained((id *)(v10 + 16));
              BOOL v25 = (v24[475] & 1) == 0;
            }
            else
            {
              BOOL v25 = 1;
            }

            if (v25)
            {
              if (g_boringssl_log)
              {
                id v36 = (id)g_boringssl_log;
                if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
                {
                  id v37 = objc_loadWeakRetained((id *)(v10 + 16));
                  if (v37)
                  {
                    unint64_t v11 = (char *)objc_loadWeakRetained((id *)(v10 + 16));
                    int v38 = v11 + 391;
                  }
                  else
                  {
                    int v38 = &unk_1BA179713;
                  }
                  id v40 = objc_loadWeakRetained((id *)(v10 + 16));
                  if (a4) {
                    int v41 = "read";
                  }
                  else {
                    int v41 = "write";
                  }
                  *(_DWORD *)buf = 136447746;
                  __int16 v53 = "boringssl_context_handle_warning_alert";
                  __int16 v54 = 1024;
                  int v55 = 2189;
                  __int16 v56 = 2082;
                  __int16 v57 = v38;
                  __int16 v58 = 2048;
                  id v59 = v40;
                  __int16 v60 = 2082;
                  __int16 v61 = v41;
                  __int16 v62 = 2082;
                  uint64_t v63 = SSL_alert_type_string_long(a3);
                  __int16 v64 = 2082;
                  size_t v65 = SSL_alert_desc_string_long(a3);
                  _os_log_impl(&dword_1BA0DE000, v36, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] %{public}s alert, level: %{public}s, description: %{public}s", buf, 0x44u);

                  if (v37) {
                }
                  }
              }
            }
          }
          ++*(unsigned char *)(v10 + 318);
        }
        else if (BYTE1(a3) == 2)
        {
          id v12 = objc_loadWeakRetained((id *)(v10 + 16));
          if (!v12
            || (id v13 = v12,
                uint64_t v14 = objc_loadWeakRetained((id *)(v10 + 16)),
                char v15 = v14[475],
                v14,
                v13,
                (v15 & 1) == 0))
          {
            id v16 = objc_loadWeakRetained((id *)(v10 + 16));
            if (v16)
            {
              long long v17 = objc_loadWeakRetained((id *)(v10 + 16));
              BOOL v18 = (v17[475] & 1) == 0;
            }
            else
            {
              BOOL v18 = 1;
            }

            if (v18)
            {
              if (g_boringssl_log)
              {
                id v32 = (id)g_boringssl_log;
                if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                {
                  id v42 = objc_loadWeakRetained((id *)(v10 + 16));
                  if (v42)
                  {
                    uint64_t v50 = (char *)objc_loadWeakRetained((id *)(v10 + 16));
                    int v51 = v50 + 391;
                  }
                  else
                  {
                    int v51 = &unk_1BA179713;
                  }
                  id v45 = objc_loadWeakRetained((id *)(v10 + 16));
                  if (a4) {
                    uint64_t v46 = "read";
                  }
                  else {
                    uint64_t v46 = "write";
                  }
                  *(_DWORD *)buf = 136447746;
                  __int16 v53 = "boringssl_context_handle_fatal_alert";
                  __int16 v54 = 1024;
                  int v55 = 2170;
                  __int16 v56 = 2082;
                  __int16 v57 = v51;
                  __int16 v58 = 2048;
                  id v59 = v45;
                  __int16 v60 = 2082;
                  __int16 v61 = v46;
                  __int16 v62 = 2082;
                  uint64_t v63 = SSL_alert_type_string_long(a3);
                  __int16 v64 = 2082;
                  size_t v65 = SSL_alert_desc_string_long(a3);
                  _os_log_error_impl(&dword_1BA0DE000, v32, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] %{public}s alert, level: %{public}s, description: %{public}s", buf, 0x44u);

                  if (v42) {
                }
                  }
              }
            }
          }
          ERR_print_errors_cb((int (__cdecl *)(const char *, size_t, void *))boringssl_context_error_print, v9);
          *(_DWORD *)(v10 + 312) = a2;
          *(unsigned char *)(v10 + 316) = 2;
          *(unsigned char *)(v10 + 317) = a3;
          uint64_t v33 = boringssl_helper_convert_alert_code(a3, a2);
          uint64_t v34 = *(void *)(v10 + 280);
          id v35 = objc_loadWeakRetained((id *)(v10 + 16));
          (*(void (**)(uint64_t, id, uint64_t, uint64_t))(v34 + 16))(v34, v35, a2, v33);
        }
        else
        {
          id v26 = objc_loadWeakRetained((id *)(v10 + 16));
          if (!v26
            || (id v27 = v26,
                id v28 = (unsigned __int8 *)objc_loadWeakRetained((id *)(v10 + 16)),
                unint64_t v4 = (char *)v28[475],
                v28,
                v27,
                (v4 & 1) == 0))
          {
            id v29 = objc_loadWeakRetained((id *)(v10 + 16));
            if (v29)
            {
              id v30 = objc_loadWeakRetained((id *)(v10 + 16));
              BOOL v31 = (v30[475] & 1) == 0;
            }
            else
            {
              BOOL v31 = 1;
            }

            if (v31)
            {
              if (g_boringssl_log)
              {
                __int16 v39 = (id)g_boringssl_log;
                if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                {
                  id v43 = objc_loadWeakRetained((id *)(v10 + 16));
                  if (v43)
                  {
                    unint64_t v4 = (char *)objc_loadWeakRetained((id *)(v10 + 16));
                    __int16 v44 = v4 + 391;
                  }
                  else
                  {
                    __int16 v44 = &unk_1BA179713;
                  }
                  id v47 = objc_loadWeakRetained((id *)(v10 + 16));
                  id v48 = v47;
                  *(_DWORD *)buf = 136447490;
                  __int16 v53 = "boringssl_context_alert_callback_handler";
                  uint64_t v49 = "write";
                  int v55 = 2212;
                  __int16 v54 = 1024;
                  if (a4) {
                    uint64_t v49 = "read";
                  }
                  __int16 v56 = 2082;
                  __int16 v57 = v44;
                  __int16 v58 = 2048;
                  id v59 = v47;
                  __int16 v60 = 2082;
                  __int16 v61 = v49;
                  __int16 v62 = 1024;
                  LODWORD(v63) = v11;
                  _os_log_error_impl(&dword_1BA0DE000, v39, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] Unhandled %{public}s alert level: %d", buf, 0x36u);

                  if (v43) {
                }
                  }
              }
            }
          }
        }
      }
    }
  }
}

const char *__cdecl SSL_alert_type_string_long(int value)
{
  uint64_t v1 = "unknown";
  if (value >> 8 == 2) {
    uint64_t v1 = "fatal";
  }
  if (value >> 8 == 1) {
    return "warning";
  }
  else {
    return v1;
  }
}

const char *__cdecl SSL_alert_desc_string_long(int value)
{
  if (value > 0x45u)
  {
    if (value <= 0x55u)
    {
      switch(value)
      {
        case 'F':
          return "protocol version";
        case 'G':
          return "insufficient security";
        case 'P':
          return "internal error";
        default:
          return "unknown";
      }
    }
    else
    {
      switch((char)value)
      {
        case 'd':
          return "no renegotiation";
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'u':
        case 'v':
        case 'w':
          return "unknown";
        case 'm':
          return "missing extension";
        case 'n':
          return "unsupported extension";
        case 'o':
          return "certificate unobtainable";
        case 'p':
          return "unrecognized name";
        case 'q':
          return "bad certificate status response";
        case 'r':
          return "bad certificate hash value";
        case 's':
          return "unknown PSK identity";
        case 't':
          return "certificate required";
        case 'x':
          return "no application protocol";
        case 'y':
          return "ECH required";
        default:
          if (value == 86)
          {
            uint64_t result = "inappropriate fallback";
          }
          else
          {
            if (value != 90) {
              return "unknown";
            }
            uint64_t result = "user canceled";
          }
          break;
      }
    }
  }
  else
  {
    switch((char)value)
    {
      case 20:
        return "bad record mac";
      case 21:
        return "decryption failed";
      case 22:
        return "record overflow";
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
        return "unknown";
      case 30:
        return "decompression failure";
      case 40:
        return "handshake failure";
      case 41:
        return "no certificate";
      case 42:
        return "bad certificate";
      case 43:
        return "unsupported certificate";
      case 44:
        return "certificate revoked";
      case 45:
        return "certificate expired";
      case 46:
        return "certificate unknown";
      case 47:
        return "illegal parameter";
      case 48:
        return "unknown CA";
      case 49:
        return "access denied";
      case 50:
        return "decode error";
      case 51:
        return "decrypt error";
      case 60:
        return "export restriction";
      default:
        if ((_BYTE)value)
        {
          if (value != 10) {
            return "unknown";
          }
          uint64_t result = "unexpected_message";
        }
        else
        {
          uint64_t result = "close notify";
        }
        break;
    }
  }
  return result;
}

void bssl::SSL3_STATE::~SSL3_STATE(bssl::SSL3_STATE *this)
{
}

void bssl::SSLBuffer::~SSLBuffer(bssl::SSLBuffer *this)
{
  *((_WORD *)this + 4) = *((_WORD *)this + 5);
  *((_WORD *)this + 6) = 0;
  *((_WORD *)this + 7) = *((_WORD *)this + 8);
  if (*((unsigned char *)this + 23)) {
    free(*(void **)this);
  }
}

void bssl::SSL_HANDSHAKE::~SSL_HANDSHAKE(bssl::SSL_HANDSHAKE *this)
{
  (*(void (**)(void))(*(void *)(*(void *)(*(void *)this + 120) + 16) + 80))();
  std::unique_ptr<bssl::SSL_HANDSHAKE_HINTS,bssl::internal::Deleter>::reset[abi:ne180100]((uint64_t *)this + 197, 0);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 1560);
  std::unique_ptr<bssl::ECHConfig,bssl::internal::Deleter>::reset[abi:ne180100]((uint64_t *)this + 193, 0);
  std::unique_ptr<ssl_ech_keys_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)this + 192, 0);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)this + 191, 0);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)this + 190, 0);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)this + 189, 0);
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)this + 188, 0);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 1488);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)this + 184, 0);
  std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)this + 183, 0);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 1448);
  EVP_HPKE_CTX_cleanup((uint64_t)this + 736);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 712);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 696);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 680);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 664);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 648);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 632);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 616);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 600);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 584);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 568);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 552);
  bssl::Array<unsigned short>::~Array((uint64_t)this + 536);
  bssl::SSLTranscript::~SSLTranscript((bssl::SSL_HANDSHAKE *)((char *)this + 464));
  bssl::SSLTranscript::~SSLTranscript((bssl::SSL_HANDSHAKE *)((char *)this + 424));
  for (uint64_t i = 400; i != 384; i -= 8)
    std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100]((void **)((char *)this + i), 0);
  std::unique_ptr<err_save_state_st,bssl::internal::Deleter>::reset[abi:ne180100]((uint64_t *)this + 48, 0);
}

int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val)
{
  if (idx < 0) {
    abort();
  }
  suint64_t k = (EVP_MD_CTX *)ad->sk;
  if (sk || (suint64_t k = (EVP_MD_CTX *)OPENSSL_sk_new_null(), (ad->suint64_t k = (STACK *)sk) != 0))
  {
    int v7 = EVP_MD_CTX_md(sk);
    unint64_t v8 = idx;
    if ((unint64_t)v7 > idx)
    {
LABEL_8:
      OPENSSL_sk_set((unint64_t *)ad->sk, v8, (uint64_t)val);
      LODWORD(sk) = 1;
    }
    else
    {
      uint64_t v9 = idx - (void)v7 + 1;
      while (1)
      {
        suint64_t k = (EVP_MD_CTX *)OPENSSL_sk_push((unint64_t *)ad->sk, 0);
        if (!sk) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  return (int)sk;
}

void ssl_credential_st::Dup(ssl_credential_st *this@<X0>, void *a2@<X8>)
{
  int v5 = *((_DWORD *)this + 1);
  unint64_t v4 = (unsigned int *)((char *)this + 4);
  if (v5) {
    ssl_credential_st::Dup();
  }
  uint64_t v6 = bssl::New<ssl_credential_st,bssl::SSLCredentialType>(v4);
  if (!v6) {
    goto LABEL_21;
  }
  int v7 = (EVP_PKEY *)*((void *)this + 1);
  if (v7) {
    EVP_PKEY_up_ref(*((unsigned int **)this + 1));
  }
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)v6 + 1, v7);
  unint64_t v8 = (EVP_PKEY *)*((void *)this + 2);
  if (v8) {
    EVP_PKEY_up_ref(*((unsigned int **)this + 2));
  }
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)v6 + 2, v8);
  uint64_t v9 = (const void *)*((void *)this + 4);
  _OWORD v6[3] = *((void *)this + 3);
  uint64_t v10 = *((void *)this + 5);
  char v11 = bssl::Array<unsigned short>::Init((uint64_t)(v6 + 4), v10);
  char v12 = v11 ^ 1;
  if (!v10) {
    char v12 = 1;
  }
  if ((v12 & 1) == 0) {
    memmove((void *)v6[4], v9, 2 * v10);
  }
  if (v11)
  {
    uint64_t v13 = *((void *)this + 6);
    if (!v13
      || (uint64_t v14 = OPENSSL_sk_deep_copy(v13, (uint64_t (*)(uint64_t))sk_CRYPTO_BUFFER_call_copy_func, (uint64_t)buffer_up_ref, (void (*)(uint64_t))sk_CRYPTO_BUFFER_call_free_func, (uint64_t)CRYPTO_BUFFER_free), std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)v6 + 6, v14), v6[6]))
    {
      char v15 = (unsigned int *)*((void *)this + 7);
      if (v15) {
        CRYPTO_BUFFER_up_ref(*((void *)this + 7));
      }
      std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)v6 + 7, v15);
      id v16 = (unsigned int *)*((void *)this + 9);
      if (v16) {
        CRYPTO_BUFFER_up_ref(*((void *)this + 9));
      }
      std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)v6 + 9, v16);
      long long v17 = (unsigned int *)*((void *)this + 10);
      if (v17) {
        CRYPTO_BUFFER_up_ref(*((void *)this + 10));
      }
      std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)v6 + 10, v17);
      *((_WORD *)v6 + 32) = *((_WORD *)this + 32);
LABEL_21:
      *a2 = v6;
      return;
    }
  }
  *a2 = 0;
  bssl::RefCounted<ssl_credential_st>::DecRefInternal((ssl_credential_st *)v6);
}

void sub_1BA0EFE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t bssl::tls13_process_certificate(EVP_PKEY **a1, uint64_t a2, char a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  long long v88 = *(_OWORD *)(a2 + 8);
  unint64_t v87 = 0;
  int v6 = *(unsigned __int8 *)(a2 + 1);
  if (v6 == 25)
  {
    v79[0] = (EVP_PKEY *)0xAAAAAAAAAAAAAAAALL;
    v79[1] = (EVP_PKEY *)0xAAAAAAAAAAAAAAAALL;
    LOWORD(v86[0]) = -21846;
    LODWORD(v86[2]) = -1431655766;
    if (!CBS_get_u16((unsigned __int16 **)&v88, v86)
      || !CBS_get_u24((uint64_t *)&v88, (int *)&v86[2])
      || !CBS_get_u24_length_prefixed((unsigned __int8 **)&v88, (unint64_t *)v79)
      || *((void *)&v88 + 1))
    {
      bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 50);
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 144);
      goto LABEL_18;
    }
    if (LODWORD(v86[2]) > LODWORD(v5[3].attributes))
    {
      bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 47);
      ERR_put_error(16, 0, 293, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 150);
      ERR_add_error_dataf("requested=%u", v7, v8, v9, v10, v11, v12, v13, (char)v86[2]);
LABEL_18:
      uint64_t v15 = 0;
      goto LABEL_110;
    }
    uint64_t v16 = *(void *)&v5[3].type;
    uint64_t v17 = *(void *)(v16 + 704);
    if (!v17) {
      goto LABEL_79;
    }
    BOOL v18 = (unsigned __int16 *)(*(void *)(v16 + 712) + 16);
    uint64_t v19 = 24 * v17;
    while (*v18 != LOWORD(v86[0]))
    {
      v18 += 12;
      v19 -= 24;
      if (!v19) {
        goto LABEL_79;
      }
    }
    id v42 = (unsigned int (*)(EVP_PKEY *, unsigned int **))*((void *)v18 - 1);
    if (!v42)
    {
LABEL_79:
      bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 47);
      ERR_put_error(16, 0, 294, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 166);
      ERR_add_error_dataf("alg=%d", v46, v47, v48, v49, v50, v51, v52, (char)v86[0]);
      goto LABEL_18;
    }
    v77 = 0;
    if (!v42(v5, &v77))
    {
      bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 50);
      ERR_put_error(16, 0, 292, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 175);
      ERR_add_error_dataf("alg=%d", v54, v55, v56, v57, v58, v59, v60, (char)v86[0]);
      goto LABEL_18;
    }
    std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v87, v77);
    uint64_t v43 = CRYPTO_BUFFER_len((uint64_t)v77);
    if (v43 != LODWORD(v86[2]))
    {
      bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 50);
      ERR_put_error(16, 0, 292, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 183);
      char v61 = (char)v86[0];
      CRYPTO_BUFFER_len((uint64_t)v77);
      ERR_add_error_dataf("alg=%d got=%u expected=%u", v62, v63, v64, v65, v66, v67, v68, v61);
      goto LABEL_18;
    }
    uint64_t v44 = CRYPTO_BUFFER_data((uint64_t)v77);
    uint64_t v45 = CRYPTO_BUFFER_len((uint64_t)v77);
    *(void *)&long long v88 = v44;
    *((void *)&v88 + 1) = v45;
  }
  else if (v6 != 11)
  {
    __assert_rtn("tls13_process_certificate", "tls13_both.cc", 194, "msg.type == SSL3_MT_CERTIFICATE");
  }
  memset(v86, 170, sizeof(v86));
  if (!CBS_get_u8_length_prefixed((unsigned __int8 **)&v88, (unint64_t *)&v86[2])
    || v86[3]
    || !CBS_get_u24_length_prefixed((unsigned __int8 **)&v88, (unint64_t *)v86)
    || *((void *)&v88 + 1))
  {
    bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 50);
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 203);
    uint64_t v15 = 0;
    goto LABEL_110;
  }
  EVP_MD_CTX ctx = (EVP_MD_CTX *)0xAAAAAAAAAAAAAAAALL;
  EVP_MD_CTX ctx = (EVP_MD_CTX *)OPENSSL_sk_new_null();
  if (!ctx)
  {
    bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 80);
    uint64_t v15 = 0;
    goto LABEL_109;
  }
  long long v84 = (unint64_t *)0xAAAAAAAAAAAAAAAALL;
  long long v84 = OPENSSL_sk_new_null();
  if (!v84)
  {
    bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 80);
    ERR_put_error(16, 0, 65, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 217);
    uint64_t v15 = 0;
    goto LABEL_108;
  }
  if (BYTE4(v5[4].pkey.dh)) {
    int v14 = (*(unsigned __int16 *)((char *)&a1[1][7].pkey.ec + 5) >> 5) & 1;
  }
  else {
    int v14 = 0;
  }
  long long v83 = 0;
  if (!v86[1])
  {
LABEL_67:
    if (!EVP_MD_CTX_md(ctx)) {
      std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&ctx, 0);
    }
    id v36 = v83;
    long long v83 = 0;
    std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](a1 + 189, v36);
    p_pkey = (unint64_t **)&a1[190][3].pkey;
    int v38 = (unint64_t *)ctx;
    EVP_MD_CTX ctx = 0;
    std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](p_pkey, v38);
    p_save_parameterunsigned int s = (unint64_t **)&a1[190][6].save_parameters;
    id v40 = v84;
    long long v84 = 0;
    std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](p_save_parameters, v40);
    if ((*(uint64_t (**)(EVP_PKEY *))(*(void *)(*(void *)&v5[3].type + 16) + 48))(a1[190]))
    {
      if (EVP_MD_CTX_md((const EVP_MD_CTX *)a1[190][3].pkey.ptr))
      {
        if (v14) {
          char v41 = 2;
        }
        else {
          char v41 = 0;
        }
        LOBYTE(a1[190][11].type) = a1[190][11].type & 0xFD | v41;
        goto LABEL_85;
      }
      if ((a3 & 1) != 0
        || (int v69 = *((_DWORD *)a1 + 396), (v69 & 0x200000) != 0) && *((unsigned char *)a1 + 730) == 2
        || (v69 & 0x400000) != 0 && *((unsigned char *)a1 + 731) == 2)
      {
        a1[190][4].pkey.ptr = 0;
LABEL_85:
        uint64_t v15 = 1;
        goto LABEL_107;
      }
      ERR_put_error(16, 0, 192, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 380);
      int v29 = 116;
    }
    else
    {
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 365);
      int v29 = 50;
    }
LABEL_81:
    bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, v29);
    goto LABEL_106;
  }
  while (1)
  {
    memset(v82, 170, sizeof(v82));
    if (!CBS_get_u24_length_prefixed(v86, (unint64_t *)&v82[1])
      || !CBS_get_u16_length_prefixed(v86, (unint64_t *)v82)
      || !*((void *)&v82[1] + 1))
    {
      bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 50);
      int v70 = 231;
      int v53 = 127;
      goto LABEL_105;
    }
    int v20 = *((_DWORD *)a1 + 396);
    if ((v20 & 0x200000) != 0 && *((unsigned char *)a1 + 730) == 2)
    {
      long long v21 = EVP_parse_public_key(&v82[1]);
      v79[0] = 0;
      std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](&v83, v21);
      std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](v79, 0);
      if (!v83)
      {
        bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 50);
        int v70 = 241;
        goto LABEL_104;
      }
      goto LABEL_45;
    }
    if ((v20 & 0x400000) == 0 || *((unsigned char *)a1 + 731) != 2) {
      break;
    }
    char v22 = EVP_parse_public_key(&v82[1]);
    v79[0] = 0;
    std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](&v83, v22);
    std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](v79, 0);
    if (!v83)
    {
      bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 50);
      int v70 = 250;
      goto LABEL_104;
    }
LABEL_45:
    int v24 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)&v82[1], *(void ***)(*(void *)&v5[3].type + 776));
    uint64_t v81 = v24;
    if (!v24) {
      goto LABEL_89;
    }
    int64x2_t v80 = v24;
    uint64_t v81 = 0;
    if (!OPENSSL_sk_push((unint64_t *)ctx, (uint64_t)v24))
    {
      std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v80, 0);
LABEL_89:
      bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 80);
      goto LABEL_106;
    }
    int64x2_t v80 = 0;
    std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v80, 0);
    memset(v79, 170, sizeof(v79));
    if (BYTE4(v5[4].pkey.dh))
    {
      LOBYTE(v26) = 0;
      LOBYTE(v27) = 0;
      v79[1] = 0;
      v79[2] = 0;
      v77 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
    }
    else
    {
      unsigned int v25 = *(unsigned __int16 *)((char *)&a1[1][7].pkey.ec + 5);
      int v26 = (v25 >> 2) & 1;
      v79[1] = 0;
      v79[2] = 0;
      v77 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
      int v27 = (v25 >> 1) & 1;
    }
    LOWORD(v79[0]) = 5;
    WORD1(v79[0]) = v26;
    LOWORD(v77) = 18;
    WORD1(v77) = v27;
    long long v78 = 0uLL;
    unsigned __int8 v76 = 50;
    long long v89 = v79;
    int64x2_t v90 = &v77;
    if ((bssl::ssl_parse_extensions(v82, (char *)&v76, (uint64_t *)&v89, 2, 0) & 1) == 0)
    {
      int v29 = v76;
      goto LABEL_81;
    }
    if (BYTE3(v79[0]))
    {
      char v75 = -86;
      long long v89 = (EVP_PKEY **)0xAAAAAAAAAAAAAAAALL;
      int64x2_t v90 = (unsigned int **)0xAAAAAAAAAAAAAAAALL;
      int u8 = CBS_get_u8(&v79[1], &v75);
      int v29 = 50;
      if (!u8) {
        goto LABEL_81;
      }
      if (v75 != 1) {
        goto LABEL_81;
      }
      u24_length_prefixeunsigned int d = CBS_get_u24_length_prefixed((unsigned __int8 **)&v79[1], (unint64_t *)&v89);
      int v29 = 50;
      if (!u24_length_prefixed || !v90 || v79[2]) {
        goto LABEL_81;
      }
      if (EVP_MD_CTX_md(ctx) == (const EVP_MD *)1)
      {
        BOOL v31 = a1[190];
        id v32 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)&v89, *(void ***)(*(void *)&v5[3].type + 776));
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)&v31[6].pkey, v32);
        if (!a1[190][6].pkey.ptr)
        {
          int v29 = 80;
          goto LABEL_81;
        }
      }
      uint64_t v74 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v33 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)&v89, *(void ***)(*(void *)&v5[3].type + 776));
      uint64_t v74 = v33;
      if (!v33) {
        goto LABEL_98;
      }
      unint64_t v73 = v33;
      uint64_t v74 = 0;
      if (!OPENSSL_sk_push(v84, (uint64_t)v33))
      {
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v73, 0);
LABEL_98:
        bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 80);
        ERR_put_error(16, 0, 65, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 328);
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v74, 0);
        goto LABEL_106;
      }
      unint64_t v73 = 0;
      std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v73, 0);
      std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v74, 0);
    }
    if (BYTE3(v77))
    {
      if ((bssl::ssl_is_sct_list_valid(&v78) & 1) == 0)
      {
        ERR_put_error(16, 0, 149, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 336);
        int v29 = 50;
        goto LABEL_81;
      }
      if (EVP_MD_CTX_md(ctx) == (const EVP_MD *)1)
      {
        uint64_t v34 = a1[190];
        id v35 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)&v78, *(void ***)(*(void *)&v5[3].type + 776));
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)&v34[6].references, v35);
        if (!*(void *)&a1[190][6].references)
        {
          int v29 = 80;
          goto LABEL_81;
        }
      }
    }
    if (!v86[1]) {
      goto LABEL_67;
    }
  }
  if (EVP_MD_CTX_md(ctx)) {
    goto LABEL_45;
  }
  bssl::ssl_cert_parse_pubkey(&v82[1], v79);
  id v23 = v79[0];
  v79[0] = 0;
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](&v83, v23);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](v79, 0);
  if (v83)
  {
    if ((bssl::ssl_cert_check_key_usage(&v82[1], 0) & 1) == 0)
    {
      bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 47);
      goto LABEL_106;
    }
    if (v14) {
      SHA256(*(const unsigned __int8 **)&v82[1], *((size_t *)&v82[1] + 1), (unsigned __int8 *)&a1[190][6].attributes);
    }
    goto LABEL_45;
  }
  bssl::ssl_send_alert((bssl *)v5, (ssl_st *)2, 50);
  int v70 = 259;
LABEL_104:
  int v53 = 137;
LABEL_105:
  ERR_put_error(16, 0, v53, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", v70);
LABEL_106:
  uint64_t v15 = 0;
LABEL_107:
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](&v83, 0);
LABEL_108:
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](&v84, 0);
LABEL_109:
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&ctx, 0);
LABEL_110:
  uint64_t v71 = v87;
  unint64_t v87 = 0;
  if (v71) {
    CRYPTO_BUFFER_free(v71);
  }
  return v15;
}

void sub_1BA0F0880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,EVP_PKEY *a27,unint64_t *a28,unint64_t *a29)
{
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a22, 0);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](&a27, 0);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](&a28, 0);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](&a29, 0);
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(v29 - 136), 0);
  _Unwind_Resume(a1);
}

uint64_t cbs_get_length_prefixed(unsigned __int8 **a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = (unint64_t)a1[1];
  BOOL v4 = v3 >= a3;
  unint64_t v5 = v3 - a3;
  if (!v4) {
    return 0;
  }
  int v6 = *a1;
  unint64_t v7 = (unint64_t)&(*a1)[a3];
  *a1 = (unsigned __int8 *)v7;
  a1[1] = (unsigned __int8 *)v5;
  unint64_t v8 = 0;
  if (a3)
  {
    do
    {
      unsigned int v9 = *v6++;
      unint64_t v8 = v9 | (v8 << 8);
      --a3;
    }
    while (a3);
    if (v5 < v8) {
      return 0;
    }
  }
  *a1 = (unsigned __int8 *)(v7 + v8);
  a1[1] = (unsigned __int8 *)(v5 - v8);
  *a2 = v7;
  a2[1] = v8;
  return 1;
}

void std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](EVP_PKEY **a1, EVP_PKEY *a2)
{
  unint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    EVP_PKEY_free(v3);
  }
}

uint64_t crypto_buffer_new(const void *a1, unint64_t a2, int a3, void **a4)
{
  if (a4)
  {
    _OWORD v18[2] = a2;
    _OWORD v18[3] = 0xAAAAAAAAAAAAAAAALL;
    v18[0] = a4;
    v18[1] = a1;
    CRYPTO_MUTEX_lock_read((pthread_rwlock_t *)(a4 + 1));
    uint64_t v8 = OPENSSL_lh_retrieve(*a4, (uint64_t)v18, (uint64_t (*)(void, uint64_t))lh_CRYPTO_BUFFER_call_hash_func, (unsigned int (*)(void, void, uint64_t))lh_CRYPTO_BUFFER_call_cmp_func);
    uint64_t v9 = v8;
    if (a3 && v8)
    {
      if (*(_DWORD *)(v8 + 28))
      {
LABEL_5:
        CRYPTO_refcount_inc((unsigned int *)(v8 + 24));
        CRYPTO_MUTEX_unlock_read((pthread_rwlock_t *)(a4 + 1));
        return v9;
      }
    }
    else if (v8)
    {
      goto LABEL_5;
    }
    CRYPTO_MUTEX_unlock_read((pthread_rwlock_t *)(a4 + 1));
  }
  uint64_t v10 = OPENSSL_zalloc(0x20uLL);
  uint64_t v9 = (uint64_t)v10;
  if (v10)
  {
    if (a3)
    {
      v10[1] = a1;
      *((_DWORD *)v10 + 7) = 1;
    }
    else
    {
      int v14 = OPENSSL_memdup(a1, a2);
      *(void *)(v9 + 8) = v14;
      if (a2 && !v14)
      {
        OPENSSL_free((void *)v9);
        return 0;
      }
    }
    *(void *)(v9 + 16) = a2;
    *(_DWORD *)(v9 + 24) = 1;
    if (a4)
    {
      *(void *)uint64_t v9 = a4;
      uint64_t v11 = (pthread_rwlock_t *)(a4 + 1);
      CRYPTO_MUTEX_lock_write((pthread_rwlock_t *)(a4 + 1));
      uint64_t v12 = OPENSSL_lh_retrieve(*a4, v9, (uint64_t (*)(void, uint64_t))lh_CRYPTO_BUFFER_call_hash_func, (unsigned int (*)(void, void, uint64_t))lh_CRYPTO_BUFFER_call_cmp_func);
      uint64_t v13 = v12;
      if (a3 && v12)
      {
        if (*(_DWORD *)(v12 + 28))
        {
LABEL_15:
          CRYPTO_refcount_inc((unsigned int *)(v12 + 24));
          CRYPTO_MUTEX_unlock_read((pthread_rwlock_t *)(a4 + 1));
LABEL_16:
          crypto_buffer_free_object((void **)v9);
          return v13;
        }
      }
      else if (v12)
      {
        goto LABEL_15;
      }
      uint64_t v15 = *a4;
      v18[0] = 0;
      int v16 = OPENSSL_lh_insert(v15, v18, v9, (uint64_t (*)(void, uint64_t))lh_CRYPTO_BUFFER_call_hash_func, (unsigned int (*)(void, void, uint64_t))lh_CRYPTO_BUFFER_call_cmp_func);
      CRYPTO_MUTEX_unlock_read(v11);
      if (v16) {
        return v9;
      }
      uint64_t v13 = 0;
      goto LABEL_16;
    }
  }
  return v9;
}

void *OPENSSL_memdup(const void *a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  BOOL v4 = OPENSSL_malloc(a2);
  unint64_t v5 = v4;
  if (v4) {
    memcpy(v4, a1, a2);
  }
  return v5;
}

uint64_t CRYPTO_BUFFER_new_from_CBS(uint64_t a1, void **a2)
{
  return crypto_buffer_new(*(const void **)a1, *(void *)(a1 + 8), 0, a2);
}

uint64_t CBS_get_u24_length_prefixed(unsigned __int8 **a1, unint64_t *a2)
{
  return cbs_get_length_prefixed(a1, a2, 3uLL);
}

void ssl_session_st::~ssl_session_st(ssl_session_st *this)
{
}

void std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](unsigned int **a1, unsigned int *a2)
{
  unint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    CRYPTO_BUFFER_free(v3);
  }
}

uint64_t bssl::Array<unsigned short>::~Array(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](unint64_t **a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    OPENSSL_sk_pop_free_ex(v3, (void (*)(uint64_t))bssl::internal::DeleterImpl<stack_st_CRYPTO_BUFFER,void>::Free(stack_st_CRYPTO_BUFFER*)::{lambda(void (*)(void *),void *)#1}::__invoke, 0);
  }
}

void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
{
  if (ad->sk)
  {
    uint64_t v3 = *(void *)&class_index;
    unint64_t v4 = atomic_load((unsigned int *)(*(void *)&class_index + 216));
    if ((*(unsigned __int8 *)(*(void *)&class_index + 220) ^ 0x7FFFFFFFuLL) < v4) {
      CRYPTO_free_ex_data_cold_1();
    }
    if (v4)
    {
      int v7 = 0;
      uint64_t v8 = (void **)(*(void *)&class_index + 200);
      do
      {
        uint64_t v9 = *v8;
        if ((*v8)[2])
        {
          int v10 = *(unsigned __int8 *)(v3 + 220);
          uint64_t v11 = (v7 + v10);
          uint64_t v12 = CRYPTO_get_ex_data(ad, v7 + v10);
          ((void (*)(void *, void *, CRYPTO_EX_DATA *, uint64_t, void, void))(*v8)[2])(obj, v12, ad, v11, **v8, (*v8)[1]);
          uint64_t v9 = *v8;
        }
        uint64_t v8 = (void **)(v9 + 3);
        ++v7;
      }
      while (v4 != v7);
    }
    BUF_MEM_free((BUF_MEM *)ad->sk);
    ad->suint64_t k = 0;
  }
}

void OPENSSL_sk_pop_free_ex(unint64_t *a1, void (*a2)(uint64_t), uint64_t a3)
{
  if (a1)
  {
    unint64_t v4 = *a1;
    if (*a1)
    {
      unint64_t v7 = 0;
      do
      {
        if (*(void *)(a1[1] + 8 * v7))
        {
          a2(a3);
          unint64_t v4 = *a1;
        }
        ++v7;
      }
      while (v7 < v4);
    }
    OPENSSL_free((void *)a1[1]);
    OPENSSL_free(a1);
  }
}

void CRYPTO_BUFFER_free(unsigned int *a1)
{
  if (!a1) {
    return;
  }
  id v2 = *(void ***)a1;
  if (!*(void *)a1)
  {
    if (!CRYPTO_refcount_dec_and_test_zero(a1 + 6)) {
      return;
    }
    goto LABEL_8;
  }
  CRYPTO_MUTEX_lock_write((pthread_rwlock_t *)(v2 + 1));
  if (CRYPTO_refcount_dec_and_test_zero(a1 + 6))
  {
    if ((unsigned int *)OPENSSL_lh_retrieve(*v2, (uint64_t)a1, (uint64_t (*)(void, uint64_t))lh_CRYPTO_BUFFER_call_hash_func, (unsigned int (*)(void, void, uint64_t))lh_CRYPTO_BUFFER_call_cmp_func) == a1&& (unsigned int *)OPENSSL_lh_delete(*v2, (uint64_t)a1, (uint64_t (*)(void, uint64_t))lh_CRYPTO_BUFFER_call_hash_func, (unsigned int (*)(void, void, uint64_t))lh_CRYPTO_BUFFER_call_cmp_func) != a1)
    {
      CRYPTO_BUFFER_free_cold_1();
    }
    CRYPTO_MUTEX_unlock_read((pthread_rwlock_t *)(*(void *)a1 + 8));
LABEL_8:
    crypto_buffer_free_object((void **)a1);
    return;
  }
  uint64_t v3 = (pthread_rwlock_t *)(*(void *)a1 + 8);

  CRYPTO_MUTEX_unlock_read(v3);
}

BOOL CRYPTO_refcount_dec_and_test_zero(unsigned int *a1)
{
  for (uint64_t i = atomic_load(a1); ; uint64_t i = v2)
  {
    if (i == -1) {
      return 0;
    }
    if (!i) {
      abort();
    }
    uint64_t v2 = i;
    atomic_compare_exchange_strong((atomic_uint *volatile)a1, (unsigned int *)&v2, i - 1);
    if (v2 == i) {
      break;
    }
  }
  return i == 1;
}

void bssl::internal::DeleterImpl<stack_st_CRYPTO_BUFFER,void>::Free(stack_st_CRYPTO_BUFFER*)::{lambda(void (*)(void *),void *)#1}::__invoke(uint64_t a1, unsigned int *a2)
{
}

uint64_t bssl::ssl_create_cipher_list(bssl::SSLCipherPreferenceList **a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = 0;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return v4;
  }
  uint64_t v5 = a3;
  if (!a3) {
    return v4;
  }
  memset(__b, 170, sizeof(__b));
  for (uint64_t i = 0; i != 1120; i += 32)
  {
    uint64_t v9 = &__b[i];
    int v10 = &__b[i + 32];
    if (i == 1088) {
      int v10 = 0;
    }
    uint64_t v11 = v9 - 32;
    if (!i) {
      uint64_t v11 = 0;
    }
    *((void *)v9 + 2) = v10;
    *((void *)v9 + 3) = v11;
    *((_WORD *)v9 + 4) = 0;
  }
  uint64_t v47 = &__b[1088];
  uint64_t v48 = (uint64_t *)__b;
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = __b;
    uint64_t v14 = 4;
    do
    {
      int v15 = (unsigned __int16)bssl::ssl_create_cipher_list(std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter> *,BOOL,char const*,BOOL)::kAESCiphers[v12];
      unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long __key = v16;
      long long v50 = v16;
      LODWORD(v5std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = v15 | 0x3000000;
      uint64_t v17 = bsearch(&__key, bssl::kCiphers, 0x26uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
      void *v13 = v17;
      if (!v17) {
        bssl::ssl_create_cipher_list();
      }
      v13 += 4;
      ++v12;
    }
    while (v12 != 4);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v18 = 0;
  uint64_t v19 = &__b[32 * v14];
  do
  {
    int v20 = (unsigned __int16)bssl::ssl_create_cipher_list(std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter> *,BOOL,char const*,BOOL)::kChaChaCiphers[v18];
    unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long __key = v21;
    long long v50 = v21;
    LODWORD(v5std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = v20 | 0x3000000;
    char v22 = bsearch(&__key, bssl::kCiphers, 0x26uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
    *uint64_t v19 = v22;
    if (!v22) {
      bssl::ssl_create_cipher_list();
    }
    ++v14;
    v19 += 4;
    ++v18;
  }
  while (v18 != 3);
  if ((a2 & 1) == 0)
  {
    for (uint64_t j = 0; j != 4; ++j)
    {
      int v24 = (unsigned __int16)bssl::ssl_create_cipher_list(std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter> *,BOOL,char const*,BOOL)::kAESCiphers[j];
      unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long __key = v25;
      long long v50 = v25;
      LODWORD(v5std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = v24 | 0x3000000;
      int v26 = bsearch(&__key, bssl::kCiphers, 0x26uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
      *uint64_t v19 = v26;
      if (!v26) {
        bssl::ssl_create_cipher_list();
      }
      ++v14;
      v19 += 4;
    }
  }
  uint64_t v27 = 0;
  uint64_t v28 = 32 * v14;
  do
  {
    int v29 = (unsigned __int16)bssl::ssl_create_cipher_list(std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter> *,BOOL,char const*,BOOL)::kLegacyCiphers[v27];
    unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long __key = v30;
    long long v50 = v30;
    LODWORD(v5std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = v29 | 0x3000000;
    BOOL v31 = bsearch(&__key, bssl::kCiphers, 0x26uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
    *(void *)&__b[v28] = v31;
    if (!v31) {
      bssl::ssl_create_cipher_list();
    }
    v28 += 32;
    ++v27;
  }
  while (v27 != 28);
  if (v28 != 1120) {
    bssl::ssl_create_cipher_list();
  }
  if (!strncmp((const char *)v5, "DEFAULT", 7uLL))
  {
    if (!bssl::ssl_cipher_process_rulestr("ALL", &v48, &v47, a4)) {
      return 0;
    }
    int v32 = *(unsigned __int8 *)(v5 + 7);
    v5 += 7;
    if (v32 == 58) {
      ++v5;
    }
  }
  if (*(unsigned char *)v5 && !bssl::ssl_cipher_process_rulestr((unsigned __int8 *)v5, &v48, &v47, a4)) {
    return 0;
  }
  uint64_t v33 = OPENSSL_sk_new_null();
  uint64_t v46 = v33;
  long long __key = 0uLL;
  if (!v33)
  {
    uint64_t v34 = 0;
    goto LABEL_43;
  }
  OPENSSL_free(0);
  long long __key = 0uLL;
  uint64_t v34 = OPENSSL_malloc(0x26uLL);
  *(void *)&long long __key = v34;
  if (!v34)
  {
LABEL_43:
    uint64_t v4 = 0;
    goto LABEL_58;
  }
  *((void *)&__key + 1) = 38;
  id v35 = v48;
  if (v48)
  {
    unint64_t v36 = 0;
    do
    {
      if (*((unsigned char *)v35 + 8))
      {
        if (!OPENSSL_sk_push(v33, *v35)) {
          goto LABEL_43;
        }
        *((unsigned char *)v34 + v36++) = *((unsigned char *)v35 + 9);
      }
      id v35 = (uint64_t *)v35[2];
    }
    while (v35);
  }
  else
  {
    unint64_t v36 = 0;
  }
  id v37 = (bssl::SSLCipherPreferenceList *)OPENSSL_malloc(0x10uLL);
  if (!v37)
  {
    uint64_t v4 = 0;
    uint64_t v45 = 0;
    goto LABEL_57;
  }
  *(void *)id v37 = 0;
  *((void *)v37 + 1) = 0;
  uint64_t v45 = v37;
  uint64_t v46 = 0;
  if (v36 >= 0x26) {
    uint64_t v38 = 38;
  }
  else {
    uint64_t v38 = v36;
  }
  a = (BUF_MEM *)v33;
  char v39 = bssl::SSLCipherPreferenceList::Init((uint64_t)v37, (const EVP_MD_CTX **)&a, v34, (const EVP_MD *)v38);
  id v40 = a;
  a = 0;
  if (v40) {
    BUF_MEM_free(v40);
  }
  if ((v39 & 1) == 0)
  {
LABEL_56:
    uint64_t v33 = 0;
    uint64_t v4 = 0;
    goto LABEL_57;
  }
  char v41 = v45;
  uint64_t v45 = 0;
  std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter>::reset[abi:ne180100](a1, v41);
  if (!EVP_MD_CTX_md(*(const EVP_MD_CTX **)*a1))
  {
    ERR_put_error(16, 0, 177, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cipher.cc", 1495);
    goto LABEL_56;
  }
  uint64_t v33 = 0;
  uint64_t v4 = 1;
LABEL_57:
  std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter>::reset[abi:ne180100](&v45, 0);
LABEL_58:
  OPENSSL_free(v34);
  uint64_t v46 = 0;
  if (v33) {
    BUF_MEM_free((BUF_MEM *)v33);
  }
  return v4;
}

void sub_1BA0F1504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *OPENSSL_sk_push(unint64_t *a1, uint64_t a2)
{
  return OPENSSL_sk_insert(a1, a2, *a1);
}

unint64_t *OPENSSL_sk_insert(unint64_t *result, uint64_t a2, unint64_t a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  unint64_t v4 = *result;
  if (*result >= 0x7FFFFFFF)
  {
    ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/stack/stack.c", 179);
    return 0;
  }
  uint64_t v7 = result[3];
  if (v7 > v4 + 1) {
    goto LABEL_19;
  }
  if (v7 < 0) {
    unint64_t v8 = v7 + 1;
  }
  else {
    unint64_t v8 = 2 * v7;
  }
  if (v7 >= 0) {
    unint64_t v9 = 16 * v7;
  }
  else {
    unint64_t v9 = 8 * (v7 + 1);
  }
  if (v8 < v7 || v9 >> 3 != v8) {
    return 0;
  }
  uint64_t result = OPENSSL_realloc((void *)result[1], v9);
  if (result)
  {
    v3[1] = (unint64_t)result;
    v3[3] = v8;
    unint64_t v4 = *v3;
LABEL_19:
    if (v4 <= a3)
    {
      uint64_t v13 = (void *)(v3[1] + 8 * v4);
    }
    else
    {
      size_t v11 = 8 * (v4 - a3);
      unint64_t v12 = v3[1];
      if (v11)
      {
        memmove((void *)(v12 + 8 * a3 + 8), (const void *)(v12 + 8 * a3), v11);
        unint64_t v4 = *v3;
        unint64_t v12 = v3[1];
      }
      uint64_t v13 = (void *)(v12 + 8 * a3);
    }
    void *v13 = a2;
    uint64_t result = (unint64_t *)(v4 + 1);
    *uint64_t v3 = v4 + 1;
    *((_DWORD *)v3 + 4) = 0;
  }
  return result;
}

void *OPENSSL_sk_new_null()
{
  return OPENSSL_sk_new(0);
}

void *OPENSSL_sk_new(uint64_t a1)
{
  uint64_t v2 = OPENSSL_zalloc(0x28uLL);
  if (v2)
  {
    uint64_t v3 = OPENSSL_calloc(4uLL, 8uLL);
    v2[1] = v3;
    if (v3)
    {
      v2[3] = 4;
      v2[4] = a1;
    }
    else
    {
      OPENSSL_free(v2);
      return 0;
    }
  }
  return v2;
}

void *OPENSSL_calloc(unint64_t a1, unint64_t a2)
{
  if (!a2 || is_mul_ok(a2, a1))
  {
    unint64_t v4 = a2 * a1;
    return OPENSSL_zalloc(v4);
  }
  else
  {
    ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/mem.c", 302);
    return 0;
  }
}

void std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter>::reset[abi:ne180100](bssl::SSLCipherPreferenceList **a1, bssl::SSLCipherPreferenceList *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    bssl::SSLCipherPreferenceList::~SSLCipherPreferenceList(v3);
    OPENSSL_free(v4);
  }
}

uint64_t bssl::SSLCipherPreferenceList::Init(uint64_t a1, const EVP_MD_CTX **a2, const void *a3, const EVP_MD *a4)
{
  if (EVP_MD_CTX_md(*a2) == a4)
  {
    __dst = 0;
    uint64_t v14 = 0;
    uint64_t v8 = bssl::Array<unsigned char>::Init((uint64_t)&__dst, (unint64_t)a4);
    char v9 = v8 ^ 1;
    if (!a4) {
      char v9 = 1;
    }
    if ((v9 & 1) == 0) {
      memmove(__dst, a3, (size_t)a4);
    }
    if (v8)
    {
      int v10 = (EVP_MD_CTX *)*a2;
      *a2 = 0;
      std::unique_ptr<stack_st_SSL_CIPHER,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)a1, (BUF_MEM *)v10);
      size_t v11 = 0;
      *(void *)(a1 + 8) = __dst;
      __dst = 0;
      uint64_t v14 = 0;
    }
    else
    {
      size_t v11 = __dst;
    }
    OPENSSL_free(v11);
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cipher.cc", 936);
    return 0;
  }
  return v8;
}

void sub_1BA0F1850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<stack_st_SSL_CIPHER,bssl::internal::Deleter>::reset[abi:ne180100](BUF_MEM **a1, BUF_MEM *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    BUF_MEM_free(v3);
  }
}

BOOL SSL_set_tlsext_host_name(uint64_t a1, const char *a2)
{
  uint64_t v3 = (void **)(a1 + 160);
  std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)(a1 + 160), 0);
  if (!a2) {
    return 1;
  }
  if (strlen(a2) - 256 > 0xFFFFFFFFFFFFFF00)
  {
    uint64_t v5 = (char *)OPENSSL_strdup(a2);
    std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100](v3, v5);
    return *v3 != 0;
  }
  else
  {
    ERR_put_error(16, 0, 213, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 2560);
    return 0;
  }
}

void std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    OPENSSL_free(v3);
  }
}

const char *OPENSSL_strdup(const char *result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = strlen(result) + 1;
    return (const char *)OPENSSL_memdup(v1, v2);
  }
  return result;
}

void bssl::tls13_create_session_with_ticket(bssl *a1@<X0>, uint64_t *a2@<X1>, SSL_SESSION **a3@<X8>)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  seunsigned int s = (SSL_SESSION *)0xAAAAAAAAAAAAAAAALL;
  bssl::SSL_SESSION_dup(*(bssl **)(*((void *)a1 + 6) + 472), (ssl_session_st *)2, &ses);
  if (!ses)
  {
    *a3 = 0;
    return;
  }
  bssl::ssl_session_rebase_time(a1, (ssl_st *)ses, v6);
  unsigned int v23 = -1431655766;
  memset(v22, 170, sizeof(v22));
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_u32(a2, (int *)&v23)
    || !CBS_get_u32(a2, (int *)&ses[1].session_id[16])
    || !CBS_get_u8_length_prefixed((unsigned __int8 **)a2, &v22[2])
    || !CBS_get_u16_length_prefixed((unsigned __int8 **)a2, v22))
  {
    goto LABEL_13;
  }
  uint64_t v7 = (const void *)v22[0];
  size_t v8 = v22[1];
  p_dummy = &ses->ex_data.dummy;
  int v10 = bssl::Array<unsigned char>::Init((uint64_t)&ses->ex_data.dummy, v22[1]);
  char v11 = v10 ^ 1;
  if (!v8) {
    char v11 = 1;
  }
  if ((v11 & 1) == 0) {
    memmove(*(void **)p_dummy, v7, v8);
  }
  if (!v10 || !CBS_get_u16_length_prefixed((unsigned __int8 **)a2, (unint64_t *)&v21) || a2[1])
  {
LABEL_13:
    bssl::ssl_send_alert(a1, (ssl_st *)2, 50);
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 1133);
LABEL_14:
    *a3 = 0;
    goto LABEL_15;
  }
  uint64_t v13 = (unsigned __int8 *)ses;
  if (LODWORD(ses->time) > v23) {
    LODWORD(ses->time) = v23;
  }
  if (!bssl::tls13_derive_session_psk(v13, (const ssl_session_st *)v22[2], v22[3])) {
    goto LABEL_14;
  }
  v18[1] = -1431655766;
  uint64_t v19 = 0;
  v18[0] = 65578;
  uint64_t v20 = 0;
  unsigned __int8 v17 = 50;
  v25[0] = (uint64_t)v18;
  if ((bssl::ssl_parse_extensions(&v21, (char *)&v17, v25, 1, 1) & 1) == 0)
  {
    bssl::ssl_send_alert(a1, (ssl_st *)2, v17);
LABEL_33:
    long long v16 = 0;
    goto LABEL_34;
  }
  uint64_t v14 = ses;
  if (HIBYTE(v18[0]))
  {
    if (!CBS_get_u32(&v19, (int *)&ses[1].session_id[20]) || v20)
    {
      bssl::ssl_send_alert(a1, (ssl_st *)2, 50);
      int v15 = 1159;
      goto LABEL_32;
    }
    uint64_t v14 = ses;
    if (*((void *)a1 + 21) && *(_DWORD *)&ses[1].session_id[20] != -1)
    {
      bssl::ssl_send_alert(a1, (ssl_st *)2, 47);
      int v15 = 1168;
LABEL_32:
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", v15);
      goto LABEL_33;
    }
  }
  SHA256((const unsigned __int8 *)v22[0], v22[1], &v14->master_key[40]);
  long long v16 = ses;
  ses->master_key[39] = 32;
  LOBYTE(v16[1].peer) = (uint64_t)v16[1].peer & 0xF3 | 8;
  seunsigned int s = 0;
LABEL_34:
  *a3 = v16;
LABEL_15:
  unint64_t v12 = ses;
  seunsigned int s = 0;
  if (v12) {
    SSL_SESSION_free(v12);
  }
}

void sub_1BA0F1C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t bssl::ssl_parse_extensions(long long *a1, char *a2, uint64_t *a3, uint64_t a4, int a5)
{
  char v5 = a5;
  uint64_t v9 = 8 * a4;
  if (a4)
  {
    uint64_t v10 = 8 * a4;
    char v11 = a3;
    do
    {
      uint64_t v12 = *v11;
      *(unsigned char *)(v12 + 3) = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      if (*(unsigned char *)(v12 + 2)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = a5 == 0;
      }
      if (!v13) {
        bssl::ssl_parse_extensions();
      }
      ++v11;
      v10 -= 8;
    }
    while (v10);
  }
  long long v22 = *a1;
  uint64_t v14 = 1;
  if (!*((void *)&v22 + 1)) {
    return v14;
  }
  while (1)
  {
    __int16 v21 = -21846;
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    if (!CBS_get_u16((unsigned __int16 **)&v22, &v21)
      || !CBS_get_u16_length_prefixed((unsigned __int8 **)&v22, (unint64_t *)&v20))
    {
      ERR_put_error(16, 0, 190, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake.cc", 293);
      char v18 = 50;
      goto LABEL_25;
    }
    if (a4) {
      break;
    }
LABEL_17:
    if ((v5 & 1) == 0)
    {
      ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake.cc", 310);
      char v18 = 110;
      goto LABEL_25;
    }
LABEL_21:
    if (!*((void *)&v22 + 1)) {
      return 1;
    }
  }
  uint64_t v15 = v9;
  long long v16 = a3;
  while (1)
  {
    unsigned __int8 v17 = (_WORD *)*v16;
    if (v21 == *(_WORD *)*v16)
    {
      if (*((unsigned char *)v17 + 2)) {
        break;
      }
    }
    ++v16;
    v15 -= 8;
    if (!v15) {
      goto LABEL_17;
    }
  }
  if (!*((unsigned char *)v17 + 3))
  {
    *((unsigned char *)v17 + 3) = 1;
    *(_OWORD *)(v17 + 4) = v20;
    goto LABEL_21;
  }
  ERR_put_error(16, 0, 257, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake.cc", 317);
  char v18 = 47;
LABEL_25:
  uint64_t v14 = 0;
  *a2 = v18;
  return v14;
}

uint64_t CBS_get_u16_length_prefixed(unsigned __int8 **a1, unint64_t *a2)
{
  return cbs_get_length_prefixed(a1, a2, 2uLL);
}

uint64_t CBS_get_u32(uint64_t *a1, int *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = v2 - 4;
  if (v2 < 4) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = *a1;
  *a1 += 4;
  a1[1] = v3;
  do
    int v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 4);
  *a2 = v6;
  return 1;
}

void bssl::SSL_SESSION_dup(bssl *this@<X0>, ssl_session_st *a2@<X1>, void *a3@<X8>)
{
  char v3 = (char)a2;
  char v39 = (void *)*((void *)this + 18);
  int v6 = bssl::New<ssl_session_st,bssl::SSL_X509_METHOD const*&>(&v39);
  uint64_t v7 = v6;
  if (!v6) {
    goto LABEL_23;
  }
  int v8 = v6[55] & 0xEF | (16 * ((*((unsigned __int8 *)this + 440) >> 4) & 1));
  *((unsigned char *)v6 + 44std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = v8;
  *((_WORD *)v6 + 2) = *((_WORD *)this + 2);
  *((unsigned char *)v6 + 44std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = *((unsigned char *)this + 440) & 0x20 | v8 & 0xDF;
  *((unsigned char *)v6 + 92) = *((unsigned char *)this + 92);
  if (*((unsigned char *)this + 92)) {
    memcpy((char *)v6 + 93, (char *)this + 93, *((unsigned __int8 *)this + 92));
  }
  *((unsigned char *)v7 + 1std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = *((unsigned char *)this + 10);
  if (*((unsigned char *)this + 10)) {
    memcpy((char *)v7 + 11, (char *)this + 11, *((unsigned __int8 *)this + 10));
  }
  v7[25] = *((void *)this + 25);
  uint64_t v9 = (const char *)*((void *)this + 16);
  if (!v9
    || (uint64_t v10 = (char *)OPENSSL_strdup(v9),
        std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)v7 + 16, v10),
        v7[16]))
  {
    uint64_t v11 = *((void *)this + 17);
    if (!v11
      || (uint64_t v12 = OPENSSL_sk_deep_copy(v11, (uint64_t (*)(uint64_t))sk_CRYPTO_BUFFER_call_copy_func, (uint64_t)bssl::SSL_SESSION_dup(ssl_session_st *,int)::$_0::__invoke, (void (*)(uint64_t))sk_CRYPTO_BUFFER_call_free_func, (uint64_t)CRYPTO_BUFFER_free), std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)v7 + 17, v12), v7[17]))
    {
      if ((*(unsigned int (**)(void *, bssl *))(*((void *)this + 18) + 56))(v7, this))
      {
        v7[22] = *((void *)this + 22);
        BOOL v13 = (unsigned int *)*((void *)this + 32);
        if (v13) {
          CRYPTO_BUFFER_up_ref(*((void *)this + 32));
        }
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)v7 + 32, v13);
        uint64_t v14 = (unsigned int *)*((void *)this + 31);
        if (v14) {
          CRYPTO_BUFFER_up_ref(*((void *)this + 31));
        }
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)v7 + 31, v14);
        long long v15 = *((_OWORD *)this + 18);
        *((_OWORD *)v7 + 17) = *((_OWORD *)this + 17);
        *((_OWORD *)v7 + 18) = v15;
        *((unsigned char *)v7 + 44std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = v7[55] & 0xFD | *((unsigned char *)this + 440) & 2;
        *((_WORD *)v7 + 4) = *((_WORD *)this + 4);
        v7[23] = *((void *)this + 23);
        v7[24] = *((void *)this + 24);
        if ((v3 & 2) == 0) {
          goto LABEL_21;
        }
        *((unsigned char *)v7 + 59) = *((unsigned char *)this + 59);
        if (*((unsigned char *)this + 59)) {
          memcpy((char *)v7 + 60, (char *)this + 60, *((unsigned __int8 *)this + 59));
        }
        *((_WORD *)v7 + 3) = *((_WORD *)this + 3);
        if (*((unsigned char *)this + 368))
        {
          memcpy(v7 + 38, (char *)this + 304, *((unsigned __int8 *)this + 368));
          char v21 = *((unsigned char *)this + 368);
        }
        else
        {
          char v21 = 0;
        }
        *((unsigned char *)v7 + 368) = v21;
        *((_DWORD *)v7 + 93) = *((_DWORD *)this + 93);
        v7[47] = *((void *)this + 47);
        char v22 = v7[55] & 0xFE | *((unsigned char *)this + 440) & 1;
        *((unsigned char *)v7 + 44std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = v22;
        *((unsigned char *)v7 + 44std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = v22 & 0xBF | *((unsigned char *)this + 440) & 0x40;
        unsigned int v23 = (const void *)*((void *)this + 49);
        unint64_t v24 = *((void *)this + 50);
        int v25 = bssl::Array<unsigned char>::Init((uint64_t)(v7 + 49), v24);
        char v26 = v25 ^ 1;
        if (!v24) {
          char v26 = 1;
        }
        if ((v26 & 1) == 0) {
          memmove((void *)v7[49], v23, v24);
        }
        if (v25)
        {
          uint64_t v27 = (const void *)*((void *)this + 56);
          unint64_t v28 = *((void *)this + 57);
          int v29 = bssl::Array<unsigned char>::Init((uint64_t)(v7 + 56), v28);
          char v30 = v29 ^ 1;
          if (!v28) {
            char v30 = 1;
          }
          if ((v30 & 1) == 0) {
            memmove((void *)v7[56], v27, v28);
          }
          if (v29)
          {
            BOOL v31 = (const void *)*((void *)this + 51);
            unint64_t v32 = *((void *)this + 52);
            int v33 = bssl::Array<unsigned char>::Init((uint64_t)(v7 + 51), v32);
            char v34 = v33 ^ 1;
            if (!v32) {
              char v34 = 1;
            }
            if ((v34 & 1) == 0) {
              memmove((void *)v7[51], v31, v32);
            }
            if (v33)
            {
              id v35 = (const void *)*((void *)this + 53);
              unint64_t v36 = *((void *)this + 54);
              char v37 = bssl::Array<unsigned char>::Init((uint64_t)(v7 + 53), v36);
              char v38 = v37 ^ 1;
              if (!v36) {
                char v38 = 1;
              }
              if ((v38 & 1) == 0) {
                memmove((void *)v7[53], v35, v36);
              }
              if (v37)
              {
LABEL_21:
                if ((v3 & 1) == 0) {
                  goto LABEL_22;
                }
                long long v16 = (const void *)*((void *)this + 29);
                unint64_t v17 = *((void *)this + 30);
                int v18 = bssl::Array<unsigned char>::Init((uint64_t)(v7 + 29), v17);
                char v19 = v18 ^ 1;
                if (!v17) {
                  char v19 = 1;
                }
                if ((v19 & 1) == 0) {
                  memmove((void *)v7[29], v16, v17);
                }
                if (v18)
                {
LABEL_22:
                  char v20 = *((unsigned char *)v7 + 440) | 4;
                  *((unsigned char *)v7 + 44std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = v20;
                  *((unsigned char *)v7 + 44std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->sid_ctx[20], 0) = *((unsigned char *)this + 440) & 0x80 | v20 & 0x7F;
LABEL_23:
                  *a3 = v7;
                  return;
                }
              }
            }
          }
        }
      }
    }
  }
  *a3 = 0;
  bssl::RefCounted<ssl_session_st>::DecRefInternal((ssl_session_st *)v7);
}

void sub_1BA0F2258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, SSL_SESSION *a9)
{
}

uint64_t bssl::Array<unsigned char>::Init(uint64_t a1, unint64_t a2)
{
  OPENSSL_free(*(void **)a1);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2)
  {
    uint64_t result = (uint64_t)OPENSSL_malloc(a2);
    *(void *)a1 = result;
    if (!result) {
      return result;
    }
    *(void *)(a1 + 8) = a2;
  }
  return 1;
}

void *bssl::New<ssl_credential_st,bssl::SSLCredentialType>(unsigned int *a1)
{
  uint64_t result = OPENSSL_malloc(0x60uLL);
  if (result) {
    return (void *)ssl_credential_st::ssl_credential_st((uint64_t)result, (void *)*a1, v3);
  }
  return result;
}

uint64_t ssl_credential_st::ssl_credential_st(uint64_t a1, void *a2, CRYPTO_EX_DATA *a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 5std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(a1 + 8std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0;
  CRYPTO_new_ex_data(a1 + 88, a2, a3);
  return a1;
}

void sub_1BA0F236C(_Unwind_Exception *a1)
{
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(v2 + 80), 0);
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](v3, 0);
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(v2 + 56), 0);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)(v2 + 48), 0);
  bssl::Array<unsigned short>::~Array(v2 + 32);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)(v2 + 16), 0);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *bssl::New<ssl_session_st,bssl::SSL_X509_METHOD const*&>(void **a1)
{
  uint64_t result = OPENSSL_malloc(0x1D0uLL);
  if (result) {
    return (void *)ssl_session_st::ssl_session_st((uint64_t)result, *a1, v3);
  }
  return result;
}

uint64_t ssl_session_st::ssl_session_st(uint64_t a1, void *a2, CRYPTO_EX_DATA *a3)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 2std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 10std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = a2;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 65;
  *(int32x2_t *)(a1 + 184) = vdup_n_s32(0x1C20u);
  *(_DWORD *)(a1 + 372) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 38std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 20std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 353) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(unsigned char *)(a1 + 440) &= 0x80u;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  CRYPTO_new_ex_data(a1 + 208, a2, a3);
  *(void *)(a1 + 192) = time(0);
  return a1;
}

void sub_1BA0F2508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  bssl::Array<unsigned short>::~Array(v13);
  bssl::Array<unsigned short>::~Array(v11 + 424);
  bssl::Array<unsigned short>::~Array(v11 + 408);
  bssl::Array<unsigned short>::~Array(v12);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)(v11 + 264), 0);
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(v11 + 256), 0);
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(v11 + 248), 0);
  bssl::Array<unsigned short>::~Array(v11 + 232);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)(v11 + 136), 0);
  std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100](v10, 0);
  _Unwind_Resume(a1);
}

int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
{
  **(void **)&class_index = 0;
  return class_index;
}

unint64_t *OPENSSL_sk_deep_copy(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9 = OPENSSL_sk_dup(a1);
  uint64_t v10 = v9;
  if (!v9) {
    return v10;
  }
  unint64_t v11 = *v9;
  if (!*v9) {
    return v10;
  }
  uint64_t v12 = 0;
  uint64_t v13 = (void *)v9[1];
  while (!v13[v12])
  {
LABEL_7:
    if (++v12 >= v11) {
      return v10;
    }
  }
  *(void *)(v10[1] + 8 * v12) = a2(a3);
  uint64_t v13 = (void *)v10[1];
  if (v13[v12])
  {
    unint64_t v11 = *v10;
    goto LABEL_7;
  }
  if (v12)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if (*(void *)(v10[1] + 8 * i)) {
        a4(a5);
      }
    }
    uint64_t v13 = (void *)v10[1];
  }
  OPENSSL_free(v13);
  OPENSSL_free(v10);
  return 0;
}

uint64_t sk_CRYPTO_BUFFER_call_copy_func(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t bssl::SSL_SESSION_dup(ssl_session_st *,int)::$_0::__invoke(uint64_t a1)
{
  return a1;
}

uint64_t CRYPTO_BUFFER_up_ref(uint64_t a1)
{
  return 1;
}

unsigned int *CRYPTO_refcount_inc(unsigned int *result)
{
  unsigned int v1 = atomic_load(result);
  if (v1 != -1)
  {
    for (unsigned int i = v1; i != -1; v1 = i)
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)result, &i, v1 + 1);
      if (i == v1) {
        break;
      }
    }
  }
  return result;
}

void *OPENSSL_sk_dup(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = OPENSSL_zalloc(0x28uLL);
  if (v2)
  {
    char v3 = OPENSSL_memdup(*(const void **)(a1 + 8), 8 * *(void *)(a1 + 24));
    v2[1] = v3;
    if (v3)
    {
      void *v2 = *(void *)a1;
      *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 32);
      v2[3] = *(void *)(a1 + 24);
      v2[4] = v4;
      return v2;
    }
    OPENSSL_free(0);
    OPENSSL_free(v2);
    return 0;
  }
  return v2;
}

uint64_t bssl::ssl_noop_x509_session_dup(bssl *this, ssl_session_st *a2, const ssl_session_st *a3)
{
  return 1;
}

BOOL bssl::tls13_derive_session_psk(unsigned __int8 *a1, const ssl_session_st *a2, size_t a3)
{
  digest = (EVP_MD *)bssl::ssl_session_get_digest((bssl *)a1, a2);
  return CRYPTO_tls13_hkdf_expand_label(a1 + 11, a1[10], digest, (uint64_t)(a1 + 11), a1[10], "resumption", 0xAuLL, a2, a3);
}

int8x8_t bssl::ssl_session_rebase_time(bssl *this, ssl_st *a2, ssl_session_st *a3)
{
  v11[0] = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = 0xAAAAAAAAAAAAAAAALL;
  bssl::ssl_get_current_time((uint64_t)this, (uint64_t)v11);
  cipher_list_by_iunsigned int d = a2->cipher_list_by_id;
  int v6 = (STACK *)v11[0];
  BOOL v7 = v11[0] >= (unint64_t)cipher_list_by_id;
  unint64_t v8 = v11[0] - (void)cipher_list_by_id;
  if (v7)
  {
    a2->cipher_list_by_iunsigned int d = (STACK *)v11[0];
    cipher_list = a2->cipher_list;
    v10.i64[0] = cipher_list;
    v10.i64[1] = HIDWORD(cipher_list);
    int8x8_t result = vbic_s8((int8x8_t)vsub_s32((int32x2_t)cipher_list, vdup_n_s32(v8)), (int8x8_t)vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v8), v10)));
    a2->cipher_list = (STACK *)result;
  }
  else
  {
    a2->cipher_list = 0;
    a2->cipher_list_by_iunsigned int d = v6;
  }
  return result;
}

uint64_t bssl::ssl_ctx_get_current_time(uint64_t a1, uint64_t a2)
{
  char v3 = *(uint64_t (**)(void, timeval *))(a1 + 768);
  if (v3)
  {
    v6.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&v6.tv_usec = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = v3(0, &v6);
    __darwin_time_t tv_sec = v6.tv_sec;
    if (v6.tv_sec < 0) {
      bssl::ssl_ctx_get_current_time();
    }
  }
  else
  {
    v6.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&v6.tv_usec = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = gettimeofday(&v6, 0);
    __darwin_time_t tv_sec = v6.tv_sec;
    if (v6.tv_sec < 0) {
      bssl::ssl_ctx_get_current_time();
    }
  }
  *(void *)a2 = tv_sec;
  *(_DWORD *)(a2 + 8) = v6.tv_usec;
  return result;
}

uint64_t bssl::ssl_get_current_time(uint64_t a1, uint64_t a2)
{
  return bssl::ssl_ctx_get_current_time(*(void *)(a1 + 120), a2);
}

unsigned __int8 *__cdecl SHA256(const unsigned __int8 *d, size_t n, unsigned __int8 *md)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memset(&v5.Nl, 0, 76);
  *(_OWORD *)v5.h = xmmword_1BA18A3F0;
  *(_OWORD *)&v5.h[4] = xmmword_1BA18A400;
  v5.unsigned int md_len = 32;
  SHA256_Update(&v5, d, n);
  sha256_final_impl(md, v5.md_len, (uint64_t)&v5);
  OPENSSL_cleanse(&v5, 0x70uLL);
  return md;
}

uint64_t sha256_final_impl(_DWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a3 + 104);
  if (v3 >= 0x40) {
    sha256_final_impl_cold_1();
  }
  uint64_t v4 = (int32x2_t *)a3;
  uint64_t v7 = a3 + 40;
  int8x8_t v8 = *(int8x8_t *)(a3 + 32);
  *(unsigned char *)(a3 + 40 + v3) = 0x80;
  uint64_t v9 = v3 + 1;
  if (v3 < 0x38)
  {
    if (v3 == 55) {
      goto LABEL_8;
    }
  }
  else
  {
    if (v3 != 63) {
      bzero((void *)(v7 + v9), 63 - v3);
    }
    sha256_block_data_order((unint64_t)v4, (unsigned int *)v7, 1);
    uint64_t v9 = 0;
  }
  bzero((void *)(v7 + v9), 56 - v9);
LABEL_8:
  v4[12] = vrev64_s32((int32x2_t)vrev32_s8(v8));
  sha256_block_data_order((unint64_t)v4, (unsigned int *)v7, 1);
  uint64_t result = 0;
  v4[13].i32[0] = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  if (a2 <= 0x20)
  {
    if ((a2 & 3) != 0) {
      sha256_final_impl_cold_2();
    }
    if (a2 >= 4)
    {
      unint64_t v11 = a2 >> 2;
      do
      {
        unsigned int v12 = v4->i32[0];
        uint64_t v4 = (int32x2_t *)((char *)v4 + 4);
        *a1++ = bswap32(v12);
        --v11;
      }
      while (v11);
    }
    return 1;
  }
  return result;
}

unint64_t sha256_block_data_order(unint64_t result, unsigned int *a2, uint64_t a3)
{
  v217 = (_DWORD *)result;
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v3 = *(_DWORD *)result;
    int v4 = *(_DWORD *)(result + 4);
    int v6 = *(_DWORD *)(result + 8);
    int v5 = *(_DWORD *)(result + 12);
    int v8 = *(_DWORD *)(result + 16);
    int v7 = *(_DWORD *)(result + 20);
    int v9 = *(_DWORD *)(result + 24);
    LODWORD(result) = *(_DWORD *)(result + 28);
    do
    {
      uint64_t v227 = a3;
      unsigned int v10 = bswap32(*a2);
      HIDWORD(v11) = v8;
      LODWORD(v11) = v8;
      int v12 = (v11 >> 6) ^ __ROR4__(v8, 11);
      unint64_t v13 = __PAIR64__(v3, __ROR4__(v8, 25));
      int v218 = result;
      int v14 = result + (v8 & v7) + (v9 & ~v8) + v10 + (v12 ^ v13) + 1116352408;
      LODWORD(v13) = v3;
      int v222 = v5;
      int v15 = v14 + v5;
      unsigned int v16 = ((v13 >> 2) ^ __ROR4__(v3, 13) ^ __ROR4__(v3, 22)) + ((v4 ^ v6) & v3 ^ v4 & v6) + v14;
      unsigned int v17 = bswap32(a2[1]);
      HIDWORD(v13) = v15;
      LODWORD(v13) = v15;
      v228[0] = v10;
      v228[1] = v17;
      int v18 = (v13 >> 6) ^ __ROR4__(v15, 11);
      unint64_t v19 = __PAIR64__(v16, __ROR4__(v15, 25));
      int v219 = v9;
      int v20 = v9 + v17 + (v7 & ~v15) + (v15 & v8) + 1899447441 + (v18 ^ v19);
      LODWORD(v19) = v16;
      int v223 = v6;
      int v21 = v20 + v6;
      unsigned int v22 = ((v19 >> 2) ^ __ROR4__(v16, 13) ^ __ROR4__(v16, 22)) + (v16 & (v3 ^ v4) ^ v3 & v4) + v20;
      unsigned int v23 = bswap32(a2[2]);
      HIDWORD(v19) = v21;
      LODWORD(v19) = v21;
      int v24 = (v19 >> 6) ^ __ROR4__(v21, 11);
      unint64_t v26 = __PAIR64__(v22, __ROR4__(v21, 25));
      int v25 = v24 ^ v26;
      int v220 = v7;
      LODWORD(v26) = v22;
      int v27 = v7 + v23 + (v8 & ~v21) + (v21 & v15) - 1245643825 + v25;
      int v224 = v4;
      int v28 = v27 + v4;
      unsigned int v29 = ((v26 >> 2) ^ __ROR4__(v22, 13) ^ __ROR4__(v22, 22)) + (v22 & (v16 ^ v3) ^ v16 & v3) + v27;
      unsigned int v30 = bswap32(a2[3]);
      v228[2] = v23;
      v228[3] = v30;
      HIDWORD(v26) = v28;
      LODWORD(v26) = v28;
      int v31 = (v26 >> 6) ^ __ROR4__(v28, 11);
      unint64_t v32 = __PAIR64__(v29, __ROR4__(v28, 25));
      int v221 = v8;
      int v33 = v8 + v30 + (v15 & ~v28) + (v28 & v21) - 373957723 + (v31 ^ v32);
      LODWORD(v32) = v29;
      unsigned int v225 = v3;
      int v34 = v33 + v3;
      unsigned int v35 = ((v32 >> 2) ^ __ROR4__(v29, 13) ^ __ROR4__(v29, 22)) + (v29 & (v22 ^ v16) ^ v22 & v16) + v33;
      unsigned int v36 = bswap32(a2[4]);
      HIDWORD(v32) = v34;
      LODWORD(v32) = v34;
      int v37 = (v32 >> 6) ^ __ROR4__(v34, 11);
      unint64_t v38 = __PAIR64__(v35, __ROR4__(v34, 25));
      int v39 = v15 + v36 + (v21 & ~v34) + (v34 & v28) + 961987163 + (v37 ^ v38);
      LODWORD(v38) = v35;
      int v40 = v39 + v16;
      unsigned int v41 = ((v38 >> 2) ^ __ROR4__(v35, 13) ^ __ROR4__(v35, 22)) + (v35 & (v29 ^ v22) ^ v29 & v22) + v39;
      unsigned int v42 = bswap32(a2[5]);
      v228[4] = v36;
      v228[5] = v42;
      HIDWORD(v38) = v40;
      LODWORD(v38) = v40;
      int v43 = (v38 >> 6) ^ __ROR4__(v40, 11);
      unint64_t v44 = __PAIR64__(v41, __ROR4__(v40, 25));
      int v45 = v21 + v42 + (v28 & ~v40) + (v40 & v34) + 1508970993 + (v43 ^ v44);
      LODWORD(v44) = v41;
      int v46 = v45 + v22;
      unsigned int v47 = ((v44 >> 2) ^ __ROR4__(v41, 13) ^ __ROR4__(v41, 22)) + (v41 & (v35 ^ v29) ^ v35 & v29) + v45;
      unsigned int v48 = bswap32(a2[6]);
      int v49 = v48 + v28 + (v34 & ~v46) + (v46 & v40);
      HIDWORD(v44) = v46;
      LODWORD(v44) = v46;
      int v50 = (v44 >> 6) ^ __ROR4__(v46, 11);
      unint64_t v51 = __PAIR64__(v47, __ROR4__(v46, 25));
      int v52 = v49 - 1841331548 + (v50 ^ v51);
      LODWORD(v51) = v47;
      int v53 = v52 + v29;
      unsigned int v54 = ((v51 >> 2) ^ __ROR4__(v47, 13) ^ __ROR4__(v47, 22)) + (v47 & (v41 ^ v35) ^ v41 & v35) + v52;
      unsigned int v55 = bswap32(a2[7]);
      HIDWORD(v51) = v53;
      LODWORD(v51) = v53;
      v228[6] = v48;
      v228[7] = v55;
      int v56 = (v51 >> 6) ^ __ROR4__(v53, 11);
      unint64_t v57 = __PAIR64__(v54, __ROR4__(v53, 25));
      int v58 = v55 + v34 + (v40 & ~v53) + (v53 & v46) - 1424204075 + (v56 ^ v57);
      LODWORD(v57) = v54;
      int v59 = v58 + v35;
      unsigned int v60 = ((v57 >> 2) ^ __ROR4__(v54, 13) ^ __ROR4__(v54, 22)) + (v54 & (v47 ^ v41) ^ v47 & v41) + v58;
      HIDWORD(v57) = v59;
      LODWORD(v57) = v59;
      unsigned int v61 = bswap32(a2[8]);
      int v62 = (v57 >> 6) ^ __ROR4__(v59, 11);
      unint64_t v63 = __PAIR64__(v60, __ROR4__(v59, 25));
      int v64 = v61 + v40 + (v46 & ~v59) + (v59 & v53) - 670586216 + (v62 ^ v63);
      LODWORD(v63) = v60;
      int v65 = v64 + v41;
      unsigned int v66 = ((v63 >> 2) ^ __ROR4__(v60, 13) ^ __ROR4__(v60, 22)) + (v60 & (v54 ^ v47) ^ v54 & v47) + v64;
      unsigned int v67 = bswap32(a2[9]);
      v228[8] = v61;
      v228[9] = v67;
      HIDWORD(v63) = v65;
      LODWORD(v63) = v65;
      int v68 = (v63 >> 6) ^ __ROR4__(v65, 11);
      unint64_t v69 = __PAIR64__(v66, __ROR4__(v65, 25));
      int v70 = v67 + v46 + (v53 & ~v65) + (v65 & v59) + 310598401 + (v68 ^ v69);
      LODWORD(v69) = v66;
      int v71 = v70 + v47;
      unsigned int v72 = ((v69 >> 2) ^ __ROR4__(v66, 13) ^ __ROR4__(v66, 22)) + (v66 & (v60 ^ v54) ^ v60 & v54) + v70;
      unsigned int v73 = bswap32(a2[10]);
      int v74 = v73 + v53 + (v59 & ~v71) + (v71 & v65);
      HIDWORD(v69) = v71;
      LODWORD(v69) = v71;
      int v75 = (v69 >> 6) ^ __ROR4__(v71, 11);
      unint64_t v76 = __PAIR64__(v72, __ROR4__(v71, 25));
      int v77 = v74 + 607225278 + (v75 ^ v76);
      LODWORD(v76) = v72;
      int v78 = v77 + v54;
      unsigned int v79 = ((v76 >> 2) ^ __ROR4__(v72, 13) ^ __ROR4__(v72, 22)) + (v72 & (v66 ^ v60) ^ v66 & v60) + v77;
      unsigned int v80 = bswap32(a2[11]);
      v228[10] = v73;
      v228[11] = v80;
      HIDWORD(v76) = v78;
      LODWORD(v76) = v78;
      int v81 = (v76 >> 6) ^ __ROR4__(v78, 11);
      unint64_t v82 = __PAIR64__(v79, __ROR4__(v78, 25));
      int v83 = v80 + v59 + (v65 & ~v78) + (v78 & v71) + 1426881987 + (v81 ^ v82);
      LODWORD(v82) = v79;
      int v84 = v83 + v60;
      unsigned int v85 = ((v82 >> 2) ^ __ROR4__(v79, 13) ^ __ROR4__(v79, 22)) + (v79 & (v72 ^ v66) ^ v72 & v66) + v83;
      unsigned int v86 = bswap32(a2[12]);
      HIDWORD(v82) = v84;
      LODWORD(v82) = v84;
      int v87 = (v82 >> 6) ^ __ROR4__(v84, 11);
      unint64_t v88 = __PAIR64__(v85, __ROR4__(v84, 25));
      int v89 = v86 + v65 + (v71 & ~v84) + (v84 & v78) + 1925078388 + (v87 ^ v88);
      LODWORD(v88) = v85;
      unsigned int v90 = v89 + v66;
      unsigned int v91 = ((v88 >> 2) ^ __ROR4__(v85, 13) ^ __ROR4__(v85, 22)) + (v85 & (v79 ^ v72) ^ v79 & v72) + v89;
      unsigned int v92 = bswap32(a2[13]);
      HIDWORD(v88) = v90;
      LODWORD(v88) = v90;
      v228[12] = v86;
      v228[13] = v92;
      int v93 = (v88 >> 6) ^ __ROR4__(v90, 11);
      unint64_t v94 = __PAIR64__(v91, __ROR4__(v90, 25));
      int v95 = v92 + v71 + (v78 & ~v90) + (v90 & v84) - 2132889090 + (v93 ^ v94);
      LODWORD(v94) = v91;
      unsigned int v96 = v95 + v72;
      unsigned int v97 = ((v94 >> 2) ^ __ROR4__(v91, 13) ^ __ROR4__(v91, 22)) + (v91 & (v85 ^ v79) ^ v85 & v79) + v95;
      HIDWORD(v94) = v96;
      LODWORD(v94) = v95 + v72;
      v226 = a2;
      unsigned int v98 = bswap32(a2[14]);
      int v99 = (v94 >> 6) ^ __ROR4__(v96, 11);
      unint64_t v100 = __PAIR64__(v97, __ROR4__(v96, 25));
      int v101 = v98 + v78 + (v84 & ~v96) + (v96 & v90) - 1680079193 + (v99 ^ v100);
      LODWORD(v10std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v97;
      unsigned int v102 = v101 + v79;
      unsigned int v103 = ((v100 >> 2) ^ __ROR4__(v97, 13) ^ __ROR4__(v97, 22)) + (v97 & (v91 ^ v85) ^ v91 & v85) + v101;
      unsigned int v104 = bswap32(a2[15]);
      v228[14] = v98;
      v228[15] = v104;
      HIDWORD(v10std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v102;
      LODWORD(v10std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v102;
      int v105 = (v100 >> 6) ^ __ROR4__(v102, 11);
      unint64_t v106 = __PAIR64__(v103, __ROR4__(v102, 25));
      int v107 = v104 + v84 + (v90 & ~v102) + (v102 & v96) - 1046744716 + (v105 ^ v106);
      LODWORD(v106) = v103;
      unsigned int v108 = v107 + v85;
      unsigned int v109 = ((v106 >> 2) ^ __ROR4__(v103, 13) ^ __ROR4__(v103, 22)) + (v103 & (v97 ^ v91) ^ v97 & v91) + v107;
      v110 = &dword_1BA18A46C;
      uint64_t v111 = 31;
      do
      {
        unint64_t v112 = v111 - 15;
        uint64_t v113 = ((int)v111 - 14) & 9;
        unsigned int v114 = v228[v113];
        unsigned int v115 = v228[((_BYTE)v111 - 1) & 0xE];
        HIDWORD(v117) = v114;
        LODWORD(v117) = v114;
        int v116 = v117 >> 7;
        unint64_t v119 = __PAIR64__(v115, __ROR4__(v114, 18));
        int v118 = v116 ^ v119;
        LODWORD(v119) = v115;
        int v120 = v119 >> 17;
        unint64_t v121 = __PAIR64__(v108, __ROR4__(v115, 19));
        uint64_t v122 = (v111 - 15) & 8;
        int v123 = v120 ^ v121 ^ (v115 >> 10);
        LODWORD(v121) = v108;
        int v124 = (v111 - 15) & 8;
        unsigned int v125 = (v118 ^ (v114 >> 3)) + v228[((int)v111 - 6) & 9] + v228[v122] + v123;
        int v126 = (v121 >> 6) ^ __ROR4__(v108, 11);
        unint64_t v128 = __PAIR64__(v109, __ROR4__(v108, 25));
        int v127 = v126 ^ v128;
        LODWORD(v128) = v109;
        int v129 = *(v110 - 6);
        int v130 = (v108 & v102) + v90 + (v96 & ~v108) + *(v110 - 7) + v127;
        v228[v122] = v125;
        LODWORD(v122) = ((v128 >> 2) ^ __ROR4__(v109, 13) ^ __ROR4__(v109, 22)) + ((v103 ^ v97) & v109 ^ v103 & v97);
        int v131 = v130 + v125;
        unsigned int v132 = v131 + v91;
        HIDWORD(v128) = v228[v124 | 2];
        LODWORD(v128) = HIDWORD(v128);
        unsigned int v133 = v122 + v131;
        unsigned int v134 = v228[v111 & 0xF];
        int v135 = (v128 >> 7) ^ __ROR4__(HIDWORD(v128), 18) ^ (HIDWORD(v128) >> 3);
        HIDWORD(v128) = v134;
        LODWORD(v128) = v134;
        int v136 = v128 >> 17;
        unint64_t v137 = __PAIR64__(v132, __ROR4__(v134, 19));
        int v138 = v228[((int)v111 - 5) & 0xALL] + v114 + (v136 ^ v137 ^ (v134 >> 10));
        LODWORD(v137) = v132;
        int v139 = v138 + v135;
        int v140 = (v137 >> 6) ^ __ROR4__(v132, 11);
        unint64_t v142 = __PAIR64__(v133, __ROR4__(v132, 25));
        int v141 = v140 ^ v142;
        LODWORD(v142) = v133;
        v228[v113] = v139;
        LODWORD(v113) = (v142 >> 2) ^ __ROR4__(v133, 13);
        unint64_t v143 = __PAIR64__(v125, __ROR4__(v133, 22));
        int v144 = (v102 & ~v132) + v96 + (v132 & v108) + v129 + v139 + v141;
        int v145 = (v113 ^ v143) + (v133 & (v109 ^ v103) ^ v109 & v103);
        unsigned int v146 = v144 + v97;
        unsigned int v147 = v228[v124 | 3];
        LODWORD(v143) = v125;
        int v148 = v143 >> 17;
        HIDWORD(v143) = v147;
        LODWORD(v143) = v147;
        LODWORD(v122) = (v143 >> 7) ^ __ROR4__(v147, 18);
        unint64_t v149 = __PAIR64__(v146, __ROR4__(v125, 19));
        int v150 = v148 ^ v149 ^ (v125 >> 10);
        uint64_t v151 = ((int)v111 - 13) & 0xALL;
        unsigned int v152 = v145 + v144;
        int v153 = v228[((int)v111 - 4) & 0xBLL] + v228[v151] + (v122 ^ (v147 >> 3)) + v150;
        LODWORD(v149) = v146;
        int v154 = (v149 >> 6) ^ __ROR4__(v146, 11);
        unint64_t v156 = __PAIR64__(v152, __ROR4__(v146, 25));
        int v155 = v154 ^ v156;
        v228[v151] = v153;
        LODWORD(v151) = *(v110 - 4);
        int v157 = *(v110 - 5) + v102 + v153;
        LODWORD(v156) = v152;
        int v158 = ((v156 >> 2) ^ __ROR4__(v152, 13) ^ __ROR4__(v152, 22)) + (v152 & (v133 ^ v109) ^ v133 & v109);
        unsigned int v159 = v228[v124 | 4];
        int v160 = v157 + (v108 & ~v146) + (v146 & v132) + v155;
        HIDWORD(v156) = v159;
        LODWORD(v156) = v159;
        int v161 = v156 >> 7;
        LODWORD(v122) = v228[v124 | 1];
        unint64_t v163 = __PAIR64__(v122, __ROR4__(v159, 18));
        int v162 = v161 ^ v163;
        LODWORD(v163) = v122;
        int v164 = v162 ^ (v159 >> 3);
        uint64_t v165 = ((int)v111 - 12) & 0xBLL;
        int v166 = v160 + v103;
        int v167 = v164
             + v228[((_BYTE)v111 - 3) & 0xC]
             + v228[v165]
             + ((v163 >> 17) ^ __ROR4__(v122, 19) ^ (v122 >> 10));
        unsigned int v168 = v158 + v160;
        HIDWORD(v163) = v166;
        LODWORD(v163) = v166;
        int v169 = (v163 >> 6) ^ __ROR4__(v166, 11);
        unint64_t v171 = __PAIR64__(v168, __ROR4__(v166, 25));
        int v170 = v169 ^ v171;
        v228[v165] = v167;
        LODWORD(v171) = v168;
        int v172 = v151 + v108 + v167 + (v132 & ~v166) + (v166 & v146) + v170;
        int v173 = ((v171 >> 2) ^ __ROR4__(v168, 13) ^ __ROR4__(v168, 22)) + (v168 & (v152 ^ v133) ^ v152 & v133);
        unsigned int v174 = v172 + v109;
        unsigned int v175 = v228[v124 | 5];
        HIDWORD(v171) = v175;
        LODWORD(v171) = v175;
        int v176 = (v171 >> 7) ^ __ROR4__(v175, 18);
        unsigned int v177 = v228[v124 | 2];
        HIDWORD(v171) = v177;
        LODWORD(v171) = v177;
        LODWORD(v165) = v171 >> 17;
        unint64_t v178 = __PAIR64__(v174, __ROR4__(v177, 19));
        uint64_t v179 = ((_BYTE)v111 - 11) & 0xC;
        int v180 = (v176 ^ (v175 >> 3)) + v228[((int)v111 - 2) & 0xDLL] + v228[v179] + (v165 ^ v178 ^ (v177 >> 10));
        unsigned int v181 = v173 + v172;
        LODWORD(v178) = v174;
        int v182 = (v178 >> 6) ^ __ROR4__(v174, 11);
        unint64_t v184 = __PAIR64__(v181, __ROR4__(v174, 25));
        int v183 = v182 ^ v184;
        v228[v179] = v180;
        LODWORD(v165) = *(v110 - 2);
        LODWORD(v184) = v181;
        LODWORD(v151) = ((v184 >> 2) ^ __ROR4__(v181, 13) ^ __ROR4__(v181, 22)) + (v181 & (v168 ^ v152) ^ v168 & v152);
        int v185 = *(v110 - 3) + v180 + v132 + (v146 & ~v174) + (v174 & v166) + v183;
        unsigned int v90 = v185 + v133;
        unsigned int v186 = v228[v124 | 6];
        HIDWORD(v184) = v186;
        LODWORD(v184) = v186;
        int v187 = v184 >> 7;
        LODWORD(v113) = v228[v124 | 3];
        HIDWORD(v184) = v113;
        LODWORD(v184) = v113;
        int v188 = v184 >> 17;
        int v189 = v187 ^ __ROR4__(v186, 18) ^ (v186 >> 3);
        unint64_t v191 = __PAIR64__(v90, __ROR4__(v113, 19));
        int v190 = v188 ^ v191;
        uint64_t v192 = ((int)v111 - 10) & 0xDLL;
        unsigned int v91 = v151 + v185;
        unsigned int v193 = v228[v192] + v115 + v189 + (v190 ^ (v113 >> 10));
        LODWORD(v191) = v90;
        int v194 = (v191 >> 6) ^ __ROR4__(v90, 11);
        unint64_t v196 = __PAIR64__(v91, __ROR4__(v90, 25));
        int v195 = v194 ^ v196;
        v228[v192] = v193;
        LODWORD(v196) = v91;
        int v197 = v165 + v193 + v146 + (v166 & ~v90) + (v90 & v174) + v195;
        int v198 = ((v196 >> 2) ^ __ROR4__(v91, 13) ^ __ROR4__(v91, 22)) + (v91 & (v181 ^ v168) ^ v181 & v168);
        LODWORD(v179) = v228[v124 | 7];
        unsigned int v96 = v197 + v152;
        HIDWORD(v196) = v179;
        LODWORD(v196) = v179;
        LODWORD(v113) = v196 >> 7;
        unsigned int v199 = v228[v124 | 4];
        unint64_t v200 = __PAIR64__(v199, __ROR4__(v179, 18));
        LODWORD(v179) = v113 ^ v200 ^ (v179 >> 3);
        LODWORD(v20std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v199;
        LODWORD(v113) = v200 >> 17;
        unint64_t v201 = __PAIR64__(v96, __ROR4__(v199, 19));
        uint64_t v202 = ((_BYTE)v111 - 9) & 0xE;
        LODWORD(v179) = v228[v202] + v134 + v179 + (v113 ^ v201 ^ (v199 >> 10));
        unsigned int v97 = v198 + v197;
        LODWORD(v201) = v96;
        int v203 = (v201 >> 6) ^ __ROR4__(v96, 11);
        unint64_t v205 = __PAIR64__(v97, __ROR4__(v96, 25));
        int v204 = v203 ^ v205;
        v228[v202] = v179;
        LODWORD(v205) = v97;
        int v206 = *(v110 - 1) + v179 + v166 + (v174 & ~v96) + (v96 & v90) + v204;
        unsigned int v102 = v206 + v168;
        unsigned int v103 = ((v205 >> 2) ^ __ROR4__(v97, 13) ^ __ROR4__(v97, 22)) + (v97 & (v91 ^ v181) ^ v91 & v181) + v206;
        unsigned int v207 = v228[v124 ^ 8];
        HIDWORD(v205) = v207;
        LODWORD(v205) = v207;
        LODWORD(v179) = v205 >> 7;
        unsigned int v208 = v228[v124 | 5];
        HIDWORD(v205) = v208;
        LODWORD(v205) = v208;
        LODWORD(v113) = v205 >> 17;
        int v209 = v179 ^ __ROR4__(v207, 18) ^ (v207 >> 3);
        unint64_t v210 = __PAIR64__(v102, __ROR4__(v208, 19));
        uint64_t v211 = ((_BYTE)v111 - 8) & 0xF;
        LODWORD(v179) = v113 ^ v210 ^ (v208 >> 10);
        LODWORD(v21std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v102;
        int v212 = (v210 >> 6) ^ __ROR4__(v102, 11);
        int v213 = v228[v211] + v209 + v125 + v179;
        unint64_t v214 = __PAIR64__(v103, __ROR4__(v102, 25));
        LODWORD(v179) = v212 ^ v214;
        int v215 = *v110;
        v110 += 8;
        v228[v211] = v213;
        LODWORD(v214) = v103;
        int v216 = v215 + v213 + v174 + (v90 & ~v102) + (v102 & v96) + v179;
        unsigned int v108 = v216 + v181;
        unsigned int v109 = ((v214 >> 2) ^ __ROR4__(v103, 13) ^ __ROR4__(v103, 22)) + (v103 & (v97 ^ v91) ^ v97 & v91) + v216;
        v111 += 8;
      }
      while (v112 < 0x38);
      a2 = v226 + 16;
      unsigned int v3 = v109 + v225;
      int v4 = v103 + v224;
      _DWORD *v217 = v109 + v225;
      v217[1] = v103 + v224;
      int v6 = v97 + v223;
      int v5 = v91 + v222;
      v217[2] = v97 + v223;
      v217[3] = v91 + v222;
      int v8 = v108 + v221;
      int v7 = v102 + v220;
      v217[4] = v108 + v221;
      v217[5] = v102 + v220;
      int v9 = v96 + v219;
      uint64_t result = v90 + v218;
      v217[6] = v96 + v219;
      v217[7] = result;
      a3 = v227 - 1;
    }
    while (v227 != 1);
  }
  return result;
}

int SHA256_Update(SHA256_CTX *c, const void *data, size_t len)
{
  if (len)
  {
    size_t v3 = len;
    int v4 = (unsigned int *)data;
    int v6 = c->data;
    size_t v7 = *(void *)&c->Nl + 8 * len;
    *(void *)&c->Nl = v7;
    uint64_t num = c->num;
    if (num)
    {
      if (len <= 0x3F && num + len < 0x40)
      {
        memcpy((char *)v6 + num, data, len);
        c->num += v3;
        return 1;
      }
      uint64_t v9 = 64 - num;
      if (num != 64) {
        memcpy((char *)v6 + num, data, 64 - num);
      }
      sha256_block_data_order((unint64_t)c, v6, 1);
      int v4 = (unsigned int *)((char *)v4 + v9);
      v3 -= v9;
      c->uint64_t num = 0;
      *(_OWORD *)int v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
    }
    if (v3 >= 0x40)
    {
      sha256_block_data_order((unint64_t)c, v4, v3 >> 6);
      int v4 = (unsigned int *)((char *)v4 + (v3 & 0xFFFFFFFFFFFFFFC0));
      v3 &= 0x3Fu;
    }
    if (v3)
    {
      c->uint64_t num = v3;
      memcpy(v6, v4, v3);
    }
  }
  return 1;
}

void crypto_buffer_free_object(void **a1)
{
  if (!*((_DWORD *)a1 + 7)) {
    OPENSSL_free(a1[1]);
  }

  OPENSSL_free(a1);
}

void bssl::SSLCipherPreferenceList::~SSLCipherPreferenceList(bssl::SSLCipherPreferenceList *this)
{
}

uint64_t bssl::ssl_noop_x509_session_cache_objects(bssl *this, ssl_session_st *a2)
{
  return 1;
}

uint64_t OPENSSL_sk_set(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  if (!a1 || *a1 <= a2) {
    return 0;
  }
  *(void *)(a1[1] + 8 * a2) = a3;
  return a3;
}

void bssl::SSLTranscript::~SSLTranscript(bssl::SSLTranscript *this)
{
}

void std::unique_ptr<err_save_state_st,bssl::internal::Deleter>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    ERR_SAVE_STATE_free(v3);
  }
}

void std::unique_ptr<ssl_ech_keys_st,bssl::internal::Deleter>::reset[abi:ne180100](unsigned int **a1, unsigned int *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    SSL_ECH_KEYS_free(v3);
  }
}

void std::unique_ptr<bssl::ECHConfig,bssl::internal::Deleter>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    int v4 = (void *)bssl::Array<unsigned short>::~Array(v3);
    OPENSSL_free(v4);
  }
}

void std::unique_ptr<bssl::SSL_HANDSHAKE_HINTS,bssl::internal::Deleter>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    bssl::Delete<bssl::SSL_HANDSHAKE_HINTS>(v3);
  }
}

uint64_t EVP_HPKE_CTX_cleanup(uint64_t a1)
{
  return EVP_AEAD_CTX_cleanup(a1 + 24);
}

SSL_SESSION *SSL_SESSION_from_bytes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v7 = a1;
  *((void *)&v7 + 1) = a2;
  int v6 = (SSL_SESSION *)0xAAAAAAAAAAAAAAAALL;
  bssl::SSL_SESSION_parse(&v7, *(uint64_t (***)(void))(a3 + 16), *(void ***)(a3 + 776), (unint64_t *)&v6);
  uint64_t v3 = v6;
  if (v6) {
    BOOL v4 = *((void *)&v7 + 1) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 873);
    int v6 = 0;
    SSL_SESSION_free(v3);
    return 0;
  }
  return v3;
}

void sub_1BA0F3A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)va, 0);
  _Unwind_Resume(a1);
}

void bssl::SSL_SESSION_parse(long long *a1@<X0>, uint64_t (**a2)(void)@<X1>, void **a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
  bssl::ssl_session_new(a2, &v64);
  if (!v64)
  {
    *a4 = 0;
    return;
  }
  memset(v63, 170, sizeof(v63));
  __int16 v62 = -21846;
  if (!CBS_get_asn1(a1, &v63[1], 536870928)
    || !CBS_get_asn1_uint64(&v63[1], (unint64_t *)v63 + 1)
    || *((void *)&v63[0] + 1) != 1
    || !CBS_get_asn1_uint64(&v63[1], (unint64_t *)v63)
    || *(void *)&v63[0] >> 16
    || (bssl::ssl_protocol_version_from_wire((bssl *)&v62, (unsigned __int16 *)LOWORD(v63[0])) & 1) == 0)
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 553);
    goto LABEL_18;
  }
  *(_WORD *)(v64 + 4) = v63[0];
  memset(v61, 170, 18);
  if (!CBS_get_asn1(&v63[1], &v61[1], 4)
    || !CBS_get_u16((unsigned __int16 **)&v61[1], v61)
    || *(void *)&v61[5])
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 563);
    goto LABEL_18;
  }
  cipher_by_value = SSL_get_cipher_by_value(v61[0]);
  *(void *)(v64 + 20std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = cipher_by_value;
  if (!cipher_by_value)
  {
    ERR_put_error(16, 0, 237, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 568);
    goto LABEL_18;
  }
  memset(__src, 170, sizeof(__src));
  if (!CBS_get_asn1(&v63[1], &__src[2], 4)
    || __src[3] > (void *)0x20
    || !CBS_get_asn1(&v63[1], __src, 4)
    || (uint64_t v9 = __src[1], __src[1] >= (void *)0x31))
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 577);
LABEL_18:
    *a4 = 0;
    goto LABEL_19;
  }
  unint64_t v11 = (unsigned char *)v64;
  char v12 = (char)__src[3];
  if (__src[3]) {
    memcpy((void *)(v64 + 60), __src[2], (size_t)__src[3]);
  }
  v11[59] = v12;
  if (v9)
  {
    memcpy(v11 + 11, __src[0], (size_t)v9);
    char v13 = (char)__src[1];
  }
  else
  {
    char v13 = 0;
  }
  v11[10] = v13;
  memset(v59, 170, sizeof(v59));
  if (!CBS_get_asn1(&v63[1], &v59[1], -1610612735)
    || !CBS_get_asn1_uint64((long long *)&v59[1], (unint64_t *)(v64 + 192))
    || !CBS_get_asn1(&v63[1], &v59[1], -1610612734)
    || !CBS_get_asn1_uint64((long long *)&v59[1], v59)
    || HIDWORD(v59[0]))
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 596);
    goto LABEL_18;
  }
  *(_DWORD *)(v64 + 184) = v59[0];
  memset(v58, 170, sizeof(v58));
  if (!CBS_get_optional_asn1(&v63[1], &v58[1], v58, -1610612733) || v58[0] && !*(void *)&v58[3])
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 606);
    goto LABEL_18;
  }
  if (!bssl::SSL_SESSION_parse_bounded_octet_string(&v63[1], (void *)(v64 + 93), (unsigned char *)(v64 + 92), 0x20u, -1610612732)|| !bssl::SSL_SESSION_parse_long(&v63[1], (void *)(v64 + 176)))
  {
    goto LABEL_18;
  }
  v57[0] = 0xAAAAAAAAAAAAAAAALL;
  v57[1] = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_optional_asn1(&v63[1], v57, 0, -1610612730))
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 623);
    goto LABEL_18;
  }
  if (!bssl::SSL_SESSION_parse_string(&v63[1], (void **)(v64 + 128))
    || !bssl::SSL_SESSION_parse_u32(&v63[1], (_DWORD *)(v64 + 372), -1610612727, 0)
    || (bssl::SSL_SESSION_parse_octet_string(&v63[1], (void **)(v64 + 232), -1610612726) & 1) == 0)
  {
    goto LABEL_18;
  }
  if (CBS_peek_asn1_tag(&v63[1], -1610612723))
  {
    *(void *)&long long v56 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
    if (!CBS_get_asn1(&v63[1], &v59[1], -1610612723)
      || !CBS_get_asn1((long long *)&v59[1], &v56, 4)
      || *((void *)&v56 + 1) != 32
      || v59[2])
    {
      ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 641);
      goto LABEL_18;
    }
    unint64_t v14 = v64;
    long long v15 = *(_OWORD *)(v56 + 16);
    *(_OWORD *)(v64 + 272) = *(_OWORD *)v56;
    *(_OWORD *)(v14 + 288) = v15;
    char v16 = *(unsigned char *)(v14 + 440) | 2;
  }
  else
  {
    unint64_t v14 = v64;
    char v16 = *(unsigned char *)(v64 + 440) & 0xFD;
  }
  *(unsigned char *)(v14 + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = v16;
  if (!bssl::SSL_SESSION_parse_bounded_octet_string(&v63[1], (void *)(v14 + 304), (unsigned char *)(v14 + 368), 0x40u, -1610612722)|| !bssl::SSL_SESSION_parse_crypto_buffer(&v63[1], (unsigned int **)(v64 + 248), -1610612721, a3)|| !bssl::SSL_SESSION_parse_crypto_buffer(&v63[1], (unsigned int **)(v64 + 256), -1610612720, a3))
  {
    goto LABEL_18;
  }
  int v55 = -1431655766;
  if (!CBS_get_optional_asn1_BOOL(&v63[1], &v55, -1610612719, 0))
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 667);
    goto LABEL_18;
  }
  unint64_t v17 = v64;
  *(unsigned char *)(v64 + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = *(unsigned char *)(v64 + 440) & 0xFE | (v55 != 0);
  if (!bssl::SSL_SESSION_parse_u16(&v63[1], (_WORD *)(v17 + 6), -1610612718))
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 673);
    goto LABEL_18;
  }
  long long v56 = 0uLL;
  int v54 = -1431655766;
  if (!CBS_get_optional_asn1(&v63[1], &v56, &v54, -1610612717)) {
    goto LABEL_67;
  }
  if (!v54)
  {
    int v18 = v58[0];
    goto LABEL_69;
  }
  if (!*((void *)&v56 + 1))
  {
LABEL_67:
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 683);
    goto LABEL_18;
  }
  int v18 = v58[0];
  if (!v58[0])
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 687);
    goto LABEL_18;
  }
LABEL_69:
  if (!(v18 | v54)) {
    goto LABEL_81;
  }
  unint64_t v19 = v64;
  int v20 = OPENSSL_sk_new_null();
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)(v19 + 136), v20);
  if (!*(void *)(v64 + 136)) {
    goto LABEL_18;
  }
  if (v58[0])
  {
    int v21 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)&v58[1], a3);
    unint64_t v51 = v21;
    if (v21)
    {
      unsigned int v22 = *(unint64_t **)(v64 + 136);
      unint64_t v51 = 0;
      int v53 = v21;
      if (OPENSSL_sk_push(v22, (uint64_t)v21))
      {
        int v53 = 0;
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v53, 0);
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v51, 0);
        goto LABEL_75;
      }
      std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v53, 0);
    }
    *a4 = 0;
    unint64_t v44 = &v51;
LABEL_125:
    std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](v44, 0);
    goto LABEL_19;
  }
LABEL_75:
  if (*((void *)&v56 + 1))
  {
    while (1)
    {
      unint64_t v51 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
      if (!CBS_get_any_asn1_element(&v56, &v51, 0, 0) || !v52)
      {
        ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 708);
        goto LABEL_18;
      }
      v46[1] = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
      unsigned int v23 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)&v51, a3);
      v46[1] = v23;
      if (!v23) {
        break;
      }
      int v24 = *(unint64_t **)(v64 + 136);
      v46[1] = 0;
      int v50 = v23;
      if (!OPENSSL_sk_push(v24, (uint64_t)v23))
      {
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v50, 0);
        break;
      }
      int v50 = 0;
      std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v50, 0);
      std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&v46[1], 0);
      if (!*((void *)&v56 + 1)) {
        goto LABEL_81;
      }
    }
    *a4 = 0;
    unint64_t v44 = &v46[1];
    goto LABEL_125;
  }
LABEL_81:
  unint64_t v51 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  int v49 = -1431655766;
  if (!CBS_get_optional_asn1_octet_string(&v63[1], &v51, &v49, -1610612715)) {
    goto LABEL_18;
  }
  if (v49)
  {
    if (!CBS_get_u32((uint64_t *)&v51, (int *)(v64 + 376)) || v52) {
      goto LABEL_18;
    }
    int v25 = (unsigned char *)(v64 + 440);
    char v26 = *(unsigned char *)(v64 + 440);
    if (v49)
    {
      char v27 = 8;
      goto LABEL_90;
    }
  }
  else
  {
    if (v52) {
      goto LABEL_18;
    }
    int v25 = (unsigned char *)(v64 + 440);
    char v26 = *(unsigned char *)(v64 + 440);
  }
  char v27 = 0;
LABEL_90:
  *int v25 = v26 & 0xF7 | v27;
  int v48 = -1431655766;
  if (!CBS_get_optional_asn1_BOOL(&v63[1], &v48, -1610612714, 1))
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 734);
    goto LABEL_18;
  }
  unint64_t v28 = v64;
  *(unsigned char *)(v64 + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = *(unsigned char *)(v64 + 440) & 0xEF | (16 * (v48 != 0));
  int v47 = -1431655766;
  if (!bssl::SSL_SESSION_parse_u16(&v63[1], (_WORD *)(v28 + 8), -1610612713)
    || !bssl::SSL_SESSION_parse_u32(&v63[1], (_DWORD *)(v64 + 380), -1610612712, 0)
    || !bssl::SSL_SESSION_parse_u32(&v63[1], (_DWORD *)(v64 + 188), -1610612711, *(_DWORD *)(v64 + 184))
    || !bssl::SSL_SESSION_parse_octet_string(&v63[1], (void **)(v64 + 392), -1610612710)
    || !CBS_get_optional_asn1_BOOL(&v63[1], &v47, -1610612709, 0)
    || (bssl::SSL_SESSION_parse_octet_string(&v63[1], (void **)(v64 + 448), -1610612708) & 1) == 0)
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 755);
    goto LABEL_18;
  }
  memset(v46, 170, sizeof(v46));
  if (!CBS_get_optional_asn1_octet_string(&v63[1], &v46[1], (_DWORD *)v46 + 1, -1610612707)) {
    goto LABEL_126;
  }
  unsigned int v29 = v46[1];
  unsigned int v30 = v46[2];
  int v31 = (void **)(v64 + 408);
  int v32 = bssl::Array<unsigned char>::Init(v64 + 408, (unint64_t)v46[2]);
  char v33 = v32 ^ 1;
  if (!v30) {
    char v33 = 1;
  }
  if ((v33 & 1) == 0) {
    memmove(*v31, v29, (size_t)v30);
  }
  if (!v32 || !CBS_get_optional_asn1_octet_string(&v63[1], &v46[1], v46, -1610612706)) {
    goto LABEL_126;
  }
  int v34 = v46[1];
  unsigned int v35 = v46[2];
  unsigned int v36 = (void **)(v64 + 424);
  char v37 = bssl::Array<unsigned char>::Init(v64 + 424, (unint64_t)v46[2]);
  char v38 = v37 ^ 1;
  if (!v35) {
    char v38 = 1;
  }
  if ((v38 & 1) == 0) {
    memmove(*v36, v34, (size_t)v35);
  }
  char v39 = *((void *)&v63[1] + 1) ? 0 : v37;
  if ((v39 & 1) == 0)
  {
LABEL_126:
    int v45 = 768;
LABEL_127:
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", v45);
    unint64_t v43 = 0;
    goto LABEL_128;
  }
  unint64_t v40 = v64;
  char v41 = *(unsigned char *)(v64 + 440) & 0xDF | (32 * (v47 != 0));
  *(unsigned char *)(v64 + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = v41;
  char v42 = BYTE4(v46[0]);
  if (HIDWORD(v46[0]) != LODWORD(v46[0])) {
    goto LABEL_129;
  }
  if (!HIDWORD(v46[0])) {
    goto LABEL_116;
  }
  if (!*(void *)(v40 + 400))
  {
LABEL_129:
    int v45 = 776;
    goto LABEL_127;
  }
  char v42 = 64;
LABEL_116:
  *(unsigned char *)(v40 + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = v42 | v41 & 0x3F;
  if ((a2[6]() & 1) == 0)
  {
    int v45 = 785;
    goto LABEL_127;
  }
  unint64_t v43 = v64;
  unint64_t v64 = 0;
LABEL_128:
  *a4 = v43;
LABEL_19:
  unsigned int v10 = (SSL_SESSION *)v64;
  unint64_t v64 = 0;
  if (v10) {
    SSL_SESSION_free(v10);
  }
}

void sub_1BA0F44F4(_Unwind_Exception *a1)
{
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)(v1 - 72), 0);
  _Unwind_Resume(a1);
}

uint64_t CBS_get_optional_asn1_octet_string(long long *a1, void *a2, _DWORD *a3, int a4)
{
  memset(v8, 170, sizeof(v8));
  uint64_t result = CBS_get_optional_asn1(a1, &v8[1], v8, a4);
  if (result)
  {
    if (!v8[0])
    {
      *a2 = 0;
      a2[1] = 0;
      if (!a3) {
        return 1;
      }
      goto LABEL_7;
    }
    if (!a2) {
      CBS_get_optional_asn1_octet_string_cold_1();
    }
    int asn1 = cbs_get_asn1((long long *)&v8[1], a2, 4, 1);
    uint64_t result = 0;
    if (asn1 && !*(void *)&v8[3])
    {
      if (!a3) {
        return 1;
      }
LABEL_7:
      *a3 = v8[0];
      return 1;
    }
  }
  return result;
}

uint64_t CBS_get_asn1_uint64(long long *a1, unint64_t *a2)
{
  unint64_t v11 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = cbs_get_asn1(a1, &v11, 2, 1);
  if (result)
  {
    uint64_t result = CBS_is_unsigned_asn1_integer(&v11);
    if (result)
    {
      *a2 = 0;
      unint64_t v4 = v12;
      if (v12)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        long long v7 = v11;
        unint64_t v8 = v12 - 1;
        do
        {
          *a2 = v6 << 8;
          unint64_t v9 = v7[v5] | (v6 << 8);
          *a2 = v9;
          unint64_t v10 = v5 + 1;
          if (v8 == v5) {
            break;
          }
          ++v5;
          unint64_t v6 = v9;
        }
        while (!HIBYTE(v9));
        return v10 >= v4;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

BOOL CBS_is_unsigned_asn1_integer(unsigned __int8 **a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    unsigned int v2 = **a1;
    int v3 = v2 >> 7;
    if (v1 == (unsigned __int8 *)1)
    {
      BOOL v4 = 1;
    }
    else
    {
      int v5 = (char)(*a1)[1];
      BOOL v4 = (**a1 || v5 < 0) && (v2 != 255 || v5 >= 0);
    }
  }
  else
  {
    BOOL v4 = 0;
    int v3 = -1431655766;
  }
  return !v3 && v4;
}

RSA *RSA_parse_public_key(long long *a1)
{
  unsigned int v2 = RSA_new();
  if (v2)
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    if (!CBS_get_asn1(a1, &v6, 536870928)
      || !parse_integer(&v6, (BIGNUM **)&v2->version)
      || !parse_integer(&v6, (BIGNUM **)&v2->meth)
      || *((void *)&v6 + 1))
    {
      int v3 = 100;
      int v4 = 100;
      goto LABEL_9;
    }
    if (!RSA_check_key(v2))
    {
      int v3 = 104;
      int v4 = 106;
LABEL_9:
      ERR_put_error(4, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/rsa_extra/rsa_asn1.c", v4);
      RSA_free(v2);
      return 0;
    }
  }
  return v2;
}

BIGNUM *parse_integer(long long *a1, BIGNUM **a2)
{
  if (*a2) {
    parse_integer_cold_1();
  }
  uint64_t result = BN_new();
  *a2 = result;
  if (result)
  {
    return (BIGNUM *)BN_parse_asn1_unsigned(a1, result);
  }
  return result;
}

BIGNUM *parse_integer_0(long long *a1, BIGNUM **a2)
{
  if (*a2) {
    parse_integer_cold_1_0();
  }
  uint64_t result = BN_new();
  *a2 = result;
  if (result)
  {
    return (BIGNUM *)BN_parse_asn1_unsigned(a1, result);
  }
  return result;
}

BOOL BN_parse_asn1_unsigned(long long *a1, BIGNUM *a2)
{
  memset(v6, 170, sizeof(v6));
  if (CBS_get_asn1(a1, &v6[1], 2) && CBS_is_valid_asn1_integer((unsigned __int8 **)&v6[1], v6))
  {
    if (!v6[0]) {
      return BN_bin2bn(*(const unsigned __int8 **)&v6[1], v6[3], a2) != 0;
    }
    int v3 = 109;
    int v4 = 31;
  }
  else
  {
    int v3 = 117;
    int v4 = 26;
  }
  ERR_put_error(3, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bn_extra/bn_asn1.c", v4);
  return 0;
}

BOOL CBS_is_valid_asn1_integer(unsigned __int8 **a1, unsigned int *a2)
{
  unsigned int v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (uint64_t)*a1;
  unsigned int v4 = **a1;
  if (a2) {
    *a2 = v4 >> 7;
  }
  if (v2 == (unsigned __int8 *)1) {
    return 1;
  }
  int v6 = *(char *)(v3 + 1);
  if (!v4 && (v6 & 0x80000000) == 0) {
    return 0;
  }
  return v4 != 255 || v6 >= 0;
}

BIGNUM *__cdecl BN_bin2bn(const unsigned __int8 *s, int len, BIGNUM *ret)
{
  unint64_t v3 = *(void *)&len;
  if (ret)
  {
    int v5 = ret;
    int v6 = 0;
  }
  else
  {
    int v5 = BN_new();
    int v6 = v5;
    if (!v5) {
      return v5;
    }
  }
  if (v3)
  {
    unint64_t v7 = ((v3 - 1) >> 3) + 1;
    if (bn_wexpand(&v5->d, v7))
    {
      if (v3 >= 0x3FFFFFFF9) {
        BN_bin2bn_cold_1();
      }
      v5->uint64_t top = v7;
      v5->neg = 0;
      bn_big_endian_to_words(v5->d, (int)v7, (unsigned __int8 *)s, v3);
    }
    else
    {
      BN_free(v6);
      return 0;
    }
  }
  else
  {
    v5->uint64_t top = 0;
  }
  return v5;
}

void bn_big_endian_to_words(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  if (a4 > 8 * a2) {
    abort();
  }
  if (a4 < 8)
  {
    unint64_t v4 = a4;
    if (!a4) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  do
  {
    unint64_t v4 = a4 - 8;
    *a1++ = bswap64(*(void *)&a3[a4 - 8]);
    --a2;
    a4 = v4;
  }
  while (v4 > 7);
  if (v4)
  {
LABEL_7:
    unint64_t v5 = 0;
    do
    {
      unsigned int v6 = *a3++;
      unint64_t v5 = v6 | (v5 << 8);
      --v4;
    }
    while (v4);
    *a1++ = v5;
    --a2;
  }
LABEL_10:
  size_t v7 = 8 * a2;
  if (v7)
  {
    bzero(a1, v7);
  }
}

uint64_t bn_wexpand(void **a1, unint64_t a2)
{
  if (*((int *)a1 + 3) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (a2 < 0x800000)
  {
    if ((*((unsigned char *)a1 + 20) & 2) != 0)
    {
      int v3 = 106;
      int v4 = 360;
      goto LABEL_11;
    }
    uint64_t result = (uint64_t)OPENSSL_calloc(a2, 8uLL);
    if (!result) {
      return result;
    }
    size_t v7 = (void *)result;
    uint64_t v8 = *((int *)a1 + 2);
    if (v8) {
      memcpy((void *)result, *a1, 8 * v8);
    }
    OPENSSL_free(*a1);
    *a1 = v7;
    *((_DWORD *)a1 + 3) = v2;
    return 1;
  }
  int v3 = 102;
  int v4 = 355;
LABEL_11:
  ERR_put_error(3, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/bn.c", v4);
  return 0;
}

BIGNUM *BN_new(void)
{
  uint64_t result = (BIGNUM *)OPENSSL_malloc(0x18uLL);
  if (result)
  {
    *(void *)&result->uint64_t top = 0;
    *(void *)&result->neg = 0;
    result->unsigned int d = 0;
    result->flagunsigned int s = 1;
  }
  return result;
}

EVP_PKEY *EVP_parse_public_key(long long *a1)
{
  memset(v10, 170, sizeof(v10));
  memset(v9, 170, sizeof(v9));
  if (!CBS_get_asn1(a1, &v10[1], 536870928)
    || !CBS_get_asn1(&v10[1], v10, 536870928)
    || !CBS_get_asn1(&v10[1], &v9[1], 3)
    || *((void *)&v10[1] + 1))
  {
    int v6 = 102;
    int v7 = 106;
LABEL_13:
    ERR_put_error(6, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_asn1.c", v7);
    return 0;
  }
  uint64_t v1 = parse_key_type(v10);
  if (!v1)
  {
    int v6 = 128;
    int v7 = 111;
    goto LABEL_13;
  }
  int v2 = (_DWORD *)v1;
  if (!CBS_get_u8(&v9[1], v9) || v9[0])
  {
    int v6 = 102;
    int v7 = 118;
    goto LABEL_13;
  }
  int v3 = EVP_PKEY_new();
  int v4 = v3;
  if (!v3)
  {
LABEL_19:
    EVP_PKEY_free(v4);
    return 0;
  }
  evp_pkey_set_method((uint64_t)v3, v2);
  unint64_t v5 = (unsigned int (*)(EVP_PKEY *, long long *, unsigned char *))*((void *)v4->pkey.ptr + 3);
  if (!v5)
  {
    ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_asn1.c", 131);
    goto LABEL_19;
  }
  if (!v5(v4, v10, &v9[1])) {
    goto LABEL_19;
  }
  return v4;
}

uint64_t evp_pkey_set_method(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 160);
    if (v5)
    {
      uint64_t result = v5(result);
      *(void *)(v3 + 8) = 0;
    }
  }
  *(void *)(v3 + 16) = a2;
  *(_DWORD *)(v3 + 4) = *a2;
  return result;
}

EVP_PKEY *bssl::ssl_cert_parse_pubkey@<X0>(long long *a1@<X0>, EVP_PKEY **a2@<X8>)
{
  long long v5 = *a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (bssl::ssl_cert_skip_to_spki(&v5, &v4))
  {
    uint64_t result = EVP_parse_public_key(&v4);
  }
  else
  {
    ERR_put_error(16, 0, 272, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", 358);
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t bssl::ssl_cert_skip_to_spki(long long *a1, long long *a2)
{
  long long v6 = *a1;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  int asn1 = CBS_get_asn1(&v6, &v5, 536870928);
  uint64_t result = 0;
  if (asn1)
  {
    if (!*((void *)&v6 + 1))
    {
      uint64_t result = CBS_get_asn1(&v5, a2, 536870928);
      if (result)
      {
        uint64_t result = CBS_get_optional_asn1(a2, 0, 0, -1610612736);
        if (result)
        {
          uint64_t result = CBS_get_asn1(a2, 0, 2);
          if (result)
          {
            uint64_t result = CBS_get_asn1(a2, 0, 536870928);
            if (result)
            {
              uint64_t result = CBS_get_asn1(a2, 0, 536870928);
              if (result)
              {
                uint64_t result = CBS_get_asn1(a2, 0, 536870928);
                if (result) {
                  return CBS_get_asn1(a2, 0, 536870928) != 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ssl_cert_check_key_usage(long long *a1, unsigned int a2)
{
  long long v13 = *a1;
  memset(v12, 170, sizeof(v12));
  int v11 = -1431655766;
  if (bssl::ssl_cert_skip_to_spki(&v13, &v12[1])
    && CBS_get_asn1(&v12[1], 0, 536870928)
    && CBS_get_optional_asn1(&v12[1], 0, 0, -2147483647)
    && CBS_get_optional_asn1(&v12[1], 0, 0, -2147483646)
    && CBS_get_optional_asn1(&v12[1], v12, &v11, -1610612733))
  {
    if (!v11) {
      return 1;
    }
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    if (CBS_get_asn1(v12, &v10, 536870928))
    {
      if (*((void *)&v10 + 1))
      {
        while (1)
        {
          memset(v9, 170, sizeof(v9));
          *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          if (!CBS_get_asn1(&v10, &v9[1], 536870928)
            || !CBS_get_asn1(&v9[1], v9, 6)
            || CBS_peek_asn1_tag(&v9[1], 1) && !CBS_get_asn1(&v9[1], 0, 1)
            || !CBS_get_asn1(&v9[1], &v8, 4)
            || *((void *)&v9[1] + 1))
          {
            int v5 = 272;
            int v6 = 430;
            goto LABEL_23;
          }
          if (*((void *)&v9[0] + 1) == 3 && **(_WORD **)&v9[0] == 7509 && *(unsigned char *)(*(void *)&v9[0] + 2) == 15) {
            break;
          }
          if (!*((void *)&v10 + 1)) {
            return 1;
          }
        }
        v7[0] = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        v7[1] = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        if (!CBS_get_asn1(&v8, v7, 3) || *((void *)&v8 + 1))
        {
          int v5 = 272;
          int v6 = 444;
          goto LABEL_23;
        }
        if (!CBS_is_valid_asn1_bitstring(v7))
        {
          int v5 = 272;
          int v6 = 451;
          goto LABEL_23;
        }
        if (!CBS_asn1_bitstring_has_bit((uint64_t)v7, a2))
        {
          int v5 = 302;
          int v6 = 456;
          goto LABEL_23;
        }
      }
      return 1;
    }
    int v5 = 272;
    int v6 = 418;
  }
  else
  {
    int v5 = 272;
    int v6 = 408;
  }
LABEL_23:
  ERR_put_error(16, 0, v5, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", v6);
  return 0;
}

uint64_t cbs_get_asn1(long long *a1, void *a2, int a3, int a4)
{
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  int v15 = -1431655766;
  if (a2) {
    int v7 = a2;
  }
  else {
    int v7 = v14;
  }
  v14[0] = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = 0xAAAAAAAAAAAAAAAALL;
  int any_asn1_element = cbs_get_any_asn1_element(a1, v7, &v15, &v16, 0, 0, 0);
  uint64_t result = 0;
  if (any_asn1_element && v15 == a3)
  {
    if (a4)
    {
      long long v10 = v14;
      if (a2) {
        long long v10 = a2;
      }
      unint64_t v11 = v10[1];
      BOOL v12 = v11 >= v16;
      uint64_t v13 = v11 - v16;
      if (!v12) {
        cbs_get_asn1_cold_1();
      }
      *v7 += v16;
      v10[1] = v13;
    }
    return 1;
  }
  return result;
}

uint64_t cbs_get_any_asn1_element(long long *a1, void *a2, _DWORD *a3, unint64_t *a4, _DWORD *a5, _DWORD *a6, int a7)
{
  long long v31 = *a1;
  if (a7)
  {
    *a5 = 0;
    *a6 = 0;
  }
  else
  {
    if (a5) {
      cbs_get_any_asn1_element_cold_2();
    }
    if (a6) {
      cbs_get_any_asn1_element_cold_1();
    }
  }
  unsigned int v30 = -1431655766;
  uint64_t result = parse_asn1_tag(&v31, &v30);
  if (result)
  {
    if (a3) {
      *a3 = v30;
    }
    if (!*((void *)&v31 + 1)) {
      return 0;
    }
    int v15 = (unsigned __int8 *)(v31 + 1);
    uint64_t v16 = *(unsigned __int8 *)v31;
    unint64_t v17 = *((void *)a1 + 1);
    unint64_t v18 = v17 - (*((void *)&v31 + 1) - 1);
    if ((*(char *)v31 & 0x80000000) == 0)
    {
      unint64_t v19 = v18 + v16;
      if (!a4) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    unint64_t v23 = v16 & 0x7F;
    if (a7)
    {
      if (!v23 && (v30 & 0x20000000) != 0)
      {
        if (a4)
        {
          *a4 = v18;
          unint64_t v17 = *((void *)a1 + 1);
        }
        *a5 = 1;
        *a6 = 1;
        unint64_t v29 = v17 - v18;
        if (v17 < v18) {
          return 0;
        }
        uint64_t v22 = *(void *)a1;
        *(void *)a1 += v18;
        *((void *)a1 + 1) = v29;
        if (a2)
        {
LABEL_15:
          *a2 = v22;
          a2[1] = v18;
        }
        return 1;
      }
    }
    BOOL v25 = (v23 - 5) >= 0xFFFFFFFC && *((void *)&v31 + 1) - 1 >= v23;
    if (!v25) {
      return 0;
    }
    unint64_t v26 = 0;
    unint64_t v27 = v23;
    do
    {
      unsigned int v28 = *v15++;
      unint64_t v26 = v28 | (v26 << 8);
      --v27;
    }
    while (v27);
    if (v26 > 0x7F)
    {
      if (v26 >> (8 * v23 - 8)) {
        goto LABEL_42;
      }
      if (!a7) {
        return 0;
      }
    }
    else
    {
      if (!a7) {
        return 0;
      }
      *a5 = 1;
      if (v26 >> (8 * v23 - 8))
      {
LABEL_42:
        v18 += v23;
        if (!__CFADD__(v26, v18))
        {
          unint64_t v19 = v26 + v18;
          if (!a4)
          {
LABEL_12:
            unint64_t v20 = *((void *)a1 + 1);
            BOOL v25 = v20 >= v19;
            unint64_t v21 = v20 - v19;
            if (!v25) {
              return 0;
            }
            uint64_t v22 = *(void *)a1;
            *(void *)a1 += v19;
            *((void *)a1 + 1) = v21;
            unint64_t v18 = v19;
            if (a2) {
              goto LABEL_15;
            }
            return 1;
          }
LABEL_11:
          *a4 = v18;
          goto LABEL_12;
        }
        return 0;
      }
    }
    *a5 = 1;
    goto LABEL_42;
  }
  return result;
}

uint64_t parse_asn1_tag(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  long long v4 = (unsigned __int8 *)(*a1)++;
  a1[1] = v2 - 1;
  int v5 = *v4;
  int v6 = v5 & 0x1F;
  if (v6 != 31
    || (v10 = 0xAAAAAAAAAAAAAAAALL, int v7 = parse_base128_integer(a1, &v10), result = 0, v7)
    && (int v6 = v10, !(v10 >> 29))
    && v10 >= 0x1F)
  {
    unsigned int v9 = v6 | (v5 << 24) & 0xE0000000;
    if ((v9 & 0xDFFFFFFF) != 0)
    {
      *a2 = v9;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t CBS_get_asn1(long long *a1, void *a2, int a3)
{
  return cbs_get_asn1(a1, a2, a3, 1);
}

BOOL CBS_peek_asn1_tag(long long *a1, int a2)
{
  long long v6 = *a1;
  unsigned int v5 = -1431655766;
  return parse_asn1_tag(&v6, &v5) && v5 == a2;
}

uint64_t CBS_get_optional_asn1(long long *a1, void *a2, int *a3, int a4)
{
  long long v11 = *a1;
  unsigned int v10 = -1431655766;
  int v8 = 0;
  if (!parse_asn1_tag(&v11, &v10)
    || v10 != a4
    || (v8 = 1, uint64_t result = cbs_get_asn1(a1, a2, a4, 1), result))
  {
    if (a3) {
      *a3 = v8;
    }
    return 1;
  }
  return result;
}

BOOL CBS_is_valid_asn1_bitstring(unsigned __int8 **a1)
{
  uint64_t v1 = a1[1];
  if (!v1) {
    return 0;
  }
  unsigned int v2 = **a1;
  if (v2 > 7) {
    return 0;
  }
  if (!**a1) {
    return 1;
  }
  if (v1 == (unsigned __int8 *)1) {
    return 0;
  }
  return ((*a1)[(void)v1 - 1] & ~(-1 << v2)) == 0;
}

EVP_PKEY *EVP_PKEY_new(void)
{
  uint64_t result = (EVP_PKEY *)OPENSSL_zalloc(0x18uLL);
  if (result) {
    *(void *)&result->type = 1;
  }
  return result;
}

BOOL CBS_asn1_bitstring_has_bit(uint64_t a1, unsigned int a2)
{
  BOOL result = CBS_is_valid_asn1_bitstring((unsigned __int8 **)a1);
  if (result)
  {
    unint64_t v5 = (a2 >> 3) + 1;
    if (*(void *)(a1 + 8) <= v5) {
      return 0;
    }
    else {
      return (*(unsigned __int8 *)(*(void *)a1 + v5) >> (~(_BYTE)a2 & 7)) & 1;
    }
  }
  return result;
}

uint64_t parse_key_type(long long *a1)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_asn1(a1, &v6, 6)) {
    return 0;
  }
  uint64_t v1 = 0;
  uint64_t v3 = (const void *)v6;
  size_t v2 = v7;
  while (1)
  {
    uint64_t v4 = *(void *)((char *)&kASN1Methods + v1);
    if (v2 == *(unsigned __int8 *)(v4 + 13) && (!*(unsigned char *)(v4 + 13) || !memcmp(v3, (const void *)(v4 + 4), v2))) {
      break;
    }
    v1 += 8;
    if (v1 == 40) {
      return 0;
    }
  }
  return v4;
}

void int_rsa_free(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

void RSA_free(RSA *r)
{
  if (r && CRYPTO_refcount_dec_and_test_zero((unsigned int *)&r->dmq1))
  {
    CRYPTO_free_ex_data((int)&g_ex_data_class_0, r, (CRYPTO_EX_DATA *)&r->dmp1);
    BN_clear_free((BIGNUM *)r->version);
    BN_clear_free((BIGNUM *)r->meth);
    BN_clear_free((BIGNUM *)r->engine);
    BN_clear_free(r->n);
    BN_clear_free(r->e);
    BN_clear_free(r->d);
    BN_clear_free(r->p);
    BN_clear_free(r->q);
    BN_MONT_CTX_free(r[1]._method_mod_n);
    BN_MONT_CTX_free(r[1]._method_mod_p);
    BN_MONT_CTX_free(r[1]._method_mod_q);
    if (r[2].version)
    {
      uint64_t v2 = 0;
      unsigned int v3 = 1;
      do
      {
        BN_BLINDING_free(*((BN_BLINDING **)&r[2].meth->name + v2));
        uint64_t v2 = v3;
      }
      while (r[2].version > (unint64_t)v3++);
    }
    meth = (RSA_METHOD *)r[2].meth;
    if (meth)
    {
      free(meth);
      r[2].meth = 0;
    }
    engine = r[2].engine;
    if (engine)
    {
      free(engine);
      r[2].engine = 0;
    }
    CRYPTO_MUTEX_cleanup((pthread_rwlock_t *)&r->iqmp);
    free(r);
  }
}

void BN_free(BIGNUM *a)
{
  if (a)
  {
    flagunsigned int s = a->flags;
    if ((flags & 2) == 0)
    {
      OPENSSL_free(a->d);
      flagunsigned int s = a->flags;
    }
    if (flags)
    {
      OPENSSL_free(a);
    }
    else
    {
      a->unsigned int d = 0;
    }
  }
}

uint64_t rsa_pub_decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_asn1((long long *)a2, &v8, 5) || v9 || *(void *)(a2 + 8))
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_rsa_asn1.c", 97);
  }
  else
  {
    unint64_t v7 = RSA_parse_public_key((long long *)a3);
    if (v7 && !*(void *)(a3 + 8))
    {
      evp_pkey_set_method(a1, &rsa_asn1_meth);
      *(void *)(a1 + 8) = v7;
      return 1;
    }
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_rsa_asn1.c", 103);
    RSA_free(v7);
  }
  return 0;
}

RSA *__cdecl RSA_new_method(ENGINE *engine)
{
  uint64_t v1 = (uint64_t *)malloc_type_malloc(0x180uLL, 0x10B0040B1D60C94uLL);
  uint64_t v2 = v1;
  if (v1)
  {
    *((_OWORD *)v1 + 22) = 0u;
    *((_OWORD *)v1 + 23) = 0u;
    *((_OWORD *)v1 + 2std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0u;
    *((_OWORD *)v1 + 21) = 0u;
    *((_OWORD *)v1 + 18) = 0u;
    *((_OWORD *)v1 + 19) = 0u;
    *((_OWORD *)v1 + 16) = 0u;
    *((_OWORD *)v1 + 17) = 0u;
    *((_OWORD *)v1 + 14) = 0u;
    *((_OWORD *)v1 + 15) = 0u;
    *((_OWORD *)v1 + 12) = 0u;
    *((_OWORD *)v1 + 13) = 0u;
    *((_OWORD *)v1 + 1std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0u;
    *((_OWORD *)v1 + 11) = 0u;
    *((_OWORD *)v1 + 8) = 0u;
    *((_OWORD *)v1 + 9) = 0u;
    *((_OWORD *)v1 + 6) = 0u;
    *((_OWORD *)v1 + 7) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 5) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    CRYPTO_once(&RSA_default_method_once, (void (*)(void))RSA_default_method_init);
    uint64_t *v2 = (uint64_t)&RSA_default_method_storage;
    METHOD_ref((uint64_t)&RSA_default_method_storage);
    int v3 = *(_DWORD *)(*v2 + 72);
    *((_DWORD *)v2 + 2std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 1;
    *((_DWORD *)v2 + 21) = v3;
    CRYPTO_MUTEX_init((pthread_rwlock_t *)(v2 + 11));
    CRYPTO_new_ex_data(v2 + 72, v4, v5);
    unint64_t v6 = *(unsigned int (**)(uint64_t *))(*v2 + 16);
    if (v6 && !v6(v2))
    {
      CRYPTO_MUTEX_cleanup((pthread_rwlock_t *)(v2 + 11));
      METHOD_unref(*v2);
      free(v2);
      return 0;
    }
  }
  else
  {
    ERR_put_error(4, 0, 65, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", 77);
  }
  return (RSA *)v2;
}

int RSA_check_key(const RSA *a1)
{
  return 1;
}

uint64_t METHOD_ref(uint64_t result)
{
  if (!*(unsigned char *)(result + 4)) {
    METHOD_ref_cold_1();
  }
  return result;
}

void BN_MONT_CTX_free(BN_MONT_CTX *mont)
{
  if (mont)
  {
    BN_free((BIGNUM *)mont);
    BN_free((BIGNUM *)&mont->RR.neg);
    OPENSSL_free(mont);
  }
}

uint64_t bssl::SSL_SESSION_parse_octet_string(long long *a1, void **a2, int a3)
{
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  size_t v9 = 0xAAAAAAAAAAAAAAAALL;
  if (CBS_get_optional_asn1_octet_string(a1, &v8, 0, a3))
  {
    uint64_t v4 = (const void *)v8;
    size_t v5 = v9;
    uint64_t result = bssl::Array<unsigned char>::Init((uint64_t)a2, v9);
    if (v5) {
      BOOL v7 = result == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      memmove(*a2, v4, v5);
      return 1;
    }
  }
  else
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 448);
    return 0;
  }
  return result;
}

uint64_t bssl::SSL_SESSION_parse_u32(long long *a1, _DWORD *a2, int a3, unsigned int a4)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  if (CBS_get_optional_asn1_uint64(a1, &v7, a3, a4)) {
    BOOL v5 = HIDWORD(v7) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    *a2 = v7;
    return 1;
  }
  else
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 512);
    return 0;
  }
}

uint64_t CBS_get_optional_asn1_uint64(long long *a1, unint64_t *a2, int a3, unint64_t a4)
{
  memset(v8, 170, sizeof(v8));
  uint64_t result = CBS_get_optional_asn1(a1, &v8[1], v8, a3);
  if (result)
  {
    if (v8[0])
    {
      int asn1_uint64 = CBS_get_asn1_uint64((long long *)&v8[1], a2);
      uint64_t result = 0;
      if (!asn1_uint64 || *(void *)&v8[3]) {
        return result;
      }
    }
    else
    {
      *a2 = a4;
    }
    return 1;
  }
  return result;
}

uint64_t CBS_get_optional_asn1_BOOL(long long *a1, int *a2, int a3, int a4)
{
  memset(v9, 170, sizeof(v9));
  int v8 = -1431655766;
  uint64_t result = CBS_get_optional_asn1(a1, &v9[1], &v8, a3);
  if (result)
  {
    if (!v8)
    {
LABEL_9:
      *a2 = a4;
      return 1;
    }
    int asn1 = cbs_get_asn1(&v9[1], v9, 1, 1);
    uint64_t result = 0;
    if (asn1 && *((void *)&v9[0] + 1) == 1 && !*((void *)&v9[1] + 1))
    {
      a4 = **(unsigned char **)&v9[0];
      if (**(unsigned char **)&v9[0])
      {
        if (a4 != 255) {
          return 0;
        }
        a4 = 1;
      }
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t bssl::SSL_SESSION_parse_bounded_octet_string(long long *a1, void *a2, unsigned char *a3, unsigned int a4, int a5)
{
  __src = (void *)0xAAAAAAAAAAAAAAAALL;
  size_t __n = 0xAAAAAAAAAAAAAAAALL;
  if (CBS_get_optional_asn1_octet_string(a1, &__src, 0, a5) && (char v8 = __n, __n <= a4))
  {
    if (__n) {
      memcpy(a2, __src, __n);
    }
    *a3 = v8;
    return 1;
  }
  else
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 485);
    return 0;
  }
}

BOOL bssl::SSL_SESSION_parse_crypto_buffer(long long *a1, unsigned int **a2, int a3, void **a4)
{
  if (!CBS_peek_asn1_tag(a1, a3)) {
    return 1;
  }
  memset(v10, 170, sizeof(v10));
  if (CBS_get_asn1(a1, &v10[1], a3)
    && CBS_get_asn1(&v10[1], v10, 4)
    && !*((void *)&v10[1] + 1))
  {
    char v8 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)v10, a4);
    std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](a2, v8);
    return *a2 != 0;
  }
  else
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 466);
    return 0;
  }
}

uint64_t bssl::SSL_SESSION_parse_u16(long long *a1, _WORD *a2, int a3)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  if (CBS_get_optional_asn1_uint64(a1, &v5, a3, 0) && v5 < 0x10000)
  {
    *a2 = v5;
    return 1;
  }
  else
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 525);
    return 0;
  }
}

void int_ec_free(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

uint64_t eckey_pub_decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = EC_KEY_parse_curve_name((long long *)a2);
  if (!v6 || *(void *)(a2 + 8))
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec_asn1.c", 99);
    unint64_t v7 = 0;
LABEL_4:
    EC_KEY_free(v7);
    return 0;
  }
  size_t v9 = (const EC_GROUP *)v6;
  unsigned int v10 = EC_KEY_new();
  unint64_t v7 = v10;
  if (!v10
    || !EC_KEY_set_group(v10, v9)
    || !EC_KEY_oct2key(v7, *(const unsigned __int8 **)a3, *(void *)(a3 + 8), 0))
  {
    goto LABEL_4;
  }
  evp_pkey_set_method(a1, &ec_asn1_meth);
  *(void *)(a1 + 8) = v7;
  return 1;
}

int EC_KEY_set_group(EC_KEY *a1, const EC_GROUP *a2)
{
  uint64_t v4 = *(const EC_GROUP **)a1;
  if (v4)
  {
    if (EC_GROUP_cmp(v4, a2, 0))
    {
      ERR_put_error(15, 0, 130, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec_key.c", 216);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (*((void *)a1 + 2)) {
      EC_KEY_set_group_cold_2();
    }
    if (*((void *)a1 + 1)) {
      EC_KEY_set_group_cold_1();
    }
    EC_GROUP_free(0);
    uint64_t v6 = EC_GROUP_dup(a2);
    *(void *)a1 = v6;
    return v6 != 0;
  }
}

uint64_t EC_KEY_parse_curve_name(long long *a1)
{
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  if (CBS_get_asn1(a1, v6, 6))
  {
    uint64_t v1 = 0;
    while (1)
    {
      uint64_t v2 = (*(uint64_t (**)())((char *)&kAllGroups + v1))();
      if (CBS_mem_equal((uint64_t)v6, (char *)(v2 + 516), *(unsigned __int8 *)(v2 + 525))) {
        break;
      }
      v1 += 8;
      if (v1 == 32)
      {
        int v3 = 123;
        int v4 = 357;
        goto LABEL_7;
      }
    }
  }
  else
  {
    int v3 = 128;
    int v4 = 345;
LABEL_7:
    ERR_put_error(15, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", v4);
    return 0;
  }
  return v2;
}

uint64_t *EC_group_p256()
{
  return &EC_group_p256_storage;
}

uint64_t *EC_group_p224()
{
  return &EC_group_p224_storage;
}

void *EC_KEY_new_method(uint64_t a1)
{
  uint64_t v2 = OPENSSL_zalloc(0x38uLL);
  unint64_t v5 = v2;
  if (!v2) {
    return v5;
  }
  if (!a1)
  {
    ECDSA_methounsigned int d = v2[5];
    if (!ECDSA_method) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ECDSA_methounsigned int d = ENGINE_get_ECDSA_method(a1);
  v5[5] = ECDSA_method;
  if (ECDSA_method) {
LABEL_4:
  }
    METHOD_ref(ECDSA_method);
LABEL_5:
  *(void *)((char *)v5 + 28) = 0x100000004;
  CRYPTO_new_ex_data(v5 + 48, v3, v4);
  uint64_t v7 = v5[5];
  if (v7)
  {
    char v8 = *(unsigned int (**)(void *))(v7 + 16);
    if (v8)
    {
      if (!v8(v5))
      {
        CRYPTO_free_ex_data((int)&g_ec_ex_data_class, v5, (CRYPTO_EX_DATA *)v5 + 3);
        uint64_t v9 = v5[5];
        if (v9) {
          METHOD_unref(v9);
        }
        OPENSSL_free(v5);
        return 0;
      }
    }
  }
  return v5;
}

EC_KEY *EC_KEY_new(void)
{
  return (EC_KEY *)EC_KEY_new_method(0);
}

void EC_KEY_free(EC_KEY *a1)
{
  if (a1 && CRYPTO_refcount_dec_and_test_zero((unsigned int *)a1 + 8))
  {
    uint64_t v2 = *((void *)a1 + 5);
    if (v2)
    {
      int v3 = *(void (**)(EC_KEY *))(v2 + 24);
      if (v3)
      {
        v3(a1);
        uint64_t v2 = *((void *)a1 + 5);
      }
      METHOD_unref(v2);
    }
    CRYPTO_free_ex_data((int)&g_ec_ex_data_class, a1, (CRYPTO_EX_DATA *)a1 + 3);
    EC_GROUP_free(*(EC_GROUP **)a1);
    EC_POINT_free(*((EC_POINT **)a1 + 1));
    OPENSSL_free(*((void **)a1 + 2));
    OPENSSL_free(a1);
  }
}

EC_GROUP *__cdecl EC_GROUP_dup(const EC_GROUP *a1)
{
  if (a1 && !*((_DWORD *)a1 + 128)) {
    CRYPTO_refcount_inc((unsigned int *)a1 + 135);
  }
  return a1;
}

uint64_t CBS_get_any_asn1_element(long long *a1, void *a2, _DWORD *a3, unint64_t *a4)
{
  return cbs_get_any_asn1_element(a1, a2, a3, a4, 0, 0, 0);
}

BOOL bssl::SSL_SESSION_parse_string(long long *a1, void **a2)
{
  memset(v8, 170, sizeof(v8));
  if (!CBS_get_optional_asn1_octet_string(a1, &v8[1], v8, -1610612728))
  {
    int v3 = 422;
    goto LABEL_6;
  }
  if (!v8[0])
  {
    unint64_t v5 = a2;
    uint64_t v6 = 0;
LABEL_10:
    std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100](v5, v6);
    return 1;
  }
  if (CBS_contains_zero_byte((uint64_t)&v8[1]))
  {
    int v3 = 427;
LABEL_6:
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", v3);
    return 0;
  }
  uint64_t v7 = 0;
  BOOL result = CBS_strdup((uint64_t)&v8[1], &v7);
  if (result)
  {
    uint64_t v6 = v7;
    unint64_t v5 = a2;
    goto LABEL_10;
  }
  return result;
}

uint64_t bssl::SSL_SESSION_parse_long(long long *a1, void *a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_optional_asn1_uint64(a1, &v4, -1610612731, 0) || (v4 & 0x8000000000000000) != 0)
  {
    ERR_put_error(16, 0, 160, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_asn1.cc", 499);
    return 0;
  }
  else
  {
    *a2 = v4;
    return 1;
  }
}

void *bssl::ssl_session_new@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = a1;
  BOOL result = bssl::New<ssl_session_st,bssl::SSL_X509_METHOD const*&>(&v4);
  *a2 = result;
  return result;
}

void parse_integer_cold_1()
{
  __assert_rtn("parse_integer", "rsa_asn1.c", 73, "*out == NULL");
}

void parse_integer_cold_1_0()
{
  __assert_rtn("parse_integer", "dsa_asn1.c", 134, "*out == NULL");
}

uint64_t EVP_AEAD_CTX_open(unsigned __int8 *a1, char *a2, size_t *a3, size_t a4, uint64_t a5, uint64_t a6, char *a7, unint64_t a8)
{
  if (a7 != a2 && &a2[a4] > a7 && &a7[a8] > a2)
  {
    int v11 = 115;
    int v12 = 191;
    goto LABEL_5;
  }
  int v15 = *(unsigned int (**)(unsigned __int8 *, char *))(*(void *)a1 + 32);
  if (!v15)
  {
    unint64_t v16 = a1[576];
    if (!a1[576]) {
      EVP_AEAD_CTX_open_cold_1();
    }
    size_t v13 = a8 - v16;
    if (a8 >= v16)
    {
      if (v13 <= a4)
      {
        if (EVP_AEAD_CTX_open_gather((uint64_t)a1, a2, a5, a6, a7, a8 - v16))
        {
          uint64_t result = 1;
LABEL_9:
          *a3 = v13;
          return result;
        }
LABEL_6:
        if (a4) {
          bzero(a2, a4);
        }
        size_t v13 = 0;
        uint64_t result = 0;
        goto LABEL_9;
      }
      int v11 = 103;
      int v12 = 214;
    }
    else
    {
      int v11 = 101;
      int v12 = 208;
    }
LABEL_5:
    ERR_put_error(30, 0, v11, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/aead.c", v12);
    goto LABEL_6;
  }
  if (!v15(a1, a2)) {
    goto LABEL_6;
  }
  return 1;
}

uint64_t EVP_AEAD_CTX_open_gather(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char *a5, size_t a6)
{
  if (a5 != a2 && &a5[a6] > a2 && &a2[a6] > a5)
  {
    int v8 = 115;
    int v9 = 238;
LABEL_9:
    ERR_put_error(30, 0, v8, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/aead.c", v9);
    goto LABEL_10;
  }
  unsigned int v10 = *(unsigned int (**)(uint64_t, char *))(*(void *)a1 + 48);
  if (!v10)
  {
    int v8 = 104;
    int v9 = 243;
    goto LABEL_9;
  }
  if (v10(a1, a2)) {
    return 1;
  }
LABEL_10:
  if (a6) {
    bzero(a2, a6);
  }
  return 0;
}

uint64_t aead_aes_gcm_open_gather(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a4)
  {
    int v11 = 111;
    int v12 = 373;
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(a1 + 576) != a8)
  {
    int v11 = 101;
    int v12 = 377;
    goto LABEL_10;
  }
  if (!*(void *)(a1 + 8) || !*(void *)(a1 + 16))
  {
    int v11 = 112;
    int v12 = 381;
    goto LABEL_10;
  }
  int v10 = ccgcm_reset();
  if (ccgcm_set_iv() | v10)
  {
    int v11 = 107;
    int v12 = 388;
LABEL_10:
    ERR_put_error(30, 0, v11, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_aes.m", v12);
    return 0;
  }
  if (a10 && ccgcm_aad())
  {
    if (g_boringssl_log)
    {
      if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
        aead_aes_gcm_open_gather_cold_3();
      }
    }
    int v11 = 101;
    int v12 = 396;
    goto LABEL_10;
  }
  if (ccgcm_update())
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      aead_aes_gcm_open_gather_cold_2();
    }
    int v11 = 101;
    int v12 = 404;
    goto LABEL_10;
  }
  if (ccgcm_finalize())
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      aead_aes_gcm_open_gather_cold_1();
    }
    int v11 = 101;
    int v12 = 411;
    goto LABEL_10;
  }
  return 1;
}

void ERR_put_error(int lib, int func, int reason, const char *file, int line)
{
  __int16 v5 = line;
  state = err_get_state();
  if (state)
  {
    int v10 = state;
    if (lib == 2 && !reason) {
      reason = *__error();
    }
    int v11 = *((_DWORD *)v10 + 96);
    int v12 = ((_BYTE)v11 + 1) & 0xF;
    *((_DWORD *)v10 + 96) = v12;
    if (v12 == *((_DWORD *)v10 + 97)) {
      *((_DWORD *)v10 + 97) = ((_BYTE)v11 + 2) & 0xF;
    }
    size_t v13 = (const char **)&v10[3 * ((v11 + 1) & 0xF)];
    free((void *)v13[1]);
    v13[1] = 0;
    int64x2_t v13[2] = 0;
    void *v13 = file;
    *((_WORD *)v13 + 1std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = v5;
    *((_DWORD *)v13 + 4) = reason & 0xFFF | (lib << 24);
  }
}

void *nw_protocol_boringssl_allocate_metadata()
{
  return malloc_type_calloc(1uLL, 0x168uLL, 0x10D00404C253F0CuLL);
}

BOOL __nw_protocol_boringssl_get_input_frames_block_invoke_137(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >= *(_DWORD *)(a1 + 72)
    || *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= *(_DWORD *)(a1 + 76))
  {
LABEL_19:
    BOOL v8 = 0;
    goto LABEL_20;
  }
  int v4 = nw_frame_unclaimed_length();
  unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + v4;
  unsigned int v6 = *(_DWORD *)(a1 + 76);
  int v7 = v4;
  BOOL v8 = v5 <= v6;
  if (v5 > v6)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = v3;
    if (v9)
    {
      uint64_t v11 = *(void *)(v9 + 40);
      if (v11)
      {
        if ((*(unsigned char *)(v11 + 475) & 1) == 0
          && datapath_logging_enabled
          && g_boringssl_log
          && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
        {
          __nw_protocol_boringssl_get_input_frames_block_invoke_137_cold_3();
        }
        uint64_t v12 = nw_frame_unclaimed_bytes();
        if ((*(unsigned char *)(v11 + 475) & 1) == 0)
        {
          size_t v13 = g_boringssl_log;
          if (g_boringssl_log)
          {
            if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136447490;
              unint64_t v17 = "nw_protocol_boringssl_create_trimmed_input_frame";
              __int16 v18 = 1024;
              int v19 = 1768;
              __int16 v20 = 2082;
              uint64_t v21 = v11 + 391;
              __int16 v22 = 2048;
              uint64_t v23 = v11;
              __int16 v24 = 2048;
              uint64_t v25 = v12;
              __int16 v26 = 1024;
              int v27 = 0;
              _os_log_error_impl(&dword_1BA0DE000, v13, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] Cannot copy frame, buffer=%p length=%u", buf, 0x36u);
            }
          }
        }
      }
    }

    uint64_t v14 = *(void *)(a1 + 56);
    if ((!v14 || (*(unsigned char *)(v14 + 475) & 1) == 0)
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      __nw_protocol_boringssl_get_input_frames_block_invoke_137_cold_1();
    }
    goto LABEL_19;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 56) + 390) & 0x10) != 0)
  {
    nw_frame_set_is_wake_packet();
    *(unsigned char *)(*(void *)(a1 + 56) + 390) &= ~0x10u;
  }
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v7;
  nw_frame_array_remove();
  nw_frame_array_append();
LABEL_20:

  return v8;
}

void *boringssl_ciphers_copy_default_ciphersuites(unint64_t *a1)
{
  if (os_variant_has_internal_content() && boringssl_config_get_restricted_mode_state())
  {
    __int16 v7 = 0;
    uint64_t v2 = g_boringssl_log;
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG)) {
      boringssl_ciphers_copy_default_ciphersuites_cold_1(v2);
    }
    id v3 = (int *)&v7;
    uint64_t v4 = 1;
  }
  else
  {
    int v6 = 0x10000;
    id v3 = &v6;
    uint64_t v4 = 2;
  }
  return boringssl_ciphers_copy_supported_list_for_groups((uint64_t)v3, v4, a1);
}

SSL_CTX *boringssl_session_create(SSL_CTX *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (LODWORD(result->method) != -1252936367) {
      return 0;
    }
    cipher_list = result->cipher_list;
    if (!cipher_list) {
      return 0;
    }
    uint64_t result = (SSL_CTX *)cipher_list[12].comp;
    if (result)
    {
      *(void *)&cipher_list[12].sorteunsigned int d = SSL_new(result);
      uint64_t result = *(SSL_CTX **)&cipher_list[12].sorted;
      if (result)
      {
        if ((BYTE4(cipher_list[17].data) & 0x10) != 0) {
          SSL_set_accept_state((SSL *)result);
        }
        else {
          SSL_set_connect_state((SSL *)result);
        }
        if (LODWORD(v1->method) == -1252936367)
        {
          id v3 = v1->cipher_list;
          if (v3)
          {
            if ((BYTE4(v3[17].data) & 0x20) != 0) {
              min_dtls_version_alloweunsigned int d = boringssl_config_get_min_dtls_version_allowed();
            }
            else {
              min_dtls_version_alloweunsigned int d = boringssl_config_get_min_tls_version_allowed();
            }
            WORD1(v3[1].comp) = min_dtls_version_allowed;
            if ((BYTE4(v3[17].data) & 0x20) != 0) {
              max_dtls_version_alloweunsigned int d = boringssl_config_get_max_dtls_version_allowed();
            }
            else {
              max_dtls_version_alloweunsigned int d = boringssl_config_get_max_tls_version_allowed();
            }
            LOWORD(v3[1].comp) = max_dtls_version_allowed;
            boringssl_context_set_min_version((uint64_t)v1, WORD1(v3[1].comp));
            boringssl_context_set_max_version((uint64_t)v1, (unsigned __int16)v3[1].comp);
            SSL_set_msg_callback(*(SSL **)&v3[12].sorted, (void (__cdecl *)(int, int, int, const void *, size_t, SSL *, void *))boringssl_context_message_handler);
            SSL_set_msg_callback_arg(*(void *)&v3[12].sorted, (uint64_t)v1);
            SSL_set_cert_cb(*(void *)&v3[12].sorted, (uint64_t)boringssl_context_certificate_request_callback, (uint64_t)v1);
            unint64_t v8 = 0;
            int v6 = (unsigned __int16 *)boringssl_ciphers_copy_default_ciphersuites(&v8);
            __int16 v7 = v6;
            if (v6 && v8)
            {
              boringssl_context_set_cipher_suites((uint64_t)v1, v6, v8);
            }
            else if (!v6)
            {
              return (SSL_CTX *)(SSL_set_ex_data(*(SSL **)&cipher_list[12].sorted, 0, v1) == 1);
            }
            free(v7);
            return (SSL_CTX *)(SSL_set_ex_data(*(SSL **)&cipher_list[12].sorted, 0, v1) == 1);
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t SSL_set_msg_callback_arg(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

void SSL_set_msg_callback(SSL *ssl, void (__cdecl *cb)(int, int, int, const void *, size_t, SSL *, void *))
{
  *(void *)&ssl->quiet_shutdown = cb;
}

unsigned __int16 *__boringssl_session_apply_protocol_options_for_transport_block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(id *)(a1 + 32);
  if (!a2) {
    goto LABEL_279;
  }
  if (a2[1]) {
    boringssl_context_set_max_version(*(void *)(a1 + 40), a2[1]);
  }
  if (*a2) {
    boringssl_context_set_min_version(*(void *)(a1 + 40), *a2);
  }
  unsigned int v5 = (unsigned int *)((char *)a2 + 361);
  boringssl_context_set_fallback(*(void *)(a1 + 40), (*(_DWORD *)((char *)a2 + 361) >> 7) & 1);
  uint64_t v6 = *(void *)(a1 + 40);
  if ((*(_DWORD *)((unsigned char *)a2 + 361) & 0x2000) != 0)
  {
    sct_enableunsigned int d = 1;
  }
  else if ((*(_DWORD *)((unsigned char *)a2 + 361) & 0x4000) != 0)
  {
    sct_enableunsigned int d = 0;
  }
  else
  {
    sct_enableunsigned int d = boringssl_config_get_sct_enabled();
  }
  boringssl_context_set_sct_enable(v6, sct_enabled);
  uint64_t v8 = *(void *)(a1 + 40);
  if ((*v5 & 0x8000) != 0)
  {
    ocsp_enableunsigned int d = 1;
  }
  else if ((*v5 & 0x10000) != 0)
  {
    ocsp_enableunsigned int d = 0;
  }
  else
  {
    ocsp_enableunsigned int d = boringssl_config_get_ocsp_enabled();
  }
  boringssl_context_set_ocsp_enable(v8, ocsp_enabled);
  uint64_t v10 = *(void *)(a1 + 40);
  if ((*v5 & 0x200000) != 0)
  {
    renegotiation_enableunsigned int d = 1;
  }
  else if ((*v5 & 0x400000) != 0)
  {
    renegotiation_enableunsigned int d = 0;
  }
  else
  {
    renegotiation_enableunsigned int d = boringssl_config_get_renegotiation_enabled();
  }
  boringssl_context_set_renegotiation(v10, renegotiation_enabled);
  uint64_t v12 = *(void *)(a1 + 40);
  if ((*v5 & 0x80000) != 0)
  {
    resumption_enableunsigned int d = 1;
  }
  else if ((*v5 & 0x100000) != 0)
  {
    resumption_enableunsigned int d = 0;
  }
  else
  {
    resumption_enableunsigned int d = boringssl_config_get_resumption_enabled();
  }
  boringssl_context_set_resumption(v12, resumption_enabled);
  uint64_t v14 = *(void *)(a1 + 40);
  if ((*v5 & 0x800) != 0)
  {
    tickets_enableunsigned int d = 1;
  }
  else if ((*v5 & 0x100000) != 0)
  {
    tickets_enableunsigned int d = 0;
  }
  else
  {
    tickets_enableunsigned int d = boringssl_config_get_tickets_enabled();
  }
  boringssl_context_set_session_ticket_enabled(v14, tickets_enabled);
  uint64_t v16 = *(void *)(a1 + 40);
  if ((*v5 & 0x200) != 0)
  {
    false_start_enableunsigned int d = 1;
  }
  else if ((*v5 & 0x400) != 0)
  {
    false_start_enableunsigned int d = 0;
  }
  else
  {
    false_start_enableunsigned int d = boringssl_config_get_false_start_enabled();
  }
  boringssl_context_set_false_start(v16, false_start_enabled);
  boringssl_session_set_early_data_enabled(*(void *)(a1 + 40), (*v5 >> 23) & 1);
  uint64_t v18 = *v5;
  unint64_t v19 = v18 | ((unint64_t)*((unsigned __int8 *)a2 + 365) << 32);
  if ((v18 & 0x800000) != 0 && (*(unsigned char *)(*(void *)(a1 + 48) + 556) & 0x10) != 0 && *(_DWORD *)(a1 + 56) == 2)
  {
    boringssl_session_set_quic_early_data_context(*(void *)(a1 + 40), *((const char **)a2 + 42), *((void *)a2 + 44));
    unint64_t v19 = *v5 | ((unint64_t)*((unsigned __int8 *)a2 + 365) << 32);
  }
  boringssl_context_set_enforce_ev(*(void *)(a1 + 40), (v19 >> 17) & 1);
  boringssl_context_set_ats_enforced(*(void *)(a1 + 40), *v5 & 1);
  boringssl_context_set_ats_minimum_rsa_key_size(*(void *)(a1 + 40), *((void *)a2 + 38));
  boringssl_context_set_ats_minimum_ecdsa_key_size(*(void *)(a1 + 40), *((void *)a2 + 39));
  boringssl_context_set_ats_minimum_signature_algorithm(*(void *)(a1 + 40), *((_DWORD *)a2 + 80));
  optionunsigned int s = v4;
  if (*(_WORD *)(*(void *)(a1 + 48) + 56) == 772)
  {
    int v21 = ssl_credential_st::UsesPrivateKey(v20);
    if ((*v5 & 0x40000000) != 0) {
      int v22 = ((*(unsigned int *)((char *)a2 + 361) | ((unint64_t)*((unsigned __int8 *)a2 + 365) << 32)) >> 29) & 1;
    }
    else {
      int v22 = v21;
    }
    uint64_t v23 = (ssl_credential_st *)boringssl_context_set_certificate_compression(*(void *)(a1 + 40), v22);
    uint64_t v24 = *(void *)(a1 + 40);
    if (((*v5 | ((unint64_t)*((unsigned __int8 *)a2 + 365) << 32)) & 0x200000000) != 0) {
      int v25 = 1;
    }
    else {
      int v25 = ssl_credential_st::UsesPrivateKey(v23);
    }
    boringssl_context_set_GREASE_enabled(v24, v25);
    BOOL enable_encrypted_client_hello = sec_protocol_options_get_enable_encrypted_client_hello(v4);
    uint64_t v27 = *(void *)(a1 + 48);
    if (!v27) {
      goto LABEL_56;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v27 + 16));
    if (!WeakRetained
      || (unint64_t v29 = WeakRetained,
          unsigned int v30 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16)),
          char v31 = v30[475],
          v30,
          v29,
          (v31 & 1) == 0))
    {
      uint64_t v32 = *(void *)(a1 + 48);
      if (!v32) {
        goto LABEL_56;
      }
      id v33 = objc_loadWeakRetained((id *)(v32 + 16));
      if (v33)
      {
        int v34 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
        BOOL v35 = (v34[475] & 1) == 0;
      }
      else
      {
        BOOL v35 = 1;
      }

      if (v35)
      {
LABEL_56:
        if (g_boringssl_log)
        {
          unsigned int v36 = (id)g_boringssl_log;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v113 = *(void *)(a1 + 48);
            if (v113)
            {
              unsigned int v133 = (char *)objc_loadWeakRetained((id *)(v113 + 16));
              uint64_t v134 = *(void *)(a1 + 48);
              int v215 = v133;
              if (v133)
              {
                BOOL v222 = v134 != 0;
                if (v134)
                {
                  unsigned int v133 = (char *)objc_loadWeakRetained((id *)(v134 + 16));
                  uint64_t v134 = *(void *)(a1 + 48);
                }
                else
                {
                  unsigned int v133 = 0;
                }
                int v116 = v133 + 391;
              }
              else
              {
                BOOL v222 = 0;
                int v116 = &unk_1BA179713;
              }
              int v213 = v133;
              if (v134)
              {
                id v114 = objc_loadWeakRetained((id *)(v134 + 16));
                char v115 = 0;
              }
              else
              {
                id v114 = 0;
                char v115 = 1;
              }
            }
            else
            {
              BOOL v222 = 0;
              id v114 = 0;
              char v115 = 1;
              int v116 = &unk_1BA179713;
            }
            v230 = "boringssl_session_apply_protocol_options_for_transport_block_invoke";
            __int16 v231 = 1024;
            int v209 = "disabled";
            int v232 = 1787;
            __int16 v233 = 2082;
            *(_DWORD *)buf = 136447234;
            if (enable_encrypted_client_hello) {
              int v209 = "enabled";
            }
            v234 = v116;
            __int16 v235 = 2048;
            id v236 = v114;
            __int16 v237 = 2080;
            *(void *)v238 = v209;
            _os_log_debug_impl(&dword_1BA0DE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] ECH is %s", buf, 0x30u);
            if ((v115 & 1) == 0) {

            }
            if (v222) {
            if (v113)
            }
          }
        }
      }
    }
    boringssl_context_set_ech_grease_enabled(*(void *)(a1 + 40), enable_encrypted_client_hello);
  }
  uint64_t v251 = 0;
  uint64_t v252 = 0;
  char v37 = (const unsigned __int8 *)(a2 + 12);
  char v38 = (unsigned __int8 *)(*(void *)(a1 + 48) + 252);
  if (*(_OWORD *)(a2 + 12) == 0) {
    MEMORY[0x1BA9E6030](v38, v37);
  }
  else {
    uuid_copy(v38, v37);
  }
  char v39 = (char *)*((void *)a2 + 2);
  if (v39) {
    int v40 = boringssl_context_set_experiment_identifier(*(void *)(a1 + 40), v39);
  }
  else {
    int v40 = 1;
  }
  if (*((void *)a2 + 30) && *((void *)a2 + 31))
  {
    uint64_t v41 = MEMORY[0x1BA9E5C70]();
    uint64_t v42 = *(void *)(a1 + 48);
    unint64_t v43 = *(void **)(v42 + 216);
    *(void *)(v42 + 216) = v41;

    objc_storeStrong((id *)(*(void *)(a1 + 48) + 208), *((id *)a2 + 31));
  }
  unsigned int v44 = *v5;
  if ((*v5 & 0x10000000) != 0)
  {
    if ((v44 & 0x4000000) != 0) {
      int v46 = 3;
    }
    else {
      int v46 = (v44 >> 27) & ((*(unsigned char *)(*(void *)(a1 + 48) + 556) & 0x10) >> 4);
    }
    uint64_t v45 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v45 = *(void *)(a1 + 40);
    if ((*(unsigned char *)(*(void *)(a1 + 48) + 556) & 0x10) != 0) {
      int v46 = 0;
    }
    else {
      int v46 = 3;
    }
  }
  boringssl_context_set_verify_mode(v45, v46);
  int v47 = (char *)*((void *)a2 + 1);
  if (v47)
  {
    size_t v48 = strlen(*((const char **)a2 + 1));
    boringssl_session_set_peer_hostname(*(void *)(a1 + 40), v47, v48);
  }
  if ((*v5 & 0x20) != 0)
  {
    uint64_t v49 = *(void *)(a1 + 40);
    if (v49)
    {
      if (*(_DWORD *)v49 == -1252936367)
      {
        uint64_t v50 = *(void *)(v49 + 8);
        if (v50)
        {
          uint64_t v51 = *(void *)(v50 + 400);
          if (v51)
          {
            if (!SSL_set_tlsext_host_name(v51, 0))
            {
              id v71 = objc_loadWeakRetained((id *)(v50 + 16));
              if (!v71
                || (unsigned int v72 = v71,
                    unsigned int v73 = objc_loadWeakRetained((id *)(v50 + 16)),
                    char v74 = v73[475],
                    v73,
                    v72,
                    (v74 & 1) == 0))
              {
                id v75 = objc_loadWeakRetained((id *)(v50 + 16));
                if (v75)
                {
                  unint64_t v76 = objc_loadWeakRetained((id *)(v50 + 16));
                  BOOL v77 = (v76[475] & 1) == 0;
                }
                else
                {
                  BOOL v77 = 1;
                }

                if (v77)
                {
                  if (g_boringssl_log)
                  {
                    int v135 = (id)g_boringssl_log;
                    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR)) {
                      __boringssl_session_apply_protocol_options_for_transport_block_invoke_cold_1(v50, v135);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  unint64_t v52 = (void *)*((void *)a2 + 24);
  if (v52)
  {
    int v53 = boringssl_session_state_create_from_dispatch_data(*(void **)(a1 + 48), v52);
    int v54 = boringssl_session_set_session_state(*(void *)(a1 + 40), v53);
    uint64_t v55 = *(void *)(a1 + 48);
    if (!v55) {
      goto LABEL_95;
    }
    id v56 = objc_loadWeakRetained((id *)(v55 + 16));
    if (!v56
      || (unint64_t v57 = v56,
          int v58 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16)),
          char v59 = v58[475],
          v58,
          v57,
          (v59 & 1) == 0))
    {
      uint64_t v60 = *(void *)(a1 + 48);
      if (!v60) {
        goto LABEL_95;
      }
      id v61 = objc_loadWeakRetained((id *)(v60 + 16));
      if (v61)
      {
        __int16 v62 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
        BOOL v63 = (v62[475] & 1) == 0;
      }
      else
      {
        BOOL v63 = 1;
      }

      if (v63)
      {
LABEL_95:
        if (g_boringssl_log)
        {
          unint64_t v64 = (id)g_boringssl_log;
          if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
          {
            uint64_t v65 = *(void *)(a1 + 48);
            uint64_t v221 = v65;
            if (v65)
            {
              unsigned int v66 = (char *)objc_loadWeakRetained((id *)(v65 + 16));
              uint64_t v67 = *(void *)(a1 + 48);
              int v213 = v66;
              if (v66)
              {
                BOOL v216 = v67 != 0;
                if (v67)
                {
                  unsigned int v66 = (char *)objc_loadWeakRetained((id *)(v67 + 16));
                  uint64_t v67 = *(void *)(a1 + 48);
                }
                else
                {
                  unsigned int v66 = 0;
                }
                int v70 = v66 + 391;
              }
              else
              {
                BOOL v216 = 0;
                int v70 = &unk_1BA179713;
              }
              uint64_t v211 = v66;
              if (v67)
              {
                id v68 = objc_loadWeakRetained((id *)(v67 + 16));
                char v69 = 0;
              }
              else
              {
                id v68 = 0;
                char v69 = 1;
              }
            }
            else
            {
              BOOL v216 = 0;
              id v68 = 0;
              char v69 = 1;
              int v70 = &unk_1BA179713;
            }
            v230 = "boringssl_session_apply_protocol_options_for_transport_block_invoke";
            __int16 v231 = 1024;
            int v78 = "not set";
            int v232 = 1836;
            *(_DWORD *)buf = 136447234;
            __int16 v233 = 2082;
            if (v54) {
              int v78 = "set";
            }
            v234 = v70;
            __int16 v235 = 2048;
            id v236 = v68;
            __int16 v237 = 2082;
            *(void *)v238 = v78;
            _os_log_impl(&dword_1BA0DE000, v64, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Session state %{public}s.", buf, 0x30u);
            if ((v69 & 1) == 0) {

            }
            if (v216) {
            if (v221)
            }
          }
        }
      }
    }
  }
  id v79 = *((id *)a2 + 6);
  if (v79) {
    boringssl_context_set_alpn_protocol_list(*(void *)(a1 + 40), v79, *(_DWORD *)(a1 + 56));
  }
  unint64_t v80 = *v5 | ((unint64_t)*((unsigned __int8 *)a2 + 365) << 32);
  if ((v80 & 0x800000000) != 0) {
    boringssl_context_set_allow_unknown_alpn_protos(*(void *)(a1 + 40), (v80 >> 34) & 1);
  }
  CFArrayRef v81 = (const __CFArray *)*((void *)a2 + 35);
  unint64_t v82 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v81)
  {
    *(void *)(*(void *)(a1 + 48) + 368) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v81);
    v40 &= boringssl_context_set_raw_public_key_certificate(*(_DWORD **)(a1 + 40), *((CFArrayRef *)a2 + 35), 1);
  }
  CFArrayRef v83 = (const __CFArray *)*((void *)a2 + 36);
  if (v83)
  {
    *(void *)(*(void *)(a1 + 48) + 376) = CFArrayCreateCopy(*v82, v83);
    v40 &= boringssl_context_set_raw_public_key_certificate(*(_DWORD **)(a1 + 40), *((CFArrayRef *)a2 + 36), 0);
  }
  int v84 = (void *)*((void *)a2 + 7);
  if (v84) {
    v40 &= boringssl_context_set_identity(*(void *)(a1 + 40), v84);
  }
  unsigned int v85 = (void *)*((void *)a2 + 8);
  if (v85)
  {
    unsigned int v86 = (void *)*((void *)a2 + 27);
    if (v86)
    {
      int v87 = (void *)*((void *)a2 + 25);
      if (v87)
      {
        unint64_t v88 = (void *)*((void *)a2 + 26);
        if (v88) {
          v40 &= boringssl_context_set_external_identity(*(void *)(a1 + 40), v85, v87, v88, v86);
        }
      }
    }
  }
  xpc_object_t v89 = xpc_array_create(0, 0);
  unsigned int v90 = (void *)*((void *)a2 + 9);
  if (v90)
  {
    id v91 = v90;
    unsigned int v92 = boringssl_psk_cache_create_with_context(*(void **)(a1 + 48));
    uint64_t v93 = *(void *)(a1 + 48);
    unint64_t v94 = *(void **)(v93 + 40);
    *(void *)(v93 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = v92;

    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __boringssl_session_apply_protocol_options_for_transport_block_invoke_12;
    applier[3] = &__block_descriptor_40_e36_B24__0Q8__NSObject_OS_xpc_object__16lu32l8;
    applier[4] = *(void *)(a1 + 48);
    xpc_array_apply(v91, applier);
    if (!xpc_array_get_count(v91))
    {
LABEL_216:
      uint64_t v142 = *((void *)a2 + 32);
      if (v142)
      {
        unint64_t v143 = (void *)*((void *)a2 + 33);
        if (v143) {
          boringssl_psk_cache_set_selection_block_and_queue(*(void **)(*(void *)(a1 + 48) + 40), v142, v143);
        }
      }

      goto LABEL_220;
    }
    if (boringssl_context_get_min_protocol_version(*(void *)(a1 + 40)) == 772)
    {
      tls13_external_psk_enableunsigned int d = boringssl_config_get_tls13_external_psk_enabled();
      uint64_t v96 = *(void *)(a1 + 48);
      if (tls13_external_psk_enabled)
      {
        if (!v96) {
          goto LABEL_159;
        }
        id v97 = objc_loadWeakRetained((id *)(v96 + 16));
        if (!v97
          || (unsigned int v98 = v97,
              int v99 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16)),
              char v100 = v99[475],
              v99,
              v98,
              (v100 & 1) == 0))
        {
          uint64_t v101 = *(void *)(a1 + 48);
          if (!v101) {
            goto LABEL_159;
          }
          id v102 = objc_loadWeakRetained((id *)(v101 + 16));
          if (v102)
          {
            unsigned int v103 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
            BOOL v104 = (v103[475] & 1) == 0;
          }
          else
          {
            BOOL v104 = 1;
          }

          if (v104)
          {
LABEL_159:
            if (g_boringssl_log)
            {
              unint64_t v117 = (id)g_boringssl_log;
              if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
              {
                id v223 = v79;
                uint64_t v118 = *(void *)(a1 + 48);
                if (v118)
                {
                  uint64_t v119 = *(void *)(a1 + 48);
                  int v120 = (char *)objc_loadWeakRetained((id *)(v118 + 16));
                  uint64_t v121 = *(void *)(a1 + 48);
                  int v213 = v120;
                  if (v120)
                  {
                    BOOL v217 = v121 != 0;
                    if (v121)
                    {
                      int v120 = (char *)objc_loadWeakRetained((id *)(v121 + 16));
                      uint64_t v121 = *(void *)(a1 + 48);
                    }
                    else
                    {
                      int v120 = 0;
                    }
                    int v129 = v120 + 391;
                  }
                  else
                  {
                    BOOL v217 = 0;
                    int v129 = &unk_1BA179713;
                  }
                  uint64_t v211 = v120;
                  if (v121)
                  {
                    int v136 = v129;
                    id v137 = objc_loadWeakRetained((id *)(v121 + 16));
                    int v129 = v136;
                    int v127 = v137;
                    char v128 = 0;
                  }
                  else
                  {
                    int v127 = 0;
                    char v128 = 1;
                  }
                }
                else
                {
                  uint64_t v119 = 0;
                  BOOL v217 = 0;
                  int v127 = 0;
                  char v128 = 1;
                  int v129 = &unk_1BA179713;
                }
                *(_DWORD *)buf = 136446978;
                v230 = "boringssl_session_apply_protocol_options_for_transport_block_invoke";
                __int16 v231 = 1024;
                int v232 = 1923;
                __int16 v233 = 2082;
                v234 = v129;
                __int16 v235 = 2048;
                id v236 = v127;
                _os_log_impl(&dword_1BA0DE000, v117, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Using TLS 1.3 external PSK callback", buf, 0x26u);
                if ((v128 & 1) == 0) {

                }
                if (v217) {
                id v79 = v223;
                }
                if (v119) {
              }
                }
            }
          }
        }
        SSL_set_psk_client13_ext_callback(*(void *)(*(void *)(a1 + 48) + 400), (uint64_t)boringssl_session_psk_client13_ext_callback_handler);
        goto LABEL_214;
      }
      if (!v96) {
        goto LABEL_167;
      }
      id v105 = objc_loadWeakRetained((id *)(v96 + 16));
      if (!v105
        || (unint64_t v106 = v105,
            int v107 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16)),
            char v108 = v107[475],
            v107,
            v106,
            (v108 & 1) == 0))
      {
        uint64_t v109 = *(void *)(a1 + 48);
        if (!v109) {
          goto LABEL_167;
        }
        id v110 = objc_loadWeakRetained((id *)(v109 + 16));
        if (v110)
        {
          uint64_t v111 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
          BOOL v112 = (v111[475] & 1) == 0;
        }
        else
        {
          BOOL v112 = 1;
        }

        if (v112)
        {
LABEL_167:
          if (g_boringssl_log)
          {
            uint64_t v122 = (id)g_boringssl_log;
            if (os_log_type_enabled(v122, OS_LOG_TYPE_INFO))
            {
              id v224 = v79;
              uint64_t v123 = *(void *)(a1 + 48);
              if (v123)
              {
                uint64_t v124 = *(void *)(a1 + 48);
                unsigned int v125 = (char *)objc_loadWeakRetained((id *)(v123 + 16));
                uint64_t v126 = *(void *)(a1 + 48);
                int v213 = v125;
                if (v125)
                {
                  BOOL v218 = v126 != 0;
                  if (v126)
                  {
                    unsigned int v125 = (char *)objc_loadWeakRetained((id *)(v126 + 16));
                    uint64_t v126 = *(void *)(a1 + 48);
                  }
                  else
                  {
                    unsigned int v125 = 0;
                  }
                  unsigned int v132 = v125 + 391;
                }
                else
                {
                  BOOL v218 = 0;
                  unsigned int v132 = &unk_1BA179713;
                }
                uint64_t v211 = v125;
                if (v126)
                {
                  int v138 = v132;
                  id v139 = objc_loadWeakRetained((id *)(v126 + 16));
                  unsigned int v132 = v138;
                  int v130 = v139;
                  char v131 = 0;
                }
                else
                {
                  int v130 = 0;
                  char v131 = 1;
                }
              }
              else
              {
                uint64_t v124 = 0;
                BOOL v218 = 0;
                int v130 = 0;
                char v131 = 1;
                unsigned int v132 = &unk_1BA179713;
              }
              *(_DWORD *)buf = 136446978;
              v230 = "boringssl_session_apply_protocol_options_for_transport_block_invoke";
              __int16 v231 = 1024;
              int v232 = 1927;
              __int16 v233 = 2082;
              v234 = v132;
              __int16 v235 = 2048;
              id v236 = v130;
              _os_log_impl(&dword_1BA0DE000, v122, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] TLS 1.3 external PSK callback is not enabled", buf, 0x26u);
              if ((v131 & 1) == 0) {

              }
              if (v218) {
              id v79 = v224;
              }
              if (v124) {
            }
              }
          }
        }
      }
    }
    SSL_set_psk_server_callback(*(void *)(*(void *)(a1 + 48) + 400), (uint64_t)boringssl_session_server_psk_callback_handler);
    SSL_set_psk_client_callback(*(void *)(*(void *)(a1 + 48) + 400), (uint64_t)boringssl_session_client_psk_callback_handler);
    for (uint64_t i = 0; i != 4; ++i)
      xpc_array_set_uint64(v89, 0xFFFFFFFFFFFFFFFFLL, (unsigned __int16)g_boringssl_private_key_methods_block_invoke_supported_psk_ciphersuites[i]);
LABEL_214:
    uint64_t v141 = *(void *)(*(void *)(a1 + 48) + 400);
    if (v141) {
      SSL_set_options(v141, 0x400000u);
    }
    goto LABEL_216;
  }
LABEL_220:
  int v144 = *((void *)a2 + 10);
  if (v144)
  {
    size_t size = dispatch_data_get_size(v144);
    unsigned int v146 = malloc_type_malloc(size + 1, 0x173CCEAAuLL);
    bzero(v146, size + 1);
    uint64_t v147 = boringssl_helper_dispatch_data_copyout(*((NSObject **)a2 + 10), (uint64_t)v146, size);
    uint64_t v148 = *(void *)(a1 + 48);
    if (v147 == size)
    {
      SSL_use_psk_identity_hint(*(void *)(v148 + 400), (char *)v146);
    }
    else
    {
      if (!v148) {
        goto LABEL_232;
      }
      id v149 = objc_loadWeakRetained((id *)(v148 + 16));
      if (!v149
        || (int v150 = v149,
            uint64_t v151 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16)),
            char v152 = v151[475],
            v151,
            v150,
            (v152 & 1) == 0))
      {
        uint64_t v153 = *(void *)(a1 + 48);
        if (!v153) {
          goto LABEL_232;
        }
        id v154 = objc_loadWeakRetained((id *)(v153 + 16));
        if (v154)
        {
          int v155 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
          BOOL v156 = (v155[475] & 1) == 0;
        }
        else
        {
          BOOL v156 = 1;
        }

        if (v156)
        {
LABEL_232:
          if (g_boringssl_log)
          {
            int v157 = (id)g_boringssl_log;
            if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
            {
              id v226 = v79;
              uint64_t v203 = *(void *)(a1 + 48);
              if (v203)
              {
                unsigned int v207 = (char *)objc_loadWeakRetained((id *)(v203 + 16));
                uint64_t v208 = *(void *)(a1 + 48);
                int v213 = v207;
                if (v207)
                {
                  BOOL v220 = v208 != 0;
                  if (v208)
                  {
                    unsigned int v207 = (char *)objc_loadWeakRetained((id *)(v208 + 16));
                    uint64_t v208 = *(void *)(a1 + 48);
                  }
                  else
                  {
                    unsigned int v207 = 0;
                  }
                  int v206 = v207 + 391;
                }
                else
                {
                  BOOL v220 = 0;
                  int v206 = &unk_1BA179713;
                }
                uint64_t v211 = v207;
                if (v208)
                {
                  id v204 = objc_loadWeakRetained((id *)(v208 + 16));
                  char v205 = 0;
                }
                else
                {
                  id v204 = 0;
                  char v205 = 1;
                }
              }
              else
              {
                BOOL v220 = 0;
                id v204 = 0;
                char v205 = 1;
                int v206 = &unk_1BA179713;
              }
              *(_DWORD *)buf = 136446978;
              v230 = "boringssl_session_apply_protocol_options_for_transport_block_invoke";
              __int16 v231 = 1024;
              int v232 = 1974;
              __int16 v233 = 2082;
              v234 = v206;
              __int16 v235 = 2048;
              id v236 = v204;
              _os_log_error_impl(&dword_1BA0DE000, v157, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] Failed to copy PSK hint data", buf, 0x26u);
              if ((v205 & 1) == 0) {

              }
              if (v220) {
              id v79 = v226;
              }
              if (v203) {
            }
              }
          }
        }
      }
    }
    if (v146) {
      free(v146);
    }
  }
  int v158 = (void *)*((void *)a2 + 17);
  if (v158)
  {
    v40 &= boringssl_context_set_quic_transport_parameters(*(void *)(a1 + 40), v158);
    uint64_t v159 = *(void *)(*(void *)(a1 + 48) + 400);
    BOOL quic_use_legacy_codepoint = sec_protocol_options_get_quic_use_legacy_codepoint(options);
    SSL_set_quic_use_legacy_codepoint(v159, quic_use_legacy_codepoint);
  }
  id v161 = *((id *)a2 + 5);
  if (v161)
  {
    int v162 = v161;
    if (v89)
    {
      uint64_t v163 = boringssl_helper_xpc_array_union(v161, v89);

      int v162 = (void *)v163;
    }
    boringssl_context_set_ciphersuites_from_list(*(void *)(a1 + 40), v162);
  }
  else
  {
    if (v89) {
      boringssl_context_set_ciphersuites_from_list(*(void *)(a1 + 40), v89);
    }
    int v162 = 0;
  }
  id v164 = *((id *)a2 + 29);
  if (v164) {
    boringssl_context_set_key_exchange_groups(*(void *)(a1 + 40), v164);
  }
  if (*((void *)a2 + 15))
  {
    uint64_t v165 = MEMORY[0x1BA9E5C70]();
    uint64_t v166 = *(void *)(a1 + 48);
    int v167 = *(void **)(v166 + 120);
    *(void *)(v166 + 12std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = v165;

    objc_storeStrong((id *)(*(void *)(a1 + 48) + 128), *((id *)a2 + 16));
  }
  if (*((void *)a2 + 13))
  {
    uint64_t v168 = MEMORY[0x1BA9E5C70]();
    uint64_t v169 = *(void *)(a1 + 48);
    int v170 = *(void **)(v169 + 136);
    *(void *)(v169 + 136) = v168;

    objc_storeStrong((id *)(*(void *)(a1 + 48) + 144), *((id *)a2 + 14));
  }
  if (*((void *)a2 + 11))
  {
    uint64_t v171 = MEMORY[0x1BA9E5C70]();
    uint64_t v172 = *(void *)(a1 + 48);
    int v173 = *(void **)(v172 + 152);
    *(void *)(v172 + 152) = v171;

    objc_storeStrong((id *)(*(void *)(a1 + 48) + 160), *((id *)a2 + 12));
  }
  if (*((void *)a2 + 22))
  {
    uint64_t v174 = MEMORY[0x1BA9E5C70]();
    uint64_t v175 = *(void *)(a1 + 48);
    int v176 = *(void **)(v175 + 168);
    *(void *)(v175 + 168) = v174;

    objc_storeStrong((id *)(*(void *)(a1 + 48) + 176), *((id *)a2 + 23));
  }
  objc_storeStrong((id *)(*(void *)(a1 + 48) + 512), *(id *)(a1 + 32));
  *(unsigned char *)(*(void *)(a1 + 48) + 384) = *((unsigned char *)a2 + 296);
  *(unsigned char *)(*(void *)(a1 + 48) + 385) = *((unsigned char *)a2 + 297);
  a2 = (unsigned __int16 *)(v40 & boringssl_context_set_ticket_request(*(void *)(a1 + 40), *(unsigned char *)(*(void *)(a1 + 48) + 384), *(unsigned char *)(*(void *)(a1 + 48) + 385)));
  if (a2 == 1)
  {
    uint64_t v177 = *(void *)(a1 + 48);
    if (!v177) {
      goto LABEL_266;
    }
    id v178 = objc_loadWeakRetained((id *)(v177 + 16));
    if (!v178
      || (uint64_t v179 = v178,
          int v180 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16)),
          char v181 = v180[475],
          v180,
          v179,
          (v181 & 1) == 0))
    {
      uint64_t v182 = *(void *)(a1 + 48);
      if (!v182) {
        goto LABEL_266;
      }
      id v183 = objc_loadWeakRetained((id *)(v182 + 16));
      if (v183)
      {
        unint64_t v184 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
        BOOL v185 = (v184[475] & 1) == 0;
      }
      else
      {
        BOOL v185 = 1;
      }

      if (v185)
      {
LABEL_266:
        if (g_boringssl_log)
        {
          unsigned int v186 = (id)g_boringssl_log;
          if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
          {
            id v187 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
            uint64_t v188 = *(void *)(a1 + 48);
            int v219 = v187;
            id v225 = v79;
            if (v187)
            {
              BOOL v189 = v188 != 0;
              if (v188)
              {
                int v190 = (char *)objc_loadWeakRetained((id *)(v188 + 16));
                uint64_t v188 = *(void *)(a1 + 48);
              }
              else
              {
                int v190 = 0;
              }
              unint64_t v210 = v190;
              int v212 = v190 + 391;
              BOOL v214 = v189;
            }
            else
            {
              BOOL v214 = 0;
              int v212 = &unk_1BA179713;
            }
            id v191 = objc_loadWeakRetained((id *)(v188 + 16));
            uint64_t v192 = *(void *)(a1 + 48);
            int v193 = *(unsigned __int16 *)(v192 + 58);
            int v194 = *(unsigned __int16 *)(v192 + 56);
            id v195 = objc_loadWeakRetained((id *)(v192 + 16));
            redacted_identity = nw_protocol_boringssl_get_redacted_identity((uint64_t)v195, *(const char **)(*(void *)(a1 + 48) + 80));
            int v197 = *(unsigned __int8 **)(a1 + 48);
            int v198 = (v197[557] >> 4) & 1;
            int v199 = v197[556] >> 7;
            int v200 = (v197[559] >> 1) & 1;
            int v201 = (v197[559] >> 3) & 1;
            LODWORD(v197) = (v197[560] >> 3) & 1;
            *(_DWORD *)buf = 136449026;
            v230 = "boringssl_session_apply_protocol_options_for_transport_block_invoke";
            __int16 v231 = 1024;
            int v232 = 2042;
            __int16 v233 = 2082;
            v234 = v212;
            __int16 v235 = 2048;
            id v236 = v191;
            __int16 v237 = 1024;
            *(_DWORD *)v238 = v193;
            *(_WORD *)&v238[4] = 1024;
            *(_DWORD *)&v238[6] = v194;
            __int16 v239 = 2082;
            v240 = redacted_identity;
            __int16 v241 = 1024;
            int v242 = v198;
            __int16 v243 = 1024;
            int v244 = v199;
            __int16 v245 = 1024;
            int v246 = v200;
            __int16 v247 = 1024;
            int v248 = v201;
            __int16 v249 = 1024;
            int v250 = (int)v197;
            _os_log_impl(&dword_1BA0DE000, v186, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] TLS configured [min_version(0x%04x) max_version(0x%04x) name(%{public}s) tickets(%{BOOL}d) false_start(%{BOOL}d) enforce_ev(%{BOOL}d) enforce_ats(%{BOOL}d) ech(%{BOOL}d)]", buf, 0x5Au);

            if (v214) {
            id v79 = v225;
            }
          }
        }
      }
    }
  }

  uint64_t v4 = options;
LABEL_279:

  return a2;
}

uint64_t boringssl_session_set_peer_hostname(uint64_t a1, char *__s1, size_t __n)
{
  if (!a1 || *(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v4 = 0;
  if (__n - 256 < 0xFFFFFFFFFFFFFF01) {
    return v4;
  }
  if (!__s1) {
    return v4;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    return v4;
  }
  uint64_t v4 = *(void *)(v6 + 400);
  if (!v4) {
    return v4;
  }
  __int16 v7 = *(void **)(v6 + 80);
  if (v7)
  {
    free(v7);
    *(void *)(v6 + 8std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0;
  }
  *(void *)(v6 + 8std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = strndup(__s1, __n);
  if (!*(void *)(v6 + 80)) {
    return 0;
  }
  int is_valid_sni_value = boringssl_helper_is_valid_sni_value((uint64_t)__s1, __n);
  if (is_valid_sni_value)
  {
    if (!SSL_set_tlsext_host_name(v4, __s1))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
      if (!WeakRetained
        || (uint64_t v10 = WeakRetained,
            uint64_t v11 = objc_loadWeakRetained((id *)(v6 + 16)),
            char v12 = v11[475],
            v11,
            v10,
            (v12 & 1) == 0))
      {
        id v13 = objc_loadWeakRetained((id *)(v6 + 16));
        if (v13)
        {
          uint64_t v14 = objc_loadWeakRetained((id *)(v6 + 16));
          BOOL v15 = (v14[475] & 1) == 0;
        }
        else
        {
          BOOL v15 = 1;
        }

        uint64_t v4 = 0;
        if (v15 && g_boringssl_log)
        {
          uint64_t v24 = (id)g_boringssl_log;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            boringssl_session_set_peer_hostname_cold_1(v6, v24);
          }
LABEL_33:
          uint64_t v4 = is_valid_sni_value ^ 1u;

          return v4;
        }
        return v4;
      }
      return 0;
    }
    return 1;
  }
  id v17 = objc_loadWeakRetained((id *)(v6 + 16));
  if (v17)
  {
    uint64_t v18 = v17;
    unint64_t v19 = objc_loadWeakRetained((id *)(v6 + 16));
    char v20 = v19[475];

    if (v20) {
      return 1;
    }
  }
  id v21 = objc_loadWeakRetained((id *)(v6 + 16));
  if (v21)
  {
    int v22 = objc_loadWeakRetained((id *)(v6 + 16));
    BOOL v23 = (v22[475] & 1) == 0;
  }
  else
  {
    BOOL v23 = 1;
  }

  uint64_t v4 = 1;
  if (v23 && g_boringssl_log)
  {
    uint64_t v24 = (id)g_boringssl_log;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
      boringssl_session_set_peer_hostname_cold_2(v6, v24);
    }
    goto LABEL_33;
  }
  return v4;
}

uint64_t boringssl_helper_is_valid_sni_value(uint64_t a1, uint64_t a2)
{
  uint64_t IsDNSName = 0;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1 && (unint64_t)(a2 - 1) <= 0xFE)
  {
    memset(v8, 0, sizeof(v8));
    __memcpy_chk();
    uint64_t v4 = 0;
    while (*((unsigned char *)v8 + v4) && *((unsigned char *)v8 + v4) != 42)
    {
      if (a2 == ++v4)
      {
        CFStringRef v5 = CFStringCreateWithCString(0, (const char *)v8, 0x8000100u);
        if (v5)
        {
          CFStringRef v6 = v5;
          uint64_t IsDNSName = SecFrameworkIsDNSName();
          CFRelease(v6);
          return IsDNSName;
        }
        return 0;
      }
    }
    return 0;
  }
  return IsDNSName;
}

uint64_t boringssl_context_set_min_version(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4 || !*(void *)(v4 + 400)) {
    return 0xFFFFFFFFLL;
  }
  if (os_variant_has_internal_content()
    && boringssl_config_get_restricted_mode_state()
    && (*(_DWORD *)a1 != -1252936367 || (uint64_t v6 = *(void *)(a1 + 8)) == 0 || (*(unsigned char *)(v6 + 556) & 0x20) != 0
      ? (int v7 = boringssl_config_restricted_mode_restrict_dtls_version(a2))
      : (int v7 = boringssl_config_restricted_mode_restrict_tls_version(a2)),
        int v9 = v7,
        v7 != a2))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
    if (!WeakRetained
      || (uint64_t v18 = WeakRetained,
          unint64_t v19 = objc_loadWeakRetained((id *)(v4 + 16)),
          char v20 = v19[475],
          v19,
          v18,
          (v20 & 1) == 0))
    {
      id v21 = objc_loadWeakRetained((id *)(v4 + 16));
      if (v21)
      {
        int v22 = objc_loadWeakRetained((id *)(v4 + 16));
        BOOL v23 = (v22[475] & 1) == 0;
      }
      else
      {
        BOOL v23 = 1;
      }

      if (v23)
      {
        if (g_boringssl_log)
        {
          int v25 = (id)g_boringssl_log;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            id v26 = objc_loadWeakRetained((id *)(v4 + 16));
            if (v26)
            {
              uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v4 + 16));
              uint64_t v27 = v2 + 391;
            }
            else
            {
              uint64_t v27 = &unk_1BA179713;
            }
            id v28 = objc_loadWeakRetained((id *)(v4 + 16));
            int v29 = 136447490;
            unsigned int v30 = "boringssl_context_set_min_version";
            __int16 v31 = 1024;
            int v32 = 182;
            __int16 v33 = 2082;
            int v34 = v27;
            __int16 v35 = 2048;
            id v36 = v28;
            __int16 v37 = 1024;
            int v38 = a2;
            __int16 v39 = 1024;
            int v40 = v9;
            _os_log_debug_impl(&dword_1BA0DE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Restricted mode: Provided minimum version (0x%x) was capped to (0x%x).", (uint8_t *)&v29, 0x32u);

            if (v26) {
          }
            }
        }
      }
    }
  }
  else
  {
    LOWORD(v9) = a2;
  }
  if (SSL_set_min_proto_version(*(void *)(v4 + 400), (unsigned __int16)v9))
  {
    uint64_t result = 0;
    *(_WORD *)(v4 + 58) = v9;
    return result;
  }
  id v10 = objc_loadWeakRetained((id *)(v4 + 16));
  if (v10)
  {
    uint64_t v11 = v10;
    char v12 = objc_loadWeakRetained((id *)(v4 + 16));
    char v13 = v12[475];

    if (v13) {
      return 0;
    }
  }
  id v14 = objc_loadWeakRetained((id *)(v4 + 16));
  if (v14)
  {
    BOOL v15 = objc_loadWeakRetained((id *)(v4 + 16));
    BOOL v16 = (v15[475] & 1) == 0;
  }
  else
  {
    BOOL v16 = 1;
  }

  uint64_t result = 0;
  if (v16 && g_boringssl_log)
  {
    uint64_t v24 = (id)g_boringssl_log;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      boringssl_context_set_min_version_cold_1(v4 + 16, v24);
    }

    return 0;
  }
  return result;
}

uint64_t boringssl_config_get_restricted_mode_state()
{
  uint64_t result = os_variant_has_internal_content();
  if (result)
  {
    if (check_and_init_restricted_mode_onceToken != -1) {
      dispatch_once(&check_and_init_restricted_mode_onceToken, &__block_literal_global_256);
    }
    return boringssl_config_restricted_mode_status;
  }
  return result;
}

uint64_t SSL_set_min_proto_version(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(unsigned char **)a1;
  CFStringRef v5 = (__int16 *)(v2 + 10);
  if (a2) {
    return bssl::set_version_bound(v4, v5, a2);
  }
  if (*v4) {
    __int16 v7 = -257;
  }
  else {
    __int16 v7 = 769;
  }
  *CFStringRef v5 = v7;
  return 1;
}

uint64_t bssl::set_version_bound(unsigned char *a1, _WORD *a2, int a3)
{
  if ((a3 - 769) >= 4 && a3 != 65279 && a3 != 65277) {
    goto LABEL_21;
  }
  uint64_t v5 = 8;
  if (*a1) {
    uint64_t v5 = 4;
  }
  uint64_t v6 = (unsigned __int16 *)&bssl::kDTLSVersions;
  if (!*a1) {
    uint64_t v6 = (unsigned __int16 *)&bssl::kTLSVersions;
  }
  uint64_t v7 = v5 - 2;
  do
  {
    int v9 = *v6++;
    int v8 = v9;
    BOOL v10 = v9 == a3 || v7 == 0;
    v7 -= 2;
  }
  while (!v10);
  if (v8 == a3)
  {
    *a2 = a3;
    return 1;
  }
  else
  {
LABEL_21:
    ERR_put_error(16, 0, 234, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_versions.cc", 133);
    return 0;
  }
}

uint64_t boringssl_context_set_cipher_suites(uint64_t a1, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1 || *(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a3)
  {
    uint64_t v5 = a2;
    if (a2)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (v6)
      {
        if (*(void *)(v6 + 408))
        {
          unint64_t v7 = 0;
          uint64_t v8 = 2 * a3;
          uint64_t v9 = a3;
          while (1)
          {
            cipher_by_value = SSL_get_cipher_by_value(v5[v7 / 2]);
            if (cipher_by_value)
            {
              if (SSL_CIPHER_get_auth_nid((uint64_t)cipher_by_value) == 956
                && *(_DWORD *)a1 == -1252936367)
              {
                uint64_t v11 = *(void *)(a1 + 8);
                if (v11)
                {
                  if (*(_WORD *)(v11 + 56) == 772) {
                    break;
                  }
                }
              }
            }
            v7 += 2;
            if (v8 == v7) {
              goto LABEL_14;
            }
          }
          boringssl_context_set_max_version(a1, 0x303u);
LABEL_14:
          bzero(v32, 0x400uLL);
          char v12 = (const char *)boringssl_ciphers_fillout_configuration_string((uint64_t)v5, v9, (uint64_t)v32, 0x400uLL);
          char v13 = *(void **)(v6 + 88);
          if (v13)
          {
            free(v13);
            *(void *)(v6 + 88) = 0;
          }
          if (v12) {
            configuration_string = strndup(v12, 0x400uLL);
          }
          else {
            configuration_string = boringssl_ciphers_create_configuration_string((uint64_t)v5, v9);
          }
          BOOL v16 = configuration_string;
          *(void *)(v6 + 88) = configuration_string;
          if (configuration_string)
          {
            if (*(_DWORD *)a1 != -1252936367) {
              goto LABEL_39;
            }
            uint64_t v17 = *(void *)(a1 + 8);
            if (v17)
            {
              uint64_t v18 = *(ssl_credential_st **)(v17 + 400);
              if (v18)
              {
                if (SSL_set_strict_cipher_list(v18, (uint64_t)v16))
                {
                  uint64_t v4 = 0;
LABEL_41:
                  if (*(_DWORD *)a1 == -1252936367 && (uint64_t v28 = *(void *)(a1 + 8)) != 0 && *(_WORD *)(v28 + 56) == 772)
                  {
                    boringssl_context_set_tls13_ciphersuite_aesgcm_enabled(a1, 0);
                    boringssl_context_set_tls13_ciphersuite_chacha20poly1305_enabled(a1, 0);
                    char v29 = 0;
                    do
                    {
                      int v31 = *v5++;
                      int v30 = v31;
                      if ((v31 - 4865) >= 2)
                      {
                        if (v30 == 4867)
                        {
                          char v29 = 1;
                          boringssl_context_set_tls13_ciphersuite_chacha20poly1305_enabled(a1, 1);
                        }
                      }
                      else
                      {
                        char v29 = 1;
                        boringssl_context_set_tls13_ciphersuite_aesgcm_enabled(a1, 1);
                      }
                      --v9;
                    }
                    while (v9);
                    if ((v29 & 1) == 0)
                    {
                      boringssl_context_set_tls13_ciphersuite_aesgcm_enabled(a1, 1);
                      boringssl_context_set_tls13_ciphersuite_chacha20poly1305_enabled(a1, 1);
                    }
                  }
                  else
                  {
                    boringssl_context_set_tls13_ciphersuite_chacha20poly1305_enabled(a1, 0);
                    boringssl_context_set_tls13_ciphersuite_aesgcm_enabled(a1, 0);
                  }
                  return v4;
                }
                unint64_t v19 = (id *)(v17 + 16);
                id WeakRetained = objc_loadWeakRetained(v19);
                if (!WeakRetained
                  || (id v21 = WeakRetained,
                      int v22 = objc_loadWeakRetained(v19),
                      char v23 = v22[475],
                      v22,
                      v21,
                      (v23 & 1) == 0))
                {
                  id v24 = objc_loadWeakRetained(v19);
                  if (v24)
                  {
                    int v25 = objc_loadWeakRetained(v19);
                    BOOL v26 = (v25[475] & 1) == 0;
                  }
                  else
                  {
                    BOOL v26 = 1;
                  }

                  if (v26)
                  {
                    if (g_boringssl_log)
                    {
                      uint64_t v27 = (id)g_boringssl_log;
                      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
                        boringssl_context_set_cipher_suites_cold_1(v19, v27);
                      }
                    }
                  }
                }
              }
            }
            BOOL v16 = *(char **)(v6 + 88);
            if (v16)
            {
LABEL_39:
              free(v16);
              *(void *)(v6 + 88) = 0;
            }
          }
          uint64_t v4 = 0xFFFFFFFFLL;
          goto LABEL_41;
        }
      }
    }
  }
  return v4;
}

uint64_t SSL_CIPHER_get_auth_nid(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if (v1 <= 7)
  {
    if ((v1 - 1) < 2) {
      return 954;
    }
    if (v1 == 4) {
      return 955;
    }
LABEL_11:
    SSL_CIPHER_get_auth_nid_cold_1();
  }
  if (v1 != 8)
  {
    if (v1 == 16) {
      return 958;
    }
    goto LABEL_11;
  }
  return 956;
}

uint64_t boringssl_context_set_tls13_ciphersuite_aesgcm_enabled(uint64_t result, int a2)
{
  if (*(_DWORD *)result == -1252936367)
  {
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      uint64_t result = *(void *)(v2 + 400);
      if (result)
      {
        if (a2) {
          char v3 = 2;
        }
        else {
          char v3 = 0;
        }
        *(unsigned char *)(v2 + 56std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = *(unsigned char *)(v2 + 560) & 0xFD | v3;
        return SSL_set_tls13_ciphersuite_aesgcm_enabled(result, a2);
      }
    }
  }
  return result;
}

uint64_t SSL_set_tls13_ciphersuite_aesgcm_enabled(uint64_t result, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(*(void *)(result + 120) + 248) = *(unsigned char *)(*(void *)(result + 120) + 248) & 0xFD | v2;
  return result;
}

uint64_t boringssl_context_set_tls13_ciphersuite_chacha20poly1305_enabled(uint64_t result, int a2)
{
  if (*(_DWORD *)result == -1252936367)
  {
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      uint64_t result = *(void *)(v2 + 400);
      if (result)
      {
        if (a2) {
          char v3 = 4;
        }
        else {
          char v3 = 0;
        }
        *(unsigned char *)(v2 + 56std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = *(unsigned char *)(v2 + 560) & 0xFB | v3;
        return SSL_set_tls13_ciphersuite_chacha20poly1305_enabled(result, a2);
      }
    }
  }
  return result;
}

uint64_t SSL_set_tls13_ciphersuite_chacha20poly1305_enabled(uint64_t result, int a2)
{
  if (a2) {
    char v2 = 4;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(*(void *)(result + 120) + 248) = *(unsigned char *)(*(void *)(result + 120) + 248) & 0xFB | v2;
  return result;
}

uint64_t boringssl_ciphers_fillout_configuration_string(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = 0;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v9 = 0;
    char v10 = 0;
    size_t v11 = 0;
    uint64_t v12 = a2 - 1;
    do
    {
      while (1)
      {
        char v13 = boringssl_ciphers_value_to_string(*(unsigned __int16 *)(a1 + 2 * v9));
        if (!v13) {
          break;
        }
        id v14 = v13;
        if (v10)
        {
          if (v11 + 1 >= a4) {
            return 0;
          }
          *(unsigned char *)(a3 + v11++) = 58;
        }
        size_t v15 = strlen(v13);
        size_t v16 = v15 + v11;
        if (v15 + v11 >= a4) {
          return 0;
        }
        strncpy((char *)(a3 + v11), v14, v15);
        char v10 = 1;
        size_t v11 = v16;
        if (v12 == v9++) {
          return a3;
        }
      }
      ++v9;
    }
    while (a2 != v9);
    uint64_t result = a3;
    if (v10) {
      return result;
    }
    if (g_boringssl_log)
    {
      if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
        boringssl_ciphers_fillout_configuration_string_cold_1();
      }
    }
    return 0;
  }
  return result;
}

const char *boringssl_ciphers_value_to_string(int a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  cipher_by_value = (const SSL_CIPHER *)SSL_get_cipher_by_value(a1);
  if (!cipher_by_value)
  {
    uint64_t v4 = g_boringssl_log;
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_INFO))
    {
      int v5 = 136446722;
      uint64_t v6 = "boringssl_ciphers_value_to_string";
      __int16 v7 = 1024;
      int v8 = 31;
      __int16 v9 = 1024;
      int v10 = a1;
      _os_log_impl(&dword_1BA0DE000, v4, OS_LOG_TYPE_INFO, "%{public}s(%d) Failed to get boringssl cipher for ciphersuite 0x%04x", (uint8_t *)&v5, 0x18u);
    }
    return 0;
  }

  return SSL_CIPHER_get_name(cipher_by_value);
}

void *SSL_get_cipher_by_value(int a1)
{
  *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  long long v3 = v1;
  long long v4 = v1;
  LODWORD(v4) = a1 | 0x3000000;
  return bsearch(&v3, bssl::kCiphers, 0x26uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
}

const char *__cdecl SSL_CIPHER_get_name(const SSL_CIPHER *c)
{
  long long v1 = (const char **)kUnknownCipher;
  if (c) {
    long long v1 = (const char **)c;
  }
  return *v1;
}

uint64_t SSL_set_strict_cipher_list(ssl_credential_st *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (!v2) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(v2 + 301);
  if ((v4 & 0x800) != 0)
  {
    int v6 = (v4 >> 12) & 1;
  }
  else
  {
    int v6 = ssl_credential_st::UsesPrivateKey(a1) != 0;
    uint64_t v2 = *((void *)a1 + 1);
  }
  return bssl::ssl_create_cipher_list((bssl::SSLCipherPreferenceList **)(v2 + 24), v6, a2, 1);
}

uint64_t ssl_credential_st::UsesPrivateKey(ssl_credential_st *this)
{
  return 1;
}

BOOL boringssl_context_set_alpn_protocol_list(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  int v6 = v5;
  if (!a1 || *(_DWORD *)a1 != -1252936367) {
    goto LABEL_23;
  }
  BOOL v7 = 0;
  if (!v5) {
    goto LABEL_24;
  }
  int v8 = *(void **)(a1 + 8);
  if (!v8) {
    goto LABEL_24;
  }
  if (!xpc_array_get_count(v5) || !v8[50] || !v8[51])
  {
LABEL_23:
    BOOL v7 = 0;
    goto LABEL_24;
  }
  uint64_t v107 = v8[50];
  char v108 = v8;
  id v9 = v6;
  xpc_object_t xarray = xpc_array_create(0, 0);
  size_t count = xpc_array_get_count(v9);
  if (!count)
  {
    size_t v12 = 0;
LABEL_26:
    BOOL v26 = xarray;
    id v27 = xarray;
    goto LABEL_74;
  }
  size_t v11 = count;
  size_t v12 = 0;
  size_t v13 = 0;
  uint64_t v14 = a3;
  id v109 = v9;
  while (1)
  {
    size_t v15 = xpc_array_get_value(v9, v13);
    if (MEMORY[0x1BA9E61C0]() != MEMORY[0x1E4F145F0])
    {
      if (MEMORY[0x1BA9E61C0](v15) == MEMORY[0x1E4F14568])
      {
        if (xpc_array_get_count(v15) == 2)
        {
          size_t v16 = v12;
          string = xpc_array_get_string(v15, 0);
          uint64_t uint64 = xpc_array_get_uint64(v15, 1uLL);
          if (string)
          {
            uint64_t v19 = uint64;
            size_t v20 = strlen(string);
            size_t v21 = v20;
            if (v20 < 0x100)
            {
              if (v19 == v14)
              {
                size_t v12 = v16 + v20 + 1;
                xpc_array_set_string(xarray, 0xFFFFFFFFFFFFFFFFLL, string);
              }
              else
              {
                size_t v12 = v16;
              }
              id v9 = v109;
              goto LABEL_21;
            }
            unint64_t v52 = (id *)(v108 + 16);
            id WeakRetained = objc_loadWeakRetained((id *)v108 + 2);
            size_t v12 = v16;
            if (WeakRetained)
            {
              int v54 = WeakRetained;
              uint64_t v55 = objc_loadWeakRetained(v52);
              char v56 = v55[475];

              if (v56) {
                goto LABEL_73;
              }
            }
            id v57 = objc_loadWeakRetained(v52);
            if (v57)
            {
              int v58 = objc_loadWeakRetained(v52);
              BOOL v59 = (v58[475] & 1) == 0;
            }
            else
            {
              BOOL v59 = 1;
            }

            if (!v59 || !g_boringssl_log) {
              goto LABEL_73;
            }
            id v68 = (id)g_boringssl_log;
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
            {
              log = v68;
              id v69 = objc_loadWeakRetained(v52);
              if (v69)
              {
                unsigned int v103 = (char *)objc_loadWeakRetained(v52);
                int v70 = v103 + 391;
              }
              else
              {
                int v70 = &unk_1BA179713;
              }
              id v99 = objc_loadWeakRetained(v52);
              id v100 = v99;
              *(_DWORD *)buf = 136447490;
              BOOL v112 = "boringssl_context_copy_validated_alpn_array";
              __int16 v113 = 1024;
              int v114 = 1129;
              __int16 v115 = 2082;
              int v116 = v70;
              __int16 v117 = 2048;
              id v118 = v99;
              __int16 v119 = 2048;
              size_t v120 = v21;
              __int16 v121 = 2082;
              redacted_identity = nw_protocol_boringssl_get_redacted_identity((uint64_t)v100, string);
              id v68 = log;
              _os_log_error_impl(&dword_1BA0DE000, log, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] ALPN protocol exceeds length restrictions (%zu): %{public}s", buf, 0x3Au);

              if (v69) {
              size_t v12 = v16;
              }
            }
          }
          else
          {
            unsigned int v44 = (id *)(v108 + 16);
            id v45 = objc_loadWeakRetained((id *)v108 + 2);
            if (v45)
            {
              int v46 = v45;
              int v47 = objc_loadWeakRetained(v44);
              char v48 = v47[475];

              if (v48) {
                goto LABEL_73;
              }
            }
            id v49 = objc_loadWeakRetained(v44);
            if (v49)
            {
              uint64_t v50 = objc_loadWeakRetained(v44);
              BOOL v51 = (v50[475] & 1) == 0;
            }
            else
            {
              BOOL v51 = 1;
            }

            if (!v51 || !g_boringssl_log) {
              goto LABEL_73;
            }
            id v68 = (id)g_boringssl_log;
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
              boringssl_context_set_alpn_protocol_list_cold_3(v44, v68);
            }
          }
        }
        else
        {
          id v36 = (id *)(v108 + 16);
          id v37 = objc_loadWeakRetained((id *)v108 + 2);
          if (v37)
          {
            int v38 = v37;
            __int16 v39 = objc_loadWeakRetained(v36);
            char v40 = v39[475];

            if (v40) {
              goto LABEL_73;
            }
          }
          id v41 = objc_loadWeakRetained(v36);
          if (v41)
          {
            uint64_t v42 = objc_loadWeakRetained(v36);
            BOOL v43 = (v42[475] & 1) == 0;
          }
          else
          {
            BOOL v43 = 1;
          }

          if (!v43 || !g_boringssl_log) {
            goto LABEL_73;
          }
          id v68 = (id)g_boringssl_log;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
            boringssl_context_set_alpn_protocol_list_cold_4(v36, v15, v68);
          }
        }
      }
      else
      {
        uint64_t v28 = (id *)(v108 + 16);
        id v29 = objc_loadWeakRetained((id *)v108 + 2);
        if (v29)
        {
          int v30 = v29;
          int v31 = objc_loadWeakRetained(v28);
          char v32 = v31[475];

          if (v32) {
            goto LABEL_73;
          }
        }
        id v33 = objc_loadWeakRetained(v28);
        if (v33)
        {
          int v34 = objc_loadWeakRetained(v28);
          BOOL v35 = (v34[475] & 1) == 0;
        }
        else
        {
          BOOL v35 = 1;
        }

        if (!v35 || !g_boringssl_log) {
          goto LABEL_73;
        }
        id v68 = (id)g_boringssl_log;
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
          boringssl_context_set_alpn_protocol_list_cold_5(v28, v15, v68);
        }
      }
LABEL_72:

      goto LABEL_73;
    }
    int v22 = xpc_array_get_string(v9, v13);
    size_t v23 = strlen(v22);
    size_t v24 = v23;
    if (v23 >= 0x100) {
      break;
    }
    v12 += v23 + 1;
    xpc_array_set_string(xarray, 0xFFFFFFFFFFFFFFFFLL, v22);
LABEL_21:

    if (v11 == ++v13) {
      goto LABEL_26;
    }
  }
  uint64_t v60 = (id *)(v108 + 16);
  id v61 = objc_loadWeakRetained((id *)v108 + 2);
  if (!v61
    || (v62 = v61, BOOL v63 = objc_loadWeakRetained(v60),
                   char v64 = v63[475],
                   v63,
                   v62,
                   (v64 & 1) == 0))
  {
    id v65 = objc_loadWeakRetained(v60);
    if (v65)
    {
      unsigned int v66 = objc_loadWeakRetained(v60);
      BOOL v67 = (v66[475] & 1) == 0;
    }
    else
    {
      BOOL v67 = 1;
    }

    if (v67)
    {
      if (g_boringssl_log)
      {
        id v68 = (id)g_boringssl_log;
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          os_log_t logb = (os_log_t)v12;
          id v97 = objc_loadWeakRetained(v60);
          if (v97)
          {
            unsigned int v103 = (char *)objc_loadWeakRetained(v60);
            unsigned int v98 = v103 + 391;
          }
          else
          {
            unsigned int v98 = &unk_1BA179713;
          }
          id v101 = objc_loadWeakRetained(v60);
          id v102 = v101;
          *(_DWORD *)buf = 136447490;
          BOOL v112 = "boringssl_context_copy_validated_alpn_array";
          __int16 v113 = 1024;
          int v114 = 1116;
          __int16 v115 = 2082;
          int v116 = v98;
          __int16 v117 = 2048;
          id v118 = v101;
          __int16 v119 = 2048;
          size_t v120 = v24;
          __int16 v121 = 2082;
          redacted_identity = nw_protocol_boringssl_get_redacted_identity((uint64_t)v102, v22);
          _os_log_error_impl(&dword_1BA0DE000, v68, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] ALPN protocol exceeds length restrictions (%zu): %{public}s", buf, 0x3Au);

          if (v97) {
          size_t v12 = (size_t)logb;
          }
        }
        goto LABEL_72;
      }
    }
  }
LABEL_73:

  id v27 = 0;
  id v9 = v109;
  BOOL v26 = xarray;
LABEL_74:

  if (!v27) {
    goto LABEL_103;
  }
  size_t v71 = xpc_array_get_count(v27);
  if (!v71)
  {
    id v79 = (id *)(v108 + 16);
    id v80 = objc_loadWeakRetained((id *)v108 + 2);
    if (!v80
      || (CFArrayRef v81 = v80,
          unint64_t v82 = objc_loadWeakRetained(v79),
          char v83 = v82[475],
          v82,
          v81,
          (v83 & 1) == 0))
    {
      id v84 = objc_loadWeakRetained(v79);
      if (v84)
      {
        unsigned int v85 = objc_loadWeakRetained(v79);
        BOOL v86 = (v85[475] & 1) == 0;
      }
      else
      {
        BOOL v86 = 1;
      }

      BOOL v7 = 0;
      if (v86 && g_boringssl_log)
      {
        int v95 = (id)g_boringssl_log;
        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR)) {
          boringssl_context_set_alpn_protocol_list_cold_1(v79, v95);
        }

        goto LABEL_103;
      }
      goto LABEL_104;
    }
LABEL_103:
    BOOL v7 = 0;
    goto LABEL_104;
  }
  size_t v72 = v71;
  unsigned int v73 = malloc_type_malloc(v12, 0x4D396D69uLL);
  if (v73)
  {
    char v74 = v73;
    os_log_t loga = (os_log_t)v12;
    size_t v75 = 0;
    uint64_t v76 = 0;
    do
    {
      BOOL v77 = xpc_array_get_string(v27, v75);
      size_t v78 = strlen(v77);
      v74[v76] = v78;
      memcpy(&v74[v76 + 1], v77, v78);
      v76 += v78 + 1;
      ++v75;
    }
    while (v72 != v75);
    if ((v108[556] & 0x10) != 0)
    {
      SSL_set_alpn_select_cb(v107, (uint64_t)boringssl_context_select_alpn_callback, a1);
      BOOL v7 = 1;
    }
    else
    {
      BOOL v7 = SSL_set_alpn_protos(v107, v74, (unint64_t)loga) == 0;
    }
    free(v74);
    v108[557] |= 0x40u;
    objc_storeStrong((id *)v108 + 8, v27);
    goto LABEL_104;
  }
  int v87 = (id *)(v108 + 16);
  id v88 = objc_loadWeakRetained((id *)v108 + 2);
  if (v88)
  {
    xpc_object_t v89 = v88;
    unsigned int v90 = objc_loadWeakRetained(v87);
    char v91 = v90[475];

    if (v91) {
      goto LABEL_103;
    }
  }
  id v92 = objc_loadWeakRetained(v87);
  if (v92)
  {
    uint64_t v93 = objc_loadWeakRetained(v87);
    BOOL v94 = (v93[475] & 1) == 0;
  }
  else
  {
    BOOL v94 = 1;
  }

  BOOL v7 = 0;
  if (v94 && g_boringssl_log)
  {
    uint64_t v96 = (id)g_boringssl_log;
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
      boringssl_context_set_alpn_protocol_list_cold_2(v87, v12, v96);
    }

    goto LABEL_103;
  }
LABEL_104:

LABEL_24:
  return v7;
}

const char *nw_protocol_boringssl_get_redacted_identity(uint64_t a1, const char *a2)
{
  if (!a1) {
    return "redacted";
  }
  uint64_t v2 = "nil";
  if (a2) {
    uint64_t v2 = a2;
  }
  if ((*(unsigned char *)(a1 + 475) & 2) != 0) {
    return "redacted";
  }
  else {
    return v2;
  }
}

uint64_t boringssl_session_set_early_data_enabled(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        uint64_t result = *(void *)(v2 + 400);
        if (result)
        {
          *(unsigned char *)(v2 + 559) = *(unsigned char *)(v2 + 559) & 0xFE | a2;
          return SSL_set_early_data_enabled(result, a2);
        }
      }
    }
  }
  return result;
}

id boringssl_helper_xpc_array_union(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  id v6 = 0;
  if (v3 && v4)
  {
    uint64_t v10 = 0;
    size_t v11 = &v10;
    uint64_t v12 = 0x3032000000;
    size_t v13 = __Block_byref_object_copy__1;
    uint64_t v14 = __Block_byref_object_dispose__1;
    id v15 = (id)0xAAAAAAAAAAAAAAAALL;
    id v15 = xpc_array_create(0, 0);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __boringssl_helper_xpc_array_union_block_invoke;
    applier[3] = &unk_1E61F39A8;
    applier[4] = &v10;
    xpc_array_apply(v3, applier);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __boringssl_helper_xpc_array_union_block_invoke_2;
    _OWORD v8[3] = &unk_1E61F39A8;
    _OWORD v8[4] = &v10;
    xpc_array_apply(v5, v8);
    id v6 = (id)v11[5];
    _Block_object_dispose(&v10, 8);
  }

  return v6;
}

void sub_1BA0FA694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t boringssl_context_set_verify_mode(uint64_t a1, int a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3 || !*(void *)(v3 + 408)) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned char *)(v3 + 556) & 0x10) != 0)
  {
    if (a2 == 3)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
      if (WeakRetained)
      {
        size_t v13 = WeakRetained;
        uint64_t v14 = objc_loadWeakRetained((id *)(v3 + 16));
        char v15 = v14[475];

        if (v15) {
          goto LABEL_51;
        }
      }
      id v16 = objc_loadWeakRetained((id *)(v3 + 16));
      if (v16)
      {
        uint64_t v17 = objc_loadWeakRetained((id *)(v3 + 16));
        BOOL v18 = (v17[475] & 1) == 0;
      }
      else
      {
        BOOL v18 = 1;
      }

      if (!v18 || !g_boringssl_log) {
        goto LABEL_51;
      }
      BOOL v26 = (id)g_boringssl_log;
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_50;
      }
      id v27 = objc_loadWeakRetained((id *)(v3 + 16));
      if (v27)
      {
        uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v3 + 16));
        uint64_t v28 = v2 + 391;
      }
      else
      {
        uint64_t v28 = &unk_1BA179713;
      }
      id v31 = objc_loadWeakRetained((id *)(v3 + 16));
      int v34 = 136446978;
      BOOL v35 = "boringssl_context_set_verify_mode";
      __int16 v36 = 1024;
      int v37 = 593;
      __int16 v38 = 2082;
      __int16 v39 = v28;
      __int16 v40 = 2048;
      id v41 = v31;
      char v32 = "%{public}s(%d) %{public}s[%p] Requiring client cert";
    }
    else if (a2 == 1)
    {
      id v19 = objc_loadWeakRetained((id *)(v3 + 16));
      if (v19)
      {
        size_t v20 = v19;
        size_t v21 = objc_loadWeakRetained((id *)(v3 + 16));
        char v22 = v21[475];

        if (v22) {
          goto LABEL_51;
        }
      }
      id v23 = objc_loadWeakRetained((id *)(v3 + 16));
      if (v23)
      {
        size_t v24 = objc_loadWeakRetained((id *)(v3 + 16));
        BOOL v25 = (v24[475] & 1) == 0;
      }
      else
      {
        BOOL v25 = 1;
      }

      if (!v25 || !g_boringssl_log) {
        goto LABEL_51;
      }
      BOOL v26 = (id)g_boringssl_log;
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_50;
      }
      id v27 = objc_loadWeakRetained((id *)(v3 + 16));
      if (v27)
      {
        uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v3 + 16));
        id v29 = v2 + 391;
      }
      else
      {
        id v29 = &unk_1BA179713;
      }
      id v31 = objc_loadWeakRetained((id *)(v3 + 16));
      int v34 = 136446978;
      BOOL v35 = "boringssl_context_set_verify_mode";
      __int16 v36 = 1024;
      int v37 = 597;
      __int16 v38 = 2082;
      __int16 v39 = v29;
      __int16 v40 = 2048;
      id v41 = v31;
      char v32 = "%{public}s(%d) %{public}s[%p] Will request optional client cert";
    }
    else
    {
      if (a2) {
        goto LABEL_51;
      }
      id v5 = objc_loadWeakRetained((id *)(v3 + 16));
      if (v5)
      {
        id v6 = v5;
        BOOL v7 = (unsigned __int8 *)objc_loadWeakRetained((id *)(v3 + 16));
        uint64_t v2 = (char *)v7[475];

        if (v2) {
          goto LABEL_51;
        }
      }
      id v8 = objc_loadWeakRetained((id *)(v3 + 16));
      if (v8)
      {
        id v9 = objc_loadWeakRetained((id *)(v3 + 16));
        BOOL v10 = (v9[475] & 1) == 0;
      }
      else
      {
        BOOL v10 = 1;
      }

      if (!v10 || !g_boringssl_log) {
        goto LABEL_51;
      }
      BOOL v26 = (id)g_boringssl_log;
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_50;
      }
      id v27 = objc_loadWeakRetained((id *)(v3 + 16));
      if (v27)
      {
        uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v3 + 16));
        int v30 = v2 + 391;
      }
      else
      {
        int v30 = &unk_1BA179713;
      }
      id v31 = objc_loadWeakRetained((id *)(v3 + 16));
      int v34 = 136446978;
      BOOL v35 = "boringssl_context_set_verify_mode";
      __int16 v36 = 1024;
      int v37 = 589;
      __int16 v38 = 2082;
      __int16 v39 = v30;
      __int16 v40 = 2048;
      id v41 = v31;
      char v32 = "%{public}s(%d) %{public}s[%p] Not requesting client cert";
    }
    _os_log_impl(&dword_1BA0DE000, v26, OS_LOG_TYPE_DEFAULT, v32, (uint8_t *)&v34, 0x26u);

    if (v27) {
LABEL_50:
    }
  }
LABEL_51:
  uint64_t v33 = *(void *)(v3 + 400);
  if (v33) {
    SSL_set_custom_verify(v33, a2, (uint64_t)boringssl_context_certificate_verify_callback);
  }
  else {
    SSL_CTX_set_custom_verify(*(void *)(v3 + 408), a2, (uint64_t)boringssl_context_certificate_verify_callback);
  }
  return 0;
}

BOOL boringssl_context_set_ticket_request(BOOL result, char a2, char a3)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v3 = *(void *)(result + 8)) != 0)
    {
      uint64_t v4 = *(void *)(v3 + 400);
      if (v4) {
        int v5 = SSL_use_ticket_request(v4, a2, a3);
      }
      else {
        int v5 = SSL_CTX_use_ticket_request(*(void *)(v3 + 408), a2, a3);
      }
      return v5 == 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_set_session_ticket_enabled(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(v2 + 400);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    SSL_clear_options(v3, 0x4000);
    char v4 = 16;
  }
  else
  {
    SSL_set_options(v3, 0x4000u);
    char v4 = 0;
  }
  uint64_t result = 0;
  *(unsigned char *)(v2 + 557) = *(unsigned char *)(v2 + 557) & 0xEF | v4;
  return result;
}

uint64_t boringssl_context_set_sct_enable(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(v2 + 408);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = *(void *)(v2 + 400);
  if (a2) {
    char v6 = 4;
  }
  else {
    char v6 = 0;
  }
  *(unsigned char *)(v2 + 556) = *(unsigned char *)(v2 + 556) & 0xFB | v6;
  if (a2)
  {
    if (v5) {
      SSL_enable_signed_cert_timestamps(v5);
    }
    else {
      SSL_CTX_enable_signed_cert_timestamps(v3);
    }
    return 0;
  }
  return result;
}

uint64_t boringssl_context_set_resumption(uint64_t a1, char a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 0xFFFFFFFFLL;
  }
  if (v2)
  {
    if ((a2 & 1) == 0)
    {
      SSL_CTX_set_session_cache_mode(*(void *)(v2 + 408), 0);
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_set_renegotiation(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(bssl **)(v2 + 400);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 0;
  }
  SSL_set_renegotiate_mode(v3, (ssl_st *)v4);
  return 0;
}

void bssl::ssl_maybe_shed_handshake_config(bssl *this, ssl_st *a2)
{
  if (!*(void *)(*((void *)this + 6) + 280))
  {
    uint64_t v3 = (BUF_MEM ***)((char *)this + 8);
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      if ((*(_WORD *)(v2 + 301) & 0x80) != 0 && !bssl::ssl_can_renegotiate(this, a2))
      {
        std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100](v3, 0);
      }
    }
  }
}

uint64_t boringssl_context_set_ocsp_enable(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(v2 + 400);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    SSL_enable_ocsp_stapling(v3);
    char v4 = 8;
  }
  else
  {
    char v4 = 0;
  }
  uint64_t result = 0;
  *(unsigned char *)(v2 + 556) = *(unsigned char *)(v2 + 556) & 0xF7 | v4;
  return result;
}

uint64_t boringssl_context_set_max_version(uint64_t a1, unsigned __int16 a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(v2 + 400);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (SSL_set_max_proto_version(v3, a2))
  {
    uint64_t result = 0;
    *(_WORD *)(v2 + 56) = a2;
    return result;
  }
  char v6 = (id *)(v2 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  if (WeakRetained)
  {
    id v8 = WeakRetained;
    id v9 = objc_loadWeakRetained(v6);
    char v10 = v9[475];

    if (v10) {
      return 0;
    }
  }
  id v11 = objc_loadWeakRetained(v6);
  if (v11)
  {
    uint64_t v12 = objc_loadWeakRetained(v6);
    BOOL v13 = (v12[475] & 1) == 0;
  }
  else
  {
    BOOL v13 = 1;
  }

  uint64_t result = 0;
  if (v13 && g_boringssl_log)
  {
    uint64_t v14 = (id)g_boringssl_log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      boringssl_context_set_max_version_cold_1(v6, v14);
    }

    return 0;
  }
  return result;
}

uint64_t boringssl_context_set_enforce_ev(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (a2) {
          char v3 = 2;
        }
        else {
          char v3 = 0;
        }
        *(unsigned char *)(v2 + 559) = *(unsigned char *)(v2 + 559) & 0xFD | v3;
      }
    }
  }
  return result;
}

uint64_t boringssl_context_set_ech_grease_enabled(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        uint64_t result = *(void *)(v2 + 400);
        if (result)
        {
          if (a2) {
            char v3 = 8;
          }
          else {
            char v3 = 0;
          }
          *(unsigned char *)(v2 + 56std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = *(unsigned char *)(v2 + 560) & 0xF7 | v3;
          return SSL_set_enable_ech_grease(result, a2);
        }
      }
    }
  }
  return result;
}

void boringssl_context_set_ciphersuites_from_list(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = v3;
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      if (v3)
      {
        if (*(void *)(a1 + 8))
        {
          size_t count = xpc_array_get_count(v3);
          char v6 = (unsigned __int16 *)malloc_type_malloc(2 * count, 0x1000040BDFB0063uLL);
          if (v6)
          {
            BOOL v7 = v6;
            v8[0] = MEMORY[0x1E4F143A8];
            v8[1] = 3221225472;
            v8[2] = __boringssl_context_set_ciphersuites_from_list_block_invoke;
            _OWORD v8[3] = &unk_1E61FD5F8;
            id v9 = v4;
            char v10 = v7;
            xpc_array_apply(v9, v8);
            if (count) {
              boringssl_context_set_cipher_suites(a1, v7, count);
            }
            free(v7);
          }
        }
      }
    }
  }
}

uint64_t boringssl_context_set_certificate_compression(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t v2 = *(void *)(result + 8);
      uint64_t result = v2 != 0;
      if (v2) {
        BOOL v3 = a2 == 0;
      }
      else {
        BOOL v3 = 1;
      }
      if (!v3)
      {
        uint64_t result = *(void *)(v2 + 408);
        if (result)
        {
          *(unsigned char *)(v2 + 559) |= 0x20u;
          return SSL_CTX_add_cert_compression_alg(result, 1, (uint64_t)boringssl_context_zlib_compress_data, (uint64_t)boringssl_context_zlib_uncompress_data) == 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void boringssl_context_set_ats_minimum_signature_algorithm(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (!WeakRetained
          || (char v6 = WeakRetained,
              BOOL v7 = (unsigned __int8 *)objc_loadWeakRetained((id *)(v3 + 16)),
              uint64_t v2 = (char *)v7[475],
              v7,
              v6,
              (v2 & 1) == 0))
        {
          id v8 = objc_loadWeakRetained((id *)(v3 + 16));
          if (v8)
          {
            id v9 = objc_loadWeakRetained((id *)(v3 + 16));
            BOOL v10 = (v9[475] & 1) == 0;
          }
          else
          {
            BOOL v10 = 1;
          }

          if (v10)
          {
            if (g_boringssl_log)
            {
              id v11 = (id)g_boringssl_log;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                id v12 = objc_loadWeakRetained((id *)(v3 + 16));
                if (v12)
                {
                  uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v3 + 16));
                  BOOL v13 = v2 + 391;
                }
                else
                {
                  BOOL v13 = &unk_1BA179713;
                }
                id v14 = objc_loadWeakRetained((id *)(v3 + 16));
                int v15 = 136447234;
                id v16 = "boringssl_context_set_ats_minimum_signature_algorithm";
                __int16 v17 = 1024;
                int v18 = 680;
                __int16 v19 = 2082;
                size_t v20 = v13;
                __int16 v21 = 2048;
                id v22 = v14;
                __int16 v23 = 1026;
                int v24 = a2;
                _os_log_impl(&dword_1BA0DE000, v11, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] set %{public}d", (uint8_t *)&v15, 0x2Cu);

                if (v12) {
              }
                }
            }
          }
        }
        *(_DWORD *)(v3 + 544) = a2;
      }
    }
  }
}

void boringssl_context_set_ats_minimum_rsa_key_size(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (!WeakRetained
          || (char v6 = WeakRetained,
              BOOL v7 = (unsigned __int8 *)objc_loadWeakRetained((id *)(v3 + 16)),
              uint64_t v2 = (char *)v7[475],
              v7,
              v6,
              (v2 & 1) == 0))
        {
          id v8 = objc_loadWeakRetained((id *)(v3 + 16));
          if (v8)
          {
            id v9 = objc_loadWeakRetained((id *)(v3 + 16));
            BOOL v10 = (v9[475] & 1) == 0;
          }
          else
          {
            BOOL v10 = 1;
          }

          if (v10)
          {
            if (g_boringssl_log)
            {
              id v11 = (id)g_boringssl_log;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                id v12 = objc_loadWeakRetained((id *)(v3 + 16));
                if (v12)
                {
                  uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v3 + 16));
                  BOOL v13 = v2 + 391;
                }
                else
                {
                  BOOL v13 = &unk_1BA179713;
                }
                id v14 = objc_loadWeakRetained((id *)(v3 + 16));
                int v15 = 136447234;
                id v16 = "boringssl_context_set_ats_minimum_rsa_key_size";
                __int16 v17 = 1024;
                int v18 = 661;
                __int16 v19 = 2082;
                size_t v20 = v13;
                __int16 v21 = 2048;
                id v22 = v14;
                __int16 v23 = 2050;
                uint64_t v24 = a2;
                _os_log_impl(&dword_1BA0DE000, v11, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] set %{public}zu", (uint8_t *)&v15, 0x30u);

                if (v12) {
              }
                }
            }
          }
        }
        *(void *)(v3 + 528) = a2;
      }
    }
  }
}

void boringssl_context_set_ats_minimum_ecdsa_key_size(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (!WeakRetained
          || (char v6 = WeakRetained,
              BOOL v7 = (unsigned __int8 *)objc_loadWeakRetained((id *)(v3 + 16)),
              uint64_t v2 = (char *)v7[475],
              v7,
              v6,
              (v2 & 1) == 0))
        {
          id v8 = objc_loadWeakRetained((id *)(v3 + 16));
          if (v8)
          {
            id v9 = objc_loadWeakRetained((id *)(v3 + 16));
            BOOL v10 = (v9[475] & 1) == 0;
          }
          else
          {
            BOOL v10 = 1;
          }

          if (v10)
          {
            if (g_boringssl_log)
            {
              id v11 = (id)g_boringssl_log;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                id v12 = objc_loadWeakRetained((id *)(v3 + 16));
                if (v12)
                {
                  uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v3 + 16));
                  BOOL v13 = v2 + 391;
                }
                else
                {
                  BOOL v13 = &unk_1BA179713;
                }
                id v14 = objc_loadWeakRetained((id *)(v3 + 16));
                int v15 = 136447234;
                id v16 = "boringssl_context_set_ats_minimum_ecdsa_key_size";
                __int16 v17 = 1024;
                int v18 = 670;
                __int16 v19 = 2082;
                size_t v20 = v13;
                __int16 v21 = 2048;
                id v22 = v14;
                __int16 v23 = 2050;
                uint64_t v24 = a2;
                _os_log_impl(&dword_1BA0DE000, v11, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] set %{public}zu", (uint8_t *)&v15, 0x30u);

                if (v12) {
              }
                }
            }
          }
        }
        *(void *)(v3 + 536) = a2;
      }
    }
  }
}

void boringssl_context_set_ats_enforced(uint64_t a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (!WeakRetained
          || (char v6 = WeakRetained,
              BOOL v7 = (unsigned __int8 *)objc_loadWeakRetained((id *)(v3 + 16)),
              uint64_t v2 = (char *)v7[475],
              v7,
              v6,
              (v2 & 1) == 0))
        {
          id v8 = objc_loadWeakRetained((id *)(v3 + 16));
          if (v8)
          {
            id v9 = objc_loadWeakRetained((id *)(v3 + 16));
            BOOL v10 = (v9[475] & 1) == 0;
          }
          else
          {
            BOOL v10 = 1;
          }

          if (v10)
          {
            if (g_boringssl_log)
            {
              id v11 = (id)g_boringssl_log;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                id v12 = objc_loadWeakRetained((id *)(v3 + 16));
                if (v12)
                {
                  uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v3 + 16));
                  BOOL v13 = v2 + 391;
                }
                else
                {
                  BOOL v13 = &unk_1BA179713;
                }
                id v14 = objc_loadWeakRetained((id *)(v3 + 16));
                int v15 = v14;
                int v18 = 136447234;
                __int16 v19 = "boringssl_context_set_ats_enforced";
                id v16 = "false";
                __int16 v20 = 1024;
                int v21 = 652;
                if (a2) {
                  id v16 = "true";
                }
                __int16 v22 = 2082;
                __int16 v23 = v13;
                __int16 v24 = 2048;
                id v25 = v14;
                __int16 v26 = 2082;
                id v27 = v16;
                _os_log_impl(&dword_1BA0DE000, v11, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] set %{public}s", (uint8_t *)&v18, 0x30u);

                if (v12) {
              }
                }
            }
          }
        }
        if (a2) {
          char v17 = 8;
        }
        else {
          char v17 = 0;
        }
        *(unsigned char *)(v3 + 559) = *(unsigned char *)(v3 + 559) & 0xF7 | v17;
      }
    }
  }
}

uint64_t boringssl_context_set_GREASE_enabled(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        uint64_t result = *(void *)(v2 + 408);
        if (result)
        {
          *(unsigned char *)(v2 + 56std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = *(unsigned char *)(v2 + 560) & 0xFE | a2;
          return SSL_CTX_set_grease_enabled(result, a2);
        }
      }
    }
  }
  return result;
}

uint64_t boringssl_config_get_sct_enabled()
{
  return 1;
}

uint64_t boringssl_config_get_renegotiation_enabled()
{
  return 1;
}

uint64_t boringssl_config_get_ocsp_enabled()
{
  return 1;
}

void *boringssl_ciphers_copy_supported_list_for_groups(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  *a3 = 0;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable)
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_ciphers_copy_supported_list_for_groups_cold_1();
    }
    return 0;
  }
  char v6 = Mutable;
  if (a2)
  {
    uint64_t v7 = 0;
    do
    {
      unint64_t v17 = 0;
      uint64_t v8 = sec_protocol_helper_ciphersuite_group_to_ciphersuite_list();
      if (v17)
      {
        uint64_t v9 = v8;
        for (unint64_t i = 0; i < v17; ++i)
        {
          *(_WORD *)byteunsigned int s = -21846;
          *(_WORD *)byteunsigned int s = *(_WORD *)(v9 + 2 * i);
          CFDataAppendBytes(v6, bytes, 2);
        }
      }
      ++v7;
    }
    while (v7 != a2);
  }
  unint64_t Length = CFDataGetLength(v6);
  id v12 = malloc_type_malloc(Length & 0xFFFFFFFFFFFFFFFELL, 0xA711486EuLL);
  if (!v12)
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_ciphers_copy_supported_list_for_groups_cold_2();
    }
    CFRelease(v6);
    return 0;
  }
  BOOL v13 = v12;
  BytePtr = CFDataGetBytePtr(v6);
  memcpy(v13, BytePtr, Length & 0xFFFFFFFFFFFFFFFELL);
  *a3 = Length >> 1;
  CFRelease(v6);
  return v13;
}

uint64_t SSL_use_ticket_request(uint64_t a1, char a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  *(unsigned char *)(v3 + 216) = a2;
  *(unsigned char *)(v3 + 217) = a3;
  return 1;
}

void SSL_set_renegotiate_mode(bssl *this, ssl_st *a2)
{
  *((_DWORD *)this + 44) = a2;
  bssl::ssl_maybe_shed_handshake_config(this, a2);
}

uint64_t SSL_set_max_proto_version(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  char v4 = *(unsigned char **)a1;
  uint64_t v5 = (__int16 *)(v2 + 8);
  if (a2) {
    return bssl::set_version_bound(v4, v5, a2);
  }
  if (*v4) {
    __int16 v7 = -259;
  }
  else {
    __int16 v7 = 772;
  }
  *uint64_t v5 = v7;
  return 1;
}

int SSL_set_ex_data(SSL *ssl, int idx, void *data)
{
  return CRYPTO_set_ex_data((CRYPTO_EX_DATA *)&ssl->d1, idx, data);
}

uint64_t SSL_set_enable_ech_grease(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2) {
    *(_WORD *)(v2 + 301) = *(_WORD *)(v2 + 301) & 0xFFFE | (a2 != 0);
  }
  return result;
}

uint64_t SSL_set_early_data_enabled(uint64_t result, int a2)
{
  *(unsigned char *)(result + 18std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = *(unsigned char *)(result + 180) & 0xFB | (4 * (a2 != 0));
  return result;
}

uint64_t SSL_set_custom_verify(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3)
  {
    *(unsigned char *)(v3 + 30std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = a2;
    *(void *)(v3 + 48) = a3;
  }
  return result;
}

void SSL_set_connect_state(SSL *s)
{
  BYTE4(s->param) &= ~1u;
  *(void *)&s->rwstate = bssl::ssl_client_handshake;
}

uint64_t SSL_set_cert_cb(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 32);
    *(void *)(v4 + 64) = a2;
    *(void *)(v4 + 72) = a3;
  }
  return result;
}

uint64_t SSL_enable_signed_cert_timestamps(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1) {
    *(_WORD *)(v1 + 301) |= 2u;
  }
  return result;
}

uint64_t SSL_enable_ocsp_stapling(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1) {
    *(_WORD *)(v1 + 301) |= 4u;
  }
  return result;
}

uint64_t SSL_CTX_set_grease_enabled(uint64_t result, int a2)
{
  *(_WORD *)(result + 832) = *(_WORD *)(result + 832) & 0xFFDF | (32 * (a2 != 0));
  return result;
}

uint64_t SSL_set_options(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(_DWORD *)(a1 + 144) | a2;
  *(_DWORD *)(a1 + 144) = v2;
  return v2;
}

uint64_t SSL_clear_options(uint64_t a1, int a2)
{
  uint64_t v2 = *(_DWORD *)(a1 + 144) & ~a2;
  *(_DWORD *)(a1 + 144) = v2;
  return v2;
}

uint64_t SSL_set_quic_use_legacy_codepoint(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2) {
    *(_WORD *)(v2 + 301) = *(_WORD *)(v2 + 301) & 0xFDFF | ((a2 != 0) << 9);
  }
  return result;
}

uint64_t __boringssl_session_cache_pop_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (a2) {
    sec_array_append();
  }
  else {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }

  return 1;
}

xpc_object_t boringssl_metrics_create_connection_event(SSL *a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if (a1->version != -1252936367) {
    return 0;
  }
  methounsigned int d = a1->method;
  if (!method) {
    return 0;
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3)
  {
    uint64_t v4 = (char *)TLS_METRIC_DEFAULT_EMPTY_STRING;
    if (boringssl_session_get_peer_public_key((uint64_t)a1))
    {
      unint64_t v5 = SecKeyGetAlgorithmId() - 1;
      if (v5 <= 2) {
        uint64_t v4 = off_1E61F3B68[v5];
      }
    }
    uint64_t negotiated_group = boringssl_session_get_negotiated_group((uint64_t)a1);
    uint64_t v42 = 0;
    uint64_t negotiated_protocol = boringssl_session_get_negotiated_protocol((uint64_t)a1, &v42);
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    *(_OWORD *)string = 0u;
    long long v44 = 0u;
    if (!negotiated_protocol) {
      strlen((const char *)TLS_METRIC_DEFAULT_EMPTY_STRING);
    }
    __memcpy_chk();
    signed int v9 = boringssl_session_ticket_lifetime_hint(a1);
    uint64_t v10 = 0;
    while (1)
    {
      int v11 = *(_DWORD *)&lifetime_buckets[v10];
      if (v11 <= v9 && *(_DWORD *)&lifetime_buckets[v10 + 4] > v9) {
        break;
      }
      v10 += 4;
      if (v10 == 20)
      {
        int v11 = 108000;
        break;
      }
    }
    boringssl_metrics_log_configuration_data((uint64_t)a1, v3);
    boringssl_metrics_log_connection_data((uint64_t)a1, v3);
    id v12 = (const char *)TLS_METRIC_CIPHERSUITE;
    unsigned int negotiated_ciphersuite = boringssl_session_get_negotiated_ciphersuite((uint64_t)a1);
    xpc_dictionary_set_uint64(v3, v12, negotiated_ciphersuite);
    unsigned int negotiated_protocol_version = boringssl_session_get_negotiated_protocol_version(a1);
    xpc_dictionary_set_uint64(v3, (const char *)TLS_METRIC_PROTOCOL_VERSION, negotiated_protocol_version);
    xpc_dictionary_set_uint64(v3, (const char *)TLS_METRIC_TICKET_LIFETIME, v11);
    int v15 = (const char *)TLS_METRIC_HANDSHAKE_TIME;
    handshake_time_munsigned int s = boringssl_session_get_handshake_time_ms((uint64_t)a1);
    xpc_dictionary_set_uint64(v3, v15, handshake_time_ms);
    unint64_t v17 = (const char *)TLS_METRIC_SIGNATURE_ALGORITHM;
    unsigned int peer_signature_algorithm = boringssl_session_get_peer_signature_algorithm((uint64_t)a1);
    xpc_dictionary_set_uint64(v3, v17, peer_signature_algorithm);
    if (negotiated_group)
    {
      __int16 v19 = v3;
      __int16 v20 = (const char *)negotiated_group;
    }
    else
    {
      __int16 v20 = (const char *)TLS_METRIC_DEFAULT_EMPTY_STRING;
      __int16 v19 = v3;
    }
    xpc_dictionary_set_string(v19, (const char *)TLS_METRIC_GROUP_NAME, v20);
    int has_internal_content = os_variant_has_internal_content();
    if (negotiated_protocol_version - 769 <= 1 && has_internal_content)
    {
      server_name = boringssl_session_get_server_name(a1);
      if (server_name) {
        __int16 v23 = (const char *)server_name;
      }
      else {
        __int16 v23 = (const char *)TLS_METRIC_DEFAULT_EMPTY_STRING;
      }
      xpc_dictionary_set_string(v3, (const char *)TLS_METRIC_SERVER_NAME, v23);
    }
    if (v4)
    {
      __int16 v24 = v3;
      id v25 = v4;
    }
    else
    {
      id v25 = (const char *)TLS_METRIC_DEFAULT_EMPTY_STRING;
      __int16 v24 = v3;
    }
    xpc_dictionary_set_string(v24, (const char *)TLS_METRIC_PEER_PUBLIC_KEY_TYPE, v25);
    xpc_dictionary_set_string(v3, (const char *)TLS_METRIC_NEGOTIATED_PROTOCOL, string);
    __int16 v26 = (const char *)TLS_METRIC_UNKNOWN_NEGOTIATED_PROTOCOL;
    BOOL is_unknown = boringssl_context_negotiated_protocol_is_unknown((uint64_t)a1, string);
    xpc_dictionary_set_BOOL(v3, v26, is_unknown);
    xpc_dictionary_set_BOOL(v3, (const char *)TLS_METRIC_FALSE_START_USED, BYTE5(method[2].ssl_renegotiate_check) & 1);
    uint64_t v28 = (const char *)TLS_METRIC_TICKET_RECEIVED;
    unsigned __int8 v29 = boringssl_session_has_session_ticket(a1, 0);
    xpc_dictionary_set_BOOL(v3, v28, v29);
    int v30 = (const char *)TLS_METRIC_SESSION_RENEWED;
    unsigned __int8 v31 = boringssl_session_was_renewed(a1, 0);
    xpc_dictionary_set_BOOL(v3, v30, v31);
    char v32 = (const char *)TLS_METRIC_ALPN_USED;
    BOOL v33 = boringssl_session_get_negotiated_protocol((uint64_t)a1, 0) != 0;
    xpc_dictionary_set_BOOL(v3, v32, v33);
    int v34 = (const char *)TLS_METRIC_OCSP_RECEIVED;
    ocsp_response_receiveunsigned int d = boringssl_session_get_ocsp_response_received((uint64_t)a1);
    xpc_dictionary_set_BOOL(v3, v34, ocsp_response_received);
    __int16 v36 = (const char *)TLS_METRIC_SCT_RECEIVED;
    sct_receiveunsigned int d = boringssl_session_get_sct_received((uint64_t)a1);
    xpc_dictionary_set_BOOL(v3, v36, sct_received);
    xpc_dictionary_set_BOOL(v3, (const char *)TLS_METRIC_FALLBACK_ATTEMPTED, (BYTE4(method[2].ssl_renegotiate_check) & 0x40) != 0);
    xpc_dictionary_set_BOOL(v3, (const char *)TLS_METRIC_HANDSHAKE_CANCELLED, (BYTE4(method[2].ssl_renegotiate_check) & 2) != 0);
    xpc_dictionary_set_BOOL(v3, (const char *)TLS_METRIC_CERTIFICATE_REQUESTED, (BYTE6(method[2].ssl_renegotiate_check) & 0x10) != 0);
    xpc_dictionary_set_BOOL(v3, (const char *)TLS_METRIC_CERTIFICATE_COMPRESSION_ENABLED, (HIBYTE(method[2].ssl_renegotiate_check) & 0x20) != 0);
    xpc_dictionary_set_BOOL(v3, (const char *)TLS_METRIC_CERTIFICATE_COMPRESSION_USED, (HIBYTE(method[2].ssl_renegotiate_check) & 0x40) != 0);
    xpc_dictionary_set_uint64(v3, (const char *)TLS_METRIC_CERTIFICATE_COMPRESSION_ALGORITHM, LOWORD(method[1].ssl_read_bytes));
    __int16 v38 = (const char *)TLS_METRIC_EXTENDED_MASTER_SECRET_NEGOTIATED;
    ems_useunsigned int d = boringssl_session_get_ems_used((bssl *)a1, v39);
    xpc_dictionary_set_uint64(v3, v38, ems_used);
    xpc_dictionary_set_uuid(v3, (const char *)TLS_METRIC_CONNECTION_ID, (const unsigned __int8 *)&method[1].ssl_clear + 4);
    id v41 = v3;
  }
  else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
  {
    boringssl_metrics_create_connection_event_cold_1();
  }

  return v3;
}

BOOL __boringssl_session_update_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return a2 != 0;
  }
  uint64_t v4 = *(void **)(a2 + 88);
  *(void *)(a2 + 88) = 0;

  unint64_t v5 = *(void **)(a2 + 104);
  *(void *)(a2 + 104) = 0;

  id v6 = *(void **)(a2 + 136);
  *(void *)(a2 + 136) = 0;

  __int16 v7 = *(void **)(a2 + 144);
  *(void *)(a2 + 144) = 0;

  uint64_t v8 = *(void **)(a2 + 152);
  *(void *)(a2 + 152) = 0;

  signed int v9 = *(void **)(a2 + 168);
  *(void *)(a2 + 168) = 0;

  uint64_t v10 = *(void **)(a2 + 160);
  *(void *)(a2 + 16std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0;

  int v11 = *(void **)(a2 + 80);
  *(void *)(a2 + 8std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0;

  id v12 = *(void **)(a2 + 40);
  if (v12)
  {
    free(v12);
    *(void *)(a2 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0;
  }
  BOOL v13 = *(void **)(a2 + 176);
  if (v13)
  {
    free(v13);
    *(void *)(a2 + 176) = 0;
  }
  id v14 = *(void **)(a2 + 48);
  if (v14)
  {
    free(v14);
    *(void *)(a2 + 48) = 0;
  }
  *(_WORD *)(a2 + 32) = (unsigned __int16)boringssl_session_get_negotiated_protocol_version(*(const SSL **)(a1 + 40));
  *(_WORD *)(a2 + 34) = boringssl_session_get_negotiated_ciphersuite(*(void *)(a1 + 40));
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v84 = 0u;
  uint64_t v80 = 0;
  if (boringssl_session_get_negotiated_protocol(*(void *)(a1 + 40), &v80))
  {
    __memcpy_chk();
    *(void *)(a2 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = strdup(__s1);
  }
  uint64_t v15 = sec_array_create();
  id v16 = *(void **)(a2 + 136);
  *(void *)(a2 + 136) = v15;

  dispatch_data_t v17 = boringssl_context_copy_ocsp_response(*(void *)(a1 + 32));
  sec_array_append();
  uint64_t v18 = *(void *)(a1 + 32);
  if (!*(void *)(v18 + 368))
  {
    CFArrayRef v19 = *(void *)(v18 + 352)
        ? (const __CFArray *)CFRetain(*(CFTypeRef *)(v18 + 352))
        : boringssl_helper_copy_certificates_from_session((void *)v18, *(const SSL **)(v18 + 400));
    CFArrayRef v20 = v19;
    if (v19)
    {
      uint64_t v21 = sec_array_create();
      __int16 v22 = *(void **)(a2 + 88);
      *(void *)(a2 + 88) = v21;

      if (CFArrayGetCount(v20) >= 1)
      {
        CFIndex v23 = 0;
        do
        {
          ValueAtIndex = (__SecCertificate *)CFArrayGetValueAtIndex(v20, v23);
          if (ValueAtIndex)
          {
            sec_certificate_t v25 = sec_certificate_create(ValueAtIndex);
            if (v25) {
              sec_array_append();
            }
          }
          ++v23;
        }
        while (v23 < CFArrayGetCount(v20));
      }
      CFRelease(v20);
    }
  }
  uint64_t v26 = *(void *)(a1 + 40);
  if (v26)
  {
    if (*(_DWORD *)v26 == -1252936367)
    {
      uint64_t v27 = *(void *)(v26 + 8);
      if (v27)
      {
        if (*(void *)(v27 + 344))
        {
          CFDataRef v28 = (const __CFData *)SecKeyCopySubjectPublicKeyInfo();
          if (v28)
          {
            CFDataRef v29 = v28;
            BytePtr = CFDataGetBytePtr(v28);
            size_t Length = CFDataGetLength(v29);
            dispatch_data_t v32 = dispatch_data_create(BytePtr, Length, 0, 0);
            BOOL v33 = *(void **)(a2 + 104);
            *(void *)(a2 + 104) = v32;

            CFRelease(v29);
          }
        }
      }
    }
  }
  uint64_t v79 = 0;
  peer_signature_algorithmunsigned int s = boringssl_session_get_peer_signature_algorithms(*(void *)(a1 + 40), &v79);
  if (peer_signature_algorithms && v79)
  {
    unint64_t v35 = peer_signature_algorithms;
    xpc_object_t v36 = xpc_array_create(0, 0);
    int v37 = *(void **)(a2 + 112);
    *(void *)(a2 + 112) = v36;

    uint64_t v38 = 0;
    unsigned int v39 = 1;
    do
    {
      xpc_array_set_uint64(*(xpc_object_t *)(a2 + 112), 0xFFFFFFFFFFFFFFFFLL, *(unsigned __int16 *)(v79 + 2 * v38));
      uint64_t v38 = v39;
    }
    while (v35 > v39++);
  }
  id v41 = boringssl_context_copy_server_requested_CAs(*(void *)(a1 + 40));
  if (v41) {
    objc_storeStrong((id *)(a2 + 144), v41);
  }
  uint64_t v42 = *(void *)(a1 + 40);
  if (v42
    && *(_DWORD *)v42 == -1252936367
    && (uint64_t v43 = *(void *)(v42 + 8)) != 0
    && (uint64_t v44 = *(void *)(v43 + 400)) != 0
    && (size = 0, uint64_t buffer = 0, SSL_get_peer_quic_transport_params(v44, &buffer, &size), buffer)
    && size)
  {
    dispatch_data_t v45 = dispatch_data_create(buffer, size, 0, 0);
    if (v45) {
      objc_storeStrong((id *)(a2 + 152), v45);
    }
  }
  else
  {
    dispatch_data_t v45 = 0;
  }
  uint64_t v46 = *(void *)(a1 + 32);
  long long v47 = *(__SecTrust **)(v46 + 360);
  if (v47)
  {
    sec_trust_t v48 = sec_trust_create(v47);
    long long v49 = *(void **)(a2 + 168);
    *(void *)(a2 + 168) = v48;

    uint64_t v46 = *(void *)(a1 + 32);
  }
  long long v50 = *(id **)(v46 + 104);
  if (v50)
  {
    uint64_t v51 = boringssl_identity_copy_sec_identity(v50);
    unint64_t v52 = *(void **)(a2 + 160);
    *(void *)(a2 + 16std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = v51;

    int v53 = *(id **)(*(void *)(a1 + 32) + 104);
    if (v53)
    {
      int v54 = boringssl_identity_copy_certificate_chain(v53);
      uint64_t v55 = *(void **)(a2 + 80);
      *(void *)(a2 + 8std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = v54;
    }
  }
  uint64_t negotiated_group = (const char *)boringssl_session_get_negotiated_group(*(void *)(a1 + 40));
  if (negotiated_group) {
    *(void *)(a2 + 176) = strdup(negotiated_group);
  }
  server_name = (const char *)boringssl_session_get_server_name(*(const SSL **)(a1 + 40));
  if (server_name) {
    *(void *)(a2 + 48) = strdup(server_name);
  }
  uint64_t v58 = *(void *)(a1 + 40);
  if (v58)
  {
    if (*(_DWORD *)v58 == -1252936367)
    {
      uint64_t v58 = *(void *)(v58 + 8);
      if (v58) {
        LOWORD(v58) = 16 * (*(unsigned char *)(v58 + 557) & 1);
      }
    }
    else
    {
      LOWORD(v58) = 0;
    }
  }
  __int16 v59 = *(_WORD *)(a2 + 328) & 0xFFEF | v58;
  *(_WORD *)(a2 + 328) = v59;
  uint64_t v60 = *(void *)(a1 + 40);
  if (v60)
  {
    if (*(_DWORD *)v60 == -1252936367)
    {
      uint64_t v60 = *(void *)(v60 + 8);
      if (v60) {
        LODWORD(v6std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = (*(unsigned __int8 *)(v60 + 558) >> 2) & 0x20;
      }
    }
    else
    {
      LOWORD(v6std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0;
    }
  }
  *(_WORD *)(a2 + 328) = v60 | v59 & 0xFFDF;
  if (boringssl_session_has_session_ticket(*(const SSL **)(a1 + 40), *(void *)(a1 + 48))) {
    __int16 v61 = 64;
  }
  else {
    __int16 v61 = 0;
  }
  *(_WORD *)(a2 + 328) = *(_WORD *)(a2 + 328) & 0xFFBF | v61;
  if (boringssl_session_early_data_accepted(*(void *)(a1 + 40))) {
    __int16 v62 = 8;
  }
  else {
    __int16 v62 = 0;
  }
  *(_WORD *)(a2 + 328) = *(_WORD *)(a2 + 328) & 0xFFF7 | v62;
  if (boringssl_session_was_resumed(*(void *)(a1 + 40))) {
    __int16 v63 = 128;
  }
  else {
    __int16 v63 = 0;
  }
  *(_WORD *)(a2 + 328) = *(_WORD *)(a2 + 328) & 0xFF7F | v63;
  if (boringssl_session_was_renewed(*(const SSL **)(a1 + 40), *(void *)(a1 + 48))) {
    __int16 v64 = 256;
  }
  else {
    __int16 v64 = 0;
  }
  __int16 v65 = *(_WORD *)(a2 + 328) & 0xFEFF | v64;
  *(_WORD *)(a2 + 328) = v65;
  uint64_t v66 = *(void *)(a1 + 40);
  if (v66)
  {
    if (*(_DWORD *)v66 == -1252936367)
    {
      uint64_t v66 = *(void *)(v66 + 8);
      if (v66) {
        LOWORD(v66) = (*(unsigned char *)(v66 + 559) & 0x40) << 7;
      }
    }
    else
    {
      LOWORD(v66) = 0;
    }
  }
  *(_WORD *)(a2 + 328) = v66 | v65 & 0xDFFF;
  uint64_t v67 = *(void *)(a1 + 40);
  if (v67)
  {
    if (*(_DWORD *)v67 == -1252936367)
    {
      uint64_t v68 = *(void *)(v67 + 8);
      if (v68)
      {
        *(_WORD *)(a2 + 256) = *(_WORD *)(v68 + 336);
        unint64_t v69 = *(void *)(v68 + 464);
        unint64_t v70 = *(void *)(v68 + 456);
        BOOL v71 = v69 >= v70;
        uint64_t v72 = v69 - v70;
        if (!v71) {
          uint64_t v72 = -1;
        }
        *(void *)(a2 + 248) = v72;
        uint64_t v68 = *(void *)(v68 + 432) - *(void *)(v68 + 424);
      }
      else
      {
        *(_WORD *)(a2 + 256) = 0;
        *(void *)(a2 + 248) = 0;
      }
      *(void *)(a2 + 264) = v68;
      uint64_t v73 = *(void *)(v67 + 8);
      if (v73)
      {
        *(void *)(a2 + 272) = *(void *)(v73 + 472) + *(void *)(v73 + 480);
        uint64_t v73 = *(void *)(v73 + 472);
      }
      else
      {
        *(void *)(a2 + 272) = 0;
      }
      *(void *)(a2 + 28std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = v73;
      uint64_t v74 = *(void *)(v67 + 8);
      if (v74)
      {
        *(void *)(a2 + 288) = *(void *)(v74 + 480);
        uint64_t v75 = *(void *)(v74 + 496);
      }
      else
      {
        uint64_t v75 = 0;
        *(void *)(a2 + 288) = 0;
      }
      *(void *)(a2 + 296) = v75;
      uint64_t v67 = *(void *)(v67 + 8);
      if (v67)
      {
        *(void *)(a2 + 304) = *(void *)(v67 + 488);
        uint64_t v67 = *(void *)(v67 + 504);
      }
      else
      {
        *(void *)(a2 + 304) = 0;
      }
      goto LABEL_98;
    }
    uint64_t v67 = 0;
  }
  *(_WORD *)(a2 + 256) = 0;
  *(void *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 28std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
LABEL_98:
  *(void *)(a2 + 312) = v67;
  uuid_copy((unsigned __int8 *)(a2 + 64), (const unsigned __int8 *)(*(void *)(a1 + 32) + 252));
  uint64_t v76 = *(const char **)(*(void *)(a1 + 32) + 96);
  if (v76)
  {
    if (*(void *)(a2 + 56))
    {
      free(*(void **)(a2 + 56));
      *(void *)(a2 + 56) = 0;
      uint64_t v76 = *(const char **)(*(void *)(a1 + 32) + 96);
    }
    *(void *)(a2 + 56) = strdup(v76);
  }
  *(void *)a2 = *(void *)(a1 + 40);
  *(void *)(a2 + 8) = boringssl_session_export_secret_data;
  *(void *)(a2 + 16) = *(void *)(a1 + 40);
  *(void *)(a2 + 24) = boringssl_session_copy_serialized_session;
  uint64_t v77 = *(void *)(a1 + 40);
  *(void *)(a2 + 336) = boringssl_session_copy_authenticator;
  *(void *)(a2 + 344) = boringssl_session_copy_authenticator_trust;
  *(void *)(a2 + 352) = v77;
  if (boringssl_session_is_eap_configured(*(void *)(a1 + 40))) {
    boringssl_session_update_eap_metadata(*(void *)(a1 + 40));
  }

  return a2 != 0;
}

const SSL *boringssl_session_get_negotiated_protocol_version(const SSL *result)
{
  if (result)
  {
    if (result->version == -1252936367 && (methounsigned int d = result->method) != 0)
    {
      uint64_t result = (const SSL *)method[1].num_ciphers;
      if (result) {
        LOWORD(result) = SSL_version(result);
      }
    }
    else
    {
      LOWORD(result) = 0;
    }
  }
  return (const SSL *)(unsigned __int16)result;
}

uint64_t boringssl_session_get_negotiated_ciphersuite(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (v1 = *(void *)(result + 8)) != 0 && (uint64_t v2 = *(void *)(v1 + 400)) != 0)
    {
      uint64_t result = (uint64_t)SSL_get_current_cipher(*(const SSL **)(v1 + 400));
      if (result || (uint64_t result = SSL_get_pending_cipher(v2)) != 0) {
        LOWORD(result) = SSL_CIPHER_get_id(result);
      }
    }
    else
    {
      LOWORD(result) = 0;
    }
  }
  return (unsigned __int16)result;
}

uint64_t boringssl_session_get_negotiated_protocol(uint64_t result, void *a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v2 = *(void *)(result + 8)) != 0)
    {
      uint64_t v5 = 0;
      unsigned int v4 = 0;
      SSL_get0_alpn_selected(*(void *)(v2 + 400), &v5, &v4);
      if (a2) {
        *a2 = v4;
      }
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SSL_get0_alpn_selected(uint64_t result, void *a2, _DWORD *a3)
{
  xpc_object_t v3 = *(void **)(result + 48);
  uint64_t v4 = v3[35];
  if (v4 && (*(unsigned char *)(v4 + 1585) & 4) != 0 && (*(unsigned char *)(result + 180) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v4 + 1528);
    id v6 = (void *)(v5 + 392);
    __int16 v7 = (unint64_t *)(v5 + 400);
  }
  else
  {
    id v6 = v3 + 62;
    __int16 v7 = v3 + 63;
  }
  unint64_t v8 = *v7;
  if (v8 >= 0xFFFFFFFF) {
    SSL_get0_alpn_selected_cold_1();
  }
  *a2 = *v6;
  *a3 = v8;
  return result;
}

uint64_t SSL_get0_ocsp_response(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = (uint64_t)SSL_get_session((const SSL *)a1);
  if ((*(unsigned char *)(a1 + 180) & 1) == 0 && (uint64_t v7 = result) != 0 && (result = *(void *)(result + 256)) != 0)
  {
    *a2 = CRYPTO_BUFFER_data(result);
    uint64_t result = CRYPTO_BUFFER_len(*(void *)(v7 + 256));
    *a3 = result;
  }
  else
  {
    *a3 = 0;
    *a2 = 0;
  }
  return result;
}

SSL_CIPHER *__cdecl SSL_get_current_cipher(const SSL *s)
{
  uint64_t result = (SSL_CIPHER *)SSL_get_session(s);
  if (result) {
    return (SSL_CIPHER *)result[2].mask;
  }
  return result;
}

SSL_SESSION *__cdecl SSL_get_session(const SSL *ssl)
{
  handshake_func = ssl->handshake_func;
  uint64_t v2 = (SSL_SESSION *)*((void *)handshake_func + 59);
  if (v2) {
    return v2;
  }
  xpc_object_t v3 = (void *)*((void *)handshake_func + 35);
  if (!v3) {
    SSL_get_session_cold_1();
  }
  if ((*((_WORD *)handshake_func + 110) & 0x20) != 0) {
    SSL_get_session_cold_2();
  }
  uint64_t v2 = (SSL_SESSION *)v3[191];
  if (v2) {
    return v2;
  }

  return (SSL_SESSION *)bssl::ssl_handshake_session(v3);
}

uint64_t bssl::ssl_handshake_session(void *a1)
{
  uint64_t result = a1[190];
  if (!result) {
    return *(void *)(*a1 + 104);
  }
  return result;
}

uint64_t boringssl_session_was_resumed(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0)
    {
      uint64_t result = *(void *)(v1 + 400);
      if (result) {
        return SSL_session_reused(result) != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SSL_session_reused(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if ((*(_WORD *)(v1 + 220) & 0x40) != 0) {
    return 1;
  }
  uint64_t v2 = *(void *)(v1 + 280);
  if (v2) {
    return (*(_DWORD *)(v2 + 1584) >> 10) & 1;
  }
  else {
    return 0;
  }
}

const SSL *boringssl_session_was_renewed(const SSL *result, uint64_t a2)
{
  if (result)
  {
    if (result->version == -1252936367 && (methounsigned int d = result->method) != 0)
    {
      uint64_t result = (const SSL *)method[1].num_ciphers;
      if (result)
      {
        if (a2) {
          return (const SSL *)(SSL_SESSION_was_renewed(a2) != 0);
        }
        uint64_t result = (const SSL *)SSL_get_session(result);
        a2 = (uint64_t)result;
        if (result) {
          return (const SSL *)(SSL_SESSION_was_renewed(a2) != 0);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SSL_SESSION_was_renewed(uint64_t a1)
{
  return *(unsigned char *)(a1 + 384) & 1;
}

const SSL *boringssl_session_has_session_ticket(const SSL *result, uint64_t a2)
{
  if (result)
  {
    if (result->version == -1252936367 && (methounsigned int d = result->method) != 0)
    {
      if (a2) {
        return (const SSL *)SSL_SESSION_has_ticket(a2);
      }
      uint64_t result = (const SSL *)method[1].num_ciphers;
      if (result)
      {
        uint64_t result = (const SSL *)SSL_get_session(result);
        a2 = (uint64_t)result;
        if (result) {
          return (const SSL *)SSL_SESSION_has_ticket(a2);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL SSL_SESSION_has_ticket(uint64_t a1)
{
  return *(void *)(a1 + 240) != 0;
}

uint64_t boringssl_session_get_negotiated_group(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const SSL **)(v1 + 400);
  if (!v2) {
    return 0;
  }
  curve_iunsigned int d = SSL_get_curve_id(v2);

  return SSL_get_curve_name(curve_id);
}

SSL_SESSION *SSL_get_curve_id(const SSL *a1)
{
  uint64_t result = SSL_get_session(a1);
  if (result) {
    return (SSL_SESSION *)HIWORD(result->key_arg_length);
  }
  return result;
}

char *SSL_get_group_name(int a1)
{
  uint64_t v1 = 0;
  {
    v1 += 18;
    if (v1 == 108) {
      return 0;
    }
  }
}

BOOL boringssl_session_is_eap_configured(uint64_t a1)
{
  if (!a1 || *(_DWORD *)a1 != -1252936367 || !*(void *)(a1 + 8)) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  char v6 = 1;
  nw_protocol_options_access_handle();
  BOOL v1 = *((unsigned char *)v4 + 24) != 0;
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_1BA0FD11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const SSL *boringssl_session_get_server_name(const SSL *result)
{
  if (result)
  {
    if (result->version == -1252936367 && (methounsigned int d = result->method) != 0)
    {
      uint64_t result = (const SSL *)method[1].num_ciphers;
      if (result)
      {
        if ((BYTE4(method[2].ssl_renegotiate_check) & 0x10) != 0) {
          return (const SSL *)SSL_get_servername(result, 0);
        }
        else {
          return (const SSL *)method->ssl_renegotiate;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_peer_signature_algorithms(uint64_t a1, void *a2)
{
  if (a1 && *(_DWORD *)a1 == -1252936367 && a2 && (v2 = *(void *)(a1 + 8)) != 0 && (uint64_t v3 = *(void *)(v2 + 400)) != 0) {
    return SSL_get0_peer_verify_algorithms(v3, a2);
  }
  else {
    return 0;
  }
}

uint64_t boringssl_session_early_data_accepted(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0)
    {
      uint64_t result = *(void *)(v1 + 400);
      if (result) {
        return SSL_early_data_accepted(result) != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id boringssl_context_copy_server_requested_CAs(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -1252936367 && (v1 = *(void *)(a1 + 8)) != 0 && (uint64_t v2 = *(void *)(v1 + 400)) != 0)
  {
    uint64_t v3 = (void *)sec_array_create();
    uint64_t v4 = (const EVP_MD_CTX *)SSL_get0_server_requested_CAs(v2);
    if (v4)
    {
      uint64_t v5 = (unint64_t *)v4;
      if (EVP_MD_CTX_md(v4))
      {
        if (EVP_MD_CTX_md((const EVP_MD_CTX *)v5))
        {
          unint64_t v6 = 0;
          do
          {
            uint64_t v7 = OPENSSL_sk_value(v5, v6);
            unint64_t v8 = (const void *)CRYPTO_BUFFER_data((uint64_t)v7);
            size_t v9 = CRYPTO_BUFFER_len((uint64_t)v7);
            dispatch_data_t v10 = dispatch_data_create(v8, v9, 0, 0);
            sec_array_append();

            ++v6;
          }
          while (v6 < (unint64_t)EVP_MD_CTX_md((const EVP_MD_CTX *)v5));
        }
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

dispatch_data_t boringssl_context_copy_ocsp_response(uint64_t a1)
{
  dispatch_data_t result = *(dispatch_data_t *)(a1 + 400);
  if (result)
  {
    size_t v3 = 0;
    uint64_t v4 = 0;
    SSL_get0_ocsp_response((uint64_t)result, (uint64_t *)&v4, (uint64_t *)&v3);
    dispatch_data_t result = 0;
    if (v3) {
      BOOL v2 = v4 == 0;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2) {
      return dispatch_data_create(v4, v3, 0, 0);
    }
  }
  return result;
}

uint64_t SSL_get_peer_quic_transport_params(uint64_t result, void *a2, void *a3)
{
  *a2 = *(void *)(*(void *)(result + 48) + 584);
  *a3 = *(void *)(*(void *)(result + 48) + 592);
  return result;
}

uint64_t SSL_get0_server_requested_CAs(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 280);
  if (v1) {
    return *(void *)(v1 + 1472);
  }
  else {
    return 0;
  }
}

uint64_t SSL_get0_peer_verify_algorithms(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 280);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 648);
    uint64_t result = *(void *)(v2 + 656);
  }
  else
  {
    uint64_t result = 0;
    uint64_t v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t SSL_early_data_accepted(uint64_t a1)
{
  return (*(unsigned __int16 *)(*(void *)(a1 + 48) + 220) >> 10) & 1;
}

uint64_t boringssl_session_set_peer_verification_state_from_session(uint64_t a1, uint64_t a2)
{
  if (!a1 || *(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v3 = 0;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      if (*(void *)(v4 + 368)) {
        return 0;
      }
      unint64_t v6 = (unint64_t *)SSL_SESSION_get0_peer_certificates(a2);
      uint64_t v7 = boringssl_helper_copy_certificates_from_CRYPTO_BUFFERs((void *)v4, v6);
      if (v7)
      {
        unint64_t v8 = v7;
        SecKeyRef v9 = boringssl_helper_copy_public_key_from_certificates((void *)v4, v7);
        if (!v9)
        {
          id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
          if (!WeakRetained
            || (__int16 v40 = WeakRetained,
                id v41 = objc_loadWeakRetained((id *)(v4 + 16)),
                char v42 = v41[475],
                v41,
                v40,
                (v42 & 1) == 0))
          {
            id v43 = objc_loadWeakRetained((id *)(v4 + 16));
            if (v43)
            {
              uint64_t v44 = objc_loadWeakRetained((id *)(v4 + 16));
              BOOL v45 = (v44[475] & 1) == 0;
            }
            else
            {
              BOOL v45 = 1;
            }

            if (v45)
            {
              if (g_boringssl_log)
              {
                sec_trust_t v48 = (id)g_boringssl_log;
                if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
                  boringssl_session_set_peer_verification_state_from_session_cold_2(v4, v48);
                }
              }
            }
          }
          CFRelease(v8);
          return 0;
        }
        SecKeyRef v10 = v9;
        string = boringssl_helper_create_string(*(const char **)(v4 + 80));
        id v12 = boringssl_context_copy_ocsp_responses((void *)v4);
        CFArrayRef v13 = boringssl_context_copy_peer_sct_list((void *)v4);
        sec_trust_with_certificateunsigned int s = (const void *)boringssl_helper_create_sec_trust_with_certificates(a1, string, v8, v12, v13);
        if (boringssl_session_set_trust_reference(a1, (uint64_t)sec_trust_with_certificates)
          && boringssl_session_set_peer_certificate_chain(a1, (uint64_t)v8)
          && boringssl_session_set_peer_public_key(a1, (uint64_t)v10))
        {
          id v15 = objc_loadWeakRetained((id *)(v4 + 16));
          if (v15)
          {
            id v16 = v15;
            dispatch_data_t v17 = objc_loadWeakRetained((id *)(v4 + 16));
            char v18 = v17[475];

            if (v18)
            {
              uint64_t v3 = 1;
              goto LABEL_44;
            }
          }
          id v19 = objc_loadWeakRetained((id *)(v4 + 16));
          if (v19)
          {
            CFArrayRef v20 = objc_loadWeakRetained((id *)(v4 + 16));
            BOOL v21 = (v20[475] & 1) == 0;
          }
          else
          {
            BOOL v21 = 1;
          }

          uint64_t v3 = 1;
          if (!v21 || !g_boringssl_log) {
            goto LABEL_44;
          }
          long long v47 = (id)g_boringssl_log;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
            boringssl_session_set_peer_verification_state_from_session_cold_3(v4, v47);
          }
          goto LABEL_42;
        }
        CFArrayRef cf = v13;
        CFDataRef v29 = string;
        int v30 = sec_trust_with_certificates;
        unsigned __int8 v31 = v12;
        id v32 = objc_loadWeakRetained((id *)(v4 + 16));
        if (v32
          && (BOOL v33 = v32,
              int v34 = objc_loadWeakRetained((id *)(v4 + 16)),
              char v35 = v34[475],
              v34,
              v33,
              (v35 & 1) != 0))
        {
          uint64_t v3 = 0;
        }
        else
        {
          id v36 = objc_loadWeakRetained((id *)(v4 + 16));
          if (v36)
          {
            int v37 = objc_loadWeakRetained((id *)(v4 + 16));
            BOOL v38 = (v37[475] & 1) == 0;
          }
          else
          {
            BOOL v38 = 1;
          }

          uint64_t v3 = 0;
          if (v38)
          {
            id v12 = v31;
            sec_trust_with_certificateunsigned int s = v30;
            string = v29;
            CFArrayRef v13 = cf;
            if (!g_boringssl_log)
            {
LABEL_44:
              if (string) {
                CFRelease(string);
              }
              if (v13) {
                CFRelease(v13);
              }
              if (v12) {
                CFRelease(v12);
              }
              if (sec_trust_with_certificates) {
                CFRelease(sec_trust_with_certificates);
              }
              CFRelease(v8);
              CFRelease(v10);
              return v3;
            }
            long long v47 = (id)g_boringssl_log;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
              boringssl_session_set_peer_verification_state_from_session_cold_4(v4, v47);
            }
            uint64_t v3 = 0;
LABEL_42:

            goto LABEL_44;
          }
        }
        id v12 = v31;
        sec_trust_with_certificateunsigned int s = v30;
        string = v29;
        CFArrayRef v13 = cf;
        goto LABEL_44;
      }
      id v22 = objc_loadWeakRetained((id *)(v4 + 16));
      if (v22)
      {
        CFIndex v23 = v22;
        __int16 v24 = objc_loadWeakRetained((id *)(v4 + 16));
        char v25 = v24[475];

        if (v25) {
          return 0;
        }
      }
      id v26 = objc_loadWeakRetained((id *)(v4 + 16));
      if (v26)
      {
        uint64_t v27 = objc_loadWeakRetained((id *)(v4 + 16));
        BOOL v28 = (v27[475] & 1) == 0;
      }
      else
      {
        BOOL v28 = 1;
      }

      uint64_t v3 = 0;
      if (v28 && g_boringssl_log)
      {
        uint64_t v46 = (id)g_boringssl_log;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          boringssl_session_set_peer_verification_state_from_session_cold_1(v4, v46);
        }

        return 0;
      }
    }
  }
  return v3;
}

uint64_t boringssl_session_set_trust_reference(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t result = 0;
      if (a2)
      {
        uint64_t v4 = *(void *)(v2 + 8);
        if (v4)
        {
          uint64_t v5 = *(const void **)(v4 + 360);
          if (v5) {
            CFRelease(v5);
          }
          *(void *)(v4 + 36std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0;
          *(void *)(v4 + 36std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = a2;
          CFRetain(*(CFTypeRef *)(v4 + 360));
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_set_peer_public_key(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t result = 0;
      if (a2)
      {
        uint64_t v4 = *(void *)(v2 + 8);
        if (v4)
        {
          uint64_t v5 = *(const void **)(v4 + 344);
          if (v5) {
            CFRelease(v5);
          }
          *(void *)(v4 + 344) = 0;
          *(void *)(v4 + 344) = a2;
          CFRetain(*(CFTypeRef *)(v4 + 344));
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_set_peer_certificate_chain(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t result = 0;
      if (a2)
      {
        uint64_t v4 = *(void *)(v2 + 8);
        if (v4)
        {
          uint64_t v5 = *(const void **)(v4 + 352);
          if (v5) {
            CFRelease(v5);
          }
          *(void *)(v4 + 352) = 0;
          *(void *)(v4 + 352) = a2;
          CFRetain(*(CFTypeRef *)(v4 + 352));
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const char *boringssl_helper_create_string(const char *cStr)
{
  if (cStr) {
    return (const char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
  }
  return cStr;
}

#error "1BA0FE1C4: call analysis failed (funcsize=433)"

SecKeyRef boringssl_helper_copy_public_key_from_certificates(void *a1, const __CFArray *a2)
{
  uint64_t v3 = a1;
  SecKeyRef v4 = 0;
  if (v3 && a2)
  {
    ValueAtIndex = (__SecCertificate *)CFArrayGetValueAtIndex(a2, 0);
    if (ValueAtIndex)
    {
      SecKeyRef v4 = SecCertificateCopyKey(ValueAtIndex);
      goto LABEL_16;
    }
    id WeakRetained = objc_loadWeakRetained(v3 + 2);
    if (WeakRetained)
    {
      uint64_t v7 = WeakRetained;
      unint64_t v8 = objc_loadWeakRetained(v3 + 2);
      char v9 = v8[475];

      if (v9)
      {
LABEL_15:
        SecKeyRef v4 = 0;
        goto LABEL_16;
      }
    }
    id v10 = objc_loadWeakRetained(v3 + 2);
    if (v10)
    {
      int v11 = objc_loadWeakRetained(v3 + 2);
      BOOL v12 = (v11[475] & 1) == 0;
    }
    else
    {
      BOOL v12 = 1;
    }

    SecKeyRef v4 = 0;
    if (v12 && g_boringssl_log)
    {
      CFArrayRef v13 = (id)g_boringssl_log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        boringssl_helper_copy_public_key_from_certificates_cold_1(v3, v13);
      }

      goto LABEL_15;
    }
  }
LABEL_16:

  return v4;
}

__CFArray *boringssl_helper_copy_certificates_from_CRYPTO_BUFFERs(void *a1, unint64_t *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  SecKeyRef v4 = 0;
  if (v3 && a2)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      SecKeyRef v4 = Mutable;
      if (EVP_MD_CTX_md((const EVP_MD_CTX *)a2))
      {
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = OPENSSL_sk_value(a2, v6);
          CRYPTO_BUFFER_data((uint64_t)v7);
          CRYPTO_BUFFER_len((uint64_t)v7);
          unint64_t v8 = (const void *)SecCertificateCreateWithBytes();
          if (v8)
          {
            char v9 = v8;
            CFArrayAppendValue(v4, v8);
            CFRelease(v9);
          }
          else
          {
            id WeakRetained = objc_loadWeakRetained(v3 + 2);
            if (!WeakRetained
              || (int v11 = WeakRetained,
                  BOOL v12 = objc_loadWeakRetained(v3 + 2),
                  char v13 = v12[475],
                  v12,
                  v11,
                  (v13 & 1) == 0))
            {
              id v14 = objc_loadWeakRetained(v3 + 2);
              if (v14)
              {
                id v15 = objc_loadWeakRetained(v3 + 2);
                BOOL v16 = (v15[475] & 1) == 0;
              }
              else
              {
                BOOL v16 = 1;
              }

              if (v16)
              {
                if (g_boringssl_log)
                {
                  dispatch_data_t v17 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                  {
                    char v18 = &unk_1BA179713;
                    id v30 = objc_loadWeakRetained(v3 + 2);
                    if (v30)
                    {
                      CFDataRef v29 = (char *)objc_loadWeakRetained(v3 + 2);
                      char v18 = v29 + 391;
                    }
                    id v19 = objc_loadWeakRetained(v3 + 2);
                    *(_DWORD *)buf = 136447234;
                    id v32 = "boringssl_helper_copy_certificates_from_CRYPTO_BUFFERs";
                    __int16 v33 = 1024;
                    int v34 = 153;
                    __int16 v35 = 2082;
                    id v36 = v18;
                    __int16 v37 = 2048;
                    id v38 = v19;
                    __int16 v39 = 2048;
                    unint64_t v40 = v6;
                    _os_log_error_impl(&dword_1BA0DE000, v17, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] Failed to extract certificate #%zu", buf, 0x30u);

                    if (v30) {
                  }
                    }
                }
              }
            }
          }
          ++v6;
        }
        while (v6 < (unint64_t)EVP_MD_CTX_md((const EVP_MD_CTX *)a2));
      }
      if (CFArrayGetCount(v4) < 1)
      {
        CFRelease(v4);
LABEL_36:
        SecKeyRef v4 = 0;
      }
    }
    else
    {
      id v20 = objc_loadWeakRetained(v3 + 2);
      if (v20)
      {
        BOOL v21 = v20;
        id v22 = objc_loadWeakRetained(v3 + 2);
        char v23 = v22[475];

        if (v23) {
          goto LABEL_36;
        }
      }
      id v24 = objc_loadWeakRetained(v3 + 2);
      if (v24)
      {
        char v25 = objc_loadWeakRetained(v3 + 2);
        BOOL v26 = (v25[475] & 1) == 0;
      }
      else
      {
        BOOL v26 = 1;
      }

      SecKeyRef v4 = 0;
      if (v26 && g_boringssl_log)
      {
        uint64_t v27 = (id)g_boringssl_log;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          boringssl_helper_copy_certificates_from_CRYPTO_BUFFERs_cold_1(v3, v27);
        }

        goto LABEL_36;
      }
    }
  }

  return v4;
}

uint64_t boringssl_helper_ciphersuite_to_key_usage(int a1, int a2)
{
  if (a1 == 772) {
    return 1;
  }
  uint64_t result = (uint64_t)SSL_get_cipher_by_value(a2);
  if (result)
  {
    kx_niunsigned int d = SSL_CIPHER_get_kx_nid(result);
    if (kx_nid == 951) {
      return 4;
    }
    else {
      return kx_nid == 952;
    }
  }
  return result;
}

CFArrayRef boringssl_context_copy_peer_sct_list(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *((void *)v1 + 50);
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v13 = 0;
  id v14 = 0;
  SSL_get0_signed_cert_timestamp_list(v2, (uint64_t *)&v14, &v13);
  if (v13)
  {
    CFArrayRef v3 = boringssl_context_copy_peer_sct_list_from_extension(v1, v14, v13);
    goto LABEL_16;
  }
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 2);
  if (WeakRetained)
  {
    uint64_t v5 = WeakRetained;
    unint64_t v6 = objc_loadWeakRetained((id *)v1 + 2);
    char v7 = v6[475];

    if (v7)
    {
LABEL_15:
      CFArrayRef v3 = 0;
      goto LABEL_16;
    }
  }
  id v8 = objc_loadWeakRetained((id *)v1 + 2);
  if (v8)
  {
    char v9 = objc_loadWeakRetained((id *)v1 + 2);
    char v10 = v9[475] & 1;
  }
  else
  {
    char v10 = 0;
  }

  CFArrayRef v3 = 0;
  if ((v10 & 1) == 0 && datapath_logging_enabled)
  {
    if (g_boringssl_log)
    {
      int v11 = (id)g_boringssl_log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        boringssl_context_copy_peer_sct_list_cold_1(v1 + 16, v11);
      }
    }
    goto LABEL_15;
  }
LABEL_16:

  return v3;
}

__CFArray *boringssl_context_copy_ocsp_responses(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  CFMutableArrayRef Mutable = v1[50];
  if (Mutable)
  {
    SecKeyRef v4 = SSL_get0_ocsp_responses((uint64_t)v1[50]);
    if (v4)
    {
      uint64_t v5 = (unint64_t *)v4;
      unint64_t v6 = EVP_MD_CTX_md((const EVP_MD_CTX *)v4);
      if (v6)
      {
        char v7 = v6;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFIndex)v6, MEMORY[0x1E4F1D510]);
        for (unint64_t i = 0; (const EVP_MD *)i != v7; ++i)
        {
          char v10 = OPENSSL_sk_value(v5, i);
          int v11 = (const UInt8 *)CRYPTO_BUFFER_data((uint64_t)v10);
          CFIndex v12 = CRYPTO_BUFFER_len((uint64_t)v10);
          CFDataRef v13 = CFDataCreate(v8, v11, v12);
          CFArrayAppendValue(Mutable, v13);
          CFRelease(v13);
        }
        goto LABEL_11;
      }
    }
    else
    {
      CFIndex v17 = 0;
      char v18 = 0;
      SSL_get0_ocsp_response((uint64_t)Mutable, (uint64_t *)&v18, &v17);
      if (v17 && v18)
      {
        CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D510]);
        CFDataRef v15 = CFDataCreate(v14, v18, v17);
        CFArrayAppendValue(Mutable, v15);
        CFRelease(v15);
        goto LABEL_11;
      }
    }
    CFMutableArrayRef Mutable = 0;
  }
LABEL_11:

  return Mutable;
}

unsigned __int8 *SSL_get0_ocsp_responses(uint64_t a1)
{
  session = SSL_get_session((const SSL *)a1);
  uint64_t result = 0;
  if ((*(unsigned char *)(a1 + 180) & 1) == 0)
  {
    if (session) {
      return session->tlsext_tick;
    }
  }
  return result;
}

uint64_t SSL_SESSION_get0_peer_certificates(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t boringssl_session_get_sct_received(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0)
    {
      uint64_t result = *(void *)(v1 + 400);
      if (result)
      {
        uint64_t v2 = 0;
        uint64_t v3 = 0;
        SSL_get0_signed_cert_timestamp_list(result, &v3, &v2);
        return v2 != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SSL_get0_signed_cert_timestamp_list(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = (uint64_t)SSL_get_session((const SSL *)a1);
  if ((*(unsigned char *)(a1 + 180) & 1) == 0 && (uint64_t v7 = result) != 0 && (result = *(void *)(result + 248)) != 0)
  {
    *a2 = CRYPTO_BUFFER_data(result);
    uint64_t result = CRYPTO_BUFFER_len(*(void *)(v7 + 248));
    *a3 = result;
  }
  else
  {
    *a3 = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t bssl::SSL_SESSION_to_bytes_full(uint64_t result, uint64_t *a2, int a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if (!*(void *)(result + 200)) {
      return 0;
    }
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v23[1] = v6;
    v23[2] = v6;
    void v22[2] = v6;
    v23[0] = v6;
    v22[0] = v6;
    v22[1] = v6;
    v21[1] = v6;
    _OWORD v21[2] = v6;
    v21[0] = v6;
    uint64_t result = CBB_add_asn1(a2, (uint64_t)v23, 0x20000010u);
    if (result)
    {
      uint64_t result = CBB_add_asn1_uint64((uint64_t)v23, 1uLL);
      if (result)
      {
        uint64_t result = CBB_add_asn1_uint64((uint64_t)v23, *(unsigned __int16 *)(v3 + 4));
        if (result)
        {
          uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 4u);
          if (result)
          {
            uint64_t result = CBB_add_u16((uint64_t)v22, *(unsigned __int16 *)(*(void *)(v3 + 200) + 16));
            if (result)
            {
              size_t v7 = a3 ? 0 : *(unsigned __int8 *)(v3 + 59);
              uint64_t result = CBB_add_asn1_octet_string((uint64_t)v23, (const void *)(v3 + 60), v7);
              if (result)
              {
                uint64_t result = CBB_add_asn1_octet_string((uint64_t)v23, (const void *)(v3 + 11), *(unsigned __int8 *)(v3 + 10));
                if (result)
                {
                  uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000001);
                  if (result)
                  {
                    uint64_t result = CBB_add_asn1_uint64((uint64_t)v22, *(void *)(v3 + 192));
                    if (result)
                    {
                      uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000002);
                      if (result)
                      {
                        uint64_t result = CBB_add_asn1_uint64((uint64_t)v22, *(unsigned int *)(v3 + 184));
                        if (result)
                        {
                          if (!EVP_MD_CTX_md(*(const EVP_MD_CTX **)(v3 + 136))
                            || (*(unsigned char *)(v3 + 440) & 2) != 0
                            || (CFAllocatorRef v8 = OPENSSL_sk_value(*(unint64_t **)(v3 + 136), 0),
                                uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000003),
                                result)
                            && (char v9 = (const void *)CRYPTO_BUFFER_data((uint64_t)v8),
                                size_t v10 = CRYPTO_BUFFER_len((uint64_t)v8),
                                uint64_t result = CBB_add_bytes((uint64_t)v22, v9, v10),
                                result))
                          {
                            uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000004);
                            if (result)
                            {
                              uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, (const void *)(v3 + 93), *(unsigned __int8 *)(v3 + 92));
                              if (result)
                              {
                                if (!*(void *)(v3 + 176)
                                  || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000005), result)
                                  && (uint64_t result = CBB_add_asn1_uint64((uint64_t)v22, *(void *)(v3 + 176)), result))
                                {
                                  if (!*(void *)(v3 + 128)
                                    || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000008), result)
                                    && (size_t v11 = strlen(*(const char **)(v3 + 128)),
                                        uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, *(const void **)(v3 + 128), v11), result))
                                  {
                                    if (!*(_DWORD *)(v3 + 372)
                                      || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000009), result)
                                      && (uint64_t result = CBB_add_asn1_uint64((uint64_t)v22, *(unsigned int *)(v3 + 372)),
                                          result))
                                    {
                                      if (a3
                                        || !*(void *)(v3 + 240)
                                        || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA000000A),
                                            result)
                                        && (uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, *(const void **)(v3 + 232), *(void *)(v3 + 240)), result))
                                      {
                                        if ((*(unsigned char *)(v3 + 440) & 2) == 0
                                          || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA000000D),
                                              result)
                                          && (uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, (const void *)(v3 + 272), 0x20uLL), result))
                                        {
                                          if (!*(unsigned char *)(v3 + 368)
                                            || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA000000E),
                                                result)
                                            && (uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, (const void *)(v3 + 304), *(unsigned __int8 *)(v3 + 368)), result))
                                          {
                                            if (!*(void *)(v3 + 248)
                                              || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA000000F),
                                                  result)
                                              && (CFIndex v12 = (const void *)CRYPTO_BUFFER_data(*(void *)(v3 + 248)),
                                                  size_t v13 = CRYPTO_BUFFER_len(*(void *)(v3 + 248)),
                                                  uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, v12, v13),
                                                  result))
                                            {
                                              if (!*(void *)(v3 + 256)
                                                || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000010),
                                                    result)
                                                && (CFAllocatorRef v14 = (const void *)CRYPTO_BUFFER_data(*(void *)(v3 + 256)),
                                                    size_t v15 = CRYPTO_BUFFER_len(*(void *)(v3 + 256)),
                                                    uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, v14, v15),
                                                    result))
                                              {
                                                if ((*(unsigned char *)(v3 + 440) & 1) == 0
                                                  || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000011),
                                                      result)
                                                  && (uint64_t result = CBB_add_asn1_BOOL((uint64_t)v22, 1), result))
                                                {
                                                  if (!*(_WORD *)(v3 + 6)
                                                    || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000012),
                                                        result)
                                                    && (uint64_t result = CBB_add_asn1_uint64((uint64_t)v22, *(unsigned __int16 *)(v3 + 6)), result))
                                                  {
                                                    BOOL v16 = *(const EVP_MD_CTX **)(v3 + 136);
                                                    if (v16
                                                      && (*(unsigned char *)(v3 + 440) & 2) == 0
                                                      && (unint64_t)EVP_MD_CTX_md(v16) >= 2)
                                                    {
                                                      uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000013);
                                                      if (!result) {
                                                        return result;
                                                      }
                                                      if ((unint64_t)EVP_MD_CTX_md(*(const EVP_MD_CTX **)(v3 + 136)) >= 2)
                                                      {
                                                        unint64_t v17 = 1;
                                                        do
                                                        {
                                                          char v18 = OPENSSL_sk_value(*(unint64_t **)(v3 + 136), v17);
                                                          id v19 = (const void *)CRYPTO_BUFFER_data((uint64_t)v18);
                                                          size_t v20 = CRYPTO_BUFFER_len((uint64_t)v18);
                                                          uint64_t result = CBB_add_bytes((uint64_t)v22, v19, v20);
                                                          if (!result) {
                                                            return result;
                                                          }
                                                        }
                                                        while (++v17 < (unint64_t)EVP_MD_CTX_md(*(const EVP_MD_CTX **)(v3 + 136)));
                                                      }
                                                    }
                                                    if ((*(unsigned char *)(v3 + 440) & 8) != 0)
                                                    {
                                                      uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000015);
                                                      if (!result) {
                                                        return result;
                                                      }
                                                      uint64_t result = CBB_add_asn1((uint64_t *)v22, (uint64_t)v21, 4u);
                                                      if (!result) {
                                                        return result;
                                                      }
                                                      uint64_t result = CBB_add_u32((uint64_t)v21, *(_DWORD *)(v3 + 376));
                                                      if (!result) {
                                                        return result;
                                                      }
                                                      if ((*(unsigned char *)(v3 + 440) & 0x10) != 0) {
                                                        goto LABEL_73;
                                                      }
                                                    }
                                                    else if ((*(unsigned char *)(v3 + 440) & 0x10) != 0)
                                                    {
LABEL_73:
                                                      if (!*(_WORD *)(v3 + 8)
                                                        || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000017), result)&& (uint64_t result = CBB_add_asn1_uint64((uint64_t)v22, *(unsigned __int16 *)(v3 + 8)), result))
                                                      {
                                                        if (!*(_DWORD *)(v3 + 380)
                                                          || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000018), result)&& (uint64_t result = CBB_add_asn1_uint64((uint64_t)v22, *(unsigned int *)(v3 + 380)), result))
                                                        {
                                                          if (*(_DWORD *)(v3 + 184) == *(_DWORD *)(v3 + 188)
                                                            || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000019), result)&& (uint64_t result = CBB_add_asn1_uint64((uint64_t)v22, *(unsigned int *)(v3 + 188)), result))
                                                          {
                                                            if (!*(void *)(v3 + 400)
                                                              || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA000001A), result)&& (uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, *(const void **)(v3 + 392), *(void *)(v3 + 400)), result))
                                                            {
                                                              if ((*(unsigned char *)(v3 + 440) & 0x20) == 0
                                                                || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA000001B), result)&& (uint64_t result = CBB_add_asn1_BOOL((uint64_t)v22, 1), result))
                                                              {
                                                                if (!*(void *)(v3 + 456)
                                                                  || (uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA000001C), result)&& (uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, *(const void **)(v3 + 448), *(void *)(v3 + 456)), result))
                                                                {
                                                                  if ((*(unsigned char *)(v3 + 440) & 0x40) == 0) {
                                                                    return CBB_flush(a2);
                                                                  }
                                                                  uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA000001D);
                                                                  if (result)
                                                                  {
                                                                    uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, *(const void **)(v3 + 408), *(void *)(v3 + 416));
                                                                    if (result)
                                                                    {
                                                                      uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA000001E);
                                                                      if (result)
                                                                      {
                                                                        uint64_t result = CBB_add_asn1_octet_string((uint64_t)v22, *(const void **)(v3 + 424), *(void *)(v3 + 432));
                                                                        if (result) {
                                                                          return CBB_flush(a2);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      return result;
                                                    }
                                                    uint64_t result = CBB_add_asn1((uint64_t *)v23, (uint64_t)v22, 0xA0000016);
                                                    if (!result) {
                                                      return result;
                                                    }
                                                    uint64_t result = CBB_add_asn1_BOOL((uint64_t)v22, 0);
                                                    if (!result) {
                                                      return result;
                                                    }
                                                    goto LABEL_73;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CRYPTO_BUFFER_len(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t CRYPTO_BUFFER_data(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t CBB_add_asn1_uint64_with_tag(uint64_t a1, unint64_t a2, unsigned int a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = v5;
  long long v10[2] = v5;
  v10[0] = v5;
  if (!CBB_add_asn1((uint64_t *)a1, (uint64_t)v10, a3))
  {
LABEL_13:
    char v9 = (uint64_t *)(a1 + 16);
    if (*(unsigned char *)(a1 + 8)) {
      char v9 = (uint64_t *)*v9;
    }
    uint64_t result = 0;
    *((unsigned char *)v9 + 24) |= 2u;
    *(void *)a1 = 0;
    return result;
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    while ((v7 & 1) == 0)
    {
LABEL_7:
      if (!cbb_add_u((uint64_t)v10, (a2 >> (56 - 8 * v6)), 1uLL)) {
        goto LABEL_13;
      }
      char v7 = 0;
      if (++v6 == 8) {
        return CBB_flush((uint64_t *)a1);
      }
    }
    if ((a2 >> (56 - 8 * v6)))
    {
      if (((a2 >> (56 - 8 * v6)) & 0x80) != 0 && !cbb_add_u((uint64_t)v10, 0, 1uLL)) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
    ++v6;
    char v7 = 1;
  }
  while (v6 != 8);
  if (!cbb_add_u((uint64_t)v10, 0, 1uLL)) {
    goto LABEL_13;
  }
  return CBB_flush((uint64_t *)a1);
}

uint64_t CBB_add_asn1_uint64(uint64_t a1, unint64_t a2)
{
  return CBB_add_asn1_uint64_with_tag(a1, a2, 2u);
}

uint64_t CBB_add_asn1_octet_string(uint64_t a1, const void *a2, size_t a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = v6;
  long long v9[2] = v6;
  v9[0] = v6;
  if (CBB_add_asn1((uint64_t *)a1, (uint64_t)v9, 4u)
    && CBB_add_bytes((uint64_t)v9, a2, a3)
    && CBB_flush((uint64_t *)a1))
  {
    return 1;
  }
  CFAllocatorRef v8 = (uint64_t *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8)) {
    CFAllocatorRef v8 = (uint64_t *)*v8;
  }
  uint64_t result = 0;
  *((unsigned char *)v8 + 24) |= 2u;
  *(void *)a1 = 0;
  return result;
}

uint64_t CBB_add_asn1_BOOL(uint64_t a1, int a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v4;
  v8[2] = v4;
  v8[0] = v4;
  if (CBB_add_asn1((uint64_t *)a1, (uint64_t)v8, 1u))
  {
    unint64_t v5 = a2 ? 255 : 0;
    if (cbb_add_u((uint64_t)v8, v5, 1uLL) && CBB_flush((uint64_t *)a1)) {
      return 1;
    }
  }
  char v7 = (uint64_t *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8)) {
    char v7 = (uint64_t *)*v7;
  }
  uint64_t result = 0;
  *((unsigned char *)v7 + 24) |= 2u;
  *(void *)a1 = 0;
  return result;
}

uint64_t CBB_add_u32(uint64_t a1, unsigned int a2)
{
  return cbb_add_u(a1, a2, 4uLL);
}

void nw_protocol_boringssl_signal_connected(void *a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if ((v1[475] & 1) == 0
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_signal_connected_cold_1();
  }
  uint64_t v2 = *((void *)v1 + 42);
  if (v2)
  {
    if (*((void *)v1 + 40))
    {
      nw_queue_cancel_source();
      *((void *)v1 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 0;
      uint64_t v2 = *((void *)v1 + 42);
    }
    uint64_t v26 = 0;
    uint64_t negotiated_protocol = boringssl_session_get_negotiated_protocol(v2, &v26);
    memset(v65, 0, 128);
    if (negotiated_protocol) {
      __memcpy_chk();
    }
    negotiated_ciphersuite_name = (const char *)boringssl_session_get_negotiated_ciphersuite_name(*((void *)v1 + 42));
    if ((v1[475] & 1) == 0)
    {
      unint64_t v5 = (void *)g_boringssl_log;
      if (g_boringssl_log)
      {
        long long v6 = negotiated_ciphersuite_name;
        if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEFAULT))
        {
          char v7 = (const SSL *)*((void *)v1 + 42);
          log = v5;
          unsigned int negotiated_protocol_version = boringssl_session_get_negotiated_protocol_version(v7);
          if (v6) {
            CFAllocatorRef v8 = v6;
          }
          else {
            CFAllocatorRef v8 = "nil";
          }
          char v23 = v8;
          negotiated_group_iunsigned int d = boringssl_session_get_negotiated_group_id(*((void *)v1 + 42));
          unsigned int peer_signature_algorithm = boringssl_session_get_peer_signature_algorithm(*((void *)v1 + 42));
          char v9 = v65;
          if (!negotiated_protocol) {
            char v9 = "nil";
          }
          size_t v20 = v9;
          int v19 = boringssl_session_was_resumed(*((void *)v1 + 42));
          ticket_offereunsigned int d = boringssl_session_get_ticket_offered(*((void *)v1 + 42));
          false_start_useunsigned int d = boringssl_session_get_false_start_used(*((void *)v1 + 42));
          ocsp_response_receiveunsigned int d = boringssl_session_get_ocsp_response_received(*((void *)v1 + 42));
          sct_receiveunsigned int d = boringssl_session_get_sct_received(*((void *)v1 + 42));
          handshake_time_munsigned int s = boringssl_session_get_handshake_time_ms(*((void *)v1 + 42));
          handshake_flight_time_munsigned int s = boringssl_session_get_handshake_flight_time_ms(*((void *)v1 + 42));
          handshake_rtt_munsigned int s = boringssl_session_get_handshake_rtt_ms(*((void *)v1 + 42));
          uint64_t v17 = boringssl_session_get_handshake_write_stall_count(*((void *)v1 + 42));
          stall_size_t count = boringssl_session_get_handshake_read_stall_count(*((void *)v1 + 42));
          *(_DWORD *)buf = 136450818;
          BOOL v28 = "nw_protocol_boringssl_signal_connected";
          __int16 v29 = 1024;
          int v30 = 747;
          __int16 v31 = 2082;
          id v32 = v1 + 391;
          __int16 v33 = 2048;
          int v34 = v1;
          __int16 v35 = 1024;
          unsigned int v36 = negotiated_protocol_version;
          __int16 v37 = 2080;
          id v38 = v23;
          __int16 v39 = 1024;
          unsigned int v40 = negotiated_group_id;
          __int16 v41 = 1024;
          unsigned int v42 = peer_signature_algorithm;
          __int16 v43 = 2082;
          uint64_t v44 = v20;
          __int16 v45 = 1024;
          int v46 = v19;
          __int16 v47 = 1024;
          BOOL v48 = ticket_offered;
          __int16 v49 = 1024;
          int v50 = false_start_used;
          __int16 v51 = 1024;
          int v52 = ocsp_response_received;
          __int16 v53 = 1024;
          int v54 = sct_received;
          __int16 v55 = 2048;
          uint64_t v56 = handshake_time_ms;
          __int16 v57 = 2048;
          uint64_t v58 = handshake_flight_time_ms;
          __int16 v59 = 2048;
          uint64_t v60 = handshake_rtt_ms;
          __int16 v61 = 2048;
          uint64_t v62 = v17;
          __int16 v63 = 2048;
          uint64_t v64 = stall_count;
          _os_log_impl(&dword_1BA0DE000, log, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] TLS connected [version(0x%04x) ciphersuite(%s) group(0x%04x) signature_alg(0x%04x) alpn(%{public}s) resumed(%d) offered_ticket(%d) false_started(%d) ocsp_received(%d) sct_received(%d) connect_time(%llums) flight_time(%llums) rtt(%llums) write_stalls(%zu) read_stalls(%zu)]", buf, 0x9Cu);
        }
      }
    }
    (*(void (**)(void))(*(void *)(*((void *)v1 + 7) + 24) + 40))();
    v1[390] |= 2u;
  }
}

uint64_t boringssl_session_get_handshake_time_ms(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 432) - *(void *)(v1 + 424);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_handshake_rtt_ms(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0)
    {
      unint64_t v2 = *(void *)(v1 + 464);
      unint64_t v3 = *(void *)(v1 + 456);
      BOOL v4 = v2 >= v3;
      unint64_t v5 = v2 - v3;
      if (v4) {
        return v5;
      }
      else {
        return -1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL boringssl_session_get_ticket_offered(BOOL result)
{
  if (result) {
    return *(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0 && *(char *)(v1 + 558) < 0;
  }
  return result;
}

SSL_SESSION *boringssl_session_get_peer_signature_algorithm(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -1252936367 && (v1 = *(void *)(a1 + 8)) != 0 && (unint64_t v2 = *(const SSL **)(v1 + 400)) != 0) {
    return SSL_get_peer_signature_algorithm(v2);
  }
  else {
    return 0;
  }
}

uint64_t boringssl_session_get_ocsp_response_received(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0)
    {
      uint64_t result = *(void *)(v1 + 400);
      if (result)
      {
        uint64_t v2 = 0;
        uint64_t v3 = 0;
        SSL_get0_ocsp_response(result, &v3, &v2);
        return v2 != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_handshake_write_stall_count(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 488);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_handshake_read_stall_count(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 496);
    }
    else {
      return 0;
    }
  }
  return result;
}

SSL_SESSION *SSL_get_peer_signature_algorithm(const SSL *a1)
{
  uint64_t result = SSL_get_session(a1);
  if (result) {
    return (SSL_SESSION *)*(unsigned __int16 *)result->key_arg;
  }
  return result;
}

SSL_SESSION *boringssl_session_get_negotiated_group_id(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -1252936367 && (v1 = *(void *)(a1 + 8)) != 0 && (uint64_t v2 = *(const SSL **)(v1 + 400)) != 0) {
    return SSL_get_curve_id(v2);
  }
  else {
    return 0;
  }
}

void *boringssl_session_get_negotiated_ciphersuite_name(uint64_t a1)
{
  int negotiated_ciphersuite = boringssl_session_get_negotiated_ciphersuite(a1);
  uint64_t result = SSL_get_cipher_by_value(negotiated_ciphersuite);
  if (result)
  {
    return (void *)EVP_HPKE_CTX_aead((uint64_t)result);
  }
  return result;
}

uint64_t boringssl_session_get_handshake_flight_time_ms(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 448);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_false_start_used(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(unsigned char *)(v1 + 557) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t EVP_HPKE_CTX_aead(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

const SSL *boringssl_session_ticket_lifetime_hint(const SSL *result)
{
  if (result)
  {
    if (result->version == -1252936367 && (methounsigned int d = result->method) != 0)
    {
      uint64_t result = (const SSL *)method[1].num_ciphers;
      if (result)
      {
        uint64_t result = (const SSL *)SSL_get_session(result);
        if (result) {
          return (const SSL *)SSL_SESSION_get_ticket_lifetime_hint((uint64_t)result);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_peer_public_key(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 344);
    }
    else {
      return 0;
    }
  }
  return result;
}

bssl *boringssl_session_get_ems_used(bssl *result, const ssl_st *a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v2 = *((void *)result + 1)) != 0)
    {
      uint64_t result = *(bssl **)(v2 + 400);
      if (result) {
        return (bssl *)(SSL_get_extms_support(result, a2) != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void boringssl_metrics_log_connection_data(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_DWORD *)a1 == -1252936367)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      xpc_object_t xdict = v3;
      xpc_dictionary_set_uint64(v3, (const char *)TLS_METRIC_HANDSHAKE_TIMER_FIRES, *(void *)(v4 + 328));
      unint64_t v5 = (const char *)TLS_METRIC_HANDSHAKE_RTT;
      handshake_rtt_munsigned int s = boringssl_session_get_handshake_rtt_ms(a1);
      xpc_dictionary_set_uint64(xdict, v5, handshake_rtt_ms);
      char v7 = (const char *)TLS_METRIC_HANDSHAKE_INBOUND_BYTE_COUNT;
      handshake_inbound_byte_size_t count = boringssl_session_get_handshake_inbound_byte_count(a1);
      xpc_dictionary_set_uint64(xdict, v7, handshake_inbound_byte_count);
      char v9 = (const char *)TLS_METRIC_HANDSHAKE_OUTBOUND_BYTE_COUNT;
      handshake_outbound_byte_size_t count = boringssl_session_get_handshake_outbound_byte_count(a1);
      xpc_dictionary_set_uint64(xdict, v9, handshake_outbound_byte_count);
      size_t v11 = (const char *)TLS_METRIC_HANDSHAKE_BYTE_COUNT;
      handshake_byte_size_t count = boringssl_session_get_handshake_byte_count(a1);
      xpc_dictionary_set_uint64(xdict, v11, handshake_byte_count);
      size_t v13 = (const char *)TLS_METRIC_HANDSHAKE_READ_STALLS;
      stall_size_t count = boringssl_session_get_handshake_read_stall_count(a1);
      xpc_dictionary_set_uint64(xdict, v13, stall_count);
      size_t v15 = (const char *)TLS_METRIC_HANDSHAKE_WRITE_STALLS;
      uint64_t v16 = boringssl_session_get_handshake_write_stall_count(a1);
      xpc_dictionary_set_uint64(xdict, v15, v16);
      uint64_t v17 = (const char *)TLS_METRIC_HANDSHAKE_ASYNC_CALLS;
      handshake_async_size_t count = boringssl_session_get_handshake_async_count(a1);
      xpc_dictionary_set_uint64(xdict, v17, handshake_async_count);
      int v19 = (const char *)TLS_METRIC_ADDRESS_FAMILY;
      unsigned int address_family = boringssl_session_get_address_family(a1);
      xpc_dictionary_set_uint64(xdict, v19, address_family);
      id v3 = xdict;
    }
  }
}

uint64_t boringssl_session_get_handshake_outbound_byte_count(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 472);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_handshake_inbound_byte_count(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 480);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_handshake_byte_count(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 472) + *(void *)(v1 + 480);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_handshake_async_count(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 504);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_address_family(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(unsigned __int8 *)(v1 + 225);
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL boringssl_context_negotiated_protocol_is_unknown(uint64_t a1, char *__s)
{
  if (a1 && *(_DWORD *)a1 == -1252936367 && (uint64_t v2 = *(void *)(a1 + 8)) != 0 && (*(unsigned char *)(v2 + 557) & 0x40) != 0)
  {
    if (__s)
    {
      size_t v6 = strlen(__s);
      id v7 = *(id *)(v2 + 64);
      size_t count = xpc_array_get_count(v7);
      if (count)
      {
        size_t v9 = count;
        BOOL v3 = 0;
        for (i = 0; i != v9; BOOL v3 = i >= v9)
        {
          string = xpc_array_get_string(v7, i);
          if (v6 == strlen(string) && !strncmp(__s, string, v6)) {
            break;
          }
          ++i;
        }
      }
      else
      {
        BOOL v3 = 1;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t SSL_get_extms_support(bssl *a1, const ssl_st *a2)
{
  if ((*(_WORD *)(*((void *)a1 + 6) + 220) & 2) == 0) {
    return 0;
  }
  if (bssl::ssl_protocol_version(a1, a2) > 0x303) {
    return 1;
  }
  uint64_t v4 = *((void *)a1 + 6);
  uint64_t v5 = *(void *)(v4 + 472);
  if (v5) {
    return *(unsigned char *)(v5 + 440) & 1;
  }
  uint64_t v6 = *(void *)(v4 + 280);
  if (!v6) {
    SSL_get_extms_support_cold_1();
  }
  return HIWORD(*(_DWORD *)(v6 + 1584)) & 1;
}

uint64_t SSL_SESSION_get_ticket_lifetime_hint(uint64_t a1)
{
  return *(unsigned int *)(a1 + 372);
}

__CFArray *boringssl_helper_copy_certificates_from_session(void *a1, const SSL *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  if (v4 && a2)
  {
    uint64_t v6 = (unint64_t *)SSL_get0_peer_certificates(a2);
    if (v6)
    {
      uint64_t v5 = boringssl_helper_copy_certificates_from_CRYPTO_BUFFERs(v4, v6);
      goto LABEL_21;
    }
    id WeakRetained = objc_loadWeakRetained(v4 + 2);
    if (WeakRetained)
    {
      CFAllocatorRef v8 = WeakRetained;
      size_t v9 = (unsigned __int8 *)objc_loadWeakRetained(v4 + 2);
      uint64_t v2 = (char *)v9[475];

      if (v2)
      {
LABEL_20:
        uint64_t v5 = 0;
        goto LABEL_21;
      }
    }
    id v10 = objc_loadWeakRetained(v4 + 2);
    if (v10)
    {
      size_t v11 = objc_loadWeakRetained(v4 + 2);
      BOOL v12 = (v11[475] & 1) == 0;
    }
    else
    {
      BOOL v12 = 1;
    }

    uint64_t v5 = 0;
    if (v12 && g_boringssl_log)
    {
      size_t v13 = (id)g_boringssl_log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        id v14 = objc_loadWeakRetained(v4 + 2);
        if (v14)
        {
          uint64_t v2 = (char *)objc_loadWeakRetained(v4 + 2);
          size_t v15 = v2 + 391;
        }
        else
        {
          size_t v15 = &unk_1BA179713;
        }
        id v16 = objc_loadWeakRetained(v4 + 2);
        int v18 = 136446978;
        int v19 = "boringssl_helper_copy_certificates_from_session";
        __int16 v20 = 1024;
        int v21 = 188;
        __int16 v22 = 2082;
        char v23 = v15;
        __int16 v24 = 2048;
        id v25 = v16;
        _os_log_impl(&dword_1BA0DE000, v13, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] SSL_get0_peer_certificates returned no certificates", (uint8_t *)&v18, 0x26u);

        if (v14) {
      }
        }

      goto LABEL_20;
    }
  }
LABEL_21:

  return v5;
}

SSL_SESSION *SSL_get0_peer_certificates(const SSL *a1)
{
  uint64_t result = SSL_get_session(a1);
  if (result) {
    return *(SSL_SESSION **)&result->sid_ctx[28];
  }
  return result;
}

uint64_t nw_protocol_boringssl_disconnect(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 40);
    if (v2)
    {
      if ((*(unsigned char *)(v2 + 475) & 1) == 0
        && datapath_logging_enabled
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_disconnect_cold_1();
      }
      uint64_t result = *(void *)(v2 + 336);
      if (result)
      {
        *(unsigned char *)(v2 + 388) &= ~0x20u;
        if (boringssl_session_get_state(result) <= 3)
        {
          boringssl_session_set_state(*(void *)(v2 + 336), 3);
          boringssl_session_disconnect(*(void *)(v2 + 336));
        }
        boringssl_session_set_state(*(void *)(v2 + 336), 4);
        uint64_t result = *(void *)(v1 + 32);
        if (result)
        {
          uint64_t v3 = *(void *)(result + 24);
          if (v3)
          {
            uint64_t v4 = *(uint64_t (**)(void))(v3 + 32);
            if (v4) {
              return v4();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t boringssl_session_disconnect(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(SSL **)(v2 + 400);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  int v4 = SSL_shutdown(v3);
  if (*(_DWORD *)a1 == -1252936367)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5) {
      *(_DWORD *)(v5 + 30std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = 3;
    }
  }
  return (v4 >> 31);
}

int SSL_shutdown(SSL *s)
{
  *((_DWORD *)s->handshake_func + 49) = 0;
  ERR_clear_error();
  ERR_clear_system_error();
  if (!*(void *)&s->rwstate)
  {
    int v5 = 226;
    int v6 = 1412;
LABEL_12:
    ERR_put_error(16, 0, v5, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", v6);
    return -1;
  }
  handshake_func = s->handshake_func;
  uint64_t v3 = *((void *)handshake_func + 35);
  if (v3 && (*(unsigned char *)(v3 + 1584) & 8) == 0) {
    return 1;
  }
  if ((BYTE4(s->param) & 2) != 0)
  {
    *(void *)((char *)handshake_func + 172) = 0x100000001;
    return 1;
  }
  if (*((_DWORD *)handshake_func + 44) != 1)
  {
    int v8 = bssl::ssl_send_alert_impl((bssl *)s, (ssl_st *)1, 0);
    goto LABEL_18;
  }
  if ((*((_WORD *)handshake_func + 110) & 0x800) != 0)
  {
    int v8 = (*(uint64_t (**)(SSL *))(*(void *)&s->version + 80))(s);
LABEL_18:
    if (v8 < 1) {
      return -1;
    }
    return *((_DWORD *)s->handshake_func + 43) == 1;
  }
  int v4 = *((_DWORD *)handshake_func + 43);
  if (v4 != 1)
  {
    if (**(unsigned char **)&s->version)
    {
      if (v4 == 2)
      {
        ERR_restore_state(*((void **)handshake_func + 23));
        return -1;
      }
      *((_DWORD *)handshake_func + 43) = 1;
      return *((_DWORD *)s->handshake_func + 43) == 1;
    }
    if ((int)ssl_read_impl(s) >= 1)
    {
      int v5 = 291;
      int v6 = 1459;
      goto LABEL_12;
    }
    if (*((_DWORD *)s->handshake_func + 43) != 1) {
      return -1;
    }
  }
  return *((_DWORD *)s->handshake_func + 43) == 1;
}

uint64_t bssl::ssl_send_alert_impl(bssl *this, ssl_st *a2, int a3)
{
  uint64_t v3 = *((void *)this + 6);
  if (*(_DWORD *)(v3 + 176))
  {
    ERR_put_error(16, 0, 194, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_pkt.cc", 412);
    return 0xFFFFFFFFLL;
  }
  if (a2 != 1 || a3)
  {
    if (a2 != 2) {
      bssl::ssl_send_alert_impl();
    }
    if (!a3) {
      bssl::ssl_send_alert_impl();
    }
    int v4 = 2;
  }
  else
  {
    int v4 = 1;
  }
  *(_DWORD *)(v3 + 176) = v4;
  *(_WORD *)(v3 + 220) |= 0x800u;
  *(unsigned char *)(*((void *)this + 6) + 469) = (_BYTE)a2;
  *(unsigned char *)(*((void *)this + 6) + 47std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)this, 0) = a3;
  if (*(_WORD *)(*((void *)this + 6) + 116)) {
    return 0xFFFFFFFFLL;
  }
  int v6 = *(uint64_t (**)(void))(*(void *)this + 80);

  return v6();
}

uint64_t bssl::tls_dispatch_alert(bssl *this, ssl_st *a2)
{
  uint64_t v3 = *((void *)this + 21);
  if (v3)
  {
    if (!(*(unsigned int (**)(bssl *, void, void))(v3 + 32))(this, *(unsigned int *)(*((void *)this + 6) + 204), *(unsigned __int8 *)(*((void *)this + 6) + 470)))
    {
      ERR_put_error(16, 0, 298, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_pkt.cc", 441);
      return 0;
    }
    goto LABEL_10;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = bssl::do_tls_write(this, (ssl_st *)&v9, (ssl_st *)0x15, *((void *)this + 6) + 469, (const unsigned __int8 *)2);
  if ((int)v5 >= 1 && v9 != 2) {
    bssl::tls_dispatch_alert();
  }
  uint64_t v4 = v5;
  if ((int)v5 >= 1)
  {
LABEL_10:
    *(_WORD *)(*((void *)this + 6) + 220) &= ~0x800u;
    uint64_t v7 = *((void *)this + 6);
    if (*(unsigned char *)(v7 + 469) == 2)
    {
      BIO_flush(*((BIO **)this + 4));
      uint64_t v7 = *((void *)this + 6);
    }
    uint64_t v4 = 1;
    bssl::ssl_do_msg_callback((uint64_t)this, 1, 21, v7 + 469, 2);
    bssl::ssl_do_info_callback((uint64_t)this, (const ssl_st *)0x4008);
  }
  return v4;
}

uint64_t bssl::tls13_init_key_schedule(uint64_t a1, const ssl_st *a2)
{
  uint64_t v3 = (size_t **)(a1 + 424);
  uint64_t v4 = (bssl::SSLTranscript *)bssl::ssl_protocol_version(*(bssl **)a1, a2);
  uint64_t result = bssl::init_key_schedule((bssl *)a1, v3, v4, *(ssl_cipher_st **)(a1 + 1552), v5);
  if (result)
  {
    if ((*(unsigned char *)(a1 + 1586) & 4) == 0) {
      bssl::SSLTranscript::FreeBuffer((BUF_MEM **)v3);
    }
    return bssl::hkdf_extract_to_secret(a1, (bssl::SSLTranscript *)v3);
  }
  return result;
}

uint64_t bssl::init_key_schedule(bssl *this, size_t **a2, bssl::SSLTranscript *a3, ssl_cipher_st *a4, const ssl_cipher_st *a5)
{
  initeunsigned int d = bssl::SSLTranscript::InitHash(a2, a3, a4);
  if (inited)
  {
    unint64_t v8 = bssl::SSLTranscript::DigestLen((bssl::SSLTranscript *)a2);
    bssl::SSL_HANDSHAKE::ResizeSecrets((uint64_t)this, v8);
    size_t v9 = *((void *)this + 4);
    if (v9) {
      bzero((char *)this + 40, v9);
    }
  }
  return inited;
}

uint64_t bssl::SSL_HANDSHAKE::ResizeSecrets(uint64_t this, unint64_t a2)
{
  if (a2 >= 0x31) {
    abort();
  }
  *(void *)(this + 32) = a2;
  return this;
}

void bssl::SSLTranscript::FreeBuffer(BUF_MEM **this)
{
}

uint64_t bssl::tls13_derive_resumption_secret(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3 = (bssl *)((char *)this + 424);
  if ((unint64_t)bssl::SSLTranscript::DigestLen((bssl *)((char *)this + 424)) < 0x31)
  {
    unsigned __int8 v5 = bssl::SSLTranscript::DigestLen(v3);
    uint64_t v6 = *((void *)this + 190);
    *(unsigned char *)(v6 + 1std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v5;
    return bssl::derive_secret_with_transcript((uint64_t)this, (int)v6 + 11, v5, v3, "res master", 0xAuLL);
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_enc.cc", 309);
    return 0;
  }
}

uint64_t bssl::SSLTranscript::DigestLen(bssl::SSLTranscript *this)
{
  uint64_t v1 = EVP_MD_CTX_md((const EVP_MD_CTX *)((char *)this + 8));

  return EVP_MD_size(v1);
}

uint64_t __nw_protocol_boringssl_input_available_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  nw_frame_unclaimed_bytes();
  char v4 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  uint64_t v5 = *(void *)(a1 + 32);
  if ((v4 & 1) == 0
    && (!v5 || (*(unsigned char *)(v5 + 475) & 1) == 0)
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
  {
    __nw_protocol_boringssl_input_available_block_invoke_cold_1();
  }
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

void *__boringssl_context_set_enable_message_mode_block_invoke(uint64_t a1, int a2, const void *a3, size_t a4)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      goto LABEL_5;
    case 3:
      uint64_t result = SSL_provide_quic_data(*(void *)(*(void *)(a1 + 32) + 400), 3, a3, a4);
      if (!result) {
        return result;
      }
      unsigned int v6 = SSL_process_quic_post_handshake(*(void **)(*(void *)(a1 + 32) + 400));
      return (void *)(v6 != 0);
    default:
      a2 = -1431655766;
LABEL_5:
      unsigned int v6 = SSL_provide_quic_data(*(void *)(*(void *)(a1 + 32) + 400), a2, a3, a4);
      return (void *)(v6 != 0);
  }
}

void *SSL_provide_quic_data(uint64_t a1, int a2, const void *a3, size_t a4)
{
  if (!*(void *)(a1 + 168))
  {
    int v9 = 66;
    int v10 = 864;
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(_DWORD *)(v5 + 200) != a2)
  {
    int v9 = 299;
    int v10 = 869;
    goto LABEL_10;
  }
  unint64_t v8 = *(void **)(v5 + 224);
  if (v8) {
    unint64_t v8 = (void *)*v8;
  }
  if (__CFADD__(v8, a4) || (unint64_t)v8 + a4 > SSL_quic_max_handshake_flight_len(a1, a2))
  {
    int v9 = 150;
    int v10 = 876;
LABEL_10:
    ERR_put_error(16, 0, v9, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", v10);
    return 0;
  }
  return bssl::tls_append_handshake_data(a1, a3, a4);
}

uint64_t SSL_quic_max_handshake_flight_len(uint64_t a1, int a2)
{
  unsigned int v2 = 0x4000;
  switch(a2)
  {
    case 0:
    case 3:
      return v2;
    case 2:
      if (*(unsigned char *)(a1 + 180))
      {
        if ((*(unsigned char *)(*(void *)(a1 + 8) + 300) & 1) == 0) {
          return 0x4000;
        }
        unsigned int v2 = *(_DWORD *)(a1 + 152);
      }
      else
      {
        unsigned int v2 = 2 * *(_DWORD *)(a1 + 152);
      }
      if (v2 > 0x4000) {
        return v2;
      }
      return 0x4000;
    default:
      return 0;
  }
}

BOOL __nw_protocol_boringssl_write_frames_block_invoke_133(uint64_t a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v25 = 0;
  int v24 = 0;
  uint64_t v5 = (uint64_t *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v4 + 176);
  if (v6)
  {
    uint64_t v25 = *(void *)(v4 + 176);
    int v24 = *(_DWORD *)(v4 + 184);
  }
  else if (nw_frame_uses_external_data())
  {
    uint64_t v7 = nw_frame_get_external_data();
    unint64_t v8 = v7;
    if (v7)
    {
      id v9 = nw_dispatch_data_create_subrange_map(v7, 0, 0, &v25);
      int v10 = *(void **)(*v5 + 168);
      *(void *)(*v5 + 168) = v9;

      uint64_t v11 = *v5;
      if (*(void *)(*v5 + 168))
      {
        *(void *)(v11 + 176) = v25;
        *(_DWORD *)(*v5 + 184) = 0;
      }
      else if ((*(unsigned char *)(v11 + 475) & 1) == 0)
      {
        int v21 = g_boringssl_log;
        if (g_boringssl_log)
        {
          if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
          {
            uint64_t v22 = *v5;
            char v23 = (void *)(*v5 + 391);
            if (!*v5) {
              char v23 = &unk_1BA179713;
            }
            *(_DWORD *)buf = 136447746;
            uint64_t v27 = "nw_protocol_boringssl_write_frames_block_invoke";
            __int16 v28 = 1024;
            int v29 = 1046;
            __int16 v30 = 2082;
            __int16 v31 = v23;
            __int16 v32 = 2048;
            uint64_t v33 = v22;
            __int16 v34 = 2112;
            __int16 v35 = v8;
            __int16 v36 = 1024;
            int v37 = 0;
            __int16 v38 = 1024;
            int v39 = 0;
            _os_log_error_impl(&dword_1BA0DE000, v21, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] Failed to flatten external data %@ (offset %u, unclaimed %u)", buf, 0x3Cu);
          }
        }
      }
    }

    uint64_t v6 = v25;
  }
  else
  {
    uint64_t v6 = nw_frame_unclaimed_bytes();
    uint64_t v25 = v6;
  }
  if (v6) {
    BOOL v12 = v24 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    int v13 = (*(uint64_t (**)(void))(*v5 + 88))(*(void *)(*v5 + 336));
    int v14 = v13;
    if (v13 >= 1)
    {
      uint64_t v15 = *(void *)(*v5 + 176);
      if (v15)
      {
        *(void *)(*v5 + 176) = v15 + v13;
        *(_DWORD *)(*v5 + 184) -= v13;
      }
      else
      {
        nw_frame_claim();
      }
    }
    int v16 = v24;
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    if ((!*v5 || (*(unsigned char *)(*v5 + 475) & 1) == 0) && g_boringssl_log)
    {
      if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
        __nw_protocol_boringssl_write_frames_block_invoke_133_cold_1();
      }
      int v16 = v24;
      if ((v24 & 0x80000000) == 0)
      {
LABEL_19:
        if (v14 < v16) {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
        }
      }
    }
  }
  uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8);
  int v18 = *(unsigned __int8 *)(v17 + 24);
  if (*(unsigned char *)(v17 + 24))
  {
    int v19 = *(void **)(*v5 + 168);
    *(void *)(*v5 + 168) = 0;

    *(void *)(*v5 + 176) = 0;
    *(_DWORD *)(*v5 + 184) = 0;
    nw_frame_array_remove();
    nw_frame_finalize();
  }

  return v18 != 0;
}

void nw_protocol_boringssl_frame_output_finalizer(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  uint64_t v6 = v5;
  if ((!v5 || (*((unsigned char *)v5 + 475) & 1) == 0)
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_frame_output_finalizer_cold_1();
  }
  if (v4 && v6)
  {
    nw_frame_array_remove();
    if (nw_frame_uses_external_data())
    {
      nw_frame_set_external_data();
    }
    else
    {
      uint64_t buffer = (void *)nw_frame_get_buffer();
      if (buffer) {
        free(buffer);
      }
    }
    nw_frame_reset();
  }
}

uint64_t boringssl_session_write(void *a1, const void *a2, int a3)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v4 = a1[1];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a3)
  {
    if (a2)
    {
      uint64_t v6 = *(SSL **)(v4 + 400);
      if (v6)
      {
        uint64_t v5 = SSL_write(v6, a2, a3);
        if ((int)v5 <= 0)
        {
          uint64_t error = SSL_get_error(*(const SSL **)(v4 + 400), v5);
          id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
          if (!WeakRetained
            || (id v9 = WeakRetained,
                int v10 = objc_loadWeakRetained((id *)(v4 + 16)),
                char v11 = v10[475],
                v10,
                v9,
                (v11 & 1) == 0))
          {
            id v12 = objc_loadWeakRetained((id *)(v4 + 16));
            if (v12)
            {
              int v13 = objc_loadWeakRetained((id *)(v4 + 16));
              char v14 = v13[475] & 1;
            }
            else
            {
              char v14 = 0;
            }

            if ((v14 & 1) == 0 && datapath_logging_enabled && g_boringssl_log)
            {
              int v16 = (id)g_boringssl_log;
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
                boringssl_session_write_cold_1(v4, error, v16);
              }
            }
          }
          if (error == 3) {
            ++*(void *)(v4 + 488);
          }
          else {
            ERR_print_errors_cb((int (__cdecl *)(const char *, size_t, void *))boringssl_session_handshake_error_print, a1);
          }
        }
      }
    }
  }
  return v5;
}

int SSL_write(SSL *ssl, const void *buf, int num)
{
  *((_DWORD *)ssl->handshake_func + 49) = 0;
  ERR_clear_error();
  ERR_clear_system_error();
  if (*(void *)&ssl->hit)
  {
    int v6 = 66;
    int v7 = 1340;
LABEL_3:
    ERR_put_error(16, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", v7);
    return -1;
  }
  if (!*(void *)&ssl->rwstate)
  {
    int v6 = 226;
    int v7 = 1345;
    goto LABEL_3;
  }
  uint64_t v11 = 0;
  char v10 = 0;
  do
  {
    uint64_t v9 = *((void *)ssl->handshake_func + 35);
    if (v9 && (*(_WORD *)(v9 + 1584) & 0x2008) == 0)
    {
      int result = SSL_do_handshake(ssl);
      if (result < 0) {
        return result;
      }
      if (!result)
      {
        int v6 = 215;
        int v7 = 1360;
        goto LABEL_3;
      }
    }
    if (num < 0)
    {
      int v6 = 111;
      int v7 = 1366;
      goto LABEL_3;
    }
    int result = (*(uint64_t (**)(SSL *, char *, uint64_t *, const void *, void))(*(void *)&ssl->version + 72))(ssl, &v10, &v11, buf, num);
  }
  while (v10);
  if (result >= 1) {
    return v11;
  }
  return result;
}

uint64_t bssl::tls_write_app_data(uint64_t a1, ssl_st *a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  if ((bssl::ssl_can_write((bssl *)a1, a2) & 1) == 0) {
    bssl::tls_write_app_data();
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (!**(void **)(v10 + 272)) {
    bssl::tls_write_app_data();
  }
  LOBYTE(a2->version) = 0;
  if (*(_DWORD *)(v10 + 176))
  {
    int v11 = 194;
    int v12 = 140;
    goto LABEL_7;
  }
  unint64_t v13 = *(void *)(v10 + 144);
  unint64_t v14 = a5 - v13;
  if (a5 < v13)
  {
    int v11 = 111;
    int v12 = 152;
LABEL_7:
    ERR_put_error(16, 0, v11, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_pkt.cc", v12);
    return 0xFFFFFFFFLL;
  }
  unint64_t v16 = a4 + v13;
  if ((*(unsigned char *)(a1 + 180) & 1) != 0 || !SSL_in_early_data(a1)) {
    int v17 = 0;
  }
  else {
    int v17 = (*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 280) + 1585) >> 5) & 1;
  }
  while (1)
  {
    unint64_t v18 = *(unsigned __int16 *)(a1 + 18);
    if (v17)
    {
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = *(void *)(v19 + 280);
      unsigned int v21 = *(unsigned __int16 *)(v20 + 1592);
      unsigned int v22 = *(_DWORD *)(*(void *)(v20 + 1528) + 380);
      BOOL v23 = v22 >= v21;
      unint64_t v24 = v22 - v21;
      if (v24 == 0 || !v23)
      {
        *(void *)(v19 + 144) = v13;
        *(_DWORD *)(v20 + 1584) &= ~0x2000u;
        LOBYTE(a2->version) = 1;
        return 0xFFFFFFFFLL;
      }
      if (v24 < v18) {
        unint64_t v18 = v24;
      }
    }
    uint64_t v25 = (const unsigned __int8 *)(v14 >= v18 ? v18 : v14);
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = bssl::do_tls_write((bssl *)a1, (ssl_st *)&v27, (ssl_st *)0x17, v16, v25);
    if ((int)result <= 0) {
      break;
    }
    unint64_t v26 = v27;
    if (v27 > (unint64_t)v25) {
      bssl::tls_write_app_data();
    }
    if (v17) {
      *(_WORD *)(*(void *)(*(void *)(a1 + 48) + 280) + 1592) += v27;
    }
    v13 += v26;
    v14 -= v26;
    if (!v14 || (*(unsigned char *)(a1 + 148) & 1) != 0)
    {
      *(void *)(*(void *)(a1 + 48) + 144) = 0;
      *a3 = v13;
      return result;
    }
    v16 += v26;
  }
  *(void *)(*(void *)(a1 + 48) + 144) = v13;
  return result;
}

uint64_t bssl::ssl_can_write(bssl *this, const ssl_st *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 6) + 280);
  if (!v2) {
    return 1;
  }
  unsigned int v3 = *(_DWORD *)(v2 + 1584);
  if ((v3 & 8) != 0) {
    return 1;
  }
  else {
    return (v3 >> 13) & 1;
  }
}

id nw_dispatch_data_create_subrange_map(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v7 = a1;
  unint64_t v8 = v7;
  if (a4)
  {
    if (a3)
    {
      uint64_t v22 = 0;
      BOOL v23 = &v22;
      uint64_t v24 = 0x3032000000;
      uint64_t v25 = __Block_byref_object_copy_;
      unint64_t v26 = __Block_byref_object_dispose_;
      id v27 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = &v18;
      uint64_t v20 = 0x2020000000;
      uint64_t v21 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = &v14;
      uint64_t v16 = 0x2020000000;
      uint64_t v17 = 0;
      v13[0] = 0;
      v13[1] = v13;
      int64x2_t v13[2] = 0x2020000000;
      _OWORD v13[3] = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      long long v12[2] = __nw_dispatch_data_create_subrange_map_block_invoke;
      _OWORD v12[3] = &unk_1E61F2D68;
      v12[8] = a2;
      v12[9] = a3;
      void v12[4] = &v22;
      v12[5] = &v18;
      v12[6] = &v14;
      v12[7] = v13;
      dispatch_data_apply(v7, v12);
      id v9 = 0;
      if (v19[3] == a3)
      {
        *a4 = v15[3];
        id v9 = (id)v23[5];
      }
      _Block_object_dispose(v13, 8);
      _Block_object_dispose(&v14, 8);
      _Block_object_dispose(&v18, 8);
      _Block_object_dispose(&v22, 8);
    }
    else
    {
      id v9 = (id)MEMORY[0x1E4F14410];
      id v10 = MEMORY[0x1E4F14410];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

uint64_t __nw_dispatch_data_create_subrange_map_block_invoke(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = a2;
  unint64_t v11 = a1[8];
  if (a5 + a3 > v11)
  {
    size_t v12 = a1[9];
    size_t v13 = v12 + v11;
    if (v12 + v11 > a3)
    {
      BOOL v14 = v11 >= a3;
      unint64_t v15 = v11 - a3;
      if (v11 > a3) {
        a3 = a1[8];
      }
      if (!v14) {
        unint64_t v15 = 0;
      }
      uint64_t v16 = (const void *)(a4 + v15);
      size_t v17 = a5 - v15;
      uint64_t v18 = *(void *)(a1[4] + 8);
      uint64_t v20 = *(void *)(v18 + 40);
      uint64_t v19 = (id *)(v18 + 40);
      if (v20) {
        goto LABEL_8;
      }
      if (v17 >= v12)
      {
        objc_storeStrong(v19, a2);
        uint64_t v22 = 0;
        *(void *)(*(void *)(a1[5] + 8) + 24) = a1[9];
        *(void *)(*(void *)(a1[6] + 8) + 24) = v16;
        goto LABEL_17;
      }
      uint64_t alloc = dispatch_data_create_alloc();
      uint64_t v24 = *(void *)(a1[4] + 8);
      uint64_t v25 = *(void **)(v24 + 40);
      *(void *)(v24 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = alloc;

      if (*(void *)(*(void *)(a1[4] + 8) + 40))
      {
        *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(*(void *)(a1[7] + 8) + 24);
        unint64_t v11 = a1[8];
        size_t v13 = a1[9] + v11;
LABEL_8:
        if (v17 + a3 <= v13) {
          size_t v21 = v17;
        }
        else {
          size_t v21 = v13 - a3;
        }
        memcpy((void *)(*(void *)(*(void *)(a1[7] + 8) + 24) + a3 - v11), v16, v21);
        *(void *)(*(void *)(a1[5] + 8) + 24) += v21;
        goto LABEL_12;
      }
    }
    uint64_t v22 = 0;
    goto LABEL_17;
  }
LABEL_12:
  uint64_t v22 = 1;
LABEL_17:

  return v22;
}

uint64_t bssl::tls_flush_flight(BIO **this, ssl_st *a2)
{
  if (!bssl::tls_flush_pending_hs_data((bssl *)this, a2)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = this[21];
  if (v4)
  {
    if (LODWORD(this[6][1].prev_bio))
    {
      int v5 = 194;
      int v6 = 291;
LABEL_12:
      ERR_put_error(16, 0, v5, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", v6);
      return 0xFFFFFFFFLL;
    }
    if (!(*(unsigned int (**)(BIO **))&v4->init)(this))
    {
      int v5 = 298;
      int v6 = 296;
      goto LABEL_12;
    }
  }
  int v7 = this[6];
  cb_arg = v7[2].cb_arg;
  if (!cb_arg) {
    return 1;
  }
  if (LODWORD(v7[1].prev_bio))
  {
    int v5 = 194;
    int v6 = 306;
    goto LABEL_12;
  }
  if (*(void *)cb_arg >> 31)
  {
    int v5 = 68;
    int v6 = 312;
    goto LABEL_12;
  }
  if (WORD2(v7[1].method))
  {
    uint64_t result = bssl::ssl_write_buffer_flush((bssl *)this, v3);
    if ((int)result <= 0)
    {
      HIDWORD(this[6][1].num_read) = 3;
      return result;
    }
  }
  id v10 = this[4];
  if (!v10)
  {
    int v5 = 119;
    int v6 = 327;
    goto LABEL_12;
  }
  unint64_t v11 = this[6];
  unint64_t init = v11[2].init;
  size_t v13 = v11[2].cb_arg;
  uint64_t v14 = *(void *)v13;
  if (*(void *)v13 <= init)
  {
LABEL_21:
    int v16 = BIO_flush(v10);
    size_t v17 = this[6];
    if (v16 <= 0)
    {
      HIDWORD(v17[1].num_read) = 3;
      return 0xFFFFFFFFLL;
    }
    std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)&v17[2].cb_arg, 0);
    this[6][2].unint64_t init = 0;
    return 1;
  }
  while (1)
  {
    uint64_t result = BIO_write(this[4], (const void *)(*((void *)v13 + 1) + init), v14 - init);
    unint64_t v15 = this[6];
    if ((int)result <= 0) {
      break;
    }
    unint64_t init = (v15[2].init + result);
    v15[2].unint64_t init = init;
    size_t v13 = v15[2].cb_arg;
    uint64_t v14 = *(void *)v13;
    if (*(void *)v13 <= init)
    {
      id v10 = this[4];
      goto LABEL_21;
    }
  }
  HIDWORD(v15[1].num_read) = 3;
  return result;
}

uint64_t bssl::add_record_to_flight(bssl *a1, ssl_st *a2, unint64_t a3, const unsigned __int8 *a4)
{
  uint64_t v4 = *((void *)a1 + 6);
  if (*(void *)(v4 + 232)) {
    bssl::add_record_to_flight();
  }
  if (*(_DWORD *)(v4 + 248)) {
    bssl::add_record_to_flight();
  }
  uint64_t v10 = *(void *)(v4 + 240);
  id v9 = (BUF_MEM **)(v4 + 240);
  if (!v10)
  {
    unint64_t v11 = BUF_MEM_new();
    std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](v9, v11);
    if (!*(void *)(*((void *)a1 + 6) + 240)) {
      return 0;
    }
  }
  uint64_t v12 = SSL_max_seal_overhead(a1);
  size_t v13 = &a4[v12];
  BOOL v14 = __CFADD__(v12, a4);
  unint64_t v15 = *(void **)(*((void *)a1 + 6) + 240);
  unint64_t v16 = (unint64_t)&v13[*v15];
  BOOL v17 = __CFADD__(*v15, v13);
  if (v14 || v17)
  {
    ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", 154);
    return 0;
  }
  *(void *)uint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = BUF_MEM_reserve((uint64_t)v15, v16);
  if (result)
  {
    uint64_t result = bssl::tls_seal_record(a1, (ssl_st *)(*(void *)(*(void *)(*((void *)a1 + 6) + 240) + 8)+ **(void **)(*((void *)a1 + 6) + 240)), v19, v13, a2, a3, a4);
    if (result)
    {
      **(void **)(*((void *)a1 + 6) + 240) += *(void *)v19;
      return 1;
    }
  }
  return result;
}

void *bssl::tls_append_handshake_data(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = *(void **)(v6 + 224);
  unint64_t v8 = (BUF_MEM **)(v6 + 224);
  uint64_t result = v9;
  if (v9) {
    return (void *)(BUF_MEM_append(result, a2, a3) != 0);
  }
  uint64_t v10 = BUF_MEM_new();
  std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](v8, v10);
  uint64_t result = *(void **)(*(void *)(a1 + 48) + 224);
  if (result) {
    return (void *)(BUF_MEM_append(result, a2, a3) != 0);
  }
  return result;
}

void std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](BUF_MEM **a1, BUF_MEM *a2)
{
  unsigned int v3 = *a1;
  *a1 = a2;
  if (v3) {
    BUF_MEM_free(v3);
  }
}

uint64_t BUF_MEM_append(void *a1, const void *a2, size_t a3)
{
  if (!a3) {
    return 1;
  }
  size_t v5 = *a1 + a3;
  if (__CFADD__(*a1, a3))
  {
    ERR_put_error(7, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/buf/buf.c", 127);
    return 0;
  }
  else
  {
    uint64_t result = BUF_MEM_reserve((uint64_t)a1, *a1 + a3);
    if (result)
    {
      memcpy((void *)(a1[1] + *a1), a2, a3);
      *a1 = v5;
      return 1;
    }
  }
  return result;
}

uint64_t BUF_MEM_reserve(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) >= a2) {
    return 1;
  }
  if (a2 < 0xFFFFFFFFFFFFFFFDLL)
  {
    if (a2 >= 0xBFFFFFFFFFFFFFFDLL)
    {
      int v2 = 91;
      goto LABEL_9;
    }
    unint64_t v4 = (2 * (((a2 + 3) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t result = (uint64_t)OPENSSL_realloc(*(void **)(a1 + 8), v4);
    if (!result) {
      return result;
    }
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = v4;
    return 1;
  }
  int v2 = 85;
LABEL_9:
  ERR_put_error(7, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/buf/buf.c", v2);
  return 0;
}

void BUF_MEM_free(BUF_MEM *a)
{
  if (a)
  {
    OPENSSL_free((void *)a->data);
    OPENSSL_free(a);
  }
}

BUF_MEM *BUF_MEM_new(void)
{
  return (BUF_MEM *)OPENSSL_zalloc(0x18uLL);
}

uint64_t bssl::do_tls_write(bssl *this, ssl_st *a2, ssl_st *a3, unint64_t a4, const unsigned __int8 *a5)
{
  uint64_t v10 = *((void *)this + 6);
  unint64_t v11 = *(void *)(v10 + 160);
  if (v11
    && (v11 > (unint64_t)a5
     || (*((unsigned char *)this + 148) & 2) == 0 && *(void *)(v10 + 152) != a4
     || *(unsigned __int8 *)(v10 + 168) != a3))
  {
    int v16 = 118;
    int v17 = 212;
LABEL_10:
    ERR_put_error(16, 0, v16, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_pkt.cc", v17);
    return 0xFFFFFFFFLL;
  }
  uint64_t result = bssl::ssl_write_buffer_flush(this, a2);
  if ((int)result < 1) {
    return result;
  }
  uint64_t v14 = *((void *)this + 6);
  uint64_t v15 = *(void *)(v14 + 160);
  if (v15)
  {
    *(void *)&a2->version = v15;
    uint64_t result = 1;
    *(void *)(v14 + 152) = 0;
    *(void *)(v14 + 16std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0;
    return result;
  }
  if ((unint64_t)a5 > 0x4000 || *(_WORD *)(v14 + 116))
  {
    int v16 = 68;
    int v17 = 232;
    goto LABEL_10;
  }
  if (!bssl::tls_flush_pending_hs_data(this, v13)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v19 = *((void *)this + 6);
  uint64_t v20 = *(void **)(v19 + 240);
  if (v20)
  {
    unint64_t v21 = *(unsigned int *)(v19 + 248);
    size_t v22 = *v20 - v21;
    if (*v20 < v21) {
      abort();
    }
    BOOL v23 = (const void *)(v20[1] + v21);
  }
  else
  {
    size_t v22 = 0;
    BOOL v23 = 0;
  }
  unint64_t v24 = v22;
  if (a5)
  {
    uint64_t v25 = SSL_max_seal_overhead(this);
    unint64_t v26 = &a5[v25];
    BOOL v27 = __CFADD__(v25, a5);
    unint64_t v24 = (unint64_t)&v26[v22];
    BOOL v28 = __CFADD__(v26, v22);
    if (v27 || v28)
    {
      int v16 = 69;
      int v17 = 256;
      goto LABEL_10;
    }
  }
  if (!v24)
  {
    *(void *)&a2->version = 0;
    return 1;
  }
  int v29 = bssl::ssl_seal_align_prefix_len((unsigned __int8 **)this, v18);
  if (!bssl::SSLBuffer::EnsureCap((bssl::SSLBuffer *)(v14 + 104), v29 + (int)v22, v24)) {
    return 0xFFFFFFFFLL;
  }
  if (v22)
  {
    memcpy((void *)(*(void *)(v14 + 104) + *(unsigned __int16 *)(v14 + 112) + *(unsigned __int16 *)(v14 + 116)), v23, v22);
    std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)(*((void *)this + 6) + 240), 0);
    *(_DWORD *)(*((void *)this + 6) + 248) = 0;
    bssl::SSLBuffer::DidWrite(v14 + 104, v22);
  }
  if (a5)
  {
    *(void *)__int16 v32 = 0xAAAAAAAAAAAAAAAALL;
    if (!bssl::tls_seal_record(this, (ssl_st *)(*(void *)(v14 + 104)+ *(unsigned __int16 *)(v14 + 112)+ *(unsigned __int16 *)(v14 + 116)), v32, (const unsigned __int8 *)(*(unsigned __int16 *)(v14 + 118)- (unint64_t)*(unsigned __int16 *)(v14 + 116)), a3, a4, a5))return 0xFFFFFFFFLL; {
    bssl::SSLBuffer::DidWrite(v14 + 104, *(unint64_t *)v32);
    }
  }
  *(_WORD *)(*((void *)this + 6) + 220) &= ~0x200u;
  uint64_t result = bssl::ssl_write_buffer_flush(this, v30);
  if ((int)result > 0)
  {
    *(void *)&a2->version = a5;
    return 1;
  }
  if (a5)
  {
    uint64_t v31 = *((void *)this + 6);
    *(void *)(v31 + 152) = a4;
    *(void *)(v31 + 16std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = a5;
    *(unsigned char *)(*((void *)this + 6) + 168) = (_BYTE)a3;
  }
  return result;
}

uint64_t bssl::tls_flush_pending_hs_data(bssl *this, ssl_st *a2)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *(void *)(v2 + 232);
  if (!v3) {
    return 1;
  }
  unint64_t v4 = *(const unsigned __int8 **)v3;
  if (!*(void *)v3) {
    return 1;
  }
  *(void *)(v2 + 232) = 0;
  uint64_t v5 = *((void *)this + 21);
  if (v5)
  {
    uint64_t v6 = *(void *)(*((void *)this + 6) + 280);
    if (v6 && (*(unsigned char *)(v6 + 1586) & 8) != 0 || (*(unsigned int (**)(void))(v5 + 16))())
    {
      uint64_t v7 = 1;
    }
    else
    {
      ERR_put_error(16, 0, 298, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", 257);
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = bssl::add_record_to_flight(this, (ssl_st *)0x16, *(void *)(v3 + 8), v4);
  }
  BUF_MEM_free((BUF_MEM *)v3);
  return v7;
}

void sub_1BA101F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t bssl::ssl_write_buffer_flush(bssl *this, ssl_st *a2)
{
  if (!*((void *)this + 4))
  {
    ERR_put_error(16, 0, 119, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_buffer.cc", 322);
    return 0xFFFFFFFFLL;
  }
  int is_dtls = SSL_is_dtls((unsigned __int8 **)this);
  uint64_t v4 = *((void *)this + 6);
  if (is_dtls)
  {
    if (*(_WORD *)(v4 + 116))
    {
      uint64_t result = BIO_write(*((BIO **)this + 4), (const void *)(*(void *)(v4 + 104) + *(unsigned __int16 *)(v4 + 112)), *(unsigned __int16 *)(v4 + 116));
      if ((int)result <= 0) {
        *(_DWORD *)(*((void *)this + 6) + 196) = 3;
      }
      else {
        uint64_t result = 1;
      }
      *(_WORD *)(v4 + 112) = *(_WORD *)(v4 + 114);
      *(_WORD *)(v4 + 116) = 0;
      *(_WORD *)(v4 + 118) = *(_WORD *)(v4 + 120);
      return result;
    }
    return 1;
  }
  unsigned __int16 v6 = *(_WORD *)(v4 + 116);
  if (!v6)
  {
LABEL_12:
    *(_WORD *)(v4 + 112) = *(_WORD *)(v4 + 114);
    *(_WORD *)(v4 + 116) = 0;
    *(_WORD *)(v4 + 118) = *(_WORD *)(v4 + 120);
    return 1;
  }
  unsigned __int16 v7 = *(_WORD *)(v4 + 112);
  while (1)
  {
    uint64_t result = BIO_write(*((BIO **)this + 4), (const void *)(*(void *)(v4 + 104) + v7), v6);
    if ((int)result <= 0) {
      break;
    }
    unsigned int v8 = *(unsigned __int16 *)(v4 + 116);
    if (result > v8) {
      abort();
    }
    unsigned __int16 v7 = *(_WORD *)(v4 + 112) + result;
    *(_WORD *)(v4 + 112) = v7;
    unsigned __int16 v6 = v8 - result;
    *(_WORD *)(v4 + 116) = v6;
    *(_WORD *)(v4 + 118) -= result;
    if (!v6) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)(*((void *)this + 6) + 196) = 3;
  return result;
}

uint64_t SSL_max_seal_overhead(bssl *a1)
{
  if (SSL_is_dtls((unsigned __int8 **)a1))
  {
    return bssl::dtls_max_seal_overhead((uint64_t)a1, 1);
  }
  else
  {
    uint64_t v4 = bssl::SSLAEADContext::MaxOverhead(*(bssl::SSLAEADContext **)(*((void *)a1 + 6) + 272));
    uint64_t v5 = v4 + 5;
    unsigned __int16 v6 = *(bssl::SSLAEADContext **)(*((void *)a1 + 6) + 272);
    if (*(void *)v6 && bssl::SSLAEADContext::ProtocolVersion(v6) > 0x303) {
      uint64_t v5 = v4 + 6;
    }
    return v5 << bssl::ssl_needs_record_splitting(a1, v3);
  }
}

uint64_t bssl::tls_seal_record(bssl *this, ssl_st *a2, unsigned __int8 *a3, const unsigned __int8 *a4, ssl_st *a5, unint64_t a6, const unsigned __int8 *a7)
{
  if (&a4[(void)a2] > (const unsigned __int8 *)a6 && &a7[a6] > (const unsigned __int8 *)a2)
  {
    int v19 = 189;
    int v20 = 516;
LABEL_22:
    ERR_put_error(16, 0, v19, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", v20);
    return 0;
  }
  uint64_t v16 = bssl::tls_seal_scatter_prefix_len(this, a5, (unint64_t)a7);
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  int v17 = *(bssl::SSLAEADContext **)(*((void *)this + 6) + 272);
  if (*(void *)v17) {
    BOOL v18 = bssl::SSLAEADContext::ProtocolVersion(v17) > 0x303;
  }
  else {
    BOOL v18 = 0;
  }
  BOOL v22 = a5 == 23 && (unint64_t)a7 > 1;
  BOOL v23 = a7;
  if (v22) {
    BOOL v23 = &a7[-bssl::ssl_needs_record_splitting(this, v15)];
  }
  uint64_t result = bssl::SSLAEADContext::SuffixLen(*(bssl::SSLAEADContext **)(*((void *)this + 6) + 272), &v31, (uint64_t)v23, v18);
  if (!result) {
    return result;
  }
  unint64_t v26 = &a7[v16];
  if (__CFADD__(v16, a7) || __CFADD__(v31, v26))
  {
    int v19 = 200;
    int v20 = 527;
    goto LABEL_22;
  }
  if (&v26[v31] > a4)
  {
    int v19 = 121;
    int v20 = 531;
    goto LABEL_22;
  }
  BOOL v27 = (char *)a2 + v16;
  BOOL v28 = (char *)&a7[(void)a2 + v16];
  if (!v22 || !bssl::ssl_needs_record_splitting(this, v25))
  {
    if ((bssl::do_seal_record(this, a2, v27, v28, (unsigned __int8 *)a5, (char *)a6, a7) & 1) == 0) {
      return 0;
    }
LABEL_37:
    *(void *)a3 = &v26[v31];
    return 1;
  }
  if (bssl::SSLAEADContext::ExplicitNonceLen(*(bssl::SSLAEADContext **)(*((void *)this + 6) + 272))) {
    bssl::tls_seal_record();
  }
  uint64_t result = bssl::do_seal_record(this, a2, (char *)&a2->type + 1, (char *)&a2->type + 2, (unsigned __int8 *)0x17, (char *)a6, (const unsigned __int8 *)1);
  if (result)
  {
    unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
    if (!bssl::SSLAEADContext::SuffixLen(*(bssl::SSLAEADContext **)(*((void *)this + 6) + 272), &v34, 1, 0)) {
      bssl::tls_seal_record();
    }
    unint64_t v30 = v34;
    if (bssl::ssl_cipher_get_record_split_len(**(bssl ***)(*((void *)this + 6) + 272), v29) != v30 + 1) {
      bssl::tls_seal_record();
    }
    char v33 = -86;
    int v32 = -1431655766;
    uint64_t result = bssl::do_seal_record(this, (ssl_st *)&v32, v27 + 1, v28, (unsigned __int8 *)0x17, (char *)(a6 + 1), a7 - 1);
    if (result)
    {
      if (bssl::tls_seal_scatter_prefix_len(this, (const ssl_st *)0x17, (unint64_t)a7) != v30 + 10) {
        bssl::tls_seal_record();
      }
      *(int *)((char *)&a2->type + v30 + 2) = v32;
      *BOOL v27 = v33;
      goto LABEL_37;
    }
  }
  return result;
}

BOOL bssl::ssl_needs_record_splitting(bssl *this, const ssl_st *a2)
{
  uint64_t v3 = *(bssl::SSLAEADContext **)(*((void *)this + 6) + 272);
  return *(void *)v3
      && bssl::SSLAEADContext::ProtocolVersion(v3) <= 0x301
      && (*((unsigned char *)this + 149) & 1) != 0
      && SSL_CIPHER_is_block_cipher(**(void **)(*((void *)this + 6) + 272));
}

BOOL bssl::SSLAEADContext::SuffixLen(bssl::SSLAEADContext *this, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)this) {
    return EVP_AEAD_CTX_tag_len((uint64_t *)this + 1, (uint64_t *)a2, a3, a4) != 0;
  }
  *a2 = a4;
  return 1;
}

uint64_t EVP_AEAD_CTX_tag_len(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  if (a4 && !*(_DWORD *)(v5 + 4)) {
    EVP_AEAD_CTX_tag_len_cold_1();
  }
  unsigned __int16 v6 = *(uint64_t (**)(void))(v5 + 64);
  if (v6)
  {
    uint64_t v7 = v6();
LABEL_8:
    uint64_t v9 = 1;
    goto LABEL_9;
  }
  uint64_t v8 = *((unsigned __int8 *)a1 + 576);
  uint64_t v7 = v8 + a4;
  if (!__CFADD__(v8, a4)) {
    goto LABEL_8;
  }
  ERR_put_error(30, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/aead.c", 281);
  uint64_t v7 = 0;
  uint64_t v9 = 0;
LABEL_9:
  *a2 = v7;
  return v9;
}

uint64_t bssl::tls_seal_scatter_prefix_len(bssl *this, const ssl_st *a2, unint64_t a3)
{
  if (a2 == 23 && a3 >= 2 && bssl::ssl_needs_record_splitting(this, a2)) {
    return bssl::ssl_cipher_get_record_split_len(**(bssl ***)(*((void *)this + 6) + 272), v4) + 9;
  }
  else {
    return bssl::SSLAEADContext::ExplicitNonceLen(*(bssl::SSLAEADContext **)(*((void *)this + 6) + 272)) + 5;
  }
}

int BIO_write(BIO *b, const void *data, int len)
{
  if (!b || !b->method || (bwrite = b->method->bwrite) == 0)
  {
    int v6 = 115;
    int v7 = 167;
LABEL_9:
    ERR_put_error(17, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/bio.c", v7);
    return -2;
  }
  if (!LODWORD(b->cb_arg))
  {
    int v6 = 114;
    int v7 = 171;
    goto LABEL_9;
  }
  if (len < 1) {
    return 0;
  }
  int result = ((uint64_t (*)(BIO *, const void *))bwrite)(b, data);
  if (result >= 1) {
    b->prev_bio = (bio_st *)((char *)b->prev_bio + result);
  }
  return result;
}

uint64_t boringssl_bio_write(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(v3 + 16))(*(void *)v3);
    if ((int)result > 0) {
      return result;
    }
    BIO_set_retry_write(a1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t nw_protocol_boringssl_write_bytes(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  int v6 = v5;
  uint64_t v7 = 0xFFFFFFFFLL;
  if (!v5
    || !a2
    || !a3
    || boringssl_session_get_state(v5[42]) > 3
    || (boringssl_session_is_cancelled(v6[42]) & 1) != 0)
  {
    goto LABEL_17;
  }
  if ((*((unsigned char *)v6 + 475) & 1) == 0
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_write_bytes_cold_14();
  }
  uint64_t v8 = v6[5];
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 24)) == 0 || !*(void *)(v9 + 88))
  {
    if ((*((unsigned char *)v6 + 475) & 1) == 0
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      nw_protocol_boringssl_write_bytes_cold_1();
    }
    goto LABEL_16;
  }
  if ((*((unsigned char *)v6 + 390) & 2) != 0)
  {
    if ((*((unsigned char *)v6 + 475) & 1) == 0
      && datapath_logging_enabled
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_write_bytes_cold_13();
    }
  }
  else if ((*((unsigned char *)v6 + 475) & 1) == 0 {
         && g_boringssl_log
  }
         && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_write_bytes_cold_12();
  }
  nw_frame_array_init();
  memset(v19, 170, sizeof(v19));
  nw_frame_array_init();
  if (boringssl_context_is_dtls(v6[42])) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  int v12 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, void *))(*(void *)(v8 + 24) + 88))(v8, v6 + 1, 1, a3, v11, &v19[2]);
  if (nw_frame_array_is_empty())
  {
    if ((*((unsigned char *)v6 + 390) & 2) != 0)
    {
      if ((*((unsigned char *)v6 + 475) & 1) == 0
        && datapath_logging_enabled
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_write_bytes_cold_3();
      }
    }
    else if ((*((unsigned char *)v6 + 475) & 1) == 0 {
           && g_boringssl_log
    }
           && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_write_bytes_cold_2();
    }
LABEL_16:
    uint64_t v7 = 0;
    goto LABEL_17;
  }
  if (!v12)
  {
    if ((*((unsigned char *)v6 + 475) & 1) == 0
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      nw_protocol_boringssl_write_bytes_cold_4();
    }
    goto LABEL_16;
  }
  uint64_t v13 = nw_frame_array_first();
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    int v15 = a3;
    while (1)
    {
      uint64_t v16 = nw_frame_array_next();
      LODWORD(v17[0]) = 0;
      nw_frame_unclaimed_bytes();
      nw_frame_array_remove();

      if (!v16) {
        break;
      }
      uint64_t v14 = v16;
    }
  }
  else
  {
    uint64_t v16 = 0;
    int v15 = a3;
  }
  if (nw_frame_array_is_empty())
  {
    if ((*((unsigned char *)v6 + 390) & 2) != 0)
    {
      if ((*((unsigned char *)v6 + 475) & 1) == 0
        && datapath_logging_enabled
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_write_bytes_cold_7();
      }
    }
    else if ((*((unsigned char *)v6 + 475) & 1) == 0 {
           && g_boringssl_log
    }
           && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_write_bytes_cold_6();
    }
  }
  else
  {
    if (*(void *)(*(void *)(v8 + 24) + 96))
    {
      (*(void (**)(void))(*(void *)(v6[5] + 24) + 96))();
      uint64_t v7 = (a3 - v15);
      if ((*((unsigned char *)v6 + 390) & 2) != 0)
      {
        if ((*((unsigned char *)v6 + 475) & 1) == 0
          && datapath_logging_enabled
          && g_boringssl_log
          && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
        {
          nw_protocol_boringssl_write_bytes_cold_10();
        }
      }
      else if ((*((unsigned char *)v6 + 475) & 1) == 0 {
             && g_boringssl_log
      }
             && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_write_bytes_cold_9();
      }
      goto LABEL_62;
    }
    if ((*((unsigned char *)v6 + 475) & 1) == 0
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      nw_protocol_boringssl_write_bytes_cold_8();
    }
  }
  uint64_t v7 = 0;
LABEL_62:
  if ((nw_frame_array_is_empty() & 1) == 0)
  {
    v17[0] = 0;
    v17[1] = v17;
    v17[2] = 0x2020000000;
    int v18 = 0;
    nw_frame_array_foreach();
    if ((*((unsigned char *)v6 + 475) & 1) == 0
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      nw_protocol_boringssl_write_bytes_cold_5();
    }
    _Block_object_dispose(v17, 8);
  }

LABEL_17:
  return v7;
}

void sub_1BA102CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t bssl::SSLBuffer::DidWrite(uint64_t this, unint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 12);
  if ((unint64_t)*(unsigned __int16 *)(this + 14) - v2 < a2) {
    abort();
  }
  *(_WORD *)(this + 12) = v2 + a2;
  return this;
}

uint64_t bssl::ssl_seal_align_prefix_len(unsigned __int8 **this, const ssl_st *a2)
{
  int is_dtls = SSL_is_dtls(this);
  uint64_t v4 = bssl::SSLAEADContext::ExplicitNonceLen(*((bssl::SSLAEADContext **)this[6] + 34));
  uint64_t v6 = v4;
  if (is_dtls) {
    return v4 + 13;
  }
  if (bssl::ssl_needs_record_splitting((bssl *)this, v5)) {
    return v6 + bssl::ssl_cipher_get_record_split_len(**((bssl ***)this[6] + 34), v8) + 10;
  }
  return v6 + 5;
}

uint64_t BIO_flush(BIO *a1)
{
  return BIO_ctrl(a1, 11, 0, 0);
}

uint64_t boringssl_bio_ctrl(uint64_t a1, int a2, int a3)
{
  uint64_t result = 1;
  if (a2 > 103)
  {
    if ((a2 - 104) >= 2) {
      return 0;
    }
  }
  else
  {
    switch(a2)
    {
      case 8:
        return *(int *)(a1 + 20);
      case 9:
        *(_DWORD *)(a1 + 2std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = a3;
        return 1;
      case 11:
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t BIO_ctrl(uint64_t bp, int cmd, uint64_t larg, void *parg)
{
  if (bp)
  {
    if (*(void *)bp && (uint64_t v4 = *(uint64_t (**)(void))(*(void *)bp + 48)) != 0)
    {
      return v4();
    }
    else
    {
      ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/bio.c", 217);
      return -2;
    }
  }
  return bp;
}

uint64_t boringssl_context_flush_flight(const SSL *a1)
{
  uint64_t v1 = SSL_get_ex_data(a1, 0);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (uint64_t)v1;
  if (*(_DWORD *)v1 != -1252936367) {
    return 0;
  }
  uint64_t v3 = v1[1];
  if (!v3
    || boringssl_session_get_state((uint64_t)v1) > 3
    || (boringssl_session_is_cancelled(v2) & 1) != 0)
  {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
  uint64_t v6 = nw_protocol_boringssl_flush_flight(WeakRetained);

  return v6;
}

uint64_t nw_protocol_boringssl_flush_flight(void *a1)
{
  uint64_t v1 = a1;
  if ((nw_frame_array_is_empty() & 1) == 0) {
    (*(void (**)(void))(*(void *)(v1[35] + 24) + 96))();
  }
  if ((nw_frame_array_is_empty() & 1) == 0) {
    (*(void (**)(void))(*(void *)(v1[36] + 24) + 96))();
  }
  if ((nw_frame_array_is_empty() & 1) == 0) {
    (*(void (**)(void))(*(void *)(v1[37] + 24) + 96))();
  }
  if ((nw_frame_array_is_empty() & 1) == 0) {
    (*(void (**)(void))(*(void *)(v1[38] + 24) + 96))();
  }

  return 1;
}

uint64_t boringssl_context_add_message(const SSL *a1, unsigned int a2, const void *a3, size_t a4)
{
  uint64_t v7 = SSL_get_ex_data(a1, 0);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (uint64_t)v7;
  if (*(_DWORD *)v7 != -1252936367) {
    return 0;
  }
  uint64_t v9 = v7[1];
  if (!v9
    || boringssl_session_get_state((uint64_t)v7) > 3
    || (boringssl_session_is_cancelled(v8) & 1) != 0)
  {
    return 0;
  }
  if (a2 - 1 >= 3) {
    a2 = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v9 + 16));
  uint64_t v12 = nw_protocol_boringssl_write_message(WeakRetained, a2, a3, a4);

  return v12;
}

uint64_t nw_protocol_boringssl_write_message(void *a1, unsigned int a2, const void *a3, size_t a4)
{
  id v7 = a1;
  uint64_t v8 = v7;
  if (a2 > 3) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)v7 + a2 + 35);
  }
  v15[0] = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = 0xAAAAAAAAAAAAAAAALL;
  nw_frame_array_init();
  if ((*(unsigned int (**)(uint64_t, uint64_t, size_t, size_t, uint64_t, void *))(*(void *)(v9 + 24) + 88))(v9, (uint64_t)v8 + 8, a4, a4, 1, v15) == 1)
  {
    uint64_t v10 = nw_frame_array_first();
    if (nw_frame_uses_external_data())
    {
      dispatch_data_t v11 = dispatch_data_create(a3, a4, 0, 0);
      nw_frame_set_external_data();
    }
    else
    {
      uint64_t v13 = (void *)nw_frame_unclaimed_bytes();
      memcpy(v13, a3, a4);
    }
    uint64_t v12 = 0;
    if (nw_frame_claim())
    {
      nw_frame_collapse();
      nw_frame_unclaim();
      uint64_t v12 = 1;
      nw_frame_array_remove();
      nw_frame_array_append();
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

uint64_t bssl::tls_new(unsigned __int8 **this, ssl_st *a2)
{
  bssl::New<bssl::SSL3_STATE>();
  uint64_t v13 = (bssl::SSLAEADContext **)v3;
  if (!v3) {
    goto LABEL_6;
  }
  BOOL v4 = SSL_is_dtls(this) != 0;
  bssl::SSLAEADContext::CreateNullCipher((bssl::SSLAEADContext *)v4, &v12);
  uint64_t v5 = v12;
  uint64_t v12 = 0;
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](v13 + 33, v5);
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v12, 0);
  BOOL v6 = SSL_is_dtls(this) != 0;
  bssl::SSLAEADContext::CreateNullCipher((bssl::SSLAEADContext *)v6, &v12);
  id v7 = v12;
  uint64_t v12 = 0;
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](v13 + 34, v7);
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v12, 0);
  bssl::ssl_handshake_new((ssl_st *)this, &v12);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](v13 + 35, v8);
  std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](&v12, 0);
  uint64_t v9 = v13;
  if (!v13[33]) {
    goto LABEL_6;
  }
  if (v13[34] && v13[35])
  {
    uint64_t v13 = 0;
    this[6] = (unsigned __int8 *)v9;
    *((_WORD *)this + 8) = 771;
    uint64_t v10 = 1;
  }
  else
  {
LABEL_6:
    uint64_t v10 = 0;
  }
  std::unique_ptr<bssl::SSL3_STATE,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSL3_STATE **)&v13, 0);
  return v10;
}

void sub_1BA1032FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<bssl::SSL3_STATE,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSL3_STATE **)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100](bssl::SSL_HANDSHAKE **a1, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    bssl::SSL_HANDSHAKE::~SSL_HANDSHAKE(v3);
    OPENSSL_free(v4);
  }
}

void *bssl::SSLAEADContext::CreateNullCipher@<X0>(bssl::SSLAEADContext *this@<X0>, void *a2@<X8>)
{
  char v5 = (char)this;
  int v4 = 0;
  uint64_t result = bssl::New<bssl::SSLAEADContext,int,BOOL &,decltype(nullptr)>(&v4, &v5);
  *a2 = result;
  return result;
}

void *bssl::New<bssl::SSLAEADContext,int,BOOL &,decltype(nullptr)>(int *a1, char *a2)
{
  int v4 = OPENSSL_malloc(0x268uLL);
  char v5 = v4;
  if (v4)
  {
    int v6 = *a1;
    char v7 = *a2;
    *int v4 = 0;
    EVP_AEAD_CTX_zero(v4 + 1);
    *((_WORD *)v5 + 302) = 0;
    *((_WORD *)v5 + 303) = v6;
    *((unsigned char *)v5 + 608) = v7;
    *((unsigned char *)v5 + 609) &= 0xE0u;
    v5[74] = 0;
    *((_DWORD *)v5 + 15std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0;
  }
  return v5;
}

uint64_t bssl::tls_add_message(bssl *this, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*((void *)this + 21) || **(void **)(*((void *)this + 6) + 272))
  {
    while (1)
    {
      if (!v5) {
        goto LABEL_30;
      }
      uint64_t v6 = *((void *)this + 6);
      uint64_t v9 = *(void *)(v6 + 232);
      uint64_t v8 = (BUF_MEM **)(v6 + 232);
      uint64_t result = v9;
      unint64_t v10 = *((unsigned __int16 *)this + 9);
      if (!v9) {
        break;
      }
      if (*(void *)result < v10) {
        goto LABEL_8;
      }
      uint64_t result = bssl::tls_flush_pending_hs_data(this, (ssl_st *)a2);
      if (!result) {
        return result;
      }
      uint64_t v11 = *((void *)this + 6);
      uint64_t v12 = *(void *)(v11 + 232);
      uint64_t v8 = (BUF_MEM **)(v11 + 232);
      uint64_t result = v12;
      if (v12)
      {
LABEL_8:
        int v13 = 0;
        uint64_t v14 = *(void *)result;
      }
      else
      {
        uint64_t v14 = 0;
        int v13 = 1;
      }
      size_t v15 = *((unsigned __int16 *)this + 9) - v14;
      if (v5 >= v15) {
        size_t v16 = v15;
      }
      else {
        size_t v16 = v5;
      }
      if (!v16) {
LABEL_35:
      }
        bssl::tls_add_message();
      int v17 = (char *)(v4 + v16);
      v5 -= v16;
      if (v13) {
        goto LABEL_21;
      }
      if (!result) {
        return result;
      }
LABEL_22:
      uint64_t result = BUF_MEM_append((void *)result, (const void *)v4, v16);
      unint64_t v4 = (unint64_t)v17;
      if (!result) {
        return result;
      }
    }
    if (v5 >= v10) {
      size_t v16 = *((unsigned __int16 *)this + 9);
    }
    else {
      size_t v16 = v5;
    }
    if (!v16) {
      goto LABEL_35;
    }
    int v17 = (char *)(v4 + v16);
    v5 -= v16;
LABEL_21:
    int v18 = BUF_MEM_new();
    std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](v8, v18);
    uint64_t result = *(void *)(*((void *)this + 6) + 232);
    if (!result) {
      return result;
    }
    goto LABEL_22;
  }
  while (v5)
  {
    if (v5 >= *((unsigned __int16 *)this + 9)) {
      unint64_t v19 = *((unsigned __int16 *)this + 9);
    }
    else {
      unint64_t v19 = v5;
    }
    int v20 = (const unsigned __int8 *)(v4 + v19);
    v5 -= v19;
    char v21 = bssl::add_record_to_flight(this, (ssl_st *)0x16, v4, (const unsigned __int8 *)v19);
    unint64_t v4 = (unint64_t)v20;
    if ((v21 & 1) == 0) {
      return 0;
    }
  }
LABEL_30:
  bssl::ssl_do_msg_callback((uint64_t)this, 1, 22, *a2, a2[1]);
  uint64_t v22 = *(void *)(*((void *)this + 6) + 280);
  if (!v22) {
    return 1;
  }
  uint64_t result = bssl::SSLTranscript::Update((void **)(v22 + 424), (const void *)*a2, a2[1]);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t bssl::tls13_client_handshake(bssl *this, ssl_st *a2)
{
  int v135 = (SSL_SESSION **)((char *)this + 1520);
  int v138 = (char *)this + 232;
  id v137 = (char *)this + 280;
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (ssl_credential_st **)((char *)this + 1504);
  int v136 = (size_t **)((char *)this + 424);
  int v130 = (size_t **)((char *)this + 464);
  char v131 = (unint64_t **)((char *)this + 1472);
  unsigned int v133 = (_OWORD *)((char *)this + 472);
  uint64_t v134 = (char *)this + 432;
  unsigned int v132 = (_OWORD *)((char *)this + 504);
  int v127 = (char *)this + 184;
  char v128 = (char *)this + 136;
  int v129 = (void **)((char *)this + 536);
  while (2)
  {
    int v4 = *((_DWORD *)this + 6);
    uint64_t v5 = 1;
    switch(v4)
    {
      case 0:
        uint64_t v6 = *(void *)this;
        if ((*(_WORD *)(*(void *)(*(void *)this + 48) + 220) & 2) == 0) {
          bssl::tls13_client_handshake();
        }
        *(void *)&long long v154 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v152 = v7;
        long long v153 = v7;
        if (!(*(unsigned int (**)(uint64_t, long long *))(*(void *)v6 + 24))(v6, &v152)) {
          goto LABEL_155;
        }
        if ((*((unsigned char *)this + 1585) & 8) == 0
          && !(*(unsigned int (**)(uint64_t))(*(void *)v6 + 112))(v6))
        {
          goto LABEL_243;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v147 = v8;
        long long v148 = v8;
        *(_OWORD *)&v145[16] = v8;
        long long v146 = v8;
        *(_OWORD *)int v145 = v8;
        *(_WORD *)&v145[16] = 0;
        WORD4(v147) = 0;
        BYTE10(v147) = 0;
        LOBYTE(v157[0]) = 50;
        if ((bssl::parse_server_hello_tls13((uint64_t)this, (uint64_t)v145, (char *)v157, (uint64_t)&v152) & 1) == 0) {
          goto LABEL_294;
        }
        cipher_by_value = SSL_get_cipher_by_value(WORD4(v147));
        uint64_t v10 = (uint64_t)cipher_by_value;
        if (!cipher_by_value
          || (unsigned int min_version = SSL_CIPHER_get_min_version(cipher_by_value),
              min_version > bssl::ssl_protocol_version((bssl *)v6, v12))
          || (unsigned int max_version = SSL_CIPHER_get_max_version(v10),
              max_version < bssl::ssl_protocol_version((bssl *)v6, v14))
          || (int protocol_id = SSL_CIPHER_get_protocol_id(v10),
              (bssl::ssl_tls13_cipher_meets_policy(protocol_id, *(_DWORD *)(*(void *)(v6 + 8) + 296)) & 1) == 0))
        {
          ERR_put_error(16, 0, 242, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 207);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
          goto LABEL_243;
        }
        *((void *)this + 194) = v10;
        BOOL v20 = (void)v146 == 32
           && **(void **)&v145[24] == 0x11619AE574AD21CFLL
           && *(void *)(*(void *)&v145[24] + 8) == 0x91B8651E028C1DBELL
           && *(void *)(*(void *)&v145[24] + 16) == 0x5E8CBB7A1611A2C2
           && *(void *)(*(void *)&v145[24] + 24) == 0x9C33A8C8E2099E07;
        uint64_t v96 = (bssl *)bssl::ssl_protocol_version((bssl *)v6, v16);
        if (!bssl::SSLTranscript::InitHash(v136, v96, *((const ssl_cipher_st **)this + 194))
          || v20 && !bssl::SSLTranscript::UpdateForHelloRetryRequest((bssl::SSLTranscript *)v136))
        {
          goto LABEL_243;
        }
        if (*((void *)this + 193))
        {
          id v97 = (bssl *)bssl::ssl_protocol_version((bssl *)v6, a2);
          if (!bssl::SSLTranscript::InitHash(v130, v97, *((const ssl_cipher_st **)this + 194))
            || v20 && !bssl::SSLTranscript::UpdateForHelloRetryRequest((bssl::SSLTranscript *)v130))
          {
            goto LABEL_243;
          }
        }
        v149[0] = -86;
        if ((bssl::check_ech_confirmation((uint64_t)this, (ssl_st *)v149, (char *)v157, (uint64_t)v145) & 1) == 0) {
          goto LABEL_294;
        }
        uint64_t v98 = *((void *)this + 193);
        if (v98)
        {
          if (v149[0]) {
            int v99 = 1;
          }
          else {
            int v99 = 2;
          }
          *(_DWORD *)(*(void *)(v6 + 48) + 216) = v99;
        }
        if (!v20)
        {
          *((_DWORD *)this + 6) = 2;
          goto LABEL_44;
        }
        *(_OWORD *)&v149[1] = 0xAAAAAAAA0001002CLL;
        *(void *)&long long v150 = 0;
        unint64_t v142 = 0xAAAAAAAA00010033;
        unint64_t v143 = 0;
        uint64_t v144 = 0;
        long long v155 = 0xAAAAAAAA0001002BLL;
        BOOL v156 = 0;
        unint64_t v139 = 0xAAAAAAAA00AAFE0DLL;
        if (v98) {
          char v100 = 1;
        }
        else {
          char v100 = *(_WORD *)(*((void *)this + 1) + 301) & 1;
        }
        BYTE2(v139) = v100;
        unint64_t v140 = 0;
        uint64_t v141 = 0;
        *(void *)&long long v158 = &v149[1];
        *((void *)&v158 + 1) = &v142;
        *(void *)&long long v159 = &v155;
        *((void *)&v159 + 1) = &v139;
        if ((bssl::ssl_parse_extensions(&v148, (char *)v157, (uint64_t *)&v158, 4, 0) & 1) == 0) {
          goto LABEL_294;
        }
        int v119 = BYTE3(v142);
        if (!v149[4] && !BYTE3(v142))
        {
          ERR_put_error(16, 0, 282, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 259);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
          goto LABEL_243;
        }
        if (v149[4])
        {
          *(void *)&long long v158 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v158 + 1) = 0xAAAAAAAAAAAAAAAALL;
          if (!CBS_get_u16_length_prefixed((unsigned __int8 **)&v149[9], (unint64_t *)&v158)
            || (size_t v120 = *((void *)&v158 + 1)) == 0
            || (void)v150)
          {
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 268);
            bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 50);
            goto LABEL_243;
          }
          __int16 v121 = (const void *)v158;
          if (!bssl::Array<unsigned char>::Init((uint64_t)v129, *((unint64_t *)&v158 + 1))) {
            goto LABEL_243;
          }
          memmove(*v129, v121, v120);
          int v119 = BYTE3(v142);
        }
        if (v119)
        {
          LOWORD(v158) = -21846;
          if (!CBS_get_u16(&v143, &v158) || v144)
          {
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 282);
            bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 50);
            goto LABEL_243;
          }
          if (!bssl::tls1_check_group_id((bssl **)this, (const ssl_st *)(unsigned __int16)v158))
          {
            bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
            ERR_put_error(16, 0, 243, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 290);
            goto LABEL_243;
          }
          int v122 = (*(uint64_t (**)(void))(**((void **)this + 49) + 16))(*((void *)this + 49));
          unint64_t v123 = (unsigned __int16)v158;
          if (v122 == (unsigned __int16)v158
            || (uint64_t v124 = *((void *)this + 50)) != 0
            && (int v125 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 16))(v124),
                unint64_t v123 = (unsigned __int16)v158,
                v125 == (unsigned __int16)v158))
          {
            bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
            ERR_put_error(16, 0, 243, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 299);
            goto LABEL_243;
          }
          if (!bssl::ssl_setup_key_shares(this, v123)) {
            goto LABEL_243;
          }
        }
        if (!bssl::ssl_hash_message((uint64_t)this, (uint64_t)&v152)
          || *(_DWORD *)(*(void *)(v6 + 48) + 216) == 1
          && !bssl::SSLTranscript::Update(v130, *((const void **)&v153 + 1), v154))
        {
          goto LABEL_243;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 40))(v6))
        {
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 10);
          ERR_put_error(16, 0, 255, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 323);
          goto LABEL_243;
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
        *(_WORD *)(*(void *)(v6 + 48) + 220) |= 0x2000u;
        uint64_t v5 = 1;
        *((_DWORD *)this + 6) = 1;
        if ((*((unsigned char *)this + 1585) & 4) == 0) {
          goto LABEL_244;
        }
        *(_DWORD *)(*(void *)(v6 + 48) + 256) = 8;
        int v37 = bssl::close_early_data((uint64_t)this, 0);
        goto LABEL_64;
      case 1:
        uint64_t v38 = *(void *)(*(void *)this + 48);
        if (*(_DWORD *)(v38 + 204)) {
          bssl::tls13_client_handshake();
        }
        if (*(_DWORD *)(v38 + 216) == 1 && !bssl::ssl_encrypt_client_hello((uint64_t)this, 0, 0)
          || !bssl::ssl_add_client_hello(this, (bssl::SSL_HANDSHAKE *)a2))
        {
          goto LABEL_243;
        }
        bssl::ssl_done_writing_client_hello(this, (bssl::SSL_HANDSHAKE *)a2);
        *((_DWORD *)this + 6) = 2;
        goto LABEL_72;
      case 2:
        uint64_t v6 = *(void *)this;
        *(void *)&long long v154 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v152 = v45;
        long long v153 = v45;
        if (!(*(unsigned int (**)(uint64_t, long long *))(*(void *)v6 + 24))(v6, &v152)) {
          goto LABEL_155;
        }
        *(void *)&long long v46 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v147 = v46;
        long long v148 = v46;
        *(_OWORD *)&v145[16] = v46;
        long long v146 = v46;
        *(_OWORD *)int v145 = v46;
        *(_WORD *)&v145[16] = 0;
        WORD4(v147) = 0;
        BYTE10(v147) = 0;
        LOBYTE(v157[0]) = 50;
        if ((bssl::parse_server_hello_tls13((uint64_t)this, (uint64_t)v145, (char *)v157, (uint64_t)&v152) & 1) == 0) {
          goto LABEL_294;
        }
        if ((void)v146 == 32)
        {
          BOOL v47 = **(void **)&v145[24] == 0x11619AE574AD21CFLL
             && *(void *)(*(void *)&v145[24] + 8) == 0x91B8651E028C1DBELL;
          BOOL v48 = v47 && *(void *)(*(void *)&v145[24] + 16) == 0x5E8CBB7A1611A2C2;
          if (v48 && *(void *)(*(void *)&v145[24] + 24) == 0x9C33A8C8E2099E07)
          {
            bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 10);
            ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 377);
            goto LABEL_243;
          }
        }
        int v50 = SSL_CIPHER_get_protocol_id(*((void *)this + 194));
        if (v50 != WORD4(v147))
        {
          ERR_put_error(16, 0, 242, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 383);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
          goto LABEL_243;
        }
        uint64_t v51 = *(void *)(v6 + 48);
        if (*(_DWORD *)(v51 + 216) != 1) {
          goto LABEL_110;
        }
        if ((*(_WORD *)(v51 + 220) & 0x2000) == 0) {
          goto LABEL_109;
        }
        LOBYTE(v158) = -86;
        if ((bssl::check_ech_confirmation((uint64_t)this, (ssl_st *)&v158, (char *)v157, (uint64_t)v145) & 1) == 0)
        {
          int v94 = LOBYTE(v157[0]);
LABEL_242:
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, v94);
          goto LABEL_243;
        }
        if (!(_BYTE)v158)
        {
          ERR_put_error(16, 0, 321, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 397);
          int v94 = 47;
          goto LABEL_242;
        }
LABEL_109:
        int v52 = (BUF_MEM *)*((void *)this + 58);
        *((void *)this + 58) = 0;
        std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)v136, v52);
        EVP_MD_CTX_move((uint64_t)v134, v133);
        *((_DWORD *)this + 94) = *((_DWORD *)this + 95);
        uint64_t v53 = *(void *)(v6 + 48);
        long long v54 = v132[1];
        *(_OWORD *)(v53 + 48) = *v132;
        *(_OWORD *)(v53 + 64) = v54;
        uint64_t v51 = *(void *)(v6 + 48);
LABEL_110:
        long long v55 = *(_OWORD *)(*(void *)&v145[24] + 16);
        *(_OWORD *)(v51 + 16) = **(_OWORD **)&v145[24];
        *(_OWORD *)(v51 + 32) = v55;
        uint64_t v56 = *(void *)(v6 + 104);
        if (v56) {
          LOBYTE(v56) = *(_DWORD *)(*(void *)(v6 + 48) + 216) != 2;
        }
        long long v158 = 0xAAAAAAAA00010033;
        *(void *)&long long v159 = 0;
        *(void *)&v149[1] = 0xAAAAAAAA00AA0029;
        v149[3] = v56;
        *(void *)&v149[9] = 0;
        *(void *)&long long v150 = 0;
        unint64_t v142 = 0xAAAAAAAA0001002BLL;
        unint64_t v143 = 0;
        uint64_t v144 = 0;
        *(void *)&long long v155 = &v158;
        *((void *)&v155 + 1) = &v149[1];
        BOOL v156 = &v142;
        if ((bssl::ssl_parse_extensions(&v148, (char *)v157, (uint64_t *)&v155, 3, 0) & 1) == 0) {
          goto LABEL_294;
        }
        LOWORD(v139) = -21846;
        if (!BYTE3(v142)
          || !CBS_get_u16(&v143, &v139)
          || v144
          || (unsigned __int16)v139 != *(unsigned __int16 *)(v6 + 16))
        {
          ERR_put_error(16, 0, 288, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 432);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
          goto LABEL_243;
        }
        LOBYTE(v157[0]) = 50;
        if (!v149[4])
        {
          if ((bssl::ssl_get_new_session(this, v57) & 1) == 0) {
            goto LABEL_314;
          }
          goto LABEL_249;
        }
        if ((bssl::ssl_ext_pre_shared_key_parse_serverhello((uint64_t)this, (char *)v157, (uint64_t)&v149[9]) & 1) == 0)
        {
LABEL_294:
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, LOBYTE(v157[0]));
          goto LABEL_243;
        }
        uint64_t v59 = *(void *)(v6 + 104);
        if (*(unsigned __int16 *)(v59 + 4) != *(unsigned __int16 *)(v6 + 16))
        {
          ERR_put_error(16, 0, 188, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 446);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
LABEL_243:
          uint64_t v5 = 0;
          goto LABEL_244;
        }
        if (*(_DWORD *)(*(void *)(v59 + 200) + 36) != *(_DWORD *)(*((void *)this + 194) + 36))
        {
          ERR_put_error(16, 0, 268, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 452);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
          goto LABEL_243;
        }
        if (!bssl::ssl_session_is_context_valid(this, (const bssl::SSL_HANDSHAKE *)v59, v58))
        {
          ERR_put_error(16, 0, 101, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 460);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
          goto LABEL_243;
        }
        *(_WORD *)(*(void *)(v6 + 48) + 220) |= 0x40u;
        *((_DWORD *)this + 396) |= 0x1000000u;
        bssl::SSL_SESSION_dup(*(bssl **)(v6 + 104), 0, &v155);
        uint64_t v60 = (SSL_SESSION *)v155;
        *(void *)&long long v155 = 0;
        std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](v135, v60);
        uint64_t v62 = (SSL_SESSION *)v155;
        *(void *)&long long v155 = 0;
        if (v62) {
          SSL_SESSION_free(v62);
        }
        if (!*v135)
        {
LABEL_314:
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 80);
          goto LABEL_243;
        }
        bssl::ssl_set_session((ssl_st **)v6, 0, v61);
        bssl::ssl_session_renew_timeout((bssl *)v6, (ssl_st *)*v135, (ssl_session_st *)*(unsigned int *)(*(void *)(v6 + 128) + 308));
LABEL_249:
        *(void *)(*((void *)this + 190) + 20std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = *((void *)this + 194);
        id v101 = (bssl *)bssl::ssl_protocol_version((bssl *)v6, v63);
        handshake_digest = bssl::ssl_get_handshake_digest(v101, *((void *)this + 194), v102);
        EVP_MD_size(handshake_digest);
        if ((*(_WORD *)(*(void *)(v6 + 48) + 220) & 0x40) != 0) {
          BOOL v104 = (const ssl_st *)&(*v135)->key_arg[3];
        }
        else {
          BOOL v104 = (const ssl_st *)&bssl::kZeroes;
        }
        if (!bssl::tls13_init_key_schedule((uint64_t)this, v104)) {
          goto LABEL_243;
        }
        if (!BYTE3(v158))
        {
          ERR_put_error(16, 0, 258, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 499);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 109);
          goto LABEL_243;
        }
        long long v155 = 0uLL;
        LOBYTE(v157[0]) = 50;
        if ((bssl::ssl_ext_key_share_parse_serverhello((uint64_t)this, (uint64_t)&v155, (char *)v157, (uint64_t)&v158 + 8) & 1) == 0)
        {
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, LOBYTE(v157[0]));
LABEL_298:
          uint64_t v5 = 0;
          goto LABEL_299;
        }
        if (!bssl::tls13_advance_key_schedule((uint64_t)this)
          || !bssl::ssl_hash_message((uint64_t)this, (uint64_t)&v152)
          || !bssl::tls13_derive_handshake_secrets(this, v118)
          || ((*((unsigned char *)this + 1585) & 4) == 0 || *(void *)(v6 + 168))
          && (bssl::tls13_set_traffic_key(v6, (const ssl_session_st *)2, 1, *((bssl **)this + 190), v128, *((void *)this + 4)) & 1) == 0|| (bssl::tls13_set_traffic_key(v6, (const ssl_session_st *)2, 0, *((bssl **)this + 190), v127, *((void *)this + 4)) & 1) == 0)
        {
          goto LABEL_298;
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
        *((_DWORD *)this + 6) = 3;
LABEL_299:
        OPENSSL_free((void *)v155);
LABEL_244:
        if (*((_DWORD *)this + 6) != v4) {
          bssl::ssl_do_info_callback(*(void *)this, (const ssl_st *)0x1001);
        }
        if (v5 == 1) {
          continue;
        }
        return v5;
      case 3:
        uint64_t v6 = *(void *)this;
        *(void *)&long long v146 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)int v145 = v29;
        *(_OWORD *)&v145[16] = v29;
        if (!(*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v6 + 24))(v6, v145)) {
          goto LABEL_155;
        }
        if (!bssl::ssl_check_message_type((bssl *)v6, (uint64_t)v145, 8)) {
          goto LABEL_243;
        }
        long long v152 = *(_OWORD *)&v145[8];
        *(void *)&long long v158 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v158 + 1) = 0xAAAAAAAAAAAAAAAALL;
        if (!CBS_get_u16_length_prefixed((unsigned __int8 **)&v152, (unint64_t *)&v158)
          || *((void *)&v152 + 1))
        {
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 555);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 50);
          goto LABEL_243;
        }
        if ((bssl::ssl_parse_serverhello_tlsext((uint64_t)this, &v158) & 1) == 0)
        {
          ERR_put_error(16, 0, 190, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 561);
          goto LABEL_243;
        }
        uint64_t v30 = *(void *)(v6 + 48);
        __int16 v31 = *(_WORD *)(v30 + 220);
        if ((v31 & 0x400) == 0) {
          goto LABEL_55;
        }
        if ((v31 & 0x40) == 0) {
          bssl::tls13_client_handshake();
        }
        if (*(_DWORD *)(v30 + 216) == 2) {
          bssl::tls13_client_handshake();
        }
        uint64_t v92 = *((void *)this + 191);
        uint64_t v93 = *((void *)this + 190);
        if (*(void *)(v92 + 200) != *(void *)(v93 + 200))
        {
          ERR_put_error(16, 0, 304, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 574);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
          goto LABEL_243;
        }
        size_t v95 = *(void *)(v92 + 400);
        if (v95 != *(void *)(v30 + 504) || memcmp(*(const void **)(v92 + 392), *(const void **)(v30 + 496), v95))
        {
          ERR_put_error(16, 0, 277, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 580);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
          goto LABEL_243;
        }
        if ((*((unsigned char *)this + 1587) & 2) != 0 || (*(unsigned char *)(v93 + 440) & 0x40) != 0)
        {
          ERR_put_error(16, 0, 279, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 588);
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, 47);
          goto LABEL_243;
        }
        *(unsigned char *)(v93 + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = *(unsigned char *)(v92 + 440) & 0x40 | *(unsigned char *)(v93 + 440) & 0xBF;
        id v105 = (void **)(*((void *)this + 190) + 408);
        uint64_t v106 = *((void *)this + 191);
        uint64_t v107 = *(const void **)(v106 + 408);
        unint64_t v108 = *(void *)(v106 + 416);
        int v109 = bssl::Array<unsigned char>::Init((uint64_t)v105, v108);
        char v110 = v109 ^ 1;
        if (!v108) {
          char v110 = 1;
        }
        if ((v110 & 1) == 0) {
          memmove(*v105, v107, v108);
        }
        if (!v109) {
          goto LABEL_314;
        }
        uint64_t v111 = (void **)(*((void *)this + 190) + 424);
        uint64_t v112 = *((void *)this + 191);
        __int16 v113 = *(const void **)(v112 + 424);
        unint64_t v114 = *(void *)(v112 + 432);
        int v115 = bssl::Array<unsigned char>::Init((uint64_t)v111, v114);
        char v116 = v115 ^ 1;
        if (!v114) {
          char v116 = 1;
        }
        if ((v116 & 1) == 0) {
          memmove(*v111, v113, v114);
        }
        if (!v115) {
          goto LABEL_314;
        }
        uint64_t v30 = *(void *)(v6 + 48);
LABEL_55:
        p_sid_ctx_length = (void **)&(*v135)[1].sid_ctx_length;
        unint64_t v34 = *(const void **)(v30 + 496);
        unint64_t v33 = *(void *)(v30 + 504);
        char v35 = bssl::Array<unsigned char>::Init((uint64_t)p_sid_ctx_length, v33);
        char v36 = v35 ^ 1;
        if (!v33) {
          char v36 = 1;
        }
        if ((v36 & 1) == 0) {
          memmove(*p_sid_ctx_length, v34, v33);
        }
        if ((v35 & 1) == 0) {
          goto LABEL_314;
        }
        if (!bssl::ssl_hash_message((uint64_t)this, (uint64_t)v145)) {
          goto LABEL_243;
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
        *((_DWORD *)this + 6) = 4;
        if ((*((unsigned char *)this + 1585) & 4) == 0 || (*(_WORD *)(*(void *)(v6 + 48) + 220) & 0x400) != 0)
        {
LABEL_44:
          uint64_t v5 = 1;
        }
        else
        {
          int v37 = bssl::close_early_data((uint64_t)this, 2);
LABEL_64:
          if (v37) {
            uint64_t v5 = 13;
          }
          else {
            uint64_t v5 = 0;
          }
        }
        goto LABEL_244;
      case 4:
        uint64_t v6 = *(void *)this;
        if ((*(_WORD *)(*(void *)(*(void *)this + 48) + 220) & 0x40) != 0)
        {
          if ((*(_WORD *)(*(void *)(*(void *)this + 48) + 220) & 0x400) == 0
            && *(unsigned char *)(*(void *)(v6 + 120) + 496))
          {
            int v28 = 7;
            goto LABEL_158;
          }
LABEL_197:
          int v28 = 8;
LABEL_158:
          *((_DWORD *)this + 6) = v28;
          goto LABEL_244;
        }
        *(void *)&long long v146 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v67 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v67 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)int v145 = v67;
        *(_OWORD *)&v145[16] = v67;
        if (!(*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v6 + 24))(v6, v145))
        {
LABEL_155:
          uint64_t v5 = 3;
          goto LABEL_244;
        }
        if (v145[1] != 13) {
          goto LABEL_268;
        }
        long long v152 = 0xAAAAAAAA0001000DLL;
        *(void *)&long long v153 = 0;
        long long v158 = 0xAAAAAAAA0001002FLL;
        *(void *)&long long v159 = 0;
        *(_OWORD *)&v149[1] = *(_OWORD *)&v145[8];
        unint64_t v142 = 0xAAAAAAAAAAAAAAAALL;
        unint64_t v143 = (unsigned __int16 *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v155 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v155 + 1) = 0xAAAAAAAAAAAAAAAALL;
        unint64_t v139 = 0xAAAAAAAAAAAAAAAALL;
        unint64_t v140 = 0xAAAAAAAAAAAAAAAALL;
        v149[0] = 50;
        if (!CBS_get_u8_length_prefixed((unsigned __int8 **)&v149[1], &v142)
          || v143
          || !CBS_get_u16_length_prefixed((unsigned __int8 **)&v149[1], (unint64_t *)&v155)
          || *(void *)&v149[9]
          || ((v157[0] = (unint64_t *)&v152,
               v157[1] = (unint64_t *)&v158,
               int v68 = bssl::ssl_parse_extensions(&v155, v149, (uint64_t *)v157, 2, 1),
               BYTE3(v152))
            ? (int v69 = v68)
            : (int v69 = 0),
              v69 != 1
           || !CBS_get_u16_length_prefixed((unsigned __int8 **)&v152 + 1, &v139)
           || (bssl::tls1_parse_peer_sigalgs((bssl **)this, (ssl_st *)&v139) & 1) == 0))
        {
          bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, v149[0]);
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 664);
          goto LABEL_243;
        }
        if (BYTE3(v158))
        {
          bssl::ssl_parse_client_CA_list(v6, v149, (unsigned __int8 **)&v158 + 1, v157);
          unint64_t v70 = v157[0];
          v157[0] = 0;
          std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](v131, v70);
          std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](v157, 0);
          if (!*v131)
          {
            bssl::ssl_send_alert((bssl *)v6, (ssl_st *)2, v149[0]);
            goto LABEL_243;
          }
        }
        else
        {
          __int16 v117 = OPENSSL_sk_new_null();
          std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](v131, v117);
          if (!*v131) {
            goto LABEL_314;
          }
        }
        *((_DWORD *)this + 396) |= 0x20u;
        (*(void (**)(bssl *))(*(void *)(*(void *)(v6 + 120) + 16) + 80))(this);
        if (bssl::ssl_hash_message((uint64_t)this, (uint64_t)v145))
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
LABEL_268:
          int v28 = 5;
          goto LABEL_158;
        }
        goto LABEL_243;
      case 5:
        uint64_t v40 = *(bssl **)this;
        *(void *)&long long v146 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v41 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)int v145 = v41;
        *(_OWORD *)&v145[16] = v41;
        if (!(*(unsigned int (**)(bssl *, unsigned char *))(*(void *)v40 + 24))(v40, v145)) {
          goto LABEL_155;
        }
        if (v145[1] != 25 && !bssl::ssl_check_message_type(v40, (uint64_t)v145, 11)
          || !bssl::tls13_process_certificate((EVP_PKEY **)this, (uint64_t)v145, 0)
          || !bssl::ssl_hash_message((uint64_t)this, (uint64_t)v145))
        {
          goto LABEL_243;
        }
        (*(void (**)(bssl *))(*(void *)v40 + 32))(v40);
        goto LABEL_90;
      case 6:
        unsigned int v42 = *(bssl **)this;
        *(void *)&long long v146 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v43 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)int v145 = v43;
        *(_OWORD *)&v145[16] = v43;
        if (!(*(unsigned int (**)(bssl *, unsigned char *))(*(void *)v42 + 24))(v42, v145)) {
          goto LABEL_155;
        }
        int v44 = bssl::ssl_verify_peer_cert(this, (bssl::SSL_HANDSHAKE *)a2);
        if (v44 == 1) {
          goto LABEL_243;
        }
        if (v44 == 2)
        {
          uint64_t v5 = 16;
LABEL_90:
          int v28 = 6;
          goto LABEL_158;
        }
        if (bssl::ssl_check_message_type(v42, (uint64_t)v145, 15)
          && bssl::tls13_process_certificate_verify((uint64_t)this, (uint64_t)v145)
          && bssl::ssl_hash_message((uint64_t)this, (uint64_t)v145))
        {
          (*(void (**)(bssl *))(*(void *)v42 + 32))(v42);
          goto LABEL_197;
        }
        goto LABEL_243;
      case 7:
        int v39 = bssl::ssl_reverify_peer_cert((bssl **)this, (bssl::SSL_HANDSHAKE *)1);
        if (v39 == 1) {
          goto LABEL_243;
        }
        if (v39 == 2) {
          int v28 = 7;
        }
        else {
          int v28 = 8;
        }
        if (v39 == 2) {
          uint64_t v5 = 16;
        }
        else {
          uint64_t v5 = 1;
        }
        goto LABEL_158;
      case 8:
        __int16 v65 = *(bssl **)this;
        *(void *)&long long v146 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v66 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v66 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)int v145 = v66;
        *(_OWORD *)&v145[16] = v66;
        if (!(*(unsigned int (**)(bssl *, unsigned char *))(*(void *)v65 + 24))(v65, v145)) {
          goto LABEL_155;
        }
        if (!bssl::ssl_check_message_type(v65, (uint64_t)v145, 20)) {
          goto LABEL_243;
        }
        if (!bssl::tls13_process_finished((char *)this, (uint64_t)v145, 0)) {
          goto LABEL_243;
        }
        if (!bssl::ssl_hash_message((uint64_t)this, (uint64_t)v145)) {
          goto LABEL_243;
        }
        bssl::SSLTranscript::DigestLen((bssl::SSLTranscript *)v136);
        if (!bssl::tls13_advance_key_schedule((uint64_t)this)
          || !bssl::tls13_derive_application_secrets(this, (bssl::SSL_HANDSHAKE *)a2))
        {
          goto LABEL_243;
        }
        if ((*(unsigned int (**)(bssl *))(*(void *)v65 + 40))(v65))
        {
          bssl::ssl_send_alert(v65, (ssl_st *)2, 10);
          ERR_put_error(16, 0, 255, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 776);
          goto LABEL_243;
        }
        (*(void (**)(bssl *))(*(void *)v65 + 32))(v65);
        int v28 = 9;
        goto LABEL_158;
      case 9:
        BOOL v27 = *(void **)this;
        if ((*(_WORD *)(*(void *)(*(void *)this + 48) + 220) & 0x400) == 0) {
          goto LABEL_48;
        }
        if (v27[21]) {
          goto LABEL_47;
        }
        *(void *)&long long v90 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v90 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v145[16] = v90;
        long long v146 = v90;
        *(_OWORD *)int v145 = v90;
        CBB_zero(v145);
        *(void *)&long long v91 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v91 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v153 = v91;
        long long v154 = v91;
        long long v152 = v91;
        if (!(*(unsigned int (**)(void *, unsigned char *, long long *, uint64_t))(*v27 + 88))(v27, v145, &v152, 5)|| (bssl::ssl_add_message_cbb((uint64_t)v27, (uint64_t)v145) & 1) == 0)
        {
          goto LABEL_198;
        }
        CBB_cleanup((uint64_t)v145);
LABEL_47:
        if (!bssl::close_early_data((uint64_t)this, 2)) {
          goto LABEL_243;
        }
LABEL_48:
        int v28 = 10;
        goto LABEL_158;
      case 10:
        if ((*(unsigned char *)(*((void *)this + 190) + 440) & 0x40) == 0) {
          goto LABEL_43;
        }
        uint64_t v23 = *(void *)this;
        if ((*(_WORD *)(*(void *)(*(void *)this + 48) + 220) & 0x400) != 0) {
          goto LABEL_43;
        }
        *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v145[16] = v24;
        long long v146 = v24;
        *(_OWORD *)int v145 = v24;
        CBB_zero(v145);
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v153 = v25;
        long long v154 = v25;
        long long v152 = v25;
        long long v159 = v25;
        long long v160 = v25;
        long long v158 = v25;
        long long v150 = v25;
        long long v151 = v25;
        *(_OWORD *)&v149[1] = v25;
        if ((*(_WORD *)(*((void *)this + 1) + 301) & 0x2000) != 0) {
          unsigned int v26 = 17613;
        }
        else {
          unsigned int v26 = 17513;
        }
        if (!(*(unsigned int (**)(uint64_t, unsigned char *, long long *, uint64_t))(*(void *)v23 + 88))(v23, v145, &v152, 8)|| !CBB_add_u16_length_prefixed((uint64_t *)&v152, (uint64_t)&v158)|| !CBB_add_u16((uint64_t)&v158, v26)|| !CBB_add_u16_length_prefixed((uint64_t *)&v158, (uint64_t)&v149[1])|| !CBB_add_bytes((uint64_t)&v149[1], *(const void **)&(*v135)[1].sid_ctx[12], *(void *)&(*v135)[1].sid_ctx[20])|| (bssl::ssl_add_message_cbb(v23, (uint64_t)v145) & 1) == 0)
        {
          goto LABEL_198;
        }
        CBB_cleanup((uint64_t)v145);
LABEL_43:
        *((_DWORD *)this + 6) = 11;
        goto LABEL_44;
      case 11:
        if ((*((unsigned char *)this + 1584) & 0x20) == 0) {
          goto LABEL_157;
        }
        uint64_t v75 = *(bssl **)this;
        if (*(_DWORD *)(*(void *)(*(void *)this + 48) + 216) == 2)
        {
          SSL_certs_clear(*(void *)this);
LABEL_172:
          *(void *)int v145 = 0;
          *(void *)&v145[8] = 0;
          if ((bssl::ssl_get_credential_list(this, (void **)v145) & 1) == 0) {
            goto LABEL_210;
          }
          if (!*(void *)&v145[8]) {
            goto LABEL_207;
          }
          char v83 = *(ssl_credential_st ***)v145;
          uint64_t v84 = 8 * *(void *)&v145[8];
          while (2)
          {
            long long v85 = *v83;
            ERR_clear_error();
            LOWORD(v152) = -21846;
            int v87 = *((_DWORD *)v85 + 1);
            if (v87)
            {
              if (v87 == 2)
              {
                if ((*((unsigned char *)this + 1586) & 0x40) != 0 && *((unsigned char *)this + 731) == 2) {
                  goto LABEL_179;
                }
                int v88 = 846;
                int v89 = 253;
              }
              else
              {
                int v88 = 852;
                int v89 = 228;
              }
              ERR_put_error(16, 0, v89, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", v88);
            }
            else
            {
LABEL_179:
              if (bssl::tls1_choose_signature_algorithm(this, (EVP_PKEY **)v85, (const ssl_credential_st *)&v152, v86))
              {
                SSL_CREDENTIAL_up_ref(v85);
                std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100](v3, v85);
                *((_WORD *)this + 797) = v152;
LABEL_206:
                if (*v3)
                {
LABEL_207:
                  if (bssl::tls13_add_certificate(this, v79, v80, v81, v82))
                  {
                    *((_DWORD *)this + 6) = 12;
                    uint64_t v5 = 1;
LABEL_211:
                    OPENSSL_free(*(void **)v145);
                    goto LABEL_244;
                  }
                }
                else
                {
                  bssl::ssl_send_alert(v75, (ssl_st *)2, 40);
                }
LABEL_210:
                uint64_t v5 = 0;
                goto LABEL_211;
              }
            }
            ++v83;
            v84 -= 8;
            if (!v84) {
              goto LABEL_206;
            }
            continue;
          }
        }
        uint64_t v76 = *(void *)(*((void *)this + 1) + 32);
        uint64_t v77 = *(uint64_t (**)(void, void))(v76 + 64);
        if (!v77) {
          goto LABEL_172;
        }
        int v78 = v77(*(void *)this, *(void *)(v76 + 72));
        if (!v78)
        {
          bssl::ssl_send_alert(v75, (ssl_st *)2, 80);
          ERR_put_error(16, 0, 126, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 878);
          goto LABEL_243;
        }
        if ((v78 & 0x80000000) == 0) {
          goto LABEL_172;
        }
        *((_DWORD *)this + 6) = 11;
        uint64_t v5 = 8;
        goto LABEL_244;
      case 12:
        if (*v3 && (int v64 = bssl::tls13_add_certificate_verify(this, (bssl::SSL_HANDSHAKE *)a2)) != 0)
        {
          if (v64 == 2) {
            goto LABEL_243;
          }
          if (v64 != 1) {
            bssl::tls13_client_handshake();
          }
          uint64_t v5 = 9;
          int v28 = 12;
        }
        else
        {
LABEL_157:
          int v28 = 13;
        }
        goto LABEL_158;
      case 13:
        uint64_t v21 = *(void *)this;
        int v22 = *((_DWORD *)this + 396);
        *((_DWORD *)this + 396) = v22 | 0x1000000;
        if ((v22 & 0x2000000) == 0) {
          goto LABEL_26;
        }
        *(void *)&long long v71 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v145[16] = v71;
        long long v146 = v71;
        *(_OWORD *)int v145 = v71;
        CBB_zero(v145);
        *(void *)&long long v72 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v72 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v153 = v72;
        long long v154 = v72;
        long long v152 = v72;
        if (!(*(unsigned int (**)(uint64_t, unsigned char *, long long *, uint64_t))(*(void *)v21 + 88))(v21, v145, &v152, 203)|| !bssl::tls1_write_channel_id((uint64_t)this, (uint64_t *)&v152, v73, v74)|| (bssl::ssl_add_message_cbb(v21, (uint64_t)v145) & 1) == 0)
        {
LABEL_198:
          CBB_cleanup((uint64_t)v145);
          goto LABEL_243;
        }
        CBB_cleanup((uint64_t)v145);
LABEL_26:
        if (!bssl::tls13_add_finished((bssl **)this, (bssl::SSL_HANDSHAKE *)a2)
          || !bssl::tls13_set_traffic_key(v21, (const ssl_session_st *)3, 1, *((bssl **)this + 190), v138, *((void *)this + 4))|| !bssl::tls13_set_traffic_key(v21, (const ssl_session_st *)3, 0, *((bssl **)this + 190), v137, *((void *)this + 4))|| !bssl::tls13_derive_resumption_secret(this, (bssl::SSL_HANDSHAKE *)a2))
        {
          goto LABEL_243;
        }
        *((_DWORD *)this + 6) = 14;
LABEL_72:
        uint64_t v5 = 4;
        goto LABEL_244;
      case 14:
        return v5;
      default:
        goto LABEL_243;
    }
  }
}

void sub_1BA104F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  OPENSSL_free(*(void **)(v35 - 184));
  _Unwind_Resume(a1);
}

uint64_t bssl::ssl_do_info_callback(uint64_t this, const ssl_st *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(this + 112);
  if (v2) {
    return v2();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(this + 120) + 392);
  if (v2) {
    return v2();
  }
  return this;
}

uint64_t bssl::SSLTranscript::Update(void **a1, const void *a2, size_t a3)
{
  uint64_t v6 = *a1;
  if (!v6 || (uint64_t result = BUF_MEM_append(v6, a2, a3), result))
  {
    long long v8 = (EVP_MD_CTX *)(a1 + 1);
    if (EVP_MD_CTX_md(v8)) {
      EVP_DigestUpdate(v8, a2, a3);
    }
    return 1;
  }
  return result;
}

void bssl::tls_next_message(bssl *this, ssl_st *a2)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v3;
  v11[1] = v3;
  if (!bssl::tls_get_message((uint64_t)this, (uint64_t)v11)
    || (uint64_t v4 = *((void *)this + 6), (v5 = *(void *)(v4 + 224)) == 0)
    || (unint64_t v6 = *(void *)v5, *(void *)v5 < v12))
  {
    bssl::tls_next_message();
  }
  if (*(void *)v5 == v12)
  {
    unint64_t v7 = *(void *)v5;
  }
  else
  {
    memmove(*(void **)(v5 + 8), (const void *)(*(void *)(v5 + 8) + v12), *(void *)v5 - v12);
    unint64_t v7 = v12;
    uint64_t v4 = *((void *)this + 6);
    uint64_t v5 = *(void *)(v4 + 224);
    unint64_t v6 = *(void *)v5;
  }
  *(void *)uint64_t v5 = v6 - v7;
  *(_WORD *)(v4 + 220) &= ~8u;
  *(_WORD *)(*((void *)this + 6) + 220) &= ~0x10u;
  if (!SSL_in_init((uint64_t)this))
  {
    uint64_t v8 = *((void *)this + 6);
    uint64_t v10 = *(void **)(v8 + 224);
    uint64_t v9 = (BUF_MEM **)(v8 + 224);
    if (!*v10) {
      std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](v9, 0);
    }
  }
}

uint64_t bssl::ssl_hash_message(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2) {
    return 1;
  }
  else {
    return bssl::SSLTranscript::Update((void **)(a1 + 424), *(const void **)(a2 + 24), *(void *)(a2 + 32));
  }
}

uint64_t bssl::ssl_log_secret(uint64_t a1, const char *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (!*(void *)(*(void *)(a1 + 120) + 760)) {
    return 1;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = v8;
  _OWORD v16[2] = v8;
  v16[0] = v8;
  CBB_zero(v16);
  v15[0] = 0;
  v15[1] = 0;
  size_t v9 = strlen(a2);
  if (!CBB_init((uint64_t)v16, v9 + 2 * a4 + 67)
    || (size_t v10 = strlen(a2), !CBB_add_bytes((uint64_t)v16, a2, v10))
    || !CBB_add_u8((uint64_t)v16, 0x20u)
    || !bssl::cbb_add_hex_consttime((uint64_t)v16, (unsigned __int8 *)(*(void *)(a1 + 48) + 48), 32)
    || !CBB_add_u8((uint64_t)v16, 0x20u)
    || !bssl::cbb_add_hex_consttime((uint64_t)v16, a3, a4)
    || !CBB_add_u8((uint64_t)v16, 0))
  {
    unint64_t v12 = 0;
    goto LABEL_12;
  }
  BOOL v11 = bssl::CBBFinishArray((uint64_t)v16, (uint64_t)v15);
  unint64_t v12 = (void *)v15[0];
  if (!v11)
  {
LABEL_12:
    uint64_t v13 = 0;
    goto LABEL_13;
  }
  (*(void (**)(uint64_t, void))(*(void *)(a1 + 120) + 760))(a1, v15[0]);
  uint64_t v13 = 1;
LABEL_13:
  OPENSSL_free(v12);
  CBB_cleanup((uint64_t)v16);
  return v13;
}

void sub_1BA1052B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t bssl::tls13_set_traffic_key(uint64_t a1, const ssl_session_st *a2, uint64_t a3, bssl *this, const void *a5, size_t a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (bssl::SSLAEADContext *)bssl::ssl_session_protocol_version(this, a2);
  unsigned int v13 = v12;
  uint64_t v40 = 0;
  if (*(void *)(a1 + 168))
  {
    bssl::SSLAEADContext::CreatePlaceholderForQUIC(v12, *((void *)this + 25), v42);
    uint64_t v14 = *(bssl::SSLAEADContext **)&v42[0];
    *(void *)&v42[0] = 0;
    std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v40, v14);
    std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLAEADContext **)v42, 0);
    size_t v15 = a6;
    size_t v16 = a5;
  }
  else
  {
    uint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
    int v39 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v19 = *((void *)this + 25);
    char v20 = SSL_is_dtls((unsigned __int8 **)a1) != 0;
    if ((bssl::ssl_cipher_get_evp_aead((void **)&v39, &v38, &v38, v19, v13, v20) & 1) == 0) {
      goto LABEL_20;
    }
    digest = (EVP_MD *)bssl::ssl_session_get_digest(this, v21);
    uint64_t v23 = EVP_AEAD_key_length(v39);
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v42[3] = v24;
    v42[4] = v24;
    v42[1] = v24;
    v42[2] = v24;
    v42[0] = v24;
    if (!CRYPTO_tls13_hkdf_expand_label((int)v42, v23, digest, (uint64_t)a5, a6, "key", 3uLL, 0, 0)) {
      goto LABEL_20;
    }
    uint64_t v25 = EVP_AEAD_nonce_length((uint64_t)v39);
    memset(v41, 170, sizeof(v41));
    if (!CRYPTO_tls13_hkdf_expand_label((int)v41, v25, digest, (uint64_t)a5, a6, "iv", 2uLL, 0, 0)) {
      goto LABEL_20;
    }
    unsigned int v26 = (unsigned __int16 *)*((unsigned __int16 *)this + 2);
    char v27 = SSL_is_dtls((unsigned __int8 **)a1) != 0;
    bssl::SSLAEADContext::Create(a3, v26, v27, *((void *)this + 25), v42, v23, 0, 0, &v37, v41, v25);
    int v28 = v37;
    int v37 = 0;
    std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v40, v28);
    std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v37, 0);
    size_t v15 = 0;
    size_t v16 = 0;
  }
  int v17 = v40;
  if (!v40)
  {
LABEL_20:
    uint64_t v18 = 0;
    goto LABEL_21;
  }
  if (a6 < 0x31)
  {
    long long v29 = *(unsigned __int8 **)a1;
    if (a3)
    {
      uint64_t v30 = (uint64_t (*)(uint64_t, const ssl_session_st *, bssl::SSLAEADContext **, const void *, size_t))*((void *)v29 + 18);
      uint64_t v40 = 0;
      uint64_t v35 = v17;
      char v31 = v30(a1, a2, &v35, v16, v15);
      std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v35, 0);
      if (v31)
      {
        if (a6) {
          memmove((void *)(*(void *)(a1 + 48) + 296), a5, a6);
        }
        *(unsigned char *)(*(void *)(a1 + 48) + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = a6;
LABEL_19:
        uint64_t v18 = 1;
        goto LABEL_21;
      }
    }
    else
    {
      int v32 = (uint64_t (*)(uint64_t, const ssl_session_st *, bssl::SSLAEADContext **, const void *, size_t))*((void *)v29 + 17);
      uint64_t v40 = 0;
      char v36 = v17;
      char v33 = v32(a1, a2, &v36, v16, v15);
      std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v36, 0);
      if (v33)
      {
        if (a6) {
          memmove((void *)(*(void *)(a1 + 48) + 344), a5, a6);
        }
        *(unsigned char *)(*(void *)(a1 + 48) + 441) = a6;
        goto LABEL_19;
      }
    }
    goto LABEL_20;
  }
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_enc.cc", 195);
  uint64_t v18 = 0;
LABEL_21:
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v40, 0);
  return v18;
}

void sub_1BA1055E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  unint64_t v6 = va_arg(va1, bssl::SSLAEADContext *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLAEADContext **)va, 0);
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLAEADContext **)va1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](bssl::SSLAEADContext **a1, bssl::SSLAEADContext *a2)
{
  long long v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    bssl::SSLAEADContext::~SSLAEADContext(v3);
    OPENSSL_free(v4);
  }
}

const EVP_MD *bssl::ssl_get_handshake_digest(bssl *this, uint64_t a2, const ssl_cipher_st *a3)
{
  int v3 = *(_DWORD *)(a2 + 36);
  switch(v3)
  {
    case 4:
      return EVP_sha384();
    case 2:
      goto LABEL_5;
    case 1:
      if (this >= 0x303)
      {
LABEL_5:
        return EVP_sha256();
      }
      else
      {
        return (const EVP_MD *)EVP_md5_sha1();
      }
    default:
      bssl::ssl_get_handshake_digest();
  }
}

const EVP_MD *bssl::ssl_session_get_digest(bssl *this, const ssl_session_st *a2)
{
  int v3 = (bssl *)bssl::ssl_session_protocol_version(this, a2);
  uint64_t v5 = *((void *)this + 25);

  return bssl::ssl_get_handshake_digest(v3, v5, v4);
}

uint64_t bssl::ssl_session_protocol_version(bssl *this, const ssl_session_st *a2)
{
  unsigned __int16 v3 = -21846;
  if ((bssl::ssl_protocol_version_from_wire((bssl *)&v3, (unsigned __int16 *)*((unsigned __int16 *)this + 2)) & 1) == 0) {
    bssl::ssl_session_protocol_version();
  }
  return v3;
}

void bssl::SSLAEADContext::~SSLAEADContext(bssl::SSLAEADContext *this)
{
}

uint64_t EVP_AEAD_CTX_cleanup(uint64_t result)
{
  if (*(void *)result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    void *v1 = 0;
  }
  return result;
}

BOOL bssl::ssl_check_message_type(bssl *a1, uint64_t a2, int a3)
{
  int v4 = *(unsigned __int8 *)(a2 + 1);
  if (v4 != a3)
  {
    bssl::ssl_send_alert(a1, (ssl_st *)2, 10);
    ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake.cc", 218);
    ERR_add_error_dataf("got type %d, wanted type %d", v6, v7, v8, v9, v10, v11, v12, *(unsigned char *)(a2 + 1));
  }
  return v4 == a3;
}

const EVP_MD *EVP_sha256(void)
{
  return (const EVP_MD *)&EVP_sha256_storage;
}

void bssl::SSLAEADContext::Create(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, size_t a6@<X5>, const void *a7@<X6>, size_t a8@<X7>, bssl::SSLAEADContext **a9@<X8>, const void *a10, size_t a11)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  __int16 v39 = (__int16)a2;
  char v38 = a3;
  char v36 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v37 = a4;
  unsigned __int16 v35 = -21846;
  uint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  if (bssl::ssl_protocol_version_from_wire((bssl *)&v35, a2))
  {
    evp_aeaunsigned int d = bssl::ssl_cipher_get_evp_aead((void **)&v36, &v34, &v33, a4, v35, a3);
    int v20 = v33 == a11 ? evp_aead : 0;
    if (v20 == 1 && v34 == a8)
    {
      *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
      void __dst[3] = v22;
      _OWORD __dst[4] = v22;
      __dst[1] = v22;
      __dst[2] = v22;
      __dst[0] = v22;
      if (a8)
      {
        if (a8 + a6 + a11 >= 0x51)
        {
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_aead_ctx.cc", 80);
          goto LABEL_10;
        }
        memcpy(__dst, a7, a8);
        if (a6) {
          memcpy((char *)__dst + a8, a5, a6);
        }
        if (a11) {
          memcpy((char *)__dst + a8 + a6, a10, a11);
        }
        a5 = __dst;
        a6 += a8 + a11;
      }
      uint64_t v23 = (bssl::SSLAEADContext *)bssl::New<bssl::SSLAEADContext,unsigned short &,BOOL &,ssl_cipher_st const*&>(&v39, &v38, &v37);
      long long v24 = v23;
      if (!v23)
      {
LABEL_39:
        *a9 = v24;
        return;
      }
      int v25 = bssl::SSLAEADContext::ProtocolVersion(v23);
      if (v25 != v35)
      {
        char v31 = "aead_ctx->ProtocolVersion() == protocol_version";
        int v32 = 97;
        goto LABEL_46;
      }
      if (!EVP_AEAD_CTX_init_with_direction((void *)v24 + 1, v36, (uint64_t)a5, a6, 0, a1))
      {
        *a9 = 0;
        bssl::Delete<bssl::SSLAEADContext>(v24);
        return;
      }
      if ((unint64_t)EVP_AEAD_nonce_length((uint64_t)v36) > 0x18)
      {
        char v31 = "EVP_AEAD_nonce_length(aead) <= EVP_AEAD_MAX_NONCE_LENGTH";
        int v32 = 105;
        goto LABEL_46;
      }
      *((unsigned char *)v24 + 605) = EVP_AEAD_nonce_length((uint64_t)v36);
      if (a8)
      {
        if (v35 < 0x304u)
        {
          *((unsigned char *)v24 + 609) |= 0xBu;
          goto LABEL_39;
        }
        char v31 = "protocol_version < TLS1_3_VERSION";
        int v32 = 139;
      }
      else
      {
        if (a11 > 0xC)
        {
          char v31 = "fixed_iv.size() <= sizeof(aead_ctx->fixed_nonce_)";
          int v32 = 110;
          goto LABEL_46;
        }
        if (a11) {
          memcpy((char *)v24 + 592, a10, a11);
        }
        *((unsigned char *)v24 + 604) = a11;
        uint64_t v26 = v37;
        int v27 = *(_DWORD *)(v37 + 28);
        if ((v27 & 0x40) != 0)
        {
          *((unsigned char *)v24 + 609) |= 4u;
          int v27 = *(_DWORD *)(v26 + 28);
          char v29 = 8;
        }
        else
        {
          size_t v28 = *((unsigned __int8 *)v24 + 605);
          if (a11 > v28)
          {
            char v31 = "fixed_iv.size() <= aead_ctx->variable_nonce_len_";
            int v32 = 120;
            goto LABEL_46;
          }
          char v29 = v28 - a11;
        }
        *((unsigned char *)v24 + 605) = v29;
        if ((v27 & 0x18) != 0) {
          *((unsigned char *)v24 + 609) |= 1u;
        }
        if (v35 < 0x304u) {
          goto LABEL_39;
        }
        char v30 = *((unsigned char *)v24 + 609);
        *((unsigned char *)v24 + 605) = 8;
        *((unsigned char *)v24 + 609) = v30 & 0xEA | 0x14;
        if (a11 >= 8) {
          goto LABEL_39;
        }
        char v31 = "fixed_iv.size() >= aead_ctx->variable_nonce_len_";
        int v32 = 136;
      }
LABEL_46:
      __assert_rtn("Create", "ssl_aead_ctx.cc", v32, v31);
    }
  }
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_aead_ctx.cc", 70);
LABEL_10:
  *a9 = 0;
}

void sub_1BA105BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EVP_AEAD_nonce_length(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t bssl::ssl_cipher_get_evp_aead(void **a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned int a5, char a6)
{
  uint64_t result = 0;
  *a1 = 0;
  *a2 = 0;
  *a3 = 0;
  if (a5 == 771) {
    char v8 = a6;
  }
  else {
    char v8 = 1;
  }
  if (a5 == 772) {
    char v9 = a6;
  }
  else {
    char v9 = 1;
  }
  switch(*(_DWORD *)(a4 + 32))
  {
    case 1:
      uint64_t result = 0;
      int v13 = *(_DWORD *)(a4 + 28);
      if (v13 > 3)
      {
        if (v13 == 4)
        {
          if (a5 == 769)
          {
            uint64_t v14 = EVP_aead_aes_256_cbc_sha1_tls_implicit_iv();
            goto LABEL_35;
          }
          uint64_t v19 = EVP_aead_aes_256_cbc_sha1_tls();
LABEL_42:
          *a1 = v19;
          goto LABEL_43;
        }
        if (v13 == 32)
        {
          uint64_t v19 = EVP_aead_null_sha1_tls();
          goto LABEL_42;
        }
      }
      else
      {
        if (v13 == 1)
        {
          if (a5 == 769)
          {
            *a1 = EVP_aead_des_ede3_cbc_sha1_tls_implicit_iv();
            uint64_t v20 = 8;
LABEL_36:
            *a3 = v20;
LABEL_43:
            uint64_t v15 = 20;
            goto LABEL_44;
          }
          uint64_t v19 = EVP_aead_des_ede3_cbc_sha1_tls();
          goto LABEL_42;
        }
        if (v13 == 2)
        {
          if (a5 == 769)
          {
            uint64_t v14 = EVP_aead_aes_128_cbc_sha1_tls_implicit_iv();
LABEL_35:
            *a1 = v14;
            uint64_t v20 = 16;
            goto LABEL_36;
          }
          uint64_t v19 = EVP_aead_aes_128_cbc_sha1_tls();
          goto LABEL_42;
        }
      }
      return result;
    case 2:
      if (*(_DWORD *)(a4 + 28) != 2) {
        return 0;
      }
      *a1 = EVP_aead_aes_128_cbc_sha256_tls();
      uint64_t v15 = 32;
      goto LABEL_44;
    case 4:
      if (*(_DWORD *)(a4 + 28) != 4) {
        return 0;
      }
      *a1 = EVP_aead_aes_256_cbc_sha384_tls();
      uint64_t v15 = 48;
LABEL_44:
      *a2 = v15;
      return 1;
    case 8:
      int v16 = *(_DWORD *)(a4 + 28);
      switch(v16)
      {
        case 64:
          uint64_t v17 = 12;
          uint64_t v18 = EVP_aead_chacha20_poly1305();
          break;
        case 16:
          uint64_t v17 = 4;
          if (v8)
          {
            if (v9) {
              uint64_t v18 = EVP_aead_aes_256_gcm();
            }
            else {
              uint64_t v18 = EVP_aead_aes_256_gcm_tls13();
            }
          }
          else
          {
            uint64_t v18 = EVP_aead_aes_256_gcm_tls12();
          }
          break;
        case 8:
          uint64_t v17 = 4;
          if (v8)
          {
            if (v9) {
              uint64_t v18 = EVP_aead_aes_128_gcm();
            }
            else {
              uint64_t v18 = EVP_aead_aes_128_gcm_tls13();
            }
          }
          else
          {
            uint64_t v18 = EVP_aead_aes_128_gcm_tls12();
          }
          break;
        default:
          return 0;
      }
      *a1 = v18;
      *a3 = v17;
      if (a5 >= 0x304) {
        *a3 = EVP_AEAD_nonce_length((uint64_t)v18);
      }
      return 1;
    default:
      return result;
  }
}

int *EVP_aead_aes_256_gcm_tls13()
{
  return &EVP_aead_aes_256_gcm_tls13_storage;
}

const EVP_MD *EVP_sha384(void)
{
  return (const EVP_MD *)&EVP_sha384_storage;
}

uint64_t CRYPTO_once(pthread_once_t *a1, void (*a2)(void))
{
  uint64_t result = pthread_once(a1, a2);
  if (result) {
    abort();
  }
  return result;
}

void *bssl::New<bssl::SSLAEADContext,unsigned short &,BOOL &,ssl_cipher_st const*&>(__int16 *a1, char *a2, void *a3)
{
  uint64_t v6 = OPENSSL_malloc(0x268uLL);
  uint64_t v7 = v6;
  if (v6)
  {
    __int16 v8 = *a1;
    char v9 = *a2;
    *uint64_t v6 = *a3;
    EVP_AEAD_CTX_zero(v6 + 1);
    *((_WORD *)v7 + 302) = 0;
    *((_WORD *)v7 + 303) = v8;
    *((unsigned char *)v7 + 60EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v9;
    *((unsigned char *)v7 + 609) &= 0xE0u;
    v7[74] = 0;
    *((_DWORD *)v7 + 15std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0;
  }
  return v7;
}

void EVP_AEAD_CTX_zero(void *a1)
{
}

uint64_t EVP_AEAD_key_length(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t EVP_AEAD_CTX_init_with_direction(void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*a2 != a4)
  {
    ERR_put_error(30, 0, 120, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/aead.c", 78);
    goto LABEL_6;
  }
  *a1 = a2;
  uint64_t v7 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))*((void *)a2 + 1);
  if (v7)
  {
    uint64_t result = v7(a1, a3, a4, a5);
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  uint64_t result = (*((uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))a2 + 2))(a1, a3, a4, a5, a6);
  if (!result)
  {
LABEL_6:
    uint64_t result = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t aead_aes_gcm_init_with_dir(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  if (8 * a3 != 128 && 8 * a3 != 256)
  {
    int v7 = 102;
    int v8 = 215;
    goto LABEL_9;
  }
  if (a4) {
    unint64_t v6 = a4;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 >= 0x11)
  {
    int v7 = 116;
    int v8 = 224;
LABEL_9:
    ERR_put_error(30, 0, v7, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_aes.m", v8);
    return 0;
  }
  if (a5 == 1) {
    char v9 = (size_t *)ccaes_gcm_encrypt_mode();
  }
  else {
    char v9 = (size_t *)ccaes_gcm_decrypt_mode();
  }
  *(void *)(a1 + EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v9;
  uint64_t v10 = malloc_type_malloc(*v9, 0x3C23FF4EuLL);
  *(void *)(a1 + 16) = v10;
  if (!v10 || ccgcm_init())
  {
    free((void *)(a1 + 8));
    return 0;
  }
  *(unsigned char *)(a1 + 24) = v6;
  *(void *)(a1 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0;
  uint64_t result = 1;
  *(unsigned char *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 576) = v6;
  return result;
}

BOOL bssl::hkdf_extract_to_secret(uint64_t a1, bssl::SSLTranscript *this)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  int v3 = a1 + 40;
  int v4 = (EVP_MD *)bssl::SSLTranscript::Digest(this);
  int v5 = HKDF_extract(v3, &v7, v4);
  if (v5 && v7 != *(void *)(a1 + 32)) {
    bssl::hkdf_extract_to_secret();
  }
  return v5 != 0;
}

uint64_t HKDF_extract(int a1, void *a2, EVP_MD *md)
{
  int v5 = EVP_MD_type(md);
  boringssl_crypto_hash_nid_to_cc_digest(v5);
  if (cchkdf_extract()) {
    return 0;
  }
  *a2 = EVP_MD_size(md);
  return 1;
}

int EVP_MD_size(const EVP_MD *md)
{
  return md->pkey_type;
}

int *EVP_aead_aes_128_gcm_tls13()
{
  return &EVP_aead_aes_128_gcm_tls13_storage;
}

uint64_t bssl::ssl_verify_peer_cert(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *(void *)(*(void *)(*(void *)this + 48) + 472);
  if (!v4)
  {
    unsigned __int8 v24 = 46;
    int v16 = *(uint64_t (**)(uint64_t, unsigned __int8 *))(*((void *)this + 1) + 48);
    if (v16)
    {
      uint64_t result = v16(v3, &v24);
      if (result == 1)
      {
        if (*(unsigned char *)(*((void *)this + 1) + 300))
        {
          uint64_t result = 1;
        }
        else
        {
          ERR_clear_error();
          uint64_t result = 0;
        }
        *(void *)(*((void *)this + 190) + 176) = 50;
        if (!result) {
          goto LABEL_32;
        }
        goto LABEL_22;
      }
      if (!result)
      {
        *(void *)(*((void *)this + 190) + 176) = 0;
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t result = (*(unsigned int (**)(void, bssl *, unsigned __int8 *))(*(void *)(*(void *)(v3 + 120)
                                                                                             + 16)
                                                                                 + 72))(*((void *)this + 190), this, &v24) ^ 1;
    }
    if (!result)
    {
LABEL_32:
      if (*(unsigned char *)(v3 + 180)) {
        return 0;
      }
      if ((*(_WORD *)(*((void *)this + 1) + 301) & 4) == 0) {
        return 0;
      }
      uint64_t v20 = *(void *)(v3 + 120);
      uint64_t v21 = *(uint64_t (**)(uint64_t, void))(v20 + 792);
      if (!v21) {
        return 0;
      }
      int v22 = v21(v3, *(void *)(v20 + 800));
      if (v22 > 0) {
        return 0;
      }
      int v23 = v22;
      ERR_put_error(16, 0, 289, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake.cc", 411);
      if (v23) {
        int v18 = 80;
      }
      else {
        int v18 = 113;
      }
LABEL_24:
      uint64_t v19 = (bssl *)v3;
LABEL_27:
      bssl::ssl_send_alert(v19, (ssl_st *)2, v18);
      return 1;
    }
LABEL_22:
    if (result != 1) {
      return result;
    }
    ERR_put_error(16, 0, 125, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake.cc", 399);
    int v18 = v24;
    goto LABEL_24;
  }
  if (*(unsigned char *)(v3 + 180)) {
    bssl::ssl_verify_peer_cert();
  }
  int v5 = EVP_MD_CTX_md(*(const EVP_MD_CTX **)(v4 + 136));
  if (v5 != EVP_MD_CTX_md(*(const EVP_MD_CTX **)(*((void *)this + 190) + 136)))
  {
    int v17 = 340;
LABEL_26:
    ERR_put_error(16, 0, 273, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake.cc", v17);
    uint64_t v19 = (bssl *)v3;
    int v18 = 47;
    goto LABEL_27;
  }
  if (EVP_MD_CTX_md(*(const EVP_MD_CTX **)(*((void *)this + 190) + 136)))
  {
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = OPENSSL_sk_value(*(unint64_t **)(v4 + 136), v6);
      int v8 = OPENSSL_sk_value(*(unint64_t **)(*((void *)this + 190) + 136), v6);
      uint64_t v9 = CRYPTO_BUFFER_len((uint64_t)v7);
      if (v9 != CRYPTO_BUFFER_len((uint64_t)v8)) {
        break;
      }
      uint64_t v10 = (const void *)CRYPTO_BUFFER_data((uint64_t)v7);
      uint64_t v11 = (const void *)CRYPTO_BUFFER_data((uint64_t)v8);
      size_t v12 = CRYPTO_BUFFER_len((uint64_t)v7);
      if (v12)
      {
        if (memcmp(v10, v11, v12)) {
          break;
        }
      }
      if (++v6 >= (unint64_t)EVP_MD_CTX_md(*(const EVP_MD_CTX **)(*((void *)this + 190) + 136))) {
        goto LABEL_10;
      }
    }
    int v17 = 355;
    goto LABEL_26;
  }
LABEL_10:
  int v13 = *(unsigned int **)(v4 + 256);
  if (v13) {
    CRYPTO_BUFFER_up_ref(*(void *)(v4 + 256));
  }
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(*((void *)this + 190) + 256), v13);
  uint64_t v14 = *(unsigned int **)(v4 + 248);
  if (v14) {
    CRYPTO_BUFFER_up_ref(*(void *)(v4 + 248));
  }
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(*((void *)this + 190) + 248), v14);
  uint64_t result = 0;
  *(void *)(*((void *)this + 190) + 176) = *(void *)(v4 + 176);
  return result;
}

uint64_t boringssl_context_certificate_verify_callback(const SSL *a1, char *a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  int v5 = SSL_get_ex_data(a1, 0);
  if (!v5) {
    return 1;
  }
  uint64_t v6 = (uint64_t)v5;
  if (*(_DWORD *)v5 != -1252936367) {
    return 1;
  }
  uint64_t v7 = v5[1];
  if (!v7) {
    return 1;
  }
  if (*(void *)(v7 + 368) || *(void *)(v7 + 376))
  {
    int v8 = SSL_get_ex_data(a1, 0);
    if (!v8) {
      return 1;
    }
    if (*(_DWORD *)v8 != -1252936367) {
      return 1;
    }
    uint64_t v9 = v8[1];
    if (!v9) {
      return 1;
    }
    int is_server = SSL_is_server((uint64_t)a1);
    uint64_t v11 = 376;
    if (!is_server) {
      uint64_t v11 = 368;
    }
    CFArrayRef v12 = *(const __CFArray **)(v9 + v11);
    if (v12)
    {
      uint64_t v13 = SSL_get0_peer_pubkey((uint64_t)a1);
      if (!v13)
      {
        char v23 = 46;
        goto LABEL_34;
      }
      uint64_t v14 = (const EVP_PKEY *)v13;
      if (CFArrayGetCount(v12) < 1)
      {
LABEL_22:
        char v23 = 42;
LABEL_34:
        *a2 = v23;
        return 1;
      }
      CFIndex v15 = 0;
      while (1)
      {
        CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v12, v15);
        if (!ValueAtIndex) {
          break;
        }
        CFDataRef v17 = ValueAtIndex;
        CFIndex Length = CFDataGetLength(ValueAtIndex);
        BytePtr = CFDataGetBytePtr(v17);
        if (!Length) {
          break;
        }
        if (!BytePtr) {
          break;
        }
        *(void *)buf = BytePtr;
        *(void *)&buf[8] = Length;
        uint64_t v20 = EVP_parse_public_key((long long *)buf);
        if (!v20) {
          break;
        }
        uint64_t v21 = v20;
        int v22 = EVP_PKEY_cmp(v14, v20);
        EVP_PKEY_free(v21);
        if (v22 == 1) {
          return 0;
        }
        if (++v15 >= CFArrayGetCount(v12)) {
          goto LABEL_22;
        }
      }
    }
    char v23 = 80;
    goto LABEL_34;
  }
  if ((*(unsigned char *)(v7 + 558) & 0xC) == 8)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v7 + 16));
    if (WeakRetained)
    {
      int v25 = WeakRetained;
      uint64_t v26 = objc_loadWeakRetained((id *)(v7 + 16));
      char v27 = v26[475];

      if (v27) {
        return 2;
      }
    }
    id v28 = objc_loadWeakRetained((id *)(v7 + 16));
    if (v28)
    {
      char v29 = objc_loadWeakRetained((id *)(v7 + 16));
      BOOL v30 = (v29[475] & 1) == 0;
    }
    else
    {
      BOOL v30 = 1;
    }

    uint64_t v35 = 2;
    if (v30 && g_boringssl_log)
    {
      long long v46 = (id)g_boringssl_log;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
        boringssl_context_certificate_verify_callback_cold_1(v7 + 16, v46);
      }

      return 2;
    }
  }
  else
  {
    if ((*(unsigned char *)(v7 + 558) & 4) != 0)
    {
      int v37 = *(unsigned __int8 *)(v7 + 320);
      id v38 = objc_loadWeakRetained((id *)(v7 + 16));
      __int16 v39 = v38;
      if (!v37)
      {
        if (!v38
          || (long long v54 = objc_loadWeakRetained((id *)(v7 + 16)),
              char v55 = v54[475],
              v54,
              v39,
              (v55 & 1) == 0))
        {
          id v56 = objc_loadWeakRetained((id *)(v7 + 16));
          if (v56)
          {
            __int16 v57 = objc_loadWeakRetained((id *)(v7 + 16));
            BOOL v58 = (v57[475] & 1) == 0;
          }
          else
          {
            BOOL v58 = 1;
          }

          if (v58)
          {
            if (g_boringssl_log)
            {
              __int16 v63 = (id)g_boringssl_log;
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
              {
                id v64 = objc_loadWeakRetained((id *)(v7 + 16));
                if (v64)
                {
                  uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v7 + 16));
                  __int16 v65 = v2 + 391;
                }
                else
                {
                  __int16 v65 = &unk_1BA179713;
                }
                id v67 = objc_loadWeakRetained((id *)(v7 + 16));
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "boringssl_context_certificate_verify_callback";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1948;
                __int16 v72 = 2082;
                uint64_t v73 = v65;
                __int16 v74 = 2048;
                id v75 = v67;
                _os_log_impl(&dword_1BA0DE000, v63, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] Certificate verification result: FAIL", buf, 0x26u);

                if (v64) {
              }
                }
            }
          }
        }
        *a2 = boringssl_helper_convert_trusterror_to_alertcode(*(_DWORD *)(v7 + 324));
        return 1;
      }
      uint64_t v40 = &OBJC_IVAR___boringssl_concrete_nw_protocol_boringssl_logging_disabled;
      if (!v38
        || (uint64_t v41 = objc_loadWeakRetained((id *)(v7 + 16)),
            char v42 = v41[475],
            v41,
            v39,
            (v42 & 1) == 0))
      {
        id v43 = objc_loadWeakRetained((id *)(v7 + 16));
        if (v43)
        {
          int v44 = objc_loadWeakRetained((id *)(v7 + 16));
          BOOL v45 = (v44[475] & 1) == 0;
        }
        else
        {
          BOOL v45 = 1;
        }

        uint64_t v35 = 0;
        if (!v45 || !g_boringssl_log) {
          return v35;
        }
        uint64_t v59 = (id)g_boringssl_log;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          id v60 = objc_loadWeakRetained((id *)(v7 + 16));
          if (v60)
          {
            uint64_t v40 = (int *)objc_loadWeakRetained((id *)(v7 + 16));
            __int16 v61 = (char *)v40 + 391;
          }
          else
          {
            __int16 v61 = &unk_1BA179713;
          }
          id v66 = objc_loadWeakRetained((id *)(v7 + 16));
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "boringssl_context_certificate_verify_callback";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1945;
          __int16 v72 = 2082;
          uint64_t v73 = v61;
          __int16 v74 = 2048;
          id v75 = v66;
          _os_log_impl(&dword_1BA0DE000, v59, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] Certificate verification result: OK", buf, 0x26u);

          if (v60) {
        }
          }
      }
      return 0;
    }
    session = SSL_get_session(a1);
    if (boringssl_session_set_peer_verification_state_from_session(v6, (uint64_t)session))
    {
      id v32 = (id)v7;
      v68[0] = MEMORY[0x1E4F143A8];
      v68[1] = 3221225472;
      int64x2_t v68[2] = __boringssl_context_certificate_verify_callback_block_invoke;
      v68[3] = &unk_1E61FD8B8;
      uint64_t v70 = v6;
      uint64_t v33 = (__SecTrust **)v32;
      int v69 = v33;
      uint64_t v34 = (void *)MEMORY[0x1BA9E5C70](v68);
      if (boringssl_context_evaluate_trust_async(v6, v33[45], v34))
      {
        uint64_t v35 = 2;
      }
      else
      {
        *a2 = 80;
        uint64_t v35 = 1;
      }
    }
    else
    {
      id v47 = objc_loadWeakRetained((id *)(v7 + 16));
      if (v47)
      {
        BOOL v48 = v47;
        __int16 v49 = objc_loadWeakRetained((id *)(v7 + 16));
        char v50 = v49[475];

        if (v50) {
          return 1;
        }
      }
      id v51 = objc_loadWeakRetained((id *)(v7 + 16));
      if (v51)
      {
        int v52 = objc_loadWeakRetained((id *)(v7 + 16));
        BOOL v53 = (v52[475] & 1) == 0;
      }
      else
      {
        BOOL v53 = 1;
      }

      uint64_t v35 = 1;
      if (v53 && g_boringssl_log)
      {
        uint64_t v62 = (id)g_boringssl_log;
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
          boringssl_context_certificate_verify_callback_cold_2(v7 + 16, v62);
        }

        return 1;
      }
    }
  }
  return v35;
}

uint64_t bssl::parse_server_hello_tls13(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t result = bssl::ssl_parse_server_hello(a2, a3, a4);
  if (result)
  {
    if (*(_WORD *)(a2 + 16) == 771
      && !*(unsigned char *)(a2 + 58)
      && CBS_mem_equal(a2 + 40, (char *)(a1 + 1597), *(unsigned __int8 *)(a1 + 1629))
      && *(void *)(a2 + 72))
    {
      return 1;
    }
    else
    {
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 120);
      uint64_t result = 0;
      *a3 = 50;
    }
  }
  return result;
}

BOOL CBS_mem_equal(uint64_t a1, char *a2, uint64_t a3)
{
  return *(void *)(a1 + 8) == a3 && CRYPTO_memcmp(*(char **)a1, a2, a3) == 0;
}

uint64_t CRYPTO_memcmp(char *a1, char *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  unsigned __int8 v3 = 0;
  do
  {
    char v5 = *a1++;
    char v4 = v5;
    char v6 = *a2++;
    v3 |= v6 ^ v4;
    --a3;
  }
  while (a3);
  return v3;
}

uint64_t bssl::ssl_parse_server_hello(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1) == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)(a3 + 24);
    long long v10 = *(_OWORD *)(a3 + 8);
    if (CBS_get_u16((unsigned __int16 **)&v10, (_WORD *)(a1 + 16))
      && CBS_get_bytes((uint64_t *)&v10, (void *)(a1 + 24), 0x20uLL)
      && CBS_get_u8_length_prefixed((unsigned __int8 **)&v10, (unint64_t *)(a1 + 40))
      && *(void *)(a1 + 48) <= 0x20uLL
      && CBS_get_u16((unsigned __int16 **)&v10, (_WORD *)(a1 + 56))
      && CBS_get_u8(&v10, (unsigned char *)(a1 + 58)))
    {
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      char v5 = (unint64_t *)(a1 + 64);
      if (!*((void *)&v10 + 1)) {
        return 1;
      }
      u16_length_prefixeunsigned int d = CBS_get_u16_length_prefixed((unsigned __int8 **)&v10, v5);
      int v7 = 756;
      if (u16_length_prefixed)
      {
        if (!*((void *)&v10 + 1)) {
          return 1;
        }
      }
    }
    else
    {
      int v7 = 746;
    }
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", v7);
    uint64_t result = 0;
    char v9 = 50;
  }
  else
  {
    ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 734);
    uint64_t result = 0;
    char v9 = 10;
  }
  *a2 = v9;
  return result;
}

uint64_t CBS_get_u8_length_prefixed(unsigned __int8 **a1, unint64_t *a2)
{
  return cbs_get_length_prefixed(a1, a2, 1uLL);
}

uint64_t bssl::tls13_advance_key_schedule(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v2;
  long long v12 = v2;
  *(_OWORD *)munsigned int d = v2;
  long long v10 = v2;
  unsigned int size = -1431655766;
  unsigned __int8 v3 = (bssl::SSLTranscript *)(a1 + 424);
  char v4 = bssl::SSLTranscript::Digest((bssl::SSLTranscript *)(a1 + 424));
  uint64_t result = EVP_Digest(0, 0, md, &size, v4, 0);
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = (EVP_MD *)bssl::SSLTranscript::Digest(v3);
    return CRYPTO_tls13_hkdf_expand_label(a1 + 40, v6, v7, a1 + 40, *(void *)(a1 + 32), "derived", 7uLL, md, size)
        && bssl::hkdf_extract_to_secret(a1, v3);
  }
  return result;
}

int EVP_Digest(const void *data, size_t count, unsigned __int8 *md, unsigned int *size, const EVP_MD *type, ENGINE *impl)
{
  memset(&v12, 0, sizeof(v12));
  int v10 = EVP_DigestInit_ex(&v12, type, (ENGINE *)md);
  if (v10)
  {
    ((void (*)(EVP_MD_CTX *, const void *, size_t))v12.digest->init)(&v12, data, count);
    EVP_DigestFinal_ex(&v12, md, size);
  }
  EVP_MD_CTX_cleanup(&v12);
  return v10;
}

void aead_aes_gcm_cleanup(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 16))
  {
    cc_clear();
    long long v2 = *(void **)(a1 + 16);
    if (v2)
    {
      free(v2);
      *(void *)(a1 + 16) = 0;
    }
  }
}

uint64_t bssl::tls_set_write_state(bssl *a1, ssl_st *a2, bssl::SSLAEADContext **a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = bssl::tls_flush_pending_hs_data(a1, a2);
  if (result)
  {
    uint64_t v11 = *((void *)a1 + 21);
    if (!v11) {
      goto LABEL_7;
    }
    uint64_t v12 = *(void *)(*((void *)a1 + 6) + 280);
    if (v12 && (*(unsigned char *)(v12 + 1586) & 8) != 0
      || (uint64_t result = (*(uint64_t (**)(bssl *, ssl_st *, void, uint64_t, uint64_t))(v11 + 8))(a1, a2, *(void *)*a3, a4, a5), result))
    {
      if (a2 == 1) {
        return 1;
      }
LABEL_7:
      uint64_t v13 = *((void *)a1 + 6);
      *(void *)(v13 + EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0;
      uint64_t v14 = *a3;
      *a3 = 0;
      std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLAEADContext **)(v13 + 272), v14);
      *(_DWORD *)(*((void *)a1 + 6) + 204) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t bssl::tls_set_read_state(bssl *a1, const ssl_st *a2, bssl::SSLAEADContext **a3, uint64_t a4, uint64_t a5)
{
  if (bssl::tls_has_unprocessed_handshake_data(a1, a2))
  {
    ERR_put_error(16, 0, 255, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_method.cc", 90);
    bssl::ssl_send_alert(a1, (ssl_st *)2, 10);
    return 0;
  }
  uint64_t v11 = (uint64_t (**)(bssl *, const ssl_st *, void, uint64_t, uint64_t))*((void *)a1 + 21);
  if (!v11) {
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(*((void *)a1 + 6) + 280);
  if (v12 && (*(unsigned char *)(v12 + 1586) & 8) != 0 || (uint64_t result = (*v11)(a1, a2, *(void *)*a3, a4, a5), result))
  {
    if (a2 == 1) {
      return 1;
    }
LABEL_8:
    uint64_t v13 = *((void *)a1 + 6);
    *(void *)uint64_t v13 = 0;
    uint64_t v14 = *a3;
    *a3 = 0;
    std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLAEADContext **)(v13 + 264), v14);
    *(_DWORD *)(*((void *)a1 + 6) + 20std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = a2;
    return 1;
  }
  return result;
}

uint64_t bssl::SSLTranscript::InitHash(size_t **this, bssl *a2, const ssl_cipher_st *a3)
{
  handshake_digest = bssl::ssl_get_handshake_digest(a2, (uint64_t)a3, a3);
  if (EVP_MD_CTX_md((const EVP_MD_CTX *)(this + 1)) == handshake_digest) {
    return 1;
  }
  uint64_t result = EVP_DigestInit_ex((EVP_MD_CTX *)(this + 1), handshake_digest, 0);
  if (result) {
    return EVP_DigestUpdate((EVP_MD_CTX *)(this + 1), (const void *)(*this)[1], **this) != 0;
  }
  return result;
}

uint64_t bssl::tls13_derive_handshake_secrets(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3 = *(void *)this;
  char v4 = (unsigned __int8 *)this + 136;
  char v5 = (bssl *)((char *)this + 424);
  if (!bssl::derive_secret_with_transcript((uint64_t)this, (int)this + 136, *((void *)this + 4), (bssl *)((char *)this + 424), "c hs traffic", 0xCuLL)|| !bssl::ssl_log_secret(v3, "CLIENT_HANDSHAKE_TRAFFIC_SECRET", v4, *((void *)this + 4))|| !bssl::derive_secret_with_transcript((uint64_t)this, (int)this + 184, *((void *)this + 4), v5, "s hs traffic", 0xCuLL))
  {
    return 0;
  }
  uint64_t v6 = *((void *)this + 4);

  return bssl::ssl_log_secret(v3, "SERVER_HANDSHAKE_TRAFFIC_SECRET", (unsigned __int8 *)this + 184, v6);
}

void std::unique_ptr<bssl::SSL3_STATE,bssl::internal::Deleter>::reset[abi:ne180100](bssl::SSL3_STATE **a1, bssl::SSL3_STATE *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    bssl::SSL3_STATE::~SSL3_STATE(v3);
    OPENSSL_free(v4);
  }
}

double bssl::New<bssl::SSL3_STATE>()
{
  v0 = OPENSSL_malloc(0x260uLL);
  if (v0)
  {
    *((_DWORD *)v0 + 43) = 0;
    *((_DWORD *)v0 + 44) = 0;
    *((_DWORD *)v0 + 54) = 0;
    double result = 0.0;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_WORD *)v0 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0;
    *(void *)((char *)v0 + 111) = 0;
    *(void *)((char *)v0 + 103) = 0;
    *(_DWORD *)((char *)v0 + 11EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0;
    *(_OWORD *)((char *)v0 + 127) = 0u;
    *(_OWORD *)((char *)v0 + 143) = 0u;
    *(_OWORD *)((char *)v0 + 153) = 0u;
    v0[24] = 0;
    v0[25] = 0;
    v0[23] = 0;
    *(void *)((char *)v0 + 205) = 0;
    *((_WORD *)v0 + 110) &= 0x8000u;
    *((_OWORD *)v0 + 14) = 0u;
    *((_OWORD *)v0 + 15) = 0u;
    *((_DWORD *)v0 + 64) = 0;
    *(_OWORD *)(v0 + 33) = 0u;
    *(_OWORD *)(v0 + 35) = 0u;
    *(_OWORD *)(v0 + 37) = 0u;
    *(_OWORD *)(v0 + 39) = 0u;
    *(_OWORD *)(v0 + 41) = 0u;
    *(_OWORD *)(v0 + 43) = 0u;
    *(_OWORD *)(v0 + 45) = 0u;
    *(_OWORD *)(v0 + 47) = 0u;
    *(_OWORD *)(v0 + 49) = 0u;
    *(_OWORD *)(v0 + 51) = 0u;
    *(_OWORD *)(v0 + 53) = 0u;
    *(_OWORD *)(v0 + 55) = 0u;
    *(_OWORD *)((char *)v0 + 455) = 0u;
    *(_OWORD *)(v0 + 59) = 0u;
    *(_OWORD *)(v0 + 61) = 0u;
    *(_OWORD *)(v0 + 63) = 0u;
    *(_OWORD *)(v0 + 65) = 0u;
    *(_OWORD *)(v0 + 67) = 0u;
    *(_OWORD *)(v0 + 69) = 0u;
    *(_OWORD *)(v0 + 71) = 0u;
    *(_OWORD *)(v0 + 73) = 0u;
    v0[75] = 0;
  }
  return result;
}

uint64_t bssl::check_ech_confirmation(uint64_t a1, ssl_st *a2, char *a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a4 + 32) != 32) {
    goto LABEL_12;
  }
  int v8 = *(uint64_t **)(a4 + 24);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v12 = v8[2];
  uint64_t v11 = v8[3];
  BOOL v13 = v9 == 0x11619AE574AD21CFLL && v10 == 0x91B8651E028C1DBELL;
  BOOL v14 = v13 && v12 == 0x5E8CBB7A1611A2C2;
  if (v14 && v11 == 0x9C33A8C8E2099E07)
  {
    uint64_t v24 = 0;
    unint64_t v23 = 0xAAAAAAAA0001FE0DLL;
    uint64_t v25 = 0;
    int v22 = &v23;
    if (!bssl::ssl_parse_extensions((long long *)(a4 + 64), a3, (uint64_t *)&v22, 1, 1)) {
      return 0;
    }
    if (!BYTE3(v23)) {
      goto LABEL_22;
    }
    if (v25 != 8)
    {
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_client.cc", 148);
      BOOL v19 = 0;
      char v20 = 50;
      goto LABEL_17;
    }
    unint64_t v17 = v24 - *(void *)a4;
    int v18 = 1;
  }
  else
  {
LABEL_12:
    unint64_t v17 = bssl::ssl_ech_confirmation_signal_hello_offset(*(unsigned __int8 ***)a1, a2);
    int v18 = 0;
  }
  if (!*(void *)(a1 + 1544))
  {
LABEL_22:
    LOBYTE(a2->version) = 0;
    return 1;
  }
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v19 = bssl::ssl_ech_accept_confirmation(a1, (int)&v23, 8, a1 + 504, 32, (bssl::SSLTranscript *)(a1 + 464), v18, v16, *(char **)a4, *(void *)(a4 + 8), v17);
  if (!v19)
  {
    char v20 = 80;
LABEL_17:
    *a3 = v20;
    return v19;
  }
  LOBYTE(a2->version) = CRYPTO_memcmp((char *)(*(void *)a4 + v17), (char *)&v23, 8) == 0;
  return v19;
}

uint64_t bssl::ssl_ech_confirmation_signal_hello_offset(unsigned __int8 **this, const ssl_st *a2)
{
  if (SSL_is_dtls(this)) {
    return 38;
  }
  else {
    return 30;
  }
}

uint64_t bssl::tls_add_change_cipher_spec(bssl *this, ssl_st *a2)
{
  if (!bssl::tls_flush_pending_hs_data(this, a2)
    || !*((void *)this + 21)
    && !bssl::add_record_to_flight(this, (ssl_st *)0x14, (unint64_t)&bssl::tls_add_change_cipher_spec(ssl_st *)::kChangeCipherSpec, (const unsigned __int8 *)1))
  {
    return 0;
  }
  uint64_t v3 = 1;
  bssl::ssl_do_msg_callback((uint64_t)this, 1, 20, (uint64_t)&bssl::tls_add_change_cipher_spec(ssl_st *)::kChangeCipherSpec, 1);
  return v3;
}

uint64_t bssl::ssl_get_new_session(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 149) & 2) != 0)
  {
    ERR_put_error(16, 0, 209, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_session.cc", 358);
    return 0;
  }
  v18[0] = *(void **)(*(void *)(v2 + 120) + 16);
  uint64_t result = (uint64_t)bssl::New<ssl_session_st,bssl::SSL_X509_METHOD const*&>(v18);
  uint64_t v19 = result;
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  char v6 = *(unsigned char *)(result + 440) & 0xEF | (16 * (*(unsigned char *)(v2 + 180) & 1));
  *(unsigned char *)(result + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v6;
  *(_WORD *)(result + 4) = *(_WORD *)(v2 + 16);
  *(unsigned char *)(result + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v6 & 0xDF | (32 * (*(void *)(v2 + 168) != 0));
  v18[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  v18[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  bssl::ssl_get_current_time(v2, (uint64_t)v18);
  *(void **)(v5 + 192) = v18[0];
  unsigned int v8 = bssl::ssl_protocol_version((bssl *)v2, v7);
  uint64_t v9 = *(void *)(v2 + 128);
  if (v8 < 0x304)
  {
    int v10 = *(_DWORD *)(v9 + 304);
    int v11 = v10;
  }
  else
  {
    int v10 = *(_DWORD *)(v9 + 308);
    int v11 = 604800;
  }
  *(_DWORD *)(v5 + 184) = v10;
  *(_DWORD *)(v5 + 18EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v11;
  uint64_t v12 = *(void *)(*((void *)this + 1) + 32);
  size_t v13 = *(unsigned __int8 *)(v12 + 88);
  if (v13 >= 0x21)
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_session.cc", 390);
    uint64_t v19 = 0;
    bssl::RefCounted<ssl_session_st>::DecRefInternal((ssl_session_st *)v5);
    return 0;
  }
  if (*(unsigned char *)(v12 + 88))
  {
    memcpy((void *)(v5 + 93), (const void *)(v12 + 89), v13);
    char v14 = *(unsigned char *)(*(void *)(*((void *)this + 1) + 32) + 88);
  }
  else
  {
    char v14 = 0;
  }
  *(unsigned char *)(v5 + 92) = v14;
  char v15 = *(unsigned char *)(v5 + 440);
  *(void *)(v5 + 176) = 65;
  *(unsigned char *)(v5 + 44std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v15 & 0x7B | 4;
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)this + 190, (SSL_SESSION *)v5);
  uint64_t v17 = *(void *)(v2 + 104);
  int v16 = (SSL_SESSION **)(v2 + 104);
  if (v17) {
    std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](v16, 0);
  }
  return 1;
}

void sub_1BA1077CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t bssl::tls13_process_certificate_verify_with_transcript(uint64_t a1, uint64_t a2, char a3, const void *a4, size_t a5)
{
  if (*(void *)(a1 + 1512))
  {
    uint64_t v9 = *(bssl **)a1;
    long long v20 = *(_OWORD *)(a2 + 8);
    memset(v19, 170, sizeof(v19));
    if (CBS_get_u16((unsigned __int16 **)&v20, v19)
      && CBS_get_u16_length_prefixed((unsigned __int8 **)&v20, (unint64_t *)&v19[2])
      && !*((void *)&v20 + 1))
    {
      unsigned __int8 v18 = 50;
      if (bssl::tls12_check_peer_sigalg((bssl *)a1, (const bssl::SSL_HANDSHAKE *)&v18, (unsigned __int8 *)*(unsigned __int16 *)v19))
      {
        *(_WORD *)(*(void *)(a1 + 1520) + EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = *(_WORD *)v19;
        int v16 = 0;
        size_t v17 = 0;
        if (a3) {
          unsigned int v10 = 3;
        }
        else {
          unsigned int v10 = *((unsigned char *)v9 + 180) & 1;
        }
        if (bssl::tls13_get_cert_verify_signature_input(a1, (uint64_t)&v16, v10, a4, a5))
        {
          if (bssl::ssl_public_key_verify(v9, *(uint64_t *)&v19[2], *(uint64_t *)&v19[10], (evp_pkey_st *)*(unsigned __int16 *)v19, *(EVP_PKEY **)(a1 + 1512), v16, v17))
          {
            uint64_t v13 = 1;
LABEL_21:
            OPENSSL_free(v16);
            return v13;
          }
          ERR_put_error(16, 0, 114, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 441);
          int v15 = 51;
        }
        else
        {
          int v15 = 80;
        }
        bssl::ssl_send_alert(v9, (ssl_st *)2, v15);
        uint64_t v13 = 0;
        goto LABEL_21;
      }
      int v12 = v18;
      int v11 = v9;
    }
    else
    {
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 415);
      int v11 = v9;
      int v12 = 50;
    }
    bssl::ssl_send_alert(v11, (ssl_st *)2, v12);
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 406);
  }
  return 0;
}

void sub_1BA1079A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::tls13_process_certificate_verify(uint64_t a1, uint64_t a2)
{
  return bssl::tls13_process_certificate_verify_with_transcript(a1, a2, 0, 0, 0);
}

BOOL bssl::tls12_check_peer_sigalg(bssl *this, const bssl::SSL_HANDSHAKE *a2, unsigned __int8 *a3)
{
  int v3 = (int)a3;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *(void *)(v5 + 264);
  if (v6)
  {
    int v7 = *(__int16 **)(v5 + 256);
  }
  else
  {
    int v7 = &bssl::kVerifySignatureAlgorithms;
    uint64_t v6 = 10;
  }
  uint64_t v8 = 2 * v6;
  while (1)
  {
    int v9 = (unsigned __int16)*v7;
    if (v9 == a3) {
      break;
    }
    ++v7;
    v8 -= 2;
    if (!v8)
    {
      ERR_put_error(16, 0, 245, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 455);
      *(unsigned char *)a2 = 47;
      return v9 == v3;
    }
  }
  return v9 == v3;
}

uint64_t bssl::tls13_derive_application_secrets(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3 = *(void *)this;
  char v4 = (bssl *)((char *)this + 424);
  *(unsigned char *)(*(void *)(v3 + 48) + 442) = bssl::SSLTranscript::DigestLen((bssl *)((char *)this + 424));
  if (!bssl::derive_secret_with_transcript((uint64_t)this, (int)this + 232, *((void *)this + 4), v4, "c ap traffic", 0xCuLL)|| !bssl::ssl_log_secret(v3, "CLIENT_TRAFFIC_SECRET_0", (unsigned __int8 *)this + 232, *((void *)this + 4))|| !bssl::derive_secret_with_transcript((uint64_t)this, (int)this + 280, *((void *)this + 4), v4, "s ap traffic", 0xCuLL)|| !bssl::ssl_log_secret(
                        v3,
                        "SERVER_TRAFFIC_SECRET_0",
                        (unsigned __int8 *)this + 280,
                        *((void *)this + 4))
    || !bssl::derive_secret_with_transcript((uint64_t)this, *(void *)(v3 + 48) + 392, *(unsigned __int8 *)(*(void *)(v3 + 48) + 442), v4, "exp master", 0xAuLL))
  {
    return 0;
  }
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 442);

  return bssl::ssl_log_secret(v3, "EXPORTER_SECRET", (unsigned __int8 *)(v5 + 392), v6);
}

void *bssl::SSLAEADContext::CreatePlaceholderForQUIC@<X0>(bssl::SSLAEADContext *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __int16 v8 = (__int16)this;
  uint64_t v7 = a2;
  char v6 = 0;
  uint64_t result = bssl::New<bssl::SSLAEADContext,unsigned short &,BOOL &,ssl_cipher_st const*&>(&v8, &v6, &v7);
  *a3 = result;
  return result;
}

void *boringssl_context_set_encryption_secrets(const SSL *a1)
{
  uint64_t result = SSL_get_ex_data(a1, 0);
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && result[1])
    {
      boringssl_session_update_metadata((uint64_t)result);
      return (void *)nw_protocol_options_access_handle();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *boringssl_context_set_read_secret(const SSL *a1)
{
  return boringssl_context_set_encryption_secrets(a1);
}

void *boringssl_context_set_write_secret(const SSL *a1)
{
  return boringssl_context_set_encryption_secrets(a1);
}

void *nw_protocol_boringssl_copy_options(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = malloc_type_calloc(1uLL, 0x170uLL, 0x95F2CF9BuLL);
  nw_protocol_boringssl_copy_options_contents((uint64_t)v3, a2);
  return v3;
}

void nw_protocol_boringssl_copy_options_contents(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unint64_t v4 = *(_DWORD *)(a1 + 361) & 0xFFFFFFFE | ((unint64_t)*(unsigned __int8 *)(a1 + 365) << 32) | *(_DWORD *)(a2 + 361) & 1;
    *(_DWORD *)(a1 + 361) = *(_DWORD *)(a1 + 361) & 0xFFFFFFFE | *(_DWORD *)(a2 + 361) & 1;
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF7 | (8 * (((unint64_t)*(unsigned int *)(a2 + 361) >> 3) & 1));
    *(_DWORD *)(a1 + 361) = v5;
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFEFLL | (16 * (((unint64_t)*(unsigned int *)(a2 + 361) >> 4) & 1));
    *(_DWORD *)(a1 + 361) = v6;
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFDFLL | (32 * (((unint64_t)*(unsigned int *)(a2 + 361) >> 5) & 1));
    *(_DWORD *)(a1 + 361) = v7;
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFBFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 6) & 1) << 6);
    *(_DWORD *)(a1 + 361) = v8;
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFDFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 9) & 1) << 9);
    *(_DWORD *)(a1 + 361) = v9;
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFBFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 10) & 1) << 10);
    *(_DWORD *)(a1 + 361) = v10;
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFF7FFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 11) & 1) << 11);
    *(_DWORD *)(a1 + 361) = v11;
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFEFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 12) & 1) << 12);
    *(_DWORD *)(a1 + 361) = v12;
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFDFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 13) & 1) << 13);
    *(_DWORD *)(a1 + 361) = v13;
    unint64_t v14 = v13 & 0xFFFFFFFFFFFFBFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 14) & 1) << 14);
    *(_DWORD *)(a1 + 361) = v14;
    unint64_t v15 = v14 & 0xFFFFFFFFFFFF7FFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 15) & 1) << 15);
    *(_DWORD *)(a1 + 361) = v15;
    unint64_t v16 = v15 & 0xFFFFFFFFFFFEFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 16) & 1) << 16);
    *(_DWORD *)(a1 + 361) = v16;
    unint64_t v17 = v16 & 0xFFFFFFFFFFFDFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 17) & 1) << 17);
    *(_DWORD *)(a1 + 361) = v17;
    unint64_t v18 = v17 & 0xFFFFFFFFFFFBFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 18) & 1) << 18);
    *(_DWORD *)(a1 + 361) = v18;
    unint64_t v19 = v18 & 0xFFFFFFFFFDFFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 25) & 1) << 25);
    *(_DWORD *)(a1 + 361) = v19;
    unint64_t v20 = v19 & 0xFFFFFFFFFFF7FFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 19) & 1) << 19);
    *(_DWORD *)(a1 + 361) = v20;
    unint64_t v21 = v20 & 0xFFFFFFFFFFEFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 20) & 1) << 20);
    *(_DWORD *)(a1 + 361) = v21;
    unint64_t v22 = v21 & 0xFFFFFFFFFFDFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 21) & 1) << 21);
    *(_DWORD *)(a1 + 361) = v22;
    unint64_t v23 = v22 & 0xFFFFFFFFFFBFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 22) & 1) << 22);
    *(_DWORD *)(a1 + 361) = v23;
    unint64_t v24 = v23 & 0xFFFFFFFFFF7FFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 23) & 1) << 23);
    *(_DWORD *)(a1 + 361) = v24;
    unint64_t v25 = v24 & 0xFFFFFFEFFFFFFFFFLL | ((((unint64_t)*(unsigned __int8 *)(a2 + 365) >> 4) & 1) << 36);
    *(_DWORD *)(a1 + 361) = v24;
    *(unsigned char *)(a1 + 365) = BYTE4(v25);
    unint64_t v26 = v25 & 0xFFFFFFDFFFFFFFFFLL | ((((unint64_t)*(unsigned __int8 *)(a2 + 365) >> 5) & 1) << 37);
    *(_DWORD *)(a1 + 361) = v24;
    unint64_t v27 = HIDWORD(v26);
    *(unsigned char *)(a1 + 365) = BYTE4(v26);
    unint64_t v28 = v26 & 0xFFFFFFFFFEFFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 24) & 1) << 24);
    *(unsigned char *)(a1 + 365) = v27;
    *(_DWORD *)(a1 + 361) = v28;
    unint64_t v29 = v28 & 0xFFFFFFFFFBFFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 26) & 1) << 26);
    *(unsigned char *)(a1 + 365) = v27;
    *(_DWORD *)(a1 + 361) = v29;
    unint64_t v30 = v29 & 0xFFFFFFFFF7FFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 27) & 1) << 27);
    *(unsigned char *)(a1 + 365) = v27;
    *(_DWORD *)(a1 + 361) = v30;
    unint64_t v31 = v30 & 0xFFFFFFFFEFFFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 28) & 1) << 28);
    *(unsigned char *)(a1 + 365) = v27;
    *(_DWORD *)(a1 + 361) = v31;
    unint64_t v32 = v31 & 0xFFFFFFFFDFFFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 29) & 1) << 29);
    *(unsigned char *)(a1 + 365) = v27;
    *(_DWORD *)(a1 + 361) = v32;
    unint64_t v33 = v32 & 0xFFFFFFFFBFFFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 30) & 1) << 30);
    *(unsigned char *)(a1 + 365) = v27;
    *(_DWORD *)(a1 + 361) = v33;
    unint64_t v34 = v33 & 0xFFFFFFFFFFFFFF7FLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 7) & 1) << 7);
    *(unsigned char *)(a1 + 365) = v27;
    *(_DWORD *)(a1 + 361) = v34;
    unint64_t v35 = v34 & 0xFFFFFFFFFFFFFEFFLL | ((((unint64_t)*(unsigned int *)(a2 + 361) >> 8) & 1) << 8);
    *(unsigned char *)(a1 + 365) = v27;
    *(_DWORD *)(a1 + 361) = v35;
    unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFFELL | *(_DWORD *)(a2 + 361) & 1;
    *(unsigned char *)(a1 + 365) = v27;
    *(_DWORD *)(a1 + 361) = v36;
    unint64_t v37 = v36 & 0xFDFFFFFFFFLL | ((((unint64_t)*(unsigned __int8 *)(a2 + 365) >> 1) & 1) << 33);
    *(_DWORD *)(a1 + 361) = v36;
    *(unsigned char *)(a1 + 365) = BYTE4(v37);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_DWORD *)(a1 + 32std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 320);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    id v38 = *(const char **)(a2 + 8);
    if (v38) {
      *(void *)(a1 + EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = strdup(v38);
    }
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    __int16 v39 = *(const char **)(a2 + 16);
    if (v39) {
      *(void *)(a1 + 16) = strdup(v39);
    }
    uint64_t v40 = *(void **)(a2 + 56);
    if (v40) {
      objc_storeStrong((id *)(a1 + 56), v40);
    }
    uint64_t v41 = *(void **)(a2 + 48);
    if (v41)
    {
      xpc_object_t v42 = xpc_copy(v41);
      id v43 = *(void **)(a1 + 48);
      *(void *)(a1 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v42;
    }
    int v44 = *(void **)(a2 + 40);
    if (v44)
    {
      xpc_object_t v45 = xpc_copy(v44);
      long long v46 = *(void **)(a1 + 40);
      *(void *)(a1 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v45;
    }
    id v47 = *(void **)(a2 + 232);
    if (v47)
    {
      xpc_object_t v48 = xpc_copy(v47);
      __int16 v49 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v48;
    }
    if (*(void *)(a2 + 88))
    {
      uint64_t v50 = MEMORY[0x1BA9E5C70]();
      id v51 = *(void **)(a1 + 88);
      *(void *)(a1 + 8EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v50;

      objc_storeStrong((id *)(a1 + 96), *(id *)(a2 + 96));
    }
    if (*(void *)(a2 + 104))
    {
      uint64_t v52 = MEMORY[0x1BA9E5C70]();
      BOOL v53 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = v52;

      objc_storeStrong((id *)(a1 + 112), *(id *)(a2 + 112));
    }
    if (*(void *)(a2 + 120))
    {
      uint64_t v54 = MEMORY[0x1BA9E5C70]();
      char v55 = *(void **)(a1 + 120);
      *(void *)(a1 + 12std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v54;

      objc_storeStrong((id *)(a1 + 128), *(id *)(a2 + 128));
    }
    id v56 = *(void **)(a2 + 192);
    if (v56) {
      objc_storeStrong((id *)(a1 + 192), v56);
    }
    if (*(void *)(a2 + 176))
    {
      uint64_t v57 = MEMORY[0x1BA9E5C70]();
      BOOL v58 = *(void **)(a1 + 176);
      *(void *)(a1 + 176) = v57;

      objc_storeStrong((id *)(a1 + 184), *(id *)(a2 + 184));
    }
    uint64_t v59 = *(void **)(a2 + 72);
    if (v59)
    {
      xpc_object_t v60 = xpc_copy(v59);
      __int16 v61 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v60;
    }
    uint64_t v62 = *(void **)(a2 + 136);
    if (v62) {
      objc_storeStrong((id *)(a1 + 136), v62);
    }
    __int16 v63 = *(void **)(a2 + 216);
    if (v63) {
      objc_storeStrong((id *)(a1 + 216), v63);
    }
    if (*(void *)(a2 + 200))
    {
      uint64_t v64 = MEMORY[0x1BA9E5C70]();
      __int16 v65 = *(void **)(a1 + 200);
      *(void *)(a1 + 20std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v64;
    }
    if (*(void *)(a2 + 208))
    {
      uint64_t v66 = MEMORY[0x1BA9E5C70]();
      id v67 = *(void **)(a1 + 208);
      *(void *)(a1 + 20EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v66;
    }
    int v68 = *(void **)(a2 + 64);
    if (v68) {
      objc_storeStrong((id *)(a1 + 64), v68);
    }
    if (*(void *)(a2 + 144))
    {
      uint64_t v69 = MEMORY[0x1BA9E5C70]();
      uint64_t v70 = *(void **)(a1 + 144);
      *(void *)(a1 + 144) = v69;
    }
    long long v71 = *(void **)(a2 + 152);
    if (v71) {
      objc_storeStrong((id *)(a1 + 152), v71);
    }
    if (*(void *)(a2 + 160))
    {
      uint64_t v72 = MEMORY[0x1BA9E5C70]();
      uint64_t v73 = *(void **)(a1 + 160);
      *(void *)(a1 + 16std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v72;
    }
    __int16 v74 = *(void **)(a2 + 168);
    if (v74) {
      objc_storeStrong((id *)(a1 + 168), v74);
    }
    if (*(void *)(a2 + 328))
    {
      uint64_t v75 = MEMORY[0x1BA9E5C70]();
      uint64_t v76 = *(void **)(a1 + 328);
      *(void *)(a1 + 32EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v75;
    }
    uint64_t v77 = *(void **)(a2 + 248);
    if (v77) {
      objc_storeStrong((id *)(a1 + 248), v77);
    }
    if (*(void *)(a2 + 240))
    {
      uint64_t v78 = MEMORY[0x1BA9E5C70]();
      uint64_t v79 = *(void **)(a1 + 240);
      *(void *)(a1 + 24std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v78;
    }
    if (*(void *)(a2 + 256))
    {
      uint64_t v80 = MEMORY[0x1BA9E5C70]();
      uint64_t v81 = *(void **)(a1 + 256);
      *(void *)(a1 + 256) = v80;
    }
    unint64_t v82 = *(void **)(a2 + 264);
    if (v82) {
      objc_storeStrong((id *)(a1 + 264), v82);
    }
    char v83 = *(void **)(a2 + 80);
    if (v83) {
      objc_storeStrong((id *)(a1 + 80), v83);
    }
    CFArrayRef v84 = *(const __CFArray **)(a2 + 280);
    long long v85 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v84) {
      *(void *)(a1 + 28std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v84);
    }
    CFArrayRef v86 = *(const __CFArray **)(a2 + 288);
    if (v86) {
      *(void *)(a1 + 28EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = CFArrayCreateCopy(*v85, v86);
    }
    if (*(unsigned char *)(a2 + 296)) {
      *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
    }
    if (*(unsigned char *)(a2 + 297)) {
      *(unsigned char *)(a1 + 297) = *(unsigned char *)(a2 + 297);
    }
    if (*(unsigned char *)(a2 + 360)) {
      *(unsigned char *)(a1 + 36std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = *(unsigned char *)(a2 + 360);
    }
  }
}

uint64_t nw_protocol_boringssl_get_input_frames(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  unint64_t v36 = &v35;
  uint64_t v37 = 0x2020000000;
  int v38 = 0;
  if (!a1) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_17;
  }
  if ((*(unsigned char *)(v6 + 475) & 1) == 0
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_get_input_frames_cold_2();
  }
  uint64_t v11 = 0;
  if (a4 && a5 && a6)
  {
    if ((boringssl_session_get_state(*(void *)(v6 + 336)) & 0xFFFFFFFE) == 2)
    {
      nw_frame_array_init();
      if ((*(unsigned char *)(v6 + 475) & 1) == 0)
      {
        if (datapath_logging_enabled)
        {
          unint64_t v20 = g_boringssl_log;
          if (g_boringssl_log)
          {
            if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136447490;
              uint64_t v40 = "nw_protocol_boringssl_get_input_frames";
              __int16 v41 = 1024;
              int v42 = 1823;
              __int16 v43 = 2082;
              uint64_t v44 = v6 + 391;
              __int16 v45 = 2048;
              uint64_t v46 = v6;
              __int16 v47 = 1024;
              unsigned int v48 = a3;
              __int16 v49 = 1024;
              unsigned int v50 = a4;
              _os_log_debug_impl(&dword_1BA0DE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] get input frames expected min bytes %u expected max bytes %u", buf, 0x32u);
            }
          }
        }
      }
      int v12 = *(char *)(v6 + 388);
      *(unsigned char *)(v6 + 388) &= ~0x40u;
      if (v12 < 0)
      {
        *(unsigned char *)(v6 + 38EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v12 & 0x3F;
        id v13 = *(id *)(*(void *)(v6 + 336) + 8);
        id v14 = (id)v6;
        uint64_t v30 = MEMORY[0x1E4F143A8];
        uint64_t v31 = 3221225472;
        unint64_t v32 = __nw_protocol_boringssl_get_input_frames_block_invoke;
        unint64_t v33 = &unk_1E61F2C48;
        id v34 = v14;
        nw_queue_context_async();
      }
      uint64_t v26 = 0;
      unint64_t v27 = &v26;
      uint64_t v28 = 0x2020000000;
      int v29 = 0;
      nw_frame_array_foreach();
      unsigned int v15 = *((_DWORD *)v27 + 6);
      if (v15 >= a3)
      {
        if ((*(unsigned char *)(v6 + 475) & 1) == 0)
        {
          if (datapath_logging_enabled)
          {
            unint64_t v21 = g_boringssl_log;
            if (g_boringssl_log)
            {
              if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v24 = *((_DWORD *)v36 + 6);
                unsigned int v25 = *((_DWORD *)v27 + 6);
                *(_DWORD *)buf = 136447490;
                uint64_t v40 = "nw_protocol_boringssl_get_input_frames";
                __int16 v41 = 1024;
                int v42 = 1908;
                __int16 v43 = 2082;
                uint64_t v44 = v6 + 391;
                __int16 v45 = 2048;
                uint64_t v46 = v6;
                __int16 v47 = 1024;
                unsigned int v48 = v24;
                __int16 v49 = 1024;
                unsigned int v50 = v25;
                _os_log_debug_impl(&dword_1BA0DE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Returning %u frames (%u bytes) to input handler", buf, 0x32u);
              }
              unsigned int v15 = *((_DWORD *)v27 + 6);
            }
          }
        }
        unsigned int v17 = *(_DWORD *)(v6 + 380);
        BOOL v18 = v17 >= v15;
        unsigned int v19 = v17 - v15;
        if (!v18) {
          unsigned int v19 = 0;
        }
        *(_DWORD *)(v6 + 38std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v19;
        uint64_t v11 = *((unsigned int *)v36 + 6);
      }
      else
      {
        if (*((_DWORD *)v36 + 6)) {
          nw_protocol_boringssl_prepend_frame_array();
        }
        nw_frame_array_init();
        if ((*(unsigned char *)(v6 + 475) & 1) == 0)
        {
          if (datapath_logging_enabled)
          {
            unint64_t v22 = g_boringssl_log;
            if (g_boringssl_log)
            {
              if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v23 = *((_DWORD *)v27 + 6);
                *(_DWORD *)buf = 136447490;
                uint64_t v40 = "nw_protocol_boringssl_get_input_frames";
                __int16 v41 = 1024;
                int v42 = 1904;
                __int16 v43 = 2082;
                uint64_t v44 = v6 + 391;
                __int16 v45 = 2048;
                uint64_t v46 = v6;
                __int16 v47 = 1024;
                unsigned int v48 = v23;
                __int16 v49 = 1024;
                unsigned int v50 = a3;
                _os_log_debug_impl(&dword_1BA0DE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Not enough bytes in record to satisfy request (%u < %u)", buf, 0x32u);
              }
            }
          }
        }
        uint64_t v11 = 0;
      }
      _Block_object_dispose(&v26, 8);
      goto LABEL_18;
    }
    if ((*(unsigned char *)(v6 + 475) & 1) == 0
      && datapath_logging_enabled
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_get_input_frames_cold_1();
    }
LABEL_17:
    uint64_t v11 = 0;
  }
LABEL_18:
  _Block_object_dispose(&v35, 8);
  return v11;
}

void sub_1BA1087C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

double EC_group_p256_init()
{
  dword_1EB268130 = 415;
  qword_1EB268128 = (uint64_t)"NIST P-256";
  qword_1EB268134 = 0x701033DCE48862ALL;
  byte_1EB26813D = 8;
  bn_set_static_words((uint64_t)&unk_1EB268070, (uint64_t)&kP256Field, 4uLL);
  bn_set_static_words((uint64_t)&unk_1EB268058, (uint64_t)&kP256FieldRR, 4uLL);
  qword_1EB268088 = 1;
  bn_set_static_words((uint64_t)&unk_1EB268030, (uint64_t)&kP256Order, 4uLL);
  bn_set_static_words((uint64_t)&unk_1EB268018, (uint64_t)&kP256OrderRR, 4uLL);
  qword_1EB268048 = 0xCCD1C8AAEE00BC4FLL;
  EC_group_p256_storage = (uint64_t)EC_GFp_nistp256_method();
  *(void *)algn_1EB267F38 = &EC_group_p256_storage;
  xmmword_1EB267F40 = kP256MontGX;
  unk_1EB267F50 = unk_1BA1907E0;
  unk_1EB267F88 = kP256MontGY;
  unk_1EB267F98 = unk_1BA190800;
  xmmword_1EB267FD0 = kP256FieldR;
  unk_1EB267FE0 = unk_1BA190820;
  xmmword_1EB2680E0 = kP256MontB;
  unk_1EB2680F0 = unk_1BA190840;
  ec_group_set_a_minus3((uint64_t)&EC_group_p256_storage);
  *(void *)&double result = 0x100000001;
  qword_1EB268144 = 0x100000001;
  return result;
}

double EC_group_p224_init()
{
  qword_1EB267F08 = (uint64_t)"NIST P-224";
  unk_1EB267F10 = 0x4812B000002C9;
  byte_1EB267F18 = 33;
  byte_1EB267F1D = 5;
  bn_set_static_words((uint64_t)&unk_1EB267E50, (uint64_t)&kP224Field, 4uLL);
  bn_set_static_words((uint64_t)&unk_1EB267E38, (uint64_t)&kP224FieldRR, 4uLL);
  qword_1EB267E68 = -1;
  bn_set_static_words((uint64_t)&unk_1EB267E10, (uint64_t)&kP224Order, 4uLL);
  bn_set_static_words((uint64_t)&unk_1EB267DF8, (uint64_t)&kP224OrderRR, 4uLL);
  qword_1EB267E28 = 0xD6E242706A1FC2EBLL;
  v0 = EC_GFp_nistp224_method();
  xmmword_1EB267D20 = kP224GX;
  unk_1EB267D30 = unk_1BA190700;
  unk_1EB267D68 = kP224GY;
  unk_1EB267D78 = unk_1BA190720;
  qword_1EB267DB0 = 1;
  xmmword_1EB267EC0 = kP224B;
  unk_1EB267ED0 = unk_1BA190740;
  EC_group_p224_storage = (uint64_t)v0;
  *(void *)algn_1EB267D18 = &EC_group_p224_storage;
  ec_group_set_a_minus3((uint64_t)&EC_group_p224_storage);
  *(void *)&double result = 0x100000001;
  qword_1EB267F24 = 0x100000001;
  return result;
}

void bn_set_static_words(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((*(unsigned char *)(a1 + 20) & 2) == 0) {
    OPENSSL_free(*(void **)a1);
  }
  *(void *)a1 = a2;
  if (a3 >= 0x800000) {
    bn_set_static_words_cold_1();
  }
  *(_DWORD *)(a1 + EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = a3;
  *(_DWORD *)(a1 + 12) = a3;
  int v6 = *(_DWORD *)(a1 + 20) | 2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 2std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v6;
}

uint64_t *ec_group_set_a_minus3(uint64_t a1)
{
  uint64_t v2 = (const unint64_t *)ec_felem_one(a1);
  *(_DWORD *)(a1 + 52EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 1;
  ec_felem_neg(a1, (unint64_t *)(a1 + 360), v2);
  ec_felem_sub(a1, (unint64_t *)(a1 + 360), (const unint64_t *)(a1 + 360), v2);

  return ec_felem_sub(a1, (unint64_t *)(a1 + 360), (const unint64_t *)(a1 + 360), v2);
}

uint64_t EC_KEY_oct2key(EC_KEY *a1, const unsigned __int8 *a2, size_t a3, BN_CTX *a4)
{
  unint64_t v5 = *(const EC_GROUP **)a1;
  if (v5)
  {
    unint64_t v9 = EC_POINT_new(v5);
    if (v9 && EC_POINT_oct2point(*(const EC_GROUP **)a1, v9, a2, a3, a4)) {
      uint64_t v10 = EC_KEY_set_public_key(a1, v9);
    }
    else {
      uint64_t v10 = 0;
    }
    EC_POINT_free(v9);
  }
  else
  {
    ERR_put_error(15, 0, 114, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec_key.c", 399);
    return 0;
  }
  return v10;
}

int EC_POINT_oct2point(const EC_GROUP *a1, EC_POINT *a2, const unsigned __int8 *buf, size_t len, BN_CTX *a5)
{
  if (EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, 0))
  {
    int v10 = 106;
    int v11 = 205;
LABEL_3:
    ERR_put_error(15, 0, v10, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/oct.c", v11);
    return 0;
  }
  if (!len)
  {
    int v10 = 100;
    int v11 = 140;
    goto LABEL_3;
  }
  int v14 = *buf;
  if (v14 != 4)
  {
    unsigned int v18 = BN_num_bytes((const BIGNUM *)((char *)a1 + 320));
    if ((v14 & 0xFE) != 2 || v18 + 1 != len)
    {
      int v10 = 109;
      int v11 = 162;
      goto LABEL_3;
    }
    if (a5)
    {
      unint64_t v20 = 0;
    }
    else
    {
      a5 = BN_CTX_new();
      unint64_t v20 = a5;
      if (!a5) {
        return 0;
      }
    }
    BN_CTX_start(a5);
    unint64_t v21 = BN_CTX_get(a5);
    if (v21)
    {
      unint64_t v22 = v21;
      if (BN_bin2bn(buf + 1, v18, v21))
      {
        if (BN_ucmp(v22, (const BIGNUM *)((char *)a1 + 320)) < 0)
        {
          int v12 = EC_POINT_set_compressed_coordinates_GFp(a1, a2, v22, v14 & 1, a5);
          goto LABEL_25;
        }
        ERR_put_error(15, 0, 109, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/oct.c", 186);
      }
    }
    int v12 = 0;
LABEL_25:
    BN_CTX_end(a5);
    BN_CTX_free(v20);
    return v12;
  }
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[7] = v15;
  v23[8] = v15;
  v23[5] = v15;
  v23[6] = v15;
  _OWORD v23[3] = v15;
  v23[4] = v15;
  v23[1] = v15;
  v23[2] = v15;
  v23[0] = v15;
  int v16 = ec_point_from_uncompressed((uint64_t)a1, (uint64_t)v23, buf, len);
  unsigned int v17 = (char *)a2 + 8;
  if (v16)
  {
    ec_affine_to_jacobian((uint64_t)a1, (uint64_t)v17, (uint64_t)v23);
    return 1;
  }
  ec_set_to_safe_point((uint64_t)a1, (uint64_t)v17);
  return 0;
}

__n128 ec_affine_to_jacobian(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v6 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  long long v7 = *(_OWORD *)(a3 + 104);
  long long v8 = *(_OWORD *)(a3 + 120);
  uint64_t v9 = *(void *)(a3 + 136);
  *(_OWORD *)(a2 + 8EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = *(_OWORD *)(a3 + 88);
  *(void *)(a2 + 136) = v9;
  *(_OWORD *)(a2 + 12std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v8;
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  uint64_t v10 = ec_felem_one(a1);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)v10;
  long long v12 = *(_OWORD *)(v10 + 32);
  __n128 result = *(__n128 *)(v10 + 48);
  long long v13 = *(_OWORD *)(v10 + 16);
  *(void *)(a2 + 20EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = *(void *)(v10 + 64);
  *(_OWORD *)(a2 + 176) = v12;
  *(__n128 *)(a2 + 192) = result;
  *(_OWORD *)(a2 + 16std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v13;
  return result;
}

uint64_t ec_felem_one(uint64_t a1)
{
  return a1 + 160;
}

int EC_KEY_set_public_key(EC_KEY *a1, const EC_POINT *a2)
{
  uint64_t v3 = *(const EC_GROUP **)a1;
  if (!v3)
  {
    int v5 = 114;
    int v6 = 264;
    goto LABEL_6;
  }
  if (a2 && EC_GROUP_cmp(v3, *(const EC_GROUP **)a2, 0))
  {
    int v5 = 130;
    int v6 = 269;
LABEL_6:
    ERR_put_error(15, 0, v5, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec_key.c", v6);
    return 0;
  }
  EC_POINT_free(*((EC_POINT **)a1 + 1));
  long long v8 = EC_POINT_dup(a2, *(const EC_GROUP **)a1);
  *((void *)a1 + 1) = v8;
  return v8 != 0;
}

void EC_POINT_free(EC_POINT *a1)
{
  if (a1)
  {
    EC_GROUP_free(*(EC_GROUP **)a1);
    OPENSSL_free(a1);
  }
}

void EC_GROUP_free(EC_GROUP *a1)
{
  if (a1 && !*((_DWORD *)a1 + 128) && CRYPTO_refcount_dec_and_test_zero((unsigned int *)a1 + 135))
  {
    bn_mont_ctx_cleanup((BIGNUM *)((char *)a1 + 232));
    bn_mont_ctx_cleanup((BIGNUM *)((char *)a1 + 296));
    OPENSSL_free(a1);
  }
}

int ECDSA_verify(int type, const unsigned __int8 *dgst, int dgstlen, const unsigned __int8 *sig, int siglen, EC_KEY *eckey)
{
  out = 0;
  int v7 = i2o_ECPublicKey(eckey, &out);
  if (!out)
  {
    if (g_boringssl_log)
    {
      int result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      ECDSA_verify_cold_1();
    }
    return 0;
  }
  uint64_t v8 = v7;
  uint64_t v9 = EC_KEY_get0_group(eckey);
  int curve_name = EC_GROUP_get_curve_name(v9);
  cc_curve_parameterunsigned int s = (void *)boringssl_ecdsa_get_cc_curve_parameters(curve_name);
  if (!cc_curve_parameters) {
    goto LABEL_17;
  }
  long long v12 = cc_curve_parameters;
  long long v13 = malloc_type_malloc(24 * *cc_curve_parameters + 16, 0x9A0B341BuLL);
  if (!v13)
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      ECDSA_verify_cold_2();
    }
LABEL_17:
    if (out)
    {
      cc_clear();
      OPENSSL_free(out);
    }
    return 0;
  }
  int v14 = v13;
  if (MEMORY[0x1BA9E5020](v12, v8, out, v13))
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      ECDSA_verify_cold_4();
    }
    if (out)
    {
      cc_clear();
      OPENSSL_free(out);
    }
    free(v14);
    return 0;
  }
  if (ccec_verify()) {
    BOOL v16 = g_boringssl_log == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16 && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    ECDSA_verify_cold_3();
  }
  if (out)
  {
    cc_clear();
    OPENSSL_free(out);
  }
  free(v14);
  return 0;
}

int i2o_ECPublicKey(EC_KEY *a, unsigned __int8 **out)
{
  if (a)
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v7[1] = v4;
    int64x2_t v7[2] = v4;
    v7[0] = v4;
    if (CBB_init((uint64_t)v7, 0)
      && EC_POINT_point2cbb((uint64_t)v7, *(EC_GROUP **)a, *((EC_POINT **)a + 1), (point_conversion_form_t)*((_DWORD *)a + 7), 0))
    {
      int v5 = CBB_finish_i2d((uint64_t)v7, (void **)out);
      return v5 & ~(v5 >> 31);
    }
    else
    {
      CBB_cleanup((uint64_t)v7);
      return -1;
    }
  }
  else
  {
    ERR_put_error(15, 0, 67, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", 546);
    return 0;
  }
}

uint64_t boringssl_ecdsa_get_cc_curve_parameters(int a1)
{
  if (a1 <= 714)
  {
    if (a1 == 415)
    {
      JUMPOUT(0x1BA9E4FE0);
    }
    if (a1 == 713)
    {
      JUMPOUT(0x1BA9E4FD0);
    }
LABEL_18:
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_ecdsa_get_cc_curve_parameters_cold_1();
    }
    return 0;
  }
  if (a1 == 715)
  {
    JUMPOUT(0x1BA9E4FF0);
  }
  if (a1 != 716) {
    goto LABEL_18;
  }

  return MEMORY[0x1F40CAA50]();
}

uint64_t EC_POINT_point2cbb(uint64_t a1, EC_GROUP *a2, EC_POINT *a3, point_conversion_form_t form, BN_CTX *a5)
{
  uint64_t result = EC_POINT_point2oct(a2, a3, form, 0, 0, a5);
  if (result)
  {
    size_t v11 = result;
    buf = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    uint64_t result = CBB_add_space(a1, &buf, result);
    if (result) {
      return EC_POINT_point2oct(a2, a3, form, buf, v11, a5) == v11;
    }
  }
  return result;
}

size_t EC_POINT_point2oct(const EC_GROUP *a1, const EC_POINT *a2, point_conversion_form_t form, unsigned __int8 *buf, size_t len, BN_CTX *a6)
{
  if (EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, 0))
  {
    int v11 = 106;
    int v12 = 215;
LABEL_3:
    ERR_put_error(15, 0, v11, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/oct.c", v12);
    return 0;
  }
  if (buf)
  {
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v15[7] = v14;
    v15[8] = v14;
    int64x2_t v15[5] = v14;
    v15[6] = v14;
    _OWORD v15[3] = v14;
    _OWORD v15[4] = v14;
    v15[1] = v14;
    void v15[2] = v14;
    v15[0] = v14;
    if (ec_jacobian_to_affine((uint64_t (***)(void, uint64_t, uint64_t, uint64_t))a1, (uint64_t)v15, (uint64_t)a2 + 8))return ec_point_to_bytes((uint64_t)a1, (uint64_t)v15, form, (char *)buf, len); {
    return 0;
    }
  }
  if (ec_GFp_simple_is_at_infinity((uint64_t)a1, (uint64_t)a2 + 8))
  {
    int v11 = 119;
    int v12 = 222;
    goto LABEL_3;
  }

  return ec_point_byte_len((uint64_t)a1, form);
}

int EC_GROUP_cmp(const EC_GROUP *a1, const EC_GROUP *a2, BN_CTX *a3)
{
  if (a1 == a2) {
    return 0;
  }
  int v5 = *((_DWORD *)a1 + 128);
  if (v5 != *((_DWORD *)a2 + 128)) {
    return 1;
  }
  if (v5) {
    return 0;
  }
  return *(void *)a1 != *(void *)a2
      || !*((_DWORD *)a1 + 133)
      || !*((_DWORD *)a2 + 133)
      || BN_cmp((const BIGNUM *)((char *)a1 + 256), (const BIGNUM *)((char *)a2 + 256))
      || BN_cmp((const BIGNUM *)((char *)a1 + 320), (const BIGNUM *)((char *)a2 + 320))
      || !ec_felem_equal((uint64_t)a1, (char *)a1 + 360, (char *)a2 + 360)
      || !ec_felem_equal((uint64_t)a1, (char *)a1 + 432, (char *)a2 + 432)
      || ec_GFp_simple_points_equal((uint64_t)a1, (uint64_t)a1 + 16, (uint64_t)a2 + 16) == 0;
}

BOOL ec_GFp_simple_is_at_infinity(uint64_t a1, uint64_t a2)
{
  return ec_felem_non_zero_mask(a1, (uint64_t *)(a2 + 144)) == 0;
}

uint64_t ec_felem_non_zero_mask(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 328);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *a2++;
    v3 |= v4;
    --v2;
  }
  while (v2);
  if (v3) {
    return -1;
  }
  else {
    return 0;
  }
}

uint64_t ec_jacobian_to_affine(uint64_t (***a1)(void, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (**a1)(a1, a3, a2, a2 + 72);
}

uint64_t ec_GFp_nistp256_point_get_affine_coordinates(uint64_t a1, long long *a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (ec_GFp_simple_is_at_infinity(a1, (uint64_t)a2))
  {
    ERR_put_error(15, 0, 119, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/p256.c", 421);
    return 0;
  }
  else
  {
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v23[0] = v8;
    v23[1] = v8;
    long long v9 = a2[10];
    v24[0] = a2[9];
    v24[1] = v9;
    long long v32 = v8;
    long long v33 = v8;
    v31[0] = v8;
    v31[1] = v8;
    v30[0] = v8;
    v30[1] = v8;
    v29[0] = v8;
    v29[1] = v8;
    v28[0] = v8;
    v28[1] = v8;
    v27[0] = v8;
    v27[1] = v8;
    v26[0] = v8;
    v26[1] = v8;
    fiat_p256_square((uint64_t *)&v32, (unint64_t *)v24);
    fiat_p256_mul((uint64_t *)&v32, (unint64_t *)&v32, (unint64_t *)v24);
    fiat_p256_square((uint64_t *)v31, (unint64_t *)&v32);
    fiat_p256_mul((uint64_t *)v31, (unint64_t *)v31, (unint64_t *)v24);
    fiat_p256_square((uint64_t *)v30, (unint64_t *)v31);
    int v10 = 2;
    do
    {
      fiat_p256_square((uint64_t *)v30, (unint64_t *)v30);
      --v10;
    }
    while (v10);
    fiat_p256_mul((uint64_t *)v30, (unint64_t *)v30, (unint64_t *)v31);
    fiat_p256_square((uint64_t *)v29, (unint64_t *)v30);
    int v11 = 5;
    do
    {
      fiat_p256_square((uint64_t *)v29, (unint64_t *)v29);
      --v11;
    }
    while (v11);
    fiat_p256_mul((uint64_t *)v29, (unint64_t *)v29, (unint64_t *)v30);
    fiat_p256_square((uint64_t *)v28, (unint64_t *)v29);
    int v12 = 2;
    do
    {
      fiat_p256_square((uint64_t *)v28, (unint64_t *)v28);
      --v12;
    }
    while (v12);
    fiat_p256_mul((uint64_t *)v28, (unint64_t *)v28, (unint64_t *)v31);
    fiat_p256_square((uint64_t *)v27, (unint64_t *)v28);
    int v13 = 14;
    do
    {
      fiat_p256_square((uint64_t *)v27, (unint64_t *)v27);
      --v13;
    }
    while (v13);
    fiat_p256_mul((uint64_t *)v27, (unint64_t *)v27, (unint64_t *)v28);
    fiat_p256_square((uint64_t *)v26, (unint64_t *)v27);
    fiat_p256_square((uint64_t *)v26, (unint64_t *)v26);
    fiat_p256_mul((uint64_t *)v26, (unint64_t *)v26, (unint64_t *)&v32);
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v25[0] = v14;
    v25[1] = v14;
    fiat_p256_square((uint64_t *)v25, (unint64_t *)v26);
    int v15 = 31;
    do
    {
      fiat_p256_square((uint64_t *)v25, (unint64_t *)v25);
      --v15;
    }
    while (v15);
    fiat_p256_mul((uint64_t *)v25, (unint64_t *)v25, (unint64_t *)v24);
    int v16 = 128;
    do
    {
      fiat_p256_square((uint64_t *)v25, (unint64_t *)v25);
      --v16;
    }
    while (v16);
    fiat_p256_mul((uint64_t *)v25, (unint64_t *)v25, (unint64_t *)v26);
    int v17 = 32;
    do
    {
      fiat_p256_square((uint64_t *)v25, (unint64_t *)v25);
      --v17;
    }
    while (v17);
    fiat_p256_mul((uint64_t *)v25, (unint64_t *)v25, (unint64_t *)v26);
    int v18 = 30;
    do
    {
      fiat_p256_square((uint64_t *)v25, (unint64_t *)v25);
      --v18;
    }
    while (v18);
    fiat_p256_mul((uint64_t *)v25, (unint64_t *)v25, (unint64_t *)v27);
    fiat_p256_square((uint64_t *)v25, (unint64_t *)v25);
    fiat_p256_square((uint64_t *)v23, (unint64_t *)v25);
    if (a3)
    {
      long long v19 = a2[1];
      long long v32 = *a2;
      long long v33 = v19;
      fiat_p256_mul((uint64_t *)&v32, (unint64_t *)&v32, (unint64_t *)v23);
      long long v20 = v33;
      *a3 = v32;
      a3[1] = v20;
    }
    if (a4)
    {
      long long v21 = *(long long *)((char *)a2 + 88);
      long long v32 = *(long long *)((char *)a2 + 72);
      long long v33 = v21;
      fiat_p256_square((uint64_t *)v23, (unint64_t *)v23);
      fiat_p256_mul((uint64_t *)&v32, (unint64_t *)&v32, (unint64_t *)v24);
      fiat_p256_mul((uint64_t *)&v32, (unint64_t *)&v32, (unint64_t *)v23);
      long long v22 = v33;
      *a4 = v32;
      a4[1] = v22;
    }
    return 1;
  }
}

uint64_t *fiat_p256_square(uint64_t *result, unint64_t *a2)
{
  unint64_t v3 = a2[2];
  unint64_t v2 = a2[3];
  unint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  unint64_t v6 = (*a2 * (unsigned __int128)v2) >> 64;
  unint64_t v7 = *a2 * v2;
  unint64_t v8 = (*a2 * (unsigned __int128)v3) >> 64;
  unint64_t v9 = *a2 * v3;
  unint64_t v10 = (v5 * (unsigned __int128)v4) >> 64;
  unint64_t v11 = v5 * v4;
  uint64_t v12 = v5 * v5;
  uint64_t v13 = (v5 * (unsigned __int128)v5) >> 64;
  uint64_t v14 = (__PAIR128__(v4, v5) * v5) >> 64;
  unint64_t v15 = v10 + __CFADD__(v13, v5 * v4) + v9;
  unint64_t v16 = v8
      + (__CFADD__(__CFADD__(v13, v5 * v4), v9) | __CFADD__(v10, __CFADD__(v13, v5 * v4) + v9))
      + v7;
  if (__CFADD__(__CFADD__(__CFADD__(v13, v5 * v4), v9) | __CFADD__(v10, __CFADD__(v13, v5 * v4) + v9), v7) | __CFADD__(v8, (__CFADD__(__CFADD__(v13, v5 * v4), v9) | __CFADD__(v10, __CFADD__(v13, v5 * v4) + v9))+ v7))unint64_t v17 = v6 + 1; {
  else
  }
    unint64_t v17 = v6;
  uint64_t v18 = ((unint64_t)v12 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v19 = 0xFFFFFFFFLL * v12;
  uint64_t v20 = ((unint64_t)v12 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  uint64_t v21 = -(uint64_t)(v5 * v5);
  unint64_t v22 = v11 + __CFADD__(v21, v12) + v13;
  unint64_t v23 = (__CFADD__(__CFADD__(v21, v12), v14) | __CFADD__((__PAIR128__(0xFFFFFFFFLL, -1)* (unint64_t)v12) >> 64, __CFADD__(v21, v12) + v14))+ v15;
  uint64_t v24 = __CFADD__(__CFADD__(__CFADD__(v21, v12), v14) | __CFADD__((__PAIR128__(0xFFFFFFFFLL, -1)* (unint64_t)v12) >> 64, __CFADD__(v21, v12) + v14), v15);
  BOOL v72 = __CFADD__(v16, 0xFFFFFFFF00000001 * v12);
  unint64_t v25 = v16 - 0xFFFFFFFFLL * v12;
  uint64_t v26 = v72;
  BOOL v72 = __CFADD__(v18, v17);
  uint64_t v27 = v18 + v17;
  uint64_t v28 = v72;
  uint64_t v29 = (v2 * (unsigned __int128)v4) >> 64;
  unint64_t v30 = v2 * v4;
  uint64_t v31 = (v3 * (unsigned __int128)v4) >> 64;
  unint64_t v32 = v3 * v4;
  unint64_t v33 = v4 * v4;
  unsigned long long v34 = __PAIR128__(v3 * v4, v10) + v4 * (unsigned __int128)v4;
  uint64_t v36 = __CFADD__(__CFADD__(v10, v4 * v4), v3 * v4) | __CFADD__((v4 * (unsigned __int128)v4) >> 64, __CFADD__(v10, v4 * v4) + v3 * v4);
  uint64_t v35 = v31 + v36 + v2 * v4;
  if (__CFADD__(v36, v2 * v4) | __CFADD__(v31, v36 + v2 * v4)) {
    uint64_t v37 = v29 + 1;
  }
  else {
    uint64_t v37 = (v2 * (unsigned __int128)v4) >> 64;
  }
  BOOL v72 = __CFADD__(v20, v19);
  unint64_t v38 = ((unint64_t)v12 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  uint64_t v39 = 0xFFFFFFFFLL * v12;
  uint64_t v40 = ((unint64_t)v12 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  unint64_t v41 = v22 + v20 + v19;
  BOOL v72 = __CFADD__(v72, v23) | __CFADD__(v40, (__PAIR128__(v23, v38) + (unint64_t)v39) >> 64);
  uint64_t v42 = v40 + ((__PAIR128__(v23, v38) + (unint64_t)v39) >> 64);
  BOOL v44 = v72;
  BOOL v72 = __CFADD__(v72, v25);
  unint64_t v43 = v44 + v25;
  v72 |= __CFADD__(v24, v43);
  v43 += v24;
  BOOL v46 = v72;
  BOOL v72 = __CFADD__(v72, v27);
  uint64_t v45 = v46 + v27;
  v72 |= __CFADD__(v26, v45);
  v45 += v26;
  BOOL v48 = v72;
  BOOL v72 = __CFADD__(v72, v37);
  uint64_t v47 = v48 + v37;
  v72 |= __CFADD__(v28, v47);
  v47 += v28;
  uint64_t v49 = v72;
  unsigned long long v50 = __PAIR128__(v10, v41) + __PAIR128__(v33, v11);
  uint64_t v51 = ((__PAIR128__(v10, v41) + __PAIR128__(v33, v11)) >> 64) + v42;
  uint64_t v53 = (__CFADD__(__CFADD__(v41, v11), (void)v34) | __CFADD__(v42, __CFADD__(v41, v11) + (void)v34))+ *((void *)&v34 + 1);
  BOOL v72 = __CFADD__(__CFADD__(__CFADD__(v41, v11), (void)v34) | __CFADD__(v42, __CFADD__(v41, v11) + (void)v34), *((void *)&v34 + 1)) | __CFADD__(v43, v53);
  uint64_t v52 = v43 + v53;
  BOOL v55 = v72;
  BOOL v72 = __CFADD__(v72, v35);
  uint64_t v54 = v55 + v35;
  v72 |= __CFADD__(v45, v54);
  v54 += v45;
  uint64_t v56 = v72 + v47;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  unint64_t v58 = 0xFFFFFFFF00000001 * (v41 + v11);
  uint64_t v59 = (__PAIR128__(0xFFFFFFFFLL, -1) * (v41 + v11)) >> 64;
  uint64_t v60 = v42 + __CFADD__(-(uint64_t)v50, (void)v50) + *((void *)&v50 + 1);
  unint64_t v61 = (__CFADD__(__CFADD__(-(uint64_t)v50, (void)v50), v51) | __CFADD__(v59, __CFADD__(-(uint64_t)v50, (void)v50)+ v51))+ v52;
  BOOL v62 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v50, (void)v50), v51) | __CFADD__(v59, __CFADD__(-(uint64_t)v50, (void)v50)+ v51), v52);
  unint64_t v63 = ((unint64_t)v50 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  uint64_t v64 = ((unint64_t)v50 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v65 = ((unint64_t)v50 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  BOOL v72 = __CFADD__(__CFADD__(v63, 0xFFFFFFFF * v50), v61) | __CFADD__(v65, (__PAIR128__(v61, v63)+ (unint64_t)(0xFFFFFFFF * v50)) >> 64);
  uint64_t v66 = v65 + ((__PAIR128__(v61, v63) + (unint64_t)(0xFFFFFFFF * v50)) >> 64);
  unint64_t v67 = v62 + v72 + v58;
  if (__CFADD__(v72, v58) | __CFADD__(v62, v72 + v58)) {
    uint64_t v68 = 1;
  }
  else {
    uint64_t v68 = 0;
  }
  BOOL v72 = __CFADD__(v67, v54);
  uint64_t v69 = v67 + v54;
  uint64_t v70 = v68 + v72 + v64;
  if (__CFADD__(v72, v64) | __CFADD__(v68, v72 + v64)) {
    uint64_t v71 = 1;
  }
  else {
    uint64_t v71 = 0;
  }
  BOOL v72 = __CFADD__(v70, v56);
  uint64_t v73 = v70 + v56;
  if (v72) {
    uint64_t v74 = v71 + 1;
  }
  else {
    uint64_t v74 = v71;
  }
  unint64_t v75 = v60 + v63 + 0xFFFFFFFF * v50;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  uint64_t v76 = v49 + v72 + v74;
  uint64_t v77 = (v2 * (unsigned __int128)v3) >> 64;
  unint64_t v78 = v2 * v3;
  uint64_t v79 = (v3 * (unsigned __int128)v3) >> 64;
  unint64_t v80 = v3 * v3;
  unint64_t v81 = v8 + v32;
  BOOL v72 = __CFADD__(__CFADD__(v8, v32), v80);
  unint64_t v82 = __CFADD__(v8, v32) + v80;
  v72 |= __CFADD__(v31, v82);
  v82 += v31;
  uint64_t v83 = v79 + v72 + v78;
  if (__CFADD__(v72, v78) | __CFADD__(v79, v72 + v78)) {
    uint64_t v84 = v77 + 1;
  }
  else {
    uint64_t v84 = v77;
  }
  unsigned long long v85 = __PAIR128__(v8, v75) + __PAIR128__(v32, v9);
  uint64_t v86 = ((__PAIR128__(v8, v75) + __PAIR128__(v32, v9)) >> 64) + v66;
  unint64_t v88 = (__CFADD__(__CFADD__(v75, v9), v81) | __CFADD__(v66, __CFADD__(v75, v9) + v81)) + v82;
  BOOL v72 = __CFADD__(__CFADD__(__CFADD__(v75, v9), v81) | __CFADD__(v66, __CFADD__(v75, v9) + v81), v82) | __CFADD__(v69, v88);
  uint64_t v87 = v69 + v88;
  uint64_t v90 = v72 + v83;
  BOOL v72 = __CFADD__(v72, v83) | __CFADD__(v73, v90);
  uint64_t v89 = v73 + v90;
  uint64_t v91 = ((unint64_t)v85 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  uint64_t v92 = v84 + v72 + v76;
  unint64_t v93 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  uint64_t v94 = 0xFFFFFFFF * v85;
  uint64_t v95 = (__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v85) >> 64;
  BOOL v72 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v85, (void)v85), v86) | __CFADD__(v95, __CFADD__(-(uint64_t)v85, (void)v85)+ v86), v87);
  uint64_t v96 = (__CFADD__(__CFADD__(-(uint64_t)v85, (void)v85), v86) | __CFADD__(v95, __CFADD__(-(uint64_t)v85, (void)v85)+ v86))+ v87;
  uint64_t v97 = v72;
  BOOL v72 = __CFADD__(v91, v94);
  uint64_t v98 = v91 + v94;
  uint64_t v99 = ((unint64_t)v85 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v100 = ((unint64_t)v85 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  BOOL v102 = v72;
  BOOL v72 = __CFADD__(v72, v96);
  uint64_t v101 = v102 + v96;
  v72 |= __CFADD__(v100, v101);
  v101 += v100;
  uint64_t v103 = v97 + v72 - 0xFFFFFFFF * v85;
  if (__CFADD__(v72, 0xFFFFFFFF00000001 * v85) | __CFADD__(v97, v72 - 0xFFFFFFFF * v85)) {
    uint64_t v104 = 1;
  }
  else {
    uint64_t v104 = 0;
  }
  BOOL v72 = __CFADD__(v103, v89);
  uint64_t v105 = v103 + v89;
  uint64_t v106 = v104 + v72 + v99;
  if (__CFADD__(v72, v99) | __CFADD__(v104, v72 + v99)) {
    uint64_t v107 = 1;
  }
  else {
    uint64_t v107 = 0;
  }
  BOOL v108 = __CFADD__(v106, v92);
  uint64_t v109 = v106 + v92;
  if (v108) {
    ++v107;
  }
  unint64_t v110 = v66 + __CFADD__(-(uint64_t)v85, (void)v85) + *((void *)&v85 + 1) + v98;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v93);
  if (v108) {
    uint64_t v111 = v107 + 1;
  }
  else {
    uint64_t v111 = v107;
  }
  uint64_t v112 = (v2 * (unsigned __int128)v2) >> 64;
  unint64_t v113 = v2 * v2;
  unint64_t v114 = v6 + v30;
  BOOL v72 = __CFADD__(__CFADD__(v6, v30), v78) | __CFADD__(v29, __CFADD__(v6, v30) + v78);
  uint64_t v115 = v29 + __CFADD__(v6, v30) + v78;
  BOOL v117 = v72;
  BOOL v72 = __CFADD__(v72, v113);
  unint64_t v116 = v117 + v113;
  v72 |= __CFADD__(v77, v116);
  v116 += v77;
  if (v72) {
    ++v112;
  }
  unsigned long long v118 = __PAIR128__(v6, v110) + __PAIR128__(v30, v7);
  uint64_t v119 = ((__PAIR128__(v6, v110) + __PAIR128__(v30, v7)) >> 64) + v101;
  uint64_t v121 = (__CFADD__(__CFADD__(v110, v7), v114) | __CFADD__(v101, __CFADD__(v110, v7) + v114)) + v115;
  BOOL v72 = __CFADD__(__CFADD__(__CFADD__(v110, v7), v114) | __CFADD__(v101, __CFADD__(v110, v7) + v114), v115) | __CFADD__(v105, v121);
  uint64_t v120 = v105 + v121;
  BOOL v123 = v72;
  BOOL v72 = __CFADD__(v72, v116);
  unint64_t v122 = v123 + v116;
  v72 |= __CFADD__(v109, v122);
  v122 += v109;
  unint64_t v124 = v112 + v72 + v111;
  unint64_t v125 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  uint64_t v126 = v101 + __CFADD__(-(uint64_t)v118, (void)v118) + *((void *)&v118 + 1);
  uint64_t v127 = (__CFADD__(__CFADD__(-(uint64_t)v118, (void)v118), v119) | __CFADD__((__PAIR128__(0xFFFFFFFFLL, -1)* (unint64_t)v118) >> 64, __CFADD__(-(uint64_t)v118, (void)v118)+ v119))+ v120;
  unint64_t v128 = ((unint64_t)v118 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v129 = ((unint64_t)v118 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  BOOL v72 = __CFADD__(__CFADD__(((unint64_t)v118 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * v118), v127);
  unint64_t v130 = __CFADD__(((unint64_t)v118 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * v118) + v127;
  v72 |= __CFADD__(v129, v130);
  v130 += v129;
  uint64_t v132 = v72 - 0xFFFFFFFF * v118;
  unint64_t v131 = *((void *)&v118 + 1) + v132;
  if (__CFADD__(v72, 0xFFFFFFFF00000001 * v118) | __CFADD__(*((void *)&v118 + 1), v132)) {
    uint64_t v133 = 1;
  }
  else {
    uint64_t v133 = 0;
  }
  unint64_t v135 = v131 + v122;
  BOOL v72 = __CFADD__(__CFADD__(v131, v122), v128) | __CFADD__(v133, (__PAIR128__(v128, v131) + v122) >> 64);
  uint64_t v134 = v133 + ((__PAIR128__(v128, v131) + v122) >> 64);
  unint64_t v136 = v72;
  BOOL v137 = __CFADD__(v134, v124);
  unint64_t v138 = v134 + v124;
  if (v137) {
    ++v136;
  }
  uint64_t v139 = v126 + ((__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v118) >> 64);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v125);
  if (v137) {
    ++v136;
  }
  unsigned long long v140 = v130 - __PAIR128__(0xFFFFFFFFLL * (uint64_t)v118, (1 - __CFADD__(v139, 1)));
  unint64_t v141 = v138
       - -(uint64_t)((v135
                                    - __PAIR128__(v124, (1- (__CFADD__((void)v140, 0xFFFFFFFF00000001)+ BYTE8(v140))))) >> 64);
  uint64_t v142 = -(uint64_t)(v136
                  + (v136 < (1
                                            - (__CFADD__(v141, 0xFFFFFFFFLL)
                                             + ((v138
                                               - __PAIR128__(v125, -(uint64_t)((v135- __PAIR128__(v124, (1- (__CFADD__((void)v140, 0xFFFFFFFF00000001)+ BYTE8(v140))))) >> 64))) >> 64)))));
  BOOL v143 = v142 == 0;
  if ((_BYTE)v142) {
    uint64_t v144 = 0;
  }
  else {
    uint64_t v144 = -1;
  }
  if (v143) {
    uint64_t v145 = 0;
  }
  else {
    uint64_t v145 = -1;
  }
  *uint64_t result = v144 & (v139 + 1) | v145 & v139;
  result[1] = v144 & (v140 - 0xFFFFFFFF) | v145 & v130;
  result[2] = v144 & (v135 - (1 - (__CFADD__((void)v140, 0xFFFFFFFF00000001) + BYTE8(v140)))) | v145 & v135;
  result[3] = v144 & (v141 + 0xFFFFFFFF) | v145 & v138;
  return result;
}

uint64_t *fiat_p256_mul(uint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  unint64_t v6 = a3[2];
  unint64_t v5 = a3[3];
  unint64_t v7 = v5 * *a2;
  unint64_t v8 = v6 * *a2;
  uint64_t v9 = (v6 * (unsigned __int128)*a2) >> 64;
  unint64_t v11 = *a3;
  unint64_t v10 = a3[1];
  uint64_t v12 = (v10 * (unsigned __int128)*a2) >> 64;
  unint64_t v13 = v10 * *a2;
  uint64_t v14 = (v11 * (unsigned __int128)*a2) >> 64;
  unint64_t v15 = v11 * *a2;
  uint64_t v16 = (v15 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  uint64_t v17 = (__PAIR128__(0xFFFFFFFFLL, -1) * v15) >> 64;
  if (__CFADD__((v15 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * v15)) {
    ++v16;
  }
  uint64_t v18 = v14 + v13;
  BOOL v30 = __CFADD__(__CFADD__(v14, v13), v12) | __CFADD__(v8, __CFADD__(v14, v13) + v12);
  unint64_t v19 = v8 + __CFADD__(v14, v13) + v12;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  uint64_t v21 = v9 + v7 + v30 - 0xFFFFFFFF * v15;
  unint64_t v22 = v13 + __CFADD__(-(uint64_t)(v11 * v4), v15) + v14 + v17;
  uint64_t v23 = v16
      + (__CFADD__(__CFADD__(-(uint64_t)(v11 * v4), v15), v18) | __CFADD__(v17, __CFADD__(-(uint64_t)(v11 * v4), v15)+ v18))+ v19;
  unint64_t v24 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  unint64_t v25 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  uint64_t v26 = (v11 * (unsigned __int128)v3) >> 64;
  uint64_t v27 = v6 * v3 + __CFADD__(v26, v10 * v3) + ((v10 * (unsigned __int128)v3) >> 64);
  unint64_t v28 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  unsigned long long v29 = __PAIR128__(v10 * v3, v22) + v11 * (unsigned __int128)v3;
  BOOL v30 = __CFADD__(__CFADD__(v22, v11 * v3), (__PAIR128__(v10, v11) * v3) >> 64) | __CFADD__(v23, __CFADD__(v22, v11 * v3)+ ((__PAIR128__(v10, v11) * v3) >> 64));
  unint64_t v31 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  if (v30) {
    uint64_t v32 = v27 + 1;
  }
  else {
    uint64_t v32 = v6 * v3 + __CFADD__(v26, v10 * v3) + ((v10 * (unsigned __int128)v3) >> 64);
  }
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v25);
  uint64_t v33 = v21
      + (__CFADD__(__CFADD__(v22, v11 * v3), (__PAIR128__(v10, v11) * v3) >> 64) | __CFADD__(v23, __CFADD__(v22, v11 * v3) + ((__PAIR128__(v10, v11) * v3) >> 64)))
      + v32;
  uint64_t v34 = (v5 * (unsigned __int128)v3) >> 64;
  unint64_t v35 = v5 * v3;
  uint64_t v36 = (v6 * (unsigned __int128)v3) >> 64;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v28);
  BOOL v39 = v30;
  char v37 = __CFADD__(v30, v36) | __CFADD__(v35, v30 + v36);
  unint64_t v38 = v35 + v39 + v36;
  if (v37) {
    ++v34;
  }
  uint64_t v40 = (v5 * (unsigned __int128)v4) >> 64;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  uint64_t v43 = v37;
  char v41 = __CFADD__(v37, v9) | __CFADD__(v7, v37 + v9);
  unint64_t v42 = v7 + v43 + v9;
  if (v41) {
    uint64_t v44 = v40 + 1;
  }
  else {
    uint64_t v44 = v40;
  }
  uint64_t v45 = (v15 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v24);
  if (v41) {
    uint64_t v46 = v21 + 1;
  }
  else {
    uint64_t v46 = v21;
  }
  uint64_t v48 = __CFADD__(v41, v42) | __CFADD__(0xFFFFFFFF00000001 * v15, v41 + v42);
  uint64_t v47 = v44 + v48 + v45;
  uint64_t v51 = __CFADD__(v48, v45) | __CFADD__(v44, v48 + v45);
  BOOL v49 = __CFADD__(v51, v34);
  uint64_t v50 = v51 + v34;
  BOOL v52 = __CFADD__(v51, v34);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v31);
  uint64_t v54 = __CFADD__(v49, v27) | __CFADD__(v46, v49 + v27);
  unint64_t v53 = v47 + v54 + v38;
  uint64_t v55 = (__CFADD__(v54, v38) | __CFADD__(v47, v54 + v38)) + v50;
  unint64_t v56 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  unint64_t v57 = ((unint64_t)v29 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  uint64_t v58 = (__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v29) >> 64;
  uint64_t v59 = v23 + __CFADD__(-(uint64_t)v29, (void)v29) + *((void *)&v29 + 1);
  BOOL v30 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v29, (void)v29), *((void *)&v29 + 1) + v23) | __CFADD__(v58, __CFADD__(-(uint64_t)v29, (void)v29) + *((void *)&v29 + 1) + v23), v33);
  uint64_t v60 = (__CFADD__(__CFADD__(-(uint64_t)v29, (void)v29), *((void *)&v29 + 1) + v23) | __CFADD__(v58, __CFADD__(-(uint64_t)v29, (void)v29) + *((void *)&v29 + 1) + v23))
      + v33;
  uint64_t v61 = v30;
  unint64_t v62 = ((unint64_t)v29 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v63 = ((unint64_t)v29 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  BOOL v30 = __CFADD__(__CFADD__(v57, 0xFFFFFFFF * v29), v60) | __CFADD__(v63, (__PAIR128__(v60, v57)+ (unint64_t)(0xFFFFFFFF * v29)) >> 64);
  uint64_t v64 = v63 + ((__PAIR128__(v60, v57) + (unint64_t)(0xFFFFFFFF * v29)) >> 64);
  unint64_t v65 = v61 + v30 - 0xFFFFFFFF * v29;
  if (__CFADD__(v30, 0xFFFFFFFF00000001 * v29) | __CFADD__(v61, v30 - 0xFFFFFFFF * v29)) {
    uint64_t v66 = 1;
  }
  else {
    uint64_t v66 = 0;
  }
  BOOL v30 = __CFADD__(v65, v53);
  uint64_t v69 = (__PAIR128__(v62, v65) + v53) >> 64;
  unint64_t v67 = v65 + v53;
  BOOL v30 = __CFADD__(v30, v62) | __CFADD__(v66, v69);
  uint64_t v68 = v66 + v69;
  uint64_t v70 = v30;
  BOOL v71 = __CFADD__(v68, v55);
  uint64_t v72 = v68 + v55;
  if (v71) {
    ++v70;
  }
  unint64_t v73 = v59 + ((__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v29) >> 64);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v56);
  uint64_t v74 = v52 + v71 + v70;
  unint64_t v76 = a2[2];
  unint64_t v75 = a2[3];
  uint64_t v77 = (v5 * (unsigned __int128)v76) >> 64;
  unint64_t v78 = v5 * v76;
  uint64_t v79 = (v6 * (unsigned __int128)v76) >> 64;
  unint64_t v80 = v6 * v76;
  uint64_t v81 = (v10 * (unsigned __int128)v76) >> 64;
  unint64_t v82 = v10 * v76;
  unint64_t v83 = v11 * v76;
  unint64_t v84 = (v11 * (unsigned __int128)v76) >> 64;
  unint64_t v85 = v84 + v82;
  BOOL v30 = __CFADD__(__CFADD__(v84, v82), v81) | __CFADD__(v80, __CFADD__(v84, v82) + v81);
  unint64_t v86 = v80 + __CFADD__(v84, v82) + v81;
  uint64_t v88 = v30 + v79;
  BOOL v30 = __CFADD__(v30, v79) | __CFADD__(v78, v88);
  uint64_t v87 = v78 + v88;
  if (v30) {
    ++v77;
  }
  unsigned long long v89 = __PAIR128__(v84, v73) + __PAIR128__(v82, v83);
  uint64_t v90 = ((__PAIR128__(v84, v73) + __PAIR128__(v82, v83)) >> 64) + v64;
  unint64_t v92 = (__CFADD__(__CFADD__(v73, v83), v85) | __CFADD__(v64, __CFADD__(v73, v83) + v85)) + v86;
  BOOL v30 = __CFADD__(__CFADD__(__CFADD__(v73, v83), v85) | __CFADD__(v64, __CFADD__(v73, v83) + v85), v86) | __CFADD__(v67, v92);
  unint64_t v91 = v67 + v92;
  uint64_t v94 = v30 + v87;
  BOOL v30 = __CFADD__(v30, v87) | __CFADD__(v72, v94);
  uint64_t v93 = v72 + v94;
  uint64_t v95 = v77 + v30 + v74;
  unint64_t v96 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  unint64_t v97 = 0xFFFFFFFF00000001 * (v73 + v83);
  uint64_t v98 = v64 + __CFADD__(-(uint64_t)v89, (void)v89) + *((void *)&v89 + 1);
  unint64_t v99 = (__CFADD__(__CFADD__(-(uint64_t)v89, (void)v89), v90) | __CFADD__((__PAIR128__(0xFFFFFFFFLL, -1)* (v73 + v83)) >> 64, __CFADD__(-(uint64_t)v89, (void)v89)+ v90))+ v91;
  BOOL v30 = __CFADD__(((v73 + v83) * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * (v73 + v83));
  uint64_t v100 = (__PAIR128__(0xFFFFFFFFLL, -1) * (v73 + v83)) >> 64;
  uint64_t v101 = ((v73 + v83) * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v102 = ((v73 + v83) * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  BOOL v104 = v30;
  BOOL v30 = __CFADD__(v30, v99);
  unint64_t v103 = v104 + v99;
  v30 |= __CFADD__(v102, v103);
  v103 += v102;
  unint64_t v106 = v30 + v97;
  unint64_t v105 = *((void *)&v89 + 1) + v106;
  if (__CFADD__(v30, v97) | __CFADD__(*((void *)&v89 + 1), v106)) {
    uint64_t v107 = 1;
  }
  else {
    uint64_t v107 = 0;
  }
  BOOL v30 = __CFADD__(v105, v93);
  uint64_t v108 = v105 + v93;
  uint64_t v109 = v107 + v30 + v101;
  if (__CFADD__(v30, v101) | __CFADD__(v107, v30 + v101)) {
    uint64_t v110 = 1;
  }
  else {
    uint64_t v110 = 0;
  }
  BOOL v111 = __CFADD__(v109, v95);
  uint64_t v112 = v109 + v95;
  if (v111) {
    uint64_t v113 = v110 + 1;
  }
  else {
    uint64_t v113 = v110;
  }
  uint64_t v114 = v98 + v100;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v96);
  if (v111) {
    ++v113;
  }
  uint64_t v115 = (v5 * (unsigned __int128)v75) >> 64;
  unint64_t v116 = v5 * v75;
  uint64_t v117 = (v6 * (unsigned __int128)v75) >> 64;
  unint64_t v118 = v6 * v75;
  uint64_t v119 = (v10 * (unsigned __int128)v75) >> 64;
  unint64_t v120 = v10 * v75;
  unint64_t v121 = v11 * v75;
  uint64_t v122 = (v11 * (unsigned __int128)v75) >> 64;
  uint64_t v123 = v122 + v120;
  BOOL v30 = __CFADD__(__CFADD__(v122, v120), v119) | __CFADD__(v118, __CFADD__(v122, v120) + v119);
  unint64_t v124 = v118 + __CFADD__(v122, v120) + v119;
  uint64_t v126 = v30 + v117;
  BOOL v30 = __CFADD__(v30, v117) | __CFADD__(v116, v126);
  uint64_t v125 = v116 + v126;
  if (v30) {
    ++v115;
  }
  BOOL v30 = __CFADD__(v114, v121);
  unint64_t v127 = v114 + v121;
  unint64_t v128 = v120 + v30 + v122;
  unint64_t v129 = v128 + v103;
  uint64_t v131 = __CFADD__(v30, v123) | __CFADD__(v103, v30 + v123);
  BOOL v30 = __CFADD__(v131, v124);
  uint64_t v130 = v131 + v124;
  v30 |= __CFADD__(v108, v130);
  v130 += v108;
  BOOL v133 = v30;
  BOOL v30 = __CFADD__(v30, v125);
  uint64_t v132 = v133 + v125;
  v30 |= __CFADD__(v112, v132);
  v132 += v112;
  uint64_t v134 = (v127 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  unint64_t v135 = v115 + v30 + v113;
  unint64_t v136 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  unint64_t v137 = 0xFFFFFFFF00000001 * v127;
  uint64_t v138 = 0xFFFFFFFF * v127;
  uint64_t v139 = (__PAIR128__(0xFFFFFFFFLL, -1) * v127) >> 64;
  unint64_t v140 = v103 + __CFADD__(-(uint64_t)v127, v127) + v128;
  BOOL v30 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v127, v127), v129) | __CFADD__(v139, __CFADD__(-(uint64_t)v127, v127) + v129), v130);
  uint64_t v141 = (__CFADD__(__CFADD__(-(uint64_t)v127, v127), v129) | __CFADD__(v139, __CFADD__(-(uint64_t)v127, v127) + v129))+ v130;
  uint64_t v142 = v30;
  BOOL v30 = __CFADD__(v134, v138);
  uint64_t v143 = v134 + v138;
  uint64_t v144 = (v127 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v145 = (v127 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  BOOL v147 = v30;
  BOOL v30 = __CFADD__(v30, v141);
  unint64_t v146 = v147 + v141;
  v30 |= __CFADD__(v145, v146);
  v146 += v145;
  unint64_t v149 = v30 + v137;
  BOOL v30 = __CFADD__(v30, v137) | __CFADD__(v142, v149);
  unint64_t v148 = v142 + v149;
  uint64_t v150 = v30;
  BOOL v30 = __CFADD__(v148, v132);
  unint64_t v151 = v148 + v132;
  uint64_t v152 = v150 + v30 + v144;
  if (__CFADD__(v30, v144) | __CFADD__(v150, v30 + v144)) {
    uint64_t v153 = 1;
  }
  else {
    uint64_t v153 = 0;
  }
  BOOL v154 = __CFADD__(v152, v135);
  unint64_t v155 = v152 + v135;
  if (v154) {
    ++v153;
  }
  uint64_t v156 = v140 + v143;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v136);
  if (v154) {
    unint64_t v157 = v153 + 1;
  }
  else {
    unint64_t v157 = v153;
  }
  unint64_t v159 = v146 - (1 - __CFADD__(v156, 1));
  unint64_t v158 = (v146 - __PAIR128__(v138, (1 - __CFADD__(v156, 1)))) >> 64;
  unsigned long long v160 = v155
       - __PAIR128__(v135, -(uint64_t)((v151- __PAIR128__(v158, (1 - (__CFADD__(v159, 0xFFFFFFFF00000001) + v158)))) >> 64));
  if (1
     - (__CFADD__((void)v160, 0xFFFFFFFFLL)
      + BYTE8(v160))
     + (v157 < (1 - (__CFADD__((void)v160, 0xFFFFFFFFLL) + BYTE8(v160)))))
  {
    uint64_t v161 = 0;
  }
  else
  {
    uint64_t v161 = -1;
  }
  if (1
     - (__CFADD__((void)v160, 0xFFFFFFFFLL)
      + BYTE8(v160))
     + (v157 < (1 - (__CFADD__((void)v160, 0xFFFFFFFFLL) + BYTE8(v160)))))
  {
    uint64_t v162 = -1;
  }
  else
  {
    uint64_t v162 = 0;
  }
  *uint64_t result = v161 & (v156 + 1) | v162 & v156;
  result[1] = v161 & (v159 - 0xFFFFFFFF) | v162 & v146;
  result[2] = v161 & (v151 - (1 - (__CFADD__(v159, 0xFFFFFFFF00000001) + v158))) | v162 & v151;
  result[3] = v161 & (v160 + 0xFFFFFFFF) | v162 & v155;
  return result;
}

uint64_t CBB_finish_i2d(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    CBB_finish_i2d_cold_2();
  }
  if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
    CBB_finish_i2d_cold_1();
  }
  size_t __n = 0xAAAAAAAAAAAAAAAALL;
  __src = (void *)0xAAAAAAAAAAAAAAAALL;
  if (!CBB_finish(a1, &__src, &__n))
  {
    CBB_cleanup(a1);
    return 0xFFFFFFFFLL;
  }
  if (__n >> 31)
  {
    OPENSSL_free(__src);
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    unint64_t v5 = (char *)*a2;
    if (*a2)
    {
      if (__n)
      {
        memcpy(v5, __src, __n);
        size_t v6 = __n;
        unint64_t v5 = (char *)*a2;
      }
      else
      {
        size_t v6 = 0;
      }
      *a2 = &v5[v6];
    }
    else
    {
      *a2 = __src;
      __src = 0;
    }
  }
  OPENSSL_free(__src);
  return __n;
}

EC_POINT *__cdecl EC_POINT_dup(const EC_POINT *a1, const EC_GROUP *a2)
{
  if (!a1) {
    return 0;
  }
  unint64_t v3 = EC_POINT_new(a2);
  unint64_t v4 = v3;
  if (!v3 || !EC_POINT_copy(v3, a1))
  {
    EC_POINT_free(v4);
    return 0;
  }
  return v4;
}

EC_POINT *__cdecl EC_POINT_new(const EC_GROUP *a1)
{
  if (a1)
  {
    unint64_t v2 = (EC_POINT *)OPENSSL_malloc(0xE0uLL);
    if (v2)
    {
      if (!*((_DWORD *)a1 + 128)) {
        CRYPTO_refcount_inc((unsigned int *)a1 + 135);
      }
      *(void *)unint64_t v2 = a1;
      ec_GFp_simple_point_init((uint64_t)v2 + 8);
    }
  }
  else
  {
    ERR_put_error(15, 0, 67, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec.c", 469);
    return 0;
  }
  return v2;
}

double ec_GFp_simple_point_init(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 20EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0;
  return result;
}

int EC_POINT_copy(EC_POINT *a1, const EC_POINT *a2)
{
  if (EC_GROUP_cmp(*(const EC_GROUP **)a1, *(const EC_GROUP **)a2, v2))
  {
    ERR_put_error(15, 0, 106, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec.c", 501);
    return 0;
  }
  else
  {
    if (a1 != a2) {
      ec_GFp_simple_point_copy((uint64_t)a1 + 8, (uint64_t)a2 + 8);
    }
    return 1;
  }
}

__n128 ec_GFp_simple_point_copy(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  uint64_t v7 = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 8EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 12std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v9 = *(_OWORD *)(a2 + 176);
  long long v8 = *(_OWORD *)(a2 + 192);
  long long v10 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 20EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 16std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v10;
  __n128 result = *(__n128 *)(a2 + 144);
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t *ec_felem_sub(uint64_t a1, unint64_t *a2, const unint64_t *a3, const unint64_t *a4)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v6[2] = v4;
  _OWORD v6[3] = v4;
  v6[0] = v4;
  v6[1] = v4;
  return bn_mod_sub_words(a2, a3, a4, *(const unint64_t **)(a1 + 320), (unint64_t *)v6, *(int *)(a1 + 328));
}

uint64_t *bn_mod_sub_words(unint64_t *a1, const unint64_t *a2, const unint64_t *a3, const unint64_t *a4, unint64_t *a5, uint64_t num)
{
  unint64_t v10 = bn_sub_words(a1, a2, a3, num);
  bn_add_words(a5, a1, a4, num);

  return bn_select_words((uint64_t *)a1, -(uint64_t)v10, (uint64_t *)a5, (uint64_t *)a1, num);
}

uint64_t ec_point_from_uncompressed(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  if (((2 * BN_num_bytes((const BIGNUM *)(a1 + 320))) | 1) == a4 && *a3 == 4)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    _OWORD v11[2] = v7;
    _OWORD v11[3] = v7;
    v11[0] = v7;
    v11[1] = v7;
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    long long v9[2] = v7;
    _OWORD v9[3] = v7;
    v9[0] = v7;
    v9[1] = v7;
    uint64_t result = ec_felem_from_bytes(a1);
    if (result)
    {
      uint64_t result = ec_felem_from_bytes(a1);
      if (result) {
        return ec_point_set_affine_coordinates(a1, a2, (uint64_t)v11, (uint64_t)v9) != 0;
      }
    }
  }
  else
  {
    ERR_put_error(15, 0, 109, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/oct.c", 122);
    return 0;
  }
  return result;
}

uint64_t ec_felem_from_bytes(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
}

uint64_t ec_GFp_mont_felem_from_bytes(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t result = ec_GFp_simple_felem_from_bytes(a1, a2, a3, a4);
  if (result)
  {
    bn_to_montgomery_small(a2, a2, *(int *)(a1 + 328), (unint64_t **)(a1 + 296));
    return 1;
  }
  return result;
}

uint64_t ec_GFp_simple_felem_from_bytes(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unint64_t a4)
{
  if (BN_num_bytes((const BIGNUM *)(a1 + 320)) == a4)
  {
    bn_big_endian_to_words(a2, *(int *)(a1 + 328), a3, a4);
    if (bn_less_than_words((uint64_t *)a2, *(uint64_t **)(a1 + 320), *(int *)(a1 + 328))) {
      return 1;
    }
    int v9 = 331;
  }
  else
  {
    int v9 = 324;
  }
  ERR_put_error(15, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/simple.c", v9);
  return 0;
}

void bn_to_montgomery_small(unint64_t *a1, unint64_t *a2, unint64_t a3, unint64_t **a4)
{
}

uint64_t bn_less_than_words(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  return bn_cmp_words_consttime(a1, a3, a2, a3) >> 31;
}

uint64_t bn_cmp_words_consttime(uint64_t *a1, unint64_t a2, uint64_t *a3, unint64_t a4)
{
  if (a2 >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a2;
  }
  if (v5)
  {
    LODWORD(result) = 0;
    long long v7 = a1;
    long long v8 = a3;
    do
    {
      uint64_t v10 = *v7++;
      uint64_t v9 = v10;
      uint64_t v11 = *v8++;
      uint64_t v12 = (((v11 ^ v9) - 1) & ~(v11 ^ v9)) >> 63;
      uint64_t result = result & v12 | (((((v9 - v11) ^ v9 | v11 ^ v9) ^ v9) >> 63) | 1) & ~v12;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v13 = a2 - a4;
  if (a2 >= a4)
  {
    if (a4 < a2)
    {
      uint64_t v18 = 0;
      unint64_t v19 = &a1[a4];
      do
      {
        uint64_t v20 = *v19++;
        v18 |= v20;
        --v13;
      }
      while (v13);
      return (((((v18 - 1) & ~v18) >> 63) & 1) == 0) | (((v18 - 1) & ~v18) >> 63) & result;
    }
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = a4 - a2;
    uint64_t v16 = &a3[a2];
    do
    {
      uint64_t v17 = *v16++;
      v14 |= v17;
      --v15;
    }
    while (v15);
    return result | ~(((v14 - 1) & ~v14) >> 63);
  }
  return result;
}

uint64_t ec_point_set_affine_coordinates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = *(void (**)(uint64_t, _OWORD *, _OWORD *, uint64_t))(*(void *)a1 + 88);
  uint64_t v9 = *(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 96);
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v26[2] = v10;
  _OWORD v26[3] = v10;
  v26[0] = v10;
  v26[1] = v10;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v24[2] = v10;
  v24[3] = v10;
  v24[0] = v10;
  v24[1] = v10;
  v9(a1, v26, a4);
  v9(a1, v24, a3);
  ec_felem_add(a1, (unint64_t *)v24, (const unint64_t *)v24, (const unint64_t *)(a1 + 360));
  v8(a1, v24, v24, a3);
  ec_felem_add(a1, (unint64_t *)v24, (const unint64_t *)v24, (const unint64_t *)(a1 + 432));
  if (ec_felem_equal(a1, (char *)v26, (char *)v24))
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v11 = *(_OWORD *)(a3 + 16);
    long long v12 = *(_OWORD *)(a3 + 32);
    long long v13 = *(_OWORD *)(a3 + 48);
    *(void *)(a2 + 64) = *(void *)(a3 + 64);
    *(_OWORD *)(a2 + 32) = v12;
    *(_OWORD *)(a2 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v13;
    *(_OWORD *)(a2 + 16) = v11;
    long long v15 = *(_OWORD *)(a4 + 32);
    long long v14 = *(_OWORD *)(a4 + 48);
    uint64_t v16 = *(void *)(a4 + 64);
    *(_OWORD *)(a2 + 8EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = *(_OWORD *)(a4 + 16);
    *(void *)(a2 + 136) = v16;
    *(_OWORD *)(a2 + 12std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v14;
    *(_OWORD *)(a2 + 104) = v15;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)a4;
    return 1;
  }
  else
  {
    ERR_put_error(15, 0, 120, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec.c", 628);
    uint64_t result = 0;
    if (*(_DWORD *)(a1 + 532))
    {
      *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
      long long v18 = *(_OWORD *)(a1 + 32);
      long long v19 = *(_OWORD *)(a1 + 48);
      long long v20 = *(_OWORD *)(a1 + 64);
      *(void *)(a2 + 64) = *(void *)(a1 + 80);
      *(_OWORD *)(a2 + 32) = v19;
      *(_OWORD *)(a2 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v20;
      *(_OWORD *)(a2 + 16) = v18;
      long long v21 = *(_OWORD *)(a1 + 120);
      long long v22 = *(_OWORD *)(a1 + 136);
      long long v23 = *(_OWORD *)(a1 + 104);
      *(void *)(a2 + 136) = *(void *)(a1 + 152);
      *(_OWORD *)(a2 + 8EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v23;
      *(_OWORD *)(a2 + 12std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v22;
      *(_OWORD *)(a2 + 104) = v21;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 88);
    }
  }
  return result;
}

void bn_mod_mul_montgomery_small(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a4 > 9 || *(_DWORD *)(a5 + 32) != a4) {
    goto LABEL_8;
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[7] = v10;
  v12[8] = v10;
  v12[5] = v10;
  v12[6] = v10;
  _OWORD v12[3] = v10;
  void v12[4] = v10;
  v12[1] = v10;
  long long v12[2] = v10;
  v12[0] = v10;
  uint64_t v11 = 2 * a4;
  if (a2 == a3) {
    bn_sqr_small((unint64_t *)v12, v11, a2, a4);
  }
  else {
    bn_mul_small((unint64_t *)v12, v11, a2, a4, a3, a4);
  }
  if (!bn_from_montgomery_in_place(a1, a4, (unint64_t *)v12, 2 * a4, a5)) {
LABEL_8:
  }
    abort();
  OPENSSL_cleanse(v12, 16 * a4);
}

void bn_mul_small(unint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t a4, unint64_t *a5, unint64_t a6)
{
  if (a6 + a4 != a2) {
    abort();
  }
  if (a4 == 8 && a6 == 8)
  {
    bn_mul_comba8(a1, a3, a5);
  }
  else
  {
    bn_mul_normal(a1, a3, a4, a5, a6);
  }
}

void bn_mul_normal(unint64_t *a1, unint64_t *a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  if (a3 < a5) {
    unint64_t v6 = a5;
  }
  else {
    unint64_t v6 = a3;
  }
  if (a3 < a5) {
    long long v7 = a2;
  }
  else {
    long long v7 = a4;
  }
  if (a3 < a5) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = a5;
  }
  if (a3 < a5) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = a2;
  }
  if (v8)
  {
    a1[v6] = bn_mul_words(a1, v9, v6, *v7);
    if (v8 != 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = v7 + 2;
      unint64_t v12 = 4 - v8;
      uint64_t v13 = &a1[v6 + 4];
      do
      {
        v13[v10 - 3] = bn_mul_add_words(&a1[v10 + 1], v9, v6, v11[v10 - 1]);
        if (v12 == 2) {
          break;
        }
        v13[v10 - 2] = bn_mul_add_words(&a1[v10 + 2], v9, v6, v11[v10]);
        if (v12 == 1) {
          break;
        }
        v13[v10 - 1] = bn_mul_add_words(&a1[v10 + 3], v9, v6, v11[v10 + 1]);
        if (!v12) {
          break;
        }
        v13[v10] = bn_mul_add_words(&a1[v10 + 4], v9, v6, v11[v10 + 2]);
        v12 += 4;
        v10 += 4;
      }
      while (v12 != 3);
    }
  }
  else if (8 * v6)
  {
    bzero(a1, 8 * v6);
  }
}

uint64_t bn_from_montgomery_in_place(unint64_t *a1, unint64_t num, unint64_t *rp, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(int *)(a5 + 32);
  if (v5 == num && 2 * v5 == a4)
  {
    uint64_t v11 = *(unint64_t **)(a5 + 24);
    unint64_t v12 = 0;
    if (v5)
    {
      uint64_t v13 = *(void *)(a5 + 48);
      if (num <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = num;
      }
      long long v15 = rp;
      do
      {
        unint64_t v16 = bn_mul_add_words(v15, v11, num, *v15 * v13);
        unint64_t v17 = v15[num];
        unint64_t v18 = v16 + v12 + v17;
        unint64_t v12 = (v12 | (v16 + v12 != 0)) & (unint64_t)(v18 <= v17);
        v15[num] = v18;
        ++v15;
        --v14;
      }
      while (v14);
    }
    bn_reduce_once(a1, &rp[num], v12, v11, num);
    return 1;
  }
  else
  {
    ERR_put_error(3, 0, 66, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/montgomery.c", 294);
    return 0;
  }
}

unint64_t bn_mul_add_words(unint64_t *rp, const unint64_t *ap, int num, unint64_t w)
{
  if (!*(void *)&num) {
    return 0;
  }
  if (*(void *)&num < 4uLL)
  {
    uint64_t v4 = 0;
    do
    {
LABEL_25:
      unint64_t v27 = *ap++;
      unint64_t v28 = (v27 * (unsigned __int128)w) >> 64;
      unint64_t v29 = v27 * w;
      BOOL v6 = __CFADD__(*rp, v4);
      unint64_t v30 = *rp + v4;
      uint64_t v31 = v6;
      unsigned long long v32 = __PAIR128__(v31, v30) + __PAIR128__(v28, v29);
      uint64_t v4 = (__PAIR128__(v31, v30) + __PAIR128__(v28, v29)) >> 64;
      *rp++ = v32;
      --*(void *)&num;
    }
    while (*(void *)&num);
    return v4;
  }
  uint64_t v4 = 0;
  do
  {
    unint64_t v5 = rp[1];
    BOOL v6 = __CFADD__(*rp, v4);
    unint64_t v7 = *rp + v4;
    uint64_t v8 = v6;
    unsigned long long v9 = __PAIR128__(v8, v7) + *ap * (unsigned __int128)w;
    *rp = v9;
    unint64_t v10 = ap[1];
    uint64_t v11 = (v10 * (unsigned __int128)w) >> 64;
    unint64_t v12 = v10 * w;
    BOOL v6 = __CFADD__(v12, v5);
    unint64_t v13 = v12 + v5;
    if (v6) {
      ++v11;
    }
    BOOL v6 = __CFADD__(v13, *((void *)&v9 + 1));
    unint64_t v14 = v13 + *((void *)&v9 + 1);
    if (v6) {
      uint64_t v15 = v11 + 1;
    }
    else {
      uint64_t v15 = v11;
    }
    rp[1] = v14;
    unint64_t v16 = ap[2];
    unint64_t v17 = rp[2];
    unint64_t v18 = rp[3];
    BOOL v6 = __CFADD__(v16 * w, v17);
    unint64_t v19 = v16 * w + v17;
    uint64_t v20 = (v16 * (unsigned __int128)w) >> 64;
    if (v6) {
      ++v20;
    }
    BOOL v6 = __CFADD__(v19, v15);
    unint64_t v21 = v19 + v15;
    if (v6) {
      ++v20;
    }
    rp[2] = v21;
    unint64_t v22 = ap[3];
    uint64_t v23 = (v22 * (unsigned __int128)w) >> 64;
    unint64_t v24 = v22 * w;
    BOOL v6 = __CFADD__(v24, v18);
    unint64_t v25 = v24 + v18;
    if (v6) {
      ++v23;
    }
    BOOL v6 = __CFADD__(v25, v20);
    unint64_t v26 = v25 + v20;
    if (v6) {
      uint64_t v4 = v23 + 1;
    }
    else {
      uint64_t v4 = v23;
    }
    rp[3] = v26;
    ap += 4;
    rp += 4;
    *(void *)&num -= 4;
  }
  while (*(void *)&num >= 4uLL);
  if (*(void *)&num) {
    goto LABEL_25;
  }
  return v4;
}

uint64_t bn_reduce_once(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *bp, uint64_t num)
{
  if (a1 == a2) {
    bn_reduce_once_cold_1();
  }
  uint64_t v8 = a3 - bn_sub_words(a1, a2, bp, num);
  if ((unint64_t)(v8 + 1) >= 2) {
    bn_reduce_once_cold_2();
  }
  bn_select_words((uint64_t *)a1, v8, (uint64_t *)a2, (uint64_t *)a1, num);
  return v8;
}

unint64_t bn_sub_words(unint64_t *rp, const unint64_t *ap, const unint64_t *bp, int num)
{
  if (!*(void *)&num) {
    return 0;
  }
  if (*(void *)&num < 4uLL)
  {
    unint64_t v4 = 0;
    do
    {
LABEL_14:
      unint64_t v20 = *bp++;
      unint64_t v19 = v20;
      unint64_t v21 = *ap++;
      _BOOL1 v6 = v21 >= v19;
      unint64_t v22 = v21 - v19;
      unsigned int v23 = !v6;
      _BOOL1 v6 = v22 >= v4;
      unint64_t v24 = v22 - v4;
      if (v6) {
        unint64_t v4 = v23;
      }
      else {
        unint64_t v4 = 1;
      }
      *rp++ = v24;
      --*(void *)&num;
    }
    while (*(void *)&num);
    return v4;
  }
  unint64_t v4 = 0;
  do
  {
    unint64_t v5 = *ap - *bp;
    _BOOL1 v6 = v5 >= v4;
    unint64_t v7 = v5 - v4;
    BOOL v8 = !v6 || *ap < *bp;
    _BOOL1 v6 = !v8;
    *rp = v7;
    unint64_t v9 = ap[1];
    unint64_t v10 = bp[1];
    _BOOL1 v11 = v6;
    _BOOL1 v6 = __CFSUB__(v9, v10, v6);
    rp[1] = v9 - (v10 + !v11);
    unint64_t v12 = ap[2];
    unint64_t v13 = bp[2];
    _BOOL1 v14 = v6;
    _BOOL1 v6 = __CFSUB__(v12, v13, v6);
    rp[2] = v12 - (v13 + !v14);
    unint64_t v15 = ap[3];
    unint64_t v16 = bp[3];
    _BOOL1 v18 = v6;
    _BOOL1 v6 = __CFSUB__(v15, v16, v6);
    unint64_t v17 = v15 - (v16 + !v18);
    unint64_t v4 = !v6;
    rp[3] = v17;
    ap += 4;
    bp += 4;
    rp += 4;
    *(void *)&num -= 4;
  }
  while (*(void *)&num >= 4uLL);
  if (*(void *)&num) {
    goto LABEL_14;
  }
  return v4;
}

uint64_t *bn_select_words(uint64_t *result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  for (; a5; --a5)
  {
    uint64_t v6 = *a3++;
    uint64_t v5 = v6;
    uint64_t v7 = *a4++;
    *result++ = a2 & v5 | v7 & ~a2;
  }
  return result;
}

unint64_t bn_mul_words(unint64_t *rp, const unint64_t *ap, int num, unint64_t w)
{
  if (!*(void *)&num) {
    return 0;
  }
  if (*(void *)&num < 4uLL)
  {
    unint64_t v4 = 0;
    do
    {
LABEL_20:
      unint64_t v23 = *ap++;
      unint64_t v24 = (v23 * (unsigned __int128)w) >> 64;
      unint64_t v25 = v23 * w + v4;
      if (__CFADD__(v23 * w, v4)) {
        unint64_t v4 = v24 + 1;
      }
      else {
        unint64_t v4 = v24;
      }
      *rp++ = v25;
      --*(void *)&num;
    }
    while (*(void *)&num);
    return v4;
  }
  unint64_t v4 = 0;
  do
  {
    unint64_t v5 = *ap * w;
    BOOL v6 = __CFADD__(v5, v4);
    unint64_t v7 = v5 + v4;
    if (v6) {
      uint64_t v8 = ((*ap * (unsigned __int128)w) >> 64) + 1;
    }
    else {
      uint64_t v8 = (*ap * (unsigned __int128)w) >> 64;
    }
    *rp = v7;
    unint64_t v9 = ap[1];
    uint64_t v10 = (v9 * (unsigned __int128)w) >> 64;
    unint64_t v11 = v9 * w;
    BOOL v6 = __CFADD__(v11, v8);
    unint64_t v12 = v11 + v8;
    if (v6) {
      uint64_t v13 = v10 + 1;
    }
    else {
      uint64_t v13 = v10;
    }
    rp[1] = v12;
    unint64_t v14 = ap[2];
    uint64_t v15 = (v14 * (unsigned __int128)w) >> 64;
    unint64_t v16 = v14 * w;
    BOOL v6 = __CFADD__(v16, v13);
    unint64_t v17 = v16 + v13;
    if (v6) {
      uint64_t v18 = v15 + 1;
    }
    else {
      uint64_t v18 = v15;
    }
    rp[2] = v17;
    unint64_t v19 = ap[3];
    unint64_t v20 = (v19 * (unsigned __int128)w) >> 64;
    unint64_t v21 = v19 * w;
    BOOL v6 = __CFADD__(v21, v18);
    unint64_t v22 = v21 + v18;
    if (v6) {
      unint64_t v4 = v20 + 1;
    }
    else {
      unint64_t v4 = v20;
    }
    rp[3] = v22;
    ap += 4;
    rp += 4;
    *(void *)&num -= 4;
  }
  while (*(void *)&num >= 4uLL);
  if (*(void *)&num) {
    goto LABEL_20;
  }
  return v4;
}

uint64_t ec_felem_add(uint64_t a1, unint64_t *a2, const unint64_t *a3, const unint64_t *a4)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v6[2] = v4;
  _OWORD v6[3] = v4;
  v6[0] = v4;
  v6[1] = v4;
  return bn_mod_add_words(a2, a3, a4, *(const unint64_t **)(a1 + 320), (unint64_t *)v6, *(int *)(a1 + 328));
}

void ec_GFp_mont_felem_sqr(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
}

void bn_sqr_small(unint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a4 > 9 || 2 * a4 != a2) {
    abort();
  }
  if (a4 == 8)
  {
    bn_sqr_comba8(a1, a3);
  }
  else if (a4 == 4)
  {
    bn_sqr_comba4(a1, a3);
  }
  else
  {
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v6[7] = v5;
    v6[8] = v5;
    unsigned int v6[5] = v5;
    v6[6] = v5;
    _OWORD v6[3] = v5;
    _OWORD v6[4] = v5;
    v6[1] = v5;
    void v6[2] = v5;
    v6[0] = v5;
    bn_sqr_normal(a1, (uint64_t)a3, a4, (unint64_t *)v6);
    OPENSSL_cleanse(v6, 16 * a4);
  }
}

void *bn_sqr_comba4(void *result, unint64_t *a2)
{
  uint64_t v2 = (*a2 * (unsigned __int128)*a2) >> 64;
  *uint64_t result = *a2 * *a2;
  unint64_t v3 = a2[1];
  uint64_t v4 = (*a2 * (unsigned __int128)v3) >> 64;
  unint64_t v5 = *a2 * v3;
  BOOL v6 = __CFADD__(v5, v2);
  uint64_t v7 = v5 + v2;
  if (v6) {
    uint64_t v8 = v4 + 1;
  }
  else {
    uint64_t v8 = v4;
  }
  BOOL v6 = __CFADD__(v7, v5);
  uint64_t v9 = v7 + v5;
  if (v6) {
    uint64_t v10 = v4 + 1;
  }
  else {
    uint64_t v10 = v4;
  }
  result[1] = v9;
  unint64_t v12 = *a2;
  unint64_t v11 = a2[1];
  uint64_t v13 = (v11 * (unsigned __int128)v11) >> 64;
  unint64_t v14 = v11 * v11;
  BOOL v6 = __CFADD__(v14, v10 + v8);
  unint64_t v15 = v14 + v10 + v8;
  if (v6) {
    uint64_t v16 = v13 + 1;
  }
  else {
    uint64_t v16 = v13;
  }
  BOOL v6 = __CFADD__(__CFADD__(v10, v8), v16);
  uint64_t v17 = __CFADD__(v10, v8) + v16;
  uint64_t v18 = v6;
  unint64_t v19 = a2[2];
  uint64_t v20 = (v12 * (unsigned __int128)v19) >> 64;
  unint64_t v21 = v12 * v19;
  BOOL v6 = __CFADD__(v15, v21);
  unint64_t v22 = v15 + v21;
  if (v6) {
    uint64_t v23 = v20 + 1;
  }
  else {
    uint64_t v23 = v20;
  }
  BOOL v6 = __CFADD__(v17, v23);
  uint64_t v24 = v17 + v23;
  uint64_t v25 = v6;
  BOOL v6 = __CFADD__(v22, v21);
  unint64_t v26 = v22 + v21;
  if (v6) {
    uint64_t v27 = v20 + 1;
  }
  else {
    uint64_t v27 = v20;
  }
  BOOL v6 = __CFADD__(v24, v27);
  uint64_t v28 = v24 + v27;
  uint64_t v29 = v18 + v6 + v25;
  result[2] = v26;
  unint64_t v31 = a2[2];
  unint64_t v30 = a2[3];
  unint64_t v32 = a2[1];
  uint64_t v33 = (*a2 * (unsigned __int128)v30) >> 64;
  unint64_t v34 = *a2 * v30;
  BOOL v6 = __CFADD__(v34, v28);
  uint64_t v35 = v34 + v28;
  if (v6) {
    uint64_t v36 = v33 + 1;
  }
  else {
    uint64_t v36 = v33;
  }
  uint64_t v37 = v29 + v36;
  BOOL v6 = __CFADD__(v35, v34);
  uint64_t v38 = v35 + v34;
  if (v6) {
    uint64_t v39 = v33 + 1;
  }
  else {
    uint64_t v39 = v33;
  }
  BOOL v6 = __CFADD__(v37, v39);
  uint64_t v40 = v37 + v39;
  uint64_t v41 = v6;
  if (__CFADD__(v29, v36)) {
    uint64_t v42 = v41 + 1;
  }
  else {
    uint64_t v42 = v41;
  }
  unint64_t v43 = (v32 * (unsigned __int128)v31) >> 64;
  unint64_t v44 = v32 * v31;
  BOOL v6 = __CFADD__(v38, v44);
  uint64_t v45 = v38 + v44;
  if (v6) {
    unint64_t v46 = v43 + 1;
  }
  else {
    unint64_t v46 = v43;
  }
  BOOL v6 = __CFADD__(v40, v46);
  unint64_t v47 = v40 + v46;
  uint64_t v48 = v6;
  BOOL v6 = __CFADD__(v45, v44);
  uint64_t v49 = v45 + v44;
  if (v6) {
    unint64_t v50 = v43 + 1;
  }
  else {
    unint64_t v50 = v43;
  }
  unsigned long long v51 = __PAIR128__(v42, v47) + __PAIR128__(v48, v50);
  result[3] = v49;
  unint64_t v52 = a2[1];
  uint64_t v53 = a2[2] * a2[2] + v51;
  uint64_t v54 = *((void *)&v51 + 1) + v51;
  BOOL v55 = __CFADD__(*((void *)&v51 + 1), (void)v51);
  unint64_t v56 = a2[3];
  uint64_t v57 = (v52 * (unsigned __int128)v56) >> 64;
  unint64_t v58 = v52 * v56;
  BOOL v6 = __CFADD__(v53, v58);
  uint64_t v59 = v53 + v58;
  if (v6) {
    uint64_t v60 = v57 + 1;
  }
  else {
    uint64_t v60 = v57;
  }
  BOOL v6 = __CFADD__(v54, v60);
  uint64_t v61 = v54 + v60;
  uint64_t v62 = v6;
  BOOL v6 = __CFADD__(v59, v58);
  uint64_t v63 = v59 + v58;
  if (v6) {
    uint64_t v64 = v57 + 1;
  }
  else {
    uint64_t v64 = v57;
  }
  BOOL v6 = __CFADD__(v61, v64);
  uint64_t v65 = v61 + v64;
  uint64_t v66 = v55 + v6 + v62;
  result[4] = v63;
  unint64_t v68 = a2[2];
  unint64_t v67 = a2[3];
  uint64_t v69 = (v68 * (unsigned __int128)v67) >> 64;
  unint64_t v70 = v68 * v67;
  BOOL v6 = __CFADD__(v70, v65);
  uint64_t v71 = v70 + v65;
  if (v6) {
    uint64_t v72 = v69 + 1;
  }
  else {
    uint64_t v72 = v69;
  }
  uint64_t v73 = v66 + v72;
  BOOL v6 = __CFADD__(v71, v70);
  uint64_t v74 = v71 + v70;
  if (v6) {
    uint64_t v75 = v69 + 1;
  }
  else {
    uint64_t v75 = v69;
  }
  BOOL v6 = __CFADD__(v73, v75);
  uint64_t v76 = v73 + v75;
  uint64_t v77 = v6;
  result[5] = v74;
  unint64_t v78 = a2[3];
  uint64_t v79 = (v78 * (unsigned __int128)v78) >> 64;
  unint64_t v80 = v78 * v78;
  BOOL v6 = __CFADD__(v80, v76);
  uint64_t v81 = v80 + v76;
  if (v6) {
    uint64_t v82 = v79 + 1;
  }
  else {
    uint64_t v82 = v79;
  }
  result[6] = v81;
  result[7] = v77 + __CFADD__(v66, v72) + v82;
  return result;
}

uint64_t bn_reduce_once_in_place(unint64_t *ap, uint64_t a2, const unint64_t *a3, unint64_t *rp, uint64_t num)
{
  uint64_t v8 = a2 - bn_sub_words(rp, ap, a3, num);
  if ((unint64_t)(v8 + 1) >= 2) {
    bn_reduce_once_in_place_cold_1();
  }
  bn_select_words((uint64_t *)ap, v8, (uint64_t *)ap, (uint64_t *)rp, num);
  return v8;
}

uint64_t bn_mod_add_words(unint64_t *a1, const unint64_t *a2, const unint64_t *a3, const unint64_t *a4, unint64_t *a5, uint64_t num)
{
  unint64_t v10 = bn_add_words(a1, a2, a3, num);

  return bn_reduce_once_in_place(a1, v10, a4, a5, num);
}

unint64_t bn_add_words(unint64_t *rp, const unint64_t *ap, const unint64_t *bp, int num)
{
  if (!*(void *)&num) {
    return 0;
  }
  if (*(void *)&num < 4uLL)
  {
    unint64_t v4 = 0;
    do
    {
LABEL_17:
      uint64_t v23 = *bp++;
      uint64_t v22 = v23;
      uint64_t v24 = *ap++;
      BOOL v7 = __CFADD__(v24, v22);
      uint64_t v25 = v24 + v22;
      unsigned int v26 = v7;
      BOOL v7 = __CFADD__(v25, v4);
      unint64_t v27 = v25 + v4;
      if (v7) {
        unint64_t v4 = 1;
      }
      else {
        unint64_t v4 = v26;
      }
      *rp++ = v27;
      --*(void *)&num;
    }
    while (*(void *)&num);
    return v4;
  }
  unint64_t v4 = 0;
  do
  {
    unint64_t v5 = *ap + *bp;
    BOOL v6 = __CFADD__(*ap, *bp);
    BOOL v7 = __CFADD__(v5, v4);
    unint64_t v8 = v5 + v4;
    int v9 = v7 || v6;
    BOOL v7 = v9 != 0;
    *rp = v8;
    unint64_t v10 = ap[1];
    unint64_t v11 = bp[1];
    BOOL v13 = v7;
    BOOL v7 = __CFADD__(v7, v10);
    unint64_t v12 = v13 + v10;
    v7 |= __CFADD__(v11, v12);
    rp[1] = v11 + v12;
    unint64_t v14 = ap[2];
    unint64_t v15 = bp[2];
    BOOL v17 = v7;
    BOOL v7 = __CFADD__(v7, v14);
    unint64_t v16 = v17 + v14;
    v7 |= __CFADD__(v15, v16);
    rp[2] = v15 + v16;
    unint64_t v18 = ap[3];
    unint64_t v19 = bp[3];
    unint64_t v21 = v7 + v18;
    BOOL v7 = __CFADD__(v7, v18) | __CFADD__(v19, v21);
    unint64_t v20 = v19 + v21;
    unint64_t v4 = v7;
    rp[3] = v20;
    ap += 4;
    bp += 4;
    rp += 4;
    *(void *)&num -= 4;
  }
  while (*(void *)&num >= 4uLL);
  if (*(void *)&num) {
    goto LABEL_17;
  }
  return v4;
}

BOOL ec_felem_equal(uint64_t a1, char *a2, char *a3)
{
  return CRYPTO_memcmp(a2, a3, 8 * *(int *)(a1 + 328)) == 0;
}

void ec_GFp_mont_felem_mul(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
}

unint64_t ec_felem_neg(uint64_t a1, unint64_t *rp, const unint64_t *a3)
{
  unint64_t v3 = rp;
  int v5 = *(_DWORD *)(a1 + 328);
  if (v5 < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = a3;
    uint64_t v8 = *(unsigned int *)(a1 + 328);
    do
    {
      uint64_t v9 = *v7++;
      v6 |= v9;
      --v8;
    }
    while (v8);
    if (v6) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  unint64_t result = bn_sub_words(rp, *(const unint64_t **)(a1 + 320), a3, v5);
  if (result) {
    ec_felem_neg_cold_1();
  }
  uint64_t v12 = *(unsigned int *)(a1 + 328);
  if ((int)v12 >= 1)
  {
    do
    {
      *v3++ &= v10;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t *EC_GFp_nistp256_method()
{
  return &EC_GFp_nistp256_method_storage;
}

uint64_t *EC_GFp_nistp224_method()
{
  return &EC_GFp_nistp224_method_storage;
}

uint64_t boringssl_context_set_fallback(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(v2 + 400);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    SSL_set_mode(v3, 0x400u);
    char v4 = 64;
  }
  else
  {
    SSL_clear_mode(v3, 1024);
    char v4 = 0;
  }
  uint64_t result = 0;
  *(unsigned char *)(v2 + 556) = *(unsigned char *)(v2 + 556) & 0xBF | v4;
  return result;
}

uint64_t boringssl_context_set_false_start(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(v2 + 400);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    char v4 = 0x80;
    SSL_set_mode(v3, 0x80u);
  }
  else
  {
    SSL_clear_mode(v3, 128);
    char v4 = 0;
  }
  uint64_t result = 0;
  *(unsigned char *)(v2 + 556) = *(unsigned char *)(v2 + 556) & 0x7F | v4;
  return result;
}

uint64_t SSL_clear_mode(uint64_t a1, int a2)
{
  uint64_t v2 = *(_DWORD *)(a1 + 148) & ~a2;
  *(_DWORD *)(a1 + 14EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v2;
  return v2;
}

uint64_t __boringssl_context_update_encryption_level_block_invoke_216(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(*(void *)(a1 + 32) + 552), 1);
}

uint64_t __boringssl_context_update_encryption_level_block_invoke_214(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(*(void *)(a1 + 32) + 548), 0);
}

void nw_protocol_boringssl_deallocate_options(void *a1, void *a2)
{
  id v31 = a1;
  if (a2)
  {
    uint64_t v3 = (void *)a2[1];
    if (v3)
    {
      free(v3);
      a2[1] = 0;
    }
    char v4 = (void *)a2[2];
    if (v4)
    {
      free(v4);
      a2[2] = 0;
    }
    int v5 = (void *)a2[5];
    a2[5] = 0;

    uint64_t v6 = (void *)a2[29];
    a2[29] = 0;

    BOOL v7 = (void *)a2[6];
    a2[6] = 0;

    uint64_t v8 = (void *)a2[7];
    a2[7] = 0;

    uint64_t v9 = (void *)a2[11];
    a2[11] = 0;

    uint64_t v10 = (void *)a2[12];
    a2[12] = 0;

    unint64_t v11 = (void *)a2[13];
    a2[13] = 0;

    uint64_t v12 = (void *)a2[14];
    a2[14] = 0;

    BOOL v13 = (void *)a2[15];
    a2[15] = 0;

    unint64_t v14 = (void *)a2[16];
    a2[16] = 0;

    unint64_t v15 = (void *)a2[22];
    a2[22] = 0;

    unint64_t v16 = (void *)a2[23];
    a2[23] = 0;

    BOOL v17 = (void *)a2[9];
    a2[9] = 0;

    unint64_t v18 = (void *)a2[24];
    a2[24] = 0;

    unint64_t v19 = (void *)a2[17];
    a2[17] = 0;

    unint64_t v20 = (void *)a2[18];
    a2[18] = 0;

    unint64_t v21 = (void *)a2[19];
    a2[19] = 0;

    uint64_t v22 = (void *)a2[20];
    a2[20] = 0;

    uint64_t v23 = (void *)a2[21];
    a2[21] = 0;

    uint64_t v24 = (void *)a2[41];
    a2[41] = 0;

    uint64_t v25 = (void *)a2[33];
    a2[33] = 0;

    unsigned int v26 = (void *)a2[32];
    a2[32] = 0;

    unint64_t v27 = (void *)a2[10];
    a2[10] = 0;

    a2[43] = 0;
    uint64_t v28 = (const void *)a2[35];
    if (v28) {
      CFRelease(v28);
    }
    a2[35] = 0;
    uint64_t v29 = (const void *)a2[36];
    if (v29) {
      CFRelease(v29);
    }
    a2[36] = 0;
    unint64_t v30 = (void *)a2[42];
    if (v30)
    {
      free(v30);
      a2[42] = 0;
    }
    a2[44] = 0;
    cc_clear();
    free(a2);
  }
  else
  {
    cc_clear();
  }
}

uint64_t nw_protocol_boringssl_waiting_for_output(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 40);
    if (v1)
    {
      if ((*(unsigned char *)(v1 + 475) & 1) == 0
        && datapath_logging_enabled
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_waiting_for_output_cold_2();
      }
      uint64_t result = boringssl_session_in_early_data(*(void *)(v1 + 336));
      if (result) {
        uint64_t result = boringssl_session_get_state(*(void *)(v1 + 336)) < 2;
      }
      if ((*(unsigned char *)(v1 + 475) & 1) == 0)
      {
        uint64_t v2 = g_boringssl_log;
        if (g_boringssl_log)
        {
          unsigned int v3 = result;
          if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG)) {
            nw_protocol_boringssl_waiting_for_output_cold_1(v1, v3, v2);
          }
          return v3;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void __boringssl_context_evaluate_trust_async_external_block_invoke_3(uint64_t a1)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  if (boringssl_session_get_state(*(void *)(a1 + 48)) > 3
    || (boringssl_session_is_cancelled(*(void *)(a1 + 48)) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (!v4) {
      goto LABEL_9;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
    if (WeakRetained)
    {
      uint64_t v6 = WeakRetained;
      BOOL v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
      char v8 = v7[475];

      if (v8) {
        goto LABEL_110;
      }
    }
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      id v10 = objc_loadWeakRetained((id *)(v9 + 16));
      if (v10)
      {
        unint64_t v11 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
        uint64_t v12 = (v11[475] & 1) == 0;
      }
      else
      {
        uint64_t v12 = 1;
      }

      if (!v12) {
        goto LABEL_110;
      }
    }
    else
    {
LABEL_9:
      uint64_t v12 = 1;
    }
    if (!g_boringssl_log)
    {
LABEL_110:
      *(unsigned char *)(*(void *)(a1 + 56) + 558) &= ~8u;
      unint64_t v86 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_111:
      v86();
      return;
    }
    uint64_t v22 = (id)g_boringssl_log;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_43;
    }
    uint64_t v23 = *(void *)(a1 + 32);
    if (!v23)
    {
      BOOL v25 = 0;
      id v26 = 0;
      char v27 = 1;
      uint64_t v28 = &unk_1BA179713;
      goto LABEL_39;
    }
    uint64_t v12 = (uint64_t)objc_loadWeakRetained((id *)(v23 + 16));
    uint64_t v24 = *(void *)(a1 + 32);
    if (v12)
    {
      BOOL v25 = v24 != 0;
      if (v24)
      {
        BlockSize = (char *)objc_loadWeakRetained((id *)(v24 + 16));
        uint64_t v24 = *(void *)(a1 + 32);
      }
      else
      {
        BlockSize = 0;
      }
      uint64_t v28 = BlockSize + 391;
      if (v24) {
        goto LABEL_38;
      }
    }
    else
    {
      BOOL v25 = 0;
      uint64_t v28 = &unk_1BA179713;
      if (v24)
      {
LABEL_38:
        id v26 = objc_loadWeakRetained((id *)(v24 + 16));
        char v27 = 0;
LABEL_39:
        *(_DWORD *)buf = 136446978;
        uint64_t v122 = "boringssl_context_evaluate_trust_async_external_block_invoke";
        __int16 v123 = 1024;
        int v124 = 1756;
        __int16 v125 = 2082;
        uint64_t v126 = v28;
        __int16 v127 = 2048;
        uint64_t v128 = (uint64_t)v26;
        _os_log_impl(&dword_1BA0DE000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] Cancelled during verify block", buf, 0x26u);
        if (v27)
        {
          if (!v25) {
            goto LABEL_41;
          }
        }
        else
        {

          if (!v25)
          {
LABEL_41:
            if (v23) {
LABEL_42:
            }

LABEL_43:
            goto LABEL_110;
          }
        }

        if (!v23) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
    }
    id v26 = 0;
    char v27 = 1;
    goto LABEL_39;
  }
  uint64_t v13 = *(void *)(a1 + 32);
  if (!v13) {
    goto LABEL_16;
  }
  id v14 = objc_loadWeakRetained((id *)(v13 + 16));
  if (v14)
  {
    unint64_t v15 = v14;
    unint64_t v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    char v17 = v16[475];

    if (v17) {
      goto LABEL_59;
    }
  }
  uint64_t v18 = *(void *)(a1 + 32);
  if (!v18)
  {
LABEL_16:
    uint64_t v21 = 1;
    goto LABEL_30;
  }
  id v19 = objc_loadWeakRetained((id *)(v18 + 16));
  if (v19)
  {
    unint64_t v20 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    uint64_t v21 = (v20[475] & 1) == 0;
  }
  else
  {
    uint64_t v21 = 1;
  }

  if (v21)
  {
LABEL_30:
    if (!g_boringssl_log) {
      goto LABEL_59;
    }
    uint64_t v29 = (id)g_boringssl_log;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    uint64_t v30 = *(void *)(a1 + 32);
    if (v30)
    {
      uint64_t v21 = (uint64_t)objc_loadWeakRetained((id *)(v30 + 16));
      uint64_t v31 = *(void *)(a1 + 32);
      if (v21)
      {
        BOOL v32 = v31 != 0;
        if (v31)
        {
          BlockSize = (char *)objc_loadWeakRetained((id *)(v31 + 16));
          uint64_t v31 = *(void *)(a1 + 32);
        }
        else
        {
          BlockSize = 0;
        }
        unint64_t v34 = BlockSize + 391;
      }
      else
      {
        BOOL v32 = 0;
        unint64_t v34 = &unk_1BA179713;
      }
      if (v31)
      {
        uint64_t v2 = (uint64_t)objc_loadWeakRetained((id *)(v31 + 16));
        char v33 = 0;
      }
      else
      {
        uint64_t v2 = 0;
        char v33 = 1;
      }
    }
    else
    {
      BOOL v32 = 0;
      uint64_t v2 = 0;
      char v33 = 1;
      unint64_t v34 = &unk_1BA179713;
    }
    int v35 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 136447234;
    uint64_t v122 = "boringssl_context_evaluate_trust_async_external_block_invoke_3";
    __int16 v123 = 1024;
    int v124 = 1724;
    __int16 v125 = 2082;
    uint64_t v126 = v34;
    __int16 v127 = 2048;
    uint64_t v128 = v2;
    __int16 v129 = 1024;
    int v130 = v35;
    _os_log_impl(&dword_1BA0DE000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] Returning from external verify block with result: %{BOOL}d", buf, 0x2Cu);
    if (v33)
    {
      if (!v32) {
        goto LABEL_56;
      }
    }
    else
    {

      if (!v32)
      {
LABEL_56:
        if (!v30)
        {
LABEL_58:

          goto LABEL_59;
        }
LABEL_57:

        goto LABEL_58;
      }
    }

    if (!v30) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
LABEL_59:
  if (!*(unsigned char *)(a1 + 72)) {
    goto LABEL_110;
  }
  uint64_t v36 = (SecKeyRef *)*(id *)(a1 + 32);
  uint64_t v37 = v36;
  if (!v36 || (*((unsigned char *)v36 + 559) & 8) == 0) {
    goto LABEL_62;
  }
  BlockSize = (char *)SecKeyGetBlockSize(v36[43]);
  AlgorithmIunsigned int d = SecKeyGetAlgorithmId();
  if (AlgorithmId == 3)
  {
    if (v37[67])
    {
      id v71 = objc_loadWeakRetained((id *)v37 + 2);
      if (!v71
        || (uint64_t v72 = v71,
            uint64_t v73 = (unsigned __int8 *)objc_loadWeakRetained((id *)v37 + 2),
            uint64_t v2 = v73[475],
            v73,
            v72,
            (v2 & 1) == 0))
      {
        id v74 = objc_loadWeakRetained((id *)v37 + 2);
        if (v74)
        {
          uint64_t v75 = objc_loadWeakRetained((id *)v37 + 2);
          uint64_t v2 = (v75[475] & 1) == 0;
        }
        else
        {
          uint64_t v2 = 1;
        }

        uint64_t v38 = 4294957413;
        if (v2 && g_boringssl_log)
        {
          uint64_t v2 = (uint64_t)(id)g_boringssl_log;
          if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR)) {
            __boringssl_context_evaluate_trust_async_external_block_invoke_3_cold_5(v37 + 2, BlockSize, v2);
          }
          goto LABEL_164;
        }
        goto LABEL_63;
      }
      goto LABEL_137;
    }
  }
  else if (AlgorithmId == 1 && BlockSize < (char *)v37[66])
  {
    id v58 = objc_loadWeakRetained((id *)v37 + 2);
    if (!v58
      || (uint64_t v59 = v58,
          uint64_t v60 = (unsigned __int8 *)objc_loadWeakRetained((id *)v37 + 2),
          uint64_t v2 = v60[475],
          v60,
          v59,
          (v2 & 1) == 0))
    {
      id v61 = objc_loadWeakRetained((id *)v37 + 2);
      if (v61)
      {
        uint64_t v62 = objc_loadWeakRetained((id *)v37 + 2);
        uint64_t v2 = (v62[475] & 1) == 0;
      }
      else
      {
        uint64_t v2 = 1;
      }

      uint64_t v38 = 4294957413;
      if (v2 && g_boringssl_log)
      {
        uint64_t v2 = (uint64_t)(id)g_boringssl_log;
        if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR)) {
          __boringssl_context_evaluate_trust_async_external_block_invoke_3_cold_4(v37 + 2, BlockSize, v2);
        }
LABEL_164:

        goto LABEL_63;
      }
      goto LABEL_63;
    }
LABEL_137:
    uint64_t v38 = 4294957413;
    goto LABEL_63;
  }
  if (!CFArrayGetValueAtIndex(v37[44], 0))
  {
    BlockSize = (char *)(v37 + 2);
    id v87 = objc_loadWeakRetained((id *)v37 + 2);
    if (!v87
      || (uint64_t v88 = v87,
          unsigned long long v89 = (unsigned __int8 *)objc_loadWeakRetained((id *)v37 + 2),
          uint64_t v2 = v89[475],
          v89,
          v88,
          (v2 & 1) == 0))
    {
      id v90 = objc_loadWeakRetained((id *)v37 + 2);
      if (v90)
      {
        unint64_t v91 = objc_loadWeakRetained((id *)v37 + 2);
        uint64_t v2 = (v91[475] & 1) == 0;
      }
      else
      {
        uint64_t v2 = 1;
      }

      uint64_t v38 = 4294957412;
      if (v2 && g_boringssl_log)
      {
        uint64_t v2 = (uint64_t)(id)g_boringssl_log;
        if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR)) {
          __boringssl_context_evaluate_trust_async_external_block_invoke_3_cold_1(v37 + 2, v2);
        }
        goto LABEL_164;
      }
      goto LABEL_63;
    }
    goto LABEL_122;
  }
  uint64_t SignatureHashAlgorithm = SecCertificateGetSignatureHashAlgorithm();
  unsigned int v77 = *((_DWORD *)v37 + 136);
  BlockSize = (char *)(v37 + 2);
  id v78 = objc_loadWeakRetained((id *)v37 + 2);
  uint64_t v79 = v78;
  if (SignatureHashAlgorithm >= v77)
  {
    if (v78)
    {
      unint64_t v92 = (unsigned __int8 *)objc_loadWeakRetained((id *)v37 + 2);
      uint64_t v2 = v92[475];

      if (v2)
      {
LABEL_62:
        uint64_t v38 = 0;
        goto LABEL_63;
      }
    }
    id v93 = objc_loadWeakRetained((id *)v37 + 2);
    if (v93)
    {
      uint64_t v94 = objc_loadWeakRetained((id *)v37 + 2);
      uint64_t v2 = (v94[475] & 1) == 0;
    }
    else
    {
      uint64_t v2 = 1;
    }

    uint64_t v38 = 0;
    if (v2 && g_boringssl_log)
    {
      uint64_t v2 = (uint64_t)(id)g_boringssl_log;
      if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEBUG)) {
        __boringssl_context_evaluate_trust_async_external_block_invoke_3_cold_3(v37 + 2, v2);
      }
      uint64_t v38 = 0;
      goto LABEL_164;
    }
    goto LABEL_63;
  }
  if (v78)
  {
    unint64_t v80 = (unsigned __int8 *)objc_loadWeakRetained((id *)v37 + 2);
    uint64_t v2 = v80[475];

    if (v2)
    {
LABEL_122:
      uint64_t v38 = 4294957412;
      goto LABEL_63;
    }
  }
  id v81 = objc_loadWeakRetained((id *)v37 + 2);
  if (v81)
  {
    uint64_t v82 = objc_loadWeakRetained((id *)v37 + 2);
    uint64_t v2 = (v82[475] & 1) == 0;
  }
  else
  {
    uint64_t v2 = 1;
  }

  uint64_t v38 = 4294957412;
  if (v2 && g_boringssl_log)
  {
    uint64_t v2 = (uint64_t)(id)g_boringssl_log;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR)) {
      __boringssl_context_evaluate_trust_async_external_block_invoke_3_cold_2(v37 + 2, SignatureHashAlgorithm, v2);
    }
    goto LABEL_164;
  }
LABEL_63:

  uint64_t v39 = *(void *)(a1 + 32);
  if (v38 && (*(unsigned char *)(v39 + 559) & 8) != 0)
  {
    id v40 = objc_loadWeakRetained((id *)(v39 + 16));
    if (v40)
    {
      uint64_t v41 = v40;
      uint64_t v42 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
      char v43 = v42[475];

      if (v43) {
        goto LABEL_109;
      }
    }
    uint64_t v44 = *(void *)(a1 + 32);
    if (v44)
    {
      id v45 = objc_loadWeakRetained((id *)(v44 + 16));
      if (v45)
      {
        unint64_t v46 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
        uint64_t v47 = (v46[475] & 1) == 0;
      }
      else
      {
        uint64_t v47 = 1;
      }
    }
    else
    {
      uint64_t v47 = 1;
    }
    if (!v47 || !g_boringssl_log) {
      goto LABEL_109;
    }
    unint64_t v83 = (id)g_boringssl_log;
    if (!os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
    {
LABEL_108:

LABEL_109:
      uint64_t v84 = *(void *)(*(void *)(a1 + 32) + 280);
      id v85 = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 16));
      (*(void (**)(uint64_t, id, void, uint64_t))(v84 + 16))(v84, v85, 0, v38);

      goto LABEL_110;
    }
    uint64_t v99 = *(void *)(a1 + 32);
    if (v99)
    {
      uint64_t v47 = (uint64_t)objc_loadWeakRetained((id *)(v99 + 16));
      uint64_t v114 = *(void *)(a1 + 32);
      if (v47)
      {
        BOOL v100 = v114 != 0;
        if (v114)
        {
          uint64_t v2 = (uint64_t)objc_loadWeakRetained((id *)(v114 + 16));
          uint64_t v114 = *(void *)(a1 + 32);
        }
        else
        {
          uint64_t v2 = 0;
        }
        unint64_t v103 = (void *)(v2 + 391);
      }
      else
      {
        BOOL v100 = 0;
        unint64_t v103 = &unk_1BA179713;
      }
      if (v114)
      {
        id v101 = objc_loadWeakRetained((id *)(v114 + 16));
        char v102 = 0;
      }
      else
      {
        id v101 = 0;
        char v102 = 1;
      }
    }
    else
    {
      BOOL v100 = 0;
      id v101 = 0;
      char v102 = 1;
      unint64_t v103 = &unk_1BA179713;
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v122 = "boringssl_context_evaluate_trust_async_external_block_invoke";
    __int16 v123 = 1024;
    int v124 = 1736;
    __int16 v125 = 2082;
    uint64_t v126 = v103;
    __int16 v127 = 2048;
    uint64_t v128 = (uint64_t)v101;
    _os_log_debug_impl(&dword_1BA0DE000, v83, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Generating ATS violation error", buf, 0x26u);
    if (v102)
    {
      if (!v100) {
        goto LABEL_190;
      }
    }
    else
    {

      if (!v100)
      {
LABEL_190:
        if (!v99) {
          goto LABEL_108;
        }
        goto LABEL_194;
      }
    }

    if (!v99) {
      goto LABEL_108;
    }
LABEL_194:

    goto LABEL_108;
  }
  uint64_t v48 = *(void *)(a1 + 56);
  if ((*(unsigned char *)(v48 + 559) & 0x18) != 8)
  {
    id v63 = objc_loadWeakRetained((id *)(v39 + 16));
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v65 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
      char v66 = v65[475];

      if (v66) {
        goto LABEL_136;
      }
    }
    uint64_t v67 = *(void *)(a1 + 32);
    if (v67)
    {
      id v68 = objc_loadWeakRetained((id *)(v67 + 16));
      if (v68)
      {
        uint64_t v69 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
        uint64_t v70 = (v69[475] & 1) == 0;
      }
      else
      {
        uint64_t v70 = 1;
      }
    }
    else
    {
      uint64_t v70 = 1;
    }
    if (!v70 || !g_boringssl_log) {
      goto LABEL_136;
    }
    uint64_t v98 = (id)g_boringssl_log;
    if (!os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
    {
LABEL_135:

LABEL_136:
      *(unsigned char *)(*(void *)(a1 + 56) + 558) &= ~8u;
      unint64_t v86 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
      goto LABEL_111;
    }
    uint64_t v109 = *(void *)(a1 + 32);
    if (v109)
    {
      uint64_t v70 = (uint64_t)objc_loadWeakRetained((id *)(v109 + 16));
      uint64_t v116 = *(void *)(a1 + 32);
      if (v70)
      {
        BOOL v110 = v116 != 0;
        if (v116)
        {
          BlockSize = (char *)objc_loadWeakRetained((id *)(v116 + 16));
          uint64_t v116 = *(void *)(a1 + 32);
        }
        else
        {
          BlockSize = 0;
        }
        uint64_t v113 = BlockSize + 391;
      }
      else
      {
        BOOL v110 = 0;
        uint64_t v113 = &unk_1BA179713;
      }
      if (v116)
      {
        id v111 = objc_loadWeakRetained((id *)(v116 + 16));
        char v112 = 0;
      }
      else
      {
        id v111 = 0;
        char v112 = 1;
      }
    }
    else
    {
      BOOL v110 = 0;
      id v111 = 0;
      char v112 = 1;
      uint64_t v113 = &unk_1BA179713;
    }
    int v117 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 136447234;
    uint64_t v122 = "boringssl_context_evaluate_trust_async_external_block_invoke_2";
    __int16 v123 = 1024;
    int v124 = 1751;
    __int16 v125 = 2082;
    uint64_t v126 = v113;
    __int16 v127 = 2048;
    uint64_t v128 = (uint64_t)v111;
    __int16 v129 = 1024;
    int v130 = v117;
    _os_log_debug_impl(&dword_1BA0DE000, v98, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Setting verify result to %{BOOL}d", buf, 0x2Cu);
    if (v112)
    {
      if (!v110) {
        goto LABEL_214;
      }
    }
    else
    {

      if (!v110)
      {
LABEL_214:
        if (!v109) {
          goto LABEL_135;
        }
        goto LABEL_218;
      }
    }

    if (!v109) {
      goto LABEL_135;
    }
LABEL_218:

    goto LABEL_135;
  }
  id v49 = objc_loadWeakRetained((id *)(v48 + 16));
  if (v49)
  {
    unint64_t v50 = v49;
    unsigned long long v51 = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 16));
    char v52 = v51[475];

    if (v52) {
      goto LABEL_129;
    }
  }
  uint64_t v53 = *(void *)(a1 + 56);
  if (v53)
  {
    id v54 = objc_loadWeakRetained((id *)(v53 + 16));
    if (v54)
    {
      BOOL v55 = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 16));
      uint64_t v56 = (v55[475] & 1) == 0;
    }
    else
    {
      uint64_t v56 = 1;
    }
  }
  else
  {
    uint64_t v56 = 1;
  }
  if (!v56 || !g_boringssl_log) {
    goto LABEL_129;
  }
  uint64_t v95 = (id)g_boringssl_log;
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v104 = *(void *)(a1 + 56);
    if (v104)
    {
      uint64_t v56 = (uint64_t)objc_loadWeakRetained((id *)(v104 + 16));
      uint64_t v115 = *(void *)(a1 + 56);
      if (v56)
      {
        BOOL v105 = v115 != 0;
        if (v115)
        {
          BlockSize = (char *)objc_loadWeakRetained((id *)(v115 + 16));
          uint64_t v115 = *(void *)(a1 + 56);
        }
        else
        {
          BlockSize = 0;
        }
        uint64_t v108 = BlockSize + 391;
      }
      else
      {
        BOOL v105 = 0;
        uint64_t v108 = &unk_1BA179713;
      }
      if (v115)
      {
        id v106 = objc_loadWeakRetained((id *)(v115 + 16));
        char v107 = 0;
      }
      else
      {
        id v106 = 0;
        char v107 = 1;
      }
    }
    else
    {
      BOOL v105 = 0;
      id v106 = 0;
      char v107 = 1;
      uint64_t v108 = &unk_1BA179713;
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v122 = "boringssl_context_evaluate_trust_async_external_block_invoke";
    __int16 v123 = 1024;
    int v124 = 1745;
    __int16 v125 = 2082;
    uint64_t v126 = v108;
    __int16 v127 = 2048;
    uint64_t v128 = (uint64_t)v106;
    _os_log_debug_impl(&dword_1BA0DE000, v95, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Performing local ATS trust evaluation", buf, 0x26u);
    if (v107)
    {
      if (!v105) {
        goto LABEL_202;
      }
    }
    else
    {

      if (!v105)
      {
LABEL_202:
        if (!v104) {
          goto LABEL_128;
        }
        goto LABEL_206;
      }
    }

    if (!v104) {
      goto LABEL_128;
    }
LABEL_206:
  }
LABEL_128:

LABEL_129:
  uint64_t v96 = *(void *)(a1 + 64);
  v118[0] = MEMORY[0x1E4F143A8];
  v118[1] = 3221225472;
  v118[2] = __boringssl_context_evaluate_trust_async_external_block_invoke_204;
  v118[3] = &unk_1E61FD6C0;
  uint64_t v97 = *(void *)(a1 + 48);
  uint64_t v120 = *(void *)(a1 + 56);
  id v119 = *(id *)(a1 + 40);
  boringssl_context_evaluate_trust_async_internal(v97, v96, v118);
}

void __boringssl_context_certificate_verify_callback_block_invoke(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    if (*(_DWORD *)v2 == -1252936367)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3)
      {
        *(unsigned char *)(v3 + 32std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = a2;
        *(unsigned char *)(v3 + 558) |= 4u;
      }
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  nw_protocol_boringssl_handshake_negotiate(WeakRetained);
}

void nw_protocol_boringssl_input_available(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      if ((*(unsigned char *)(v2 + 475) & 1) == 0)
      {
        if (datapath_logging_enabled)
        {
          if (g_boringssl_log)
          {
            uint64_t v7 = a2;
            uint64_t v9 = a1;
            BOOL v4 = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG);
            a2 = v7;
            a1 = v9;
            if (v4)
            {
              nw_protocol_boringssl_input_available_cold_3();
              a2 = v7;
              a1 = v9;
            }
          }
        }
      }
      if (*(void *)(a1 + 48))
      {
        if ((*(unsigned char *)(v2 + 390) & 2) != 0)
        {
          if ((*(unsigned char *)(v2 + 475) & 1) == 0)
          {
            if (datapath_logging_enabled)
            {
              if (g_boringssl_log)
              {
                uint64_t v6 = a2;
                uint64_t v8 = a1;
                BOOL v5 = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG);
                a2 = v6;
                a1 = v8;
                if (v5)
                {
                  nw_protocol_boringssl_input_available_cold_2();
                  goto LABEL_10;
                }
              }
            }
          }
        }
        else if ((*(unsigned char *)(v2 + 475) & 1) == 0)
        {
          if (g_boringssl_log)
          {
            uint64_t v6 = a2;
            uint64_t v8 = a1;
            BOOL v3 = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG);
            a2 = v6;
            a1 = v8;
            if (v3)
            {
              nw_protocol_boringssl_input_available_cold_1();
LABEL_10:
              a2 = v6;
              a1 = v8;
            }
          }
        }
        if (*(void *)(v2 + 280) == a2)
        {
          if (!a2) {
            goto LABEL_24;
          }
        }
        else if (*(void *)(v2 + 288) == a2)
        {
          if (!a2) {
            goto LABEL_24;
          }
        }
        else
        {
          if (*(void *)(v2 + 296) != a2)
          {
            if (*(void *)(v2 + 304) != a2 || !a2) {
              goto LABEL_24;
            }
            goto LABEL_21;
          }
          if (!a2)
          {
LABEL_24:
            nw_boringssl_read(a1);
            return;
          }
        }
LABEL_21:
        int v10 = 0;
        if (nw_protocol_boringssl_read_frames((void *)v2, a2, &v10))
        {
          nw_frame_array_foreach();
          nw_protocol_boringssl_handshake_negotiate((void *)v2);
        }
      }
    }
  }
}

void nw_protocol_boringssl_output_available(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[5];
    if (v2)
    {
      if ((*(unsigned char *)(v2 + 475) & 1) == 0
        && datapath_logging_enabled
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_output_available_cold_5();
      }
      if (a1[4])
      {
        if ((*(unsigned char *)(v2 + 390) & 2) != 0)
        {
          if ((*(unsigned char *)(v2 + 475) & 1) == 0
            && datapath_logging_enabled
            && g_boringssl_log
            && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
          {
            nw_protocol_boringssl_output_available_cold_4();
          }
        }
        else if ((*(unsigned char *)(v2 + 475) & 1) == 0 {
               && g_boringssl_log
        }
               && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
        {
          nw_protocol_boringssl_output_available_cold_3();
        }
        if ((*(unsigned char *)(v2 + 388) & 0x20) != 0
          && (nw_protocol_boringssl_write_frames((void *)v2), (*(unsigned char *)(v2 + 388) & 0x20) != 0))
        {
          if ((*(unsigned char *)(v2 + 475) & 1) == 0
            && datapath_logging_enabled
            && g_boringssl_log
            && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
          {
            nw_protocol_boringssl_output_available_cold_2();
          }
        }
        else
        {
          int state = boringssl_session_get_state(*(void *)(v2 + 336));
          if (state == 1)
          {
            nw_protocol_boringssl_handshake_negotiate((void *)v2);
          }
          else if (state == 2)
          {
            if ((*(unsigned char *)(v2 + 475) & 1) == 0
              && datapath_logging_enabled
              && g_boringssl_log
              && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
            {
              nw_protocol_boringssl_output_available_cold_1();
            }
            (*(void (**)(void))(*(void *)(a1[6] + 24) + 72))();
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_boringssl_handshake_negotiate(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  id v2 = v1;
  if (!v1 || (v1[475] & 1) == 0)
  {
    if (datapath_logging_enabled
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_handshake_negotiate_cold_2();
    }
    if (!v2) {
      goto LABEL_16;
    }
  }
  if (!*((void *)v2 + 42) || (BOOL v3 = (uint64_t (*)(void))*((void *)v2 + 12)) == 0)
  {
LABEL_16:
    uint64_t v4 = 0xFFFFFFFFLL;
    goto LABEL_30;
  }
  if ((*((unsigned char *)v2 + 389) & 4) != 0)
  {
    uint64_t v4 = 0;
    goto LABEL_30;
  }
  *((unsigned char *)v2 + 389) |= 4u;
  uint64_t v4 = v3();
  *((unsigned char *)v2 + 389) &= ~4u;
  BOOL v5 = v2;
  if ((v5[475] & 1) == 0
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_handshake_negotiate_cold_1();
  }
  uint64_t v6 = *((void *)v2 + 42);
  if (v6)
  {
    if (v4)
    {
      current_handshake_int state = boringssl_session_get_current_handshake_state(v6);
      if (current_handshake_state)
      {
        int v8 = current_handshake_state;
        handshake_state_description = boringssl_helper_get_handshake_state_description(current_handshake_state);
        if ((v5[475] & 1) == 0)
        {
          uint64_t v13 = g_boringssl_log;
          if (g_boringssl_log)
          {
            id v14 = handshake_state_description;
            if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
            {
              int v15 = 136447490;
              unint64_t v16 = "nw_protocol_boringssl_handshake_negotiate_proceed";
              __int16 v17 = 1024;
              int v18 = 780;
              __int16 v19 = 2082;
              unint64_t v20 = v5 + 391;
              __int16 v21 = 2048;
              uint64_t v22 = v5;
              __int16 v23 = 1024;
              int v24 = v8;
              __int16 v25 = 2080;
              id v26 = v14;
              _os_log_error_impl(&dword_1BA0DE000, v13, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] handshake failed at state %d: %s", (uint8_t *)&v15, 0x36u);
            }
          }
        }
      }
      ERR_print_errors_cb((int (__cdecl *)(const char *, size_t, void *))nw_protocol_error_print, *((void **)v2 + 42));
      if (*((void *)v5 + 40))
      {
        nw_queue_cancel_source();
        *((void *)v5 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0;
      }
      nw_protocol_boringssl_internal_error(v5, -9858);
      nw_protocol_boringssl_disconnect((uint64_t)(v5 + 8));
      goto LABEL_27;
    }
    if (boringssl_session_get_state(v6) == 2) {
      goto LABEL_26;
    }
    if (boringssl_session_in_false_start(*((void *)v2 + 42)))
    {
      if (v5[475]) {
        goto LABEL_26;
      }
      int v10 = g_boringssl_log;
      if (!g_boringssl_log || !os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_INFO)) {
        goto LABEL_26;
      }
      int v15 = 136446978;
      unint64_t v16 = "nw_protocol_boringssl_handshake_negotiate_proceed";
      __int16 v17 = 1024;
      int v18 = 768;
      __int16 v19 = 2082;
      unint64_t v20 = v5 + 391;
      __int16 v21 = 2048;
      uint64_t v22 = v5;
      unint64_t v11 = "%{public}s(%d) %{public}s[%p] Signaling premature connect due to False Start";
LABEL_44:
      _os_log_impl(&dword_1BA0DE000, v10, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v15, 0x26u);
LABEL_26:
      nw_protocol_boringssl_signal_connected(v5);
      nw_boringssl_read(v5 + 8);
      goto LABEL_27;
    }
    if (boringssl_session_in_early_data(*((void *)v2 + 42)))
    {
      if (v5[475]) {
        goto LABEL_26;
      }
      int v10 = g_boringssl_log;
      if (!g_boringssl_log || !os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_INFO)) {
        goto LABEL_26;
      }
      int v15 = 136446978;
      unint64_t v16 = "nw_protocol_boringssl_handshake_negotiate_proceed";
      __int16 v17 = 1024;
      int v18 = 772;
      __int16 v19 = 2082;
      unint64_t v20 = v5 + 391;
      __int16 v21 = 2048;
      uint64_t v22 = v5;
      unint64_t v11 = "%{public}s(%d) %{public}s[%p] Signaling premature connect in early data mode";
      goto LABEL_44;
    }
  }
LABEL_27:

  if (boringssl_session_get_state(*((void *)v2 + 42)) == 2) {
    *((unsigned char *)v2 + 389) &= ~2u;
  }
  nw_boringssl_read(v5 + 8);
LABEL_30:

  return v4;
}

#error "1BA10D314: call analysis failed (funcsize=105)"

void boringssl_context_start_handshake_timer(uint64_t a1)
{
  if (*(_DWORD *)a1 == -1252936367)
  {
    uint64_t v1 = *(unsigned char **)(a1 + 8);
    if (v1)
    {
      if ((v1[556] & 0x20) != 0)
      {
        id v2 = v1;
        id WeakRetained = objc_loadWeakRetained(v2 + 2);
        uint64_t v4 = WeakRetained[40];

        if (v4)
        {
          id v5 = objc_loadWeakRetained(v2 + 2);
          nw_queue_cancel_source();

          uint64_t v6 = objc_loadWeakRetained(v2 + 2);
          v6[40] = 0;
        }
        __int16 v23 = v2;
        uint64_t v7 = v23;
        uint64_t source = nw_queue_context_create_source();
        uint64_t v9 = objc_loadWeakRetained(v7 + 2);
        v9[40] = source;

        int v10 = objc_loadWeakRetained(v7 + 2);
        uint64_t v11 = v10[40];

        if (v11)
        {
          char v12 = *((unsigned char *)v7 + 556);
          id v13 = objc_loadWeakRetained(v7 + 2);
          if ((v12 & 0x10) != 0) {
            int64_t v14 = 10000000000;
          }
          else {
            int64_t v14 = 2000000000;
          }
          dispatch_time(0, v14);
          nw_queue_set_timer_values();

          int v15 = objc_loadWeakRetained(v7 + 2);
          nw_queue_activate_source();
        }
        else
        {
          id v16 = objc_loadWeakRetained(v7 + 2);
          if (v16)
          {
            __int16 v17 = v16;
            int v18 = objc_loadWeakRetained(v7 + 2);
            char v19 = v18[475];

            if (v19) {
              goto LABEL_12;
            }
          }
          id v20 = objc_loadWeakRetained(v7 + 2);
          if (v20)
          {
            __int16 v21 = objc_loadWeakRetained(v7 + 2);
            BOOL v22 = (v21[475] & 1) == 0;
          }
          else
          {
            BOOL v22 = 1;
          }

          if (!v22 || !g_boringssl_log) {
            goto LABEL_12;
          }
          int v15 = (id)g_boringssl_log;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
            boringssl_context_start_handshake_timer_cold_1(v7, v15);
          }
        }

LABEL_12:
      }
    }
  }
}

uint64_t boringssl_session_in_false_start(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0)
    {
      uint64_t result = *(void *)(v1 + 400);
      if (result) {
        return SSL_in_false_start(result) != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SSL_in_false_start(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 280);
  if (v1) {
    return (*(_DWORD *)(v1 + 1584) >> 9) & 1;
  }
  else {
    return 0;
  }
}

uint64_t boringssl_session_handshake_incomplete(SSL *a1, int a2, char a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a1->version != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  methounsigned int d = a1->method;
  if (!method) {
    return 0xFFFFFFFFLL;
  }
  unsigned int error = SSL_get_error((const SSL *)method[1].num_ciphers, a2);
  unsigned int v7 = error;
  if (error == 2)
  {
    int v8 = &OBJC_IVAR___boringssl_concrete_boringssl_ctx_read_stalls;
  }
  else
  {
    if (error != 3) {
      goto LABEL_8;
    }
    int v8 = &OBJC_IVAR___boringssl_concrete_boringssl_ctx_write_stalls;
  }
  ++*(void *)((char *)&method->version + *v8);
LABEL_8:
  ssl_error_code_description = boringssl_helper_get_ssl_error_code_description(error);
  if (boringssl_helper_error_is_fatal(v7))
  {
    id WeakRetained = objc_loadWeakRetained((id *)&method->ssl_clear);
    if (!WeakRetained
      || (uint64_t v11 = WeakRetained,
          char v12 = objc_loadWeakRetained((id *)&method->ssl_clear),
          char v13 = v12[475],
          v12,
          v11,
          (v13 & 1) == 0))
    {
      id v14 = objc_loadWeakRetained((id *)&method->ssl_clear);
      if (v14)
      {
        int v15 = objc_loadWeakRetained((id *)&method->ssl_clear);
        BOOL v16 = (v15[475] & 1) == 0;
      }
      else
      {
        BOOL v16 = 1;
      }

      if (v16)
      {
        if (g_boringssl_log)
        {
          __int16 v23 = (id)g_boringssl_log;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            boringssl_session_handshake_incomplete_cold_1(method, ssl_error_code_description, v23);
          }
        }
      }
    }
    ERR_print_errors_cb((int (__cdecl *)(const char *, size_t, void *))boringssl_session_handshake_error_print, a1);
    return 0xFFFFFFFFLL;
  }
  if (v7 == 15)
  {
    if (a3) {
      return 0;
    }
    SSL_reset_early_data_reject((uint64_t)method[1].num_ciphers);
  }
  __int16 v17 = objc_loadWeakRetained((id *)&method->ssl_clear);
  if (!v17
    || (int v18 = v17,
        char v19 = objc_loadWeakRetained((id *)&method->ssl_clear),
        char v20 = v19[475],
        v19,
        v18,
        (v20 & 1) == 0))
  {
    int v18 = objc_loadWeakRetained((id *)&method->ssl_clear);
    if (v18)
    {
      __int16 v21 = objc_loadWeakRetained((id *)&method->ssl_clear);
      BOOL v22 = (v21[475] & 1) == 0;
    }
    else
    {
      BOOL v22 = 1;
    }

    if (v22)
    {
      if (g_boringssl_log)
      {
        int v18 = (id)g_boringssl_log;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          id v25 = objc_loadWeakRetained((id *)&method->ssl_clear);
          if (v25)
          {
            uint64_t v39 = (char *)objc_loadWeakRetained((id *)&method->ssl_clear);
            id v26 = v39 + 391;
          }
          else
          {
            id v26 = &unk_1BA179713;
          }
          id v27 = objc_loadWeakRetained((id *)&method->ssl_clear);
          *(_DWORD *)buf = 136447490;
          uint64_t v41 = "boringssl_session_handshake_incomplete";
          __int16 v42 = 1024;
          int v43 = 254;
          __int16 v44 = 2082;
          id v45 = v26;
          __int16 v46 = 2048;
          id v47 = v27;
          __int16 v48 = 2082;
          id v49 = ssl_error_code_description;
          __int16 v50 = 1024;
          unsigned int v51 = v7;
          _os_log_impl(&dword_1BA0DE000, v18, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Handshake incomplete: %{public}s [%d]", buf, 0x36u);

          if (v25) {
        }
          }
      }
    }
  }
  boringssl_context_update_encryption_level((uint64_t)a1);
  if (v7 != 15) {
    return 0;
  }
  id v28 = objc_loadWeakRetained((id *)&method->ssl_clear);
  if (!v28
    || (uint64_t v29 = v28,
        uint64_t v30 = objc_loadWeakRetained((id *)&method->ssl_clear),
        char v31 = v30[475],
        v30,
        v29,
        (v31 & 1) == 0))
  {
    id v32 = objc_loadWeakRetained((id *)&method->ssl_clear);
    if (v32)
    {
      char v33 = objc_loadWeakRetained((id *)&method->ssl_clear);
      BOOL v34 = (v33[475] & 1) == 0;
    }
    else
    {
      BOOL v34 = 1;
    }

    if (v34)
    {
      if (g_boringssl_log)
      {
        int v35 = (id)g_boringssl_log;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          id v36 = objc_loadWeakRetained((id *)&method->ssl_clear);
          if (v36)
          {
            int v18 = objc_loadWeakRetained((id *)&method->ssl_clear);
            uint64_t v37 = (char *)&v18[48].isa + 7;
          }
          else
          {
            uint64_t v37 = &unk_1BA179713;
          }
          id v38 = objc_loadWeakRetained((id *)&method->ssl_clear);
          *(_DWORD *)buf = 136446978;
          uint64_t v41 = "boringssl_session_handshake_incomplete";
          __int16 v42 = 1024;
          int v43 = 258;
          __int16 v44 = 2082;
          id v45 = v37;
          __int16 v46 = 2048;
          id v47 = v38;
          _os_log_impl(&dword_1BA0DE000, v35, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Restarting handshake", buf, 0x26u);

          if (v36) {
        }
          }
      }
    }
  }
  return boringssl_session_handshake_continue_inner(a1, 1);
}

uint64_t boringssl_context_update_encryption_level(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v1 = *(void **)(a1 + 8);
  if (!v1) {
    return 0;
  }
  id v5 = v1;
  id v2 = v5;
  uint64_t v3 = nw_protocol_options_access_handle();

  return v3;
}

const char *boringssl_helper_get_ssl_error_code_description(unsigned int a1)
{
  if (a1 > 0x12) {
    return "unknown error";
  }
  else {
    return off_1E61F39F0[a1];
  }
}

uint64_t boringssl_helper_error_is_fatal(unsigned int a1)
{
  return (a1 > 0x10) | (0x5FC3u >> a1) & 1;
}

void __boringssl_metrics_log_metric_block_invoke()
{
  if ((SecTrustReportNetworkingAnalytics() & 1) == 0
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
  {
    __boringssl_metrics_log_metric_block_invoke_cold_1();
  }
}

uint64_t EVP_AEAD_CTX_seal_scatter(uint64_t *a1, char *a2, char *a3, void *a4, size_t a5, uint64_t a6, uint64_t a7, char *a8, size_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v15 = (unint64_t)&a8[a9];
  BOOL v16 = &a2[a9];
  if (a8 != a2 && (v15 > (unint64_t)a2 ? (BOOL v17 = v16 > a8) : (BOOL v17 = 0), v17)
    || &a3[a5] > a2 && v16 > a3
    || &a3[a5] > a8 && v15 > (unint64_t)a3)
  {
    int v18 = 115;
    int v19 = 162;
LABEL_11:
    ERR_put_error(30, 0, v18, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/aead.c", v19);
    goto LABEL_12;
  }
  uint64_t v21 = *a1;
  if (a11 && !*(_DWORD *)(v21 + 4))
  {
    int v18 = 112;
    int v19 = 167;
    goto LABEL_11;
  }
  if ((*(unsigned int (**)(uint64_t *, char *, char *, void *, size_t))(v21 + 40))(a1, a2, a3, a4, a5)) {
    return 1;
  }
LABEL_12:
  if (a9) {
    bzero(a2, a9);
  }
  if (a5) {
    bzero(a3, a5);
  }
  uint64_t result = 0;
  *a4 = 0;
  return result;
}

BOOL aead_aes_gcm_tls13_seal_scatter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a7 != 12)
  {
    int v15 = 121;
    int v16 = 478;
LABEL_9:
    ERR_put_error(30, 0, v15, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_aes.m", v16);
    return 0;
  }
  unint64_t v13 = bswap64(*(void *)(a6 + 4));
  if (*(unsigned char *)(a1 + 64))
  {
    *(void *)(a1 + 56) = v13;
    *(unsigned char *)(a1 + 64) = 0;
    unint64_t v14 = v13;
  }
  else
  {
    unint64_t v14 = *(void *)(a1 + 56);
  }
  unint64_t v17 = v14 ^ v13;
  if (v17 == -1 || v17 < *(void *)(a1 + 48))
  {
    int v15 = 125;
    int v16 = 498;
    goto LABEL_9;
  }
  *(void *)(a1 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v17 + 1;

  return aead_aes_gcm_seal_scatter(a1, a2, a3, a4, a5, a6, 12, a8, a9, a10, a11, a12, a13);
}

BOOL aead_aes_gcm_seal_scatter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a7)
  {
    int v15 = 111;
    int v16 = 291;
    goto LABEL_15;
  }
  unint64_t v14 = *(unsigned __int8 *)(a1 + 24) + a11;
  if (v14 < *(unsigned __int8 *)(a1 + 576))
  {
    int v15 = 117;
    int v16 = 295;
LABEL_15:
    ERR_put_error(30, 0, v15, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_aes.m", v16);
    return 0;
  }
  if (v14 > a5)
  {
    int v15 = 103;
    int v16 = 299;
    goto LABEL_15;
  }
  if (!*(void *)(a1 + 8) || !*(void *)(a1 + 16))
  {
    int v15 = 112;
    int v16 = 303;
    goto LABEL_15;
  }
  int v18 = ccgcm_reset();
  if (ccgcm_set_iv() | v18)
  {
    if (g_boringssl_log)
    {
      if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
        aead_aes_gcm_seal_scatter_cold_6();
      }
    }
    int v15 = 107;
    int v16 = 311;
    goto LABEL_15;
  }
  if (a13 && ccgcm_aad())
  {
    if (!g_boringssl_log) {
      return 0;
    }
    BOOL result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      aead_aes_gcm_seal_scatter_cold_5();
      return 0;
    }
  }
  else if (ccgcm_update())
  {
    if (!g_boringssl_log) {
      return 0;
    }
    BOOL result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      aead_aes_gcm_seal_scatter_cold_4();
      return 0;
    }
  }
  else if (a11 && ccgcm_update())
  {
    if (!g_boringssl_log) {
      return 0;
    }
    BOOL result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      aead_aes_gcm_seal_scatter_cold_3();
      return 0;
    }
  }
  else
  {
    if (ccgcm_finalize())
    {
      if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
        aead_aes_gcm_seal_scatter_cold_2();
      }
      int v15 = 123;
      int v16 = 340;
      goto LABEL_15;
    }
    *a4 = *(unsigned __int8 *)(a1 + 576) + a11;
    if (!ccgcm_reset()) {
      return 1;
    }
    if (!g_boringssl_log) {
      return 0;
    }
    BOOL result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      aead_aes_gcm_seal_scatter_cold_1();
      return 0;
    }
  }
  return result;
}

BOOL __boringssl_context_update_encryption_level_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a2 && *(void *)(a2 + 160) && *(void *)(a2 + 168))
  {
    uint64_t v4 = (void *)MEMORY[0x1BA9E5C70]();
    int level = SSL_quic_read_level(*(void *)(*(void *)(a1 + 32) + 400));
    uint64_t v6 = *(void *)(a1 + 32);
    if (level != *(_DWORD *)(v6 + 548))
    {
      int v7 = level;
      id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
      if (!WeakRetained
        || (uint64_t v9 = WeakRetained,
            int v10 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16)),
            char v11 = v10[475],
            v10,
            v9,
            (v11 & 1) == 0))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        if (v12)
        {
          id v13 = objc_loadWeakRetained((id *)(v12 + 16));
          if (v13)
          {
            unint64_t v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
            BOOL v15 = (v14[475] & 1) == 0;
          }
          else
          {
            BOOL v15 = 1;
          }
        }
        else
        {
          BOOL v15 = 1;
        }
        if (v15 && g_boringssl_log)
        {
          int v16 = (id)g_boringssl_log;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            id v32 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
            uint64_t v33 = *(void *)(a1 + 32);
            id v49 = v32;
            if (v32)
            {
              BOOL v38 = v33 != 0;
              if (v33)
              {
                uint64_t v39 = (char *)objc_loadWeakRetained((id *)(v33 + 16));
                uint64_t v33 = *(void *)(a1 + 32);
              }
              else
              {
                uint64_t v39 = 0;
              }
              BOOL v47 = v38;
              __int16 v46 = v39;
              BOOL v34 = v39 + 391;
            }
            else
            {
              BOOL v47 = 0;
              BOOL v34 = &unk_1BA179713;
            }
            id v42 = objc_loadWeakRetained((id *)(v33 + 16));
            int v43 = *(_DWORD *)(*(void *)(a1 + 32) + 548);
            *(_DWORD *)buf = 136447490;
            id v58 = "boringssl_context_update_encryption_level_block_invoke";
            __int16 v59 = 1024;
            int v60 = 2454;
            __int16 v61 = 2082;
            uint64_t v62 = v34;
            __int16 v63 = 2048;
            id v64 = v42;
            __int16 v65 = 1024;
            int v66 = v43;
            __int16 v67 = 1024;
            int v68 = v7;
            _os_log_debug_impl(&dword_1BA0DE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] encryption_read_level %u -> %u", buf, 0x32u);

            if (v47) {
          }
            }
        }
      }
      *(_DWORD *)(*(void *)(a1 + 32) + 54EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v7;
      unint64_t v17 = *(NSObject **)(a2 + 168);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __boringssl_context_update_encryption_level_block_invoke_214;
      block[3] = &unk_1E61FD800;
      id v56 = v4;
      id v55 = *(id *)(a1 + 32);
      dispatch_async(v17, block);

      uint64_t v6 = *(void *)(a1 + 32);
    }
    int v18 = SSL_quic_write_level(*(void *)(v6 + 400));
    uint64_t v19 = *(void *)(a1 + 32);
    if (v18 != *(_DWORD *)(v19 + 552))
    {
      int v20 = v18;
      id v21 = objc_loadWeakRetained((id *)(v19 + 16));
      if (!v21
        || (BOOL v22 = v21,
            __int16 v23 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16)),
            char v24 = v23[475],
            v23,
            v22,
            (v24 & 1) == 0))
      {
        uint64_t v25 = *(void *)(a1 + 32);
        if (v25)
        {
          id v26 = objc_loadWeakRetained((id *)(v25 + 16));
          if (v26)
          {
            id v27 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
            BOOL v28 = (v27[475] & 1) == 0;
          }
          else
          {
            BOOL v28 = 1;
          }
        }
        else
        {
          BOOL v28 = 1;
        }
        if (v28 && g_boringssl_log)
        {
          uint64_t v29 = (id)g_boringssl_log;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            id v35 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
            uint64_t v36 = *(void *)(a1 + 32);
            __int16 v50 = v35;
            if (v35)
            {
              BOOL v40 = v36 != 0;
              if (v36)
              {
                uint64_t v41 = (char *)objc_loadWeakRetained((id *)(v36 + 16));
                uint64_t v36 = *(void *)(a1 + 32);
              }
              else
              {
                uint64_t v41 = 0;
              }
              BOOL v48 = v40;
              __int16 v46 = v41;
              uint64_t v37 = v41 + 391;
            }
            else
            {
              BOOL v48 = 0;
              uint64_t v37 = &unk_1BA179713;
            }
            id v44 = objc_loadWeakRetained((id *)(v36 + 16));
            int v45 = *(_DWORD *)(*(void *)(a1 + 32) + 552);
            *(_DWORD *)buf = 136447490;
            id v58 = "boringssl_context_update_encryption_level_block_invoke_2";
            __int16 v59 = 1024;
            int v60 = 2463;
            __int16 v61 = 2082;
            uint64_t v62 = v37;
            __int16 v63 = 2048;
            id v64 = v44;
            __int16 v65 = 1024;
            int v66 = v45;
            __int16 v67 = 1024;
            int v68 = v20;
            _os_log_debug_impl(&dword_1BA0DE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] encryption_write_level %u -> %u", buf, 0x32u);

            if (v48) {
          }
            }
        }
      }
      *(_DWORD *)(*(void *)(a1 + 32) + 552) = v20;
      uint64_t v30 = *(NSObject **)(a2 + 168);
      v51[0] = MEMORY[0x1E4F143A8];
      v51[1] = 3221225472;
      v51[2] = __boringssl_context_update_encryption_level_block_invoke_216;
      v51[3] = &unk_1E61FD800;
      id v53 = v4;
      id v52 = *(id *)(a1 + 32);
      dispatch_async(v30, v51);
    }
  }
  return a2 != 0;
}

uint64_t SSL_quic_write_level(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 204);
}

uint64_t SSL_quic_read_level(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 200);
}

uint64_t nw_protocol_boringssl_copy_info(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return 0;
  }
  if ((*(unsigned char *)(v2 + 475) & 1) == 0)
  {
    if (datapath_logging_enabled)
    {
      if (g_boringssl_log)
      {
        uint64_t v19 = a1;
        int v16 = a2;
        BOOL v17 = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG);
        a2 = v16;
        BOOL v18 = v17;
        a1 = v19;
        if (v18)
        {
          nw_protocol_boringssl_copy_info_cold_1();
          a1 = v19;
          a2 = v16;
        }
      }
    }
  }
  if (a2 == 254)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7 && (uint64_t v8 = *(void *)(v7 + 24)) != 0 && (v9 = *(uint64_t (**)(void))(v8 + 224)) != 0) {
      uint64_t v6 = v9();
    }
    else {
      uint64_t v6 = 0;
    }
    boringssl_session_get_handshake_time_ms(*(void *)(v2 + 336));
    boringssl_session_get_handshake_rtt_ms(*(void *)(v2 + 336));
    unint64_t v14 = (void *)MEMORY[0x1BA9E5960]();
    id v13 = (void *)nw_protocol_establishment_report_create();

    if (!v13) {
      goto LABEL_27;
    }
LABEL_24:
    if (!v6) {
      uint64_t v6 = nw_array_create();
    }
    nw_array_append();
LABEL_27:

    return v6;
  }
  if (a2 == 255)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3 && (uint64_t v4 = *(void *)(v3 + 24)) != 0 && (v5 = *(uint64_t (**)(void))(v4 + 224)) != 0) {
      uint64_t v6 = v5();
    }
    else {
      uint64_t v6 = 0;
    }
    id v13 = boringssl_context_copy_metadata(*(void *)(v2 + 336));
    if (!v13) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10 && (v11 = *(void *)(v10 + 24)) != 0 && (uint64_t v12 = *(uint64_t (**)(void))(v11 + 224)) != 0) {
    return v12();
  }
  else {
    return 0;
  }
}

void boringssl_metrics_log_configuration_data(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_DWORD *)a1 == -1252936367)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      id v5 = (const char *)TLS_METRIC_MIN_PROTOCOL_VERSION;
      xpc_object_t xdict = v3;
      unsigned int min_protocol_version = boringssl_context_get_min_protocol_version(a1);
      xpc_dictionary_set_uint64(xdict, v5, min_protocol_version);
      uint64_t v7 = (const char *)TLS_METRIC_MAX_PROTOCOL_VERSION;
      unsigned int max_protocol_version = boringssl_context_get_max_protocol_version(a1);
      xpc_dictionary_set_uint64(xdict, v7, max_protocol_version);
      uint64_t v9 = (const char *)TLS_METRIC_CONFIGURED_CIPHERSUITE_SET;
      uint64_t configured_ciphersuite_set = boringssl_context_get_configured_ciphersuite_set(a1);
      xpc_dictionary_set_uint64(xdict, v9, configured_ciphersuite_set);
      xpc_dictionary_set_BOOL(xdict, (const char *)TLS_METRIC_FALSE_START_ENABLED, *(unsigned char *)(v4 + 556) >> 7);
      xpc_dictionary_set_BOOL(xdict, (const char *)TLS_METRIC_SESSION_RESUMED, *(unsigned char *)(v4 + 557) >> 7);
      uint64_t v11 = (const char *)TLS_METRIC_TICKET_ENABLED;
      session_ticket_enableunsigned int d = boringssl_context_get_session_ticket_enabled(a1);
      xpc_dictionary_set_BOOL(xdict, v11, session_ticket_enabled);
      id v13 = (const char *)TLS_METRIC_TICKET_OFFERED;
      ticket_offereunsigned int d = boringssl_session_get_ticket_offered(a1);
      xpc_dictionary_set_BOOL(xdict, v13, ticket_offered);
      BOOL v15 = (const char *)TLS_METRIC_RESUMPTION_ATTEMPTED;
      char v16 = boringssl_session_attempted_resumption(a1);
      xpc_dictionary_set_BOOL(xdict, v15, v16);
      xpc_dictionary_set_BOOL(xdict, (const char *)TLS_METRIC_OCSP_ENABLED, (*(unsigned char *)(v4 + 556) & 8) != 0);
      xpc_dictionary_set_BOOL(xdict, (const char *)TLS_METRIC_SCT_ENABLED, (*(unsigned char *)(v4 + 556) & 4) != 0);
      xpc_dictionary_set_BOOL(xdict, (const char *)TLS_METRIC_VERIFY_BLOCK_USED, *(void *)(v4 + 120) != 0);
      xpc_dictionary_set_BOOL(xdict, (const char *)TLS_METRIC_CHALLENGE_BLOCK_USED, *(void *)(v4 + 136) != 0);
      xpc_dictionary_set_BOOL(xdict, (const char *)TLS_METRIC_DTLS, (*(unsigned char *)(v4 + 556) & 0x20) != 0);
      BOOL v17 = (const char *)TLS_METRIC_PSK_USED;
      psk_was_negotiateunsigned int d = boringssl_session_get_psk_was_negotiated(a1);
      xpc_dictionary_set_BOOL(xdict, v17, psk_was_negotiated);
      uint64_t v19 = (const char *)TLS_METRIC_PSK_CONFIGURED;
      BOOL v20 = boringssl_psk_cache_get_count(*(void *)(v4 + 40)) != 0;
      xpc_dictionary_set_BOOL(xdict, v19, v20);
      xpc_dictionary_set_BOOL(xdict, (const char *)TLS_METRIC_CLIENT_MODE, (*(unsigned char *)(v4 + 556) & 0x10) == 0);
      id v21 = (const char *)TLS_METRIC_IS_PROBE;
      char is_probe = boringssl_context_get_is_probe(a1);
      xpc_dictionary_set_BOOL(xdict, v21, is_probe);
      __int16 v23 = (const char *)TLS_METRIC_GREASE_ENABLED;
      GREASE_enableunsigned int d = boringssl_context_get_GREASE_enabled(a1);
      xpc_dictionary_set_BOOL(xdict, v23, GREASE_enabled);
      uint64_t v25 = (const char *)TLS_METRIC_ATS_ENFORCED;
      ats_enforceunsigned int d = boringssl_context_get_ats_enforced(a1);
      xpc_dictionary_set_BOOL(xdict, v25, ats_enforced);
      id v27 = (const char *)TLS_METRIC_ATS_MINIMUM_RSA_KEY_SIZE;
      ats_minimum_rsa_key_unsigned int size = boringssl_context_get_ats_minimum_rsa_key_size(a1);
      xpc_dictionary_set_uint64(xdict, v27, ats_minimum_rsa_key_size);
      uint64_t v29 = (const char *)TLS_METRIC_ATS_MINIMUM_ECDSA_KEY_SIZE;
      ats_minimum_ecdsa_key_unsigned int size = boringssl_context_get_ats_minimum_ecdsa_key_size(a1);
      xpc_dictionary_set_uint64(xdict, v29, ats_minimum_ecdsa_key_size);
      char v31 = (const char *)TLS_METRIC_ATS_MINIMUM_SIGNATURE_ALGORITHM;
      unsigned int ats_minimum_signature_algorithm = boringssl_context_get_ats_minimum_signature_algorithm(a1);
      xpc_dictionary_set_uint64(xdict, v31, ats_minimum_signature_algorithm);
      uint64_t experiment_identifer = boringssl_context_get_experiment_identifer(a1);
      BOOL v34 = (const char *)TLS_METRIC_EXPERIMENT_IDENTIFIER;
      if (experiment_identifer) {
        id v35 = (const char *)boringssl_context_get_experiment_identifer(a1);
      }
      else {
        id v35 = (const char *)TLS_METRIC_DEFAULT_EMPTY_STRING;
      }
      xpc_dictionary_set_string(xdict, v34, v35);
      id v3 = xdict;
    }
  }
}

BOOL boringssl_session_get_psk_was_negotiated(BOOL result)
{
  if (result) {
    return *(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0 && *(char *)(v1 + 559) < 0;
  }
  return result;
}

uint64_t boringssl_session_attempted_resumption(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return (*(unsigned __int8 *)(v1 + 558) >> 6) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_psk_cache_get_count(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 8)) {
    return sec_array_get_count();
  }
  else {
    return 0;
  }
}

xpc_object_t boringssl_metrics_create_ech_event(uint64_t a1)
{
  if (!a1
    || *(_DWORD *)a1 != -1252936367
    || !*(void *)(a1 + 8)
    || !boringssl_context_get_ech_enabled(a1))
  {
    return 0;
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = (const char *)TLS_METRIC_ECH_USED;
    ech_was_useunsigned int d = boringssl_session_get_ech_was_used(a1);
    xpc_dictionary_set_BOOL(v2, v3, ech_was_used);
    id v5 = v2;
  }
  else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
  {
    boringssl_metrics_create_ech_event_cold_1();
  }

  return v2;
}

void nw_protocol_boringssl_connected(void *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = a1[5];
    if (v3)
    {
      if ((*(unsigned char *)(v3 + 475) & 1) == 0
        && datapath_logging_enabled
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_connected_cold_3();
      }
      uint64_t v5 = a1[6];
      if (v5 && (uint64_t v6 = *(void *)(v5 + 24)) != 0 && (v7 = *(void (**)(void))(v6 + 40)) != 0)
      {
        if (*(void *)(v3 + 336))
        {
          v7();
          if (a1[4] == a2)
          {
            if (boringssl_session_get_state(*(void *)(v3 + 336)) == 2)
            {
              if ((*(unsigned char *)(v3 + 475) & 1) == 0)
              {
                uint64_t v12 = g_boringssl_log;
                if (g_boringssl_log)
                {
                  if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_INFO))
                  {
                    int v13 = 136446978;
                    unint64_t v14 = "nw_protocol_boringssl_connected";
                    __int16 v15 = 1024;
                    int v16 = 1611;
                    __int16 v17 = 2082;
                    uint64_t v18 = v3 + 391;
                    __int16 v19 = 2048;
                    uint64_t v20 = v3;
                    _os_log_impl(&dword_1BA0DE000, v12, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Already connected, reporting.", (uint8_t *)&v13, 0x26u);
                  }
                }
              }
              (*(void (**)(void))(*(void *)(a1[6] + 24) + 40))();
            }
            else if ((*(unsigned char *)(v3 + 388) & 4) != 0)
            {
              if ((*(unsigned char *)(v3 + 475) & 1) == 0)
              {
                uint64_t v11 = g_boringssl_log;
                if (g_boringssl_log)
                {
                  if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_INFO))
                  {
                    int v13 = 136446978;
                    unint64_t v14 = "nw_protocol_boringssl_connected";
                    __int16 v15 = 1024;
                    int v16 = 1618;
                    __int16 v17 = 2082;
                    uint64_t v18 = v3 + 391;
                    __int16 v19 = 2048;
                    uint64_t v20 = v3;
                    _os_log_impl(&dword_1BA0DE000, v11, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Already started the negotiation. Skipping.", (uint8_t *)&v13, 0x26u);
                  }
                }
              }
            }
            else
            {
              *(unsigned char *)(v3 + 388) |= 4u;
              uint64_t v8 = a1[4];
              if (v8)
              {
                uint64_t v9 = *(void *)(v8 + 24);
                if (v9)
                {
                  uint64_t v10 = *(unsigned int (**)(void))(v9 + 216);
                  if (v10)
                  {
                    if (v10()) {
                      *(unsigned char *)(v3 + 389) |= 0x80u;
                    }
                  }
                }
              }
              if (!boringssl_session_get_state(*(void *)(v3 + 336))) {
                nw_protocol_boringssl_begin_connection((uint64_t)a1);
              }
            }
          }
        }
        else if ((*(unsigned char *)(v3 + 475) & 1) == 0 {
               && g_boringssl_log
        }
               && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
        {
          nw_protocol_boringssl_connected_cold_2();
        }
      }
      else if ((*(unsigned char *)(v3 + 475) & 1) == 0 {
             && g_boringssl_log
      }
             && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        nw_protocol_boringssl_connected_cold_1();
      }
    }
  }
}

void nw_protocol_boringssl_begin_connection(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    if ((*(unsigned char *)(v1 + 475) & 1) == 0
      && datapath_logging_enabled
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_begin_connection_cold_11();
    }
    uint64_t v3 = (*(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 24) + 112))();
    if (v3)
    {
      if (nw_parameters_get_server_mode()) {
        char v4 = 8;
      }
      else {
        char v4 = 0;
      }
      *(unsigned char *)(v1 + 389) = *(unsigned char *)(v1 + 389) & 0xF7 | v4;
      uint64_t v5 = *(void *)(v1 + 336);
      int is_probe = nw_parameters_get_is_probe();
      boringssl_context_set_is_probe(v5, is_probe);
      boringssl_context_set_protocol_alert_callback(*(void *)(v1 + 336), &__block_literal_global_143);
      uint64_t v7 = *(void *)(v1 + 336);
      v37[0] = MEMORY[0x1E4F143A8];
      v37[1] = 3221225472;
      v37[2] = __nw_protocol_boringssl_begin_connection_block_invoke_2;
      v37[3] = &__block_descriptor_40_e50_v16__0__boringssl_concrete_nw_protocol_boringssl_8lu32l8;
      v37[4] = v1;
      boringssl_context_set_connected_callback(v7, v37);
      if (boringssl_session_create(*(SSL_CTX **)(v1 + 336)))
      {
        if (boringssl_session_set_bio(*(void *)(v1 + 336), *(BIO **)(v1 + 344), *(BIO **)(v1 + 344)))
        {
          uint64_t v8 = (*(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 24) + 136))();
          uint64_t v9 = v8;
          if (v8)
          {
            if (nw_endpoint_get_type(v8) == nw_endpoint_type_address)
            {
              addresunsigned int s = (sockaddr *)nw_endpoint_get_address(v9);
              boringssl_context_set_remote_address(*(void **)(v1 + 336), &address->sa_len);
            }
            if (nw_parameters_get_sensitive_redacted_for_endpoint()) {
              *(unsigned char *)(v1 + 475) |= 2u;
            }
            if ((*(unsigned char *)(v1 + 389) & 8) != 0
              || (subject_name = (const char *)nw_protocol_boringssl_get_subject_name((void *)v1, v9),
                  (uint64_t v12 = (char *)subject_name) == 0)
              || (size_t v13 = strlen(subject_name),
                  (boringssl_session_set_peer_hostname(*(void *)(v1 + 336), v12, v13) & 1) != 0))
            {
              if (os_variant_allows_internal_security_policies()
                && nw_parameters_get_enable_tls_keylog())
              {
                boringssl_context_enable_keylog(*(void *)(v1 + 336));
              }
              uint64_t v36 = (void *)nw_parameters_copy_protocol_options_legacy();
              if (v36)
              {
                *(void *)buf = 0;
                *(void *)&buf[8] = buf;
                *(void *)&buf[16] = 0x2020000000;
                buf[24] = 0;
                nw_protocol_options_access_handle();
                uint64_t v14 = boringssl_context_set_enable_message_mode(*(void **)(v1 + 336), *(unsigned __int8 *)(*(void *)&buf[8] + 24));
                __int16 v15 = *(void **)(v1 + 272);
                *(void *)(v1 + 272) = v14;

                int v16 = nw_parameters_copy_default_protocol_stack(v3);
                __int16 v17 = nw_protocol_stack_copy_original_proxied_transport_protocol();
                if (v17 || (__int16 v17 = nw_protocol_stack_copy_transport_protocol(v16)) != 0)
                {
                  nw_protocol_definition_t v18 = nw_protocol_options_copy_definition(v17);
                  if (v18)
                  {
                    __int16 v19 = (void *)nw_protocol_copy_quic_connection_definition();
                    if (MEMORY[0x1BA9E5980](v18, v19))
                    {
                    }
                    else
                    {
                      uint64_t v20 = (void *)nw_protocol_copy_quic_stream_definition();
                      char v21 = MEMORY[0x1BA9E5980](v18, v20);

                      if ((v21 & 1) == 0)
                      {
                        nw_protocol_definition_t v22 = nw_protocol_copy_tcp_definition();
                        MEMORY[0x1BA9E5980](v18, v22);
                      }
                    }
                  }
                }
                char v23 = boringssl_session_apply_protocol_options_for_transport(*(void *)(v1 + 336), v36);
                if (v23)
                {
                  early_data_enableunsigned int d = boringssl_session_get_early_data_enabled(*(void *)(v1 + 336));
                  char v25 = *(unsigned char *)(v1 + 389);
                  if (early_data_enabled | ((v25 & 0x20) >> 5)) {
                    char v26 = 32;
                  }
                  else {
                    char v26 = 0;
                  }
                  *(unsigned char *)(v1 + 389) = v26 | v25 & 0xDF;
                }
                else
                {
                  if ((*(unsigned char *)(v1 + 475) & 1) == 0
                    && g_boringssl_log
                    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
                  {
                    nw_protocol_boringssl_begin_connection_cold_8();
                  }
                  nw_protocol_boringssl_internal_error((void *)v1, -9810);
                  nw_protocol_boringssl_disconnect(a1);
                }

                _Block_object_dispose(buf, 8);
                if (v23)
                {
                  if ((*(unsigned char *)(v1 + 389) & 8) == 0)
                  {
                    if (boringssl_context_get_ech_enabled(*(void *)(v1 + 336)))
                    {
                      id v27 = (void *)nw_endpoint_copy_ech_config();
                      if (boringssl_session_set_ech_config(*(void *)(v1 + 336), v27))
                      {
                        if ((*(unsigned char *)(v1 + 475) & 1) == 0
                          && g_boringssl_log
                          && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                        {
                          nw_protocol_boringssl_begin_connection_cold_6();
                        }
                      }
                      else if ((*(unsigned char *)(v1 + 475) & 1) == 0 {
                             && g_boringssl_log
                      }
                             && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                      {
                        nw_protocol_boringssl_begin_connection_cold_7();
                      }
                    }
                    if (*(void *)(v1 + 312))
                    {
                      BOOL v28 = (void *)nw_endpoint_copy_original_endpoint();
                      uint64_t v29 = (void *)nw_parameters_copy_context();
                      if (v29)
                      {
                        uint64_t v30 = (void *)nw_context_copy_registered_endpoint();

                        uint64_t v31 = nw_endpoint_copy_association();
                        id v32 = *(void **)(v1 + 328);
                        *(void *)(v1 + 32EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v31;

                        boringssl_session_set_association(*(void *)(v1 + 336), *(void **)(v1 + 328));
                      }
                      else
                      {
                        if ((*(unsigned char *)(v1 + 475) & 1) == 0
                          && g_boringssl_log
                          && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                        {
                          nw_protocol_boringssl_begin_connection_cold_5();
                        }
                        uint64_t v30 = v28;
                      }
                    }
                    else if ((*(unsigned char *)(v1 + 475) & 1) == 0 {
                           && g_boringssl_log
                    }
                           && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
                    {
                      nw_protocol_boringssl_begin_connection_cold_4();
                    }
                  }
                  boringssl_session_clear_eap_metadata(*(void *)(v1 + 336));
                  nw_protocol_boringssl_handshake_negotiate((void *)v1);
                }
              }
              else
              {
                if ((*(unsigned char *)(v1 + 475) & 1) == 0
                  && g_boringssl_log
                  && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
                {
                  nw_protocol_boringssl_begin_connection_cold_3();
                }
                ERR_print_errors_cb((int (__cdecl *)(const char *, size_t, void *))nw_protocol_error_print, *(void **)(v1 + 336));
                nw_protocol_boringssl_internal_error((void *)v1, -9854);
                nw_protocol_boringssl_disconnect(v1 + 8);
              }
            }
            else
            {
              if ((*(unsigned char *)(v1 + 475) & 1) == 0)
              {
                uint64_t v33 = g_boringssl_log;
                if (g_boringssl_log)
                {
                  if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
                  {
                    BOOL v34 = (*(unsigned char *)(v1 + 475) & 2) == 0;
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_protocol_boringssl_begin_connection";
                    if (v34) {
                      id v35 = v12;
                    }
                    else {
                      id v35 = "redacted";
                    }
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 457;
                    *(_WORD *)&unsigned char buf[18] = 2082;
                    *(void *)&buf[20] = v1 + 391;
                    __int16 v39 = 2048;
                    uint64_t v40 = v1;
                    __int16 v41 = 2082;
                    id v42 = v35;
                    _os_log_error_impl(&dword_1BA0DE000, v33, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] boringssl_session_set_peer_hostname(%{public}s) failed", buf, 0x30u);
                  }
                }
              }
              nw_protocol_boringssl_internal_error((void *)v1, -9810);
              nw_protocol_boringssl_disconnect(a1);
            }
          }
          else if ((*(unsigned char *)(v1 + 475) & 1) == 0 {
                 && g_boringssl_log
          }
                 && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
          {
            nw_protocol_boringssl_begin_connection_cold_2();
          }
        }
        else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
        {
          nw_protocol_boringssl_begin_connection_cold_9();
        }
      }
      else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        nw_protocol_boringssl_begin_connection_cold_10();
      }
    }
    else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      nw_protocol_boringssl_begin_connection_cold_1();
    }
  }
}

void sub_1BA10F918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t boringssl_context_get_ech_enabled(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return (*(unsigned __int8 *)(v1 + 560) >> 3) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_clear_eap_metadata(uint64_t result)
{
  if (result && *(_DWORD *)result == -1252936367)
  {
    if (*(void *)(result + 8)) {
      return nw_protocol_metadata_access_handle();
    }
  }
  return result;
}

void *nw_protocol_boringssl_get_subject_name(void *a1, void *a2)
{
  uint64_t v3 = a1;
  char v4 = a2;
  uint64_t v5 = v4;
  if (v3 && v4)
  {
    uint64_t v6 = (void *)nw_endpoint_copy_proxy_original_endpoint();
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = v6;

      uint64_t v5 = v8;
    }
    char v16 = 0;
    endpoint_name = (void *)nw_protocol_boringssl_get_endpoint_name(v5, &v16);
    uint64_t v5 = v5;
    uint64_t v10 = nw_endpoint_copy_parent_endpoint();
    uint64_t v11 = v5;
    if (v10)
    {
      uint64_t v12 = (void *)v10;
      size_t v13 = v5;
      do
      {
        uint64_t v11 = v12;

        uint64_t v12 = (void *)nw_endpoint_copy_parent_endpoint();
        size_t v13 = v11;
      }
      while (v12);
    }
    if (nw_endpoint_get_type(v11) == (nw_endpoint_type_url|nw_endpoint_type_address))
    {
      if (v16 && endpoint_name) {
        free(endpoint_name);
      }
      char v16 = 0;
      endpoint_name = (void *)nw_protocol_boringssl_get_endpoint_name(v11, &v16);
    }
    if (v16)
    {
      uint64_t v14 = (void *)v3[44];
      if (v14) {
        free(v14);
      }
      v3[44] = endpoint_name;
    }
  }
  else
  {
    endpoint_name = 0;
  }

  return endpoint_name;
}

uint64_t nw_protocol_boringssl_get_endpoint_name(void *a1, unsigned char *a2)
{
  uint64_t v3 = a1;
  if (nw_endpoint_get_type(v3) == nw_endpoint_type_host)
  {
    uint64_t hostname = (uint64_t)nw_endpoint_get_hostname(v3);
LABEL_10:
    uint64_t parent_endpoint_domain = hostname;
    goto LABEL_11;
  }
  if (nw_endpoint_get_type(v3) != nw_endpoint_type_address)
  {
    if (nw_endpoint_get_type(v3) == nw_endpoint_type_bonjour_service)
    {
      uint64_t hostname = nw_endpoint_get_bonjour_fullname();
    }
    else
    {
      if (nw_endpoint_get_type(v3) != (nw_endpoint_type_url|nw_endpoint_type_address))
      {
        uint64_t parent_endpoint_domain = 0;
        goto LABEL_11;
      }
      uint64_t hostname = nw_endpoint_get_srv_name();
    }
    goto LABEL_10;
  }
  uint64_t parent_endpoint_domain = nw_endpoint_get_parent_endpoint_domain();
  if (!parent_endpoint_domain)
  {
    uint64_t parent_endpoint_domain = (uint64_t)nw_endpoint_copy_address_string(v3);
    *a2 = 1;
  }
LABEL_11:

  return parent_endpoint_domain;
}

void boringssl_session_set_association(uint64_t a1, void *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  uint64_t v5 = v4;
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      if (v4)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        if (v6)
        {
          uint64_t v7 = boringssl_session_cache_create_with_association(v4);
          uint64_t v8 = *(void **)(v6 + 32);
          *(void *)(v6 + 32) = v7;

          if ((boringssl_context_get_is_probe(a1) & 1) == 0)
          {
            id v9 = *(id *)(v6 + 32);
            uint64_t v10 = v9;
            if (*(_DWORD *)a1 != -1252936367) {
              goto LABEL_73;
            }
            uint64_t v11 = *(void *)(a1 + 8);
            BOOL v12 = !v9 || v11 == 0;
            if (v12) {
              goto LABEL_73;
            }
            uint64_t v13 = boringssl_session_cache_pop(v9);
            if (v13)
            {
              uint64_t v14 = (void *)v13;
              is_session_int state = boringssl_session_state_is_session_state(v13);
              id WeakRetained = objc_loadWeakRetained((id *)(v11 + 16));
              uint64_t v2 = (uint64_t)WeakRetained;
              if (is_session_state)
              {
                if (!WeakRetained
                  || (__int16 v17 = objc_loadWeakRetained((id *)(v11 + 16)),
                      char v18 = v17[475],
                      v17,
                      (id)v2,
                      (v18 & 1) == 0))
                {
                  id v19 = objc_loadWeakRetained((id *)(v11 + 16));
                  if (v19)
                  {
                    uint64_t v20 = objc_loadWeakRetained((id *)(v11 + 16));
                    BOOL v21 = (v20[475] & 1) == 0;
                  }
                  else
                  {
                    BOOL v21 = 1;
                  }

                  if (v21)
                  {
                    if (g_boringssl_log)
                    {
                      char v26 = (id)g_boringssl_log;
                      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                      {
                        id v27 = objc_loadWeakRetained((id *)(v11 + 16));
                        if (v27)
                        {
                          __int16 v61 = (char *)objc_loadWeakRetained((id *)(v11 + 16));
                          BOOL v28 = v61 + 391;
                        }
                        else
                        {
                          BOOL v28 = &unk_1BA179713;
                        }
                        id v43 = objc_loadWeakRetained((id *)(v11 + 16));
                        id v44 = v43;
                        BOOL v12 = (*(unsigned char *)(v11 + 556) & 0x10) == 0;
                        *(_DWORD *)buf = 136447234;
                        __int16 v63 = "boringssl_session_install_association_state";
                        if (v12) {
                          int v45 = "Client";
                        }
                        else {
                          int v45 = "Server";
                        }
                        __int16 v64 = 1024;
                        int v65 = 1416;
                        __int16 v66 = 2082;
                        __int16 v67 = v28;
                        __int16 v68 = 2048;
                        id v69 = v43;
                        __int16 v70 = 2082;
                        id v71 = v45;
                        _os_log_impl(&dword_1BA0DE000, v26, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] %{public}s session cache hit", buf, 0x30u);

                        if (v27) {
                      }
                        }
                    }
                  }
                }
                int v46 = boringssl_session_set_session_state(a1, v14);
                id v47 = objc_loadWeakRetained((id *)(v11 + 16));
                if (v47)
                {
                  BOOL v48 = v47;
                  id v49 = objc_loadWeakRetained((id *)(v11 + 16));
                  char v50 = v49[475];

                  if (v50) {
                    goto LABEL_72;
                  }
                }
                id v51 = objc_loadWeakRetained((id *)(v11 + 16));
                if (v51)
                {
                  id v52 = objc_loadWeakRetained((id *)(v11 + 16));
                  BOOL v53 = (v52[475] & 1) == 0;
                }
                else
                {
                  BOOL v53 = 1;
                }

                if (!v53 || !g_boringssl_log) {
                  goto LABEL_72;
                }
                uint64_t v37 = (id)g_boringssl_log;
                if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
                {
                  id v54 = objc_loadWeakRetained((id *)(v11 + 16));
                  if (v54)
                  {
                    __int16 v61 = (char *)objc_loadWeakRetained((id *)(v11 + 16));
                    id v55 = v61 + 391;
                  }
                  else
                  {
                    id v55 = &unk_1BA179713;
                  }
                  id v56 = objc_loadWeakRetained((id *)(v11 + 16));
                  uint64_t v57 = v56;
                  char v58 = *(unsigned char *)(v11 + 556);
                  __int16 v59 = "Server";
                  __int16 v63 = "boringssl_session_install_association_state";
                  __int16 v64 = 1024;
                  BOOL v12 = (v58 & 0x10) == 0;
                  int v65 = 1419;
                  int v60 = "not set";
                  __int16 v67 = v55;
                  *(_DWORD *)buf = 136447490;
                  if (v12) {
                    __int16 v59 = "Client";
                  }
                  __int16 v66 = 2082;
                  __int16 v68 = 2048;
                  if (v46) {
                    int v60 = "set";
                  }
                  id v69 = v56;
                  __int16 v70 = 2082;
                  id v71 = v59;
                  __int16 v72 = 2082;
                  uint64_t v73 = v60;
                  _os_log_impl(&dword_1BA0DE000, v37, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] %{public}s session state %{public}s.", buf, 0x3Au);

                  if (v54) {
                }
                  }
                goto LABEL_53;
              }
              if (!WeakRetained
                || (nw_protocol_definition_t v22 = objc_loadWeakRetained((id *)(v11 + 16)),
                    char v23 = v22[475],
                    v22,
                    (id)v2,
                    (v23 & 1) == 0))
              {
                id v24 = objc_loadWeakRetained((id *)(v11 + 16));
                if (v24)
                {
                  char v25 = objc_loadWeakRetained((id *)(v11 + 16));
                  uint64_t v2 = (v25[475] & 1) == 0;
                }
                else
                {
                  uint64_t v2 = 1;
                }

                if (v2)
                {
                  if (g_boringssl_log)
                  {
                    uint64_t v29 = (id)g_boringssl_log;
                    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                      boringssl_session_set_association_cold_1(v11, v29);
                    }
                  }
                }
              }
            }
            id v30 = objc_loadWeakRetained((id *)(v11 + 16));
            if (v30)
            {
              uint64_t v31 = v30;
              id v32 = objc_loadWeakRetained((id *)(v11 + 16));
              char v33 = v32[475];

              if (v33)
              {
                uint64_t v14 = 0;
LABEL_72:

LABEL_73:
                goto LABEL_74;
              }
            }
            id v34 = objc_loadWeakRetained((id *)(v11 + 16));
            if (v34)
            {
              id v35 = objc_loadWeakRetained((id *)(v11 + 16));
              BOOL v36 = (v35[475] & 1) == 0;
            }
            else
            {
              BOOL v36 = 1;
            }

            uint64_t v14 = 0;
            if (!v36 || !g_boringssl_log) {
              goto LABEL_72;
            }
            uint64_t v37 = (id)g_boringssl_log;
            if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
            {
              id v38 = objc_loadWeakRetained((id *)(v11 + 16));
              if (v38)
              {
                uint64_t v2 = (uint64_t)objc_loadWeakRetained((id *)(v11 + 16));
                __int16 v39 = (void *)(v2 + 391);
              }
              else
              {
                __int16 v39 = &unk_1BA179713;
              }
              id v40 = objc_loadWeakRetained((id *)(v11 + 16));
              __int16 v41 = v40;
              BOOL v12 = (*(unsigned char *)(v11 + 556) & 0x10) == 0;
              *(_DWORD *)buf = 136447234;
              __int16 v63 = "boringssl_session_install_association_state";
              if (v12) {
                id v42 = "Client";
              }
              else {
                id v42 = "Server";
              }
              __int16 v64 = 1024;
              int v65 = 1421;
              __int16 v66 = 2082;
              __int16 v67 = v39;
              __int16 v68 = 2048;
              id v69 = v40;
              __int16 v70 = 2082;
              id v71 = v42;
              _os_log_impl(&dword_1BA0DE000, v37, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] %{public}s session cache miss", buf, 0x30u);

              if (v38) {
            }
              }
            uint64_t v14 = 0;
LABEL_53:

            goto LABEL_72;
          }
        }
      }
    }
  }
LABEL_74:
}

uint64_t boringssl_context_get_is_probe(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return (*(unsigned __int8 *)(v1 + 559) >> 2) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_early_data_enabled(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(unsigned char *)(v1 + 559) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

boringssl_concrete_boringssl_session_cache *boringssl_session_cache_create_with_association(void *a1)
{
  id v2 = a1;
  uint64_t v3 = objc_alloc_init(boringssl_concrete_boringssl_session_cache);
  id v4 = v3;
  if (v3) {
    objc_storeStrong((id *)&v3->association, a1);
  }

  return v4;
}

uint64_t boringssl_session_apply_protocol_options_for_transport(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1 && *(_DWORD *)a1 == -1252936367 && (uint64_t v5 = *(void *)(a1 + 8)) != 0)
  {
    objc_storeStrong((id *)(v5 + 512), a2);
    id v8 = v4;
    uint64_t v6 = nw_protocol_options_access_handle();
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void *boringssl_context_set_remote_address(void *result, unsigned __int8 *a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367)
    {
      if (a2)
      {
        uint64_t v2 = result[1];
        if (v2)
        {
          int v3 = a2[1];
          if (v3 == 30 || v3 == 2) {
            return memcpy((void *)(v2 + 224), a2, *a2);
          }
        }
      }
    }
  }
  return result;
}

void boringssl_context_set_protocol_alert_callback(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      if (v4)
      {
        id v7 = v3;
        uint64_t v5 = MEMORY[0x1BA9E5C70]();
        uint64_t v6 = *(void **)(v4 + 280);
        *(void *)(v4 + 28std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v5;

        id v3 = v7;
      }
    }
  }
}

uint64_t boringssl_context_set_is_probe(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (a2) {
          char v3 = 4;
        }
        else {
          char v3 = 0;
        }
        *(unsigned char *)(v2 + 559) = *(unsigned char *)(v2 + 559) & 0xFB | v3;
      }
    }
  }
  return result;
}

void *boringssl_context_set_enable_message_mode(void *a1, int a2)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v3 = a1[1];
      if (v3 && a2 != 0)
      {
        if (SSL_set_quic_method(*(void *)(v3 + 400), (uint64_t)&boringssl_quic_method))
        {
          var48[0] = MEMORY[0x1E4F143A8];
          var48[1] = 3221225472;
          var48[2] = __boringssl_context_set_enable_message_mode_block_invoke;
          var48[3] = &__block_descriptor_40_e15_B28__0i8r_12Q20lu32l8;
          var48[4] = v3;
          a1 = (void *)MEMORY[0x1BA9E5C70](var48);
          goto LABEL_9;
        }
        id v7 = (id *)(v3 + 16);
        id WeakRetained = objc_loadWeakRetained(v7);
        if (!WeakRetained
          || (id v9 = WeakRetained,
              uint64_t v10 = objc_loadWeakRetained(v7),
              char v11 = v10[475],
              v10,
              v9,
              (v11 & 1) == 0))
        {
          id v12 = objc_loadWeakRetained(v7);
          if (v12)
          {
            uint64_t v13 = objc_loadWeakRetained(v7);
            BOOL v14 = (v13[475] & 1) == 0;
          }
          else
          {
            BOOL v14 = 1;
          }

          a1 = 0;
          if (!v14 || !g_boringssl_log) {
            goto LABEL_9;
          }
          __int16 v15 = (id)g_boringssl_log;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            boringssl_context_set_enable_message_mode_cold_1(v7, v15);
          }
        }
      }
    }
    a1 = 0;
LABEL_9:
    uint64_t v2 = var48[10];
  }
  return a1;
}

void boringssl_context_set_connected_callback(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      if (v4)
      {
        id v7 = v3;
        uint64_t v5 = MEMORY[0x1BA9E5C70]();
        uint64_t v6 = *(void **)(v4 + 288);
        *(void *)(v4 + 28EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v5;

        id v3 = v7;
      }
    }
  }
}

uint64_t __boringssl_session_clear_eap_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 320);
  if (v2)
  {
    free(v2);
    *(void *)(a2 + 32std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0;
  }
  return 1;
}

void SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio)
{
  p_wbio = &s->wbio;
  id v7 = s->wbio;
  if (*(_OWORD *)&s->wbio != __PAIR128__((unint64_t)wbio, (unint64_t)rbio))
  {
    if (rbio && rbio == wbio)
    {
      BIO_up_ref((uint64_t)rbio);
      id v7 = *p_wbio;
    }
    p_bbio = &s->bbio;
    if (v7 == rbio
      || ((id v9 = *p_bbio, std::unique_ptr<bio_st,bssl::internal::Deleter>::reset[abi:ne180100](p_wbio, rbio), v9 == wbio)
        ? (BOOL v10 = v7 == v9)
        : (BOOL v10 = 1),
          v10))
    {
      std::unique_ptr<bio_st,bssl::internal::Deleter>::reset[abi:ne180100](p_bbio, wbio);
    }
  }
}

uint64_t boringssl_session_set_bio(uint64_t result, BIO *a2, BIO *a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)result != -1252936367) {
      return 0;
    }
    BOOL result = 0;
    if (a3)
    {
      if (a2)
      {
        uint64_t v6 = *(void *)(v3 + 8);
        if (v6)
        {
          if (*(void *)(v6 + 400))
          {
            BIO_up_ref((uint64_t)a2);
            SSL_set_bio(*(SSL **)(v6 + 400), a2, a3);
            return 1;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

BIO *std::unique_ptr<bio_st,bssl::internal::Deleter>::reset[abi:ne180100](BIO **a1, BIO *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result) {
    return (BIO *)BIO_free(result);
  }
  return result;
}

uint64_t BIO_up_ref(uint64_t a1)
{
  return 1;
}

uint64_t boringssl_context_get_session_ticket_enabled(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -1252936367 && (uint64_t v1 = *(void *)(a1 + 8)) != 0) {
    return (*(unsigned __int8 *)(v1 + 557) >> 4) & 1;
  }
  else {
    return 1;
  }
}

uint64_t boringssl_context_get_min_protocol_version(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(unsigned __int16 *)(v1 + 58);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_get_max_protocol_version(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(unsigned __int16 *)(v1 + 56);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_get_experiment_identifer(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 96);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_get_configured_ciphersuite_set(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const SSL **)(v1 + 400);
  if (!v2) {
    return 0;
  }
  cipherunsigned int s = (EVP_MD_CTX *)SSL_get_ciphers(v2);
  if (!ciphers) {
    return 0;
  }

  return boringssl_ciphers_create_set_bitmask(ciphers);
}

STACK *__cdecl SSL_get_ciphers(STACK *s)
{
  if (s)
  {
    data = s->data;
    if (!data) {
      SSL_get_ciphers_cold_1();
    }
    uint64_t v2 = (STACK **)data[3];
    if (!v2) {
      uint64_t v2 = (STACK **)*((void *)s[3].comp + 30);
    }
    return *v2;
  }
  return s;
}

uint64_t boringssl_context_get_ats_minimum_signature_algorithm(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(unsigned int *)(v1 + 544);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_get_ats_minimum_rsa_key_size(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 528);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_get_ats_minimum_ecdsa_key_size(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(void *)(v1 + 536);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_get_ats_enforced(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return (*(unsigned __int8 *)(v1 + 559) >> 3) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_context_get_GREASE_enabled(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(unsigned char *)(v1 + 560) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

int BIO_free(BIO *a)
{
  if (!a) {
    return 1;
  }
  uint64_t v1 = a;
  while (1)
  {
    uint64_t v2 = v1;
    int result = CRYPTO_refcount_dec_and_test_zero((unsigned int *)&v1->retry_reason);
    if (!result) {
      break;
    }
    uint64_t v1 = (BIO *)v1->ptr;
    v2->ptr = 0;
    if (v2->method)
    {
      destroy = v2->method->destroy;
      if (destroy) {
        ((void (*)(BIO *))destroy)(v2);
      }
    }
    CRYPTO_free_ex_data((int)&g_ex_data_class, v2, (CRYPTO_EX_DATA *)&v2->callback);
    OPENSSL_free(v2);
    if (!v1) {
      return 1;
    }
  }
  return result;
}

uint64_t SSL_process_quic_post_handshake(void *a1)
{
  *(_DWORD *)(a1[6] + 196) = 0;
  ERR_clear_error();
  ERR_clear_system_error();
  uint64_t v2 = a1[6];
  uint64_t v3 = *(void *)(v2 + 280);
  if (!v3 || (*(unsigned char *)(v3 + 1584) & 8) != 0)
  {
    if (*(_DWORD *)(v2 + 172) == 2)
    {
      ERR_restore_state(*(void **)(v2 + 184));
    }
    else
    {
      unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v9[0] = v4;
      v9[1] = v4;
      if (!(*(unsigned int (**)(void *, _OWORD *))(*a1 + 24))(a1, v9)) {
        return 1;
      }
      while (ssl_do_post_handshake((uint64_t)a1, (uint64_t)v9))
      {
        (*(void (**)(void *))(*a1 + 32))(a1);
        if (((*(uint64_t (**)(void *, _OWORD *))(*a1 + 24))(a1, v9) & 1) == 0) {
          return 1;
        }
      }
      uint64_t v6 = a1[6];
      *(_DWORD *)(v6 + 172) = 2;
      id v7 = (uint64_t *)(v6 + 184);
      id v8 = ERR_save_state();
      std::unique_ptr<err_save_state_st,bssl::internal::Deleter>::reset[abi:ne180100](v7, (uint64_t)v8);
    }
  }
  else
  {
    ERR_put_error(16, 0, 66, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 1203);
  }
  return 0;
}

uint64_t ssl_do_post_handshake(uint64_t a1, uint64_t a2)
{
  if (bssl::ssl_protocol_version((bssl *)a1, (const ssl_st *)a2) >= 0x304) {
    return bssl::tls13_post_handshake((bssl *)a1, a2);
  }
  if (*(unsigned char *)(a1 + 180))
  {
    ERR_put_error(16, 0, 182, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 1171);
  }
  else
  {
    if (*(unsigned char *)(a2 + 1) || *(void *)(a2 + 16))
    {
      bssl::ssl_send_alert((bssl *)a1, (ssl_st *)2, 50);
      ERR_put_error(16, 0, 110, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 1178);
      return 0;
    }
    if (*(_DWORD *)(a1 + 176) == 3) {
      return 1;
    }
    *(_WORD *)(*(void *)(a1 + 48) + 220) |= 0x1000u;
    if (*(_DWORD *)(a1 + 176) == 4 || SSL_renegotiate((SSL *)a1)) {
      return 1;
    }
  }
  bssl::ssl_send_alert((bssl *)a1, (ssl_st *)2, 100);
  return 0;
}

uint64_t bssl::tls13_process_new_session_ticket(bssl *a1, uint64_t a2)
{
  if (*(_DWORD *)(*((void *)a1 + 6) + 176)) {
    return 1;
  }
  long long v9 = *(_OWORD *)(a2 + 8);
  seunsigned int s = (SSL_SESSION *)0xAAAAAAAAAAAAAAAALL;
  bssl::tls13_create_session_with_ticket(a1, (uint64_t *)&v9, &ses);
  long long v4 = ses;
  BOOL v2 = ses != 0;
  if (ses)
  {
    uint64_t v5 = *((void *)a1 + 16);
    if ((*(unsigned char *)(v5 + 300) & 1) == 0
      || (uint64_t v6 = *(unsigned int (**)(bssl *, SSL_SESSION *))(v5 + 312)) == 0
      || !v6(a1, ses))
    {
      seunsigned int s = 0;
      SSL_SESSION_free(v4);
    }
  }
  return v2;
}

void sub_1BA110F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)va, 0);
  _Unwind_Resume(a1);
}

void bssl::RefCounted<ssl_session_st>::DecRefInternal(ssl_session_st *a1)
{
  if (CRYPTO_refcount_dec_and_test_zero((unsigned int *)a1))
  {
    ssl_session_st::~ssl_session_st(a1);
    OPENSSL_free(v2);
  }
}

void SSL_SESSION_free(SSL_SESSION *ses)
{
  if (ses) {
    bssl::RefCounted<ssl_session_st>::DecRefInternal(ses);
  }
}

uint64_t boringssl_context_new_session_handler(const SSL *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      long long v4 = (char *)a1;
      uint64_t v5 = SSL_get_ex_data(a1, 0);
      if (v5)
      {
        uint64_t v6 = (uint64_t)v5;
        if (*(_DWORD *)v5 == -1252936367)
        {
          uint64_t v7 = v5[1];
          if (v7)
          {
            id WeakRetained = objc_loadWeakRetained((id *)(v7 + 16));
            if (!WeakRetained
              || (long long v9 = WeakRetained,
                  unint64_t v10 = objc_loadWeakRetained((id *)(v7 + 16)),
                  char v11 = v10[475],
                  v10,
                  v9,
                  (v11 & 1) == 0))
            {
              id v12 = objc_loadWeakRetained((id *)(v7 + 16));
              if (v12)
              {
                uint64_t v13 = objc_loadWeakRetained((id *)(v7 + 16));
                BOOL v14 = (v13[475] & 1) == 0;
              }
              else
              {
                BOOL v14 = 1;
              }

              if (v14)
              {
                if (g_boringssl_log)
                {
                  __int16 v15 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                  {
                    id v16 = objc_loadWeakRetained((id *)(v7 + 16));
                    if (v16)
                    {
                      unint64_t v2 = (unint64_t)objc_loadWeakRetained((id *)(v7 + 16));
                      __int16 v17 = (void *)(v2 + 391);
                    }
                    else
                    {
                      __int16 v17 = &unk_1BA179713;
                    }
                    id v18 = objc_loadWeakRetained((id *)(v7 + 16));
                    *(_DWORD *)buf = 136446978;
                    __int16 v68 = "boringssl_context_new_session_handler";
                    __int16 v69 = 1024;
                    int v70 = 1473;
                    __int16 v71 = 2082;
                    __int16 v72 = v17;
                    __int16 v73 = 2048;
                    id v74 = v18;
                    _os_log_impl(&dword_1BA0DE000, v15, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] New session available", buf, 0x26u);

                    if (v16) {
                  }
                    }
                }
              }
            }
            id v19 = boringssl_session_state_create(a2, (unsigned __int8 *)(v7 + 224));
            if (v19)
            {
              objc_storeStrong((id *)(v7 + 392), v19);
              if (*(void *)(v7 + 168))
              {
                boringssl_session_update_metadata(v6);
                uint64_t v20 = (id)v7;
                id v21 = objc_loadWeakRetained((id *)(v7 + 16));
                if (!v21
                  || (nw_protocol_definition_t v22 = v21,
                      char v23 = objc_loadWeakRetained((id *)(v7 + 16)),
                      char v24 = v23[475],
                      v23,
                      v22,
                      (v24 & 1) == 0))
                {
                  id v25 = objc_loadWeakRetained((id *)(v7 + 16));
                  if (v25)
                  {
                    char v26 = objc_loadWeakRetained((id *)(v7 + 16));
                    BOOL v27 = (v26[475] & 1) == 0;
                  }
                  else
                  {
                    BOOL v27 = 1;
                  }

                  if (v27)
                  {
                    if (g_boringssl_log)
                    {
                      id v35 = (id)g_boringssl_log;
                      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                      {
                        id v36 = objc_loadWeakRetained((id *)(v7 + 16));
                        if (v36)
                        {
                          __int16 v63 = (char *)objc_loadWeakRetained((id *)(v7 + 16));
                          __int16 v64 = v63 + 391;
                        }
                        else
                        {
                          __int16 v64 = &unk_1BA179713;
                        }
                        id v40 = objc_loadWeakRetained((id *)(v7 + 16));
                        *(_DWORD *)buf = 136446978;
                        __int16 v68 = "boringssl_context_new_session_handler";
                        __int16 v69 = 1024;
                        int v70 = 1486;
                        __int16 v71 = 2082;
                        __int16 v72 = v64;
                        __int16 v73 = 2048;
                        id v74 = v40;
                        _os_log_impl(&dword_1BA0DE000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] Asyncing for session update block", buf, 0x26u);

                        if (v36) {
                      }
                        }
                    }
                  }
                }
                unint64_t v2 = v20[22];
                block[0] = MEMORY[0x1E4F143A8];
                block[1] = 3221225472;
                block[2] = __boringssl_context_new_session_handler_block_invoke;
                block[3] = &unk_1E61F2C48;
                __int16 v41 = v20;
                id v42 = v41;
                id v66 = v41;
                id v43 = v41;
                if (v2)
                {
                  ++v41[63];
                  dispatch_async((dispatch_queue_t)v2, block);
                  id v43 = v66;
                }
              }
              if (*(void *)(v7 + 32))
              {
                id v44 = objc_loadWeakRetained((id *)(v7 + 16));
                if (!v44
                  || (int v45 = v44,
                      int v46 = (unsigned __int8 *)objc_loadWeakRetained((id *)(v7 + 16)),
                      unint64_t v2 = v46[475],
                      v46,
                      v45,
                      (v2 & 1) == 0))
                {
                  id v47 = objc_loadWeakRetained((id *)(v7 + 16));
                  if (v47)
                  {
                    BOOL v48 = objc_loadWeakRetained((id *)(v7 + 16));
                    unint64_t v2 = (v48[475] & 1) == 0;
                  }
                  else
                  {
                    unint64_t v2 = 1;
                  }

                  if (v2)
                  {
                    if (g_boringssl_log)
                    {
                      id v49 = (id)g_boringssl_log;
                      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
                        boringssl_context_new_session_handler_cold_1(v7 + 16, v49);
                      }
                    }
                  }
                }
                boringssl_session_cache_push(*(void **)(v7 + 32), v19);
              }
              if (SSL_session_reused((uint64_t)v4) && *(void *)(v7 + 360))
              {
                id v50 = objc_loadWeakRetained((id *)(v7 + 16));
                if (!v50
                  || (id v51 = v50,
                      id v52 = objc_loadWeakRetained((id *)(v7 + 16)),
                      char v53 = v52[475],
                      v52,
                      v51,
                      (v53 & 1) == 0))
                {
                  id v54 = objc_loadWeakRetained((id *)(v7 + 16));
                  if (v54)
                  {
                    id v55 = objc_loadWeakRetained((id *)(v7 + 16));
                    BOOL v56 = (v55[475] & 1) == 0;
                  }
                  else
                  {
                    BOOL v56 = 1;
                  }

                  if (v56)
                  {
                    if (g_boringssl_log)
                    {
                      uint64_t v57 = (id)g_boringssl_log;
                      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
                      {
                        id v58 = objc_loadWeakRetained((id *)(v7 + 16));
                        if (v58)
                        {
                          unint64_t v2 = (unint64_t)objc_loadWeakRetained((id *)(v7 + 16));
                          __int16 v59 = (void *)(v2 + 391);
                        }
                        else
                        {
                          __int16 v59 = &unk_1BA179713;
                        }
                        id v61 = objc_loadWeakRetained((id *)(v7 + 16));
                        *(_DWORD *)buf = 136446978;
                        __int16 v68 = "boringssl_context_new_session_handler";
                        __int16 v69 = 1024;
                        int v70 = 1502;
                        __int16 v71 = 2082;
                        __int16 v72 = v59;
                        __int16 v73 = 2048;
                        id v74 = v61;
                        _os_log_impl(&dword_1BA0DE000, v57, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Rebuilding session state for resumed session", buf, 0x26u);

                        if (v58) {
                      }
                        }
                    }
                  }
                }
                boringssl_session_set_peer_verification_state_from_session(v6, a2);
              }
            }
            else
            {
              id v28 = objc_loadWeakRetained((id *)(v7 + 16));
              if (!v28
                || (uint64_t v29 = v28,
                    id v30 = objc_loadWeakRetained((id *)(v7 + 16)),
                    char v31 = v30[475],
                    v30,
                    v29,
                    (v31 & 1) == 0))
              {
                id v32 = objc_loadWeakRetained((id *)(v7 + 16));
                if (v32)
                {
                  char v33 = objc_loadWeakRetained((id *)(v7 + 16));
                  BOOL v34 = (v33[475] & 1) == 0;
                }
                else
                {
                  BOOL v34 = 1;
                }

                if (v34)
                {
                  if (g_boringssl_log)
                  {
                    uint64_t v37 = (id)g_boringssl_log;
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
                    {
                      id v38 = objc_loadWeakRetained((id *)(v7 + 16));
                      if (v38)
                      {
                        long long v4 = (char *)objc_loadWeakRetained((id *)(v7 + 16));
                        __int16 v39 = v4 + 391;
                      }
                      else
                      {
                        __int16 v39 = &unk_1BA179713;
                      }
                      id v60 = objc_loadWeakRetained((id *)(v7 + 16));
                      *(_DWORD *)buf = 136446978;
                      __int16 v68 = "boringssl_context_new_session_handler";
                      __int16 v69 = 1024;
                      int v70 = 1477;
                      __int16 v71 = 2082;
                      __int16 v72 = v39;
                      __int16 v73 = 2048;
                      id v74 = v60;
                      _os_log_impl(&dword_1BA0DE000, v37, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] boringssl_session_state_create failed", buf, 0x26u);

                      if (v38) {
                    }
                      }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

boringssl_concrete_boringssl_session_state *boringssl_session_state_create(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t v5 = objc_alloc_init(boringssl_concrete_boringssl_session_state);
    uint64_t v6 = v5;
    if (v5)
    {
      v5->cached_content_type = 1;
      v5->used_extended_master_secret = SSL_SESSION_used_extended_master_secret(a1);
      memcpy(&v6->remote_address, a2, *a2);
      if (SSL_SESSION_to_bytes(a1, &v6->serialized_session, &v6->serialized_session_length))
      {
        unint64_t v2 = v6;
LABEL_13:

        return v2;
      }
      if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
        boringssl_session_state_create_cold_2();
      }
    }
    else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      boringssl_session_state_create_cold_1();
    }
    unint64_t v2 = 0;
    goto LABEL_13;
  }
  return v2;
}

void boringssl_session_cache_push(void *a1, void *a2)
{
  id v8 = a1;
  id v3 = a2;
  if (v8 && v3)
  {
    id v4 = boringssl_session_cache_copy_queue();
    if (!v4)
    {
      uint64_t v5 = (void *)sec_array_create();
      if (!v5)
      {
        id v4 = 0;
LABEL_9:

        goto LABEL_10;
      }
      id v4 = v5;
    }
    sec_array_append();
    id v6 = nw_protocol_boringssl_copy_definition();
    time(0);
    nw_association_set_cached_content_for_protocol();

    if ((unint64_t)sec_array_get_count() >= 2) {
      id v7 = boringssl_session_cache_pop(v8);
    }
    goto LABEL_9;
  }
LABEL_10:
}

uint64_t bssl::tls13_post_handshake(bssl *this, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v4 = *((void *)this + 6);
  if (v3 == 24)
  {
    unsigned __int8 v5 = *(unsigned char *)(v4 + 212) + 1;
    *(unsigned char *)(v4 + 212) = v5;
    if (*((void *)this + 21) || v5 >= 0x21u)
    {
      ERR_put_error(16, 0, 260, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 919);
      long long v9 = this;
      int v10 = 10;
    }
    else
    {
      long long v12 = *(_OWORD *)(a2 + 8);
      unsigned __int8 v11 = -86;
      if (CBS_get_u8(&v12, &v11) && !*((void *)&v12 + 1) && v11 < 2u)
      {
        int v6 = bssl::tls13_rotate_traffic_key((const SSL *)this, 0);
        uint64_t result = 0;
        if (v6)
        {
          if (v11 != 1) {
            return 1;
          }
          if ((*(_WORD *)(*((void *)this + 6) + 220) & 0x200) != 0) {
            return 1;
          }
          int v8 = bssl::tls13_add_key_update(this, 0);
          uint64_t result = 0;
          if (v8) {
            return 1;
          }
        }
        return result;
      }
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 895);
      long long v9 = this;
      int v10 = 50;
    }
    bssl::ssl_send_alert(v9, (ssl_st *)2, v10);
    return 0;
  }
  *(unsigned char *)(v4 + 212) = 0;
  if (v3 != 4 || (*((unsigned char *)this + 180) & 1) != 0)
  {
    bssl::ssl_send_alert(this, (ssl_st *)2, 10);
    ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 934);
    return 0;
  }

  return bssl::tls13_process_new_session_ticket(this, a2);
}

uint64_t SSL_SESSION_used_extended_master_secret(uint64_t a1)
{
  if (*(unsigned __int16 *)(a1 + 4) <= 0x303u) {
    return *(unsigned char *)(a1 + 440) & 1;
  }
  else {
    return 1;
  }
}

BOOL SSL_SESSION_to_bytes(uint64_t a1, void *a2, void *a3)
{
  if ((*(unsigned char *)(a1 + 440) & 4) != 0)
  {
    *a3 = 13;
    int v8 = OPENSSL_memdup("NOT RESUMABLE", 0xDuLL);
    *a2 = v8;
    return v8 != 0;
  }
  else
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[1] = v6;
    long long v10[2] = v6;
    v10[0] = v6;
    CBB_zero(v10);
    BOOL v7 = CBB_init((uint64_t)v10, 0x100uLL)
      && bssl::SSL_SESSION_to_bytes_full(a1, (uint64_t *)v10, 0)
      && CBB_finish((uint64_t)v10, a2, a3) != 0;
    CBB_cleanup((uint64_t)v10);
  }
  return v7;
}

void sub_1BA111BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id boringssl_session_cache_pop(void *a1)
{
  id v1 = a1;
  unint64_t v2 = boringssl_session_cache_copy_queue();
  if (v2 || (unint64_t v2 = (void *)sec_array_create()) != 0)
  {
    uint64_t v8 = 0;
    long long v9 = &v8;
    uint64_t v10 = 0x3032000000;
    unsigned __int8 v11 = __Block_byref_object_copy__0;
    long long v12 = __Block_byref_object_dispose__0;
    id v13 = 0;
    id v7 = (id)sec_array_create();
    sec_array_apply();
    id v3 = nw_protocol_boringssl_copy_definition();
    id v4 = v7;
    time(0);
    nw_association_set_cached_content_for_protocol();

    id v5 = (id)v9[5];
    _Block_object_dispose(&v8, 8);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_1BA111D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *boringssl_session_cache_copy_queue()
{
  id v0 = nw_protocol_boringssl_copy_definition();
  cached_content_for_protocol = (void *)nw_association_get_cached_content_for_protocol();

  if (cached_content_for_protocol) {
    id v2 = cached_content_for_protocol;
  }
  return cached_content_for_protocol;
}

id nw_protocol_boringssl_copy_definition()
{
  if (nw_protocol_boringssl_copy_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_boringssl_copy_definition_onceToken, &__block_literal_global_130);
  }
  id v0 = (void *)nw_protocol_boringssl_copy_definition_definition;

  return v0;
}

uint64_t SSL_set_quic_method(uint64_t a1, uint64_t a2)
{
  if (**(unsigned char **)a1) {
    return 0;
  }
  *(void *)(a1 + 16EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = a2;
  return 1;
}

uint64_t boringssl_bio_free(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 20))
    {
      *(_DWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 24) = 0;
    }
    return 1;
  }
  return result;
}

BOOL boringssl_session_state_is_session_state(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 1;
  }
  return result;
}

uint64_t boringssl_session_set_session_state(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1 || *(_DWORD *)a1 != -1252936367) {
    goto LABEL_40;
  }
  uint64_t v5 = 0;
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      int used_extended_master_secret = boringssl_session_state_get_used_extended_master_secret((uint64_t)v3);
      has_remote_addresunsigned int s = boringssl_session_state_has_remote_address(v4, (unsigned __int8 *)(v6 + 224));
      if (used_extended_master_secret || has_remote_address)
      {
        inner_session = boringssl_session_state_create_inner_session((uint64_t)v4, v6);
        if (inner_session)
        {
          __int16 v17 = inner_session;
          if (!boringssl_session_can_resume_with_state((void *)v6, (uint64_t)inner_session))
          {
            id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
            if (!WeakRetained
              || (char v26 = WeakRetained,
                  BOOL v27 = objc_loadWeakRetained((id *)(v6 + 16)),
                  char v28 = v27[475],
                  v27,
                  v26,
                  (v28 & 1) == 0))
            {
              id v29 = objc_loadWeakRetained((id *)(v6 + 16));
              if (v29)
              {
                id v30 = objc_loadWeakRetained((id *)(v6 + 16));
                BOOL v31 = (v30[475] & 1) == 0;
              }
              else
              {
                BOOL v31 = 1;
              }

              if (v31)
              {
                if (g_boringssl_log)
                {
                  char v33 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
                    boringssl_session_set_session_state_cold_2(v6, v33);
                  }
                }
              }
            }
            SSL_SESSION_free(v17);
            goto LABEL_40;
          }
          SSL_set_session(*(SSL **)(v6 + 400), v17);
          *(unsigned char *)(v6 + 558) |= 0x40u;
          *(unsigned char *)(v6 + 55EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = *(unsigned char *)(v6 + 558) & 0x7F | (SSL_SESSION_has_ticket((uint64_t)v17) << 7);
          SSL_SESSION_free(v17);
          uint64_t v5 = 1;
        }
        else
        {
          id v18 = objc_loadWeakRetained((id *)(v6 + 16));
          if (v18)
          {
            id v19 = v18;
            uint64_t v20 = objc_loadWeakRetained((id *)(v6 + 16));
            char v21 = v20[475];

            if (v21) {
              goto LABEL_40;
            }
          }
          id v22 = objc_loadWeakRetained((id *)(v6 + 16));
          if (v22)
          {
            char v23 = objc_loadWeakRetained((id *)(v6 + 16));
            BOOL v24 = (v23[475] & 1) == 0;
          }
          else
          {
            BOOL v24 = 1;
          }

          uint64_t v5 = 0;
          if (v24 && g_boringssl_log)
          {
            id v32 = (id)g_boringssl_log;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
              boringssl_session_set_session_state_cold_1(v6, v32);
            }
            goto LABEL_32;
          }
        }
      }
      else
      {
        id v9 = objc_loadWeakRetained((id *)(v6 + 16));
        if (v9)
        {
          uint64_t v10 = v9;
          unsigned __int8 v11 = objc_loadWeakRetained((id *)(v6 + 16));
          char v12 = v11[475];

          if (v12) {
            goto LABEL_40;
          }
        }
        id v13 = objc_loadWeakRetained((id *)(v6 + 16));
        if (v13)
        {
          BOOL v14 = objc_loadWeakRetained((id *)(v6 + 16));
          BOOL v15 = (v14[475] & 1) == 0;
        }
        else
        {
          BOOL v15 = 1;
        }

        uint64_t v5 = 0;
        if (v15 && g_boringssl_log)
        {
          id v32 = (id)g_boringssl_log;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
            boringssl_session_set_session_state_cold_3(v6, v32);
          }
LABEL_32:

LABEL_40:
          uint64_t v5 = 0;
        }
      }
    }
  }

  return v5;
}

BOOL boringssl_session_state_has_remote_address(void *a1, unsigned __int8 *a2)
{
  id v3 = a1;
  id v4 = v3;
  BOOL v5 = 0;
  if (v3 && a2)
  {
    uint64_t v6 = v3 + 12;
    size_t v7 = v4[12];
    BOOL v5 = v7 == *a2 && memcmp(v6, a2, v7) == 0;
  }

  return v5;
}

uint64_t boringssl_session_state_get_used_extended_master_secret(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 9);
  }
  return result;
}

SSL_SESSION *boringssl_session_state_create_inner_session(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return SSL_SESSION_from_bytes(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 408));
  }
  else {
    return 0;
  }
}

BOOL boringssl_session_can_resume_with_state(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = v3;
  BOOL v5 = 0;
  if (v3 && a2) {
    BOOL v5 = (*((unsigned char *)v3 + 559) & 1) != 0 || SSL_SESSION_get_protocol_version(a2) != 772;
  }

  return v5;
}

uint64_t SSL_SESSION_get_protocol_version(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 4);
}

uint64_t nw_protocol_boringssl_add_input_handler(uint64_t a1, unsigned __int8 *src)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 475) & 1) == 0)
    {
      if (datapath_logging_enabled)
      {
        if (g_boringssl_log)
        {
          uint64_t v15 = a1;
          BOOL v14 = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG);
          a1 = v15;
          if (v14)
          {
            nw_protocol_boringssl_add_input_handler_cold_7();
            a1 = v15;
          }
        }
      }
    }
    if (!src || (uint64_t v4 = *((void *)src + 3)) == 0 || !*(void *)(v4 + 176))
    {
      if ((*(unsigned char *)(v2 + 475) & 1) == 0
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        nw_protocol_boringssl_add_input_handler_cold_1();
      }
      return 0;
    }
    if (!*(void *)(v4 + 112))
    {
      if ((*(unsigned char *)(v2 + 475) & 1) == 0
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        nw_protocol_boringssl_add_input_handler_cold_2();
      }
      return 0;
    }
    if (*(void *)(a1 + 48))
    {
      if ((*(unsigned char *)(v2 + 475) & 1) == 0
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        nw_protocol_boringssl_add_input_handler_cold_6();
      }
      return 0;
    }
    *(void *)(a1 + 4EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = src;
    uuid_copy((unsigned __int8 *)(v2 + 8), src);
    *((void *)src + 4) = v2 + 8;
    if ((*(unsigned int (**)(unsigned __int8 *))(*((void *)src + 3) + 176))(src)) {
      char v6 = 16;
    }
    else {
      char v6 = 0;
    }
    *(unsigned char *)(v2 + 389) = *(unsigned char *)(v2 + 389) & 0xEF | v6;
    uint64_t v7 = (*(void (**)(unsigned __int8 *))(*((void *)src + 3) + 112))(src);
    uint64_t v8 = *(void **)(v2 + 312);
    *(void *)(v2 + 312) = v7;

    if (!*(void *)(v2 + 312))
    {
      if ((*(unsigned char *)(v2 + 475) & 1) == 0
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        nw_protocol_boringssl_add_input_handler_cold_3();
      }
      return 0;
    }
    if (nw_parameters_get_logging_disabled()) {
      *(unsigned char *)(v2 + 475) |= 1u;
    }
    id v9 = (void *)nw_parameters_copy_context();
    uint64_t v10 = boringssl_context_create_with_nw_context((void *)v2, v9);
    *(void *)(v2 + 336) = v10;
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      int attribution = nw_parameters_get_attribution(*(nw_parameters_t *)(v2 + 312));
      boringssl_context_set_attribution(v11, attribution);
      uint64_t v13 = boringssl_bio_create(v2, (uint64_t)nw_protocol_boringssl_read_bytes, (uint64_t)nw_protocol_boringssl_write_bytes);
      *(void *)(v2 + 344) = v13;
      if (v13)
      {
        uint64_t v2 = 1;
LABEL_39:

        return v2;
      }
      if ((*(unsigned char *)(v2 + 475) & 1) == 0
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        nw_protocol_boringssl_add_input_handler_cold_5();
      }
    }
    else if ((*(unsigned char *)(v2 + 475) & 1) == 0 {
           && g_boringssl_log
    }
           && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      nw_protocol_boringssl_add_input_handler_cold_4();
    }
    uint64_t v2 = 0;
    goto LABEL_39;
  }
  return v2;
}

uint64_t boringssl_context_set_attribution(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v2 = *(void *)(result + 8)) != 0)
    {
      *(void *)(v2 + 272) = a2 == 2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *boringssl_context_create_with_nw_context(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  char v6 = 0;
  if (v3 && v4)
  {
    uint64_t v7 = objc_alloc_init(boringssl_concrete_boringssl_ctx);
    uint64_t v8 = v7;
    if (v7)
    {
      v7->ssl_int state = 0;
      v7->peer_trust_uint64_t result = 0;
      v7->max_allowed_tls_version = boringssl_config_get_max_tls_version_allowed();
      v8->max_allowed_dtls_version = boringssl_config_get_max_dtls_version_allowed();
      v8->min_allowed_tls_version = boringssl_config_get_min_tls_version_allowed();
      v8->min_allowed_dtls_version = boringssl_config_get_min_dtls_version_allowed();
      id v9 = nw_protocol_boringssl_copy_definition();
      uint64_t singleton = nw_protocol_metadata_create_singleton();
      metadata = v8->metadata;
      v8->metadata = (OS_nw_protocol_metadata *)singleton;

      boringssl_log_open();
      objc_storeWeak((id *)&v8->boringssl_handle, v3);
      objc_storeStrong((id *)&v8->async_context, a2);
      char v12 = v8;
      uint64_t v13 = malloc_type_malloc(0x10uLL, 0x10800407411B482uLL);
      if (v13)
      {
        char v6 = v13;
        v12->legacy_context = (boringssl_legacy_ctx *)v13;
        *(_DWORD *)uint64_t v13 = -1252936367;
        v13[1] = v12;
LABEL_17:

        goto LABEL_18;
      }
      id WeakRetained = objc_loadWeakRetained((id *)&v8->boringssl_handle);
      if (!WeakRetained
        || (uint64_t v15 = WeakRetained,
            id v16 = objc_loadWeakRetained((id *)&v8->boringssl_handle),
            char v17 = v16[475],
            v16,
            v15,
            (v17 & 1) == 0))
      {
        id v18 = objc_loadWeakRetained((id *)&v8->boringssl_handle);
        if (v18)
        {
          id v19 = objc_loadWeakRetained((id *)&v8->boringssl_handle);
          BOOL v20 = (v19[475] & 1) == 0;
        }
        else
        {
          BOOL v20 = 1;
        }

        char v6 = 0;
        if (!v20 || !g_boringssl_log) {
          goto LABEL_17;
        }
        char v21 = (id)g_boringssl_log;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          boringssl_context_create_with_nw_context_cold_1(&v8->boringssl_handle, v21);
        }
      }
    }
    char v6 = 0;
    goto LABEL_17;
  }
LABEL_18:

  return v6;
}

uint64_t boringssl_config_get_min_tls_version_allowed()
{
  return 769;
}

uint64_t boringssl_config_get_max_tls_version_allowed()
{
  return 772;
}

void boringssl_log_open()
{
  if (boringssl_log_open_onceToken != -1) {
    dispatch_once(&boringssl_log_open_onceToken, &__block_literal_global_1);
  }
}

uint64_t boringssl_config_get_min_dtls_version_allowed()
{
  return 65279;
}

uint64_t boringssl_config_get_max_dtls_version_allowed()
{
  return 65277;
}

uint64_t boringssl_bio_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a2 && a3)
  {
    uint64_t v7 = BIO_new(&methods_boringssl_bio);
    if (v7)
    {
      uint64_t v3 = (uint64_t)v7;
      uint64_t v8 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
      if (v8)
      {
        *uint64_t v8 = a1;
        v8[1] = a2;
        v8[2] = a3;
        *(void *)(v3 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v8;
      }
      else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        boringssl_bio_create_cold_2();
      }
    }
    else
    {
      uint64_t v3 = g_boringssl_log;
      if (g_boringssl_log)
      {
        if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
          boringssl_bio_create_cold_1();
        }
        return 0;
      }
    }
  }
  return v3;
}

BIO *__cdecl BIO_new(BIO_METHOD *type)
{
  uint64_t v2 = (BIO *)OPENSSL_zalloc(0x48uLL);
  BOOL v5 = v2;
  if (v2)
  {
    v2->methounsigned int d = type;
    HIDWORD(v2->cb_arg) = 1;
    v2->int retry_reason = 1;
    CRYPTO_new_ex_data(v2 + 8, v3, v4);
    create = type->create;
    if (create)
    {
      if (!((unsigned int (*)(BIO *))create)(v5))
      {
        OPENSSL_free(v5);
        return 0;
      }
    }
  }
  return v5;
}

uint64_t boringssl_bio_new(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return 1;
}

uint64_t SSL_set_alpn_protos(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    if (!a3)
    {
      int v8 = bssl::Array<unsigned char>::Init(v3 + 128, 0);
      return v8 ^ 1u;
    }
    if (bssl::ssl_is_valid_alpn_list((unsigned __int8 *)a2, a3))
    {
      uint64_t v7 = (void **)(*(void *)(a1 + 8) + 128);
      int v8 = bssl::Array<unsigned char>::Init((uint64_t)v7, a3);
      if (v8) {
        memmove(*v7, a2, a3);
      }
      return v8 ^ 1u;
    }
    ERR_put_error(16, 0, 315, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 2656);
  }
  return 1;
}

uint64_t bssl::ssl_is_valid_alpn_list(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  if (!a2) {
    return 0;
  }
  do
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
    if (CBS_get_u8_length_prefixed(&v7, &v5)) {
      BOOL v2 = v6 == 0;
    }
    else {
      BOOL v2 = 1;
    }
    uint64_t result = !v2;
  }
  while (result == 1 && v8 != 0);
  return result;
}

uint64_t nw_protocol_boringssl_connect(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 40);
    if (v2)
    {
      if ((*(unsigned char *)(v2 + 475) & 1) == 0
        && datapath_logging_enabled
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_connect_cold_4();
      }
      if (*(void *)(v2 + 336) && (*(unsigned char *)(v2 + 390) & 1) == 0)
      {
        uint64_t v3 = (*(void (**)(void))(*(void *)(*(void *)(v1 + 48) + 24) + 112))();
        if (!v3)
        {
          if ((*(unsigned char *)(v2 + 475) & 1) == 0 && g_boringssl_log)
          {
            uint64_t result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            nw_protocol_boringssl_connect_cold_1();
          }
          return 0;
        }
        id v4 = (void *)v3;
        uint64_t v5 = *(void *)(v1 + 32);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 24);
          if (v6)
          {
            uint64_t v7 = *(void (**)(void))(v6 + 248);
            if (v7) {
              v7();
            }
          }
        }
        if (nw_parameters_get_server_mode())
        {
          uint64_t v8 = *(void *)(v1 + 48);
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 24);
            if (v9)
            {
              uint64_t v10 = *(void (**)(void))(v9 + 128);
              if (v10)
              {
                uint64_t v11 = v10();
                char v12 = (void *)nw_parameters_copy_context();
                uint64_t v13 = (void *)nw_context_copy_registered_endpoint();

                uint64_t v14 = nw_endpoint_copy_association();
                uint64_t v15 = *(void **)(v2 + 328);
                *(void *)(v2 + 32EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v14;
              }
            }
          }
        }
        uint64_t v16 = *(void *)(v2 + 336);
        int server_mode = nw_parameters_get_server_mode();
        if ((boringssl_context_ssl_context_create(v16, server_mode) & 1) == 0)
        {
          if ((*(unsigned char *)(v2 + 475) & 1) == 0
            && g_boringssl_log
            && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
          {
            nw_protocol_boringssl_connect_cold_2();
          }

          return 0;
        }
        id v18 = (void *)nw_parameters_copy_protocol_options_legacy();
        if (v18) {
          nw_protocol_options_get_log_id_str();
        }
        *(unsigned char *)(v2 + 390) |= 1u;
      }
      uint64_t result = *(void *)(v1 + 32);
      if (!result) {
        return result;
      }
      uint64_t v19 = *(void *)(result + 24);
      if (v19)
      {
        BOOL v20 = *(uint64_t (**)(void))(v19 + 24);
        if (v20) {
          return v20();
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t boringssl_context_ssl_context_create(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367 && (uint64_t v3 = *(void *)(a1 + 8)) != 0)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));

      if (WeakRetained)
      {
        uint64_t v6 = (id *)objc_loadWeakRetained((id *)(v3 + 16));
        id v7 = v6[41];
      }
      else
      {
        id v7 = 0;
      }
      uint64_t v8 = (SSL_METHOD *)TLS_with_buffers_method();
      uint64_t v9 = boringssl_context_restore_ssl_context((void *)v3, v7, v8);
      *(void *)(v3 + 40EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = v9;
      if (a2) {
        char v10 = 16;
      }
      else {
        char v10 = 0;
      }
      *(unsigned char *)(v3 + 556) = *(unsigned char *)(v3 + 556) & 0xCF | v10;
      if (v9) {
        uint64_t v2 = boringssl_context_configure_defaults(v2);
      }
      else {
        uint64_t v2 = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t boringssl_context_restore_ssl_context(void *a1, void *a2, SSL_METHOD *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  uint64_t v44 = 0;
  int v45 = &v44;
  uint64_t v46 = 0x2020000000;
  uint64_t v47 = 0;
  if (v8)
  {
    id v9 = nw_protocol_boringssl_copy_definition();
    cached_content_for_protocol = (void *)nw_association_get_cached_content_for_protocol();

    if (cached_content_for_protocol)
    {
      id WeakRetained = objc_loadWeakRetained(v7 + 2);
      uint64_t v3 = (uint64_t)&OBJC_IVAR___boringssl_concrete_nw_protocol_boringssl_logging_disabled;
      if (!WeakRetained
        || (char v12 = objc_loadWeakRetained(v7 + 2),
            unint64_t v4 = (v12[475] & 1) == 0,
            v12,
            WeakRetained,
            v4))
      {
        id v13 = objc_loadWeakRetained(v7 + 2);
        if (v13)
        {
          uint64_t v14 = objc_loadWeakRetained(v7 + 2);
          uint64_t v3 = (v14[475] & 1) == 0;
        }
        else
        {
          uint64_t v3 = 1;
        }

        int v15 = g_boringssl_log ? v3 : 0;
        if (v15 == 1)
        {
          uint64_t v16 = (id)g_boringssl_log;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v3 = (uint64_t)objc_loadWeakRetained(v7 + 2);
            if (v3)
            {
              unint64_t v4 = (unint64_t)objc_loadWeakRetained(v7 + 2);
              char v17 = (void *)(v4 + 391);
            }
            else
            {
              char v17 = &unk_1BA179713;
            }
            id v18 = objc_loadWeakRetained(v7 + 2);
            *(_DWORD *)buf = 136446978;
            id v49 = "boringssl_context_restore_ssl_context";
            __int16 v50 = 1024;
            int v51 = 2616;
            __int16 v52 = 2082;
            char v53 = v17;
            __int16 v54 = 2048;
            id v55 = v18;
            _os_log_impl(&dword_1BA0DE000, v16, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Reusing context", buf, 0x26u);

            if (v3) {
          }
            }
        }
      }
      id v19 = cached_content_for_protocol;
      id v43 = v7;
      sec_array_apply();
    }
  }
  BOOL v20 = (unsigned int *)v45[3];
  if (v20)
  {
    SSL_CTX_up_ref(v20);
    char v21 = v45;
    if (!v8) {
      goto LABEL_49;
    }
    goto LABEL_42;
  }
  id v22 = objc_loadWeakRetained(v7 + 2);
  if (!v22
    || (char v23 = objc_loadWeakRetained(v7 + 2), v24 = (v23[475] & 1) == 0, v23, v22, v24))
  {
    id v25 = objc_loadWeakRetained(v7 + 2);
    if (v25)
    {
      char v26 = objc_loadWeakRetained(v7 + 2);
      BOOL v27 = (v26[475] & 1) == 0;
    }
    else
    {
      BOOL v27 = 1;
    }

    if (g_boringssl_log && v27)
    {
      id v29 = (id)g_boringssl_log;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = objc_loadWeakRetained(v7 + 2);
        if (v30)
        {
          uint64_t v3 = (uint64_t)objc_loadWeakRetained(v7 + 2);
          BOOL v31 = (void *)(v3 + 391);
        }
        else
        {
          BOOL v31 = &unk_1BA179713;
        }
        id v32 = objc_loadWeakRetained(v7 + 2);
        *(_DWORD *)buf = 136446978;
        id v49 = "boringssl_context_restore_ssl_context";
        __int16 v50 = 1024;
        int v51 = 2632;
        __int16 v52 = 2082;
        char v53 = v31;
        __int16 v54 = 2048;
        id v55 = v32;
        _os_log_impl(&dword_1BA0DE000, v29, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] New context", buf, 0x26u);

        if (v30) {
      }
        }
    }
  }
  char v33 = SSL_CTX_new(a3);
  char v21 = v45;
  v45[3] = (uint64_t)v33;
  if (v8)
  {
LABEL_42:
    BOOL v34 = (unsigned int *)v21[3];
    id v35 = v8;
    if (v34)
    {
      id v36 = boringssl_context_state_create(v34);
      if (v36)
      {
        uint64_t v37 = (void *)sec_array_create();
        id v38 = v37;
        if (v37)
        {
          id v39 = v37;
          sec_array_append();
          id v40 = nw_protocol_boringssl_copy_definition();
          time(0);
          nw_association_set_cached_content_for_protocol();
        }
      }
    }
    char v21 = v45;
  }
LABEL_49:
  uint64_t v41 = v21[3];
  _Block_object_dispose(&v44, 8);

  return v41;
}

void sub_1BA113330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t boringssl_context_configure_defaults(uint64_t a1)
{
  if (*(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  SSL_CTX_set_allow_unknown_alpn_protos(*(void *)(v1 + 408), 1);
  SSL_CTX_set_info_callback(*(SSL_CTX **)(v1 + 408), (void (__cdecl *)(const SSL *, int, int))boringssl_context_info_handler);
  SSL_CTX_set_session_cache_mode(*(void *)(v1 + 408), 3);
  uint64_t v2 = *(SSL_CTX **)(v1 + 408);
  if ((*(unsigned char *)(v1 + 556) & 0x10) != 0)
  {
    int v3 = 0;
  }
  else
  {
    SSL_CTX_sess_set_new_cb(v2, (int (__cdecl *)(ssl_st *, SSL_SESSION *))boringssl_context_new_session_handler);
    uint64_t v2 = *(SSL_CTX **)(v1 + 408);
    int v3 = 3;
  }
  SSL_CTX_set_custom_verify((uint64_t)v2, v3, (uint64_t)boringssl_context_certificate_verify_callback);
  return 1;
}

void *TLS_with_buffers_method()
{
  return &TLS_with_buffers_method::kMethod;
}

uint64_t SSL_CTX_set_session_cache_mode(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 300);
  *(_DWORD *)(a1 + 30std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = a2;
  return v2;
}

void SSL_CTX_set_info_callback(SSL_CTX *ctx, void (__cdecl *cb)(const SSL *, int, int))
{
  ctx->param = (X509_VERIFY_PARAM *)cb;
}

uint64_t SSL_CTX_set_custom_verify(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 456) = a2;
  *(void *)(result + 352) = a3;
  return result;
}

uint64_t SSL_CTX_set_allow_unknown_alpn_protos(uint64_t result, int a2)
{
  *(_WORD *)(result + 832) = *(_WORD *)(result + 832) & 0xFF7F | ((a2 != 0) << 7);
  return result;
}

void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx, int (__cdecl *new_session_cb)(ssl_st *, SSL_SESSION *))
{
  *(void *)&ctx->read_aheaunsigned int d = new_session_cb;
}

uint64_t bssl::ssl_parse_serverhello_tlsext(uint64_t a1, long long *a2)
{
  int v3 = *(bssl **)a1;
  long long v45 = *a2;
  if (!bssl::tls1_check_duplicate_extensions(&v45)) {
    goto LABEL_14;
  }
  if (*((void *)&v45 + 1))
  {
    unsigned int v4 = 0;
    uint64_t v5 = "extension %u";
    while (2)
    {
      unsigned __int16 v44 = -21846;
      v43[0] = 0xAAAAAAAAAAAAAAAALL;
      v43[1] = 0xAAAAAAAAAAAAAAAALL;
      if (CBS_get_u16((unsigned __int16 **)&v45, &v44)
        && CBS_get_u16_length_prefixed((unsigned __int8 **)&v45, v43))
      {
        uint64_t v6 = 0;
        id v7 = off_1F13976D0;
        while (*((unsigned __int16 *)v7 - 8) != v44)
        {
          ++v6;
          v7 += 5;
          if (v6 == 28)
          {
            int v10 = 4147;
LABEL_15:
            ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v10);
            ERR_add_error_dataf(v5, v11, v12, v13, v14, v15, v16, v17, v44);
            int v9 = 110;
            goto LABEL_16;
          }
        }
        int v8 = 1 << v6;
        if ((*(_DWORD *)(a1 + 376) & (1 << v6)) == 0)
        {
          int v10 = 4158;
          uint64_t v5 = "extension :%u";
          goto LABEL_15;
        }
        unsigned __int8 v42 = 50;
        if ((((uint64_t (*)(uint64_t, unsigned __int8 *, unint64_t *))*v7)(a1, &v42, v43) & 1) == 0)
        {
          ERR_put_error(16, 0, 149, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4168);
          ERR_add_error_dataf("extension %u", v35, v36, v37, v38, v39, v40, v41, v44);
          int v9 = v42;
          goto LABEL_16;
        }
        v4 |= v8;
        if (*((void *)&v45 + 1)) {
          continue;
        }
        goto LABEL_19;
      }
      break;
    }
LABEL_14:
    int v9 = 50;
    goto LABEL_16;
  }
  unsigned int v4 = 0;
LABEL_19:
  uint64_t v20 = 0;
  char v21 = off_1F13976D0;
  do
  {
    if (((v4 >> v20) & 1) == 0)
    {
      LOBYTE(v43[0]) = 50;
      if ((((uint64_t (*)(uint64_t, unint64_t *, void))*v21)(a1, v43, 0) & 1) == 0)
      {
        ERR_put_error(16, 0, 164, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4181);
        ERR_add_error_dataf("extension %u", v23, v24, v25, v26, v27, v28, v29, *((_WORD *)v21 - 8));
        int v9 = LOBYTE(v43[0]);
        goto LABEL_16;
      }
    }
    ++v20;
    v21 += 5;
  }
  while (v20 != 28);
  uint64_t v22 = *(void *)(a1 + 1520);
  if (!v22 || (*(unsigned char *)(v22 + 440) & 0x40) == 0) {
    return 1;
  }
  int v3 = *(bssl **)a1;
  uint64_t v30 = *(void *)(*(void *)a1 + 48);
  size_t v31 = *(void *)(v30 + 504);
  if (!v31)
  {
    ERR_put_error(16, 0, 308, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4224);
    id v18 = v3;
    int v9 = 47;
    goto LABEL_17;
  }
  long long v45 = 0uLL;
  if (bssl::ssl_get_local_application_settings(a1, &v45, *(void **)(v30 + 496), v31))
  {
    long long v32 = v45;
    int v33 = bssl::Array<unsigned char>::Init(v22 + 408, *((unint64_t *)&v45 + 1));
    int v34 = v33;
    if (*((void *)&v32 + 1))
    {
      if (v33) {
        memmove(*(void **)(v22 + 408), (const void *)v32, *((size_t *)&v32 + 1));
      }
    }
    if (v34) {
      return 1;
    }
    int v9 = 80;
  }
  else
  {
    ERR_put_error(16, 0, 259, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4233);
    int v9 = 47;
  }
LABEL_16:
  id v18 = v3;
LABEL_17:
  bssl::ssl_send_alert(v18, (ssl_st *)2, v9);
  return 0;
}

BOOL bssl::forbid_parse_serverhello(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (a3)
  {
    *a2 = 110;
    ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 504);
  }
  return a3 == 0;
}

uint64_t bssl::ext_quic_transport_params_parse_serverhello_impl(uint64_t a1, ssl_st *a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(bssl **)a1;
  if (!a3)
  {
    if (((*(_WORD *)(*(void *)(a1 + 8) + 301) & 0x200) == 0) != a4 && *((void *)v6 + 21))
    {
      uint64_t result = 0;
      LOBYTE(a2->version) = 109;
      return result;
    }
    return 1;
  }
  if (!*((void *)v6 + 21)) {
    bssl::ext_quic_transport_params_parse_serverhello_impl();
  }
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) != 772) {
    bssl::ext_quic_transport_params_parse_serverhello_impl();
  }
  if (a4 != (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 8) + 301) & 0x200) >> 9) {
    bssl::ext_quic_transport_params_parse_serverhello_impl();
  }
  int v8 = (void **)(*((void *)v6 + 6) + 584);
  int v9 = *(const void **)a3;
  unint64_t v10 = *(void *)(a3 + 8);
  uint64_t result = bssl::Array<unsigned char>::Init((uint64_t)v8, v10);
  if (v10 && result)
  {
    memmove(*v8, v9, v10);
    return 1;
  }
  return result;
}

uint64_t bssl::ext_alps_parse_serverhello_impl(uint64_t a1, ssl_st *a2, uint64_t a3, int a4)
{
  if (!a3) {
    return 1;
  }
  uint64_t v5 = *(bssl **)a1;
  if ((*(_WORD *)(*((void *)v5 + 6) + 220) & 0x20) != 0) {
    bssl::ext_alps_parse_serverhello_impl();
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!*(void *)(v6 + 136)) {
    bssl::ext_alps_parse_serverhello_impl();
  }
  if (!*(void *)(v6 + 144)) {
    bssl::ext_alps_parse_serverhello_impl();
  }
  if (a4 != (unsigned __int16)(*(_WORD *)(v6 + 301) & 0x2000) >> 13) {
    bssl::ext_alps_parse_serverhello_impl();
  }
  if (bssl::ssl_protocol_version(v5, a2) <= 0x303)
  {
    LOBYTE(a2->version) = 110;
    ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 3005);
    return 0;
  }
  unint64_t v10 = (void **)(*(void *)(a1 + 1520) + 424);
  uint64_t v12 = *(const void **)a3;
  unint64_t v11 = *(void *)(a3 + 8);
  int v13 = bssl::Array<unsigned char>::Init((uint64_t)v10, v11);
  char v14 = v13;
  if (v11)
  {
    if (v13) {
      memmove(*v10, v12, v11);
    }
  }
  if (v14)
  {
    *(unsigned char *)(*(void *)(a1 + 1520) + 440) |= 0x40u;
    return 1;
  }
  uint64_t result = 0;
  LOBYTE(a2->version) = 80;
  return result;
}

uint64_t bssl::ext_quic_transport_params_parse_serverhello_legacy(uint64_t a1, ssl_st *a2, uint64_t a3)
{
  return bssl::ext_quic_transport_params_parse_serverhello_impl(a1, a2, a3, 1);
}

uint64_t bssl::ext_server_certificate_type_parse_serverhello(uint64_t a1, unsigned char *a2, void *a3)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 176);
  if (!v5) {
    return 1;
  }
  if (a3)
  {
    v10[0] = *(void *)(v4 + 168);
    v10[1] = v5;
    unsigned __int8 v9 = -86;
    if (CBS_get_u8(a3, &v9) && bssl::ssl_is_certificate_type_allowed(v10, v9))
    {
      *(unsigned char *)(a1 + 73std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v9;
      *(_DWORD *)(a1 + 1584) |= 0x200000u;
      return 1;
    }
    int v8 = 3210;
  }
  else
  {
    int v8 = 3193;
  }
  ERR_put_error(16, 0, 228, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v8);
  uint64_t result = 0;
  *a2 = 47;
  return result;
}

uint64_t bssl::ext_client_certificate_type_parse_serverhello(uint64_t a1, unsigned char *a2, void *a3)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 200);
  if (!v5) {
    return 1;
  }
  if (a3)
  {
    v10[0] = *(void *)(v4 + 192);
    v10[1] = v5;
    unsigned __int8 v9 = -86;
    if (CBS_get_u8(a3, &v9) && bssl::ssl_is_certificate_type_allowed(v10, v9))
    {
      *(unsigned char *)(a1 + 731) = v9;
      *(_DWORD *)(a1 + 1584) |= 0x400000u;
      return 1;
    }
    int v8 = 3330;
  }
  else
  {
    int v8 = 3313;
  }
  ERR_put_error(16, 0, 228, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v8);
  uint64_t result = 0;
  *a2 = 47;
  return result;
}

uint64_t bssl::ext_quic_transport_params_parse_serverhello(uint64_t a1, ssl_st *a2, uint64_t a3)
{
  return bssl::ext_quic_transport_params_parse_serverhello_impl(a1, a2, a3, 0);
}

uint64_t bssl::ext_supported_groups_parse_serverhello()
{
  return 1;
}

BOOL bssl::ext_ticket_request_parse_serverhello(uint64_t a1, unsigned char *a2, void *a3)
{
  if (!a3) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v6 + 216) && !*(unsigned char *)(v6 + 217)) {
    return 1;
  }
  char v8 = -86;
  int u8 = CBS_get_u8(a3, &v8);
  BOOL result = u8 != 0;
  if (u8) {
    *(unsigned char *)(a1 + 734) = v8;
  }
  else {
    *a2 = 47;
  }
  return result;
}

BOOL bssl::cert_compression_parse_serverhello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 == 0;
}

uint64_t bssl::ext_early_data_parse_serverhello(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (a3)
  {
    uint64_t v4 = *(void *)(v3 + 48);
    __int16 v5 = *(_WORD *)(v4 + 220);
    if ((v5 & 0x2000) != 0) {
      bssl::ext_early_data_parse_serverhello();
    }
    if (*(void *)(a3 + 8))
    {
      uint64_t result = 0;
      *a2 = 50;
      return result;
    }
    if ((v5 & 0x40) == 0)
    {
      *a2 = 110;
      ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2198);
      return 0;
    }
    *(_DWORD *)(v4 + 256) = 2;
    *(_WORD *)(v4 + 22std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = v5 | 0x400;
  }
  else
  {
    uint64_t v7 = *(void *)(v3 + 48);
    if ((*((unsigned char *)a1 + 1585) & 8) == 0 || (__int16 v8 = *(_WORD *)(v7 + 220), (v8 & 0x2000) != 0))
    {
      if (!*(_DWORD *)(v7 + 256)) {
        bssl::ext_early_data_parse_serverhello();
      }
    }
    else
    {
      if ((v8 & 0x40) != 0) {
        int v9 = 4;
      }
      else {
        int v9 = 6;
      }
      *(_DWORD *)(v7 + 256) = v9;
    }
  }
  return 1;
}

uint64_t bssl::ext_channel_id_parse_serverhello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (SSL_is_dtls(*(unsigned __int8 ***)a1)) {
      bssl::ext_channel_id_parse_serverhello();
    }
    if (!*(void *)(*(void *)(a1 + 8) + 120)) {
      bssl::ext_channel_id_parse_serverhello();
    }
    if (*(void *)(a3 + 8)) {
      return 0;
    }
    *(_DWORD *)(a1 + 1584) |= 0x2000000u;
  }
  return 1;
}

uint64_t bssl::tls1_check_duplicate_extensions(long long *a1)
{
  unint64_t v2 = 0;
  long long v16 = *a1;
  while (*((void *)&v16 + 1))
  {
    LOWORD(v13[0]) = -21846;
    __base = (void *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
    if (CBS_get_u16((unsigned __int16 **)&v16, v13))
    {
      ++v2;
      if (CBS_get_u16_length_prefixed((unsigned __int8 **)&v16, (unint64_t *)&__base)) {
        continue;
      }
    }
    return 0;
  }
  if (v2)
  {
    __base = 0;
    unint64_t v15 = 0;
    if (bssl::Array<unsigned short>::Init((uint64_t)&__base, v2))
    {
      long long v16 = *a1;
      if (v15)
      {
        uint64_t v4 = 0;
        unint64_t v5 = 0;
        while (1)
        {
          v13[0] = 0xAAAAAAAAAAAAAAAALL;
          v13[1] = 0xAAAAAAAAAAAAAAAALL;
          if (!CBS_get_u16((unsigned __int16 **)&v16, (char *)__base + v4)
            || !CBS_get_u16_length_prefixed((unsigned __int8 **)&v16, v13))
          {
            break;
          }
          ++v5;
          size_t v6 = v15;
          v4 += 2;
          if (v5 >= v15) {
            goto LABEL_16;
          }
        }
      }
      else
      {
        size_t v6 = 0;
LABEL_16:
        if (*((void *)&v16 + 1)) {
          __assert_rtn("tls1_check_duplicate_extensions", "extensions.cc", 193, "CBS_len(&extensions) == 0");
        }
        qsort(__base, v6, 2uLL, (int (__cdecl *)(const void *, const void *))bssl::compare_uint16_t);
        if (v2 < 2)
        {
          BOOL v3 = 1;
LABEL_21:
          OPENSSL_free(__base);
          return v3;
        }
        int v7 = *((unsigned __int16 *)__base + 1);
        if (*(unsigned __int16 *)__base != v7)
        {
          uint64_t v9 = 2;
          do
          {
            unint64_t v10 = v9;
            if (v2 == v9) {
              break;
            }
            int v11 = *((unsigned __int16 *)__base + v9++);
            BOOL v12 = v7 == v11;
            int v7 = *((unsigned __int16 *)__base + v10);
          }
          while (!v12);
          BOOL v3 = v10 >= v2;
          goto LABEL_21;
        }
      }
    }
    BOOL v3 = 0;
    goto LABEL_21;
  }
  return 1;
}

void sub_1BA113EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::ext_ec_point_parse_serverhello(bssl **a1, ssl_st *a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  if (bssl::ssl_protocol_version(*a1, a2) > 0x303) {
    return 0;
  }
  __unsigned int s = (void *)0xAAAAAAAAAAAAAAAALL;
  size_t __n = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CBS_get_u8_length_prefixed((unsigned __int8 **)a3, (unint64_t *)&__s);
  if (!result) {
    return result;
  }
  if (*(void *)(a3 + 8)) {
    return 0;
  }
  if (__n && memchr(__s, 0, __n)) {
    return 1;
  }
  uint64_t result = 0;
  LOBYTE(a2->version) = 47;
  return result;
}

uint64_t bssl::ext_alps_parse_serverhello_old(uint64_t a1, ssl_st *a2, uint64_t a3)
{
  return bssl::ext_alps_parse_serverhello_impl(a1, a2, a3, 0);
}

uint64_t bssl::ext_ticket_parse_serverhello(uint64_t a1, const ssl_st *a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v5 = *(bssl **)a1;
    if (bssl::ssl_protocol_version(*(bssl **)a1, a2) > 0x303) {
      return 0;
    }
    if ((SSL_get_options((uint64_t)v5) & 0x4000) != 0) {
      bssl::ext_ticket_parse_serverhello();
    }
    if (*(void *)(a3 + 8)) {
      return 0;
    }
    *(_DWORD *)(a1 + 1584) |= 0x8000u;
  }
  return 1;
}

uint64_t bssl::ext_srtp_parse_serverhello(unsigned __int8 ***a1, unsigned char *a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v5 = *a1;
    if (!SSL_is_dtls(*a1)) {
      bssl::ext_srtp_parse_serverhello();
    }
    memset(v15, 170, sizeof(v15));
    unsigned __int16 v14 = -21846;
    if (!CBS_get_u16_length_prefixed((unsigned __int8 **)a3, &v15[2])
      || !CBS_get_u16((unsigned __int16 **)&v15[2], &v14)
      || v15[3]
      || !CBS_get_u8_length_prefixed((unsigned __int8 **)a3, v15)
      || *(void *)(a3 + 8))
    {
      ERR_put_error(16, 0, 116, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1735);
      return 0;
    }
    if (v15[1])
    {
      int v7 = 115;
      int v8 = 1741;
LABEL_16:
      ERR_put_error(16, 0, v7, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v8);
      uint64_t result = 0;
      *a2 = 47;
      return result;
    }
    srtp_profileunsigned int s = (EVP_MD_CTX *)SSL_get_srtp_profiles((uint64_t)v5);
    unint64_t v10 = EVP_MD_CTX_md(srtp_profiles);
    if (!v10)
    {
LABEL_15:
      int v7 = 116;
      int v8 = 1754;
      goto LABEL_16;
    }
    int v11 = v10;
    unint64_t v12 = 0;
    while (1)
    {
      int v13 = OPENSSL_sk_value((unint64_t *)srtp_profiles, v12);
      if (v13[1] == v14) {
        break;
      }
      if (v11 == (const EVP_MD *)++v12) {
        goto LABEL_15;
      }
    }
    *((void *)v5[6] + 75) = v13;
  }
  return 1;
}

BOOL bssl::ext_ocsp_parse_serverhello(uint64_t a1, const ssl_st *a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) > 0x303 || *(void *)(a3 + 8)) {
    return 0;
  }
  BOOL result = bssl::ssl_cipher_uses_certificate_auth(*(bssl **)(a1 + 1552), v5);
  if (result)
  {
    *(_DWORD *)(a1 + 1584) |= 0x40u;
    return 1;
  }
  return result;
}

uint64_t bssl::ext_alps_parse_serverhello(uint64_t a1, ssl_st *a2, uint64_t a3)
{
  return bssl::ext_alps_parse_serverhello_impl(a1, a2, a3, 1);
}

uint64_t bssl::ext_alpn_parse_serverhello(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (!a3)
  {
    if (*(void *)(v4 + 168))
    {
      ERR_put_error(16, 0, 307, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1411);
      uint64_t result = 0;
      char v13 = 120;
LABEL_18:
      *a2 = v13;
      return result;
    }
    return 1;
  }
  if ((*(_WORD *)(*(void *)(v4 + 48) + 220) & 0x20) != 0) {
    bssl::ext_alpn_parse_serverhello();
  }
  if (!*(void *)(a1[1] + 136)) {
    bssl::ext_alpn_parse_serverhello();
  }
  if ((*((unsigned char *)a1 + 1585) & 0x40) != 0)
  {
    *a2 = 47;
    ERR_put_error(16, 0, 170, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1424);
    return 0;
  }
  memset(v14, 170, sizeof(v14));
  uint64_t result = CBS_get_u16_length_prefixed((unsigned __int8 **)a3, &v14[2]);
  if (!result) {
    return result;
  }
  if (*(void *)(a3 + 8)) {
    return 0;
  }
  uint64_t result = CBS_get_u8_length_prefixed((unsigned __int8 **)&v14[2], v14);
  if (result)
  {
    uint64_t result = 0;
    if (v14[1])
    {
      if (!v14[3])
      {
        if ((bssl::ssl_is_alpn_protocol_allowed(a1, (const void *)v14[0], v14[1]) & 1) == 0)
        {
          ERR_put_error(16, 0, 259, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1441);
          char v13 = 47;
          goto LABEL_24;
        }
        int v8 = (void **)(*(void *)(v4 + 48) + 496);
        uint64_t v9 = (const void *)v14[0];
        size_t v10 = v14[1];
        int v11 = bssl::Array<unsigned char>::Init((uint64_t)v8, v14[1]);
        char v12 = v11;
        if (v10)
        {
          if (v11) {
            memmove(*v8, v9, v10);
          }
        }
        if ((v12 & 1) == 0)
        {
          char v13 = 80;
LABEL_24:
          uint64_t result = 0;
          goto LABEL_18;
        }
        return 1;
      }
    }
  }
  return result;
}

BOOL bssl::ext_sni_parse_serverhello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return !a3 || *(void *)(a3 + 8) == 0;
}

uint64_t bssl::ext_sct_parse_serverhello(uint64_t a1, ssl_st *a2, long long *a3)
{
  if (!a3) {
    return 1;
  }
  size_t v6 = *(bssl **)a1;
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) > 0x303) {
    goto LABEL_8;
  }
  if ((*(_WORD *)(*(void *)(a1 + 8) + 301) & 2) == 0) {
    bssl::ext_sct_parse_serverhello();
  }
  if (bssl::ssl_is_sct_list_valid(a3))
  {
    if ((*(_WORD *)(*((void *)v6 + 6) + 220) & 0x40) != 0) {
      return 1;
    }
    int v7 = (unsigned int **)(*(void *)(a1 + 1520) + 248);
    int v8 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)a3, *(void ***)(*((void *)v6 + 15) + 776));
    std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](v7, v8);
    if (*(void *)(*(void *)(a1 + 1520) + 248)) {
      return 1;
    }
    char v10 = 80;
  }
  else
  {
LABEL_8:
    char v10 = 50;
  }
  uint64_t result = 0;
  LOBYTE(a2->version) = v10;
  return result;
}

uint64_t bssl::ext_npn_parse_serverhello(uint64_t a1, ssl_st *a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  size_t v6 = *(bssl **)a1;
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) > 0x303) {
    return 0;
  }
  if ((*(_WORD *)(*((void *)v6 + 6) + 220) & 0x20) != 0) {
    bssl::ext_npn_parse_serverhello();
  }
  if (SSL_is_dtls((unsigned __int8 **)v6)) {
    bssl::ext_npn_parse_serverhello();
  }
  uint64_t v7 = *((void *)v6 + 15);
  int v8 = *(unsigned int (**)(bssl *, const void **, unsigned __int8 *, unsigned __int8 *, uint64_t, void))(v7 + 592);
  if (!v8) {
    bssl::ext_npn_parse_serverhello();
  }
  if (*(void *)(*((void *)v6 + 6) + 504))
  {
    LOBYTE(a2->version) = 47;
    ERR_put_error(16, 0, 170, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1194);
    return 0;
  }
  char v10 = *(unsigned __int8 **)a3;
  uint64_t v11 = *(void *)(a3 + 8);
  if (!v11)
  {
LABEL_14:
    id v19 = (const void *)0xAAAAAAAAAAAAAAAALL;
    unsigned __int8 v18 = -86;
    if (v8(v6, &v19, &v18, v10, v11, *(void *)(v7 + 600))) {
      goto LABEL_22;
    }
    char v13 = (void **)(*((void *)v6 + 6) + 480);
    unsigned __int16 v14 = v19;
    size_t v15 = v18;
    int v16 = bssl::Array<unsigned char>::Init((uint64_t)v13, v18);
    char v17 = v16;
    if (v15)
    {
      if (v16) {
        memmove(*v13, v14, v15);
      }
    }
    if ((v17 & 1) == 0)
    {
LABEL_22:
      uint64_t result = 0;
      LOBYTE(a2->version) = 80;
      return result;
    }
    *(_DWORD *)(a1 + 1584) |= 0x4000u;
    return 1;
  }
  while (1)
  {
    id v19 = (const void *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
    u8_length_prefixeunsigned int d = CBS_get_u8_length_prefixed((unsigned __int8 **)a3, (unint64_t *)&v19);
    uint64_t result = 0;
    if (!u8_length_prefixed || !v20) {
      return result;
    }
    if (!*(void *)(a3 + 8))
    {
      uint64_t v7 = *((void *)v6 + 15);
      int v8 = *(unsigned int (**)(bssl *, const void **, unsigned __int8 *, unsigned __int8 *, uint64_t, void))(v7 + 592);
      goto LABEL_14;
    }
  }
}

uint64_t bssl::ext_ems_parse_serverhello(uint64_t a1, ssl_st *a2, uint64_t a3)
{
  unint64_t v5 = *(bssl **)a1;
  if (a3)
  {
    if (bssl::ssl_protocol_version(*(bssl **)a1, a2) > 0x303 || *(void *)(a3 + 8)) {
      return 0;
    }
    *(_DWORD *)(a1 + 1584) |= 0x10000u;
  }
  uint64_t v8 = *(void *)(*((void *)v5 + 6) + 472);
  if (!v8 || (HIWORD(*(_DWORD *)(a1 + 1584)) & 1) == (*(unsigned char *)(v8 + 440) & 1)) {
    return 1;
  }
  ERR_put_error(16, 0, 263, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 903);
  uint64_t result = 0;
  LOBYTE(a2->version) = 47;
  return result;
}

uint64_t bssl::ext_ech_parse_serverhello(bssl **a1, ssl_st *a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  size_t v6 = *a1;
  if (bssl::ssl_protocol_version(*a1, a2) < 0x304 || *(_DWORD *)(*((void *)v6 + 6) + 216) == 1)
  {
    LOBYTE(a2->version) = 110;
    ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 629);
    return 0;
  }
  if (bssl::ssl_is_valid_ech_config_list(*(unsigned __int8 **)a3, *(void *)(a3 + 8)))
  {
    if (*(_DWORD *)(*((void *)v6 + 6) + 216) != 2) {
      return 1;
    }
    uint64_t v8 = (void **)(a1 + 73);
    char v10 = *(unsigned __int8 **)a3;
    unint64_t v9 = *(void *)(a3 + 8);
    int v11 = bssl::Array<unsigned char>::Init((uint64_t)v8, v9);
    char v12 = v11;
    if (v9)
    {
      if (v11) {
        memmove(*v8, v10, v9);
      }
    }
    if (v12) {
      return 1;
    }
    uint64_t result = 0;
    char v13 = 80;
  }
  else
  {
    uint64_t result = 0;
    char v13 = 50;
  }
  LOBYTE(a2->version) = v13;
  return result;
}

uint64_t bssl::ext_ri_parse_serverhello(bssl **a1, ssl_st *a2, uint64_t a3)
{
  unint64_t v5 = *a1;
  if (a3 && bssl::ssl_protocol_version(*a1, a2) >= 0x304) {
    goto LABEL_21;
  }
  uint64_t v6 = *((void *)v5 + 6);
  __int16 v7 = *(_WORD *)(v6 + 220);
  if ((v7 & 0x20) != 0 && (a3 != 0) == ((v7 & 0x80) == 0))
  {
    LOBYTE(a2->version) = 40;
    ERR_put_error(16, 0, 202, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 741);
    return 0;
  }
  else
  {
    if (a3)
    {
      uint64_t v8 = *(unsigned __int8 *)(v6 + 455);
      uint64_t v9 = *(unsigned __int8 *)(v6 + 456);
      uint64_t v10 = v9 + v8;
      if (v8) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v10 == 0;
      }
      if (!v11) {
        bssl::ext_ri_parse_serverhello();
      }
      if (v9) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v10 == 0;
      }
      if (!v12) {
        bssl::ext_ri_parse_serverhello();
      }
      unsigned int v13 = v7 & 0x20;
      if ((v8 != 0) != v13 >> 5) {
        bssl::ext_ri_parse_serverhello();
      }
      if ((v9 != 0) != v13 >> 5) {
        bssl::ext_ri_parse_serverhello();
      }
      unsigned __int8 v18 = (char *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      if (!CBS_get_u8_length_prefixed((unsigned __int8 **)a3, (unint64_t *)&v18)
        || *(void *)(a3 + 8))
      {
        ERR_put_error(16, 0, 201, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 771);
LABEL_21:
        uint64_t result = 0;
        char v15 = 47;
LABEL_22:
        LOBYTE(a2->version) = v15;
        return result;
      }
      if (v19 != v10)
      {
        int v17 = 778;
        goto LABEL_28;
      }
      int v16 = v18;
      if (CRYPTO_memcmp(v18, (char *)(*((void *)v5 + 6) + 443), *(unsigned __int8 *)(*((void *)v5 + 6) + 455)))
      {
        int v17 = 790;
LABEL_28:
        ERR_put_error(16, 0, 202, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v17);
        uint64_t result = 0;
        char v15 = 40;
        goto LABEL_22;
      }
      if (CRYPTO_memcmp(&v16[*(unsigned __int8 *)(*((void *)v5 + 6) + 455)], (char *)(*((void *)v5 + 6) + 457), *(unsigned __int8 *)(*((void *)v5 + 6) + 456)))
      {
        int v17 = 802;
        goto LABEL_28;
      }
      *(_WORD *)(*((void *)v5 + 6) + 220) |= 0x80u;
    }
    return 1;
  }
}

uint64_t bssl::ssl_is_alpn_protocol_allowed(void *a1, const void *a2, size_t a3)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(v3 + 136);
  if (!v4) {
    return 0;
  }
  if ((*(_WORD *)(*(void *)(*a1 + 120) + 832) & 0x80) != 0) {
    return 1;
  }
  uint64_t v10 = *(unsigned __int8 **)(v3 + 128);
  uint64_t v11 = v4;
  __s1 = (void *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  while (1)
  {
    uint64_t result = CBS_get_u8_length_prefixed(&v10, (unint64_t *)&__s1);
    if (!result) {
      break;
    }
    if (v9 == a3 && !memcmp(__s1, a2, a3)) {
      return 1;
    }
    if (!v11) {
      return 0;
    }
  }
  return result;
}

SSL_CTX *__cdecl SSL_CTX_new(SSL_METHOD *meth)
{
  unint64_t v9 = meth;
  if (!meth)
  {
    ERR_put_error(16, 0, 186, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 570);
    return 0;
  }
  bssl::New<ssl_ctx_st,ssl_method_st const*&>(&v9);
  uint64_t v2 = v1;
  uint64_t v8 = v1;
  if (v1)
  {
    uint64_t v3 = (bssl::CERT *)bssl::New<bssl::CERT,bssl::SSL_X509_METHOD const* const&>(&v9->ssl_clear);
    __int16 v7 = 0;
    std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::CERT **)(v2 + 432), v3);
    std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100](&v7, 0);
    *(void *)(v2 + 264) = OPENSSL_lh_new((uint64_t)ssl_session_hash, (uint64_t)ssl_session_cmp);
    uint64_t v4 = OPENSSL_sk_new_null();
    std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)(v2 + 400), v4);
    uint64_t v5 = *(void *)(v2 + 432);
    if (!v5
      || !*(void *)(v5 + 24)
      || !*(void *)(v2 + 264)
      || !*(void *)(v2 + 400)
      || ((*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 120))(v2) & 1) == 0)
    {
      goto LABEL_12;
    }
    if (!SSL_CTX_set_strict_cipher_list(v2, (uint64_t)"ALL")
      || !SSL_CTX_set_max_proto_version(v2, LOWORD(v9->version))
      || !SSL_CTX_set_min_proto_version(v2, LOWORD(v9->version)))
    {
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 595);
LABEL_12:
      uint64_t v8 = 0;
      bssl::RefCounted<ssl_ctx_st>::DecRefInternal((ssl_ctx_st *)v2);
      return 0;
    }
  }
  return (SSL_CTX *)v2;
}

void sub_1BA114BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<ssl_ctx_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_ctx_st **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t bssl::ssl_noop_x509_ssl_ctx_new(bssl *this, ssl_ctx_st *a2)
{
  return 1;
}

void *bssl::New<bssl::CERT,bssl::SSL_X509_METHOD const* const&>(void *a1)
{
  uint64_t result = OPENSSL_malloc(0x80uLL);
  if (result) {
    return (void *)bssl::CERT::CERT(result, *a1);
  }
  return result;
}

uint64_t bssl::CERT::CERT(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unsigned int v5 = 0;
  *(void *)(a1 + 24) = bssl::New<ssl_credential_st,bssl::SSLCredentialType>(&v5);
  *(void *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 4std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 12std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](this, 0) = 0;
  return a1;
}

void sub_1BA114C9C(_Unwind_Exception *a1)
{
  bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array(v1 + 8);
  _Unwind_Resume(a1);
}

void bssl::New<ssl_ctx_st,ssl_method_st const*&>(const ssl_method_st **a1)
{
  uint64_t v2 = (ssl_ctx_st *)OPENSSL_malloc(0x348uLL);
  if (v2) {
    ssl_ctx_st::ssl_ctx_st(v2, *a1);
  }
}

void ssl_ctx_st::ssl_ctx_st(ssl_ctx_st *this, const ssl_method_st *a2)
{
  int v2 = (int)this;
  LODWORD(this->method) = 1;
  *(_OWORD *)&this->cipher_list = *(_OWORD *)&a2->ssl_new;
  LODWORD(this->rsa_md5) = 0;
  BYTE4(this->rsa_md5) = 2;
  *(_OWORD *)&this->md5 = 0u;
  *(_OWORD *)&this->comp_methodunsigned int s = 0u;
  this->client_CA = (STACK *)20480;
  *(_OWORD *)&this->optionunsigned int s = 0u;
  this->max_cert_list = 0x200000000;
  this->cert = (cert_st *)0x2A30000001C20;
  this->default_verify_callbacuint64_t k = 0;
  *(_OWORD *)this->sid_EVP_MD_CTX ctx = 0u;
  *(_OWORD *)&this->sid_ctx[16] = 0u;
  *(_OWORD *)&this->read_aheaunsigned int d = 0u;
  *(_OWORD *)&this->msg_callback_arg = 0u;
  this->client_cert_engine = 0;
  LODWORD(this->tlsext_servername_callback) = 0;
  *(_OWORD *)&this->param = 0u;
  *(int (__cdecl **)(SSL *, int *, void *))((char *)&this->tlsext_servername_callback + 4) = (int (__cdecl *)(SSL *, int *, void *))0x1900000000008;
  *(void *)this->tlsext_tick_hmac_key = 0;
  *(_DWORD *)&this->tlsext_tick_hmac_key[8] = 0;
  *(_OWORD *)this->tlsext_tick_key_name = 0u;
  *(_OWORD *)this->tlsext_tick_aes_key = 0u;
  *(_OWORD *)&this->tlsext_ticket_key_cb = 0u;
  LOBYTE(this->tlsext_status_arg) = 0;
  WORD1(this->tlsext_status_arg) = 0x4000;
  *(_OWORD *)&this[1].read_aheaunsigned int d = 0u;
  *(_OWORD *)&this[1].methounsigned int d = 0u;
  *(_OWORD *)&this[1].cipher_list_by_iunsigned int d = 0u;
  *(_OWORD *)&this[1].sessionunsigned int s = 0u;
  *(_OWORD *)&this[1].session_cache_heaunsigned int d = 0u;
  *(_OWORD *)&this[1].session_cache_mode = 0u;
  *(_OWORD *)&this[1].new_session_cb = 0u;
  *(_OWORD *)&this[1].get_session_cb = 0u;
  *(_OWORD *)&this[1].stats.sess_connect_goounsigned int d = 0u;
  *(_OWORD *)&this[1].stats.sess_misunsigned int s = 0u;
  *(_OWORD *)&this[1].stats.sess_cb_hit = 0u;
  *(_OWORD *)&this[1].app_verify_arg = 0u;
  *(_OWORD *)((char *)&this[1].default_passwd_callback + 2) = 0u;
  LODWORD(this[1].cert) = 0;
  *(_OWORD *)&this[1].client_CA = 0u;
  *(_OWORD *)&this[1].mode = 0u;
  *(_OWORD *)&this[1].sha1 = 0u;
  *(_OWORD *)&this[1].comp_methodunsigned int s = 0u;
  this[1].ex_data = 0u;
  *(_OWORD *)&this[1].rsa_md5 = 0u;
  LOWORD(this[1].msg_callback_arg) &= 0xE000u;
  *(_OWORD *)&this[1].app_gen_cookie_cb = 0u;
  CRYPTO_MUTEX_init((pthread_rwlock_t *)&this->cert_store);
  CRYPTO_new_ex_data(v2 + 384, v3, v4);
}

void sub_1BA114E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object)
{
  bssl::Array<unsigned short>::~Array(v18);
  std::unique_ptr<ssl_ech_keys_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(v17 + 752), 0);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)(v17 + 744), 0);
  bssl::Array<unsigned short>::~Array(v17 + 728);
  bssl::Array<unsigned short>::~Array(v17 + 712);
  std::unique_ptr<stack_st_SRTP_PROTECTION_PROFILE,bssl::internal::Deleter>::reset[abi:ne180100](v19, 0);
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)(v17 + 680), 0);
  bssl::Array<unsigned short>::~Array(v17 + 664);
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)(v17 + 656), 0);
  bssl::Array<unsigned short>::~Array(v17 + 640);
  bssl::Array<unsigned short>::~Array(v17 + 624);
  std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)(v17 + 544), 0);
  std::unique_ptr<bssl::TicketKey,bssl::internal::Deleter>::reset[abi:ne180100]((void **)(v17 + 528), 0);
  std::unique_ptr<bssl::TicketKey,bssl::internal::Deleter>::reset[abi:ne180100]((void **)(v17 + 520), 0);
  std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100](v16, 0);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)(v17 + 400), 0);
  std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLCipherPreferenceList **)(v17 + 240), 0);
  _Unwind_Resume(a1);
}

uint64_t CRYPTO_MUTEX_init(pthread_rwlock_t *a1)
{
  uint64_t result = pthread_rwlock_init(a1, 0);
  if (result) {
    abort();
  }
  return result;
}

SSL *__cdecl SSL_new(SSL_CTX *ctx)
{
  char v53 = ctx;
  if (!ctx)
  {
    ERR_put_error(16, 0, 185, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 640);
    return 0;
  }
  bssl::New<ssl_st,ssl_ctx_st *&>((ssl2_state_st **)&v53);
  __int16 v52 = v1;
  if (!v1) {
    goto LABEL_40;
  }
  __int16 v50 = v1;
  bssl::New<bssl::SSL_CONFIG,ssl_st *>(&v50);
  int v51 = 0;
  std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&v52->method, v2);
  std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&v51, 0);
  methounsigned int d = v52->method;
  if (!method) {
    goto LABEL_40;
  }
  uint64_t v4 = (ssl2_state_st *)v53;
  LODWORD(method->ssl_new) = v53->rsa_md5;
  bssl::ssl_cert_dup(*(bssl **)&v4[1].ract_data_length, &v51);
  unsigned int v5 = (bssl::CERT *)v51;
  p_ssl_accept = &v52->method->ssl_accept;
  int v51 = 0;
  std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::CERT **)p_ssl_accept, v5);
  std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::CERT **)&v51, 0);
  __int16 v7 = v52;
  uint64_t v8 = v52->method;
  if (!v8->ssl_accept) {
    goto LABEL_40;
  }
  unint64_t v9 = (ssl2_state_st *)v53;
  BYTE4(v8[1].ssl_write) = *(_DWORD *)&v53->tlsext_tick_hmac_key[8];
  v8->ssl_connect = (int (__cdecl *)(SSL *))v9[1].mac_data;
  v7->method->ssl_reaunsigned int d = *(int (__cdecl **)(SSL *, void *, int))&v9[1].escape;
  *(_WORD *)((char *)&v7->method[1].ssl_write + 5) = *(_WORD *)((unsigned char *)&v7->method[1].ssl_write + 5) & 0xFFDF | (32 * (v9[2].challenge_length & 1));
  *(_WORD *)((char *)&v7->method[1].ssl_write + 5) = *(_WORD *)((unsigned char *)&v7->method[1].ssl_write + 5) & 0xFBFF | (16 * LOWORD(v9[2].challenge_length)) & 0x400;
  *(_WORD *)((char *)&v7->method[1].ssl_write + 5) = *(_WORD *)((unsigned char *)&v7->method[1].ssl_write + 5) & 0xF7FF | v9[2].challenge_length & 0x800;
  *(_WORD *)((char *)&v7->method[1].ssl_write + 5) = *(_WORD *)((unsigned char *)&v7->method[1].ssl_write + 5) & 0xEFFF | v9[2].challenge_length & 0x1000;
  uint64_t v10 = v7->method;
  LODWORD(v10[1].ssl_write) = v9[2].mac_data;
  uint64_t v11 = *(const void **)&v9[2].wpend_ret;
  uint64_t v12 = *(void *)&v9[2].rbuf_offs;
  p_ssl_read_byteunsigned int s = (void **)&v10->ssl_read_bytes;
  int v14 = bssl::Array<unsigned short>::Init((uint64_t)&v10->ssl_read_bytes, v12);
  char v15 = v14 ^ 1;
  if (!v12) {
    char v15 = 1;
  }
  if ((v15 & 1) == 0) {
    memmove(*p_ssl_read_bytes, v11, 2 * v12);
  }
  if (!v14) {
    goto LABEL_40;
  }
  int v16 = *(const void **)&v53[1].stats.sess_accept_renegotiate;
  unint64_t v17 = *(void *)&v53[1].stats.sess_miss;
  p_ssl_ctrl = (void **)&v52->method->ssl_ctrl;
  int v19 = bssl::Array<unsigned char>::Init((uint64_t)p_ssl_ctrl, v17);
  char v20 = v19 ^ 1;
  if (!v17) {
    char v20 = 1;
  }
  if ((v20 & 1) == 0) {
    memmove(*p_ssl_ctrl, v16, v17);
  }
  if (!v19) {
    goto LABEL_40;
  }
  char v21 = *(unsigned __int8 **)&v53[1].read_ahead;
  msg_callbacuint64_t k = (uint64_t)v53[1].msg_callback;
  p_ssl_free = (void **)&v52->method[1].ssl_free;
  char v24 = bssl::Array<unsigned short>::Init((uint64_t)p_ssl_free, msg_callback);
  char v25 = v24 ^ 1;
  if (!msg_callback) {
    char v25 = 1;
  }
  if ((v25 & 1) == 0) {
    memmove(*p_ssl_free, v21, 2 * msg_callback);
  }
  if ((v24 & 1) == 0) {
    goto LABEL_40;
  }
  uint64_t v26 = v52;
  uint64_t v27 = (ssl2_state_st *)v53;
  session_cache_unsigned int size = (const char *)v53[1].session_cache_size;
  uint64_t v29 = v52->method;
  if (session_cache_size)
  {
    uint64_t v30 = (char *)OPENSSL_strdup(session_cache_size);
    std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&v29->ssl_peek, v30);
    uint64_t v26 = v52;
    uint64_t v29 = v52->method;
    if (!v29->ssl_peek)
    {
LABEL_40:
      BOOL v48 = 0;
      goto LABEL_41;
    }
    uint64_t v27 = (ssl2_state_st *)v53;
  }
  v29->ssl_write = *(int (__cdecl **)(SSL *, const void *, int))&v27[1].key_material[4];
  v26->method->ssl_shutdown = *(int (__cdecl **)(SSL *))&v27[1].key_material[12];
  v26->method->ssl_renegotiate = *(int (__cdecl **)(SSL *))&v27[1].key_material[20];
  *(_WORD *)((char *)&v26->method[1].ssl_write + 5) = *(_WORD *)((unsigned char *)&v26->method[1].ssl_write + 5) & 0xFFF7 | (LOWORD(v27[2].challenge_length) >> 1) & 8;
  rbuf = (EVP_PKEY *)v27[2].rbuf;
  if (rbuf)
  {
    EVP_PKEY_up_ref((unsigned int *)v27[2].rbuf);
    uint64_t v26 = v52;
  }
  p_ssl_dispatch_alert = (EVP_PKEY **)&v26->method->ssl_dispatch_alert;
  int v51 = 0;
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](p_ssl_dispatch_alert, rbuf);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)&v51, 0);
  int v34 = v52;
  int v33 = (ssl2_state_st *)v53;
  *(_WORD *)((char *)&v52->method[1].ssl_write + 5) = *(_WORD *)((unsigned char *)&v52->method[1].ssl_write + 5) & 0xFFFD | (LOWORD(v53[1].msg_callback_arg) >> 2) & 2;
  *(_WORD *)((char *)&v34->method[1].ssl_write + 5) = *(_WORD *)((unsigned char *)&v34->method[1].ssl_write + 5) & 0xFFFB | v33[2].challenge_length & 4;
  *(_WORD *)((char *)&v34->method[1].ssl_write + 5) = *(_WORD *)((unsigned char *)&v34->method[1].ssl_write + 5) & 0xFFBF | (LOWORD(v33[2].challenge_length) >> 3) & 0x40;
  *(void *)&v34->hit = *(void *)&v33->key_material[28];
  uint64_t v35 = *(const void **)v33[1].tmp.ccl;
  unint64_t v36 = *(void *)&v33[1].tmp.ccl[8];
  p_num_cipherunsigned int s = (void **)&v34->method->num_ciphers;
  int v38 = bssl::Array<unsigned char>::Init((uint64_t)p_num_ciphers, v36) ^ 1;
  if (!v36) {
    LOBYTE(v3EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 1;
  }
  if ((v38 & 1) == 0) {
    memmove(*p_num_ciphers, v35, v36);
  }
  app_verify_callbacuint64_t k = (ssl_credential_st *)v53[1].app_verify_callback;
  if (app_verify_callback) {
    SSL_CREDENTIAL_up_ref(v53[1].app_verify_callback);
  }
  p_get_ssl_methounsigned int d = &v52->method->get_ssl_method;
  int v51 = 0;
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)p_get_ssl_method, app_verify_callback);
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)&v51, 0);
  app_verify_arg = v53[1].app_verify_arg;
  default_passwd_callbacuint64_t k = (unint64_t)v53[1].default_passwd_callback;
  p_get_timeout = (void **)&v52->method->get_timeout;
  int v44 = bssl::Array<unsigned char>::Init((uint64_t)p_get_timeout, default_passwd_callback) ^ 1;
  if (!default_passwd_callback) {
    LOBYTE(v44) = 1;
  }
  if ((v44 & 1) == 0) {
    memmove(*p_get_timeout, app_verify_arg, default_passwd_callback);
  }
  default_passwd_callback_userdata = (ssl_credential_st *)v53[1].default_passwd_callback_userdata;
  if (default_passwd_callback_userdata) {
    SSL_CREDENTIAL_up_ref(v53[1].default_passwd_callback_userdata);
  }
  p_ssl_version = &v52->method->ssl_version;
  int v51 = 0;
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)p_ssl_version, default_passwd_callback_userdata);
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)&v51, 0);
  uint64_t v47 = v52;
  LOWORD(v52->method->ssl_callback_ctrl) = v53[1].client_cert_cb;
  if (!(*(unsigned int (**)(ssl_st *))(*(void *)&v47->version + 8))(v47)
    || ((*(uint64_t (**)(void))(*(void *)&v52->s2->wnum + 88))(*((void *)v52->handshake_func + 35)) & 1) == 0)
  {
    goto LABEL_40;
  }
  BOOL v48 = v52;
  __int16 v52 = 0;
LABEL_41:
  std::unique_ptr<ssl_st,bssl::internal::Deleter>::reset[abi:ne180100](&v52, 0);
  return v48;
}

void sub_1BA115434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<ssl_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_st **)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100](ssl_credential_st **a1, ssl_credential_st *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    bssl::RefCounted<ssl_credential_st>::DecRefInternal(v3);
  }
}

void std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100](bssl::CERT **a1, bssl::CERT *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    bssl::CERT::~CERT(v3);
    OPENSSL_free(v4);
  }
}

uint64_t bssl::Array<unsigned short>::Init(uint64_t a1, uint64_t a2)
{
  OPENSSL_free(*(void **)a1);
  *(void *)a1 = 0;
  *(void *)(a1 + EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0;
  if (!a2) {
    return 1;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t result = (uint64_t)OPENSSL_malloc(2 * a2);
    *(void *)a1 = result;
    if (!result) {
      return result;
    }
    *(void *)(a1 + EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = a2;
    return 1;
  }
  ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/internal.h", 297);
  return 0;
}

void std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100](BUF_MEM ***a1, BUF_MEM **a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    bssl::SSL_CONFIG::~SSL_CONFIG(v3);
    OPENSSL_free(v4);
  }
}

void bssl::RefCounted<ssl_credential_st>::DecRefInternal(ssl_credential_st *a1)
{
  if (CRYPTO_refcount_dec_and_test_zero((unsigned int *)a1))
  {
    ssl_credential_st::~ssl_credential_st(a1);
    OPENSSL_free(v2);
  }
}

void ssl_credential_st::~ssl_credential_st(ssl_credential_st *this)
{
}

void std::unique_ptr<ssl_st,bssl::internal::Deleter>::reset[abi:ne180100](ssl_st **a1, ssl_st *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    ssl_st::~ssl_st(v3);
    OPENSSL_free(v4);
  }
}

uint64_t bssl::ssl_noop_x509_ssl_new(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  return 1;
}

double bssl::New<bssl::SSL_CONFIG,ssl_st *>(ssl_st **a1)
{
  int v2 = (bssl::SSL_CONFIG *)OPENSSL_malloc(0x130uLL);
  if (v2) {
    return bssl::SSL_CONFIG::SSL_CONFIG(v2, *a1);
  }
  return result;
}

void bssl::New<ssl_st,ssl_ctx_st *&>(ssl2_state_st **a1)
{
  int v2 = (ssl_st *)OPENSSL_malloc(0xB8uLL);
  if (v2) {
    ssl_st::ssl_st(v2, *a1);
  }
}

void ssl_st::ssl_st(ssl_st *this, ssl2_state_st *a2)
{
  *(void *)&this->version = *(void *)&a2->escape;
  this->methounsigned int d = 0;
  __int16 v4 = *(_WORD *)&a2[1].challenge[6];
  *(void *)&this->server = 0;
  *(_OWORD *)&this->rwint state = 0u;
  *(_OWORD *)&this->wbio = 0u;
  long long v5 = *(_OWORD *)&a2[1].wact_data_length;
  this->packet = 0;
  LOWORD(this->rbio) = 0;
  WORD1(this->rbio) = v4;
  *(_OWORD *)&this->quiet_shutdown = v5;
  this->init_buf = 0;
  this->init_msg = 0;
  this->init_uint64_t num = 1000;
  *(void *)&this->packet_length = 0;
  CRYPTO_refcount_inc((unsigned int *)a2);
  this->s2 = a2;
  CRYPTO_refcount_inc((unsigned int *)a2);
  s2 = this->s2;
  *(void *)&this->read_aheaunsigned int d = s2[1].write_ptr;
  unsigned int padding = s2[1].padding;
  this->msg_callback_arg = 0;
  this->s3 = (ssl3_state_st *)a2;
  LODWORD(this->msg_callback) = padding;
  *(void *)&this->hit = 0;
  LODWORD(this->param) = 0;
  LOBYTE(padding) = BYTE4(this->param);
  BYTE4(this->param) = padding & 0xFE;
  LOBYTE(padding) = s2[2].challenge_length & 2 | padding & 0xFC;
  BYTE4(this->param) = padding;
  BYTE4(this->param) = BYTE1(s2[2].challenge_length) & 4 | padding & 0xFB;
  CRYPTO_new_ex_data(this + 136, v8, v9);
}

void sub_1BA1157E8(_Unwind_Exception *a1)
{
  std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100](v6, 0);
  std::unique_ptr<ssl_ctx_st,bssl::internal::Deleter>::reset[abi:ne180100](v5, 0);
  std::unique_ptr<ssl_ctx_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_ctx_st **)(v4 + 16), 0);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)v4, 0);
  std::unique_ptr<bio_st,bssl::internal::Deleter>::reset[abi:ne180100]((BIO **)(v3 + 32), 0);
  std::unique_ptr<bio_st,bssl::internal::Deleter>::reset[abi:ne180100](v2, 0);
  std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void bssl::ssl_cert_dup(bssl *this@<X0>, ssl_credential_st ***a2@<X8>)
{
  uint64_t v18 = (ssl_credential_st **)bssl::New<bssl::CERT,bssl::SSL_X509_METHOD const*&>((uint64_t *)this + 4);
  if (!v18)
  {
LABEL_14:
    int v14 = 0;
    goto LABEL_15;
  }
  if (*(void *)this)
  {
    long long v5 = (ssl_credential_st **)*((void *)this + 1);
    uint64_t v6 = 8 * *(void *)this;
    do
    {
      __int16 v7 = (unint64_t *)v18;
      uint64_t v8 = *v5;
      if (*v5) {
        SSL_CREDENTIAL_up_ref(*v5);
      }
      unint64_t v17 = v8;
      char v9 = bssl::GrowableArray<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::Push(v7, &v17);
      uint64_t v10 = v17;
      unint64_t v17 = 0;
      if (v10) {
        SSL_CREDENTIAL_free(v10);
      }
      if ((v9 & 1) == 0) {
        goto LABEL_14;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  ssl_credential_st::Dup(*((ssl_credential_st **)this + 3), &v16);
  uint64_t v11 = v16;
  int v16 = 0;
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100](v18 + 3, v11);
  uint64_t v12 = v16;
  int v16 = 0;
  if (v12) {
    SSL_CREDENTIAL_free(v12);
  }
  unsigned int v13 = v18;
  int v14 = (ssl_credential_st **)v18[3];
  if (v14)
  {
    *((_OWORD *)v18 + 4) = *((_OWORD *)this + 4);
    (*((void (**)(void))v13[4] + 3))();
    int v14 = v18;
    *((unsigned char *)v18 + 8EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = *((unsigned char *)this + 88);
    long long v15 = *(_OWORD *)((char *)this + 89);
    *(_OWORD *)((char *)v14 + 105) = *(_OWORD *)((char *)this + 105);
    *(_OWORD *)((char *)v14 + 89) = v15;
    uint64_t v18 = 0;
  }
LABEL_15:
  *a2 = v14;
  std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::CERT **)&v18, 0);
}

void sub_1BA11598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::CERT **)va, 0);
  _Unwind_Resume(a1);
}

void *bssl::New<bssl::CERT,bssl::SSL_X509_METHOD const*&>(uint64_t *a1)
{
  double result = OPENSSL_malloc(0x80uLL);
  if (result) {
    return (void *)bssl::CERT::CERT((uint64_t)result, *a1);
  }
  return result;
}

double bssl::SSL_CONFIG::SSL_CONFIG(bssl::SSL_CONFIG *this, ssl_st *a2)
{
  *(void *)thiunsigned int s = a2;
  *((_DWORD *)this + 2) = 0;
  double result = 0.0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + EVP_AEAD_CTX_cleanup((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)this + 1, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 202) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *(_OWORD *)((char *)this + 285) = 0u;
  *(_WORD *)((char *)this + 301) = *(_WORD *)((unsigned char *)this + 301) & 0x1800 | 0xC000;
  if (!a2) {
    __assert_rtn("SSL_CONFIG", "ssl_lib.cc", 746, "ssl");
  }
  return result;
}

void sub_1BA115AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object)
{
  bssl::Array<unsigned short>::~Array(v16 + 280);
  std::unique_ptr<stack_st_SRTP_PROTECTION_PROFILE,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM **)(v16 + 272), 0);
  bssl::Array<unsigned short>::~Array(v16 + 256);
  bssl::Array<unsigned short>::~Array(v16 + 240);
  bssl::Array<unsigned short>::~Array(v17);
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)(v16 + 208), 0);
  bssl::Array<unsigned short>::~Array(v16 + 192);
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)(v16 + 184), 0);
  bssl::Array<unsigned short>::~Array(v16 + 168);
  bssl::Array<bssl::ALPSConfig>::~Array(v16 + 152);
  bssl::Array<unsigned short>::~Array(v16 + 128);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)(v16 + 120), 0);
  bssl::Array<unsigned short>::~Array(v16 + 104);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)(v16 + 88), 0);
  std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)(v16 + 56), 0);
  std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::CERT **)(v16 + 32), 0);
  std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLCipherPreferenceList **)(v16 + 24), 0);
  _Unwind_Resume(a1);
}

uint64_t SSL_CTX_set_strict_cipher_list(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 832);
  if ((v4 & 0x800) != 0) {
    int v5 = (v4 >> 12) & 1;
  }
  else {
    int v5 = ssl_credential_st::UsesPrivateKey((ssl_credential_st *)a1) != 0;
  }
  return bssl::ssl_create_cipher_list((bssl::SSLCipherPreferenceList **)(a1 + 240), v5, a2, 1);
}

uint64_t SSL_CTX_set_min_proto_version(uint64_t a1, int a2)
{
  unsigned int v4 = *(unsigned char **)(a1 + 8);
  int v5 = (__int16 *)(a1 + 226);
  if (a2) {
    return bssl::set_version_bound(v4, v5, a2);
  }
  if (*v4) {
    __int16 v7 = -257;
  }
  else {
    __int16 v7 = 769;
  }
  *int v5 = v7;
  return 1;
}

uint64_t SSL_CTX_set_max_proto_version(uint64_t a1, int a2)
{
  unsigned int v4 = *(unsigned char **)(a1 + 8);
  int v5 = (__int16 *)(a1 + 224);
  if (a2) {
    return bssl::set_version_bound(v4, v5, a2);
  }
  if (*v4) {
    __int16 v7 = -259;
  }
  else {
    __int16 v7 = 772;
  }
  *int v5 = v7;
  return 1;
}

void *OPENSSL_lh_new(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = OPENSSL_zalloc(0x30uLL);
  int v5 = v4;
  if (v4)
  {
    v4[2] = 16;
    uint64_t v6 = OPENSSL_calloc(0x10uLL, 8uLL);
    v5[1] = v6;
    if (v6)
    {
      v5[4] = a2;
      v5[5] = a1;
    }
    else
    {
      OPENSSL_free(v5);
      return 0;
    }
  }
  return v5;
}

void bssl::CERT::~CERT(bssl::CERT *this)
{
}

uint64_t bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array(uint64_t a1)
{
  return a1;
}

void bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::Reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)(*(void *)a1 + v6), 0);
      ++v7;
      v6 += 8;
    }
    while (v7 < *(void *)(a1 + 8));
  }
  OPENSSL_free(*(void **)a1);
  *(void *)a1 = a2;
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a3;
}

void ssl_ctx_st::~ssl_ctx_st(ssl_ctx_st *this)
{
}

void std::unique_ptr<bssl::TicketKey,bssl::internal::Deleter>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    OPENSSL_free(v3);
  }
}

void bssl::SSL_CONFIG::~SSL_CONFIG(BUF_MEM **this)
{
  uint64_t v2 = *(void *)&(*this)[5].length;
  if (v2) {
    (*(void (**)(BUF_MEM **))(*(void *)(v2 + 16) + 96))(this);
  }
  bssl::Array<unsigned short>::~Array((uint64_t)(this + 35));
  std::unique_ptr<stack_st_SRTP_PROTECTION_PROFILE,bssl::internal::Deleter>::reset[abi:ne180100](this + 34, 0);
  bssl::Array<unsigned short>::~Array((uint64_t)(this + 32));
  bssl::Array<unsigned short>::~Array((uint64_t)(this + 30));
  bssl::Array<unsigned short>::~Array((uint64_t)(this + 28));
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)this + 26, 0);
  bssl::Array<unsigned short>::~Array((uint64_t)(this + 24));
  std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_credential_st **)this + 23, 0);
  bssl::Array<unsigned short>::~Array((uint64_t)(this + 21));
  bssl::Array<bssl::ALPSConfig>::~Array((uint64_t)(this + 19));
  bssl::Array<unsigned short>::~Array((uint64_t)(this + 16));
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)this + 15, 0);
  bssl::Array<unsigned short>::~Array((uint64_t)(this + 13));
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)this + 11, 0);
  std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)this + 7, 0);
  std::unique_ptr<bssl::CERT,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::CERT **)this + 4, 0);
  std::unique_ptr<bssl::SSLCipherPreferenceList,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLCipherPreferenceList **)this + 3, 0);
}

void std::unique_ptr<stack_st_SRTP_PROTECTION_PROFILE,bssl::internal::Deleter>::reset[abi:ne180100](BUF_MEM **a1, BUF_MEM *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    BUF_MEM_free(v3);
  }
}

uint64_t bssl::Array<bssl::ALPSConfig>::~Array(uint64_t a1)
{
  return a1;
}

void bssl::Array<bssl::ALPSConfig>::Reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)a1 + v6;
      bssl::Array<unsigned short>::~Array(v8 + 16);
      bssl::Array<unsigned short>::~Array(v8);
      ++v7;
      v6 += 32;
    }
    while (v7 < *(void *)(a1 + 8));
  }
  OPENSSL_free(*(void **)a1);
  *(void *)a1 = a2;
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a3;
}

void SSL_CTX_flush_sessions(SSL_CTX *ctx, uint64_t tm)
{
  info_callbacuint64_t k = ctx->info_callback;
  v4[0] = ctx;
  v4[2] = info_callback;
  if (info_callback)
  {
    v4[1] = tm;
    uint64_t v3 = (pthread_rwlock_t *)0xAAAAAAAAAAAAAAAALL;
    bssl::internal::MutexLockBase<&(CRYPTO_MUTEX_lock_write),&(CRYPTO_MUTEX_unlock_write)>::MutexLockBase(&v3, (pthread_rwlock_t *)&ctx->cert_store);
    v5[0] = timeout_doall_arg;
    v5[1] = v4;
    OPENSSL_lh_doall_arg((uint64_t)info_callback, (void (*)(void, uint64_t))lh_SSL_SESSION_call_doall_arg, (uint64_t)v5);
    CRYPTO_MUTEX_unlock_read(v3);
  }
}

void sub_1BA1161AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9)
{
}

void lh_maybe_resize(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 24))
  {
    unint64_t v1 = *(void *)(a1 + 16);
    if (v1 <= 0xF) {
      lh_maybe_resize_cold_1();
    }
    if (*(void *)a1 / v1 < 3)
    {
      if (v1 < 0x11 || v1 <= *(void *)a1) {
        return;
      }
      unint64_t v3 = v1 >> 1;
      if (v3 <= 0x10) {
        unint64_t v2 = 16;
      }
      else {
        unint64_t v2 = v3;
      }
    }
    else
    {
      if ((uint64_t)v1 < 1) {
        return;
      }
      unint64_t v2 = 2 * v1;
    }
    lh_rebucket(a1, v2);
  }
}

pthread_rwlock_t **bssl::internal::MutexLockBase<&(CRYPTO_MUTEX_lock_write),&(CRYPTO_MUTEX_unlock_write)>::MutexLockBase(pthread_rwlock_t **a1, pthread_rwlock_t *a2)
{
  *a1 = a2;
  if (!a2) {
    bssl::internal::MutexLockBase<&(CRYPTO_MUTEX_lock_read),&(CRYPTO_MUTEX_unlock_read)>::MutexLockBase();
  }
  CRYPTO_MUTEX_lock_write(a2);
  return a1;
}

void OPENSSL_lh_free(void *a1)
{
  if (a1)
  {
    unint64_t v2 = a1[2];
    if (v2)
    {
      for (unint64_t i = 0; i < v2; ++i)
      {
        unsigned int v4 = *(void **)(a1[1] + 8 * i);
        if (v4)
        {
          do
          {
            int v5 = (void *)v4[1];
            OPENSSL_free(v4);
            unsigned int v4 = v5;
          }
          while (v5);
          unint64_t v2 = a1[2];
        }
      }
    }
    OPENSSL_free((void *)a1[1]);
    OPENSSL_free(a1);
  }
}

void OPENSSL_lh_doall_arg(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3)
{
  if (a1)
  {
    int v6 = *(_DWORD *)(a1 + 24);
    if (v6 == -1)
    {
      int v7 = -1;
    }
    else
    {
      int v7 = v6 + 1;
      *(_DWORD *)(a1 + 24) = v6 + 1;
    }
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      for (unint64_t i = 0; i < v8; ++i)
      {
        uint64_t v10 = *(void **)(*(void *)(a1 + 8) + 8 * i);
        if (v10)
        {
          do
          {
            uint64_t v11 = (void *)v10[1];
            a2(*v10, a3);
            uint64_t v10 = v11;
          }
          while (v11);
          unint64_t v8 = *(void *)(a1 + 16);
        }
      }
      int v7 = *(_DWORD *)(a1 + 24);
    }
    if (v7 != -1) {
      *(_DWORD *)(a1 + 24) = v7 - 1;
    }
    lh_maybe_resize(a1);
  }
}

uint64_t CRYPTO_MUTEX_unlock_read(pthread_rwlock_t *a1)
{
  uint64_t result = pthread_rwlock_unlock(a1);
  if (result) {
    abort();
  }
  return result;
}

uint64_t CRYPTO_MUTEX_lock_write(pthread_rwlock_t *a1)
{
  uint64_t result = pthread_rwlock_wrlock(a1);
  if (result) {
    abort();
  }
  return result;
}

uint64_t __boringssl_logging_register_debug_log_updates_block_invoke()
{
  uint64_t result = network_config_register_boringssl_log_debug_updates();
  datapath_logging_enableunsigned int d = result;
  return result;
}

bssl::SSL_HANDSHAKE *bssl::SSL_HANDSHAKE::SSL_HANDSHAKE(bssl::SSL_HANDSHAKE *this, ssl_st *a2)
{
  *(void *)thiunsigned int s = a2;
  *((_DWORD *)this + 4) = 1;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 6bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 10std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = 0u;
  *(_OWORD *)((char *)this + 14bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 18std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 22bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *((_DWORD *)this + 101) = 0;
  *(_OWORD *)((char *)this + 2std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 26std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 30bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 34std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 356) = 0u;
  *(_OWORD *)((char *)this + 372) = 0u;
  *(_OWORD *)((char *)this + 38bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  bssl::SSLTranscript::SSLTranscript((bssl::SSL_HANDSHAKE *)((char *)this + 424));
  bssl::SSLTranscript::SSLTranscript((bssl::SSL_HANDSHAKE *)((char *)this + 464));
  *((_WORD *)this + 366) = 0;
  *((unsigned char *)this + 734) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 52std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 56bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + bssl::Array<unsigned short>::~Array((uint64_t)this + 584) = 0u;
  *(_OWORD *)((char *)this + 60std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 6bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = 0u;
  *(_OWORD *)((char *)this + 64bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 68std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  EVP_HPKE_CTX_zero((uint64_t)this + 736);
  *((void *)this + 197) = 0;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *(_OWORD *)((char *)this + 156std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 152bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 148std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  *(_OWORD *)((char *)this + 1bssl::Array<unsigned short>::~Array((uint64_t)this + 496) = 0u;
  *(_OWORD *)((char *)this + 144bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((_DWORD *)this + 396) &= 0xFC000000;
  *((unsigned char *)this + 1636) = 0;
  *(_OWORD *)((char *)this + 158bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 1604) = 0u;
  *(_OWORD *)((char *)this + 162std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0u;
  if (!*(void *)this) {
    __assert_rtn("SSL_HANDSHAKE", "handshake.cc", 160, "ssl");
  }
  RAND_bytes((unsigned __int8 *)this + 1630, 7);
  return this;
}

void sub_1BA1165D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, bssl::SSLTranscript *a11, bssl::SSLTranscript *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  bssl::Array<unsigned short>::~Array(v16 + 712);
  bssl::Array<unsigned short>::~Array(v16 + 696);
  bssl::Array<unsigned short>::~Array(v16 + 680);
  bssl::Array<unsigned short>::~Array(v16 + 664);
  bssl::Array<unsigned short>::~Array(v16 + 648);
  bssl::Array<unsigned short>::~Array(v16 + 632);
  bssl::Array<unsigned short>::~Array(v16 + 616);
  bssl::Array<unsigned short>::~Array(v16 + 600);
  bssl::Array<unsigned short>::~Array(v16 + 584);
  bssl::Array<unsigned short>::~Array(v16 + 568);
  bssl::Array<unsigned short>::~Array(v16 + 552);
  bssl::Array<unsigned short>::~Array(v16 + 536);
  bssl::SSLTranscript::~SSLTranscript(a11);
  bssl::SSLTranscript::~SSLTranscript(a12);
  for (uint64_t i = 0; i != -16; i -= 8)
    std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100]((void **)(v16 + 400 + i), 0);
  std::unique_ptr<err_save_state_st,bssl::internal::Deleter>::reset[abi:ne180100]((uint64_t *)(v16 + 384), 0);
  _Unwind_Resume(a1);
}

bssl::SSLTranscript *bssl::SSLTranscript::SSLTranscript(bssl::SSLTranscript *this)
{
  *(void *)thiunsigned int s = 0;
  EVP_MD_CTX_init((EVP_MD_CTX *)((char *)this + 8));
  return this;
}

void sub_1BA116788(_Unwind_Exception *a1)
{
  std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t boringssl_session_handshake_start(SSL *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a1->version != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  methounsigned int d = a1->method;
  if (!method || !method[1].num_ciphers) {
    return 0xFFFFFFFFLL;
  }
  method[1].get_timeout = (uint64_t (*)(void))boringssl_helper_get_current_time_ms();
  num_cipherunsigned int s = (SSL *)method[1].num_ciphers;
  if ((BYTE4(method[2].ssl_renegotiate_check) & 0x10) != 0) {
    int v5 = SSL_accept(num_ciphers);
  }
  else {
    int v5 = SSL_connect(num_ciphers);
  }
  if (v5 <= 0)
  {
    return boringssl_session_handshake_incomplete(a1, v5, 0);
  }
  else
  {
    int v7 = SSL_in_early_data((uint64_t)method[1].num_ciphers);
    id WeakRetained = objc_loadWeakRetained((id *)&method->ssl_clear);
    if (WeakRetained)
    {
      char v9 = WeakRetained;
      uint64_t v10 = (unsigned __int8 *)objc_loadWeakRetained((id *)&method->ssl_clear);
      unint64_t v1 = (char *)v10[475];

      if (v1) {
        return 0;
      }
    }
    id v11 = objc_loadWeakRetained((id *)&method->ssl_clear);
    if (v11)
    {
      uint64_t v12 = objc_loadWeakRetained((id *)&method->ssl_clear);
      BOOL v13 = (v12[475] & 1) == 0;
    }
    else
    {
      BOOL v13 = 1;
    }

    uint64_t result = 0;
    if (v13 && g_boringssl_log)
    {
      int v14 = (id)g_boringssl_log;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = objc_loadWeakRetained((id *)&method->ssl_clear);
        if (v15)
        {
          unint64_t v1 = (char *)objc_loadWeakRetained((id *)&method->ssl_clear);
          uint64_t v16 = v1 + 391;
        }
        else
        {
          uint64_t v16 = &unk_1BA179713;
        }
        id v17 = objc_loadWeakRetained((id *)&method->ssl_clear);
        uint64_t v18 = v17;
        int v20 = 136447234;
        char v21 = "boringssl_session_handshake_start";
        int v19 = "true";
        __int16 v22 = 1024;
        int v23 = 288;
        __int16 v24 = 2082;
        if (!v7) {
          int v19 = "false";
        }
        char v25 = v16;
        __int16 v26 = 2048;
        id v27 = v17;
        __int16 v28 = 2082;
        uint64_t v29 = v19;
        _os_log_impl(&dword_1BA0DE000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] In early data: %{public}s", (uint8_t *)&v20, 0x30u);

        if (v15) {
      }
        }

      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_handshake_continue_inner(SSL *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a1->version != -1252936367) {
    return 0xFFFFFFFFLL;
  }
  methounsigned int d = a1->method;
  if (!method) {
    return 0xFFFFFFFFLL;
  }
  num_cipherunsigned int s = (SSL *)method[1].num_ciphers;
  if (!num_ciphers) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = SSL_do_handshake(num_ciphers);
  if (v7 == 1)
  {
    uint64_t result = SSL_in_false_start((uint64_t)method[1].num_ciphers);
    if (result)
    {
      id WeakRetained = objc_loadWeakRetained((id *)&method->ssl_clear);
      if (!WeakRetained
        || (uint64_t v10 = WeakRetained,
            id v11 = (unsigned __int8 *)objc_loadWeakRetained((id *)&method->ssl_clear),
            unint64_t v2 = (char *)v11[475],
            v11,
            v10,
            (v2 & 1) == 0))
      {
        id v12 = objc_loadWeakRetained((id *)&method->ssl_clear);
        if (v12)
        {
          BOOL v13 = objc_loadWeakRetained((id *)&method->ssl_clear);
          BOOL v14 = (v13[475] & 1) == 0;
        }
        else
        {
          BOOL v14 = 1;
        }

        if (v14)
        {
          if (g_boringssl_log)
          {
            id v15 = (id)g_boringssl_log;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              id v16 = objc_loadWeakRetained((id *)&method->ssl_clear);
              if (v16)
              {
                unint64_t v2 = (char *)objc_loadWeakRetained((id *)&method->ssl_clear);
                id v17 = v2 + 391;
              }
              else
              {
                id v17 = &unk_1BA179713;
              }
              id v18 = objc_loadWeakRetained((id *)&method->ssl_clear);
              int v20 = 136446978;
              char v21 = "boringssl_session_handshake_continue_inner";
              __int16 v22 = 1024;
              int v23 = 210;
              __int16 v24 = 2082;
              char v25 = v17;
              __int16 v26 = 2048;
              id v27 = v18;
              _os_log_impl(&dword_1BA0DE000, v15, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Connected in False Start.", (uint8_t *)&v20, 0x26u);

              if (v16) {
            }
              }
          }
        }
      }
      BYTE5(method[2].ssl_renegotiate_check) |= 1u;
      session = SSL_get_session((const SSL *)method[1].num_ciphers);
      boringssl_session_set_peer_verification_state_from_session((uint64_t)a1, (uint64_t)session);
      boringssl_session_finish_handshake(a1);
      return 0;
    }
  }
  else
  {
    return boringssl_session_handshake_incomplete(a1, v7, a2);
  }
  return result;
}

int SSL_do_handshake(SSL *s)
{
  *((_DWORD *)s->handshake_func + 49) = 0;
  ERR_clear_error();
  ERR_clear_system_error();
  if (!*(void *)&s->rwstate)
  {
    ERR_put_error(16, 0, 134, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_lib.cc", 887);
    LODWORD(v4) = -1;
    return v4;
  }
  unint64_t v3 = (bssl *)*((void *)s->handshake_func + 35);
  if (!v3 || (*((unsigned char *)v3 + 1584) & 8) != 0) {
    goto LABEL_13;
  }
  char v11 = 0;
  uint64_t v4 = bssl::ssl_run_handshake(v3, (bssl::SSL_HANDSHAKE *)&v11, v2);
  if (BYTE4(s->param)) {
    uint64_t v5 = 8194;
  }
  else {
    uint64_t v5 = 4098;
  }
  int v6 = *(void (**)(SSL *, uint64_t, uint64_t))&s->packet_length;
  if (v6 || (int v6 = *(void (**)(SSL *, uint64_t, uint64_t))&s->s2[1].rbuf_offs) != 0) {
    v6(s, v5, v4);
  }
  if ((int)v4 >= 1)
  {
    if (!v11)
    {
      handshake_func = s->handshake_func;
      unint64_t v8 = (bssl::SSL_HANDSHAKE *)*((void *)handshake_func + 35);
      *((void *)handshake_func + 35) = 0;
      std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSL_HANDSHAKE **)handshake_func + 36, v8);
      std::unique_ptr<bssl::SSL_HANDSHAKE,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSL_HANDSHAKE **)s->handshake_func + 35, 0);
      bssl::ssl_maybe_shed_handshake_config((bssl *)s, v9);
    }
LABEL_13:
    LODWORD(v4) = 1;
  }
  return v4;
}

uint64_t bssl::ssl_run_handshake(bssl *this, bssl::SSL_HANDSHAKE *a2, BOOL *a3)
{
  uint64_t v5 = *(void *)this;
  while (2)
  {
    int v6 = *((_DWORD *)this + 4);
    switch(v6)
    {
      case 0:
        ERR_restore_state(*((void **)this + 48));
        return 0xFFFFFFFFLL;
      case 2:
      case 3:
      case 15:
        if (!*(void *)(v5 + 168))
        {
          v19[0] = 50;
          id v18 = 0;
          if (v6 == 15) {
            int v7 = bssl::ssl_open_change_cipher_spec((void *)v5, &v18, v19);
          }
          else {
            int v7 = bssl::ssl_open_handshake((void *)v5, &v18, v19);
          }
          int v8 = v7;
          if (v7 == 4 && *((_DWORD *)this + 4) == 2 && (ERR_peek_error() & 0xFF000FFF) == 0x10000410) {
            ERR_put_error(16, 0, 154, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake.cc", 661);
          }
          char v17 = -86;
          uint64_t result = bssl::ssl_handle_open_record((bssl *)v5, &v17, v8, v18, v19[0]);
          if ((int)result <= 0) {
            return result;
          }
          if (!v17)
          {
            bssl::SSLBuffer::DiscardConsumed((_WORD *)(*(void *)(v5 + 48) + 80));
LABEL_18:
            int v10 = (*(uint64_t (**)(bssl *, bssl::SSL_HANDSHAKE *, BOOL *))(v5 + 40))(this, a2, a3);
            *((_DWORD *)this + 4) = v10;
            if (v10 == 1)
            {
              if ((*(unsigned char *)(v5 + 180) & 1) == 0 && *(_DWORD *)(*(void *)(v5 + 48) + 216) == 2) {
                bssl::ssl_run_handshake();
              }
              *(unsigned char *)a2 = 0;
              return 1;
            }
            if (!v10)
            {
              char v11 = ERR_save_state();
              std::unique_ptr<err_save_state_st,bssl::internal::Deleter>::reset[abi:ne180100]((uint64_t *)this + 48, (uint64_t)v11);
              return 0xFFFFFFFFLL;
            }
          }
          continue;
        }
        if (v6 == 15) {
          bssl::ssl_run_handshake();
        }
        uint64_t v12 = *(void *)(v5 + 48);
        int v13 = 2;
LABEL_42:
        *(_DWORD *)(v12 + 196) = v13;
        int v14 = 1;
LABEL_43:
        *((_DWORD *)this + 4) = v14;
        return 0xFFFFFFFFLL;
      case 4:
        uint64_t result = (*(uint64_t (**)(uint64_t, bssl::SSL_HANDSHAKE *, BOOL *))(*(void *)v5 + 120))(v5, a2, a3);
        if ((int)result <= 0) {
          return result;
        }
        goto LABEL_18;
      case 5:
        uint64_t v12 = *(void *)(v5 + 48);
        int v13 = 12;
        goto LABEL_42;
      case 6:
        uint64_t v12 = *(void *)(v5 + 48);
        int v13 = 17;
        goto LABEL_42;
      case 7:
        uint64_t result = (*(uint64_t (**)(uint64_t, bssl::SSL_HANDSHAKE *, BOOL *))(*(void *)v5 + 120))(v5, a2, a3);
        if ((int)result < 1) {
          return result;
        }
        *(_DWORD *)(*(void *)(v5 + 48) + 196) = 18;
        int v14 = 7;
        goto LABEL_43;
      case 8:
        uint64_t v12 = *(void *)(v5 + 48);
        int v13 = 4;
        goto LABEL_42;
      case 9:
        uint64_t v12 = *(void *)(v5 + 48);
        int v13 = 13;
        goto LABEL_42;
      case 10:
        uint64_t v12 = *(void *)(v5 + 48);
        int v13 = 11;
        goto LABEL_42;
      case 11:
        uint64_t v12 = *(void *)(v5 + 48);
        int v13 = 14;
        goto LABEL_42;
      case 12:
        if ((*(unsigned char *)(v5 + 180) & 1) == 0 && *(_DWORD *)(*(void *)(v5 + 48) + 216) == 2) {
          bssl::ssl_run_handshake();
        }
        uint64_t result = 1;
        *(unsigned char *)a2 = 1;
        *((_DWORD *)this + 4) = 1;
        return result;
      case 13:
        uint64_t v15 = *(void *)(v5 + 48);
        if (!*(_DWORD *)(v15 + 256)) {
          bssl::ssl_run_handshake();
        }
        if ((*((unsigned char *)this + 1585) & 0x20) != 0) {
          bssl::ssl_run_handshake();
        }
        int v16 = 15;
        goto LABEL_47;
      case 14:
        if ((*(unsigned char *)(*(void *)(*(void *)(v5 + 48) + 280) + 1585) & 0x10) != 0)
        {
          uint64_t result = 1;
          *(unsigned char *)a2 = 1;
          return result;
        }
        *((_DWORD *)this + 4) = 1;
        goto LABEL_18;
      case 16:
        uint64_t v12 = *(void *)(v5 + 48);
        int v13 = 16;
        goto LABEL_42;
      case 17:
        uint64_t v15 = *(void *)(v5 + 48);
        int v16 = 20;
LABEL_47:
        *(_DWORD *)(v15 + 196) = v16;
        return 0xFFFFFFFFLL;
      default:
        goto LABEL_18;
    }
  }
}

uint64_t bssl::ssl_open_handshake(void *a1, void *a2, unsigned char *a3)
{
  *a2 = 0;
  uint64_t v4 = a1[6];
  if (*(_DWORD *)(v4 + 172) == 2)
  {
    ERR_restore_state(*(void **)(v4 + 184));
    *a3 = 0;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
    if (result != 4) {
      return result;
    }
    uint64_t v7 = a1[6];
    *(_DWORD *)(v7 + 172) = 2;
    int v8 = (uint64_t *)(v7 + 184);
    char v9 = ERR_save_state();
    std::unique_ptr<err_save_state_st,bssl::internal::Deleter>::reset[abi:ne180100](v8, (uint64_t)v9);
  }
  return 4;
}

uint64_t bssl::tls_open_handshake(uint64_t a1, unsigned __int8 **a2, ssl_st *a3, char *__s2, unint64_t a5)
{
  *a2 = 0;
  if ((*(unsigned char *)(a1 + 180) & 1) == 0 || (v10 = *(void *)(a1 + 48), __int16 v11 = *(_WORD *)(v10 + 220), (v11 & 4) != 0))
  {
LABEL_19:
    char v20 = -86;
    id v18 = 0;
    size_t v19 = 0;
    uint64_t result = bssl::tls_open_record((bssl *)a1, &v20, (uint64_t)&v18, a2, a3, (unsigned __int16 *)__s2, a5);
    if (result) {
      return result;
    }
    if ((*(unsigned char *)(a1 + 180) & 1) != 0 || v20 != 23)
    {
      if (v20 == 22)
      {
        if (bssl::tls_append_handshake_data(a1, v18, v19)) {
          return 0;
        }
        char v17 = 80;
        goto LABEL_29;
      }
    }
    else if (!**(void **)(*(void *)(a1 + 48) + 264))
    {
      int v15 = 281;
      int v16 = 619;
LABEL_28:
      ERR_put_error(16, 0, v15, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", v16);
      char v17 = 10;
LABEL_29:
      LOBYTE(a3->version) = v17;
      return 4;
    }
    int v15 = 225;
    int v16 = 625;
    goto LABEL_28;
  }
  if (a5 <= 4)
  {
    *a2 = (unsigned __int8 *)5;
    return 2;
  }
  if (!strncmp("GET ", __s2, 4uLL)
    || !strncmp("POST ", __s2, 5uLL)
    || !strncmp("HEAD ", __s2, 5uLL)
    || !strncmp("PUT ", __s2, 4uLL))
  {
    int v13 = 156;
    int v14 = 581;
LABEL_17:
    ERR_put_error(16, 0, v13, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", v14);
    LOBYTE(a3->version) = 0;
    return 4;
  }
  if (!strncmp("CONNE", __s2, 5uLL))
  {
    int v13 = 155;
    int v14 = 586;
    goto LABEL_17;
  }
  if ((*__s2 & 0x80000000) == 0 || __s2[2] != 1 || __s2[3] != 3)
  {
    *(_WORD *)(v10 + 22std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = v11 | 4;
    goto LABEL_19;
  }
  uint64_t result = bssl::read_v2_client_hello(a1, (unint64_t *)a2, __s2, a5);
  if (result)
  {
    if (result == 4) {
      LOBYTE(a3->version) = 0;
    }
  }
  else
  {
    *(_WORD *)(*(void *)(a1 + 48) + 220) |= 4u;
  }
  return result;
}

uint64_t bssl::ssl_client_handshake(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  unint64_t v3 = (SSL_SESSION **)((char *)this + 1520);
  uint64_t v4 = (long long *)((char *)__b + 8);
  uint64_t v248 = *MEMORY[0x1E4F143B8];
  int v215 = (ssl_credential_st **)((char *)this + 1504);
  int v212 = (EVP_PKEY **)((char *)this + 1512);
  int v213 = (BUF_MEM **)((char *)this + 424);
  char v205 = (void **)((char *)this + 1488);
  uint64_t v202 = (unint64_t **)((char *)this + 1472);
  uint64_t v203 = (void **)((char *)this + 696);
  uint64_t v211 = (void **)((char *)this + 1464);
  int v206 = (void **)((char *)this + 400);
  unsigned int v207 = (void **)((char *)this + 392);
  unint64_t v210 = (void **)((char *)this + 552);
  id v204 = (SSL_SESSION **)((char *)this + 1528);
  BOOL v214 = (char *)this + 88;
  BOOL v216 = (bssl *)((char *)this + 28);
  BOOL v217 = (unsigned __int16 *)((char *)this + 30);
  __dst = (char *)this + 1597;
  buf = (unsigned __int8 *)this + 504;
  while (2)
  {
    int v5 = *((_DWORD *)this + 5);
    switch(v5)
    {
      case 0:
        uint64_t v6 = *(void *)this;
        bssl::ssl_do_info_callback(*(void *)this, (const ssl_st *)0x10);
        *(_WORD *)(*(void *)(v6 + 48) + 220) &= ~0x40u;
        if (!bssl::ssl_get_version_range(this, v216, v217, v7)) {
          goto LABEL_392;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v245 = v8;
        long long v246 = v8;
        BOOL v220 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        if (!bssl::ssl_select_ech_config((uint64_t)this, (uint64_t)&v245, 32, &v220)) {
          goto LABEL_392;
        }
        int is_dtls = SSL_is_dtls(*(unsigned __int8 ***)this);
        unsigned int v11 = *((unsigned __int16 *)this + 15);
        if (v11 >= 0x303) {
          __int16 v12 = 771;
        }
        else {
          __int16 v12 = *((_WORD *)this + 15);
        }
        if (v11 <= 0x302) {
          __int16 v13 = -257;
        }
        else {
          __int16 v13 = -259;
        }
        if (!is_dtls) {
          __int16 v13 = v12;
        }
        *((_WORD *)this + 794) = v13;
        uint64_t v14 = *(void *)(v6 + 104);
        if (v14
          && ((*(unsigned char *)(v14 + 440) & 0x10) != 0
           || !bssl::ssl_supports_version((uint64_t)this, *(unsigned __int16 *)(v14 + 4))
           || *((void *)this + 193)
           && bssl::ssl_session_protocol_version(*(bssl **)(v6 + 104), v15) < 0x304
           || !SSL_SESSION_is_resumable(*(void *)(v6 + 104))
           || !bssl::ssl_session_is_time_valid((bssl *)v6, *(const ssl_st **)(v6 + 104), v10)
           || (*(void *)(v6 + 168) == 0) == (*(unsigned char *)(*(void *)(v6 + 104) + 440) & 0x20) >> 5
           || (*(_WORD *)(*(void *)(v6 + 48) + 220) & 0x20) != 0))
        {
          bssl::ssl_set_session((ssl_st **)v6, 0, v10);
        }
        if (!RAND_bytes((unsigned __int8 *)(*(void *)(v6 + 48) + 48), 32)
          || *((void *)this + 193) && !RAND_bytes(buf, 32))
        {
          goto LABEL_392;
        }
        if (*(void *)(v6 + 168)) {
          goto LABEL_27;
        }
        uint64_t v146 = *(void *)(v6 + 104);
        if (!v146) {
          goto LABEL_408;
        }
        size_t v147 = *(unsigned __int8 *)(v146 + 59);
        uint64_t v148 = *(void *)(v146 + 240);
        if (*(unsigned char *)(v146 + 59))
        {
          if (!v148)
          {
            *((unsigned char *)this + 1629) = v147;
            memcpy(__dst, (const void *)(v146 + 60), v147);
            goto LABEL_27;
          }
        }
        else if (!v148)
        {
LABEL_408:
          if (*v217 < 0x304u) {
            goto LABEL_27;
          }
        }
        *((unsigned char *)this + 1629) = 32;
        if (!RAND_bytes((unsigned __int8 *)__dst, 32)) {
          goto LABEL_392;
        }
LABEL_27:
        uint64_t v16 = *(void *)this;
        if (*((unsigned __int16 *)this + 14) >= 0x304u && !*(void *)(v16 + 104))
        {
          char v17 = *(unsigned int (**)(uint64_t, long long *, long long *, unsigned char *, long long *, unsigned char *, _OWORD *, unsigned int *))(*(void *)(v16 + 8) + 80);
          if (v17)
          {
            *(void *)&long long v242 = 0;
            memset(__b, 170, sizeof(__b));
            *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v239 = v18;
            long long v240 = v18;
            long long __src = v18;
            long long v238 = v18;
            long long v235 = v18;
            long long v236 = v18;
            long long v233 = v18;
            long long v234 = v18;
            long long v231 = v18;
            long long v232 = v18;
            long long v229 = v18;
            long long v230 = v18;
            long long v227 = v18;
            long long v228 = v18;
            long long v225 = v18;
            long long v226 = v18;
            long long v223 = v18;
            long long v224 = v18;
            v222[0] = v18;
            v222[1] = v18;
            unsigned int v218 = 256;
            *(void *)size_t __n = 0x40000000040;
            if (!v17(v16, &v242, __b, &__n[4], &__src, __n, v222, &v218) && (void)v242)
            {
              size_t v19 = SSL_SESSION_new();
              uint64_t v20 = (uint64_t)v19;
              LOWORD(v19->key_arg_length) = 772;
              v19->cipher = (SSL_CIPHER *)v242;
              char v21 = __n[0];
              if (*(_DWORD *)__n <= 0x2Fu)
              {
                memcpy(&v19->key_arg[3], &__src, *(unsigned int *)__n);
                *(unsigned char *)(v20 + 1std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = v21;
              }
              size_t v22 = v218;
              if (v218 - 1 <= 0xFE && bssl::Array<unsigned char>::Init(v20 + 392, v218)) {
                memmove(*(void **)(v20 + 392), v222, v22);
              }
              SSL_SESSION_set_ticket(v20, __b, *(unsigned int *)&__n[4]);
              *(_DWORD *)(v20 + 38std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = ((__int16)(*(unsigned __int8 *)(v16 + 180) << 13) >> 15) & 0x3800;
              *(unsigned char *)(v20 + 440) |= 0x80u;
              SSL_set_session((SSL *)v16, (SSL_SESSION *)v20);
            }
            uint64_t v16 = *(void *)this;
          }
        }
        if (*(unsigned char *)(v16 + 180)) {
          bssl::ssl_client_handshake();
        }
        if ((*(unsigned char *)(v16 + 180) & 4) != 0)
        {
          if (*v217 >= 0x304u)
          {
            unint64_t v149 = *(bssl **)(v16 + 104);
            if (v149)
            {
              if (bssl::ssl_session_protocol_version(v149, (const ssl_session_st *)a2) >= 0x304)
              {
                uint64_t v150 = *(void *)(v16 + 104);
                if (*(_DWORD *)(v150 + 380))
                {
                  size_t v151 = *(void *)(v150 + 400);
                  if (v151)
                  {
                    if (!bssl::ssl_is_alpn_protocol_allowed(this, *(const void **)(v150 + 392), v151))
                    {
                      int v23 = 9;
                      goto LABEL_418;
                    }
                    uint64_t v152 = *(void *)(v16 + 104);
                    if ((*(unsigned char *)(v152 + 440) & 0x40) != 0)
                    {
                      __b[0] = 0uLL;
                      if (!bssl::ssl_get_local_application_settings((uint64_t)this, __b, *(void **)(v152 + 392), *(void *)(v152 + 400))|| (uint64_t v188 = *(void *)(v16 + 104), v189 = *(void *)(v188 + 416), *((void *)&__b[0] + 1) != v189)|| memcmp(*(const void **)&__b[0], *(const void **)(v188 + 408), v189))
                      {
                        int v23 = 14;
                        goto LABEL_418;
                      }
                    }
                  }
                  *((_DWORD *)this + 396) |= 0x800u;
LABEL_419:
                  if (bssl::ssl_setup_key_shares(this, 0)
                    && bssl::ssl_setup_extension_permutation(this, a2)
                    && bssl::ssl_encrypt_client_hello((uint64_t)this, &v245, (size_t)v220)
                    && bssl::ssl_add_client_hello(this, a2))
                  {
                    *((_DWORD *)this + 5) = 1;
                    goto LABEL_48;
                  }
                  goto LABEL_392;
                }
              }
              int v23 = 7;
            }
            else
            {
              int v23 = 5;
            }
          }
          else
          {
            int v23 = 3;
          }
        }
        else
        {
          int v23 = 1;
        }
LABEL_418:
        *(_DWORD *)(*(void *)(v6 + 48) + 256) = v23;
        goto LABEL_419;
      case 1:
        uint64_t v63 = *(void *)this;
        if (SSL_is_dtls(*(unsigned __int8 ***)this))
        {
          int v41 = 3;
          goto LABEL_473;
        }
        if ((*((unsigned char *)this + 1585) & 8) == 0)
        {
LABEL_214:
          int v41 = 4;
          goto LABEL_473;
        }
        bssl::SSLAEADContext::SetVersionIfNullCipher(*(void *)(*(void *)(v63 + 48) + 272), *(_WORD *)(*(void *)(v63 + 104) + 4));
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v63 + 112))(v63)
          || !bssl::tls13_init_early_key_schedule(this, *(ssl_cipher_st ***)(v63 + 104), v123)
          || !bssl::tls13_derive_early_secret(this, a2))
        {
          goto LABEL_392;
        }
        int v124 = *(SSL_SESSION **)(v63 + 104);
        if (v124) {
          SSL_SESSION_up_ref(*(unsigned int **)(v63 + 104));
        }
        std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](v204, v124);
        int v41 = 2;
        goto LABEL_473;
      case 2:
        uint64_t v50 = *(void *)this;
        if (!*(unsigned char *)(*(void *)(*(void *)this + 120) + 496)) {
          goto LABEL_244;
        }
        int v51 = bssl::ssl_reverify_peer_cert((bssl **)this, 0);
        if (v51 == 1) {
          goto LABEL_392;
        }
        if (v51 == 2)
        {
          finisheunsigned int d = 16;
LABEL_246:
          *((_DWORD *)this + 5) = v51;
          goto LABEL_475;
        }
        uint64_t v50 = *(void *)this;
LABEL_244:
        if (bssl::tls13_set_traffic_key(v50, (const ssl_session_st *)1, 1, *((bssl **)this + 191), v214, *((void *)this + 4)))
        {
          *((_DWORD *)this + 396) |= 0x2400u;
          finisheunsigned int d = 12;
          int v51 = 4;
          goto LABEL_246;
        }
        goto LABEL_392;
      case 3:
        uint64_t v39 = *(void *)this;
        if (!SSL_is_dtls(*(unsigned __int8 ***)this)) {
          bssl::ssl_client_handshake();
        }
        if (*v217 >= 0x304u) {
          bssl::ssl_client_handshake();
        }
        *(void *)&__b[2] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v59 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v59 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[0] = v59;
        __b[1] = v59;
        if (!(*(unsigned int (**)(uint64_t, long long *))(*(void *)v39 + 24))(v39, __b)) {
          goto LABEL_196;
        }
        if (BYTE1(__b[0]) != 3) {
          goto LABEL_214;
        }
        v222[0] = *v4;
        *(void *)&long long __src = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&__src + 1) = 0xAAAAAAAAAAAAAAAALL;
        LOWORD(v245) = -21846;
        if (!CBS_get_u16((unsigned __int16 **)v222, &v245)
          || !CBS_get_u8_length_prefixed((unsigned __int8 **)v222, (unint64_t *)&__src)
          || *((void *)&v222[0] + 1))
        {
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 706);
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 50);
          goto LABEL_392;
        }
        long long v60 = __src;
        char v61 = bssl::Array<unsigned char>::Init((uint64_t)v210, *((unint64_t *)&__src + 1));
        char v62 = v61 ^ 1;
        if (!*((void *)&v60 + 1)) {
          char v62 = 1;
        }
        if ((v62 & 1) == 0) {
          memmove(*v210, (const void *)v60, *((size_t *)&v60 + 1));
        }
        if ((v61 & 1) == 0) {
          goto LABEL_502;
        }
        (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
        if (bssl::SSLTranscript::Init(v213) && bssl::ssl_add_client_hello(this, a2))
        {
          finisheunsigned int d = 4;
          *((_DWORD *)this + 5) = 4;
          goto LABEL_475;
        }
        goto LABEL_392;
      case 4:
        uint64_t v39 = *(void *)this;
        *(void *)&long long v223 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v42 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v222[0] = v42;
        v222[1] = v42;
        if (!(*(unsigned int (**)(uint64_t, _OWORD *))(*(void *)v39 + 24))(v39, v222))
        {
          finisheunsigned int d = 2;
          goto LABEL_475;
        }
        *(void *)&long long v43 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[3] = v43;
        __b[4] = v43;
        __b[1] = v43;
        __b[2] = v43;
        __b[0] = v43;
        LOWORD(__b[1]) = 0;
        WORD4(__b[3]) = 0;
        BYTE10(__b[3]) = 0;
        LOWORD(v22std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = -21846;
        __n[4] = 50;
        if (!bssl::ssl_parse_server_hello((uint64_t)__b, &__n[4], (uint64_t)v222)) {
          goto LABEL_391;
        }
        unsigned int v44 = LOWORD(__b[1]);
        if (LOWORD(__b[1]) != 771) {
          goto LABEL_357;
        }
        long long __src = 0xAAAAAAAA0001002BLL;
        *(void *)&long long v238 = 0;
        long long v245 = __b[4];
        *(void *)&long long v242 = &__src;
        if (!bssl::ssl_parse_extensions(&v245, &__n[4], (uint64_t *)&v242, 1, 1)) {
          goto LABEL_391;
        }
        if (BYTE3(__src))
        {
          if (!CBS_get_u16((unsigned __int16 **)&__src + 1, &v220) || (void)v238)
          {
            __n[4] = 50;
LABEL_391:
            bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, __n[4]);
            goto LABEL_392;
          }
          unsigned int v44 = (unsigned __int16)v220;
        }
        else
        {
          unsigned int v44 = LOWORD(__b[1]);
LABEL_357:
          LOWORD(v22std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = v44;
        }
        if (!bssl::ssl_supports_version((uint64_t)this, v44))
        {
          ERR_put_error(16, 0, 240, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 780);
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 70);
          goto LABEL_392;
        }
        uint64_t v156 = *(void *)(v39 + 48);
        unsigned int v157 = *(unsigned __int16 *)(v156 + 220);
        if (((v157 >> 5) & 1) != (v157 & 2) >> 1) {
          bssl::ssl_client_handshake();
        }
        if ((v157 & 2) != 0)
        {
          if ((unsigned __int16)v220 != *(unsigned __int16 *)(v39 + 16))
          {
            ERR_put_error(16, 0, 246, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 793);
            bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 70);
            goto LABEL_392;
          }
        }
        else
        {
          *(_WORD *)(v39 + 16) = (_WORD)v220;
          *(_WORD *)(v156 + 220) |= 2u;
          bssl::SSLAEADContext::SetVersionIfNullCipher(*(void *)(*(void *)(v39 + 48) + 272), *(_WORD *)(v39 + 16));
        }
        if (bssl::ssl_protocol_version((bssl *)v39, v155) >= 0x304)
        {
          int v41 = 5;
          goto LABEL_473;
        }
        std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100](v207, 0);
        std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100](v206, 0);
        bssl::ssl_done_writing_client_hello(this, v158);
        int v159 = *((_DWORD *)this + 396);
        if ((v159 & 0x800) != 0)
        {
          *((_DWORD *)this + 396) = v159 & 0xFFFFDFFF;
          ERR_put_error(16, 0, 278, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 818);
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 70);
          goto LABEL_392;
        }
        uint64_t v160 = *(void *)(v39 + 48);
        if (*((void *)this + 193)) {
          *(_DWORD *)(v160 + 216) = 2;
        }
        long long v161 = *(_OWORD *)(*((void *)&__b[1] + 1) + 16);
        *(_OWORD *)(v160 + 16) = **((_OWORD **)&__b[1] + 1);
        *(_OWORD *)(v160 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v161;
        if ((*(unsigned char *)(*(void *)(v39 + 48) + 220) & 0x20) == 0
          && bssl::ssl_supports_version((uint64_t)this, 0x304u))
        {
          uint64_t v162 = *(void *)(v39 + 48);
          if (*(void *)(v162 + 40) == *(void *)"DOWNGRD"
            || *(void *)(v162 + 40) == 0x14452474E574F44
            || *(void *)(v162 + 40) == 0xFF1047C2A8B4BFEDLL)
          {
            ERR_put_error(16, 0, 297, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 846);
            bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 47);
            goto LABEL_392;
          }
        }
        cipher_by_value = SSL_get_cipher_by_value(WORD4(__b[3]));
        uint64_t v164 = (uint64_t)cipher_by_value;
        if (!cipher_by_value
          || (int v165 = 8 * (*(void *)(*((void *)this + 1) + 64) == 0), (cipher_by_value[5] & v165) != 0)
          || (cipher_by_value[6] & v165) != 0
          || (unsigned int min_version = SSL_CIPHER_get_min_version(cipher_by_value),
              min_version > bssl::ssl_protocol_version((bssl *)v39, v167))
          || (unsigned int max_version = SSL_CIPHER_get_max_version(v164),
              max_version < bssl::ssl_protocol_version((bssl *)v39, v169))
          || (cipherunsigned int s = SSL_get_ciphers((const SSL *)v39),
              !OPENSSL_sk_find((uint64_t)ciphers, 0, v164, (uint64_t (*)(void, uint64_t, void))sk_SSL_CIPHER_call_cmp_func)))
        {
          ERR_put_error(16, 0, 242, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 862);
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 47);
          goto LABEL_392;
        }
        *((void *)this + 194) = v164;
        uint64_t v171 = (ssl_session_st *)*((unsigned __int8 *)this + 1629);
        if (*((unsigned char *)this + 1629) && CBS_mem_equal((uint64_t)&__b[2] + 8, __dst, (uint64_t)v171))
        {
          uint64_t v172 = *(void *)(v39 + 104);
          if (!v172 || *(_DWORD *)(*(void *)(v39 + 48) + 216) == 2)
          {
            ERR_put_error(16, 0, 286, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 880);
            bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 47);
            goto LABEL_392;
          }
          if (*(unsigned __int16 *)(v172 + 4) != *(unsigned __int16 *)(v39 + 16))
          {
            ERR_put_error(16, 0, 188, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 885);
            bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 47);
            goto LABEL_392;
          }
          if (*(void *)(v172 + 200) != *((void *)this + 194))
          {
            ERR_put_error(16, 0, 187, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 890);
            bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 47);
            goto LABEL_392;
          }
          if (!bssl::ssl_session_is_context_valid(this, (const bssl::SSL_HANDSHAKE *)v172, v171))
          {
            ERR_put_error(16, 0, 101, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 897);
            bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 47);
            goto LABEL_392;
          }
          uint64_t v198 = *(void *)(v39 + 48);
          __int16 v199 = *(_WORD *)(v198 + 220);
          if ((v199 & 0x20) != 0) {
            bssl::ssl_client_handshake();
          }
          *(_WORD *)(v198 + 22std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = v199 | 0x40;
        }
        else
        {
          bssl::ssl_set_session((ssl_st **)v39, 0, v171);
          if ((bssl::ssl_get_new_session(this, v190) & 1) == 0) {
            goto LABEL_502;
          }
          size_t v192 = *(void *)&__b[3];
          if (*(void *)&__b[3] >= 0x21uLL) {
            bssl::ssl_client_handshake();
          }
          int v193 = *v3;
          (*v3)->master_key[39] = __b[3];
          if (v192)
          {
            memcpy(&v193->master_key[40], *((const void **)&__b[2] + 1), v192);
            int v193 = *v3;
          }
          v193->cipher = (SSL_CIPHER *)*((void *)this + 194);
        }
        int v194 = (bssl *)bssl::ssl_protocol_version((bssl *)v39, v191);
        if (!bssl::SSLTranscript::InitHash((size_t **)v213, v194, *((const ssl_cipher_st **)this + 194))
          || (bssl::ssl_hash_message((uint64_t)this, (uint64_t)v222) & 1) == 0)
        {
          goto LABEL_502;
        }
        if (*(void *)(v39 + 104) || !bssl::ssl_cipher_uses_certificate_auth(*((bssl **)this + 194), v195)) {
          bssl::SSLTranscript::FreeBuffer(v213);
        }
        if (BYTE10(__b[3]))
        {
          ERR_put_error(16, 0, 238, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 944);
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 47);
          goto LABEL_392;
        }
        if ((bssl::ssl_parse_serverhello_tlsext((uint64_t)this, &__b[4]) & 1) == 0)
        {
          ERR_put_error(16, 0, 190, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 950);
          goto LABEL_392;
        }
        uint64_t v196 = *(void *)(v39 + 104);
        if (!v196 || (int v197 = *(unsigned char *)(v196 + 440) & 1, (HIWORD(*((_DWORD *)this + 396)) & 1) == v197))
        {
          (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
          if (*(void *)(v39 + 104))
          {
            if (*(unsigned char *)(*(void *)(v39 + 120) + 496)
              && bssl::ssl_cipher_uses_certificate_auth(*((bssl **)this + 194), (const ssl_cipher_st *)a2))
            {
              int v41 = 9;
            }
            else
            {
              int v41 = 18;
            }
          }
          else
          {
            int v41 = 6;
          }
          goto LABEL_473;
        }
        if (v197) {
          ERR_put_error(16, 0, 204, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 957);
        }
        else {
          ERR_put_error(16, 0, 205, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 959);
        }
        bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 40);
        goto LABEL_392;
      case 5:
        finisheunsigned int d = bssl::tls13_client_handshake(this, (ssl_st *)a2);
        if (finished != 1) {
          goto LABEL_475;
        }
        int v49 = 21;
        goto LABEL_199;
      case 6:
        __int16 v67 = *(bssl **)this;
        if (!bssl::ssl_cipher_uses_certificate_auth(*((bssl **)this + 194), (const ssl_cipher_st *)a2)) {
          goto LABEL_139;
        }
        *(void *)&__b[2] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v68 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v68 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[0] = v68;
        __b[1] = v68;
        if (!(*(unsigned int (**)(bssl *, long long *))(*(void *)v67 + 24))(v67, __b)) {
          goto LABEL_196;
        }
        if (!bssl::ssl_check_message_type(v67, (uint64_t)__b, 11)
          || !bssl::ssl_hash_message((uint64_t)this, (uint64_t)__b))
        {
          goto LABEL_392;
        }
        v222[0] = *v4;
        LOBYTE(__src) = 50;
        if (!bssl::ssl_parse_cert_chain((char *)&__src, (unint64_t **)&(*v3)->sid_ctx[28], v212, 0, (unsigned __int8 **)v222, *(void ***)(*((void *)v67 + 15) + 776)))
        {
          bssl::ssl_send_alert(v67, (ssl_st *)2, __src);
          goto LABEL_392;
        }
        if (!EVP_MD_CTX_md(*(const EVP_MD_CTX **)&(*v3)->sid_ctx[28])
          || *((void *)&v222[0] + 1)
          || ((*(uint64_t (**)(SSL_SESSION *))(*(void *)(*((void *)v67 + 15) + 16) + 48))(*v3) & 1) == 0)
        {
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1020);
          bssl::ssl_send_alert(v67, (ssl_st *)2, 50);
          goto LABEL_392;
        }
        __int16 v69 = (ssl_st *)*((void *)this + 189);
        OPENSSL_sk_value(*(unint64_t **)(*((void *)this + 190) + 136), 0);
        if ((bssl::ssl_check_leaf_certificate((uint64_t)this, v69) & 1) == 0)
        {
          bssl::ssl_send_alert(v67, (ssl_st *)2, 47);
          goto LABEL_392;
        }
        (*(void (**)(bssl *))(*(void *)v67 + 32))(v67);
LABEL_139:
        int v41 = 7;
        goto LABEL_473;
      case 7:
        if ((*((unsigned char *)this + 1584) & 0x40) == 0) {
          goto LABEL_114;
        }
        uint64_t v39 = *(void *)this;
        *(void *)&__b[2] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v75 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v75 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[0] = v75;
        __b[1] = v75;
        if (!(*(unsigned int (**)(uint64_t, long long *))(*(void *)v39 + 24))(v39, __b)) {
          goto LABEL_196;
        }
        if (BYTE1(__b[0]) != 22) {
          goto LABEL_114;
        }
        if (!bssl::ssl_hash_message((uint64_t)this, (uint64_t)__b)) {
          goto LABEL_392;
        }
        v222[0] = *v4;
        *(void *)&long long __src = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&__src + 1) = 0xAAAAAAAAAAAAAAAALL;
        LOBYTE(v245) = -86;
        if (!CBS_get_u8(v222, &v245)
          || v245 != 1
          || !CBS_get_u24_length_prefixed((unsigned __int8 **)v222, (unint64_t *)&__src)
          || !*((void *)&__src + 1)
          || *((void *)&v222[0] + 1))
        {
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1069);
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 50);
          goto LABEL_392;
        }
        uint64_t v76 = *v3;
        unsigned int v77 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)&__src, *(void ***)(*(void *)(v39 + 120) + 776));
        std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)&v76->tlsext_hostname, v77);
        if (!(*v3)->tlsext_hostname) {
          goto LABEL_502;
        }
        (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
LABEL_114:
        int v41 = 8;
        goto LABEL_473;
      case 8:
        if (bssl::ssl_cipher_uses_certificate_auth(*((bssl **)this + 194), (const ssl_cipher_st *)a2))
        {
          int v74 = bssl::ssl_verify_peer_cert(this, a2);
          if (v74 == 1) {
            goto LABEL_392;
          }
          BOOL v48 = v74 == 2;
          if (v74 == 2) {
            int v49 = 8;
          }
          else {
            int v49 = 10;
          }
LABEL_154:
          if (v48) {
            finisheunsigned int d = 16;
          }
          else {
            finisheunsigned int d = 1;
          }
        }
        else
        {
          finisheunsigned int d = 1;
          int v49 = 10;
        }
LABEL_199:
        *((_DWORD *)this + 5) = v49;
        goto LABEL_475;
      case 9:
        if (!*(unsigned char *)(*(void *)(*(void *)this + 120) + 496)) {
          bssl::ssl_client_handshake();
        }
        int v47 = bssl::ssl_reverify_peer_cert((bssl **)this, (bssl::SSL_HANDSHAKE *)1);
        if (v47 == 1) {
          goto LABEL_392;
        }
        BOOL v48 = v47 == 2;
        if (v47 == 2) {
          int v49 = 9;
        }
        else {
          int v49 = 18;
        }
        goto LABEL_154;
      case 10:
        uint64_t v39 = *(void *)this;
        *(void *)&long long v223 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v70 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v222[0] = v70;
        v222[1] = v70;
        if (!(*(unsigned int (**)(uint64_t, _OWORD *))(*(void *)v39 + 24))(v39, v222)) {
          goto LABEL_196;
        }
        if (BYTE1(v222[0]) == 12)
        {
          if (!bssl::ssl_hash_message((uint64_t)this, (uint64_t)v222)) {
            goto LABEL_392;
          }
          uint64_t v71 = *((void *)this + 194);
          int v73 = *(_DWORD *)(v71 + 20);
          int v72 = *(_DWORD *)(v71 + 24);
          long long __src = *(_OWORD *)((char *)v222 + 8);
          if ((v72 & 8) != 0)
          {
            *((void *)&__b[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&__b[0] = 0xAAAAAAAAAAAAAAAALL;
            if (!CBS_get_u16_length_prefixed((unsigned __int8 **)&__src, (unint64_t *)__b))
            {
              ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1156);
              int v143 = 50;
              goto LABEL_386;
            }
            if (*((void *)&__b[0] + 1) > 0x80uLL || CBS_contains_zero_byte((uint64_t)__b))
            {
              ERR_put_error(16, 0, 136, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1170);
              int v143 = 40;
              goto LABEL_386;
            }
            *(void *)&long long v245 = 0;
            if (*((void *)&__b[0] + 1))
            {
              if (!CBS_strdup((uint64_t)__b, (void **)&v245))
              {
LABEL_502:
                bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 80);
                goto LABEL_392;
              }
              uint64_t v175 = (void *)v245;
            }
            else
            {
              uint64_t v175 = 0;
            }
            std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100](v211, v175);
            if ((v73 & 2) == 0) {
              goto LABEL_147;
            }
          }
          else if ((v73 & 2) == 0)
          {
LABEL_147:
            if ((v73 & 8) == 0)
            {
              ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1216);
              bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 10);
              goto LABEL_392;
            }
            goto LABEL_445;
          }
          LOBYTE(v242) = -86;
          LOWORD(v245) = -21846;
          *((void *)&__b[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__b[0] = 0xAAAAAAAAAAAAAAAALL;
          if (CBS_get_u8(&__src, &v242)
            && v242 == 3
            && CBS_get_u16((unsigned __int16 **)&__src, &v245)
            && CBS_get_u8_length_prefixed((unsigned __int8 **)&__src, (unint64_t *)__b))
          {
            if (bssl::tls1_check_group_id((bssl **)this, (const ssl_st *)(unsigned __int16)v245))
            {
              HIWORD((*v3)->key_arg_length) = v245;
              long long v176 = __b[0];
              char v177 = bssl::Array<unsigned char>::Init((uint64_t)v203, *((unint64_t *)&__b[0] + 1));
              char v178 = v177 ^ 1;
              if (!*((void *)&v176 + 1)) {
                char v178 = 1;
              }
              if ((v178 & 1) == 0) {
                memmove(*v203, (const void *)v176, *((size_t *)&v176 + 1));
              }
              if ((v177 & 1) == 0) {
                goto LABEL_392;
              }
LABEL_445:
              int v180 = (const void *)*((void *)&v222[0] + 1);
              uint64_t v179 = *(void *)&v222[1];
              uint64_t v181 = *((void *)&__src + 1);
              if (!bssl::ssl_cipher_uses_certificate_auth(*((bssl **)this + 194), (const ssl_cipher_st *)a2))
              {
                if (v72 != 8) {
                  bssl::ssl_client_handshake();
                }
                if (*((void *)&__src + 1))
                {
                  ERR_put_error(16, 0, 151, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1287);
                  bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 50);
LABEL_392:
                  finisheunsigned int d = 0;
                  goto LABEL_475;
                }
                goto LABEL_471;
              }
              LOWORD(v22std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0;
              if (bssl::ssl_protocol_version((bssl *)v39, v182) < 0x303)
              {
                if ((bssl::tls1_get_legacy_signature_algorithm((bssl *)&v220, (unsigned __int16 *)*v212, v183) & 1) == 0)
                {
                  ERR_put_error(16, 0, 193, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1245);
                  bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 43);
                  goto LABEL_392;
                }
              }
              else
              {
                if (!CBS_get_u16((unsigned __int16 **)&__src, &v220))
                {
                  ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1233);
                  bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 50);
                  goto LABEL_392;
                }
                LOBYTE(__b[0]) = 50;
                if (!bssl::tls12_check_peer_sigalg(this, (const bssl::SSL_HANDSHAKE *)__b, (unsigned __int8 *)(unsigned __int16)v220))
                {
                  bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, LOBYTE(__b[0]));
                  goto LABEL_392;
                }
                *(_WORD *)(*v3)->key_arg = (_WORD)v220;
              }
              *(void *)&long long v245 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v245 + 1) = 0xAAAAAAAAAAAAAAAALL;
              if (!CBS_get_u16_length_prefixed((unsigned __int8 **)&__src, (unint64_t *)&v245)
                || *((void *)&__src + 1))
              {
                ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1254);
                bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 50);
                goto LABEL_392;
              }
              *(void *)&long long v184 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v184 + 1) = 0xAAAAAAAAAAAAAAAALL;
              __b[1] = v184;
              __b[2] = v184;
              __b[0] = v184;
              CBB_zero(__b);
              size_t v185 = v179 - v181;
              long long v242 = 0uLL;
              if (CBB_init((uint64_t)__b, v185 + 64)
                && CBB_add_bytes((uint64_t)__b, (const void *)(*(void *)(v39 + 48) + 48), 0x20uLL)
                && CBB_add_bytes((uint64_t)__b, (const void *)(*(void *)(v39 + 48) + 16), 0x20uLL)
                && CBB_add_bytes((uint64_t)__b, v180, v185)
                && bssl::CBBFinishArray((uint64_t)__b, (uint64_t)&v242))
              {
                if (bssl::ssl_public_key_verify((bssl *)v39, v245, *((uint64_t *)&v245 + 1), (evp_pkey_st *)(unsigned __int16)v220, *v212, (const void *)v242, *((size_t *)&v242 + 1)))
                {
                  char v186 = 1;
                  goto LABEL_470;
                }
                ERR_put_error(16, 0, 114, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1278);
                int v187 = 51;
              }
              else
              {
                ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1270);
                int v187 = 80;
              }
              bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, v187);
              char v186 = 0;
LABEL_470:
              bssl::Array<unsigned short>::~Array((uint64_t)&v242);
              CBB_cleanup((uint64_t)__b);
              if ((v186 & 1) == 0) {
                goto LABEL_392;
              }
LABEL_471:
              (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
              goto LABEL_472;
            }
            ERR_put_error(16, 0, 243, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1205);
            int v143 = 47;
          }
          else
          {
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1198);
            int v143 = 50;
          }
LABEL_386:
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, v143);
          goto LABEL_392;
        }
        if (bssl::ssl_cipher_requires_server_key_exchange(*((bssl **)this + 194), (const ssl_cipher_st *)a2))
        {
          ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1134);
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 10);
          goto LABEL_392;
        }
LABEL_472:
        int v41 = 11;
LABEL_473:
        *((_DWORD *)this + 5) = v41;
LABEL_474:
        finisheunsigned int d = 1;
LABEL_475:
        if (*((_DWORD *)this + 5) != v5) {
          bssl::ssl_do_info_callback(*(void *)this, (const ssl_st *)0x1001);
        }
        if (finished == 1) {
          continue;
        }
        return finished;
      case 11:
        uint64_t v39 = *(void *)this;
        if (!bssl::ssl_cipher_uses_certificate_auth(*((bssl **)this + 194), (const ssl_cipher_st *)a2)) {
          goto LABEL_62;
        }
        *(void *)&__b[2] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[0] = v40;
        __b[1] = v40;
        if (!(*(unsigned int (**)(uint64_t, long long *))(*(void *)v39 + 24))(v39, __b)) {
          goto LABEL_196;
        }
        if (BYTE1(__b[0]) == 14)
        {
          bssl::SSLTranscript::FreeBuffer(v213);
LABEL_62:
          int v41 = 12;
          goto LABEL_473;
        }
        if (!bssl::ssl_check_message_type((bssl *)v39, (uint64_t)__b, 13)
          || !bssl::ssl_hash_message((uint64_t)this, (uint64_t)__b))
        {
          goto LABEL_392;
        }
        v222[0] = *v4;
        *(void *)&long long __src = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&__src + 1) = 0xAAAAAAAAAAAAAAAALL;
        if (!CBS_get_u8_length_prefixed((unsigned __int8 **)v222, (unint64_t *)&__src))
        {
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 50);
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1328);
          goto LABEL_392;
        }
        long long v133 = __src;
        char v135 = bssl::Array<unsigned char>::Init((uint64_t)v205, *((unint64_t *)&__src + 1));
        char v136 = v135 ^ 1;
        if (!*((void *)&v133 + 1)) {
          char v136 = 1;
        }
        if ((v136 & 1) == 0) {
          memmove(*v205, (const void *)v133, *((size_t *)&v133 + 1));
        }
        if ((v135 & 1) == 0) {
          goto LABEL_502;
        }
        if (bssl::ssl_protocol_version((bssl *)v39, v134) >= 0x303)
        {
          *(void *)&long long v245 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v245 + 1) = 0xAAAAAAAAAAAAAAAALL;
          if (!CBS_get_u16_length_prefixed((unsigned __int8 **)v222, (unint64_t *)&v245)
            || (bssl::tls1_parse_peer_sigalgs((bssl **)this, (ssl_st *)&v245) & 1) == 0)
          {
            bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 50);
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1342);
            goto LABEL_392;
          }
        }
        LOBYTE(v242) = 50;
        *(void *)&long long v245 = 0xAAAAAAAAAAAAAAAALL;
        bssl::ssl_parse_client_CA_list(v39, &v242, (unsigned __int8 **)v222, (unint64_t **)&v245);
        unint64_t v137 = (unint64_t *)v245;
        if ((void)v245)
        {
          if (*((void *)&v222[0] + 1))
          {
            bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, 50);
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1357);
            finisheunsigned int d = 0;
          }
          else
          {
            *((_DWORD *)this + 396) |= 0x20u;
            *(void *)&long long v245 = 0;
            std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](v202, v137);
            (*(void (**)(bssl *))(*(void *)(*(void *)(v39 + 120) + 16) + 80))(this);
            (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
            *((_DWORD *)this + 5) = 12;
            finisheunsigned int d = 1;
          }
        }
        else
        {
          bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, v242);
          finisheunsigned int d = 0;
        }
        std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&v245, 0);
        goto LABEL_475;
      case 12:
        long long v45 = *(bssl **)this;
        *(void *)&__b[2] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v46 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[0] = v46;
        __b[1] = v46;
        if (!(*(unsigned int (**)(bssl *, long long *))(*(void *)v45 + 24))(v45, __b)) {
          goto LABEL_196;
        }
        if (!bssl::ssl_check_message_type(v45, (uint64_t)__b, 14)
          || !bssl::ssl_hash_message((uint64_t)this, (uint64_t)__b))
        {
          goto LABEL_392;
        }
        if (*(void *)&__b[1])
        {
          bssl::ssl_send_alert(v45, (ssl_st *)2, 50);
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1385);
          goto LABEL_392;
        }
        if ((*(unsigned int (**)(bssl *))(*(void *)v45 + 40))(v45))
        {
          bssl::ssl_send_alert(v45, (ssl_st *)2, 10);
          ERR_put_error(16, 0, 255, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1392);
          goto LABEL_392;
        }
        (*(void (**)(bssl *))(*(void *)v45 + 32))(v45);
        int v41 = 13;
        goto LABEL_473;
      case 13:
        if ((*((unsigned char *)this + 1584) & 0x20) == 0)
        {
          int v41 = 14;
          goto LABEL_473;
        }
        unint64_t v86 = *(bssl **)this;
        if (*(_DWORD *)(*(void *)(*(void *)this + 48) + 216) == 2)
        {
          SSL_certs_clear(*(void *)this);
        }
        else
        {
          uint64_t v100 = *(void *)(*((void *)this + 1) + 32);
          id v101 = *(uint64_t (**)(void, void))(v100 + 64);
          if (v101)
          {
            int v102 = v101(*(void *)this, *(void *)(v100 + 72));
            if (!v102)
            {
              bssl::ssl_send_alert(v86, (ssl_st *)2, 80);
              ERR_put_error(16, 0, 126, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1455);
              goto LABEL_392;
            }
            if (v102 < 0)
            {
              *((_DWORD *)this + 5) = 13;
              finisheunsigned int d = 8;
              goto LABEL_475;
            }
          }
        }
        __b[0] = 0uLL;
        if ((bssl::ssl_get_credential_list(this, (void **)__b) & 1) == 0) {
          goto LABEL_353;
        }
        if (!*((void *)&__b[0] + 1))
        {
          bssl::SSLTranscript::FreeBuffer(v213);
          goto LABEL_350;
        }
        int v201 = v86;
        unint64_t v103 = *(uint64_t **)&__b[0];
        uint64_t v104 = 8 * *((void *)&__b[0] + 1);
        while (2)
        {
          uint64_t v105 = *v103;
          ERR_clear_error();
          LOWORD(v222[0]) = -21846;
          if (*(_DWORD *)(v105 + 4))
          {
            int v107 = 1404;
LABEL_225:
            ERR_put_error(16, 0, 228, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", v107);
LABEL_238:
            ++v103;
            v104 -= 8;
            if (!v104) {
              goto LABEL_349;
            }
            continue;
          }
          break;
        }
        if ((*(_WORD *)(*((void *)this + 1) + 301) & 0x4000) != 0)
        {
          int v109 = EVP_PKEY_id(*(void *)(v105 + 8));
          if (v109 == 6)
          {
            BOOL v110 = v4;
            id v111 = v3;
            int v112 = 1;
          }
          else
          {
            if (v109 != 949 && v109 != 408)
            {
              int v107 = 1420;
              goto LABEL_225;
            }
            BOOL v110 = v4;
            id v111 = v3;
            int v112 = 64;
          }
          uint64_t v113 = (char *)*((void *)this + 186);
          size_t v114 = *((void *)this + 187);
          uint64_t v115 = (char *)memchr(v113, v112, v114);
          uint64_t v116 = v115 ? v115 : &v113[v114];
          unint64_t v3 = v111;
          uint64_t v4 = v110;
          if (v116 - v113 == v114)
          {
            int v107 = 1425;
            goto LABEL_225;
          }
        }
        if (!bssl::tls1_choose_signature_algorithm(this, (EVP_PKEY **)v105, (const ssl_credential_st *)v222, v106))goto LABEL_238; {
        SSL_CREDENTIAL_up_ref(v105);
        }
        std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100](v215, (ssl_credential_st *)v105);
        *((_WORD *)this + 797) = v222[0];
LABEL_349:
        if (!*v215)
        {
          bssl::ssl_send_alert(v201, (ssl_st *)2, 40);
          goto LABEL_353;
        }
LABEL_350:
        if (bssl::ssl_send_tls12_certificate(this, v108))
        {
          *((_DWORD *)this + 5) = 14;
          finisheunsigned int d = 1;
          goto LABEL_354;
        }
LABEL_353:
        finisheunsigned int d = 0;
LABEL_354:
        OPENSSL_free(*(void **)&__b[0]);
        goto LABEL_475;
      case 14:
        id v27 = *(bssl **)this;
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v238 = v28;
        long long v239 = v28;
        long long __src = v28;
        CBB_zero(&__src);
        *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v246 = v29;
        long long v247 = v29;
        long long v245 = v29;
        if (((*(uint64_t (**)(bssl *, long long *, long long *, uint64_t))(*(void *)v27 + 88))(v27, &__src, &v245, 16) & 1) == 0)
        {
          finisheunsigned int d = 0;
          goto LABEL_416;
        }
        BOOL v220 = 0;
        size_t v221 = 0;
        size_t v31 = (bssl *)*((void *)this + 194);
        int v32 = *((_DWORD *)v31 + 5);
        int v33 = *((_DWORD *)v31 + 6);
        if (!bssl::ssl_cipher_uses_certificate_auth(v31, v30)) {
          goto LABEL_52;
        }
        int v34 = OPENSSL_sk_value(*(unint64_t **)&(*v3)->sid_ctx[28], 0);
        *((void *)&__b[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__b[0] = 0xAAAAAAAAAAAAAAAALL;
        CRYPTO_BUFFER_init_CBS((uint64_t)v34, __b);
        if (bssl::ssl_cert_check_key_usage(__b, 2 * (v32 & 1u))) {
          goto LABEL_52;
        }
        if ((*(_WORD *)(*((void *)this + 1) + 301) & 0x10) != 0 || EVP_PKEY_id((uint64_t)*v212) != 6) {
          goto LABEL_414;
        }
        ERR_clear_error();
        *(_WORD *)(*((void *)v27 + 6) + 220) |= 0x4000u;
LABEL_52:
        *(void *)&long long v35 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[14] = v35;
        __b[15] = v35;
        __b[12] = v35;
        __b[13] = v35;
        __b[10] = v35;
        __b[11] = v35;
        __b[8] = v35;
        __b[9] = v35;
        __b[6] = v35;
        __b[7] = v35;
        __b[4] = v35;
        __b[5] = v35;
        __b[2] = v35;
        __b[3] = v35;
        __b[0] = v35;
        __b[1] = v35;
        if ((v33 & 8) != 0)
        {
          uint64_t v117 = *((void *)this + 1);
          if (!*(void *)(v117 + 64))
          {
            int v37 = 1543;
            int v38 = 196;
            goto LABEL_306;
          }
          LOBYTE(v229) = 0;
          long long v227 = 0u;
          long long v228 = 0u;
          long long v225 = 0u;
          long long v226 = 0u;
          long long v223 = 0u;
          long long v224 = 0u;
          memset(v222, 0, sizeof(v222));
          unsigned int v118 = (*(uint64_t (**)(bssl *, void, _OWORD *, uint64_t, long long *, uint64_t))(v117 + 64))(v27, *v211, v222, 129, __b, 256);
          unsigned int v36 = v118;
          if (!v118)
          {
            ERR_put_error(16, 0, 195, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1553);
            bssl::ssl_send_alert(v27, (ssl_st *)2, 40);
            goto LABEL_414;
          }
          if (v118 >= 0x101) {
            __assert_rtn("do_send_client_key_exchange", "handshake_client.cc", 1557, "psk_len <= PSK_MAX_PSK_LEN");
          }
          id v119 = *v3;
          uint64_t v120 = (char *)OPENSSL_strdup((const char *)v222);
          std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&v119->sid_ctx[20], v120);
          if (!*(void *)&(*v3)->sid_ctx[20]) {
            goto LABEL_414;
          }
          *(void *)&long long v121 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v121 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v243 = v121;
          long long v244 = v121;
          long long v242 = v121;
          if (!CBB_add_u16_length_prefixed((uint64_t *)&v245, (uint64_t)&v242)) {
            goto LABEL_414;
          }
          size_t v122 = OPENSSL_strnlen((uint64_t)v222, 0x81uLL);
          if (!CBB_add_bytes((uint64_t)&v242, v222, v122) || !CBB_flush((uint64_t *)&v245)) {
            goto LABEL_414;
          }
        }
        else
        {
          unsigned int v36 = 0;
        }
        if (v32)
        {
          OPENSSL_free(v220);
          BOOL v220 = 0;
          size_t v221 = 0;
          BOOL v220 = (unsigned __int8 *)OPENSSL_malloc(0x30uLL);
          if (!v220) {
            goto LABEL_414;
          }
          size_t v221 = 48;
          uint64_t v138 = (const RSA *)EVP_PKEY_get0_RSA((uint64_t)*v212);
          if (!v138)
          {
            ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1582);
            finisheunsigned int d = 0;
            goto LABEL_415;
          }
          *BOOL v220 = *((unsigned char *)this + 1589);
          v220[1] = *((unsigned char *)this + 1588);
          if (!RAND_bytes(v220 + 2, 46)) {
            goto LABEL_414;
          }
          *(void *)&long long v139 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v222[1] = v139;
          long long v223 = v139;
          v222[0] = v139;
          *(void *)&long long v242 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__n[4] = 0xAAAAAAAAAAAAAAAALL;
          if (!CBB_add_u16_length_prefixed((uint64_t *)&v245, (uint64_t)v222)) {
            goto LABEL_414;
          }
          unsigned int v140 = RSA_size(v138);
          if (!CBB_reserve((uint64_t)v222, &v242, v140)) {
            goto LABEL_414;
          }
          uint64_t v141 = v242;
          unsigned int v142 = RSA_size(v138);
          if (!RSA_encrypt((uint64_t)v138, (uint64_t *)&__n[4], v141, v142, (uint64_t)v220, v221, 1)
            || !CBB_did_write((uint64_t)v222, *(uint64_t *)&__n[4])
            || !CBB_flush((uint64_t *)&v245))
          {
            goto LABEL_414;
          }
          goto LABEL_344;
        }
        if ((v32 & 2) == 0)
        {
          if ((v32 & 8) == 0)
          {
            bssl::ssl_send_alert(v27, (ssl_st *)2, 40);
            int v37 = 1632;
            int v38 = 68;
LABEL_306:
            ERR_put_error(16, 0, v38, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", v37);
            finisheunsigned int d = 0;
            goto LABEL_415;
          }
          if (!bssl::Array<unsigned char>::Init((uint64_t)&v220, v36)) {
            goto LABEL_414;
          }
          if (v221) {
            bzero(v220, v221);
          }
          goto LABEL_344;
        }
        *(void *)&long long v144 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v144 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v222[1] = v144;
        long long v223 = v144;
        v222[0] = v144;
        if (!CBB_add_u8_length_prefixed((uint64_t *)&v245, (uint64_t)v222)) {
          goto LABEL_414;
        }
        *(void *)&long long v242 = 0xAAAAAAAAAAAAAAAALL;
        bssl::SSLKeyShare::Create((void *)HIWORD((*v3)->key_arg_length), &v242);
        int v145 = 50;
        __n[4] = 50;
        if (!(void)v242) {
          goto LABEL_412;
        }
        if ((*(uint64_t (**)(void, _OWORD *, unsigned __int8 **, unsigned char *, void, void))(*(void *)v242 + 32))(v242, v222, &v220, &__n[4], *((void *)this + 87), *((void *)this + 88)))
        {
          if (CBB_flush((uint64_t *)&v245))
          {
            OPENSSL_free(*v203);
            *uint64_t v203 = 0;
            v203[1] = 0;
            std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&v242, 0);
LABEL_344:
            if ((v33 & 8) == 0)
            {
LABEL_345:
              if (bssl::ssl_add_message_cbb((uint64_t)v27, (uint64_t)&__src))
              {
                unsigned __int8 master_secret = bssl::tls1_generate_master_secret((uint64_t *)this, (unsigned char *)(*((void *)this + 190) + 11), (char *)v220, v221);
                BOOL v154 = *v3;
                (*v3)->key_arg[2] = master_secret;
                if (master_secret)
                {
                  LOBYTE(v154[1].peer) = (uint64_t)v154[1].peer & 0xFE | *((unsigned char *)this + 1586) & 1;
                  *((_DWORD *)this + 5) = 15;
                  finisheunsigned int d = 1;
                  goto LABEL_415;
                }
              }
              goto LABEL_414;
            }
            *(void *)&long long v173 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v173 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v222[1] = v173;
            long long v223 = v173;
            v222[0] = v173;
            CBB_zero(v222);
            *(void *)&long long v174 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v174 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v243 = v174;
            long long v244 = v174;
            long long v242 = v174;
            if (CBB_init((uint64_t)v222, v221 + v36 + 4)
              && CBB_add_u16_length_prefixed((uint64_t *)v222, (uint64_t)&v242)
              && CBB_add_bytes((uint64_t)&v242, v220, v221)
              && CBB_add_u16_length_prefixed((uint64_t *)v222, (uint64_t)&v242)
              && CBB_add_bytes((uint64_t)&v242, __b, v36)
              && bssl::CBBFinishArray((uint64_t)v222, (uint64_t)&v220))
            {
              CBB_cleanup((uint64_t)v222);
              goto LABEL_345;
            }
            CBB_cleanup((uint64_t)v222);
LABEL_414:
            finisheunsigned int d = 0;
LABEL_415:
            OPENSSL_free(v220);
LABEL_416:
            CBB_cleanup((uint64_t)&__src);
            goto LABEL_475;
          }
        }
        else
        {
          int v145 = __n[4];
LABEL_412:
          bssl::ssl_send_alert(v27, (ssl_st *)2, v145);
        }
        std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&v242, 0);
        goto LABEL_414;
      case 15:
        if ((*((unsigned char *)this + 1584) & 0x20) == 0 || !*v215)
        {
          int v41 = 16;
          goto LABEL_473;
        }
        __int16 v52 = *(bssl **)this;
        *(void *)&long long v53 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v53 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[1] = v53;
        __b[2] = v53;
        __b[0] = v53;
        CBB_zero(__b);
        *(void *)&long long v54 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v54 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v222[1] = v54;
        long long v223 = v54;
        v222[0] = v54;
        long long v238 = v54;
        long long v239 = v54;
        long long __src = v54;
        if (((*(uint64_t (**)(bssl *, long long *, _OWORD *, uint64_t))(*(void *)v52 + 88))(v52, __b, v222, 15) & 1) == 0)goto LABEL_215; {
        if (!*((_WORD *)this + 797))
        }
          __assert_rtn("do_send_client_certificate_verify", "handshake_client.cc", 1683, "hs->signature_algorithm != 0");
        if (bssl::ssl_protocol_version(v52, v55) < 0x303
          || CBB_add_u16((uint64_t)v222, *((unsigned __int16 *)this + 797)))
        {
          int v56 = EVP_PKEY_size(*((EVP_PKEY **)*v215 + 1));
          *(void *)&long long v245 = 0xAAAAAAAAAAAAAAAALL;
          if (!CBB_add_u16_length_prefixed((uint64_t *)v222, (uint64_t)&__src)
            || !CBB_reserve((uint64_t)&__src, &v245, v56))
          {
LABEL_215:
            finisheunsigned int d = 0;
            goto LABEL_216;
          }
          *(void *)&long long v242 = v56;
          int v57 = bssl::ssl_private_key_sign((uint64_t)this, (void *)v245, (unint64_t *)&v242, v56, (evp_pkey_st *)*((unsigned __int16 *)this + 797), *(const void **)(*((void *)this + 53) + 8), **((void **)this + 53));
          if (v57 == 1)
          {
            finisheunsigned int d = 9;
            int v58 = 15;
          }
          else
          {
            if (v57 == 2
              || !CBB_did_write((uint64_t)&__src, v242)
              || !bssl::ssl_add_message_cbb((uint64_t)v52, (uint64_t)__b))
            {
              goto LABEL_215;
            }
            bssl::SSLTranscript::FreeBuffer(v213);
            finisheunsigned int d = 1;
            int v58 = 16;
          }
          *((_DWORD *)this + 5) = v58;
        }
        else
        {
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1687);
          finisheunsigned int d = 0;
        }
LABEL_216:
        CBB_cleanup((uint64_t)__b);
        goto LABEL_475;
      case 16:
        __int16 v24 = *(void **)this;
        *((_DWORD *)this + 396) |= 0x1000000u;
        if (!(*(unsigned int (**)(void *, bssl::SSL_HANDSHAKE *))(*v24 + 112))(v24, a2)
          || !bssl::tls1_change_cipher_state((uint64_t *)this, 1))
        {
          goto LABEL_392;
        }
        int v25 = *((_DWORD *)this + 396);
        if ((v25 & 0x4000) != 0)
        {
          int v126 = *(_DWORD *)(v24[6] + 488);
          *(void *)&long long v127 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v127 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __b[1] = v127;
          __b[2] = v127;
          __b[0] = v127;
          CBB_zero(__b);
          *(void *)&long long v128 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v128 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v222[1] = v128;
          long long v223 = v128;
          v222[0] = v128;
          long long v238 = v128;
          long long v239 = v128;
          long long __src = v128;
          if (!(*(unsigned int (**)(void *, long long *, _OWORD *, uint64_t))(*v24 + 88))(v24, __b, v222, 67)|| !CBB_add_u8_length_prefixed((uint64_t *)v222, (uint64_t)&__src)|| !CBB_add_bytes((uint64_t)&__src, *(const void **)(v24[6] + 480), *(void *)(v24[6] + 488))|| !CBB_add_u8_length_prefixed((uint64_t *)v222, (uint64_t)&__src)|| !CBB_add_bytes((uint64_t)&__src, &bssl::do_send_client_finished(bssl::SSL_HANDSHAKE *)::kZero, 32 - (((_BYTE)v126 + 2) & 0x1F))|| (bssl::ssl_add_message_cbb((uint64_t)v24, (uint64_t)__b) & 1) == 0)
          {
            ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1747);
            CBB_cleanup((uint64_t)__b);
            goto LABEL_392;
          }
          CBB_cleanup((uint64_t)__b);
          if ((*((_DWORD *)this + 396) & 0x2000000) == 0) {
            goto LABEL_46;
          }
        }
        else if ((v25 & 0x2000000) == 0)
        {
          goto LABEL_46;
        }
        *(void *)&long long v129 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v129 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[1] = v129;
        __b[2] = v129;
        __b[0] = v129;
        CBB_zero(__b);
        *(void *)&long long v130 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v130 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v222[1] = v130;
        long long v223 = v130;
        v222[0] = v130;
        if (!(*(unsigned int (**)(void *, long long *, _OWORD *, uint64_t))(*v24 + 88))(v24, __b, v222, 203)|| !bssl::tls1_write_channel_id((uint64_t)this, (uint64_t *)v222, v131, v132)|| (bssl::ssl_add_message_cbb((uint64_t)v24, (uint64_t)__b) & 1) == 0)
        {
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1758);
          CBB_cleanup((uint64_t)__b);
          goto LABEL_392;
        }
        CBB_cleanup((uint64_t)__b);
LABEL_46:
        if (!bssl::ssl_send_finished(this, a2)) {
          goto LABEL_392;
        }
        *((_DWORD *)this + 5) = 17;
LABEL_48:
        finisheunsigned int d = 4;
        goto LABEL_475;
      case 17:
        uint64_t v64 = *(void *)this;
        if (*(void *)(*(void *)this + 104))
        {
          int v41 = 21;
          goto LABEL_473;
        }
        if (!bssl::tls1_record_handshake_hashes_for_channel_id(this, a2)) {
          goto LABEL_392;
        }
        *((_DWORD *)this + 5) = 18;
        if ((SSL_get_mode(v64) & 0x80) == 0) {
          goto LABEL_474;
        }
        uint64_t v97 = *(const SSL **)this;
        if (SSL_is_dtls(*(unsigned __int8 ***)this)) {
          goto LABEL_474;
        }
        if (SSL_version(v97) != 771) {
          goto LABEL_474;
        }
        uint64_t v98 = *((void *)this + 194);
        if (*(_DWORD *)(v98 + 20) != 2) {
          goto LABEL_474;
        }
        if (*(_DWORD *)(v98 + 32) != 8) {
          goto LABEL_474;
        }
        handshake_func = v97->handshake_func;
        if (*((_DWORD *)handshake_func + 54) == 2
          || (v97->s2[2].challenge_length & 0x100) == 0
          && !*((void *)handshake_func + 63)
          && !*((void *)handshake_func + 61))
        {
          goto LABEL_474;
        }
        if ((*(_WORD *)(*(void *)(v64 + 48) + 220) & 0x20) != 0) {
          goto LABEL_474;
        }
        *((_DWORD *)this + 396) |= 0x2200u;
        finisheunsigned int d = 12;
        goto LABEL_475;
      case 18:
        if ((*((unsigned char *)this + 1585) & 0x80) == 0) {
          goto LABEL_141;
        }
        id v87 = *(bssl **)this;
        *(void *)&__b[2] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v88 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v88 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[0] = v88;
        __b[1] = v88;
        if (!(*(unsigned int (**)(bssl *, long long *))(*(void *)v87 + 24))(v87, __b))
        {
LABEL_196:
          finisheunsigned int d = 3;
          goto LABEL_475;
        }
        if (!bssl::ssl_check_message_type(v87, (uint64_t)__b, 4)
          || !bssl::ssl_hash_message((uint64_t)this, (uint64_t)__b))
        {
          goto LABEL_392;
        }
        v222[0] = *v4;
        *(void *)&long long __src = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&__src + 1) = 0xAAAAAAAAAAAAAAAALL;
        LODWORD(v242) = -1431655766;
        if (!CBS_get_u32((uint64_t *)v222, (int *)&v242)
          || !CBS_get_u16_length_prefixed((unsigned __int8 **)v222, (unint64_t *)&__src)
          || *((void *)&v222[0] + 1))
        {
          bssl::ssl_send_alert(v87, (ssl_st *)2, 50);
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1862);
          goto LABEL_392;
        }
        if (!*((void *)&__src + 1))
        {
          *((_DWORD *)this + 396) &= ~0x8000u;
          (*(void (**)(bssl *))(*(void *)v87 + 32))(v87);
          goto LABEL_141;
        }
        id v90 = (bssl *)*((void *)v87 + 13);
        if (!v90) {
          goto LABEL_190;
        }
        if (*v3) {
          bssl::ssl_client_handshake();
        }
        bssl::SSL_SESSION_dup(v90, (ssl_session_st *)2, &v245);
        unint64_t v91 = (SSL_SESSION *)v245;
        *(void *)&long long v245 = 0;
        std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](v3, v91);
        std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)&v245, 0);
        if (*v3)
        {
          (*v3)[1].session_id[24] |= 1u;
LABEL_190:
          bssl::ssl_session_rebase_time(v87, (ssl_st *)*v3, v89);
          p_dummy = (void **)&(*v3)->ex_data.dummy;
          long long v93 = __src;
          int v94 = bssl::Array<unsigned char>::Init((uint64_t)p_dummy, *((unint64_t *)&__src + 1));
          char v95 = v94 ^ 1;
          if (!*((void *)&v93 + 1)) {
            char v95 = 1;
          }
          if ((v95 & 1) == 0) {
            memmove(*p_dummy, (const void *)v93, *((size_t *)&v93 + 1));
          }
          if (v94)
          {
            uint64_t v96 = *((void *)this + 190);
            *(_DWORD *)(v96 + 372) = v242;
            SHA256((const unsigned __int8 *)__src, *((size_t *)&__src + 1), (unsigned __int8 *)(v96 + 60));
            *(unsigned char *)(*((void *)this + 190) + 59) = 32;
            (*(void (**)(bssl *))(*(void *)v87 + 32))(v87);
LABEL_141:
            *((_DWORD *)this + 5) = 19;
            finisheunsigned int d = 15;
            goto LABEL_475;
          }
        }
        goto LABEL_392;
      case 19:
        if (!bssl::tls1_change_cipher_state((uint64_t *)this, 0)) {
          goto LABEL_392;
        }
        int v41 = 20;
        goto LABEL_473;
      case 20:
        uint64_t v65 = *(void *)this;
        finisheunsigned int d = bssl::ssl_get_finished(this, a2);
        if (finished != 1) {
          goto LABEL_475;
        }
        if (*(void *)(v65 + 104)) {
          int v49 = 16;
        }
        else {
          int v49 = 21;
        }
        goto LABEL_199;
      case 21:
        uint64_t v66 = *(void *)this;
        if (*(_DWORD *)(*(void *)(*(void *)this + 48) + 216) == 2)
        {
          *((_DWORD *)this + 396) |= 2u;
          bssl::ssl_send_alert((bssl *)v66, (ssl_st *)2, 121);
          ERR_put_error(16, 0, 319, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/handshake_client.cc", 1940);
          goto LABEL_392;
        }
        (*(void (**)(void, bssl::SSL_HANDSHAKE *))(*(void *)v66 + 128))(*(void *)this, a2);
        id v78 = *v3;
        if (!*v3)
        {
          __int16 v125 = *(SSL_SESSION **)(v66 + 104);
          if (!v125) {
            bssl::ssl_client_handshake();
          }
          SSL_SESSION_up_ref(*(unsigned int **)(v66 + 104));
          uint64_t v84 = (SSL_SESSION **)(*(void *)(v66 + 48) + 472);
          id v85 = v125;
          goto LABEL_263;
        }
        bssl::SSL_SESSION_dup((bssl *)*v3, (ssl_session_st *)3, __b);
        uint64_t v79 = (SSL_SESSION **)(*(void *)(v66 + 48) + 472);
        unint64_t v80 = *(SSL_SESSION **)&__b[0];
        *(void *)&__b[0] = 0;
        std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](v79, v80);
        id v81 = *(SSL_SESSION **)&__b[0];
        *(void *)&__b[0] = 0;
        if (v81) {
          SSL_SESSION_free(v81);
        }
        uint64_t v82 = *(void *)(v66 + 48);
        uint64_t v83 = *(void *)(v82 + 472);
        if (v83)
        {
          if ((*(_WORD *)(v82 + 220) & 0x20) == 0) {
            *(unsigned char *)(v83 + 440) &= ~4u;
          }
          uint64_t v84 = v3;
          id v85 = 0;
LABEL_263:
          std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](v84, v85);
          *((_DWORD *)this + 396) |= 8u;
          *(_WORD *)(*(void *)(v66 + 48) + 220) |= 0x20u;
          if (v78) {
            bssl::ssl_update_cache((bssl *)v66, (ssl_st *)a2);
          }
          int v41 = 22;
          goto LABEL_473;
        }
        goto LABEL_392;
      case 22:
        bssl::ssl_do_info_callback(*(void *)this, (const ssl_st *)0x20);
        return 1;
      default:
        goto LABEL_392;
    }
  }
}

void sub_1BA119E38(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

__darwin_time_t boringssl_helper_get_current_time_ms()
{
  v1.__darwin_time_t tv_sec = 0;
  *(void *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return 1000 * v1.tv_sec + v1.tv_usec / 1000;
}

int RAND_bytes(unsigned __int8 *buf, int num)
{
  return 1;
}

uint64_t CRYPTO_sysrand(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t (**)(void, uint64_t, uint64_t))ccrng();
  if (!v4) {
    abort();
  }
  return (*v4)(v4, a2, a1);
}

void std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](SSL_SESSION **a1, SSL_SESSION *a2)
{
  unint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    SSL_SESSION_free(v3);
  }
}

uint64_t bssl::ssl_setup_extension_permutation(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((*(_WORD *)(*((void *)this + 1) + 301) & 0x400) == 0) {
    return 1;
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v17[12] = v4;
  long long v16 = v4;
  *(_OWORD *)char v17 = v4;
  long long v14 = v4;
  long long v15 = v4;
  *(_OWORD *)buf = v4;
  long long v13 = v4;
  if (RAND_bytes(buf, 108) && (OPENSSL_free(0), int v5 = OPENSSL_malloc(0x1CuLL), (v6 = v5) != 0))
  {
    for (uint64_t i = 0; i != 28; ++i)
      *((unsigned char *)v5 + i) = i;
    for (uint64_t j = 0; j != -27; --j)
    {
      unint64_t v9 = *(unsigned int *)&v17[4 * j + 24] % (unint64_t)(j + 28);
      char v10 = *((unsigned char *)v5 + j + 27);
      *((unsigned char *)v5 + j + 27) = *((unsigned char *)v5 + v9);
      *((unsigned char *)v5 + v9) = v10;
    }
    OPENSSL_free(*((void **)this + 89));
    *((void *)this + 89) = v6;
    *((void *)this + 9std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 28;
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }
  OPENSSL_free(0);
  return v2;
}

void sub_1BA11A1C8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bssl::ssl_encrypt_client_hello(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  long long v4 = *(void **)a1;
  if (*(void *)(a1 + 1544))
  {
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v64 = v7;
    long long v65 = v7;
    *(_OWORD *)buf = v7;
    CBB_zero(buf);
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v61 = v8;
    long long v62 = v8;
    long long v60 = v8;
    CBB_zero(&v60);
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v58 = v9;
    long long v59 = v9;
    long long v57 = v9;
    char v56 = -86;
    long long v54 = 0;
    size_t v55 = 0;
    if (!(*(unsigned int (**)(void *, unsigned __int8 *, long long *, uint64_t))(*v4 + 88))(v4, buf, &v57, 1)|| !CBB_init((uint64_t)&v60, 0x100uLL)|| !bssl::ssl_write_client_hello_without_extensions(a1, (uint64_t *)&v57, 1, 0)|| !bssl::ssl_write_client_hello_without_extensions(a1, (uint64_t *)&v60, 1, 1)|| (unint64_t v10 = CBB_len((uint64_t)&v57), !bssl::ssl_add_clienthello_tlsext(a1, (uint64_t *)&v57, (uint64_t *)&v60, &v56, (const ssl_session_st *)1, v10))|| ((*(uint64_t (**)(void *, unsigned __int8 *, void **))(*v4 + 96))(v4, buf, &v54) & 1) == 0)
    {
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/encrypted_client_hello.cc", 792);
      BOOL v18 = 0;
LABEL_20:
      OPENSSL_free(v54);
      CBB_cleanup((uint64_t)&v60);
      CBB_cleanup((uint64_t)buf);
      return v18;
    }
    uint64_t v11 = v55;
    if (v56)
    {
      *(void *)&long long v69 = 0xAAAAAAAAAAAAAAAALL;
      if ((bssl::tls13_write_psk_binder((uint64_t *)a1, (ssl_session_st *)(a1 + 464), (char *)v54, v55, (size_t *)&v69) & 1) == 0)
      {
LABEL_42:
        BOOL v18 = 0;
        goto LABEL_20;
      }
      __int16 v12 = CBB_data((uint64_t)&v60);
      unint64_t v13 = CBB_len((uint64_t)&v60);
      if (v13 < (unint64_t)v69) {
        abort();
      }
      uint64_t v11 = v55;
      if (v55 < (unint64_t)v69) {
        abort();
      }
      if ((void)v69)
      {
        memcpy((char *)v12 + v13 - v69, (char *)v54 + v55 - v69, v69);
        uint64_t v11 = v55;
      }
    }
    bssl::ssl_do_msg_callback((uint64_t)v4, 1, 257, (uint64_t)v54, v11);
    if (bssl::SSLTranscript::Update((void **)(a1 + 464), v54, v55))
    {
      unint64_t v14 = *(unsigned __int8 *)(*(void *)(a1 + 1544) + 66);
      long long v15 = (const char *)v4[20];
      if (v15)
      {
        size_t v16 = strlen(v15);
        if (v14 >= v16) {
          uint64_t v17 = v14 - v16;
        }
        else {
          uint64_t v17 = 0;
        }
      }
      else
      {
        uint64_t v17 = v14 + 9;
      }
      char v32 = CBB_len((uint64_t)&v60);
      __int16 v52 = 0;
      size_t v53 = 0;
      if (!CBB_add_zeros((uint64_t)&v60, ((-v32 - (_BYTE)v17) & 0x1F) + v17)) {
        goto LABEL_62;
      }
      if (!bssl::CBBFinishArray((uint64_t)&v60, (uint64_t)&v52)) {
        goto LABEL_62;
      }
      uint64_t v33 = a1 + 736;
      int v34 = (unsigned __int16 *)EVP_HPKE_CTX_kdf((const EC_KEY *)(a1 + 736));
      long long v35 = (unsigned __int16 *)EVP_HPKE_CTX_aead(a1 + 736);
      size_t v36 = v53;
      uint64_t v37 = EVP_HPKE_AEAD_aead((uint64_t)v35);
      size_t v38 = EVP_AEAD_max_overhead(v37) + v36;
      size_t v51 = v38;
      *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v70 = v39;
      long long v71 = v39;
      long long v68 = v39;
      long long v69 = v39;
      *(_OWORD *)uint64_t v66 = v39;
      long long v67 = v39;
      if (!CBB_init((uint64_t)buf, 0x100uLL)) {
        goto LABEL_62;
      }
      unsigned int v40 = EVP_HPKE_KDF_id(v34);
      if (CBB_add_u16((uint64_t)buf, v40)
        && (unsigned int v41 = EVP_HPKE_KDF_id(v35), CBB_add_u16((uint64_t)buf, v41))
        && CBB_add_u8((uint64_t)buf, *(unsigned __int8 *)(*(void *)(a1 + 1544) + 67))
        && CBB_add_u16_length_prefixed((uint64_t *)buf, (uint64_t)&v69)
        && CBB_add_bytes((uint64_t)&v69, a2, a3)
        && CBB_add_u16_length_prefixed((uint64_t *)buf, (uint64_t)v66)
        && CBB_add_zeros((uint64_t)v66, v38)
        && bssl::CBBFinishArray((uint64_t)buf, a1 + 568))
      {
        *(void *)&long long v42 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v49 = v42;
        long long v50 = v42;
        *(_OWORD *)BOOL v48 = v42;
        CBB_zero(v48);
        if (CBB_init((uint64_t)v48, 0x100uLL)
          && bssl::ssl_write_client_hello_without_extensions(a1, (uint64_t *)v48, 2, 0)
          && (unint64_t v43 = CBB_len((uint64_t)v48),
              bssl::ssl_add_clienthello_tlsext(a1, (uint64_t *)v48, 0, &v56, (const ssl_session_st *)2, v43)))
        {
          if (v56) {
            __assert_rtn("ssl_encrypt_client_hello", "encrypted_client_hello.cc", 876, "!needs_psk_binder");
          }
          size_t v44 = *(void *)(a1 + 576);
          if (v44 < v38) {
            abort();
          }
          uint64_t v45 = *(void *)(a1 + 568);
          long long v46 = v52;
          size_t v47 = v53;
          CBB_data((uint64_t)v48);
          CBB_len((uint64_t)v48);
          if (EVP_HPKE_CTX_seal(v33, (char *)(v45 + v44 - v38), &v51, v38, v46, v47)) {
            BOOL v18 = v51 == v38;
          }
          else {
            BOOL v18 = 0;
          }
        }
        else
        {
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/encrypted_client_hello.cc", 870);
          BOOL v18 = 0;
        }
        CBB_cleanup((uint64_t)v48);
      }
      else
      {
LABEL_62:
        BOOL v18 = 0;
      }
      bssl::Array<unsigned short>::~Array((uint64_t)&v52);
      goto LABEL_20;
    }
    goto LABEL_42;
  }
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u || (*(_WORD *)(*(void *)(a1 + 8) + 301) & 1) == 0) {
    return 1;
  }
  unsigned int v19 = *(unsigned __int16 *)(v4[1] + 301);
  if ((v19 & 0x800) != 0)
  {
    if ((v19 >> 12)) {
      goto LABEL_26;
    }
  }
  else if (ssl_credential_st::UsesPrivateKey((ssl_credential_st *)a1))
  {
LABEL_26:
    uint64_t v20 = (unsigned __int16 *)EVP_hpke_aes_128_gcm();
    goto LABEL_29;
  }
  uint64_t v20 = (unsigned __int16 *)EVP_hpke_chacha20_poly1305();
LABEL_29:
  char v21 = v20;
  unsigned int v22 = *(unsigned __int8 *)(a1 + 1636);
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v23;
  long long v70 = v23;
  *(_OWORD *)uint64_t v66 = v23;
  long long v67 = v23;
  X25519_keypair(&v69, v66);
  *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
  RAND_bytes(buf, 8);
  unsigned __int8 v24 = buf[0];
  uint64_t v25 = EVP_HPKE_AEAD_aead((uint64_t)v21);
  uint64_t v26 = EVP_AEAD_max_overhead(v25);
  *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v64 = v27;
  long long v65 = v27;
  *(_OWORD *)buf = v27;
  CBB_zero(buf);
  *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v61 = v28;
  long long v62 = v28;
  long long v59 = v28;
  long long v60 = v28;
  long long v57 = v28;
  long long v58 = v28;
  v48[0] = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  BOOL v18 = CBB_init((uint64_t)buf, 0x100uLL)
     && CBB_add_u16((uint64_t)buf, 1u)
     && (unsigned int v29 = EVP_HPKE_KDF_id(v21), CBB_add_u16((uint64_t)buf, v29))
     && CBB_add_u8((uint64_t)buf, v22)
     && CBB_add_u16_length_prefixed((uint64_t *)buf, (uint64_t)&v60)
     && CBB_add_bytes((uint64_t)&v60, &v69, 0x20uLL)
     && CBB_add_u16_length_prefixed((uint64_t *)buf, (uint64_t)&v57)
     && (uint64_t v30 = ((32 * (v24 & 3)) | 0x80) + v26, CBB_add_space((uint64_t)&v57, v48, v30))
     && RAND_bytes(v48[0], v30)
     && bssl::CBBFinishArray((uint64_t)buf, a1 + 568);
  CBB_cleanup((uint64_t)buf);
  return v18;
}

void sub_1BA11A868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

BOOL bssl::ssl_select_ech_config(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = 0;
  if (*(unsigned __int16 *)(a1 + 30) >= 0x304u && (uint64_t v5 = *(void *)(a1 + 8), (v6 = *(void *)(v5 + 288)) != 0))
  {
    unint64_t v43 = *(unsigned __int8 **)(v5 + 280);
    uint64_t v44 = v6;
    unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
    BOOL v10 = 0;
    if (CBS_get_u16_length_prefixed(&v43, &v41) && v42 && !v44)
    {
      uint64_t v30 = a2;
      uint64_t v31 = a3;
      uint64_t v32 = (uint64_t)a4;
      unsigned int v29 = (uint64_t *)(a1 + 1544);
      while (1)
      {
        *(_OWORD *)size_t v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        unint64_t v40 = 0xAAAAAAAA00000000;
        char v35 = -86;
        if (bssl::parse_ech_config((uint64_t)&v41, (uint64_t)v36, &v35, 0))
        {
          uint64_t v11 = (ssl_credential_st *)EVP_hpke_x25519_hkdf_sha256();
          char v12 = 1;
          if (v35 && (unsigned __int16)v40 == 32)
          {
            uint64_t v13 = (uint64_t)v11;
            long long v14 = v39;
            unsigned int v15 = *(unsigned __int16 *)(*(void *)(*(void *)a1 + 8) + 301);
            if ((v15 & 0x800) != 0) {
              int v16 = (v15 >> 12) & 1;
            }
            else {
              int v16 = ssl_credential_st::UsesPrivateKey(v11);
            }
            v34[0] = v14;
            if (*((void *)&v14 + 1))
            {
              uint64_t v17 = 0;
              while (1)
              {
                BOOL v18 = v17;
                LOWORD(v33) = -21846;
                v45[0] = -21846;
                if (!CBS_get_u16((unsigned __int16 **)v34, &v33)
                  || !CBS_get_u16((unsigned __int16 **)v34, v45))
                {
                  break;
                }
                uint64_t v19 = 0;
                int v20 = v45[0];
                while (1)
                {
                  uint64_t v17 = (unsigned __int16 *)bssl::kSupportedAEADs[v19]();
                  if (EVP_HPKE_KDF_id(v17) == v20) {
                    break;
                  }
                  if (++v19 == 3) {
                    goto LABEL_26;
                  }
                }
                if (v17) {
                  BOOL v21 = (unsigned __int16)v33 == 1;
                }
                else {
                  BOOL v21 = 0;
                }
                if (!v21)
                {
LABEL_26:
                  uint64_t v17 = v18;
                  goto LABEL_27;
                }
                if (v18)
                {
                  if (v16) {
                    goto LABEL_26;
                  }
                  if (v45[0] != 3) {
                    uint64_t v17 = v18;
                  }
                }
LABEL_27:
                if (!*((void *)&v34[0] + 1))
                {
                  if (!v17) {
                    break;
                  }
                  unsigned int v22 = EVP_hpke_hkdf_sha256();
                  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
                  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  v34[1] = v23;
                  v34[2] = v23;
                  v34[0] = v23;
                  CBB_zero(v34);
                  if (CBB_init((uint64_t)v34, (unint64_t)v36[1] + 8)
                    && CBB_add_bytes((uint64_t)v34, "tls ech", 8uLL)
                    && CBB_add_bytes((uint64_t)v34, v36[0], (size_t)v36[1])
                    && (long long v24 = v37,
                        uint64_t v25 = CBB_data((uint64_t)v34),
                        size_t v26 = CBB_len((uint64_t)v34),
                        EVP_HPKE_CTX_setup_sender((void *)(a1 + 736), v30, v32, v31, v13, (uint64_t)v22, (uint64_t)v17, v24, *((uint64_t *)&v24 + 1), v25, v26))&& bssl::SSLTranscript::Init((BUF_MEM **)(a1 + 464)))
                  {
                    long long v27 = bssl::New<bssl::ECHConfig,bssl::ECHConfig>((uint64_t)v36);
                    uint64_t v33 = 0;
                    std::unique_ptr<bssl::ECHConfig,bssl::internal::Deleter>::reset[abi:ne180100](v29, (uint64_t)v27);
                    std::unique_ptr<bssl::ECHConfig,bssl::internal::Deleter>::reset[abi:ne180100](&v33, 0);
                    BOOL v10 = *v29 != 0;
                  }
                  else
                  {
                    BOOL v10 = 0;
                  }
                  CBB_cleanup((uint64_t)v34);
                  char v12 = 0;
                  goto LABEL_42;
                }
              }
            }
            char v12 = 1;
          }
        }
        else
        {
          char v12 = 0;
          BOOL v10 = 0;
        }
LABEL_42:
        OPENSSL_free((void *)v36[0]);
        if ((v12 & 1) == 0) {
          break;
        }
        if (!v42) {
          return 1;
        }
      }
    }
  }
  else
  {
    return 1;
  }
  return v10;
}

void sub_1BA11AC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t bssl::ssl_get_version_range(bssl *this, const bssl::SSL_HANDSHAKE *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v7 = *(void *)this;
  unsigned int v8 = *(_DWORD *)(v7 + 144);
  int is_dtls = SSL_is_dtls((unsigned __int8 **)v7);
  unsigned int v10 = v8 & 0xEFFFFFFF | (((v8 >> 26) & 1) << 28);
  if (!is_dtls) {
    unsigned int v10 = v8;
  }
  uint64_t v11 = *((void *)this + 1);
  unsigned int v12 = *(unsigned __int16 *)(v11 + 10);
  if (v12 - 769 >= 4)
  {
    if (v12 == 65277)
    {
      unsigned int v12 = 771;
    }
    else
    {
      if (v12 != 65279) {
        goto LABEL_12;
      }
      unsigned int v12 = 770;
    }
  }
  unsigned int v13 = *(unsigned __int16 *)(v11 + 8);
  if (v13 - 769 >= 4)
  {
    if (v13 == 65277)
    {
      unsigned int v13 = 771;
      goto LABEL_14;
    }
    if (v13 == 65279)
    {
      unsigned int v13 = 770;
      goto LABEL_14;
    }
LABEL_12:
    int v14 = 68;
    int v15 = 190;
LABEL_30:
    ERR_put_error(16, 0, v14, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_versions.cc", v15);
    return 0;
  }
LABEL_14:
  uint64_t v16 = 0;
  char v17 = 0;
  if (*(void *)(*(void *)this + 168)) {
    BOOL v18 = v12 >= 0x304;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18) {
    LOWORD(v12) = 772;
  }
  do
  {
    unsigned int v19 = (unsigned __int16)bssl::kProtocolVersions[v16];
    if (v19 >= (unsigned __int16)v12)
    {
      if (v13 < v19) {
        break;
      }
      if ((*(_DWORD *)&bssl::kProtocolVersions[v16 + 2] & v10) != 0)
      {
        if (v17)
        {
          LOWORD(v13) = bssl::kProtocolVersions[v16 - 4];
          goto LABEL_32;
        }
        char v17 = 0;
      }
      else
      {
        if ((v17 & 1) == 0) {
          LOWORD(v12) = bssl::kProtocolVersions[v16];
        }
        char v17 = 1;
      }
    }
    v16 += 4;
  }
  while (v16 != 16);
  if ((v17 & 1) == 0)
  {
    int v14 = 280;
    int v15 = 237;
    goto LABEL_30;
  }
LABEL_32:
  *(_WORD *)a2 = v12;
  *a3 = v13;
  return 1;
}

int SSL_connect(SSL *ssl)
{
  if (!*(void *)&ssl->rwstate)
  {
    BYTE4(ssl->param) &= ~1u;
    *(void *)&ssl->rwint state = bssl::ssl_client_handshake;
  }
  return SSL_do_handshake(ssl);
}

void EVP_HPKE_CTX_zero(uint64_t a1)
{
  bzero((void *)a1, 0x2C8uLL);

  EVP_AEAD_CTX_zero((void *)(a1 + 24));
}

uint64_t bssl::SSLAEADContext::SetVersionIfNullCipher(uint64_t this, __int16 a2)
{
  if (!*(void *)this) {
    *(_WORD *)(this + 606) = a2;
  }
  return this;
}

void bssl::tls_on_handshake_complete(bssl *this, ssl_st *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if ((*(_WORD *)(v2 + 220) & 0x10) != 0) {
    bssl::tls_on_handshake_complete();
  }
  uint64_t v5 = *(void **)(v2 + 224);
  unint64_t v3 = (BUF_MEM **)(v2 + 224);
  long long v4 = v5;
  if (v5)
  {
    if (*v4) {
      bssl::tls_on_handshake_complete();
    }
    std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](v3, 0);
  }
}

void bssl::ssl_update_cache(bssl *this, ssl_st *a2)
{
  uint64_t v3 = *((void *)this + 16);
  uint64_t v4 = *(void *)(*((void *)this + 6) + 472);
  int is_server = SSL_is_server((uint64_t)this);
  if ((*(unsigned char *)(v4 + 440) & 4) == 0 && (*(unsigned char *)(v4 + 59) || *(void *)(v4 + 240)))
  {
    int v6 = is_server ? 2 : 1;
    int v7 = *(_DWORD *)(v3 + 300);
    if ((v7 & v6) != 0)
    {
      if (v7 & 0x200) == 0 && (*((unsigned char *)this + 180))
      {
        CRYPTO_refcount_inc((unsigned int *)v4);
        uint64_t v13 = v4;
        tm[0] = 0xAAAAAAAAAAAAAAAALL;
        bssl::internal::MutexLockBase<&(CRYPTO_MUTEX_lock_write),&(CRYPTO_MUTEX_unlock_write)>::MutexLockBase((pthread_rwlock_t **)tm, (pthread_rwlock_t *)(v3 + 24));
        unsigned int v12 = (SSL_SESSION *)v4;
        uint64_t v13 = 0;
        bssl::add_session_locked(v3, &v12);
        unsigned int v8 = v12;
        unsigned int v12 = 0;
        if (v8) {
          bssl::RefCounted<ssl_session_st>::DecRefInternal(v8);
        }
        if ((*(unsigned char *)(v3 + 300) & 0x80) != 0)
        {
          CRYPTO_MUTEX_unlock_read((pthread_rwlock_t *)tm[0]);
        }
        else
        {
          int v9 = *(_DWORD *)(v3 + 296);
          if (v9 <= 253) {
            int v10 = v9 + 1;
          }
          else {
            int v10 = 0;
          }
          *(_DWORD *)(v3 + 296) = v10;
          CRYPTO_MUTEX_unlock_read((pthread_rwlock_t *)tm[0]);
          if (v9 > 253)
          {
            tm[0] = 0xAAAAAAAAAAAAAAAALL;
            tm[1] = 0xAAAAAAAAAAAAAAAALL;
            bssl::ssl_get_current_time((uint64_t)this, (uint64_t)tm);
            SSL_CTX_flush_sessions((SSL_CTX *)v3, tm[0]);
          }
        }
      }
      if (*(void *)(v3 + 312))
      {
        CRYPTO_refcount_inc((unsigned int *)v4);
        tm[0] = v4;
        if (!(*(unsigned int (**)(bssl *, uint64_t))(v3 + 312))(this, v4))
        {
          tm[0] = 0;
          bssl::RefCounted<ssl_session_st>::DecRefInternal((ssl_session_st *)v4);
        }
      }
    }
  }
}

void sub_1BA11B02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t SSL_is_server(uint64_t a1)
{
  return *(unsigned char *)(a1 + 180) & 1;
}

void bssl::ssl_run_handshake()
{
  __assert_rtn("ssl_run_handshake", "handshake.cc", 631, "hs->wait != ssl_hs_read_change_cipher_spec");
}

{
  __assert_rtn("ssl_run_handshake", "handshake.cc", 763, "ssl->s3->ech_status != ssl_ech_rejected");
}

{
  __assert_rtn("ssl_run_handshake", "handshake.cc", 732, "ssl->s3->early_data_reason != ssl_early_data_unknown");
}

{
  __assert_rtn("ssl_run_handshake", "handshake.cc", 733, "!hs->can_early_write");
}

{
  __assert_rtn("ssl_run_handshake", "handshake.cc", 740, "ssl->s3->ech_status != ssl_ech_rejected");
}

void bssl::ssl_client_handshake()
{
  __assert_rtn("do_finish_client_handshake", "handshake_client.cc", 1967, "ssl->session != nullptr");
}

{
  __assert_rtn("should_offer_early_data", "handshake_client.cc", 470, "!ssl->server");
}

{
  __assert_rtn("do_read_hello_verify_request", "handshake_client.cc", 685, "SSL_is_dtls(ssl)");
}

{
  __assert_rtn("do_read_hello_verify_request", "handshake_client.cc", 689, "hs->max_version < TLS1_3_VERSION");
}

{
  __assert_rtn("do_read_server_hello", "handshake_client.cc", 914, "CBS_len(&server_hello.session_id) <= SSL3_SESSION_ID_SIZE");
}

{
  __assert_rtn("do_read_server_hello", "handshake_client.cc", 902, "!ssl->s3->initial_handshake_complete");
}

{
  __assert_rtn("do_read_server_hello", "handshake_client.cc", 785, "ssl->s3->have_version == ssl->s3->initial_handshake_complete");
}

{
  __assert_rtn("do_reverify_server_certificate", "handshake_client.cc", 1108, "hs->ssl->ctx->reverify_on_resume");
}

{
  __assert_rtn("do_read_server_key_exchange", "handshake_client.cc", 1284, "alg_a == SSL_aPSK");
}

{
  __assert_rtn("do_read_session_ticket", "handshake_client.cc", 1880, "!hs->new_session");
}

BOOL __nw_protocol_boringssl_begin_connection_block_invoke_147(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 328);
    if (v4)
    {
      *(void *)(*(void *)(a1 + 40) + 28std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = (*(uint64_t (**)(uint64_t, void))(v4 + 16))(v4, 0);
      *(void *)(*(void *)(a1 + 40) + 28bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = (*(uint64_t (**)(void))(*(void *)(a2 + 328) + 16))();
      *(void *)(*(void *)(a1 + 40) + 296) = (*(uint64_t (**)(void))(*(void *)(a2 + 328) + 16))();
      *(void *)(*(void *)(a1 + 40) + 304) = (*(uint64_t (**)(void))(*(void *)(a2 + 328) + 16))();
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  return a2 != 0;
}

double RSA_default_method_init()
{
  double result = 0.0;
  xmmword_1EB268488 = 0u;
  unk_1EB268498 = 0u;
  xmmword_1EB268468 = 0u;
  unk_1EB268478 = 0u;
  RSA_default_method_storage = 0u;
  BYTE4(RSA_default_method_storage) = 1;
  return result;
}

uint64_t nw_protocol_boringssl_finalize_output_frames(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  timeval v1 = *(unsigned char **)(a1 + 40);
  if (!v1) {
    return 0;
  }
  char v2 = v1[475];
  if ((v2 & 1) == 0 && datapath_logging_enabled && g_boringssl_log)
  {
    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG)) {
      nw_protocol_boringssl_finalize_output_frames_cold_2();
    }
    char v2 = v1[475];
  }
  if ((v2 & 1) == 0
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_finalize_output_frames_cold_1();
  }
  uint64_t v3 = 1;
  nw_frame_array_append_array();
  nw_protocol_boringssl_write_frames(v1);
  return v3;
}

void nw_protocol_boringssl_write_frames(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  timeval v1 = a1;
  if ((v1[475] & 1) == 0
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_write_frames_cold_3();
  }
  if ((nw_frame_array_is_empty() & 1) == 0)
  {
    if ((v1[390] & 8) == 0)
    {
      v1[390] |= 8u;
      char v2 = nw_frame_array_first();
      uint64_t v3 = nw_frame_array_next();
      BOOL v4 = v3 == 0;

      if (!v4)
      {
        unsigned int v5 = nw_frame_array_unclaimed_length();
        if (*((void *)v1 + 22))
        {
          unsigned int v6 = nw_frame_unclaimed_length();
          unsigned int v7 = v5 - v6;
          if (v5 < v6)
          {
            if ((v1[475] & 1) == 0
              && g_boringssl_log
              && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_FAULT))
            {
              nw_protocol_boringssl_write_frames_cold_1();
            }
            goto LABEL_24;
          }
          int v8 = *((_DWORD *)v1 + 46);
          unsigned int v5 = v7 + v8;
          if (__CFADD__(v7, v8))
          {
            if ((v1[475] & 1) == 0)
            {
              int v9 = g_boringssl_log;
              if (g_boringssl_log)
              {
                if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_FAULT))
                {
                  int v10 = *((_DWORD *)v1 + 46);
                  *(_DWORD *)buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_protocol_boringssl_write_frames";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 970;
                  *(_WORD *)&unsigned char buf[18] = 2082;
                  *(void *)&buf[20] = v1 + 391;
                  __int16 v18 = 2048;
                  unsigned int v19 = v1;
                  __int16 v20 = 1024;
                  unsigned int v21 = v5;
                  __int16 v22 = 1024;
                  int v23 = v10;
                  _os_log_fault_impl(&dword_1BA0DE000, v9, OS_LOG_TYPE_FAULT, "%{public}s(%d) %{public}s[%p] unable to write frame array of length %u and pending buffer %u", buf, 0x32u);
                }
              }
            }
            goto LABEL_24;
          }
        }
        uint64_t alloc = (void *)dispatch_data_create_alloc();
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&unsigned __int8 buf[16] = 0x2020000000;
        *(_DWORD *)&buf[24] = 0;
        int v15 = v1;
        id v16 = v2;
        nw_frame_array_foreach();
        unsigned int v12 = (void *)v15[21];
        v15[21] = alloc;
        id v13 = alloc;

        *((void *)v1 + 22) = 0;
        *((_DWORD *)v15 + 46) = v5;

        _Block_object_dispose(buf, 8);
      }
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&unsigned __int8 buf[16] = 0x2020000000;
      buf[24] = 1;
      int v14 = v1;
      nw_frame_array_foreach();
      v1[390] &= ~8u;
      v14[388] = (v14[388] & 0xDF | (32 * *(unsigned char *)(*(void *)&buf[8] + 24))) ^ 0x20;

      _Block_object_dispose(buf, 8);
LABEL_24:

      goto LABEL_25;
    }
    if ((v1[475] & 1) == 0
      && datapath_logging_enabled
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_write_frames_cold_2();
    }
  }
LABEL_25:
}

void sub_1BA11B6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __boringssl_context_evaluate_trust_async_external_block_invoke_2(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  nw_queue_context_async_if_needed();
}

uint64_t SSL_CTX_add_cert_compression_alg(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!(a3 | a4)) {
    SSL_CTX_add_cert_compression_alg_cold_1();
  }
  __int16 v6 = a2;
  uint64_t v8 = *(void *)(a1 + 704);
  if (v8)
  {
    uint64_t v9 = 24 * v8;
    int v10 = (unsigned __int16 *)(*(void *)(a1 + 712) + 16);
    while (1)
    {
      int v11 = *v10;
      v10 += 12;
      if (v11 == a2) {
        return 0;
      }
      v9 -= 24;
      if (!v9) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t result = bssl::GrowableArray<bssl::CertCompressionAlg>::MaybeGrow((unint64_t *)(a1 + 704));
    if (result)
    {
      uint64_t v13 = *(void *)(a1 + 704);
      uint64_t v14 = *(void *)(a1 + 712) + 24 * v13;
      *(void *)uint64_t v14 = a3;
      *(void *)(v14 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a4;
      *(_WORD *)(v14 + 16) = v6;
      *(void *)(a1 + 704) = v13 + 1;
    }
  }
  return result;
}

uint64_t bssl::Array<bssl::CertCompressionAlg>::Init(uint64_t a1, unint64_t a2)
{
  OPENSSL_free(*(void **)a1);
  *(void *)a1 = 0;
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
  if (!a2) {
    return 1;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
  {
    ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/internal.h", 297);
    return 0;
  }
  uint64_t result = (uint64_t)OPENSSL_malloc(24 * a2);
  *(void *)a1 = result;
  if (result)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a2;
    do
    {
      uint64_t v7 = *(void *)a1 + v5;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
      *(_WORD *)(v7 + 16) = 0;
      ++v6;
      v5 += 24;
    }
    while (v6 < *(void *)(a1 + 8));
    return 1;
  }
  return result;
}

uint64_t bssl::GrowableArray<bssl::CertCompressionAlg>::MaybeGrow(unint64_t *a1)
{
  timeval v1 = (void **)(a1 + 1);
  unint64_t v2 = a1[2];
  if (v2)
  {
    if (*a1 < v2) {
      return 1;
    }
    if ((v2 & 0x8000000000000000) != 0)
    {
      ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/internal.h", 412);
      return 0;
    }
    else
    {
      int v15 = 0;
      unint64_t v16 = 0;
      uint64_t v4 = bssl::Array<bssl::CertCompressionAlg>::Init((uint64_t)&v15, 2 * v2);
      if (v4)
      {
        if (a1[2])
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          uint64_t v9 = (char *)v15;
          do
          {
            int v10 = (long long *)(a1[1] + v7);
            int v11 = &v9[v7];
            long long v12 = *v10;
            *((_WORD *)v11 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = *((_WORD *)v10 + 8);
            *(_OWORD *)int v11 = v12;
            ++v8;
            v7 += 24;
          }
          while (v8 < a1[2]);
        }
        OPENSSL_free(*v1);
        uint64_t v13 = 0;
        unint64_t v14 = v16;
        a1[1] = (unint64_t)v15;
        a1[2] = v14;
        int v15 = 0;
        unint64_t v16 = 0;
      }
      else
      {
        uint64_t v13 = v15;
      }
      OPENSSL_free(v13);
    }
    return v4;
  }
  else
  {
    uint64_t v5 = (uint64_t)(a1 + 1);
    return bssl::Array<bssl::CertCompressionAlg>::Init(v5, 0x10uLL);
  }
}

void sub_1BA11BA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

nw_protocol *nw_protocol_boringssl_create()
{
  id v0 = objc_alloc_init(boringssl_concrete_nw_protocol_boringssl);
  timeval v1 = v0;
  if (v0)
  {
    p_protocol = &v0->protocol;
    v0->protocol.identifier = (nw_protocol_identifier *)&g_boringssl_protocol_identifier;
    v0->protocol.callbackunsigned int s = (nw_protocol_callbacks *)&g_boringssl_protocol_callbacks;
    id v3 = v0;
    v3->protocol.handle = v3;
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
    v3->input_frame_byte_size_t count = 0;
    *((unsigned char *)v3 + 388) &= ~0x80u;
    v3->read_func = boringssl_session_read;
    v3->write_func = boringssl_session_write;
    v3->handshake_func = boringssl_session_handshake_negotiate;
    v3->handshake_timer = 0;
  }
  else
  {
    p_protocol = 0;
  }

  return p_protocol;
}

uint64_t nw_protocol_boringssl_get_output_frames(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  LODWORD(vbssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a4;
  if ((*(unsigned char *)(v6 + 475) & 1) == 0)
  {
    if (datapath_logging_enabled)
    {
      if (g_boringssl_log)
      {
        int v18 = a5;
        BOOL v16 = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG);
        a5 = v18;
        if (v16)
        {
          nw_protocol_boringssl_get_output_frames_cold_6();
          a5 = v18;
        }
      }
    }
  }
  uint64_t v10 = 0;
  if (a5 && a6)
  {
    if ((*(unsigned char *)(v6 + 388) & 0x20) != 0)
    {
      if ((*(unsigned char *)(v6 + 475) & 1) == 0
        && g_boringssl_log
        && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        nw_protocol_boringssl_get_output_frames_cold_5();
      }
      return 0;
    }
    int state = boringssl_session_get_state(*(void *)(v6 + 336));
    char v12 = boringssl_session_in_early_data(*(void *)(v6 + 336));
    if (state == 2 || (v12 & 1) != 0)
    {
      if ((*(unsigned char *)(v6 + 475) & 1) == 0)
      {
        if (datapath_logging_enabled)
        {
          char v17 = g_boringssl_log;
          if (g_boringssl_log)
          {
            if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136447490;
              __int16 v20 = "nw_protocol_boringssl_get_output_frames";
              __int16 v21 = 1024;
              int v22 = 1717;
              __int16 v23 = 2082;
              uint64_t v24 = v6 + 391;
              __int16 v25 = 2048;
              uint64_t v26 = v6;
              __int16 v27 = 1024;
              int v28 = a3;
              __int16 v29 = 1024;
              int v30 = v8;
              _os_log_debug_impl(&dword_1BA0DE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] get output frames min bytes %u max bytes %u", buf, 0x32u);
            }
          }
        }
      }
      nw_frame_array_init();
      if (v8 >= 0x4000) {
        size_t v8 = 0x4000;
      }
      else {
        size_t v8 = v8;
      }
      if ((*(unsigned char *)(v6 + 389) & 0x10) != 0)
      {
        external = (void *)nw_frame_create_external();
        if (!external)
        {
          if ((*(unsigned char *)(v6 + 475) & 1) == 0
            && g_boringssl_log
            && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
          {
            nw_protocol_boringssl_get_output_frames_cold_3();
          }
          return 0;
        }
      }
      else
      {
        if (v8 && !malloc_type_malloc(v8, 0x3627E065uLL))
        {
          if ((*(unsigned char *)(v6 + 475) & 1) == 0
            && g_boringssl_log
            && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
          {
            nw_protocol_boringssl_get_output_frames_cold_2();
          }
          return 0;
        }
        external = (void *)nw_frame_create();
        if (!external)
        {
          if ((*(unsigned char *)(v6 + 475) & 1) == 0
            && g_boringssl_log
            && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
          {
            nw_protocol_boringssl_get_output_frames_cold_1();
          }
          return 0;
        }
      }
      id v15 = external;
      nw_frame_array_append();
      uint64_t v10 = 1;
      nw_frame_array_append();

      return v10;
    }
    if ((*(unsigned char *)(v6 + 475) & 1) == 0
      && datapath_logging_enabled
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_get_output_frames_cold_4();
    }
    return 0;
  }
  return v10;
}

BOOL __boringssl_context_set_encryption_secrets_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)(a2 + 144) && *(void *)(a2 + 152))
  {
    uint64_t v4 = *(const void **)(a1 + 32);
    if (v4) {
      dispatch_data_t v5 = dispatch_data_create(v4, *(void *)(a1 + 40), 0, 0);
    }
    else {
      dispatch_data_t v5 = 0;
    }
    uint64_t v6 = *(const void **)(a1 + 48);
    if (v6) {
      dispatch_data_t v7 = dispatch_data_create(v6, *(void *)(a1 + 40), 0, 0);
    }
    else {
      dispatch_data_t v7 = 0;
    }
    unsigned int v8 = *(_DWORD *)(a1 + 56);
    if (v8 - 1 >= 3) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = MEMORY[0x1BA9E5C70](*(void *)(a2 + 144));
    int v11 = (void (**)(void, void, void, void))v10;
    if (v5) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, dispatch_data_t))(v10 + 16))(v10, v9, 1, v5);
    }
    if (v7) {
      ((void (**)(void, uint64_t, void, dispatch_data_t))v11)[2](v11, v9, 0, v7);
    }
  }
  return a2 != 0;
}

void md_pctx_ops_init()
{
  md_pctx_ops_storage = (uint64_t)EVP_PKEY_CTX_free;
  qword_1EB268200 = (uint64_t)EVP_PKEY_CTX_dup;
}

void __boringssl_log_open_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.network", "boringssl");
  timeval v1 = (void *)g_boringssl_log;
  g_boringssl_log = (uint64_t)v0;

  if (boringssl_logging_register_debug_log_updates_onceToken != -1)
  {
    dispatch_once(&boringssl_logging_register_debug_log_updates_onceToken, &__block_literal_global_4);
  }
}

uint64_t thread_local_init()
{
  uint64_t result = pthread_key_create((pthread_key_t *)&g_thread_local_key, (void (__cdecl *)(void *))thread_local_destructor);
  g_thread_local_key_createunsigned int d = result == 0;
  return result;
}

uint64_t __boringssl_metrics_log_connection_block_invoke()
{
  boringssl_context_metrics_queue = (uint64_t)dispatch_queue_create("com.apple.network.boringssl.metrics_queue", 0);

  return MEMORY[0x1F41817F8]();
}

double EVP_sha384_init()
{
  EVP_sha384_storage = 0x30000002A1;
  dword_1EB2684B0 = 0;
  qword_1EB2684B8 = (uint64_t)sha384_init;
  qword_1EB2684C0 = (uint64_t)digest_update_wrapper;
  qword_1EB2684C8 = (uint64_t)digest_final_wrapper;
  *(void *)&double result = 0x40800000080;
  qword_1EB2684D0 = 0x40800000080;
  return result;
}

double EVP_sha256_init()
{
  EVP_sha256_storage = 0x20000002A0;
  dword_1EB2684F0 = 0;
  qword_1EB2684F8 = (uint64_t)sha256_init;
  qword_1EB268500 = (uint64_t)digest_update_wrapper;
  qword_1EB268508 = (uint64_t)digest_final_wrapper;
  *(void *)&double result = 0x40800000040;
  qword_1EB268510 = 0x40800000040;
  return result;
}

void __boringssl_context_evaluate_trust_async_external_block_invoke(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (boringssl_session_get_state(*(void *)(a1 + 64)) > 3
    || boringssl_session_is_cancelled(*(void *)(a1 + 64)))
  {
    *(unsigned char *)(*(void *)(a1 + 72) + 558) &= ~8u;
    return;
  }
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  void v22[2] = __boringssl_context_evaluate_trust_async_external_block_invoke_2;
  _OWORD v22[3] = &unk_1E61FD710;
  id v23 = *(id *)(a1 + 32);
  long long v25 = *(_OWORD *)(a1 + 64);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 80);
  id v24 = v3;
  uint64_t v26 = v4;
  dispatch_data_t v5 = (void *)MEMORY[0x1BA9E5C70](v22);
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6) {
    goto LABEL_10;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
  if (WeakRetained)
  {
    unsigned int v8 = WeakRetained;
    uint64_t v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    char v10 = v9[475];

    if (v10) {
      goto LABEL_16;
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11)
  {
    id v12 = objc_loadWeakRetained((id *)(v11 + 16));
    if (v12)
    {
      uint64_t v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
      uint64_t v14 = (v13[475] & 1) == 0;
    }
    else
    {
      uint64_t v14 = 1;
    }

    if (!v14) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_10:
    uint64_t v14 = 1;
  }
  if (g_boringssl_log)
  {
    id v15 = (id)g_boringssl_log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
LABEL_15:

      goto LABEL_16;
    }
    uint64_t v16 = *(void *)(a1 + 32);
    if (v16)
    {
      uint64_t v14 = (uint64_t)objc_loadWeakRetained((id *)(v16 + 16));
      uint64_t v21 = *(void *)(a1 + 32);
      if (v14)
      {
        BOOL v17 = v21 != 0;
        if (v21)
        {
          timeval v1 = (char *)objc_loadWeakRetained((id *)(v21 + 16));
          uint64_t v21 = *(void *)(a1 + 32);
        }
        else
        {
          timeval v1 = 0;
        }
        __int16 v20 = v1 + 391;
      }
      else
      {
        BOOL v17 = 0;
        __int16 v20 = &unk_1BA179713;
      }
      if (v21)
      {
        id v18 = objc_loadWeakRetained((id *)(v21 + 16));
        char v19 = 0;
      }
      else
      {
        id v18 = 0;
        char v19 = 1;
      }
    }
    else
    {
      BOOL v17 = 0;
      id v18 = 0;
      char v19 = 1;
      __int16 v20 = &unk_1BA179713;
    }
    *(_DWORD *)buf = 136446978;
    int v28 = "boringssl_context_evaluate_trust_async_external_block_invoke";
    __int16 v29 = 1024;
    int v30 = 1763;
    __int16 v31 = 2082;
    uint64_t v32 = v20;
    __int16 v33 = 2048;
    id v34 = v18;
    _os_log_debug_impl(&dword_1BA0DE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Invoking verify block", buf, 0x26u);
    if (v19)
    {
      if (!v17) {
        goto LABEL_30;
      }
    }
    else
    {

      if (!v17)
      {
LABEL_30:
        if (!v16) {
          goto LABEL_15;
        }
        goto LABEL_34;
      }
    }

    if (!v16) {
      goto LABEL_15;
    }
LABEL_34:

    goto LABEL_15;
  }
LABEL_16:
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void __check_and_init_restricted_mode_block_invoke()
{
  CFNumberRef v0 = (const __CFNumber *)MGCopyAnswer();
  if (v0)
  {
    CFNumberRef v1 = v0;
    CFNumberGetValue(v0, kCFNumberIntType, &boringssl_config_restricted_mode_status);
    CFRelease(v1);
  }
}

uint64_t __nw_protocol_boringssl_copy_definition_block_invoke()
{
  if (nw_protocol_boringssl_identifier_onceToken != -1) {
    dispatch_once(&nw_protocol_boringssl_identifier_onceToken, &__block_literal_global_0);
  }
  uint64_t v0 = nw_protocol_definition_create_with_identifier();
  CFNumberRef v1 = (void *)nw_protocol_boringssl_copy_definition_definition;
  nw_protocol_boringssl_copy_definition_definition = v0;

  nw_protocol_definition_set_options_allocator();
  nw_protocol_definition_set_metadata_allocator();
  nw_protocol_definition_set_options_equality_check();
  nw_protocol_definition_set_options_comparator();
  uint64_t v2 = nw_protocol_boringssl_copy_definition_definition;

  return MEMORY[0x1F40F3A90](v2, nw_protocol_boringssl_cache_entry_deallocator);
}

uint64_t nw_protocol_boringssl_remove_input_handler(uint64_t result, uint64_t a2, int a3)
{
  if (result)
  {
    id v3 = (void *)result;
    uint64_t v4 = *(void *)(result + 40);
    if (!v4) {
      return 0;
    }
    if ((*(unsigned char *)(v4 + 475) & 1) == 0)
    {
      if (datapath_logging_enabled)
      {
        if (g_boringssl_log)
        {
          uint64_t v12 = a2;
          BOOL v11 = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG);
          a2 = v12;
          if (v11)
          {
            nw_protocol_boringssl_remove_input_handler_cold_1();
            a2 = v12;
          }
        }
      }
    }
    *(void *)(a2 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = 0;
    if (v3[6] == a2)
    {
      v3[6] = 0;
      *(_DWORD *)(v4 + 376) = 0;
      uint64_t v6 = *(void **)(v4 + 368);
      *(void *)(v4 + 36bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;

      nw_frame_array_foreach();
      nw_frame_array_foreach();
      nw_frame_array_foreach();
      nw_frame_array_foreach();
      nw_frame_array_foreach();
      uint64_t v7 = v3[4];
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 24);
        if (v8)
        {
          uint64_t v9 = *(void (**)(void))(v8 + 8);
          if (v9) {
            v9();
          }
        }
      }
      if (a3)
      {
        char v10 = (void *)v3[5];
        v3[5] = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void nw_protocol_boringssl_cleanup(void *a1)
{
  CFNumberRef v1 = a1;
  if (v1)
  {
    uint64_t v2 = (void *)MEMORY[0x1BA9E5B10]();
    uint64_t v3 = v1[42];
    if (v3)
    {
      uint64_t v4 = *(void **)(v3 + 8);
      dispatch_data_t v5 = (SSL *)v4[50];
      if (v5)
      {
        SSL_set_msg_callback(v5, 0);
        SSL_set_msg_callback_arg(v4[50], 0);
      }
      uint64_t v6 = v4[5];
      if (v6) {
        boringssl_psk_cache_clear_context(v6);
      }
    }
    v1[42] = 0;
    BOOL v11 = v1;
    nw_frame_array_foreach();
    uint64_t v7 = v11;
    nw_frame_array_foreach();
    uint64_t v8 = (BIO *)v7[43];
    if (v8)
    {
      boringssl_bio_destroy(v8);
      v7[43] = 0;
    }
    uint64_t v9 = (void *)v7[21];
    if (v9)
    {
      v7[21] = 0;

      v7[22] = 0;
      *((_DWORD *)v7 + 46) = 0;
    }
    if (v7[40])
    {
      nw_queue_cancel_source();
      v7[40] = 0;
    }
    char v10 = (void *)v7[44];
    if (v10)
    {
      free(v10);
      v7[44] = 0;
    }
  }
}

void boringssl_bio_destroy(BIO *a)
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    boringssl_bio_destroy_cold_1();
    if (!a) {
      return;
    }
  }
  else if (!a)
  {
    return;
  }
  uint64_t v2 = *(void **)&a->num;
  if (v2) {
    free(v2);
  }
  BIO_free(a);
}

void boringssl_session_destroy(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v1 = *(void *)(a1 + 8);
      if (v1)
      {
        uint64_t v2 = *(SSL **)(v1 + 400);
        if (v2)
        {
          SSL_free(v2);
          *(void *)(v1 + 40std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 0;
          *(_DWORD *)(v1 + 30std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&this->quiet_shutdown, 0) = 5;
        }
      }
    }
  }
}

void boringssl_context_ssl_context_destroy(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v1 = *(void *)(a1 + 8);
      if (v1)
      {
        uint64_t v2 = *(SSL_CTX **)(v1 + 408);
        if (v2)
        {
          SSL_CTX_free(v2);
          *(void *)(v1 + 40bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
        }
      }
    }
  }
}

void SSL_free(SSL *ssl)
{
  if (ssl)
  {
    ssl_st::~ssl_st(ssl);
    OPENSSL_free(v1);
  }
}

void ssl_st::~ssl_st(ssl_st *this)
{
  if (*(void *)&this->version) {
    (*(void (**)(ssl_st *))(*(void *)&this->version + 16))(this);
  }
  std::unique_ptr<char,bssl::internal::Deleter>::reset[abi:ne180100]((void **)&this->msg_callback_arg, 0);
  std::unique_ptr<ssl_ctx_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_ctx_st **)&this->s3, 0);
  std::unique_ptr<ssl_ctx_st,bssl::internal::Deleter>::reset[abi:ne180100]((ssl_ctx_st **)&this->s2, 0);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)&this->packet, 0);
  std::unique_ptr<bio_st,bssl::internal::Deleter>::reset[abi:ne180100](&this->bbio, 0);
  std::unique_ptr<bio_st,bssl::internal::Deleter>::reset[abi:ne180100](&this->wbio, 0);
  std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0);
}

void std::unique_ptr<ssl_ctx_st,bssl::internal::Deleter>::reset[abi:ne180100](ssl_ctx_st **a1, ssl_ctx_st *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    bssl::RefCounted<ssl_ctx_st>::DecRefInternal(v3);
  }
}

void bssl::RefCounted<ssl_ctx_st>::DecRefInternal(ssl_ctx_st *a1)
{
  if (CRYPTO_refcount_dec_and_test_zero((unsigned int *)a1))
  {
    ssl_ctx_st::~ssl_ctx_st(a1);
    OPENSSL_free(v2);
  }
}

void bssl::tls_free(bssl *this, ssl_st *a2)
{
  if (this)
  {
    uint64_t v3 = (bssl::SSL3_STATE *)*((void *)this + 6);
    if (v3)
    {
      bssl::SSL3_STATE::~SSL3_STATE(v3);
      OPENSSL_free(v4);
      *((void *)this + 6) = 0;
    }
  }
}

void SSL_CTX_free(SSL_CTX *a1)
{
  if (a1) {
    bssl::RefCounted<ssl_ctx_st>::DecRefInternal(a1);
  }
}

double EVP_aead_aes_256_gcm_tls13_init()
{
  *(_OWORD *)algn_1EB268418 = 0u;
  *(_OWORD *)&qword_1EB268428 = 0u;
  unk_1EB268448 = 0u;
  *(void *)&double result = 269487136;
  EVP_aead_aes_256_gcm_tls13_storage = 269487136;
  dword_1EB268414 = 1;
  qword_1EB268420 = (uint64_t)aead_aes_gcm_init_with_dir;
  qword_1EB268428 = (uint64_t)aead_aes_gcm_cleanup;
  qword_1EB268438 = (uint64_t)aead_aes_gcm_tls13_seal_scatter;
  qword_1EB268440 = (uint64_t)aead_aes_gcm_open_gather;
  return result;
}

void __boringssl_session_state_copy_serialized_session_state_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

BOOL boringssl_context_set_quic_transport_parameters(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = v3;
  if (!a1 || *(_DWORD *)a1 != -1252936367) {
    goto LABEL_22;
  }
  BOOL v5 = 0;
  if (!v3) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_23;
  }
  if (!*(void *)(v6 + 400)) {
    goto LABEL_22;
  }
  size_t size = dispatch_data_get_size(v3);
  buffer_from_dispatch_data = boringssl_helper_create_buffer_from_dispatch_data(v4);
  if (!buffer_from_dispatch_data)
  {
    char v19 = (id *)(v6 + 16);
    id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
    if (!WeakRetained
      || (uint64_t v21 = WeakRetained,
          int v22 = objc_loadWeakRetained((id *)(v6 + 16)),
          char v23 = v22[475],
          v22,
          v21,
          (v23 & 1) == 0))
    {
      id v24 = objc_loadWeakRetained(v19);
      if (v24)
      {
        long long v25 = objc_loadWeakRetained(v19);
        BOOL v26 = (v25[475] & 1) == 0;
      }
      else
      {
        BOOL v26 = 1;
      }

      BOOL v5 = 0;
      if (!v26 || !g_boringssl_log) {
        goto LABEL_23;
      }
      __int16 v27 = (id)g_boringssl_log;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        boringssl_context_set_quic_transport_parameters_cold_1(v19, v27);
      }
    }
LABEL_22:
    BOOL v5 = 0;
    goto LABEL_23;
  }
  uint64_t v9 = buffer_from_dispatch_data;
  int v10 = SSL_set_quic_transport_params(*(void *)(v6 + 400), buffer_from_dispatch_data, size);
  BOOL v5 = v10 == 1;
  if (v10 != 1)
  {
    BOOL v11 = (id *)(v6 + 16);
    id v12 = objc_loadWeakRetained(v11);
    if (!v12
      || (uint64_t v13 = v12,
          uint64_t v14 = objc_loadWeakRetained(v11),
          char v15 = v14[475],
          v14,
          v13,
          (v15 & 1) == 0))
    {
      id v16 = objc_loadWeakRetained(v11);
      if (v16)
      {
        BOOL v17 = objc_loadWeakRetained(v11);
        BOOL v18 = (v17[475] & 1) == 0;
      }
      else
      {
        BOOL v18 = 1;
      }

      if (v18)
      {
        if (g_boringssl_log)
        {
          __int16 v29 = (id)g_boringssl_log;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            boringssl_context_set_quic_transport_parameters_cold_2(v11, v29);
          }
        }
      }
    }
  }
  free(v9);
LABEL_23:

  return v5;
}

void *boringssl_helper_create_buffer_from_dispatch_data(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1) {
    goto LABEL_5;
  }
  size_t size = dispatch_data_get_size(v1);
  uint64_t v4 = malloc_type_malloc(size, 0x4AACE611uLL);
  if (v4 && boringssl_helper_dispatch_data_copyout(v2, (uint64_t)v4, size) != size)
  {
    free(v4);
LABEL_5:
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t boringssl_helper_dispatch_data_copyout(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 0;
  v6[0] = 0;
  v6[1] = v6;
  void v6[2] = 0x2020000000;
  _OWORD v6[3] = a2;
  if (a1)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __boringssl_helper_dispatch_data_copyout_block_invoke;
    applier[3] = &unk_1E61F3890;
    void applier[5] = v6;
    applier[6] = a3;
    applier[4] = &v7;
    dispatch_data_apply(a1, applier);
    uint64_t v3 = v8[3];
  }
  else
  {
    uint64_t v3 = 0;
  }
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(&v7, 8);
  return v3;
}

BOOL __boringssl_helper_dispatch_data_copyout_block_invoke(void *a1, int a2, int a3, void *__src, size_t a5)
{
  unint64_t v5 = a1[6];
  unint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 24);
  if (v5 - v6 >= a5) {
    size_t v7 = a5;
  }
  else {
    size_t v7 = v5 - v6;
  }
  if (v7)
  {
    memcpy((void *)(*(void *)(*(void *)(a1[5] + 8) + 24) + v6), __src, v7);
    *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
    unint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 24);
    unint64_t v5 = a1[6];
  }
  return v6 < v5;
}

uint64_t SSL_set_quic_transport_params(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t v6 = (void **)(v3 + 224);
  uint64_t v7 = bssl::Array<unsigned char>::Init(v3 + 224, a3);
  uint64_t v8 = v7;
  if (a3 && v7) {
    memmove(*v6, a2, a3);
  }
  return v8;
}

void __nw_protocol_boringssl_identifier_block_invoke()
{
  qword_1EB268998 = 0;
  g_boringssl_protocol_identifier = 0u;
  unk_1EB268988 = 0u;
  g_boringssl_protocol_callbackunsigned int s = 0u;
  *(_OWORD *)&qword_1EB2689B8 = 0u;
  xmmword_1EB2689C8 = 0u;
  unk_1EB2689D8 = 0u;
  xmmword_1EB2689E8 = 0u;
  *(_OWORD *)&qword_1EB2689F8 = 0u;
  xmmword_1EB268A08 = 0u;
  unk_1EB268A18 = 0u;
  xmmword_1EB268A28 = 0u;
  unk_1EB268A38 = 0u;
  xmmword_1EB268A48 = 0u;
  unk_1EB268A58 = 0u;
  xmmword_1EB268A68 = 0u;
  unk_1EB268A78 = 0u;
  xmmword_1EB268A88 = 0u;
  unk_1EB268A98 = 0u;
  xmmword_1EB268AA8 = 0u;
  __strlcpy_chk();
  qword_1EB268998 = 0x100000004;
  nw_protocol_set_default_one_to_one_callbacks();
  *(void *)&g_boringssl_protocol_callbackunsigned int s = nw_protocol_boringssl_add_input_handler;
  qword_1EB2689B8 = (uint64_t)nw_protocol_boringssl_replace_input_handler;
  *((void *)&g_boringssl_protocol_callbacks + 1) = nw_protocol_boringssl_remove_input_handler;
  *(void *)&xmmword_1EB2689E8 = nw_protocol_boringssl_input_available;
  *((void *)&xmmword_1EB2689E8 + 1) = nw_protocol_boringssl_output_available;
  qword_1EB2689F8 = (uint64_t)nw_protocol_boringssl_get_input_frames;
  qword_1EB268A00 = (uint64_t)nw_protocol_boringssl_get_output_frames;
  qword_1EB268A60 = (uint64_t)nw_protocol_boringssl_input_finished;
  *(void *)&xmmword_1EB268A68 = nw_protocol_boringssl_output_finished;
  *(void *)&xmmword_1EB268A08 = nw_protocol_boringssl_finalize_output_frames;
  qword_1EB268A80 = (uint64_t)nw_protocol_boringssl_waiting_for_output;
  qword_1EB2689C0 = (uint64_t)nw_protocol_boringssl_connect;
  *(void *)&xmmword_1EB2689C8 = nw_protocol_boringssl_disconnect;
  *((void *)&xmmword_1EB2689C8 + 1) = nw_protocol_boringssl_connected;
  *(void *)&xmmword_1EB268AA8 = nw_protocol_boringssl_reset;
  *(void *)&xmmword_1EB268A88 = nw_protocol_boringssl_copy_info;
  qword_1EB2689E0 = (uint64_t)nw_protocol_boringssl_error;
  nw_protocol_register();

  boringssl_log_open();
}

uint64_t boringssl_session_copy_serialized_session(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0)
    {
      boringssl_session_state_copy_serialized_session_state(*(void **)(v1 + 392));
      return objc_claimAutoreleasedReturnValue();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

dispatch_data_t boringssl_session_state_copy_serialized_session_state(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
LABEL_14:
    dispatch_data_t v5 = 0;
    goto LABEL_15;
  }
  size_t v3 = *((unsigned __int8 *)v1 + 12);
  size_t v4 = v1[6];
  if (~v4 < v3)
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_session_state_copy_serialized_session_state_cold_1();
    }
    goto LABEL_14;
  }
  if (~v4 == v3)
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_session_state_copy_serialized_session_state_cold_2();
    }
    goto LABEL_14;
  }
  if (v4 + 1 == ~v3)
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_session_state_copy_serialized_session_state_cold_3();
    }
    goto LABEL_14;
  }
  char v7 = *((unsigned char *)v1 + 8);
  size_t v8 = v4 + v3 + 2;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  id v16 = (void *)0xAAAAAAAAAAAAAAAALL;
  id v16 = malloc_type_malloc(v8, 0xBDCE5635uLL);
  uint64_t v9 = (unsigned char *)v14[3];
  if (v9)
  {
    uint64_t v10 = (const void *)v2[5];
    *uint64_t v9 = v7;
    *(unsigned char *)(v14[3] + 1) = *((unsigned char *)v2 + 12);
    memcpy((void *)(v14[3] + 2), (char *)v2 + 12, *((unsigned __int8 *)v2 + 12));
    memcpy((void *)(*((unsigned __int8 *)v2 + 12) + v14[3] + 2), v10, v4);
    BOOL v11 = (const void *)v14[3];
    destructor[0] = MEMORY[0x1E4F143A8];
    destructor[1] = 3221225472;
    destructor[2] = __boringssl_session_state_copy_serialized_session_state_block_invoke;
    destructor[3] = &unk_1E61F3090;
    destructor[4] = &v13;
    dispatch_data_t v5 = dispatch_data_create(v11, v8, 0, destructor);
  }
  else
  {
    dispatch_data_t v5 = (dispatch_data_t)g_boringssl_log;
    if (g_boringssl_log)
    {
      if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
        boringssl_session_state_copy_serialized_session_state_cold_4();
      }
      dispatch_data_t v5 = 0;
    }
  }
  _Block_object_dispose(&v13, 8);
LABEL_15:

  return v5;
}

uint64_t __boringssl_config_get_whitelisted_bundle_identifier_block_invoke()
{
  getpid();
  uint64_t result = csops();
  if (result == -1
    && (uint64_t result = (uint64_t)__error(), *(_DWORD *)result == 34)
    && (uint64_t v1 = bswap32(0xAAAAAAAA), (v1 - 1025) >= 0xFFFFFC07)
    && (getpid(), uint64_t result = csops(), !result))
  {
    csops_identifier_data_csops_data[v1] = 0;
    BOOL v3 = qword_1EB26852C == 0x6C7070612E6D6F63 && word_1EB268534 == 11877;
    if (v3
      || (qword_1EB26852C == 0x6C7070612E6D6F63 ? (BOOL v4 = *(void *)&word_1EB268534 == 0x6565685364412E65) : (BOOL v4 = 0),
          v4 ? (BOOL v5 = unk_1EB26853B == 0x656E6F68507465) : (BOOL v5 = 0),
          v5))
    {
LABEL_22:
      uint64_t result = (uint64_t)strdup((const char *)&qword_1EB26852C);
      uint64_t v2 = (const char *)result;
    }
    else
    {
      uint64_t v6 = 1;
      uint64_t v2 = "redacted_bundle_id";
      while (v6 != 251)
      {
        uint64_t result = strcmp(top_bundles[v6++], (const char *)&qword_1EB26852C);
        if (!result)
        {
          if ((unint64_t)(v6 - 2) <= 0xF9) {
            goto LABEL_22;
          }
          uint64_t v2 = "redacted_bundle_id";
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v2 = "no_bundle_id";
  }
  global_bundle_identifier = (uint64_t)v2;
  return result;
}

void nw_protocol_boringssl_deallocate_metadata(void *a1, void *a2)
{
  id v3 = a1;
  if (a2)
  {
    id v21 = v3;
    BOOL v4 = (void *)a2[5];
    if (v4)
    {
      free(v4);
      a2[5] = 0;
    }
    BOOL v5 = (void *)a2[22];
    if (v5)
    {
      free(v5);
      a2[22] = 0;
    }
    uint64_t v6 = (void *)a2[6];
    if (v6)
    {
      free(v6);
      a2[6] = 0;
    }
    char v7 = (void *)a2[7];
    if (v7)
    {
      free(v7);
      a2[7] = 0;
    }
    size_t v8 = (void *)a2[40];
    if (v8)
    {
      free(v8);
      a2[40] = 0;
    }
    uint64_t v9 = (void *)a2[10];
    a2[10] = 0;

    uint64_t v10 = (void *)a2[11];
    a2[11] = 0;

    BOOL v11 = (void *)a2[12];
    a2[12] = 0;

    id v12 = (void *)a2[13];
    a2[13] = 0;

    uint64_t v13 = (void *)a2[14];
    a2[14] = 0;

    uint64_t v14 = (void *)a2[15];
    a2[15] = 0;

    uint64_t v15 = (void *)a2[16];
    a2[16] = 0;

    id v16 = (void *)a2[17];
    a2[17] = 0;

    BOOL v17 = (void *)a2[18];
    a2[18] = 0;

    BOOL v18 = (void *)a2[19];
    a2[19] = 0;

    char v19 = (void *)a2[20];
    a2[20] = 0;

    __int16 v20 = (void *)a2[21];
    a2[21] = 0;

    free(a2);
    id v3 = v21;
  }
}

void __boringssl_context_new_session_handler_block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 168) + 16))();
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    goto LABEL_7;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
  if (WeakRetained)
  {
    BOOL v5 = WeakRetained;
    uint64_t v6 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    char v7 = v6[475];

    if (v7) {
      return;
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8)
  {
LABEL_7:
    uint64_t v11 = 1;
    goto LABEL_10;
  }
  id v9 = objc_loadWeakRetained((id *)(v8 + 16));
  if (v9)
  {
    uint64_t v10 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    uint64_t v11 = (v10[475] & 1) == 0;
  }
  else
  {
    uint64_t v11 = 1;
  }

  if (v11)
  {
LABEL_10:
    if (!g_boringssl_log) {
      return;
    }
    id v12 = (id)g_boringssl_log;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    uint64_t v13 = *(void *)(a1 + 32);
    if (!v13)
    {
      BOOL v15 = 0;
      id v16 = 0;
      char v17 = 1;
      BOOL v18 = &unk_1BA179713;
      goto LABEL_22;
    }
    uint64_t v11 = (uint64_t)objc_loadWeakRetained((id *)(v13 + 16));
    uint64_t v14 = *(void *)(a1 + 32);
    if (v11)
    {
      BOOL v15 = v14 != 0;
      if (v14)
      {
        uint64_t v1 = (char *)objc_loadWeakRetained((id *)(v14 + 16));
        uint64_t v14 = *(void *)(a1 + 32);
      }
      else
      {
        uint64_t v1 = 0;
      }
      BOOL v18 = v1 + 391;
      if (v14) {
        goto LABEL_21;
      }
    }
    else
    {
      BOOL v15 = 0;
      BOOL v18 = &unk_1BA179713;
      if (v14)
      {
LABEL_21:
        id v16 = objc_loadWeakRetained((id *)(v14 + 16));
        char v17 = 0;
LABEL_22:
        int v19 = 136446978;
        __int16 v20 = "boringssl_context_new_session_handler_block_invoke";
        __int16 v21 = 1024;
        int v22 = 1489;
        __int16 v23 = 2082;
        id v24 = v18;
        __int16 v25 = 2048;
        id v26 = v16;
        _os_log_impl(&dword_1BA0DE000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s(%d) %{public}s[%p] Returning from session update block", (uint8_t *)&v19, 0x26u);
        if (v17)
        {
          if (!v15) {
            goto LABEL_24;
          }
        }
        else
        {

          if (!v15)
          {
LABEL_24:
            if (!v13)
            {
LABEL_26:

              return;
            }
LABEL_25:

            goto LABEL_26;
          }
        }

        if (!v13) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
    id v16 = 0;
    char v17 = 1;
    goto LABEL_22;
  }
}

void thread_local_destructor(char *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1 && !pthread_mutex_lock(&g_destructors_lock))
  {
    v4[0] = g_destructors;
    v4[1] = unk_1EB268940;
    uint64_t v5 = qword_1EB268950;
    pthread_mutex_unlock(&g_destructors_lock);
    for (uint64_t i = 0; i != 40; i += 8)
    {
      uint64_t v3 = *(void (**)(void))((char *)v4 + i);
      if (v3) {
        v3(*(void *)&a1[i]);
      }
    }
    free(a1);
  }
}

void err_state_free(void **a1)
{
  if (a1)
  {
    for (uint64_t i = 0; i != 48; i += 3)
    {
      uint64_t v3 = &a1[i];
      free(a1[i + 1]);
      *uint64_t v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    free(a1[49]);
    free(a1);
  }
}

double EVP_aead_aes_128_gcm_tls13_init()
{
  *(_OWORD *)algn_1EB2681B8 = 0u;
  *(_OWORD *)&qword_1EB2681C8 = 0u;
  unk_1EB2681E8 = 0u;
  *(void *)&double result = 269487120;
  EVP_aead_aes_128_gcm_tls13_storage = 269487120;
  dword_1EB2681B4 = 1;
  qword_1EB2681C0 = (uint64_t)aead_aes_gcm_init_with_dir;
  qword_1EB2681C8 = (uint64_t)aead_aes_gcm_cleanup;
  qword_1EB2681D8 = (uint64_t)aead_aes_gcm_tls13_seal_scatter;
  qword_1EB2681E0 = (uint64_t)aead_aes_gcm_open_gather;
  return result;
}

void EC_GFp_nistp224_method_init()
{
  EC_GFp_nistp224_method_storage = (uint64_t)ec_GFp_nistp224_point_get_affine_coordinates;
  qword_1EB2682E0 = (uint64_t)ec_GFp_nistp224_add;
  qword_1EB2682E8 = (uint64_t)ec_GFp_nistp224_dbl;
  qword_1EB2682F0 = (uint64_t)ec_GFp_nistp224_point_mul;
  qword_1EB2682F8 = (uint64_t)ec_GFp_nistp224_point_mul_base;
  qword_1EB268308 = (uint64_t)ec_GFp_nistp224_point_mul_public;
  qword_1EB268328 = (uint64_t)ec_GFp_nistp224_felem_mul;
  qword_1EB268330 = (uint64_t)ec_GFp_nistp224_felem_sqr;
  qword_1EB268338 = (uint64_t)ec_GFp_simple_felem_to_bytes;
  qword_1EB268340 = (uint64_t)ec_GFp_simple_felem_from_bytes;
  qword_1EB268358 = (uint64_t)ec_simple_scalar_inv0_montgomery;
  qword_1EB268360 = (uint64_t)ec_simple_scalar_to_montgomery_inv_vartime;
  qword_1EB268368 = (uint64_t)ec_GFp_simple_cmp_x_coordinate;
}

void EC_GFp_nistp256_method_init()
{
  EC_GFp_nistp256_method_storage = (uint64_t)ec_GFp_nistp256_point_get_affine_coordinates;
  qword_1EB268380 = (uint64_t)ec_GFp_nistp256_add;
  qword_1EB268388 = (uint64_t)ec_GFp_nistp256_dbl;
  qword_1EB268390 = (uint64_t)ec_GFp_nistp256_point_mul;
  qword_1EB268398 = (uint64_t)ec_GFp_nistp256_point_mul_base;
  qword_1EB2683A8 = (uint64_t)ec_GFp_nistp256_point_mul_public;
  qword_1EB2683C8 = (uint64_t)ec_GFp_mont_felem_mul;
  qword_1EB2683D0 = (uint64_t)ec_GFp_mont_felem_sqr;
  qword_1EB2683D8 = (uint64_t)ec_GFp_mont_felem_to_bytes;
  qword_1EB2683E0 = (uint64_t)ec_GFp_mont_felem_from_bytes;
  qword_1EB2683E8 = (uint64_t)ec_GFp_mont_felem_reduce;
  qword_1EB2683F0 = (uint64_t)ec_GFp_mont_felem_exp;
  qword_1EB2683F8 = (uint64_t)ec_simple_scalar_inv0_montgomery;
  qword_1EB268400 = (uint64_t)ec_simple_scalar_to_montgomery_inv_vartime;
  qword_1EB268408 = (uint64_t)ec_GFp_nistp256_cmp_x_coordinate;
}

uint64_t nw_protocol_boringssl_send_alert(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  switch(a2)
  {
    case 0:
      uint64_t v7 = v5[35];
      uint64_t v8 = *(void *)(v7 + 24);
      goto LABEL_4;
    case 1:
      uint64_t v7 = v5[35];
      uint64_t v8 = *(void *)(v6[36] + 24);
LABEL_4:
      id v9 = (void (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
      goto LABEL_8;
    case 2:
      uint64_t v10 = v5[37];
      goto LABEL_7;
    case 3:
      uint64_t v10 = v5[38];
LABEL_7:
      id v9 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 24) + 56);
      uint64_t v7 = v5[35];
LABEL_8:
      (*v9)(v7, (uint64_t)(v6 + 1), a3);
      break;
    default:
      break;
  }

  return 1;
}

uint64_t boringssl_context_send_alert(const SSL *a1, int a2, uint64_t a3)
{
  uint64_t v5 = SSL_get_ex_data(a1, 0);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = (uint64_t)v5;
  if (*(_DWORD *)v5 != -1252936367) {
    return 0;
  }
  uint64_t v7 = v5[1];
  if (!v7
    || boringssl_session_get_state((uint64_t)v5) > 3
    || (boringssl_session_is_cancelled(v6) & 1) != 0)
  {
    return 0;
  }
  if ((a2 - 1) >= 3) {
    a2 = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v7 + 16));
  uint64_t v10 = nw_protocol_boringssl_send_alert(WeakRetained, a2, a3);

  return v10;
}

void bssl::ssl_ctx_get_current_time()
{
}

{
  __assert_rtn("ssl_ctx_get_current_time", "ssl_lib.cc", 384, "0");
}

EC_KEY *EC_KEY_parse_private_key(long long *a1, const EC_GROUP *a2)
{
  memset(v15, 170, sizeof(v15));
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  if (CBS_get_asn1(a1, &v15[1], 536870928)
    && CBS_get_asn1_uint64(&v15[1], &v14)
    && v14 == 1
    && CBS_get_asn1(&v15[1], v15, 4))
  {
    if (CBS_peek_asn1_tag(&v15[1], -1610612736))
    {
      buf[2] = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
      buf[3] = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
      if (!CBS_get_asn1(&v15[1], &buf[2], -1610612736))
      {
        int v4 = 128;
        int v5 = 106;
        goto LABEL_34;
      }
      uint64_t v3 = (const EC_GROUP *)EC_KEY_parse_parameters((long long *)&buf[2]);
      if (!v3)
      {
LABEL_35:
        uint64_t v6 = 0;
LABEL_36:
        id v9 = 0;
LABEL_37:
        EC_KEY_free(v6);
        BN_free(v9);
        return 0;
      }
      if (a2)
      {
        if (EC_GROUP_cmp(a2, v3, 0))
        {
          int v4 = 130;
          int v5 = 117;
LABEL_34:
          ERR_put_error(15, 0, v4, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", v5);
          goto LABEL_35;
        }
      }
      else
      {
        a2 = v3;
      }
      if (buf[3])
      {
        int v4 = 128;
        int v5 = 121;
        goto LABEL_34;
      }
    }
    else if (!a2)
    {
      int v4 = 114;
      int v5 = 127;
      goto LABEL_34;
    }
    uint64_t v8 = EC_KEY_new();
    uint64_t v6 = v8;
    if (!v8 || !EC_KEY_set_group(v8, a2)) {
      goto LABEL_36;
    }
    id v9 = BN_bin2bn(*(const unsigned __int8 **)&v15[0], SDWORD2(v15[0]), 0);
    uint64_t v10 = EC_POINT_new(a2);
    *((void *)v6 + 1) = v10;
    if (!v9 || !v10 || !EC_KEY_set_private_key(v6, v9)) {
      goto LABEL_37;
    }
    if (CBS_peek_asn1_tag(&v15[1], -1610612735))
    {
      memset(buf, 170, sizeof(buf));
      char v12 = -86;
      if (!CBS_get_asn1(&v15[1], &buf[2], -1610612735)
        || !CBS_get_asn1((long long *)&buf[2], buf, 3)
        || !CBS_get_u8(buf, &v12)
        || v12
        || !buf[1]
        || !EC_POINT_oct2point(a2, *((EC_POINT **)v6 + 1), buf[0], (size_t)buf[1], 0)
        || buf[3])
      {
        int v11 = 161;
LABEL_43:
        ERR_put_error(15, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", v11);
        goto LABEL_37;
      }
      *((_DWORD *)v6 + 7) = *buf[0] & 0xFE;
    }
    else
    {
      if (!ec_point_mul_scalar_base(a2, *((void *)v6 + 1) + 8, *((void *)v6 + 2) + 24)) {
        goto LABEL_37;
      }
      *((_DWORD *)v6 + 6) |= 2u;
    }
    if (!*((void *)&v15[1] + 1))
    {
      if (EC_KEY_check_key(v6))
      {
        BN_free(v9);
        return v6;
      }
      goto LABEL_37;
    }
    int v11 = 181;
    goto LABEL_43;
  }
  ERR_put_error(15, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", 92);
  return 0;
}

uint64_t EC_KEY_parse_parameters(long long *a1)
{
  if (!CBS_peek_asn1_tag(a1, 536870928))
  {
    return EC_KEY_parse_curve_name(a1);
  }
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = v2;
  long long v21 = v2;
  long long v18 = v2;
  long long v19 = v2;
  long long v16 = v2;
  long long v17 = v2;
  memset(v27, 170, sizeof(v27));
  memset(v26, 170, sizeof(v26));
  memset(v25, 170, sizeof(v25));
  int v24 = -1431655766;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_asn1(a1, &v27[1], 536870928)
    || !CBS_get_asn1_uint64(&v27[1], &v23)
    || v23 != 1
    || !CBS_get_asn1(&v27[1], v27, 536870928)
    || !CBS_get_asn1(v27, &v26[1], 6)
    || *((void *)&v26[1] + 1) != 7
    || (**(_DWORD **)&v26[1] == -834107862 ? (BOOL v3 = *(_DWORD *)(*(void *)&v26[1] + 3) == 16858574) : (BOOL v3 = 0),
        !v3
     || !CBS_get_asn1(v27, &v16, 2)
     || !CBS_is_unsigned_asn1_integer((unsigned __int8 **)&v16)
     || *((void *)&v27[0] + 1)
     || !CBS_get_asn1(&v27[1], v26, 536870928)
     || !CBS_get_asn1(v26, &v17, 4)
     || !CBS_get_asn1(v26, &v18, 4)
     || !CBS_get_optional_asn1(v26, 0, 0, 3)
     || *((void *)&v26[0] + 1)
     || !CBS_get_asn1(&v27[1], &v25[2], 4)
     || !CBS_get_asn1(&v27[1], &v21, 2)
     || !CBS_is_unsigned_asn1_integer((unsigned __int8 **)&v21)
     || !CBS_get_optional_asn1(&v27[1], v25, &v24, 2)
     || *((void *)&v27[1] + 1)))
  {
    int v4 = 128;
    int v5 = 288;
LABEL_13:
    ERR_put_error(15, 0, v4, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", v5);
    return 0;
  }
  if (v24 && (v25[1] != 1 || *(unsigned char *)v25[0] != 1))
  {
    int v4 = 123;
    int v5 = 296;
    goto LABEL_13;
  }
  char v22 = -86;
  if (!CBS_get_u8(&v25[2], &v22) || v22 != 4)
  {
    int v4 = 111;
    int v5 = 304;
    goto LABEL_13;
  }
  if (v25[3])
  {
    int v4 = 128;
    int v5 = 309;
    goto LABEL_13;
  }
  *(void *)&long long v19 = v25[2];
  *((void *)&v19 + 1) = v25[3] >> 1;
  *(void *)&long long v20 = v25[2] + (v25[3] >> 1);
  *((void *)&v20 + 1) = v25[3] >> 1;
  uint64_t v7 = BN_new();
  uint64_t v8 = BN_new();
  id v9 = BN_new();
  uint64_t v10 = BN_new();
  a = BN_new();
  int v11 = 0;
  if (v7 && v8 && v9 && v10 && a)
  {
    uint64_t v12 = 0;
    while (1)
    {
      int v11 = (const EC_GROUP *)(*(uint64_t (**)())((char *)&kAllGroups + v12))();
      uint64_t v13 = EC_GROUP_get0_order((uint64_t)v11);
      if (integers_equal(&v21, v13)) {
        break;
      }
      v12 += 8;
      if (v12 == 32) {
        goto LABEL_44;
      }
    }
    if (!EC_GROUP_get_curve_GFp(v11, v7, v8, v9, 0))
    {
LABEL_45:
      int v11 = 0;
      goto LABEL_46;
    }
    if (!integers_equal(&v16, (uint64_t)v7) || !integers_equal(&v17, (uint64_t)v8) || !integers_equal(&v18, (uint64_t)v9)) {
      goto LABEL_44;
    }
    unint64_t v14 = EC_GROUP_get0_generator(v11);
    if (!EC_POINT_get_affine_coordinates_GFp(v11, v14, v10, a, 0)) {
      goto LABEL_45;
    }
    if (!integers_equal(&v19, (uint64_t)v10) || !integers_equal(&v20, (uint64_t)a) || !v11)
    {
LABEL_44:
      ERR_put_error(15, 0, 123, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", 422);
      goto LABEL_45;
    }
  }
LABEL_46:
  BN_free(v7);
  BN_free(v8);
  BN_free(v9);
  BN_free(v10);
  BN_free(a);
  return (uint64_t)v11;
}

uint64_t EC_KEY_marshal_private_key(uint64_t *a1, uint64_t a2, char a3)
{
  if (a2 && *(void *)a2 && *(void *)(a2 + 16))
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v20[1] = v6;
    _OWORD v20[2] = v6;
    v20[0] = v6;
    v19[1] = v6;
    v19[2] = v6;
    v19[0] = v6;
    if (CBB_add_asn1(a1, (uint64_t)v20, 0x20000010u)
      && CBB_add_asn1_uint64((uint64_t)v20, 1uLL)
      && CBB_add_asn1((uint64_t *)v20, (uint64_t)v19, 4u)
      && (uint64_t v7 = (const BIGNUM *)EC_GROUP_get0_order(*(void *)a2),
          unint64_t v8 = BN_num_bytes(v7),
          id v9 = EVP_HPKE_CTX_kdf((const EC_KEY *)a2),
          BN_bn2cbb_padded((uint64_t)v19, v8, (uint64_t)v9)))
    {
      if ((a3 & 1) != 0
        || (*(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL,
            *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL,
            long long v17 = v10,
            long long v18 = v10,
            long long v16 = v10,
            CBB_add_asn1((uint64_t *)v20, (uint64_t)&v16, 0xA0000000))
        && EC_KEY_marshal_curve_name((uint64_t *)&v16, *(void *)a2)
        && CBB_flush((uint64_t *)v20))
      {
        if ((a3 & 2) != 0) {
          goto LABEL_30;
        }
        if (!*(void *)(a2 + 8)) {
          goto LABEL_30;
        }
        *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v17 = v11;
        long long v18 = v11;
        long long v15[2] = v11;
        long long v16 = v11;
        v15[0] = v11;
        v15[1] = v11;
        if (!CBB_add_asn1((uint64_t *)v20, (uint64_t)&v16, 0xA0000001)) {
          goto LABEL_26;
        }
        if (CBB_add_asn1((uint64_t *)&v16, (uint64_t)v15, 3u)
          && CBB_add_u8((uint64_t)v15, 0)
          && EC_POINT_point2cbb((uint64_t)v15, *(EC_GROUP **)a2, *(EC_POINT **)(a2 + 8), (point_conversion_form_t)*(_DWORD *)(a2 + 28), 0)&& CBB_flush((uint64_t *)v20))
        {
LABEL_30:
          if (CBB_flush(a1)) {
            return 1;
          }
          int v13 = 129;
          int v14 = 244;
        }
        else
        {
LABEL_26:
          int v13 = 129;
          int v14 = 238;
        }
      }
      else
      {
        int v13 = 129;
        int v14 = 222;
      }
    }
    else
    {
      int v13 = 129;
      int v14 = 213;
    }
  }
  else
  {
    int v13 = 67;
    int v14 = 202;
  }
  ERR_put_error(15, 0, v13, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", v14);
  return 0;
}

uint64_t EC_KEY_marshal_curve_name(uint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 525))
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v6[1] = v4;
    void v6[2] = v4;
    v6[0] = v4;
    uint64_t result = CBB_add_asn1(a1, (uint64_t)v6, 6u);
    if (result)
    {
      uint64_t result = CBB_add_bytes((uint64_t)v6, (const void *)(a2 + 516), *(unsigned __int8 *)(a2 + 525));
      if (result) {
        return CBB_flush(a1) != 0;
      }
    }
  }
  else
  {
    ERR_put_error(15, 0, 123, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", 363);
    return 0;
  }
  return result;
}

BOOL integers_equal(long long *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  for (long long i = *a1; *((void *)&i + 1); CBS_skip(&i, 1uLL))
  {
    if (*(unsigned char *)i)
    {
      if (*((void *)&i + 1) > 0x42uLL) {
        return 0;
      }
      break;
    }
  }
  __int16 v7 = -21846;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v6[2] = v3;
  _OWORD v6[3] = v3;
  v6[0] = v3;
  v6[1] = v3;
  if (BN_bn2bin_padded((char *)v6, *((unint64_t *)&i + 1), a2)) {
    return CBS_mem_equal((uint64_t)&i, (char *)v6, *((uint64_t *)&i + 1));
  }
  ERR_clear_error();
  return 0;
}

EC_KEY *__cdecl d2i_ECPrivateKey(EC_KEY **a, const unsigned __int8 **in, uint64_t len)
{
  if (a && (long long v6 = *a) != 0)
  {
    __int16 v7 = EC_KEY_get0_group(v6);
    if (len < 0)
    {
LABEL_4:
      ERR_put_error(15, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/ec_extra/ec_asn1.c", 454);
      return 0;
    }
  }
  else
  {
    __int16 v7 = 0;
    if (len < 0) {
      goto LABEL_4;
    }
  }
  *(void *)&long long v10 = *in;
  *((void *)&v10 + 1) = len;
  uint64_t v8 = EC_KEY_parse_private_key(&v10, v7);
  if (v8)
  {
    if (a)
    {
      EC_KEY_free(*a);
      BIGNUM *a = v8;
    }
    *in = (const unsigned __int8 *)v10;
  }
  return v8;
}

int i2d_ECPrivateKey(EC_KEY *a, unsigned __int8 **out)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = v4;
  int64x2_t v7[2] = v4;
  v7[0] = v4;
  if (CBB_init((uint64_t)v7, 0))
  {
    enc_flagunsigned int s = EC_KEY_get_enc_flags(a);
    if (EC_KEY_marshal_private_key((uint64_t *)v7, (uint64_t)a, enc_flags)) {
      return CBB_finish_i2d((uint64_t)v7, (void **)out);
    }
  }
  CBB_cleanup((uint64_t)v7);
  return -1;
}

uint64_t ed25519_pub_decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 8))
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ed25519_asn1.c", 119);
    return 0;
  }
  else
  {
    long long v4 = *(_OWORD **)a3;
    uint64_t v5 = *(void *)(a3 + 8);
    return ed25519_set_pub_raw(a1, v4, v5);
  }
}

uint64_t ed25519_pub_encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = v4;
  _OWORD v9[2] = v4;
  v9[0] = v4;
  v8[1] = v4;
  v8[2] = v4;
  int64x2_t v7[2] = v4;
  v8[0] = v4;
  v7[0] = v4;
  v7[1] = v4;
  v6[1] = v4;
  void v6[2] = v4;
  v6[0] = v4;
  if (CBB_add_asn1(a1, (uint64_t)v9, 0x20000010u)
    && CBB_add_asn1((uint64_t *)v9, (uint64_t)v8, 0x20000010u)
    && CBB_add_asn1((uint64_t *)v8, (uint64_t)v7, 6u)
    && CBB_add_bytes((uint64_t)v7, &unk_1F13985EC, 3uLL)
    && CBB_add_asn1((uint64_t *)v9, (uint64_t)v6, 3u)
    && CBB_add_u8((uint64_t)v6, 0)
    && CBB_add_bytes((uint64_t)v6, (const void *)(v3 + 32), 0x20uLL)
    && CBB_flush(a1))
  {
    return 1;
  }
  ERR_put_error(6, 0, 105, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ed25519_asn1.c", 140);
  return 0;
}

BOOL ed25519_pub_cmp(uint64_t a1, uint64_t a2)
{
  long long v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[5];
  uint64_t v6 = v3[4];
  uint64_t v7 = v3[5];
  uint64_t v9 = v2[6];
  uint64_t v8 = v2[7];
  uint64_t v11 = v3[6];
  uint64_t v10 = v3[7];
  return v4 == v6 && v5 == v7 && v9 == v11 && v8 == v10;
}

uint64_t ed25519_priv_decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  if (!*(void *)(a2 + 8) && CBS_get_asn1((long long *)a3, &v6, 4) && !*(void *)(a3 + 8)) {
    return ed25519_set_priv_raw(a1, v6, v7);
  }
  ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ed25519_asn1.c", 163);
  return 0;
}

uint64_t ed25519_priv_encode(uint64_t *a1, uint64_t a2)
{
  long long v2 = *(unsigned char **)(a2 + 8);
  if (v2[64])
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v12[1] = v4;
    long long v12[2] = v4;
    _OWORD v11[2] = v4;
    v12[0] = v4;
    v11[0] = v4;
    v11[1] = v4;
    v10[1] = v4;
    void v10[2] = v4;
    _OWORD v9[2] = v4;
    v10[0] = v4;
    v9[0] = v4;
    v9[1] = v4;
    v8[1] = v4;
    v8[2] = v4;
    v8[0] = v4;
    if (CBB_add_asn1(a1, (uint64_t)v12, 0x20000010u)
      && CBB_add_asn1_uint64((uint64_t)v12, 0)
      && CBB_add_asn1((uint64_t *)v12, (uint64_t)v11, 0x20000010u)
      && CBB_add_asn1((uint64_t *)v11, (uint64_t)v10, 6u)
      && CBB_add_bytes((uint64_t)v10, &unk_1F13985EC, 3uLL)
      && CBB_add_asn1((uint64_t *)v12, (uint64_t)v9, 4u)
      && CBB_add_asn1((uint64_t *)v9, (uint64_t)v8, 4u)
      && CBB_add_bytes((uint64_t)v8, v2, 0x20uLL)
      && CBB_flush(a1))
    {
      return 1;
    }
    int v6 = 105;
    int v7 = 190;
  }
  else
  {
    int v6 = 130;
    int v7 = 173;
  }
  ERR_put_error(6, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ed25519_asn1.c", v7);
  return 0;
}

uint64_t ed25519_set_priv_raw(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a3 != 32)
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ed25519_asn1.c", 33);
    return 0;
  }
  uint64_t v5 = OPENSSL_malloc(0x41uLL);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v7;
  v10[1] = v7;
  ED25519_keypair_from_seed((uint64_t)v10, v5, a2);
  uint64_t v8 = 1;
  *((unsigned char *)v6 + 64) = 1;
  OPENSSL_free(*(void **)(a1 + 8));
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v6;
  return v8;
}

uint64_t ed25519_set_pub_raw(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (a3 == 32)
  {
    uint64_t result = (uint64_t)OPENSSL_malloc(0x41uLL);
    if (result)
    {
      uint64_t v6 = result;
      long long v7 = a2[1];
      *(_OWORD *)(result + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = *a2;
      *(_OWORD *)(result + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v7;
      *(unsigned char *)(result + 64) = 0;
      OPENSSL_free(*(void **)(a1 + 8));
      *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v6;
      return 1;
    }
  }
  else
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ed25519_asn1.c", 55);
    return 0;
  }
  return result;
}

uint64_t ed25519_get_priv_raw(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v3 + 64))
  {
    int v4 = 130;
    int v5 = 76;
    goto LABEL_6;
  }
  if (a2)
  {
    if (*a3 <= 0x1FuLL)
    {
      int v4 = 100;
      int v5 = 86;
LABEL_6:
      ERR_put_error(6, 0, v4, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ed25519_asn1.c", v5);
      return 0;
    }
    long long v7 = *(_OWORD *)(v3 + 16);
    *a2 = *(_OWORD *)v3;
    a2[1] = v7;
  }
  *a3 = 32;
  return 1;
}

uint64_t ed25519_get_pub_raw(uint64_t a1, _OWORD *a2, void *a3)
{
  if (a2)
  {
    if (*a3 <= 0x1FuLL)
    {
      ERR_put_error(6, 0, 100, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ed25519_asn1.c", 105);
      return 0;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    long long v5 = *(_OWORD *)(v4 + 48);
    *a2 = *(_OWORD *)(v4 + 32);
    a2[1] = v5;
  }
  *a3 = 32;
  return 1;
}

uint64_t ed25519_size()
{
  return 64;
}

uint64_t ed25519_bits()
{
  return 253;
}

void ed25519_free(uint64_t a1)
{
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
}

char *boringssl_ciphers_create_configuration_string(uint64_t a1, uint64_t a2)
{
  long long v2 = 0;
  if (a1 && a2)
  {
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (Mutable)
    {
      uint64_t v6 = Mutable;
      uint64_t v7 = 0;
      char v8 = 0;
      do
      {
        uint64_t v9 = v7;
        while (1)
        {
          uint64_t v10 = boringssl_ciphers_value_to_string(*(unsigned __int16 *)(a1 + 2 * v9));
          if (v10) {
            break;
          }
          if (a2 == ++v9)
          {
            if (v8) {
              goto LABEL_14;
            }
            if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
              boringssl_ciphers_create_configuration_string_cold_3();
            }
LABEL_23:
            CFRelease(v6);
            return 0;
          }
        }
        uint64_t v11 = v10;
        if (v8) {
          CFStringAppend(v6, @":");
        }
        CFStringAppendCString(v6, v11, 0x8000100u);
        uint64_t v7 = v9 + 1;
        char v8 = 1;
      }
      while (a2 - 1 != v9);
LABEL_14:
      CFIndex v12 = CFStringGetLength(v6) + 1;
      int v13 = (char *)malloc_type_malloc(v12, 0x66DE259AuLL);
      if (!v13)
      {
        if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
          boringssl_ciphers_create_configuration_string_cold_1();
        }
        goto LABEL_23;
      }
      long long v2 = v13;
      if (CFStringGetCString(v6, v13, v12, 0x8000100u))
      {
        CFRelease(v6);
        return v2;
      }
      if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
        boringssl_ciphers_create_configuration_string_cold_2();
      }
      CFRelease(v6);
      free(v2);
    }
    return 0;
  }
  return v2;
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void boringssl_session_update_eap_metadata(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == -1252936367)
    {
      uint64_t v2 = *(void *)(a1 + 8);
      if (v2)
      {
        if (*(void *)(v2 + 400) && *(_DWORD *)(v2 + 300) == 2)
        {
          uint64_t v9 = 0;
          uint64_t v10 = &v9;
          uint64_t v11 = 0x2020000000;
          uint64_t v12 = 0;
          uint64_t v5 = 0;
          uint64_t v6 = &v5;
          uint64_t v7 = 0x2020000000;
          uint64_t v8 = 0;
          v3[0] = 0;
          v3[1] = v3;
          v3[2] = 0x2020000000;
          char v4 = 0;
          nw_protocol_options_access_handle();
          if (v6[3] && v10[3])
          {
            if (*(_DWORD *)a1 == -1252936367)
            {
              if (*(void *)(a1 + 8)) {
                nw_protocol_metadata_access_handle();
              }
            }
            nw_protocol_metadata_access_handle();
          }
          _Block_object_dispose(v3, 8);
          _Block_object_dispose(&v5, 8);
          _Block_object_dispose(&v9, 8);
        }
      }
    }
  }
}

void sub_1BA11FABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);
  _Unwind_Resume(a1);
}

BOOL __boringssl_session_update_eap_metadata_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return a2 != 0;
  }
  int negotiated_tls_protocol_version = sec_protocol_metadata_get_negotiated_tls_protocol_version(*(sec_protocol_metadata_t *)(a1[7] + 520));
  if (*(unsigned char *)(a2 + 360) == 1)
  {
    uint64_t v6 = a1[7];
    if (negotiated_tls_protocol_version == 772)
    {
      if (!v6) {
        goto LABEL_23;
      }
      id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
      if (WeakRetained)
      {
        uint64_t v8 = WeakRetained;
        uint64_t v9 = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1[7] + 16));
        uint64_t v2 = (char *)v9[475];

        if (v2) {
          goto LABEL_62;
        }
      }
      uint64_t v10 = a1[7];
      if (v10)
      {
        id v11 = objc_loadWeakRetained((id *)(v10 + 16));
        if (v11)
        {
          uint64_t v12 = objc_loadWeakRetained((id *)(a1[7] + 16));
          uint64_t v13 = (v12[475] & 1) == 0;
        }
        else
        {
          uint64_t v13 = 1;
        }

        if (!v13) {
          goto LABEL_62;
        }
      }
      else
      {
LABEL_23:
        uint64_t v13 = 1;
      }
      if (!g_boringssl_log)
      {
LABEL_62:
        *(void *)(*(void *)(a1[4] + 8) + 24) = "EXPORTER_EAP_TLS_Key_Material";
        *(void *)(*(void *)(a1[5] + 8) + 24) = 29;
        *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
        return a2 != 0;
      }
      int v30 = (id)g_boringssl_log;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
        goto LABEL_61;
      }
      uint64_t v31 = a1[7];
      if (v31)
      {
        uint64_t v13 = (uint64_t)objc_loadWeakRetained((id *)(v31 + 16));
        uint64_t v32 = a1[7];
        if (v13)
        {
          BOOL v33 = v32 != 0;
          if (v32)
          {
            uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v32 + 16));
            uint64_t v32 = a1[7];
          }
          else
          {
            uint64_t v2 = 0;
          }
          unint64_t v40 = v2 + 391;
        }
        else
        {
          BOOL v33 = 0;
          unint64_t v40 = &unk_1BA179713;
        }
        if (v32)
        {
          id v38 = objc_loadWeakRetained((id *)(v32 + 16));
          char v39 = 0;
        }
        else
        {
          id v38 = 0;
          char v39 = 1;
        }
      }
      else
      {
        BOOL v33 = 0;
        id v38 = 0;
        char v39 = 1;
        unint64_t v40 = &unk_1BA179713;
      }
      int v51 = 136446978;
      __int16 v52 = "boringssl_session_update_eap_metadata_block_invoke";
      __int16 v53 = 1024;
      int v54 = 101;
      __int16 v55 = 2082;
      char v56 = v40;
      __int16 v57 = 2048;
      id v58 = v38;
      _os_log_impl(&dword_1BA0DE000, v30, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] TLS handshake is complete using TLS 1.3 version", (uint8_t *)&v51, 0x26u);
      if (v39)
      {
        if (!v33) {
          goto LABEL_59;
        }
      }
      else
      {

        if (!v33)
        {
LABEL_59:
          if (v31) {
LABEL_60:
          }

LABEL_61:
          goto LABEL_62;
        }
      }

      if (!v31) {
        goto LABEL_61;
      }
      goto LABEL_60;
    }
    if (!v6) {
      goto LABEL_24;
    }
    id v22 = objc_loadWeakRetained((id *)(v6 + 16));
    if (v22)
    {
      unint64_t v23 = v22;
      int v24 = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1[7] + 16));
      uint64_t v2 = (char *)v24[475];

      if (v2) {
        goto LABEL_76;
      }
    }
    uint64_t v25 = a1[7];
    if (v25)
    {
      id v26 = objc_loadWeakRetained((id *)(v25 + 16));
      if (v26)
      {
        uint64_t v27 = objc_loadWeakRetained((id *)(a1[7] + 16));
        uint64_t v28 = (v27[475] & 1) == 0;
      }
      else
      {
        uint64_t v28 = 1;
      }

      if (!v28) {
        goto LABEL_76;
      }
    }
    else
    {
LABEL_24:
      uint64_t v28 = 1;
    }
    if (!g_boringssl_log)
    {
LABEL_76:
      *(void *)(*(void *)(a1[4] + 8) + 24) = "client EAP encryption";
      *(void *)(*(void *)(a1[5] + 8) + 24) = 21;
      return a2 != 0;
    }
    id v34 = (id)g_boringssl_log;
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_INFO)) {
      goto LABEL_75;
    }
    uint64_t v35 = a1[7];
    if (v35)
    {
      uint64_t v28 = (uint64_t)objc_loadWeakRetained((id *)(v35 + 16));
      uint64_t v36 = a1[7];
      if (v28)
      {
        BOOL v37 = v36 != 0;
        if (v36)
        {
          uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v36 + 16));
          uint64_t v36 = a1[7];
        }
        else
        {
          uint64_t v2 = 0;
        }
        unint64_t v43 = v2 + 391;
      }
      else
      {
        BOOL v37 = 0;
        unint64_t v43 = &unk_1BA179713;
      }
      if (v36)
      {
        id v41 = objc_loadWeakRetained((id *)(v36 + 16));
        char v42 = 0;
      }
      else
      {
        id v41 = 0;
        char v42 = 1;
      }
    }
    else
    {
      BOOL v37 = 0;
      id v41 = 0;
      char v42 = 1;
      unint64_t v43 = &unk_1BA179713;
    }
    int v51 = 136446978;
    __int16 v52 = "boringssl_session_update_eap_metadata_block_invoke";
    __int16 v53 = 1024;
    int v54 = 106;
    __int16 v55 = 2082;
    char v56 = v43;
    __int16 v57 = 2048;
    id v58 = v41;
    _os_log_impl(&dword_1BA0DE000, v34, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] TLS handshake is complete using legacy TLS version", (uint8_t *)&v51, 0x26u);
    if (v42)
    {
      if (!v37) {
        goto LABEL_73;
      }
    }
    else
    {

      if (!v37)
      {
LABEL_73:
        if (v35) {
LABEL_74:
        }

LABEL_75:
        goto LABEL_76;
      }
    }

    if (!v35) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  uint64_t v14 = a1[7];
  if (!v14) {
    goto LABEL_16;
  }
  id v15 = objc_loadWeakRetained((id *)(v14 + 16));
  if (v15)
  {
    long long v16 = v15;
    long long v17 = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1[7] + 16));
    uint64_t v2 = (char *)v17[475];

    if (v2) {
      return a2 != 0;
    }
  }
  uint64_t v18 = a1[7];
  if (v18)
  {
    id v19 = objc_loadWeakRetained((id *)(v18 + 16));
    if (v19)
    {
      long long v20 = objc_loadWeakRetained((id *)(a1[7] + 16));
      uint64_t v21 = (v20[475] & 1) == 0;
    }
    else
    {
      uint64_t v21 = 1;
    }

    if (!v21) {
      return a2 != 0;
    }
  }
  else
  {
LABEL_16:
    uint64_t v21 = 1;
  }
  if (g_boringssl_log)
  {
    uint64_t v29 = (id)g_boringssl_log;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
LABEL_29:

      return a2 != 0;
    }
    uint64_t v44 = a1[7];
    if (v44)
    {
      uint64_t v21 = (uint64_t)objc_loadWeakRetained((id *)(v44 + 16));
      uint64_t v50 = a1[7];
      if (v21)
      {
        BOOL v45 = v50 != 0;
        if (v50)
        {
          uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v50 + 16));
          uint64_t v50 = a1[7];
        }
        else
        {
          uint64_t v2 = 0;
        }
        BOOL v48 = v2 + 391;
      }
      else
      {
        BOOL v45 = 0;
        BOOL v48 = &unk_1BA179713;
      }
      if (v50)
      {
        id v46 = objc_loadWeakRetained((id *)(v50 + 16));
        char v47 = 0;
      }
      else
      {
        id v46 = 0;
        char v47 = 1;
      }
    }
    else
    {
      BOOL v45 = 0;
      id v46 = 0;
      char v47 = 1;
      BOOL v48 = &unk_1BA179713;
    }
    int v51 = 136446978;
    __int16 v52 = "boringssl_session_update_eap_metadata_block_invoke";
    __int16 v53 = 1024;
    int v54 = 112;
    __int16 v55 = 2082;
    char v56 = v48;
    __int16 v57 = 2048;
    id v58 = v46;
    _os_log_error_impl(&dword_1BA0DE000, v29, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] Unexpected EAP method", (uint8_t *)&v51, 0x26u);
    if (v47)
    {
      if (!v45) {
        goto LABEL_92;
      }
    }
    else
    {

      if (!v45)
      {
LABEL_92:
        if (!v44) {
          goto LABEL_29;
        }
        goto LABEL_96;
      }
    }

    if (!v44) {
      goto LABEL_29;
    }
LABEL_96:

    goto LABEL_29;
  }
  return a2 != 0;
}

uint64_t __boringssl_session_update_eap_metadata_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (ssl_st *)malloc_type_malloc(0x80uLL, 0x432D5733uLL);
  *(void *)(a2 + 32std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0) = v5;
  if (v5)
  {
    if (SSL_export_keying_material(*(bssl **)(*(void *)(a1 + 64) + 400), v5, 0x80uLL, *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(const void **)(a1 + 72), *(void *)(a1 + 80), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)))return 1; {
    uint64_t v6 = *(void **)(a2 + 320);
    }
    if (v6) {
      free(v6);
    }
    *(void *)(a2 + 32std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0) = 0;
    uint64_t v7 = *(void *)(a1 + 56);
    if (!v7) {
      goto LABEL_18;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v7 + 16));
    if (WeakRetained)
    {
      uint64_t v9 = WeakRetained;
      uint64_t v10 = (unsigned __int8 *)objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 16));
      uint64_t v2 = (char *)v10[475];

      if (v2) {
        return 1;
      }
    }
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      id v12 = objc_loadWeakRetained((id *)(v11 + 16));
      if (v12)
      {
        uint64_t v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 16));
        uint64_t v14 = (v13[475] & 1) == 0;
      }
      else
      {
        uint64_t v14 = 1;
      }

      if (!v14) {
        return 1;
      }
    }
    else
    {
LABEL_18:
      uint64_t v14 = 1;
    }
    if (g_boringssl_log)
    {
      id v22 = (id)g_boringssl_log;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      uint64_t v23 = *(void *)(a1 + 56);
      if (v23)
      {
        uint64_t v14 = (uint64_t)objc_loadWeakRetained((id *)(v23 + 16));
        uint64_t v31 = *(void *)(a1 + 56);
        if (v14)
        {
          BOOL v24 = v31 != 0;
          if (v31)
          {
            uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v31 + 16));
            uint64_t v31 = *(void *)(a1 + 56);
          }
          else
          {
            uint64_t v2 = 0;
          }
          uint64_t v29 = v2 + 391;
        }
        else
        {
          BOOL v24 = 0;
          uint64_t v29 = &unk_1BA179713;
        }
        if (v31)
        {
          id v25 = objc_loadWeakRetained((id *)(v31 + 16));
          char v26 = 0;
        }
        else
        {
          id v25 = 0;
          char v26 = 1;
        }
      }
      else
      {
        BOOL v24 = 0;
        id v25 = 0;
        char v26 = 1;
        uint64_t v29 = &unk_1BA179713;
      }
      int v33 = 136446978;
      id v34 = "boringssl_session_update_eap_metadata_block_invoke";
      __int16 v35 = 1024;
      int v36 = 142;
      __int16 v37 = 2082;
      id v38 = v29;
      __int16 v39 = 2048;
      id v40 = v25;
      uint64_t v32 = "%{public}s(%d) %{public}s[%p] EAP key material computation failed";
      goto LABEL_53;
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (!v15) {
      goto LABEL_17;
    }
    id v16 = objc_loadWeakRetained((id *)(v15 + 16));
    if (v16)
    {
      long long v17 = v16;
      uint64_t v18 = (unsigned __int8 *)objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 16));
      uint64_t v2 = (char *)v18[475];

      if (v2) {
        return 1;
      }
    }
    uint64_t v19 = *(void *)(a1 + 56);
    if (v19)
    {
      id v20 = objc_loadWeakRetained((id *)(v19 + 16));
      if (v20)
      {
        uint64_t v21 = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 16));
        uint64_t v14 = (v21[475] & 1) == 0;
      }
      else
      {
        uint64_t v14 = 1;
      }

      if (!v14) {
        return 1;
      }
    }
    else
    {
LABEL_17:
      uint64_t v14 = 1;
    }
    if (g_boringssl_log)
    {
      id v22 = (id)g_boringssl_log;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
LABEL_29:

        return 1;
      }
      uint64_t v23 = *(void *)(a1 + 56);
      if (v23)
      {
        uint64_t v14 = (uint64_t)objc_loadWeakRetained((id *)(v23 + 16));
        uint64_t v30 = *(void *)(a1 + 56);
        if (v14)
        {
          BOOL v24 = v30 != 0;
          if (v30)
          {
            uint64_t v2 = (char *)objc_loadWeakRetained((id *)(v30 + 16));
            uint64_t v30 = *(void *)(a1 + 56);
          }
          else
          {
            uint64_t v2 = 0;
          }
          uint64_t v27 = v2 + 391;
        }
        else
        {
          BOOL v24 = 0;
          uint64_t v27 = &unk_1BA179713;
        }
        if (v30)
        {
          id v25 = objc_loadWeakRetained((id *)(v30 + 16));
          char v26 = 0;
        }
        else
        {
          id v25 = 0;
          char v26 = 1;
        }
      }
      else
      {
        BOOL v24 = 0;
        id v25 = 0;
        char v26 = 1;
        uint64_t v27 = &unk_1BA179713;
      }
      int v33 = 136446978;
      id v34 = "boringssl_session_update_eap_metadata_block_invoke";
      __int16 v35 = 1024;
      int v36 = 131;
      __int16 v37 = 2082;
      id v38 = v27;
      __int16 v39 = 2048;
      id v40 = v25;
      uint64_t v32 = "%{public}s(%d) %{public}s[%p] EAP key material allocation failed";
LABEL_53:
      _os_log_error_impl(&dword_1BA0DE000, v22, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&v33, 0x26u);
      if (v26)
      {
        if (!v24) {
          goto LABEL_55;
        }
      }
      else
      {

        if (!v24)
        {
LABEL_55:
          if (!v23) {
            goto LABEL_29;
          }
          goto LABEL_59;
        }
      }

      if (!v23) {
        goto LABEL_29;
      }
LABEL_59:

      goto LABEL_29;
    }
  }
  return 1;
}

uint64_t boringssl_session_handshake_continue(SSL *a1)
{
  return boringssl_session_handshake_continue_inner(a1, 0);
}

uint64_t boringssl_session_handshake_error_print(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  if (*(_DWORD *)a3 != -1252936367) {
    return 0;
  }
  uint64_t v3 = *(void *)(a3 + 8);
  if (!v3) {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained;
    uint64_t v7 = objc_loadWeakRetained((id *)(v3 + 16));
    char v8 = v7[475];

    if (v8) {
      return 1;
    }
  }
  id v9 = objc_loadWeakRetained((id *)(v3 + 16));
  if (v9)
  {
    uint64_t v10 = objc_loadWeakRetained((id *)(v3 + 16));
    BOOL v11 = (v10[475] & 1) == 0;
  }
  else
  {
    BOOL v11 = 1;
  }

  uint64_t result = 1;
  if (v11 && g_boringssl_log)
  {
    uint64_t v13 = (id)g_boringssl_log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      boringssl_session_handshake_error_print_cold_1(v3, a1, v13);
    }

    return 1;
  }
  return result;
}

void *boringssl_session_export_secret_with_context(uint64_t a1, size_t a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6 || !*(void *)(v6 + 400)) {
    return 0;
  }
  id v12 = malloc_type_malloc(0x10uLL, 0x1010040466105CCuLL);
  uint64_t v13 = v12;
  if (v12)
  {
    *id v12 = a6;
    uint64_t v14 = (ssl_st *)malloc_type_malloc(a6, 0x5AC6C4FuLL);
    v13[1] = v14;
    if (!v14)
    {
LABEL_10:
      free(v13);
      return 0;
    }
    if (!SSL_export_keying_material(*(bssl **)(v6 + 400), v14, *v13, a3, a2, a5, a4, 1))
    {
      uint64_t v15 = (void *)v13[1];
      if (v15) {
        free(v15);
      }
      goto LABEL_10;
    }
  }
  return v13;
}

void *boringssl_session_export_secret(uint64_t a1, size_t a2, const void *a3, size_t a4)
{
  return boringssl_session_export_secret_with_context(a1, a2, a3, 0, 0, a4);
}

dispatch_data_t boringssl_session_export_secret_data(uint64_t a1, size_t a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  uint64_t v6 = boringssl_session_export_secret_with_context(a1, a2, a3, a4, a5, a6);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  dispatch_data_t v8 = dispatch_data_create((const void *)v6[1], *v6, 0, 0);
  id v9 = (void *)v7[1];
  if (v9) {
    free(v9);
  }
  free(v7);
  return v8;
}

dispatch_data_t boringssl_session_copy_authenticator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  dispatch_data_t v8 = v7;
  if (a1 && *(_DWORD *)a1 == -1252936367)
  {
    dispatch_data_t v9 = 0;
    if (v7)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      if (v10)
      {
        CFArrayRef v11 = boringssl_identity_create_from_identity(v7);
        if (v11
          && boringssl_context_set_temporary_identity(a1, v8)
          && (uint64_t v14 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL,
              uint64_t v15 = 0,
              int v12 = SSL_generate_authenticator(*(void *)(v10 + 400), a3, a4, &v15, &v14),
              boringssl_context_set_temporary_identity(a1, 0),
              v12))
        {
          dispatch_data_t v9 = dispatch_data_create(v15, (size_t)v14, 0, 0);
          OPENSSL_free(v15);
        }
        else
        {
          dispatch_data_t v9 = 0;
        }
      }
    }
  }
  else
  {
    dispatch_data_t v9 = 0;
  }

  return v9;
}

sec_trust_t boringssl_session_copy_authenticator_trust(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || *(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  sec_trust_t v3 = 0;
  if (a3)
  {
    if (a2)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      if (v4)
      {
        if (SSL_validate_authenticator(*(void *)(v4 + 400), a2, a3))
        {
          session = SSL_get_session(*(const SSL **)(v4 + 400));
          uint64_t v6 = (unint64_t *)SSL_SESSION_get0_peer_certificates((uint64_t)session);
          id v7 = boringssl_helper_copy_certificates_from_CRYPTO_BUFFERs((void *)v4, v6);
          if (v7)
          {
            dispatch_data_t v8 = v7;
            SSLWithKeyUsage = (const void *)SecPolicyCreateSSLWithKeyUsage();
            if (SSLWithKeyUsage)
            {
              uint64_t v10 = SSLWithKeyUsage;
              SecTrustRef trust = 0;
              SecTrustCreateWithCertificates(v8, SSLWithKeyUsage, &trust);
              CFRelease(v10);
              CFRelease(v8);
              if (trust)
              {
                sec_trust_t v3 = sec_trust_create(trust);
                CFRelease(trust);
                return v3;
              }
            }
            else
            {
              CFRelease(v8);
            }
            return 0;
          }
          id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
          if (WeakRetained)
          {
            uint64_t v19 = WeakRetained;
            id v20 = objc_loadWeakRetained((id *)(v4 + 16));
            char v21 = v20[475];

            if (v21) {
              return 0;
            }
          }
          id v22 = objc_loadWeakRetained((id *)(v4 + 16));
          if (v22)
          {
            uint64_t v23 = objc_loadWeakRetained((id *)(v4 + 16));
            BOOL v24 = (v23[475] & 1) == 0;
          }
          else
          {
            BOOL v24 = 1;
          }

          sec_trust_t v3 = 0;
          if (v24 && g_boringssl_log)
          {
            id v25 = (id)g_boringssl_log;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              boringssl_session_copy_authenticator_trust_cold_2(v4, v25);
            }
LABEL_30:

            return 0;
          }
        }
        else
        {
          id v11 = objc_loadWeakRetained((id *)(v4 + 16));
          if (v11)
          {
            int v12 = v11;
            uint64_t v13 = objc_loadWeakRetained((id *)(v4 + 16));
            char v14 = v13[475];

            if (v14) {
              return 0;
            }
          }
          id v15 = objc_loadWeakRetained((id *)(v4 + 16));
          if (v15)
          {
            id v16 = objc_loadWeakRetained((id *)(v4 + 16));
            BOOL v17 = (v16[475] & 1) == 0;
          }
          else
          {
            BOOL v17 = 1;
          }

          sec_trust_t v3 = 0;
          if (v17 && g_boringssl_log)
          {
            id v25 = (id)g_boringssl_log;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              boringssl_session_copy_authenticator_trust_cold_1(v4, v25);
            }
            goto LABEL_30;
          }
        }
      }
    }
  }
  return v3;
}

uint64_t boringssl_session_get_stack_error(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -1252936367) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v1 + 16));

  if (!WeakRetained) {
    return 0;
  }
  id v3 = objc_loadWeakRetained((id *)(v1 + 16));
  uint64_t error = nw_protocol_boringssl_get_error((uint64_t)v3);

  return error;
}

uint64_t boringssl_session_get_current_handshake_state(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0) {
      return *(unsigned int *)(v1 + 304);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_get_ech_was_used(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == -1252936367 && (uint64_t v1 = *(void *)(result + 8)) != 0)
    {
      uint64_t result = *(void *)(v1 + 400);
      if (result) {
        return SSL_ech_accepted(result);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_session_set_ech_config(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!a1 || *(_DWORD *)a1 != -1252936367) {
    goto LABEL_21;
  }
  uint64_t v5 = 0;
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 400);
      if (!v7) {
        goto LABEL_21;
      }
      size_t size = dispatch_data_get_size(v3);
      if (!size) {
        goto LABEL_21;
      }
      unint64_t v9 = size;
      uint64_t v5 = (uint64_t)malloc_type_malloc(size, 0xAD8D9952uLL);
      if (v5)
      {
        boringssl_helper_dispatch_data_copyout(v4, v5, v9);
        if (SSL_set1_ech_config_list(v7, (unsigned __int8 *)v5, v9))
        {
          free((void *)v5);
          uint64_t v5 = 1;
          goto LABEL_22;
        }
        id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
        if (!WeakRetained
          || (id v11 = WeakRetained,
              int v12 = objc_loadWeakRetained((id *)(v6 + 16)),
              char v13 = v12[475],
              v12,
              v11,
              (v13 & 1) == 0))
        {
          id v14 = objc_loadWeakRetained((id *)(v6 + 16));
          if (v14)
          {
            id v15 = objc_loadWeakRetained((id *)(v6 + 16));
            BOOL v16 = (v15[475] & 1) == 0;
          }
          else
          {
            BOOL v16 = 1;
          }

          if (v16)
          {
            if (g_boringssl_log)
            {
              BOOL v17 = (id)g_boringssl_log;
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                boringssl_session_set_ech_config_cold_1(v6, v17);
              }
            }
          }
        }
        free((void *)v5);
LABEL_21:
        uint64_t v5 = 0;
      }
    }
  }
LABEL_22:

  return v5;
}

uint64_t boringssl_private_key_sign_callback(const SSL *a1, uint64_t a2, unint64_t *a3, unint64_t a4, int a5, const void *a6, size_t a7)
{
  char v13 = SSL_get_ex_data(a1, 0);
  if (!v13) {
    return 2;
  }
  id v14 = v13;
  if (*(_DWORD *)v13 != -1252936367) {
    return 2;
  }
  id v15 = (void *)v13[1];
  if (!v15) {
    return 2;
  }
  boringssl_session_update_metadata((uint64_t)v13);
  dispatch_data_t v16 = dispatch_data_create(a6, a7, 0, 0);
  BOOL v17 = (void *)v15[13];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  _OWORD v21[2] = __boringssl_private_key_sign_callback_block_invoke;
  _OWORD v21[3] = &__block_descriptor_40_e45_v20__0__boringssl_concrete_boringssl_ctx_8B16l;
  v21[4] = v14;
  unsigned int v18 = boringssl_identity_private_key_sign(v17, a2, a3, a4, a5, v16, v15, v21);
  if (v18 > 2) {
    uint64_t v19 = 2;
  }
  else {
    uint64_t v19 = dword_1BA189B78[v18];
  }

  return v19;
}

uint64_t boringssl_private_key_decrypt_callback(const SSL *a1, void *a2, size_t *a3, size_t a4, const void *a5, size_t a6)
{
  id v11 = SSL_get_ex_data(a1, 0);
  if (!v11) {
    return 2;
  }
  int v12 = v11;
  if (*(_DWORD *)v11 != -1252936367) {
    return 2;
  }
  char v13 = (void *)v11[1];
  if (!v13) {
    return 2;
  }
  boringssl_session_update_metadata((uint64_t)v11);
  dispatch_data_t v14 = dispatch_data_create(a5, a6, 0, 0);
  id v15 = (void *)v13[13];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __boringssl_private_key_decrypt_callback_block_invoke;
  _OWORD v19[3] = &__block_descriptor_40_e45_v20__0__boringssl_concrete_boringssl_ctx_8B16l;
  void v19[4] = v12;
  unsigned int v16 = boringssl_identity_private_key_decrypt(v15, a2, a3, a4, v14, v13, v19);
  if (v16 > 2) {
    uint64_t v17 = 2;
  }
  else {
    uint64_t v17 = dword_1BA189B78[v16];
  }

  return v17;
}

uint64_t boringssl_private_key_complete(const SSL *a1, uint64_t a2, size_t *a3, uint64_t a4)
{
  uint64_t v7 = SSL_get_ex_data(a1, 0);
  if (v7
    && *(_DWORD *)v7 == -1252936367
    && (uint64_t v8 = v7[1]) != 0
    && (unsigned int v9 = boringssl_identity_private_key_complete(*(void **)(v8 + 104), a2, a3, a4), v9 <= 2))
  {
    return dword_1BA189B78[v9];
  }
  else
  {
    return 2;
  }
}

uint64_t __boringssl_session_apply_protocol_options_for_transport_block_invoke_12(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = xpc_array_get_value(v4, 0);
  uint64_t v6 = xpc_array_get_value(v4, 1uLL);
  uint64_t v35 = 0;
  int v36 = &v35;
  uint64_t v37 = 0x2020000000;
  size_t length = 0xAAAAAAAAAAAAAAAALL;
  size_t length = xpc_data_get_length(v5);
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  id v34 = (void *)0xAAAAAAAAAAAAAAAALL;
  id v34 = malloc_type_malloc(v36[3], 0x4AEB2D6CuLL);
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2020000000;
  size_t v30 = 0xAAAAAAAAAAAAAAAALL;
  size_t v30 = xpc_data_get_length(v6);
  uint64_t v23 = 0;
  BOOL v24 = &v23;
  uint64_t v25 = 0x2020000000;
  char v26 = (void *)0xAAAAAAAAAAAAAAAALL;
  char v26 = malloc_type_malloc(v28[3], 0x2378360AuLL);
  uint64_t v7 = (void *)v32[3];
  if (v7)
  {
    if (v24[3])
    {
      byteunsigned int s = xpc_data_get_bytes(v5, v7, 0, v36[3]);
      size_t v9 = xpc_data_get_bytes(v6, (void *)v24[3], 0, v28[3]);
      if (bytes == v36[3] && v9 == v28[3])
      {
        uint64_t v10 = (const void *)v32[3];
        id v11 = dispatch_workloop_copy_current();
        destructor[0] = MEMORY[0x1E4F143A8];
        destructor[1] = 3221225472;
        destructor[2] = __boringssl_session_apply_protocol_options_for_transport_block_invoke_2;
        destructor[3] = &unk_1E61F2B88;
        destructor[4] = &v35;
        void destructor[5] = &v31;
        dispatch_data_t v12 = dispatch_data_create(v10, bytes, v11, destructor);

        char v13 = (const void *)v24[3];
        size_t v14 = v28[3];
        id v15 = dispatch_workloop_copy_current();
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        _OWORD v21[2] = __boringssl_session_apply_protocol_options_for_transport_block_invoke_14;
        _OWORD v21[3] = &unk_1E61F2B88;
        v21[4] = &v27;
        void v21[5] = &v23;
        dispatch_data_t v16 = dispatch_data_create(v13, v14, v15, v21);

        uint64_t v17 = boringssl_psk_create(v12, v16);
        boringssl_psk_cache_add_psk(*(void **)(*(void *)(a1 + 32) + 40), v17);

        goto LABEL_12;
      }
      cc_clear();
      unsigned int v18 = (void *)v32[3];
      if (v18)
      {
        free(v18);
        v32[3] = 0;
      }
      cc_clear();
    }
    else
    {
      free((void *)v32[3]);
      v32[3] = 0;
    }
  }
  uint64_t v19 = (void *)v24[3];
  if (v19)
  {
    free(v19);
    v24[3] = 0;
  }
LABEL_12:
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);

  return 1;
}

void sub_1BA1216B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void __boringssl_session_apply_protocol_options_for_transport_block_invoke_2(uint64_t a1)
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    __boringssl_session_apply_protocol_options_for_transport_block_invoke_2_cold_1();
  }
  cc_clear();
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void __boringssl_session_apply_protocol_options_for_transport_block_invoke_14(uint64_t a1)
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    __boringssl_session_apply_protocol_options_for_transport_block_invoke_14_cold_1();
  }
  cc_clear();
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

const SSL *boringssl_session_psk_client13_ext_callback_handler(const SSL *result)
{
  if (result)
  {
    uint64_t result = (const SSL *)SSL_get_ex_data(result, 0);
    if (result)
    {
      if (result->version == -1252936367 && result->method) {
        return (const SSL *)(nw_protocol_options_access_handle() ^ 1);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

size_t boringssl_session_server_psk_callback_handler(const SSL *a1, const char *a2, uint64_t a3, unsigned int a4)
{
  if (a1)
  {
    uint64_t v7 = SSL_get_ex_data(a1, 0);
    if (v7)
    {
      if (*(_DWORD *)v7 == -1252936367)
      {
        uint64_t v8 = v7[1];
        if (v8)
        {
          nw_protocol_metadata_access_handle();
          if (a2 && *a2)
          {
            id WeakRetained = objc_loadWeakRetained((id *)(v8 + 16));
            if (!WeakRetained
              || (uint64_t v10 = WeakRetained,
                  id v11 = objc_loadWeakRetained((id *)(v8 + 16)),
                  char v12 = v11[475],
                  v11,
                  v10,
                  (v12 & 1) == 0))
            {
              id v13 = objc_loadWeakRetained((id *)(v8 + 16));
              if (v13)
              {
                size_t v14 = objc_loadWeakRetained((id *)(v8 + 16));
                BOOL v15 = (v14[475] & 1) == 0;
              }
              else
              {
                BOOL v15 = 1;
              }

              if (v15)
              {
                if (g_boringssl_log)
                {
                  uint64_t v28 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
                    boringssl_session_server_psk_callback_handler_cold_3(v8, v28);
                  }
                }
              }
            }
            size_t v29 = strlen(a2);
            dispatch_data_t v30 = dispatch_data_create(a2, v29, 0, 0);
            psuint64_t k = boringssl_psk_cache_lookup_psk(*(void **)(v8 + 40), v30, *(void **)(v8 + 520));

            if (!psk) {
              goto LABEL_34;
            }
          }
          else
          {
            id v18 = objc_loadWeakRetained((id *)(v8 + 16));
            if (!v18
              || (uint64_t v19 = v18,
                  id v20 = objc_loadWeakRetained((id *)(v8 + 16)),
                  char v21 = v20[475],
                  v20,
                  v19,
                  (v21 & 1) == 0))
            {
              id v22 = objc_loadWeakRetained((id *)(v8 + 16));
              if (v22)
              {
                uint64_t v23 = objc_loadWeakRetained((id *)(v8 + 16));
                BOOL v24 = (v23[475] & 1) == 0;
              }
              else
              {
                BOOL v24 = 1;
              }

              if (v24)
              {
                if (g_boringssl_log)
                {
                  uint64_t v25 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
                    boringssl_session_server_psk_callback_handler_cold_2(v8, v25);
                  }
                }
              }
            }
            psuint64_t k = boringssl_psk_cache_copy_first_psk(*(void **)(v8 + 40));
            if (!psk)
            {
LABEL_34:
              id v31 = objc_loadWeakRetained((id *)(v8 + 16));
              if (!v31
                || (uint64_t v32 = v31,
                    uint64_t v33 = objc_loadWeakRetained((id *)(v8 + 16)),
                    char v34 = v33[475],
                    v33,
                    v32,
                    (v34 & 1) == 0))
              {
                id v35 = objc_loadWeakRetained((id *)(v8 + 16));
                if (v35)
                {
                  int v36 = objc_loadWeakRetained((id *)(v8 + 16));
                  BOOL v37 = (v36[475] & 1) == 0;
                }
                else
                {
                  BOOL v37 = 1;
                }

                size_t size = 0;
                if (!v37 || !g_boringssl_log) {
                  goto LABEL_45;
                }
                id v38 = (id)g_boringssl_log;
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
                  boringssl_session_server_psk_callback_handler_cold_1(v8, v38);
                }
              }
              size_t size = 0;
LABEL_45:

              return size;
            }
          }
          uint64_t v27 = boringssl_psk_copy_key((id *)psk);
          size_t size = dispatch_data_get_size(v27);
          if (size)
          {
            *(unsigned char *)(v8 + 559) |= 0x80u;
            boringssl_helper_dispatch_data_copyout(v27, a3, a4);
          }

          goto LABEL_45;
        }
      }
    }
  }
  return 0;
}

size_t boringssl_session_client_psk_callback_handler(const SSL *a1, const char *a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  if (a1)
  {
    LODWORD(v6) = a6;
    id v11 = SSL_get_ex_data(a1, 0);
    if (v11)
    {
      if (*(_DWORD *)v11 == -1252936367)
      {
        uint64_t v12 = v11[1];
        if (v12)
        {
          nw_protocol_metadata_access_handle();
          id WeakRetained = objc_loadWeakRetained((id *)(v12 + 16));
          size_t v14 = WeakRetained;
          if (a2)
          {
            if (!WeakRetained
              || (BOOL v15 = objc_loadWeakRetained((id *)(v12 + 16)),
                  char v16 = v15[475],
                  v15,
                  v14,
                  (v16 & 1) == 0))
            {
              id v17 = objc_loadWeakRetained((id *)(v12 + 16));
              if (v17)
              {
                id v18 = objc_loadWeakRetained((id *)(v12 + 16));
                BOOL v19 = (v18[475] & 1) == 0;
              }
              else
              {
                BOOL v19 = 1;
              }

              if (v19)
              {
                if (g_boringssl_log)
                {
                  char v26 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
                    boringssl_session_client_psk_callback_handler_cold_3(v12, v26);
                  }
                }
              }
            }
            size_t v27 = strlen(a2);
            dispatch_data_t v28 = dispatch_data_create(a2, v27, 0, 0);
LABEL_30:
            dispatch_data_t v30 = (id *)boringssl_psk_cache_lookup_psk(*(void **)(v12 + 40), v28, *(void **)(v12 + 520));
            id v31 = v30;
            if (v30)
            {
              uint64_t v32 = boringssl_psk_copy_identity(v30);
              uint64_t v33 = v32;
              if (v32 && dispatch_data_get_size(v32)) {
                boringssl_helper_dispatch_data_copyout(v33, a3, a4);
              }
              char v34 = boringssl_psk_copy_key(v31);
              id v35 = v34;
              if (v34)
              {
                size_t size = dispatch_data_get_size(v34);
                uint64_t v37 = v6;
                if (size >= v6) {
                  size_t v6 = v6;
                }
                else {
                  size_t v6 = size;
                }
                boringssl_helper_dispatch_data_copyout(v35, a5, v37);
              }
              else
              {
                size_t v6 = 0;
              }
              *(unsigned char *)(v12 + 559) |= 0x80u;
            }
            else
            {
              id v38 = objc_loadWeakRetained((id *)(v12 + 16));
              if (v38)
              {
                __int16 v39 = v38;
                id v40 = objc_loadWeakRetained((id *)(v12 + 16));
                char v41 = v40[475];

                if (v41)
                {
                  size_t v6 = 0;
                  goto LABEL_46;
                }
              }
              id v42 = objc_loadWeakRetained((id *)(v12 + 16));
              if (v42)
              {
                unint64_t v43 = objc_loadWeakRetained((id *)(v12 + 16));
                BOOL v44 = (v43[475] & 1) == 0;
              }
              else
              {
                BOOL v44 = 1;
              }

              size_t v6 = 0;
              if (!v44 || !g_boringssl_log) {
                goto LABEL_46;
              }
              uint64_t v33 = (id)g_boringssl_log;
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
                boringssl_session_client_psk_callback_handler_cold_1(v12, v33);
              }
              size_t v6 = 0;
            }

LABEL_46:
            return v6;
          }
          if (!WeakRetained
            || (char v21 = objc_loadWeakRetained((id *)(v12 + 16)),
                char v22 = v21[475],
                v21,
                v14,
                (v22 & 1) == 0))
          {
            id v23 = objc_loadWeakRetained((id *)(v12 + 16));
            if (v23)
            {
              BOOL v24 = objc_loadWeakRetained((id *)(v12 + 16));
              BOOL v25 = (v24[475] & 1) == 0;
            }
            else
            {
              BOOL v25 = 1;
            }

            dispatch_data_t v28 = 0;
            if (!v25 || !g_boringssl_log) {
              goto LABEL_30;
            }
            size_t v29 = (id)g_boringssl_log;
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
              boringssl_session_client_psk_callback_handler_cold_2(v12, v29);
            }
          }
          dispatch_data_t v28 = 0;
          goto LABEL_30;
        }
      }
    }
  }
  return 0;
}

void __boringssl_context_start_handshake_timer_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  ++*(void *)(*(void *)(a1 + 32) + 328);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    if (*(_DWORD *)v2 == -1252936367)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3)
      {
        if ((*(unsigned char *)(v3 + 556) & 0x20) != 0)
        {
          uint64_t v4 = *(void *)(v3 + 400);
          if (!v4
            || (memset(v23, 170, 16), !DTLSv1_get_timeout(v4, (unint64_t *)v23))
            || *(void *)v23
            || *(_DWORD *)&v23[8]
            || (size_t v6 = *(bssl **)(v3 + 400)) != 0 && DTLSv1_handle_timeout(v6, v5) == 1)
          {
            boringssl_context_start_handshake_timer(v2);
          }
          else
          {
            id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
            if (!WeakRetained
              || (uint64_t v8 = WeakRetained,
                  size_t v9 = (unsigned __int8 *)objc_loadWeakRetained((id *)(v3 + 16)),
                  uint64_t v1 = (char *)v9[475],
                  v9,
                  v8,
                  (v1 & 1) == 0))
            {
              id v10 = objc_loadWeakRetained((id *)(v3 + 16));
              if (v10)
              {
                id v11 = objc_loadWeakRetained((id *)(v3 + 16));
                BOOL v12 = (v11[475] & 1) == 0;
              }
              else
              {
                BOOL v12 = 1;
              }

              if (v12)
              {
                if (g_boringssl_log)
                {
                  id v13 = (id)g_boringssl_log;
                  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
                  {
                    id v14 = objc_loadWeakRetained((id *)(v3 + 16));
                    if (v14)
                    {
                      uint64_t v1 = (char *)objc_loadWeakRetained((id *)(v3 + 16));
                      BOOL v15 = v1 + 391;
                    }
                    else
                    {
                      BOOL v15 = &unk_1BA179713;
                    }
                    id v16 = objc_loadWeakRetained((id *)(v3 + 16));
                    *(_DWORD *)id v23 = 136447234;
                    *(void *)&v23[4] = "boringssl_context_handle_handshake_timer";
                    *(_WORD *)&v23[12] = 1024;
                    *(_DWORD *)&v23[14] = 342;
                    __int16 v24 = 2082;
                    BOOL v25 = v15;
                    __int16 v26 = 2048;
                    id v27 = v16;
                    __int16 v28 = 1024;
                    int v29 = 10;
                    _os_log_impl(&dword_1BA0DE000, v13, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Handshake took more than %d seconds to complete, closing this session", v23, 0x2Cu);

                    if (v14) {
                  }
                    }
                }
              }
            }
            id v17 = objc_loadWeakRetained((id *)(v3 + 16));
            uint64_t v18 = v17[40];

            if (v18)
            {
              id v19 = objc_loadWeakRetained((id *)(v3 + 16));
              nw_queue_cancel_source();

              id v20 = objc_loadWeakRetained((id *)(v3 + 16));
              v20[40] = 0;
            }
            id v21 = objc_loadWeakRetained((id *)(v3 + 16));
            nw_protocol_boringssl_internal_error(v21, 60);

            id v22 = objc_loadWeakRetained((id *)(v3 + 16));
            nw_protocol_boringssl_disconnect((uint64_t)v22 + 8);
          }
        }
      }
    }
  }
}

void __boringssl_context_start_handshake_timer_block_invoke_2(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    goto LABEL_7;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
  if (WeakRetained)
  {
    uint64_t v5 = WeakRetained;
    size_t v6 = (unsigned __int8 *)objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    uint64_t v1 = (char *)v6[475];

    if (v1) {
      return;
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v7)
  {
LABEL_7:
    uint64_t v10 = 1;
    goto LABEL_10;
  }
  id v8 = objc_loadWeakRetained((id *)(v7 + 16));
  if (v8)
  {
    size_t v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    uint64_t v10 = (v9[475] & 1) == 0;
  }
  else
  {
    uint64_t v10 = 1;
  }

  if (v10)
  {
LABEL_10:
    if (!g_boringssl_log) {
      return;
    }
    id v11 = (id)g_boringssl_log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12)
    {
      uint64_t v10 = (uint64_t)objc_loadWeakRetained((id *)(v12 + 16));
      uint64_t v17 = *(void *)(a1 + 32);
      if (v10)
      {
        BOOL v13 = v17 != 0;
        if (v17)
        {
          uint64_t v1 = (char *)objc_loadWeakRetained((id *)(v17 + 16));
          uint64_t v17 = *(void *)(a1 + 32);
        }
        else
        {
          uint64_t v1 = 0;
        }
        id v16 = v1 + 391;
      }
      else
      {
        BOOL v13 = 0;
        id v16 = &unk_1BA179713;
      }
      if (v17)
      {
        id v14 = objc_loadWeakRetained((id *)(v17 + 16));
        char v15 = 0;
      }
      else
      {
        id v14 = 0;
        char v15 = 1;
      }
    }
    else
    {
      BOOL v13 = 0;
      id v14 = 0;
      char v15 = 1;
      id v16 = &unk_1BA179713;
    }
    int v18 = 136446978;
    id v19 = "boringssl_context_start_handshake_timer_block_invoke_2";
    __int16 v20 = 1024;
    int v21 = 374;
    __int16 v22 = 2082;
    id v23 = v16;
    __int16 v24 = 2048;
    id v25 = v14;
    _os_log_debug_impl(&dword_1BA0DE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] Cancelling TLS handshake timer", (uint8_t *)&v18, 0x26u);
    if (v15)
    {
      if (!v13) {
        goto LABEL_27;
      }
    }
    else
    {

      if (!v13)
      {
LABEL_27:
        if (!v12) {
          goto LABEL_12;
        }
        goto LABEL_31;
      }
    }

    if (!v12)
    {
LABEL_12:

      return;
    }
LABEL_31:

    goto LABEL_12;
  }
}

void __boringssl_private_key_sign_callback_block_invoke(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (!v6
      || *(_DWORD *)v6 != -1252936367
      || (uint64_t v7 = *(void *)(v6 + 8)) == 0
      || *(_DWORD *)(v7 + 300) <= 3u && (*(unsigned char *)(v7 + 556) & 2) == 0)
    {
      size_t v9 = v5;
      id WeakRetained = objc_loadWeakRetained(v5 + 2);
      nw_protocol_boringssl_handshake_negotiate(WeakRetained);

      uint64_t v5 = v9;
    }
  }
}

void __boringssl_private_key_decrypt_callback_block_invoke(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (!v6
      || *(_DWORD *)v6 != -1252936367
      || (uint64_t v7 = *(void *)(v6 + 8)) == 0
      || *(_DWORD *)(v7 + 300) <= 3u && (*(unsigned char *)(v7 + 556) & 2) == 0)
    {
      size_t v9 = v5;
      id WeakRetained = objc_loadWeakRetained(v5 + 2);
      nw_protocol_boringssl_handshake_negotiate(WeakRetained);

      uint64_t v5 = v9;
    }
  }
}

uint64_t __boringssl_session_psk_client13_ext_callback_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = *(id *)(a2 + 72);
  uint64_t v5 = v4;
  if (v4 && xpc_array_get_count(v4))
  {
    uint64_t v6 = xpc_array_get_array(v5, 0);
    uint64_t v7 = v6;
    if (!v6 || xpc_array_get_count(v6) != 2)
    {
      uint64_t v18 = 0;
LABEL_27:

      goto LABEL_28;
    }
    id v8 = xpc_array_get_value(v7, 0);
    unint64_t length = xpc_data_get_length(v8);
    uint64_t v10 = xpc_array_get_value(v7, 1uLL);
    size_t v11 = xpc_data_get_length(v10);
    id v12 = *(id *)(a2 + 48);
    BOOL v13 = v12;
    uint64_t v50 = v12;
    if (!v12)
    {
      uint64_t v17 = 0;
      goto LABEL_20;
    }
    if (!xpc_array_get_count(v12))
    {
      uint64_t v17 = 0;
      BOOL v13 = 0;
      goto LABEL_20;
    }
    BOOL v48 = v10;
    id v14 = xpc_array_get_value(v13, 0);
    uint64_t v15 = MEMORY[0x1BA9E61C0]();
    uint64_t v16 = MEMORY[0x1E4F145F0];
    if (v15 == MEMORY[0x1E4F145F0])
    {
      id v19 = v14;
    }
    else
    {
      if (MEMORY[0x1BA9E61C0](v14) != MEMORY[0x1E4F14568])
      {
        uint64_t v17 = 0;
        goto LABEL_18;
      }
      xpc_array_get_value(v14, 0);
      id v19 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v17 = v19;
    if (v19 && MEMORY[0x1BA9E61C0](v19) == v16)
    {
      BOOL v13 = (void *)xpc_string_get_length(v17);
      goto LABEL_19;
    }
LABEL_18:
    BOOL v13 = 0;
LABEL_19:
    uint64_t v10 = v48;

LABEL_20:
    uint64_t v18 = 0;
    if (!length || !v11) {
      goto LABEL_26;
    }
    if (length > **(unsigned int **)(a1 + 32)
      || v11 > **(unsigned int **)(a1 + 40)
      || (unint64_t)v13 > **(unsigned int **)(a1 + 48))
    {
      uint64_t v18 = 0;
LABEL_26:

      goto LABEL_27;
    }
    size_t v49 = v11;
    uint64_t v21 = *(void *)(a1 + 56);
    if (!v21) {
      goto LABEL_36;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v21 + 16));
    if (WeakRetained)
    {
      id v23 = WeakRetained;
      __int16 v24 = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 16));
      char v25 = v24[475];

      if (v25)
      {
LABEL_60:
        **(void **)(a1 + 64) = SSL_get_cipher_by_value(4865);
        **(_DWORD **)(a1 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = length;
        uint64_t v37 = *(void **)(a1 + 72);
        bytes_ptr = xpc_data_get_bytes_ptr(v8);
        memcpy(v37, bytes_ptr, length);
        **(_DWORD **)(a1 + 4std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0) = v49;
        __int16 v39 = *(void **)(a1 + 80);
        id v40 = xpc_data_get_bytes_ptr(v10);
        memcpy(v39, v40, v49);
        **(_DWORD **)(a1 + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v13;
        if (v13)
        {
          char v41 = *(void **)(a1 + 88);
          string_ptr = xpc_string_get_string_ptr(v17);
          memcpy(v41, string_ptr, (size_t)v13);
        }
        uint64_t v18 = 1;
        goto LABEL_26;
      }
    }
    uint64_t v26 = *(void *)(a1 + 56);
    if (v26)
    {
      id v27 = objc_loadWeakRetained((id *)(v26 + 16));
      if (v27)
      {
        __int16 v28 = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 16));
        BOOL v29 = (v28[475] & 1) == 0;
      }
      else
      {
        BOOL v29 = 1;
      }
    }
    else
    {
LABEL_36:
      BOOL v29 = 1;
    }
    if (v29 && g_boringssl_log)
    {
      uint64_t v30 = (id)g_boringssl_log;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = *(void *)(a1 + 56);
        uint64_t v47 = v31;
        if (v31)
        {
          uint64_t v32 = (char *)objc_loadWeakRetained((id *)(v31 + 16));
          uint64_t v33 = *(void *)(a1 + 56);
          BOOL v44 = v32;
          if (v32)
          {
            BOOL v46 = v33 != 0;
            if (v33)
            {
              uint64_t v32 = (char *)objc_loadWeakRetained((id *)(v33 + 16));
              uint64_t v33 = *(void *)(a1 + 56);
            }
            else
            {
              uint64_t v32 = 0;
            }
            id v35 = v32 + 391;
          }
          else
          {
            BOOL v46 = 0;
            id v35 = &unk_1BA179713;
          }
          unint64_t v43 = v32;
          if (v33)
          {
            id v34 = objc_loadWeakRetained((id *)(v33 + 16));
            char v45 = 0;
          }
          else
          {
            id v34 = 0;
            char v45 = 1;
          }
        }
        else
        {
          id v34 = 0;
          char v45 = 1;
          BOOL v46 = 0;
          id v35 = &unk_1BA179713;
        }
        *(_DWORD *)buf = 136446978;
        __int16 v52 = "boringssl_session_psk_client13_ext_callback_handler_block_invoke";
        __int16 v53 = 1024;
        int v54 = 1715;
        __int16 v55 = 2082;
        char v56 = v35;
        __int16 v57 = 2048;
        int v36 = v34;
        id v58 = v34;
        _os_log_impl(&dword_1BA0DE000, v30, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] Running TLS 1.3 external PSK client callback", buf, 0x26u);
        if ((v45 & 1) == 0) {

        }
        if (v46) {
        if (v47)
        }
      }
    }
    goto LABEL_60;
  }
  uint64_t v18 = 0;
LABEL_28:

  return v18;
}

BOOL __boringssl_session_server_psk_callback_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = boringssl_psk_cache_copy_psk_object_array(*(void **)(*(void *)(a1 + 32) + 40));
    id v4 = *(void **)(a2 + 96);
    *(void *)(a2 + 96) = v3;
  }
  return a2 != 0;
}

BOOL __boringssl_session_client_psk_callback_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = boringssl_psk_cache_copy_psk_object_array(*(void **)(*(void *)(a1 + 32) + 40));
    id v4 = *(void **)(a2 + 96);
    *(void *)(a2 + 96) = v3;
  }
  return a2 != 0;
}

id OUTLINED_FUNCTION_3()
{
  id v3 = (id *)(v0 + *v1);
  return objc_loadWeakRetained(v3);
}

void OUTLINED_FUNCTION_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void OUTLINED_FUNCTION_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x26u);
}

id OUTLINED_FUNCTION_7(uint64_t a1)
{
  id v3 = (id *)(a1 + *v1);
  return objc_loadWeakRetained(v3);
}

void OUTLINED_FUNCTION_14(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x30u);
}

id OUTLINED_FUNCTION_15()
{
  id v3 = (id *)(v0 + *v1);
  return objc_loadWeakRetained(v3);
}

id OUTLINED_FUNCTION_16(uint64_t a1)
{
  id v3 = (id *)(a1 + *v1);
  return objc_loadWeakRetained(v3);
}

id OUTLINED_FUNCTION_17()
{
  id v3 = (id *)(v0 + *v1);
  return objc_loadWeakRetained(v3);
}

void OUTLINED_FUNCTION_18(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x30u);
}

double KYBER_generate_key(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v6[2] = v4;
  _OWORD v6[3] = v4;
  v6[0] = v4;
  v6[1] = v4;
  RAND_bytes((unsigned __int8 *)v6, 64);
  *(void *)&double result = KYBER_generate_key_external_entropy(a1, a2, (uint64_t)v6).n128_u64[0];
  return result;
}

__n128 KYBER_generate_key_external_entropy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v28 = v5;
  long long v27 = v5;
  long long v26 = v5;
  long long v25 = v5;
  BORINGSSL_keccak((char *)&v25, 0x40uLL, (uint64_t *)a3, 0x20uLL, 1);
  long long v6 = v26;
  *(_OWORD *)(a2 + 1536) = v25;
  *(_OWORD *)(a2 + 1552) = v6;
  matrix_expand(a2 + 1600, &v25);
  uint64_t v7 = 0;
  __b[0] = v27;
  __b[1] = v28;
  uint64_t v8 = a2 + 6208;
  do
  {
    uint64_t v9 = v7 + 1;
    LOBYTE(__b[2]) = v7;
    scalar_centered_binomial_distribution_eta_2_with_prf(v8, (uint64_t *)__b);
    v8 += 512;
    uint64_t v7 = v9;
  }
  while (v9 != 3);
  vector_ntt(a2 + 6208);
  memset(__b, 170, sizeof(__b));
  uint64_t v10 = 0;
  long long v29 = v27;
  long long v30 = v28;
  int v11 = 3;
  do
  {
    int v12 = v11 + 1;
    LOBYTE(v31) = v11;
    scalar_centered_binomial_distribution_eta_2_with_prf((uint64_t)&__b[v10], (uint64_t *)&v29);
    v10 += 32;
    int v11 = v12;
  }
  while (v10 != 96);
  vector_ntt((uint64_t)__b);
  bzero((void *)a2, 0x600uLL);
  uint64_t v13 = 0;
  uint64_t v14 = a2;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v60 = v16;
      long long v59 = v16;
      long long v58 = v16;
      long long v57 = v16;
      long long v56 = v16;
      long long v55 = v16;
      long long v54 = v16;
      long long v53 = v16;
      long long v52 = v16;
      long long v51 = v16;
      long long v50 = v16;
      long long v49 = v16;
      long long v48 = v16;
      long long v47 = v16;
      long long v46 = v16;
      long long v45 = v16;
      long long v44 = v16;
      long long v43 = v16;
      long long v42 = v16;
      long long v41 = v16;
      long long v40 = v16;
      long long v39 = v16;
      long long v38 = v16;
      long long v37 = v16;
      long long v36 = v16;
      long long v35 = v16;
      long long v34 = v16;
      long long v33 = v16;
      long long v32 = v16;
      long long v31 = v16;
      long long v30 = v16;
      long long v29 = v16;
      scalar_mult((uint64_t)&v29, a2 + 1600 + 1536 * i + (v13 << 9), a2 + 6208 + (i << 9));
      for (uint64_t j = 0; j != 512; j += 2)
        *(_WORD *)(v14 + j) = reduce_once((unsigned __int16)(*(_WORD *)((char *)&v29 + j) + *(_WORD *)(v14 + j)));
    }
    ++v13;
    v14 += 512;
  }
  while (v13 != 3);
  uint64_t v18 = 0;
  for (uint64_t k = 0; k != 3; ++k)
  {
    for (uint64_t m = 0; m != 512; m += 2)
      *(_WORD *)(a2 + v18 * 16 + m) = reduce_once((unsigned __int16)(*(_WORD *)((char *)&__b[v18] + m)
                                                                   + *(_WORD *)(a2 + v18 * 16 + m)));
    v18 += 32;
  }
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v21;
  long long v30 = v21;
  long long v29 = v21;
  CBB_init_fixed((uint64_t)&v29, (uint64_t)a1, 1184);
  if (!kyber_marshal_public_key((uint64_t)&v29, a2)) {
    abort();
  }
  BORINGSSL_keccak((char *)(a2 + 1568), 0x20uLL, a1, 0x4A0uLL, 0);
  __n128 result = *(__n128 *)(a3 + 32);
  *(_OWORD *)(a2 + 776std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0) = *(_OWORD *)(a3 + 48);
  *(__n128 *)(a2 + 7744) = result;
  return result;
}

_DWORD *matrix_expand(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v4 = a2[1];
  v19[0] = *a2;
  v19[1] = v4;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      char v20 = v3;
      char v21 = i;
      unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v16[12] = v6;
      long long v17 = v6;
      v16[10] = v6;
      v16[11] = v6;
      v16[8] = v6;
      v16[9] = v6;
      v16[6] = v6;
      v16[7] = v6;
      v16[4] = v6;
      v16[5] = v6;
      _OWORD v16[2] = v6;
      _OWORD v16[3] = v6;
      v16[0] = v6;
      v16[1] = v6;
      BORINGSSL_keccak_init((uint64_t)v16, 2);
      BORINGSSL_keccak_absorb((uint64_t)v16, (uint64_t *)v19, 0x22uLL);
      if (v18) {
        matrix_expand_cold_2();
      }
      if ((void)v17 != 168) {
        matrix_expand_cold_1();
      }
      int v7 = 0;
      uint64_t v8 = a1 + 1536 * v3 + (i << 9);
      do
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __dst[8] = v9;
        __dst[9] = v9;
        void __dst[6] = v9;
        __dst[7] = v9;
        _OWORD __dst[4] = v9;
        _OWORD __dst[5] = v9;
        __dst[2] = v9;
        void __dst[3] = v9;
        __dst[0] = v9;
        __dst[1] = v9;
        __n128 result = BORINGSSL_keccak_squeeze(v16, (char *)__dst, 0xA8uLL);
        unint64_t v11 = 0;
        do
        {
          unsigned int v12 = *((unsigned __int8 *)__dst + v11 + 1);
          unsigned int v13 = *((unsigned __int8 *)__dst + v11) | ((v12 & 0xF) << 8);
          int v14 = *((unsigned __int8 *)__dst + v11 + 2);
          if (v13 <= 0xD00) {
            *(_WORD *)(v8 + 2 * v7++) = v13;
          }
          unsigned int v15 = (v12 >> 4) | (16 * v14);
          if (v15 <= 0xD00 && v7 <= 255) {
            *(_WORD *)(v8 + 2 * v7++) = v15;
          }
          if (v11 > 0xA4) {
            break;
          }
          v11 += 3;
        }
        while (v7 < 256);
      }
      while (v7 < 256);
    }
    ++v3;
  }
  while (v3 != 3);
  return result;
}

uint64_t vector_ntt(uint64_t result)
{
  uint64_t v16 = result;
  uint64_t v1 = 0;
  do
  {
    uint64_t v15 = v1;
    int v2 = 1;
    unsigned int v3 = 256;
    do
    {
      uint64_t v18 = v3 >> 1;
      unsigned int v17 = v2;
      if (v2 >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        uint64_t v6 = v3 & 0x1FE;
        uint64_t v7 = v16;
        uint64_t v8 = v2;
        do
        {
          uint64_t v9 = 0;
          int v10 = kNTTRoots[v4 + v8];
          uint64_t v11 = v6;
          uint64_t v12 = v7 + v6;
          do
          {
            __int16 v13 = reduce(*(unsigned __int16 *)(v12 + 2 * v9) * v10);
            __int16 v14 = *(_WORD *)(v7 + 2 * v9);
            *(_WORD *)(v7 + 2 * v9) = reduce_once((unsigned __int16)(v14 + v13));
            __n128 result = reduce_once((unsigned __int16)(v14 - v13 + 3329));
            *(_WORD *)(v12 + 2 * v9++) = result;
          }
          while (v5 + v9 < (unint64_t)(v5 + v18));
          uint64_t v6 = v11;
          v5 += v11;
          ++v4;
          v7 += 4 * v18;
          uint64_t v8 = v17;
        }
        while (v4 != v17);
      }
      int v2 = 2 * v17;
      unsigned int v3 = v18;
    }
    while ((int)(2 * v17) < 128);
    uint64_t v1 = v15 + 1;
    v16 += 512;
  }
  while (v15 != 2);
  return result;
}

uint64_t kyber_marshal_public_key(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CBB_add_space(a1, &v7, 1152);
  if (result)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (unsigned char *)v7;
    do
    {
      scalar_encode(v6, a2 + v5, 12);
      v6 += 384;
      v5 += 512;
    }
    while (v5 != 1536);
    return CBB_add_bytes(a1, (const void *)(a2 + 1536), 0x20uLL) != 0;
  }
  return result;
}

_DWORD *KYBER_encap(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v6;
  v8[1] = v6;
  RAND_bytes((unsigned __int8 *)v8, 32);
  return KYBER_encap_external_entropy(a1, a2, a3, v8);
}

_DWORD *KYBER_encap_external_entropy(uint64_t *a1, char *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v6 = a4[1];
  v12[0] = *a4;
  v12[1] = v6;
  long long v7 = *(_OWORD *)(a3 + 1584);
  long long v12[2] = *(_OWORD *)(a3 + 1568);
  _OWORD v12[3] = v7;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v8;
  v11[1] = v8;
  v10[0] = v8;
  v10[1] = v8;
  BORINGSSL_keccak((char *)v10, 0x40uLL, (uint64_t *)v12, 0x40uLL, 1);
  encrypt_cpa();
  BORINGSSL_keccak((char *)v11, 0x20uLL, a1, 0x440uLL, 0);
  return BORINGSSL_keccak(a2, 0x20uLL, (uint64_t *)v10, 0x40uLL, 3);
}

unsigned char *encrypt_cpa()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  int v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  long long v45 = (unsigned char *)v0;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  long long v7 = __b;
  memset(__b, 170, sizeof(__b));
  uint64_t v8 = 0;
  long long v9 = v2[1];
  v85[0] = *v2;
  v85[1] = v9;
  do
  {
    uint64_t v10 = v8 + 1;
    LOBYTE(v85[2]) = v8;
    scalar_centered_binomial_distribution_eta_2_with_prf((uint64_t)v7, (uint64_t *)v85);
    v7 += 512;
    uint64_t v8 = v10;
  }
  while (v10 != 3);
  vector_ntt((uint64_t)__b);
  memset(v85, 170, sizeof(v85));
  uint64_t v11 = 0;
  long long v12 = v2[1];
  v81[0] = *v2;
  v81[1] = v12;
  int v13 = 3;
  do
  {
    int v14 = v13 + 1;
    char v82 = v13;
    scalar_centered_binomial_distribution_eta_2_with_prf((uint64_t)&v85[v11], (uint64_t *)v81);
    v11 += 32;
    int v13 = v14;
  }
  while (v11 != 96);
  long long v15 = v2[1];
  v83[0] = *v2;
  v83[1] = v15;
  char v84 = 6;
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[30] = v16;
  v47[31] = v16;
  v47[28] = v16;
  v47[29] = v16;
  v47[26] = v16;
  v47[27] = v16;
  v47[24] = v16;
  v47[25] = v16;
  v47[22] = v16;
  v47[23] = v16;
  v47[20] = v16;
  v47[21] = v16;
  v47[18] = v16;
  v47[19] = v16;
  v47[16] = v16;
  v47[17] = v16;
  v47[14] = v16;
  v47[15] = v16;
  v47[12] = v16;
  v47[13] = v16;
  v47[10] = v16;
  v47[11] = v16;
  v47[8] = v16;
  v47[9] = v16;
  v47[6] = v16;
  v47[7] = v16;
  v47[4] = v16;
  v47[5] = v16;
  v47[2] = v16;
  v47[3] = v16;
  v47[0] = v16;
  v47[1] = v16;
  scalar_centered_binomial_distribution_eta_2_with_prf((uint64_t)v47, (uint64_t *)v83);
  unsigned int v17 = v81;
  bzero(v81, 0x600uLL);
  for (uint64_t i = 0; i != 3; ++i)
  {
    for (uint64_t j = 0; j != 3; ++j)
    {
      *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v80 = v20;
      long long v79 = v20;
      long long v78 = v20;
      long long v77 = v20;
      long long v76 = v20;
      long long v75 = v20;
      long long v74 = v20;
      long long v73 = v20;
      long long v72 = v20;
      long long v71 = v20;
      long long v70 = v20;
      long long v69 = v20;
      long long v68 = v20;
      long long v67 = v20;
      long long v66 = v20;
      long long v65 = v20;
      long long v64 = v20;
      long long v63 = v20;
      long long v62 = v20;
      long long v61 = v20;
      long long v60 = v20;
      long long v59 = v20;
      long long v58 = v20;
      long long v57 = v20;
      long long v56 = v20;
      long long v55 = v20;
      long long v54 = v20;
      long long v53 = v20;
      long long v52 = v20;
      long long v51 = v20;
      long long v50 = v20;
      long long v49 = v20;
      scalar_mult((uint64_t)&v49, v6 + 1600 + 1536 * i + (j << 9), (uint64_t)&__b[512 * j]);
      for (uint64_t k = 0; k != 512; k += 2)
        *(_WORD *)((char *)v17 + k) = reduce_once((unsigned __int16)(*(_WORD *)((char *)&v49 + k)
                                                                   + *(_WORD *)((char *)v17 + k)));
    }
    v17 += 32;
  }
  for (uint64_t m = 0; m != 96; m += 32)
    scalar_inverse_ntt((uint64_t)&v81[m]);
  uint64_t v23 = 0;
  for (uint64_t n = 0; n != 3; ++n)
  {
    for (iuint64_t i = 0; ii != 512; ii += 2)
      *(_WORD *)((char *)&v81[v23] + ii) = reduce_once((unsigned __int16)(*(_WORD *)((char *)&v85[v23] + ii)
                                                                        + *(_WORD *)((char *)&v81[v23] + ii)));
    v23 += 32;
  }
  *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v80 = v26;
  long long v79 = v26;
  long long v78 = v26;
  long long v77 = v26;
  long long v76 = v26;
  long long v75 = v26;
  long long v74 = v26;
  long long v73 = v26;
  long long v72 = v26;
  long long v71 = v26;
  long long v70 = v26;
  long long v69 = v26;
  long long v68 = v26;
  long long v67 = v26;
  long long v66 = v26;
  long long v65 = v26;
  long long v64 = v26;
  long long v63 = v26;
  long long v62 = v26;
  long long v61 = v26;
  long long v60 = v26;
  long long v59 = v26;
  long long v58 = v26;
  long long v57 = v26;
  long long v56 = v26;
  long long v55 = v26;
  long long v54 = v26;
  long long v53 = v26;
  long long v52 = v26;
  long long v51 = v26;
  long long v50 = v26;
  long long v49 = v26;
  scalar_inner_product(&v49, v6, (uint64_t)__b);
  scalar_inverse_ntt((uint64_t)&v49);
  for (juint64_t j = 0; jj != 512; jj += 2)
    *(_WORD *)((char *)&v49 + jj) = reduce_once((unsigned __int16)(*(_WORD *)((char *)v47 + jj)
                                                                 + *(_WORD *)((char *)&v49 + jj)));
  unint64_t v28 = 0;
  *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46[30] = v29;
  v46[31] = v29;
  v46[28] = v29;
  v46[29] = v29;
  v46[26] = v29;
  v46[27] = v29;
  v46[24] = v29;
  v46[25] = v29;
  v46[22] = v29;
  v46[23] = v29;
  v46[20] = v29;
  v46[21] = v29;
  v46[18] = v29;
  v46[19] = v29;
  v46[16] = v29;
  v46[17] = v29;
  v46[14] = v29;
  v46[15] = v29;
  v46[12] = v29;
  v46[13] = v29;
  v46[10] = v29;
  v46[11] = v29;
  v46[8] = v29;
  v46[9] = v29;
  v46[6] = v29;
  v46[7] = v29;
  v46[4] = v29;
  v46[5] = v29;
  v46[2] = v29;
  v46[3] = v29;
  long long v30 = v46;
  v46[0] = v29;
  v46[1] = v29;
  do
  {
    uint64_t v31 = 0;
    unsigned __int8 v32 = *v4;
    do
    {
      *(_WORD *)((char *)v30 + v31) = v32 & 1;
      v32 >>= 1;
      v31 += 2;
    }
    while (v31 != 16);
    ++v4;
    ++v30;
    BOOL v33 = v28 >= 0xF8;
    v28 += 8;
  }
  while (!v33);
  uint64_t v34 = 0;
  uint16x8_t v35 = (uint16x8_t)vdupq_n_s16(0xD01u);
  v36.i64[0] = 0x100000001;
  v36.i64[1] = 0x100000001;
  do
  {
    uint16x8_t v37 = (uint16x8_t)v46[v34];
    int8x16_t v38 = (int8x16_t)vmull_high_u16(v37, v35);
    int8x16_t v39 = (int8x16_t)vmull_u16(*(uint16x4_t *)v37.i8, *(uint16x4_t *)v35.i8);
    v46[v34++] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v39, v36), (uint32x4_t)v39, 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v38, v36), (uint32x4_t)v38, 1uLL));
  }
  while (v34 != 32);
  for (kuint64_t k = 0; kk != 512; kk += 2)
    *(_WORD *)((char *)&v49 + kk) = reduce_once((unsigned __int16)(*(_WORD *)((char *)v46 + kk)
                                                                 + *(_WORD *)((char *)&v49 + kk)));
  for (muint64_t m = 0; mm != 96; mm += 32)
    scalar_compress((uint64_t)&v81[mm], 10);
  uint64_t v42 = 0;
  long long v43 = v45;
  do
  {
    scalar_encode(v43, (uint64_t)&v81[v42], 10);
    v43 += 320;
    v42 += 32;
  }
  while (v42 != 96);
  scalar_compress((uint64_t)&v49, 4);
  return scalar_encode(v45 + 960, (uint64_t)&v49, 4);
}

_DWORD *KYBER_decap(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v6;
  long long v40 = v6;
  v38[0] = v6;
  v38[1] = v6;
  memset(__b, 170, sizeof(__b));
  uint64_t v7 = 0;
  uint64_t v8 = a2;
  do
  {
    if (!scalar_decode((uint64_t)&__b[v7], v8, 10)) {
      break;
    }
    v8 += 320;
    BOOL v9 = v7 == 1024;
    v7 += 512;
  }
  while (!v9);
  uint64_t v10 = 0;
  uint64_t v11 = __b;
  uint16x8_t v12 = (uint16x8_t)vdupq_n_s16(0xD01u);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  do
  {
    for (uint64_t i = 0; i != 512; i += 16)
    {
      uint16x8_t v15 = *(uint16x8_t *)&v11[i];
      uint32x4_t v16 = vmull_u16(*(uint16x4_t *)v15.i8, *(uint16x4_t *)v12.i8);
      uint32x4_t v17 = vmull_high_u16(v15, v12);
      *(int16x8_t *)&v11[i] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v16, 9uLL), v13), v16, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v17, 9uLL), v13), v17, 0xAuLL));
    }
    ++v10;
    v11 += 512;
  }
  while (v10 != 3);
  vector_ntt((uint64_t)__b);
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v104 = v18;
  long long v103 = v18;
  long long v102 = v18;
  long long v100 = v18;
  long long v101 = v18;
  long long v98 = v18;
  long long v99 = v18;
  long long v96 = v18;
  long long v97 = v18;
  long long v94 = v18;
  long long v95 = v18;
  long long v92 = v18;
  long long v93 = v18;
  long long v90 = v18;
  long long v91 = v18;
  long long v88 = v18;
  long long v89 = v18;
  long long v86 = v18;
  long long v87 = v18;
  long long v84 = v18;
  long long v85 = v18;
  long long v82 = v18;
  long long v83 = v18;
  long long v80 = v18;
  long long v81 = v18;
  long long v78 = v18;
  long long v79 = v18;
  long long v76 = v18;
  long long v77 = v18;
  long long v74 = v18;
  long long v75 = v18;
  long long v73 = v18;
  scalar_decode((uint64_t)&v73, a2 + 960, 4);
  uint64_t v19 = 0;
  uint16x8_t v20 = (uint16x8_t)vdupq_n_s16(0xD01u);
  v21.i64[0] = 0x100000001;
  v21.i64[1] = 0x100000001;
  do
  {
    uint16x8_t v22 = *(uint16x8_t *)((char *)&v73 + v19);
    uint32x4_t v23 = vmull_u16(*(uint16x4_t *)v22.i8, *(uint16x4_t *)v20.i8);
    uint32x4_t v24 = vmull_high_u16(v22, v20);
    *(long long *)((char *)&v73 + v19) = (__int128)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v23, 3uLL), v21), v23, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v24, 3uLL), v21), v24, 4uLL));
    v19 += 16;
  }
  while (v19 != 512);
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v71 = v25;
  long long v72 = v25;
  long long v69 = v25;
  long long v70 = v25;
  long long v67 = v25;
  long long v68 = v25;
  long long v65 = v25;
  long long v66 = v25;
  long long v63 = v25;
  long long v64 = v25;
  long long v61 = v25;
  long long v62 = v25;
  long long v59 = v25;
  long long v60 = v25;
  long long v57 = v25;
  long long v58 = v25;
  long long v55 = v25;
  long long v56 = v25;
  long long v53 = v25;
  long long v54 = v25;
  long long v51 = v25;
  long long v52 = v25;
  long long v49 = v25;
  long long v50 = v25;
  long long v47 = v25;
  long long v48 = v25;
  long long v45 = v25;
  long long v46 = v25;
  long long v43 = v25;
  long long v44 = v25;
  long long v41 = v25;
  long long v42 = v25;
  scalar_inner_product(&v41, a3 + 6208, (uint64_t)__b);
  scalar_inverse_ntt((uint64_t)&v41);
  for (uint64_t j = 0; j != 512; j += 2)
    *(_WORD *)((char *)&v73 + j) = reduce_once((unsigned __int16)(*(_WORD *)((char *)&v73 + j)
                                                                - *(_WORD *)((char *)&v41 + j)
                                                                + 3329));
  scalar_compress((uint64_t)&v73, 1);
  for (uint64_t k = 0; k != 32; ++k)
  {
    uint8x8_t v28 = vshl_u8((uint8x8_t)vand_s8(vmovn_s16(*((int16x8_t *)&v73 + k)), (int8x8_t)0x101010101010101), (uint8x8_t)0x706050403020100);
    *((unsigned char *)v38 + k) = v28.i8[0] | v28.i8[4] | ((v28.i32[0] | v28.i32[1]) >> 16) | ((unsigned __int16)(v28.i16[0] | v28.i16[2] | ((v28.i32[0] | v28.i32[1]) >> 16)) >> 8);
  }
  long long v29 = *(_OWORD *)(a3 + 1584);
  long long v39 = *(_OWORD *)(a3 + 1568);
  long long v40 = v29;
  *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v75 = v30;
  long long v76 = v30;
  long long v73 = v30;
  long long v74 = v30;
  BORINGSSL_keccak((char *)&v73, 0x40uLL, (uint64_t *)v38, 0x40uLL, 1);
  memset(__b, 170, 0x440uLL);
  encrypt_cpa();
  int v31 = CRYPTO_memcmp((char *)a2, __b, 1088);
  uint64_t v32 = 0;
  *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v43 = v33;
  long long v44 = v33;
  long long v41 = v33;
  long long v42 = v33;
  unsigned int v34 = 255;
  if (v31) {
    unsigned int v34 = 0;
  }
  int8x16_t v35 = vdupq_n_s8(v34);
  int8x16_t v36 = vdupq_n_s8(~v34);
  do
  {
    *(long long *)((char *)&v41 + vbssl::Array<unsigned short>::~Array((uint64_t)this + 32) = (__int128)vorrq_s8(vandq_s8(v35, *(int8x16_t *)((char *)&v73 + v32)), vandq_s8(v36, *(int8x16_t *)(a3 + 7744 + v32)));
    v32 += 16;
  }
  while (v32 != 32);
  BORINGSSL_keccak((char *)&v43, 0x20uLL, (uint64_t *)a2, 0x440uLL, 0);
  return BORINGSSL_keccak(a1, 0x20uLL, (uint64_t *)&v41, 0x40uLL, 3);
}

uint64_t KYBER_parse_public_key(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a2;
  unint64_t v5 = a2[1];
  uint64_t result = kyber_parse_public_key_no_hash(a1, a2);
  if (result)
  {
    if (a2[1])
    {
      return 0;
    }
    else
    {
      BORINGSSL_keccak((char *)(a1 + 1568), 0x20uLL, v4, v5, 0);
      return 1;
    }
  }
  return result;
}

uint64_t kyber_parse_public_key_no_hash(uint64_t a1, uint64_t *a2)
{
  v10[0] = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  v10[1] = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CBS_get_bytes(a2, v10, 0x480uLL);
  if (result)
  {
    unint64_t v5 = v10[0];
    uint64_t result = scalar_decode(a1, v10[0], 12);
    if (result)
    {
      long long v6 = v5 + 384;
      uint64_t v7 = a1 + 512;
      unint64_t v8 = -1;
      while (v8 != 1)
      {
        BOOL v9 = scalar_decode(v7, v6, 12);
        ++v8;
        v6 += 384;
        v7 += 512;
        if (!v9)
        {
          if (v8 < 2) {
            return 0;
          }
          break;
        }
      }
      uint64_t result = CBS_copy_bytes((uint64_t)a2, (void *)(a1 + 1536), 0x20uLL);
      if (result)
      {
        matrix_expand(a1 + 1600, (_OWORD *)(a1 + 1536));
        return 1;
      }
    }
  }
  return result;
}

uint64_t scalar_centered_binomial_distribution_eta_2_with_prf(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[6] = v3;
  v10[7] = v3;
  _OWORD v10[4] = v3;
  v10[5] = v3;
  _OWORD v10[2] = v3;
  _OWORD v10[3] = v3;
  v10[0] = v3;
  v10[1] = v3;
  uint64_t v4 = (unsigned __int8 *)v10;
  BORINGSSL_keccak((char *)v10, 0x80uLL, a2, 0x21uLL, 3);
  unint64_t v5 = 0;
  do
  {
    unsigned int v6 = *v4++;
    uint64_t v7 = (_WORD *)(a1 + 2 * v5);
    *uint64_t v7 = reduce_once((unsigned __int16)((v6 & 1)
                                       + ((__int16)((_WORD)v6 << 12) >> 15)
                                       + ((__int16)((_WORD)v6 << 13) >> 15)
                                       + ((v6 >> 1) & 1)
                                       + 3329));
    uint64_t result = reduce_once((unsigned __int16)(((v6 >> 4) & 1)
                                          - (v6 >> 7)
                                          + ((v6 >> 5) & 1)
                                          + ((__int16)((_WORD)v6 << 9) >> 15)
                                          + 3329));
    v7[1] = result;
    BOOL v9 = v5 >= 0xFE;
    v5 += 2;
  }
  while (!v9);
  return result;
}

uint64_t reduce_once(unsigned int a1)
{
  if (a1 >> 1 >= 0xD01) {
    reduce_once_cold_1();
  }
  __int16 v1 = a1;
  if (a1 >= 0xD01) {
    __int16 v2 = 0;
  }
  else {
    __int16 v2 = a1;
  }
  if ((__int16)a1 <= 3329) {
    __int16 v1 = 3329;
  }
  return (unsigned __int16)((v1 - 3329) | v2);
}

uint64_t reduce(unsigned int a1)
{
  if (a1 >= 0x1524103) {
    reduce_cold_1();
  }
  unsigned int v2 = (unsigned __int16)(a1 - 3329 * ((5039 * (unint64_t)a1) >> 24));
  return reduce_once(v2);
}

uint64_t scalar_mult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = &kModRoots;
  do
  {
    int v8 = *(unsigned __int16 *)(a2 + v6);
    int v9 = *(unsigned __int16 *)(a3 + v6);
    int v10 = v9 * v8;
    int v11 = *(unsigned __int16 *)(a2 + v6 + 2);
    int v12 = *(unsigned __int16 *)(a3 + v6 + 2);
    int v13 = v11 * v9;
    int v14 = reduce(v12 * v11);
    int v15 = (unsigned __int16)*v7++;
    *(_WORD *)(a1 + v6) = reduce(v10 + v15 * v14);
    uint64_t result = reduce(v13 + v12 * v8);
    *(_WORD *)(a1 + v6 + 2) = result;
    v6 += 4;
  }
  while (v6 != 512);
  return result;
}

uint64_t scalar_inner_product(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  a1[30] = 0u;
  a1[31] = 0u;
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  do
  {
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[30] = v7;
    v10[31] = v7;
    v10[28] = v7;
    v10[29] = v7;
    v10[26] = v7;
    v10[27] = v7;
    v10[24] = v7;
    v10[25] = v7;
    v10[22] = v7;
    v10[23] = v7;
    v10[20] = v7;
    v10[21] = v7;
    v10[18] = v7;
    v10[19] = v7;
    v10[16] = v7;
    v10[17] = v7;
    v10[14] = v7;
    v10[15] = v7;
    v10[12] = v7;
    v10[13] = v7;
    v10[10] = v7;
    v10[11] = v7;
    _OWORD v10[8] = v7;
    _OWORD v10[9] = v7;
    v10[6] = v7;
    v10[7] = v7;
    _OWORD v10[4] = v7;
    v10[5] = v7;
    _OWORD v10[2] = v7;
    _OWORD v10[3] = v7;
    v10[0] = v7;
    v10[1] = v7;
    scalar_mult((uint64_t)v10, a2 + (v6 << 9), a3 + (v6 << 9));
    for (uint64_t i = 0; i != 512; i += 2)
    {
      uint64_t result = reduce_once((unsigned __int16)(*(_WORD *)((char *)v10 + i) + *(_WORD *)((char *)a1 + i)));
      *(_WORD *)((char *)a1 + i) = result;
    }
    ++v6;
  }
  while (v6 != 3);
  return result;
}

uint64_t scalar_inverse_ntt(uint64_t a1)
{
  int v2 = 2;
  LODWORD(v3) = 128;
  do
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v3 = v3 >> 1;
    uint64_t v6 = a1 + 2 * v2;
    int v13 = 2 * v2;
    uint64_t v14 = v2;
    int v15 = 2 * v2;
    do
    {
      int v7 = kInverseNTTRoots[v4 + v3];
      uint64_t v8 = v5;
      do
      {
        int v9 = *(unsigned __int16 *)(v6 + 2 * v8);
        int v10 = *(unsigned __int16 *)(a1 + 2 * v8);
        *(_WORD *)(a1 + 2 * vbssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = reduce_once((unsigned __int16)(v10 + v9));
        *(_WORD *)(v6 + 2 * v8++) = reduce((v10 - v9 + 3329) * v7);
      }
      while (v8 < v5 + v14);
      v5 += v13;
      ++v4;
    }
    while (v4 != v3);
    int v2 = v13;
  }
  while (v15 < 256);
  for (uint64_t i = 0; i != 512; i += 2)
  {
    uint64_t result = reduce(3303 * *(unsigned __int16 *)(a1 + i));
    *(_WORD *)(a1 + i) = result;
  }
  return result;
}

uint64_t scalar_compress(uint64_t result, char a2)
{
  for (uint64_t i = 0; i != 512; i += 2)
  {
    unsigned int v3 = *(unsigned __int16 *)(result + i) << a2;
    unint64_t v4 = (5039 * (unint64_t)v3) >> 24;
    unsigned int v5 = v3 - 3329 * v4;
    if (v5 >> 1 >= 0xD01) {
      scalar_compress_cold_1();
    }
    if (v5 > 0x680) {
      LOWORD(v4) = v4 + 1;
    }
    if (v5 >> 1 > 0x9C0) {
      LOWORD(v4) = v4 + 1;
    }
    *(_WORD *)(result + i) = v4 & ~(-1 << a2);
  }
  return result;
}

unsigned char *scalar_encode(unsigned char *result, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  int v4 = 0;
  int v5 = 0;
  do
  {
    if (a3 >= 1)
    {
      int v6 = 0;
      unsigned int v7 = *(unsigned __int16 *)(a2 + 2 * v3);
      do
      {
        int v8 = a3 - v6;
        int v9 = 8 - v4;
        if (a3 - v6 >= 8 - v4)
        {
          int v10 = (v7 & kMasks[7 - v4]) << v4;
          int v4 = 0;
          *result++ = v5 | v10;
          int v5 = 0;
        }
        else
        {
          v5 |= (v7 & kMasks[v8 - 1]) << v4;
          v4 += v8;
          int v9 = a3 - v6;
        }
        v6 += v9;
        LOBYTE(v7) = v7 >> v9;
      }
      while (v6 < a3);
    }
    ++v3;
  }
  while (v3 != 256);
  if (v4 > 0) {
    *uint64_t result = v5;
  }
  return result;
}

BOOL scalar_decode(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unint64_t v3 = 0;
  BOOL v4 = 0;
  int v5 = 0;
  unsigned int v6 = 0;
  while (a3 < 1)
  {
    LOWORD(vbssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
LABEL_12:
    *(_WORD *)(a1 + 2 * v3) = v8;
    BOOL v4 = v3++ > 0xFE;
    if (v3 == 256) {
      return v4;
    }
  }
  int v7 = 0;
  unsigned int v8 = 0;
  do
  {
    if (!v5)
    {
      unsigned int v9 = *a2++;
      unsigned int v6 = v9;
      int v5 = 8;
    }
    int v10 = a3 - v7;
    if (a3 - v7 >= v5) {
      int v10 = v5;
    }
    v8 |= (unsigned __int16)((kMasks[v10 - 1] & v6) << v7);
    v5 -= v10;
    unsigned int v6 = (v6 >> v10);
    v7 += v10;
  }
  while (v7 < a3);
  if (v8 <= 0xD00) {
    goto LABEL_12;
  }
  return v4;
}

uint64_t __nw_protocol_boringssl_write_bytes_block_invoke(uint64_t a1)
{
  return 1;
}

uint64_t nw_protocol_boringssl_internal_error(void *a1, int a2)
{
  unint64_t v3 = a1;
  BOOL v4 = v3;
  if (v3 && (*((unsigned char *)v3 + 390) & 4) == 0)
  {
    *((unsigned char *)v3 + 390) |= 4u;
    uint64_t v5 = v3[42];
    unsigned int v8 = v4;
    if (v5)
    {
      boringssl_context_set_internal_error(v5, a2);
      boringssl_metrics_log_connection_failure(v8[42]);
      boringssl_metrics_log_ech(v8[42]);
      BOOL v4 = v8;
    }
    uint64_t v6 = v4[7];
    if (v6 && (*((unsigned char *)v4 + 388) & 4) != 0) {
      (*(void (**)(void))(*(void *)(v6 + 24) + 56))();
    }
  }

  return MEMORY[0x1F41817F8]();
}

long long *nw_protocol_boringssl_identifier()
{
  if (nw_protocol_boringssl_identifier_onceToken != -1) {
    dispatch_once(&nw_protocol_boringssl_identifier_onceToken, &__block_literal_global_0);
  }
  return &g_boringssl_protocol_identifier;
}

uint64_t nw_protocol_boringssl_replace_input_handler(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = *(void *)(result + 40);
    if (!v3) {
      return 0;
    }
    if ((*(unsigned char *)(v3 + 475) & 1) == 0)
    {
      if (datapath_logging_enabled)
      {
        if (g_boringssl_log)
        {
          uint64_t v12 = result;
          uint64_t v14 = a2;
          uint64_t v11 = a3;
          BOOL v7 = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG);
          a2 = v14;
          BOOL v8 = v7;
          a3 = v11;
          uint64_t result = v12;
          if (v8)
          {
            nw_protocol_boringssl_replace_input_handler_cold_1();
            a3 = v11;
            uint64_t result = v12;
            a2 = v14;
          }
        }
      }
    }
    if (*(void *)(result + 48) == a2)
    {
      *(void *)(result + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a3;
      *(void *)(a3 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = result;
      uint64_t v4 = *(void *)(a3 + 24);
      if (v4 && (uint64_t v5 = *(unsigned int (**)(uint64_t))(v4 + 176)) != 0 && v5(a3)) {
        char v6 = *(unsigned char *)(v3 + 389) | 0x10;
      }
      else {
        char v6 = *(unsigned char *)(v3 + 389) & 0xEF;
      }
      *(unsigned char *)(v3 + 389) = v6;
      return 1;
    }
    else
    {
      if (*(unsigned char *)(v3 + 475)) {
        return 0;
      }
      uint64_t v9 = result;
      uint64_t v15 = a2;
      uint64_t result = g_boringssl_log;
      if (g_boringssl_log)
      {
        int v13 = g_boringssl_log;
        uint64_t result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
        if (result)
        {
          uint64_t v10 = *(void *)(v9 + 48);
          *(_DWORD *)buf = 136447490;
          uint32x4_t v17 = "nw_protocol_boringssl_replace_input_handler";
          __int16 v18 = 1024;
          int v19 = 1193;
          __int16 v20 = 2082;
          uint64_t v21 = v3 + 391;
          __int16 v22 = 2048;
          uint64_t v23 = v3;
          __int16 v24 = 2048;
          uint64_t v25 = v10;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_error_impl(&dword_1BA0DE000, v13, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] old input handler does not match (%p != %p)", buf, 0x3Au);
          return 0;
        }
      }
    }
  }
  return result;
}

void nw_protocol_boringssl_input_finished(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return;
  }
  if ((*(unsigned char *)(v2 + 475) & 1) == 0
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_input_finished_cold_2();
  }
  if (!*(void *)(a1 + 48))
  {
    if ((*(unsigned char *)(v2 + 475) & 1) == 0
      && datapath_logging_enabled
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_input_finished_cold_1();
    }
    return;
  }
  unsigned int state = boringssl_session_get_state(*(void *)(v2 + 336));
  session_state_descriptiouint64_t n = boringssl_helper_get_session_state_description(state);
  if ((*(unsigned char *)(v2 + 475) & 1) == 0)
  {
    if (g_boringssl_log)
    {
      uint64_t v10 = g_boringssl_log;
      uint64_t v11 = session_state_description;
      if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447490;
        int v13 = "nw_protocol_boringssl_input_finished";
        __int16 v14 = 1024;
        int v15 = 1996;
        __int16 v16 = 2082;
        uint64_t v17 = v2 + 391;
        __int16 v18 = 2048;
        uint64_t v19 = v2;
        __int16 v20 = 2080;
        uint64_t v21 = v11;
        __int16 v22 = 1024;
        unsigned int v23 = state;
        _os_log_debug_impl(&dword_1BA0DE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s(%d) %{public}s[%p] session state: %s [%d]", buf, 0x36u);
      }
    }
  }
  if (state < 2)
  {
    nw_protocol_boringssl_internal_error((void *)v2, -9816);
    uint64_t v8 = *(void *)(a1 + 48);
    if (!v8) {
      return;
    }
    uint64_t v9 = *(void *)(v8 + 24);
    if (!v9) {
      return;
    }
    BOOL v7 = *(void (**)(void))(v9 + 48);
    if (!v7) {
      return;
    }
LABEL_20:
    v7();
    return;
  }
  if ((*(unsigned char *)(v2 + 389) & 2) != 0)
  {
    *(unsigned char *)(v2 + 389) |= 1u;
    return;
  }
  *(unsigned char *)(v2 + 388) &= ~0x80u;
  nw_boringssl_read(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6)
    {
      BOOL v7 = *(void (**)(void))(v6 + 184);
      if (v7) {
        goto LABEL_20;
      }
    }
  }
}

uint64_t nw_protocol_boringssl_reset(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 475) & 1) == 0
      && datapath_logging_enabled
      && g_boringssl_log
      && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
    {
      nw_protocol_boringssl_reset_cold_4();
    }
    nw_protocol_boringssl_cleanup((void *)v2);
    uint64_t v3 = (void *)nw_parameters_copy_context();
    if (v3)
    {
      uint64_t v4 = boringssl_context_create_with_nw_context((void *)v2, v3);
      *(void *)(v2 + 336) = v4;
      if (v4)
      {
        uint64_t v5 = boringssl_bio_create(v2, (uint64_t)nw_protocol_boringssl_read_bytes, (uint64_t)nw_protocol_boringssl_write_bytes);
        *(void *)(v2 + 344) = v5;
        if (v5)
        {
          *(_OWORD *)(v2 + 28std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0) = 0u;
          *(_OWORD *)(v2 + 296) = 0u;
          uint64_t v6 = *(void **)(v2 + 368);
          *(void *)(v2 + 36bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;

          *(void *)(v2 + 376) = 0;
          *(unsigned char *)(v2 + 388) &= 0x1Au;
          *(unsigned char *)(v2 + 389) &= 0x18u;
          *(unsigned char *)(v2 + 390) &= 0xF8u;
          uint64_t v7 = *(void *)(a1 + 32);
          if (v7 && (uint64_t v8 = *(void *)(v7 + 24)) != 0 && (v9 = *(uint64_t (**)(void))(v8 + 256)) != 0) {
            uint64_t v2 = v9();
          }
          else {
            uint64_t v2 = 1;
          }
          goto LABEL_23;
        }
        if ((*(unsigned char *)(v2 + 475) & 1) == 0
          && g_boringssl_log
          && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
        {
          nw_protocol_boringssl_reset_cold_3();
        }
      }
      else if ((*(unsigned char *)(v2 + 475) & 1) == 0 {
             && g_boringssl_log
      }
             && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        nw_protocol_boringssl_reset_cold_2();
      }
    }
    else if ((*(unsigned char *)(v2 + 475) & 1) == 0 {
           && g_boringssl_log
    }
           && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
    {
      nw_protocol_boringssl_reset_cold_1();
    }
    uint64_t v2 = 0;
LABEL_23:
  }
  return v2;
}

uint64_t nw_protocol_boringssl_error(uint64_t result, uint64_t a2, uint64_t __errnum)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 40);
  if (!v4) {
    return result;
  }
  if ((*(unsigned char *)(v4 + 475) & 1) == 0
    && datapath_logging_enabled
    && g_boringssl_log
    && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG))
  {
    nw_protocol_boringssl_error_cold_1();
  }
  *(_DWORD *)(v4 + 384) = __errnum;
  long long v33 = 0u;
  memset(v34, 0, sizeof(v34));
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  long long v30 = 0u;
  strerror_r(__errnum, __strerrbuf, 0x64uLL);
  if (boringssl_session_get_state(*(void *)(v4 + 336)) < 2)
  {
    if ((*(unsigned char *)(v4 + 388) & 4) != 0)
    {
      if ((*(unsigned char *)(v4 + 389) & 0xC0) == 0x80) {
        goto LABEL_16;
      }
      if (*(unsigned char *)(v4 + 475)) {
        goto LABEL_16;
      }
      uint64_t v14 = g_boringssl_log;
      if (!g_boringssl_log || !os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_16;
      }
      int v17 = 136447490;
      __int16 v18 = "nw_protocol_boringssl_error";
      __int16 v19 = 1024;
      int v20 = 1971;
      __int16 v21 = 2082;
      uint64_t v22 = v4 + 391;
      __int16 v23 = 2048;
      uint64_t v24 = v4;
      __int16 v25 = 1024;
      int v26 = __errnum;
      __int16 v27 = 2080;
      uint64_t v28 = __strerrbuf;
      int v13 = "%{public}s(%d) %{public}s[%p] Lower protocol stack error during TLS handshake. [%d: %s]";
    }
    else
    {
      if (*(unsigned char *)(v4 + 475)) {
        goto LABEL_16;
      }
      uint64_t v14 = g_boringssl_log;
      if (!g_boringssl_log || !os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_16;
      }
      int v17 = 136447490;
      __int16 v18 = "nw_protocol_boringssl_error";
      __int16 v19 = 1024;
      int v20 = 1973;
      __int16 v21 = 2082;
      uint64_t v22 = v4 + 391;
      __int16 v23 = 2048;
      uint64_t v24 = v4;
      __int16 v25 = 1024;
      int v26 = __errnum;
      __int16 v27 = 2080;
      uint64_t v28 = __strerrbuf;
      int v13 = "%{public}s(%d) %{public}s[%p] Lower protocol stack error pre TLS handshake. [%d: %s]";
    }
    uint64_t v12 = v14;
    goto LABEL_29;
  }
  if ((*(unsigned char *)(v4 + 475) & 1) == 0)
  {
    if (g_boringssl_log)
    {
      uint64_t v11 = g_boringssl_log;
      if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = v11;
        int v17 = 136447490;
        __int16 v18 = "nw_protocol_boringssl_error";
        __int16 v19 = 1024;
        int v20 = 1968;
        __int16 v21 = 2082;
        uint64_t v22 = v4 + 391;
        __int16 v23 = 2048;
        uint64_t v24 = v4;
        __int16 v25 = 1024;
        int v26 = __errnum;
        __int16 v27 = 2080;
        uint64_t v28 = __strerrbuf;
        int v13 = "%{public}s(%d) %{public}s[%p] Lower protocol stack error post TLS handshake. [%d: %s]";
LABEL_29:
        _os_log_impl(&dword_1BA0DE000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v17, 0x36u);
      }
    }
  }
LABEL_16:
  uint64_t result = *(void *)(v3 + 48);
  if (result)
  {
    uint64_t v15 = *(void *)(result + 24);
    if (v15)
    {
      __int16 v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      if (v16) {
        return v16(result, a2, __errnum, v7, v8, v9, v10);
      }
    }
  }
  return result;
}

uint64_t nw_protocol_boringssl_get_error(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 384);
  }
  return result;
}

uint64_t nw_protocol_error_print()
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    nw_protocol_error_print_cold_1();
  }
  return 1;
}

uint64_t __nw_protocol_boringssl_write_frames_block_invoke(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = nw_frame_uses_external_data();
  uint64_t v5 = a1[4];
  uint64_t v6 = *(const void **)(v5 + 176);
  if (v6)
  {
    memcpy((void *)(a1[7] + *(unsigned int *)(*(void *)(a1[6] + 8) + 24)), v6, *(unsigned int *)(v5 + 184));
    *(_DWORD *)(*(void *)(a1[6] + 8) + 24) += *(_DWORD *)(a1[4] + 184);
    uint64_t v7 = a1[4];
    uint64_t v8 = *(void **)(v7 + 168);
    *(void *)(v7 + 16bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;

    *(void *)(a1[4] + 176) = 0;
    *(_DWORD *)(a1[4] + 184) = 0;
  }
  else if (v4)
  {
    long long __src = 0;
    uint64_t v9 = nw_frame_get_external_data();
    uint64_t v10 = v9;
    if (v9)
    {
      id v11 = nw_dispatch_data_create_subrange_map(v9, 0, 0, &__src);
      if (v11)
      {
        *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = *(_DWORD *)(*(void *)(a1[6] + 8) + 24);
      }
      else
      {
        uint64_t v12 = a1[4];
        if (!v12 || (*(unsigned char *)(v12 + 475) & 1) == 0)
        {
          int v13 = g_boringssl_log;
          if (g_boringssl_log)
          {
            if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
            {
              uint64_t v15 = a1[4];
              __int16 v16 = (void *)(v15 + 391);
              if (!v15) {
                __int16 v16 = &unk_1BA179713;
              }
              v18[0] = 136447746;
              *(void *)&v18[1] = "nw_protocol_boringssl_write_frames_block_invoke";
              __int16 v19 = 1024;
              int v20 = 1002;
              __int16 v21 = 2082;
              uint64_t v22 = v16;
              __int16 v23 = 2048;
              uint64_t v24 = v15;
              __int16 v25 = 2112;
              int v26 = v10;
              __int16 v27 = 1024;
              int v28 = 0;
              __int16 v29 = 1024;
              int v30 = 0;
              _os_log_error_impl(&dword_1BA0DE000, v13, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] Failed to flatten external data %@ (offset %u, unclaimed %u)", (uint8_t *)v18, 0x3Cu);
            }
          }
        }
      }
    }
  }
  else
  {
    v18[0] = 0;
    nw_frame_unclaimed_bytes();
    *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = *(_DWORD *)(*(void *)(a1[6] + 8) + 24);
  }
  if ((id)a1[5] != v3)
  {
    nw_frame_array_remove();
    nw_frame_finalize();
  }

  return 1;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t __nw_protocol_boringssl_remove_input_handler_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

uint64_t __nw_protocol_boringssl_remove_input_handler_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

uint64_t __nw_protocol_boringssl_remove_input_handler_block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

uint64_t __nw_protocol_boringssl_remove_input_handler_block_invoke_4(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

uint64_t __nw_protocol_boringssl_remove_input_handler_block_invoke_5(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

void __nw_protocol_boringssl_get_input_frames_block_invoke(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 32);
  if ((boringssl_session_get_state(*(void *)(*(void *)(a1 + 32) + 336)) & 0xFFFFFFFE) == 2)
  {
    uint64_t v2 = *v1;
    if ((!*v1 || (*(unsigned char *)(v2 + 475) & 1) == 0) && datapath_logging_enabled && g_boringssl_log)
    {
      if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_DEBUG)) {
        __nw_protocol_boringssl_get_input_frames_block_invoke_cold_1();
      }
      uint64_t v2 = *v1;
    }
    *(unsigned char *)(v2 + 388) &= ~0x80u;
    nw_boringssl_read(*v1 + 8);
  }
}

void __nw_protocol_boringssl_begin_connection_block_invoke(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  id v5 = a2;
  nw_protocol_boringssl_internal_error(v5, a4);
  nw_protocol_boringssl_disconnect((uint64_t)v5 + 8);
}

void __nw_protocol_boringssl_begin_connection_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (boringssl_session_in_early_data(*(void *)(*(void *)(a1 + 32) + 336))) {
    (*(void (**)(void))(*(void *)(v3[7] + 24) + 40))();
  }
}

uint64_t __nw_protocol_boringssl_cleanup_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t buffer = (void *)nw_frame_get_buffer();
  if (nw_frame_buffer_get_manager()) {
    nw_mem_buffer_free();
  }
  else {
    free(buffer);
  }
  nw_frame_reset();
  nw_frame_array_remove();

  return 1;
}

uint64_t __nw_protocol_boringssl_cleanup_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (nw_frame_uses_external_data())
  {
    nw_frame_set_external_data();
  }
  else
  {
    uint64_t buffer = (void *)nw_frame_get_buffer();
    free(buffer);
  }
  nw_frame_reset();
  nw_frame_array_remove();

  return 1;
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x26u);
}

void OUTLINED_FUNCTION_6_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void OUTLINED_FUNCTION_7_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x26u);
}

void OUTLINED_FUNCTION_9_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x2Cu);
}

void OUTLINED_FUNCTION_14_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x30u);
}

void OUTLINED_FUNCTION_15_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x2Cu);
}

void OUTLINED_FUNCTION_17_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x32u);
}

void OUTLINED_FUNCTION_19(uint64_t a1@<X8>)
{
  *(void *)(v1 - bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a1;
}

const EVP_MD *EVP_md5(void)
{
  return (const EVP_MD *)&EVP_md5_storage;
}

double EVP_md5_init()
{
  EVP_md5_storage = 0x1000000004;
  dword_1E9F3EB28 = 0;
  qword_1E9F3EB30 = (uint64_t)md5_init;
  qword_1E9F3EB38 = (uint64_t)digest_update_wrapper;
  qword_1E9F3EB40 = (uint64_t)digest_final_wrapper;
  *(void *)&double result = 0x40800000040;
  qword_1E9F3EB48 = 0x40800000040;
  return result;
}

const EVP_MD *EVP_sha1(void)
{
  return (const EVP_MD *)&EVP_sha1_storage;
}

double EVP_sha1_init()
{
  EVP_sha1_storage = 0x1400000040;
  dword_1E9F3EAE8 = 0;
  qword_1E9F3EAF0 = (uint64_t)sha1_init;
  qword_1E9F3EAF8 = (uint64_t)digest_update_wrapper;
  qword_1E9F3EB00 = (uint64_t)digest_final_wrapper;
  *(void *)&double result = 0x40800000040;
  qword_1E9F3EB08 = 0x40800000040;
  return result;
}

const EVP_MD *EVP_sha224(void)
{
  return (const EVP_MD *)&EVP_sha224_storage;
}

double EVP_sha224_init()
{
  EVP_sha224_storage = 0x1C000002A3;
  dword_1E9F3EB58 = 0;
  qword_1E9F3EB60 = (uint64_t)sha224_init;
  qword_1E9F3EB68 = (uint64_t)digest_update_wrapper;
  qword_1E9F3EB70 = (uint64_t)digest_final_wrapper;
  *(void *)&double result = 0x40800000040;
  qword_1E9F3EB78 = 0x40800000040;
  return result;
}

const EVP_MD *EVP_sha512(void)
{
  return (const EVP_MD *)&EVP_sha512_storage;
}

double EVP_sha512_init()
{
  EVP_sha512_storage = 0x40000002A2;
  dword_1EB268158 = 0;
  qword_1EB268160 = (uint64_t)sha512_init;
  qword_1EB268168 = (uint64_t)digest_update_wrapper;
  qword_1EB268170 = (uint64_t)digest_final_wrapper;
  *(void *)&double result = 0x40800000080;
  qword_1EB268178 = 0x40800000080;
  return result;
}

uint64_t *EVP_md5_sha1()
{
  return &EVP_md5_sha1_storage;
}

double EVP_md5_sha1_init()
{
  EVP_md5_sha1_storage = 0x2400000072;
  dword_1EB268188 = 0;
  qword_1EB268190 = (uint64_t)md5_sha1_init;
  qword_1EB268198 = (uint64_t)md5_sha1_update;
  qword_1EB2681A0 = (uint64_t)md5_sha1_final;
  *(void *)&double result = 0x81000000040;
  qword_1EB2681A8 = 0x81000000040;
  return result;
}

uint64_t md5_init(uint64_t a1)
{
  return digest_init(*(void *)(a1 + 8));
}

uint64_t sha1_init(uint64_t a1)
{
  return digest_init(*(void *)(a1 + 8));
}

uint64_t sha224_init(uint64_t a1)
{
  return digest_init(*(void *)(a1 + 8));
}

uint64_t sha512_init(uint64_t a1)
{
  return digest_init(*(void *)(a1 + 8));
}

uint64_t md5_sha1_init(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  digest_init(v1);

  return digest_init(v1 + 1032);
}

uint64_t md5_sha1_update(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  digest_update(v1);

  return digest_update(v1 + 1032);
}

uint64_t md5_sha1_final(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  digest_final(v1);

  return digest_final(v1 + 1032);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<bssl::SSL_CONFIG,bssl::internal::Deleter>::reset[abi:ne180100]((BUF_MEM ***)&this->method, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t CRYPTO_BUFFER_new(const void *a1, unint64_t a2, void **a3)
{
  return crypto_buffer_new(a1, a2, 0, a3);
}

uint64_t CRYPTO_BUFFER_init_CBS(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  return result;
}

uint64_t lh_CRYPTO_BUFFER_call_hash_func(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t lh_CRYPTO_BUFFER_call_cmp_func(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t bssl::ssl_get_credential_list(void *a1, void **a2)
{
  uint64_t v4 = a1[1];
  if (*(unsigned char *)(*a1 + 180))
  {
    if (*(void *)(v4 + 176) == 1 && **(unsigned char **)(v4 + 168) == 2 && *(void *)(v4 + 184))
    {
      uint64_t result = bssl::Array<ssl_credential_st *>::Init((uint64_t)a2, 1uLL);
      if (!result) {
        return result;
      }
      uint64_t v6 = *(void *)(a1[1] + 184);
      goto LABEL_12;
    }
  }
  else if (*(void *)(v4 + 200) == 1 && **(unsigned char **)(v4 + 192) == 2 && *(void *)(v4 + 208))
  {
    uint64_t result = bssl::Array<ssl_credential_st *>::Init((uint64_t)a2, 1uLL);
    if (!result) {
      return result;
    }
    uint64_t v6 = *(void *)(a1[1] + 208);
LABEL_12:
    **a2 = v6;
    return 1;
  }
  uint64_t v7 = *(uint64_t **)(v4 + 32);
  uint64_t result = (*(uint64_t (**)(void *))(v7[4] + 112))(a1);
  if (result)
  {
    uint64_t v8 = *v7;
    unsigned int v9 = ssl_credential_st::IsComplete((ssl_credential_st *)v7[3]);
    char v10 = v9;
    uint64_t result = bssl::Array<ssl_credential_st *>::Init((uint64_t)a2, v8 + v9);
    if (result)
    {
      uint64_t v11 = *v7;
      if (*v7)
      {
        uint64_t v12 = 0;
        do
        {
          (*a2)[v12] = *(void *)(v7[1] + 8 * v12);
          ++v12;
        }
        while (v11 != v12);
      }
      if (v10) {
        (*a2)[v8] = v7[3];
      }
      return 1;
    }
  }
  return result;
}

uint64_t bssl::Array<ssl_credential_st *>::Init(uint64_t a1, unint64_t a2)
{
  OPENSSL_free(*(void **)a1);
  *(void *)a1 = 0;
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
  if (!a2) {
    return 1;
  }
  if (a2 >> 61)
  {
    ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/internal.h", 297);
    return 0;
  }
  uint64_t result = (uint64_t)OPENSSL_malloc(8 * a2);
  *(void *)a1 = result;
  if (result)
  {
    *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a2;
    return 1;
  }
  return result;
}

void *ssl_credential_st::IsComplete(ssl_credential_st *this)
{
  if (*((_DWORD *)this + 1) == 2) {
    return (void *)(*((void *)this + 1)
  }
                 && (*((void *)this + 2) || *((void *)this + 3))
                 && (*((_DWORD *)this + 1) != 1 || *((void *)this + 7)));
  uint64_t result = (void *)EVP_MD_CTX_md(*((const EVP_MD_CTX **)this + 6));
  if (result)
  {
    uint64_t result = OPENSSL_sk_value(*((unint64_t **)this + 6), 0);
    if (result) {
      return (void *)(*((void *)this + 1)
    }
                   && (*((void *)this + 2) || *((void *)this + 3))
                   && (*((_DWORD *)this + 1) != 1 || *((void *)this + 7)));
  }
  return result;
}

void __clang_call_terminate(void *a1)
{
}

uint64_t buffer_up_ref(uint64_t a1)
{
  return a1;
}

void ssl_credential_st::ClearCertAndKey(ssl_credential_st *this)
{
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)this + 1, 0);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)this + 2, 0);
  *((void *)this + 3) = 0;

  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)this + 6, 0);
}

BOOL ssl_credential_st::UsesX509(ssl_credential_st *this)
{
  return *((_DWORD *)this + 1) != 2;
}

uint64_t ssl_credential_st::SetLeafCert(uint64_t a1, uint64_t *a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 4);
  if (v3 == 2)
  {
    ERR_put_error(16, 0, 66, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_credential.cc", 188);
    return 0;
  }
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  CRYPTO_BUFFER_init_CBS(*a2, &v23);
  pkey = (EVP_PKEY *)0xAAAAAAAAAAAAAAAALL;
  bssl::ssl_cert_parse_pubkey(&v23, &pkey);
  if (!pkey) {
    return 0;
  }
  uint64_t v7 = (bssl *)EVP_PKEY_id((uint64_t)pkey);
  if (!bssl::ssl_is_key_type_supported(v7))
  {
    int v18 = 202;
LABEL_19:
    ERR_put_error(16, 0, 228, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_credential.cc", v18);
    uint64_t v17 = 0;
    goto LABEL_20;
  }
  if (EVP_PKEY_id((uint64_t)pkey) == 408 && (bssl::ssl_cert_check_key_usage(&v23, 0) & 1) == 0)
  {
    int v18 = 210;
    goto LABEL_19;
  }
  if (v3 == 1
    || (unsigned int v9 = *(const evp_pkey_st **)(a1 + 16)) == 0
    || (bssl::ssl_compare_public_and_private_key(pkey, v9, v8) & 1) != 0)
  {
LABEL_12:
    uint64_t v11 = (unint64_t **)(a1 + 48);
    char v10 = *(unint64_t **)(a1 + 48);
    if (v10
      || (bssl::new_leafless_chain(&v21),
          uint64_t v12 = v21,
          __int16 v21 = 0,
          std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)(a1 + 48), v12), std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](&v21, 0), (char v10 = *v11) != 0))
    {
      int v13 = OPENSSL_sk_value(v10, 0);
      CRYPTO_BUFFER_free((unsigned int *)v13);
      uint64_t v14 = *v11;
      uint64_t v15 = *a2;
      *a2 = 0;
      OPENSSL_sk_set(v14, 0, v15);
      if (v3 != 1)
      {
        __int16 v16 = pkey;
        pkey = 0;
        std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)(a1 + 8), v16);
      }
      uint64_t v17 = 1;
      goto LABEL_20;
    }
    goto LABEL_24;
  }
  if (a3)
  {
    ERR_clear_error();
    std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)(a1 + 16), 0);
    goto LABEL_12;
  }
LABEL_24:
  uint64_t v17 = 0;
LABEL_20:
  __int16 v19 = pkey;
  pkey = 0;
  if (v19) {
    EVP_PKEY_free(v19);
  }
  return v17;
}

void sub_1BA126524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)va, 0);
  _Unwind_Resume(a1);
}

void bssl::new_leafless_chain(unint64_t **a1@<X8>)
{
  int v3 = OPENSSL_sk_new_null();
  uint64_t v5 = v3;
  if (v3 && OPENSSL_sk_push(v3, 0))
  {
    uint64_t v4 = v5;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a1 = v4;
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](&v5, 0);
}

void sub_1BA1265A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)va, 0);
  _Unwind_Resume(a1);
}

const EVP_MD_CTX *ssl_credential_st::ClearIntermediateCerts(ssl_credential_st *this)
{
  uint64_t result = (const EVP_MD_CTX *)*((void *)this + 6);
  if (result)
  {
    uint64_t result = (const EVP_MD_CTX *)EVP_MD_CTX_md(result);
    if ((unint64_t)result >= 2)
    {
      do
      {
        int v3 = (unsigned int *)OPENSSL_sk_pop(*((uint64_t **)this + 6));
        CRYPTO_BUFFER_free(v3);
        uint64_t result = (const EVP_MD_CTX *)EVP_MD_CTX_md(*((const EVP_MD_CTX **)this + 6));
      }
      while ((unint64_t)result > 1);
    }
  }
  return result;
}

unint64_t *ssl_credential_st::AppendIntermediateCert(uint64_t a1, unsigned int **a2)
{
  if (*(_DWORD *)(a1 + 4) == 2)
  {
    ERR_put_error(16, 0, 66, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_credential.cc", 250);
    return 0;
  }
  uint64_t v4 = (unint64_t **)(a1 + 48);
  uint64_t result = *(unint64_t **)(a1 + 48);
  if (result
    || (bssl::new_leafless_chain(&v7),
        uint64_t v5 = v7,
        uint64_t v7 = 0,
        std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](v4, v5),
        std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](&v7, 0),
        (uint64_t result = *v4) != 0))
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    if (!OPENSSL_sk_push(result, (uint64_t)v6))
    {
      if (v6) {
        CRYPTO_BUFFER_free(v6);
      }
      return 0;
    }
    return (unint64_t *)1;
  }
  return result;
}

void sub_1BA1266D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
}

void *SSL_CREDENTIAL_new_raw_public_key()
{
  unsigned int v1 = 2;
  return bssl::New<ssl_credential_st,bssl::SSLCredentialType>(&v1);
}

void SSL_CREDENTIAL_free(ssl_credential_st *a1)
{
  if (a1) {
    bssl::RefCounted<ssl_credential_st>::DecRefInternal(a1);
  }
}

uint64_t SSL_CREDENTIAL_set1_private_key(uint64_t a1, evp_pkey_st *a2, const evp_pkey_st *a3)
{
  uint64_t v5 = *(const EVP_PKEY **)(a1 + 8);
  if (!v5 || (uint64_t result = bssl::ssl_compare_public_and_private_key(v5, a2, a3), result))
  {
    if (a2) {
      EVP_PKEY_up_ref((unsigned int *)a2);
    }
    std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)(a1 + 16), a2);
    *(void *)(a1 + 24) = 0;
    return 1;
  }
  return result;
}

uint64_t SSL_CREDENTIAL_set_private_key_method(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  return 1;
}

BOOL SSL_CREDENTIAL_set1_cert_chain(ssl_credential_st *a1, uint64_t *a2, unint64_t a3)
{
  if (!a3 || *((_DWORD *)a1 + 1) == 2)
  {
    ERR_put_error(16, 0, 66, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_credential.cc", 320);
    return 0;
  }
  uint64_t v6 = (unsigned int *)*a2;
  if (*a2) {
    CRYPTO_BUFFER_up_ref(*a2);
  }
  uint64_t v15 = v6;
  char v7 = ssl_credential_st::SetLeafCert((uint64_t)a1, (uint64_t *)&v15, 0);
  if (v15) {
    CRYPTO_BUFFER_free(v15);
  }
  if ((v7 & 1) == 0) {
    return 0;
  }
  ssl_credential_st::ClearIntermediateCerts(a1);
  if (a3 >= 2)
  {
    BOOL v8 = 0;
    uint64_t v10 = 1;
    do
    {
      uint64_t v11 = (unsigned int *)a2[v10];
      if (v11) {
        CRYPTO_BUFFER_up_ref(a2[v10]);
      }
      uint64_t v14 = v11;
      appendeunsigned int d = ssl_credential_st::AppendIntermediateCert((uint64_t)a1, &v14);
      int v13 = v14;
      uint64_t v14 = 0;
      if (v13) {
        CRYPTO_BUFFER_free(v13);
      }
      if ((appended & 1) == 0) {
        break;
      }
      BOOL v8 = ++v10 >= a3;
    }
    while (a3 != v10);
  }
  else
  {
    return 1;
  }
  return v8;
}

void sub_1BA1268D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t SSL_CREDENTIAL_set1_raw_public_key(uint64_t a1, EVP_PKEY *this, const evp_pkey_st *a3)
{
  if (*(_DWORD *)(a1 + 4) != 2)
  {
    int v9 = 66;
    int v10 = 395;
LABEL_8:
    ERR_put_error(16, 0, v9, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_credential.cc", v10);
    return 0;
  }
  if (!this)
  {
    int v9 = 137;
    int v10 = 400;
    goto LABEL_8;
  }
  uint64_t v5 = *(const evp_pkey_st **)(a1 + 16);
  if (!v5 || (uint64_t result = bssl::ssl_compare_public_and_private_key(this, v5, a3), result))
  {
    EVP_PKEY_up_ref((unsigned int *)this);
    std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)(a1 + 8), this);
    BOOL v8 = *(void **)(a1 + 32);
    char v7 = (void *)(a1 + 32);
    OPENSSL_free(v8);
    *char v7 = 0;
    v7[1] = 0;
    OPENSSL_free(0);
    return 1;
  }
  return result;
}

void sub_1BA1269C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SSL_CREDENTIAL_set1_ocsp_response(uint64_t a1, unsigned int *a2)
{
  if (*(_DWORD *)(a1 + 4) == 2)
  {
    ERR_put_error(16, 0, 66, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_credential.cc", 418);
    return 0;
  }
  else
  {
    if (a2) {
      CRYPTO_BUFFER_up_ref((uint64_t)a2);
    }
    std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(a1 + 80), a2);
    return 1;
  }
}

uint64_t SSL_CREDENTIAL_set1_signed_cert_timestamp_list(uint64_t a1, unsigned int *a2)
{
  if (*(_DWORD *)(a1 + 4) == 2)
  {
    int v2 = 66;
    int v3 = 429;
LABEL_8:
    ERR_put_error(16, 0, v2, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_credential.cc", v3);
    return 0;
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  CRYPTO_BUFFER_init_CBS((uint64_t)a2, &v7);
  if ((bssl::ssl_is_sct_list_valid(&v7) & 1) == 0)
  {
    int v2 = 269;
    int v3 = 436;
    goto LABEL_8;
  }
  if (a2) {
    CRYPTO_BUFFER_up_ref((uint64_t)a2);
  }
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)(a1 + 72), a2);
  return 1;
}

uint64_t bssl::GrowableArray<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::Push(unint64_t *a1, ssl_credential_st **a2)
{
  uint64_t v4 = bssl::GrowableArray<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::MaybeGrow(a1);
  if (v4)
  {
    uint64_t v5 = (ssl_credential_st **)(a1[1] + 8 * *a1);
    uint64_t v6 = *a2;
    *a2 = 0;
    std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100](v5, v6);
    ++*a1;
  }
  return v4;
}

uint64_t sk_CRYPTO_BUFFER_call_free_func(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t bssl::GrowableArray<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::MaybeGrow(unint64_t *a1)
{
  uint64_t v1 = (uint64_t)(a1 + 1);
  unint64_t v2 = a1[2];
  if (v2)
  {
    if (*a1 < v2) {
      return 1;
    }
    if ((v2 & 0x8000000000000000) != 0)
    {
      ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/internal.h", 412);
      return 0;
    }
    else
    {
      unint64_t v13 = 0;
      unint64_t v14 = 0;
      uint64_t v4 = bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::Init((uint64_t *)&v13, 2 * v2);
      if (v4)
      {
        if (a1[2])
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          do
          {
            unint64_t v9 = a1[1];
            int v10 = (ssl_credential_st **)(v13 + v7);
            uint64_t v11 = *(ssl_credential_st **)(v9 + 8 * v8);
            *(void *)(v9 + 8 * vbssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
            std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100](v10, v11);
            ++v8;
            v7 += 8;
          }
          while (v8 < a1[2]);
        }
        bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::Reset(v1, 0, 0);
        unint64_t v12 = v14;
        a1[1] = v13;
        a1[2] = v12;
        unint64_t v13 = 0;
        unint64_t v14 = 0;
      }
      bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)&v13);
    }
    return v4;
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 1);
    return bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::Init(v5, 0x10uLL);
  }
}

void sub_1BA126C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::Init(uint64_t *a1, unint64_t a2)
{
  bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::Reset((uint64_t)a1, 0, 0);
  if (!a2) {
    return 1;
  }
  if (a2 >> 61)
  {
    ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/internal.h", 297);
    return 0;
  }
  uint64_t result = (uint64_t)OPENSSL_malloc(8 * a2);
  *a1 = result;
  if (result)
  {
    a1[1] = a2;
    bzero((void *)result, 8 * a2);
    return 1;
  }
  return result;
}

void bssl::hm_fragment::~hm_fragment(bssl::hm_fragment *this)
{
}

uint64_t bssl::dtls1_open_handshake(uint64_t a1, unint64_t *a2, char *a3, unsigned __int8 *a4, unint64_t a5)
{
  char v37 = -86;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t result = bssl::dtls_open_record((bssl *)a1, &v37, (uint64_t)&v35, a2, a3, a4, a5);
  if (result) {
    return result;
  }
  if (v37 == 20)
  {
    if (**(void **)(*(void *)(a1 + 48) + 264))
    {
      int v29 = 318;
      goto LABEL_57;
    }
    if (v36 != 1 || *v35 != 1)
    {
      int v27 = 103;
      int v28 = 324;
      goto LABEL_64;
    }
    **(unsigned char **)(a1 + 56) |= 1u;
    bssl::ssl_do_msg_callback(a1, 0, 20, (uint64_t)v35, v36);
    return 0;
  }
  if (v37 != 22)
  {
    if (v37 == 23)
    {
      if (**(void **)(*(void *)(a1 + 48) + 264)) {
        return 1;
      }
      int v29 = 305;
    }
    else
    {
      int v29 = 340;
    }
LABEL_57:
    ERR_put_error(16, 0, 225, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", v29);
    char v26 = 10;
    goto LABEL_65;
  }
  long long v33 = v35;
  uint64_t v34 = v36;
  if (!v36) {
    return 0;
  }
  while (1)
  {
    memset(v32, 170, 20);
    long long __src = (void *)0xAAAAAAAAAAAAAAAALL;
    size_t __n = 0xAAAAAAAAAAAAAAAALL;
    if ((bssl::dtls1_parse_fragment((uint64_t *)&v33, (uint64_t)v32, &__src) & 1) == 0)
    {
      ERR_put_error(16, 0, 109, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", 352);
      char v26 = 50;
      goto LABEL_65;
    }
    unint64_t v9 = HIDWORD(v32[1]);
    unint64_t v10 = HIDWORD(v32[0]);
    if (HIDWORD(v32[1]) > HIDWORD(v32[0])
      || (unint64_t v11 = LODWORD(v32[2]) + (unint64_t)HIDWORD(v32[1]), v11 > HIDWORD(v32[0]))
      || bssl::ssl_max_handshake_message_len((bssl *)a1, v8) < v10)
    {
      int v27 = 150;
      int v28 = 363;
      goto LABEL_64;
    }
    uint64_t v12 = *(void *)(a1 + 56);
    unsigned int v13 = *(unsigned __int16 *)(v12 + 50);
    if (*(_WORD *)(v12 + 2) == 1)
    {
      BOOL v14 = LOWORD(v32[1]) == v13;
      unsigned int v13 = LOWORD(v32[1]);
      if (!v14)
      {
        int v29 = 370;
        goto LABEL_57;
      }
    }
    if (LOWORD(v32[1]) >= v13 && v13 + 7 >= LOWORD(v32[1])) {
      break;
    }
LABEL_51:
    if (!v34) {
      return 0;
    }
  }
  if ((int)(LOWORD(v32[1]) - v13) > 6) {
    goto LABEL_68;
  }
  uint64_t v16 = (LOWORD(v32[1]) - 7 * ((613566757 * (unint64_t)LOWORD(v32[1])) >> 32));
  uint64_t v17 = *(unsigned __int8 **)(v12 + 8 * v16 + 72);
  if (!v17)
  {
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v40[1] = v19;
    v40[2] = v19;
    v40[0] = v19;
    CBB_zero(v40);
    int v20 = (bssl::hm_fragment *)OPENSSL_malloc(0x18uLL);
    if (v20)
    {
      *((void *)v20 + 1) = 0;
      *((void *)v20 + 2) = 0;
      long long v39 = v20;
      *(unsigned char *)int v20 = v32[0];
      *((_WORD *)v20 + 1) = v32[1];
      int v21 = HIDWORD(v32[0]);
      *((_DWORD *)v20 + 1) = HIDWORD(v32[0]);
      uint64_t v22 = OPENSSL_malloc((v21 + 12));
      *((void *)v39 + 1) = v22;
      if (!v22
        || !CBB_init_fixed((uint64_t)v40, (uint64_t)v22, 12)
        || !CBB_add_u8((uint64_t)v40, LOBYTE(v32[0]))
        || !CBB_add_u24((uint64_t)v40, HIDWORD(v32[0]))
        || !CBB_add_u16((uint64_t)v40, LOWORD(v32[1]))
        || !CBB_add_u24((uint64_t)v40, 0)
        || !CBB_add_u24((uint64_t)v40, HIDWORD(v32[0]))
        || !CBB_finish((uint64_t)v40, 0, 0))
      {
        goto LABEL_42;
      }
      if (HIDWORD(v32[0]))
      {
        if (HIDWORD(v32[0]) >= 0xFFFFFFF9)
        {
          ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", 183);
LABEL_42:
          long long v23 = 0;
          goto LABEL_43;
        }
        uint64_t v24 = OPENSSL_zalloc(((unint64_t)HIDWORD(v32[0]) + 7) >> 3);
        long long v23 = v39;
        *((void *)v39 + 2) = v24;
        if (!v24) {
          goto LABEL_42;
        }
      }
      else
      {
        long long v23 = v39;
      }
    }
    else
    {
      long long v23 = 0;
    }
    long long v39 = 0;
LABEL_43:
    int8x16_t v38 = v23;
    std::unique_ptr<bssl::hm_fragment,bssl::internal::Deleter>::reset[abi:ne180100](&v39, 0);
    CBB_cleanup((uint64_t)v40);
    __int16 v25 = (bssl::hm_fragment **)(*(void *)(a1 + 56) + 8 * v16 + 72);
    int8x16_t v38 = 0;
    std::unique_ptr<bssl::hm_fragment,bssl::internal::Deleter>::reset[abi:ne180100](v25, v23);
    std::unique_ptr<bssl::hm_fragment,bssl::internal::Deleter>::reset[abi:ne180100](&v38, 0);
    uint64_t v17 = *(unsigned __int8 **)(*(void *)(a1 + 56) + 8 * v16 + 72);
    if (!v17)
    {
LABEL_68:
      char v26 = 80;
      goto LABEL_65;
    }
    int v18 = *((_DWORD *)v17 + 1);
    goto LABEL_45;
  }
  if (*((unsigned __int16 *)v17 + 1) != LOWORD(v32[1])) {
    bssl::dtls1_open_handshake();
  }
  if (*v17 == LOBYTE(v32[0]))
  {
    int v18 = *((_DWORD *)v17 + 1);
    if (v18 == HIDWORD(v32[0]))
    {
LABEL_45:
      if (v18 != v10) {
        bssl::dtls1_open_handshake();
      }
      if (*((void *)v17 + 2))
      {
        if (!v10) {
          bssl::dtls1_open_handshake();
        }
        if (__n) {
          memcpy((void *)(*((void *)v17 + 1) + v9 + 12), __src, __n);
        }
        bssl::dtls1_hm_fragment_mark((bssl *)v17, v9, v11);
      }
      goto LABEL_51;
    }
  }
  int v27 = 152;
  int v28 = 276;
LABEL_64:
  ERR_put_error(16, 0, v27, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", v28);
  char v26 = 47;
LABEL_65:
  *a3 = v26;
  return 4;
}

void sub_1BA127238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  unsigned int v13 = va_arg(va1, bssl::hm_fragment *);
  std::unique_ptr<bssl::hm_fragment,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::hm_fragment **)va, 0);
  CBB_cleanup((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t bssl::dtls1_parse_fragment(uint64_t *a1, uint64_t a2, void *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  uint64_t result = CBS_get_u8(a1, (unsigned char *)a2);
  if (result)
  {
    uint64_t result = CBS_get_u24(a1, (int *)(a2 + 4));
    if (result)
    {
      uint64_t result = CBS_get_u16((unsigned __int16 **)a1, (_WORD *)(a2 + 8));
      if (result)
      {
        uint64_t result = CBS_get_u24(a1, (int *)(a2 + 12));
        if (result)
        {
          uint64_t v7 = (int *)(a2 + 16);
          uint64_t result = CBS_get_u24(a1, v7);
          if (result) {
            return CBS_get_bytes(a1, a3, *v7) != 0;
          }
        }
      }
    }
  }
  return result;
}

void bssl::dtls1_hm_fragment_mark(bssl *this, unint64_t a2, unint64_t a3)
{
  if (a2 > a3
    || ((unint64_t v4 = *((unsigned int *)this + 1), (v5 = *((void *)this + 2)) != 0) ? (v6 = v4 >= a3) : (v6 = 0), !v6))
  {
    bssl::dtls1_hm_fragment_mark();
  }
  if (!v4) {
    bssl::dtls1_hm_fragment_mark();
  }
  if (a2 == a3) {
    return;
  }
  unint64_t v7 = a2 >> 3;
  int v8 = -1 << (a2 & 7);
  if (a2 >> 3 == a3 >> 3)
  {
    int v9 = v8 & ~(-1 << (a3 & 7));
    unint64_t v10 = (unsigned char *)(v5 + v7);
LABEL_15:
    *v10 |= v9;
    goto LABEL_16;
  }
  unint64_t v11 = a3 >> 3;
  *(unsigned char *)(v5 + v7) |= v8;
  unint64_t v12 = v7 + 1;
  if (v7 + 1 < a3 >> 3)
  {
    do
      *(unsigned char *)(*((void *)this + 2) + v12++) = -1;
    while (v11 != v12);
  }
  if ((a3 & 7) != 0)
  {
    int v9 = ~(-1 << (a3 & 7));
    unint64_t v10 = (unsigned char *)(*((void *)this + 2) + v11);
    goto LABEL_15;
  }
LABEL_16:
  unint64_t v13 = v4 >> 3;
  BOOL v14 = (void *)*((void *)this + 2);
  if (v4 < 8)
  {
LABEL_23:
    unint64_t v18 = v4 & 7;
    if (!v18 || *((unsigned __int8 *)v14 + v13) == ~(-1 << v18))
    {
      OPENSSL_free(v14);
      *((void *)this + 2) = 0;
    }
  }
  else
  {
    if (v13 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v4 >> 3;
    }
    uint64_t v16 = (unsigned __int8 *)*((void *)this + 2);
    while (1)
    {
      int v17 = *v16++;
      if (v17 != 255) {
        break;
      }
      if (!--v15) {
        goto LABEL_23;
      }
    }
  }
}

uint64_t bssl::dtls1_get_message(SSL *ssl, uint64_t a2)
{
  uint64_t v2 = *(void *)&ssl->server;
  uint64_t v3 = *(void *)(v2
                 + 8
                 * (unsigned __int16)(*(_WORD *)(v2 + 50)
                                    - 7
                                    * ((((unsigned __int16)(*(_WORD *)(v2 + 50)
                                                          - ((9363 * *(unsigned __int16 *)(v2 + 50)) >> 16)) >> 1)
                                      + ((9363 * *(unsigned __int16 *)(v2 + 50)) >> 16)) >> 2))
                 + 72);
  if (!v3 || *(void *)(v3 + 16)) {
    return 0;
  }
  *(unsigned char *)(a2 + 1) = *(unsigned char *)v3;
  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v7 = *(unsigned int *)(v3 + 4);
  *(void *)(a2 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v6 + 12;
  *(void *)(a2 + 16) = v7;
  uint64_t v8 = (v7 + 12);
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v8;
  *(unsigned char *)a2 = 0;
  if ((*((unsigned char *)ssl->handshake_func + 220) & 0x10) == 0)
  {
    bssl::ssl_do_msg_callback((uint64_t)ssl, 0, 22, v6, v8);
    *((_WORD *)ssl->handshake_func + 110) |= 0x10u;
  }
  return 1;
}

void bssl::dtls1_next_message(bssl *this, ssl_st *a2)
{
  if ((*(_WORD *)(*((void *)this + 6) + 220) & 0x10) == 0) {
    bssl::dtls1_next_message();
  }
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = v3
     + 8
     * (unsigned __int16)(*(_WORD *)(v3 + 50)
                        - 7
                        * ((((unsigned __int16)(*(_WORD *)(v3 + 50)
                                              - ((9363 * *(unsigned __int16 *)(v3 + 50)) >> 16)) >> 1)
                          + ((9363 * *(unsigned __int16 *)(v3 + 50)) >> 16)) >> 2));
  uint64_t v7 = *(void *)(v4 + 72);
  uint64_t v5 = (bssl::hm_fragment **)(v4 + 72);
  uint64_t v6 = v7;
  if (!v7 || *(void *)(v6 + 16)) {
    bssl::dtls1_next_message();
  }
  std::unique_ptr<bssl::hm_fragment,bssl::internal::Deleter>::reset[abi:ne180100](v5, 0);
  uint64_t v8 = *((void *)this + 6);
  ++*(_WORD *)(*((void *)this + 7) + 50);
  *(_WORD *)(v8 + 220) &= ~0x10u;
  int v9 = (unsigned char *)*((void *)this + 7);
  if ((*v9 & 2) != 0) {
    *v9 |= 4u;
  }
}

void std::unique_ptr<bssl::hm_fragment,bssl::internal::Deleter>::reset[abi:ne180100](bssl::hm_fragment **a1, bssl::hm_fragment *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    bssl::hm_fragment::~hm_fragment(v3);
    OPENSSL_free(v4);
  }
}

BOOL bssl::dtls_has_unprocessed_handshake_data(bssl *this, const ssl_st *a2)
{
  unint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 7);
  unsigned __int16 v4 = *(_WORD *)(v3 + 50)
     - 7
     * ((((unsigned __int16)(*(_WORD *)(v3 + 50) - ((9363 * *(unsigned __int16 *)(v3 + 50)) >> 16)) >> 1)
       + ((9363 * *(unsigned __int16 *)(v3 + 50)) >> 16)) >> 2);
  uint64_t v5 = v4;
  uint64_t v6 = v3 + 72;
  uint64_t v7 = v6 + 8 * v4;
  BOOL v8 = 1;
  do
  {
    if ((*(_WORD *)(*((void *)this + 6) + 220) & 0x10) != 0 && v5 == v2)
    {
      if (!*(void *)v7 || *(void *)(*(void *)v7 + 16)) {
        bssl::dtls_has_unprocessed_handshake_data();
      }
    }
    else if (*(void *)(v6 + 8 * v2))
    {
      return v8;
    }
    BOOL v8 = v2++ < 6;
  }
  while (v2 != 7);
  return v8;
}

uint64_t bssl::dtls1_open_change_cipher_spec(uint64_t a1, unint64_t *a2, char *a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v5 = *(char **)(a1 + 56);
  char v6 = *v5;
  if (*v5) {
    goto LABEL_5;
  }
  uint64_t result = bssl::dtls1_open_handshake(a1, a2, a3, a4, a5);
  if (result) {
    return result;
  }
  uint64_t v5 = *(char **)(a1 + 56);
  char v6 = *v5;
  if ((*v5 & 1) == 0) {
    return 1;
  }
LABEL_5:
  uint64_t result = 0;
  *uint64_t v5 = v6 & 0xFE;
  return result;
}

void bssl::dtls_clear_outgoing_messages(bssl *this, ssl_st *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (*(unsigned char *)(v3 + 296))
  {
    unint64_t v4 = 0;
    uint64_t v5 = 128;
    do
    {
      char v6 = (void *)(v3 + v5);
      OPENSSL_free(*(void **)(v3 + v5));
      *char v6 = 0;
      v6[1] = 0;
      ++v4;
      uint64_t v3 = *((void *)this + 7);
      v5 += 24;
    }
    while (v4 < *(unsigned __int8 *)(v3 + 296));
  }
  *(_WORD *)(v3 + 296) = 0;
  *(_DWORD *)(v3 + 30std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0;
  *(unsigned char *)v3 &= ~2u;
  **((unsigned char **)this + 7) &= ~4u;
}

uint64_t bssl::dtls1_init_message(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t result = CBB_init((uint64_t)a2, 0x40uLL);
  if (result)
  {
    uint64_t result = CBB_add_u8((uint64_t)a2, a4);
    if (result)
    {
      uint64_t result = CBB_add_u24((uint64_t)a2, 0);
      if (result)
      {
        uint64_t result = CBB_add_u16((uint64_t)a2, *(unsigned __int16 *)(*(void *)(a1 + 56) + 48));
        if (result)
        {
          uint64_t result = CBB_add_u24((uint64_t)a2, 0);
          if (result) {
            return CBB_add_u24_length_prefixed(a2, a3) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::dtls1_finish_message(uint64_t a1, uint64_t a2, void *a3)
{
  if (bssl::CBBFinishArray(a2, (uint64_t)a3) && a3[1] > 0xBuLL)
  {
    uint64_t v5 = *a3;
    *(_WORD *)(v5 + 1) = *(_WORD *)(*a3 + 9);
    *(unsigned char *)(v5 + 3) = *(unsigned char *)(v5 + 11);
    return 1;
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", 516);
    return 0;
  }
}

uint64_t bssl::dtls1_add_message(bssl *a1, uint64_t a2)
{
  OPENSSL_free(0);
  unint64_t v4 = *(void **)(a2 + 8);
  v7[0] = *(void **)a2;
  v7[1] = v4;
  *(void *)a2 = 0;
  *(void *)(a2 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
  uint64_t v5 = bssl::add_outgoing(a1, 0, (uint64_t)v7);
  OPENSSL_free((void *)v7[0]);
  return v5;
}

void sub_1BA1278B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t bssl::add_outgoing(bssl *this, ssl_st *a2, uint64_t a3)
{
  char v4 = (char)a2;
  uint64_t v6 = *((void *)this + 7);
  if ((*(unsigned char *)v6 & 2) != 0)
  {
    bssl::dtls1_stop_timer((uint64_t)this, a2);
    bssl::dtls_clear_outgoing_messages(this, v7);
    uint64_t v6 = *((void *)this + 7);
  }
  unsigned int v8 = *(unsigned __int8 *)(v6 + 296);
  if (v8 > 6 || (size_t v9 = *(void *)(a3 + 8), HIDWORD(v9))) {
    bssl::add_outgoing();
  }
  if (v4) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(*((void *)this + 6) + 280);
  if (!v10)
  {
LABEL_9:
    ++*(_WORD *)(v6 + 48);
LABEL_10:
    uint64_t v11 = v6 + 24 * v8;
    OPENSSL_free(*(void **)(v11 + 128));
    *(void *)(v11 + 12bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
    *(void *)(v11 + 136) = 0;
    uint64_t v12 = *(void *)(a3 + 8);
    *(void *)(v11 + 12bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = *(void *)a3;
    *(void *)(v11 + 136) = v12;
    *(void *)a3 = 0;
    *(void *)(a3 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
    uint64_t v13 = *((void *)this + 7);
    *(_WORD *)(v11 + 144) = *(_WORD *)(v13 + 4);
    *(unsigned char *)(v11 + 146) = v4;
    ++*(unsigned char *)(v13 + 296);
    return 1;
  }
  if (bssl::SSLTranscript::Update((void **)(v10 + 424), *(const void **)a3, v9))
  {
    uint64_t v6 = *((void *)this + 7);
    unsigned int v8 = *(unsigned __int8 *)(v6 + 296);
    goto LABEL_9;
  }
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", 566);
  return 0;
}

uint64_t bssl::dtls1_add_change_cipher_spec(bssl *this, ssl_st *a2)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v2 = bssl::add_outgoing(this, (ssl_st *)1, (uint64_t)v4);
  OPENSSL_free((void *)v4[0]);
  return v2;
}

void sub_1BA127A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t bssl::dtls1_flush_flight(bssl *this, ssl_st *a2)
{
  **((unsigned char **)this + 7) |= 2u;
  bssl::dtls1_start_timer(this, a2);

  return bssl::send_flight(this, v3);
}

uint64_t bssl::send_flight(bssl *this, ssl_st *a2)
{
  if (*(_DWORD *)(*((void *)this + 6) + 176))
  {
    int v2 = 194;
    int v3 = 762;
LABEL_3:
    ERR_put_error(16, 0, v2, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", v3);
    return 0xFFFFFFFFLL;
  }
  if (!*((void *)this + 4))
  {
    int v2 = 119;
    int v3 = 767;
    goto LABEL_3;
  }
  if (*(_DWORD *)(*((void *)this + 7) + 304) <= 0xE3u && (SSL_get_options((uint64_t)this) & 0x1000) == 0)
  {
    unint64_t v6 = BIO_ctrl(*((BIO **)this + 4), 40, 0, 0);
    if (v6 > 0x40000000 || v6 < 0xE4)
    {
      *(_DWORD *)(*((void *)this + 7) + 304) = 1472;
      BIO_ctrl(*((BIO **)this + 4), 42, 1472, 0);
    }
    else
    {
      *(_DWORD *)(*((void *)this + 7) + 304) = v6;
    }
  }
  unint64_t v7 = *(unsigned int *)(*((void *)this + 7) + 304);
  if (v7 <= 0xE3) {
    bssl::send_flight();
  }
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  if (!bssl::Array<unsigned char>::Init((uint64_t)&v36, v7))
  {
LABEL_64:
    uint64_t v4 = 0xFFFFFFFFLL;
    goto LABEL_65;
  }
  while (2)
  {
    uint64_t v8 = *((void *)this + 7);
    if (*(unsigned __int8 *)(v8 + 297) >= *(unsigned __int8 *)(v8 + 296))
    {
      if ((int)BIO_flush(*((BIO **)this + 4)) > 0)
      {
        uint64_t v4 = 1;
        goto LABEL_65;
      }
      *(_DWORD *)(*((void *)this + 6) + 196) = 3;
      goto LABEL_64;
    }
    *(_DWORD *)&v35[8] = 0;
    char v9 = 0;
    int v34 = *(_DWORD *)(v8 + 300);
    *(void *)uint64_t v35 = *(unsigned __int8 *)(v8 + 297);
    unsigned __int8 v10 = *(unsigned char *)(v8 + 297);
    uint64_t v11 = (char *)v36;
    unint64_t v12 = v37;
    while (1)
    {
      unsigned int v13 = v10;
      unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
      int v14 = *(unsigned __int16 *)(v8 + 4);
      if (*(_WORD *)(v8 + 4))
      {
        int v15 = *(unsigned __int16 *)(v8 + 24 * v13 + 144);
        if (v14 - 1 == v15)
        {
          int v16 = 0;
          goto LABEL_22;
        }
      }
      else
      {
        int v15 = *(unsigned __int16 *)(v8 + 24 * v13 + 144);
      }
      if (v15 != v14)
      {
        ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", 631);
        goto LABEL_64;
      }
      int v16 = 1;
LABEL_22:
      uint64_t v17 = bssl::dtls_max_seal_overhead((uint64_t)this, v16);
      uint64_t v18 = bssl::dtls_seal_prefix_len((uint64_t)this, v16);
      if (!*(unsigned char *)(v8 + 24 * v13 + 146)) {
        break;
      }
      if (v17 + 1 > v12) {
        goto LABEL_59;
      }
      if (!bssl::dtls_seal_record((uint64_t)this, (unint64_t)v11, &v38, v12, 20, (char *)&bssl::seal_next_message(ssl_st *,unsigned char *,unsigned long *,unsigned long,bssl::DTLS_OUTGOING_MESSAGE const*)::kChangeCipherSpec, 1uLL, v16))goto LABEL_64; {
      bssl::ssl_do_msg_callback((uint64_t)this, 1, 20, (uint64_t)&bssl::seal_next_message(ssl_st *,unsigned char *,unsigned long *,unsigned long,bssl::DTLS_OUTGOING_MESSAGE const*)::kChangeCipherSpec, 1);
      }
      unint64_t v19 = v38;
      *(void *)&v35[4] += v38;
LABEL_53:
      v12 -= v19;
      v11 += v19;
      uint64_t v8 = *((void *)this + 7);
      unsigned __int8 v10 = *(unsigned char *)(v8 + 297) + 1;
      *(unsigned char *)(v8 + 297) = v10;
      char v9 = 1;
      if (*(unsigned __int8 *)(v8 + 296) <= v10) {
        goto LABEL_60;
      }
    }
    unint64_t v20 = v18;
    long long v43 = (const void *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
    memset(v42, 170, 20);
    uint64_t v21 = *(void *)(v8 + 24 * v13 + 136);
    uint64_t v45 = *(void *)(v8 + 24 * v13 + 128);
    uint64_t v46 = v21;
    int v22 = bssl::dtls1_parse_fragment(&v45, (uint64_t)v42, &v43);
    if (HIDWORD(v42[1])) {
      int v23 = 0;
    }
    else {
      int v23 = v22;
    }
    if (v23 != 1
      || v44 != LODWORD(v42[2])
      || LODWORD(v42[2]) != HIDWORD(v42[0])
      || !CBS_skip(&v43, *(unsigned int *)(*((void *)this + 7) + 300))
      || v46)
    {
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", 666);
      goto LABEL_64;
    }
    if (v17 + 13 > v12) {
      goto LABEL_59;
    }
    uint64_t v24 = v12 - v20;
    if (v12 < v20) {
      goto LABEL_59;
    }
    *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v41[1] = v25;
    v41[2] = v25;
    if (v44 >= v12 - v17 - 12) {
      size_t v26 = v12 - v17 - 12;
    }
    else {
      size_t v26 = v44;
    }
    v41[0] = v25;
    CBB_zero(v41);
    *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v40[1] = v27;
    v40[2] = v27;
    v40[0] = v27;
    int v28 = &v11[v20];
    uint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
    if (CBB_init_fixed((uint64_t)v41, (uint64_t)v28, v24)
      && CBB_add_u8((uint64_t)v41, LOBYTE(v42[0]))
      && CBB_add_u24((uint64_t)v41, HIDWORD(v42[0]))
      && CBB_add_u16((uint64_t)v41, LOWORD(v42[1]))
      && CBB_add_u24((uint64_t)v41, *(_DWORD *)(*((void *)this + 7) + 300))
      && CBB_add_u24_length_prefixed((uint64_t *)v41, (uint64_t)v40)
      && CBB_add_bytes((uint64_t)v40, v43, v26)
      && CBB_finish((uint64_t)v41, 0, &v39))
    {
      bssl::ssl_do_msg_callback((uint64_t)this, 1, 22, (uint64_t)v28, v39);
      if (bssl::dtls_seal_record((uint64_t)this, (unint64_t)v11, &v38, v12, 22, v28, v39, v16))
      {
        uint64_t v29 = *((void *)this + 7);
        if (v26 == v44)
        {
          int v30 = 0;
          int v31 = 3;
        }
        else
        {
          int v30 = *(_DWORD *)(v29 + 300) + v26;
          int v31 = 2;
        }
        *(_DWORD *)(v29 + 30std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v30;
      }
      else
      {
        int v31 = 0;
      }
    }
    else
    {
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", 692);
      int v31 = 0;
    }
    CBB_cleanup((uint64_t)v41);
    if ((v31 - 2) < 2)
    {
      unint64_t v19 = v38;
      *(void *)&v35[4] += v38;
      if (v31 == 2) {
        goto LABEL_60;
      }
      goto LABEL_53;
    }
    if (!v31) {
      goto LABEL_64;
    }
LABEL_59:
    if ((v9 & 1) == 0)
    {
      ERR_put_error(16, 0, 169, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_both.cc", 752);
      goto LABEL_64;
    }
LABEL_60:
    uint64_t v4 = BIO_write(*((BIO **)this + 4), v36, *(int *)&v35[4]);
    if ((int)v4 > 0) {
      continue;
    }
    break;
  }
  uint64_t v32 = *((void *)this + 7);
  *(unsigned char *)(v32 + 297) = v35[0];
  *(_DWORD *)(v32 + 30std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v34;
  *(_DWORD *)(*((void *)this + 6) + 196) = 3;
LABEL_65:
  OPENSSL_free(v36);
  return v4;
}

void sub_1BA127FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  CBB_cleanup((uint64_t)va1);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::dtls1_retransmit_outgoing_messages(bssl *this, ssl_st *a2)
{
  uint64_t v2 = *((void *)this + 7);
  *(unsigned char *)(v2 + 297) = 0;
  *(_DWORD *)(v2 + 30std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0;
  return bssl::send_flight(this, a2);
}

uint64_t bssl::dtls1_min_mtu(bssl *this)
{
  return 228;
}

uint64_t SSL_state_int(uint64_t a1, bssl::SSL_HANDSHAKE *a2)
{
  int v3 = *(bssl **)(*(void *)(a1 + 48) + 280);
  if (!v3) {
    return 724109320;
  }
  if (*(unsigned char *)(a1 + 180)) {
    return bssl::ssl_server_handshake_int_state(v3, a2);
  }
  return bssl::ssl_client_handshake_int_state(v3, a2);
}

void *EVP_hpke_x25519_hkdf_sha256()
{
  return &EVP_hpke_x25519_hkdf_sha256_kKEM;
}

uint64_t x25519_init_key(uint64_t a1, long long *a2, uint64_t a3)
{
  if (a3 == 32)
  {
    long long v3 = *a2;
    *(_OWORD *)(a1 + 24) = a2[1];
    *(_OWORD *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v3;
    X25519_public_from_private((unsigned char *)(a1 + 40), (uint64_t)a2);
    return 1;
  }
  else
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/hpke/hpke.c", 156);
    return 0;
  }
}

uint64_t x25519_generate_key(uint64_t a1)
{
  return 1;
}

uint64_t x25519_encap_with_seed(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a6 <= 0x1F)
  {
    int v10 = 137;
    int v11 = 310;
LABEL_11:
    ERR_put_error(6, 0, v10, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/hpke/hpke.c", v11);
    return 0;
  }
  if (a10 != 32)
  {
    int v10 = 102;
    int v11 = 314;
    goto LABEL_11;
  }
  uint64_t result = ccrng();
  if (!result) {
    return result;
  }
  if (!cccurve25519_make_pub_with_rng())
  {
    if (a8 == 32)
    {
      cchpke_params_x25519_AESGCM128_HKDF_SHA256();
      if (!cchpke_initiator_setup() && !cchpke_initiator_export())
      {
        *a5 = 32;
        *a3 = 32;
        return 1;
      }
      return 0;
    }
    int v10 = 134;
    int v11 = 327;
    goto LABEL_11;
  }
  return 0;
}

uint64_t x25519_decap(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a5 == 32)
  {
    cchpke_params_x25519_AESGCM128_HKDF_SHA256();
    if (!cchpke_responder_setup() && !cchpke_responder_export())
    {
      *a3 = 32;
      return 1;
    }
  }
  else
  {
    ERR_put_error(6, 0, 134, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/hpke/hpke.c", 354);
  }
  return 0;
}

uint64_t x25519_auth_encap_with_seed()
{
  return 0;
}

uint64_t x25519_auth_decap()
{
  return 0;
}

void *EVP_hpke_hkdf_sha256()
{
  return &EVP_hpke_hkdf_sha256_kKDF;
}

uint64_t EVP_HPKE_KDF_id(unsigned __int16 *a1)
{
  return *a1;
}

void *EVP_hpke_aes_128_gcm()
{
  return &EVP_hpke_aes_128_gcm_kAEAD;
}

void *EVP_hpke_aes_256_gcm()
{
  return &EVP_hpke_aes_256_gcm_kAEAD;
}

void *EVP_hpke_chacha20_poly1305()
{
  return &EVP_hpke_chacha20_poly1305_kAEAD;
}

uint64_t EVP_HPKE_AEAD_aead(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t EVP_HPKE_CTX_setup_sender(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, size_t a11)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buf = v19;
  long long v22 = v19;
  RAND_bytes(buf, *(void *)(a5 + 24));
  return EVP_HPKE_CTX_setup_sender_with_seed_for_testing(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)buf, *(void *)(a5 + 24));
}

uint64_t EVP_HPKE_CTX_setup_sender_with_seed_for_testing(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, size_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  bzero(a1, 0x2C8uLL);
  EVP_AEAD_CTX_zero(a1 + 3);
  *((_DWORD *)a1 + 176) = 1;
  a1[1] = a7;
  a1[2] = a6;
  *a1 = a5;
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v19;
  v24[1] = v19;
  uint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  if ((*(unsigned int (**)(uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 56))(a5, v24, &v23, a2, a3, a4, a8, a9, a12, a13)&& hpke_key_schedule((uint64_t)a1, 0, (uint64_t)v24, v23, a10, a11))
  {
    return 1;
  }
  EVP_AEAD_CTX_cleanup((uint64_t)(a1 + 3));
  return 0;
}

uint64_t hpke_key_schedule(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  __int16 v35 = -21846;
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = hpke_build_suite_id((unsigned __int16 **)a1, (uint64_t)&v34);
  if (result)
  {
    uint64_t v13 = (EVP_MD *)(*(uint64_t (**)(void))(*(void *)(a1 + 16) + 8))();
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v33[2] = v14;
    v33[3] = v14;
    v33[0] = v14;
    v33[1] = v14;
    size_t v27 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = hpke_labeled_extract(v13, (int)v33, &v27, 0, 0, &v34, "psk_id_hash", 0, 0);
    if (result)
    {
      *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v32[2] = v15;
      void v32[3] = v15;
      v32[0] = v15;
      v32[1] = v15;
      size_t v26 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t result = hpke_labeled_extract(v13, (int)v32, &v26, 0, 0, &v34, "info_hash", a5, a6);
      if (result)
      {
        char v31 = -86;
        *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[6] = v16;
        v30[7] = v16;
        void v30[4] = v16;
        v30[5] = v16;
        _OWORD v30[2] = v16;
        _OWORD v30[3] = v16;
        v30[0] = v16;
        v30[1] = v16;
        size_t v25 = 0xAAAAAAAAAAAAAAAALL;
        v24[1] = v16;
        _OWORD v24[2] = v16;
        v24[0] = v16;
        CBB_init_fixed((uint64_t)v24, (uint64_t)v30, 129);
        uint64_t result = CBB_add_u8((uint64_t)v24, a2);
        if (result)
        {
          uint64_t result = CBB_add_bytes((uint64_t)v24, v33, v27);
          if (result)
          {
            uint64_t result = CBB_add_bytes((uint64_t)v24, v32, v26);
            if (result)
            {
              uint64_t result = CBB_finish((uint64_t)v24, 0, &v25);
              if (result)
              {
                *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
                _OWORD v29[2] = v17;
                v29[3] = v17;
                v29[0] = v17;
                v29[1] = v17;
                uint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
                uint64_t result = hpke_labeled_extract(v13, (int)v29, &v23, a3, a4, &v34, "secret", 0, 0);
                if (result)
                {
                  uint64_t v18 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(a1 + 8) + 8))();
                  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
                  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  v28[3] = v19;
                  v28[4] = v19;
                  v28[1] = v19;
                  _OWORD v28[2] = v19;
                  v28[0] = v19;
                  uint64_t v20 = EVP_AEAD_key_length(v18);
                  uint64_t result = hpke_labeled_expand(v13, (int)v28, v20, (uint64_t)v29, v23, &v34, "key", v30, v25);
                  if (result)
                  {
                    uint64_t result = EVP_AEAD_CTX_init((void *)(a1 + 24), (uint64_t)v18, (uint64_t)v28, v20, 0);
                    if (result)
                    {
                      int v21 = EVP_AEAD_nonce_length((uint64_t)v18);
                      uint64_t result = hpke_labeled_expand(v13, a1 + 608, v21, (uint64_t)v29, v23, &v34, "base_nonce", v30, v25);
                      if (result)
                      {
                        int v22 = EVP_MD_size(v13);
                        return hpke_labeled_expand(v13, a1 + 632, v22, (uint64_t)v29, v23, &v34, "exp", v30, v25);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t EVP_HPKE_CTX_setup_recipient(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, size_t a8)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  bzero(a1, 0x2C8uLL);
  EVP_AEAD_CTX_zero(a1 + 3);
  *((_DWORD *)a1 + 176) = 0;
  uint64_t v16 = *a2;
  a1[1] = a4;
  a1[2] = a3;
  *a1 = v16;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v17;
  v20[1] = v17;
  uint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  if ((*(unsigned int (**)(uint64_t *, _OWORD *, uint64_t *, uint64_t, uint64_t))(v16 + 64))(a2, v20, &v19, a5, a6)&& hpke_key_schedule((uint64_t)a1, 0, (uint64_t)v20, v19, a7, a8))
  {
    return 1;
  }
  EVP_AEAD_CTX_cleanup((uint64_t)(a1 + 3));
  return 0;
}

uint64_t EVP_HPKE_CTX_open(uint64_t a1, char *a2, size_t *a3, size_t a4, char *a5, unint64_t a6)
{
  _OWORD v16[3] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 704))
  {
    int v6 = 66;
    int v7 = 827;
LABEL_3:
    ERR_put_error(6, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/hpke/hpke.c", v7);
    return 0;
  }
  if (*(void *)(a1 + 696) == -1)
  {
    int v6 = 69;
    int v7 = 831;
    goto LABEL_3;
  }
  memset(v16, 170, 24);
  uint64_t v15 = EVP_AEAD_nonce_length(*(void *)(a1 + 24));
  hpke_nonce(a1, v16, v15);
  uint64_t result = EVP_AEAD_CTX_open((unsigned __int8 *)(a1 + 24), a2, a3, a4, (uint64_t)v16, v15, a5, a6);
  if (result)
  {
    ++*(void *)(a1 + 696);
    return 1;
  }
  return result;
}

void hpke_nonce(uint64_t a1, unsigned char *a2, size_t a3)
{
  if (a3 <= 7) {
    hpke_nonce_cold_1();
  }
  size_t v3 = a3;
  uint64_t v4 = a2;
  bzero(a2, a3);
  unint64_t v6 = *(void *)(a1 + 696);
  for (uint64_t i = -1; i != -9; --i)
  {
    v4[v3 + i] = v6;
    v6 >>= 8;
  }
  uint64_t v8 = (char *)(a1 + 608);
  do
  {
    char v9 = *v8++;
    *v4++ ^= v9;
    --v3;
  }
  while (v3);
}

uint64_t EVP_HPKE_CTX_seal(uint64_t a1, char *a2, unint64_t *a3, size_t a4, char *a5, size_t a6)
{
  _OWORD v16[3] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 704))
  {
    int v14 = 66;
    int v15 = 851;
LABEL_7:
    ERR_put_error(6, 0, v14, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/hpke/hpke.c", v15);
    return 0;
  }
  if (*(void *)(a1 + 696) == -1)
  {
    int v14 = 69;
    int v15 = 855;
    goto LABEL_7;
  }
  memset(v16, 170, 24);
  uint64_t v12 = EVP_AEAD_nonce_length(*(void *)(a1 + 24));
  hpke_nonce(a1, v16, v12);
  uint64_t result = EVP_AEAD_CTX_seal(a1 + 24, a2, a3, a4, (uint64_t)v16, v12, a5, a6);
  if (result)
  {
    ++*(void *)(a1 + 696);
    return 1;
  }
  return result;
}

uint64_t hpke_build_suite_id(unsigned __int16 **a1, uint64_t a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v5[1] = v3;
  void v5[2] = v3;
  v5[0] = v3;
  CBB_init_fixed((uint64_t)v5, a2, 10);
  uint64_t result = CBB_add_bytes((uint64_t)v5, "HPKE", 4uLL);
  if (result)
  {
    uint64_t result = CBB_add_u16((uint64_t)v5, **a1);
    if (result)
    {
      uint64_t result = CBB_add_u16((uint64_t)v5, *a1[2]);
      if (result) {
        return CBB_add_u16((uint64_t)v5, *a1[1]) != 0;
      }
    }
  }
  return result;
}

BOOL hpke_labeled_expand(EVP_MD *a1, int a2, int a3, uint64_t a4, uint64_t a5, const void *a6, const char *a7, const void *a8, size_t a9)
{
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = v15;
  _OWORD v19[2] = v15;
  v19[0] = v15;
  if (CBB_init((uint64_t)v19, 0)
    && CBB_add_u16((uint64_t)v19, (unsigned __int16)a3)
    && CBB_add_bytes((uint64_t)v19, "HPKE-v1", 7uLL)
    && CBB_add_bytes((uint64_t)v19, a6, 0xAuLL)
    && (size_t v16 = strlen(a7), CBB_add_bytes((uint64_t)v19, a7, v16))
    && CBB_add_bytes((uint64_t)v19, a8, a9))
  {
    CBB_data((uint64_t)v19);
    CBB_len((uint64_t)v19);
    BOOL v17 = HKDF_expand(a2, a3, a1);
  }
  else
  {
    BOOL v17 = 0;
  }
  CBB_cleanup((uint64_t)v19);
  return v17;
}

const BIGNUM *__cdecl EVP_HPKE_CTX_kdf(const EC_KEY *a1)
{
  return (const BIGNUM *)*((void *)a1 + 2);
}

BOOL hpke_labeled_extract(EVP_MD *a1, int a2, void *a3, uint64_t a4, uint64_t a5, const void *a6, const char *a7, const void *a8, size_t a9)
{
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = v15;
  _OWORD v19[2] = v15;
  v19[0] = v15;
  if (CBB_init((uint64_t)v19, 0)
    && CBB_add_bytes((uint64_t)v19, "HPKE-v1", 7uLL)
    && CBB_add_bytes((uint64_t)v19, a6, 0xAuLL)
    && (size_t v16 = strlen(a7), CBB_add_bytes((uint64_t)v19, a7, v16))
    && CBB_add_bytes((uint64_t)v19, a8, a9))
  {
    CBB_data((uint64_t)v19);
    CBB_len((uint64_t)v19);
    BOOL v17 = HKDF_extract(a2, a3, a1) != 0;
  }
  else
  {
    BOOL v17 = 0;
  }
  CBB_cleanup((uint64_t)v19);
  return v17;
}

uint64_t bssl::tls13_init_early_key_schedule(bssl *this, ssl_cipher_st **a2, const ssl_session_st *a3)
{
  if (*(unsigned char *)(*(void *)this + 180)) {
    bssl::tls13_init_early_key_schedule();
  }
  if (*((void *)this + 193)) {
    uint64_t v5 = (size_t **)((char *)this + 464);
  }
  else {
    uint64_t v5 = (size_t **)((char *)this + 424);
  }
  unint64_t v6 = (bssl::SSLTranscript *)bssl::ssl_session_protocol_version((bssl *)a2, (const ssl_session_st *)a2);
  uint64_t result = bssl::init_key_schedule(this, v5, v6, a2[25], v7);
  if (result)
  {
    return bssl::hkdf_extract_to_secret((uint64_t)this, (bssl::SSLTranscript *)v5);
  }
  return result;
}

uint64_t bssl::tls13_derive_early_secret(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 180) & 1) != 0 || !*((void *)this + 193)) {
    uint64_t v4 = (bssl *)((char *)this + 424);
  }
  else {
    uint64_t v4 = (bssl *)((char *)this + 464);
  }
  uint64_t result = bssl::derive_secret_with_transcript((uint64_t)this, (int)this + 88, *((void *)this + 4), v4, "c e traffic", 0xBuLL);
  if (result)
  {
    uint64_t v6 = *((void *)this + 4);
    return bssl::ssl_log_secret(v3, "CLIENT_EARLY_TRAFFIC_SECRET", (unsigned __int8 *)this + 88, v6);
  }
  return result;
}

uint64_t bssl::tls13_rotate_traffic_key(const SSL *a1, uint64_t a2)
{
  handshake_func = a1->handshake_func;
  uint64_t v5 = 440;
  if (a2)
  {
    uint64_t v6 = (char *)handshake_func + 296;
  }
  else
  {
    uint64_t v5 = 441;
    uint64_t v6 = (char *)handshake_func + 344;
  }
  size_t v7 = *((unsigned __int8 *)handshake_func + v5);
  sessiouint64_t n = (bssl *)SSL_get_session(a1);
  digest = (EVP_MD *)bssl::ssl_session_get_digest(session, v9);
  if (!CRYPTO_tls13_hkdf_expand_label((int)v6, v7, digest, (uint64_t)v6, v7, "traffic upd", 0xBuLL, 0, 0)) {
    return 0;
  }

  return bssl::tls13_set_traffic_key((uint64_t)a1, (const ssl_session_st *)3, a2, session, v6, v7);
}

uint64_t bssl::tls13_export_keying_material(const SSL *a1, int a2, int a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7, uint64_t a8, const void *a9, size_t a10)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a5) {
    bssl::tls13_export_keying_material();
  }
  sessiouint64_t n = (bssl *)SSL_get_session(a1);
  digest = (EVP_MD *)bssl::ssl_session_get_digest(session, v17);
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  md[2] = v19;
  md[3] = v19;
  md[0] = v19;
  md[1] = v19;
  long long v30 = v19;
  long long v31 = v19;
  *(_OWORD *)int v28 = v19;
  long long v29 = v19;
  unsigned int v25 = -1431655766;
  unsigned int size = -1431655766;
  uint64_t result = EVP_Digest(a9, a10, (unsigned __int8 *)md, &size, digest, 0);
  if (result)
  {
    uint64_t result = EVP_Digest(0, 0, v28, &v25, digest, 0);
    if (result)
    {
      size_t v22 = v25;
      size_t v21 = size;
      *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v27[2] = v23;
      v27[3] = v23;
      v27[0] = v23;
      v27[1] = v23;
      uint64_t v24 = EVP_MD_size(digest);
      return CRYPTO_tls13_hkdf_expand_label((int)v27, v24, digest, a4, a5, a6, a7, v28, v22)
          && CRYPTO_tls13_hkdf_expand_label(a2, a3, digest, (uint64_t)v27, v24, "exporter", 8uLL, md, v21);
    }
  }
  return result;
}

uint64_t bssl::tls13_write_psk_binder(uint64_t *a1, ssl_session_st *a2, char *a3, size_t a4, size_t *a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  digest = bssl::ssl_session_get_digest(*(bssl **)(*a1 + 104), a2);
  size_t v11 = EVP_MD_size(digest);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __src[2] = v12;
  __src[3] = v12;
  __src[0] = v12;
  __src[1] = v12;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v13 = bssl::tls13_psk_binder((unsigned __int8 *)__src, (ssl_session_st *)&v16, *(bssl **)(v9 + 104), (size_t **)a2, a3, a4, v11 + 3, *(unsigned __int8 *)(*(void *)(v9 + 104) + 440) >> 7);
  if (v16 == v11) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14)
  {
    if (a4 < v11) {
      abort();
    }
    if (v11) {
      memcpy(&a3[a4 - v11], __src, v11);
    }
    if (a5) {
      *a5 = v11;
    }
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_enc.cc", 481);
  }
  return v14;
}

uint64_t bssl::tls13_psk_binder(unsigned __int8 *a1, ssl_session_st *a2, bssl *this, size_t **a4, const void *a5, size_t a6, size_t a7, int a8)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  digest = (EVP_MD *)bssl::ssl_session_get_digest(this, a2);
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v35 = v15;
  long long v36 = v15;
  *(_OWORD *)munsigned int d = v15;
  long long v34 = v15;
  unsigned int size = -1431655766;
  memset(v32, 0, sizeof(v32));
  uint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  memset(v31, 0, sizeof(v31));
  uint64_t v16 = EVP_MD_size(digest);
  if (!EVP_Digest(0, 0, md, &size, digest, 0) || !HKDF_extract((int)v32, &v25, digest)) {
    return 0;
  }
  BOOL v17 = a8 ? "ext binder" : "res binder";
  if (!CRYPTO_tls13_hkdf_expand_label((int)v31, v16, digest, (uint64_t)v32, v25, v17, 0xAuLL, md, size)) {
    return 0;
  }
  if (a6 < a7)
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_enc.cc", 437);
    return 0;
  }
  if (a6 >= a6 - a7) {
    a6 -= a7;
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v29 = v20;
  long long v30 = v20;
  *(_OWORD *)size_t v27 = v20;
  long long v28 = v20;
  unsigned int s = -1431655766;
  *(_OWORD *)&ctx.digest = v20;
  *(_OWORD *)&ctx.flagunsigned int s = v20;
  EVP_MD_CTX_init(&ctx);
  if (bssl::SSLTranscript::CopyToHashContext(a4, &ctx, digest)
    && EVP_DigestUpdate(&ctx, a5, a6)
    && EVP_DigestFinal_ex(&ctx, v27, &s)
    && bssl::tls13_verify_data(a1, a2, digest, (uint64_t)v31, v16, v27, s))
  {
    uint64_t v21 = *(void *)&a2->ssl_version;
    if (v21 != EVP_MD_size(digest)) {
      __assert_rtn("tls13_psk_binder", "tls13_enc.cc", 456, "*out_len == EVP_MD_size(digest)");
    }
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v18 = 0;
  }
  EVP_MD_CTX_cleanup(&ctx);
  return v18;
}

void sub_1BA129814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, EVP_MD_CTX *ctx)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t bssl::tls13_verify_psk_binder(uint64_t a1, bssl *this, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v12[2] = v5;
  _OWORD v12[3] = v5;
  v12[0] = v5;
  v12[1] = v5;
  uint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = 0;
  uint64_t v9 = (char *)0xAAAAAAAAAAAAAAAALL;
  if (bssl::tls13_psk_binder((unsigned __int8 *)v12, (ssl_session_st *)&v11, this, (size_t **)(a1 + 424), *(const void **)(a3 + 24), *(void *)(a3 + 32), *(void *)(a4 + 8) + 2, 0)&& CBS_get_u8_length_prefixed((unsigned __int8 **)a4, (unint64_t *)&v9))
  {
    if (v10 == v11 && !CRYPTO_memcmp(v9, (char *)v12, v10)) {
      return 1;
    }
    int v6 = 142;
    int v7 = 517;
  }
  else
  {
    int v6 = 68;
    int v7 = 506;
  }
  ERR_put_error(16, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_enc.cc", v7);
  return 0;
}

BOOL bssl::ssl_ech_accept_confirmation(int a1, int a2, uint64_t a3, int a4, int a5, bssl::SSLTranscript *a6, int a7, int a8, char *d, unint64_t a10, unint64_t a11)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a10 >= a11 + 8)
  {
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v31 = v16;
    long long v32 = v16;
    if (a10 >= a11) {
      size_t v17 = a11;
    }
    else {
      size_t v17 = a10;
    }
    long long v30 = v16;
    *(_OWORD *)munsigned int d = v16;
    unsigned int s = -1431655766;
    *(_OWORD *)&ctx.digest = v16;
    *(_OWORD *)&ctx.flagunsigned int s = v16;
    EVP_MD_CTX_init(&ctx);
    uint64_t v18 = bssl::SSLTranscript::Digest(a6);
    if (!bssl::SSLTranscript::CopyToHashContext((size_t **)a6, &ctx, v18)) {
      goto LABEL_20;
    }
    if (!EVP_DigestUpdate(&ctx, d, v17)) {
      goto LABEL_20;
    }
    if (!EVP_DigestUpdate(&ctx, &bssl::ssl_ech_accept_confirmation(bssl::SSL_HANDSHAKE const*,bssl::Span<unsigned char>,bssl::Span<unsigned char const>,bssl::SSLTranscript const&,BOOL,bssl::Span<unsigned char const>,unsigned long)::kZeros, 8uLL))goto LABEL_20; {
    if (!EVP_DigestUpdate(&ctx, &d[a11 + 8], a10 - (a11 + 8)))
    }
      goto LABEL_20;
    if (!EVP_DigestFinal_ex(&ctx, md, &s)) {
      goto LABEL_20;
    }
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    _OWORD v28[2] = v19;
    v28[3] = v19;
    v28[0] = v19;
    v28[1] = v19;
    uint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
    long long v20 = (EVP_MD *)bssl::SSLTranscript::Digest(a6);
    bssl::SSLTranscript::DigestLen(a6);
    if (HKDF_extract((int)v28, &v25, v20))
    {
      if (a3 != 8) {
        __assert_rtn("ssl_ech_accept_confirmation", "tls13_enc.cc", 567, "out.size() == ECH_CONFIRMATION_SIGNAL_LEN");
      }
      uint64_t v21 = (EVP_MD *)bssl::SSLTranscript::Digest(a6);
      if (a7) {
        size_t v22 = "hrr ech accept confirmation";
      }
      else {
        size_t v22 = "ech accept confirmation";
      }
      if (a7) {
        size_t v23 = 27;
      }
      else {
        size_t v23 = 23;
      }
      BOOL v11 = CRYPTO_tls13_hkdf_expand_label(a2, 8, v21, (uint64_t)v28, v25, v22, v23, md, s);
    }
    else
    {
LABEL_20:
      BOOL v11 = 0;
    }
    EVP_MD_CTX_cleanup(&ctx);
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_enc.cc", 542);
    return 0;
  }
  return v11;
}

void sub_1BA129B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, EVP_MD_CTX *ctx)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *a)
{
  *(void *)&a->final[8] = 0;
  *(_OWORD *)&a->flagunsigned int s = 0u;
  *(_OWORD *)&a->final_useunsigned int d = 0u;
  *(_OWORD *)&a->buf[24] = 0u;
  *(_OWORD *)&a->app_data = 0u;
  *(_OWORD *)&a->iv[8] = 0u;
  *(_OWORD *)&a->buf[8] = 0u;
  *(_OWORD *)&a->encrypt = 0u;
  *(_OWORD *)&a->oiv[8] = 0u;
  *(_OWORD *)&a->cipher = 0u;
}

int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *a)
{
  if (a->cipher)
  {
    cleanup = a->cipher->cleanup;
    if (cleanup) {
      ((void (*)(EVP_CIPHER_CTX *))cleanup)(a);
    }
  }
  OPENSSL_free(*(void **)&a->encrypt);
  *(void *)&a->final[8] = 0;
  *(_OWORD *)&a->flagunsigned int s = 0u;
  *(_OWORD *)&a->final_useunsigned int d = 0u;
  *(_OWORD *)&a->buf[24] = 0u;
  *(_OWORD *)&a->app_data = 0u;
  *(_OWORD *)&a->iv[8] = 0u;
  *(_OWORD *)&a->buf[8] = 0u;
  *(_OWORD *)&a->encrypt = 0u;
  *(_OWORD *)&a->oiv[8] = 0u;
  *(_OWORD *)&a->cipher = 0u;
  return 1;
}

int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned __int8 *key, const unsigned __int8 *iv, int enc)
{
  if (enc == -1)
  {
    uint64_t v10 = *(unsigned int *)&ctx->oiv[4];
  }
  else
  {
    uint64_t v10 = enc != 0;
    *(_DWORD *)&ctx->oiv[4] = v10;
  }
  BOOL v11 = ctx->cipher;
  if (cipher)
  {
    if (v11)
    {
      EVP_CIPHER_CTX_cleanup(ctx);
      *(_DWORD *)&ctx->oiv[4] = v10;
    }
    ctx->cipher = cipher;
    unint64_t flags_low = LODWORD(cipher->flags);
    if (flags_low)
    {
      uint64_t v13 = OPENSSL_malloc(flags_low);
      *(void *)&ctx->encrypt = v13;
      if (!v13)
      {
        ctx->cipher = 0;
        return (int)v13;
      }
      BOOL v11 = ctx->cipher;
    }
    else
    {
      *(void *)&ctx->encrypt = 0;
      BOOL v11 = cipher;
    }
    *(_DWORD *)ctx->oiv = cipher->key_len;
    *(_DWORD *)&ctx->oiv[8] = 0;
    if ((v11->flags & 0x20000000000) == 0) {
      goto LABEL_16;
    }
    if (EVP_CIPHER_CTX_ctrl(ctx, 0, 0, 0))
    {
      BOOL v11 = ctx->cipher;
      goto LABEL_16;
    }
    ctx->cipher = 0;
    int v14 = 107;
    int v15 = 178;
LABEL_27:
    ERR_put_error(30, 0, v14, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/cipher.c", v15);
LABEL_28:
    LODWORD(v13) = 0;
    return (int)v13;
  }
  if (!v11)
  {
    int v14 = 114;
    int v15 = 183;
    goto LABEL_27;
  }
LABEL_16:
  block_unsigned int size = v11->block_size;
  BOOL v17 = block_size > 0x10;
  int v18 = (1 << block_size) & 0x10102;
  if (v17 || v18 == 0) {
    EVP_CipherInit_ex_cold_1();
  }
  int flags_high = HIDWORD(v11->flags);
  if ((flags_high & 0x100) == 0)
  {
    switch(flags_high & 0x3F)
    {
      case 0:
      case 1:
        break;
      case 2:
        goto LABEL_30;
      case 3:
        ctx->key_leuint64_t n = 0;
LABEL_30:
        if (EVP_CIPHER_CTX_iv_length(ctx) >= 0x11) {
          EVP_CipherInit_ex_cold_2();
        }
        if (iv)
        {
          unsigned int v25 = EVP_CIPHER_CTX_iv_length(ctx);
          if (v25) {
            memcpy(&ctx->oiv[12], iv, v25);
          }
        }
        unsigned int v26 = EVP_CIPHER_CTX_iv_length(ctx);
        if (!v26) {
          break;
        }
        size_t v22 = v26;
        uint64_t v24 = &ctx->oiv[12];
        size_t v23 = &ctx->iv[12];
LABEL_36:
        memcpy(v23, v24, v22);
        break;
      case 4:
      case 5:
        ctx->key_leuint64_t n = 0;
        if (!iv) {
          break;
        }
        unsigned int v21 = EVP_CIPHER_CTX_iv_length(ctx);
        if (!v21) {
          break;
        }
        size_t v22 = v21;
        size_t v23 = &ctx->iv[12];
        uint64_t v24 = iv;
        goto LABEL_36;
      default:
        goto LABEL_28;
    }
  }
  size_t v27 = ctx->cipher;
  if (!key && (v27->flags & 0x8000000000) == 0
    || (LODWORD(v13) = ((uint64_t (*)(EVP_CIPHER_CTX *, const unsigned __int8 *, const unsigned __int8 *, uint64_t))v27->init)(ctx, key, iv, v10), v13))
  {
    HIDWORD(ctx->app_data) = 0;
    *(&ctx->key_len + 1) = 0;
    LODWORD(v13) = 1;
    *(_DWORD *)&ctx->final[8] = 0;
  }
  return (int)v13;
}

int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
{
  if (ctx->cipher)
  {
    uint64_t v4 = *(uint64_t (**)(void))&ctx->cipher->ctx_size;
    if (v4)
    {
      int result = v4();
      if (result != -1) {
        return result;
      }
      int v6 = 105;
      int v7 = 631;
    }
    else
    {
      int v6 = 104;
      int v7 = 625;
    }
  }
  else
  {
    int v6 = 114;
    int v7 = 620;
  }
  ERR_put_error(30, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/cipher.c", v7);
  return 0;
}

uint64_t EVP_CIPHER_CTX_mode(uint64_t a1)
{
  return *(_DWORD *)(*(void *)a1 + 20) & 0x3F;
}

int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
{
  cipher = ctx->cipher;
  if ((HIDWORD(ctx->cipher->flags) & 0x3F) == 6)
  {
    int ptr = -1431655766;
    if (EVP_CIPHER_CTX_ctrl((EVP_CIPHER_CTX *)ctx, 25, 0, &ptr) == 1) {
      return ptr;
    }
    cipher = ctx->cipher;
  }
  return cipher->iv_len;
}

int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned __int8 *key, const unsigned __int8 *iv)
{
  return EVP_CipherInit_ex(ctx, cipher, impl, key, iv, 1);
}

int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned __int8 *key, const unsigned __int8 *iv)
{
  return EVP_CipherInit_ex(ctx, cipher, impl, key, iv, 0);
}

int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl)
{
  if (*(_DWORD *)&ctx->final[8])
  {
    int v5 = 66;
    int v6 = 259;
LABEL_17:
    ERR_put_error(30, 0, v5, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/cipher.c", v6);
    return 0;
  }
  unsigned int v7 = inl;
  *(_DWORD *)&ctx->final[8] = 1;
  cipher = ctx->cipher;
  block_unsigned int size = ctx->cipher->block_size;
  if (block_size >= 2 && (block_size ^ 0x7FFFFFFF) < inl)
  {
    int v5 = 69;
    int v6 = 271;
    goto LABEL_17;
  }
  long long v12 = in;
  int v14 = out;
  if ((cipher->flags & 0x40000000000) != 0)
  {
    int v18 = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, const unsigned __int8 *, void))cipher->do_cipher)(ctx, out, in, inl);
    if (v18 < 0) {
      return 0;
    }
    *outl = v18;
    goto LABEL_35;
  }
  if (inl <= 0)
  {
    int result = 0;
    *outl = 0;
    if (!inl) {
      goto LABEL_35;
    }
    return result;
  }
  int app_data_high = HIDWORD(ctx->app_data);
  if (!app_data_high)
  {
    if (block_remainder((uint64_t)ctx, inl))
    {
      int app_data_high = HIDWORD(ctx->app_data);
      goto LABEL_12;
    }
    int result = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, const unsigned __int8 *, void))ctx->cipher->do_cipher)(ctx, v14, v12, v7);
    if (!result)
    {
      *outl = 0;
      return result;
    }
    *outl = v7;
LABEL_35:
    *(_DWORD *)&ctx->final[8] = 0;
    return 1;
  }
LABEL_12:
  if (block_size >= 33) {
    EVP_EncryptUpdate_cold_1();
  }
  if (app_data_high)
  {
    size_t v16 = block_size - (uint64_t)app_data_high;
    if ((int)v7 < (int)v16)
    {
      memcpy(&ctx->buf[app_data_high + 12], v12, v7);
      HIDWORD(ctx->app_data) += v7;
      *outl = 0;
      goto LABEL_35;
    }
    if (block_size != app_data_high) {
      memcpy(&ctx->buf[app_data_high + 12], v12, v16);
    }
    int result = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, unsigned __int8 *, void))ctx->cipher->do_cipher)(ctx, v14, &ctx->buf[12], block_size);
    if (!result) {
      return result;
    }
    v12 += v16;
    v14 += block_size;
    v7 -= v16;
  }
  else
  {
    block_unsigned int size = 0;
  }
  *outl = block_size;
  int v19 = block_remainder((uint64_t)ctx, v7);
  uint64_t v20 = v7 - v19;
  if ((int)v20 < 1)
  {
LABEL_32:
    if (v19) {
      memcpy(&ctx->buf[12], &v12[(int)v20], v19);
    }
    HIDWORD(ctx->app_data) = v19;
    goto LABEL_35;
  }
  int result = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, const unsigned __int8 *, uint64_t))ctx->cipher->do_cipher)(ctx, v14, v12, v20);
  if (result)
  {
    *outl += v20;
    goto LABEL_32;
  }
  return result;
}

uint64_t block_remainder(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(*(void *)a1 + 4);
  if (!v2) {
    block_remainder_cold_1();
  }
  if ((v2 & (v2 - 1)) != 0) {
    block_remainder_cold_2();
  }
  return (v2 - 1) & a2;
}

int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl)
{
  if (*(_DWORD *)&ctx->final[8])
  {
    int v3 = 66;
    int v4 = 352;
LABEL_3:
    ERR_put_error(30, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/cipher.c", v4);
    return 0;
  }
  cipher = ctx->cipher;
  if ((ctx->cipher->flags & 0x40000000000) != 0)
  {
    int v11 = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, void, void))cipher->do_cipher)(ctx, out, 0, 0);
    if (v11 < 0) {
      return 0;
    }
    *outl = v11;
    return 1;
  }
  block_unsigned int size = cipher->block_size;
  if (block_size >= 0x21) {
    EVP_EncryptFinal_ex_cold_1();
  }
  if (block_size == 1) {
    goto LABEL_8;
  }
  uint64_t app_data_high = HIDWORD(ctx->app_data);
  if ((ctx->oiv[9] & 8) != 0)
  {
    if (app_data_high)
    {
      int v3 = 106;
      int v4 = 378;
      goto LABEL_3;
    }
LABEL_8:
    *outl = 0;
    return 1;
  }
  if (block_size > app_data_high) {
    memset(&ctx->buf[app_data_high + 12], block_size - app_data_high, (block_size + ~app_data_high) + 1);
  }
  int result = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, unsigned __int8 *, uint64_t))cipher->do_cipher)(ctx, out, &ctx->buf[12], block_size);
  if (result)
  {
    *outl = block_size;
    return 1;
  }
  return result;
}

int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl)
{
  if (*(_DWORD *)&ctx->final[8])
  {
    int v5 = 66;
    int v6 = 402;
LABEL_22:
    ERR_put_error(30, 0, v5, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/cipher.c", v6);
    return 0;
  }
  cipher = ctx->cipher;
  block_unsigned int size = ctx->cipher->block_size;
  if (block_size >= 2 && (int)(block_size ^ 0x7FFFFFFF) < inl)
  {
    int v5 = 69;
    int v6 = 410;
    goto LABEL_22;
  }
  int v14 = out;
  if ((cipher->flags & 0x40000000000) != 0)
  {
    int v17 = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, const unsigned __int8 *, void))cipher->do_cipher)(ctx, out, in, inl);
    int v18 = v17 & ~(v17 >> 31);
    int result = v17 >= 0;
    *outl = v18;
    return result;
  }
  if (inl <= 0)
  {
    *outl = 0;
    return inl == 0;
  }
  if ((ctx->oiv[9] & 8) != 0)
  {
    return EVP_EncryptUpdate(ctx, out, outl, in, inl);
  }
  else
  {
    if (block_size >= 0x21) {
      EVP_DecryptUpdate_cold_1();
    }
    int v15 = *(&ctx->key_len + 1);
    if (v15)
    {
      if (block_size) {
        memcpy(out, &ctx->flags, block_size);
      }
      v14 += block_size;
    }
    int result = EVP_EncryptUpdate(ctx, v14, outl, in, inl);
    if (result)
    {
      if (block_size < 2 || HIDWORD(ctx->app_data))
      {
        *(&ctx->key_len + 1) = 0;
        if (!v15) {
          return 1;
        }
      }
      else
      {
        *outl -= block_size;
        *(&ctx->key_len + 1) = 1;
        memcpy(&ctx->flags, &v14[*outl], block_size);
        if (!v15) {
          return 1;
        }
      }
      *outl += block_size;
      return 1;
    }
  }
  return result;
}

int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned __int8 *outm, int *outl)
{
  *outl = 0;
  if (*(_DWORD *)&ctx->final[8])
  {
    int v3 = 66;
    int v4 = 469;
LABEL_3:
    ERR_put_error(30, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/cipher.c", v4);
    return 0;
  }
  cipher = ctx->cipher;
  if ((ctx->cipher->flags & 0x40000000000) != 0)
  {
    int v9 = ((uint64_t (*)(void))cipher->do_cipher)();
    if (v9 < 0) {
      return 0;
    }
    *outl = v9;
  }
  else if ((ctx->oiv[9] & 8) != 0)
  {
    if (HIDWORD(ctx->app_data))
    {
      int v3 = 106;
      int v4 = 486;
      goto LABEL_3;
    }
  }
  else
  {
    block_unsigned int size = cipher->block_size;
    if (block_size >= 2)
    {
      if (HIDWORD(ctx->app_data) || !*(&ctx->key_len + 1))
      {
        int v3 = 123;
        int v4 = 495;
        goto LABEL_3;
      }
      if (block_size >= 0x21) {
        EVP_DecryptFinal_ex_cold_1();
      }
      uint64_t v10 = block_size - 1;
      unsigned int v11 = *((unsigned __int8 *)&ctx->flags + v10);
      if (*((unsigned char *)&ctx->flags + v10)) {
        BOOL v12 = block_size >= v11;
      }
      else {
        BOOL v12 = 0;
      }
      if (!v12)
      {
        int v3 = 101;
        int v4 = 504;
        goto LABEL_3;
      }
      int v13 = *((unsigned __int8 *)&ctx->flags + v10);
      do
      {
        if (*((unsigned __int8 *)&ctx->flags + v10) != v11)
        {
          int v3 = 101;
          int v4 = 510;
          goto LABEL_3;
        }
        LODWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v10 - 1;
        --v13;
      }
      while (v13);
      uint64_t v14 = block_size - v11;
      if ((int)v14 >= 1)
      {
        p_flagunsigned int s = &ctx->flags;
        uint64_t v16 = v14;
        do
        {
          unsigned __int8 v17 = *(unsigned char *)p_flags;
          p_flagunsigned int s = (unint64_t *)((char *)p_flags + 1);
          *outm++ = v17;
          --v16;
        }
        while (v16);
      }
      *outl = v14;
    }
  }
  return 1;
}

int EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx)
{
  return ctx->cipher->block_size;
}

int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad)
{
  *(_DWORD *)&c->oiv[8] = *(_DWORD *)&c->oiv[8] & 0xFFFFF7FF | ((pad == 0) << 11);
  return 1;
}

int EVP_CIPHER_key_length(const EVP_CIPHER *cipher)
{
  return cipher->key_len;
}

int EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)
{
  return cipher->iv_len;
}

uint64_t ec_GFp_simple_group_get_curve(uint64_t a1, BIGNUM *a, BIGNUM *a3, BIGNUM *a4)
{
  if (!a || (uint64_t result = (uint64_t)BN_copy(a, (const BIGNUM *)(a1 + 320))) != 0)
  {
    if (!a3 || (uint64_t result = ec_felem_to_bignum(a1, a3, a1 + 360), result))
    {
      if (!a4) {
        return 1;
      }
      uint64_t result = ec_felem_to_bignum(a1, a4, a1 + 432);
      if (result) {
        return 1;
      }
    }
  }
  return result;
}

double ec_GFp_simple_point_set_to_infinity(uint64_t a1, uint64_t a2)
{
  return ec_GFp_simple_point_init(a2);
}

unint64_t ec_GFp_simple_invert(uint64_t a1, uint64_t a2)
{
  return ec_felem_neg(a1, (unint64_t *)(a2 + 72), (const unint64_t *)(a2 + 72));
}

BOOL ec_GFp_simple_is_on_curve(_DWORD *a1, uint64_t a2)
{
  int v5 = *(void (**)(_DWORD *, _OWORD *, _OWORD *, _OWORD *))(*(void *)a1 + 88);
  int v4 = *(void (**)(_DWORD *, _OWORD *, uint64_t))(*(void *)a1 + 96);
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[2] = v6;
  void v17[3] = v6;
  v17[0] = v6;
  v17[1] = v6;
  v4(a1, v17, a2);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15[2] = v7;
  _OWORD v15[3] = v7;
  v15[0] = v7;
  v15[1] = v7;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13[2] = v7;
  _OWORD v13[3] = v7;
  v13[0] = v7;
  v13[1] = v7;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v11[2] = v7;
  _OWORD v11[3] = v7;
  uint64_t v8 = (uint64_t *)(a2 + 144);
  v11[0] = v7;
  v11[1] = v7;
  v4(a1, v15, a2 + 144);
  v4(a1, v13, (uint64_t)v15);
  v5(a1, v11, v13, v15);
  if (a1[132])
  {
    ec_felem_add((uint64_t)a1, (unint64_t *)v15, (const unint64_t *)v13, (const unint64_t *)v13);
    ec_felem_add((uint64_t)a1, (unint64_t *)v15, (const unint64_t *)v15, (const unint64_t *)v13);
    ec_felem_sub((uint64_t)a1, (unint64_t *)v17, (const unint64_t *)v17, (const unint64_t *)v15);
  }
  else
  {
    v5(a1, v15, v13, a1 + 90);
    ec_felem_add((uint64_t)a1, (unint64_t *)v17, (const unint64_t *)v17, (const unint64_t *)v15);
  }
  v5(a1, v17, v17, (_OWORD *)a2);
  v5(a1, v15, (_OWORD *)a1 + 27, v11);
  ec_felem_add((uint64_t)a1, (unint64_t *)v17, (const unint64_t *)v17, (const unint64_t *)v15);
  v4(a1, v15, a2 + 72);
  ec_felem_sub((uint64_t)a1, (unint64_t *)v15, (const unint64_t *)v15, (const unint64_t *)v17);
  int v9 = ec_felem_non_zero_mask((uint64_t)a1, (uint64_t *)v15);
  return (ec_felem_non_zero_mask((uint64_t)a1, v8) & v9 & 1) == 0;
}

uint64_t ec_GFp_simple_points_equal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  long long v7 = *(void (**)(uint64_t, _OWORD *, _OWORD *, uint64_t *))(*(void *)a1 + 88);
  long long v6 = *(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 96);
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v19[2] = v8;
  _OWORD v19[3] = v8;
  v19[0] = v8;
  v19[1] = v8;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  v17[2] = v8;
  void v17[3] = v8;
  v17[0] = v8;
  v17[1] = v8;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  long long v15[2] = v8;
  _OWORD v15[3] = v8;
  v15[0] = v8;
  v15[1] = v8;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13[2] = v8;
  _OWORD v13[3] = v8;
  int v9 = (uint64_t *)(a3 + 144);
  v13[0] = v8;
  v13[1] = v8;
  v6(a1, v13, a3 + 144);
  v7(a1, v19, (_OWORD *)a2, (uint64_t *)v13);
  uint64_t v10 = (uint64_t *)(a2 + 144);
  v6(a1, v15, a2 + 144);
  v7(a1, v17, (_OWORD *)v3, (uint64_t *)v15);
  ec_felem_sub(a1, (unint64_t *)v19, (const unint64_t *)v19, (const unint64_t *)v17);
  LODWORD(v6) = ec_felem_non_zero_mask(a1, (uint64_t *)v19);
  v7(a1, v13, v13, v9);
  v7(a1, v19, (_OWORD *)(a2 + 72), (uint64_t *)v13);
  v7(a1, v15, v15, (uint64_t *)(a2 + 144));
  v7(a1, v17, (_OWORD *)(v3 + 72), (uint64_t *)v15);
  ec_felem_sub(a1, (unint64_t *)v19, (const unint64_t *)v19, (const unint64_t *)v17);
  LODWORD(a2) = ec_felem_non_zero_mask(a1, (uint64_t *)v19) | v6;
  LODWORD(v3) = ec_felem_non_zero_mask(a1, v10);
  int v11 = ec_felem_non_zero_mask(a1, v9);
  return (v3 & ~(_BYTE)a2) & v11 & 1 | (((v11 | v3) & 1) == 0);
}

uint64_t ec_GFp_simple_cmp_x_coordinate(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = ec_felem_non_zero_mask(a1, (uint64_t *)(a2 + 144));
  if (result)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    _OWORD v8[2] = v7;
    _OWORD v8[3] = v7;
    v8[0] = v7;
    v8[1] = v7;
    uint64_t result = ec_get_x_coordinate_as_scalar(a1, (unint64_t *)v8, a2);
    if (result) {
      return ec_scalar_equal_vartime(a1, v8, a3);
    }
  }
  return result;
}

void bn_mont_ctx_init(uint64_t a1)
{
  *(_OWORD *)(a1 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = 0u;
  *(_OWORD *)(a1 + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  BN_init((BIGNUM *)a1);

  BN_init((BIGNUM *)(a1 + 24));
}

void bn_mont_ctx_cleanup(BIGNUM *a1)
{
  BN_free(a1);

  BN_free(a1 + 1);
}

BN_MONT_CTX *BN_MONT_CTX_new(void)
{
  uint64_t v0 = (BN_MONT_CTX *)OPENSSL_malloc(0x40uLL);
  uint64_t v1 = v0;
  if (v0) {
    bn_mont_ctx_init((uint64_t)v0);
  }
  return v1;
}

uint64_t bn_mont_ctx_set_N_and_n0(uint64_t a1, const BIGNUM *a2)
{
  if (BN_is_zero((uint64_t)a2))
  {
    int v4 = 105;
    int v5 = 170;
LABEL_3:
    ERR_put_error(3, 0, v4, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/montgomery.c", v5);
    return 0;
  }
  if (!BN_is_odd((uint64_t)a2))
  {
    int v4 = 104;
    int v5 = 174;
    goto LABEL_3;
  }
  if (BN_is_negative((uint64_t)a2))
  {
    int v4 = 109;
    int v5 = 178;
    goto LABEL_3;
  }
  if (!bn_fits_in_words((uint64_t)a2, 0x400uLL))
  {
    int v4 = 102;
    int v5 = 182;
    goto LABEL_3;
  }
  if (!BN_copy((BIGNUM *)(a1 + 24), a2))
  {
    int v4 = 68;
    int v5 = 188;
    goto LABEL_3;
  }
  bn_set_minimal_width(a1 + 24);
  *(void *)(a1 + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = bn_mont_n0((unint64_t **)(a1 + 24));
  *(void *)(a1 + 56) = 0;
  return 1;
}

BN_MONT_CTX *BN_MONT_CTX_new_consttime(const BIGNUM *a1, BN_CTX *a2)
{
  int v4 = BN_MONT_CTX_new();
  int v5 = v4;
  if (!v4
    || !bn_mont_ctx_set_N_and_n0((uint64_t)v4, a1)
    || !bn_mont_ctx_set_RR_consttime((BIGNUM *)v5, a2))
  {
    BN_MONT_CTX_free(v5);
    return 0;
  }
  return v5;
}

uint64_t BN_to_montgomery(BIGNUM *a1, const BIGNUM *a2, BIGNUM *mont, BN_CTX *ctx)
{
  return BN_mod_mul_montgomery(a1, a2, mont, (BN_MONT_CTX *)mont, ctx);
}

int BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_MONT_CTX *mont, BN_CTX *ctx)
{
  if (!a->neg && !b->neg)
  {
    BN_CTX_start(ctx);
    unint64_t v12 = BN_CTX_get(ctx);
    if (v12)
    {
      uint64_t v13 = (uint64_t)v12;
      if (a == b)
      {
        if (bn_sqr_consttime(v12, (BIGNUM *)a, ctx)) {
          goto LABEL_8;
        }
      }
      else if (bn_mul_consttime(v12, (BIGNUM *)a, (BIGNUM *)b, ctx))
      {
LABEL_8:
        int v6 = BN_from_montgomery_word((uint64_t)r, v13, (uint64_t)mont);
LABEL_11:
        BN_CTX_end(ctx);
        return v6;
      }
    }
    int v6 = 0;
    goto LABEL_11;
  }
  ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/montgomery.c", 421);
  return 0;
}

int BN_from_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  long long v8 = BN_CTX_get(ctx);
  if (v8 && (uint64_t v9 = (uint64_t)v8, BN_copy(v8, a))) {
    int v10 = BN_from_montgomery_word((uint64_t)r, v9, (uint64_t)mont);
  }
  else {
    int v10 = 0;
  }
  BN_CTX_end(ctx);
  return v10;
}

uint64_t BN_from_montgomery_word(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 16))
  {
    ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/montgomery.c", 323);
    return 0;
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 32);
    if (v6)
    {
      uint64_t result = bn_resize_words(a2, 2 * v6);
      if (result)
      {
        uint64_t result = bn_wexpand((void **)a1, *(int *)(a3 + 32));
        if (result)
        {
          unint64_t v8 = *(int *)(a3 + 32);
          *(_DWORD *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v8;
          *(_DWORD *)(a1 + 16) = 0;
          uint64_t v9 = *(unint64_t **)a1;
          int v10 = *(unint64_t **)a2;
          uint64_t v11 = *(int *)(a2 + 8);
          return bn_from_montgomery_in_place(v9, v8, v10, v11, a3);
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
      return 1;
    }
  }
  return result;
}

uint64_t bn_one_to_montgomery(BIGNUM *r, BIGNUM *a, BN_CTX *ctx)
{
  unint64_t top = a[1].top;
  if ((int)top >= 1 && (a[1].d[(top - 1)] & 0x8000000000000000) != 0)
  {
    uint64_t result = bn_wexpand(&r->d, top);
    if (result)
    {
      unsigned int d = a[1].d;
      unint64_t v8 = r->d;
      *r->unsigned int d = -(uint64_t)*d;
      uint64_t v9 = a[1].top;
      if ((int)v9 >= 2)
      {
        int v10 = (uint64_t *)(v8 + 1);
        uint64_t v11 = (uint64_t *)(d + 1);
        uint64_t v12 = v9 - 1;
        do
        {
          uint64_t v13 = *v11++;
          *v10++ = ~v13;
          --v12;
        }
        while (v12);
      }
      r->unint64_t top = v9;
      r->neg = 0;
      return 1;
    }
  }
  else
  {
    return BN_from_montgomery(r, a, (BN_MONT_CTX *)a, ctx);
  }
  return result;
}

int SHA384_Init(SHA512_CTX *c)
{
  *(_OWORD *)c->h = xmmword_1BA189FF0;
  *(_OWORD *)&c->h[2] = xmmword_1BA18A000;
  *(_OWORD *)&c->h[4] = xmmword_1BA18A010;
  *(_OWORD *)&c->h[6] = xmmword_1BA18A020;
  c->Nl = 0;
  c->Nh = 0;
  *(void *)&c->uint64_t num = 0x3000000000;
  return 1;
}

int SHA512_Init(SHA512_CTX *c)
{
  *(_OWORD *)c->h = xmmword_1BA18A030;
  *(_OWORD *)&c->h[2] = xmmword_1BA18A040;
  *(_OWORD *)&c->h[4] = xmmword_1BA18A050;
  *(_OWORD *)&c->h[6] = xmmword_1BA18A060;
  c->Nl = 0;
  c->Nh = 0;
  *(void *)&c->uint64_t num = 0x4000000000;
  return 1;
}

unsigned __int8 *__cdecl SHA512(const unsigned __int8 *d, size_t n, unsigned __int8 *md)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v6.u.p[96] = v4;
  *(_OWORD *)&v6.u.p[112] = v4;
  *(_OWORD *)&v6.u.p[64] = v4;
  *(_OWORD *)&v6.u.p[80] = v4;
  *(_OWORD *)&v6.u.p[32] = v4;
  *(_OWORD *)&v6.u.p[48] = v4;
  *(_OWORD *)v6.u.unsigned int d = v4;
  *(_OWORD *)&v6.u.p[16] = v4;
  *(_OWORD *)v6.h = xmmword_1BA18A030;
  *(_OWORD *)&v6.h[2] = xmmword_1BA18A040;
  *(_OWORD *)&v6.h[4] = xmmword_1BA18A050;
  *(_OWORD *)&v6.h[6] = xmmword_1BA18A060;
  v6.Nl = 0;
  v6.Nh = 0;
  *(void *)&v6.uint64_t num = 0x4000000000;
  SHA512_Update(&v6, d, n);
  sha512_final_impl(md, v6.md_len, (int8x16_t *)&v6);
  OPENSSL_cleanse(&v6, 0xD8uLL);
  return md;
}

int SHA512_Update(SHA512_CTX *c, const void *data, size_t len)
{
  if (len)
  {
    size_t v3 = len;
    long long v4 = (unint64_t *)data;
    p_u = &c->u;
    *(_OWORD *)&c->Nl += __PAIR128__(len >> 61, 8 * len);
    uint64_t num = c->num;
    if (num)
    {
      uint64_t v8 = 128 - num;
      size_t v9 = len - (128 - num);
      if (len < 128 - num)
      {
        memcpy((char *)p_u + num, data, len);
        LODWORD(v3) = c->num + v3;
LABEL_12:
        c->uint64_t num = v3;
        return 1;
      }
      if (num != 128) {
        memcpy((char *)p_u + num, data, 128 - num);
      }
      c->uint64_t num = 0;
      long long v4 = (unint64_t *)((char *)v4 + v8);
      sha512_block_data_order((unint64_t)c, p_u->d, 1);
      size_t v3 = v9;
    }
    if (v3 >= 0x80)
    {
      sha512_block_data_order((unint64_t)c, v4, v3 >> 7);
      int v10 = (char *)v4 + v3;
      v3 &= 0x7Fu;
      long long v4 = (unint64_t *)&v10[-v3];
    }
    if (v3)
    {
      memcpy(p_u, v4, v3);
      goto LABEL_12;
    }
  }
  return 1;
}

int SHA512_Final(unsigned __int8 *md, SHA512_CTX *c)
{
  return sha512_final_impl(md, c->md_len, (int8x16_t *)c);
}

uint64_t sha512_final_impl(void *a1, unint64_t a2, int8x16_t *a3)
{
  size_t v3 = a3;
  SHA512_CTX v6 = (unint64_t *)&a3[5];
  uint64_t v7 = a3[13].u32[0];
  a3[5].i8[v7] = 0x80;
  uint64_t v8 = v7 + 1;
  if (v7 < 0x70)
  {
    if (v7 == 111) {
      goto LABEL_7;
    }
  }
  else
  {
    if (v7 != 127) {
      bzero((char *)v6 + v8, 127 - v7);
    }
    sha512_block_data_order((unint64_t)v3, v6, 1);
    uint64_t v8 = 0;
  }
  bzero((char *)v6 + v8, 112 - v8);
LABEL_7:
  int8x16_t v9 = vrev64q_s8(v3[4]);
  v3[12] = vextq_s8(v9, v9, 8uLL);
  sha512_block_data_order((unint64_t)v3, v6, 1);
  if (!a1) {
    return 0;
  }
  if ((a2 & 7) != 0) {
    sha512_final_impl_cold_1();
  }
  if (a2 >= 8)
  {
    unint64_t v10 = a2 >> 3;
    do
    {
      unint64_t v11 = v3->i64[0];
      size_t v3 = (int8x16_t *)((char *)v3 + 8);
      *a1++ = bswap64(v11);
      --v10;
    }
    while (v10);
  }
  return 1;
}

void SHA512_Transform(SHA512_CTX *c, const unsigned __int8 *data)
{
}

unint64_t sha512_block_data_order(unint64_t result, unint64_t *a2, uint64_t a3)
{
  __int16 v123 = (void *)result;
  if (a3)
  {
    uint64_t v4 = *(void *)result;
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v5 = *(void *)(result + 24);
    uint64_t v8 = *(void *)(result + 32);
    unint64_t v7 = *(void *)(result + 40);
    uint64_t v10 = *(void *)(result + 48);
    uint64_t v9 = *(void *)(result + 56);
    do
    {
      uint64_t v132 = a3;
      unint64_t v138 = 0;
      unint64_t v139 = bswap64(*a2);
      uint64_t v124 = v9;
      uint64_t v11 = v9
          + (v8 & v7)
          + (v10 & ~v8)
          + v139
          + (__ROR8__(v8, 14) ^ __ROR8__(v8, 18) ^ __ROR8__(v8, 41))
          + 0x428A2F98D728AE22;
      uint64_t v128 = v5;
      uint64_t v12 = v11 + v5;
      uint64_t v13 = (__ROR8__(v4, 28) ^ __ROR8__(v4, 34) ^ __ROR8__(v4, 39)) + ((v3 ^ v6) & v4 ^ v3 & v6) + v11;
      unint64_t v14 = bswap64(a2[1]);
      uint64_t v125 = v10;
      uint64_t v15 = v10
          + v14
          + (v7 & ~v12)
          + (v12 & v8)
          + 0x7137449123EF65CDLL
          + (__ROR8__(v12, 14) ^ __ROR8__(v12, 18) ^ __ROR8__(v12, 41));
      uint64_t v129 = v6;
      uint64_t v16 = v15 + v6;
      uint64_t v17 = (__ROR8__(v13, 28) ^ __ROR8__(v13, 34) ^ __ROR8__(v13, 39)) + (v13 & (v4 ^ v3) ^ v4 & v3) + v15;
      unint64_t v18 = bswap64(a2[2]);
      unint64_t v126 = v7;
      uint64_t v19 = v7
          + v18
          + (v8 & ~v16)
          + (v16 & v12)
          - 0x4A3F043013B2C4D1
          + (__ROR8__(v15 + v6, 14) ^ __ROR8__(v15 + v6, 18) ^ __ROR8__(v16, 41));
      uint64_t v130 = v3;
      uint64_t v20 = v19 + v3;
      uint64_t v21 = (__ROR8__(v17, 28) ^ __ROR8__(v17, 34) ^ __ROR8__(v17, 39)) + (v17 & (v13 ^ v4) ^ v13 & v4) + v19;
      unint64_t v22 = bswap64(a2[3]);
      uint64_t v127 = v8;
      uint64_t v23 = v8
          + v22
          + (v12 & ~v20)
          + (v20 & v16)
          - 0x164A245A7E762444
          + (__ROR8__(v20, 14) ^ __ROR8__(v20, 18) ^ __ROR8__(v20, 41));
      uint64_t v131 = v4;
      uint64_t v24 = v23 + v4;
      uint64_t v25 = (__ROR8__(v21, 28) ^ __ROR8__(v21, 34) ^ __ROR8__(v21, 39)) + (v21 & (v17 ^ v13) ^ v17 & v13) + v23;
      unint64_t v26 = bswap64(a2[4]);
      uint64_t v27 = v12
          + v26
          + (v16 & ~v24)
          + (v24 & v20)
          + 0x3956C25BF348B538
          + (__ROR8__(v24, 14) ^ __ROR8__(v24, 18) ^ __ROR8__(v24, 41));
      uint64_t v28 = v27 + v13;
      uint64_t v29 = (__ROR8__(v25, 28) ^ __ROR8__(v25, 34) ^ __ROR8__(v25, 39)) + (v25 & (v21 ^ v17) ^ v21 & v17) + v27;
      unint64_t v30 = bswap64(a2[5]);
      uint64_t v31 = v30
          + v16
          + (v20 & ~v28)
          + (v28 & v24)
          + 0x59F111F1B605D019
          + (__ROR8__(v28, 14) ^ __ROR8__(v28, 18) ^ __ROR8__(v28, 41));
      uint64_t v32 = v31 + v17;
      uint64_t v33 = (__ROR8__(v29, 28) ^ __ROR8__(v29, 34) ^ __ROR8__(v29, 39)) + (v29 & (v25 ^ v21) ^ v25 & v21) + v31;
      unint64_t v34 = bswap64(a2[6]);
      uint64_t v35 = v34
          + v20
          + (v24 & ~v32)
          + (v32 & v28)
          - 0x6DC07D5B50E6B065
          + (__ROR8__(v32, 14) ^ __ROR8__(v32, 18) ^ __ROR8__(v32, 41));
      uint64_t v36 = v35 + v21;
      uint64_t v37 = (__ROR8__(v33, 28) ^ __ROR8__(v33, 34) ^ __ROR8__(v33, 39)) + (v33 & (v29 ^ v25) ^ v29 & v25) + v35;
      unint64_t v137 = bswap64(a2[7]);
      uint64_t v38 = v137
          + v24
          + (v28 & ~v36)
          + (v36 & v32)
          - 0x54E3A12A25927EE8
          + (__ROR8__(v36, 14) ^ __ROR8__(v36, 18) ^ __ROR8__(v36, 41));
      uint64_t v39 = v38 + v25;
      uint64_t v40 = (__ROR8__(v37, 28) ^ __ROR8__(v37, 34) ^ __ROR8__(v37, 39)) + (v37 & (v33 ^ v29) ^ v33 & v29) + v38;
      unint64_t v136 = bswap64(a2[8]);
      uint64_t v41 = v136
          + v28
          + (v32 & ~v39)
          + (v39 & v36)
          - 0x27F855675CFCFDBELL
          + (__ROR8__(v39, 14) ^ __ROR8__(v39, 18) ^ __ROR8__(v39, 41));
      uint64_t v42 = v41 + v29;
      uint64_t v43 = (__ROR8__(v40, 28) ^ __ROR8__(v40, 34) ^ __ROR8__(v40, 39)) + (v40 & (v37 ^ v33) ^ v37 & v33) + v41;
      unint64_t v135 = bswap64(a2[9]);
      uint64_t v44 = v135
          + v32
          + (v36 & ~v42)
          + (v42 & v39)
          + 0x12835B0145706FBELL
          + (__ROR8__(v42, 14) ^ __ROR8__(v42, 18) ^ __ROR8__(v42, 41));
      uint64_t v45 = v44 + v33;
      uint64_t v46 = (__ROR8__(v43, 28) ^ __ROR8__(v43, 34) ^ __ROR8__(v43, 39)) + (v43 & (v40 ^ v37) ^ v40 & v37) + v44;
      unint64_t v134 = bswap64(a2[10]);
      uint64_t v47 = v134
          + v36
          + (v39 & ~v45)
          + (v45 & v42)
          + 0x243185BE4EE4B28CLL
          + (__ROR8__(v45, 14) ^ __ROR8__(v45, 18) ^ __ROR8__(v45, 41));
      uint64_t v48 = v47 + v37;
      uint64_t v49 = (__ROR8__(v46, 28) ^ __ROR8__(v46, 34) ^ __ROR8__(v46, 39)) + (v46 & (v43 ^ v40) ^ v43 & v40) + v47;
      unint64_t v50 = bswap64(a2[11]);
      uint64_t v51 = v50
          + v39
          + (v42 & ~v48)
          + (v48 & v45)
          + 0x550C7DC3D5FFB4E2
          + (__ROR8__(v48, 14) ^ __ROR8__(v48, 18) ^ __ROR8__(v48, 41));
      uint64_t v52 = v51 + v40;
      uint64_t v53 = (__ROR8__(v49, 28) ^ __ROR8__(v49, 34) ^ __ROR8__(v49, 39)) + (v49 & (v46 ^ v43) ^ v46 & v43) + v51;
      unint64_t v54 = bswap64(a2[12]);
      uint64_t v55 = v54
          + v42
          + (v45 & ~v52)
          + (v52 & v48)
          + 0x72BE5D74F27B896FLL
          + (__ROR8__(v52, 14) ^ __ROR8__(v52, 18) ^ __ROR8__(v52, 41));
      uint64_t v56 = v55 + v43;
      uint64_t v57 = (__ROR8__(v53, 28) ^ __ROR8__(v53, 34) ^ __ROR8__(v53, 39)) + (v53 & (v49 ^ v46) ^ v49 & v46) + v55;
      unint64_t v58 = bswap64(a2[13]);
      uint64_t v59 = v58
          + v45
          + (v48 & ~v56)
          + (v56 & v52)
          - 0x7F214E01C4E9694FLL
          + (__ROR8__(v55 + v43, 14) ^ __ROR8__(v55 + v43, 18) ^ __ROR8__(v56, 41));
      uint64_t v60 = v59 + v46;
      uint64_t v61 = (__ROR8__(v57, 28) ^ __ROR8__(v57, 34) ^ __ROR8__(v57, 39)) + (v57 & (v53 ^ v49) ^ v53 & v49) + v59;
      unint64_t v62 = bswap64(a2[14]);
      uint64_t v63 = v62
          + v48
          + (v52 & ~v60)
          + (v60 & v56)
          - 0x6423F958DA38EDCBLL
          + (__ROR8__(v59 + v46, 14) ^ __ROR8__(v59 + v46, 18) ^ __ROR8__(v60, 41));
      uint64_t result = v63 + v49;
      uint64_t v64 = (__ROR8__(v61, 28) ^ __ROR8__(v61, 34) ^ __ROR8__(v61, 39)) + (v61 & (v57 ^ v53) ^ v57 & v53) + v63;
      unint64_t v65 = bswap64(a2[15]);
      uint64_t v66 = v65
          + v52
          + (v56 & ~result)
          + (result & v60)
          - 0x3E640E8B3096D96CLL
          + (__ROR8__(result, 14) ^ __ROR8__(result, 18) ^ __ROR8__(result, 41));
      unint64_t v67 = v139;
      uint64_t v68 = v66 + v53;
      uint64_t v69 = (__ROR8__(v64, 28) ^ __ROR8__(v64, 34) ^ __ROR8__(v64, 39)) + (v64 & (v61 ^ v57) ^ v61 & v57) + v66;
      long long v70 = &qword_1BA18A178;
      do
      {
        unint64_t v133 = v50;
        unint64_t v71 = v135
            + v67
            + (__ROR8__(v62, 19) ^ __ROR8__(v62, 61) ^ (v62 >> 6))
            + (__ROR8__(v14, 1) ^ __ROR8__(v14, 8) ^ (v14 >> 7));
        unint64_t v72 = (v68 & result)
            + v56
            + (v60 & ~v68)
            + (__ROR8__(v68, 14) ^ __ROR8__(v68, 18) ^ __ROR8__(v68, 41))
            + *(v70 - 15)
            + v71;
        unint64_t v73 = v72 + v57;
        unint64_t v74 = (__ROR8__(v69, 28) ^ __ROR8__(v69, 34) ^ __ROR8__(v69, 39)) + ((v64 ^ v61) & v69 ^ v64 & v61) + v72;
        unint64_t v75 = v54;
        unint64_t v76 = v134
            + v14
            + (__ROR8__(v65, 19) ^ __ROR8__(v65, 61) ^ (v65 >> 6))
            + (__ROR8__(v18, 1) ^ __ROR8__(v18, 8) ^ (v18 >> 7));
        unint64_t v77 = v76
            + v60
            + *(v70 - 14)
            + (result & ~v73)
            + (v73 & v68)
            + (__ROR8__(v73, 14) ^ __ROR8__(v73, 18) ^ __ROR8__(v73, 41));
        unint64_t v78 = v77 + v61;
        unint64_t v79 = (__ROR8__(v74, 28) ^ __ROR8__(v74, 34) ^ __ROR8__(v74, 39)) + (v74 & (v69 ^ v64) ^ v69 & v64) + v77;
        unint64_t v140 = v71;
        unint64_t v80 = v18
            + v50
            + (__ROR8__(v22, 1) ^ __ROR8__(v22, 8) ^ (v22 >> 7))
            + (__ROR8__(v71, 19) ^ __ROR8__(v71, 61) ^ (v71 >> 6));
        long long v81 = (char *)(v80
                     + result
                     + *(v70 - 13)
                     + (v68 & ~v78)
                     + (v78 & v73)
                     + (__ROR8__(v77 + v61, 14) ^ __ROR8__(v77 + v61, 18) ^ __ROR8__(v78, 41)));
        long long v82 = &v81[v64];
        long long v83 = &v81[(__ROR8__(v79, 28) ^ __ROR8__(v79, 34) ^ __ROR8__(v79, 39)) + (v79 & (v74 ^ v69) ^ v74 & v69)];
        unint64_t v84 = v22
            + v54
            + (__ROR8__(v26, 1) ^ __ROR8__(v26, 8) ^ (v26 >> 7))
            + (__ROR8__(v76, 19) ^ __ROR8__(v76, 61) ^ (v76 >> 6));
        uint64_t v85 = v84
            + v68
            + *(v70 - 12)
            + (v73 & ~(unint64_t)v82)
            + ((unint64_t)v82 & v78)
            + (__ROR8__(&v81[v64], 14) ^ __ROR8__(&v81[v64], 18) ^ __ROR8__(&v81[v64], 41));
        uint64_t v86 = v85 + v69;
        uint64_t v87 = (__ROR8__(v83, 28) ^ __ROR8__(v83, 34) ^ __ROR8__(v83, 39))
            + ((unint64_t)v83 & (v79 ^ v74) ^ v79 & v74)
            + v85;
        v26 += v58
             + (__ROR8__(v30, 1) ^ __ROR8__(v30, 8) ^ (v30 >> 7))
             + (__ROR8__(v80, 19) ^ __ROR8__(v80, 61) ^ (v80 >> 6));
        unint64_t v88 = v73
            + *(v70 - 11)
            + v26
            + (v78 & ~v86)
            + (v86 & (unint64_t)v82)
            + (__ROR8__(v85 + v69, 14) ^ __ROR8__(v85 + v69, 18) ^ __ROR8__(v86, 41));
        unint64_t v89 = v88 + v74;
        unint64_t v90 = (__ROR8__(v87, 28) ^ __ROR8__(v87, 34) ^ __ROR8__(v87, 39))
            + (v87 & ((unint64_t)v83 ^ v79) ^ (unint64_t)v83 & v79)
            + v88;
        v30 += v62
             + (__ROR8__(v34, 1) ^ __ROR8__(v34, 8) ^ (v34 >> 7))
             + (__ROR8__(v84, 19) ^ __ROR8__(v84, 61) ^ (v84 >> 6));
        unint64_t v91 = *(v70 - 10)
            + v78
            + v30
            + ((unint64_t)v82 & ~v89)
            + (v89 & v86)
            + (__ROR8__(v89, 14) ^ __ROR8__(v89, 18) ^ __ROR8__(v89, 41));
        unint64_t v92 = v91 + v79;
        unint64_t v93 = (__ROR8__(v90, 28) ^ __ROR8__(v90, 34) ^ __ROR8__(v90, 39))
            + (v90 & (v87 ^ (unint64_t)v83) ^ v87 & (unint64_t)v83)
            + v91;
        v34 += v65
             + (__ROR8__(v137, 1) ^ __ROR8__(v137, 8) ^ (v137 >> 7))
             + (__ROR8__(v26, 19) ^ __ROR8__(v26, 61) ^ (v26 >> 6));
        unint64_t v94 = (unint64_t)&v82[*(v70 - 9)
                                   + v34
                                   + (v86 & ~v92)
                                   + (v92 & v89)
                                   + (__ROR8__(v92, 14) ^ __ROR8__(v92, 18) ^ __ROR8__(v92, 41))];
        long long v95 = &v83[v94];
        unint64_t v96 = (__ROR8__(v93, 28) ^ __ROR8__(v93, 34) ^ __ROR8__(v93, 39)) + (v93 & (v90 ^ v87) ^ v90 & v87) + v94;
        unint64_t v97 = (__ROR8__(v136, 1) ^ __ROR8__(v136, 8) ^ (v136 >> 7))
            + v137
            + v140
            + (__ROR8__(v30, 19) ^ __ROR8__(v30, 61) ^ (v30 >> 6));
        uint64_t v98 = *(v70 - 8)
            + v97
            + v86
            + (v89 & ~(unint64_t)v95)
            + ((unint64_t)v95 & v92)
            + (__ROR8__(&v83[v94], 14) ^ __ROR8__(&v83[v94], 18) ^ __ROR8__(v95, 41));
        uint64_t v99 = v98 + v87;
        uint64_t v100 = (__ROR8__(v96, 28) ^ __ROR8__(v96, 34) ^ __ROR8__(v96, 39)) + (v96 & (v93 ^ v90) ^ v93 & v90) + v98;
        unint64_t v101 = (__ROR8__(v135, 1) ^ __ROR8__(v135, 8) ^ (v135 >> 7))
             + v136
             + v76
             + (__ROR8__(v34, 19) ^ __ROR8__(v34, 61) ^ (v34 >> 6));
        uint64_t v102 = v101
             + *(v70 - 7)
             + v89
             + (v92 & ~v99)
             + (v99 & (unint64_t)v95)
             + (__ROR8__(v99, 14) ^ __ROR8__(v99, 18) ^ __ROR8__(v99, 41));
        unint64_t v103 = v102 + v90;
        uint64_t v104 = (__ROR8__(v100, 28) ^ __ROR8__(v100, 34) ^ __ROR8__(v100, 39)) + (v100 & (v96 ^ v93) ^ v96 & v93) + v102;
        unint64_t v105 = (__ROR8__(v134, 1) ^ __ROR8__(v134, 8) ^ (v134 >> 7))
             + v135
             + v80
             + (__ROR8__(v97, 19) ^ __ROR8__(v97, 61) ^ (v97 >> 6));
        uint64_t v106 = v105
             + *(v70 - 6)
             + v92
             + ((unint64_t)v95 & ~v103)
             + (v103 & v99)
             + (__ROR8__(v103, 14) ^ __ROR8__(v103, 18) ^ __ROR8__(v103, 41));
        unint64_t v107 = v106 + v93;
        uint64_t v108 = (__ROR8__(v104, 28) ^ __ROR8__(v104, 34) ^ __ROR8__(v104, 39))
             + (v104 & (v100 ^ v96) ^ v100 & v96)
             + v106;
        unint64_t v109 = (__ROR8__(v133, 1) ^ __ROR8__(v133, 8) ^ (v133 >> 7))
             + v134
             + v84
             + (__ROR8__(v101, 19) ^ __ROR8__(v101, 61) ^ (v101 >> 6));
        uint64_t v110 = (uint64_t)&v95[v109
                           + *(v70 - 5)
                           + (v99 & ~v107)
                           + (v107 & v103)
                           + (__ROR8__(v107, 14) ^ __ROR8__(v107, 18) ^ __ROR8__(v107, 41))];
        unint64_t v111 = v110 + v96;
        uint64_t v112 = (__ROR8__(v108, 28) ^ __ROR8__(v108, 34) ^ __ROR8__(v108, 39))
             + (v108 & (v104 ^ v100) ^ v104 & v100)
             + v110;
        unint64_t v135 = v105;
        unint64_t v50 = (__ROR8__(v75, 1) ^ __ROR8__(v75, 8) ^ (v75 >> 7))
            + v133
            + v26
            + (__ROR8__(v105, 19) ^ __ROR8__(v105, 61) ^ (v105 >> 6));
        unint64_t v113 = v50
             + *(v70 - 4)
             + v99
             + (v103 & ~v111)
             + (v111 & v107)
             + (__ROR8__(v110 + v96, 14) ^ __ROR8__(v110 + v96, 18) ^ __ROR8__(v111, 41));
        unint64_t v114 = v113 + v100;
        unint64_t v115 = (__ROR8__(v112, 28) ^ __ROR8__(v112, 34) ^ __ROR8__(v112, 39))
             + (v112 & (v108 ^ v104) ^ v108 & v104)
             + v113;
        unint64_t v134 = v109;
        unint64_t v54 = (__ROR8__(v58, 1) ^ __ROR8__(v58, 8) ^ (v58 >> 7))
            + v75
            + v30
            + (__ROR8__(v109, 19) ^ __ROR8__(v109, 61) ^ (v109 >> 6));
        unint64_t v116 = v54
             + *(v70 - 3)
             + v103
             + (v107 & ~v114)
             + (v114 & v111)
             + (__ROR8__(v114, 14) ^ __ROR8__(v114, 18) ^ __ROR8__(v114, 41));
        uint64_t v56 = v116 + v104;
        uint64_t v57 = (__ROR8__(v115, 28) ^ __ROR8__(v115, 34) ^ __ROR8__(v115, 39))
            + (v115 & (v112 ^ v108) ^ v112 & v108)
            + v116;
        v58 += (__ROR8__(v62, 1) ^ __ROR8__(v62, 8) ^ (v62 >> 7))
             + v34
             + (__ROR8__(v50, 19) ^ __ROR8__(v50, 61) ^ (v50 >> 6));
        unint64_t v117 = v58
             + *(v70 - 2)
             + v107
             + (v111 & ~v56)
             + (v56 & v114)
             + (__ROR8__(v116 + v104, 14) ^ __ROR8__(v116 + v104, 18) ^ __ROR8__(v56, 41));
        uint64_t v60 = v117 + v108;
        uint64_t v61 = (__ROR8__(v57, 28) ^ __ROR8__(v57, 34) ^ __ROR8__(v57, 39)) + (v57 & (v115 ^ v112) ^ v115 & v112) + v117;
        unint64_t v137 = v97;
        unint64_t v118 = (__ROR8__(v65, 1) ^ __ROR8__(v65, 8) ^ (v65 >> 7)) + v62 + v97;
        unint64_t v18 = v80;
        unint64_t v62 = v118 + (__ROR8__(v54, 19) ^ __ROR8__(v54, 61) ^ (v54 >> 6));
        unint64_t v67 = v140;
        unint64_t v119 = v62
             + *(v70 - 1)
             + v111
             + (v114 & ~v60)
             + (v60 & v56)
             + (__ROR8__(v60, 14) ^ __ROR8__(v60, 18) ^ __ROR8__(v60, 41));
        uint64_t result = v119 + v112;
        uint64_t v64 = (__ROR8__(v61, 28) ^ __ROR8__(v61, 34) ^ __ROR8__(v61, 39)) + (v61 & (v57 ^ v115) ^ v57 & v115) + v119;
        unint64_t v136 = v101;
        unint64_t v120 = (__ROR8__(v140, 1) ^ __ROR8__(v140, 8) ^ (v140 >> 7)) + v65 + v101;
        unint64_t v22 = v84;
        unint64_t v65 = v120 + (__ROR8__(v58, 19) ^ __ROR8__(v58, 61) ^ (v58 >> 6));
        uint64_t v121 = *v70;
        v70 += 16;
        unint64_t v122 = v65
             + v121
             + v114
             + (v56 & ~result)
             + (result & v60)
             + (__ROR8__(result, 14) ^ __ROR8__(result, 18) ^ __ROR8__(result, 41));
        uint64_t v68 = v122 + v115;
        uint64_t v69 = (__ROR8__(v64, 28) ^ __ROR8__(v64, 34) ^ __ROR8__(v64, 39)) + (v64 & (v61 ^ v57) ^ v61 & v57) + v122;
        unint64_t v14 = v76;
        v138 += 16;
      }
      while (v138 < 0x40);
      uint64_t v4 = v69 + v131;
      uint64_t v3 = v64 + v130;
      *__int16 v123 = v69 + v131;
      v123[1] = v64 + v130;
      uint64_t v6 = v61 + v129;
      uint64_t v5 = v57 + v128;
      v123[2] = v61 + v129;
      v123[3] = v57 + v128;
      uint64_t v8 = v68 + v127;
      unint64_t v7 = result + v126;
      v123[4] = v68 + v127;
      v123[5] = result + v126;
      uint64_t v10 = v60 + v125;
      uint64_t v9 = v56 + v124;
      a2 += 16;
      v123[6] = v60 + v125;
      v123[7] = v56 + v124;
      a3 = v132 - 1;
    }
    while (v132 != 1);
  }
  return result;
}

uint64_t bssl::tls13_server_handshake(bssl *this, bssl::SSL_HANDSHAKE *a2, ssl_session_st *a3)
{
  long long v174 = (char *)this + 232;
  uint64_t v175 = (SSL_SESSION **)((char *)this + 1520);
  *(unsigned __int8 **)((char *)&d.tlsext_ocsp_resp + 1) = (unsigned __int8 *)*MEMORY[0x1E4F143B8];
  char v178 = (char *)this + 88;
  uint64_t v179 = (size_t **)((char *)this + 424);
  int v180 = (char *)this + 136;
  uint64_t v172 = (char *)this + 280;
  __dst = (char *)this + 1597;
  char v177 = (bssl *)((char *)this + 328);
  uint64_t v168 = (char *)this + 184;
  uint64_t v169 = (char *)this + 632;
  int v170 = (bssl *)((char *)this + 736);
  uint64_t v171 = (uint64_t *)((char *)this + 600);
  long long v173 = (ssl_credential_st **)((char *)this + 1504);
  while (2)
  {
    int v4 = *((_DWORD *)this + 6);
    uint64_t v5 = 1;
    switch(v4)
    {
      case 0:
        uint64_t v6 = *(bssl **)this;
        *(unint64_t *)((char *)&d.options + 1) = 0xAAAAAAAAAAAAAAAALL;
        v7.suint64_t k = (STACK *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&v7.dummy = 0xAAAAAAAAAAAAAAAALL;
        *(CRYPTO_EX_DATA *)((char *)&d.ex_data + 1) = v7;
        *(CRYPTO_EX_DATA *)((char *)&d.client_CA + 1) = v7;
        *(CRYPTO_EX_DATA *)((char *)&d.init_buf + 1) = v7;
        *(CRYPTO_EX_DATA *)((char *)&d.init_num + 1) = v7;
        *(CRYPTO_EX_DATA *)((char *)&d.handshake_func + 1) = v7;
        *(CRYPTO_EX_DATA *)((char *)&d.quiet_shutdown + 1) = v7;
        *(CRYPTO_EX_DATA *)((char *)&d.rbio + 1) = v7;
        *(CRYPTO_EX_DATA *)((char *)&d.bbio + 1) = v7;
        *(CRYPTO_EX_DATA *)((char *)&d.version + 1) = v7;
        if (!bssl::SSL_HANDSHAKE::GetClientHello((uint64_t *)this, (uint64_t)&d.ex_data.sk + 1, (uint64_t)&d.version + 1))goto LABEL_281; {
        char v8 = BYTE1(d.server);
        }
        if (*((void *)v6 + 21)) {
          BOOL v9 = *(void *)((char *)&d.server + 1) == 0;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9)
        {
          ERR_put_error(16, 0, 306, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 273);
          bssl::ssl_send_alert(v6, (ssl_st *)2, 47);
          goto LABEL_281;
        }
        if (*(void *)((char *)&d.server + 1)) {
          memcpy(__dst, *(const void **)((char *)&d.handshake_func + 1), *(size_t *)((char *)&d.server + 1));
        }
        *((unsigned char *)this + 1629) = v8;
        *(int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1) = 0;
        *(void (__cdecl **)(const SSL *, int, int))((char *)&d.info_callback + 1) = 0;
        if ((bssl::ssl_get_credential_list(this, (void **)((char *)&d.verify_callback + 1)) & 1) == 0) {
          goto LABEL_259;
        }
        if (!*(void (__cdecl **)(const SSL *, int, int))((char *)&d.info_callback + 1))
        {
          ERR_put_error(16, 0, 174, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 286);
          int v95 = 80;
          goto LABEL_258;
        }
        uint64_t v10 = *(uint64_t **)((char *)&d.verify_callback + 1);
        uint64_t v11 = *(char **)((char *)&d.verify_callback + 1) + 8 * *(uint64_t *)((char *)&d.info_callback + 1);
        while (1)
        {
          uint64_t v12 = *v10;
          ERR_clear_error();
          *(_WORD *)&d.sid_ctx[13] = -21846;
          int v14 = *(_DWORD *)(v12 + 4);
          if (v14 == 2)
          {
            if ((*((unsigned char *)this + 1586) & 0x20) == 0 || *((unsigned char *)this + 730) != 2)
            {
              int v19 = 249;
LABEL_27:
              ERR_put_error(16, 0, 253, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", v19);
              goto LABEL_29;
            }
          }
          else if (v14 == 1)
          {
            uint64_t v15 = *((void *)this + 81);
            uint64_t v16 = *((void *)this + 82);
            if (v16)
            {
              uint64_t v17 = 2 * v16;
              unint64_t v18 = (unsigned __int16 *)*((void *)this + 81);
              while (*v18 != *(unsigned __int16 *)(v12 + 64))
              {
                ++v18;
                v17 -= 2;
                if (!v17)
                {
                  unint64_t v18 = (unsigned __int16 *)(v15 + 2 * v16);
                  break;
                }
              }
            }
            else
            {
              unint64_t v18 = (unsigned __int16 *)*((void *)this + 81);
            }
            if (v16 == ((uint64_t)v18 - v15) >> 1)
            {
              int v19 = 240;
              goto LABEL_27;
            }
          }
          if (bssl::tls1_choose_signature_algorithm(this, (EVP_PKEY **)v12, (const ssl_credential_st *)&d.sid_ctx[13], v13))
          {
            if (v12) {
              SSL_CREDENTIAL_up_ref(v12);
            }
            std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>::reset[abi:ne180100](v173, (ssl_credential_st *)v12);
            *((_WORD *)this + 797) = *(_WORD *)&d.sid_ctx[13];
LABEL_247:
            if (!*v173)
            {
              bssl::ssl_send_alert(v6, (ssl_st *)2, 40);
              goto LABEL_259;
            }
            long long v99 = *(_OWORD *)((char *)&d.quiet_shutdown + 1);
            uint64_t v100 = (ssl_credential_st *)bssl::ssl_protocol_version(v6, v20);
            unsigned int v101 = v100;
            uint64_t v102 = *((void *)v6 + 1);
            unsigned int v103 = *(unsigned __int16 *)(v102 + 301);
            if ((v103 & 0x800) != 0)
            {
              int v104 = (v103 >> 12) & 1;
            }
            else
            {
              LOBYTE(v104) = ssl_credential_st::UsesPrivateKey(v100) != 0;
              uint64_t v102 = *((void *)v6 + 1);
            }
            uint64_t v105 = bssl::ssl_choose_tls13_cipher((unsigned __int16 *)v99, *((uint64_t *)&v99 + 1), v104, v101, *(_DWORD *)(v102 + 296));
            *((void *)this + 194) = v105;
            if (v105)
            {
              d.sid_ctx[13] = 50;
              if (bssl::ssl_negotiate_alpn((uint64_t)this, (char *)&d.sid_ctx[13], (uint64_t)&d.version + 1))
              {
                unint64_t v107 = (bssl *)bssl::ssl_protocol_version(v6, v106);
                if (bssl::SSLTranscript::InitHash(v179, v107, *((const ssl_cipher_st **)this + 194)))
                {
                  uint64_t v5 = 1;
                  *((_DWORD *)this + 6) = 1;
                  goto LABEL_260;
                }
              }
              else
              {
                bssl::ssl_send_alert(v6, (ssl_st *)2, d.sid_ctx[13]);
              }
LABEL_259:
              uint64_t v5 = 0;
LABEL_260:
              OPENSSL_free(*(void **)((char *)&d.verify_callback + 1));
              goto LABEL_282;
            }
            ERR_put_error(16, 0, 184, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 310);
            int v95 = 40;
LABEL_258:
            bssl::ssl_send_alert(v6, (ssl_st *)2, v95);
            goto LABEL_259;
          }
LABEL_29:
          if (++v10 == (uint64_t *)v11) {
            goto LABEL_247;
          }
        }
      case 1:
        uint64_t v39 = *(void *)this;
        *(unint64_t *)((char *)&d.options + 1) = 0xAAAAAAAAAAAAAAAALL;
        v40.suint64_t k = (STACK *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&v40.dummy = 0xAAAAAAAAAAAAAAAALL;
        *(CRYPTO_EX_DATA *)((char *)&d.ex_data + 1) = v40;
        *(CRYPTO_EX_DATA *)((char *)&d.client_CA + 1) = v40;
        *(CRYPTO_EX_DATA *)((char *)&d.init_buf + 1) = v40;
        *(CRYPTO_EX_DATA *)((char *)&d.init_num + 1) = v40;
        *(CRYPTO_EX_DATA *)((char *)&d.handshake_func + 1) = v40;
        *(CRYPTO_EX_DATA *)((char *)&d.quiet_shutdown + 1) = v40;
        *(CRYPTO_EX_DATA *)((char *)&d.rbio + 1) = v40;
        *(CRYPTO_EX_DATA *)((char *)&d.bbio + 1) = v40;
        *(CRYPTO_EX_DATA *)((char *)&d.version + 1) = v40;
        if (!bssl::SSL_HANDSHAKE::GetClientHello((uint64_t *)this, (uint64_t)&d.ex_data.sk + 1, (uint64_t)&d.version + 1))goto LABEL_281; {
        LOBYTE(d.version) = 50;
        }
        uint64_t v41 = *(void *)(v39 + 48);
        uint64_t v42 = *(void *)this;
        *(int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1) = (int (__cdecl *)(int, X509_STORE_CTX *))0xAAAAAAAAAAAAAAAALL;
        *(void (__cdecl **)(const SSL *, int, int))((char *)&d.info_callback + 1) = (void (__cdecl *)(const SSL *, int, int))0xAAAAAAAAAAAAAAAALL;
        extensiouint64_t n = bssl::ssl_client_hello_get_extension((uint64_t)&d.version + 1, (int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1), 41);
        if ((extension & 1) == 0) {
          goto LABEL_85;
        }
        *(void *)&d.sid_ctx[13] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&d.sid_ctx[21] = 0xAAAAAAAAAAAAAAAALL;
        if (bssl::ssl_client_hello_get_extension((uint64_t)&d.version + 1, &d.sid_ctx[13], 45))
        {
          *(void (__cdecl **)(SSL *, int, int, unsigned __int8 *, int, void *))((char *)&d.tlsext_debug_cb + 1) = (void (__cdecl *)(SSL *, int, int, unsigned __int8 *, int, void *))0xAAAAAAAAAAAAAAAALL;
          *(void **)((char *)&d.tlsext_debug_arg + 1) = (void *)0xAAAAAAAAAAAAAAAALL;
          *(const EVP_MD **)((char *)&d.read_hash + 1) = (const EVP_MD *)0xAAAAAAAAAAAAAAAALL;
          *(COMP_CTX **)((char *)&d.expand + 1) = (COMP_CTX *)0xAAAAAAAAAAAAAAAALL;
          *(_DWORD *)((char *)&d.max_cert_list + 1) = -1431655766;
          if (bssl::ssl_ext_pre_shared_key_parse_clienthello((uint64_t)this, (unint64_t *)((char *)&d.tlsext_debug_cb + 1), (const EVP_MD **)((char *)&d.read_hash + 1), (int *)((char *)&d.max_cert_list + 1), (char *)&d, (uint64_t)&d.version + 1, (uint64_t)&d.verify_callback + 1))
          {
            if ((*((unsigned char *)this + 1584) & 0x10) == 0)
            {
LABEL_85:
              uint64_t v44 = 0;
              if ((bssl::ssl_get_new_session(this, a2) & 1) == 0)
              {
LABEL_299:
                int version_low = 80;
                goto LABEL_300;
              }
LABEL_86:
              if (bssl::ssl_negotiate_alps((bssl **)this, &d, (uint64_t)&d.version + 1))
              {
                *(void *)(*((void *)this + 190) + 20std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = *((void *)this + 194);
                if ((bssl::tls1_get_shared_group(this, (const ssl_st *)(*((void *)this + 190) + 6), v45) & 1) == 0)
                {
                  ERR_put_error(16, 0, 266, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 496);
                  int version_low = 40;
                  goto LABEL_300;
                }
                BYTE1(d.verify_callback) = -86;
                if ((bssl::ssl_ext_key_share_parse_clienthello((uint64_t)this, (BOOL *)&d.verify_callback + 1, 0, &d, (uint64_t)&d.version + 1) & 1) == 0)
                {
                  int version_low = LOBYTE(d.version);
                  goto LABEL_300;
                }
                if ((*(unsigned char *)(v39 + 180) & 4) == 0)
                {
                  uint64_t v46 = *(void *)(v39 + 48);
                  int v47 = 1;
LABEL_91:
                  *(_DWORD *)(v46 + 256) = v47;
LABEL_319:
                  unint64_t v117 = *(const void **)(v46 + 496);
                  unint64_t v118 = *(void *)(v46 + 504);
                  p_sid_ctx_unint64_t length = (void **)&(*v175)[1].sid_ctx_length;
                  int v121 = bssl::Array<unsigned char>::Init((uint64_t)p_sid_ctx_length, v118);
                  char v122 = v121 ^ 1;
                  if (!v118) {
                    char v122 = 1;
                  }
                  if ((v122 & 1) == 0) {
                    memmove(*p_sid_ctx_length, v117, v118);
                  }
                  if (v121)
                  {
                    if ((*(_WORD *)(*(void *)(v39 + 48) + 220) & 0x400) == 0) {
                      goto LABEL_435;
                    }
                    __int16 v123 = *v175;
                    if (((uint64_t)(*v175)[1].peer & 0x40) == 0) {
                      goto LABEL_435;
                    }
                    uint64_t v124 = *(const void **)(v44 + 424);
                    unint64_t v125 = *(void *)(v44 + 432);
                    unint64_t v126 = (void **)&v123[1].sid_ctx[28];
                    int v127 = bssl::Array<unsigned char>::Init((uint64_t)&v123[1].sid_ctx[28], v125);
                    char v128 = v127 ^ 1;
                    if (!v125) {
                      char v128 = 1;
                    }
                    if ((v128 & 1) == 0) {
                      memmove(*v126, v124, v125);
                    }
                    if (v127)
                    {
LABEL_435:
                      if ((*(unsigned char *)(v39 + 180) & 4) == 0 || !*(void *)(v39 + 168)) {
                        goto LABEL_338;
                      }
                      uint64_t v129 = *((void *)this + 1);
                      uint64_t v130 = *(const void **)(v129 + 240);
                      unint64_t v131 = *(void *)(v129 + 248);
                      uint64_t v132 = (void **)(*((void *)this + 190) + 448);
                      int v133 = bssl::Array<unsigned char>::Init((uint64_t)v132, v131);
                      char v134 = v133 ^ 1;
                      if (!v131) {
                        char v134 = 1;
                      }
                      if ((v134 & 1) == 0) {
                        memmove(*v132, v130, v131);
                      }
                      if (v133)
                      {
LABEL_338:
                        unint64_t v135 = *(unsigned int (**)(char *))(*(void *)(v39 + 120) + 488);
                        if (!v135 || v135((char *)&d.version + 1))
                        {
                          unint64_t v136 = (bssl *)bssl::ssl_protocol_version((bssl *)v39, v120);
                          handshake_digest = bssl::ssl_get_handshake_digest(v136, *((void *)this + 194), v137);
                          EVP_MD_size(handshake_digest);
                          if ((*(_WORD *)(*(void *)(v39 + 48) + 220) & 0x40) != 0) {
                            unint64_t v139 = (const ssl_st *)&(*v175)->key_arg[3];
                          }
                          else {
                            unint64_t v139 = (const ssl_st *)&bssl::kZeroes;
                          }
                          if (!bssl::tls13_init_key_schedule((uint64_t)this, v139)
                            || (bssl::ssl_hash_message((uint64_t)this, (uint64_t)&d.ex_data.sk + 1) & 1) == 0)
                          {
                            goto LABEL_301;
                          }
                          uint64_t v140 = *(void *)(v39 + 48);
                          if ((*(_WORD *)(v140 + 220) & 0x400) != 0)
                          {
                            if ((bssl::tls13_derive_early_secret(this, a2) & 1) == 0) {
                              goto LABEL_301;
                            }
                          }
                          else if ((*((unsigned char *)this + 1585) & 8) != 0)
                          {
                            *(_WORD *)(v140 + 220) |= 1u;
                          }
                          if (BYTE1(d.verify_callback))
                          {
                            if (bssl::resolve_ecdhe_secret((uint64_t)this, (uint64_t)&d.version + 1))
                            {
                              (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
                              OPENSSL_free((void *)*v171);
                              *uint64_t v171 = 0;
                              v171[1] = 0;
                              int v141 = 4;
LABEL_356:
                              *((_DWORD *)this + 6) = v141;
                              uint64_t v5 = 1;
LABEL_302:
                              if (v44) {
                                SSL_SESSION_free((SSL_SESSION *)v44);
                              }
                              goto LABEL_282;
                            }
                          }
                          else
                          {
                            (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
                            if (bssl::SSLTranscript::UpdateForHelloRetryRequest((bssl::SSLTranscript *)v179))
                            {
                              int v141 = 2;
                              goto LABEL_356;
                            }
                          }
LABEL_301:
                          uint64_t v5 = 0;
                          goto LABEL_302;
                        }
                        ERR_put_error(16, 0, 133, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 579);
                      }
                    }
                  }
                  int version_low = 80;
LABEL_300:
                  bssl::ssl_send_alert((bssl *)v39, (ssl_st *)2, version_low);
                  goto LABEL_301;
                }
                if (extension)
                {
                  if (v44)
                  {
                    if (*(_DWORD *)(v44 + 380))
                    {
                      int v110 = *((_DWORD *)this + 396);
                      if ((v110 & 0x800) == 0)
                      {
                        uint64_t v46 = *(void *)(v39 + 48);
                        int v47 = 4;
                        goto LABEL_91;
                      }
                      uint64_t v46 = *(void *)(v39 + 48);
                      if ((v110 & 0x2000000) != 0)
                      {
                        int v111 = 10;
                        goto LABEL_318;
                      }
                      size_t v116 = *(void *)(v46 + 504);
                      if (v116 != *(void *)(v44 + 400)
                        || memcmp(*(const void **)(v46 + 496), *(const void **)(v44 + 392), v116))
                      {
                        int v111 = 9;
                        goto LABEL_318;
                      }
                      unint64_t v158 = *v175;
                      int v159 = *(unsigned __int8 *)(v44 + 440);
                      if (((v159 ^ LOBYTE((*v175)[1].peer)) & 0x40) != 0
                        || (size_t v160 = *(void *)&v158[1].sid_ctx[20], v160 != *(void *)(v44 + 416))
                        || memcmp(*(const void **)&v158[1].sid_ctx[12], *(const void **)(v44 + 408), v160))
                      {
                        int v111 = 14;
                        goto LABEL_318;
                      }
                      if ((*(_DWORD *)(v46 + 252) - 61) <= 0xFFFFFF86)
                      {
                        int v111 = 12;
                        goto LABEL_318;
                      }
                      if ((v159 & 0x20) == 0)
                      {
LABEL_399:
                        if (BYTE1(d.verify_callback))
                        {
                          if (*((void *)this + 194) != *(void *)(v44 + 200)) {
                            __assert_rtn("do_select_session", "tls13_server.cc", 542, "hs->new_cipher == session->cipher");
                          }
                          uint64_t v161 = *(void *)(v39 + 48);
                          *(_DWORD *)(v161 + 256) = 2;
                          *(_WORD *)(v161 + 220) |= 0x400u;
                          uint64_t v46 = *(void *)(v39 + 48);
                          goto LABEL_319;
                        }
                        uint64_t v46 = *(void *)(v39 + 48);
                        int v47 = 8;
                        goto LABEL_91;
                      }
                      uint64_t v162 = *(void *)(v44 + 456);
                      if (v162)
                      {
                        uint64_t v163 = *((void *)this + 1);
                        if (*(void *)(v163 + 248) == v162)
                        {
                          if (!CRYPTO_memcmp(*(char **)(v163 + 240), *(char **)(v44 + 448), v162)) {
                            goto LABEL_399;
                          }
                          uint64_t v46 = *(void *)(v39 + 48);
                        }
                      }
                      int v111 = 13;
                      goto LABEL_318;
                    }
                    uint64_t v46 = *(void *)(v39 + 48);
                    int v111 = 7;
                  }
                  else
                  {
                    uint64_t v46 = *(void *)(v39 + 48);
                    int v111 = 6;
                  }
                }
                else
                {
                  uint64_t v46 = *(void *)(v39 + 48);
                  int v111 = 5;
                }
LABEL_318:
                *(_DWORD *)(v46 + 256) = v111;
                goto LABEL_319;
              }
LABEL_223:
              int version_low = LOBYTE(d.version);
              goto LABEL_300;
            }
            BYTE1(d.sid_ctx_length) = -86;
            *(void *)((char *)&d.packet_length + 1) = 0;
            int v97 = bssl::ssl_process_ticket((uint64_t *)this, (SSL_SESSION **)((char *)&d.packet_length + 1), (unsigned char *)&d.sid_ctx_length + 1, *(const unsigned __int8 **)((char *)&d.tlsext_debug_cb + 1), *(unint64_t *)((char *)&d.tlsext_debug_arg + 1), 0, 0);
            int v98 = v97;
            if (v97)
            {
              uint64_t v44 = 0;
              if (v97 == 3) {
                LOBYTE(d.version) = 80;
              }
            }
            else
            {
              if (!bssl::ssl_session_is_resumable(this, *(const EVP_MD_CTX ***)((char *)&d.packet_length + 1), a3))goto LABEL_291; {
              unint64_t v109 = *(SSL_SESSION **)((char *)&d.packet_length + 1);
              }
              if ((*(unsigned char *)(*(void *)((char *)&d.packet_length + 1) + 440) & 8) == 0)
              {
                uint64_t v44 = 0;
                *(void *)((char *)&d.packet_length + 1) = 0;
                int v98 = 2;
                goto LABEL_293;
              }
              *(_DWORD *)((char *)&d.max_cert_list + 1) = (*(_DWORD *)((char *)&d.max_cert_list + 1)
                                                         - *(_DWORD *)(*(void *)((char *)&d.packet_length + 1) + 376))
                                                        / 0x3E8u;
              *(void **)((char *)&d.msg_callback_arg + 1) = (void *)0xAAAAAAAAAAAAAAAALL;
              *(void *)((char *)&d.hit + 1) = 0xAAAAAAAAAAAAAAAALL;
              bssl::ssl_get_current_time(v42, (uint64_t)&d.msg_callback_arg + 1);
              a2 = *(bssl::SSL_HANDSHAKE **)((char *)&d.packet_length + 1);
              uint64_t v112 = *(void **)(*(void *)((char *)&d.packet_length + 1) + 192);
              unint64_t v113 = (char *)*(void **)((char *)&d.msg_callback_arg + 1) - (char *)v112;
              if (*(void **)((char *)&d.msg_callback_arg + 1) < v112) {
                __assert_rtn("select_session", "tls13_server.cc", 399, "now.tv_sec >= session->time");
              }
              if (!(v113 >> 31))
              {
                *(_DWORD *)(v41 + 252) = *(_DWORD *)((char *)&d.max_cert_list + 1) - v113;
                if (bssl::tls13_verify_psk_binder((uint64_t)this, a2, (uint64_t)&d.ex_data.sk + 1, (uint64_t)&d.read_hash + 1))
                {
                  int v98 = 0;
                  uint64_t v44 = *(void *)((char *)&d.packet_length + 1);
                  *(void *)((char *)&d.packet_length + 1) = 0;
                }
                else
                {
                  uint64_t v44 = 0;
                  LOBYTE(d.version) = 51;
                  int v98 = 3;
                }
              }
              else
              {
LABEL_291:
                uint64_t v44 = 0;
                int v98 = 2;
              }
            }
            unint64_t v109 = *(SSL_SESSION **)((char *)&d.packet_length + 1);
            *(void *)((char *)&d.packet_length + 1) = 0;
            if (!v109)
            {
LABEL_294:
              switch(v98)
              {
                case 0:
                  bssl::SSL_SESSION_dup((bssl *)v44, 0, (int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1));
                  unint64_t v114 = *(SSL_SESSION **)((char *)&d.verify_callback + 1);
                  *(int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1) = 0;
                  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](v175, v114);
                  unint64_t v115 = *(SSL_SESSION **)((char *)&d.verify_callback + 1);
                  *(int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1) = 0;
                  if (v115) {
                    SSL_SESSION_free(v115);
                  }
                  if (!*v175) {
                    goto LABEL_299;
                  }
                  *(_WORD *)(*(void *)(v39 + 48) + 220) |= 0x40u;
                  *((_DWORD *)this + 396) |= 0x1000000u;
                  bssl::ssl_session_renew_timeout((bssl *)v39, *((ssl_st **)this + 190), (ssl_session_st *)*(unsigned int *)(*(void *)(v39 + 128) + 308));
                  goto LABEL_86;
                case 1:
                  *((_DWORD *)this + 6) = 1;
                  uint64_t v5 = 11;
                  goto LABEL_302;
                case 2:
                  if (v44) {
                    __assert_rtn("do_select_session", "tls13_server.cc", 452, "!session");
                  }
                  goto LABEL_85;
                case 3:
                  goto LABEL_223;
                default:
                  goto LABEL_86;
              }
            }
LABEL_293:
            SSL_SESSION_free(v109);
            goto LABEL_294;
          }
        }
        else
        {
          LOBYTE(d.version) = 109;
          ERR_put_error(16, 0, 164, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 352);
        }
        uint64_t v44 = 0;
        goto LABEL_223;
      case 2:
        if ((*((unsigned char *)this + 1586) & 8) != 0) {
          goto LABEL_104;
        }
        uint64_t v32 = *(void *)this;
        *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.rbio + 1) = v33;
        *(_OWORD *)((char *)&d.bbio + 1) = v33;
        *(_OWORD *)((char *)&d.version + 1) = v33;
        CBB_zero((int *)((char *)&d.version + 1));
        v34.suint64_t k = (STACK *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&v34.dummy = 0xAAAAAAAAAAAAAAAALL;
        *(CRYPTO_EX_DATA *)((char *)&d.client_CA + 1) = v34;
        *(CRYPTO_EX_DATA *)((char *)&d.options + 1) = v34;
        *(CRYPTO_EX_DATA *)((char *)&d.debug + 1) = v34;
        *(CRYPTO_EX_DATA *)((char *)&d.ex_data + 1) = v34;
        *(CRYPTO_EX_DATA *)((char *)&d.verify_callback + 1) = v34;
        *(CRYPTO_EX_DATA *)((char *)&d.error + 1) = v34;
        *(CRYPTO_EX_DATA *)&d.sid_ctx[29] = v34;
        *(CRYPTO_EX_DATA *)((char *)&d.generate_session_id + 1) = v34;
        *(CRYPTO_EX_DATA *)&d.sid_ctx[13] = v34;
        if (!(*(unsigned int (**)(uint64_t, char *, char *, uint64_t))(*(void *)v32 + 88))(v32, (char *)&d.version + 1, (char *)&d.ex_data.sk + 1, 2)|| !CBB_add_u16((uint64_t)&d.ex_data.sk + 1, 0x303u)|| !CBB_add_bytes((uint64_t)&d.ex_data.sk + 1, &bssl::kHelloRetryRequest, 0x20uLL)|| !CBB_add_u8_length_prefixed((uint64_t *)((char *)&d.ex_data.sk + 1), (uint64_t)&d.verify_callback + 1)|| !CBB_add_bytes((uint64_t)&d.verify_callback + 1, __dst, *((unsigned __int8 *)this + 1629))|| (unsigned int protocol_id = SSL_CIPHER_get_protocol_id(*((void *)this + 194)), !CBB_add_u16((uint64_t)&d.ex_data.sk + 1, protocol_id))|| !CBB_add_u8((uint64_t)&d.ex_data.sk + 1, 0)|| !CBB_add_u16_length_prefixed((uint64_t *)((char *)&d.ex_data.sk + 1), (uint64_t)&d.sid_ctx[13])|| !CBB_add_u16((uint64_t)&d.sid_ctx[13], 0x2Bu)|| !CBB_add_u16((uint64_t)&d.sid_ctx[13], 2u)|| !CBB_add_u16((uint64_t)&d.sid_ctx[13], *(unsigned __int16 *)(v32 + 16))|| !CBB_add_u16((uint64_t)&d.sid_ctx[13], 0x33u)|| !CBB_add_u16((uint64_t)&d.sid_ctx[13], 2u)
          || !CBB_add_u16((uint64_t)&d.sid_ctx[13], HIWORD((*v175)->key_arg_length))
          || (*((unsigned char *)this + 1584) & 1) != 0
          && (!CBB_add_u16((uint64_t)&d.sid_ctx[13], 0xFE0Du)
           || !CBB_add_u16((uint64_t)&d.sid_ctx[13], 8u)
           || !CBB_add_zeros((uint64_t)&d.sid_ctx[13], 8uLL)))
        {
          uint64_t v5 = 0;
          goto LABEL_361;
        }
        *(void (__cdecl **)(SSL *, int, int, unsigned __int8 *, int, void *))((char *)&d.tlsext_debug_cb + 1) = 0;
        *(void **)((char *)&d.tlsext_debug_arg + 1) = 0;
        if (((*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v32 + 96))(v32, (char *)&d.version + 1, (char *)&d.tlsext_debug_cb + 1) & 1) == 0)goto LABEL_362; {
        if (*((unsigned char *)this + 1584))
        }
        {
          if (*(void **)((char *)&d.tlsext_debug_arg + 1) <= (void *)7) {
            abort();
          }
          if (!bssl::ssl_ech_accept_confirmation((int)this, *(_DWORD *)((char *)&d.tlsext_debug_arg + 1) - 8 + *(_DWORD *)((char *)&d.tlsext_debug_cb + 1), 8, *(void *)(v32 + 48) + 48, 32, (bssl::SSLTranscript *)v179, 1, v36, *(char **)((char *)&d.tlsext_debug_cb + 1), *(unint64_t *)((char *)&d.tlsext_debug_arg + 1), *(unint64_t *)((char *)&d.tlsext_debug_arg + 1) - 8))goto LABEL_362; {
        }
          }
        uint64_t v37 = *(unsigned int (**)(uint64_t, char *))(*(void *)v32 + 104);
        *(const EVP_MD **)((char *)&d.read_hash + 1) = 0;
        *(COMP_CTX **)((char *)&d.expand + 1) = 0;
        OPENSSL_free(0);
        *(const EVP_MD **)((char *)&d.read_hash + 1) = *(const EVP_MD **)((char *)&d.tlsext_debug_cb + 1);
        *(COMP_CTX **)((char *)&d.expand + 1) = *(COMP_CTX **)((char *)&d.tlsext_debug_arg + 1);
        *(void (__cdecl **)(SSL *, int, int, unsigned __int8 *, int, void *))((char *)&d.tlsext_debug_cb + 1) = 0;
        *(void **)((char *)&d.tlsext_debug_arg + 1) = 0;
        if (v37(v32, (char *)&d.read_hash + 1))
        {
          char v38 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 112))(v32);
          OPENSSL_free(*(void **)((char *)&d.read_hash + 1));
          *(const EVP_MD **)((char *)&d.read_hash + 1) = 0;
          *(COMP_CTX **)((char *)&d.expand + 1) = 0;
          if (v38)
          {
            *(_WORD *)(*(void *)(v32 + 48) + 220) |= 0x2000u;
            *((_DWORD *)this + 6) = 3;
            uint64_t v5 = 4;
          }
          else
          {
LABEL_362:
            uint64_t v5 = 0;
          }
        }
        else
        {
          OPENSSL_free(*(void **)((char *)&d.read_hash + 1));
          uint64_t v5 = 0;
          *(const EVP_MD **)((char *)&d.read_hash + 1) = 0;
          *(COMP_CTX **)((char *)&d.expand + 1) = 0;
        }
        OPENSSL_free(*(void **)((char *)&d.tlsext_debug_cb + 1));
LABEL_361:
        CBB_cleanup((uint64_t)&d.version + 1);
        goto LABEL_282;
      case 3:
        unint64_t v62 = *(bssl **)this;
        *(unint64_t *)((char *)&d.options + 1) = 0xAAAAAAAAAAAAAAAALL;
        v63.suint64_t k = (STACK *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&v63.dummy = 0xAAAAAAAAAAAAAAAALL;
        *(CRYPTO_EX_DATA *)((char *)&d.ex_data + 1) = v63;
        *(CRYPTO_EX_DATA *)((char *)&d.client_CA + 1) = v63;
        if (!(*(unsigned int (**)(bssl *, char *))(*(void *)v62 + 24))(v62, (char *)&d.ex_data.sk + 1)) {
          goto LABEL_220;
        }
        if (!bssl::ssl_check_message_type(v62, (uint64_t)&d.ex_data.sk + 1, 1)) {
          goto LABEL_281;
        }
        *(void *)&long long v64 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.init_buf + 1) = v64;
        *(_OWORD *)((char *)&d.init_num + 1) = v64;
        *(_OWORD *)((char *)&d.handshake_func + 1) = v64;
        *(_OWORD *)((char *)&d.quiet_shutdown + 1) = v64;
        *(_OWORD *)((char *)&d.rbio + 1) = v64;
        *(_OWORD *)((char *)&d.bbio + 1) = v64;
        *(_OWORD *)((char *)&d.version + 1) = v64;
        if ((bssl::ssl_client_hello_init((uint64_t)v62, (uint64_t)&d.version + 1, *(uint64_t *)((char *)&d.ex_data.dummy + 1), *(uint64_t *)((char *)&d.client_CA + 1)) & 1) == 0)
        {
          ERR_put_error(16, 0, 131, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 692);
          bssl::ssl_send_alert(v62, (ssl_st *)2, 50);
          goto LABEL_281;
        }
        uint64_t v65 = *((void *)v62 + 6);
        if (*(_DWORD *)(v65 + 216) != 1) {
          goto LABEL_140;
        }
        *(int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1) = (int (__cdecl *)(int, X509_STORE_CTX *))0xAAAAAAAAAAAAAAAALL;
        *(void (__cdecl **)(const SSL *, int, int))((char *)&d.info_callback + 1) = (void (__cdecl *)(const SSL *, int, int))0xAAAAAAAAAAAAAAAALL;
        if ((bssl::ssl_client_hello_get_extension((uint64_t)&d.version + 1, (int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1), 65037) & 1) == 0)
        {
          ERR_put_error(16, 0, 164, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 703);
          bssl::ssl_send_alert(v62, (ssl_st *)2, 109);
          goto LABEL_281;
        }
        *(_WORD *)((char *)&d.read_hash + 1) = -21846;
        *(_WORD *)((char *)&d.msg_callback_arg + 1) = -21846;
        BYTE1(d.packet_length) = -86;
        BYTE1(d.max_cert_list) = -86;
        *(void *)&d.sid_ctx[13] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&d.sid_ctx[21] = 0xAAAAAAAAAAAAAAAALL;
        *(void (__cdecl **)(SSL *, int, int, unsigned __int8 *, int, void *))((char *)&d.tlsext_debug_cb + 1) = (void (__cdecl *)(SSL *, int, int, unsigned __int8 *, int, void *))0xAAAAAAAAAAAAAAAALL;
        *(void **)((char *)&d.tlsext_debug_arg + 1) = (void *)0xAAAAAAAAAAAAAAAALL;
        int u8 = CBS_get_u8((int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1), (unsigned char *)&d.packet_length + 1);
        int v67 = 50;
        int v68 = 718;
        if (!u8 || BYTE1(d.packet_length)) {
          goto LABEL_266;
        }
        if (!CBS_get_u16((unsigned __int16 **)((char *)&d.verify_callback + 1), (const EVP_MD **)((char *)&d.read_hash + 1))|| !CBS_get_u16((unsigned __int16 **)((char *)&d.verify_callback + 1), (void **)((char *)&d.msg_callback_arg + 1))|| !CBS_get_u8((int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1), (unsigned char *)&d.max_cert_list + 1)|| !CBS_get_u16_length_prefixed((unsigned __int8 **)((char *)&d.verify_callback + 1), (unint64_t *)&d.sid_ctx[13]))
        {
          int v68 = 718;
LABEL_266:
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", v68);
          bssl::ssl_send_alert(v62, (ssl_st *)2, v67);
          goto LABEL_281;
        }
        u16_length_prefixessl_st d = CBS_get_u16_length_prefixed((unsigned __int8 **)((char *)&d.verify_callback + 1), (unint64_t *)((char *)&d.tlsext_debug_cb + 1));
        int v68 = 718;
        if (!u16_length_prefixed || *(void (__cdecl **)(const SSL *, int, int))((char *)&d.info_callback + 1)) {
          goto LABEL_266;
        }
        int v70 = *(unsigned __int16 *)((char *)&d.read_hash + 1);
        unint64_t v71 = (unsigned __int16 *)EVP_HPKE_CTX_kdf(v170);
        if (v70 != EVP_HPKE_KDF_id(v71)
          || (int v72 = *(unsigned __int16 *)((char *)&d.msg_callback_arg + 1),
              unint64_t v73 = (unsigned __int16 *)EVP_HPKE_CTX_aead((uint64_t)v170),
              v72 != EVP_HPKE_KDF_id(v73)))
        {
          int v67 = 47;
          int v68 = 727;
          goto LABEL_266;
        }
        int v67 = 47;
        int v68 = 727;
        if (BYTE1(d.max_cert_list) != *((unsigned __int8 *)this + 1596) || *(void *)&d.sid_ctx[21]) {
          goto LABEL_266;
        }
        BYTE1(d.sid_ctx_length) = 50;
        LOBYTE(d.version) = -86;
        if ((bssl::ssl_client_hello_decrypt((uint64_t *)this, (unsigned char *)&d.sid_ctx_length + 1, &d, v171, (int *)((char *)&d.version + 1), *(char **)((char *)&d.tlsext_debug_cb + 1), *(unint64_t *)((char *)&d.tlsext_debug_arg + 1)) & 1) == 0)
        {
          ERR_put_error(16, 0, 138, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 739);
          bssl::ssl_send_alert(v62, (ssl_st *)2, BYTE1(d.sid_ctx_length));
          goto LABEL_281;
        }
        if ((bssl::SSL_HANDSHAKE::GetClientHello((uint64_t *)this, (uint64_t)&d.ex_data.sk + 1, (uint64_t)&d.version + 1) & 1) == 0)
        {
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 746);
          goto LABEL_281;
        }
        uint64_t v65 = *((void *)v62 + 6);
LABEL_140:
        if ((*(_WORD *)(v65 + 220) & 0x40) == 0) {
          goto LABEL_141;
        }
        *(int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1) = (int (__cdecl *)(int, X509_STORE_CTX *))0xAAAAAAAAAAAAAAAALL;
        *(void (__cdecl **)(const SSL *, int, int))((char *)&d.info_callback + 1) = (void (__cdecl *)(const SSL *, int, int))0xAAAAAAAAAAAAAAAALL;
        if ((bssl::ssl_client_hello_get_extension((uint64_t)&d.version + 1, (int (__cdecl **)(int, X509_STORE_CTX *))((char *)&d.verify_callback + 1), 41) & 1) == 0)
        {
          ERR_put_error(16, 0, 303, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 762);
          bssl::ssl_send_alert(v62, (ssl_st *)2, 47);
          goto LABEL_281;
        }
        *(void *)&d.sid_ctx[13] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&d.sid_ctx[21] = 0xAAAAAAAAAAAAAAAALL;
        *(void (__cdecl **)(SSL *, int, int, unsigned __int8 *, int, void *))((char *)&d.tlsext_debug_cb + 1) = (void (__cdecl *)(SSL *, int, int, unsigned __int8 *, int, void *))0xAAAAAAAAAAAAAAAALL;
        *(void **)((char *)&d.tlsext_debug_arg + 1) = (void *)0xAAAAAAAAAAAAAAAALL;
        *(_DWORD *)((char *)&d.read_hash + 1) = -1431655766;
        BYTE1(d.msg_callback_arg) = 50;
        if ((bssl::ssl_ext_pre_shared_key_parse_clienthello((uint64_t)this, (unint64_t *)&d.sid_ctx[13], (void (__cdecl **)(SSL *, int, int, unsigned __int8 *, int, void *))((char *)&d.tlsext_debug_cb + 1), (int *)((char *)&d.read_hash + 1), (char *)&d.msg_callback_arg + 1, (uint64_t)&d.version + 1, (uint64_t)&d.verify_callback + 1) & 1) == 0)
        {
          int v96 = BYTE1(d.msg_callback_arg);
          goto LABEL_277;
        }
        if ((bssl::tls13_verify_psk_binder((uint64_t)this, *((bssl **)this + 190), (uint64_t)&d.ex_data.sk + 1, (uint64_t)&d.tlsext_debug_cb + 1) & 1) == 0)
        {
          int v96 = 51;
LABEL_277:
          bssl::ssl_send_alert(v62, (ssl_st *)2, v96);
LABEL_281:
          uint64_t v5 = 0;
          goto LABEL_282;
        }
LABEL_141:
        if (!bssl::resolve_ecdhe_secret((uint64_t)this, (uint64_t)&d.version + 1)
          || !bssl::ssl_hash_message((uint64_t)this, (uint64_t)&d.ex_data.sk + 1))
        {
          goto LABEL_281;
        }
        if ((*(unsigned int (**)(bssl *))(*(void *)v62 + 40))(v62))
        {
          bssl::ssl_send_alert(v62, (ssl_st *)2, 10);
          ERR_put_error(16, 0, 255, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 797);
          goto LABEL_281;
        }
        (*(void (**)(bssl *))(*(void *)v62 + 32))(v62);
        OPENSSL_free(*((void **)this + 75));
        *uint64_t v171 = 0;
        v171[1] = 0;
        uint64_t v5 = 1;
        *((_DWORD *)this + 6) = 4;
        goto LABEL_282;
      case 4:
        uint64_t v56 = *(unsigned __int8 ***)this;
        uint64_t v57 = *(void *)(*(void *)this + 48);
        unint64_t v58 = (_OWORD *)(v57 + 16);
        uint64_t v59 = *((void *)this + 197);
        if (v59)
        {
          if ((*((unsigned char *)this + 1586) & 8) != 0 || *(void *)(v59 + 24) != 32)
          {
            RAND_bytes((unsigned __int8 *)(v57 + 16), 32);
            if ((*((unsigned char *)this + 1586) & 8) != 0)
            {
              unint64_t v84 = (void *)(v59 + 16);
              if (!bssl::Array<unsigned char>::Init((uint64_t)v84, 0x20uLL)) {
                goto LABEL_281;
              }
              uint64_t v85 = (_OWORD *)*v84;
              long long v86 = *(_OWORD *)(v57 + 32);
              *uint64_t v85 = *v58;
              v85[1] = v86;
            }
          }
          else
          {
            uint64_t v60 = *(_OWORD **)(v59 + 16);
            long long v61 = v60[1];
            *unint64_t v58 = *v60;
            *(_OWORD *)(v57 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v61;
          }
        }
        else
        {
          RAND_bytes((unsigned __int8 *)(v57 + 16), 32);
        }
        *(uint64_t *)((char *)&d.max_cert_list + 1) = 0;
        *(void *)((char *)&d.first_packet + 1) = 0;
        v87.suint64_t k = (STACK *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&v87.dummy = 0xAAAAAAAAAAAAAAAALL;
        *(CRYPTO_EX_DATA *)((char *)&d.client_CA + 1) = v87;
        *(CRYPTO_EX_DATA *)((char *)&d.options + 1) = v87;
        *(CRYPTO_EX_DATA *)((char *)&d.ex_data + 1) = v87;
        CBB_zero((STACK **)((char *)&d.ex_data.sk + 1));
        *(void *)&long long v88 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v88 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.error + 1) = v88;
        *(_OWORD *)((char *)&d.debug + 1) = v88;
        *(_OWORD *)((char *)&d.generate_session_id + 1) = v88;
        *(_OWORD *)((char *)&d.verify_callback + 1) = v88;
        *(_OWORD *)&d.sid_ctx[13] = v88;
        *(_OWORD *)&d.sid_ctx[29] = v88;
        *(_OWORD *)((char *)&d.tlsext_hostname + 1) = v88;
        *(_OWORD *)((char *)&d.tlsext_status_expected + 1) = v88;
        *(_OWORD *)((char *)&d.tlsext_debug_cb + 1) = v88;
        if (!(*((unsigned int (**)(unsigned __int8 **, char *, char *, uint64_t))*v56 + 11))(v56, (char *)&d.ex_data.sk + 1, (char *)&d.verify_callback + 1, 2))goto LABEL_420; {
        if (!CBB_add_u16((uint64_t)&d.verify_callback + 1, 0x303u))
        }
          goto LABEL_420;
        if (!CBB_add_bytes((uint64_t)&d.verify_callback + 1, v56[6] + 16, 0x20uLL)) {
          goto LABEL_420;
        }
        if (!CBB_add_u8_length_prefixed((uint64_t *)((char *)&d.verify_callback + 1), (uint64_t)&d.tlsext_debug_cb + 1))goto LABEL_420; {
        if (!CBB_add_bytes((uint64_t)&d.tlsext_debug_cb + 1, __dst, *((unsigned __int8 *)this + 1629)))
        }
          goto LABEL_420;
        unsigned int v89 = SSL_CIPHER_get_protocol_id(*((void *)this + 194));
        if (!CBB_add_u16((uint64_t)&d.verify_callback + 1, v89)) {
          goto LABEL_420;
        }
        if (!CBB_add_u8((uint64_t)&d.verify_callback + 1, 0)) {
          goto LABEL_420;
        }
        if (!CBB_add_u16_length_prefixed((uint64_t *)((char *)&d.verify_callback + 1), (uint64_t)&d.sid_ctx[13]))goto LABEL_420; {
        if (!bssl::ssl_ext_pre_shared_key_add_serverhello((uint64_t)this, (uint64_t *)&d.sid_ctx[13]))
        }
          goto LABEL_420;
        if (!bssl::ssl_ext_key_share_add_serverhello((uint64_t)this, (uint64_t *)&d.sid_ctx[13])) {
          goto LABEL_420;
        }
        if (!CBB_add_u16((uint64_t)&d.sid_ctx[13], 0x2Bu)) {
          goto LABEL_420;
        }
        *(void *)&long long v90 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v90 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.rbio + 1) = v90;
        *(_OWORD *)((char *)&d.bbio + 1) = v90;
        *(_OWORD *)((char *)&d.version + 1) = v90;
        if (!CBB_add_u16_length_prefixed((uint64_t *)&d.sid_ctx[13], (uint64_t)&d.version + 1)
          || !CBB_add_u16((uint64_t)&d.version + 1, *(unsigned __int16 *)(*(void *)this + 16))
          || !CBB_flush((uint64_t *)&d.sid_ctx[13])
          || ((*((uint64_t (**)(unsigned __int8 **, char *, char *))*v56 + 12))(v56, (char *)&d.ex_data.sk + 1, (char *)&d.max_cert_list + 1) & 1) == 0)
        {
          goto LABEL_420;
        }
        int v92 = *((_DWORD *)this + 396);
        if (*((_DWORD *)v56[6] + 54) == 1)
        {
          if ((v92 & 1) == 0) {
            __assert_rtn("do_send_server_hello", "tls13_server.cc", 844, "ssl->s3->ech_status != ssl_ech_accepted || hs->ech_is_inner");
          }
        }
        else if ((v92 & 1) == 0)
        {
          goto LABEL_367;
        }
        unint64_t v142 = bssl::ssl_ech_confirmation_signal_hello_offset(v56, v91);
        int v143 = (void *)(v57 + 40);
        if (!bssl::ssl_ech_accept_confirmation((int)this, (int)v143, 8, *((_DWORD *)v56 + 12) + 48, 32, (bssl::SSLTranscript *)v179, 0, v144, *(char **)((char *)&d.max_cert_list + 1), *(unint64_t *)((char *)&d.first_packet + 1), v142))goto LABEL_420; {
        if (*(void *)((char *)&d.first_packet + 1) < v142)
        }
          abort();
        *(void *)(*(uint64_t *)((char *)&d.max_cert_list + 1) + v142) = *v143;
LABEL_367:
        int v145 = (uint64_t (*)(unsigned __int8 **, char *))*((void *)*v56 + 13);
        *(void *)((char *)&d.sid_ctx_length + 1) = 0;
        *(void *)&d.sid_ctx[5] = 0;
        OPENSSL_free(0);
        *(void *)((char *)&d.sid_ctx_length + 1) = *(uint64_t *)((char *)&d.max_cert_list + 1);
        *(void *)&d.sid_ctx[5] = *(void *)((char *)&d.first_packet + 1);
        *(uint64_t *)((char *)&d.max_cert_list + 1) = 0;
        *(void *)((char *)&d.first_packet + 1) = 0;
        LOBYTE(v145) = v145(v56, (char *)&d.sid_ctx_length + 1);
        OPENSSL_free(*(void **)((char *)&d.sid_ctx_length + 1));
        *(void *)((char *)&d.sid_ctx_length + 1) = 0;
        *(void *)&d.sid_ctx[5] = 0;
        if ((v145 & 1) == 0) {
          goto LABEL_420;
        }
        OPENSSL_free(*(void **)v169);
        *(void *)uint64_t v169 = 0;
        *((void *)v169 + 1) = 0;
        if ((v56[6][221] & 0x20) == 0 && !(*((unsigned int (**)(unsigned __int8 **))*v56 + 14))(v56)) {
          goto LABEL_420;
        }
        if (!bssl::tls13_derive_handshake_secrets(this, v146)
          || (bssl::tls13_set_traffic_key((uint64_t)v56, (const ssl_session_st *)2, 1, *((bssl **)this + 190), v168, *((void *)this + 4)) & 1) == 0|| !(*((unsigned int (**)(unsigned __int8 **, char *, char *, uint64_t))*v56 + 11))(v56, (char *)&d.ex_data.sk + 1, (char *)&d.verify_callback + 1, 8)|| !bssl::ssl_add_serverhello_tlsext((uint64_t)this, (uint64_t *)((char *)&d.verify_callback + 1))|| !bssl::ssl_add_message_cbb((uint64_t)v56, (uint64_t)&d.ex_data.sk + 1))
        {
          goto LABEL_420;
        }
        unsigned int v148 = *((_DWORD *)this + 396);
        if ((*((_WORD *)v56[6] + 110) & 0x40) == 0)
        {
          uint64_t v149 = *((void *)this + 1);
          unsigned int v150 = v148 & 0xFFFFFFDF;
          BOOL v9 = (v148 & 0x2000000) == 0;
          unsigned int v148 = v148 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v149 + 300) & 1));
          *((_DWORD *)this + 396) = v148;
          int v151 = *(unsigned char *)(v149 + 300) & 4;
          if (!v9 && v151 != 0) {
            unsigned int v148 = v150;
          }
          *((_DWORD *)this + 396) = v148;
        }
        if ((v148 & 0x20) != 0)
        {
          *(void *)&long long v164 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v164 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)((char *)&d.rbio + 1) = v164;
          *(_OWORD *)((char *)&d.bbio + 1) = v164;
          *(_OWORD *)((char *)&d.version + 1) = v164;
          *(_OWORD *)((char *)&d.enc_write_ctx + 1) = v164;
          *(_OWORD *)((char *)&d.compress + 1) = v164;
          *(_OWORD *)((char *)&d.cipher_list_by_id + 1) = v164;
          *(_OWORD *)((char *)&d.read_hash + 1) = v164;
          *(_OWORD *)((char *)&d.msg_callback_arg + 1) = v164;
          *(_OWORD *)((char *)&d.param + 1) = v164;
          if (!(*((unsigned int (**)(unsigned __int8 **, char *, char *, uint64_t))*v56 + 11))(v56, (char *)&d.ex_data.sk + 1, (char *)&d.verify_callback + 1, 13))goto LABEL_420; {
          if (!CBB_add_u8((uint64_t)&d.verify_callback + 1, 0))
          }
            goto LABEL_420;
          if (!CBB_add_u16_length_prefixed((uint64_t *)((char *)&d.verify_callback + 1), (uint64_t)&d.version + 1))goto LABEL_420; {
          if (!CBB_add_u16((uint64_t)&d.version + 1, 0xDu))
          }
            goto LABEL_420;
          if (!CBB_add_u16_length_prefixed((uint64_t *)((char *)&d.version + 1), (uint64_t)&d.read_hash + 1))goto LABEL_420; {
          if (!CBB_add_u16_length_prefixed((uint64_t *)((char *)&d.read_hash + 1), (uint64_t)&d.msg_callback_arg + 1))goto LABEL_420;
          }
          if (!bssl::tls12_add_verify_sigalgs((uint64_t)this, (uint64_t)&d.msg_callback_arg + 1)) {
            goto LABEL_420;
          }
          if (bssl::ssl_has_client_CAs(*((bssl **)this + 1), v165))
          {
            *(void *)&long long v166 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v166 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)((char *)&d.s3 + 1) = v166;
            *(_OWORD *)((char *)&d.read_ahead + 1) = v166;
            *(_OWORD *)((char *)&d.packet_length + 1) = v166;
            if (!CBB_add_u16((uint64_t)&d.version + 1, 0x2Fu)
              || !CBB_add_u16_length_prefixed((uint64_t *)((char *)&d.version + 1), (uint64_t)&d.packet_length + 1)|| !bssl::ssl_add_client_CA_list(this, (uint64_t *)((char *)&d.packet_length + 1))|| !CBB_flush((uint64_t *)((char *)&d.version + 1)))
            {
              goto LABEL_420;
            }
          }
          if ((bssl::ssl_add_message_cbb((uint64_t)v56, (uint64_t)&d.ex_data.sk + 1) & 1) == 0) {
            goto LABEL_420;
          }
        }
        if ((*((_WORD *)v56[6] + 110) & 0x40) != 0)
        {
          int v157 = 6;
          goto LABEL_424;
        }
        if (!bssl::ssl_has_certificate(this, v147) && !bssl::ssl_has_server_raw_public_key_certificate(this, v153))
        {
          ERR_put_error(16, 0, 174, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 936);
          uint64_t v5 = 0;
          goto LABEL_421;
        }
        if (bssl::tls13_add_certificate(this, v153, v154, v155, v156))
        {
          int v157 = 5;
LABEL_424:
          *((_DWORD *)this + 6) = v157;
          uint64_t v5 = 1;
LABEL_421:
          CBB_cleanup((uint64_t)&d.ex_data.sk + 1);
          OPENSSL_free(*(void **)((char *)&d.max_cert_list + 1));
          goto LABEL_282;
        }
LABEL_420:
        uint64_t v5 = 0;
        goto LABEL_421;
      case 5:
        int v48 = bssl::tls13_add_certificate_verify(this, a2);
        if (v48)
        {
          if (v48 == 2) {
            goto LABEL_281;
          }
          if (v48 != 1) {
            bssl::tls13_server_handshake();
          }
          uint64_t v5 = 9;
          int v21 = 5;
        }
        else
        {
          int v21 = 6;
        }
        goto LABEL_211;
      case 6:
        int v49 = *((_DWORD *)this + 396);
        if ((v49 & 0x80000) != 0)
        {
LABEL_104:
          uint64_t v5 = 17;
          goto LABEL_282;
        }
        uint64_t v50 = *(void *)this;
        *((_DWORD *)this + 396) = v49 | 0x1000000;
        if (!bssl::tls13_add_finished((bssl **)this, a2)) {
          goto LABEL_281;
        }
        bssl::SSLTranscript::DigestLen((bssl::SSLTranscript *)v179);
        if (!bssl::tls13_advance_key_schedule((uint64_t)this)
          || !bssl::tls13_derive_application_secrets(this, a2)
          || !bssl::tls13_set_traffic_key(v50, (const ssl_session_st *)3, 1, *((bssl **)this + 190), v172, *((void *)this + 4)))
        {
          goto LABEL_281;
        }
        *((_DWORD *)this + 6) = 7;
        if ((*((unsigned char *)this + 1586) & 4) != 0) {
          uint64_t v5 = 7;
        }
        else {
          uint64_t v5 = 1;
        }
        goto LABEL_282;
      case 7:
        if ((*(_WORD *)(*(void *)(*(void *)this + 48) + 220) & 0x400) == 0) {
          goto LABEL_56;
        }
        if (*(void *)(*(void *)this + 168)
          || (bssl::SSLTranscript::Update(v179, &bssl::do_send_half_rtt_ticket(bssl::SSL_HANDSHAKE *)::kEndOfEarlyData, 4uLL) & 1) != 0)
        {
          *(void *)((char *)&d.version + 1) = 0xAAAAAAAAAAAAAAAALL;
          if (bssl::tls13_finished_mac(this, v177, (unsigned __int8 *)&d.version + 1, 0))
          {
            if (*(void *)((char *)&d.version + 1) == *((void *)this + 4))
            {
              if (SSL_is_dtls(*(unsigned __int8 ***)this)) {
                bssl::tls13_server_handshake();
              }
              unint64_t v81 = *((void *)this + 4);
              if (v81 >= 0x100) {
                bssl::tls13_server_handshake();
              }
              *(_WORD *)((char *)&d.ex_data.sk + 1) = 20;
              BYTE3(d.ex_data.sk) = 0;
              BYTE4(d.ex_data.sk) = v81;
              if (bssl::SSLTranscript::Update(v179, (char *)&d.ex_data.sk + 1, 4uLL)
                && bssl::SSLTranscript::Update(v179, v177, *((void *)this + 4))
                && bssl::tls13_derive_resumption_secret(this, a2)
                && (bssl::add_new_session_tickets((ssl_st **)this, (bssl::SSL_HANDSHAKE *)((char *)&d.verify_callback + 1), (BOOL *)a3) & 1) != 0)
              {
LABEL_56:
                *((_DWORD *)this + 6) = 8;
                uint64_t v5 = 4;
                goto LABEL_282;
              }
            }
            else
            {
              ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 1016);
            }
          }
        }
        else
        {
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 1005);
        }
        goto LABEL_281;
      case 8:
        uint64_t v54 = *(void *)this;
        if ((*(_WORD *)(*(void *)(*(void *)this + 48) + 220) & 0x400) == 0) {
          goto LABEL_113;
        }
        if (!bssl::tls13_set_traffic_key(*(void *)this, (const ssl_session_st *)1, 0, *((bssl **)this + 190), v178, *((void *)this + 4)))goto LABEL_281; {
        *((_DWORD *)this + 396) |= 0x3400u;
        }
LABEL_113:
        if (*(void *)(v54 + 168))
        {
          if (!bssl::tls13_set_traffic_key(v54, (const ssl_session_st *)2, 0, *((bssl **)this + 190), v180, *((void *)this + 4)))goto LABEL_281; {
          unsigned int v55 = 12;
          }
        }
        else
        {
          unsigned int v55 = 14;
        }
        *((_DWORD *)this + 6) = 9;
        if ((*(_WORD *)(*(void *)(v54 + 48) + 220) & 0x400) != 0) {
          uint64_t v5 = v55;
        }
        else {
          uint64_t v5 = 1;
        }
        goto LABEL_282;
      case 9:
        uint64_t v31 = *(bssl **)this;
        if (*(void *)(*(void *)this + 168)) {
          goto LABEL_54;
        }
        if ((*(_WORD *)(*((void *)v31 + 6) + 220) & 0x400) == 0) {
          goto LABEL_189;
        }
        *(BIO **)((char *)&d.bbio + 1) = (BIO *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v93 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v93 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.version + 1) = v93;
        *(_OWORD *)((char *)&d.rbio + 1) = v93;
        if (!(*(unsigned int (**)(bssl *, char *))(*(void *)v31 + 24))(v31, (char *)&d.version + 1)) {
          goto LABEL_220;
        }
        if (!bssl::ssl_check_message_type(v31, (uint64_t)&d.version + 1, 5)) {
          goto LABEL_281;
        }
        if (*(BIO **)((char *)&d.rbio + 1))
        {
          bssl::ssl_send_alert(v31, (ssl_st *)2, 50);
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 1089);
        }
        else
        {
          (*(void (**)(bssl *))(*(void *)v31 + 32))(v31);
LABEL_189:
          if (bssl::tls13_set_traffic_key((uint64_t)v31, (const ssl_session_st *)2, 0, *((bssl **)this + 190), v180, *((void *)this + 4)))
          {
LABEL_54:
            int v21 = 10;
            goto LABEL_211;
          }
        }
        goto LABEL_281;
      case 10:
        if ((*(unsigned char *)(*((void *)this + 190) + 440) & 0x40) == 0) {
          goto LABEL_51;
        }
        unint64_t v22 = *(bssl **)this;
        if ((*(_WORD *)(*(void *)(*(void *)this + 48) + 220) & 0x400) != 0) {
          goto LABEL_51;
        }
        *(BIO **)((char *)&d.bbio + 1) = (BIO *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.version + 1) = v23;
        *(_OWORD *)((char *)&d.rbio + 1) = v23;
        if (!(*(unsigned int (**)(bssl *, char *))(*(void *)v22 + 24))(v22, (char *)&d.version + 1)) {
          goto LABEL_220;
        }
        if (!bssl::ssl_check_message_type(v22, (uint64_t)&d.version + 1, 8)) {
          goto LABEL_281;
        }
        *(_OWORD *)((char *)&d.verify_callback + 1) = *(_OWORD *)((char *)&d.method + 1);
        *(void *)&d.sid_ctx[13] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&d.sid_ctx[21] = 0xAAAAAAAAAAAAAAAALL;
        if (!CBS_get_u16_length_prefixed((unsigned __int8 **)((char *)&d.verify_callback + 1), (unint64_t *)&d.sid_ctx[13])|| *(void (__cdecl **)(const SSL *, int, int))((char *)&d.info_callback + 1))
        {
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 1122);
          bssl::ssl_send_alert(v22, (ssl_st *)2, 50);
          goto LABEL_281;
        }
        if ((*(_WORD *)(*((void *)this + 1) + 301) & 0x2000) != 0) {
          __int16 v24 = 17613;
        }
        else {
          __int16 v24 = 17513;
        }
        *(STACK **)((char *)&d.ex_data.sk + 1) = (STACK *)0xAAAAAAAA0001AAAALL;
        *(_WORD *)((char *)&d.ex_data.sk + 1) = v24;
        *(void *)((char *)&d.ex_data.dummy + 1) = 0;
        *(STACK **)((char *)&d.client_CA + 1) = 0;
        BYTE1(d.read_hash) = 50;
        *(void (__cdecl **)(SSL *, int, int, unsigned __int8 *, int, void *))((char *)&d.tlsext_debug_cb + 1) = (void (__cdecl *)(SSL *, int, int, unsigned __int8 *, int, void *))((char *)&d.ex_data.sk + 1);
        if ((bssl::ssl_parse_extensions((long long *)&d.sid_ctx[13], (char *)&d.read_hash + 1, (uint64_t *)((char *)&d.tlsext_debug_cb + 1), 1, 0) & 1) == 0)
        {
          int v108 = BYTE1(d.read_hash);
LABEL_280:
          bssl::ssl_send_alert(v22, (ssl_st *)2, v108);
          goto LABEL_281;
        }
        if (!BYTE4(d.ex_data.sk))
        {
          ERR_put_error(16, 0, 164, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 1140);
          int v108 = 109;
          goto LABEL_280;
        }
        uint64_t v25 = (void **)&(*v175)[1].sid_ctx[28];
        unint64_t v26 = *(const void **)((char *)&d.ex_data.dummy + 1);
        size_t v27 = *(size_t *)((char *)&d.client_CA + 1);
        int v28 = bssl::Array<unsigned char>::Init((uint64_t)v25, *(unint64_t *)((char *)&d.client_CA + 1));
        char v29 = v28 ^ 1;
        if (!v27) {
          char v29 = 1;
        }
        if ((v29 & 1) == 0) {
          memmove(*v25, v26, v27);
        }
        if (!v28 || (bssl::ssl_hash_message((uint64_t)this, (uint64_t)&d.version + 1) & 1) == 0)
        {
          int v108 = 80;
          goto LABEL_280;
        }
        (*(void (**)(bssl *))(*(void *)v22 + 32))(v22);
LABEL_51:
        int v30 = 11;
LABEL_52:
        *((_DWORD *)this + 6) = v30;
        uint64_t v5 = 1;
LABEL_282:
        if (*((_DWORD *)this + 6) != v4) {
          bssl::ssl_do_info_callback(*(void *)this, (const ssl_st *)0x2001);
        }
        if (v5 == 1) {
          continue;
        }
        return v5;
      case 11:
        unint64_t v74 = *(bssl **)this;
        if ((*((unsigned char *)this + 1584) & 0x20) == 0)
        {
          if ((*(_WORD *)(*((void *)v74 + 6) + 220) & 0x40) == 0) {
            (*v175)->timeout = 0;
          }
          goto LABEL_148;
        }
        char v82 = *(unsigned char *)(*((void *)this + 1) + 300);
        *(BIO **)((char *)&d.bbio + 1) = (BIO *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v83 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v83 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.version + 1) = v83;
        *(_OWORD *)((char *)&d.rbio + 1) = v83;
        if (!(*(unsigned int (**)(bssl *, char *))(*(void *)v74 + 24))(v74, (char *)&d.version + 1))
        {
LABEL_220:
          uint64_t v5 = 3;
          goto LABEL_282;
        }
        if (bssl::ssl_check_message_type(v74, (uint64_t)&d.version + 1, 11)
          && bssl::tls13_process_certificate((EVP_PKEY **)this, (uint64_t)&d.version + 1, (v82 & 2) == 0)
          && bssl::ssl_hash_message((uint64_t)this, (uint64_t)&d.version + 1))
        {
          (*(void (**)(bssl *))(*(void *)v74 + 32))(v74);
          int v30 = 12;
          goto LABEL_52;
        }
        goto LABEL_281;
      case 12:
        uint64_t v51 = *(bssl **)this;
        if (!EVP_MD_CTX_md(*(const EVP_MD_CTX **)(*((void *)this + 190) + 136))) {
          goto LABEL_148;
        }
        *(BIO **)((char *)&d.bbio + 1) = (BIO *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v52 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.version + 1) = v52;
        *(_OWORD *)((char *)&d.rbio + 1) = v52;
        if (!(*(unsigned int (**)(bssl *, char *))(*(void *)v51 + 24))(v51, (char *)&d.version + 1)) {
          goto LABEL_220;
        }
        int v53 = bssl::ssl_verify_peer_cert(this, a2);
        if (v53 == 1) {
          goto LABEL_281;
        }
        if (v53 == 2)
        {
          uint64_t v5 = 16;
          int v21 = 12;
        }
        else
        {
          if (!bssl::ssl_check_message_type(v51, (uint64_t)&d.version + 1, 15)
            || !bssl::tls13_process_certificate_verify((uint64_t)this, (uint64_t)&d.version + 1)
            || !bssl::ssl_hash_message((uint64_t)this, (uint64_t)&d.version + 1))
          {
            goto LABEL_281;
          }
          (*(void (**)(bssl *))(*(void *)v51 + 32))(v51);
LABEL_148:
          int v21 = 13;
        }
LABEL_211:
        *((_DWORD *)this + 6) = v21;
        goto LABEL_282;
      case 13:
        if ((*((unsigned char *)this + 1587) & 2) == 0) {
          goto LABEL_32;
        }
        unint64_t v79 = *(bssl **)this;
        *(BIO **)((char *)&d.bbio + 1) = (BIO *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v80 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v80 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.version + 1) = v80;
        *(_OWORD *)((char *)&d.rbio + 1) = v80;
        if (!(*(unsigned int (**)(bssl *, char *))(*(void *)v79 + 24))(v79, (char *)&d.version + 1)) {
          goto LABEL_220;
        }
        if (!bssl::ssl_check_message_type(v79, (uint64_t)&d.version + 1, 203)
          || !bssl::tls1_verify_channel_id((bssl **)this, (uint64_t)&d.version + 1)
          || !bssl::ssl_hash_message((uint64_t)this, (uint64_t)&d.version + 1))
        {
          goto LABEL_281;
        }
        (*(void (**)(bssl *))(*(void *)v79 + 32))(v79);
LABEL_32:
        int v21 = 14;
        goto LABEL_211;
      case 14:
        unint64_t v76 = *(bssl **)this;
        *(BIO **)((char *)&d.bbio + 1) = (BIO *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v77 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v77 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&d.version + 1) = v77;
        *(_OWORD *)((char *)&d.rbio + 1) = v77;
        if (!(*(unsigned int (**)(bssl *, char *))(*(void *)v76 + 24))(v76, (char *)&d.version + 1)) {
          goto LABEL_220;
        }
        if (!bssl::ssl_check_message_type(v76, (uint64_t)&d.version + 1, 20)
          || !bssl::tls13_process_finished((char *)this, (uint64_t)&d.version + 1, (*(unsigned __int16 *)(*((void *)v76 + 6) + 220) >> 10) & 1)|| !bssl::tls13_set_traffic_key((uint64_t)v76, (const ssl_session_st *)3, 0, *((bssl **)this + 190), v174, *((void *)this + 4)))
        {
          goto LABEL_281;
        }
        if ((*(_WORD *)(*((void *)v76 + 6) + 220) & 0x400) != 0)
        {
          int v78 = 16;
        }
        else
        {
          if (!bssl::ssl_hash_message((uint64_t)this, (uint64_t)&d.version + 1)
            || !bssl::tls13_derive_resumption_secret(this, a2))
          {
            goto LABEL_281;
          }
          int v78 = 15;
        }
        *((_DWORD *)this + 6) = v78;
        (*(void (**)(bssl *))(*(void *)v76 + 32))(v76);
        goto LABEL_282;
      case 15:
        BYTE1(d.version) = -86;
        if (!bssl::add_new_session_tickets((ssl_st **)this, (bssl::SSL_HANDSHAKE *)((char *)&d.version + 1), (BOOL *)a3))goto LABEL_281; {
        *((_DWORD *)this + 6) = 16;
        }
        if (BYTE1(d.version)) {
          BOOL v75 = *(void *)(*(void *)this + 168) == 0;
        }
        else {
          BOOL v75 = 1;
        }
        if (v75) {
          uint64_t v5 = 1;
        }
        else {
          uint64_t v5 = 4;
        }
        goto LABEL_282;
      case 16:
        return v5;
      default:
        goto LABEL_281;
    }
  }
}

void sub_1BA12E24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,SSL_SESSION *ses)
{
  CBB_cleanup(v44 - 224);
  OPENSSL_free(*(void **)(v43 + 304));
  _Unwind_Resume(a1);
}

uint64_t bssl::tls13_server_handshake_int_state(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  return (4 * *((_DWORD *)this + 6)) | 0x2B291800u;
}

const char *bssl::tls13_server_handshake_state(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v2 = *((int *)this + 6);
  if (v2 > 0x10) {
    return "TLS 1.3 server unknown";
  }
  else {
    return off_1E61F2EA8[v2];
  }
}

uint64_t bssl::resolve_ecdhe_secret(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(bssl **)a1;
  int v4 = (void *)*(unsigned __int16 *)(*(void *)(a1 + 1520) + 6);
  char v32 = -86;
  _OWORD v30[2] = 0;
  *(_WORD *)&_OWORD v30[3] = 0;
  *(_DWORD *)&v30[5] = 0;
  uint64_t v31 = 0;
  strcpy(v30, "2");
  if ((bssl::ssl_ext_key_share_parse_clienthello(a1, (BOOL *)&v32, (unint64_t *)&v30[1], v30, a2) & 1) == 0)
  {
    bssl::ssl_send_alert(v3, (ssl_st *)2, v30[0]);
    return 0;
  }
  if (!v32)
  {
    bssl::ssl_send_alert(v3, (ssl_st *)2, 47);
    ERR_put_error(16, 0, 243, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_server.cc", 67);
    return 0;
  }
  __dst = 0;
  size_t v29 = 0;
  uint64_t v5 = *(void *)(a1 + 1576);
  if (!v5 || (*(unsigned char *)(a1 + 1586) & 8) != 0 || *(unsigned __int16 *)(v5 + 32) != v4 || !*(void *)(v5 + 64))
  {
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v27[1] = v14;
    long long v27[2] = v14;
    v27[0] = v14;
    CBB_zero(v27);
    unint64_t v26 = (void *)0xAAAAAAAAAAAAAAAALL;
    bssl::SSLKeyShare::Create(v4, &v26);
    if (v26
      && CBB_init((uint64_t)v27, 0x20uLL)
      && (*(unsigned int (**)(void *, _OWORD *, void **, char *, void, uint64_t))(*v26 + 32))(v26, v27, &__dst, v30, *(void *)&v30[1], v31)&& bssl::CBBFinishArray((uint64_t)v27, a1 + 632))
    {
      if (!v5 || (*(unsigned char *)(a1 + 1586) & 8) == 0) {
        goto LABEL_25;
      }
      *(_WORD *)(v5 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = (_WORD)v4;
      unint64_t v18 = *(const void **)(a1 + 632);
      unint64_t v19 = *(void *)(a1 + 640);
      int v20 = bssl::Array<unsigned char>::Init(v5 + 40, v19);
      char v21 = v20 ^ 1;
      if (!v19) {
        char v21 = 1;
      }
      if ((v21 & 1) == 0) {
        memmove(*(void **)(v5 + 40), v18, v19);
      }
      if (v20)
      {
        unint64_t v22 = __dst;
        size_t v23 = v29;
        char v24 = bssl::Array<unsigned char>::Init(v5 + 56, v29);
        char v25 = v24 ^ 1;
        if (!v23) {
          char v25 = 1;
        }
        if ((v25 & 1) == 0) {
          memmove(*(void **)(v5 + 56), v22, v23);
        }
        if (v24)
        {
LABEL_25:
          std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100](&v26, 0);
          CBB_cleanup((uint64_t)v27);
          goto LABEL_26;
        }
      }
      int v16 = 80;
    }
    else
    {
      int v16 = v30[0];
    }
    bssl::ssl_send_alert(v3, (ssl_st *)2, v16);
    std::unique_ptr<bssl::SSLKeyShare,bssl::internal::Deleter>::reset[abi:ne180100](&v26, 0);
    CBB_cleanup((uint64_t)v27);
    goto LABEL_29;
  }
  uint64_t v6 = *(const void **)(v5 + 40);
  unint64_t v7 = *(void *)(v5 + 48);
  int v8 = bssl::Array<unsigned char>::Init(a1 + 632, v7);
  char v9 = v8 ^ 1;
  if (!v7) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0) {
    memmove(*(void **)(a1 + 632), v6, v7);
  }
  if (!v8) {
    goto LABEL_17;
  }
  uint64_t v10 = *(const void **)(v5 + 56);
  unint64_t v11 = *(void *)(v5 + 64);
  char v12 = bssl::Array<unsigned char>::Init((uint64_t)&__dst, v11);
  char v13 = v12 ^ 1;
  if (!v11) {
    char v13 = 1;
  }
  if ((v13 & 1) == 0) {
    memmove(__dst, v10, v11);
  }
  if ((v12 & 1) == 0)
  {
LABEL_17:
    bssl::ssl_send_alert(v3, (ssl_st *)2, 80);
LABEL_29:
    uint64_t v15 = 0;
    goto LABEL_30;
  }
LABEL_26:
  uint64_t v15 = bssl::tls13_advance_key_schedule(a1);
LABEL_30:
  OPENSSL_free(__dst);
  return v15;
}

void sub_1BA12E73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::add_new_session_tickets(ssl_st **this, bssl::SSL_HANDSHAKE *a2, BOOL *a3)
{
  if (((_BYTE)this[198] & 0x10) != 0)
  {
    uint64_t v5 = *this;
    if ((SSL_get_options((uint64_t)*this) & 0x4000) == 0)
    {
      unsigned int v6 = *((unsigned __int8 *)&v5->s3->empty_fragment_done + 4);
      unsigned int v7 = *((unsigned __int8 *)this + 732);
      if (SSL_session_reused((uint64_t)v5)) {
        unsigned int v7 = *((unsigned __int8 *)this + 733);
      }
      if (v6 <= v7) {
        char v9 = v7;
      }
      else {
        char v9 = v6;
      }
      *((unsigned char *)&v5->s3->empty_fragment_done + 4) = v9;
      bssl::ssl_session_rebase_time((bssl *)v5, this[190], v8);
      if (*((unsigned __int8 *)&v5->s3->empty_fragment_done + 4) > 0x10u) {
        bssl::add_new_session_tickets();
      }
      if (!*((unsigned char *)&v5->s3->empty_fragment_done + 4))
      {
LABEL_44:
        uint64_t result = 1;
        *(unsigned char *)a2 = 1;
        return result;
      }
      uint64_t v10 = 0;
      while (1)
      {
        int v28 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        bssl::SSL_SESSION_dup((bssl *)this[190], (ssl_session_st *)2, &v28);
        if (!v28) {
          return 0;
        }
        if (!RAND_bytes(v28 + 376, 4))
        {
          int v13 = 1;
          goto LABEL_40;
        }
        unint64_t v11 = v28;
        v28[440] |= 8u;
        if ((BYTE4(v5->param) & 4) != 0)
        {
          if (!*(void *)&v5->hit)
          {
            int v14 = 14336;
            goto LABEL_20;
          }
          if (v5->method[1].ssl_clear)
          {
            int v14 = -1;
LABEL_20:
            *((_DWORD *)v11 + 95) = v14;
            int v12 = 1;
            goto LABEL_21;
          }
        }
        int v12 = 0;
LABEL_21:
        char v27 = v10;
        *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v26[1] = v15;
        long long v26[2] = v15;
        v26[0] = v15;
        CBB_zero(v26);
        *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[1] = v16;
        _OWORD v25[2] = v16;
        v25[0] = v16;
        v24[1] = v16;
        _OWORD v24[2] = v16;
        _OWORD v23[2] = v16;
        v24[0] = v16;
        v23[0] = v16;
        v23[1] = v16;
        v22[1] = v16;
        void v22[2] = v16;
        v22[0] = v16;
        if ((*(unsigned int (**)(ssl_st *, _OWORD *, _OWORD *, uint64_t))(*(void *)&v5->version + 88))(v5, v26, v25, 4)&& CBB_add_u32((uint64_t)v25, *((_DWORD *)v28 + 46))&& CBB_add_u32((uint64_t)v25, *((_DWORD *)v28 + 94))&& CBB_add_u8_length_prefixed((uint64_t *)v25, (uint64_t)v24)&& CBB_add_bytes((uint64_t)v24, &v27, 1uLL)&& CBB_add_u16_length_prefixed((uint64_t *)v25, (uint64_t)v23)&& bssl::tls13_derive_session_psk(v28, (const ssl_session_st *)&v27, 1uLL)&& bssl::ssl_encrypt_ticket(this, (uint64_t)v23, (uint64_t)v28)&& CBB_add_u16_length_prefixed((uint64_t *)v25, (uint64_t)v22)&& (!v12|| (*(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL, *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL, v21[1] = v17, v21[2] = v17, v21[0] = v17, CBB_add_u16((uint64_t)v22, 0x2Au))
           && CBB_add_u16_length_prefixed((uint64_t *)v22, (uint64_t)v21)
           && CBB_add_u32((uint64_t)v21, *((_DWORD *)v28 + 95))
           && CBB_flush((uint64_t *)v22))
          && (unsigned int grease_value = bssl::ssl_get_grease_value((uint64_t)this, 5u),
              CBB_add_u16((uint64_t)v22, grease_value))
          && CBB_add_u16((uint64_t)v22, 0))
        {
          int v13 = bssl::ssl_add_message_cbb((uint64_t)v5, (uint64_t)v26) ^ 1;
        }
        else
        {
          int v13 = 1;
        }
        CBB_cleanup((uint64_t)v26);
LABEL_40:
        unint64_t v19 = (SSL_SESSION *)v28;
        int v28 = 0;
        if (v19) {
          SSL_SESSION_free(v19);
        }
        if (v13) {
          return 0;
        }
        if (++v10 >= (unint64_t)*((unsigned __int8 *)&v5->s3->empty_fragment_done + 4)) {
          goto LABEL_44;
        }
      }
    }
  }
  *(unsigned char *)a2 = 0;
  return 1;
}

void sub_1BA12EA80(_Unwind_Exception *a1)
{
  CBB_cleanup(v1 - 128);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)(v1 - 72), 0);
  _Unwind_Resume(a1);
}

boringssl_concrete_boringssl_psk *boringssl_psk_create(void *a1, void *a2)
{
  id v4 = a1;
  id v5 = a2;
  unsigned int v6 = objc_alloc_init(boringssl_concrete_boringssl_psk);
  unsigned int v7 = v6;
  if (v6)
  {
    objc_storeStrong((id *)&v6->key, a1);
    objc_storeStrong((id *)&v7->identity, a2);
  }

  return v7;
}

id *boringssl_psk_copy_key(id *result)
{
  if (result) {
    return (id *)result[1];
  }
  return result;
}

id *boringssl_psk_copy_identity(id *result)
{
  if (result) {
    return (id *)result[2];
  }
  return result;
}

BOOL boringssl_psk_matches_identity_hint(void *a1, void *a2)
{
  if (!a1 || !a2) {
    return 0;
  }
  uint64_t v3 = a1[2];
  id v4 = a2;
  id v5 = a1;
  boringssl_helper_dump_dispatch_data(0, v3);
  boringssl_helper_dump_dispatch_data(0, v4);
  unsigned int v6 = (void *)a1[2];

  BOOL v7 = boringssl_helper_dispatch_data_equal(v6, v4);
  return v7;
}

xpc_object_t boringssl_psk_copy_xpc_object(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1;
  xpc_object_t v3 = xpc_data_create_with_dispatch_data(v1);
  id v4 = v2[2];

  xpc_object_t v5 = xpc_data_create_with_dispatch_data(v4);
  xpc_object_t v6 = xpc_array_create(0, 0);
  xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v3);
  xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v5);

  return v6;
}

void __boringssl_logging_register_debug_log_updates_block_invoke_2(uint64_t a1, char a2)
{
  datapath_logging_enablessl_st d = a2;
}

uint64_t EVP_PKEY_sign_init(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0 && (*(void *)(v1 + 40) || *(void *)(v1 + 48)))
  {
    *((_DWORD *)a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 8;
    return 1;
  }
  else
  {
    ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_ctx.c", 216);
    return 0;
  }
}

uint64_t EVP_PKEY_sign(_DWORD *a1)
{
  if (!a1 || !*(void *)a1 || (uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 40)) == 0)
  {
    int v3 = 125;
    int v4 = 227;
LABEL_9:
    ERR_put_error(6, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_ctx.c", v4);
    return 0;
  }
  if (a1[8] != 8)
  {
    int v3 = 126;
    int v4 = 231;
    goto LABEL_9;
  }

  return v1();
}

EC_KEY *__cdecl EC_KEY_new_by_curve_name(int nid)
{
  uint64_t v2 = (EC_KEY *)EC_KEY_new_method(0);
  if (v2)
  {
    int v3 = EC_GROUP_new_by_curve_name(nid);
    *(void *)uint64_t v2 = v3;
    if (!v3)
    {
      EC_KEY_free(v2);
      return 0;
    }
  }
  return v2;
}

int EC_KEY_set_private_key(EC_KEY *a1, const BIGNUM *a2)
{
  uint64_t v2 = *(void *)a1;
  if (!*(void *)a1)
  {
    ERR_put_error(15, 0, 114, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec_key.c", 236);
    goto LABEL_7;
  }
  xpc_object_t v5 = OPENSSL_zalloc(0x60uLL);
  if (v5)
  {
    xpc_object_t v6 = v5;
    BOOL v7 = v5 + 3;
    *xpc_object_t v5 = v5 + 3;
    int v8 = *(_DWORD *)(v2 + 264);
    *((_DWORD *)v5 + 2) = v8;
    *((_DWORD *)v5 + 3) = v8;
    *((_DWORD *)v5 + 5) = 2;
    if (!ec_bignum_to_scalar(*(void *)a1, v5 + 3, (uint64_t)a2) || ec_scalar_is_zero(*(void *)a1, v7))
    {
      ERR_put_error(15, 0, 113, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec_key.c", 249);
      OPENSSL_free(v6);
LABEL_7:
      LODWORD(v5) = 0;
      return (int)v5;
    }
    OPENSSL_free(*((void **)a1 + 2));
    *((void *)a1 + 2) = v6;
    LODWORD(v5) = 1;
  }
  return (int)v5;
}

uint64_t EC_KEY_is_opaque(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    return *(_DWORD *)(v1 + 48) & 1;
  }
  else {
    return 0;
  }
}

const EC_POINT *__cdecl EC_KEY_get0_public_key(const EC_KEY *a1)
{
  return (const EC_POINT *)*((void *)a1 + 1);
}

unsigned int EC_KEY_get_enc_flags(const EC_KEY *a1)
{
  return *((_DWORD *)a1 + 6);
}

point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY *a1)
{
  return *((_DWORD *)a1 + 7);
}

int EC_KEY_check_key(const EC_KEY *a1)
{
  if (a1 && (v2 = *(const EC_GROUP **)a1) != 0 && (int v3 = (const EC_POINT *)*((void *)a1 + 1)) != 0)
  {
    if (EC_POINT_is_at_infinity(v2, v3))
    {
      int v4 = 119;
      int v5 = 299;
    }
    else
    {
      if (EC_POINT_is_on_curve(*(const EC_GROUP **)a1, *((const EC_POINT **)a1 + 1), 0))
      {
        uint64_t v7 = *((void *)a1 + 2);
        if (v7)
        {
          unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v9[11] = v8;
          v9[12] = v8;
          v9[9] = v8;
          v9[10] = v8;
          v9[7] = v8;
          unsigned __int8 v9[8] = v8;
          v9[5] = v8;
          v9[6] = v8;
          _OWORD v9[3] = v8;
          _OWORD v9[4] = v8;
          v9[1] = v8;
          _OWORD v9[2] = v8;
          v9[0] = v8;
          if (!ec_point_mul_scalar_base(*(_DWORD **)a1, (uint64_t)v9, v7 + 24))
          {
            int v4 = 15;
            int v5 = 317;
            goto LABEL_7;
          }
          if (!ec_GFp_simple_points_equal(*(void *)a1, (uint64_t)v9, *((void *)a1 + 1) + 8))
          {
            int v4 = 113;
            int v5 = 324;
            goto LABEL_7;
          }
        }
        return 1;
      }
      int v4 = 120;
      int v5 = 305;
    }
  }
  else
  {
    int v4 = 67;
    int v5 = 294;
  }
LABEL_7:
  ERR_put_error(15, 0, v4, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec_key.c", v5);
  return 0;
}

unsigned __int8 *EC_KEY_key2buf(const EC_GROUP **a1, point_conversion_form_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, BN_CTX *a6)
{
  if (a1 && (char v9 = a1[1]) != 0 && (v10 = *a1) != 0)
  {
    return EC_POINT_point2buf(v10, v9, a2, a3, a4, a6);
  }
  else
  {
    ERR_put_error(15, 0, 114, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec_key.c", 414);
    return 0;
  }
}

int EC_KEY_generate_key(EC_KEY *a1)
{
  if (!a1 || (uint64_t v2 = *(const EC_GROUP **)a1) == 0)
  {
    int v3 = 67;
    int v4 = 485;
    goto LABEL_6;
  }
  if ((int)EC_GROUP_order_bits((uint64_t)v2) <= 159)
  {
    int v3 = 112;
    int v4 = 491;
LABEL_6:
    ERR_put_error(15, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/ec_key.c", v4);
    return 0;
  }
  xpc_object_t v6 = *(const EC_GROUP **)a1;
  uint64_t v7 = OPENSSL_zalloc(0x60uLL);
  long long v8 = v7;
  if (v7)
  {
    *uint64_t v7 = v7 + 3;
    int v9 = *((_DWORD *)v6 + 66);
    *((_DWORD *)v7 + 2) = v9;
    *((_DWORD *)v7 + 3) = v9;
    *((_DWORD *)v7 + 5) = 2;
  }
  unint64_t v10 = EC_POINT_new(*(const EC_GROUP **)a1);
  unint64_t v11 = v10;
  if (!v8
    || !v10
    || !ec_random_nonzero_scalar(*(void *)a1, v8 + 3, (uint64_t)&EC_KEY_generate_key_kDefaultAdditionalData)|| !ec_point_mul_scalar_base(*(_DWORD **)a1, (uint64_t)v11 + 8, (uint64_t)(v8 + 3)))
  {
    EC_POINT_free(v11);
    OPENSSL_free(v8);
    return 0;
  }
  OPENSSL_free(*((void **)a1 + 2));
  *((void *)a1 + 2) = v8;
  EC_POINT_free(*((EC_POINT **)a1 + 1));
  *((void *)a1 + 1) = v11;
  return 1;
}

NSObject *boringssl_private_key_sign(__SecKey *a1, int a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v5 = a3;
  CFStringRef v6 = (const __CFString *)boringssl_helper_SecKeyAlgorithm_from_signature_algorithm(a2);
  if (!CFEqual(v6, (CFTypeRef)*MEMORY[0x1E4F3BB18]))
  {
    size_t v8 = dispatch_data_get_size(v5);
    int v9 = (UInt8 *)malloc_type_malloc(v8, 0xB1CE70EAuLL);
    if (v9)
    {
      unint64_t v10 = v9;
      boringssl_helper_dispatch_data_copyout(v5, (uint64_t)v9, v8);
      if (v6 != (const __CFString *)*MEMORY[0x1E4F3BAD8])
      {
        CFDataRef v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10, v8);
        free(v10);
        error[0] = 0;
        CFDataRef Signature = SecKeyCreateSignature(a1, v6, v11, error);
        if (Signature)
        {
          CFDataRef v13 = Signature;
          size_t Length = CFDataGetLength(Signature);
          BytePtr = CFDataGetBytePtr(v13);
          dispatch_data_t v16 = dispatch_data_create(BytePtr, Length, 0, 0);
          if (v11) {
            CFRelease(v11);
          }
        }
        else
        {
          if (g_boringssl_log)
          {
            char v24 = (id)g_boringssl_log;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              boringssl_private_key_sign_cold_1(error, v24);
            }
          }
          if (v11) {
            CFRelease(v11);
          }
          dispatch_data_t v16 = 0;
          uint64_t v7 = 0;
          CFDataRef v13 = error[0];
          if (!error[0]) {
            goto LABEL_24;
          }
        }
        CFRelease(v13);
        uint64_t v7 = v16;
        goto LABEL_24;
      }
      long long v17 = EVP_MD_CTX_create();
      if (v17)
      {
        unint64_t v18 = v17;
        unint64_t v19 = EVP_md5_sha1();
        int v30 = -1431655766;
        *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)uint64_t error = v20;
        long long v29 = v20;
        EVP_DigestInit_ex(v18, (const EVP_MD *)v19, 0);
        EVP_DigestUpdate(v18, v10, v8);
        unsigned int s = 0;
        EVP_DigestFinal_ex(v18, (unsigned __int8 *)error, &s);
        EVP_MD_CTX_destroy(v18);
        size_t BlockSize = SecKeyGetBlockSize(a1);
        unint64_t v22 = (uint8_t *)malloc_type_malloc(BlockSize, 0x3C00F584uLL);
        if (v22)
        {
          size_t v23 = v22;
          size_t size = BlockSize;
          if (SecKeyRawSign(a1, 1u, (const uint8_t *)error, 0x24uLL, v22, &size)) {
            uint64_t v7 = 0;
          }
          else {
            uint64_t v7 = dispatch_data_create(v23, size, 0, 0);
          }
          free(v23);
          free(v10);
          goto LABEL_24;
        }
      }
      free(v10);
    }
LABEL_23:
    uint64_t v7 = 0;
    goto LABEL_24;
  }
  uint64_t v7 = g_boringssl_log;
  if (g_boringssl_log)
  {
    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_private_key_sign_cold_2(a2, v7);
    }
    goto LABEL_23;
  }
LABEL_24:

  return v7;
}

dispatch_data_t boringssl_private_key_decrypt(__SecKey *a1, void *a2)
{
  int v3 = a2;
  size_t size = dispatch_data_get_size(v3);
  int v5 = (uint8_t *)malloc_type_malloc(size, 0x55BE1419uLL);
  if (!v5)
  {
    dispatch_data_t v8 = 0;
    goto LABEL_8;
  }
  CFStringRef v6 = v5;
  boringssl_helper_dispatch_data_copyout(v3, (uint64_t)v5, size);
  uint64_t v7 = (char *)malloc_type_malloc(size, 0x14CC763AuLL);
  bzero(v7, size);
  plainTextLeuint64_t n = size;
  if (!SecKeyDecrypt(a1, 0, v6, size, (uint8_t *)v7, &plainTextLen) && plainTextLen <= size)
  {
    int v9 = (char *)malloc_type_malloc(size, 0x4EB6CE1CuLL);
    bzero(v9, size);
    memcpy(&v9[size - plainTextLen], v7, plainTextLen);
    dispatch_data_t v8 = dispatch_data_create(v9, size, 0, 0);
    if (v7) {
      free(v7);
    }
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  dispatch_data_t v8 = 0;
  int v9 = v7;
  if (v7) {
LABEL_5:
  }
    free(v9);
LABEL_6:
  free(v6);
LABEL_8:

  return v8;
}

uint64_t bssl::dtls1_open_app_data(bssl *a1, _OWORD *a2, unint64_t *a3, char *a4, unsigned __int8 *a5, unint64_t a6)
{
  if (SSL_in_init((uint64_t)a1)) {
    bssl::dtls1_open_app_data();
  }
  unsigned __int8 v21 = -86;
  long long v20 = 0uLL;
  uint64_t result = bssl::dtls_open_record(a1, (char *)&v21, (uint64_t)&v20, a3, a4, a5, a6);
  if (!result)
  {
    int v13 = v21;
    if (v21 == 22)
    {
      v18[0] = 0xAAAAAAAAAAAAAAAALL;
      v18[1] = 0xAAAAAAAAAAAAAAAALL;
      memset(v17, 170, 20);
      long long v19 = v20;
      if ((bssl::dtls1_parse_fragment((uint64_t *)&v19, (uint64_t)v17, v18) & 1) == 0)
      {
        ERR_put_error(16, 0, 109, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_pkt.cc", 150);
        char v16 = 50;
LABEL_16:
        *a4 = v16;
        return 4;
      }
      if (LOBYTE(v17[0]) == 20 && *(unsigned __int16 *)(*((void *)a1 + 7) + 50) - 1 == LOWORD(v17[1]))
      {
        if (HIDWORD(v17[1])) {
          return 1;
        }
        if (bssl::dtls1_check_timeout_num(a1, v14))
        {
          bssl::dtls1_retransmit_outgoing_messages(a1, v15);
          return 1;
        }
        *a4 = 0;
        return 4;
      }
      int v13 = v21;
    }
    if (v13 == 23)
    {
      if (*((void *)&v20 + 1))
      {
        uint64_t result = 0;
        *a2 = v20;
        return result;
      }
      return 1;
    }
    ERR_put_error(16, 0, 225, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_pkt.cc", 176);
    char v16 = 10;
    goto LABEL_16;
  }
  return result;
}

uint64_t bssl::dtls1_write_app_data(bssl *a1, unsigned char *a2, unint64_t *a3, char *a4, unint64_t a5)
{
  if (SSL_in_init((uint64_t)a1)) {
    bssl::dtls1_write_app_data();
  }
  *a2 = 0;
  if (*(_DWORD *)(*((void *)a1 + 6) + 176))
  {
    int v10 = 194;
    int v11 = 195;
LABEL_6:
    ERR_put_error(16, 0, v10, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/d1_pkt.cc", v11);
    return 0xFFFFFFFFLL;
  }
  if (a5 > 0x4000)
  {
    int v10 = 143;
    int v11 = 201;
    goto LABEL_6;
  }
  if (!a5)
  {
    *a3 = 0;
    return 1;
  }
  uint64_t result = bssl::dtls1_write_record(a1, (const ssl_st *)0x17, a4, a5, 1);
  if ((int)result >= 1)
  {
    *a3 = a5;
    return 1;
  }
  return result;
}

uint64_t bssl::dtls1_write_record(bssl *this, const ssl_st *a2, char *a3, unint64_t a4, int a5)
{
  if (a4 > 0x4000) {
    bssl::dtls1_write_record();
  }
  CFStringRef v6 = (_WORD *)*((void *)this + 6);
  if (v6[58]) {
    bssl::dtls1_write_record();
  }
  char v10 = (char)a2;
  unint64_t v15 = 0;
  int v11 = bssl::ssl_seal_align_prefix_len((unsigned __int8 **)this, a2);
  uint64_t v12 = SSL_max_seal_overhead(this);
  if (bssl::SSLBuffer::EnsureCap((bssl::SSLBuffer *)(v6 + 52), v11, v12 + a4)
    && (bssl::dtls_seal_record((uint64_t)this, *((void *)v6 + 13) + (unsigned __int16)v6[56] + (unsigned __int16)v6[58], &v15, (unsigned __int16)v6[59] - (unint64_t)(unsigned __int16)v6[58], v10, a3, a4, a5) & 1) != 0)
  {
    bssl::SSLBuffer::DidWrite((uint64_t)(v6 + 52), v15);
    LODWORD(result) = bssl::ssl_write_buffer_flush(this, v13);
    if ((int)result >= 1) {
      return 1;
    }
    else {
      return result;
    }
  }
  else
  {
    bssl::SSLBuffer::Clear(v6 + 52);
    return 0xFFFFFFFFLL;
  }
}

uint64_t bssl::dtls1_dispatch_alert(BIO **this, ssl_st *a2)
{
  uint64_t v3 = bssl::dtls1_write_record((bssl *)this, (const ssl_st *)0x15, (char *)&this[6][4].cb_arg + 5, 2uLL, 1);
  if ((int)v3 >= 1)
  {
    *((_WORD *)&this[6][1].ex_data.dummy + 2) &= ~0x800u;
    int v4 = this[6];
    if (BYTE5(v4[4].cb_arg) == 2)
    {
      BIO_flush(this[4]);
      int v4 = this[6];
    }
    bssl::ssl_do_msg_callback((uint64_t)this, 1, 21, (uint64_t)&v4[4].cb_arg + 5, 2);
    bssl::ssl_do_info_callback((uint64_t)this, (const ssl_st *)0x4008);
  }
  return v3;
}

BOOL bssl::tls1_prf(uint64_t *a1, unsigned char *a2, size_t a3, char *a4, unint64_t a5, const unsigned __int8 *a6, size_t a7, uint64_t a8, const unsigned __int8 *a9, size_t a10, const unsigned __int8 *a11, size_t a12)
{
  return CRYPTO_tls1_prf(a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12) == 1;
}

uint64_t bssl::tls1_configure_aead(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t **a4, char *a5, const ssl_cipher_st *a6)
{
  size_t v6 = (size_t)a6;
  memset(var68, 170, 24);
  if (!bssl::get_key_block_lengths((bssl *)a1, (const ssl_st *)&var68[2], &var68[1], var68, a4[25], a6)) {
    return 0;
  }
  size_t v12 = var68[1];
  unint64_t v13 = 2 * (var68[1] + var68[2] + var68[0]);
  uint64_t v14 = *(void *)(a3 + 8);
  if (!v14)
  {
    if (!bssl::Array<unsigned char>::Init(a3, 2 * (var68[1] + var68[2] + var68[0]))
      || !bssl::generate_key_block(a1, *(ssl_session_st **)a3, *(void *)(a3 + 8), (bssl *)a4))
    {
      return 0;
    }
    uint64_t v14 = *(void *)(a3 + 8);
  }
  if (v14 != v13) {
    bssl::tls1_configure_aead();
  }
  unint64_t v15 = *(ssl_session_st **)a3;
  if (((*(unsigned char *)(a1 + 180) & 1) == 0) == a2)
  {
    if (v13 >= var68[2]) {
      size_t v16 = var68[2];
    }
    else {
      size_t v16 = v13;
    }
    if (v13 >= 2 * var68[2] && v13 >= 2 * (var68[2] + v12))
    {
      unint64_t v17 = 2 * var68[2];
      unint64_t v18 = 2 * (var68[2] + v12);
      unint64_t v19 = var68[0];
      long long v20 = v15;
      goto LABEL_21;
    }
LABEL_38:
    abort();
  }
  if (v13 < var68[2]) {
    goto LABEL_38;
  }
  unint64_t v17 = v12 + 2 * var68[2];
  if (v13 < v17) {
    goto LABEL_38;
  }
  size_t v16 = v13 - var68[2] >= var68[2] ? var68[2] : v13 - var68[2];
  unint64_t v19 = var68[0];
  unint64_t v18 = var68[0] + 2 * (var68[2] + v12);
  if (v13 < v18) {
    goto LABEL_38;
  }
  long long v20 = (ssl_session_st *)((char *)v15 + var68[2]);
LABEL_21:
  if (v13 - v17 < v12) {
    size_t v12 = v13 - v17;
  }
  size_t v21 = v13 - v18;
  if (v13 - v18 >= v19) {
    size_t v21 = v19;
  }
  if (v6)
  {
    if (v6 != v19) {
      return 0;
    }
  }
  else
  {
    a5 = (char *)v15 + v18;
    size_t v6 = v21;
  }
  size_t v23 = (_OWORD *)((char *)&v15->ssl_version + v17);
  uint64_t v35 = (bssl::SSLAEADContext *)0xAAAAAAAAAAAAAAAALL;
  char v24 = (unsigned __int16 *)*(unsigned __int16 *)(a1 + 16);
  char v25 = SSL_is_dtls((unsigned __int8 **)a1) != 0;
  bssl::SSLAEADContext::Create(a2, v24, v25, (uint64_t)a4[25], v23, v12, v20, v16, &v35, a5, v6);
  unint64_t v26 = v35;
  if (v35)
  {
    uint64_t v27 = *(void *)a1;
    if (a2)
    {
      int v28 = *(uint64_t (**)(uint64_t, uint64_t, bssl::SSLAEADContext **, void, void))(v27 + 144);
      uint64_t v35 = 0;
      long long v29 = &v33;
      long long v33 = v26;
      uint64_t v30 = v28(a1, 3, &v33, 0, 0);
    }
    else
    {
      uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, bssl::SSLAEADContext **, void, void))(v27 + 136);
      CRYPTO_EX_DATA v34 = v35;
      uint64_t v35 = 0;
      long long v29 = &v34;
      uint64_t v30 = v31(a1, 3, &v34, 0, 0);
    }
    uint64_t v22 = v30;
    std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](v29, 0);
  }
  else
  {
    uint64_t v22 = 0;
  }
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v35, 0);
  return v22;
}

void sub_1BA12FC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  int v5 = va_arg(va1, bssl::SSLAEADContext *);
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLAEADContext **)va, 0);
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLAEADContext **)va1, 0);
  _Unwind_Resume(a1);
}

uint64_t bssl::get_key_block_lengths(bssl *this, const ssl_st *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, const ssl_cipher_st *a6)
{
  long long v20 = 0;
  unsigned int v11 = bssl::ssl_protocol_version(this, a2);
  char v12 = SSL_is_dtls((unsigned __int8 **)this) != 0;
  if ((bssl::ssl_cipher_get_evp_aead((void **)&v20, (uint64_t *)&a2->version, (uint64_t *)a4, (uint64_t)a5, v11, v12) & 1) == 0)
  {
    int v17 = 130;
    int v18 = 173;
    goto LABEL_6;
  }
  unint64_t v13 = EVP_AEAD_key_length(v20);
  *a3 = v13;
  if (*(void *)&a2->version)
  {
    unint64_t v14 = *a4 + *(void *)&a2->version;
    BOOL v15 = v13 >= v14;
    unint64_t v16 = v13 - v14;
    if (!v15)
    {
      int v17 = 68;
      int v18 = 183;
LABEL_6:
      ERR_put_error(16, 0, v17, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/t1_enc.cc", v18);
      return 0;
    }
    *a3 = v16;
  }
  return 1;
}

BOOL bssl::generate_key_block(uint64_t a1, ssl_session_st *a2, size_t a3, bssl *this)
{
  uint64_t v7 = (char *)this + 11;
  unint64_t v8 = *((unsigned __int8 *)this + 10);
  digest = (uint64_t *)bssl::ssl_session_get_digest(this, a2);
  return CRYPTO_tls1_prf(digest, a2, a3, v7, v8, "key expansion", 0xDuLL, (const unsigned __int8 *)(*(void *)(a1 + 48) + 16), 0x20uLL, (const unsigned __int8 *)(*(void *)(a1 + 48) + 48), 0x20uLL) == 1;
}

uint64_t bssl::tls1_change_cipher_state(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t)(a1 + 195);
  int v5 = (unint64_t **)bssl::ssl_handshake_session(a1);

  return bssl::tls1_configure_aead(v3, a2, v4, v5, 0, 0);
}

uint64_t bssl::tls1_generate_master_secret(uint64_t *a1, unsigned char *a2, char *a3, unint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a1 + 1586))
  {
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v17 = v10;
    long long v18 = v10;
    *(_OWORD *)BOOL v15 = v10;
    long long v16 = v10;
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    unsigned int v11 = (bssl::SSLTranscript *)(a1 + 53);
    if (!bssl::SSLTranscript::GetHash((bssl::SSLTranscript *)(a1 + 53), v15, &v14)) {
      return 0;
    }
    char v12 = (uint64_t *)bssl::SSLTranscript::Digest(v11);
    int v9 = CRYPTO_tls1_prf(v12, a2, 0x30uLL, a3, a4, "extended master secret", 0x16uLL, v15, v14, 0, 0);
  }
  else
  {
    uint64_t v7 = *a1;
    unint64_t v8 = (uint64_t *)bssl::SSLTranscript::Digest((bssl::SSLTranscript *)(a1 + 53));
    int v9 = CRYPTO_tls1_prf(v8, a2, 0x30uLL, a3, a4, "master secret", 0xDuLL, (const unsigned __int8 *)(*(void *)(v7 + 48) + 48), 0x20uLL, (const unsigned __int8 *)(*(void *)(v7 + 48) + 16), 0x20uLL);
  }
  if (v9 == 1) {
    return 48;
  }
  return 0;
}

BOOL SSL_generate_key_block(SSL *a1, ssl_session_st *a2, size_t a3)
{
  if (SSL_in_init((uint64_t)a1) || bssl::ssl_protocol_version((bssl *)a1, v6) >= 0x304)
  {
    ERR_put_error(16, 0, 66, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/t1_enc.cc", 325);
    return 0;
  }
  else
  {
    sessiouint64_t n = (bssl *)SSL_get_session(a1);
    return bssl::generate_key_block((uint64_t)a1, a2, a3, session);
  }
}

uint64_t SSL_export_keying_material(bssl *this, ssl_st *a2, size_t a3, const void *a4, size_t a5, const void *a6, size_t a7, int a8)
{
  if ((*(_WORD *)(*((void *)this + 6) + 220) & 2) != 0
    && bssl::ssl_protocol_version(this, a2) >= 0x304)
  {
    uint64_t v17 = *((void *)this + 6);
    uint64_t v18 = *(unsigned __int8 *)(v17 + 442);
    if (*(unsigned char *)(v17 + 442))
    {
      if (a8) {
        size_t v19 = a7;
      }
      else {
        size_t v19 = 0;
      }
      uint64_t v20 = v17 + 392;
      if (a8) {
        size_t v21 = a6;
      }
      else {
        size_t v21 = 0;
      }
      return bssl::tls13_export_keying_material((const SSL *)this, (int)a2, a3, v20, v18, a4, a5, v16, v21, v19);
    }
    int v23 = 284;
    int v24 = 339;
LABEL_27:
    ERR_put_error(16, 0, v23, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/t1_enc.cc", v24);
    return 0;
  }
  if (SSL_in_init((uint64_t)this) && !SSL_in_false_start((uint64_t)this))
  {
    int v23 = 284;
    int v24 = 355;
    goto LABEL_27;
  }
  if (a8)
  {
    if (a7 >= 0x10000)
    {
      int v23 = 69;
      int v24 = 362;
      goto LABEL_27;
    }
    unint64_t v25 = a7 + 66;
  }
  else
  {
    unint64_t v25 = 64;
  }
  uint64_t v35 = 0;
  size_t v36 = 0;
  if (bssl::Array<unsigned char>::Init((uint64_t)&v35, v25))
  {
    unint64_t v26 = v35;
    uint64_t v27 = *((void *)this + 6);
    long long v28 = *(_OWORD *)(v27 + 64);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)(v27 + 48);
    v26[1] = v28;
    uint64_t v29 = *((void *)this + 6);
    long long v30 = *(_OWORD *)(v29 + 32);
    long long v26[2] = *(_OWORD *)(v29 + 16);
    _OWORD v26[3] = v30;
    if (a8)
    {
      *((_WORD *)v26 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = bswap32(a7) >> 16;
      if (a7) {
        memcpy((char *)v26 + 66, a6, a7);
      }
    }
    sessiouint64_t n = SSL_get_session((const SSL *)this);
    digest = (uint64_t *)bssl::ssl_session_get_digest((bssl *)session, v32);
    BOOL v22 = CRYPTO_tls1_prf(digest, a2, a3, (char *)&session->key_arg[3], session->key_arg[2], (const unsigned __int8 *)a4, a5, (const unsigned __int8 *)v35, v36, 0, 0) == 1;
  }
  else
  {
    BOOL v22 = 0;
  }
  OPENSSL_free(v35);
  return v22;
}

void sub_1BA13021C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL bssl::ssl_has_certificate(bssl *this, const bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v2 = *((void *)this + 188);
  return v2 && *(_DWORD *)(v2 + 4) <= 1u && bssl::ssl_has_private_key(this, a2);
}

BOOL bssl::ssl_has_server_raw_public_key_certificate(bssl *this, const bssl::SSL_HANDSHAKE *a2)
{
  if ((*((unsigned char *)this + 1586) & 0x20) == 0 || *((unsigned char *)this + 730) != 2) {
    return 0;
  }
  BOOL result = bssl::ssl_has_private_key(this, a2);
  if (!result) {
    return result;
  }
  uint64_t v4 = *((void *)this + 188);
  return v4 && *(_DWORD *)(v4 + 4) == 2;
}

BOOL bssl::ssl_parse_cert_chain(char *a1, unint64_t **a2, EVP_PKEY **a3, unsigned __int8 *a4, unsigned __int8 **a5, void **a6)
{
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](a2, 0);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](a3, 0);
  int v23 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_u24_length_prefixed(a5, (unint64_t *)&v23))
  {
    *a1 = 50;
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", 259);
    return 0;
  }
  if (!v24) {
    return 1;
  }
  EVP_MD_CTX ctx = (EVP_MD_CTX *)OPENSSL_sk_new_null();
  if (!ctx)
  {
    BOOL v12 = 0;
    *a1 = 80;
    goto LABEL_27;
  }
  pkey = 0;
  BOOL v12 = v24 == 0;
  unint64_t v13 = 0;
  if (!v24)
  {
LABEL_17:
    uint64_t v16 = (unint64_t *)ctx;
    EVP_MD_CTX ctx = 0;
    std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](a2, v16);
    pkey = 0;
    std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100](a3, v13);
    unint64_t v13 = pkey;
    goto LABEL_25;
  }
  while (1)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    if (!CBS_get_u24_length_prefixed(&v23, (unint64_t *)&v20) || !*((void *)&v20 + 1))
    {
      *a1 = 50;
      ERR_put_error(16, 0, 127, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", 279);
      goto LABEL_25;
    }
    if (!EVP_MD_CTX_md(ctx)) {
      break;
    }
LABEL_14:
    BOOL v15 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)&v20, a6);
    if (!v15) {
      goto LABEL_23;
    }
    size_t v19 = 0;
    if (!OPENSSL_sk_push((unint64_t *)ctx, (uint64_t)v15))
    {
      CRYPTO_BUFFER_free(v15);
LABEL_23:
      char v17 = 80;
      goto LABEL_24;
    }
    BOOL v12 = v24 == 0;
    if (!v24) {
      goto LABEL_17;
    }
  }
  bssl::ssl_cert_parse_pubkey(&v20, &v19);
  unint64_t v14 = v19;
  size_t v19 = 0;
  pkey = v14;
  if (v13)
  {
    EVP_PKEY_free(v13);
    unint64_t v13 = pkey;
    if (!pkey) {
      goto LABEL_29;
    }
    goto LABEL_12;
  }
  unint64_t v13 = v14;
  if (v14)
  {
LABEL_12:
    if (a4) {
      SHA256((const unsigned __int8 *)v20, *((size_t *)&v20 + 1), a4);
    }
    goto LABEL_14;
  }
LABEL_29:
  char v17 = 50;
LABEL_24:
  *a1 = v17;
LABEL_25:
  pkey = 0;
  if (v13) {
    EVP_PKEY_free(v13);
  }
LABEL_27:
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)&ctx, 0);
  return v12;
}

void sub_1BA1304F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  size_t v6 = va_arg(va1, EVP_PKEY *);
  std::unique_ptr<evp_pkey_st,bssl::internal::Deleter>::reset[abi:ne180100]((EVP_PKEY **)va, 0);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)va1, 0);
  _Unwind_Resume(a1);
}

uint64_t bssl::ssl_compare_public_and_private_key(const EVP_PKEY *this, const evp_pkey_st *a2, const evp_pkey_st *a3)
{
  if (EVP_PKEY_is_opaque((uint64_t)a2)) {
    return 1;
  }
  int v6 = EVP_PKEY_cmp(this, a2) + 2;
  uint64_t result = 1;
  switch(v6)
  {
    case 0:
      int v7 = 128;
      int v8 = 383;
      goto LABEL_7;
    case 1:
      int v7 = 115;
      int v8 = 380;
      goto LABEL_7;
    case 2:
      int v7 = 116;
      int v8 = 377;
LABEL_7:
      ERR_put_error(11, 0, v7, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", v8);
      uint64_t result = 0;
      break;
    case 3:
      return result;
    default:
      bssl::ssl_compare_public_and_private_key();
  }
  return result;
}

void bssl::ssl_parse_client_CA_list(uint64_t a1@<X0>, unsigned char *a2@<X1>, unsigned __int8 **a3@<X2>, unint64_t **a4@<X8>)
{
  int v8 = *(void ***)(*(void *)(a1 + 120) + 776);
  unint64_t v14 = OPENSSL_sk_new_null();
  if (!v14)
  {
LABEL_14:
    *a2 = 80;
    goto LABEL_15;
  }
  BOOL v12 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_u16_length_prefixed(a3, (unint64_t *)&v12))
  {
    *a2 = 50;
    ERR_put_error(16, 0, 162, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", 481);
LABEL_15:
    *a4 = 0;
    goto LABEL_16;
  }
  if (v13)
  {
    while (1)
    {
      v11[0] = 0xAAAAAAAAAAAAAAAALL;
      v11[1] = 0xAAAAAAAAAAAAAAAALL;
      if (!CBS_get_u16_length_prefixed(&v12, v11))
      {
        *a2 = 50;
        ERR_put_error(16, 0, 123, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", 489);
        goto LABEL_15;
      }
      int v9 = (unsigned int *)CRYPTO_BUFFER_new_from_CBS((uint64_t)v11, v8);
      if (!v9) {
        goto LABEL_14;
      }
      if (!OPENSSL_sk_push(v14, (uint64_t)v9)) {
        break;
      }
      if (!v13) {
        goto LABEL_8;
      }
    }
    CRYPTO_BUFFER_free(v9);
    goto LABEL_14;
  }
LABEL_8:
  if (((**(uint64_t (***)(unint64_t *))(*(void *)(a1 + 120) + 16))(v14) & 1) == 0)
  {
    *a2 = 50;
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", 504);
    goto LABEL_15;
  }
  long long v10 = v14;
  unint64_t v14 = 0;
  *a4 = v10;
LABEL_16:
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100](&v14, 0);
}

void sub_1BA1307B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::unique_ptr<stack_st_CRYPTO_BUFFER,bssl::internal::Deleter>::reset[abi:ne180100]((unint64_t **)va, 0);
  _Unwind_Resume(a1);
}

const EVP_MD_CTX *bssl::ssl_has_client_CAs(bssl *this, const bssl::SSL_CONFIG *a2)
{
  uint64_t result = (const EVP_MD_CTX *)*((void *)this + 11);
  if (result) {
    return (const EVP_MD_CTX *)(EVP_MD_CTX_md(result) != 0);
  }
  uint64_t result = *(const EVP_MD_CTX **)(*(void *)(*(void *)this + 120) + 400);
  if (result) {
    return (const EVP_MD_CTX *)(EVP_MD_CTX_md(result) != 0);
  }
  return result;
}

uint64_t bssl::ssl_add_client_CA_list(void *a1, uint64_t *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = v4;
  void v14[2] = v4;
  unint64_t v13[2] = v4;
  v14[0] = v4;
  v13[0] = v4;
  v13[1] = v4;
  uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v14);
  if (result)
  {
    int v6 = *(unint64_t **)(a1[1] + 88);
    if ((v6 || (int v6 = *(unint64_t **)(*(void *)(*a1 + 120) + 400)) != 0)
      && (int v7 = EVP_MD_CTX_md((const EVP_MD_CTX *)v6)) != 0)
    {
      int v8 = v7;
      unint64_t v9 = 0;
      while (1)
      {
        long long v10 = OPENSSL_sk_value(v6, v9);
        uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v14, (uint64_t)v13);
        if (!result) {
          break;
        }
        unsigned int v11 = (const void *)CRYPTO_BUFFER_data((uint64_t)v10);
        size_t v12 = CRYPTO_BUFFER_len((uint64_t)v10);
        uint64_t result = CBB_add_bytes((uint64_t)v13, v11, v12);
        if (!result) {
          break;
        }
        if (v8 == (const EVP_MD *)++v9) {
          return CBB_flush(a2) != 0;
        }
      }
    }
    else
    {
      return CBB_flush(a2) != 0;
    }
  }
  return result;
}

uint64_t bssl::ssl_check_leaf_certificate(uint64_t a1, ssl_st *a2)
{
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) >= 0x304) {
    bssl::ssl_check_leaf_certificate();
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 1552) + 24);
  if ((bssl::ssl_cipher_auth_mask_for_key((bssl *)a2, (const evp_pkey_st *)1) & v4) != 0)
  {
    if (EVP_PKEY_id((uint64_t)a2) != 408) {
      return 1;
    }
    int v5 = (const EC_KEY *)EVP_PKEY_get0_EC_KEY((uint64_t)a2);
    LOWORD(v11) = -21846;
    int v6 = EC_KEY_get0_group(v5);
    int curve_name = (unsigned __int16 *)EC_GROUP_get_curve_name(v6);
    if (bssl::ssl_nid_to_group_id((bssl *)&v11, curve_name)
      && bssl::tls1_check_group_id((bssl **)a1, (const ssl_st *)(unsigned __int16)v11)
      && EC_KEY_get_conv_form(v5) == POINT_CONVERSION_UNCOMPRESSED)
    {
      return 1;
    }
    int v9 = 107;
    int v10 = 569;
  }
  else
  {
    int v9 = 241;
    int v10 = 557;
  }
  ERR_put_error(16, 0, v9, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", v10);
  return 0;
}

uint64_t SSL_set_chain_and_key(uint64_t a1, uint64_t *a2, unint64_t a3, evp_pkey_st *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    return bssl::cert_set_chain_and_key(*(void *)(v5 + 32), a2, a3, a4, a5);
  }
  else {
    return 0;
  }
}

uint64_t bssl::cert_set_chain_and_key(uint64_t a1, uint64_t *a2, unint64_t a3, evp_pkey_st *a4, uint64_t a5)
{
  if (!a3 || !((unint64_t)a4 | a5))
  {
    int v7 = 67;
    int v8 = 185;
LABEL_4:
    ERR_put_error(16, 0, v7, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_cert.cc", v8);
    return 0;
  }
  if (a4 && a5)
  {
    int v7 = 275;
    int v8 = 190;
    goto LABEL_4;
  }
  ssl_credential_st::ClearCertAndKey(*(ssl_credential_st **)(a1 + 24));
  if (!SSL_CREDENTIAL_set1_cert_chain(*(ssl_credential_st **)(a1 + 24), a2, a3)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 40))(a1);
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1);
  uint64_t v14 = *(void *)(a1 + 24);
  if (a4)
  {
    return SSL_CREDENTIAL_set1_private_key(v14, a4, v13);
  }
  else
  {
    return SSL_CREDENTIAL_set_private_key_method(v14, a5);
  }
}

void SSL_certs_clear(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 32);
    (*(void (**)(void *))(v2[4] + 8))(v2);
    void *v2 = 0;
    bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::Reset((uint64_t)(v2 + 1), 0, 0);
    uint64_t v3 = (ssl_credential_st *)v2[3];
    ssl_credential_st::ClearCertAndKey(v3);
  }
}

uint64_t SSL_CTX_set_cert_cb(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 432);
  *(void *)(v3 + 64) = a2;
  *(void *)(v3 + 72) = a3;
  return result;
}

uint64_t SSL_get0_peer_pubkey(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 280);
  if (v1) {
    return *(void *)(v1 + 1512);
  }
  else {
    return 0;
  }
}

BOOL SSL_set_signed_cert_timestamp_list(uint64_t a1, const void *a2, unint64_t a3)
{
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  int v4 = (unsigned int *)CRYPTO_BUFFER_new(a2, a3, 0);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  BOOL v6 = SSL_CREDENTIAL_set1_signed_cert_timestamp_list(*(void *)(*(void *)(*(void *)(a1 + 8) + 32) + 24), v4) != 0;
  CRYPTO_BUFFER_free(v5);
  return v6;
}

void sub_1BA130C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)va, 0);
  _Unwind_Resume(a1);
}

BOOL SSL_CTX_set_ocsp_response(uint64_t a1, const void *a2, unint64_t a3)
{
  int v4 = (unsigned int *)CRYPTO_BUFFER_new(a2, a3, 0);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  BOOL v6 = SSL_CREDENTIAL_set1_ocsp_response(*(void *)(*(void *)(a1 + 432) + 24), v4) != 0;
  CRYPTO_BUFFER_free(v5);
  return v6;
}

void sub_1BA130D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)va, 0);
  _Unwind_Resume(a1);
}

BOOL SSL_set_ocsp_response(uint64_t a1, const void *a2, unint64_t a3)
{
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  int v4 = (unsigned int *)CRYPTO_BUFFER_new(a2, a3, 0);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  BOOL v6 = SSL_CREDENTIAL_set1_ocsp_response(*(void *)(*(void *)(*(void *)(a1 + 8) + 32) + 24), v4) != 0;
  CRYPTO_BUFFER_free(v5);
  return v6;
}

void sub_1BA130D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100]((unsigned int **)va, 0);
  _Unwind_Resume(a1);
}

BOOL bssl::ssl_negotiate_version(uint64_t a1, char *a2, _WORD *a3, long long *a4)
{
  uint64_t v8 = 2;
  if (***(unsigned char ***)a1)
  {
    int v9 = (unsigned __int16 *)&bssl::kDTLSVersions;
  }
  else
  {
    uint64_t v8 = 4;
    int v9 = (unsigned __int16 *)&bssl::kTLSVersions;
  }
  int v10 = &v9[v8];
  do
  {
    unsigned int v11 = *v9;
    if (bssl::ssl_supports_version(a1, v11) && (v11 != 772 || (*(unsigned char *)(a1 + 1586) & 0x80) == 0))
    {
      long long v17 = *a4;
      while (*((void *)&v17 + 1))
      {
        unsigned __int16 v16 = -21846;
        int u16 = CBS_get_u16((unsigned __int16 **)&v17, &v16);
        BOOL v13 = u16 != 0;
        if (!u16)
        {
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_versions.cc", 316);
          char v14 = 50;
          goto LABEL_16;
        }
        if (v16 == v11)
        {
          *a3 = v11;
          return v13;
        }
      }
    }
    ++v9;
  }
  while (v9 != v10);
  ERR_put_error(16, 0, 240, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_versions.cc", 328);
  BOOL v13 = 0;
  char v14 = 70;
LABEL_16:
  *a2 = v14;
  return v13;
}

uint64_t SSL_CTX_get_min_proto_version(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 226);
}

uint64_t SSL_CTX_get_max_proto_version(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 224);
}

const char *SSL_SESSION_get_version(uint64_t a1)
{
  uint64_t v1 = 0;
  int v2 = *(unsigned __int16 *)(a1 + 4);
  uint64_t result = "unknown";
  while ((unsigned __int16)bssl::kVersionNames[v1] != v2)
  {
    v1 += 8;
    if (v1 == 48) {
      return result;
    }
  }
  return *(const char **)&bssl::kVersionNames[v1 + 4];
}

uint64_t bssl::SSLTranscript::UpdateForHelloRetryRequest(bssl::SSLTranscript *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(void *)this) {
    **(void **)thiunsigned int s = 0;
  }
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v12 = v2;
  long long v13 = v2;
  *(_OWORD *)int v10 = v2;
  long long v11 = v2;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = bssl::SSLTranscript::GetHash(this, v10, &v9);
  if (result)
  {
    __int16 v6 = 254;
    char v7 = 0;
    size_t v4 = v9;
    char v8 = v9;
    uint64_t v5 = EVP_MD_CTX_md((const EVP_MD_CTX *)((char *)this + 8));
    uint64_t result = EVP_DigestInit_ex((EVP_MD_CTX *)((char *)this + 8), v5, 0);
    if (result)
    {
      uint64_t result = bssl::SSLTranscript::Update((void **)this, &v6, 4uLL);
      if (result) {
        return bssl::SSLTranscript::Update((void **)this, v10, v4);
      }
    }
  }
  return result;
}

uint64_t bssl::SSLTranscript::CopyToHashContext(size_t **this, env_md_ctx_st *a2, const env_md_st *a3)
{
  __int16 v6 = (const EVP_MD_CTX *)(this + 1);
  char v7 = EVP_MD_CTX_md((const EVP_MD_CTX *)(this + 1));
  if (v7)
  {
    int v8 = EVP_MD_type(v7);
    if (v8 == EVP_MD_type(a3))
    {
      int v9 = EVP_MD_CTX_copy_ex(a2, v6);
      return v9 != 0;
    }
  }
  if (*this)
  {
    uint64_t result = EVP_DigestInit_ex(a2, a3, 0);
    if (!result) {
      return result;
    }
    int v9 = EVP_DigestUpdate(a2, (const void *)(*this)[1], **this);
    return v9 != 0;
  }
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_transcript.cc", 216);
  return 0;
}

uint64_t bssl::SSLTranscript::GetFinishedMAC(bssl::SSLTranscript *this, unsigned __int8 *a2, unint64_t *a3, const ssl_session_st *a4, int a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = v10;
  long long v19 = v10;
  *(_OWORD *)unsigned __int16 v16 = v10;
  long long v17 = v10;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = bssl::SSLTranscript::GetHash(this, v16, &v15);
  if (result)
  {
    if (a5) {
      long long v12 = "server finished";
    }
    else {
      long long v12 = "client finished";
    }
    long long v13 = (uint64_t *)EVP_MD_CTX_md((const EVP_MD_CTX *)((char *)this + 8));
    uint64_t result = bssl::tls1_prf(v13, a2, 0xCuLL, (char *)&a4->key_arg[3], a4->key_arg[2], (const unsigned __int8 *)v12, 0xFuLL, v14, v16, v15, 0, 0);
    if (result)
    {
      *a3 = 12;
      return 1;
    }
  }
  return result;
}

uint64_t bssl::ssl_noop_x509_check_client_CA_names()
{
  return 1;
}

uint64_t bssl::ssl_noop_x509_session_verify_cert_chain(bssl *this, ssl_session_st *a2, bssl::SSL_HANDSHAKE *a3, unsigned __int8 *a4)
{
  return 0;
}

uint64_t bssl::ssl_noop_x509_ssl_auto_chain_if_needed(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  return 1;
}

uint64_t bssl::skip_early_data(bssl *this, ssl_st *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *((void *)this + 6);
  unsigned __int16 v5 = *(_WORD *)(v4 + 208) + (_WORD)a3;
  *(_WORD *)(v4 + 20bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v5;
  if ((unint64_t)a3 > v5)
  {
    *(_WORD *)(v4 + 20bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 16385;
LABEL_4:
    ERR_put_error(16, 0, 270, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", 187);
    LOBYTE(a2->version) = 10;
    return 4;
  }
  if (v5 > 0x4000u) {
    goto LABEL_4;
  }
  return 1;
}

uint64_t bssl::ssl_process_alert(bssl *a1, unsigned char *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a4 != 2)
  {
    *a2 = 50;
    int v12 = 102;
    int v13 = 551;
    goto LABEL_12;
  }
  bssl::ssl_do_msg_callback((uint64_t)a1, 0, 21, (uint64_t)a3, 2);
  int v7 = *a3;
  int v8 = a3[1];
  bssl::ssl_do_info_callback((uint64_t)a1, (const ssl_st *)0x4004);
  if (v7 == 2)
  {
    ERR_put_error(16, 0, v8 + 1000, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", 592);
    ERR_add_error_dataf("SSL alert number %d", v14, v15, v16, v17, v18, v19, v20, v8);
    *a2 = 0;
    return 4;
  }
  if (v7 != 1)
  {
    *a2 = 47;
    int v12 = 227;
    int v13 = 599;
    goto LABEL_12;
  }
  uint64_t v10 = *((void *)a1 + 6);
  if (v8)
  {
    if ((*(_WORD *)(v10 + 220) & 2) != 0)
    {
      unsigned int v11 = bssl::ssl_protocol_version(a1, v9);
      if (v8 != 90 && v11 > 0x303)
      {
        *a2 = 50;
        int v12 = 102;
        int v13 = 578;
LABEL_12:
        ERR_put_error(16, 0, v12, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls_record.cc", v13);
        return 4;
      }
      uint64_t v10 = *((void *)a1 + 6);
    }
    unsigned int v22 = ++*(unsigned char *)(v10 + 211);
    if (v22 >= 5)
    {
      *a2 = 10;
      int v12 = 220;
      int v13 = 585;
      goto LABEL_12;
    }
    return 1;
  }
  else
  {
    *(_DWORD *)(v10 + 172) = 1;
    return 3;
  }
}

BOOL bssl::ssl_is_key_type_supported(bssl *this)
{
  BOOL v1 = this == 949;
  if (this == 408) {
    BOOL v1 = 1;
  }
  return this == 6 || v1;
}

BOOL bssl::ssl_has_private_key(bssl *this, const bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v2 = *((void *)this + 188);
  return *(_OWORD *)(v2 + 16) != 0 || *(_DWORD *)(v2 + 4) == 1;
}

uint64_t bssl::ssl_private_key_sign(uint64_t a1, void *a2, unint64_t *a3, unint64_t a4, evp_pkey_st *a5, const void *a6, size_t a7)
{
  int v13 = *(bssl **)a1;
  uint64_t v14 = *(uint64_t **)(a1 + 1504);
  uint64_t v15 = *(void *)(a1 + 1576);
  __s1 = 0;
  size_t __n = 0;
  if (v15)
  {
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&ctx.flagunsigned int s = v16;
    long long v36 = v16;
    *(_OWORD *)&ctx.digest = v16;
    CBB_zero(&ctx);
    if (!CBB_init((uint64_t)&ctx, 0x40uLL)
      || !EVP_marshal_public_key((uint64_t)&ctx, v14[1])
      || !bssl::CBBFinishArray((uint64_t)&ctx, (uint64_t)&__s1))
    {
      bssl::ssl_send_alert(v13, (ssl_st *)2, 80);
      CBB_cleanup((uint64_t)&ctx);
      goto LABEL_31;
    }
    CBB_cleanup((uint64_t)&ctx);
    int v17 = *(_DWORD *)(a1 + 1584);
    if ((v17 & 0x80000) == 0 && *(unsigned __int16 *)(v15 + 72) == a5)
    {
      size_t v18 = *(void *)(v15 + 88);
      if (a7 == v18
        && !memcmp(a6, *(const void **)(v15 + 80), v18)
        && __n == *(void *)(v15 + 104)
        && !memcmp(__s1, *(const void **)(v15 + 96), __n))
      {
        unint64_t v19 = *(void *)(v15 + 120);
        if (v19 - 1 < a4)
        {
          *a3 = v19;
          size_t v20 = *(void *)(v15 + 120);
          if (v20) {
            memcpy(a2, *(const void **)(v15 + 112), v20);
          }
LABEL_29:
          uint64_t v25 = 0;
          goto LABEL_32;
        }
      }
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a1 + 1584);
  }
  if ((v17 & 0x1000000) != 0) {
    __assert_rtn("ssl_private_key_sign", "ssl_privkey.cc", 242, "!hs->can_release_private_key");
  }
  uint64_t v21 = v14[3];
  if (!v21)
  {
    int v23 = (EVP_PKEY *)v14[2];
    *a3 = a4;
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&ctx.digest = v24;
    *(_OWORD *)&ctx.flagunsigned int s = v24;
    EVP_MD_CTX_init(&ctx);
    if (!bssl::setup_ctx(v13, (ssl_st *)&ctx, v23, a5, 0)
      || !EVP_DigestSign((uint64_t)&ctx, (uint64_t)a2, (uint64_t)a3, a6, a7))
    {
      EVP_MD_CTX_cleanup(&ctx);
      goto LABEL_31;
    }
    EVP_MD_CTX_cleanup(&ctx);
    goto LABEL_27;
  }
  if ((v17 & 0x20000) != 0) {
    uint64_t v22 = (*(uint64_t (**)(bssl *, void *, unint64_t *, unint64_t))(v21 + 16))(v13, a2, a3, a4);
  }
  else {
    uint64_t v22 = (*(uint64_t (**)(bssl *, void *, unint64_t *, unint64_t, evp_pkey_st *, const void *, size_t))v21)(v13, a2, a3, a4, a5, a6, a7);
  }
  uint64_t v25 = v22;
  if (v22 == 2) {
    ERR_put_error(16, 0, 287, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_privkey.cc", 253);
  }
  *(_DWORD *)(a1 + 1bssl::Array<unsigned short>::~Array((uint64_t)this + 584) = *(_DWORD *)(a1 + 1584) & 0xFFFDFFFF | ((v25 == 1) << 17);
  if (!v25)
  {
LABEL_27:
    if (!v15 || (*(unsigned char *)(a1 + 1586) & 8) == 0) {
      goto LABEL_29;
    }
    uint64_t v27 = a2;
    *(_WORD *)(v15 + 72) = (_WORD)a5;
    OPENSSL_free(*(void **)(v15 + 96));
    size_t v28 = __n;
    *(void *)(v15 + 96) = __s1;
    *(void *)(v15 + 104) = v28;
    __s1 = 0;
    size_t __n = 0;
    int v29 = bssl::Array<unsigned char>::Init(v15 + 80, a7);
    char v30 = v29 ^ 1;
    if (!a7) {
      char v30 = 1;
    }
    if ((v30 & 1) == 0) {
      memmove(*(void **)(v15 + 80), a6, a7);
    }
    if (v29)
    {
      size_t v31 = *a3;
      int v32 = bssl::Array<unsigned char>::Init(v15 + 112, *a3);
      char v33 = v32 ^ 1;
      if (!v31) {
        char v33 = 1;
      }
      if ((v33 & 1) == 0) {
        memmove(*(void **)(v15 + 112), v27, v31);
      }
      if (v32) {
        goto LABEL_29;
      }
    }
LABEL_31:
    uint64_t v25 = 2;
  }
LABEL_32:
  OPENSSL_free(__s1);
  return v25;
}

void sub_1BA1317D0(_Unwind_Exception *a1, uint64_t a2, EVP_MD_CTX *ctx, uint64_t a4, uint64_t a5, uint64_t ctxa, uint64_t ctx_8, uint64_t ctx_16, uint64_t ctx_24, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::ssl_private_key_decrypt(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = *((_DWORD *)a1 + 396);
  if ((v6 & 0x1000000) != 0) {
    bssl::ssl_private_key_decrypt();
  }
  uint64_t v8 = a1[188];
  uint64_t v9 = *(void *)(v8 + 24);
  if (v9)
  {
    uint64_t v10 = *a1;
    if ((v6 & 0x20000) != 0) {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, a2, a3, a4);
    }
    else {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(v10, a2, a3, a4, a5, a6);
    }
    uint64_t v12 = v11;
    if (v11 == 2) {
      ERR_put_error(16, 0, 287, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_privkey.cc", 313);
    }
    *((_DWORD *)a1 + 396) = a1[198] & 0xFFFDFFFF | ((v12 == 1) << 17);
  }
  else if (EVP_PKEY_get0_RSA(*(void *)(v8 + 16)))
  {
    return 2 * (RSA_decrypt() == 0);
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_privkey.cc", 322);
    return 2;
  }
  return v12;
}

uint64_t SSL_set_private_key_method(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(v2 + 32) + 24);
    uint64_t v4 = 184;
    if ((*(unsigned char *)(result + 180) & 1) == 0) {
      uint64_t v4 = 208;
    }
    uint64_t v5 = *(void *)(v2 + v4);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = v3;
    }
    uint64_t result = SSL_CREDENTIAL_set_private_key_method(v6, a2);
    if (!result) {
      abort();
    }
  }
  return result;
}

void *EVP_aead_null_sha1_tls()
{
  return &aead_null_sha1_tls;
}

void *EVP_aead_aes_128_cbc_sha1_tls()
{
  return &aead_aes_128_cbc_sha1_tls;
}

void *EVP_aead_aes_128_cbc_sha1_tls_implicit_iv()
{
  return &aead_aes_128_cbc_sha1_tls_implicit_iv;
}

void *EVP_aead_aes_128_cbc_sha256_tls()
{
  return &aead_aes_128_cbc_sha256_tls;
}

void *EVP_aead_aes_256_cbc_sha384_tls()
{
  return &aead_aes_256_cbc_sha384_tls;
}

void *EVP_aead_aes_256_cbc_sha1_tls()
{
  return &aead_aes_256_cbc_sha1_tls;
}

void *EVP_aead_aes_256_cbc_sha1_tls_implicit_iv()
{
  return &aead_aes_256_cbc_sha1_tls_implicit_iv;
}

void *EVP_aead_des_ede3_cbc_sha1_tls()
{
  return &aead_des_ede3_cbc_sha1_tls;
}

void *EVP_aead_des_ede3_cbc_sha1_tls_implicit_iv()
{
  return &aead_des_ede3_cbc_sha1_tls_implicit_iv;
}

uint64_t aead_null_sha1_tls_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = EVP_enc_null();
  uint64_t v11 = (EVP_MD *)EVP_sha1();

  return aead_tls_init(a1, a2, a3, a4, a5, v10, v11, 1);
}

void aead_tls_cleanup(uint64_t a1)
{
  EVP_CIPHER_CTX_cleanup((EVP_CIPHER_CTX *)(a1 + 8));

  HMAC_CTX_cleanup((HMAC_CTX *)(a1 + 160));
}

uint64_t aead_tls_open(uint64_t a1, unsigned __int8 *a2, size_t *a3, unint64_t a4, const unsigned __int8 *a5, uint64_t a6, const unsigned __int8 *a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 36))
  {
    int v10 = 112;
    int v11 = 244;
LABEL_13:
    ERR_put_error(30, 0, v10, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/cipher_extra/e_tls.c", v11);
    return 0;
  }
  size_t v20 = (HMAC_CTX *)(a1 + 160);
  if (HMAC_size((const EVP_MD **)(a1 + 160)) > a8)
  {
    int v10 = 101;
    int v11 = 249;
    goto LABEL_13;
  }
  if (a4 < a8)
  {
    int v10 = 103;
    int v11 = 256;
    goto LABEL_13;
  }
  if (EVP_AEAD_nonce_length(*(void *)a1) != a6)
  {
    int v10 = 111;
    int v11 = 261;
    goto LABEL_13;
  }
  if (a10 != 11)
  {
    int v10 = 109;
    int v11 = 266;
    goto LABEL_13;
  }
  if (a8 >> 31)
  {
    int v10 = 117;
    int v11 = 272;
    goto LABEL_13;
  }
  if (EVP_CIPHER_CTX_mode(a1 + 8) != 2
    || *(unsigned char *)(a1 + 329)
    || (uint64_t result = EVP_DecryptInit_ex((EVP_CIPHER_CTX *)(a1 + 8), 0, 0, 0, a5), result))
  {
    int outl = -1431655766;
    uint64_t result = EVP_DecryptUpdate((EVP_CIPHER_CTX *)(a1 + 8), a2, &outl, a7, a8);
    if (result)
    {
      uint64_t v22 = outl;
      uint64_t result = EVP_DecryptFinal_ex((EVP_CIPHER_CTX *)(a1 + 8), &a2[outl], &outl);
      if (result)
      {
        if (outl + v22 != a8) {
          aead_tls_open_cold_5();
        }
        uint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
        size_t v38 = 0xAAAAAAAAAAAAAAAALL;
        if (EVP_CIPHER_CTX_mode(a1 + 8) == 2)
        {
          uint64_t v23 = EVP_CIPHER_CTX_block_size((const EVP_CIPHER_CTX *)(a1 + 8));
          uint64_t v24 = HMAC_size(&v20->md);
          if (!EVP_tls_cbc_remove_padding(&v37, &v38, (uint64_t)a2, a8, v23, v24))
          {
            int v10 = 101;
            int v11 = 308;
            goto LABEL_13;
          }
          size_t v25 = v38;
        }
        else
        {
          uint64_t v37 = -1;
          size_t v38 = a8;
          size_t v25 = a8;
          if (HMAC_size(&v20->md) > a8) {
            aead_tls_open_cold_4();
          }
        }
        size_t v26 = v25 - HMAC_size(&v20->md);
        *(void *)data = *(void *)a9;
        *(_DWORD *)&data[7] = *(_DWORD *)(a9 + 7);
        __int16 v46 = bswap32(v26) >> 16;
        *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v43 = v27;
        long long v44 = v27;
        *(_OWORD *)mssl_st d = v27;
        long long v42 = v27;
        size_t v36 = 0xAAAAAAAAAAAAAAAALL;
        v40[2] = v27;
        _OWORD v40[3] = v27;
        v40[0] = v27;
        v40[1] = v27;
        if (EVP_CIPHER_CTX_mode(a1 + 8) == 2 && EVP_tls_cbc_record_digest_supported(v20->md))
        {
          if (!EVP_tls_cbc_digest_record(*(const EVP_MD **)(a1 + 160), md, &v36, data, (uint64_t)a2, v38, a8, a1 + 264, *(unsigned __int8 *)(a1 + 328)))
          {
            int v10 = 101;
            int v11 = 346;
            goto LABEL_13;
          }
          size_t v28 = v36;
          if (v28 != HMAC_size(&v20->md)) {
            aead_tls_open_cold_3();
          }
          int v29 = (char *)v40;
          EVP_tls_cbc_copy_mac(v40, v36, (uint64_t)a2, v38, a8);
          uint64_t v30 = v36;
        }
        else
        {
          if (EVP_CIPHER_CTX_mode(a1 + 8) == 2) {
            aead_tls_open_cold_1();
          }
          leuint64_t n = -1431655766;
          HMAC_Init_ex(v20, 0, 0, 0, 0);
          if (!v31) {
            return 0;
          }
          HMAC_Update(v20, data, 0xDuLL);
          if (!v32) {
            return 0;
          }
          HMAC_Update(v20, a2, v26);
          if (!v33) {
            return 0;
          }
          HMAC_Final(v20, md, &len);
          if (!v34) {
            return 0;
          }
          uint64_t v30 = len;
          size_t v36 = len;
          if (HMAC_size(&v20->md) != v30) {
            aead_tls_open_cold_2();
          }
          int v29 = (char *)&a2[v26];
        }
        if (!CRYPTO_memcmp(v29, (char *)md, v30) && v37)
        {
          *a3 = v26;
          return 1;
        }
        int v10 = 101;
        int v11 = 380;
        goto LABEL_13;
      }
    }
  }
  return result;
}

void aead_tls_seal_scatter(uint64_t a1, unsigned __int8 *a2, void *a3, unint64_t *a4, unint64_t a5, const unsigned __int8 *a6, uint64_t a7, const unsigned __int8 *a8, unint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 *data, uint64_t a13)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 36))
  {
    int v13 = 112;
    int v14 = 128;
    goto LABEL_25;
  }
  if (a9 >> 31)
  {
    int v13 = 117;
    int v14 = 134;
LABEL_25:
    ERR_put_error(30, 0, v13, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/cipher_extra/e_tls.c", v14);
    return;
  }
  if (aead_tls_tag_len(a1, a9, a11) > a5)
  {
    int v13 = 103;
    int v14 = 139;
    goto LABEL_25;
  }
  if (EVP_AEAD_nonce_length(*(void *)a1) != a7)
  {
    int v13 = 111;
    int v14 = 144;
    goto LABEL_25;
  }
  if (a13 != 11)
  {
    int v13 = 109;
    int v14 = 149;
    goto LABEL_25;
  }
  *(_WORD *)CRYPTO_EX_DATA v40 = bswap32(a9) >> 16;
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v59 = v22;
  long long v60 = v22;
  *(_OWORD *)mssl_st d = v22;
  long long v58 = v22;
  leuint64_t n = -1431655766;
  HMAC_Init_ex((HMAC_CTX *)(a1 + 160), 0, 0, 0, 0);
  if (v23)
  {
    HMAC_Update((HMAC_CTX *)(a1 + 160), data, 0xBuLL);
    if (v24)
    {
      HMAC_Update((HMAC_CTX *)(a1 + 160), v40, 2uLL);
      if (v25)
      {
        HMAC_Update((HMAC_CTX *)(a1 + 160), a8, a9);
        if (v26)
        {
          HMAC_Final((HMAC_CTX *)(a1 + 160), md, &len);
          if (v27)
          {
            if (EVP_CIPHER_CTX_mode(a1 + 8) != 2
              || *(unsigned char *)(a1 + 329)
              || EVP_EncryptInit_ex((EVP_CIPHER_CTX *)(a1 + 8), 0, 0, 0, a6))
            {
              int outl = -1431655766;
              if (EVP_EncryptUpdate((EVP_CIPHER_CTX *)(a1 + 8), a2, &outl, a8, a9))
              {
                unsigned int v28 = EVP_CIPHER_CTX_block_size((const EVP_CIPHER_CTX *)(a1 + 8));
                unint64_t v29 = v28;
                unint64_t v30 = (v28 - (unint64_t)(a9 % v28)) % v28;
                if (v30)
                {
                  if (outl + v28 - v30 != a9) {
                    aead_tls_seal_scatter_cold_6();
                  }
                  *(void *)&long long v31 = 0xAAAAAAAAAAAAAAAALL;
                  *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  *(_OWORD *)out = v31;
                  long long v42 = v31;
                  int v37 = -1431655766;
                  if (!EVP_EncryptUpdate((EVP_CIPHER_CTX *)(a1 + 8), out, &v37, md, v30)) {
                    return;
                  }
                  if (v37 != v29) {
                    aead_tls_seal_scatter_cold_5();
                  }
                  memcpy(&a2[outl], out, v29 - v30);
                  memcpy(a3, &out[v29 - v30], v30);
                  int v32 = v30;
                }
                else
                {
                  int v32 = 0;
                }
                if (!EVP_EncryptUpdate((EVP_CIPHER_CTX *)(a1 + 8), (unsigned __int8 *)a3 + v30, &outl, &md[v30], len - v32))return; {
                unint64_t v33 = v30 + outl;
                }
                if (v29 < 2) {
                  goto LABEL_36;
                }
                if (v29 >= 0x101) {
                  aead_tls_seal_scatter_cold_1();
                }
                if (EVP_CIPHER_CTX_mode(a1 + 8) != 2) {
                  aead_tls_seal_scatter_cold_4();
                }
                *(void *)&long long v34 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
                long long v55 = v34;
                long long v56 = v34;
                long long v53 = v34;
                long long v54 = v34;
                long long v51 = v34;
                long long v52 = v34;
                long long v49 = v34;
                long long v50 = v34;
                long long v47 = v34;
                long long v48 = v34;
                long long v45 = v34;
                long long v46 = v34;
                long long v43 = v34;
                long long v44 = v34;
                *(_OWORD *)out = v34;
                long long v42 = v34;
                int v35 = (len + a9) % v29;
                int v36 = v29 - v35;
                if (v29 != v35) {
                  __memset_chk();
                }
                if (EVP_EncryptUpdate((EVP_CIPHER_CTX *)(a1 + 8), (unsigned __int8 *)a3 + v33, &outl, out, v36))
                {
                  v33 += outl;
LABEL_36:
                  if (EVP_EncryptFinal_ex((EVP_CIPHER_CTX *)(a1 + 8), (unsigned __int8 *)a3 + v33, &outl))
                  {
                    if (outl) {
                      aead_tls_seal_scatter_cold_3();
                    }
                    if (v33 != aead_tls_tag_len(a1, a9, a11)) {
                      aead_tls_seal_scatter_cold_2();
                    }
                    *a4 = v33;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

unint64_t aead_tls_tag_len(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    aead_tls_tag_len_cold_2();
  }
  uint64_t v4 = (const EVP_CIPHER_CTX *)(a1 + 8);
  uint64_t v5 = HMAC_size((const EVP_MD **)(a1 + 160));
  if (EVP_CIPHER_CTX_mode((uint64_t)v4) == 2)
  {
    unsigned int v6 = EVP_CIPHER_CTX_block_size(v4);
    if (!v6 || ((v6 - 1) & v6) != 0) {
      aead_tls_tag_len_cold_1();
    }
    return v6 + (v5 + a2) / (unint64_t)v6 * v6 - a2;
  }
  return v5;
}

uint64_t aead_tls_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5, const EVP_CIPHER *a6, EVP_MD *md, int a8)
{
  if (a4 && EVP_MD_size(md) != a4)
  {
    int v18 = 122;
    int v19 = 63;
    goto LABEL_8;
  }
  if (EVP_AEAD_key_length(*(unsigned __int8 **)a1) != a3)
  {
    int v18 = 102;
    int v19 = 68;
LABEL_8:
    ERR_put_error(30, 0, v18, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/cipher_extra/e_tls.c", v19);
    return 0;
  }
  size_t v15 = EVP_MD_size(md);
  size_t v16 = v15 + EVP_CIPHER_key_length(a6);
  if (a8) {
    uint64_t v17 = EVP_CIPHER_iv_length(a6);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17 + v16 != a3) {
    aead_tls_init_cold_2();
  }
  EVP_CIPHER_CTX_init((EVP_CIPHER_CTX *)(a1 + 8));
  HMAC_CTX_init((HMAC_CTX *)(a1 + 160));
  if (v15 >= 0x41) {
    aead_tls_init_cold_1();
  }
  if (v15) {
    memcpy((void *)(a1 + 264), a2, v15);
  }
  *(unsigned char *)(a1 + 32bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v15;
  *(unsigned char *)(a1 + 329) = a8;
  if (a8) {
    size_t v20 = (const unsigned __int8 *)&a2[v16];
  }
  else {
    size_t v20 = 0;
  }
  if (EVP_CipherInit_ex((EVP_CIPHER_CTX *)(a1 + 8), a6, 0, (const unsigned __int8 *)&a2[v15], v20, a5 == 1))
  {
    HMAC_Init_ex((HMAC_CTX *)(a1 + 160), a2, v15, md, 0);
    if (v21)
    {
      EVP_CIPHER_CTX_set_padding((EVP_CIPHER_CTX *)(a1 + 8), 0);
      return 1;
    }
  }
  EVP_CIPHER_CTX_cleanup((EVP_CIPHER_CTX *)(a1 + 8));
  HMAC_CTX_cleanup((HMAC_CTX *)(a1 + 160));
  return 0;
}

uint64_t aead_aes_128_cbc_sha1_tls_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = EVP_aes_128_cbc();
  int v11 = (EVP_MD *)EVP_sha1();

  return aead_tls_init(a1, a2, a3, a4, a5, v10, v11, 0);
}

uint64_t aead_aes_128_cbc_sha1_tls_implicit_iv_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = EVP_aes_128_cbc();
  int v11 = (EVP_MD *)EVP_sha1();

  return aead_tls_init(a1, a2, a3, a4, a5, v10, v11, 1);
}

uint64_t aead_tls_get_iv(uint64_t a1, void *a2, void *a3)
{
  unsigned int v6 = EVP_CIPHER_CTX_iv_length((const EVP_CIPHER_CTX *)(a1 + 8));
  if (v6 < 2) {
    return 0;
  }
  *a2 = a1 + 60;
  *a3 = v6;
  return 1;
}

uint64_t aead_aes_128_cbc_sha256_tls_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = EVP_aes_128_cbc();
  int v11 = (EVP_MD *)EVP_sha256();

  return aead_tls_init(a1, a2, a3, a4, a5, v10, v11, 0);
}

uint64_t aead_aes_256_cbc_sha384_tls_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = EVP_aes_256_cbc();
  int v11 = (EVP_MD *)EVP_sha384();

  return aead_tls_init(a1, a2, a3, a4, a5, v10, v11, 0);
}

uint64_t aead_aes_256_cbc_sha1_tls_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = EVP_aes_256_cbc();
  int v11 = (EVP_MD *)EVP_sha1();

  return aead_tls_init(a1, a2, a3, a4, a5, v10, v11, 0);
}

uint64_t aead_aes_256_cbc_sha1_tls_implicit_iv_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = EVP_aes_256_cbc();
  int v11 = (EVP_MD *)EVP_sha1();

  return aead_tls_init(a1, a2, a3, a4, a5, v10, v11, 1);
}

uint64_t aead_des_ede3_cbc_sha1_tls_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = EVP_des_ede3_cbc();
  int v11 = (EVP_MD *)EVP_sha1();

  return aead_tls_init(a1, a2, a3, a4, a5, v10, v11, 0);
}

uint64_t aead_des_ede3_cbc_sha1_tls_implicit_iv_init(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = EVP_des_ede3_cbc();
  int v11 = (EVP_MD *)EVP_sha1();

  return aead_tls_init(a1, a2, a3, a4, a5, v10, v11, 1);
}

int BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (!BN_is_odd((uint64_t)m))
  {
    int v12 = 104;
    int v13 = 590;
    goto LABEL_8;
  }
  if (m->neg)
  {
    int v12 = 109;
    int v13 = 594;
LABEL_8:
    ERR_put_error(3, 0, v12, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/exponentiation.c", v13);
    LODWORD(v14) = 0;
    return (int)v14;
  }
  if (a->neg || (BN_ucmp(a, m) & 0x80000000) == 0)
  {
    int v12 = 107;
    int v13 = 599;
    goto LABEL_8;
  }
  int v16 = BN_num_bits(p);
  if (v16)
  {
    unsigned int v17 = v16;
    unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v59 = v18;
    long long v58 = v18;
    long long v57 = v18;
    long long v56 = v18;
    long long v55 = v18;
    long long v54 = v18;
    long long v53 = v18;
    long long v52 = v18;
    long long v51 = v18;
    long long v50 = v18;
    long long v49 = v18;
    long long v48 = v18;
    long long v47 = v18;
    long long v46 = v18;
    long long v45 = v18;
    BN_CTX_start(ctx);
    int v19 = BN_CTX_get(ctx);
    size_t v20 = BN_CTX_get(ctx);
    int v21 = 0;
    LODWORD(v14) = 0;
    long long v44 = v20;
    if (!v19 || !v20) {
      goto LABEL_69;
    }
    if (m_ctx)
    {
      long long v22 = 0;
    }
    else
    {
      int v21 = BN_MONT_CTX_new_consttime(m, ctx);
      m_EVP_MD_CTX ctx = v21;
      long long v22 = v21;
      if (!v21)
      {
        LODWORD(v14) = 0;
LABEL_69:
        BN_MONT_CTX_free(v21);
        BN_CTX_end(ctx);
        return (int)v14;
      }
    }
    mont = v22;
    b = v19;
    if (v17 <= 0x29F)
    {
      if (v17 <= 0xEF)
      {
        if (v17 <= 0x4F)
        {
          if (v17 <= 0x17) {
            unsigned int v23 = 1;
          }
          else {
            unsigned int v23 = 3;
          }
        }
        else
        {
          unsigned int v23 = 4;
        }
      }
      else
      {
        unsigned int v23 = 5;
      }
    }
    else
    {
      unsigned int v23 = 6;
    }
    if (BN_to_montgomery(v20, a, (BIGNUM *)m_ctx, ctx))
    {
      unsigned int v41 = v23;
      unsigned int v39 = v23 - 2;
      if (v23 < 2)
      {
LABEL_39:
        char v28 = 0;
        int v29 = v17 - 1;
        unsigned int v30 = v41;
        long long v31 = b;
        while (1)
        {
          while (!BN_is_bit_set(p, v29))
          {
            if (v28)
            {
              if (!BN_mod_mul_montgomery(v31, v31, v31, m_ctx, ctx)) {
                goto LABEL_67;
              }
              if (!v29) {
                goto LABEL_70;
              }
            }
            else if (!v29)
            {
              BN_mod_exp_mont_cold_3();
            }
            --v29;
          }
          char v40 = v28;
          int v32 = 0;
          int v33 = 1;
          if (v30 >= 2)
          {
            unsigned int v34 = v29 - 1;
            if (v29 >= 1)
            {
              int v32 = 0;
              int v35 = v39;
              if (v34 < v39) {
                int v35 = v29 - 1;
              }
              int v36 = -v35;
              int v37 = 1;
              do
              {
                if (BN_is_bit_set(p, v34))
                {
                  int v33 = (v33 << (v37 - v32)) | 1;
                  int v32 = v37;
                }
                ++v37;
                --v34;
              }
              while (v36 + v37 != 2);
            }
          }
          long long v31 = b;
          if ((v40 & (v32 >= 0)) == 1) {
            break;
          }
LABEL_59:
          if ((v33 & 1) == 0) {
            BN_mod_exp_mont_cold_1();
          }
          unsigned int v30 = v41;
          if (v33 >= 1 << v41) {
            BN_mod_exp_mont_cold_2();
          }
          if (v40)
          {
            if (!BN_mod_mul_montgomery(b, b, *(&v44 + (v33 >> 1)), m_ctx, ctx)) {
              goto LABEL_67;
            }
          }
          else if (!BN_copy(b, *(&v44 + (v33 >> 1))))
          {
            goto LABEL_67;
          }
          if (v29 == v32)
          {
LABEL_70:
            LODWORD(v14) = BN_from_montgomery(r, v31, m_ctx, ctx) != 0;
            goto LABEL_68;
          }
          v29 += ~v32;
          char v28 = 1;
        }
        int v38 = v32 + 1;
        while (BN_mod_mul_montgomery(b, b, b, m_ctx, ctx))
        {
          if (!--v38) {
            goto LABEL_59;
          }
        }
      }
      else
      {
        int v24 = BN_CTX_get(ctx);
        int v14 = v24;
        if (!v24)
        {
LABEL_68:
          int v21 = mont;
          goto LABEL_69;
        }
        if (BN_mod_mul_montgomery(v24, v20, v20, m_ctx, ctx))
        {
          uint64_t v25 = 0;
          while (1)
          {
            int v26 = BN_CTX_get(ctx);
            *(&v44 + v25 + 1) = v26;
            if (!v26 || !BN_mod_mul_montgomery(v26, *(&v44 + v25), v14, m_ctx, ctx)) {
              break;
            }
            if ((v25++ + 2) >> (v41 - 1)) {
              goto LABEL_39;
            }
          }
        }
      }
    }
LABEL_67:
    LODWORD(v14) = 0;
    goto LABEL_68;
  }
  if (BN_abs_is_word((unsigned int *)m, 1))
  {
    BN_zero((uint64_t)r);
    LODWORD(v14) = 1;
    return (int)v14;
  }

  return BN_one((uint64_t)r);
}

void bn_mod_exp_mont_small(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  __b[144] = *MEMORY[0x1E4F143B8];
  if (a5 >> 58 || a3 > 9 || (int v7 = (uint64_t *)a6, *(_DWORD *)(a6 + 32) != a3)) {
    abort();
  }
  if (!BN_is_odd(a6 + 24)) {
    bn_mod_exp_mont_small_cold_1();
  }
  unint64_t num = a3;
  unint64_t v11 = a5 - 1;
  uint64_t v12 = a5 << 6;
  while (v11 != -1)
  {
    unint64_t v13 = *(void *)(a4 + 8 * v11--);
    v12 -= 64;
    if (v13)
    {
      unsigned int v14 = BN_num_bits_word(v13);
      unint64_t v15 = v12 + v14;
      if (!v15) {
        bn_mod_exp_mont_small_cold_2();
      }
      if (v15 <= 0x29F)
      {
        if (v15 <= 0xEF)
        {
          if (v15 <= 0x17) {
            int v18 = 1;
          }
          else {
            int v18 = 3;
          }
          if (v15 <= 0x4F) {
            unsigned int v16 = v18;
          }
          else {
            unsigned int v16 = 4;
          }
        }
        else
        {
          unsigned int v16 = 5;
        }
      }
      else
      {
        unsigned int v16 = 6;
      }
      uint64_t v19 = v14;
      if (v16 >= 5) {
        unsigned int v20 = 5;
      }
      else {
        unsigned int v20 = v16;
      }
      memset(__b, 170, 0x480uLL);
      if (num) {
        __memcpy_chk();
      }
      unint64_t v21 = v11 + 2;
      unint64_t v38 = v20 - 2;
      unsigned int v40 = v20;
      if (v20 >= 2)
      {
        unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v42[2] = v22;
        void v42[3] = v22;
        v42[0] = v22;
        v42[1] = v22;
        bn_mod_mul_montgomery_small((unint64_t *)v42, __b, __b, num, (uint64_t)v7);
        unsigned int v23 = 2;
        do
          bn_mod_mul_montgomery_small(&__b[9 * v23 - 9], &__b[9 * v23 - 18], (unint64_t *)v42, num, (uint64_t)v7);
        while (!(v23++ >> (v20 - 1)));
      }
      char v25 = 0;
      uint64_t v26 = v19 + v12 - 1;
      unsigned int v39 = v7;
      while (1)
      {
        for (unint64_t i = v26; !bn_is_bit_set_words(a4, v21, i); --i)
        {
          if (v25)
          {
            bn_mod_mul_montgomery_small(a1, a1, a1, num, (uint64_t)v7);
            if (!i) {
              goto LABEL_61;
            }
          }
          else if (!i)
          {
            bn_mod_exp_mont_small_cold_5();
          }
        }
        if (v20 < 2 || !i) {
          break;
        }
        uint64_t v28 = 0;
        int v29 = 0;
        unint64_t v30 = i - 1;
        unint64_t v31 = v38;
        if (i - 1 < v38) {
          unint64_t v31 = i - 1;
        }
        unint64_t v32 = v31 + 1;
        unsigned int v33 = 1;
        do
        {
          is_bit_set_wordunsigned int s = bn_is_bit_set_words(a4, v21, v30);
          uint64_t v35 = v28 + 1;
          if (is_bit_set_words)
          {
            unsigned int v33 = (v33 << (v28 - v29 + 1)) | 1;
            int v29 = v28 + 1;
          }
          --v30;
          ++v28;
        }
        while (v32 != v35);
        int v7 = v39;
        if ((v25 & 1) == 0)
        {
          unint64_t v36 = num;
          goto LABEL_53;
        }
        unint64_t v36 = num;
        unsigned int v20 = v40;
        if (v29 != -1) {
          goto LABEL_49;
        }
LABEL_54:
        if ((v33 & 1) == 0) {
          bn_mod_exp_mont_small_cold_3();
        }
        if (v33 >> v20) {
          bn_mod_exp_mont_small_cold_4();
        }
        if ((v25 & 1) == 0)
        {
LABEL_58:
          if (v36) {
            memcpy(a1, &__b[9 * (v33 >> 1)], 8 * num);
          }
          goto LABEL_60;
        }
        bn_mod_mul_montgomery_small(a1, a1, &__b[9 * (v33 >> 1)], v36, (uint64_t)v7);
LABEL_60:
        uint64_t v26 = i - (v29 + 1);
        char v25 = 1;
        if (i == v29)
        {
LABEL_61:
          OPENSSL_cleanse(__b, 0x480uLL);
          return;
        }
      }
      int v29 = 0;
      unsigned int v33 = 1;
      unint64_t v36 = num;
      if ((v25 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_49:
      for (int j = -1; j != v29; ++j)
        bn_mod_mul_montgomery_small(a1, a1, a1, v36, (uint64_t)v7);
LABEL_53:
      unsigned int v20 = v40;
      goto LABEL_54;
    }
  }
  uint64_t v17 = *v7;

  bn_from_montgomery_small(a1, a3, v17, a3, (uint64_t)v7);
}

void bn_mod_inverse0_prime_mont_small(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a3 > 9 || *(_DWORD *)(a4 + 32) != a3) {
    abort();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v14[2] = v9;
  _OWORD v14[3] = v9;
  v14[0] = v9;
  v14[1] = v9;
  if (a3 && (__memcpy_chk(), unint64_t v8 = *(void *)&v14[0], *(void *)&v14[0] < 2uLL))
  {
    *(void *)&v14[0] -= 2;
    unint64_t v10 = a3 - 2;
    if (a3 >= 2)
    {
      unint64_t v11 = (void *)v14 + 1;
      do
      {
        unint64_t v12 = v10;
        if ((*v11++)-- != 0) {
          break;
        }
        --v10;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)&v14[0] = v8 - 2;
  }
  bn_mod_exp_mont_small(a1, a2, a3, (uint64_t)v14, a3, a4);
}

int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)
{
  if (!BN_is_odd((uint64_t)m))
  {
    int v12 = 104;
    int v13 = 894;
    goto LABEL_8;
  }
  if (m->neg)
  {
    int v12 = 109;
    int v13 = 898;
LABEL_8:
    ERR_put_error(3, 0, v12, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/exponentiation.c", v13);
    return 0;
  }
  if (a->neg || BN_ucmp(a, m) >= 0)
  {
    int v12 = 107;
    int v13 = 904;
    goto LABEL_8;
  }
  int top = p->top;
  if (top)
  {
    if (in_mont)
    {
      uint64_t v17 = 0;
    }
    else
    {
      int v18 = BN_MONT_CTX_new_consttime(m, ctx);
      in_mont = v18;
      uint64_t v17 = v18;
      if (!v18)
      {
        BOOL v14 = 0;
        char v25 = 0;
        leuint64_t n = 0;
        uint64_t v26 = 0;
        goto LABEL_66;
      }
    }
    int v37 = v17;
    int d = (int)in_mont->N.d;
    if (top == 1) {
      int v20 = 3;
    }
    else {
      int v20 = 1;
    }
    if (top <= 1) {
      int v21 = v20;
    }
    else {
      int v21 = 4;
    }
    if (top <= 4) {
      int v22 = v21;
    }
    else {
      int v22 = 5;
    }
    if (top > 14) {
      int v22 = 6;
    }
    if (d >= 0x401) {
      BN_mod_exp_mont_consttime_cold_1();
    }
    signed int v36 = v22;
    int v23 = 1 << v22;
    leuint64_t n = 8 * d * (uint64_t)((1 << v22) + 2);
    int v24 = OPENSSL_malloc(len + 64);
    if (!v24)
    {
      BOOL v14 = 0;
      char v25 = 0;
      uint64_t v26 = 0;
      goto LABEL_58;
    }
    unsigned int v34 = v23;
    uint64_t v35 = v24;
    uint64_t v38 = (uint64_t)v24 + (-(int)v24 & 0x3FLL);
    if ((v38 & 0x3F) != 0) {
      BN_mod_exp_mont_consttime_cold_4();
    }
    if (d) {
      bzero((void *)v38, len);
    }
    r.int d = (unint64_t *)(v38 + 8 * (d << v36));
    b.int d = &r.d[d];
    b.int top = 0;
    b.dmax = d;
    r.int top = 0;
    r.dmax = d;
    *(void *)&b.neg = 0x200000000;
    *(void *)&r.neg = 0x200000000;
    if (!bn_one_to_montgomery(&r, (BIGNUM *)in_mont, ctx))
    {
      BOOL v14 = 0;
      int v18 = v37;
      uint64_t v26 = (void *)v38;
      char v25 = v35;
      goto LABEL_66;
    }
    char v25 = v35;
    if (bn_resize_words((uint64_t)&r, d))
    {
      if (a->neg) {
        BN_mod_exp_mont_consttime_cold_3();
      }
      if (BN_ucmp(a, m) >= 0) {
        BN_mod_exp_mont_consttime_cold_2();
      }
      if (BN_to_montgomery(&b, a, (BIGNUM *)in_mont, ctx)
        && bn_resize_words((uint64_t)&b, d))
      {
        uint64_t v26 = (void *)v38;
        copy_to_prebuf((uint64_t)&r, d, v38, 0);
        copy_to_prebuf((uint64_t)&b, d, v38, 1);
        if (v36 >= 2)
        {
          if (BN_mod_mul_montgomery(&r, &b, &b, in_mont, ctx))
          {
            copy_to_prebuf((uint64_t)&r, d, v38, 2);
            if (v34 <= 4) {
              int v27 = 4;
            }
            else {
              int v27 = v34;
            }
            int v28 = 3;
            while (BN_mod_mul_montgomery(&r, &b, &r, in_mont, ctx))
            {
              copy_to_prebuf((uint64_t)&r, d, v38, v28++);
              if (v27 == v28) {
                goto LABEL_46;
              }
            }
          }
          goto LABEL_56;
        }
LABEL_46:
        int v29 = (top << 6) - 1;
        int v30 = 0;
        if (((v29 % v36) & 0x80000000) == 0)
        {
          int v31 = v29 % v36 + 1;
          do
          {
            int v30 = BN_is_bit_set(p, v29--) + 2 * v30;
            --v31;
          }
          while (v31);
        }
        uint64_t v26 = (void *)v38;
        if (!copy_from_prebuf((uint64_t)&r, d, v38, v30, v36))
        {
LABEL_56:
          BOOL v14 = 0;
LABEL_58:
          int v18 = v37;
LABEL_66:
          BN_MONT_CTX_free(v18);
          if (!v25)
          {
            if (v26) {
              OPENSSL_cleanse(v26, len);
            }
          }
          OPENSSL_free(v25);
          return v14;
        }
LABEL_50:
        if (v29 < 0)
        {
          BOOL v14 = BN_from_montgomery(rr, &r, in_mont, ctx) != 0;
          goto LABEL_60;
        }
        int v32 = 0;
        int v33 = 0;
        while (BN_mod_mul_montgomery(&r, &r, &r, in_mont, ctx))
        {
          int v33 = BN_is_bit_set(p, v29 + v32--) + 2 * v33;
          if (!(v36 + v32))
          {
            if (!copy_from_prebuf((uint64_t)&b, d, v38, v33, v36)) {
              break;
            }
            v29 += v32;
            uint64_t v26 = (void *)v38;
            if (BN_mod_mul_montgomery(&r, &r, &b, in_mont, ctx)) {
              goto LABEL_50;
            }
            goto LABEL_56;
          }
        }
      }
    }
    BOOL v14 = 0;
LABEL_60:
    int v18 = v37;
    uint64_t v26 = (void *)v38;
    goto LABEL_66;
  }
  if (BN_abs_is_word((unsigned int *)m, 1))
  {
    BN_zero((uint64_t)rr);
    return 1;
  }

  return BN_one((uint64_t)rr);
}

uint64_t copy_to_prebuf(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t result = bn_copy_words((void *)(a3 + 8 * a4 * a2), a2, a1);
  if (!result) {
    copy_to_prebuf_cold_1();
  }
  return result;
}

uint64_t copy_from_prebuf(uint64_t a1, int a2, uint64_t a3, int a4, char a5)
{
  uint64_t v10 = a2;
  uint64_t result = bn_wexpand((void **)a1, a2);
  if (result)
  {
    size_t v12 = 8 * v10;
    if (a2) {
      bzero(*(void **)a1, v12);
    }
    unsigned int v13 = 0;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v14 = 0;
        unint64_t v15 = *(void **)a1;
        do
        {
          v15[v14] |= *(void *)(a3 + v14 * 8) & ((((int)(v13 ^ a4) - 1) & ~(uint64_t)(int)(v13 ^ a4)) >> 63);
          ++v14;
        }
        while (a2 != v14);
      }
      ++v13;
      a3 += v12;
    }
    while (!(v13 >> a5));
    *(_DWORD *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a2;
    return 1;
  }
  return result;
}

int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
  int neg = a->neg;
  if (neg == b->neg)
  {
    int result = bn_uadd_consttime((uint64_t)r, (uint64_t)a, (uint64_t)b);
    if (!result) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  BOOL v6 = neg == 0;
  if (neg) {
    int v7 = b;
  }
  else {
    int v7 = a;
  }
  if (v6) {
    unint64_t v8 = b;
  }
  else {
    unint64_t v8 = a;
  }
  if (BN_ucmp(v7, v8) < 0)
  {
    int result = bn_usub_consttime((uint64_t)r, (uint64_t)v8, (uint64_t)v7);
    if (!result) {
      return result;
    }
    int neg = 1;
    goto LABEL_15;
  }
  int v9 = bn_usub_consttime((uint64_t)r, (uint64_t)v7, (uint64_t)v8);
  int neg = 0;
  int result = 0;
  if (v9)
  {
LABEL_15:
    bn_set_minimal_width((uint64_t)r);
    int result = 1;
LABEL_16:
    r->int neg = neg;
  }
  return result;
}

int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
  int result = bn_usub_consttime((uint64_t)r, (uint64_t)a, (uint64_t)b);
  if (result)
  {
    bn_set_minimal_width((uint64_t)r);
    return 1;
  }
  return result;
}

uint64_t bn_uadd_consttime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 8);
  int v5 = *(_DWORD *)(a3 + 8);
  if (v4 >= v5) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a3;
  }
  if (v4 >= v5) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(int *)(v6 + 8);
  uint64_t v9 = *(int *)(v7 + 8);
  uint64_t result = bn_wexpand((void **)a1, v8 + 1);
  if (result)
  {
    *(_DWORD *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v8 + 1;
    unint64_t v11 = bn_add_words(*(unint64_t **)a1, *(const unint64_t **)v6, *(const unint64_t **)v7, v9);
    if ((int)v9 >= (int)v8)
    {
      uint64_t v16 = *(void **)a1;
    }
    else
    {
      uint64_t v12 = 8 * v9;
      int v13 = v8 - v9;
      do
      {
        if (v11 >= 2) {
          bn_uadd_consttime_cold_1();
        }
        uint64_t v14 = *(void *)(*(void *)v6 + v12);
        uint64_t v15 = v14 + v11;
        unint64_t v11 = __CFADD__(v14, v11);
        uint64_t v16 = *(void **)a1;
        *(void *)(*(void *)a1 + v12) = v15;
        v12 += 8;
        --v13;
      }
      while (v13);
    }
    v16[v8] = v11;
    return 1;
  }
  return result;
}

int BN_add_word(BIGNUM *a, unint64_t w)
{
  if (!w) {
    goto LABEL_16;
  }
  unint64_t v2 = w;
  if (!BN_is_zero((uint64_t)a))
  {
    if (a->neg)
    {
      a->int neg = 0;
      LODWORD(v2) = BN_sub_word(a, v2);
      if (!BN_is_zero((uint64_t)a)) {
        a->int neg = a->neg == 0;
      }
      return v2;
    }
    uint64_t v5 = 0;
    uint64_t top = a->top;
    while ((top & ~((int)top >> 31)) != v5)
    {
      unint64_t v7 = a->d[v5];
      BOOL v8 = __CFADD__(v7, v2);
      a->d[v5++] = v7 + v2;
      unint64_t v2 = 1;
      if (!v8) {
        return v2;
      }
    }
    if ((top & 0x80000000) == 0)
    {
      if (!bn_wexpand(&a->d, top + 1))
      {
        LODWORD(v2) = 0;
        return v2;
      }
      ++a->top;
      a->d[top] = v2;
    }
LABEL_16:
    LODWORD(v2) = 1;
    return v2;
  }

  return BN_set_word(a, v2);
}

int BN_sub_word(BIGNUM *a, unint64_t w)
{
  if (!w) {
    return 1;
  }
  unint64_t v2 = w;
  if (BN_is_zero((uint64_t)a))
  {
    int v4 = BN_set_word(a, v2);
    if (v4) {
      BN_set_negative(a, 1);
    }
    return v4;
  }
  if (a->neg)
  {
    a->int neg = 0;
    int result = BN_add_word(a, v2);
    a->int neg = 1;
    return result;
  }
  int v6 = bn_minimal_width((uint64_t)a);
  int d = a->d;
  unint64_t v8 = *a->d;
  if (v6 != 1 || v8 >= v2)
  {
    int v9 = 0;
    uint64_t v10 = v8 - v2;
    if (v8 < v2)
    {
      unint64_t v2 = 1;
      do
      {
        unint64_t *d = v10;
        unint64_t v11 = d[1];
        ++d;
        unint64_t v8 = v11;
        ++v9;
        uint64_t v10 = -1;
      }
      while (!v11);
    }
    unint64_t v12 = v8 - v2;
    unint64_t *d = v12;
    if (!v12 && v9 == a->top - 1) {
      a->uint64_t top = v9;
    }
    return 1;
  }
  unint64_t *d = v2 - v8;
  int v4 = 1;
  a->int neg = 1;
  return v4;
}

int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
  uint64_t v3 = b;
  int neg = b->neg;
  if (a->neg)
  {
    if (neg)
    {
      int v6 = a;
      goto LABEL_10;
    }
    int v7 = 1;
LABEL_7:
    int result = bn_uadd_consttime((uint64_t)r, (uint64_t)a, (uint64_t)b);
    if (!result) {
      return result;
    }
    goto LABEL_15;
  }
  if (neg)
  {
    int v7 = 0;
    goto LABEL_7;
  }
  int v6 = b;
  uint64_t v3 = a;
LABEL_10:
  if (BN_ucmp(v3, v6) < 0)
  {
    int result = bn_usub_consttime((uint64_t)r, (uint64_t)v6, (uint64_t)v3);
    if (!result) {
      return result;
    }
    int v7 = 1;
    goto LABEL_15;
  }
  int v9 = bn_usub_consttime((uint64_t)r, (uint64_t)v3, (uint64_t)v6);
  int v7 = 0;
  int result = 0;
  if (v9)
  {
LABEL_15:
    bn_set_minimal_width((uint64_t)r);
    r->int neg = v7;
    return 1;
  }
  return result;
}

uint64_t bn_usub_consttime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 8);
  int v7 = *(_DWORD *)(a2 + 8);
  if (v6 > v7)
  {
    if (!bn_fits_in_words(a3, v7))
    {
      int v16 = 229;
      goto LABEL_16;
    }
    int v7 = *(_DWORD *)(a2 + 8);
    int v6 = v7;
  }
  uint64_t result = bn_wexpand((void **)a1, v7);
  if (!result) {
    return result;
  }
  unint64_t v9 = bn_sub_words(*(unint64_t **)a1, *(const unint64_t **)a2, *(const unint64_t **)a3, v6);
  int v10 = *(_DWORD *)(a2 + 8);
  int v11 = v10 - v6;
  if (v10 > v6)
  {
    uint64_t v12 = 8 * v6;
    do
    {
      if (v9 >= 2) {
        bn_usub_consttime_cold_1();
      }
      unint64_t v13 = *(void *)(*(void *)a2 + v12);
      BOOL v14 = v13 >= v9;
      unint64_t v15 = v13 - v9;
      unint64_t v9 = !v14;
      *(void *)(*(void *)a1 + v12) = v15;
      v12 += 8;
      --v11;
    }
    while (v11);
  }
  if (!v9)
  {
    *(_DWORD *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v10;
    *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  int v16 = 245;
LABEL_16:
  ERR_put_error(3, 0, 100, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/add.c", v16);
  return 0;
}

BIGNUM *__cdecl BN_mod_sqrt(BIGNUM *ret, const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx)
{
  if (!BN_is_odd((uint64_t)n) || BN_abs_is_word((unsigned int *)n, 1))
  {
    if (!BN_abs_is_word((unsigned int *)n, 2))
    {
      ERR_put_error(3, 0, 114, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/sqrt.c", 88);
      return 0;
    }
    unint64_t v8 = ret;
    if (ret || (unint64_t v8 = BN_new()) != 0)
    {
      int is_bit_set = BN_is_bit_set(a, 0);
      goto LABEL_13;
    }
LABEL_14:
    if (v8 != ret) {
      BN_free(v8);
    }
    return 0;
  }
  if (!BN_is_zero((uint64_t)a) && !BN_is_one((unsigned int *)a))
  {
    BN_CTX_start(ctx);
    int v11 = BN_CTX_get(ctx);
    uint64_t v12 = BN_CTX_get(ctx);
    unint64_t v13 = BN_CTX_get(ctx);
    BOOL v14 = BN_CTX_get(ctx);
    unint64_t v15 = BN_CTX_get(ctx);
    int v16 = BN_CTX_get(ctx);
    if (!v16)
    {
LABEL_64:
      unint64_t v8 = 0;
      goto LABEL_65;
    }
    uint64_t v17 = v16;
    BIGNUM r = v12;
    unint64_t v8 = ret;
    if (!ret)
    {
      unint64_t v8 = BN_new();
      if (!v8) {
        goto LABEL_62;
      }
    }
    if (!BN_nnmod(v11, a, n, ctx)) {
      goto LABEL_62;
    }
    unsigned int v18 = 0;
    do
      ++v18;
    while (!BN_is_bit_set(n, v18));
    if (v18 == 2)
    {
      if (!bn_mod_lshift1_consttime((uint64_t)v14, (uint64_t)v11, (uint64_t)n, ctx)) {
        goto LABEL_62;
      }
      if (!BN_rshift(v13, n, 3)) {
        goto LABEL_62;
      }
      v13->int neg = 0;
      if (!BN_mod_exp_mont(r, v14, v13, n, ctx, 0)
        || !BN_mod_sqr(v17, r, n, ctx)
        || !BN_mod_mul(v14, v14, v17, n, ctx)
        || !BN_sub_word(v14, 1uLL)
        || !BN_mod_mul(v15, v11, r, n, ctx)
        || !BN_mod_mul(v15, v15, v14, n, ctx))
      {
        goto LABEL_62;
      }
      int v21 = v8;
LABEL_41:
      if (!BN_copy(v21, v15)) {
        goto LABEL_62;
      }
      goto LABEL_29;
    }
    if (v18 == 1)
    {
      if (BN_rshift(v13, n, 2))
      {
        v13->int neg = 0;
        if (BN_add_word(v13, 1uLL))
        {
          if (BN_mod_exp_mont(v8, v11, v13, n, ctx, 0))
          {
LABEL_29:
            if (!BN_mod_sqr(v15, v8, n, ctx)) {
              goto LABEL_62;
            }
            if (!BN_cmp(v15, v11))
            {
LABEL_65:
              BN_CTX_end(ctx);
              return v8;
            }
            int v19 = 110;
            int v20 = 409;
            goto LABEL_61;
          }
        }
      }
LABEL_62:
      if (v8 != ret) {
        BN_clear_free(v8);
      }
      goto LABEL_64;
    }
    if (!BN_copy(v13, n)) {
      goto LABEL_62;
    }
    aa = v15;
    v13->int neg = 0;
    unint64_t v22 = 2;
    while (1)
    {
      if (v22 <= 0x15) {
        goto LABEL_52;
      }
      int v23 = BN_num_bits(n);
      if (!BN_pseudo_rand(v17, v23, 0, 0)) {
        goto LABEL_62;
      }
      if ((BN_ucmp(v17, n) & 0x80000000) == 0)
      {
        int v24 = BN_add;
        if (!n->neg) {
          int v24 = BN_sub;
        }
        if (!((unsigned int (*)(BIGNUM *, BIGNUM *, const BIGNUM *))v24)(v17, v17, n)) {
          goto LABEL_62;
        }
      }
      if (BN_is_zero((uint64_t)v17))
      {
LABEL_52:
        if (!BN_set_word(v17, v22)) {
          goto LABEL_62;
        }
      }
      int v25 = bn_jacobi(v17, v13, ctx);
      if (v25 < -1) {
        goto LABEL_62;
      }
      if (v25 != 1) {
        break;
      }
      if (++v22 == 82) {
        goto LABEL_60;
      }
    }
    if (v25 != -1)
    {
      if (!v25)
      {
        int v19 = 114;
        int v20 = 257;
        goto LABEL_61;
      }
LABEL_60:
      int v19 = 115;
      int v20 = 267;
      goto LABEL_61;
    }
    if (!BN_rshift(v13, v13, v18) || !BN_mod_exp_mont(v17, v17, v13, n, ctx, 0)) {
      goto LABEL_62;
    }
    if (BN_is_one((unsigned int *)v17))
    {
      int v19 = 114;
      int v20 = 282;
LABEL_61:
      ERR_put_error(3, 0, v19, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/sqrt.c", v20);
      goto LABEL_62;
    }
    if (!BN_rshift1(v14, v13)) {
      goto LABEL_62;
    }
    if (BN_is_zero((uint64_t)v14))
    {
      if (!BN_nnmod(v14, v11, n, ctx)) {
        goto LABEL_62;
      }
      if (!BN_is_zero((uint64_t)v14))
      {
        if (!BN_one((uint64_t)aa)) {
          goto LABEL_62;
        }
LABEL_79:
        if (BN_mod_sqr(r, aa, n, ctx) && BN_mod_mul(r, r, v11, n, ctx))
        {
          uint64_t v26 = aa;
          int v27 = aa;
          for (unint64_t i = v11; BN_mod_mul(v26, v27, i, n, ctx); unint64_t i = v17)
          {
            if (BN_is_one((unsigned int *)r))
            {
              int v21 = v8;
              unint64_t v15 = aa;
              goto LABEL_41;
            }
            int v29 = v18 - 2;
            if (v18 < 2)
            {
LABEL_100:
              int v19 = 110;
              int v20 = 377;
              goto LABEL_61;
            }
            unsigned int v30 = v18 - 1;
            unsigned int v18 = 1;
            while (1)
            {
              if (v18 == 1)
              {
                if (!BN_mod_sqr(v14, r, n, ctx)) {
                  goto LABEL_62;
                }
              }
              else if (!BN_mod_mul(v14, v14, v14, n, ctx))
              {
                goto LABEL_62;
              }
              if (BN_is_one((unsigned int *)v14)) {
                break;
              }
              ++v18;
              --v29;
              --v30;
              if (v29 == -1) {
                goto LABEL_100;
              }
            }
            if (!BN_copy(v14, v17)) {
              goto LABEL_62;
            }
            if (v29 >= 1)
            {
              while (BN_mod_sqr(v14, v14, n, ctx))
              {
                if ((int)--v30 < 2) {
                  goto LABEL_97;
                }
              }
              goto LABEL_62;
            }
LABEL_97:
            if (!BN_mod_mul(v17, v14, v14, n, ctx) || !BN_mod_mul(aa, aa, v14, n, ctx)) {
              goto LABEL_62;
            }
            uint64_t v26 = r;
            int v27 = r;
          }
        }
        goto LABEL_62;
      }
    }
    else
    {
      if (!BN_mod_exp_mont(aa, v11, v14, n, ctx, 0)) {
        goto LABEL_62;
      }
      if (!BN_is_zero((uint64_t)aa)) {
        goto LABEL_79;
      }
    }
    BN_zero((uint64_t)v8);
    goto LABEL_65;
  }
  unint64_t v8 = ret;
  if (!ret)
  {
    unint64_t v8 = BN_new();
    if (!v8) {
      goto LABEL_14;
    }
  }
  int is_bit_set = BN_is_one((unsigned int *)a);
LABEL_13:
  if (!BN_set_word(v8, is_bit_set)) {
    goto LABEL_14;
  }
  return v8;
}

int SHA256_Init(SHA256_CTX *c)
{
  *(_OWORD *)&c->data[10] = 0u;
  *(_OWORD *)&c->data[14] = 0u;
  *(_OWORD *)&c->data[2] = 0u;
  *(_OWORD *)&c->data[6] = 0u;
  *(_OWORD *)c->h = xmmword_1BA18A3F0;
  *(_OWORD *)&c->h[4] = xmmword_1BA18A400;
  *(_OWORD *)&c->Nl = 0u;
  c->unsigned int md_len = 32;
  return 1;
}

int SHA256_Final(unsigned __int8 *md, SHA256_CTX *c)
{
  return sha256_final_impl(md, c->md_len, (uint64_t)c);
}

void SHA256_Transform(SHA256_CTX *c, const unsigned __int8 *data)
{
}

void bn_sqr_words(unint64_t *rp, const unint64_t *ap, int num)
{
  if (*(void *)&num)
  {
    if (*(void *)&num < 4uLL) {
      goto LABEL_8;
    }
    do
    {
      *(_OWORD *)rp = *ap * (unsigned __int128)*ap;
      *((_OWORD *)rp + 1) = ap[1] * (unsigned __int128)ap[1];
      *((_OWORD *)rp + 2) = ap[2] * (unsigned __int128)ap[2];
      *((_OWORD *)rp + 3) = ap[3] * (unsigned __int128)ap[3];
      ap += 4;
      rp += 8;
      *(void *)&num -= 4;
    }
    while (*(void *)&num >= 4uLL);
    if (*(void *)&num)
    {
LABEL_8:
      do
      {
        unint64_t v3 = *ap++;
        *(_OWORD *)rp = v3 * (unsigned __int128)v3;
        rp += 2;
        --*(void *)&num;
      }
      while (*(void *)&num);
    }
  }
}

void *bn_mul_comba8(void *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  long long v5 = *a2;
  unint64_t v3 = ((unsigned __int128)*a3 * v5) >> 64;
  *uint64_t result = *a3 * *a2;
  unint64_t v6 = a2[1];
  unint64_t v8 = *a3;
  unint64_t v7 = a3[1];
  uint64_t v9 = (__PAIR128__(v7, v4) * v5) >> 64;
  if (__CFADD__(v7 * *a2, v3)) {
    uint64_t v10 = ((v7 * (unsigned __int128)*a2) >> 64) + 1;
  }
  else {
    uint64_t v10 = (v7 * (unsigned __int128)*a2) >> 64;
  }
  uint64_t v11 = (v8 * (unsigned __int128)v6) >> 64;
  unint64_t v12 = v8 * v6;
  BOOL v13 = __CFADD__(v12, v9);
  uint64_t v14 = v12 + v9;
  if (v13) {
    uint64_t v15 = v11 + 1;
  }
  else {
    uint64_t v15 = v11;
  }
  result[1] = v14;
  unint64_t v16 = a2[2];
  unint64_t v17 = a3[1];
  uint64_t v18 = (*a3 * (unsigned __int128)v16) >> 64;
  unint64_t v19 = *a3 * v16;
  BOOL v13 = __CFADD__(v19, v15 + v10);
  unint64_t v20 = v19 + v15 + v10;
  if (v13) {
    uint64_t v21 = v18 + 1;
  }
  else {
    uint64_t v21 = v18;
  }
  BOOL v13 = __CFADD__(__CFADD__(v15, v10), v21);
  uint64_t v22 = __CFADD__(v15, v10) + v21;
  uint64_t v23 = v13;
  unint64_t v25 = *a2;
  unint64_t v24 = a2[1];
  uint64_t v26 = (v17 * (unsigned __int128)v24) >> 64;
  unint64_t v27 = v17 * v24;
  BOOL v13 = __CFADD__(v20, v27);
  unint64_t v28 = v20 + v27;
  if (v13) {
    uint64_t v29 = v26 + 1;
  }
  else {
    uint64_t v29 = v26;
  }
  BOOL v13 = __CFADD__(v22, v29);
  uint64_t v30 = v22 + v29;
  uint64_t v31 = v13;
  unint64_t v32 = a3[2];
  uint64_t v33 = (v32 * (unsigned __int128)v25) >> 64;
  unint64_t v34 = v32 * v25;
  BOOL v13 = __CFADD__(v28, v34);
  unint64_t v35 = v28 + v34;
  if (v13) {
    uint64_t v36 = v33 + 1;
  }
  else {
    uint64_t v36 = v33;
  }
  BOOL v13 = __CFADD__(v30, v36);
  uint64_t v37 = v30 + v36;
  uint64_t v38 = v23 + v13 + v31;
  result[2] = v35;
  unint64_t v39 = a2[1];
  unint64_t v41 = a3[2];
  unint64_t v40 = a3[3];
  unint64_t v42 = v40 * *a2;
  BOOL v13 = __CFADD__(v42, v37);
  uint64_t v43 = v42 + v37;
  if (v13) {
    uint64_t v44 = ((v40 * (unsigned __int128)*a2) >> 64) + 1;
  }
  else {
    uint64_t v44 = (v40 * (unsigned __int128)*a2) >> 64;
  }
  uint64_t v45 = v38 + v44;
  uint64_t v46 = (v41 * (unsigned __int128)v39) >> 64;
  unint64_t v47 = v41 * v39;
  BOOL v13 = __CFADD__(v43, v47);
  uint64_t v48 = v43 + v47;
  if (v13) {
    uint64_t v49 = v46 + 1;
  }
  else {
    uint64_t v49 = v46;
  }
  BOOL v13 = __CFADD__(v45, v49);
  uint64_t v50 = v45 + v49;
  uint64_t v51 = v13;
  if (__CFADD__(v38, v44)) {
    uint64_t v52 = v51 + 1;
  }
  else {
    uint64_t v52 = v51;
  }
  unint64_t v53 = a2[2];
  unint64_t v54 = a2[3];
  unint64_t v56 = *a3;
  unint64_t v55 = a3[1];
  uint64_t v57 = (v55 * (unsigned __int128)v53) >> 64;
  unint64_t v58 = v55 * v53;
  BOOL v13 = __CFADD__(v48, v58);
  uint64_t v59 = v48 + v58;
  if (v13) {
    uint64_t v60 = v57 + 1;
  }
  else {
    uint64_t v60 = v57;
  }
  BOOL v13 = __CFADD__(v50, v60);
  unint64_t v61 = v50 + v60;
  uint64_t v62 = v13;
  unint64_t v63 = (v56 * (unsigned __int128)v54) >> 64;
  unint64_t v64 = v56 * v54;
  BOOL v13 = __CFADD__(v59, v64);
  uint64_t v65 = v59 + v64;
  if (v13) {
    unint64_t v66 = v63 + 1;
  }
  else {
    unint64_t v66 = v63;
  }
  unsigned long long v67 = __PAIR128__(v52, v61) + __PAIR128__(v62, v66);
  result[3] = v65;
  unint64_t v68 = a3[1];
  uint64_t v69 = *a3 * a2[4] + v67;
  uint64_t v70 = *((void *)&v67 + 1) + v67;
  BOOL v71 = __CFADD__(*((void *)&v67 + 1), (void)v67);
  unint64_t v73 = a2[2];
  unint64_t v72 = a2[3];
  uint64_t v74 = (v68 * (unsigned __int128)v72) >> 64;
  unint64_t v75 = v68 * v72;
  BOOL v13 = __CFADD__(v69, v75);
  uint64_t v76 = v69 + v75;
  if (v13) {
    uint64_t v77 = v74 + 1;
  }
  else {
    uint64_t v77 = v74;
  }
  BOOL v13 = __CFADD__(v70, v77);
  uint64_t v78 = v70 + v77;
  uint64_t v79 = v13;
  unint64_t v80 = a3[2];
  unint64_t v81 = a3[3];
  uint64_t v82 = (v80 * (unsigned __int128)v73) >> 64;
  unint64_t v83 = v80 * v73;
  BOOL v13 = __CFADD__(v76, v83);
  uint64_t v84 = v76 + v83;
  if (v13) {
    uint64_t v85 = v82 + 1;
  }
  else {
    uint64_t v85 = v82;
  }
  BOOL v13 = __CFADD__(v78, v85);
  uint64_t v86 = v78 + v85;
  uint64_t v87 = v71 + v13 + v79;
  unint64_t v89 = *a2;
  unint64_t v88 = a2[1];
  uint64_t v90 = (v81 * (unsigned __int128)v88) >> 64;
  unint64_t v91 = v81 * v88;
  BOOL v13 = __CFADD__(v84, v91);
  uint64_t v92 = v84 + v91;
  if (v13) {
    uint64_t v93 = v90 + 1;
  }
  else {
    uint64_t v93 = v90;
  }
  BOOL v13 = __CFADD__(v86, v93);
  unint64_t v94 = v86 + v93;
  uint64_t v95 = v13;
  unint64_t v96 = a3[4];
  unint64_t v97 = (v96 * (unsigned __int128)v89) >> 64;
  unint64_t v98 = v96 * v89;
  BOOL v13 = __CFADD__(v92, v98);
  uint64_t v99 = v92 + v98;
  if (v13) {
    unint64_t v100 = v97 + 1;
  }
  else {
    unint64_t v100 = v97;
  }
  unsigned long long v101 = __PAIR128__(v87, v94) + __PAIR128__(v95, v100);
  result[4] = v99;
  unint64_t v102 = a2[1];
  unint64_t v103 = a3[4];
  uint64_t v104 = a3[5] * *a2 + v101;
  uint64_t v105 = *((void *)&v101 + 1) + v101;
  uint64_t v106 = (v103 * (unsigned __int128)v102) >> 64;
  unint64_t v107 = v103 * v102;
  BOOL v13 = __CFADD__(v104, v107);
  uint64_t v108 = v104 + v107;
  if (v13) {
    uint64_t v109 = v106 + 1;
  }
  else {
    uint64_t v109 = v106;
  }
  BOOL v13 = __CFADD__(v105, v109);
  uint64_t v110 = v105 + v109;
  uint64_t v111 = v13;
  if (__CFADD__(*((void *)&v101 + 1), (void)v101)) {
    uint64_t v112 = v111 + 1;
  }
  else {
    uint64_t v112 = v111;
  }
  unint64_t v113 = a2[2];
  unint64_t v114 = a2[3];
  unint64_t v116 = a3[2];
  unint64_t v115 = a3[3];
  uint64_t v117 = (v115 * (unsigned __int128)v113) >> 64;
  unint64_t v118 = v115 * v113;
  BOOL v13 = __CFADD__(v108, v118);
  uint64_t v119 = v108 + v118;
  if (v13) {
    uint64_t v120 = v117 + 1;
  }
  else {
    uint64_t v120 = v117;
  }
  BOOL v13 = __CFADD__(v110, v120);
  unint64_t v121 = v110 + v120;
  uint64_t v122 = v13;
  unint64_t v123 = (v116 * (unsigned __int128)v114) >> 64;
  unint64_t v124 = v116 * v114;
  BOOL v13 = __CFADD__(v119, v124);
  uint64_t v125 = v119 + v124;
  if (v13) {
    unint64_t v126 = v123 + 1;
  }
  else {
    unint64_t v126 = v123;
  }
  unsigned long long v127 = __PAIR128__(v112, v121) + __PAIR128__(v122, v126);
  unint64_t v128 = a2[4];
  unint64_t v129 = a2[5];
  unint64_t v131 = *a3;
  unint64_t v130 = a3[1];
  uint64_t v132 = (v130 * (unsigned __int128)v128) >> 64;
  unint64_t v133 = v130 * v128;
  BOOL v13 = __CFADD__(v125, v133);
  uint64_t v134 = v125 + v133;
  if (v13) {
    uint64_t v135 = v132 + 1;
  }
  else {
    uint64_t v135 = v132;
  }
  BOOL v136 = __CFADD__((void)v127, v135);
  unint64_t v137 = (v131 * (unsigned __int128)v129) >> 64;
  unint64_t v138 = v131 * v129;
  BOOL v13 = __CFADD__(v134, v138);
  uint64_t v139 = v134 + v138;
  if (v13) {
    unint64_t v140 = v137 + 1;
  }
  else {
    unint64_t v140 = v137;
  }
  unsigned long long v141 = v127 + __PAIR128__(v136, v140);
  result[5] = v139;
  unint64_t v142 = a3[1];
  uint64_t v143 = *a3 * a2[6] + v141;
  uint64_t v144 = *((void *)&v141 + 1) + v141;
  BOOL v145 = __CFADD__(*((void *)&v141 + 1), (void)v141);
  unint64_t v147 = a2[4];
  unint64_t v146 = a2[5];
  uint64_t v148 = (v142 * (unsigned __int128)v146) >> 64;
  unint64_t v149 = v142 * v146;
  BOOL v13 = __CFADD__(v143, v149);
  uint64_t v150 = v143 + v149;
  if (v13) {
    uint64_t v151 = v148 + 1;
  }
  else {
    uint64_t v151 = v148;
  }
  BOOL v13 = __CFADD__(v144, v151);
  uint64_t v152 = v144 + v151;
  uint64_t v153 = v13;
  unint64_t v154 = a3[2];
  unint64_t v155 = a3[3];
  uint64_t v156 = (v154 * (unsigned __int128)v147) >> 64;
  unint64_t v157 = v154 * v147;
  BOOL v13 = __CFADD__(v150, v157);
  uint64_t v158 = v150 + v157;
  if (v13) {
    uint64_t v159 = v156 + 1;
  }
  else {
    uint64_t v159 = v156;
  }
  BOOL v13 = __CFADD__(v152, v159);
  uint64_t v160 = v152 + v159;
  uint64_t v161 = v145 + v13 + v153;
  unint64_t v163 = a2[2];
  unint64_t v162 = a2[3];
  uint64_t v164 = (v155 * (unsigned __int128)v162) >> 64;
  unint64_t v165 = v155 * v162;
  BOOL v13 = __CFADD__(v158, v165);
  uint64_t v166 = v158 + v165;
  if (v13) {
    uint64_t v167 = v164 + 1;
  }
  else {
    uint64_t v167 = v164;
  }
  BOOL v13 = __CFADD__(v160, v167);
  unint64_t v168 = v160 + v167;
  uint64_t v169 = v13;
  unint64_t v170 = a3[4];
  unint64_t v171 = a3[5];
  unint64_t v172 = (v170 * (unsigned __int128)v163) >> 64;
  unint64_t v173 = v170 * v163;
  BOOL v13 = __CFADD__(v166, v173);
  uint64_t v174 = v166 + v173;
  if (v13) {
    unint64_t v175 = v172 + 1;
  }
  else {
    unint64_t v175 = v172;
  }
  unsigned long long v176 = __PAIR128__(v161, v168) + __PAIR128__(v169, v175);
  unint64_t v178 = *a2;
  unint64_t v177 = a2[1];
  uint64_t v179 = (v171 * (unsigned __int128)v177) >> 64;
  unint64_t v180 = v171 * v177;
  BOOL v13 = __CFADD__(v174, v180);
  uint64_t v181 = v174 + v180;
  if (v13) {
    uint64_t v182 = v179 + 1;
  }
  else {
    uint64_t v182 = v179;
  }
  BOOL v183 = __CFADD__((void)v176, v182);
  unint64_t v184 = a3[6];
  unint64_t v185 = (v184 * (unsigned __int128)v178) >> 64;
  unint64_t v186 = v184 * v178;
  BOOL v13 = __CFADD__(v181, v186);
  uint64_t v187 = v181 + v186;
  if (v13) {
    unint64_t v188 = v185 + 1;
  }
  else {
    unint64_t v188 = v185;
  }
  unsigned long long v189 = v176 + __PAIR128__(v183, v188);
  result[6] = v187;
  unint64_t v190 = a2[1];
  unint64_t v191 = a3[6];
  uint64_t v192 = a3[7] * *a2 + v189;
  uint64_t v193 = *((void *)&v189 + 1) + v189;
  uint64_t v194 = (v191 * (unsigned __int128)v190) >> 64;
  unint64_t v195 = v191 * v190;
  BOOL v13 = __CFADD__(v192, v195);
  uint64_t v196 = v192 + v195;
  if (v13) {
    uint64_t v197 = v194 + 1;
  }
  else {
    uint64_t v197 = v194;
  }
  BOOL v13 = __CFADD__(v193, v197);
  uint64_t v198 = v193 + v197;
  uint64_t v199 = v13;
  if (__CFADD__(*((void *)&v189 + 1), (void)v189)) {
    uint64_t v200 = v199 + 1;
  }
  else {
    uint64_t v200 = v199;
  }
  unint64_t v201 = a2[2];
  unint64_t v202 = a2[3];
  unint64_t v204 = a3[4];
  unint64_t v203 = a3[5];
  uint64_t v205 = (v203 * (unsigned __int128)v201) >> 64;
  unint64_t v206 = v203 * v201;
  BOOL v13 = __CFADD__(v196, v206);
  uint64_t v207 = v196 + v206;
  if (v13) {
    uint64_t v208 = v205 + 1;
  }
  else {
    uint64_t v208 = v205;
  }
  BOOL v13 = __CFADD__(v198, v208);
  unint64_t v209 = v198 + v208;
  uint64_t v210 = v13;
  unint64_t v211 = (v204 * (unsigned __int128)v202) >> 64;
  unint64_t v212 = v204 * v202;
  BOOL v13 = __CFADD__(v207, v212);
  uint64_t v213 = v207 + v212;
  if (v13) {
    unint64_t v214 = v211 + 1;
  }
  else {
    unint64_t v214 = v211;
  }
  unsigned long long v215 = __PAIR128__(v200, v209) + __PAIR128__(v210, v214);
  unint64_t v216 = a2[4];
  unint64_t v217 = a2[5];
  unint64_t v219 = a3[2];
  unint64_t v218 = a3[3];
  uint64_t v220 = (v218 * (unsigned __int128)v216) >> 64;
  unint64_t v221 = v218 * v216;
  BOOL v13 = __CFADD__(v213, v221);
  uint64_t v222 = v213 + v221;
  if (v13) {
    uint64_t v223 = v220 + 1;
  }
  else {
    uint64_t v223 = v220;
  }
  BOOL v224 = __CFADD__((void)v215, v223);
  unint64_t v225 = (v219 * (unsigned __int128)v217) >> 64;
  unint64_t v226 = v219 * v217;
  BOOL v13 = __CFADD__(v222, v226);
  uint64_t v227 = v222 + v226;
  if (v13) {
    unint64_t v228 = v225 + 1;
  }
  else {
    unint64_t v228 = v225;
  }
  unsigned long long v229 = v215 + __PAIR128__(v224, v228);
  unint64_t v230 = a2[6];
  unint64_t v231 = a2[7];
  unint64_t v233 = *a3;
  unint64_t v232 = a3[1];
  uint64_t v234 = (v232 * (unsigned __int128)v230) >> 64;
  unint64_t v235 = v232 * v230;
  BOOL v13 = __CFADD__(v227, v235);
  uint64_t v236 = v227 + v235;
  if (v13) {
    uint64_t v237 = v234 + 1;
  }
  else {
    uint64_t v237 = v234;
  }
  BOOL v238 = __CFADD__((void)v229, v237);
  unint64_t v239 = (v233 * (unsigned __int128)v231) >> 64;
  unint64_t v240 = v233 * v231;
  BOOL v13 = __CFADD__(v236, v240);
  uint64_t v241 = v236 + v240;
  if (v13) {
    unint64_t v242 = v239 + 1;
  }
  else {
    unint64_t v242 = v239;
  }
  unsigned long long v243 = v229 + __PAIR128__(v238, v242);
  result[7] = v241;
  unint64_t v244 = a3[2];
  uint64_t v245 = a3[1] * a2[7] + v243;
  uint64_t v246 = *((void *)&v243 + 1) + v243;
  BOOL v247 = __CFADD__(*((void *)&v243 + 1), (void)v243);
  unint64_t v249 = a2[5];
  unint64_t v248 = a2[6];
  uint64_t v250 = (v244 * (unsigned __int128)v248) >> 64;
  unint64_t v251 = v244 * v248;
  BOOL v13 = __CFADD__(v245, v251);
  uint64_t v252 = v245 + v251;
  if (v13) {
    uint64_t v253 = v250 + 1;
  }
  else {
    uint64_t v253 = v250;
  }
  BOOL v13 = __CFADD__(v246, v253);
  uint64_t v254 = v246 + v253;
  uint64_t v255 = v13;
  unint64_t v256 = a3[3];
  unint64_t v257 = a3[4];
  uint64_t v258 = (v256 * (unsigned __int128)v249) >> 64;
  unint64_t v259 = v256 * v249;
  BOOL v13 = __CFADD__(v252, v259);
  uint64_t v260 = v252 + v259;
  if (v13) {
    uint64_t v261 = v258 + 1;
  }
  else {
    uint64_t v261 = v258;
  }
  BOOL v13 = __CFADD__(v254, v261);
  uint64_t v262 = v254 + v261;
  uint64_t v263 = v247 + v13 + v255;
  unint64_t v265 = a2[3];
  unint64_t v264 = a2[4];
  uint64_t v266 = (v257 * (unsigned __int128)v264) >> 64;
  unint64_t v267 = v257 * v264;
  BOOL v13 = __CFADD__(v260, v267);
  uint64_t v268 = v260 + v267;
  if (v13) {
    uint64_t v269 = v266 + 1;
  }
  else {
    uint64_t v269 = v266;
  }
  BOOL v13 = __CFADD__(v262, v269);
  unint64_t v270 = v262 + v269;
  uint64_t v271 = v13;
  unint64_t v272 = a3[5];
  unint64_t v273 = a3[6];
  unint64_t v274 = (v272 * (unsigned __int128)v265) >> 64;
  unint64_t v275 = v272 * v265;
  BOOL v13 = __CFADD__(v268, v275);
  uint64_t v276 = v268 + v275;
  if (v13) {
    unint64_t v277 = v274 + 1;
  }
  else {
    unint64_t v277 = v274;
  }
  unsigned long long v278 = __PAIR128__(v263, v270) + __PAIR128__(v271, v277);
  unint64_t v280 = a2[1];
  unint64_t v279 = a2[2];
  uint64_t v281 = (v273 * (unsigned __int128)v279) >> 64;
  unint64_t v282 = v273 * v279;
  BOOL v13 = __CFADD__(v276, v282);
  uint64_t v283 = v276 + v282;
  if (v13) {
    uint64_t v284 = v281 + 1;
  }
  else {
    uint64_t v284 = v281;
  }
  BOOL v285 = __CFADD__((void)v278, v284);
  unint64_t v286 = a3[7];
  unint64_t v287 = (v286 * (unsigned __int128)v280) >> 64;
  unint64_t v288 = v286 * v280;
  BOOL v13 = __CFADD__(v283, v288);
  uint64_t v289 = v283 + v288;
  if (v13) {
    unint64_t v290 = v287 + 1;
  }
  else {
    unint64_t v290 = v287;
  }
  unsigned long long v291 = v278 + __PAIR128__(v285, v290);
  result[8] = v289;
  unint64_t v292 = a2[3];
  unint64_t v293 = a3[6];
  uint64_t v294 = a3[7] * a2[2] + v291;
  uint64_t v295 = *((void *)&v291 + 1) + v291;
  uint64_t v296 = (v293 * (unsigned __int128)v292) >> 64;
  unint64_t v297 = v293 * v292;
  BOOL v13 = __CFADD__(v294, v297);
  uint64_t v298 = v294 + v297;
  if (v13) {
    uint64_t v299 = v296 + 1;
  }
  else {
    uint64_t v299 = v296;
  }
  BOOL v13 = __CFADD__(v295, v299);
  uint64_t v300 = v295 + v299;
  uint64_t v301 = v13;
  if (__CFADD__(*((void *)&v291 + 1), (void)v291)) {
    uint64_t v302 = v301 + 1;
  }
  else {
    uint64_t v302 = v301;
  }
  unint64_t v303 = a2[4];
  unint64_t v304 = a2[5];
  unint64_t v306 = a3[4];
  unint64_t v305 = a3[5];
  uint64_t v307 = (v305 * (unsigned __int128)v303) >> 64;
  unint64_t v308 = v305 * v303;
  BOOL v13 = __CFADD__(v298, v308);
  uint64_t v309 = v298 + v308;
  if (v13) {
    uint64_t v310 = v307 + 1;
  }
  else {
    uint64_t v310 = v307;
  }
  BOOL v13 = __CFADD__(v300, v310);
  unint64_t v311 = v300 + v310;
  uint64_t v312 = v13;
  unint64_t v313 = (v306 * (unsigned __int128)v304) >> 64;
  unint64_t v314 = v306 * v304;
  BOOL v13 = __CFADD__(v309, v314);
  uint64_t v315 = v309 + v314;
  if (v13) {
    unint64_t v316 = v313 + 1;
  }
  else {
    unint64_t v316 = v313;
  }
  unsigned long long v317 = __PAIR128__(v302, v311) + __PAIR128__(v312, v316);
  unint64_t v318 = a2[6];
  unint64_t v319 = a2[7];
  unint64_t v321 = a3[2];
  unint64_t v320 = a3[3];
  uint64_t v322 = (v320 * (unsigned __int128)v318) >> 64;
  unint64_t v323 = v320 * v318;
  BOOL v13 = __CFADD__(v315, v323);
  uint64_t v324 = v315 + v323;
  if (v13) {
    uint64_t v325 = v322 + 1;
  }
  else {
    uint64_t v325 = v322;
  }
  BOOL v326 = __CFADD__((void)v317, v325);
  unint64_t v327 = (v321 * (unsigned __int128)v319) >> 64;
  unint64_t v328 = v321 * v319;
  BOOL v13 = __CFADD__(v324, v328);
  uint64_t v329 = v324 + v328;
  if (v13) {
    unint64_t v330 = v327 + 1;
  }
  else {
    unint64_t v330 = v327;
  }
  unsigned long long v331 = v317 + __PAIR128__(v326, v330);
  result[9] = v329;
  unint64_t v332 = a3[4];
  uint64_t v333 = a3[3] * a2[7] + v331;
  uint64_t v334 = *((void *)&v331 + 1) + v331;
  BOOL v335 = __CFADD__(*((void *)&v331 + 1), (void)v331);
  unint64_t v337 = a2[5];
  unint64_t v336 = a2[6];
  uint64_t v338 = (v332 * (unsigned __int128)v336) >> 64;
  unint64_t v339 = v332 * v336;
  BOOL v13 = __CFADD__(v333, v339);
  uint64_t v340 = v333 + v339;
  if (v13) {
    uint64_t v341 = v338 + 1;
  }
  else {
    uint64_t v341 = v338;
  }
  BOOL v13 = __CFADD__(v334, v341);
  uint64_t v342 = v334 + v341;
  uint64_t v343 = v13;
  unint64_t v344 = a3[5];
  unint64_t v345 = a3[6];
  uint64_t v346 = (v344 * (unsigned __int128)v337) >> 64;
  unint64_t v347 = v344 * v337;
  BOOL v13 = __CFADD__(v340, v347);
  uint64_t v348 = v340 + v347;
  if (v13) {
    uint64_t v349 = v346 + 1;
  }
  else {
    uint64_t v349 = v346;
  }
  BOOL v13 = __CFADD__(v342, v349);
  uint64_t v350 = v342 + v349;
  uint64_t v351 = v335 + v13 + v343;
  unint64_t v353 = a2[3];
  unint64_t v352 = a2[4];
  uint64_t v354 = (v345 * (unsigned __int128)v352) >> 64;
  unint64_t v355 = v345 * v352;
  BOOL v13 = __CFADD__(v348, v355);
  uint64_t v356 = v348 + v355;
  if (v13) {
    uint64_t v357 = v354 + 1;
  }
  else {
    uint64_t v357 = v354;
  }
  BOOL v13 = __CFADD__(v350, v357);
  unint64_t v358 = v350 + v357;
  uint64_t v359 = v13;
  unint64_t v360 = a3[7];
  unint64_t v361 = (v360 * (unsigned __int128)v353) >> 64;
  unint64_t v362 = v360 * v353;
  BOOL v13 = __CFADD__(v356, v362);
  uint64_t v363 = v356 + v362;
  if (v13) {
    unint64_t v364 = v361 + 1;
  }
  else {
    unint64_t v364 = v361;
  }
  unsigned long long v365 = __PAIR128__(v351, v358) + __PAIR128__(v359, v364);
  result[10] = v363;
  unint64_t v366 = a2[5];
  unint64_t v367 = a3[6];
  uint64_t v368 = a3[7] * a2[4] + v365;
  uint64_t v369 = *((void *)&v365 + 1) + v365;
  uint64_t v370 = (v367 * (unsigned __int128)v366) >> 64;
  unint64_t v371 = v367 * v366;
  BOOL v13 = __CFADD__(v368, v371);
  uint64_t v372 = v368 + v371;
  if (v13) {
    uint64_t v373 = v370 + 1;
  }
  else {
    uint64_t v373 = v370;
  }
  BOOL v13 = __CFADD__(v369, v373);
  uint64_t v374 = v369 + v373;
  uint64_t v375 = v13;
  unint64_t v376 = a2[6];
  unint64_t v377 = a2[7];
  unint64_t v379 = a3[4];
  unint64_t v378 = a3[5];
  uint64_t v380 = (v378 * (unsigned __int128)v376) >> 64;
  unint64_t v381 = v378 * v376;
  if (__CFADD__(*((void *)&v365 + 1), (void)v365)) {
    ++v375;
  }
  BOOL v13 = __CFADD__(v372, v381);
  uint64_t v382 = v372 + v381;
  if (v13) {
    uint64_t v383 = v380 + 1;
  }
  else {
    uint64_t v383 = v380;
  }
  BOOL v13 = __CFADD__(v374, v383);
  unint64_t v384 = v374 + v383;
  uint64_t v385 = v13;
  unint64_t v386 = (v379 * (unsigned __int128)v377) >> 64;
  unint64_t v387 = v379 * v377;
  BOOL v13 = __CFADD__(v382, v387);
  uint64_t v388 = v382 + v387;
  if (v13) {
    unint64_t v389 = v386 + 1;
  }
  else {
    unint64_t v389 = v386;
  }
  unsigned long long v390 = __PAIR128__(v375, v384) + __PAIR128__(v385, v389);
  result[11] = v388;
  unint64_t v391 = a3[6];
  uint64_t v392 = a3[5] * a2[7] + v390;
  uint64_t v393 = *((void *)&v390 + 1) + v390;
  BOOL v394 = __CFADD__(*((void *)&v390 + 1), (void)v390);
  unint64_t v396 = a2[5];
  unint64_t v395 = a2[6];
  uint64_t v397 = (v391 * (unsigned __int128)v395) >> 64;
  unint64_t v398 = v391 * v395;
  BOOL v13 = __CFADD__(v392, v398);
  uint64_t v399 = v392 + v398;
  if (v13) {
    uint64_t v400 = v397 + 1;
  }
  else {
    uint64_t v400 = v397;
  }
  BOOL v13 = __CFADD__(v393, v400);
  uint64_t v401 = v393 + v400;
  uint64_t v402 = v13;
  unint64_t v403 = a3[7];
  uint64_t v404 = (v403 * (unsigned __int128)v396) >> 64;
  unint64_t v405 = v403 * v396;
  BOOL v13 = __CFADD__(v399, v405);
  uint64_t v406 = v399 + v405;
  if (v13) {
    uint64_t v407 = v404 + 1;
  }
  else {
    uint64_t v407 = v404;
  }
  BOOL v13 = __CFADD__(v401, v407);
  uint64_t v408 = v401 + v407;
  uint64_t v409 = v394 + v13 + v402;
  result[12] = v406;
  unint64_t v410 = a2[6];
  unint64_t v411 = a2[7];
  unint64_t v413 = a3[6];
  unint64_t v412 = a3[7];
  uint64_t v414 = (v412 * (unsigned __int128)v410) >> 64;
  unint64_t v415 = v412 * v410;
  BOOL v13 = __CFADD__(v415, v408);
  uint64_t v416 = v415 + v408;
  if (v13) {
    uint64_t v417 = v414 + 1;
  }
  else {
    uint64_t v417 = v414;
  }
  uint64_t v418 = v409 + v417;
  uint64_t v419 = (v413 * (unsigned __int128)v411) >> 64;
  unint64_t v420 = v413 * v411;
  BOOL v13 = __CFADD__(v416, v420);
  uint64_t v421 = v416 + v420;
  if (v13) {
    uint64_t v422 = v419 + 1;
  }
  else {
    uint64_t v422 = v419;
  }
  BOOL v13 = __CFADD__(v418, v422);
  uint64_t v423 = v418 + v422;
  uint64_t v424 = v13;
  result[13] = v421;
  unint64_t v425 = a2[7];
  unint64_t v426 = a3[7];
  uint64_t v427 = (v426 * (unsigned __int128)v425) >> 64;
  unint64_t v428 = v426 * v425;
  BOOL v13 = __CFADD__(v428, v423);
  uint64_t v429 = v428 + v423;
  if (v13) {
    uint64_t v430 = v427 + 1;
  }
  else {
    uint64_t v430 = v427;
  }
  result[14] = v429;
  result[15] = v424 + __CFADD__(v409, v417) + v430;
  return result;
}

void *bn_sqr_comba8(void *result, unint64_t *a2)
{
  uint64_t v2 = (*a2 * (unsigned __int128)*a2) >> 64;
  *uint64_t result = *a2 * *a2;
  unint64_t v3 = a2[1];
  uint64_t v4 = (*a2 * (unsigned __int128)v3) >> 64;
  unint64_t v5 = *a2 * v3;
  BOOL v6 = __CFADD__(v5, v2);
  uint64_t v7 = v5 + v2;
  if (v6) {
    uint64_t v8 = v4 + 1;
  }
  else {
    uint64_t v8 = v4;
  }
  BOOL v6 = __CFADD__(v7, v5);
  uint64_t v9 = v7 + v5;
  if (v6) {
    uint64_t v10 = v4 + 1;
  }
  else {
    uint64_t v10 = v4;
  }
  result[1] = v9;
  unint64_t v12 = *a2;
  unint64_t v11 = a2[1];
  uint64_t v13 = (v11 * (unsigned __int128)v11) >> 64;
  unint64_t v14 = v11 * v11;
  BOOL v6 = __CFADD__(v14, v10 + v8);
  unint64_t v15 = v14 + v10 + v8;
  if (v6) {
    uint64_t v16 = v13 + 1;
  }
  else {
    uint64_t v16 = v13;
  }
  BOOL v6 = __CFADD__(__CFADD__(v10, v8), v16);
  uint64_t v17 = __CFADD__(v10, v8) + v16;
  uint64_t v18 = v6;
  unint64_t v19 = a2[2];
  uint64_t v20 = (v12 * (unsigned __int128)v19) >> 64;
  unint64_t v21 = v12 * v19;
  BOOL v6 = __CFADD__(v15, v21);
  unint64_t v22 = v15 + v21;
  if (v6) {
    uint64_t v23 = v20 + 1;
  }
  else {
    uint64_t v23 = v20;
  }
  BOOL v6 = __CFADD__(v17, v23);
  uint64_t v24 = v17 + v23;
  uint64_t v25 = v6;
  BOOL v6 = __CFADD__(v22, v21);
  unint64_t v26 = v22 + v21;
  if (v6) {
    uint64_t v27 = v20 + 1;
  }
  else {
    uint64_t v27 = v20;
  }
  BOOL v6 = __CFADD__(v24, v27);
  uint64_t v28 = v24 + v27;
  uint64_t v29 = v18 + v6 + v25;
  result[2] = v26;
  unint64_t v31 = a2[2];
  unint64_t v30 = a2[3];
  unint64_t v32 = a2[1];
  uint64_t v33 = (*a2 * (unsigned __int128)v30) >> 64;
  unint64_t v34 = *a2 * v30;
  BOOL v6 = __CFADD__(v34, v28);
  uint64_t v35 = v34 + v28;
  if (v6) {
    uint64_t v36 = v33 + 1;
  }
  else {
    uint64_t v36 = v33;
  }
  uint64_t v37 = v29 + v36;
  BOOL v6 = __CFADD__(v35, v34);
  uint64_t v38 = v35 + v34;
  if (v6) {
    uint64_t v39 = v33 + 1;
  }
  else {
    uint64_t v39 = v33;
  }
  BOOL v6 = __CFADD__(v37, v39);
  uint64_t v40 = v37 + v39;
  uint64_t v41 = v6;
  if (__CFADD__(v29, v36)) {
    uint64_t v42 = v41 + 1;
  }
  else {
    uint64_t v42 = v41;
  }
  unint64_t v43 = (v32 * (unsigned __int128)v31) >> 64;
  unint64_t v44 = v32 * v31;
  BOOL v6 = __CFADD__(v38, v44);
  uint64_t v45 = v38 + v44;
  if (v6) {
    unint64_t v46 = v43 + 1;
  }
  else {
    unint64_t v46 = v43;
  }
  BOOL v6 = __CFADD__(v40, v46);
  unint64_t v47 = v40 + v46;
  uint64_t v48 = v6;
  BOOL v6 = __CFADD__(v45, v44);
  uint64_t v49 = v45 + v44;
  if (v6) {
    unint64_t v50 = v43 + 1;
  }
  else {
    unint64_t v50 = v43;
  }
  unsigned long long v51 = __PAIR128__(v42, v47) + __PAIR128__(v48, v50);
  result[3] = v49;
  unint64_t v52 = a2[3];
  uint64_t v53 = a2[2] * a2[2] + v51;
  uint64_t v54 = *((void *)&v51 + 1) + v51;
  BOOL v55 = __CFADD__(*((void *)&v51 + 1), (void)v51);
  unint64_t v57 = *a2;
  unint64_t v56 = a2[1];
  uint64_t v58 = (v56 * (unsigned __int128)v52) >> 64;
  unint64_t v59 = v56 * v52;
  BOOL v6 = __CFADD__(v53, v59);
  uint64_t v60 = v53 + v59;
  if (v6) {
    uint64_t v61 = v58 + 1;
  }
  else {
    uint64_t v61 = v58;
  }
  BOOL v6 = __CFADD__(v54, v61);
  uint64_t v62 = v54 + v61;
  uint64_t v63 = v6;
  BOOL v6 = __CFADD__(v60, v59);
  uint64_t v64 = v60 + v59;
  if (v6) {
    uint64_t v65 = v58 + 1;
  }
  else {
    uint64_t v65 = v58;
  }
  BOOL v6 = __CFADD__(v62, v65);
  uint64_t v66 = v62 + v65;
  uint64_t v67 = v55 + v6 + v63;
  unint64_t v68 = a2[4];
  unint64_t v69 = (v57 * (unsigned __int128)v68) >> 64;
  unint64_t v70 = v57 * v68;
  BOOL v6 = __CFADD__(v64, v70);
  uint64_t v71 = v64 + v70;
  if (v6) {
    unint64_t v72 = v69 + 1;
  }
  else {
    unint64_t v72 = v69;
  }
  BOOL v6 = __CFADD__(v66, v72);
  unint64_t v73 = v66 + v72;
  uint64_t v74 = v6;
  BOOL v6 = __CFADD__(v71, v70);
  uint64_t v75 = v71 + v70;
  if (v6) {
    unint64_t v76 = v69 + 1;
  }
  else {
    unint64_t v76 = v69;
  }
  unsigned long long v77 = __PAIR128__(v67, v73) + __PAIR128__(v74, v76);
  result[4] = v75;
  unint64_t v79 = a2[4];
  unint64_t v78 = a2[5];
  unint64_t v80 = a2[1];
  uint64_t v81 = (*a2 * (unsigned __int128)v78) >> 64;
  unint64_t v82 = *a2 * v78;
  uint64_t v83 = v82 + v77;
  if (__CFADD__(v82, (void)v77)) {
    uint64_t v84 = v81 + 1;
  }
  else {
    uint64_t v84 = v81;
  }
  uint64_t v85 = *((void *)&v77 + 1) + v84;
  BOOL v6 = __CFADD__(v83, v82);
  uint64_t v86 = v83 + v82;
  if (v6) {
    uint64_t v87 = v81 + 1;
  }
  else {
    uint64_t v87 = v81;
  }
  BOOL v6 = __CFADD__(v85, v87);
  uint64_t v88 = v85 + v87;
  uint64_t v89 = v6;
  if (__CFADD__(*((void *)&v77 + 1), v84)) {
    uint64_t v90 = v89 + 1;
  }
  else {
    uint64_t v90 = v89;
  }
  unint64_t v91 = (v80 * (unsigned __int128)v79) >> 64;
  unint64_t v92 = v80 * v79;
  BOOL v6 = __CFADD__(v86, v92);
  uint64_t v93 = v86 + v92;
  if (v6) {
    unint64_t v94 = v91 + 1;
  }
  else {
    unint64_t v94 = v91;
  }
  BOOL v6 = __CFADD__(v88, v94);
  unint64_t v95 = v88 + v94;
  uint64_t v96 = v6;
  BOOL v6 = __CFADD__(v93, v92);
  uint64_t v97 = v93 + v92;
  if (v6) {
    unint64_t v98 = v91 + 1;
  }
  else {
    unint64_t v98 = v91;
  }
  unsigned long long v99 = __PAIR128__(v90, v95) + __PAIR128__(v96, v98);
  unint64_t v101 = a2[2];
  unint64_t v100 = a2[3];
  unint64_t v102 = (v101 * (unsigned __int128)v100) >> 64;
  unint64_t v103 = v101 * v100;
  BOOL v6 = __CFADD__(v97, v103);
  uint64_t v104 = v97 + v103;
  if (v6) {
    unint64_t v105 = v102 + 1;
  }
  else {
    unint64_t v105 = v102;
  }
  BOOL v106 = __CFADD__((void)v99, v105);
  BOOL v6 = __CFADD__(v104, v103);
  uint64_t v107 = v104 + v103;
  if (v6) {
    unint64_t v108 = v102 + 1;
  }
  else {
    unint64_t v108 = v102;
  }
  unsigned long long v109 = v99 + __PAIR128__(v106, v108);
  result[5] = v107;
  unint64_t v110 = a2[2];
  uint64_t v111 = a2[3] * a2[3] + v109;
  uint64_t v112 = *((void *)&v109 + 1) + v109;
  BOOL v113 = __CFADD__(*((void *)&v109 + 1), (void)v109);
  unint64_t v114 = a2[4];
  unint64_t v115 = a2[5];
  uint64_t v116 = (v110 * (unsigned __int128)v114) >> 64;
  unint64_t v117 = v110 * v114;
  BOOL v6 = __CFADD__(v111, v117);
  uint64_t v118 = v111 + v117;
  if (v6) {
    uint64_t v119 = v116 + 1;
  }
  else {
    uint64_t v119 = v116;
  }
  BOOL v6 = __CFADD__(v112, v119);
  uint64_t v120 = v112 + v119;
  uint64_t v121 = v6;
  BOOL v6 = __CFADD__(v118, v117);
  uint64_t v122 = v118 + v117;
  if (v6) {
    uint64_t v123 = v116 + 1;
  }
  else {
    uint64_t v123 = v116;
  }
  BOOL v6 = __CFADD__(v120, v123);
  uint64_t v124 = v120 + v123;
  uint64_t v125 = v113 + v6 + v121;
  unint64_t v127 = *a2;
  unint64_t v126 = a2[1];
  unint64_t v128 = (v126 * (unsigned __int128)v115) >> 64;
  unint64_t v129 = v126 * v115;
  BOOL v6 = __CFADD__(v122, v129);
  uint64_t v130 = v122 + v129;
  if (v6) {
    unint64_t v131 = v128 + 1;
  }
  else {
    unint64_t v131 = v128;
  }
  BOOL v6 = __CFADD__(v124, v131);
  unint64_t v132 = v124 + v131;
  uint64_t v133 = v6;
  BOOL v6 = __CFADD__(v130, v129);
  uint64_t v134 = v130 + v129;
  if (v6) {
    unint64_t v135 = v128 + 1;
  }
  else {
    unint64_t v135 = v128;
  }
  unsigned long long v136 = __PAIR128__(v125, v132) + __PAIR128__(v133, v135);
  unint64_t v137 = a2[6];
  unint64_t v138 = (v127 * (unsigned __int128)v137) >> 64;
  unint64_t v139 = v127 * v137;
  BOOL v6 = __CFADD__(v134, v139);
  uint64_t v140 = v134 + v139;
  if (v6) {
    unint64_t v141 = v138 + 1;
  }
  else {
    unint64_t v141 = v138;
  }
  BOOL v142 = __CFADD__((void)v136, v141);
  BOOL v6 = __CFADD__(v140, v139);
  uint64_t v143 = v140 + v139;
  if (v6) {
    unint64_t v144 = v138 + 1;
  }
  else {
    unint64_t v144 = v138;
  }
  unsigned long long v145 = v136 + __PAIR128__(v142, v144);
  result[6] = v143;
  unint64_t v147 = a2[6];
  unint64_t v146 = a2[7];
  unint64_t v148 = a2[1];
  uint64_t v149 = (*a2 * (unsigned __int128)v146) >> 64;
  unint64_t v150 = *a2 * v146;
  uint64_t v151 = v150 + v145;
  if (__CFADD__(v150, (void)v145)) {
    uint64_t v152 = v149 + 1;
  }
  else {
    uint64_t v152 = v149;
  }
  uint64_t v153 = *((void *)&v145 + 1) + v152;
  BOOL v6 = __CFADD__(v151, v150);
  uint64_t v154 = v151 + v150;
  if (v6) {
    uint64_t v155 = v149 + 1;
  }
  else {
    uint64_t v155 = v149;
  }
  BOOL v6 = __CFADD__(v153, v155);
  uint64_t v156 = v153 + v155;
  uint64_t v157 = v6;
  if (__CFADD__(*((void *)&v145 + 1), v152)) {
    uint64_t v158 = v157 + 1;
  }
  else {
    uint64_t v158 = v157;
  }
  unint64_t v159 = (v148 * (unsigned __int128)v147) >> 64;
  unint64_t v160 = v148 * v147;
  BOOL v6 = __CFADD__(v154, v160);
  uint64_t v161 = v154 + v160;
  if (v6) {
    unint64_t v162 = v159 + 1;
  }
  else {
    unint64_t v162 = v159;
  }
  BOOL v6 = __CFADD__(v156, v162);
  unint64_t v163 = v156 + v162;
  uint64_t v164 = v6;
  BOOL v6 = __CFADD__(v161, v160);
  uint64_t v165 = v161 + v160;
  if (v6) {
    unint64_t v166 = v159 + 1;
  }
  else {
    unint64_t v166 = v159;
  }
  unsigned long long v167 = __PAIR128__(v158, v163) + __PAIR128__(v164, v166);
  unint64_t v169 = a2[4];
  unint64_t v168 = a2[5];
  unint64_t v170 = a2[2];
  unint64_t v171 = a2[3];
  unint64_t v172 = (v170 * (unsigned __int128)v168) >> 64;
  unint64_t v173 = v170 * v168;
  BOOL v6 = __CFADD__(v165, v173);
  uint64_t v174 = v165 + v173;
  if (v6) {
    unint64_t v175 = v172 + 1;
  }
  else {
    unint64_t v175 = v172;
  }
  BOOL v176 = __CFADD__((void)v167, v175);
  BOOL v6 = __CFADD__(v174, v173);
  uint64_t v177 = v174 + v173;
  if (v6) {
    unint64_t v178 = v172 + 1;
  }
  else {
    unint64_t v178 = v172;
  }
  unsigned long long v179 = v167 + __PAIR128__(v176, v178);
  unint64_t v180 = (v171 * (unsigned __int128)v169) >> 64;
  unint64_t v181 = v171 * v169;
  BOOL v6 = __CFADD__(v177, v181);
  uint64_t v182 = v177 + v181;
  if (v6) {
    unint64_t v183 = v180 + 1;
  }
  else {
    unint64_t v183 = v180;
  }
  BOOL v184 = __CFADD__((void)v179, v183);
  BOOL v6 = __CFADD__(v182, v181);
  uint64_t v185 = v182 + v181;
  if (v6) {
    ++v180;
  }
  unsigned long long v186 = v179 + __PAIR128__(v184, v180);
  result[7] = v185;
  unint64_t v187 = a2[3];
  uint64_t v188 = a2[4] * a2[4] + v186;
  uint64_t v189 = *((void *)&v186 + 1) + v186;
  BOOL v190 = __CFADD__(*((void *)&v186 + 1), (void)v186);
  unint64_t v191 = a2[5];
  unint64_t v192 = a2[6];
  uint64_t v193 = (v187 * (unsigned __int128)v191) >> 64;
  unint64_t v194 = v187 * v191;
  BOOL v6 = __CFADD__(v188, v194);
  uint64_t v195 = v188 + v194;
  if (v6) {
    uint64_t v196 = v193 + 1;
  }
  else {
    uint64_t v196 = v193;
  }
  BOOL v6 = __CFADD__(v189, v196);
  uint64_t v197 = v189 + v196;
  uint64_t v198 = v6;
  BOOL v6 = __CFADD__(v195, v194);
  uint64_t v199 = v195 + v194;
  if (v6) {
    uint64_t v200 = v193 + 1;
  }
  else {
    uint64_t v200 = v193;
  }
  BOOL v6 = __CFADD__(v197, v200);
  uint64_t v201 = v197 + v200;
  uint64_t v202 = v190 + v6 + v198;
  unint64_t v204 = a2[1];
  unint64_t v203 = a2[2];
  unint64_t v205 = (v203 * (unsigned __int128)v192) >> 64;
  unint64_t v206 = v203 * v192;
  BOOL v6 = __CFADD__(v199, v206);
  uint64_t v207 = v199 + v206;
  if (v6) {
    unint64_t v208 = v205 + 1;
  }
  else {
    unint64_t v208 = v205;
  }
  BOOL v6 = __CFADD__(v201, v208);
  unint64_t v209 = v201 + v208;
  uint64_t v210 = v6;
  BOOL v6 = __CFADD__(v207, v206);
  uint64_t v211 = v207 + v206;
  if (v6) {
    unint64_t v212 = v205 + 1;
  }
  else {
    unint64_t v212 = v205;
  }
  unsigned long long v213 = __PAIR128__(v202, v209) + __PAIR128__(v210, v212);
  unint64_t v214 = a2[7];
  unint64_t v215 = (v204 * (unsigned __int128)v214) >> 64;
  unint64_t v216 = v204 * v214;
  BOOL v6 = __CFADD__(v211, v216);
  uint64_t v217 = v211 + v216;
  if (v6) {
    unint64_t v218 = v215 + 1;
  }
  else {
    unint64_t v218 = v215;
  }
  BOOL v219 = __CFADD__((void)v213, v218);
  BOOL v6 = __CFADD__(v217, v216);
  uint64_t v220 = v217 + v216;
  if (v6) {
    unint64_t v221 = v215 + 1;
  }
  else {
    unint64_t v221 = v215;
  }
  unsigned long long v222 = v213 + __PAIR128__(v219, v221);
  result[8] = v220;
  unint64_t v224 = a2[6];
  unint64_t v223 = a2[7];
  unint64_t v225 = a2[2];
  unint64_t v226 = a2[3];
  uint64_t v227 = (v225 * (unsigned __int128)v223) >> 64;
  unint64_t v228 = v225 * v223;
  uint64_t v229 = v228 + v222;
  if (__CFADD__(v228, (void)v222)) {
    uint64_t v230 = v227 + 1;
  }
  else {
    uint64_t v230 = v227;
  }
  uint64_t v231 = *((void *)&v222 + 1) + v230;
  BOOL v6 = __CFADD__(v229, v228);
  uint64_t v232 = v229 + v228;
  if (v6) {
    uint64_t v233 = v227 + 1;
  }
  else {
    uint64_t v233 = v227;
  }
  BOOL v6 = __CFADD__(v231, v233);
  uint64_t v234 = v231 + v233;
  uint64_t v235 = v6;
  if (__CFADD__(*((void *)&v222 + 1), v230)) {
    uint64_t v236 = v235 + 1;
  }
  else {
    uint64_t v236 = v235;
  }
  unint64_t v237 = (v226 * (unsigned __int128)v224) >> 64;
  unint64_t v238 = v226 * v224;
  BOOL v6 = __CFADD__(v232, v238);
  uint64_t v239 = v232 + v238;
  if (v6) {
    unint64_t v240 = v237 + 1;
  }
  else {
    unint64_t v240 = v237;
  }
  BOOL v6 = __CFADD__(v234, v240);
  unint64_t v241 = v234 + v240;
  uint64_t v242 = v6;
  BOOL v6 = __CFADD__(v239, v238);
  uint64_t v243 = v239 + v238;
  if (v6) {
    unint64_t v244 = v237 + 1;
  }
  else {
    unint64_t v244 = v237;
  }
  unsigned long long v245 = __PAIR128__(v236, v241) + __PAIR128__(v242, v244);
  unint64_t v247 = a2[4];
  unint64_t v246 = a2[5];
  unint64_t v248 = (v247 * (unsigned __int128)v246) >> 64;
  unint64_t v249 = v247 * v246;
  BOOL v6 = __CFADD__(v243, v249);
  uint64_t v250 = v243 + v249;
  if (v6) {
    unint64_t v251 = v248 + 1;
  }
  else {
    unint64_t v251 = v248;
  }
  BOOL v252 = __CFADD__((void)v245, v251);
  BOOL v6 = __CFADD__(v250, v249);
  uint64_t v253 = v250 + v249;
  if (v6) {
    unint64_t v254 = v248 + 1;
  }
  else {
    unint64_t v254 = v248;
  }
  unsigned long long v255 = v245 + __PAIR128__(v252, v254);
  result[9] = v253;
  unint64_t v256 = a2[6];
  uint64_t v257 = a2[5] * a2[5] + v255;
  uint64_t v258 = *((void *)&v255 + 1) + v255;
  BOOL v259 = __CFADD__(*((void *)&v255 + 1), (void)v255);
  unint64_t v261 = a2[3];
  unint64_t v260 = a2[4];
  uint64_t v262 = (v260 * (unsigned __int128)v256) >> 64;
  unint64_t v263 = v260 * v256;
  BOOL v6 = __CFADD__(v257, v263);
  uint64_t v264 = v257 + v263;
  if (v6) {
    uint64_t v265 = v262 + 1;
  }
  else {
    uint64_t v265 = v262;
  }
  BOOL v6 = __CFADD__(v258, v265);
  uint64_t v266 = v258 + v265;
  uint64_t v267 = v6;
  BOOL v6 = __CFADD__(v264, v263);
  uint64_t v268 = v264 + v263;
  if (v6) {
    uint64_t v269 = v262 + 1;
  }
  else {
    uint64_t v269 = v262;
  }
  BOOL v6 = __CFADD__(v266, v269);
  uint64_t v270 = v266 + v269;
  uint64_t v271 = v259 + v6 + v267;
  unint64_t v272 = a2[7];
  unint64_t v273 = (v261 * (unsigned __int128)v272) >> 64;
  unint64_t v274 = v261 * v272;
  BOOL v6 = __CFADD__(v268, v274);
  uint64_t v275 = v268 + v274;
  if (v6) {
    unint64_t v276 = v273 + 1;
  }
  else {
    unint64_t v276 = v273;
  }
  BOOL v6 = __CFADD__(v270, v276);
  unint64_t v277 = v270 + v276;
  uint64_t v278 = v6;
  BOOL v6 = __CFADD__(v275, v274);
  uint64_t v279 = v275 + v274;
  if (v6) {
    unint64_t v280 = v273 + 1;
  }
  else {
    unint64_t v280 = v273;
  }
  unsigned long long v281 = __PAIR128__(v271, v277) + __PAIR128__(v278, v280);
  result[10] = v279;
  unint64_t v283 = a2[6];
  unint64_t v282 = a2[7];
  unint64_t v284 = a2[4];
  unint64_t v285 = a2[5];
  uint64_t v286 = (v284 * (unsigned __int128)v282) >> 64;
  unint64_t v287 = v284 * v282;
  uint64_t v288 = v287 + v281;
  if (__CFADD__(v287, (void)v281)) {
    uint64_t v289 = v286 + 1;
  }
  else {
    uint64_t v289 = v286;
  }
  uint64_t v290 = *((void *)&v281 + 1) + v289;
  BOOL v6 = __CFADD__(v288, v287);
  uint64_t v291 = v288 + v287;
  if (v6) {
    uint64_t v292 = v286 + 1;
  }
  else {
    uint64_t v292 = v286;
  }
  BOOL v6 = __CFADD__(v290, v292);
  uint64_t v293 = v290 + v292;
  uint64_t v294 = v6;
  if (__CFADD__(*((void *)&v281 + 1), v289)) {
    uint64_t v295 = v294 + 1;
  }
  else {
    uint64_t v295 = v294;
  }
  unint64_t v296 = (v285 * (unsigned __int128)v283) >> 64;
  unint64_t v297 = v285 * v283;
  BOOL v6 = __CFADD__(v291, v297);
  uint64_t v298 = v291 + v297;
  if (v6) {
    unint64_t v299 = v296 + 1;
  }
  else {
    unint64_t v299 = v296;
  }
  BOOL v6 = __CFADD__(v293, v299);
  unint64_t v300 = v293 + v299;
  uint64_t v301 = v6;
  BOOL v6 = __CFADD__(v298, v297);
  uint64_t v302 = v298 + v297;
  if (v6) {
    unint64_t v303 = v296 + 1;
  }
  else {
    unint64_t v303 = v296;
  }
  unsigned long long v304 = __PAIR128__(v295, v300) + __PAIR128__(v301, v303);
  result[11] = v302;
  unint64_t v305 = a2[5];
  uint64_t v306 = a2[6] * a2[6] + v304;
  uint64_t v307 = *((void *)&v304 + 1) + v304;
  BOOL v308 = __CFADD__(*((void *)&v304 + 1), (void)v304);
  unint64_t v309 = a2[7];
  uint64_t v310 = (v305 * (unsigned __int128)v309) >> 64;
  unint64_t v311 = v305 * v309;
  BOOL v6 = __CFADD__(v306, v311);
  uint64_t v312 = v306 + v311;
  if (v6) {
    uint64_t v313 = v310 + 1;
  }
  else {
    uint64_t v313 = v310;
  }
  BOOL v6 = __CFADD__(v307, v313);
  uint64_t v314 = v307 + v313;
  uint64_t v315 = v6;
  BOOL v6 = __CFADD__(v312, v311);
  uint64_t v316 = v312 + v311;
  if (v6) {
    uint64_t v317 = v310 + 1;
  }
  else {
    uint64_t v317 = v310;
  }
  BOOL v6 = __CFADD__(v314, v317);
  uint64_t v318 = v314 + v317;
  uint64_t v319 = v308 + v6 + v315;
  result[12] = v316;
  unint64_t v321 = a2[6];
  unint64_t v320 = a2[7];
  uint64_t v322 = (v321 * (unsigned __int128)v320) >> 64;
  unint64_t v323 = v321 * v320;
  BOOL v6 = __CFADD__(v323, v318);
  uint64_t v324 = v323 + v318;
  if (v6) {
    uint64_t v325 = v322 + 1;
  }
  else {
    uint64_t v325 = v322;
  }
  uint64_t v326 = v319 + v325;
  BOOL v6 = __CFADD__(v324, v323);
  uint64_t v327 = v324 + v323;
  if (v6) {
    uint64_t v328 = v322 + 1;
  }
  else {
    uint64_t v328 = v322;
  }
  BOOL v6 = __CFADD__(v326, v328);
  uint64_t v329 = v326 + v328;
  uint64_t v330 = v6;
  result[13] = v327;
  unint64_t v331 = a2[7];
  uint64_t v332 = (v331 * (unsigned __int128)v331) >> 64;
  unint64_t v333 = v331 * v331;
  BOOL v6 = __CFADD__(v333, v329);
  uint64_t v334 = v333 + v329;
  if (v6) {
    uint64_t v335 = v332 + 1;
  }
  else {
    uint64_t v335 = v332;
  }
  result[14] = v334;
  result[15] = v330 + __CFADD__(v319, v325) + v335;
  return result;
}

int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
{
  if (n < 0)
  {
    ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/shift.c", 73);
    return 0;
  }
  else
  {
    r->int neg = a->neg;
    unsigned int v6 = n >> 6;
    unsigned int v7 = (n >> 6) + 1;
    int result = bn_wexpand(&r->d, (int)(v7 + a->top));
    if (result)
    {
      int d = a->d;
      uint64_t v10 = r->d;
      unint64_t top = a->top;
      r->d[(int)(top + v6)] = 0;
      char v12 = n & 0x3F;
      if ((n & 0x3F) != 0)
      {
        if ((int)top >= 1)
        {
          uint64_t v13 = d - 1;
          unint64_t v14 = top;
          do
          {
            unint64_t v15 = v13[v14];
            v10[(int)(v6 + v14)] |= v15 >> (64 - v12);
            v10[v6 - 1 + v14] = v15 << v12;
            BOOL v16 = v14-- > 1;
          }
          while (v16);
        }
      }
      else if ((int)top >= 1)
      {
        uint64_t v17 = d - 1;
        unint64_t v18 = top;
        do
        {
          v10[v6 - 1 + v18] = v17[v18];
          BOOL v16 = v18-- > 1;
        }
        while (v16);
      }
      if (n >= 0x40)
      {
        bzero(v10, 8 * v6);
        LODWORD(top) = a->top;
      }
      r->unint64_t top = v7 + top;
      bn_set_minimal_width((uint64_t)r);
      return 1;
    }
  }
  return result;
}

int BN_lshift1(BIGNUM *r, const BIGNUM *a)
{
  if (r == a)
  {
    int result = bn_wexpand(&r->d, r->top + 1);
    if (!result) {
      return result;
    }
  }
  else
  {
    r->int neg = a->neg;
    int result = bn_wexpand(&r->d, a->top + 1);
    if (!result) {
      return result;
    }
    r->int top = a->top;
  }
  int top = a->top;
  if (top < 1) {
    return 1;
  }
  unint64_t v6 = 0;
  int d = r->d;
  uint64_t v8 = a->d;
  do
  {
    unint64_t v10 = *v8++;
    unint64_t v9 = v10;
    *d++ = v6 | (2 * v10);
    unint64_t v6 = v10 >> 63;
    --top;
  }
  while (top);
  if ((v9 & 0x8000000000000000) == 0) {
    return 1;
  }
  int result = 1;
  unint64_t *d = 1;
  ++r->top;
  return result;
}

void bn_rshift_words(void *__dst, uint64_t a2, unsigned int a3, unint64_t a4)
{
  unint64_t v5 = __dst;
  unint64_t v6 = a3 >> 6;
  uint64_t v7 = a4 - v6;
  if (a4 <= v6)
  {
    if (!a4) {
      return;
    }
    size_t v13 = 8 * a4;
    goto LABEL_14;
  }
  char v9 = a3 & 0x3F;
  if ((a3 & 0x3F) != 0)
  {
    if (a4 - 1 > v6)
    {
      uint64_t v10 = ~v6 + a4;
      unint64_t v11 = (void *)(a2 + 8 * v6 + 8);
      char v12 = __dst;
      do
      {
        *v12++ = (*v11 << (64 - v9)) | (*(v11 - 1) >> v9);
        ++v11;
        --v10;
      }
      while (v10);
    }
    __dst[a4 - 1 - v6] = *(void *)(a2 + 8 * (a4 - 1)) >> v9;
  }
  else if (8 * v7)
  {
    memmove(__dst, (const void *)(a2 + 8 * v6), 8 * v7);
  }
  if (a3 >= 0x40)
  {
    size_t v13 = 8 * v6;
    __dst = &v5[a4 - v6];
LABEL_14:
    bzero(__dst, v13);
  }
}

int BN_rshift(BIGNUM *r, const BIGNUM *a, int n)
{
  if (n < 0)
  {
    ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/shift.c", 158);
    return 0;
  }
  else
  {
    int result = bn_wexpand(&r->d, a->top);
    if (result)
    {
      bn_rshift_words(r->d, (uint64_t)a->d, n, a->top);
      r->int neg = a->neg;
      r->int top = a->top;
      bn_set_minimal_width((uint64_t)r);
      return 1;
    }
  }
  return result;
}

uint64_t bn_rshift_secret_shift(uint64_t a1, const BIGNUM *a2, unsigned int a3, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  uint64_t v8 = BN_CTX_get(ctx);
  if (v8 && (char v9 = (uint64_t **)v8, BN_copy((BIGNUM *)a1, a2)) && bn_wexpand(v9, *(int *)(a1 + 8)))
  {
    int v10 = *(_DWORD *)(a1 + 8);
    if (v10)
    {
      int v11 = 0;
      unsigned int v12 = v10 << 6;
      uint64_t v13 = 1;
      do
      {
        bn_rshift_words(*v9, *(void *)a1, 1 << v11, *(int *)(a1 + 8));
        bn_select_words(*(uint64_t **)a1, -(uint64_t)((a3 >> v11++) & 1), *v9, *(uint64_t **)a1, *(int *)(a1 + 8));
      }
      while (v12 >> v11);
    }
    else
    {
      uint64_t v13 = 1;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  BN_CTX_end(ctx);
  return v13;
}

int BN_rshift1(BIGNUM *r, const BIGNUM *a)
{
  int result = bn_wexpand(&r->d, a->top);
  if (result)
  {
    int top = a->top;
    if (top)
    {
      int d = r->d;
      uint64_t v7 = a->d;
      if (top != 1)
      {
        uint64_t v8 = v7 + 1;
        uint64_t v9 = top - 1;
        int v10 = r->d;
        do
        {
          *v10++ = *(long long *)(v8++ - 1) >> 1;
          --v9;
        }
        while (v9);
      }
      d[top - 1] = v7[top - 1] >> 1;
    }
    r->int top = top;
    r->int neg = a->neg;
    bn_set_minimal_width((uint64_t)r);
    return 1;
  }
  return result;
}

int BN_set_bit(BIGNUM *a, int n)
{
  if (n < 0) {
    return 0;
  }
  char v2 = n;
  signed int v4 = n >> 6;
  if (a->top <= (signed int)(n >> 6))
  {
    int result = bn_wexpand(&a->d, (v4 + 1));
    if (!result) {
      return result;
    }
    uint64_t top = a->top;
    if (v4 >= (int)top) {
      bzero(&a->d[top], 8 * (v4 - top) + 8);
    }
    a->uint64_t top = v4 + 1;
  }
  int result = 1;
  a->d[v4] |= 1 << (v2 & 0x3F);
  return result;
}

uint64_t bn_is_bit_set_words(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >> 6 >= a2) {
    return 0;
  }
  else {
    return (*(void *)(a1 + 8 * (a3 >> 6)) >> a3) & 1;
  }
}

int BN_is_bit_set(const BIGNUM *a, int n)
{
  if (n < 0 || (unint64_t v2 = (unint64_t)n >> 6, v2 >= a->top)) {
    LODWORD(v3) = 0;
  }
  else {
    return (a->d[v2] >> n) & 1;
  }
  return v3;
}

unint64_t BN_count_low_zero_bits(unint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 < 1) {
    return 0;
  }
  unint64_t v2 = (unint64_t **)result;
  uint64_t v3 = 0;
  LODWORD(result) = 0;
  uint64_t v4 = 0;
  unint64_t v5 = *v2;
  uint64_t v6 = v1 << 6;
  do
  {
    unint64_t v7 = *v5++;
    uint64_t v8 = (uint64_t)(((v7 << 32) - 1) & ~(v7 << 32)) >> 63;
    int v9 = v8 & 0x20;
    unint64_t v10 = v8 & HIDWORD(v7) | v7 & ~v8;
    uint64_t v11 = (uint64_t)(((v10 << 48) - 1) & ~(v10 << 48)) >> 63;
    int v12 = v11 & 0x10;
    unint64_t v13 = v11 & (v10 >> 16) | v10 & ~v11;
    uint64_t v14 = (v7 - 1) & ~v7;
    uint64_t v15 = (uint64_t)(((v13 << 56) - 1) & ~(v13 << 56)) >> 63;
    int v16 = v15 & 8;
    int v17 = v12 | v9;
    unint64_t v18 = v15 & (v13 >> 8) | v13 & ~v15;
    uint64_t v19 = (uint64_t)(((v18 << 60) - 1) & ~(v18 << 60)) >> 63;
    int v20 = v19 & 4;
    uint64_t v21 = v19 & (v18 >> 4) | v18 & ~v19;
    int v22 = v17 | v16;
    uint64_t v23 = (((v21 << 62) - 1) & ~(v21 << 62)) >> 63;
    int v24 = v23 & 2;
    uint64_t v25 = v23 & (v21 >> 2) | v21 & ~v23;
    LODWORD(v23) = (v14 >> 63) | v4;
    v4 |= ~(v14 >> 63);
    int result = (v3 | v22 | v20 | v24 | ((((v25 << 63) - 1) & (unint64_t)~(v25 << 63)) >> 63)) & ~v23 | result;
    v3 += 64;
  }
  while (v6 != v3);
  return result;
}

uint64_t bn_jacobi(const BIGNUM *a1, const BIGNUM *a2, BN_CTX *a3)
{
  if (!BN_is_odd((uint64_t)a2))
  {
    int v6 = 104;
    int v7 = 73;
    goto LABEL_5;
  }
  if (!BN_is_negative((uint64_t)a2))
  {
    BN_CTX_start(a3);
    int v9 = BN_CTX_get(a3);
    unint64_t v10 = BN_CTX_get(a3);
    if (v10)
    {
      uint64_t v11 = v10;
      if (BN_copy(v9, a1))
      {
        if (BN_copy(v11, a2))
        {
          unsigned int v12 = 1;
          if (BN_is_zero((uint64_t)v9))
          {
LABEL_10:
            if (BN_is_one((unsigned int *)v11)) {
              uint64_t v8 = v12;
            }
            else {
              uint64_t v8 = 0;
            }
            goto LABEL_39;
          }
          unint64_t v13 = v11;
          while (1)
          {
            uint64_t v11 = v9;
            int v9 = v13;
            int v14 = -1;
            do
              ++v14;
            while (!BN_is_bit_set(v11, v14));
            if (!BN_rshift(v11, v11, v14)) {
              break;
            }
            if (v14)
            {
              if (v9->top) {
                unint64_t v15 = *v9->d;
              }
              else {
                LOBYTE(v15) = 0;
              }
              v12 *= bn_jacobi_tab[v15 & 7];
            }
            int top = v11->top;
            if (v11->neg)
            {
              if (top) {
                unint64_t v17 = *v11->d;
              }
              else {
                LOBYTE(v17) = 0;
              }
              LOBYTE(v1bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = ~(_BYTE)v17;
            }
            else if (top)
            {
              unint64_t v18 = *v11->d;
            }
            else
            {
              LOBYTE(v1bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
            }
            if (v9->top) {
              unint64_t v19 = *v9->d;
            }
            else {
              LOBYTE(v19) = 0;
            }
            if (!BN_nnmod(v9, v9, v11, a3)) {
              break;
            }
            if ((v18 & v19 & 2) != 0) {
              unsigned int v12 = -v12;
            }
            v11->int neg = 0;
            BOOL is_zero = BN_is_zero((uint64_t)v9);
            unint64_t v13 = v11;
            if (is_zero) {
              goto LABEL_10;
            }
          }
        }
      }
    }
    uint64_t v8 = 4294967294;
LABEL_39:
    BN_CTX_end(a3);
    return v8;
  }
  int v6 = 109;
  int v7 = 79;
LABEL_5:
  ERR_put_error(3, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/jacobi.c", v7);
  return 4294967294;
}

int BIO_puts(BIO *bp, const char *buf)
{
  size_t v4 = strlen(buf);
  if (v4 >> 31)
  {
    ERR_put_error(17, 0, 69, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/bio.c", 201);
    return -1;
  }
  else
  {
    return BIO_write(bp, buf, v4);
  }
}

uint64_t BIO_int_ctrl(BIO *bp, int cmd, uint64_t larg, int iarg)
{
  int parg = iarg;
  return BIO_ctrl(bp, cmd, larg, &parg);
}

void BIO_set_flags(BIO *b, int flags)
{
  b->init |= flags;
}

uint64_t BIO_should_write(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 2;
}

uint64_t BIO_should_io_special(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 4;
}

int BIO_get_retry_reason(BIO *bio)
{
  return bio->shutdown;
}

uint64_t BIO_set_retry_write(uint64_t result)
{
  *(_DWORD *)(result + 24) |= 0xAu;
  return result;
}

uint64_t BIO_clear_retry_flags(uint64_t result)
{
  *(void *)(result + 24) = *(_DWORD *)(result + 24) & 0xFFFFFFF0;
  return result;
}

int BIO_method_type(const BIO *b)
{
  return b->method->type;
}

BIO *__cdecl BIO_find_type(BIO *b, int bio_type)
{
  for (; b; BIGNUM b = (BIO *)b->ptr)
  {
    if (b->method)
    {
      int type = b->method->type;
      if ((_BYTE)bio_type)
      {
        if (type == bio_type) {
          return b;
        }
      }
      else if ((type & bio_type) != 0)
      {
        return b;
      }
    }
  }
  return b;
}

int BIO_indent(BIO *b, int indent, int max)
{
  if (indent >= max) {
    int v4 = max;
  }
  else {
    int v4 = indent;
  }
  int v5 = v4 + 1;
  while (--v5)
  {
    if (BIO_puts(b, " ") != 1) {
      return 0;
    }
  }
  return 1;
}

void *EVP_AEAD_CTX_new(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = OPENSSL_malloc(0x248uLL);
  bzero(v8, 0x248uLL);
  if (!EVP_AEAD_CTX_init(v8, a1, a2, a3, a4) && v8)
  {
    if (*v8)
    {
      (*(void (**)(void *))(*v8 + 24))(v8);
      *uint64_t v8 = 0;
    }
    OPENSSL_free(v8);
    return 0;
  }
  return v8;
}

uint64_t EVP_AEAD_CTX_init(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a2 + 8))
  {
    return EVP_AEAD_CTX_init_with_direction(a1, (unsigned __int8 *)a2, a3, a4, a5, 0);
  }
  else
  {
    ERR_put_error(30, 0, 124, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/aead.c", 65);
    *a1 = 0;
    return 0;
  }
}

uint64_t EVP_AEAD_CTX_seal(uint64_t a1, char *a2, unint64_t *a3, size_t a4, uint64_t a5, uint64_t a6, char *a7, size_t a8)
{
  if (__CFADD__(a8, *(unsigned __int8 *)(*(void *)a1 + 2)))
  {
    int v12 = 117;
    int v13 = 123;
LABEL_10:
    ERR_put_error(30, 0, v12, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/cipher/aead.c", v13);
    goto LABEL_11;
  }
  if (a4 < a8)
  {
    int v12 = 103;
    int v13 = 128;
    goto LABEL_10;
  }
  if (a7 != a2 && &a2[a4] > a7 && &a7[a8] > a2)
  {
    int v12 = 115;
    int v13 = 133;
    goto LABEL_10;
  }
  int v16 = *(unsigned int (**)(uint64_t, char *, char *, unint64_t *, size_t))(*(void *)a1 + 40);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  if (v16(a1, a2, &a2[a8], &v17, a4 - a8))
  {
    unint64_t v14 = v17 + a8;
    uint64_t result = 1;
    goto LABEL_14;
  }
LABEL_11:
  if (a4) {
    bzero(a2, a4);
  }
  unint64_t v14 = 0;
  uint64_t result = 0;
LABEL_14:
  *a3 = v14;
  return result;
}

int RSA_up_ref(RSA *r)
{
  return 1;
}

int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)
{
  return 0;
}

uint64_t RSA_bits(uint64_t a1)
{
  return BN_num_bits(*(const BIGNUM **)(a1 + 8));
}

uint64_t rsa_default_size(uint64_t a1)
{
  return BN_num_bytes(*(const BIGNUM **)(a1 + 8));
}

BOOL RSA_encrypt(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if (!a1)
  {
    int v10 = 67;
    int v11 = 125;
    goto LABEL_7;
  }
  if (!a2)
  {
    int v10 = 67;
    int v11 = 129;
    goto LABEL_7;
  }
  if (BN_num_bytes(*(const BIGNUM **)(a1 + 8)) < 0x401)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    if (!RSA_public_key_to_bytes(&v19, &v18, a1) || !v19) {
      return 0;
    }
    uint64_t v14 = ccrsa_import_pub_n();
    unint64_t v15 = malloc_type_malloc(24 * v14 + 40, 0xA5A874EFuLL);
    if (!v15)
    {
      if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
        RSA_encrypt_cold_1();
      }
      return 0;
    }
    int v16 = v15;
    *unint64_t v15 = v14;
    if (ccrsa_import_pub())
    {
      OPENSSL_free(v19);
      free(v16);
      return 0;
    }
    *a2 = ccrsa_block_size();
    switch(a7)
    {
      case 4:
        if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
          RSA_encrypt_cold_2();
        }
        int v17 = 175;
        break;
      case 3:
        if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
          RSA_encrypt_cold_3();
        }
        int v17 = 180;
        break;
      case 1:
        ccrng();
        BOOL v12 = ccrsa_encrypt_eme_pkcs1v15() == 0;
LABEL_32:
        OPENSSL_free(v19);
        free(v16);
        return v12;
      default:
LABEL_31:
        BOOL v12 = 0;
        goto LABEL_32;
    }
    ERR_put_error(4, 0, 143, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", v17);
    goto LABEL_31;
  }
  int v10 = 500;
  int v11 = 133;
LABEL_7:
  ERR_put_error(4, 0, v10, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", v11);
  return 0;
}

uint64_t RSA_padding_check_PKCS1_OAEP_mgf1()
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    RSA_padding_check_PKCS1_OAEP_mgf1_cold_1();
  }
  return 0;
}

uint64_t RSA_padding_add_PKCS1_OAEP_mgf1()
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    RSA_padding_add_PKCS1_OAEP_mgf1_cold_1();
  }
  return 0;
}

int RSA_verify(int type, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigbuf, unsigned int siglen, RSA *rsa)
{
  if (!rsa)
  {
    int v12 = 67;
    int v13 = 391;
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)&siglen;
  size_t v9 = *(void *)&m_length;
  if (BN_num_bytes((const BIGNUM *)rsa->version) >= 0x401)
  {
    int v12 = 500;
    int v13 = 395;
LABEL_11:
    ERR_put_error(4, 0, v12, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", v13);
    return 0;
  }
  unsigned int v14 = BN_num_bytes((const BIGNUM *)rsa->version);
  size_t v22 = 0xAAAAAAAAAAAAAAAALL;
  __s2 = 0;
  size_t v21 = 0xAAAAAAAAAAAAAAAALL;
  int v20 = 0;
  if (!rsa->version || !rsa->meth)
  {
    int v12 = 144;
    int v13 = 404;
    goto LABEL_11;
  }
  if (type == 114 && v9 != 36)
  {
    int v12 = 125;
    int v13 = 409;
    goto LABEL_11;
  }
  int v17 = (unsigned __int8 *)malloc_type_malloc(v14, 0xB7B0FB75uLL);
  if (!v17)
  {
    int v12 = 65;
    int v13 = 415;
    goto LABEL_11;
  }
  unint64_t v19 = v17;
  if (RSA_verify_raw((uint64_t)rsa, &v21, v17, v18, (uint64_t)sigbuf, v7, 1)
    && RSA_add_pkcs1_prefix(&__s2, &v22, &v20, type, m, v9))
  {
    if (v21 == v22 && !memcmp(v19, __s2, v21))
    {
      int v15 = 1;
      goto LABEL_20;
    }
    ERR_put_error(4, 0, 105, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", 428);
  }
  int v15 = 0;
LABEL_20:
  free(v19);
  if (v20 && __s2) {
    free(__s2);
  }
  return v15;
}

uint64_t RSA_add_pkcs1_prefix(void *a1, size_t *a2, _DWORD *a3, int a4, const void *a5, size_t a6)
{
  if (a4 == 114)
  {
    if (a6 == 36)
    {
      *a1 = a5;
      *a2 = 36;
      *a3 = 0;
      return 1;
    }
    int v14 = 125;
    int v15 = 516;
  }
  else
  {
    uint64_t v12 = 0;
    int v13 = 4;
    while (v13 != a4)
    {
      int v13 = *(_DWORD *)&kPKCS1SigPrefixes[v12 + 24];
      v12 += 24;
      if (v12 == 144)
      {
        int v14 = 142;
        int v15 = 559;
        goto LABEL_14;
      }
    }
    int v16 = (char *)&kPKCS1SigPrefixes[v12];
    size_t v17 = kPKCS1SigPrefixes[v12 + 4];
    if ((int)v17 + (int)a6 >= v17)
    {
      size_t v18 = (v17 + a6);
      unint64_t v19 = (char *)malloc_type_malloc(v18, 0x89AAFC05uLL);
      if (v19)
      {
        int v20 = v19;
        memcpy(v19, v16 + 5, v17);
        memcpy(&v20[v17], a5, a6);
        *a1 = v20;
        *a2 = v18;
        uint64_t result = 1;
        *a3 = 1;
        return result;
      }
      int v14 = 65;
      int v15 = 545;
    }
    else
    {
      int v14 = 140;
      int v15 = 539;
    }
  }
LABEL_14:
  ERR_put_error(4, 0, v14, "/Library/Caches/com.apple.xbs/Sources/boringssl/apple/crypto/boringssl_crypto_rsa.m", v15);
  return 0;
}

uint64_t RSA_decrypt()
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    RSA_decrypt_cold_1();
  }
  return 0;
}

uint64_t rsa_default_sign_raw()
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    rsa_default_sign_raw_cold_1();
  }
  return 0;
}

uint64_t RSA_sign_raw()
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    RSA_sign_raw_cold_1();
  }
  return 0;
}

int RSA_sign(int type, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigret, unsigned int *siglen, RSA *rsa)
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    RSA_sign_cold_1();
  }
  return 0;
}

uint64_t RSA_sign_pss_mgf1()
{
  if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
    RSA_sign_pss_mgf1_cold_1();
  }
  return 0;
}

uint64_t ec_GFp_nistp224_point_get_affine_coordinates(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (ec_GFp_simple_is_at_infinity(a1, a2))
  {
    ERR_put_error(15, 0, 119, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/p224-64.c", 868);
    return 0;
  }
  else
  {
    uint64_t v8 = *(long long *)(a2 + 152) >> 48;
    uint64_t v9 = *(long long *)(a2 + 160) >> 40;
    long long v10 = *(_OWORD *)(a2 + 144);
    v31.i64[0] = v10 & 0xFFFFFFFFFFFFFFLL;
    v31.i64[1] = (v10 >> 56) & 0xFFFFFFFFFFFFFFLL;
    v11.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v11.i64[1] = 0xAAAAAAAAAAAAAAAALL;
    v30[0] = v11;
    v30[1] = v11;
    v29[5] = v11;
    v29[6] = v11;
    v29[3] = v11;
    _OWORD v29[4] = v11;
    v29[1] = v11;
    _OWORD v29[2] = v11;
    v29[0] = v11;
    uint64_t v32 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v33 = v9 & 0xFFFFFFFFFFFFFFLL;
    int8x16_t v44 = v11;
    int8x16_t v45 = v11;
    v43[0] = v11;
    v43[1] = v11;
    v42[0] = v11;
    v42[1] = v11;
    v41[0] = v11;
    v41[1] = v11;
    int8x16_t v39 = v11;
    int8x16_t v40 = v11;
    int8x16_t v37 = v11;
    int8x16_t v38 = v11;
    int8x16_t v35 = v11;
    int8x16_t v36 = v11;
    int8x16_t v34 = v11;
    p224_felem_square(&v34, (unint64_t *)&v31);
    p224_felem_reduce(&v44, (unint64_t *)&v34);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)&v31, (unint64_t *)&v44);
    p224_felem_reduce(&v44, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)&v44);
    p224_felem_reduce(&v44, (unint64_t *)&v34);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)&v31, (unint64_t *)&v44);
    p224_felem_reduce(&v44, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)&v44);
    p224_felem_reduce(v43, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)v43);
    p224_felem_reduce(v43, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)v43);
    p224_felem_reduce(v43, (unint64_t *)&v34);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)v43, (unint64_t *)&v44);
    p224_felem_reduce(&v44, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)&v44);
    p224_felem_reduce(v43, (unint64_t *)&v34);
    uint64_t v12 = 5;
    do
    {
      p224_felem_square(&v34, (unint64_t *)v43);
      p224_felem_reduce(v43, (unint64_t *)&v34);
      --v12;
    }
    while (v12);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)v43, (unint64_t *)&v44);
    p224_felem_reduce(v43, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)v43);
    p224_felem_reduce(v42, (unint64_t *)&v34);
    uint64_t v13 = 11;
    do
    {
      p224_felem_square(&v34, (unint64_t *)v42);
      p224_felem_reduce(v42, (unint64_t *)&v34);
      --v13;
    }
    while (v13);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)v42, (unint64_t *)v43);
    p224_felem_reduce(v43, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)v43);
    p224_felem_reduce(v42, (unint64_t *)&v34);
    uint64_t v14 = 23;
    do
    {
      p224_felem_square(&v34, (unint64_t *)v42);
      p224_felem_reduce(v42, (unint64_t *)&v34);
      --v14;
    }
    while (v14);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)v42, (unint64_t *)v43);
    p224_felem_reduce(v42, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)v42);
    p224_felem_reduce(v41, (unint64_t *)&v34);
    uint64_t v15 = 47;
    do
    {
      p224_felem_square(&v34, (unint64_t *)v41);
      p224_felem_reduce(v41, (unint64_t *)&v34);
      --v15;
    }
    while (v15);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)v42, (unint64_t *)v41);
    p224_felem_reduce(v42, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)v42);
    p224_felem_reduce(v41, (unint64_t *)&v34);
    uint64_t v16 = 23;
    do
    {
      p224_felem_square(&v34, (unint64_t *)v41);
      p224_felem_reduce(v41, (unint64_t *)&v34);
      --v16;
    }
    while (v16);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)v43, (unint64_t *)v41);
    p224_felem_reduce(v43, (unint64_t *)&v34);
    uint64_t v17 = 6;
    do
    {
      p224_felem_square(&v34, (unint64_t *)v43);
      p224_felem_reduce(v43, (unint64_t *)&v34);
      --v17;
    }
    while (v17);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)v43, (unint64_t *)&v44);
    p224_felem_reduce(&v44, (unint64_t *)&v34);
    p224_felem_square(&v34, (unint64_t *)&v44);
    p224_felem_reduce(&v44, (unint64_t *)&v34);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)&v44, (unint64_t *)&v31);
    p224_felem_reduce(&v44, (unint64_t *)&v34);
    uint64_t v18 = 97;
    do
    {
      p224_felem_square(&v34, (unint64_t *)&v44);
      p224_felem_reduce(&v44, (unint64_t *)&v34);
      --v18;
    }
    while (v18);
    p224_felem_mul((uint64_t)&v34, (unint64_t *)&v44, (unint64_t *)v42);
    p224_felem_reduce(v30, (unint64_t *)&v34);
    p224_felem_square(v29, (unint64_t *)v30);
    p224_felem_reduce(&v31, (unint64_t *)v29);
    if (a3)
    {
      uint64_t v19 = *(void *)(a2 + 8);
      *((void *)&v20 + 1) = v19;
      *(void *)&long long v20 = *(void *)a2;
      v34.i64[0] = *(void *)a2 & 0xFFFFFFFFFFFFFFLL;
      v34.i64[1] = (v20 >> 56) & 0xFFFFFFFFFFFFFFLL;
      *((void *)&v20 + 1) = *(void *)(a2 + 16);
      *(void *)&long long v20 = v19;
      uint64_t v21 = v20 >> 48;
      long long v22 = *(_OWORD *)(a2 + 16);
      v23.i64[0] = 0xAAAAAAAAAAAAAAAALL;
      v23.i64[1] = 0xAAAAAAAAAAAAAAAALL;
      int8x16_t v44 = v23;
      int8x16_t v45 = v23;
      v35.i64[0] = v21 & 0xFFFFFFFFFFFFFFLL;
      v35.i64[1] = (v22 >> 40) & 0xFFFFFFFFFFFFFFLL;
      p224_felem_mul((uint64_t)v29, (unint64_t *)&v34, (unint64_t *)&v31);
      p224_felem_reduce(&v44, (unint64_t *)v29);
      p224_felem_to_generic(a3, &v44);
    }
    if (a4)
    {
      v24.i64[0] = 0xAAAAAAAAAAAAAAAALL;
      v24.i64[1] = 0xAAAAAAAAAAAAAAAALL;
      int8x16_t v44 = v24;
      int8x16_t v45 = v24;
      uint64_t v25 = *(void *)(a2 + 80);
      *((void *)&v26 + 1) = v25;
      *(void *)&long long v26 = *(void *)(a2 + 72);
      v34.i64[0] = v26 & 0xFFFFFFFFFFFFFFLL;
      v34.i64[1] = (v26 >> 56) & 0xFFFFFFFFFFFFFFLL;
      *((void *)&v26 + 1) = *(void *)(a2 + 88);
      *(void *)&long long v26 = v25;
      uint64_t v27 = (v26 >> 48) & 0xFFFFFFFFFFFFFFLL;
      long long v28 = *(_OWORD *)(a2 + 88);
      v35.i64[0] = v27;
      v35.i64[1] = (v28 >> 40) & 0xFFFFFFFFFFFFFFLL;
      p224_felem_mul((uint64_t)v29, (unint64_t *)&v31, (unint64_t *)v30);
      p224_felem_reduce(&v31, (unint64_t *)v29);
      p224_felem_mul((uint64_t)v29, (unint64_t *)&v34, (unint64_t *)&v31);
      p224_felem_reduce(&v44, (unint64_t *)v29);
      p224_felem_to_generic(a4, &v44);
    }
    return 1;
  }
}

uint64_t *ec_GFp_nistp224_add(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3[1];
  *((void *)&v6 + 1) = v5;
  *(void *)&long long v6 = *a3;
  v34.i64[0] = *a3 & 0xFFFFFFFFFFFFFFLL;
  v34.i64[1] = (v6 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v6 + 1) = a3[2];
  *(void *)&long long v6 = v5;
  uint64_t v7 = (v6 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v8 = *((_OWORD *)a3 + 1);
  uint64_t v35 = v7;
  uint64_t v36 = (v8 >> 40) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v9 = a3[10];
  *((void *)&v8 + 1) = v9;
  *(void *)&long long v8 = a3[9];
  v31.i64[0] = v8 & 0xFFFFFFFFFFFFFFLL;
  v31.i64[1] = (v8 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v8 + 1) = a3[11];
  *(void *)&long long v8 = v9;
  uint64_t v10 = (v8 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v11 = *(_OWORD *)(a3 + 11);
  uint64_t v32 = v10;
  uint64_t v33 = (v11 >> 40) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v12 = a3[19];
  *((void *)&v11 + 1) = v12;
  *(void *)&long long v11 = a3[18];
  v28.i64[0] = v11 & 0xFFFFFFFFFFFFFFLL;
  v28.i64[1] = (v11 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v11 + 1) = a3[20];
  *(void *)&long long v11 = v12;
  uint64_t v13 = (v11 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v14 = *((_OWORD *)a3 + 10);
  uint64_t v29 = v13;
  uint64_t v30 = (v14 >> 40) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v15 = a4[1];
  *((void *)&v14 + 1) = v15;
  *(void *)&long long v14 = *a4;
  v27[0] = *a4 & 0xFFFFFFFFFFFFFFLL;
  v27[1] = (v14 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v14 + 1) = a4[2];
  *(void *)&long long v14 = v15;
  unint64_t v16 = (v14 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v17 = *((_OWORD *)a4 + 1);
  long long v27[2] = v16;
  _OWORD v27[3] = (v17 >> 40) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v18 = a4[10];
  *((void *)&v17 + 1) = v18;
  *(void *)&long long v17 = a4[9];
  v26[0] = v17 & 0xFFFFFFFFFFFFFFLL;
  v26[1] = (v17 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v17 + 1) = a4[11];
  *(void *)&long long v17 = v18;
  unint64_t v19 = (v17 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v20 = *(_OWORD *)(a4 + 11);
  long long v26[2] = v19;
  _OWORD v26[3] = (v20 >> 40) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v21 = a4[19];
  *((void *)&v20 + 1) = v21;
  *(void *)&long long v20 = a4[18];
  v25[0] = v20 & 0xFFFFFFFFFFFFFFLL;
  v25[1] = (v20 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v20 + 1) = a4[20];
  *(void *)&long long v20 = v21;
  unint64_t v22 = (v20 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v23 = *((_OWORD *)a4 + 10);
  _OWORD v25[2] = v22;
  _OWORD v25[3] = (v23 >> 40) & 0xFFFFFFFFFFFFFFLL;
  p224_point_add(&v34, (int8x16_t *)&v31, &v28, &v34, &v31, (uint64_t)&v28, 0, v27, v26, v25);
  p224_felem_to_generic(a2, &v34);
  p224_felem_to_generic(a2 + 9, &v31);
  return p224_felem_to_generic(a2 + 18, &v28);
}

uint64_t *ec_GFp_nistp224_dbl(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3[1];
  *((void *)&v5 + 1) = v4;
  *(void *)&long long v5 = *a3;
  v21.i64[0] = *a3 & 0xFFFFFFFFFFFFFFLL;
  v21.i64[1] = (v5 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v5 + 1) = a3[2];
  *(void *)&long long v5 = v4;
  uint64_t v6 = (v5 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v7 = *((_OWORD *)a3 + 1);
  uint64_t v22 = v6;
  uint64_t v23 = (v7 >> 40) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v8 = a3[10];
  *((void *)&v7 + 1) = v8;
  *(void *)&long long v7 = a3[9];
  v18.i64[0] = v7 & 0xFFFFFFFFFFFFFFLL;
  v18.i64[1] = (v7 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v7 + 1) = a3[11];
  *(void *)&long long v7 = v8;
  uint64_t v9 = (v7 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v10 = *(_OWORD *)(a3 + 11);
  uint64_t v19 = v9;
  uint64_t v20 = (v10 >> 40) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v11 = a3[19];
  *((void *)&v10 + 1) = v11;
  *(void *)&long long v10 = a3[18];
  v15.i64[0] = v10 & 0xFFFFFFFFFFFFFFLL;
  v15.i64[1] = (v10 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v10 + 1) = a3[20];
  *(void *)&long long v10 = v11;
  uint64_t v12 = (v10 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v13 = *((_OWORD *)a3 + 10);
  uint64_t v16 = v12;
  uint64_t v17 = (v13 >> 40) & 0xFFFFFFFFFFFFFFLL;
  p224_point_double(&v21, (int8x16_t *)&v18, (int8x16_t *)&v15, (unint64_t *)&v21, &v18, &v15);
  p224_felem_to_generic(a2, &v21);
  p224_felem_to_generic(a2 + 9, &v18);
  return p224_felem_to_generic(a2 + 18, &v15);
}

uint64_t *ec_GFp_nistp224_point_mul(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  memset(__b, 170, sizeof(__b));
  ec_GFp_nistp224_make_precomp((uint64_t)__b, a3);
  v6.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v6.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v6;
  v25[1] = v6;
  int64x2_t v23 = (int64x2_t)v6;
  int8x16_t v24 = v6;
  int64x2_t v21 = (int64x2_t)v6;
  int8x16_t v22 = v6;
  int8x16_t v19 = v6;
  int8x16_t v20 = v6;
  int8x16_t v26 = 0u;
  int8x16_t v27 = 0u;
  int64x2_t v28 = 0u;
  int8x16_t v29 = 0u;
  int v7 = 1;
  unint64_t v8 = 220;
  int64x2_t v30 = 0u;
  int8x16_t v31 = 0u;
  do
  {
    if (!v7) {
      p224_point_double(&v26, (int8x16_t *)&v28, (int8x16_t *)&v30, (unint64_t *)&v26, &v28, &v30);
    }
    if (-858993459 * v8 < 0x33333334)
    {
      if (v8 <= 0xDB) {
        uint64_t v10 = (*(void *)(a4 + (((v8 + 4) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 4)) & 1;
      }
      else {
        uint64_t v10 = 0;
      }
      unint64_t v9 = v8 - 1;
      if (v8 - 1 <= 0xDF) {
        uint64_t v11 = (*(void *)(a4 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1;
      }
      else {
        uint64_t v11 = 0;
      }
      unint64_t v12 = v11 | (32 * v10) | (16
                              * ((*(void *)(a4 + (((v8 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 3)) & 1)) | (8 * ((*(void *)(a4 + (((v8 + 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 2)) & 1)) | (4 * ((*(void *)(a4 + (((v8 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 + 1)) & 1)) | (2 * ((*(void *)(a4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1));
      uint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
      ec_GFp_nistp_recode_scalar_bits(&v18, &v17, v12);
      p224_select_point(v17, 17, (uint64_t)__b, &v19);
      p224_felem_neg(v25, &v21);
      uint64_t v13 = 0;
      int8x16_t v14 = (int8x16_t)vdupq_n_s64(-v18);
      do
      {
        *(int8x16_t *)((char *)&v21 + v13 * 16) = vbslq_s8(v14, v25[v13], *(int8x16_t *)((char *)&v21 + v13 * 16));
        ++v13;
      }
      while (v13 != 2);
      if (v7)
      {
        int64x2_t v28 = v21;
        int8x16_t v29 = v22;
        int64x2_t v30 = v23;
        int8x16_t v31 = v24;
        int8x16_t v26 = v19;
        int8x16_t v27 = v20;
      }
      else
      {
        p224_point_add(&v26, (int8x16_t *)&v28, (int8x16_t *)&v30, &v26, &v28, (uint64_t)&v30, 0, (unint64_t *)&v19, (unint64_t *)&v21, (unint64_t *)&v23);
      }
      int v7 = 0;
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v8 = v9;
  }
  while (v9 < 0xDD);
  p224_felem_to_generic(a2, &v26);
  p224_felem_to_generic(a2 + 9, &v28);
  return p224_felem_to_generic(a2 + 18, &v30);
}

uint64_t *ec_GFp_nistp224_point_mul_base(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v5 = 0;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v6.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v6.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  int64x2_t v14 = v6;
  int64x2_t v15 = v6;
  int64x2_t v12 = v6;
  int64x2_t v13 = v6;
  int8x16_t v10 = (int8x16_t)v6;
  int64x2_t v11 = v6;
  int8x16_t v16 = 0u;
  int64x2_t v17 = 0u;
  int64x2_t v18 = 0u;
  int64x2_t v19 = 0u;
  unint64_t v7 = 111;
  int64x2_t v20 = 0u;
  int64x2_t v21 = 0u;
  do
  {
    if (v5) {
      p224_point_double(&v16, (int8x16_t *)&v18, (int8x16_t *)&v20, (unint64_t *)&v16, &v18, &v20);
    }
    p224_select_point((8 * ((*(void *)(a3 + (((v7 + 112) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 - 80)) & 1)) | (4 * ((*(void *)(a3 + (((v7 + 56) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 - 72)) & 1)) | (2 * ((*(void *)(a3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1)) | (*(void *)(a3 + (((v7 - 56) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 - 56)) & 1, 16, (uint64_t)&unk_1BA18ABD8, &v10);
    if (v5)
    {
      p224_point_add(&v16, (int8x16_t *)&v18, (int8x16_t *)&v20, &v16, &v18, (uint64_t)&v20, 1, (unint64_t *)&v10, (unint64_t *)&v12, (unint64_t *)&v14);
    }
    else
    {
      int64x2_t v18 = v12;
      int64x2_t v19 = v13;
      int64x2_t v20 = v14;
      int64x2_t v21 = v15;
      int8x16_t v16 = v10;
      int64x2_t v17 = v11;
    }
    p224_select_point((8 * ((*(void *)(a3 + (((v7 + 84) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 + 84)) & 1)) | (4 * ((*(void *)(a3 + (((v7 + 28) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 + 28)) & 1)) | (2 * ((*(void *)(a3 + (((v7 - 28) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 - 28)) & 1)) | (*(void *)(a3 + (((v7 - 84) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 - 84)) & 1, 16, (uint64_t)&g_p224_pre_comp, &v10);
    char v5 = 1;
    p224_point_add(&v16, (int8x16_t *)&v18, (int8x16_t *)&v20, &v16, &v18, (uint64_t)&v20, 1, (unint64_t *)&v10, (unint64_t *)&v12, (unint64_t *)&v14);
    unint64_t v8 = v7 - 85;
    --v7;
  }
  while (v8 < 0x1C);
  p224_felem_to_generic(a2, &v16);
  p224_felem_to_generic(a2 + 9, &v18);
  return p224_felem_to_generic(a2 + 18, &v20);
}

uint64_t *ec_GFp_nistp224_point_mul_public(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  memset(__b, 170, sizeof(__b));
  ec_GFp_nistp224_make_precomp((uint64_t)__b, a4);
  int8x16_t v29 = 0u;
  int64x2_t v30 = 0u;
  int64x2_t v31 = 0u;
  int64x2_t v32 = 0u;
  int64x2_t v33 = 0u;
  int64x2_t v34 = 0u;
  int v8 = 1;
  unint64_t v9 = 220;
  do
  {
    if (!v8) {
      p224_point_double(&v29, (int8x16_t *)&v31, (int8x16_t *)&v33, (unint64_t *)&v29, &v31, &v33);
    }
    if (v9 <= 0x1B)
    {
      int8x16_t v10 = (unint64_t *)((char *)&g_p224_pre_comp
                               + 96
                               * ((8
                                 * ((*(void *)(a3 + (((v9 + 196) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 - 60)) & 1)) | (4 * ((*(void *)(a3 + (((v9 + 140) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 - 116)) & 1)) | (2 * ((*(void *)(a3 + (((v9 + 84) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 + 84)) & 1)) | (*(void *)(a3 + (((v9 + 28) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 + 28)) & 1));
      p224_point_add(&v29, (int8x16_t *)&v31, (int8x16_t *)&v33, &v29, &v31, (uint64_t)&v33, 1, v10 + 192, v10 + 196, v10 + 200);
      if (v8) {
        ec_GFp_nistp224_point_mul_public_cold_1();
      }
      int64x2_t v11 = (unint64_t *)((char *)&g_p224_pre_comp
                               + 96
                               * ((8
                                 * ((*(void *)(a3 + (((v9 + 168) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 - 88)) & 1)) | (4 * ((*(void *)(a3 + (((v9 + 112) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 + 112)) & 1)) | (2 * ((*(void *)(a3 + (((v9 + 56) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 + 56)) & 1)) | (*(void *)(a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1));
      p224_point_add(&v29, (int8x16_t *)&v31, (int8x16_t *)&v33, &v29, &v31, (uint64_t)&v33, 1, v11, v11 + 4, v11 + 8);
    }
    if (-858993459 * v9 < 0x33333334)
    {
      if (v9 <= 0xDB) {
        uint64_t v12 = (*(void *)(a5 + (((v9 + 4) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 + 4)) & 1;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v9 - 1 <= 0xDF) {
        uint64_t v13 = (*(void *)(a5 + (((v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 - 1)) & 1;
      }
      else {
        uint64_t v13 = 0;
      }
      unint64_t v14 = v13 | (32 * v12) | (16
                              * ((*(void *)(a5 + (((v9 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 + 3)) & 1)) | (8 * ((*(void *)(a5 + (((v9 + 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 + 2)) & 1)) | (4 * ((*(void *)(a5 + (((v9 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 + 1)) & 1)) | (2 * ((*(void *)(a5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1));
      unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      ec_GFp_nistp_recode_scalar_bits(&v22, &v21, v14);
      int64x2_t v15 = (int64x2_t *)&__b[6 * v21];
      int64x2_t v16 = v15[3];
      int64x2_t v25 = v15[2];
      int64x2_t v26 = v16;
      int64x2_t v17 = v15[5];
      int64x2_t v27 = v15[4];
      int64x2_t v28 = v17;
      int64x2_t v18 = v15[1];
      int8x16_t v23 = *(int8x16_t *)v15;
      int64x2_t v24 = v18;
      if (v22) {
        p224_felem_neg((int8x16_t *)&v25, &v25);
      }
      if (v8)
      {
        int64x2_t v31 = v25;
        int64x2_t v32 = v26;
        int64x2_t v33 = v27;
        int64x2_t v34 = v28;
        int8x16_t v29 = v23;
        int64x2_t v30 = v24;
      }
      else
      {
        p224_point_add(&v29, (int8x16_t *)&v31, (int8x16_t *)&v33, &v29, &v31, (uint64_t)&v33, 0, (unint64_t *)&v23, (unint64_t *)&v25, (unint64_t *)&v27);
      }
      int v8 = 0;
      --v9;
    }
    else
    {
      --v9;
    }
  }
  while (v9 < 0xDD);
  p224_felem_to_generic(a2, &v29);
  p224_felem_to_generic(a2 + 9, &v31);
  return p224_felem_to_generic(a2 + 18, &v33);
}

uint64_t *ec_GFp_nistp224_felem_mul(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[5] = v5;
  v14[6] = v5;
  _OWORD v14[3] = v5;
  _OWORD v14[4] = v5;
  v14[1] = v5;
  void v14[2] = v5;
  v14[0] = v5;
  uint64_t v6 = a3[1];
  *((void *)&v7 + 1) = v6;
  *(void *)&long long v7 = *a3;
  v16.i64[0] = *a3 & 0xFFFFFFFFFFFFFFLL;
  v16.i64[1] = (v7 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v7 + 1) = a3[2];
  *(void *)&long long v7 = v6;
  uint64_t v8 = (v7 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v9 = *((_OWORD *)a3 + 1);
  uint64_t v17 = v8;
  uint64_t v18 = (v9 >> 40) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v10 = a4[1];
  *((void *)&v9 + 1) = v10;
  *(void *)&long long v9 = *a4;
  v15[0] = *a4 & 0xFFFFFFFFFFFFFFLL;
  v15[1] = (v9 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v9 + 1) = a4[2];
  *(void *)&long long v9 = v10;
  unint64_t v11 = (v9 >> 48) & 0xFFFFFFFFFFFFFFLL;
  long long v12 = *((_OWORD *)a4 + 1);
  long long v15[2] = v11;
  _OWORD v15[3] = (v12 >> 40) & 0xFFFFFFFFFFFFFFLL;
  p224_felem_mul((uint64_t)v14, (unint64_t *)&v16, v15);
  p224_felem_reduce(&v16, (unint64_t *)v14);
  return p224_felem_to_generic(a2, &v16);
}

uint64_t *ec_GFp_nistp224_felem_sqr(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3[1];
  *((void *)&v5 + 1) = v4;
  *(void *)&long long v5 = *a3;
  v11.i64[0] = *a3 & 0xFFFFFFFFFFFFFFLL;
  v11.i64[1] = (v5 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *((void *)&v5 + 1) = a3[2];
  *(void *)&long long v5 = v4;
  uint64_t v6 = v5 >> 48;
  long long v7 = *((_OWORD *)a3 + 1);
  uint64_t v12 = v6 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v13 = (v7 >> 40) & 0xFFFFFFFFFFFFFFLL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[5] = v8;
  v10[6] = v8;
  _OWORD v10[3] = v8;
  _OWORD v10[4] = v8;
  v10[1] = v8;
  _OWORD v10[2] = v8;
  v10[0] = v8;
  p224_felem_square(v10, (unint64_t *)&v11);
  p224_felem_reduce(&v11, (unint64_t *)v10);
  return p224_felem_to_generic(a2, &v11);
}

_OWORD *p224_felem_square(_OWORD *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  uint64_t v4 = 2 * *a2;
  unint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  *uint64_t result = *a2 * (unsigned __int128)*a2;
  result[1] = 2 * v3 * (unsigned __int128)v2;
  result[2] = 2 * v5 * (unsigned __int128)v2 + v3 * (unsigned __int128)v3;
  result[3] = v6 * (unsigned __int128)(unint64_t)v4 + 2 * v5 * (unsigned __int128)v3;
  result[4] = v6 * (unsigned __int128)(2 * v3) + v5 * (unsigned __int128)v5;
  result[5] = v6 * (unsigned __int128)(2 * v5);
  result[6] = v6 * (unsigned __int128)v6;
  return result;
}

int8x16_t p224_felem_reduce(int8x16_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  unint64_t v5 = a2[2];
  unint64_t v4 = a2[3];
  unint64_t v7 = a2[6];
  unint64_t v6 = a2[7];
  unsigned long long v8 = *((_OWORD *)a2 + 6);
  unsigned long long v9 = (v8 >> 16) + *((_OWORD *)a2 + 4);
  unint64_t v10 = (unint64_t)(unsigned __int16)v8 << 40;
  BOOL v11 = __CFADD__(v10, v7);
  unint64_t v12 = v10 + v7;
  if (v11) {
    ++v6;
  }
  unint64_t v13 = (*((_OWORD *)a2 + 2) - *((_OWORD *)a2 + 6)) >> 64;
  unint64_t v14 = a2[4] - a2[12];
  unint64_t v16 = a2[10];
  unint64_t v15 = a2[11];
  unint64_t v17 = (unint64_t)(unsigned __int16)v16 << 40;
  BOOL v11 = __CFADD__(v14, v17);
  unint64_t v18 = v14 + v17;
  if (v11) {
    ++v13;
  }
  *((void *)&v19 + 1) = v15;
  *(void *)&unsigned long long v19 = v16;
  unsigned long long v20 = __PAIR128__(v6, v12) + (v19 >> 16);
  unsigned long long v21 = __PAIR128__(v13, v18) + (v9 >> 16);
  unint64_t v23 = v5 - v16;
  uint64_t v22 = (__PAIR128__(v4, v5) - __PAIR128__(v15, v16)) >> 64;
  unint64_t v24 = (unint64_t)(unsigned __int16)v9 << 40;
  unint64_t v25 = v5 - v16 + v24;
  if (__CFADD__(v23, v24)) {
    ++v22;
  }
  *((void *)&v26 + 1) = *((void *)&v21 + 1) + 0x7FFFFFFFFFFFFF80;
  *(void *)&unsigned long long v26 = v21;
  long long v27 = v20 + (v26 >> 56);
  uint64_t v28 = (v27 >> 16) & 0xFFFF0000000000;
  BOOL v11 = __CFADD__(v25, v28);
  uint64_t v29 = v25 + v28;
  if (v11) {
    ++v22;
  }
  uint64_t v30 = (v21 & 0xFFFFFFFFFFFFFFLL) + (*((void *)&v27 + 1) >> 8);
  signed long long v31 = __PAIR128__(v2, v3) - (v9 + ((unsigned __int128)v27 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000);
  signed long long v32 = __PAIR128__(HIBYTE(*((void *)&v31 + 1)) + (unint64_t)__CFADD__(v29, (unint64_t)(v31 >> 56)) + v22, v29 + (unint64_t)(v31 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  unint64_t v33 = (unint64_t)((__PAIR128__(HIBYTE(*((void *)&v31 + 1))+ (unint64_t)__CFADD__(v29, (unint64_t)(v31 >> 56))+ v22, v29 + (unint64_t)(v31 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
  uint64_t v34 = v32 >> 56;
  BOOL v11 = __CFADD__(v30, v34);
  uint64_t v35 = v30 + v34;
  if (v11) {
    ++v33;
  }
  v36.i64[0] = v31;
  v36.i64[1] = v32;
  v37.i64[0] = 0xFFFFFFFFFFFFFFLL;
  v37.i64[1] = 0xFFFFFFFFFFFFFFLL;
  int8x16_t result = vandq_s8(v36, v37);
  *a1 = result;
  *((void *)&v39 + 1) = v33;
  *(void *)&long long v39 = v35;
  a1[1].i64[0] = v35 & 0xFFFFFFFFFFFFFFLL;
  a1[1].i64[1] = (v39 >> 56) + (v27 & 0xFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t p224_felem_mul(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = a3[1];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  uint64_t v7 = (*a3 * (unsigned __int128)*a2) >> 64;
  *(void *)int8x16_t result = *a3 * *a2;
  *(void *)(result + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v7;
  *(_OWORD *)(result + 16) = v6 * (unsigned __int128)v3 + v4 * (unsigned __int128)v5;
  unint64_t v8 = a3[2];
  unint64_t v9 = a3[3];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  *(_OWORD *)(result + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v8 * (unsigned __int128)v5 + v6 * (unsigned __int128)v4 + v10 * (unsigned __int128)v3;
  *(_OWORD *)(result + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v10 * (unsigned __int128)v4
                           + v8 * (unsigned __int128)v6
                           + v9 * (unsigned __int128)v5
                           + v11 * (unsigned __int128)v3;
  *(_OWORD *)(result + 64) = v9 * (unsigned __int128)v6 + v10 * (unsigned __int128)v8 + v11 * (unsigned __int128)v4;
  *(_OWORD *)(result + 8std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v11 * (unsigned __int128)v8 + v9 * (unsigned __int128)v10;
  *(_OWORD *)(result + 96) = v11 * (unsigned __int128)v9;
  return result;
}

uint64_t *p224_felem_to_generic(uint64_t *result, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = a2[2];
  unint64_t v4 = a2[3];
  unint64_t v5 = *a2 - HIBYTE(v4);
  uint64_t v6 = v2 + (HIBYTE(v4) << 40);
  uint64_t v7 = (((v3 & v4 & (v2 | 0xFFFFFFFFFFLL)) + 1) | ((*a2 + (v2 & 0xFFFFFFFFFFLL) - 1) >> 63)) & 0xFFFFFFFFFFFFFFLL;
  BOOL v8 = v7 != 0;
  uint64_t v9 = v7 - 1;
  uint64_t v10 = v8;
  uint64_t v11 = v10 << 63 >> 63;
  uint64_t v12 = v4 & v11;
  uint64_t v13 = v3 & v11;
  uint64_t v14 = 0xFFFFFFFFFFLL;
  if (v8) {
    uint64_t v14 = -1;
  }
  uint64_t v15 = v5 + (v9 >> 63);
  uint64_t v16 = v14 & v6;
  unint64_t v17 = v15 + ((unint64_t)v15 >> 63 << 56);
  uint64_t v18 = v16 + (v15 >> 63);
  uint64_t v19 = v13 + (v18 >> 56);
  *int8x16_t result = v17 | (v18 << 56);
  result[1] = ((unint64_t)v18 >> 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v19 << 48);
  result[2] = ((unint64_t)v19 >> 16) & 0xFFFFFFFFFFLL | ((unint64_t)(v12
                                                                                 + (v19 >> 56)) << 40);
  result[3] = ((v12 & 0xFFFFFFFFFFFFFFuLL) + (v19 >> 56)) >> 24;
  return result;
}

double p224_point_add(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, int8x16_t *a4, int64x2_t *a5, uint64_t a6, int a7, unint64_t *a8, unint64_t *a9, unint64_t *a10)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  v14.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v14.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  int8x16_t v94 = v14;
  int8x16_t v95 = v14;
  int8x16_t v92 = v14;
  int8x16_t v93 = v14;
  v91[0] = v14;
  v91[1] = v14;
  int8x16_t v89 = v14;
  int8x16_t v90 = v14;
  int8x16_t v87 = v14;
  int8x16_t v88 = v14;
  int8x16_t v85 = v14;
  int8x16_t v86 = v14;
  int8x16_t v83 = v14;
  int8x16_t v84 = v14;
  int8x16_t v81 = v14;
  int8x16_t v82 = v14;
  int8x16_t v79 = v14;
  int8x16_t v80 = v14;
  int8x16_t v77 = v14;
  int8x16_t v78 = v14;
  int8x16_t v75 = v14;
  int8x16_t v76 = v14;
  int8x16_t v73 = v14;
  unsigned long long v74 = (unsigned __int128)v14;
  int8x16_t v71 = v14;
  int8x16_t v72 = v14;
  int8x16_t v69 = v14;
  int8x16_t v70 = v14;
  unsigned long long v67 = (unsigned __int128)v14;
  unsigned long long v68 = (unsigned __int128)v14;
  if (a7)
  {
    uint64_t v16 = a5->i64[0];
    uint64_t v15 = a5->i64[1];
    v89.i64[0] = a5->i64[0];
    v89.i64[1] = v15;
    uint64_t v18 = a5[1].i64[0];
    uint64_t v17 = a5[1].i64[1];
    v90.i64[0] = v18;
    v90.i64[1] = v17;
    int8x16_t v62 = *a4;
    v92.i64[0] = a4->i64[0];
    v92.i64[1] = v62.i64[1];
    int8x16_t v64 = a4[1];
    int8x16_t v93 = v64;
  }
  else
  {
    p224_felem_square(&v74, a10);
    p224_felem_reduce(&v92, (unint64_t *)&v74);
    p224_felem_mul((uint64_t)&v74, (unint64_t *)&v92, a10);
    p224_felem_reduce(&v89, (unint64_t *)&v74);
    p224_felem_mul((uint64_t)&v67, (unint64_t *)&v89, (unint64_t *)a5);
    p224_felem_reduce(&v89, (unint64_t *)&v67);
    p224_felem_mul((uint64_t)&v67, (unint64_t *)&v92, (unint64_t *)a4);
    p224_felem_reduce(&v92, (unint64_t *)&v67);
    uint64_t v15 = v89.i64[1];
    uint64_t v16 = v89.i64[0];
    uint64_t v17 = v90.i64[1];
    uint64_t v18 = v90.i64[0];
    int8x16_t v62 = v92;
    int8x16_t v64 = v93;
  }
  p224_felem_square(&v74, (unint64_t *)a6);
  p224_felem_reduce(&v94, (unint64_t *)&v74);
  p224_felem_mul((uint64_t)&v74, (unint64_t *)&v94, (unint64_t *)a6);
  p224_felem_reduce(v91, (unint64_t *)&v74);
  p224_felem_mul((uint64_t)&v74, (unint64_t *)v91, a9);
  unsigned long long v74 = v74 - (unint64_t)v16 + __PAIR128__(1, 256);
  unint64_t v19 = (unint64_t)(*(_OWORD *)&v75 - v15) >> 64;
  if ((unint64_t)(v75.i64[0] - v15) >= 0x1000000000100) {
    ++v19;
  }
  v75.i64[0] = v75.i64[0] - v15 - 0x1000000000100;
  v75.i64[1] = v19;
  unint64_t v20 = (unint64_t)(*(_OWORD *)&v76 - v18) >> 64;
  if ((unint64_t)(v76.i64[0] - v18) >= 0x100) {
    ++v20;
  }
  v76.i64[0] = v76.i64[0] - v18 - 256;
  v76.i64[1] = v20;
  unint64_t v21 = (unint64_t)(*(_OWORD *)&v77 - v17) >> 64;
  if ((unint64_t)(v77.i64[0] - v17) >= 0x100) {
    ++v21;
  }
  v77.i64[0] = v77.i64[0] - v17 - 256;
  v77.i64[1] = v21;
  p224_felem_reduce(v91, (unint64_t *)&v74);
  p224_felem_mul((uint64_t)&v74, (unint64_t *)&v94, a8);
  unsigned long long v74 = v74 - v62.u64[0] + __PAIR128__(1, 256);
  unint64_t v22 = (*(_OWORD *)&v75 - v62.u64[1]) >> 64;
  if (v75.i64[0] - v62.i64[1] >= 0x1000000000100uLL) {
    ++v22;
  }
  v75.i64[0] = v75.i64[0] - v62.i64[1] - 0x1000000000100;
  v75.i64[1] = v22;
  unint64_t v23 = (*(_OWORD *)&v76 - v64.u64[0]) >> 64;
  if (v76.i64[0] - v64.i64[0] >= 0x100uLL) {
    ++v23;
  }
  v76.i64[0] = v76.i64[0] - v64.i64[0] - 256;
  v76.i64[1] = v23;
  unint64_t v24 = (*(_OWORD *)&v77 - v64.u64[1]) >> 64;
  if (v77.i64[0] - v64.i64[1] >= 0x100uLL) {
    ++v24;
  }
  v77.i64[0] = v77.i64[0] - v64.i64[1] - 256;
  v77.i64[1] = v24;
  p224_felem_reduce(&v94, (unint64_t *)&v74);
  unint64_t is_zero = p224_felem_is_zero(&v94);
  unint64_t v26 = p224_felem_is_zero(v91);
  unint64_t v27 = p224_felem_is_zero((void *)a6);
  unint64_t v28 = p224_felem_is_zero(a10);
  if ((v26 & is_zero & ~v27 & (v28 ^ 1)) != 0)
  {
    return p224_point_double(a1, a2, a3, (unint64_t *)a4, a5, (int64x2_t *)a6);
  }
  else
  {
    unint64_t v65 = v27;
    unint64_t v66 = v28;
    if (a7)
    {
      int8x16_t v30 = *(int8x16_t *)(a6 + 16);
      int8x16_t v87 = *(int8x16_t *)a6;
      int8x16_t v88 = v30;
    }
    else
    {
      p224_felem_mul((uint64_t)&v74, (unint64_t *)a6, a10);
      p224_felem_reduce(&v87, (unint64_t *)&v74);
    }
    p224_felem_mul((uint64_t)&v74, (unint64_t *)&v94, (unint64_t *)&v87);
    p224_felem_reduce(&v81, (unint64_t *)&v74);
    int8x16_t v87 = v94;
    int8x16_t v88 = v95;
    p224_felem_square(&v74, (unint64_t *)&v94);
    p224_felem_reduce(&v94, (unint64_t *)&v74);
    p224_felem_mul((uint64_t)&v74, (unint64_t *)&v94, (unint64_t *)&v87);
    p224_felem_reduce(&v87, (unint64_t *)&v74);
    p224_felem_mul((uint64_t)&v74, (unint64_t *)&v92, (unint64_t *)&v94);
    p224_felem_reduce(&v92, (unint64_t *)&v74);
    p224_felem_mul((uint64_t)&v74, (unint64_t *)&v89, (unint64_t *)&v87);
    p224_felem_square(&v67, (unint64_t *)v91);
    int8x16_t v31 = v92;
    uint64_t v32 = v93.i64[1];
    uint64_t v63 = v93.i64[0];
    BOOL v33 = __CFADD__(v87.i64[0], 2 * v92.i64[0]);
    unsigned long long v67 = v67 - __PAIR128__(v33, v87.i64[0] + 2 * v92.i64[0]) + __PAIR128__(2, 512);
    BOOL v34 = __CFADD__(v87.i64[1], 2 * v92.i64[1]);
    unsigned long long v68 = v68 - __PAIR128__(v34, v87.i64[1] + 2 * v92.i64[1]) + __PAIR128__(1, 0xFFFDFFFFFFFFFE00);
    BOOL v35 = __CFADD__(v88.i64[0], 2 * v93.i64[0]);
    unsigned long long v36 = *(_OWORD *)&v69 - __PAIR128__(v35, v88.i64[0] + 2 * v93.i64[0]);
    v69.i64[0] = v69.i64[0] - (v88.i64[0] + 2 * v93.i64[0]) - 512;
    v69.i64[1] = ((unint64_t)v36 >= 0x200) + *((void *)&v36 + 1) + 1;
    BOOL v37 = __CFADD__(v88.i64[1], 2 * v93.i64[1]);
    unint64_t v39 = v70.i64[0] - (v88.i64[1] + 2 * v93.i64[1]);
    uint64_t v38 = (*(_OWORD *)&v70 - __PAIR128__(v37, v88.i64[1] + 2 * v93.i64[1])) >> 64;
    v70.i64[0] = v39 - 512;
    v70.i64[1] = (v39 >= 0x200) + v38 + 1;
    p224_felem_reduce(&v85, (unint64_t *)&v67);
    v92.i64[0] = v31.i64[0] - v85.i64[0] + 0x400000000000004;
    v92.i64[1] = v31.i64[1] - v85.i64[1] + 0x3FFFBFFFFFFFFFCLL;
    v93.i64[0] = v63 - v86.i64[0] + 0x3FFFFFFFFFFFFFCLL;
    v93.i64[1] = v32 - v86.i64[1] + 0x3FFFFFFFFFFFFFCLL;
    p224_felem_mul((uint64_t)&v67, (unint64_t *)v91, (unint64_t *)&v92);
    uint64_t v40 = ((v67 - v74) >> 64) + 0x100000000000000;
    *(void *)&unsigned long long v67 = v67 - v74;
    *((void *)&v67 + 1) = v40;
    uint64_t v41 = ((v68 - *(_OWORD *)&v75) >> 64) + 0xFFFFFFFFFFFFFFLL;
    *(void *)&unsigned long long v68 = v68 - v75.i64[0];
    *((void *)&v68 + 1) = v41;
    uint64_t v42 = ((*(_OWORD *)&v69 - *(_OWORD *)&v76) >> 64) + 0xFFFFFFFFFFFFFFLL;
    v69.i64[0] -= v76.i64[0];
    v69.i64[1] = v42;
    uint64_t v43 = ((*(_OWORD *)&v70 - *(_OWORD *)&v77) >> 64) + 0x100000000000000;
    v70.i64[0] -= v77.i64[0];
    v70.i64[1] = v43;
    uint64_t v44 = ((*(_OWORD *)&v71 - *(_OWORD *)&v78) >> 64) + 0xFFFEFFFFFFFFFFLL;
    v71.i64[0] -= v78.i64[0];
    v71.i64[1] = v44;
    uint64_t v45 = ((*(_OWORD *)&v72 - *(_OWORD *)&v79) >> 64) + 0xFFFFFFFFFFFFFFLL;
    v72.i64[0] -= v79.i64[0];
    v72.i64[1] = v45;
    uint64_t v46 = ((*(_OWORD *)&v73 - *(_OWORD *)&v80) >> 64) + 0xFFFFFFFFFFFFFFLL;
    v73.i64[0] -= v80.i64[0];
    v73.i64[1] = v46;
    p224_felem_reduce(&v83, (unint64_t *)&v67);
    uint64_t v47 = 0;
    int8x16_t v48 = (int8x16_t)vdupq_n_s64(-(uint64_t)v65);
    do
    {
      *(int8x16_t *)((char *)&v85 + v47 * bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = vbslq_s8(v48, *(int8x16_t *)&a8[v47], *(int8x16_t *)((char *)&v85 + v47 * 8));
      v47 += 2;
    }
    while (v47 != 4);
    uint64_t v49 = 0;
    int8x16_t v50 = (int8x16_t)vdupq_n_s64(-(uint64_t)v66);
    do
    {
      *(int8x16_t *)((char *)&v85 + v49 * 16) = vbslq_s8(v50, a4[v49], *(int8x16_t *)((char *)&v85 + v49 * 16));
      ++v49;
    }
    while (v49 != 2);
    for (uint64_t i = 0; i != 4; i += 2)
      *(int8x16_t *)((char *)&v83 + i * bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = vbslq_s8(v48, *(int8x16_t *)&a9[i], *(int8x16_t *)((char *)&v83 + i * 8));
    for (uint64_t j = 0; j != 2; ++j)
      *(int8x16_t *)((char *)&v83 + j * 16) = vbslq_s8(v50, (int8x16_t)a5[j], *(int8x16_t *)((char *)&v83 + j * 16));
    for (uint64_t k = 0; k != 4; k += 2)
      *(int8x16_t *)((char *)&v81 + k * bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = vbslq_s8(v48, *(int8x16_t *)&a10[k], *(int8x16_t *)((char *)&v81 + k * 8));
    for (uint64_t m = 0; m != 32; m += 16)
      *(int8x16_t *)((char *)&v81 + m) = vbslq_s8(v50, *(int8x16_t *)(a6 + m), *(int8x16_t *)((char *)&v81 + m));
    int8x16_t v55 = v86;
    *a1 = v85;
    a1[1] = v55;
    int8x16_t v56 = v84;
    *a2 = v83;
    a2[1] = v56;
    double result = *(double *)v81.i64;
    int8x16_t v57 = v82;
    *a3 = v81;
    a3[1] = v57;
  }
  return result;
}

unint64_t p224_felem_is_zero(void *a1)
{
  uint64_t v1 = a1[1];
  return (((v1 ^ 0xFFFF0000000000 | *a1 ^ 1 | a1[3] ^ 0xFFFFFFFFFFFFFFLL | a1[2] ^ 0xFFFFFFFFFFFFFFLL) - 1) | ((v1 | *a1 | a1[2] | a1[3]) - 1) | ((v1 ^ 0xFFFE0000000000 | *a1 ^ 2 | a1[3] ^ 0x1FFFFFFFFFFFFFFLL | a1[2] ^ 0xFFFFFFFFFFFFFFuLL) - 1)) >> 63;
}

double p224_point_double(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, int64x2_t *a5, int64x2_t *a6)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  v9.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v9.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  unsigned long long v68 = (unsigned __int128)v9;
  int8x16_t v69 = v9;
  unsigned long long v66 = (unsigned __int128)v9;
  unsigned long long v67 = (unsigned __int128)v9;
  int8x16_t v64 = v9;
  unsigned long long v65 = (unsigned __int128)v9;
  unsigned long long v63 = (unsigned __int128)v9;
  int8x16_t v61 = v9;
  int8x16_t v62 = v9;
  int8x16_t v59 = v9;
  int8x16_t v60 = v9;
  int8x16_t v57 = v9;
  int8x16_t v58 = v9;
  int8x16_t v55 = v9;
  int8x16_t v56 = v9;
  int8x16_t v53 = v9;
  int8x16_t v54 = v9;
  int8x16_t v51 = v9;
  int8x16_t v52 = v9;
  v49[1] = v9;
  int8x16_t v50 = v9;
  v49[0] = v9;
  unint64_t v10 = *a4;
  unint64_t v11 = a4[1];
  unint64_t v13 = a4[2];
  unint64_t v12 = a4[3];
  p224_felem_square(&v63, (unint64_t *)a6);
  p224_felem_reduce(&v54, (unint64_t *)&v63);
  p224_felem_square(&v63, (unint64_t *)a5);
  p224_felem_reduce(&v52, (unint64_t *)&v63);
  p224_felem_mul((uint64_t)&v63, a4, (unint64_t *)&v52);
  p224_felem_reduce(&v50, (unint64_t *)&v63);
  int8x16_t v14 = v54;
  v47.i64[0] = v10 + 0x400000000000004 - v54.i64[0];
  v47.i64[1] = v11 + 0x3FFFBFFFFFFFFFCLL - v54.i64[1];
  int8x16_t v15 = v55;
  v48.i64[0] = v13 - v55.i64[0] + 0x3FFFFFFFFFFFFFCLL;
  v48.i64[1] = v12 - v55.i64[1] + 0x3FFFFFFFFFFFFFCLL;
  v46[0] = 3 * (v54.i64[0] + v10);
  v46[1] = 3 * (v54.i64[1] + v11);
  v46[2] = 3 * (v55.i64[0] + v13);
  v46[3] = 3 * (v55.i64[1] + v12);
  p224_felem_mul((uint64_t)&v63, (unint64_t *)&v47, v46);
  p224_felem_reduce(v49, (unint64_t *)&v63);
  p224_felem_square(&v63, (unint64_t *)v49);
  int8x16_t v16 = v50;
  int8x16_t v17 = v51;
  unsigned long long v63 = v63 - (unint64_t)(8 * v50.i64[0]) + __PAIR128__(1, 256);
  unint64_t v19 = (unint64_t)(*(_OWORD *)&v64 - 8 * v50.i64[1]) >> 64;
  uint64_t v18 = v64.i64[0] - 8 * v50.i64[1];
  BOOL v20 = __CFADD__(v18, 0xFFFEFFFFFFFFFF00);
  uint64_t v21 = v18 - 0x1000000000100;
  if (v20) {
    ++v19;
  }
  v64.i64[0] = v21;
  v64.i64[1] = v19;
  unint64_t v23 = (v65 - (unint64_t)(8 * v51.i64[0])) >> 64;
  unint64_t v22 = v65 - 8 * v51.i64[0];
  BOOL v20 = v22 >= 0x100;
  unint64_t v24 = v22 - 256;
  if (v20) {
    ++v23;
  }
  *(void *)&unsigned long long v65 = v24;
  *((void *)&v65 + 1) = v23;
  unint64_t v26 = (v66 - (unint64_t)(8 * v51.i64[1])) >> 64;
  unint64_t v25 = v66 - 8 * v51.i64[1];
  BOOL v20 = v25 >= 0x100;
  unint64_t v27 = v25 - 256;
  if (v20) {
    ++v26;
  }
  *(void *)&unsigned long long v66 = v27;
  *((void *)&v66 + 1) = v26;
  p224_felem_reduce(a1, (unint64_t *)&v63);
  int64x2_t v28 = vaddq_s64(*a6, *a5);
  int64x2_t v29 = vaddq_s64(a6[1], a5[1]);
  uint64_t v30 = v52.i64[0] + v14.i64[0];
  uint64_t v31 = v52.i64[1] + v14.i64[1];
  uint64_t v32 = v53.i64[0] + v15.i64[0];
  uint64_t v33 = v53.i64[1] + v15.i64[1];
  int64x2_t v47 = v28;
  int64x2_t v48 = v29;
  p224_felem_square(&v63, (unint64_t *)&v47);
  unsigned long long v63 = v63 - (unint64_t)v30 + __PAIR128__(1, 256);
  unint64_t v34 = (unint64_t)(*(_OWORD *)&v64 - v31) >> 64;
  if ((unint64_t)(v64.i64[0] - v31) >= 0x1000000000100) {
    ++v34;
  }
  v64.i64[0] = v64.i64[0] - v31 - 0x1000000000100;
  v64.i64[1] = v34;
  uint64_t v35 = (v65 - (unint64_t)v32) >> 64;
  if ((unint64_t)(v65 - v32) >= 0x100) {
    ++v35;
  }
  *(void *)&unsigned long long v65 = v65 - v32 - 256;
  *((void *)&v65 + 1) = v35;
  uint64_t v36 = (v66 - (unint64_t)v33) >> 64;
  if ((unint64_t)(v66 - v33) >= 0x100) {
    ++v36;
  }
  *(void *)&unsigned long long v66 = v66 - v33 - 256;
  *((void *)&v66 + 1) = v36;
  p224_felem_reduce(a3, (unint64_t *)&v63);
  uint64_t v37 = a1->i64[1];
  v50.i64[0] = 4 * v16.i64[0] + 0x400000000000004 - a1->i64[0];
  v50.i64[1] = 4 * v16.i64[1] + 0x3FFFBFFFFFFFFFCLL - v37;
  uint64_t v38 = 4 * v17.i64[1] - a1[1].i64[1] + 0x3FFFFFFFFFFFFFCLL;
  v51.i64[0] = 4 * v17.i64[0] - a1[1].i64[0] + 0x3FFFFFFFFFFFFFCLL;
  v51.i64[1] = v38;
  p224_felem_mul((uint64_t)&v63, (unint64_t *)v49, (unint64_t *)&v50);
  p224_felem_square(&v56, (unint64_t *)&v52);
  uint64_t v39 = ((v63 - *(_OWORD *)&v56 * 8) >> 64) + 0x100000000000000;
  *(void *)&unsigned long long v63 = v63 - 8 * v56.i64[0];
  *((void *)&v63 + 1) = v39;
  long long v40 = *(_OWORD *)&v64 - *(_OWORD *)&v57 * 8;
  v64.i64[0] -= 8 * v57.i64[0];
  v64.i64[1] = *((void *)&v40 + 1) + 0xFFFFFFFFFFFFFFLL;
  unsigned long long v65 = v65 - *(_OWORD *)&v58 * 8 + __PAIR128__(0xFFFFFFFFFFFFFFLL, 0);
  unsigned long long v66 = v66 - *(_OWORD *)&v59 * 8 + __PAIR128__(0x100000000000000, 0);
  unsigned long long v67 = v67 - *(_OWORD *)&v60 * 8 + __PAIR128__(0xFFFEFFFFFFFFFFLL, 0);
  unsigned long long v68 = v68 - *(_OWORD *)&v61 * 8 + __PAIR128__(0xFFFFFFFFFFFFFFLL, 0);
  uint64_t v41 = ((unsigned __int128)(*(_OWORD *)&v69 - *(_OWORD *)&v62 * 8) >> 64) + 0xFFFFFFFFFFFFFFLL;
  v69.i64[0] -= 8 * v62.i64[0];
  v69.i64[1] = v41;
  *(void *)&double result = p224_felem_reduce(a2, (unint64_t *)&v63).u64[0];
  return result;
}

void ec_GFp_nistp224_make_precomp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = 0u;
  *(_OWORD *)(a1 + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = *(void *)a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v4 = (int8x16_t *)(a1 + 96);
  *(void *)(a1 + 104) = (*(long long *)a2 >> 56) & 0xFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 112) = (*(long long *)(a2 + 8) >> 48) & 0xFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 12std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = (*(long long *)(a2 + 16) >> 40) & 0xFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 12bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = *(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFLL;
  unint64_t v5 = (int64x2_t *)(a1 + 128);
  *(void *)(a1 + 136) = (*(long long *)(a2 + 72) >> 56) & 0xFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 144) = (*(long long *)(a2 + 80) >> 48) & 0xFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 152) = (*(long long *)(a2 + 88) >> 40) & 0xFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 16std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 144) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v6 = a1 + 160;
  *(void *)(a1 + 16bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = (*(long long *)(a2 + 144) >> 56) & 0xFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 176) = (*(long long *)(a2 + 152) >> 48) & 0xFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 184) = (*(long long *)(a2 + 160) >> 40) & 0xFFFFFFFFFFFFFFLL;
  unint64_t v7 = 2;
  do
  {
    BOOL v8 = (int8x16_t *)(a1 + v3 + 192);
    int8x16_t v9 = (int8x16_t *)(a1 + v3 + 224);
    unint64_t v10 = (int8x16_t *)(a1 + v3 + 256);
    if (v7) {
      p224_point_add(v8, v9, v10, v4, v5, v6, 0, (unint64_t *)(a1 + v3 + 96), (unint64_t *)(a1 + v3 + 128), (unint64_t *)(a1 + v3 + 160));
    }
    else {
      p224_point_double(v8, v9, v10, (unint64_t *)(a1 + 96 * (v7 >> 1)), (int64x2_t *)(a1 + 96 * (v7 >> 1) + 32), (int64x2_t *)(a1 + 96 * (v7 >> 1) + 64));
    }
    ++v7;
    v3 += 96;
  }
  while (v3 != 1440);
}

uint64_t p224_select_point(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      for (uint64_t j = 0; j != 96; j += 8)
        *(void *)((char *)a4 + j) |= *(void *)(a3 + j) & ((((i ^ result) - 1) & ~result) >> 63);
      a3 += 96;
    }
  }
  return result;
}

double p224_felem_neg(int8x16_t *a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  unint64_t v3 = a2[1];
  BOOL v4 = *a2 <= 0x100uLL;
  v7[0] = 256 - *a2;
  v7[1] = v4;
  unsigned long long v8 = 0xFFFEFFFFFFFFFF00 - __PAIR128__(v4, v3);
  unint64_t v5 = a2[3];
  unsigned long long v9 = 0xFFFFFFFFFFFFFF00 - __PAIR128__(v2, a2[2]);
  unsigned long long v10 = 0xFFFFFFFFFFFFFF00 - __PAIR128__(v9, v5);
  *(void *)&double result = p224_felem_reduce(a1, v7).u64[0];
  return result;
}

uint64_t bn_mod_u16_consttime(uint64_t a1, unsigned int a2)
{
  if (a2 < 2) {
    return 0;
  }
  unsigned int v4 = BN_num_bits_word(a2 - 1);
  if (v4 >= 0x11) {
    bn_mod_u16_consttime_cold_1();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if ((int)v5 < 1) {
    return 0;
  }
  char v6 = v4;
  LODWORD(result) = 0;
  unint64_t v8 = v5 + 1;
  unsigned int v9 = v5 - 1;
  unint64_t v10 = ((unint64_t)a2 + (1 << (v6 + 32)) - 1) / a2;
  do
  {
    unsigned int v11 = *(_DWORD *)(*(void *)a1 + 8 * v9 + 4);
    unsigned __int16 v12 = mod_u16(__PAIR64__(result, v11) >> 16, a2, v6, v10);
    HIDWORD(v13) = mod_u16((unsigned __int16)v11 | (v12 << 16), a2, v6, v10);
    LODWORD(v13) = *(_DWORD *)(*(void *)a1 + 8 * v9);
    unsigned __int16 v14 = mod_u16(v13 >> 16, a2, v6, v10);
    uint64_t result = mod_u16((unsigned __int16)v13 | (v14 << 16), a2, v6, v10);
    --v8;
    --v9;
  }
  while (v8 > 1);
  return result;
}

uint64_t mod_u16(unsigned int a1, unsigned int a2, char a3, unsigned int a4)
{
  if (a1
     - ((((a4 * (unint64_t)a1) >> 32)
                     + ((a1 - ((a4 * (unint64_t)a1) >> 32)) >> 1)) >> (a3 - 1))
     * a2 >= a2)
    mod_u16_cold_1();
  return (unsigned __int16)(a1
                          - ((((a4 * (unint64_t)a1) >> 32)
                                          + ((a1 - ((a4 * (unint64_t)a1) >> 32)) >> 1)) >> (a3 - 1))
                          * a2);
}

BIO *__cdecl BIO_new_mem_buf(void *buf, int len)
{
  uint64_t v2 = *(void *)&len;
  size_t v4 = *(void *)&len;
  if ((*(void *)&len & 0x8000000000000000) != 0)
  {
    size_t v4 = strlen((const char *)buf);
    if (buf) {
      goto LABEL_7;
    }
  }
  else if (buf)
  {
    goto LABEL_7;
  }
  if (v2)
  {
    ERR_put_error(17, 0, 111, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/bio_mem.c", 75);
    return 0;
  }
LABEL_7:
  uint64_t result = BIO_new(&mem_method);
  if (result)
  {
    char v6 = *(size_t **)&result->num;
    *char v6 = v4;
    v6[1] = (size_t)buf;
    void v6[2] = v4;
    result->init |= 0x200u;
    result->flagunsigned int s = 0;
  }
  return result;
}

uint64_t mem_write(uint64_t a1, const void *a2, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 25) & 2) != 0)
  {
    ERR_put_error(17, 0, 116, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/bio_mem.c", 168);
    return 0xFFFFFFFFLL;
  }
  else if (BUF_MEM_append(*(void **)(a1 + 40), a2, a3))
  {
    return a3;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

size_t mem_read(uint64_t a1, void *a2, int a3)
{
  LODWORD(v3) = a3;
  BIO_clear_retry_flags(a1);
  if ((int)v3 < 1) {
    return 0;
  }
  char v6 = *(size_t **)(a1 + 40);
  size_t v7 = *v6;
  if (*v6 >= v3) {
    size_t v3 = v3;
  }
  else {
    size_t v3 = v7;
  }
  if ((int)v3 >= 1)
  {
    memcpy(a2, (const void *)v6[1], v3);
    size_t v8 = *v6;
    size_t v9 = *v6 - v3;
    *char v6 = v9;
    if ((*(unsigned char *)(a1 + 25) & 2) != 0)
    {
      v6[1] += v3;
    }
    else if (v8 != v3)
    {
      memmove((void *)v6[1], (const void *)(v6[1] + v3), v9);
    }
    return v3;
  }
  if (v7) {
    return 0;
  }
  size_t v3 = *(unsigned int *)(a1 + 32);
  if (v3) {
    BIO_set_retry_read(a1);
  }
  return v3;
}

size_t mem_gets(uint64_t a1, void *a2, int a3)
{
  BIO_clear_retry_flags(a1);
  unint64_t v6 = (a3 - 1);
  if (a3 < 1) {
    return 0;
  }
  size_t v7 = *(unint64_t **)(a1 + 40);
  if (*v7 >= v6) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = *v7;
  }
  if (v8)
  {
    size_t v9 = (void *)v7[1];
    unint64_t v10 = memchr(v9, 10, v8);
    if (v10) {
      LODWORD(vbssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v10 - v9 + 1;
    }
  }
  size_t result = mem_read(a1, a2, v8);
  if ((result & 0x80000000) == 0) {
    *((unsigned char *)a2 + result) = 0;
  }
  return result;
}

uint64_t mem_ctrl(uint64_t a1, int a2, int a3, uint64_t **a4)
{
  uint64_t result = 0;
  size_t v8 = *(uint64_t **)(a1 + 40);
  if (a2 > 113)
  {
    switch(a2)
    {
      case 114:
        mem_free(a1);
        *(_DWORD *)(a1 + 2std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = a3;
        *(void *)(a1 + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = a4;
        break;
      case 115:
        if (a4) {
          *a4 = v8;
        }
        break;
      case 130:
        *(_DWORD *)(a1 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = a3;
        break;
      default:
        return result;
    }
    return 1;
  }
  else
  {
    switch(a2)
    {
      case 1:
        size_t v9 = (char *)v8[1];
        if (v9)
        {
          size_t v10 = v8[2];
          if ((*(unsigned char *)(a1 + 25) & 2) != 0)
          {
            unsigned int v11 = &v9[*v8 - v10];
            *size_t v8 = v10;
            v8[1] = (uint64_t)v11;
          }
          else
          {
            if (v10) {
              bzero(v9, v10);
            }
            *size_t v8 = 0;
          }
        }
        return 1;
      case 2:
        uint64_t result = *v8 == 0;
        break;
      case 3:
        uint64_t result = *v8;
        if (a4) {
          *a4 = (uint64_t *)v8[1];
        }
        break;
      case 8:
        uint64_t result = *(int *)(a1 + 20);
        break;
      case 9:
        *(_DWORD *)(a1 + 2std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = a3;
        return 1;
      case 10:
        uint64_t result = *v8;
        break;
      case 11:
        return 1;
      default:
        return result;
    }
  }
  return result;
}

BUF_MEM *mem_new(uint64_t a1)
{
  uint64_t result = BUF_MEM_new();
  if (result)
  {
    *(void *)(a1 + 16) = 0x100000001;
    *(_DWORD *)(a1 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = -1;
    *(void *)(a1 + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = result;
    return (BUF_MEM *)1;
  }
  return result;
}

uint64_t mem_free(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_DWORD *)(a1 + 16))
    {
      uint64_t v2 = *(BUF_MEM **)(a1 + 40);
      if (v2)
      {
        if ((*(unsigned char *)(a1 + 25) & 2) != 0) {
          v2->data = 0;
        }
        BUF_MEM_free(v2);
        *(void *)(a1 + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0;
      }
    }
  }
  return 1;
}

const EVP_CIPHER *EVP_enc_null(void)
{
  return (const EVP_CIPHER *)&n_cipher;
}

uint64_t null_init_key()
{
  return 1;
}

uint64_t null_cipher(int a1, void *__dst, void *__src, size_t __n)
{
  if (__src != __dst && __n) {
    memcpy(__dst, __src, __n);
  }
  return 1;
}

unsigned __int8 *EC_POINT_point2buf(const EC_GROUP *a1, const EC_POINT *a2, point_conversion_form_t a3, unsigned __int8 **a4, uint64_t a5, BN_CTX *a6)
{
  *a4 = 0;
  uint64_t result = (unsigned __int8 *)EC_POINT_point2oct(a1, a2, a3, 0, 0, a6);
  if (result)
  {
    size_t v11 = (size_t)result;
    uint64_t result = (unsigned __int8 *)OPENSSL_malloc((unint64_t)result);
    if (result)
    {
      unint64_t v13 = result;
      uint64_t result = (unsigned __int8 *)EC_POINT_point2oct(a1, a2, a3, result, v11, v12);
      if (result)
      {
        *a4 = v13;
      }
      else
      {
        OPENSSL_free(v13);
        return 0;
      }
    }
  }
  return result;
}

int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *a1, EC_POINT *a2, const BIGNUM *x, int y_bit, BN_CTX *a5)
{
  if (!EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, 0))
  {
    if (BN_is_negative((uint64_t)x) || (BN_cmp(x, (const BIGNUM *)((char *)a1 + 320)) & 0x80000000) == 0)
    {
      int v10 = 107;
      int v11 = 265;
      goto LABEL_6;
    }
    ERR_clear_error();
    if (a5)
    {
      unsigned __int16 v14 = 0;
    }
    else
    {
      a5 = BN_CTX_new();
      unsigned __int16 v14 = a5;
      if (!a5) {
        return 0;
      }
    }
    unint64_t v25 = v14;
    int v24 = y_bit != 0;
    BN_CTX_start(a5);
    int8x16_t v15 = BN_CTX_get(a5);
    int8x16_t v16 = BN_CTX_get(a5);
    int8x16_t v17 = BN_CTX_get(a5);
    uint64_t v18 = BN_CTX_get(a5);
    unint64_t v19 = BN_CTX_get(a5);
    if (!v19) {
      goto LABEL_28;
    }
    BOOL v20 = v19;
    if (!EC_GROUP_get_curve_GFp(a1, 0, v17, v18, a5)
      || !BN_mod_sqr(v16, x, (const BIGNUM *)((char *)a1 + 320), a5)
      || !BN_mod_mul(v15, v16, x, (const BIGNUM *)((char *)a1 + 320), a5))
    {
      goto LABEL_28;
    }
    if (*((_DWORD *)a1 + 132))
    {
      if (!bn_mod_lshift1_consttime((uint64_t)v16, (uint64_t)x, (uint64_t)a1 + 320, a5)
        || !bn_mod_add_consttime((uint64_t)v16, (uint64_t)v16, (uint64_t)x, (uint64_t)a1 + 320, a5)
        || !bn_mod_sub_consttime((uint64_t)v15, (uint64_t)v15, (uint64_t)v16, (uint64_t)a1 + 320, a5))
      {
        goto LABEL_28;
      }
    }
    else if (!BN_mod_mul(v16, v17, x, (const BIGNUM *)((char *)a1 + 320), a5) {
           || !bn_mod_add_consttime((uint64_t)v15, (uint64_t)v15, (uint64_t)v16, (uint64_t)a1 + 320, a5))
    }
    {
      goto LABEL_28;
    }
    if (!bn_mod_add_consttime((uint64_t)v15, (uint64_t)v15, (uint64_t)v18, (uint64_t)a1 + 320, a5))
    {
LABEL_28:
      BOOL v12 = 0;
      uint64_t v21 = v25;
      goto LABEL_29;
    }
    if (BN_mod_sqrt(v20, v15, (const BIGNUM *)((char *)a1 + 320), a5))
    {
      uint64_t v21 = v25;
      if (BN_is_odd((uint64_t)v20) == v24)
      {
LABEL_26:
        if (BN_is_odd((uint64_t)v20) == v24)
        {
          BOOL v12 = EC_POINT_set_affine_coordinates_GFp(a1, a2, x, v20, a5) != 0;
LABEL_29:
          BN_CTX_end(a5);
          BN_CTX_free(v21);
          return v12;
        }
        int v22 = 68;
        int v23 = 345;
        goto LABEL_36;
      }
      if (!BN_is_zero((uint64_t)v20))
      {
        if (!BN_usub(v20, (const BIGNUM *)((char *)a1 + 320), v20)) {
          goto LABEL_37;
        }
        goto LABEL_26;
      }
      int v22 = 108;
      int v23 = 337;
    }
    else
    {
      uint64_t v21 = v25;
      if ((ERR_peek_last_error() & 0xFF000FFF) == 0x300006E)
      {
        ERR_clear_error();
        int v22 = 107;
        int v23 = 328;
      }
      else
      {
        int v22 = 3;
        int v23 = 330;
      }
    }
LABEL_36:
    ERR_put_error(15, 0, v22, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/oct.c", v23);
LABEL_37:
    BOOL v12 = 0;
    goto LABEL_29;
  }
  int v10 = 106;
  int v11 = 259;
LABEL_6:
  ERR_put_error(15, 0, v10, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/ec/oct.c", v11);
  return 0;
}

double ec_GFp_nistp256_add(uint64_t a1, _OWORD *a2, long long *a3, _OWORD *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v5 = a3[1];
  long long v22 = *a3;
  long long v23 = v5;
  long long v6 = *(long long *)((char *)a3 + 88);
  long long v20 = *(long long *)((char *)a3 + 72);
  long long v21 = v6;
  long long v7 = a3[10];
  long long v18 = a3[9];
  long long v19 = v7;
  long long v8 = a4[1];
  v17[0] = *a4;
  v17[1] = v8;
  long long v9 = *(_OWORD *)((char *)a4 + 88);
  v16[0] = *(_OWORD *)((char *)a4 + 72);
  v16[1] = v9;
  long long v10 = a4[10];
  v15[0] = a4[9];
  v15[1] = v10;
  fiat_p256_point_add((uint64_t *)&v22, (uint64_t *)&v20, (uint64_t *)&v18, (uint64_t)&v22, (uint64_t)&v20, (unint64_t *)&v18, 0, (unint64_t *)v17, (unint64_t *)v16, (unint64_t *)v15);
  long long v11 = v23;
  *a2 = v22;
  a2[1] = v11;
  long long v12 = v21;
  *(_OWORD *)((char *)a2 + 72) = v20;
  *(_OWORD *)((char *)a2 + 8bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v12;
  double result = *(double *)&v18;
  long long v14 = v19;
  a2[9] = v18;
  a2[10] = v14;
  return result;
}

double ec_GFp_nistp256_dbl(uint64_t a1, _OWORD *a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v4 = a3[1];
  long long v15 = *a3;
  long long v16 = v4;
  long long v5 = *(long long *)((char *)a3 + 88);
  long long v13 = *(long long *)((char *)a3 + 72);
  long long v14 = v5;
  long long v6 = a3[10];
  long long v11 = a3[9];
  long long v12 = v6;
  fiat_p256_point_double((uint64_t *)&v15, (uint64_t *)&v13, (uint64_t *)&v11, (unint64_t *)&v15, (unint64_t *)&v13, (unint64_t *)&v11);
  long long v7 = v16;
  *a2 = v15;
  a2[1] = v7;
  long long v8 = v14;
  *(_OWORD *)((char *)a2 + 72) = v13;
  *(_OWORD *)((char *)a2 + 8bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v8;
  double result = *(double *)&v11;
  long long v10 = v12;
  a2[9] = v11;
  a2[10] = v10;
  return result;
}

double ec_GFp_nistp256_point_mul(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  v86[0] = *MEMORY[0x1E4F143B8];
  bzero(v81, 0x660uLL);
  long long v6 = a3[1];
  v83[0] = *a3;
  v83[1] = v6;
  long long v7 = *(_OWORD *)((char *)a3 + 88);
  v84[0] = *(_OWORD *)((char *)a3 + 72);
  v84[1] = v7;
  long long v8 = a3[9];
  long long v9 = a3[10];
  unint64_t v10 = -1440;
  unint64_t v11 = 2;
  v85[0] = v8;
  v85[1] = v9;
  do
  {
    long long v12 = &v86[v10 / 8];
    long long v13 = &v86[v10 / 8 + 4];
    long long v14 = &v86[v10 / 8 + 8];
    if (v11) {
      fiat_p256_point_add(v12, v13, v14, (uint64_t)v83, (uint64_t)v84, (unint64_t *)v85, 0, (unint64_t *)&v85[v10 / 0x10 + 86], (unint64_t *)&v85[v10 / 0x10 + 88], (unint64_t *)&v85[v10 / 0x10 + 90]);
    }
    else {
      fiat_p256_point_double(v12, v13, v14, (unint64_t *)&v81[6 * (v11 >> 1)], (unint64_t *)&v81[6 * (v11 >> 1) + 2], (unint64_t *)&v82[96 * (v11 >> 1) + 16]);
    }
    ++v11;
    v10 += 96;
  }
  while (v10);
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  int v15 = 1;
  long long v75 = 0u;
  long long v76 = 0u;
  for (unint64_t i = 255; i < 0x100; --i)
  {
    if (!v15) {
      fiat_p256_point_double((uint64_t *)&v75, (uint64_t *)&v77, (uint64_t *)&v79, (unint64_t *)&v75, (unint64_t *)&v77, (unint64_t *)&v79);
    }
    if (-858993459 * i <= 0x33333333)
    {
      if (i <= 0xFB)
      {
        uint64_t v17 = 32 * ((*(void *)(a4 + 8 * ((i + 4) >> 6)) >> (i + 4)) & 1);
        unsigned int v18 = i + 3;
      }
      else
      {
        if (i != 252)
        {
          if (i > 0xFD)
          {
            uint64_t v21 = 0;
            if (i != 254)
            {
              uint64_t v23 = 0;
LABEL_17:
              if ((i - 1) <= 0xFF) {
                uint64_t v24 = (*(void *)(a4 + 8 * ((i - 1) >> 6)) >> (i - 1)) & 1;
              }
              else {
                uint64_t v24 = 0;
              }
              unint64_t v25 = v21 | (4 * v23) | (2 * ((*(void *)(a4 + 8 * (i >> 6)) >> i) & 1)) | v24;
              unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
              uint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
              ec_GFp_nistp_recode_scalar_bits(&v68, &v67, v25);
              uint64_t v26 = 0;
              uint64_t v27 = 0;
              uint64_t v28 = 0;
              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0;
              uint64_t v34 = 0;
              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0;
              uint64_t v38 = 0;
              uint64_t v39 = v82;
              do
              {
                if (v67 == v38) {
                  uint64_t v40 = -1;
                }
                else {
                  uint64_t v40 = 0;
                }
                if (v67 == v38) {
                  uint64_t v41 = 0;
                }
                else {
                  uint64_t v41 = -1;
                }
                uint64_t v37 = v40 & *(v39 - 6) | v41 & v37;
                uint64_t v34 = v34 & v41 | *(v39 - 5) & v40;
                uint64_t v33 = v33 & v41 | *(v39 - 4) & v40;
                uint64_t v32 = v32 & v41 | *(v39 - 3) & v40;
                uint64_t v36 = v36 & v41 | *(v39 - 2) & v40;
                uint64_t v31 = v31 & v41 | *(v39 - 1) & v40;
                uint64_t v30 = v30 & v41 | *v39 & v40;
                uint64_t v29 = v29 & v41 | v39[1] & v40;
                uint64_t v35 = v35 & v41 | v39[2] & v40;
                uint64_t v28 = v28 & v41 | v39[3] & v40;
                uint64_t v27 = v27 & v41 | v39[4] & v40;
                uint64_t v26 = v26 & v41 | v39[5] & v40;
                ++v38;
                v39 += 12;
              }
              while (v38 != 17);
              *(void *)&long long v70 = v33;
              *((void *)&v70 + 1) = v32;
              *(void *)&long long v74 = v27;
              *((void *)&v74 + 1) = v26;
              *(void *)&long long v69 = v37;
              *((void *)&v69 + 1) = v34;
              *(void *)&long long v73 = v35;
              *((void *)&v73 + 1) = v28;
              BOOL v42 = __CFADD__(v31, -(uint64_t)((unsigned __int128)-(__int128)__PAIR128__(v26, v36) >> 64));
              uint64_t v43 = v31 + -(uint64_t)((unsigned __int128)-(__int128)__PAIR128__(v26, v36) >> 64);
              char v44 = v42;
              BOOL v42 = v43 == 0;
              uint64_t v45 = -v43;
              uint64_t v47 = (v44 + !v42);
              uint64_t v46 = v30 + v47;
              BOOL v48 = __CFADD__(v30, v47);
              BOOL v42 = v46 == 0;
              uint64_t v49 = -v46;
              uint64_t v51 = (v48 + !v42);
              uint64_t v50 = v29 + v51;
              BOOL v52 = __CFADD__(v29, v51);
              BOOL v42 = v50 == 0;
              uint64_t v53 = -v50;
              if (v52 + !v42) {
                uint64_t v54 = -1;
              }
              else {
                uint64_t v54 = 0;
              }
              uint64_t v55 = v54 - v36;
              BOOL v42 = __CFADD__(__CFADD__(-v36, v54), v45);
              uint64_t v56 = __CFADD__(-v36, v54) + v45;
              v42 |= __CFADD__(v54, v56);
              v56 += v54;
              BOOL v58 = v42;
              BOOL v42 = __CFADD__(v42, v49);
              uint64_t v57 = v58 + v49;
              unint64_t v59 = v53 + v42 + (v54 & 0xFFFFFFFF00000001);
              if (v68) {
                uint64_t v60 = 0;
              }
              else {
                uint64_t v60 = -1;
              }
              if (v68) {
                uint64_t v61 = -1;
              }
              else {
                uint64_t v61 = 0;
              }
              *(void *)&long long v71 = v60 & v36 | v61 & v55;
              *((void *)&v71 + 1) = v61 & v56 | v60 & v31;
              *(void *)&long long v72 = v61 & v57 | v60 & v30;
              *((void *)&v72 + 1) = v59 & v61 | v60 & v29;
              if (v15)
              {
                long long v75 = v69;
                long long v76 = v70;
                long long v77 = v71;
                long long v78 = v72;
                long long v79 = v73;
                long long v80 = v74;
              }
              else
              {
                fiat_p256_point_add((uint64_t *)&v75, (uint64_t *)&v77, (uint64_t *)&v79, (uint64_t)&v75, (uint64_t)&v77, (unint64_t *)&v79, 0, (unint64_t *)&v69, (unint64_t *)&v71, (unint64_t *)&v73);
              }
              int v15 = 0;
              continue;
            }
            unsigned int v22 = 255;
LABEL_16:
            uint64_t v23 = (*(void *)(a4 + 8 * (v22 >> 6)) >> v22) & 1;
            goto LABEL_17;
          }
          uint64_t v19 = 0;
          unsigned int v20 = 255;
LABEL_15:
          uint64_t v21 = (8 * ((*(void *)(a4 + 8 * (v20 >> 6)) >> v20) & 1)) | v19;
          unsigned int v22 = i + 1;
          goto LABEL_16;
        }
        uint64_t v17 = 0;
        unsigned int v18 = 255;
      }
      uint64_t v19 = (16 * ((*(void *)(a4 + 8 * (v18 >> 6)) >> v18) & 1)) | v17;
      unsigned int v20 = i + 2;
      goto LABEL_15;
    }
  }
  long long v62 = v76;
  *a2 = v75;
  a2[1] = v62;
  long long v63 = v78;
  *(_OWORD *)((char *)a2 + 72) = v77;
  *(_OWORD *)((char *)a2 + 8bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v63;
  double result = *(double *)&v79;
  long long v65 = v80;
  a2[9] = v79;
  a2[10] = v65;
  return result;
}

double ec_GFp_nistp256_point_mul_base(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  char v5 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v17 = v6;
  long long v18 = v6;
  long long v15 = v6;
  long long v16 = v6;
  uint64_t v7 = 223;
  long long v13 = v6;
  long long v14 = v6;
  do
  {
    if (v5) {
      fiat_p256_point_double((uint64_t *)&v19, (uint64_t *)&v21, (uint64_t *)&v23, (unint64_t *)&v19, (unint64_t *)&v21, (unint64_t *)&v23);
    }
    fiat_p256_select_point_affine((8 * ((*(void *)(a3 + 8 * ((v7 + 32) >> 6)) >> (v7 + 96)) & 1)) | (4 * ((*(void *)(a3 + 8 * ((v7 - 32) >> 6)) >> (v7 + 96)) & 1)) | (2 * ((*(void *)(a3 + 8 * ((v7 - 96) >> 6)) >> (v7 + 96)) & 1)) | (*(void *)(a3 + 8 * ((v7 - 160) >> 6)) >> (v7 + 96)) & 1, (uint64_t)&unk_1BA18FC80, &v13);
    if (v5)
    {
      fiat_p256_point_add((uint64_t *)&v19, (uint64_t *)&v21, (uint64_t *)&v23, (uint64_t)&v19, (uint64_t)&v21, (unint64_t *)&v23, 1, (unint64_t *)&v13, (unint64_t *)&v15, (unint64_t *)&v17);
    }
    else
    {
      long long v19 = v13;
      long long v20 = v14;
      long long v21 = v15;
      long long v22 = v16;
      long long v23 = v17;
      long long v24 = v18;
    }
    fiat_p256_select_point_affine((8 * ((*(void *)(a3 + 8 * (v7 >> 6)) >> v7) & 1)) | (4* ((*(void *)(a3+ 8* ((v7 - 64) >> 6)) >> (v7 + 64)) & 1)) | (2 * ((*(void *)(a3 + 8 * ((v7 - 128) >> 6)) >> (v7 + 64)) & 1)) | (*(void *)(a3 + 8 * ((v7 - 192) >> 6)) >> (v7 + 64)) & 1, (uint64_t)&fiat_p256_g_pre_comp, &v13);
    char v5 = 1;
    fiat_p256_point_add((uint64_t *)&v19, (uint64_t *)&v21, (uint64_t *)&v23, (uint64_t)&v19, (uint64_t)&v21, (unint64_t *)&v23, 1, (unint64_t *)&v13, (unint64_t *)&v15, (unint64_t *)&v17);
    unint64_t v8 = v7 - 193;
    --v7;
  }
  while (v8 < 0x20);
  long long v9 = v20;
  *a2 = v19;
  a2[1] = v9;
  long long v10 = v22;
  *(_OWORD *)((char *)a2 + 72) = v21;
  *(_OWORD *)((char *)a2 + 8bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v10;
  double result = *(double *)&v23;
  long long v12 = v24;
  a2[9] = v23;
  a2[10] = v12;
  return result;
}

double ec_GFp_nistp256_point_mul_public(uint64_t a1, _OWORD *a2, uint64_t a3, _OWORD *a4, _DWORD *a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  long long v9 = a4[1];
  v68[0] = *a4;
  v68[1] = v9;
  long long v10 = *(_OWORD *)((char *)a4 + 88);
  v69[0] = *(_OWORD *)((char *)a4 + 72);
  v69[1] = v10;
  memset(v71, 170, sizeof(v71));
  long long v11 = a4[10];
  v70[0] = a4[9];
  v70[1] = v11;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v67[0] = v12;
  v67[1] = v12;
  v66[0] = v12;
  v66[1] = v12;
  v65[0] = v12;
  v65[1] = v12;
  fiat_p256_point_double((uint64_t *)v65, (uint64_t *)v66, (uint64_t *)v67, (unint64_t *)v68, (unint64_t *)v69, (unint64_t *)v70);
  for (uint64_t i = 0; i != 42; i += 6)
    fiat_p256_point_add((uint64_t *)&v71[i * 16], (uint64_t *)&v71[i * 16 + 32], (uint64_t *)&v71[i * 16 + 64], (uint64_t)&v68[i], (uint64_t)&v68[i + 2], (unint64_t *)&v70[i], 0, (unint64_t *)v65, (unint64_t *)v66, (unint64_t *)v67);
  char v64 = -86;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v63[14] = v14;
  v63[15] = v14;
  v63[12] = v14;
  v63[13] = v14;
  v63[10] = v14;
  v63[11] = v14;
  v63[8] = v14;
  v63[9] = v14;
  v63[6] = v14;
  v63[7] = v14;
  v63[4] = v14;
  v63[5] = v14;
  long long v63[2] = v14;
  v63[3] = v14;
  v63[0] = v14;
  v63[1] = v14;
  unint64_t v15 = 256;
  ec_compute_wNAF(a1, v63, a5, 0x100uLL, 4u);
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  int v17 = 1;
  do
  {
    if (!v17) {
      fiat_p256_point_double((uint64_t *)&v57, (uint64_t *)&v59, (uint64_t *)&v61, (unint64_t *)&v57, (unint64_t *)&v59, (unint64_t *)&v61);
    }
    if (v15 <= 0x1F)
    {
      uint64_t v18 = (8 * ((*(void *)(a3 + 8 * ((v15 + 224) >> 6)) >> (v15 - 32)) & 1)) | (4 * ((*(void *)(a3 + 8 * ((v15 + 160) >> 6)) >> (v15 - 96)) & 1)) | (2 * ((*(void *)(a3 + 8 * ((v15 + 96) >> 6)) >> (v15 + 96)) & 1)) | (*(void *)(a3 + (((v15 + 32) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 + 32)) & 1;
      if (v18)
      {
        fiat_p256_point_add((uint64_t *)&v57, (uint64_t *)&v59, (uint64_t *)&v61, (uint64_t)&v57, (uint64_t)&v59, (unint64_t *)&v61, 1, &fiat_p256_g_pre_comp[8 * v18 + 112], &fiat_p256_g_pre_comp[8 * v18 + 116], fiat_p256_one);
        int v17 = 0;
      }
      uint64_t v19 = (8 * ((*(void *)(a3 + (((v15 + 192) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1)) | (4
                                                                                                  * ((*(void *)(a3 + (((v15 + 128) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1)) | (2 * ((*(void *)(a3 + (((v15 + 64) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1)) | (*(void *)(a3 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1;
      if (v19)
      {
        fiat_p256_point_add((uint64_t *)&v57, (uint64_t *)&v59, (uint64_t *)&v61, (uint64_t)&v57, (uint64_t)&v59, (unint64_t *)&v61, 1, &fiat_p256_g_pre_comp[8 * v19 - 8], &fiat_p256_g_pre_comp[8 * v19 - 4], fiat_p256_one);
        int v17 = 0;
      }
    }
    int v20 = *((char *)v63 + v15);
    if (*((unsigned char *)v63 + v15))
    {
      if ((v20 & 1) == 0) {
        ec_GFp_nistp256_point_mul_public_cold_1();
      }
      if (v20 >= 0) {
        unsigned int v21 = *((char *)v63 + v15);
      }
      else {
        unsigned int v21 = -v20;
      }
      unsigned int v22 = v21 >> 1;
      long long v23 = &v68[6 * v22];
      long long v24 = (unint64_t *)(v23 + 2);
      *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v55 = v25;
      long long v56 = v25;
      if (v20 < 0)
      {
        uint64_t v30 = *((void *)v23 + 5);
        uint64_t v31 = -(uint64_t)*v24;
        unsigned __int8 v32 = -(uint64_t)((unsigned __int128)-(__int128)__PAIR128__(v16, *v24) >> 64);
        BOOL v33 = __CFADD__(v30, v32);
        uint64_t v34 = v30 + v32;
        char v35 = v33;
        BOOL v33 = v34 == 0;
        uint64_t v36 = -v34;
        uint64_t v38 = *((void *)v23 + 6);
        uint64_t v37 = *((void *)v23 + 7);
        uint64_t v40 = (v35 + !v33);
        uint64_t v39 = v38 + v40;
        BOOL v41 = __CFADD__(v38, v40);
        BOOL v33 = v39 == 0;
        uint64_t v42 = -v39;
        unsigned __int8 v43 = v41 + !v33;
        BOOL v33 = __CFADD__(v37, v43);
        uint64_t v44 = v37 + v43;
        char v45 = v33;
        BOOL v33 = v44 == 0;
        uint64_t v46 = -v44;
        if (v45 + !v33) {
          uint64_t v47 = -1;
        }
        else {
          uint64_t v47 = 0;
        }
        BOOL v33 = __CFADD__(__CFADD__(v31, v47), v36);
        uint64_t v48 = __CFADD__(v31, v47) + v36;
        uint64_t v49 = v33 | __CFADD__(v47, v48);
        BOOL v33 = __CFADD__(v49, v42);
        unint64_t v16 = v49 + v42;
        *(void *)&long long v55 = v31 + v47;
        *((void *)&v55 + 1) = v47 + v48;
        *(void *)&long long v56 = v16;
        *((void *)&v56 + 1) = v46 + v33 + (v47 & 0xFFFFFFFF00000001);
        long long v24 = (unint64_t *)&v55;
        if (v17) {
          goto LABEL_18;
        }
      }
      else if (v17)
      {
LABEL_18:
        long long v26 = v23[1];
        long long v57 = *v23;
        long long v58 = v26;
        long long v27 = *((_OWORD *)v24 + 1);
        long long v59 = *(_OWORD *)v24;
        long long v60 = v27;
        uint64_t v28 = &v68[6 * v22];
        long long v29 = v28[5];
        long long v61 = v28[4];
        long long v62 = v29;
LABEL_33:
        int v17 = 0;
        goto LABEL_34;
      }
      fiat_p256_point_add((uint64_t *)&v57, (uint64_t *)&v59, (uint64_t *)&v61, (uint64_t)&v57, (uint64_t)&v59, (unint64_t *)&v61, 0, (unint64_t *)v23, v24, (unint64_t *)&v70[6 * v22]);
      goto LABEL_33;
    }
LABEL_34:
    --v15;
  }
  while (v15 != -1);
  long long v50 = v58;
  *a2 = v57;
  a2[1] = v50;
  long long v51 = v60;
  *(_OWORD *)((char *)a2 + 72) = v59;
  *(_OWORD *)((char *)a2 + 8bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v51;
  double result = *(double *)&v61;
  long long v53 = v62;
  a2[9] = v61;
  a2[10] = v53;
  return result;
}

BOOL ec_GFp_nistp256_cmp_x_coordinate(uint64_t a1, long long *a2, const unint64_t *a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (ec_GFp_simple_is_at_infinity(a1, (uint64_t)a2)) {
    return 0;
  }
  long long v7 = a2[10];
  v89[0] = a2[9];
  v89[1] = v7;
  fiat_p256_mul((uint64_t *)v89, (unint64_t *)v89, (unint64_t *)v89);
  long long v8 = *((_OWORD *)a3 + 1);
  long long v87 = *(_OWORD *)a3;
  long long v88 = v8;
  fiat_p256_mul((uint64_t *)&v87, (unint64_t *)&v87, (unint64_t *)v89);
  long long v9 = a2[1];
  long long v85 = *a2;
  uint64_t v10 = ((unint64_t)v85 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v11 = ((unint64_t)v85 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  uint64_t v12 = 0xFFFFFFFFLL * v85 + __CFADD__(-(uint64_t)v85, (void)v85) + v11;
  uint64_t v13 = __CFADD__(__CFADD__(-(uint64_t)v85, (void)v85), v11) | __CFADD__(0xFFFFFFFFLL * v85, __CFADD__(-(uint64_t)v85, (void)v85)+ v11)? (((unint64_t)v85 * (unsigned __int128)0xFFFFFFFFuLL) >> 64) + 1: ((unint64_t)v85 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  BOOL v30 = __CFADD__(v12, *((void *)&v85 + 1));
  uint64_t v14 = v12 + *((void *)&v85 + 1);
  BOOL v15 = v30;
  unint64_t v16 = 0xFFFFFFFF00000001 * v14;
  uint64_t v17 = (__PAIR128__(0xFFFFFFFFLL, -1) * (unint64_t)v14) >> 64;
  BOOL v18 = v15 + __CFADD__(-v14, v14) + v13;
  BOOL v30 = __CFADD__(v18, v17);
  uint64_t v19 = v18 + v17;
  uint64_t v20 = v30 - 0xFFFFFFFFLL * v85;
  BOOL v21 = __CFADD__(v30, 0xFFFFFFFF00000001 * v85);
  BOOL v30 = __CFADD__(v16, v10);
  uint64_t v22 = v16 + v10;
  BOOL v23 = v30;
  BOOL v30 = __CFADD__(((unint64_t)v14 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFFLL * v14);
  long long v86 = v9;
  unint64_t v24 = ((unint64_t)v14 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v25 = ((unint64_t)v14 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  uint64_t v27 = v30 + v20;
  BOOL v30 = __CFADD__(v30, v20) | __CFADD__(v25, v27);
  uint64_t v26 = v25 + v27;
  BOOL v28 = v21 + v30 + v22;
  uint64_t v29 = __CFADD__(v30, v22) | __CFADD__(v21, v30 + v22) ? v23 + 1 : v23;
  BOOL v30 = __CFADD__(v19, (void)v86);
  unint64_t v31 = v19 + v86;
  BOOL v32 = v30;
  uint64_t v33 = v30 + v26;
  unint64_t v34 = (v31 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64;
  unsigned long long v35 = __PAIR128__(v29, __CFADD__(v30, v26)) + __PAIR128__(v24, v28);
  uint64_t v36 = 0xFFFFFFFF * v31;
  uint64_t v37 = (__PAIR128__(0xFFFFFFFFLL, -1) * v31) >> 64;
  BOOL v38 = v32 + __CFADD__(-(uint64_t)v31, v31) + v26;
  unint64_t v39 = (__CFADD__(__CFADD__(-(uint64_t)v31, v31), v33) | __CFADD__(v37, __CFADD__(-(uint64_t)v31, v31) + v33))+ (void)v35;
  BOOL v40 = __CFADD__(__CFADD__(__CFADD__(-(uint64_t)v31, v31), v33) | __CFADD__(v37, __CFADD__(-(uint64_t)v31, v31) + v33), (void)v35);
  BOOL v41 = __CFADD__(0xFFFFFFFF00000001 * v31, *((void *)&v35 + 1));
  uint64_t v42 = 0xFFFFFFFF * v31;
  unint64_t v43 = (v31 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v44 = (v31 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  uint64_t v45 = v38 + v34 + v36;
  BOOL v30 = __CFADD__(__CFADD__(v34, v36), v39) | __CFADD__(v44, (__PAIR128__(v39, v34) + (unint64_t)v42) >> 64);
  uint64_t v46 = v44 + ((__PAIR128__(v39, v34) + (unint64_t)v42) >> 64);
  BOOL v47 = v40 + v30 + *((void *)&v35 + 1);
  uint64_t v48 = __CFADD__(v30, *((void *)&v35 + 1)) | __CFADD__(v40, v30 + *((void *)&v35 + 1))
      ? v41 + 1
      : v41;
  BOOL v49 = __CFADD__(v45, *((void *)&v86 + 1));
  unint64_t v50 = v45 + *((void *)&v86 + 1);
  BOOL v51 = v49;
  uint64_t v52 = v49 + v46;
  unint64_t v53 = (v50 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  unsigned long long v54 = __PAIR128__(v48, __CFADD__(v49, v46)) + __PAIR128__(v43, v47);
  unint64_t v55 = 0xFFFFFFFF00000001 * v50;
  uint64_t v56 = -(uint64_t)v50;
  unint64_t v57 = (__PAIR128__(0xFFFFFFFFLL, -1) * v50) >> 64;
  uint64_t v58 = __CFADD__((v50 * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64, 0xFFFFFFFF * v50)
      ? ((v50 * (unsigned __int128)0xFFFFFFFFuLL) >> 64) + 1
      : (v50 * (unsigned __int128)0xFFFFFFFFuLL) >> 64;
  BOOL v30 = __CFADD__(v56, v50);
  unint64_t v59 = v51 + __CFADD__(v56, v50) + v46 + v57;
  unint64_t v60 = v58 + (__CFADD__(v30, v52) | __CFADD__(v57, v30 + v52)) + (void)v54;
  uint64_t v62 = __CFADD__(__CFADD__(v30, v52) | __CFADD__(v57, v30 + v52), (void)v54) | __CFADD__(v58, (__CFADD__(v30, v52) | __CFADD__(v57, v30 + v52)) + (void)v54);
  unint64_t v61 = *((void *)&v54 + 1) + v62 + v55;
  uint64_t v63 = __CFADD__(v62, v55) | __CFADD__(*((void *)&v54 + 1), v62 + v55) ? v53 + 1 : v53;
  unint64_t v65 = v60 - (1 - __CFADD__(v59, 1));
  unint64_t v64 = (v60 - __PAIR128__(v53, (1 - __CFADD__(v59, 1)))) >> 64;
  unsigned long long v66 = (unint64_t)v63
      - __PAIR128__(v57, -(uint64_t)((v61- __PAIR128__(v64, (1 - (__CFADD__(v65, 0xFFFFFFFF00000001) + v64)))) >> 64));
  uint64_t v67 = __CFADD__((void)v66, 0xFFFFFFFFLL) + BYTE8(v66) == 1 ? -1 : 0;
  uint64_t v68 = v67 & (v59 + 1) | *((void *)&v66 + 1) & v59;
  uint64_t v69 = v67 & (v65 - 0xFFFFFFFF) | *((void *)&v66 + 1) & v60;
  uint64_t v70 = v67 & (v61 - (1 - (__CFADD__(v65, 0xFFFFFFFF00000001) + v64))) | *((void *)&v66 + 1) & v61;
  uint64_t v71 = v67 & (v66 + 0xFFFFFFFF) | v63 & *((void *)&v66 + 1);
  *(void *)&long long v85 = v68;
  *((void *)&v85 + 1) = v69;
  *(void *)&long long v86 = v70;
  *((void *)&v86 + 1) = v71;
  BOOL v72 = (void)v87 == v68 && *((void *)&v87 + 1) == v69;
  BOOL v73 = v72 && (void)v88 == v70;
  if (v73 && *((void *)&v88 + 1) == v71) {
    return 1;
  }
  int v75 = *(_DWORD *)(a1 + 328);
  if (v75 != *(_DWORD *)(a1 + 264)) {
    ec_GFp_nistp256_cmp_x_coordinate_cold_1();
  }
  unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v76 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v76 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v82 = v76;
  long long v83 = v76;
  long long v80 = v76;
  long long v81 = v76;
  if (bn_add_words((unint64_t *)&v80, a3, *(const unint64_t **)(a1 + 256), v75)
    || !bn_less_than_words((uint64_t *)&v80, *(uint64_t **)(a1 + 320), *(int *)(a1 + 328)))
  {
    return 0;
  }
  long long v87 = v80;
  long long v88 = v81;
  fiat_p256_mul((uint64_t *)&v87, (unint64_t *)&v87, (unint64_t *)v89);
  BOOL v77 = (void)v87 == (void)v85 && *((void *)&v87 + 1) == *((void *)&v85 + 1);
  BOOL v78 = v77 && (void)v88 == (void)v86;
  return v78 && *((void *)&v88 + 1) == *((void *)&v86 + 1);
}

double fiat_p256_point_add(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, unint64_t *a6, int a7, unint64_t *a8, unint64_t *a9, unint64_t *a10)
{
  uint64_t v235 = *MEMORY[0x1E4F143B8];
  v12.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v12.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  int8x16_t v233 = v12;
  int8x16_t v234 = v12;
  int8x16_t v231 = v12;
  unsigned long long v232 = (unsigned __int128)v12;
  int8x16_t v229 = v12;
  int8x16_t v230 = v12;
  unint64_t v13 = *a6;
  unint64_t v14 = a6[1];
  unint64_t v15 = a6[2];
  uint64_t v16 = a6[3];
  unint64_t v200 = v14 | *a6 | v15 | v16;
  unint64_t v17 = *a10;
  unint64_t v18 = a10[1];
  unint64_t v20 = a10[2];
  unint64_t v19 = a10[3];
  uint64_t v201 = v18 | *a10 | v20 | v19;
  int8x16_t v227 = v12;
  int8x16_t v228 = v12;
  fiat_p256_square(v227.i64, a6);
  *(void *)&unsigned long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unsigned long long v225 = v23;
  unsigned long long v226 = v23;
  unsigned long long v223 = v23;
  unsigned long long v224 = v23;
  unsigned long long v221 = v23;
  unsigned long long v222 = v23;
  if (a7)
  {
    unsigned long long v24 = *(_OWORD *)(a4 + 16);
    *((void *)&v26 + 1) = v14;
    *(void *)&long long v26 = v13;
    uint64_t v25 = v26 >> 63;
    unsigned long long v225 = *(_OWORD *)a4;
    unsigned long long v226 = v24;
    *((void *)&v26 + 1) = v15;
    *(void *)&long long v26 = v14;
    unint64_t v27 = v26 >> 63;
    *((void *)&v26 + 1) = v16;
    *(void *)&long long v26 = v15;
    unint64_t v28 = v26 >> 63;
    unsigned long long v29 = v28
        - __PAIR128__(v22, -(uint64_t)((v27- __PAIR128__(v21, (1 - __CFADD__(v25, 0xFFFFFFFF00000000)))) >> 64));
    if ((v16 < 0)
       + ((unint64_t)v16 >> 63 < (1 - (__CFADD__((void)v29, 0xFFFFFFFFLL) + BYTE8(v29)))))
    {
      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v30 = -1;
    }
    if ((v16 < 0)
       + ((unint64_t)v16 >> 63 < (1 - (__CFADD__((void)v29, 0xFFFFFFFFLL) + BYTE8(v29)))))
    {
      uint64_t v31 = -1;
    }
    else
    {
      uint64_t v31 = 0;
    }
    *(void *)&unsigned long long v221 = v30 & ((2 * v13) | 1) | v31 & (2 * v13);
    *((void *)&v221 + 1) = v30 & (v25 - 0x100000000) | v31 & v25;
    *(void *)&unsigned long long v222 = v30 & (v27 - (1 - __CFADD__(v25, 0xFFFFFFFF00000000))) | v31 & v27;
    *((void *)&v222 + 1) = v30 & (v29 + 0xFFFFFFFF) | v31 & v28;
    uint64_t v33 = (int8x16_t *)a10;
    BOOL v32 = (unint64_t *)a5;
    unsigned long long v34 = *(_OWORD *)(a5 + 16);
    unsigned long long v223 = *(_OWORD *)a5;
    unsigned long long v224 = v34;
  }
  else
  {
    unsigned long long v219 = v23;
    unsigned long long v220 = v23;
    fiat_p256_square((uint64_t *)&v219, a10);
    unsigned long long v35 = fiat_p256_mul((uint64_t *)&v225, (unint64_t *)a4, (unint64_t *)&v219);
    unint64_t v37 = v17 + v13;
    unint64_t v38 = v14 + __CFADD__(v17, v13) + v18;
    unint64_t v39 = v15 + (__CFADD__(__CFADD__(v17, v13), v18) | __CFADD__(v14, __CFADD__(v17, v13) + v18)) + v20;
    uint64_t v40 = v16
        + (__CFADD__(__CFADD__(__CFADD__(v17, v13), v18) | __CFADD__(v14, __CFADD__(v17, v13) + v18), v20) | __CFADD__(v15, (__CFADD__(__CFADD__(v17, v13), v18) | __CFADD__(v14, __CFADD__(v17, v13)+ v18))+ v20))+ v19;
    if (__CFADD__(__CFADD__(__CFADD__(__CFADD__(v17, v13), v18) | __CFADD__(v14, __CFADD__(v17, v13) + v18), v20) | __CFADD__(v15, (__CFADD__(__CFADD__(v17, v13), v18) | __CFADD__(v14, __CFADD__(v17, v13)+ v18))+ v20), v19) | __CFADD__(v16, (__CFADD__(__CFADD__(__CFADD__(v17, v13), v18) | __CFADD__(v14, __CFADD__(v17, v13) + v18), v20) | __CFADD__(v15, (__CFADD__(__CFADD__(v17, v13), v18) | __CFADD__(v14, __CFADD__(v17, v13) + v18))+ v20))+ v19))unint64_t v41 = 1; {
    else
    }
      unint64_t v41 = 0;
    unsigned long long v42 = v38 - __PAIR128__(v36, (1 - __CFADD__(v37, 1)));
    unsigned long long v43 = (unint64_t)v40
        - __PAIR128__((unint64_t)v35, -(uint64_t)((v39- __PAIR128__(0xFFFFFFFF00000001, (1- (__CFADD__((void)v42, 0xFFFFFFFF00000001)+ BYTE8(v42))))) >> 64));
    uint64_t v44 = -(uint64_t)(v41 + (v41 < (1 - (__CFADD__((void)v43, 0xFFFFFFFFLL) + BYTE8(v43)))));
    BOOL v45 = v44 == 0;
    if ((_BYTE)v44) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = -1;
    }
    if (v45) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = -1;
    }
    *(void *)&unsigned long long v221 = v46 & (v37 + 1) | v47 & v37;
    *((void *)&v221 + 1) = v46 & (v42 - 0xFFFFFFFF) | v47 & v38;
    *(void *)&unsigned long long v222 = v46 & (v39 - (1 - (__CFADD__((void)v42, 0xFFFFFFFF00000001) + BYTE8(v42)))) | v47 & v39;
    *((void *)&v222 + 1) = v46 & (v43 + 0xFFFFFFFF) | v47 & v40;
    fiat_p256_square((uint64_t *)&v221, (unint64_t *)&v221);
    uint64_t v48 = v221 - v227.i64[0];
    uint64_t v49 = v227.i64[1]
        + -(uint64_t)(((unint64_t)v221 - __PAIR128__(v227.u64[0], v227.u64[0])) >> 64);
    uint64_t v50 = *((void *)&v221 + 1) - v49;
    BOOL v57 = __CFADD__(v228.i64[0], -(uint64_t)((*((unint64_t *)&v221 + 1) - __PAIR128__(v49, v49)) >> 64));
    uint64_t v51 = v228.i64[0] + -(uint64_t)((*((unint64_t *)&v221 + 1) - __PAIR128__(v49, v49)) >> 64);
    uint64_t v52 = v57;
    uint64_t v53 = v222 - v51;
    BOOL v57 = __CFADD__(v228.i64[1], -(uint64_t)(((unint64_t)v222 - __PAIR128__(v52, v51)) >> 64));
    uint64_t v54 = v228.i64[1] + -(uint64_t)(((unint64_t)v222 - __PAIR128__(v52, v51)) >> 64);
    uint64_t v55 = v57;
    unsigned long long v56 = *((unint64_t *)&v222 + 1) - __PAIR128__(v55, v54);
    BOOL v57 = __CFADD__(__CFADD__(v48, *((void *)&v56 + 1)), v50) | __CFADD__(DWORD2(v56), __CFADD__(v48, *((void *)&v56 + 1)) + v50);
    uint64_t v58 = DWORD2(v56) + __CFADD__(v48, *((void *)&v56 + 1)) + v50;
    unint64_t v59 = v56 + __CFADD__(v57, v53) + (*((void *)&v56 + 1) & 0xFFFFFFFF00000001);
    char v61 = ((unint64_t)(v48 + *((void *)&v56 + 1)) - __PAIR128__(v219, v219)) >> 64;
    uint64_t v60 = v48 + *((void *)&v56 + 1) - v219;
    unsigned long long v62 = (unint64_t)v58
        - __PAIR128__(*((void *)&v219 + 1) + (unint64_t)-v61, *((void *)&v219 + 1) + (unint64_t)-v61);
    char v63 = ((unint64_t)v57
         + v53
         - __PAIR128__((unint64_t)v220 + -BYTE8(v62), (unint64_t)v220 + -BYTE8(v62))) >> 64;
    if (((v59
                          - __PAIR128__(*((void *)&v220 + 1) + (unint64_t)-v63, *((void *)&v220 + 1) + (unint64_t)-v63)) >> 64))uint64_t v64 = -1;
    else {
      uint64_t v64 = 0;
    }
    uint64_t v65 = __CFADD__(v60, v64) + (void)v62;
    *(void *)&unsigned long long v221 = v60 + v64;
    *((void *)&v221 + 1) = v64 + v65;
    unsigned long long v222 = __PAIR128__(v64 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v60, v64), (void)v62) | __CFADD__(v64, v65))+ __PAIR128__(v59- (*((void *)&v220 + 1)+ -(uint64_t)(((unint64_t)v57+ v53- __PAIR128__((unint64_t)v220 + -BYTE8(v62), (unint64_t)v220 + -BYTE8(v62))) >> 64)), v57 + v53 - ((unint64_t)v220 + -BYTE8(v62)));
    fiat_p256_mul((uint64_t *)&v223, a10, (unint64_t *)&v219);
    BOOL v32 = (unint64_t *)a5;
    fiat_p256_mul((uint64_t *)&v223, (unint64_t *)&v223, (unint64_t *)a5);
    uint64_t v33 = (int8x16_t *)a10;
  }
  uint64_t v66 = a4;
  *(void *)&unsigned long long v67 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v67 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unsigned long long v219 = v67;
  unsigned long long v220 = v67;
  fiat_p256_mul((uint64_t *)&v219, a8, (unint64_t *)&v227);
  uint64_t v68 = v219 - v225;
  unint64_t v69 = *((void *)&v225 + 1) + -(uint64_t)(((unint64_t)v219 - __PAIR128__(v225, v225)) >> 64);
  unint64_t v70 = *((void *)&v219 + 1) - v69;
  BOOL v57 = __CFADD__((void)v226, -(uint64_t)((*((unint64_t *)&v219 + 1) - __PAIR128__(v69, v69)) >> 64));
  unint64_t v71 = v226 + -(uint64_t)((*((unint64_t *)&v219 + 1) - __PAIR128__(v69, v69)) >> 64);
  uint64_t v72 = v57;
  unint64_t v74 = v220 - v71;
  char v73 = ((unint64_t)v220 - __PAIR128__(v72, v71)) >> 64;
  BOOL v57 = __CFADD__(*((void *)&v226 + 1), -v73);
  unint64_t v75 = *((void *)&v226 + 1) + -v73;
  uint64_t v76 = v57;
  unint64_t v77 = *((void *)&v220 + 1) - v75;
  if (((*((unint64_t *)&v220 + 1) - __PAIR128__(v76, v75)) >> 64)) {
    uint64_t v78 = -1;
  }
  else {
    uint64_t v78 = 0;
  }
  uint64_t v79 = v68 + v78;
  unint64_t v80 = v78 + __CFADD__(v68, v78) + v70;
  v217[0] = v68 + v78;
  v217[1] = v80;
  signed long long v81 = __PAIR128__(v78 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v68, v78), v70) | __CFADD__(v78, __CFADD__(v68, v78) + v70))+ __PAIR128__(v77, v74);
  unsigned long long v218 = __PAIR128__(v78 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v68, v78), v70) | __CFADD__(v78, __CFADD__(v68, v78) + v70))+ __PAIR128__(v77, v74);
  fiat_p256_mul(v229.i64, v217, (unint64_t *)&v221);
  *(void *)&long long v82 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v82 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v216[0] = v82;
  v216[1] = v82;
  fiat_p256_mul((uint64_t *)v216, a6, (unint64_t *)&v227);
  *(void *)&long long v83 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v83 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v214 = v83;
  long long v215 = v83;
  unint64_t v84 = fiat_p256_mul((uint64_t *)&v214, a9, (unint64_t *)v216);
  uint64_t v86 = v214 - v223;
  unint64_t v87 = *((void *)&v223 + 1) + -(uint64_t)(((unint64_t)v214 - __PAIR128__(v223, v223)) >> 64);
  unint64_t v88 = *((void *)&v214 + 1) - v87;
  BOOL v57 = __CFADD__((void)v224, -(uint64_t)((*((unint64_t *)&v214 + 1) - __PAIR128__(v87, v87)) >> 64));
  unint64_t v89 = v224 + -(uint64_t)((*((unint64_t *)&v214 + 1) - __PAIR128__(v87, v87)) >> 64);
  uint64_t v90 = v57;
  unint64_t v91 = v215 - v89;
  BOOL v57 = __CFADD__(*((void *)&v224 + 1), -(uint64_t)(((unint64_t)v215 - __PAIR128__(v90, v89)) >> 64));
  unint64_t v92 = *((void *)&v224 + 1) + -(uint64_t)(((unint64_t)v215 - __PAIR128__(v90, v89)) >> 64);
  uint64_t v93 = v57;
  unint64_t v94 = *((void *)&v215 + 1) - v92;
  if (((*((unint64_t *)&v215 + 1) - __PAIR128__(v93, v92)) >> 64)) {
    uint64_t v95 = -1;
  }
  else {
    uint64_t v95 = 0;
  }
  BOOL v57 = __CFADD__(v86, v95);
  uint64_t v96 = v86 + v95;
  unint64_t v98 = __CFADD__(v86, v95) + v88;
  unint64_t v97 = v95 + v98;
  unint64_t v99 = __CFADD__(v57, v88) | __CFADD__(v95, v98);
  unint64_t v100 = v95 & 0xFFFFFFFF00000001;
  *((void *)&v102 + 1) = v97;
  *(void *)&long long v102 = v96;
  uint64_t v101 = v102 >> 63;
  *((void *)&v102 + 1) = v99 + v91;
  *(void *)&long long v102 = v97;
  unint64_t v103 = v102 >> 63;
  unint64_t v104 = (__int128)(__PAIR128__(v100, v99) + __PAIR128__(v94, v91)) >> 63;
  unint64_t v105 = v101 - 0x100000000;
  unint64_t v106 = v103 - (1 - __CFADD__(v101, 0xFFFFFFFF00000000));
  unsigned long long v107 = v104
       - __PAIR128__(v85, -(uint64_t)((v103- __PAIR128__((unint64_t)v84, (1 - __CFADD__(v101, 0xFFFFFFFF00000000)))) >> 64));
  if (((((__PAIR128__(v100, v99) + __PAIR128__(v94, v91)) >> 64) & 0x8000000000000000) != 0)
     + ((unint64_t)((__PAIR128__(v100, v99) + __PAIR128__(v94, v91)) >> 64) >> 63 < (1 - (__CFADD__((void)v107, 0xFFFFFFFFLL) + BYTE8(v107)))))
  {
    uint64_t v108 = 0;
  }
  else
  {
    uint64_t v108 = -1;
  }
  uint64_t v210 = v108 & ((2 * v96) | 1) | *((void *)&v107 + 1) & (2 * v96);
  uint64_t v211 = v108 & v105 | *((void *)&v107 + 1) & v101;
  uint64_t v212 = v108 & v106 | *((void *)&v107 + 1) & v103;
  uint64_t v213 = v108 & (v107 + 0xFFFFFFFF) | *((void *)&v107 + 1) & v104;
  unint64_t v109 = v80 | v79 | v81 | *((void *)&v81 + 1) | v211 | v210 | v212 | v213;
  uint64_t v110 = (uint64_t)((v109 - 1) & ~v109) >> 63;
  if ((((v201 - 1) & ~v201 | (v200 - 1) & ~v200) & 0x8000000000000000) != 0) {
    uint64_t v110 = 0;
  }
  if (v110)
  {
    fiat_p256_point_double(a1, a2, a3, (unint64_t *)a4, v32, a6);
  }
  else
  {
    *((void *)&v113 + 1) = v80;
    *(void *)&long long v113 = v79;
    uint64_t v112 = v113 >> 63;
    *((void *)&v113 + 1) = v81;
    *(void *)&long long v113 = v80;
    unint64_t v114 = v113 >> 63;
    unint64_t v115 = v81 >> 63;
    unsigned long long v116 = v115
         - __PAIR128__(v106, -(uint64_t)((v114- __PAIR128__(v105, (1 - __CFADD__(v112, 0xFFFFFFFF00000000)))) >> 64));
    if (1
       - (__CFADD__((void)v116, 0xFFFFFFFFLL)
        + BYTE8(v116))
       + (*((void *)&v81 + 1) >> 63 < (unint64_t)(1
                                                                          - (__CFADD__((void)v116, 0xFFFFFFFFLL)
                                                                           + BYTE8(v116)))))
    {
      uint64_t v117 = 0;
    }
    else
    {
      uint64_t v117 = -1;
    }
    if (1
       - (__CFADD__((void)v116, 0xFFFFFFFFLL)
        + BYTE8(v116))
       + (*((void *)&v81 + 1) >> 63 < (unint64_t)(1
                                                                          - (__CFADD__((void)v116, 0xFFFFFFFFLL)
                                                                           + BYTE8(v116)))))
    {
      uint64_t v118 = -1;
    }
    else
    {
      uint64_t v118 = 0;
    }
    v209[0] = v117 & ((2 * v79) | 1) | v118 & (2 * v79);
    v209[1] = v117 & (v112 - 0x100000000) | v118 & v112;
    v209[2] = v117 & (v114 - (1 - __CFADD__(v112, 0xFFFFFFFF00000000))) | v118 & v114;
    v209[3] = v117 & (v116 + 0xFFFFFFFF) | v118 & v115;
    fiat_p256_square(v209, (unint64_t *)v209);
    *(void *)&long long v119 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v119 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v207 = v119;
    long long v208 = v119;
    fiat_p256_mul((uint64_t *)&v207, v217, (unint64_t *)v209);
    *(void *)&long long v120 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v120 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v205 = v120;
    long long v206 = v120;
    fiat_p256_mul((uint64_t *)&v205, (unint64_t *)&v225, (unint64_t *)v209);
    fiat_p256_square(v233.i64, (unint64_t *)&v210);
    uint64_t v121 = v233.i64[0] - v207;
    unint64_t v122 = *((void *)&v207 + 1) + -(uint64_t)((v233.u64[0] - __PAIR128__(v207, v207)) >> 64);
    unint64_t v123 = v233.i64[1] - v122;
    BOOL v57 = __CFADD__((void)v208, -(uint64_t)((v233.u64[1] - __PAIR128__(v122, v122)) >> 64));
    unint64_t v124 = v208 + -(uint64_t)((v233.u64[1] - __PAIR128__(v122, v122)) >> 64);
    uint64_t v125 = v57;
    unint64_t v127 = v234.i64[0] - v124;
    char v126 = (v234.u64[0] - __PAIR128__(v125, v124)) >> 64;
    BOOL v57 = __CFADD__(*((void *)&v208 + 1), -v126);
    unint64_t v128 = *((void *)&v208 + 1) + -v126;
    uint64_t v129 = v57;
    if (((v234.u64[1] - __PAIR128__(v129, v128)) >> 64)) {
      uint64_t v130 = -1;
    }
    else {
      uint64_t v130 = 0;
    }
    unint64_t v131 = v130 + __CFADD__(v121, v130) + v123;
    uint64_t v132 = v121 + v130 - v205;
    unsigned long long v133 = v131
         - __PAIR128__(v131, *((void *)&v205 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v121 + v130) - __PAIR128__(v127, v205)) >> 64));
    uint64_t v135 = ((__CFADD__(__CFADD__(v121, v130), v123) | __CFADD__(v130, __CFADD__(v121, v130) + v123))+ v127- __PAIR128__((unint64_t)v206 + -BYTE8(v133), (unint64_t)v206 + -BYTE8(v133))) >> 64;
    uint64_t v134 = (__CFADD__(__CFADD__(v121, v130), v123) | __CFADD__(v130, __CFADD__(v121, v130) + v123))+ v127- (v206+ -BYTE8(v133));
    unsigned long long v136 = ((__PAIR128__(v130 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v121, v130), v123) | __CFADD__(v130, __CFADD__(v121, v130) + v123))+ __PAIR128__(v234.i64[1] - v128, v127)) >> 64)- __PAIR128__(*((void *)&v206 + 1) + (unint64_t)-(char)v135, *((void *)&v206 + 1) + (unint64_t)-(char)v135);
    unint64_t v137 = DWORD2(v136) + __CFADD__(v132, *((void *)&v136 + 1)) + (void)v133;
    unint64_t v138 = v136
         + __CFADD__(__CFADD__(__CFADD__(v132, *((void *)&v136 + 1)), (void)v133) | __CFADD__(DWORD2(v136), __CFADD__(v132, *((void *)&v136 + 1))+ (void)v133), v134)+ (*((void *)&v136 + 1) & 0xFFFFFFFF00000001);
    uint64_t v139 = v132 + *((void *)&v136 + 1) - v205;
    unsigned long long v140 = v137
         - __PAIR128__(v137, *((void *)&v205 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v132 + *((void *)&v136 + 1))- __PAIR128__(*((void *)&v136 + 1) & 0xFFFFFFFF00000001, v205)) >> 64));
    LOBYTE(v137) = ((unint64_t)(__CFADD__(__CFADD__(v132, *((void *)&v136 + 1)), (void)v133) | __CFADD__(DWORD2(v136), __CFADD__(v132, *((void *)&v136 + 1)) + (void)v133))
                  + v134
                  - __PAIR128__((unint64_t)v206 + -BYTE8(v140), (unint64_t)v206 + -BYTE8(v140))) >> 64;
    unint64_t v141 = (__CFADD__(__CFADD__(v132, *((void *)&v136 + 1)), (void)v133) | __CFADD__(DWORD2(v136), __CFADD__(v132, *((void *)&v136 + 1))+ (void)v133))+ v134- (v206+ -BYTE8(v140));
    unint64_t v142 = v138 - (*((void *)&v206 + 1) + -(char)v137);
    if (((v138
                          - __PAIR128__(*((void *)&v206 + 1) + (unint64_t)-(char)v137, *((void *)&v206 + 1) + (unint64_t)-(char)v137)) >> 64))uint64_t v143 = -1;
    else {
      uint64_t v143 = 0;
    }
    uint64_t v196 = v139 + v143;
    uint64_t v198 = v143 + __CFADD__(v139, v143) + (void)v140;
    unint64_t v192 = (__CFADD__(__CFADD__(v139, v143), (void)v140) | __CFADD__(v143, __CFADD__(v139, v143) + (void)v140))+ v141;
    unsigned long long v144 = __PAIR128__(v143 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v139, v143), (void)v140) | __CFADD__(v143, __CFADD__(v139, v143) + (void)v140))+ __PAIR128__(v142, v141);
    uint64_t v146 = v205 - (v139 + v143);
    char v145 = ((unint64_t)v205 - __PAIR128__(v142, v139 + v143)) >> 64;
    unsigned long long v147 = *((unint64_t *)&v205 + 1)
         - __PAIR128__(v198 + (unint64_t)-v145, v198 + (unint64_t)-v145);
    char v148 = ((unint64_t)v206
          - __PAIR128__((unint64_t)v144 + -BYTE8(v147), (unint64_t)v144 + -BYTE8(v147))) >> 64;
    if (((*((unint64_t *)&v206 + 1)
                          - __PAIR128__(*((void *)&v144 + 1) + (unint64_t)-v148, *((void *)&v144 + 1) + (unint64_t)-v148)) >> 64))uint64_t v149 = -1;
    else {
      uint64_t v149 = 0;
    }
    uint64_t v150 = __CFADD__(v146, v149) + (void)v147;
    v231.i64[0] = v146 + v149;
    v231.i64[1] = v149 + v150;
    unsigned long long v232 = __PAIR128__(v149 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v146, v149), (void)v147) | __CFADD__(v149, v150))+ __PAIR128__(*((void *)&v206 + 1)- (*((void *)&v144 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)v206- __PAIR128__((unint64_t)v144 + -BYTE8(v147), (unint64_t)v144 + -BYTE8(v147))) >> 64)), v206 - (v144 + -BYTE8(v147)));
    fiat_p256_mul(v231.i64, (unint64_t *)&v231, (unint64_t *)&v210);
    *(void *)&long long v151 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v151 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v203 = v151;
    long long v204 = v151;
    fiat_p256_mul((uint64_t *)&v203, (unint64_t *)&v223, (unint64_t *)&v207);
    uint64_t v153 = v231.i64[0] - v203;
    uint64_t v154 = v231.i64[1]
         - (*((void *)&v203 + 1)
          + -(uint64_t)((v231.u64[0] - __PAIR128__(v152, v203)) >> 64));
    BOOL v57 = __CFADD__((void)v204, -(uint64_t)((v231.u64[1]- __PAIR128__(*((void *)&v203 + 1)+ (unint64_t)-(uint64_t)((v231.u64[0]- __PAIR128__(v152, v203)) >> 64), *((void *)&v203 + 1)+ (unint64_t)-(uint64_t)((v231.u64[0]- __PAIR128__(v152, v203)) >> 64))) >> 64));
    unint64_t v155 = v204
         + -(uint64_t)((v231.u64[1]
                                      - __PAIR128__(*((void *)&v203 + 1)+ (unint64_t)-(uint64_t)((v231.u64[0]- __PAIR128__(v152, v203)) >> 64), *((void *)&v203 + 1)+ (unint64_t)-(uint64_t)((v231.u64[0]- __PAIR128__(v152, v203)) >> 64))) >> 64);
    uint64_t v156 = v57;
    uint64_t v157 = v232 - v155;
    BOOL v57 = __CFADD__(*((void *)&v204 + 1), -(uint64_t)(((unint64_t)v232 - __PAIR128__(v156, v155)) >> 64));
    unint64_t v158 = *((void *)&v204 + 1)
         + -(uint64_t)(((unint64_t)v232 - __PAIR128__(v156, v155)) >> 64);
    uint64_t v159 = v57;
    unsigned long long v160 = *((unint64_t *)&v232 + 1) - __PAIR128__(v159, v158);
    uint64_t v161 = __CFADD__(v153, *((void *)&v160 + 1)) + v154;
    uint64_t v163 = __CFADD__(__CFADD__(v153, *((void *)&v160 + 1)), v154) | __CFADD__(DWORD2(v160), v161);
    unint64_t v162 = v163 + v157;
    unint64_t v164 = v160 + __CFADD__(v163, v157) + (*((void *)&v160 + 1) & 0xFFFFFFFF00000001);
    uint64_t v165 = v153 + *((void *)&v160 + 1) - v203;
    uint64_t v166 = DWORD2(v160)
         + v161
         - (*((void *)&v203 + 1)
          + -(uint64_t)(((unint64_t)(v153 + *((void *)&v160 + 1)) - __PAIR128__(v203, v203)) >> 64));
    unint64_t v167 = v204
         + -(uint64_t)(((unint64_t)DWORD2(v160)
                                      + v161
                                      - __PAIR128__(*((void *)&v203 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v153 + *((void *)&v160 + 1))- __PAIR128__(v203, v203)) >> 64), *((void *)&v203 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v153 + *((void *)&v160 + 1))- __PAIR128__(v203, v203)) >> 64))) >> 64);
    BOOL v168 = __CFADD__((void)v204, -(uint64_t)(((unint64_t)DWORD2(v160)+ v161- __PAIR128__(*((void *)&v203 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v153 + *((void *)&v160 + 1))- __PAIR128__(v203, v203)) >> 64), *((void *)&v203 + 1)+ (unint64_t)-(uint64_t)(((unint64_t)(v153 + *((void *)&v160 + 1))- __PAIR128__(v203, v203)) >> 64))) >> 64));
    unint64_t v170 = v162 - v167;
    char v169 = (v162 - __PAIR128__(v168, v167)) >> 64;
    BOOL v57 = __CFADD__(*((void *)&v204 + 1), -v169);
    unint64_t v171 = *((void *)&v204 + 1) + -v169;
    uint64_t v172 = v57;
    if (((v164 - __PAIR128__(v172, v171)) >> 64)) {
      uint64_t v173 = -1;
    }
    else {
      uint64_t v173 = 0;
    }
    uint64_t v174 = (uint64_t)v32;
    uint64_t v175 = v165 + v173;
    uint64_t v176 = v66;
    uint64_t v177 = v173 + __CFADD__(v165, v173) + v166;
    unsigned long long v178 = __PAIR128__(v173 & 0xFFFFFFFF00000001, __CFADD__(__CFADD__(v165, v173), v166) | __CFADD__(v173, __CFADD__(v165, v173) + v166))+ __PAIR128__(v164 - v171, v170);
    unsigned long long v179 = v33;
    if (v200) {
      unint64_t v180 = 0;
    }
    else {
      unint64_t v180 = -1;
    }
    if (v200) {
      unint64_t v181 = -1;
    }
    else {
      unint64_t v181 = 0;
    }
    unint64_t v182 = a8[1] & v180 | v181 & v198;
    unint64_t v183 = a8[2] & v180 | v181 & v192;
    unint64_t v184 = a8[3] & v180;
    v233.i64[0] = v180 & *a8 | v181 & v196;
    v233.i64[1] = v182;
    v234.i64[0] = v183;
    v234.i64[1] = v184 | v181 & *((void *)&v144 + 1);
    fiat_p256_cmovznz((uint64_t)a1, v201, v176, (uint64_t)&v233);
    unint64_t v185 = a9[1] & v180 | v181 & v177;
    uint64_t v186 = a9[2] & v180 | v181 & v178;
    unint64_t v187 = a9[3] & v180;
    v231.i64[0] = *a9 & v180 | v181 & v175;
    v231.i64[1] = v185;
    *(void *)&unsigned long long v232 = v186;
    *((void *)&v232 + 1) = v187 | *((void *)&v178 + 1) & v181;
    fiat_p256_cmovznz((uint64_t)a2, v201, v174, (uint64_t)&v231);
    int8x16_t v188 = (int8x16_t)vdupq_n_s64(v181);
    int8x16_t v189 = (int8x16_t)vdupq_n_s64(v180);
    int8x16_t v190 = vorrq_s8(vandq_s8(v229, v188), vandq_s8(*v179, v189));
    int8x16_t v191 = vorrq_s8(vandq_s8(v230, v188), vandq_s8(v179[1], v189));
    int8x16_t v229 = v190;
    int8x16_t v230 = v191;
    *(void *)&double result = fiat_p256_cmovznz((uint64_t)a3, v201, (uint64_t)a6, (uint64_t)&v229).u64[0];
  }
  return result;
}

uint64_t *fiat_p256_point_double(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v251 = v10;
  long long v252 = v10;
  *(_OWORD *)uint64_t v250 = v10;
  *(_OWORD *)&v250[16] = v10;
  *(_OWORD *)unint64_t v249 = v10;
  *(_OWORD *)&v249[16] = v10;
  v243[0] = v10;
  v243[1] = v10;
  fiat_p256_square((uint64_t *)&v251, a6);
  fiat_p256_square((uint64_t *)v250, a5);
  fiat_p256_mul((uint64_t *)v249, a4, (unint64_t *)v250);
  unint64_t v13 = *a4;
  unint64_t v14 = a4[1];
  long long v15 = v251;
  uint64_t v17 = *a4 - v251;
  BOOL v18 = __CFADD__(*((void *)&v251 + 1), -(uint64_t)((*a4 - __PAIR128__(v16, v251)) >> 64));
  uint64_t v19 = *((void *)&v251 + 1) + -(uint64_t)((*a4 - __PAIR128__(v16, v251)) >> 64);
  uint64_t v20 = v18;
  uint64_t v21 = v14 - v19;
  long long v22 = v252;
  BOOL v18 = __CFADD__((void)v252, -(uint64_t)((v14 - __PAIR128__(v20, v19)) >> 64));
  uint64_t v23 = v252 + -(uint64_t)((v14 - __PAIR128__(v20, v19)) >> 64);
  uint64_t v24 = v18;
  unint64_t v25 = a4[2];
  unint64_t v26 = a4[3];
  uint64_t v27 = v25 - v23;
  BOOL v18 = __CFADD__(*((void *)&v252 + 1), -(uint64_t)((v25 - __PAIR128__(v24, v23)) >> 64));
  unint64_t v28 = *((void *)&v252 + 1) + -(uint64_t)((v25 - __PAIR128__(v24, v23)) >> 64);
  uint64_t v29 = v18;
  unsigned long long v30 = v26 - __PAIR128__(v29, v28);
  uint64_t v31 = __CFADD__(v17, *((void *)&v30 + 1)) + v21;
  uint64_t v32 = __CFADD__(__CFADD__(v17, *((void *)&v30 + 1)), v21) | __CFADD__(DWORD2(v30), v31);
  uint64_t v245 = v17 + *((void *)&v30 + 1);
  uint64_t v246 = DWORD2(v30) + v31;
  uint64_t v247 = v32 + v27;
  uint64_t v248 = v30 + __CFADD__(v32, v27) + (*((void *)&v30 + 1) & 0xFFFFFFFF00000001);
  BOOL v18 = __CFADD__((void)v251, v13);
  uint64_t v33 = v251 + v13;
  BOOL v35 = v18;
  BOOL v18 = __CFADD__(v18, v14);
  unint64_t v34 = v35 + v14;
  uint64_t v36 = v18;
  unint64_t v37 = v252 + v25;
  BOOL v38 = __CFADD__((void)v252, v25);
  unint64_t v39 = *((void *)&v252 + 1) + v26;
  BOOL v40 = __CFADD__(*((void *)&v252 + 1), v26);
  unint64_t v42 = v34 + *((void *)&v251 + 1);
  BOOL v18 = __CFADD__(__CFADD__(v34, *((void *)&v251 + 1)), v37) | __CFADD__(v36, (__PAIR128__(v37, v34)+ *((unint64_t *)&v251 + 1)) >> 64);
  unint64_t v41 = v36 + ((__PAIR128__(v37, v34) + *((unint64_t *)&v251 + 1)) >> 64);
  unint64_t v44 = v18 + v39;
  BOOL v18 = __CFADD__(v18, v39) | __CFADD__(v38, v44);
  unint64_t v43 = v38 + v44;
  if (v18) {
    unint64_t v45 = v40 + 1;
  }
  else {
    unint64_t v45 = v40;
  }
  unsigned long long v46 = v42 - __PAIR128__(v26, (1 - __CFADD__(v33, 1)));
  unint64_t v47 = v43
      - -(uint64_t)((v41
                                   - __PAIR128__(0xFFFFFFFF00000001, (1 - (__CFADD__((void)v46, 0xFFFFFFFF00000001) + BYTE8(v46))))) >> 64);
  uint64_t v48 = -(uint64_t)(v45
                 + (v45 < (1
                                          - (__CFADD__(v47, 0xFFFFFFFFLL)
                                           + ((v43
                                             - __PAIR128__(DWORD2(v30), -(uint64_t)((v41- __PAIR128__(0xFFFFFFFF00000001, (1- (__CFADD__((void)v46, 0xFFFFFFFF00000001)+ BYTE8(v46))))) >> 64))) >> 64)))));
  if ((_BYTE)v48) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = -1;
  }
  if ((_BYTE)v48) {
    uint64_t v50 = -1;
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = v49 & (v33 + 1) | v50 & v33;
  uint64_t v52 = v49 & (v46 - 0xFFFFFFFF) | v50 & v42;
  uint64_t v53 = v49 & (v41 - (1 - (__CFADD__((void)v46, 0xFFFFFFFF00000001) + BYTE8(v46)))) | v50 & v41;
  uint64_t v54 = v49 & (v47 + 0xFFFFFFFF) | v50 & v43;
  *((void *)&v56 + 1) = v52;
  *(void *)&long long v56 = v51;
  uint64_t v55 = v56 >> 63;
  *((void *)&v56 + 1) = v53;
  *(void *)&long long v56 = v52;
  unint64_t v57 = v56 >> 63;
  *((void *)&v56 + 1) = v54;
  *(void *)&long long v56 = v53;
  unint64_t v58 = v56 >> 63;
  unint64_t v59 = v57 - (1 - __CFADD__(v55, 0xFFFFFFFF00000000));
  unint64_t v60 = v58
      - -(uint64_t)((v57 - __PAIR128__(v11, (1 - __CFADD__(v55, 0xFFFFFFFF00000000)))) >> 64);
  unsigned __int8 v61 = 1
      - (__CFADD__(v60, 0xFFFFFFFFLL)
       + ((v58
         - __PAIR128__(v12, -(uint64_t)((v57- __PAIR128__(v11, (1 - __CFADD__(v55, 0xFFFFFFFF00000000)))) >> 64))) >> 64));
  if ((v54 < 0) + ((unint64_t)v54 >> 63 < v61)) {
    uint64_t v62 = 0;
  }
  else {
    uint64_t v62 = -1;
  }
  if ((v54 < 0) + ((unint64_t)v54 >> 63 < v61)) {
    uint64_t v63 = -1;
  }
  else {
    uint64_t v63 = 0;
  }
  uint64_t v64 = v62 & ((2 * v51) | 1) | v63 & (2 * v51);
  uint64_t v65 = v62 & (v55 - 0x100000000) | v63 & v55;
  uint64_t v66 = v62 & v59;
  uint64_t v67 = v62 & v59 | v63 & v57;
  uint64_t v68 = v62 & (v60 + 0xFFFFFFFF) | v63 & v58;
  BOOL v18 = __CFADD__(v64, v51);
  uint64_t v69 = v64 + v51;
  BOOL v71 = v18;
  BOOL v18 = __CFADD__(v18, v52);
  uint64_t v70 = v71 + v52;
  uint64_t v72 = v18;
  BOOL v18 = __CFADD__(v70, v65);
  uint64_t v73 = v70 + v65;
  BOOL v75 = v18;
  BOOL v18 = __CFADD__(v18, v53);
  uint64_t v74 = v75 + v53;
  v18 |= __CFADD__(v72, v74);
  v74 += v72;
  uint64_t v76 = v18;
  BOOL v18 = __CFADD__(v74, v67);
  uint64_t v77 = v74 + v67;
  BOOL v79 = v18;
  BOOL v18 = __CFADD__(v18, v54);
  uint64_t v78 = v79 + v54;
  v18 |= __CFADD__(v76, v78);
  v78 += v76;
  unint64_t v80 = v18;
  BOOL v18 = __CFADD__(v78, v68);
  uint64_t v81 = v78 + v68;
  if (v18) {
    ++v80;
  }
  unsigned long long v82 = (unint64_t)v73 - __PAIR128__(v72, (1 - __CFADD__(v69, 1)));
  unsigned long long v83 = (unint64_t)v81
      - __PAIR128__(v66, -(uint64_t)(((unint64_t)v77- __PAIR128__(v64, (1- (__CFADD__((void)v82, 0xFFFFFFFF00000001)+ BYTE8(v82))))) >> 64));
  if ((_BYTE)v80 + (v80 < (1 - (__CFADD__((void)v83, 0xFFFFFFFFLL) + BYTE8(v83))))) {
    uint64_t v84 = 0;
  }
  else {
    uint64_t v84 = -1;
  }
  v244[0] = v84 & (v69 + 1) | v69 & *((void *)&v83 + 1);
  v244[1] = v84 & (v82 - 0xFFFFFFFF) | *((void *)&v83 + 1) & v73;
  v244[2] = v84 & (v77 - (1 - (__CFADD__((void)v82, 0xFFFFFFFF00000001) + BYTE8(v82)))) | *((void *)&v83 + 1) & v77;
  v244[3] = v84 & (v83 + 0xFFFFFFFF) | *((void *)&v83 + 1) & v81;
  fiat_p256_mul((uint64_t *)v243, (unint64_t *)&v245, v244);
  fiat_p256_square(a1, (unint64_t *)v243);
  uint64_t v85 = *(long long *)v249 >> 63;
  unint64_t v86 = *(long long *)&v249[8] >> 63;
  unint64_t v87 = *(long long *)&v249[16] >> 63;
  unint64_t v89 = v86 - (1 - __CFADD__(v85, 0xFFFFFFFF00000000));
  unint64_t v92 = v87
      - -(uint64_t)((v86 - __PAIR128__(v88, (1 - __CFADD__(v85, 0xFFFFFFFF00000000)))) >> 64);
  uint64_t v91 = (v87
       - __PAIR128__(v90, -(uint64_t)((v86- __PAIR128__(v88, (1 - __CFADD__(v85, 0xFFFFFFFF00000000)))) >> 64))) >> 64;
  unint64_t v93 = v92 + 0xFFFFFFFF;
  unsigned __int8 v94 = 1 - (__CFADD__(v92, 0xFFFFFFFFLL) + v91);
  if ((*(uint64_t *)&v249[24] < 0) + (*(void *)&v249[24] >> 63 < (unint64_t)v94)) {
    uint64_t v95 = 0;
  }
  else {
    uint64_t v95 = -1;
  }
  if ((*(uint64_t *)&v249[24] < 0) + (*(void *)&v249[24] >> 63 < (unint64_t)v94)) {
    uint64_t v96 = -1;
  }
  else {
    uint64_t v96 = 0;
  }
  uint64_t v97 = v95 & ((2 * *(void *)v249) | 1) | v96 & (2 * *(void *)v249);
  uint64_t v98 = v95 & (v85 - 0x100000000) | v96 & v85;
  uint64_t v99 = v95 & v89 | v96 & v86;
  uint64_t v100 = v95 & v93 | v96 & v87;
  *((void *)&v102 + 1) = v98;
  *(void *)&long long v102 = v97;
  uint64_t v101 = v102 >> 63;
  *((void *)&v102 + 1) = v99;
  *(void *)&long long v102 = v98;
  unint64_t v103 = v102 >> 63;
  *((void *)&v102 + 1) = v100;
  *(void *)&long long v102 = v99;
  unint64_t v104 = v102 >> 63;
  unint64_t v105 = v103 - (1 - __CFADD__(v101, 0xFFFFFFFF00000000));
  unsigned long long v106 = v104
       - __PAIR128__(v96, -(uint64_t)((v103- __PAIR128__(v93, (1 - __CFADD__(v101, 0xFFFFFFFF00000000)))) >> 64));
  unint64_t v107 = v106 + 0xFFFFFFFF;
  if ((v100 < 0)
     + ((unint64_t)v100 >> 63 < (1 - (__CFADD__((void)v106, 0xFFFFFFFFLL) + BYTE8(v106)))))
  {
    uint64_t v108 = 0;
  }
  else
  {
    uint64_t v108 = -1;
  }
  uint64_t v109 = ((2 * v97) | 1) & v108 | *((void *)&v106 + 1) & (2 * v97);
  *(void *)&v239[8] = v108 & v105 | *((void *)&v106 + 1) & v103;
  *(void *)&v239[16] = v108 & v107 | *((void *)&v106 + 1) & v104;
  *(void *)uint64_t v239 = v108 & (v101 - 0x100000000) | *((void *)&v106 + 1) & v101;
  *((void *)&v111 + 1) = *(void *)v239;
  *(void *)&long long v111 = v109;
  uint64_t v110 = v111 >> 63;
  unint64_t v112 = *(long long *)v239 >> 63;
  unint64_t v113 = *(long long *)&v239[8] >> 63;
  unint64_t v114 = v112 - (1 - __CFADD__(v110, 0xFFFFFFFF00000000));
  unint64_t v116 = v113
       - -(uint64_t)((v112
                                    - __PAIR128__(v105, (1 - __CFADD__(v110, 0xFFFFFFFF00000000)))) >> 64);
  uint64_t v115 = (v113
        - __PAIR128__(v107, -(uint64_t)((v112- __PAIR128__(v105, (1 - __CFADD__(v110, 0xFFFFFFFF00000000)))) >> 64))) >> 64;
  unint64_t v117 = v116 + 0xFFFFFFFF;
  unsigned __int8 v118 = 1 - (__CFADD__(v116, 0xFFFFFFFFLL) + v115);
  if ((*(uint64_t *)&v239[16] < 0) + (*(void *)&v239[16] >> 63 < (unint64_t)v118)) {
    uint64_t v119 = 0;
  }
  else {
    uint64_t v119 = -1;
  }
  if ((*(uint64_t *)&v239[16] < 0) + (*(void *)&v239[16] >> 63 < (unint64_t)v118)) {
    uint64_t v120 = -1;
  }
  else {
    uint64_t v120 = 0;
  }
  uint64_t v121 = v120 & (2 * v109);
  uint64_t v122 = v119 & (v110 - 0x100000000) | v120 & v110;
  uint64_t v123 = v119 & v114 | v120 & v112;
  uint64_t v124 = v119 & v117 | v120 & v113;
  uint64_t v126 = ((unint64_t)*a1
        - __PAIR128__(((2 * v109) | 1) & v119 | (unint64_t)v121, ((2 * v109) | 1) & v119 | (unint64_t)v121)) >> 64;
  uint64_t v125 = *a1 - (((2 * v109) | 1) & v119 | v121);
  LODWORD(v126) = -(int)v126;
  BOOL v18 = __CFADD__(v122, v126);
  uint64_t v127 = v122 + v126;
  uint64_t v128 = v18;
  uint64_t v129 = a1[1] - v127;
  int v130 = -(int)(((unint64_t)a1[1] - __PAIR128__(v128, v127)) >> 64);
  BOOL v18 = __CFADD__(v123, v130);
  uint64_t v131 = v123 + v130;
  uint64_t v132 = v18;
  uint64_t v133 = a1[2] - v131;
  int v134 = -(int)(((unint64_t)a1[2] - __PAIR128__(v132, v131)) >> 64);
  BOOL v18 = __CFADD__(v124, v134);
  uint64_t v135 = v124 + v134;
  uint64_t v136 = v18;
  unsigned long long v137 = (unint64_t)a1[3] - __PAIR128__(v136, v135);
  *a1 = v125 + *((void *)&v137 + 1);
  a1[1] = DWORD2(v137) + __CFADD__(v125, *((void *)&v137 + 1)) + v129;
  a1[2] = (__CFADD__(__CFADD__(v125, *((void *)&v137 + 1)), v129) | __CFADD__(DWORD2(v137), __CFADD__(v125, *((void *)&v137 + 1))+ v129))+ v133;
  a1[3] = v137
        + __CFADD__(__CFADD__(__CFADD__(v125, *((void *)&v137 + 1)), v129) | __CFADD__(DWORD2(v137), __CFADD__(v125, *((void *)&v137 + 1))+ v129), v133)+ (*((void *)&v137 + 1) & 0xFFFFFFFF00000001);
  long long v138 = *(_OWORD *)v250;
  long long v139 = *(_OWORD *)v250 + v15;
  long long v140 = *(_OWORD *)&v250[16];
  unint64_t v141 = v22
       + (__CFADD__(__CFADD__(*(void *)v250, (void)v15), *(void *)&v250[8]) | __CFADD__(*((void *)&v15 + 1), __CFADD__(*(void *)v250, (void)v15) + *(void *)&v250[8]))
       + *(void *)&v250[16];
  unint64_t v142 = *((void *)&v22 + 1)
       + (__CFADD__(__CFADD__(__CFADD__(*(void *)v250, (void)v15), *(void *)&v250[8]) | __CFADD__(*((void *)&v15 + 1), __CFADD__(*(void *)v250, (void)v15) + *(void *)&v250[8]), (void)v140) | __CFADD__((void)v22, (__CFADD__(__CFADD__(*(void *)v250, (void)v15), *(void *)&v250[8]) | __CFADD__(*((void *)&v15 + 1), __CFADD__(*(void *)v250, (void)v15) + *(void *)&v250[8]))+ (void)v140))+ *(void *)&v250[24];
  if (__CFADD__(__CFADD__(__CFADD__(__CFADD__(*(void *)v250, (void)v15), *(void *)&v250[8]) | __CFADD__(*((void *)&v15 + 1), __CFADD__(*(void *)v250, (void)v15) + *(void *)&v250[8]), *(void *)&v250[16]) | __CFADD__((void)v22, (__CFADD__(__CFADD__(*(void *)v250, (void)v15), *(void *)&v250[8]) | __CFADD__(*((void *)&v15 + 1), __CFADD__(*(void *)v250, (void)v15)+ *(void *)&v250[8]))+ *(void *)&v250[16]), *(void *)&v250[24]) | __CFADD__(*((void *)&v22 + 1), (__CFADD__(__CFADD__(__CFADD__(*(void *)v250, (void)v15), *(void *)&v250[8]) | __CFADD__(*((void *)&v15 + 1), __CFADD__(*(void *)v250, (void)v15) + *(void *)&v250[8]), *(void *)&v250[16]) | __CFADD__((void)v22,
                                                                                 (__CFADD__(__CFADD__(*(void *)v250, (void)v15), *(void *)&v250[8]) | __CFADD__(*((void *)&v15 + 1), __CFADD__(*(void *)v250, (void)v15) + *(void *)&v250[8]))+ *(void *)&v250[16]))+ *(void *)&v250[24]))unint64_t v143 = 1;
  else {
    unint64_t v143 = 0;
  }
  unsigned long long v144 = *((unint64_t *)&v139 + 1) - __PAIR128__(v117, (1 - __CFADD__((void)v139, 1)));
  unint64_t v146 = v142
       - -(uint64_t)((v141
                                    - __PAIR128__(v120, (1- (__CFADD__((void)v144, 0xFFFFFFFF00000001)+ BYTE8(v144))))) >> 64);
  uint64_t v145 = (v142
        - __PAIR128__(v121, -(uint64_t)((v141- __PAIR128__(v120, (1- (__CFADD__((void)v144, 0xFFFFFFFF00000001)+ BYTE8(v144))))) >> 64))) >> 64;
  unint64_t v147 = v146 + 0xFFFFFFFF;
  uint64_t v148 = -(uint64_t)(v143 + (v143 < (1 - (__CFADD__(v146, 0xFFFFFFFFLL) + v145))));
  BOOL v149 = v148 == 0;
  if ((_BYTE)v148) {
    uint64_t v150 = 0;
  }
  else {
    uint64_t v150 = -1;
  }
  if (v149) {
    uint64_t v151 = 0;
  }
  else {
    uint64_t v151 = -1;
  }
  uint64_t v152 = v150 & (v139 + 1) | v151 & v139;
  uint64_t v153 = v150 & (v144 - 0xFFFFFFFF) | v151 & *((void *)&v139 + 1);
  uint64_t v154 = v150 & (v141 - (1 - (__CFADD__((void)v144, 0xFFFFFFFF00000001) + BYTE8(v144)))) | v151 & v141;
  uint64_t v238 = v150 & v147 | v151 & v142;
  unint64_t v155 = a6[1];
  unint64_t v157 = (*a6 + *(_OWORD *)a5) >> 64;
  unint64_t v156 = *a6 + *a5;
  BOOL v158 = __CFADD__(__CFADD__(*a6, *a5), a5[1]);
  unint64_t v159 = a5[2];
  unint64_t v160 = a5[3];
  unint64_t v161 = a6[2];
  unint64_t v162 = a6[3];
  BOOL v18 = __CFADD__(v161, v159);
  unint64_t v163 = v161 + v159;
  uint64_t v164 = v18;
  BOOL v18 = __CFADD__(v162, v160);
  unint64_t v165 = v162 + v160;
  uint64_t v166 = v18;
  unint64_t v168 = v157 + v155;
  BOOL v18 = __CFADD__(__CFADD__(v157, v155), v163) | __CFADD__(v158, (__PAIR128__(v163, v157) + v155) >> 64);
  unint64_t v167 = v158 + ((__PAIR128__(v163, v157) + v155) >> 64);
  uint64_t v169 = v164 + v18 + v165;
  if (__CFADD__(v18, v165) | __CFADD__(v164, v18 + v165)) {
    unint64_t v170 = v166 + 1;
  }
  else {
    unint64_t v170 = v166;
  }
  unsigned long long v171 = v168 - __PAIR128__(v166, (1 - __CFADD__(v156, 1)));
  unsigned long long v172 = (unint64_t)v169
       - __PAIR128__(v151, -(uint64_t)((v167- __PAIR128__(v147, (1- (__CFADD__((void)v171, 0xFFFFFFFF00000001)+ BYTE8(v171))))) >> 64));
  if ((_BYTE)v170 + (v170 < (1 - (__CFADD__((void)v172, 0xFFFFFFFFLL) + BYTE8(v172))))) {
    uint64_t v173 = 0;
  }
  else {
    uint64_t v173 = -1;
  }
  uint64_t v245 = v173 & (v156 + 1) | *((void *)&v172 + 1) & v156;
  uint64_t v246 = v173 & (v171 - 0xFFFFFFFF) | *((void *)&v172 + 1) & v168;
  uint64_t v247 = v173 & (v167 - (1 - (__CFADD__((void)v171, 0xFFFFFFFF00000001) + BYTE8(v171)))) | *((void *)&v172 + 1) & v167;
  uint64_t v248 = v173 & (v172 + 0xFFFFFFFF) | *((void *)&v172 + 1) & v169;
  fiat_p256_square(a3, (unint64_t *)&v245);
  unint64_t v177 = *a3 - v152;
  unint64_t v178 = a3[1] - (v153 + -(uint64_t)(((unint64_t)*a3 - __PAIR128__(v176, v152)) >> 64));
  BOOL v18 = __CFADD__(v154, -(uint64_t)(((unint64_t)a3[1]- __PAIR128__(v153+ (unint64_t)-(uint64_t)(((unint64_t)*a3- __PAIR128__(v176, v152)) >> 64), v153+ (unint64_t)-(uint64_t)(((unint64_t)*a3- __PAIR128__(v176, v152)) >> 64))) >> 64));
  uint64_t v179 = v154
       + -(uint64_t)(((unint64_t)a3[1]
                                    - __PAIR128__(v153+ (unint64_t)-(uint64_t)(((unint64_t)*a3- __PAIR128__(v176, v152)) >> 64), v153+ (unint64_t)-(uint64_t)(((unint64_t)*a3- __PAIR128__(v176, v152)) >> 64))) >> 64);
  uint64_t v180 = v18;
  uint64_t v181 = a3[2] - v179;
  BOOL v18 = __CFADD__(v238, -(uint64_t)(((unint64_t)a3[2] - __PAIR128__(v180, v179)) >> 64));
  uint64_t v182 = v238 + -(uint64_t)(((unint64_t)a3[2] - __PAIR128__(v180, v179)) >> 64);
  uint64_t v183 = v18;
  unsigned long long v184 = (unint64_t)a3[3] - __PAIR128__(v183, v182);
  unint64_t v185 = __CFADD__(v177, *((void *)&v184 + 1)) + v178;
  uint64_t v186 = __CFADD__(__CFADD__(v177, *((void *)&v184 + 1)), v178) | __CFADD__(DWORD2(v184), v185);
  *a3 = v177 + *((void *)&v184 + 1);
  a3[1] = DWORD2(v184) + v185;
  a3[2] = v186 + v181;
  a3[3] = v184 + __CFADD__(v186, v181) + (*((void *)&v184 + 1) & 0xFFFFFFFF00000001);
  unint64_t v187 = a1[1];
  unint64_t v188 = v109 - *a1;
  BOOL v18 = __CFADD__(v187, -(uint64_t)(((unint64_t)v109 - __PAIR128__(v186 + v181, *a1)) >> 64));
  unint64_t v189 = v187 + -(uint64_t)(((unint64_t)v109 - __PAIR128__(v186 + v181, *a1)) >> 64);
  uint64_t v190 = v18;
  unint64_t v191 = *(void *)v239 - v189;
  unint64_t v192 = a1[2];
  unint64_t v193 = a1[3];
  BOOL v18 = __CFADD__(v192, -(uint64_t)((*(unint64_t *)v239 - __PAIR128__(v190, v189)) >> 64));
  unint64_t v194 = v192 + -(uint64_t)((*(unint64_t *)v239 - __PAIR128__(v190, v189)) >> 64);
  uint64_t v195 = v18;
  unint64_t v197 = *(void *)&v239[8] - v194;
  char v196 = (*(unint64_t *)&v239[8] - __PAIR128__(v195, v194)) >> 64;
  BOOL v18 = __CFADD__(v193, -v196);
  unint64_t v198 = v193 + -v196;
  uint64_t v199 = v18;
  unsigned long long v200 = *(unint64_t *)&v239[16] - __PAIR128__(v199, v198);
  unint64_t v201 = __CFADD__(v188, *((void *)&v200 + 1)) + v191;
  uint64_t v202 = __CFADD__(__CFADD__(v188, *((void *)&v200 + 1)), v191) | __CFADD__(DWORD2(v200), v201);
  *a2 = v188 + *((void *)&v200 + 1);
  a2[1] = DWORD2(v200) + v201;
  a2[2] = v202 + v197;
  a2[3] = v200 + __CFADD__(v202, v197) + (*((void *)&v200 + 1) & 0xFFFFFFFF00000001);
  uint64_t v203 = v138 >> 63;
  *((void *)&v205 + 1) = v140;
  *(void *)&long long v205 = *((void *)&v138 + 1);
  unint64_t v204 = v205 >> 63;
  unint64_t v206 = v140 >> 63;
  unint64_t v207 = v206
       - -(uint64_t)((v204
                                    - __PAIR128__(v174, (1 - __CFADD__(v203, 0xFFFFFFFF00000000)))) >> 64);
  unsigned __int8 v208 = 1
       - (__CFADD__(v207, 0xFFFFFFFFLL)
        + ((v206
          - __PAIR128__(v175, -(uint64_t)((v204- __PAIR128__(v174, (1 - __CFADD__(v203, 0xFFFFFFFF00000000)))) >> 64))) >> 64));
  if ((v140 < 0) + (*((void *)&v140 + 1) >> 63 < (unint64_t)v208)) {
    uint64_t v209 = 0;
  }
  else {
    uint64_t v209 = -1;
  }
  if ((v140 < 0) + (*((void *)&v140 + 1) >> 63 < (unint64_t)v208)) {
    uint64_t v210 = -1;
  }
  else {
    uint64_t v210 = 0;
  }
  *(void *)uint64_t v250 = v209 & ((2 * v138) | 1) | v210 & (2 * v138);
  *(void *)&v250[8] = v209 & (v203 - 0x100000000) | v210 & v203;
  *(void *)&v250[16] = v209 & (v204 - (1 - __CFADD__(v203, 0xFFFFFFFF00000000))) | v210 & v204;
  *(void *)&v250[24] = v209 & (v207 + 0xFFFFFFFF) | v210 & v206;
  fiat_p256_square((uint64_t *)v250, (unint64_t *)v250);
  double result = fiat_p256_mul(a2, (unint64_t *)v243, (unint64_t *)a2);
  uint64_t v212 = *(long long *)v250 >> 63;
  unint64_t v213 = *(long long *)&v250[8] >> 63;
  unint64_t v214 = *(long long *)&v250[16] >> 63;
  unint64_t v216 = v213 - (1 - __CFADD__(v212, 0xFFFFFFFF00000000));
  unint64_t v218 = v214
       - -(uint64_t)((v213
                                    - __PAIR128__(v215, (1 - __CFADD__(v212, 0xFFFFFFFF00000000)))) >> 64);
  unsigned __int8 v219 = 1
       - (__CFADD__(v218, 0xFFFFFFFFLL)
        + ((v214
          - __PAIR128__(v217, -(uint64_t)((v213- __PAIR128__(v215, (1 - __CFADD__(v212, 0xFFFFFFFF00000000)))) >> 64))) >> 64));
  if ((*(uint64_t *)&v250[24] < 0) + (*(void *)&v250[24] >> 63 < (unint64_t)v219)) {
    uint64_t v220 = 0;
  }
  else {
    uint64_t v220 = -1;
  }
  if ((*(uint64_t *)&v250[24] < 0) + (*(void *)&v250[24] >> 63 < (unint64_t)v219)) {
    uint64_t v221 = -1;
  }
  else {
    uint64_t v221 = 0;
  }
  uint64_t v222 = v220 & (v212 - 0x100000000) | v221 & v212;
  uint64_t v223 = v220 & v216 | v221 & v213;
  uint64_t v224 = v220 & (v218 + 0xFFFFFFFF) | v221 & v214;
  uint64_t v225 = *a2 - (v220 & ((2 * *(void *)v250) | 1) | v221 & (2 * *(void *)v250));
  int v226 = -(int)(((unint64_t)*a2
               - __PAIR128__(*a2, v220 & ((2 * *(void *)v250) | 1) | v221 & (unint64_t)(2 * *(void *)v250))) >> 64);
  BOOL v18 = __CFADD__(v222, v226);
  uint64_t v227 = v222 + v226;
  uint64_t v228 = v18;
  uint64_t v229 = a2[1] - v227;
  int v230 = -(int)(((unint64_t)a2[1] - __PAIR128__(v228, v227)) >> 64);
  BOOL v18 = __CFADD__(v223, v230);
  uint64_t v231 = v223 + v230;
  uint64_t v232 = v18;
  uint64_t v233 = a2[2] - v231;
  int v234 = -(int)(((unint64_t)a2[2] - __PAIR128__(v232, v231)) >> 64);
  BOOL v18 = __CFADD__(v224, v234);
  uint64_t v235 = v224 + v234;
  uint64_t v236 = v18;
  unsigned long long v237 = (unint64_t)a2[3] - __PAIR128__(v236, v235);
  *a2 = v225 + *((void *)&v237 + 1);
  a2[1] = DWORD2(v237) + __CFADD__(v225, *((void *)&v237 + 1)) + v229;
  a2[2] = (__CFADD__(__CFADD__(v225, *((void *)&v237 + 1)), v229) | __CFADD__(DWORD2(v237), __CFADD__(v225, *((void *)&v237 + 1))+ v229))+ v233;
  a2[3] = v237
        + __CFADD__(__CFADD__(__CFADD__(v225, *((void *)&v237 + 1)), v229) | __CFADD__(DWORD2(v237), __CFADD__(v225, *((void *)&v237 + 1))+ v229), v233)+ (*((void *)&v237 + 1) & 0xFFFFFFFF00000001);
  return result;
}

int8x16_t fiat_p256_cmovznz(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = -1;
  }
  if (a2) {
    unint64_t v5 = -1;
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = *(void *)(a4 + 24) & v5 | *(void *)(a3 + 24) & v4;
  int8x16_t v7 = vandq_s8(*(int8x16_t *)(a4 + 8), (int8x16_t)vdupq_n_s64(v5));
  int8x16_t v8 = vandq_s8(*(int8x16_t *)(a3 + 8), (int8x16_t)vdupq_n_s64(v4));
  *(void *)a1 = v4 & *(void *)a3 | v5 & *(void *)a4;
  int8x16_t result = vorrq_s8(v7, v8);
  *(int8x16_t *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = result;
  *(void *)(a1 + 24) = v6;
  return result;
}

double fiat_p256_select_point_affine(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = 0;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  uint64_t v7 = (uint64_t)(a3 + 2);
  uint64_t v8 = a1 - 1;
  do
  {
    fiat_p256_cmovznz((uint64_t)a3, v6 ^ v8, a2, (uint64_t)a3);
    fiat_p256_cmovznz(v7, v6++ ^ v8, a2 + 32, v7);
    a2 += 64;
  }
  while (v6 != 15);

  *(void *)&double result = fiat_p256_cmovznz((uint64_t)(a3 + 4), a1, (uint64_t)(a3 + 4), (uint64_t)&fiat_p256_one).u64[0];
  return result;
}

uint64_t BIO_set_fd(BIO *a1, int iarg, int a3)
{
  return BIO_int_ctrl(a1, 104, a3, iarg);
}

uint64_t BIO_get_fd(BIO *a1, void *parg)
{
  return BIO_ctrl(a1, 105, 0, parg);
}

BIO *__cdecl BIO_new_fp(FILE *stream, int close_flag)
{
  unint64_t v4 = BIO_new(&methods_filep);
  unint64_t v5 = v4;
  if (v4) {
    BIO_ctrl(v4, 106, close_flag, stream);
  }
  return v5;
}

BIO_METHOD *BIO_s_file(void)
{
  return (BIO_METHOD *)&methods_filep;
}

uint64_t BIO_set_fp(BIO *a1, void *parg, int a3)
{
  return BIO_ctrl(a1, 106, a3, parg);
}

uint64_t file_write(uint64_t a1, void *__ptr, unsigned int a3)
{
  if (!*(_DWORD *)(a1 + 16)) {
    return 0;
  }
  LODWORD(result) = fwrite(__ptr, (int)a3, 1uLL, *(FILE **)(a1 + 40));
  if ((int)result <= 0) {
    return result;
  }
  else {
    return a3;
  }
}

size_t file_read(uint64_t a1, void *__ptr, int a3)
{
  if (!*(_DWORD *)(a1 + 16)) {
    return 0;
  }
  size_t v4 = fread(__ptr, 1uLL, a3, *(FILE **)(a1 + 40));
  if (!v4 && ferror(*(FILE **)(a1 + 40)))
  {
    ERR_put_error(2, 0, 0, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/file.c", 161);
    ERR_put_error(17, 0, 2, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/file.c", 162);
    return 0xFFFFFFFFLL;
  }
  return v4;
}

char *file_gets(uint64_t a1, char *a2, int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = fgets(a2, a3, *(FILE **)(a1 + 40));
  if (result) {
    return (char *)strlen(a2);
  }
  *a2 = 0;
  return result;
}

uint64_t file_ctrl(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v4 = a3;
  uint64_t result = 0;
  if (a2 <= 105)
  {
    switch(a2)
    {
      case 1:
        uint64_t v4 = 0;
        goto LABEL_14;
      case 2:
        LODWORD(result) = feof(*(FILE **)(a1 + 40));
        return (int)result;
      case 3:
        goto LABEL_8;
      case 8:
        return *(int *)(a1 + 20);
      case 9:
        *(_DWORD *)(a1 + 2std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = a3;
        return 1;
      case 11:
        return fflush(*(FILE **)(a1 + 40)) == 0;
      default:
        return result;
    }
  }
  if (a2 > 107)
  {
    if (a2 != 108)
    {
      if (a2 == 128)
      {
LABEL_14:
        LODWORD(result) = fseek(*(FILE **)(a1 + 40), v4, 0);
        return (int)result;
      }
      else if (a2 == 133)
      {
LABEL_8:
        JUMPOUT(0x1BA9E5460);
      }
      return result;
    }
    file_free(a1);
    *(_DWORD *)(a1 + 2std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v4 & 1;
    if ((v4 & 8) != 0)
    {
      if ((v4 & 2) != 0) {
        long long v9 = "ab+";
      }
      else {
        long long v9 = "ab";
      }
    }
    else
    {
      uint64_t v8 = v4 & 6;
      if (v8 == 6)
      {
        long long v9 = "rb+";
      }
      else
      {
        if ((v4 & 4) != 0) {
          long long v9 = "wb";
        }
        else {
          long long v9 = "rb";
        }
        if (!v8)
        {
          int v11 = 100;
          int v12 = 235;
LABEL_36:
          ERR_put_error(17, 0, v11, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/file.c", v12);
          return 0;
        }
      }
    }
    long long v10 = fopen(a4, v9);
    if (v10)
    {
      *(void *)(a1 + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v10;
      uint64_t result = 1;
      *(_DWORD *)(a1 + 16) = 1;
      return result;
    }
    ERR_put_error(2, 0, 0, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/bio/file.c", 241);
    ERR_add_error_data(5, "fopen('", a4, "','", v9, "')");
    int v11 = 2;
    int v12 = 243;
    goto LABEL_36;
  }
  if (a2 == 106)
  {
    file_free(a1);
    *(void *)(a1 + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = a4;
    uint64_t result = 1;
    *(_DWORD *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + 2std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v4 & 1;
  }
  else
  {
    if (a4) {
      *(void *)a4 = *(void *)(a1 + 40);
    }
    return 1;
  }
  return result;
}

uint64_t file_free(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_DWORD *)(a1 + 16))
    {
      uint64_t v2 = *(FILE **)(a1 + 40);
      if (v2)
      {
        fclose(v2);
        *(void *)(a1 + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0;
      }
    }
    *(_DWORD *)(a1 + 16) = 0;
  }
  return 1;
}

BOOL BIO_hexdump(BIO *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  indent[1] = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  BIGNUM b = a1;
  indent[0] = a4;
  __int16 v22 = -21846;
  unint64_t data = 0xAAAAAAAAAAAAAAAALL;
  if (!a3) {
    return 1;
  }
  int v6 = 0;
  BOOL v7 = 0;
  for (i = 0; i != a3; BOOL v7 = i >= a3)
  {
    if (!v6)
    {
      BIO_indent(b, indent[0], -1);
      LOBYTE(data) = hexbyte_hextable[DWORD2(v19) >> 28];
      BYTE1(data) = hexbyte_hextable[(*((void *)&v19 + 1) >> 24) & 0xFLL];
      BYTE2(data) = hexbyte_hextable[(*((void *)&v19 + 1) >> 20) & 0xFLL];
      BYTE3(data) = hexbyte_hextable[(*((void *)&v19 + 1) >> 16) & 0xFLL];
      BYTE4(data) = hexbyte_hextable[WORD4(v19) >> 12];
      BYTE5(data) = hexbyte_hextable[(*((void *)&v19 + 1) >> 8) & 0xFLL];
      BYTE6(data) = hexbyte_hextable[BYTE8(v19) >> 4];
      HIBYTE(data) = hexbyte_hextable[BYTE8(v19) & 0xF];
      __int16 v22 = 8224;
      if (BIO_write(b, &data, 10) < 0) {
        break;
      }
      int v6 = DWORD1(v19);
    }
    unint64_t v9 = *(unsigned __int8 *)(a2 + i);
    LOBYTE(data) = hexbyte_hextable[v9 >> 4];
    BYTE1(data) = hexbyte_hextable[v9 & 0xF];
    BYTE2(data) = 32;
    if (v6 == 15)
    {
      *(_WORD *)((char *)&data + 3) = 31776;
      int v10 = 5;
    }
    else if (v6 == 7)
    {
      BYTE3(data) = 32;
      int v10 = 4;
    }
    else
    {
      int v10 = 3;
    }
    if (BIO_write(b, &data, v10) < 0) {
      break;
    }
    int v11 = *(unsigned __int8 *)(a2 + i);
    if ((v11 - 127) < 0xFFFFFFA1) {
      LOBYTE(v11) = 46;
    }
    *((unsigned char *)&b + DWORD1(v19) + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v11;
    int v6 = DWORD1(v19) + 1;
    DWORD1(v19) = v6;
    ++*((void *)&v19 + 1);
    if (v6 == 16)
    {
      LOWORD(v19) = 2684;
      if (BIO_write(b, &v18, 18) < 0) {
        break;
      }
      int v6 = 0;
      DWORD1(v19) = 0;
    }
    ++i;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v12 = DWORD1(v19);
  if (!DWORD1(v19)) {
    return 1;
  }
  qmemcpy(&data, "    |", 5);
  if (DWORD1(v19) <= 0xF)
  {
    for (unsigned int j = DWORD1(v19); j < 0x10; DWORD1(v19) = j)
    {
      int v14 = j == 15 ? 5 : 3;
      int v15 = j == 7 ? 4 : v14;
      if (BIO_write(b, &data, v15) < 0) {
        return 0;
      }
      unsigned int j = DWORD1(v19) + 1;
    }
  }
  *((unsigned char *)&v18 + v12) = 124;
  *((unsigned char *)&v18 + (v12 + OPENSSL_free(*((void **)this + 1)) = 10;
  return (BIO_write(b, &v18, v12 + 2) & 0x80000000) == 0;
}

void HMAC_CTX_init(HMAC_CTX *ctx)
{
  ctx->mint d = 0;
  p_md_EVP_MD_CTX ctx = &ctx->md_ctx;
  EVP_MD_CTX_init(&ctx->i_ctx);
  EVP_MD_CTX_init(&ctx->o_ctx);

  EVP_MD_CTX_init(p_md_ctx);
}

void HMAC_CTX_cleanup(HMAC_CTX *ctx)
{
  EVP_MD_CTX_cleanup(&ctx->i_ctx);
  EVP_MD_CTX_cleanup(&ctx->o_ctx);
  EVP_MD_CTX_cleanup(&ctx->md_ctx);

  OPENSSL_cleanse(ctx, 0x68uLL);
}

void HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md, ENGINE *impl)
{
  size_t v6 = *(void *)&len;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (md) {
    unint64_t v9 = md;
  }
  else {
    unint64_t v9 = ctx->md;
  }
  if (!key && v9 == ctx->md) {
    goto LABEL_6;
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  d[6] = v10;
  d[7] = v10;
  d[4] = v10;
  d[5] = v10;
  d[2] = v10;
  d[3] = v10;
  d[0] = v10;
  d[1] = v10;
  long long v25 = v10;
  long long v26 = v10;
  long long v23 = v10;
  long long v24 = v10;
  long long v21 = v10;
  long long v22 = v10;
  *(_OWORD *)mda = v10;
  long long v20 = v10;
  unsigned int s = -1431655766;
  unint64_t v11 = EVP_MD_block_size(v9);
  if (v11 >= 0x81) {
    HMAC_Init_ex_cold_1();
  }
  if (v11 >= v6)
  {
    if (v6) {
      __memcpy_chk();
    }
    unsigned int s = v6;
  }
  else
  {
    if (!EVP_DigestInit_ex(&ctx->md_ctx, v9, impl)
      || !EVP_DigestUpdate(&ctx->md_ctx, key, v6)
      || !EVP_DigestFinal_ex(&ctx->md_ctx, mda, &s))
    {
      return;
    }
    LODWORD(v6) = s;
  }
  if (v6 != 128) {
    bzero(&mda[v6], 128 - v6);
  }
  uint64_t v12 = 0;
  v13.i64[0] = 0x3636363636363636;
  v13.i64[1] = 0x3636363636363636;
  do
  {
    d[v12] = veorq_s8(*(int8x16_t *)&mda[v12 * 16], v13);
    ++v12;
  }
  while (v12 != 8);
  if (EVP_DigestInit_ex(&ctx->i_ctx, v9, impl))
  {
    size_t v14 = EVP_MD_block_size(v9);
    if (EVP_DigestUpdate(&ctx->i_ctx, d, v14))
    {
      uint64_t v15 = 0;
      v16.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
      v16.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
      do
      {
        d[v15] = veorq_s8(*(int8x16_t *)&mda[v15 * 16], v16);
        ++v15;
      }
      while (v15 != 8);
      if (EVP_DigestInit_ex(&ctx->o_ctx, v9, impl))
      {
        size_t v17 = EVP_MD_block_size(v9);
        if (EVP_DigestUpdate(&ctx->o_ctx, d, v17))
        {
          ctx->mint d = v9;
LABEL_6:
          EVP_MD_CTX_copy_ex(&ctx->md_ctx, &ctx->i_ctx);
        }
      }
    }
  }
}

void HMAC_Update(HMAC_CTX *ctx, const unsigned __int8 *data, size_t len)
{
}

void HMAC_Final(HMAC_CTX *ctx, unsigned __int8 *md, unsigned int *len)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned int s = -1431655766;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v6;
  long long v12 = v6;
  *(_OWORD *)mda = v6;
  long long v10 = v6;
  p_md_EVP_MD_CTX ctx = &ctx->md_ctx;
  if (!EVP_DigestFinal_ex(&ctx->md_ctx, mda, &s)
    || !EVP_MD_CTX_copy_ex(p_md_ctx, &ctx->o_ctx)
    || !EVP_DigestUpdate(p_md_ctx, mda, s)
    || !EVP_DigestFinal_ex(p_md_ctx, md, len))
  {
    *leuint64_t n = 0;
  }
}

uint64_t HMAC_size(const EVP_MD **a1)
{
  return EVP_MD_size(*a1);
}

uint64_t HMAC_CTX_copy_ex(uint64_t a1, uint64_t a2)
{
  uint64_t result = EVP_MD_CTX_copy_ex((EVP_MD_CTX *)(a1 + 40), (const EVP_MD_CTX *)(a2 + 40));
  if (result)
  {
    uint64_t result = EVP_MD_CTX_copy_ex((EVP_MD_CTX *)(a1 + 72), (const EVP_MD_CTX *)(a2 + 72));
    if (result)
    {
      uint64_t result = EVP_MD_CTX_copy_ex((EVP_MD_CTX *)(a1 + 8), (const EVP_MD_CTX *)(a2 + 8));
      if (result)
      {
        *(void *)a1 = *(void *)a2;
        return 1;
      }
    }
  }
  return result;
}

BOOL SSL_SESSION_to_bytes_for_ticket(uint64_t a1, void *a2, void *a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = v6;
  _OWORD v9[2] = v6;
  v9[0] = v6;
  CBB_zero(v9);
  BOOL v7 = CBB_init((uint64_t)v9, 0x100uLL)
    && bssl::SSL_SESSION_to_bytes_full(a1, (uint64_t *)v9, 1)
    && CBB_finish((uint64_t)v9, a2, a3) != 0;
  CBB_cleanup((uint64_t)v9);
  return v7;
}

void sub_1BA13C8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BIO_METHOD *BIO_s_socket(void)
{
  return (BIO_METHOD *)&methods_sockp;
}

ssize_t sock_write(uint64_t a1, const void *a2, int a3)
{
  EVP_HPKE_KEY_cleanup(a1);
  ssize_t v6 = write(*(_DWORD *)(a1 + 32), a2, a3);
  BIO_clear_retry_flags(a1);
  if ((int)v6 <= 0 && bio_socket_should_retry(v6)) {
    BIO_set_retry_write(a1);
  }
  return v6;
}

void *sock_read(uint64_t a1, void *a2, int a3)
{
  size_t v3 = a2;
  if (a2)
  {
    EVP_HPKE_KEY_cleanup(a1);
    size_t v3 = (void *)read(*(_DWORD *)(a1 + 32), v3, a3);
    BIO_clear_retry_flags(a1);
    if ((int)v3 <= 0)
    {
      if (bio_socket_should_retry(v3)) {
        BIO_set_retry_read(a1);
      }
    }
  }
  return v3;
}

uint64_t sock_ctrl(_DWORD *a1, int a2, int a3, _DWORD *a4)
{
  if (a2 <= 10)
  {
    if (a2 == 8) {
      return (int)a1[5];
    }
    if (a2 != 9) {
      return 0;
    }
    a1[5] = a3;
    return 1;
  }
  if (a2 == 11) {
    return 1;
  }
  if (a2 != 105)
  {
    if (a2 == 104)
    {
      if (a1[5])
      {
        if (a1[4]) {
          close(a1[8]);
        }
        a1[4] = 0;
        a1[6] = 0;
      }
      a1[8] = *a4;
      uint64_t result = 1;
      a1[4] = 1;
      a1[5] = a3;
      return result;
    }
    return 0;
  }
  if (!a1[4]) {
    return -1;
  }
  if (a4) {
    *a4 = a1[8];
  }
  return (int)a1[8];
}

uint64_t sock_free(_DWORD *a1)
{
  if (a1[5])
  {
    if (a1[4]) {
      close(a1[8]);
    }
    a1[4] = 0;
    a1[6] = 0;
  }
  return 1;
}

unint64_t bn_mont_n0(unint64_t **a1)
{
  if (BN_is_zero((uint64_t)a1)) {
    bn_mont_n0_cold_6();
  }
  if (BN_is_negative((uint64_t)a1)) {
    bn_mont_n0_cold_5();
  }
  if (!BN_is_odd((uint64_t)a1)) {
    bn_mont_n0_cold_1();
  }
  unint64_t v2 = **a1;
  if ((v2 & 1) == 0) {
    bn_mont_n0_cold_2();
  }
  unint64_t v3 = 0;
  uint64_t v4 = 64;
  uint64_t v5 = 1;
  do
  {
    uint64_t v6 = 1 << v4;
    if ((v4 & 0x40) != 0) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = 1 << v4;
    }
    if ((v4 & 0x40) == 0) {
      uint64_t v6 = 0;
    }
    if (v6 != v5 - (((v3 * (unsigned __int128)v2) >> 64) + (v3 * v2 != 0)) || v7 != -(uint64_t)(v3 * v2)) {
      bn_mont_n0_cold_4();
    }
    uint64_t v9 = -(v5 & 1);
    uint64_t v5 = (v2 & v9 & v5) + ((v2 & v9 ^ v5) >> 1);
    unint64_t result = v9 & 0x8000000000000000 | (v3 >> 1);
    unint64_t v3 = result;
    --v4;
  }
  while (v4);
  if (-(uint64_t)(result * v2) ^ 1 | (unint64_t)(v5
                                                      - (((result * (unsigned __int128)v2) >> 64)
                                                       + (result * v2 != 0))))
    bn_mont_n0_cold_3();
  return result;
}

uint64_t bn_mont_ctx_set_RR_consttime(BIGNUM *a1, BN_CTX *a2)
{
  uint64_t v4 = a1 + 1;
  if (BN_is_zero((uint64_t)&a1[1])) {
    bn_mont_ctx_set_RR_consttime_cold_7();
  }
  if (BN_is_negative((uint64_t)v4)) {
    bn_mont_ctx_set_RR_consttime_cold_6();
  }
  if (!BN_is_odd((uint64_t)v4)) {
    bn_mont_ctx_set_RR_consttime_cold_1();
  }
  if (bn_minimal_width((uint64_t)v4) != a1[1].top) {
    bn_mont_ctx_set_RR_consttime_cold_5();
  }
  unsigned int v5 = BN_num_bits(v4);
  if (v5 == 1)
  {
    BN_zero((uint64_t)a1);
LABEL_16:
    unint64_t top = a1[1].top;
    return bn_resize_words((uint64_t)a1, top);
  }
  else
  {
    unsigned int v6 = v5;
    if (!v5) {
      bn_mont_ctx_set_RR_consttime_cold_4();
    }
    int v7 = a1[1].top;
    if (v7 << 6 < v5) {
      bn_mont_ctx_set_RR_consttime_cold_2();
    }
    if (BN_set_bit(a1, v5 - 1) && bn_mod_lshift_consttime(a1, a1, v7 - v6 + (v7 << 6) + 1, (uint64_t)v4, a2))
    {
      if (v7 != a1[1].top) {
        bn_mont_ctx_set_RR_consttime_cold_3();
      }
      int v8 = 6;
      while (BN_mod_mul_montgomery(a1, a1, a1, (BN_MONT_CTX *)a1, a2))
      {
        if (!--v8) {
          goto LABEL_16;
        }
      }
    }
    return 0;
  }
}

int RSA_padding_add_PKCS1_type_1(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl)
{
  if (*(void *)&tlen <= 0xAuLL)
  {
    int v4 = 126;
    int v5 = 78;
LABEL_5:
    ERR_put_error(4, 0, v4, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/rsa/padding.c", v5);
    return 0;
  }
  size_t v6 = *(void *)&fl;
  uint64_t v7 = *(void *)&tlen;
  if ((unint64_t)(*(void *)&tlen - 11) < *(void *)&fl)
  {
    int v4 = 118;
    int v5 = 83;
    goto LABEL_5;
  }
  *(_WORD *)to = 256;
  if (*(void *)&tlen - 3 != *(void *)&fl) {
    memset(to + 2, 255, *(void *)&tlen - 3 - *(void *)&fl);
  }
  to[~v6 + v7] = 0;
  if (v6) {
    memcpy(&to[v7 - v6], f, v6);
  }
  return 1;
}

int RSA_padding_check_PKCS1_type_1(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl, int rsa_len)
{
  if (*(void *)&rsa_len <= 1uLL)
  {
    int v5 = 116;
    int v6 = 101;
LABEL_11:
    ERR_put_error(4, 0, v5, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/rsa/padding.c", v6);
    return 0;
  }
  if (**(unsigned char **)&fl || *(unsigned char *)(*(void *)&fl + 1) != 1)
  {
    int v5 = 107;
    int v6 = 107;
    goto LABEL_11;
  }
  if (*(void *)&rsa_len < 3uLL) {
    goto LABEL_14;
  }
  uint64_t v7 = *(size_t **)&tlen;
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)&rsa_len - 2;
  while (*(unsigned __int8 *)(*(void *)&fl + v8 + 2) == 255)
  {
    if (v9 == ++v8) {
      goto LABEL_14;
    }
  }
  if (*(unsigned char *)(*(void *)&fl + v8 + 2))
  {
    int v5 = 102;
    int v6 = 119;
    goto LABEL_11;
  }
  if (v9 == v8)
  {
LABEL_14:
    int v5 = 131;
    int v6 = 125;
    goto LABEL_11;
  }
  if ((unint64_t)(v8 + 2) <= 9)
  {
    int v5 = 103;
    int v6 = 130;
    goto LABEL_11;
  }
  size_t v11 = *(void *)&rsa_len - v8 - 3;
  if (v11 > (unint64_t)f)
  {
    int v5 = 113;
    int v6 = 138;
    goto LABEL_11;
  }
  if (*(void *)&rsa_len - 3 != v8) {
    memcpy(to, (const void *)(*(void *)&fl + v8 + 3), v11);
  }
  *uint64_t v7 = v11;
  return 1;
}

int RSA_padding_add_none(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl)
{
  if (*(void *)&fl > *(void *)&tlen)
  {
    int v4 = 114;
    int v5 = 150;
LABEL_5:
    ERR_put_error(4, 0, v4, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/rsa/padding.c", v5);
    return 0;
  }
  if (*(void *)&fl < *(void *)&tlen)
  {
    int v4 = 116;
    int v5 = 155;
    goto LABEL_5;
  }
  if (*(void *)&fl) {
    memcpy(to, f, *(size_t *)&fl);
  }
  return 1;
}

uint64_t RSA_padding_add_PKCS1_PSS_mgf1(const RSA *a1, unsigned __int8 *a2, const void *a3, EVP_MD *md, const EVP_MD *a5, unsigned int a6)
{
  if (a5) {
    size_t v11 = a5;
  }
  else {
    size_t v11 = md;
  }
  size_t v12 = EVP_MD_size(md);
  if (BN_is_zero(a1->version))
  {
    int v13 = 120;
    int v14 = 329;
LABEL_38:
    ERR_put_error(4, 0, v13, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/rsa/padding.c", v14);
    uint64_t v29 = 0;
    long long v21 = 0;
    goto LABEL_39;
  }
  int v15 = (BN_num_bits((const BIGNUM *)a1->version) - 1) & 7;
  unsigned int v16 = RSA_size(a1);
  unint64_t v17 = v16;
  if (!v15)
  {
    if (!v16) {
      RSA_padding_add_PKCS1_PSS_mgf1_cold_1();
    }
    *a2++ = 0;
    unint64_t v17 = v16 - 1;
  }
  if (v17 < v12 + 2)
  {
    int v13 = 114;
    int v14 = 342;
    goto LABEL_38;
  }
  unint64_t v18 = v12;
  if (a6 != -1)
  {
    if (a6 == -2)
    {
      unint64_t v18 = v17 - v12 - 2;
    }
    else
    {
      if ((a6 & 0x80000000) != 0)
      {
        int v13 = 138;
        int v14 = 356;
        goto LABEL_38;
      }
      unint64_t v18 = a6;
    }
  }
  unint64_t v19 = v17 - v12;
  if (v17 - v12 - 2 < v18)
  {
    int v13 = 114;
    int v14 = 363;
    goto LABEL_38;
  }
  if (v18)
  {
    long long v20 = (unsigned __int8 *)OPENSSL_malloc(v18);
    long long v21 = v20;
    if (!v20 || !RAND_bytes(v20, v18)) {
      goto LABEL_36;
    }
  }
  else
  {
    long long v21 = 0;
  }
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v31.digest = v22;
  *(_OWORD *)&v31.flagunsigned int s = v22;
  EVP_MD_CTX_init(&v31);
  if (!EVP_DigestInit_ex(&v31, md, 0)
    || !EVP_DigestUpdate(&v31, &kPSSZeroes, 8uLL)
    || !EVP_DigestUpdate(&v31, a3, v12)
    || !EVP_DigestUpdate(&v31, v21, v18))
  {
    EVP_MD_CTX_cleanup(&v31);
LABEL_36:
    uint64_t v29 = 0;
    goto LABEL_39;
  }
  uint64_t v23 = v19 - 1;
  long long v24 = &a2[v19 - 1];
  int v25 = EVP_DigestFinal_ex(&v31, v24, 0);
  EVP_MD_CTX_cleanup(&v31);
  if (!v25 || !PKCS1_MGF1(a2, v23, v24, v12, v11)) {
    goto LABEL_36;
  }
  a2[v17 - (v12 + v18) - 2] ^= 1u;
  if (v18)
  {
    long long v26 = &a2[v17 + ~(v12 + v18)];
    uint64_t v27 = v21;
    do
    {
      char v28 = *v27++;
      *v26++ ^= v28;
      --v18;
    }
    while (v18);
  }
  if (v15) {
    *a2 &= 0xFFu >> (8 - v15);
  }
  a2[v17 - 1] = -68;
  uint64_t v29 = 1;
LABEL_39:
  OPENSSL_free(v21);
  return v29;
}

uint64_t EVP_marshal_public_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2 && (unint64_t v3 = *(uint64_t (**)(void))(v2 + 32)) != 0)
  {
    return v3();
  }
  else
  {
    ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_asn1.c", 147);
    return 0;
  }
}

EVP_PKEY *EVP_parse_private_key(long long *a1)
{
  memset(v10, 170, sizeof(v10));
  memset(v9, 170, sizeof(v9));
  if (!CBS_get_asn1(a1, &v10[1], 536870928)
    || !CBS_get_asn1_uint64(&v10[1], v9)
    || v9[0]
    || !CBS_get_asn1(&v10[1], v10, 536870928)
    || !CBS_get_asn1(&v10[1], &v9[1], 4))
  {
    int v6 = 102;
    int v7 = 163;
LABEL_12:
    ERR_put_error(6, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_asn1.c", v7);
    return 0;
  }
  uint64_t v1 = parse_key_type(v10);
  if (!v1)
  {
    int v6 = 128;
    int v7 = 168;
    goto LABEL_12;
  }
  uint64_t v2 = (_DWORD *)v1;
  unint64_t v3 = EVP_PKEY_new();
  int v4 = v3;
  if (!v3)
  {
LABEL_17:
    EVP_PKEY_free(v4);
    return 0;
  }
  evp_pkey_set_method((uint64_t)v3, v2);
  int v5 = (unsigned int (*)(EVP_PKEY *, long long *, unint64_t *))*((void *)v4->pkey.ptr + 6);
  if (!v5)
  {
    ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_asn1.c", 183);
    goto LABEL_17;
  }
  if (!v5(v4, v10, &v9[1])) {
    goto LABEL_17;
  }
  return v4;
}

uint64_t EVP_marshal_private_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2 && (unint64_t v3 = *(uint64_t (**)(void))(v2 + 56)) != 0)
  {
    return v3();
  }
  else
  {
    ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_asn1.c", 199);
    return 0;
  }
}

EVP_PKEY *__cdecl d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned __int8 **pp, uint64_t length)
{
  if (length < 0)
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_asn1.c", 250);
    return 0;
  }
  *(void *)&long long v15 = *pp;
  *((void *)&v15 + 1) = length;
  uint64_t v8 = EVP_PKEY_new();
  if (v8)
  {
    uint64_t v9 = v8;
    switch(type)
    {
      case 6:
        size_t v11 = RSA_parse_private_key(&v15);
        if (v11 && EVP_PKEY_assign_RSA((uint64_t)v9, (uint64_t)v11)) {
          goto LABEL_20;
        }
        RSA_free(v11);
        break;
      case 116:
        size_t v12 = DSA_parse_private_key(&v15);
        if (v12 && EVP_PKEY_assign_DSA((uint64_t)v9, (uint64_t)v12)) {
          goto LABEL_20;
        }
        DSA_free(v12);
        break;
      case 408:
        long long v10 = EC_KEY_parse_private_key(&v15, 0);
        if (v10 && EVP_PKEY_assign_EC_KEY((uint64_t)v9, (uint64_t)v10)) {
          goto LABEL_20;
        }
        EC_KEY_free(v10);
        break;
      default:
        ERR_put_error(6, 0, 127, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_asn1.c", 238);
        break;
    }
    EVP_PKEY_free(v9);
  }
  ERR_clear_error();
  *(void *)&long long v15 = *pp;
  *((void *)&v15 + 1) = length;
  int v13 = EVP_parse_private_key(&v15);
  uint64_t v9 = v13;
  if (!v13) {
    return v9;
  }
  if (v13->save_type != type)
  {
    ERR_put_error(6, 0, 103, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp_asn1.c", 267);
    EVP_PKEY_free(v9);
    return 0;
  }
LABEL_20:
  if (a)
  {
    EVP_PKEY_free(*a);
    BIGNUM *a = v9;
  }
  *pp = (const unsigned __int8 *)v15;
  return v9;
}

DSA *dsa_pub_decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 8))
  {
    int v6 = DSA_parse_parameters((long long *)a2);
    if (!v6 || *(void *)(a2 + 8))
    {
      int v7 = 81;
LABEL_10:
      ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_dsa_asn1.c", v7);
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t result = DSA_new();
    int v6 = result;
    if (!result) {
      return result;
    }
  }
  uint64_t v9 = BN_new();
  v6->p = v9;
  if (v9)
  {
    if (BN_parse_asn1_unsigned((long long *)a3, v9) && !*(void *)(a3 + 8))
    {
      evp_pkey_set_method(a1, &dsa_asn1_meth);
      *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v6;
      return (DSA *)1;
    }
    int v7 = 93;
    goto LABEL_10;
  }
LABEL_11:
  DSA_free(v6);
  return 0;
}

uint64_t dsa_pub_encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = *(void *)v3 && *(void *)(v3 + 8) && *(void *)(v3 + 16) != 0;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = v5;
  long long v10[2] = v5;
  v10[0] = v5;
  v9[1] = v5;
  _OWORD v9[2] = v5;
  _OWORD v8[2] = v5;
  v9[0] = v5;
  v8[0] = v5;
  v8[1] = v5;
  v7[1] = v5;
  unint64_t v7[2] = v5;
  v7[0] = v5;
  if (CBB_add_asn1(a1, (uint64_t)v10, 0x20000010u)
    && CBB_add_asn1((uint64_t *)v10, (uint64_t)v9, 0x20000010u)
    && CBB_add_asn1((uint64_t *)v9, (uint64_t)v8, 6u)
    && CBB_add_bytes((uint64_t)v8, &unk_1F1398424, 7uLL)
    && (!v4 || DSA_marshal_parameters((uint64_t *)v9, (const BIGNUM **)v3))
    && CBB_add_asn1((uint64_t *)v10, (uint64_t)v7, 3u)
    && CBB_add_u8((uint64_t)v7, 0)
    && BN_marshal_asn1((uint64_t *)v7, *(const BIGNUM **)(v3 + 24))
    && CBB_flush(a1))
  {
    return 1;
  }
  ERR_put_error(6, 0, 105, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_dsa_asn1.c", 121);
  return 0;
}

BOOL dsa_pub_cmp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (const BIGNUM *)DSA_get0_pub_key(*(void *)(a2 + 8));
  BOOL v4 = (const BIGNUM *)DSA_get0_pub_key(v2);
  return BN_cmp(v3, v4) == 0;
}

uint64_t dsa_priv_decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = DSA_parse_parameters((long long *)a2);
  if (!v6 || *(void *)(a2 + 8))
  {
    int v7 = 135;
LABEL_4:
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_dsa_asn1.c", v7);
LABEL_5:
    uint64_t v8 = 0;
LABEL_6:
    BN_CTX_free(v8);
    DSA_free(v6);
    return 0;
  }
  long long v10 = BN_new();
  v6->q = v10;
  if (!v10) {
    goto LABEL_5;
  }
  if (!BN_parse_asn1_unsigned((long long *)a3, v10) || *(void *)(a3 + 8))
  {
    int v7 = 145;
    goto LABEL_4;
  }
  if (!dsa_check_key((uint64_t *)&v6->pad))
  {
    int v7 = 153;
    goto LABEL_4;
  }
  uint64_t v8 = BN_CTX_new();
  size_t v11 = BN_new();
  v6->p = v11;
  if (!v8
    || !v11
    || !BN_mod_exp_mont_consttime(v11, *(const BIGNUM **)&v6->write_params, v6->q, *(const BIGNUM **)&v6->pad, v8, 0))
  {
    goto LABEL_6;
  }
  BN_CTX_free(v8);
  evp_pkey_set_method(a1, &dsa_asn1_meth);
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v6;
  return 1;
}

uint64_t dsa_priv_encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(const BIGNUM ***)(a2 + 8);
  if (v2 && v2[4])
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v11[1] = v4;
    unint64_t v11[2] = v4;
    v11[0] = v4;
    v10[1] = v4;
    long long v10[2] = v4;
    _OWORD v9[2] = v4;
    v10[0] = v4;
    v9[0] = v4;
    v9[1] = v4;
    v8[1] = v4;
    _OWORD v8[2] = v4;
    v8[0] = v4;
    if (CBB_add_asn1(a1, (uint64_t)v11, 0x20000010u)
      && CBB_add_asn1_uint64((uint64_t)v11, 0)
      && CBB_add_asn1((uint64_t *)v11, (uint64_t)v10, 0x20000010u)
      && CBB_add_asn1((uint64_t *)v10, (uint64_t)v9, 6u)
      && CBB_add_bytes((uint64_t)v9, &unk_1F1398424, 7uLL)
      && DSA_marshal_parameters((uint64_t *)v10, v2)
      && CBB_add_asn1((uint64_t *)v11, (uint64_t)v8, 4u)
      && BN_marshal_asn1((uint64_t *)v8, v2[4])
      && CBB_flush(a1))
    {
      return 1;
    }
    int v6 = 105;
    int v7 = 194;
  }
  else
  {
    int v6 = 118;
    int v7 = 179;
  }
  ERR_put_error(6, 0, v6, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_dsa_asn1.c", v7);
  return 0;
}

uint64_t int_dsa_size(uint64_t a1)
{
  return DSA_size(*(const DSA **)(a1 + 8));
}

uint64_t dsa_bits(uint64_t a1)
{
  uint64_t v1 = (const BIGNUM *)EVP_AEAD_CTX_aead(*(void *)(a1 + 8));

  return BN_num_bits(v1);
}

BOOL dsa_missing_parameters(uint64_t a1)
{
  uint64_t v1 = *(const EC_KEY **)(a1 + 8);
  return !EVP_AEAD_CTX_aead((uint64_t)v1) || !EVP_HPKE_CTX_aead((uint64_t)v1) || EVP_HPKE_CTX_kdf(v1) == 0;
}

uint64_t dsa_copy_parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(BIGNUM ***)(a1 + 8);
  uint64_t v3 = *(BIGNUM ***)(a2 + 8);
  if (!dup_bn_into(v2, *v3) || !dup_bn_into(v2 + 1, v3[1])) {
    return 0;
  }
  long long v4 = v3[2];

  return dup_bn_into(v2 + 2, v4);
}

BOOL dsa_cmp_parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const EC_KEY **)(a1 + 8);
  uint64_t v3 = *(const EC_KEY **)(a2 + 8);
  long long v4 = (const BIGNUM *)EVP_AEAD_CTX_aead((uint64_t)v2);
  long long v5 = (const BIGNUM *)EVP_AEAD_CTX_aead((uint64_t)v3);
  if (BN_cmp(v4, v5)) {
    return 0;
  }
  int v6 = (const BIGNUM *)EVP_HPKE_CTX_aead((uint64_t)v2);
  int v7 = (const BIGNUM *)EVP_HPKE_CTX_aead((uint64_t)v3);
  if (BN_cmp(v6, v7)) {
    return 0;
  }
  uint64_t v9 = EVP_HPKE_CTX_kdf(v2);
  long long v10 = EVP_HPKE_CTX_kdf(v3);
  return BN_cmp(v9, v10) == 0;
}

void int_dsa_free(uint64_t a1)
{
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
}

BOOL EVP_PKEY_assign_DSA(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a2;
  return a2 != 0;
}

uint64_t dup_bn_into(BIGNUM **a1, BIGNUM *a)
{
  uint64_t result = (uint64_t)BN_dup(a);
  if (result)
  {
    uint64_t v4 = result;
    BN_free(*a1);
    *a1 = (BIGNUM *)v4;
    return 1;
  }
  return result;
}

const EVP_CIPHER *EVP_aes_128_cbc(void)
{
  return (const EVP_CIPHER *)&aes_128_cbc;
}

const EVP_CIPHER *EVP_aes_256_cbc(void)
{
  return (const EVP_CIPHER *)&aes_256_cbc;
}

void *EVP_aead_aes_128_gcm()
{
  return &aead_aes_128_gcm;
}

void *EVP_aead_aes_256_gcm()
{
  return &aead_aes_256_gcm;
}

void *EVP_aead_aes_128_gcm_tls12()
{
  return &aead_aes_128_gcm;
}

void *EVP_aead_aes_256_gcm_tls12()
{
  return &aead_aes_256_gcm;
}

uint64_t aes_init_key(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(*(void *)a1 + 20) & 0x3F;
  switch(v4)
  {
    case 1:
      if (!g_boringssl_log) {
        goto LABEL_25;
      }
      uint64_t result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
      if (result)
      {
        aes_init_key_cold_3();
        goto LABEL_25;
      }
      break;
    case 2:
      if ((*(_DWORD *)(a1 + 24) - 65) < 0xFFFFFFC0) {
        goto LABEL_25;
      }
      if (a4) {
        uint64_t v8 = (void *)ccaes_cbc_encrypt_mode();
      }
      else {
        uint64_t v8 = (void *)ccaes_cbc_decrypt_mode();
      }
      uint64_t v9 = v8;
      uint64_t result = (uint64_t)malloc_type_malloc(((v8[1] + ((*v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0) + 16, 0xD1A133F7uLL);
      if (result)
      {
        long long v10 = (void *)result;
        *(void *)uint64_t result = v9;
        if (cccbc_init() || cccbc_set_iv())
        {
          free(v10);
          goto LABEL_25;
        }
        *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v10;
        uint64_t result = 1;
      }
      break;
    case 3:
      if (!g_boringssl_log) {
        goto LABEL_25;
      }
      uint64_t result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
      if (result)
      {
        aes_init_key_cold_4();
        goto LABEL_25;
      }
      break;
    case 4:
      if (!g_boringssl_log) {
        goto LABEL_25;
      }
      uint64_t result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
      if (result)
      {
        aes_init_key_cold_5();
        goto LABEL_25;
      }
      break;
    case 5:
      if (!g_boringssl_log) {
        goto LABEL_25;
      }
      uint64_t result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
      if (result)
      {
        aes_init_key_cold_2();
        goto LABEL_25;
      }
      break;
    default:
      int v6 = g_boringssl_log;
      if (g_boringssl_log)
      {
        uint64_t result = os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        aes_init_key_cold_1(v4, v6);
      }
LABEL_25:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t aes_cipher(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((*(unsigned char *)(*a1 + 20) & 2) == 0) {
    return 0;
  }
  uint64_t v5 = a1[1];
  if (!v5 || !*(void *)v5) {
    return 0xFFFFFFFFLL;
  }
  if (a4 && (!a2 || !a3)) {
    aes_cipher_cold_1();
  }
  if (a4 % *(void *)(*(void *)v5 + 8)) {
    return 0xFFFFFFFFLL;
  }
  int v6 = (_OWORD *)((char *)a1 + 52);
  int v7 = cccbc_set_iv();
  if (cccbc_update() | v7) {
    return 0xFFFFFFFFLL;
  }
  *int v6 = *(_OWORD *)(v5 + ((**(void **)v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16);
  return 1;
}

void aes_cleanup(void *a1)
{
  if ((*(unsigned char *)(*a1 + 20) & 2) != 0)
  {
    uint64_t v2 = (void *)a1[1];
    if (v2)
    {
      cc_clear();
      free(v2);
    }
  }
  a1[1] = 0;
}

uint64_t pkey_ec_keygen(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const EC_GROUP **)(*(void *)(a1 + 40) + 8);
  if (!v3)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (!v4)
    {
      ERR_put_error(6, 0, 124, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec.c", 212);
      return 0;
    }
    uint64_t v3 = EC_KEY_get0_group(*(const EC_KEY **)(v4 + 8));
  }
  uint64_t v5 = EC_KEY_new();
  int v6 = v5;
  if (v5 && EC_KEY_set_group(v5, v3) && EC_KEY_generate_key(v6))
  {
    EVP_PKEY_assign_EC_KEY(a2, (uint64_t)v6);
    return 1;
  }
  EC_KEY_free(v6);
  return 0;
}

uint64_t pkey_ec_sign(uint64_t a1, unsigned __int8 *a2, unint64_t *a3, const unsigned __int8 *a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(EC_KEY **)(v6 + 8);
  if (!a2)
  {
    *a3 = ECDSA_size(*(const EC_KEY **)(v6 + 8));
    return 1;
  }
  unint64_t v11 = *a3;
  if (v11 < ECDSA_size(*(const EC_KEY **)(v6 + 8)))
  {
    ERR_put_error(6, 0, 100, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec.c", 120);
    return 0;
  }
  sigleuint64_t n = -1431655766;
  uint64_t result = ECDSA_sign(0, a4, a5, a2, &siglen, v7);
  if (result)
  {
    *a3 = siglen;
    return 1;
  }
  return result;
}

uint64_t pkey_ec_derive(uint64_t a1, void *a2, size_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 24)) == 0)
  {
    ERR_put_error(6, 0, 117, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec.c", 141);
    return 0;
  }
  int v7 = *(EC_KEY **)(v3 + 8);
  if (!a2)
  {
    size_t v12 = EC_KEY_get0_group(*(const EC_KEY **)(v3 + 8));
    size_t v10 = (EC_GROUP_get_degree(v12) + 7) >> 3;
    goto LABEL_9;
  }
  uint64_t v8 = EC_KEY_get0_public_key(*(const EC_KEY **)(v4 + 8));
  unsigned int v9 = ECDH_compute_key(a2, *a3, v8, v7, 0);
  if ((v9 & 0x80000000) != 0) {
    return 0;
  }
  size_t v10 = v9;
LABEL_9:
  *a3 = v10;
  return 1;
}

uint64_t pkey_ec_paramgen(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 8))
  {
    uint64_t v4 = EC_KEY_new();
    uint64_t v5 = v4;
    if (v4 && EC_KEY_set_group(v4, *(const EC_GROUP **)(v2 + 8)))
    {
      EVP_PKEY_assign_EC_KEY(a2, (uint64_t)v5);
      return 1;
    }
    EC_KEY_free(v5);
  }
  else
  {
    ERR_put_error(6, 0, 124, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec.c", 231);
  }
  return 0;
}

uint64_t EVP_MD_nid(unsigned int *a1)
{
  return *a1;
}

int EVP_MD_block_size(const EVP_MD *md)
{
  return (int)md->final;
}

double EVP_MD_CTX_new()
{
  uint64_t v0 = OPENSSL_malloc(0x20uLL);
  if (v0)
  {
    double result = 0.0;
    _OWORD *v0 = 0u;
    v0[1] = 0u;
  }
  return result;
}

void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx)
{
  if (ctx)
  {
    EVP_MD_CTX_cleanup(ctx);
    OPENSSL_free(ctx);
  }
}

double EVP_MD_CTX_move(uint64_t a1, _OWORD *a2)
{
  EVP_MD_CTX_cleanup((EVP_MD_CTX *)a1);
  long long v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned __int8 *md, unsigned int *s)
{
  return 1;
}

uint64_t eckey_pub_encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(const EC_KEY **)(a2 + 8);
  long long v4 = EC_KEY_get0_group(v3);
  uint64_t v5 = EC_KEY_get0_public_key(v3);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = v6;
  unint64_t v11[2] = v6;
  v11[0] = v6;
  v10[1] = v6;
  long long v10[2] = v6;
  _OWORD v9[2] = v6;
  v10[0] = v6;
  v9[0] = v6;
  v9[1] = v6;
  v8[1] = v6;
  _OWORD v8[2] = v6;
  v8[0] = v6;
  if (CBB_add_asn1(a1, (uint64_t)v11, 0x20000010u)
    && CBB_add_asn1((uint64_t *)v11, (uint64_t)v10, 0x20000010u)
    && CBB_add_asn1((uint64_t *)v10, (uint64_t)v9, 6u)
    && CBB_add_bytes((uint64_t)v9, &unk_1F13984CC, 7uLL)
    && EC_KEY_marshal_curve_name((uint64_t *)v10, (uint64_t)v4)
    && CBB_add_asn1((uint64_t *)v11, (uint64_t)v8, 3u)
    && CBB_add_u8((uint64_t)v8, 0)
    && EC_POINT_point2cbb((uint64_t)v8, v4, v5, POINT_CONVERSION_UNCOMPRESSED, 0)
    && CBB_flush(a1))
  {
    return 1;
  }
  ERR_put_error(6, 0, 105, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec_asn1.c", 85);
  return 0;
}

uint64_t eckey_pub_cmp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const EC_KEY **)(a1 + 8);
  uint64_t v3 = *(const EC_KEY **)(a2 + 8);
  long long v4 = EC_KEY_get0_group(v3);
  uint64_t v5 = EC_KEY_get0_public_key(v2);
  long long v6 = EC_KEY_get0_public_key(v3);
  int v7 = EC_POINT_cmp(v4, v5, v6, 0);
  if (v7 == 1) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = -2;
  }
  if (v7) {
    return v8;
  }
  else {
    return 1;
  }
}

uint64_t eckey_priv_decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (const EC_GROUP *)EC_KEY_parse_parameters((long long *)a2);
  if (!v6 || *(void *)(a2 + 8))
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec_asn1.c", 138);
    return 0;
  }
  unsigned int v8 = EC_KEY_parse_private_key((long long *)a3, v6);
  if (!v8 || *(void *)(a3 + 8))
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec_asn1.c", 144);
    EC_KEY_free(v8);
    return 0;
  }
  evp_pkey_set_method(a1, &ec_asn1_meth);
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v8;
  return 1;
}

uint64_t eckey_priv_encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(const EC_KEY **)(a2 + 8);
  enc_flagunsigned int s = EC_KEY_get_enc_flags(v3);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = v5;
  unint64_t v11[2] = v5;
  v11[0] = v5;
  v10[1] = v5;
  long long v10[2] = v5;
  _OWORD v9[2] = v5;
  v10[0] = v5;
  v9[0] = v5;
  v9[1] = v5;
  v8[1] = v5;
  _OWORD v8[2] = v5;
  v8[0] = v5;
  if (CBB_add_asn1(a1, (uint64_t)v11, 0x20000010u))
  {
    if (CBB_add_asn1_uint64((uint64_t)v11, 0))
    {
      if (CBB_add_asn1((uint64_t *)v11, (uint64_t)v10, 0x20000010u))
      {
        if (CBB_add_asn1((uint64_t *)v10, (uint64_t)v9, 6u))
        {
          if (CBB_add_bytes((uint64_t)v9, &unk_1F13984CC, 7uLL))
          {
            long long v6 = EC_KEY_get0_group(v3);
            if (EC_KEY_marshal_curve_name((uint64_t *)v10, (uint64_t)v6))
            {
              if (CBB_add_asn1((uint64_t *)v11, (uint64_t)v8, 4u)
                && EC_KEY_marshal_private_key((uint64_t *)v8, (uint64_t)v3, enc_flags | 1u)
                && CBB_flush(a1))
              {
                return 1;
              }
            }
          }
        }
      }
    }
  }
  ERR_put_error(6, 0, 105, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec_asn1.c", 173);
  return 0;
}

uint64_t eckey_set1_tls_encodedpoint(uint64_t a1, const unsigned __int8 *a2, size_t a3)
{
  uint64_t v3 = *(EC_KEY **)(a1 + 8);
  if (v3)
  {
    return EC_KEY_oct2key(v3, a2, a3, 0);
  }
  else
  {
    ERR_put_error(6, 0, 120, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec_asn1.c", 184);
    return 0;
  }
}

unsigned __int8 *eckey_get1_tls_encodedpoint(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, BN_CTX *a6)
{
  long long v6 = *(const EC_GROUP ***)(a1 + 8);
  if (v6)
  {
    return EC_KEY_key2buf(v6, POINT_CONVERSION_UNCOMPRESSED, a2, 0, a5, a6);
  }
  else
  {
    ERR_put_error(6, 0, 120, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec_asn1.c", 195);
    return 0;
  }
}

uint64_t eckey_opaque(uint64_t a1)
{
  return EC_KEY_is_opaque(*(void *)(a1 + 8));
}

uint64_t int_ec_size(uint64_t a1)
{
  return ECDSA_size(*(const EC_KEY **)(a1 + 8));
}

uint64_t ec_bits(uint64_t a1)
{
  uint64_t v1 = EC_KEY_get0_group(*(const EC_KEY **)(a1 + 8));
  if (v1)
  {
    return EC_GROUP_order_bits((uint64_t)v1);
  }
  else
  {
    ERR_clear_error();
    return 0;
  }
}

BOOL ec_missing_parameters(uint64_t a1)
{
  uint64_t v1 = *(const EC_KEY **)(a1 + 8);
  return !v1 || EC_KEY_get0_group(v1) == 0;
}

uint64_t ec_copy_parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const EC_KEY **)(a2 + 8);
  if (!v3)
  {
    int v8 = 120;
    int v9 = 225;
LABEL_10:
    ERR_put_error(6, 0, v8, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_ec_asn1.c", v9);
    return 0;
  }
  long long v4 = EC_KEY_get0_group(v3);
  if (!v4)
  {
    int v8 = 118;
    int v9 = 230;
    goto LABEL_10;
  }
  long long v5 = v4;
  long long v6 = *(EC_KEY **)(a1 + 8);
  if (!v6)
  {
    long long v6 = EC_KEY_new();
    *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v6;
    if (!v6) {
      return 0;
    }
  }

  return EC_KEY_set_group(v6, v5);
}

uint64_t ec_cmp_parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const EC_KEY **)(a1 + 8);
  uint64_t v3 = *(const EC_KEY **)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 4294967294;
  }
  long long v5 = EC_KEY_get0_group(v2);
  long long v6 = EC_KEY_get0_group(v3);
  if (!v5 || v6 == 0) {
    return 4294967294;
  }
  else {
    return EC_GROUP_cmp(v5, v6, 0) == 0;
  }
}

BOOL EVP_PKEY_assign_EC_KEY(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a2;
  return a2 != 0;
}

uint64_t bssl::tls13_client_handshake_int_state(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  return (4 * *((_DWORD *)this + 6)) | 0x2B291400u;
}

uint64_t bssl::close_early_data(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 1584);
  if ((v2 & 0x400) == 0) {
    bssl::close_early_data();
  }
  uint64_t v4 = *(void *)a1;
  *(_DWORD *)(a1 + 1bssl::Array<unsigned short>::~Array((uint64_t)this + 584) = v2 & 0xFFFFDFFF;
  if (*(void *)(v4 + 168)) {
    goto LABEL_3;
  }
  if (!a2)
  {
    size_t v10 = (bssl::SSLAEADContext *)0xAAAAAAAAAAAAAAAALL;
    BOOL v6 = SSL_is_dtls((unsigned __int8 **)v4) != 0;
    bssl::SSLAEADContext::CreateNullCipher((bssl::SSLAEADContext *)v6, &v10);
    if (!v10
      || (int v7 = *(uint64_t (**)(uint64_t, void, bssl::SSLAEADContext **, void, void))(*(void *)v4 + 144),
          int v9 = v10,
          size_t v10 = 0,
          char v8 = v7(v4, 0, &v9, 0, 0),
          std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v9, 0),
          (v8 & 1) == 0))
    {
      std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v10, 0);
      return 0;
    }
    bssl::SSLAEADContext::SetVersionIfNullCipher(*(void *)(*(void *)(v4 + 48) + 272), *(_WORD *)(v4 + 16));
    std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100](&v10, 0);
    goto LABEL_3;
  }
  if (a2 != 2) {
    bssl::close_early_data();
  }
  uint64_t result = bssl::tls13_set_traffic_key(v4, (const ssl_session_st *)2, 1, *(bssl **)(a1 + 1520), (const void *)(a1 + 136), *(void *)(a1 + 32));
  if (result)
  {
LABEL_3:
    if (*(_DWORD *)(*(void *)(v4 + 48) + 204) != a2) {
      bssl::close_early_data();
    }
    return 1;
  }
  return result;
}

void sub_1BA13EC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<bssl::SSLAEADContext,bssl::internal::Deleter>::reset[abi:ne180100]((bssl::SSLAEADContext **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t rsa_pub_encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = v4;
  long long v10[2] = v4;
  _OWORD v9[2] = v4;
  v10[0] = v4;
  v9[0] = v4;
  v9[1] = v4;
  v8[1] = v4;
  _OWORD v8[2] = v4;
  unint64_t v7[2] = v4;
  v8[0] = v4;
  v7[0] = v4;
  v7[1] = v4;
  v6[1] = v4;
  void v6[2] = v4;
  v6[0] = v4;
  if (CBB_add_asn1(a1, (uint64_t)v10, 0x20000010u)
    && CBB_add_asn1((uint64_t *)v10, (uint64_t)v9, 0x20000010u)
    && CBB_add_asn1((uint64_t *)v9, (uint64_t)v8, 6u)
    && CBB_add_bytes((uint64_t)v8, &unk_1F139889C, 9uLL)
    && CBB_add_asn1((uint64_t *)v9, (uint64_t)v7, 5u)
    && CBB_add_asn1((uint64_t *)v10, (uint64_t)v6, 3u)
    && CBB_add_u8((uint64_t)v6, 0)
    && RSA_marshal_public_key((uint64_t *)v6, v3)
    && CBB_flush(a1))
  {
    return 1;
  }
  ERR_put_error(6, 0, 105, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_rsa_asn1.c", 82);
  return 0;
}

BOOL rsa_pub_cmp(uint64_t a1, uint64_t a2)
{
  int v2 = *(const EC_KEY **)(a1 + 8);
  uint64_t v3 = *(const EC_KEY **)(a2 + 8);
  long long v4 = (const BIGNUM *)EVP_HPKE_CTX_aead((uint64_t)v3);
  long long v5 = (const BIGNUM *)EVP_HPKE_CTX_aead((uint64_t)v2);
  if (BN_cmp(v4, v5)) {
    return 0;
  }
  int v7 = EVP_HPKE_CTX_kdf(v3);
  char v8 = EVP_HPKE_CTX_kdf(v2);
  return BN_cmp(v7, v8) == 0;
}

uint64_t rsa_priv_decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_asn1((long long *)a2, &v8, 5) || v9 || *(void *)(a2 + 8))
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_rsa_asn1.c", 144);
  }
  else
  {
    int v7 = RSA_parse_private_key((long long *)a3);
    if (v7 && !*(void *)(a3 + 8))
    {
      evp_pkey_set_method(a1, &rsa_asn1_meth);
      *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v7;
      return 1;
    }
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_rsa_asn1.c", 150);
    RSA_free(v7);
  }
  return 0;
}

uint64_t rsa_priv_encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(const BIGNUM ***)(a2 + 8);
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = v4;
  long long v10[2] = v4;
  _OWORD v9[2] = v4;
  v10[0] = v4;
  v9[0] = v4;
  v9[1] = v4;
  v8[1] = v4;
  _OWORD v8[2] = v4;
  unint64_t v7[2] = v4;
  v8[0] = v4;
  v7[0] = v4;
  v7[1] = v4;
  v6[1] = v4;
  void v6[2] = v4;
  v6[0] = v4;
  if (CBB_add_asn1(a1, (uint64_t)v10, 0x20000010u)
    && CBB_add_asn1_uint64((uint64_t)v10, 0)
    && CBB_add_asn1((uint64_t *)v10, (uint64_t)v9, 0x20000010u)
    && CBB_add_asn1((uint64_t *)v9, (uint64_t)v8, 6u)
    && CBB_add_bytes((uint64_t)v8, &unk_1F139889C, 9uLL)
    && CBB_add_asn1((uint64_t *)v9, (uint64_t)v7, 5u)
    && CBB_add_asn1((uint64_t *)v10, (uint64_t)v6, 4u)
    && RSA_marshal_private_key((uint64_t *)v6, v3)
    && CBB_flush(a1))
  {
    return 1;
  }
  ERR_put_error(6, 0, 105, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_rsa_asn1.c", 131);
  return 0;
}

uint64_t rsa_opaque(uint64_t a1)
{
  return ssl_credential_st::UsesPrivateKey(*(ssl_credential_st **)(a1 + 8));
}

uint64_t rsa_bits(uint64_t a1)
{
  return RSA_bits(*(void *)(a1 + 8));
}

int EVP_PKEY_set1_RSA(EVP_PKEY *pkey, rsa_st *key)
{
  *(void *)&pkey->referenceunsigned int s = key;
  if (!key) {
    return 0;
  }
  RSA_up_ref(key);
  return 1;
}

BOOL EVP_PKEY_assign_RSA(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = a2;
  return a2 != 0;
}

uint64_t EVP_PKEY_get0_RSA(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == 6) {
    return *(void *)(a1 + 8);
  }
  ERR_put_error(6, 0, 107, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_rsa_asn1.c", 229);
  return 0;
}

BOOL PKCS5_PBKDF2_HMAC(const void *a1, int a2, const unsigned __int8 *a3, size_t a4, unsigned int a5, EVP_MD *md, size_t a7, char *a8)
{
  *(void *)&ctx.key[76] = *MEMORY[0x1E4F143B8];
  size_t v16 = EVP_MD_size(md);
  ctx.o_ctx.md_unint64_t data = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&ctx.i_ctx.md_unint64_t data = v17;
  *(_OWORD *)&ctx.o_ctx.engine = v17;
  *(_OWORD *)&ctx.md_ctx.md_unint64_t data = v17;
  *(_OWORD *)&ctx.i_ctx.engine = v17;
  *(_OWORD *)&ctx.mint d = v17;
  *(_OWORD *)&ctx.md_ctx.engine = v17;
  HMAC_CTX_init(&ctx);
  HMAC_Init_ex(&ctx, a1, a2, md, 0);
  if (!v18)
  {
LABEL_24:
    BOOL v34 = 0;
    goto LABEL_25;
  }
  if (a7)
  {
    unsigned int v19 = 1;
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    do
    {
      *(_DWORD *)unint64_t data = bswap32(v19);
      size_t v21 = v16 >= a7 ? a7 : v16;
      *(_OWORD *)&ctx.key[36] = v20;
      *(_OWORD *)&ctx.key[52] = v20;
      *(_OWORD *)&ctx.key[20] = v20;
      *(_OWORD *)&ctx._OWORD key[4] = v20;
      HMAC_Init_ex(&ctx, 0, 0, 0, 0);
      if (!v22) {
        goto LABEL_24;
      }
      HMAC_Update(&ctx, a3, a4);
      if (!v23) {
        goto LABEL_24;
      }
      HMAC_Update(&ctx, data, 4uLL);
      if (!v24) {
        goto LABEL_24;
      }
      HMAC_Final(&ctx, &ctx.key[4], 0);
      if (!v25) {
        goto LABEL_24;
      }
      if (v21) {
        memcpy(a8, &ctx.key[4], v21);
      }
      if (a5 >= 2)
      {
        int v26 = 1;
        do
        {
          HMAC_Init_ex(&ctx, 0, 0, 0, 0);
          if (!v27) {
            goto LABEL_24;
          }
          HMAC_Update(&ctx, &ctx.key[4], v16);
          if (!v28) {
            goto LABEL_24;
          }
          HMAC_Final(&ctx, &ctx.key[4], 0);
          if (!v29) {
            goto LABEL_24;
          }
          if (v21)
          {
            unsigned long long v30 = &ctx.key[4];
            EVP_MD_CTX v31 = a8;
            size_t v32 = v21;
            do
            {
              char v33 = *v30++;
              *v31++ ^= v33;
              --v32;
            }
            while (v32);
          }
        }
        while (++v26 != a5);
      }
      a8 += v21;
      ++v19;
      a7 -= v21;
      *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    }
    while (a7);
  }
  BOOL v34 = a5 != 0;
LABEL_25:
  HMAC_CTX_cleanup(&ctx);
  return v34;
}

int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen, const unsigned __int8 *salt, int saltlen, int iter, int keylen, unsigned __int8 *out)
{
  size_t v8 = *(void *)&keylen;
  size_t v10 = *(void *)&saltlen;
  int v14 = (EVP_MD *)EVP_sha1();

  return PKCS5_PBKDF2_HMAC(pass, passlen, salt, v10, iter, v14, v8, (char *)out);
}

BN_CTX *BN_CTX_new(void)
{
  uint64_t result = (BN_CTX *)OPENSSL_malloc(0x30uLL);
  if (result)
  {
    *(_OWORD *)((char *)result + 26) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
  }
  return result;
}

void BN_CTX_free(BN_CTX *c)
{
  if (c)
  {
    if (*((void *)c + 4) && !*((unsigned char *)c + 40)) {
      BN_CTX_free_cold_1();
    }
    OPENSSL_sk_pop_free_ex(*(unint64_t **)c, (void (*)(uint64_t))sk_BIGNUM_call_free_func, (uint64_t)BN_free);
    OPENSSL_free(*((void **)c + 1));
    OPENSSL_free(c);
  }
}

void BN_CTX_start(BN_CTX *ctx)
{
  if (!*((unsigned char *)ctx + 40))
  {
    uint64_t v2 = *((void *)ctx + 4);
    unint64_t v3 = *((void *)ctx + 2);
    if (v3 != *((void *)ctx + 3))
    {
      BOOL v6 = (void *)*((void *)ctx + 1);
      goto LABEL_14;
    }
    if (v3) {
      unint64_t v4 = (3 * v3) >> 1;
    }
    else {
      unint64_t v4 = 32;
    }
    if (v4 > v3 && v4 >> 61 == 0)
    {
      BOOL v6 = OPENSSL_realloc(*((void **)ctx + 1), 8 * v4);
      if (v6)
      {
        *((void *)ctx + 1) = v6;
        *((void *)ctx + 3) = v4;
        unint64_t v3 = *((void *)ctx + 2);
LABEL_14:
        v6[v3] = v2;
        ++*((void *)ctx + 2);
        return;
      }
    }
    *((_WORD *)ctx + 2std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 257;
  }
}

BIGNUM *__cdecl BN_CTX_get(BN_CTX *ctx)
{
  if (!*((unsigned char *)ctx + 40))
  {
    unint64_t v3 = *(unint64_t **)ctx;
    if (*(void *)ctx || (unint64_t v3 = OPENSSL_sk_new_null(), (*(void *)ctx = v3) != 0))
    {
      unint64_t v4 = (const EVP_MD *)*((void *)ctx + 4);
      if (v4 != EVP_MD_CTX_md((const EVP_MD_CTX *)v3)
        || (long long v5 = BN_new()) != 0 && OPENSSL_sk_push(*(unint64_t **)ctx, (uint64_t)v5))
      {
        uint64_t v2 = OPENSSL_sk_value(*(unint64_t **)ctx, *((void *)ctx + 4));
        BN_zero((uint64_t)v2);
        ++*((void *)ctx + 4);
        return (BIGNUM *)v2;
      }
      ERR_put_error(3, 0, 116, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/ctx.c", 172);
      BN_free(v5);
    }
    uint64_t v2 = 0;
    *((unsigned char *)ctx + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 1;
    return (BIGNUM *)v2;
  }
  if (!*((unsigned char *)ctx + 41)) {
    return 0;
  }
  ERR_put_error(3, 0, 116, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/ctx.c", 155);
  uint64_t v2 = 0;
  *((unsigned char *)ctx + 41) = 0;
  return (BIGNUM *)v2;
}

void BN_CTX_end(BN_CTX *ctx)
{
  if (!*((unsigned char *)ctx + 40))
  {
    uint64_t v1 = *((void *)ctx + 2);
    if (!v1) {
      BN_CTX_end_cold_1();
    }
    uint64_t v2 = v1 - 1;
    *((void *)ctx + 2) = v2;
    *((void *)ctx + 4) = *(void *)(*((void *)ctx + 1) + 8 * v2);
  }
}

uint64_t sk_BIGNUM_call_free_func(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

BOOL bio_errno_should_retry(int a1)
{
  if (a1 != -1) {
    return 0;
  }
  if (*__error() == 35
    || *__error() == 57
    || *__error() == 4
    || *__error() == 35
    || *__error() == 100
    || *__error() == 36)
  {
    return 1;
  }
  return *__error() == 37;
}

BOOL bssl::tls13_add_certificate(bssl *this, bssl::SSL_HANDSHAKE *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  return bssl::tls13_add_certificate_in_buffer(this, 0, 0, 0, a5);
}

BOOL bssl::tls13_add_certificate_in_buffer(bssl *this, bssl::SSL_HANDSHAKE *a2, void *a3, unsigned __int8 **a4, unint64_t *a5)
{
  char v7 = (char)a2;
  unint64_t v9 = *(unsigned char **)this;
  uint64_t v10 = *((void *)this + 188);
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[1] = v11;
  v53[2] = v11;
  v53[0] = v11;
  CBB_zero(v53);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v52[1] = v12;
  v52[2] = v12;
  v52[0] = v12;
  v51[1] = v12;
  v51[2] = v12;
  v51[0] = v12;
  if ((*((unsigned char *)this + 1586) & 0x10) != 0)
  {
    if (!CBB_init((uint64_t)v53, 0x400uLL)) {
      goto LABEL_69;
    }
    int v13 = (uint64_t *)v53;
  }
  else
  {
    if (!(*(unsigned int (**)(unsigned char *, _OWORD *, _OWORD *, uint64_t))(*(void *)v9 + 88))(v9, v53, v52, 11))goto LABEL_69; {
    int v13 = (uint64_t *)v52;
    }
  }
  if (!CBB_add_u8((uint64_t)v13, 0) || !CBB_add_u24_length_prefixed(v13, (uint64_t)v51))
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 583);
    BOOL v18 = 0;
    goto LABEL_70;
  }
  int v15 = *((_DWORD *)this + 396);
  if ((v15 & 0x400000) != 0 && *((unsigned char *)this + 731) == 2 && (v9[180] & 1) == 0 && (v7 & 1) == 0)
  {
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v49 = v16;
    long long v50 = v16;
    long long v47 = v16;
    long long v48 = v16;
    long long v45 = v16;
    long long v46 = v16;
    if (!CBB_add_u24_length_prefixed((uint64_t *)v51, (uint64_t)&v48)
      || !EVP_marshal_public_key((uint64_t)&v48, *(void *)(v10 + 8))
      || !CBB_add_u16_length_prefixed((uint64_t *)v51, (uint64_t)&v45))
    {
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 596);
      BOOL v18 = 0;
      goto LABEL_70;
    }
LABEL_15:
    uint64_t v17 = bssl::ssl_add_message_cbb((uint64_t)v9, (uint64_t)v53);
LABEL_62:
    BOOL v18 = v17;
    goto LABEL_70;
  }
  if (v15 & 0x200000) == 0 || *((unsigned char *)this + 730) != 2 || (v7)
  {
    if (!bssl::ssl_has_certificate(this, v14))
    {
      if (!a3)
      {
        uint64_t v17 = bssl::ssl_add_message_cbb((uint64_t)v9, (uint64_t)v53);
        goto LABEL_62;
      }
      int v39 = CBB_finish((uint64_t)v53, a3, a4);
      goto LABEL_58;
    }
    if (!ssl_credential_st::UsesX509(*((ssl_credential_st **)this + 188))) {
      __assert_rtn("tls13_add_certificate_in_buffer", "tls13_both.cc", 636, "hs->credential->UsesX509()");
    }
    unsigned int v19 = OPENSSL_sk_value(*(unint64_t **)(v10 + 48), 0);
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v49 = v20;
    long long v50 = v20;
    long long v47 = v20;
    long long v48 = v20;
    long long v45 = v20;
    long long v46 = v20;
    if (!CBB_add_u24_length_prefixed((uint64_t *)v51, (uint64_t)&v48)
      || (size_t v21 = (const void *)CRYPTO_BUFFER_data((uint64_t)v19),
          size_t v22 = CRYPTO_BUFFER_len((uint64_t)v19),
          !CBB_add_bytes((uint64_t)&v48, v21, v22))
      || !CBB_add_u16_length_prefixed((uint64_t *)v51, (uint64_t)&v45))
    {
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 643);
      BOOL v18 = 0;
      goto LABEL_70;
    }
    int v23 = *((_DWORD *)this + 396);
    if ((v23 & 4) != 0 && *(void *)(v10 + 72))
    {
      *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v43 = v24;
      long long v44 = v24;
      long long v42 = v24;
      if (!CBB_add_u16((uint64_t)&v45, 0x12u)
        || !CBB_add_u16_length_prefixed((uint64_t *)&v45, (uint64_t)&v42)
        || (int v25 = (const void *)CRYPTO_BUFFER_data(*(void *)(v10 + 72)),
            size_t v26 = CRYPTO_BUFFER_len(*(void *)(v10 + 72)),
            !CBB_add_bytes((uint64_t)&v42, v25, v26))
        || !CBB_flush((uint64_t *)&v45))
      {
        ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 656);
        goto LABEL_69;
      }
      int v23 = *((_DWORD *)this + 396);
    }
    if ((v23 & 0x80) == 0) {
      goto LABEL_79;
    }
    if (!*(void *)(v10 + 80)) {
      goto LABEL_79;
    }
    *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v43 = v27;
    long long v44 = v27;
    int8x16_t v41[2] = v27;
    long long v42 = v27;
    v41[0] = v27;
    v41[1] = v27;
    if (!CBB_add_u16((uint64_t)&v45, 5u)) {
      goto LABEL_68;
    }
    if (CBB_add_u16_length_prefixed((uint64_t *)&v45, (uint64_t)&v42)
      && CBB_add_u8((uint64_t)&v42, 1u)
      && CBB_add_u24_length_prefixed((uint64_t *)&v42, (uint64_t)v41)
      && (int v28 = (const void *)CRYPTO_BUFFER_data(*(void *)(v10 + 80)),
          size_t v29 = CRYPTO_BUFFER_len(*(void *)(v10 + 80)),
          CBB_add_bytes((uint64_t)v41, v28, v29))
      && CBB_flush((uint64_t *)&v45))
    {
LABEL_79:
      if (*(_DWORD *)(v10 + 4) != 1
        || (*(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL,
            *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL,
            long long v43 = v30,
            long long v44 = v30,
            long long v42 = v30,
            CBB_add_u16((uint64_t)&v45, 0x22u))
        && CBB_add_u16_length_prefixed((uint64_t *)&v45, (uint64_t)&v42)
        && (EVP_MD_CTX v31 = (const void *)CRYPTO_BUFFER_data(*(void *)(v10 + 56)),
            size_t v32 = CRYPTO_BUFFER_len(*(void *)(v10 + 56)),
            CBB_add_bytes((uint64_t)&v42, v31, v32))
        && CBB_flush((uint64_t *)&v45))
      {
        for (unint64_t i = 1; i < (unint64_t)EVP_MD_CTX_md(*(const EVP_MD_CTX **)(v10 + 48)); ++i)
        {
          BOOL v34 = OPENSSL_sk_value(*(unint64_t **)(v10 + 48), i);
          *(void *)&long long v35 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v43 = v35;
          long long v44 = v35;
          long long v42 = v35;
          if (CBB_add_u24_length_prefixed((uint64_t *)v51, (uint64_t)&v42))
          {
            uint64_t v36 = (const void *)CRYPTO_BUFFER_data((uint64_t)v34);
            size_t v37 = CRYPTO_BUFFER_len((uint64_t)v34);
            if (CBB_add_bytes((uint64_t)&v42, v36, v37))
            {
              if (CBB_add_u16((uint64_t)v51, 0)) {
                continue;
              }
            }
          }
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 695);
          goto LABEL_69;
        }
        if ((*((unsigned char *)this + 1586) & 0x10) != 0)
        {
          uint64_t v17 = bssl::tls13_add_compressed_certificate(v9, (uint64_t)v53, (uint64_t)this, (uint64_t *)v52, a3, a4);
          goto LABEL_62;
        }
        if (!a3)
        {
          uint64_t v17 = bssl::ssl_add_message_cbb((uint64_t)v9, (uint64_t)v53);
          goto LABEL_62;
        }
        int v39 = CBB_finish((uint64_t)v53, a3, a4);
LABEL_58:
        BOOL v18 = v39 != 0;
        goto LABEL_70;
      }
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 683);
    }
    else
    {
LABEL_68:
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 671);
    }
LABEL_69:
    BOOL v18 = 0;
    goto LABEL_70;
  }
  *(void *)&long long v38 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v49 = v38;
  long long v50 = v38;
  long long v47 = v38;
  long long v48 = v38;
  long long v45 = v38;
  long long v46 = v38;
  if (CBB_add_u24_length_prefixed((uint64_t *)v51, (uint64_t)&v48)
    && EVP_marshal_public_key((uint64_t)&v48, *(void *)(v10 + 8))
    && CBB_add_u16_length_prefixed((uint64_t *)v51, (uint64_t)&v45))
  {
    if ((*((unsigned char *)this + 1586) & 0x10) != 0)
    {
      uint64_t v17 = bssl::tls13_add_compressed_certificate(v9, (uint64_t)v53, (uint64_t)this, (uint64_t *)v52, a3, a4);
      goto LABEL_62;
    }
    goto LABEL_15;
  }
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 611);
  BOOL v18 = 0;
LABEL_70:
  CBB_cleanup((uint64_t)v53);
  return v18;
}

void sub_1BA13FD58(_Unwind_Exception *a1)
{
  CBB_cleanup(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t bssl::tls13_add_compressed_certificate(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, void *a6)
{
  __s2 = 0;
  unint64_t v33 = 0;
  if (bssl::CBBFinishArray(a2, (uint64_t)&__s2))
  {
    uint64_t v12 = a1[15];
    uint64_t v13 = *(void *)(v12 + 704);
    if (!v13) {
      goto LABEL_24;
    }
    uint64_t v14 = *(void *)(v12 + 712);
    uint64_t v15 = 24 * v13;
    while (*(unsigned __int16 *)(v14 + 16) != *(unsigned __int16 *)(a3 + 728))
    {
      v14 += 24;
      v15 -= 24;
      if (!v15) {
        goto LABEL_24;
      }
    }
    if (*(void *)v14)
    {
      *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v31[1] = v17;
      _OWORD v31[2] = v17;
      v31[0] = v17;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t *, uint64_t))(*a1 + 88))(a1, a2, a4, 25)
        && CBB_add_u16((uint64_t)a4, *(unsigned __int16 *)(a3 + 728))
        && CBB_add_u24((uint64_t)a4, v33)
        && CBB_add_u24_length_prefixed(a4, (uint64_t)v31))
      {
        uint64_t v18 = *(void *)(a3 + 1576);
        if (v18
          && (*(unsigned char *)(a3 + 1586) & 8) == 0
          && *(unsigned __int16 *)(v18 + 146) == *(unsigned __int16 *)(a3 + 728)
          && (size_t v19 = *(void *)(v18 + 160), v19 == v33)
          && !memcmp(*(const void **)(v18 + 152), __s2, v19)
          && (size_t v30 = *(void *)(v18 + 176)) != 0)
        {
          if (!CBB_add_bytes((uint64_t)v31, *(const void **)(v18 + 168), v30))
          {
            int v20 = 521;
            goto LABEL_28;
          }
        }
        else
        {
          if (!(*(unsigned int (**)(void *, _OWORD *, void *, unint64_t))v14)(a1, v31, __s2, v33))
          {
            int v20 = 526;
            goto LABEL_28;
          }
          if (v18 && (*(unsigned char *)(a3 + 1586) & 8) != 0)
          {
            *(_WORD *)(v18 + 146) = *(_WORD *)(a3 + 728);
            size_t v22 = __s2;
            size_t v23 = v33;
            int v24 = bssl::Array<unsigned char>::Init(v18 + 152, v33);
            char v25 = v24 ^ 1;
            if (!v23) {
              char v25 = 1;
            }
            if ((v25 & 1) == 0) {
              memmove(*(void **)(v18 + 152), v22, v23);
            }
            if (!v24) {
              goto LABEL_39;
            }
            size_t v26 = CBB_data((uint64_t)v31);
            unint64_t v27 = CBB_len((uint64_t)v31);
            int v28 = bssl::Array<unsigned char>::Init(v18 + 168, v27);
            char v29 = v28 ^ 1;
            if (!v27) {
              char v29 = 1;
            }
            if ((v29 & 1) == 0) {
              memmove(*(void **)(v18 + 168), v26, v27);
            }
            if (!v28)
            {
LABEL_39:
              uint64_t v16 = 0;
              goto LABEL_25;
            }
          }
        }
        if (a5)
        {
          if (!CBB_finish(a2, a5, a6))
          {
            int v20 = 546;
LABEL_28:
            ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", v20);
            uint64_t v16 = 0;
            goto LABEL_25;
          }
        }
        else if ((bssl::ssl_add_message_cbb((uint64_t)a1, a2) & 1) == 0)
        {
          int v20 = 541;
          goto LABEL_28;
        }
        uint64_t v16 = 1;
        goto LABEL_25;
      }
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 510);
      uint64_t v16 = 0;
    }
    else
    {
LABEL_24:
      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 499);
      uint64_t v16 = 0;
    }
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 486);
    uint64_t v16 = 0;
  }
LABEL_25:
  OPENSSL_free(__s2);
  return v16;
}

void sub_1BA1400A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::tls13_add_certificate_verify(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  return bssl::tls13_add_certificate_verify_in_buffer(this, 0, 0, 0, 0, 0);
}

uint64_t bssl::tls13_add_certificate_verify_in_buffer(bssl *this, bssl::SSL_HANDSHAKE *a2, void *a3, unsigned __int8 **a4, unint64_t *a5, const unsigned __int8 *a6)
{
  if (!*((_WORD *)this + 797)) {
    bssl::tls13_add_certificate_verify_in_buffer();
  }
  char v10 = (char)a2;
  uint64_t v12 = *(bssl **)this;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[1] = v13;
  long long v26[2] = v13;
  v26[0] = v13;
  CBB_zero(v26);
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[1] = v14;
  int8x16_t v25[2] = v14;
  v25[0] = v14;
  if ((*(unsigned int (**)(bssl *, _OWORD *, _OWORD *, uint64_t))(*(void *)v12 + 88))(v12, v26, v25, 15)&& CBB_add_u16((uint64_t)v25, *((unsigned __int16 *)this + 797)))
  {
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v24[1] = v15;
    _OWORD v24[2] = v15;
    v24[0] = v15;
    int v16 = EVP_PKEY_size(*(EVP_PKEY **)(*((void *)this + 188) + 8));
    uint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    size_t v23 = (void *)0xAAAAAAAAAAAAAAAALL;
    if (CBB_add_u16_length_prefixed((uint64_t *)v25, (uint64_t)v24)
      && CBB_reserve((uint64_t)v24, &v23, v16))
    {
      int v20 = 0;
      size_t v21 = 0;
      if (v10) {
        unsigned int v17 = 3;
      }
      else {
        unsigned int v17 = (*((unsigned char *)v12 + 180) & 1) == 0;
      }
      if (bssl::tls13_get_cert_verify_signature_input((uint64_t)this, (uint64_t)&v20, v17, a5, (size_t)a6))
      {
        uint64_t v18 = bssl::ssl_private_key_sign((uint64_t)this, v23, (unint64_t *)&v22, v16, (evp_pkey_st *)*((unsigned __int16 *)this + 797), v20, v21);
        if (!v18)
        {
          if (a3)
          {
            if (!CBB_did_write((uint64_t)v24, v22) || !CBB_finish((uint64_t)v26, a3, a4))
            {
LABEL_23:
              uint64_t v18 = 2;
              goto LABEL_18;
            }
          }
          else if (!CBB_did_write((uint64_t)v24, v22) {
                 || (bssl::ssl_add_message_cbb((uint64_t)v12, (uint64_t)v26) & 1) == 0)
          }
          {
            goto LABEL_23;
          }
          uint64_t v18 = 0;
        }
      }
      else
      {
        uint64_t v18 = 2;
        bssl::ssl_send_alert(v12, (ssl_st *)2, 80);
      }
LABEL_18:
      OPENSSL_free(v20);
      goto LABEL_19;
    }
    uint64_t v18 = 2;
    bssl::ssl_send_alert(v12, (ssl_st *)2, 80);
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/tls13_both.cc", 794);
    uint64_t v18 = 2;
  }
LABEL_19:
  CBB_cleanup((uint64_t)v26);
  return v18;
}

void sub_1BA1402FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

uint64_t bssl::tls13_add_key_update(bssl *this, ssl_st *a2)
{
  unsigned __int8 v2 = a2;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = v4;
  _OWORD v9[2] = v4;
  v9[0] = v4;
  CBB_zero(v9);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v5;
  _OWORD v8[2] = v5;
  v8[0] = v5;
  if (*(unsigned int (**)(bssl *, _OWORD *, _OWORD *, uint64_t))(*(void *)this + 88))(this, v9, v8, 24)&& CBB_add_u8((uint64_t)v8, v2)&& bssl::ssl_add_message_cbb((uint64_t)this, (uint64_t)v9)&& (bssl::tls13_rotate_traffic_key((const SSL *)this, 1))
  {
    *(_WORD *)(*((void *)this + 6) + 220) |= 0x200u;
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  CBB_cleanup((uint64_t)v9);
  return v6;
}

void sub_1BA140400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  CBB_cleanup((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::ssl_client_hello_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a4;
  LODWORD(result) = bssl::ssl_parse_client_hello_with_trailing_data(a1, (uint64_t)&v5, a2);
  if (v6) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t bssl::ssl_parse_client_hello_with_trailing_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 8bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a3 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = a1;
  uint64_t v5 = *(unsigned __int16 **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  memset(v16, 170, sizeof(v16));
  uint64_t result = CBS_get_u16((unsigned __int16 **)a2, (_WORD *)(a3 + 24));
  if (result)
  {
    uint64_t result = CBS_get_bytes((uint64_t *)a2, &v16[2], 0x20uLL);
    if (result)
    {
      uint64_t result = CBS_get_u8_length_prefixed((unsigned __int8 **)a2, v16);
      if (result)
      {
        unint64_t v8 = v16[1];
        if (v16[1] > 0x20) {
          return 0;
        }
        unint64_t v9 = v16[3];
        *(void *)(a3 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v16[2];
        *(void *)(a3 + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v9;
        *(void *)(a3 + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v16[0];
        *(void *)(a3 + 56) = v8;
        if (!SSL_is_dtls(*(unsigned __int8 ***)a3)
          || (_OWORD v15[2] = 0xAAAAAAAAAAAAAAAALL,
              _OWORD v15[3] = 0xAAAAAAAAAAAAAAAALL,
              uint64_t result = CBS_get_u8_length_prefixed((unsigned __int8 **)a2, &v15[2]),
              result))
        {
          memset(v15, 170, sizeof(v15));
          uint64_t result = CBS_get_u16_length_prefixed((unsigned __int8 **)a2, &v15[2]);
          if (result)
          {
            uint64_t result = 0;
            if (v15[3] >= 2 && (v15[3] & 1) == 0)
            {
              uint64_t result = CBS_get_u8_length_prefixed((unsigned __int8 **)a2, v15);
              if (result)
              {
                unint64_t v10 = v15[1];
                if (!v15[1]) {
                  return 0;
                }
                unint64_t v11 = v15[3];
                *(void *)(a3 + 64) = v15[2];
                *(void *)(a3 + 72) = v11;
                *(void *)(a3 + 8std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v15[0];
                *(void *)(a3 + 8bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v10;
                uint64_t v12 = *(void *)(a2 + 8);
                if (v12)
                {
                  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
                  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  if (!CBS_get_u16_length_prefixed((unsigned __int8 **)a2, (unint64_t *)&v14)
                    || !bssl::tls1_check_duplicate_extensions(&v14))
                  {
                    return 0;
                  }
                  uint64_t v13 = *((void *)&v14 + 1);
                  *(void *)(a3 + 96) = v14;
                  *(void *)(a3 + 104) = v13;
                  uint64_t v12 = *(void *)(a2 + 8);
                }
                else
                {
                  *(void *)(a3 + 96) = 0;
                  *(void *)(a3 + 104) = 0;
                }
                *(void *)(a3 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v5;
                *(void *)(a3 + 16) = v6 - v12;
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ssl_client_hello_get_extension(uint64_t a1, _OWORD *a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  unint64_t v9 = *(unsigned __int8 **)(a1 + 96);
  uint64_t v10 = v3;
  if (!v3) {
    return 0;
  }
  while (1)
  {
    unsigned __int16 v8 = -21846;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = CBS_get_u16((unsigned __int16 **)&v9, &v8);
    if (!result) {
      break;
    }
    uint64_t result = CBS_get_u16_length_prefixed(&v9, (unint64_t *)&v7);
    if (!result) {
      break;
    }
    if (v8 == a3)
    {
      *a2 = v7;
      return 1;
    }
    if (!v10) {
      return 0;
    }
  }
  return result;
}

uint64_t bssl::tls1_get_shared_group(bssl *this, const ssl_st *a2, unsigned __int16 *a3)
{
  uint64_t v3 = *(bssl **)this;
  if ((*(unsigned char *)(*(void *)this + 180) & 1) == 0) {
    bssl::tls1_get_shared_group();
  }
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)(v4 + 112);
  if (v5)
  {
    uint64_t v6 = *(__int16 **)(v4 + 104);
  }
  else
  {
    uint64_t v6 = &bssl::kDefaultGroups;
    uint64_t v5 = 4;
  }
  long long v7 = (__int16 *)*((void *)this + 83);
  uint64_t v8 = *((void *)this + 84);
  if ((*((unsigned char *)v3 + 146) & 0x40) != 0)
  {
    long long v15 = (ssl_st *)a2;
    unint64_t v9 = (unsigned __int16 *)&v6[v5];
    uint64_t v10 = v6;
LABEL_9:
    while (!v8)
    {
LABEL_15:
      if (++v10 == (__int16 *)v9) {
        return 0;
      }
    }
    int v11 = (unsigned __int16)*v10;
    uint64_t v12 = 2 * v8;
    uint64_t v13 = v7;
    while (v11 != (unsigned __int16)*v13 || bssl::ssl_protocol_version(v3, a2) <= 0x303 && v11 == 25497)
    {
      ++v13;
      v12 -= 2;
      if (!v12) {
        goto LABEL_15;
      }
    }
    LOWORD(v15->version) = v11;
    return 1;
  }
  else
  {
    if (v8)
    {
      long long v15 = (ssl_st *)a2;
      unint64_t v9 = (unsigned __int16 *)&v7[v8];
      uint64_t v10 = (__int16 *)*((void *)this + 83);
      long long v7 = v6;
      uint64_t v8 = v5;
      goto LABEL_9;
    }
    return 0;
  }
}

BOOL bssl::tls1_check_group_id(bssl **this, const ssl_st *a2)
{
  if (!a2) {
    return 0;
  }
  int v2 = (int)a2;
  if (a2 == 25497 && bssl::ssl_protocol_version(*this, a2) < 0x304) {
    return 0;
  }
  uint64_t v5 = this[1];
  uint64_t v6 = *((void *)v5 + 14);
  if (v6)
  {
    long long v7 = (__int16 *)*((void *)v5 + 13);
  }
  else
  {
    long long v7 = &bssl::kDefaultGroups;
    uint64_t v6 = 4;
  }
  uint64_t v8 = 2 * v6 - 2;
  do
  {
    int v9 = (unsigned __int16)*v7++;
    BOOL result = v9 == v2;
    BOOL v10 = v9 == v2 || v8 == 0;
    v8 -= 2;
  }
  while (!v10);
  return result;
}

uint64_t bssl::ssl_negotiate_alpn(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a1;
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (!v4[10] || (bssl::ssl_client_hello_get_extension(a3, &v20, 16) & 1) == 0)
  {
    if (!v4[21]) {
      return 1;
    }
    ERR_put_error(16, 0, 307, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1512);
    uint64_t result = 0;
    char v13 = 120;
    goto LABEL_20;
  }
  *(_DWORD *)(a1 + 1584) &= ~0x4000u;
  uint64_t v18 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_u16_length_prefixed((unsigned __int8 **)&v20, (unint64_t *)&v18)
    || *((void *)&v20 + 1)
    || (bssl::ssl_is_valid_alpn_list(v18, v19) & 1) == 0)
  {
    ERR_put_error(16, 0, 190, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1527);
    uint64_t result = 0;
    char v13 = 50;
LABEL_20:
    *a2 = v13;
    return result;
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v16 = -86;
  int v6 = ((uint64_t (*)(void *, unint64_t *, unsigned __int8 *, unsigned __int8 *, void, void))v4[10])(v4, &v17, &v16, v18, v19, v4[11]);
  if ((v6 & 0xFFFFFFFD) == 1) {
    int v7 = 2;
  }
  else {
    int v7 = v6;
  }
  if (v4[21]) {
    int v8 = v7;
  }
  else {
    int v8 = v6;
  }
  uint64_t result = 1;
  switch(v8)
  {
    case 0:
      size_t v10 = v16;
      if (v16)
      {
        int v11 = (void **)(v4[6] + 496);
        uint64_t v12 = (const void *)v17;
        uint64_t result = bssl::Array<unsigned char>::Init((uint64_t)v11, v16);
        if (result)
        {
          memmove(*v11, v12, v10);
          return 1;
        }
      }
      else
      {
        ERR_put_error(16, 0, 259, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1554);
        uint64_t result = 0;
      }
      char v13 = 80;
      goto LABEL_20;
    case 1:
    case 3:
      return result;
    case 2:
      *a2 = 120;
      int v14 = 307;
      int v15 = 1569;
      goto LABEL_24;
    default:
      *a2 = 80;
      int v14 = 68;
      int v15 = 1574;
LABEL_24:
      ERR_put_error(16, 0, v14, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v15);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t bssl::ssl_ext_pre_shared_key_parse_serverhello(uint64_t a1, char *a2, uint64_t a3)
{
  __int16 v7 = -21846;
  if (CBS_get_u16((unsigned __int16 **)a3, &v7) && !*(void *)(a3 + 8))
  {
    if (!v7) {
      return 1;
    }
    ERR_put_error(16, 0, 195, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2000);
    char v5 = 115;
  }
  else
  {
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1993);
    char v5 = 50;
  }
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t bssl::ssl_ext_pre_shared_key_parse_clienthello(uint64_t a1, unint64_t *a2, _OWORD *a3, int *a4, char *a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)a7 + *(void *)(a7 + 8) == *(void *)(a6 + 96) + *(void *)(a6 + 104))
  {
    memset(v20, 170, sizeof(v20));
    if (CBS_get_u16_length_prefixed((unsigned __int8 **)a7, (unint64_t *)&v20[1])
      && CBS_get_u16_length_prefixed((unsigned __int8 **)&v20[1], a2)
      && CBS_get_u32((uint64_t *)&v20[1], a4)
      && CBS_get_u16_length_prefixed((unsigned __int8 **)a7, (unint64_t *)v20)
      && *((void *)&v20[0] + 1)
      && !*(void *)(a7 + 8))
    {
      *a3 = v20[0];
      if (*((void *)&v20[1] + 1))
      {
        uint64_t v17 = 1;
        do
        {
          memset(v19, 170, sizeof(v19));
          if (!CBS_get_u16_length_prefixed((unsigned __int8 **)&v20[1], (unint64_t *)&v19[1])
            || !CBS_get_u32((uint64_t *)&v20[1], v19))
          {
            int v16 = 2043;
            goto LABEL_11;
          }
          ++v17;
        }
        while (*((void *)&v20[1] + 1));
        if (*((void *)&v20[0] + 1)) {
          goto LABEL_23;
        }
        uint64_t v18 = 0;
LABEL_26:
        if (v17 == v18) {
          return 1;
        }
        int v8 = 271;
        int v9 = 2066;
        goto LABEL_3;
      }
      uint64_t v17 = 1;
LABEL_23:
      uint64_t v18 = 0;
      while (1)
      {
        *(void *)&v19[1] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&_OWORD v19[3] = 0xAAAAAAAAAAAAAAAALL;
        if (!CBS_get_u8_length_prefixed((unsigned __int8 **)v20, (unint64_t *)&v19[1])) {
          break;
        }
        ++v18;
        if (!*((void *)&v20[0] + 1)) {
          goto LABEL_26;
        }
      }
      int v16 = 2057;
    }
    else
    {
      int v16 = 2029;
    }
LABEL_11:
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v16);
    uint64_t result = 0;
    char v11 = 50;
    goto LABEL_12;
  }
  int v8 = 267;
  int v9 = 2016;
LABEL_3:
  ERR_put_error(16, 0, v8, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v9);
  uint64_t result = 0;
  char v11 = 47;
LABEL_12:
  *a5 = v11;
  return result;
}

uint64_t bssl::ssl_ext_pre_shared_key_add_serverhello(uint64_t a1, uint64_t *a2)
{
  if ((*(_WORD *)(*(void *)(*(void *)a1 + 48) + 220) & 0x40) == 0) {
    return 1;
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v5[1] = v4;
  void v5[2] = v4;
  v5[0] = v4;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x29u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v5);
    if (result)
    {
      uint64_t result = CBB_add_u16((uint64_t)v5, 0);
      if (result) {
        return CBB_flush(a2) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ssl_ext_key_share_parse_clienthello(uint64_t a1, BOOL *a2, unint64_t *a3, unsigned char *a4, uint64_t a5)
{
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (bssl::ssl_client_hello_get_extension(a5, &v20, 51))
  {
    uint64_t v18 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
    if (!CBS_get_u16_length_prefixed((unsigned __int8 **)&v20, (unint64_t *)&v18)
      || *((void *)&v20 + 1))
    {
      int v14 = 2382;
LABEL_22:
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v14);
      return 0;
    }
    else
    {
      unint64_t v9 = v19;
      if (v19)
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
        int v12 = *(unsigned __int16 *)(*(void *)(a1 + 1520) + 6);
        while (1)
        {
          unsigned __int16 v17 = -21846;
          unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
          unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
          if (!CBS_get_u16((unsigned __int16 **)&v18, &v17)
            || !CBS_get_u16_length_prefixed(&v18, &v15)
            || (unint64_t v9 = v16) == 0)
          {
            int v14 = 2396;
            goto LABEL_22;
          }
          if (v17 == v12)
          {
            if (v11)
            {
              ERR_put_error(16, 0, 264, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2402);
              *a4 = 47;
              return 0;
            }
            unint64_t v10 = v15;
            unint64_t v11 = v16;
          }
          else
          {
            unint64_t v9 = v11;
          }
          if (!v19) {
            goto LABEL_18;
          }
        }
      }
      unint64_t v10 = 0;
LABEL_18:
      if (a3)
      {
        *a3 = v10;
        a3[1] = v9;
      }
      *a2 = v9 != 0;
      return 1;
    }
  }
  else
  {
    ERR_put_error(16, 0, 258, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2374);
    uint64_t result = 0;
    *a4 = 109;
  }
  return result;
}

uint64_t bssl::ssl_ext_key_share_add_serverhello(uint64_t a1, uint64_t *a2)
{
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x33u);
  if (result)
  {
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v7[1] = v5;
    unint64_t v7[2] = v5;
    void v6[2] = v5;
    v7[0] = v5;
    v6[0] = v5;
    v6[1] = v5;
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v7);
    if (result)
    {
      uint64_t result = CBB_add_u16((uint64_t)v7, *(unsigned __int16 *)(*(void *)(a1 + 1520) + 6));
      if (result)
      {
        uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v7, (uint64_t)v6);
        if (result)
        {
          uint64_t result = CBB_add_bytes((uint64_t)v6, *(const void **)(a1 + 632), *(void *)(a1 + 640));
          if (result) {
            return CBB_flush(a2) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ssl_get_local_application_settings(uint64_t a1, void *a2, void *__s1, size_t __n)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 144);
  if (!v5) {
    return 0;
  }
  unint64_t v9 = (void *)(*(void *)(v4 + 152) + 16);
  uint64_t v10 = 32 * v5;
  while (__n != *(v9 - 1) || memcmp(__s1, (const void *)*(v9 - 2), __n))
  {
    v9 += 4;
    v10 -= 32;
    if (!v10) {
      return 0;
    }
  }
  uint64_t v12 = v9[1];
  *a2 = *v9;
  a2[1] = v12;
  return 1;
}

uint64_t bssl::ssl_negotiate_alps(bssl **a1, ssl_st *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (*(void *)(*((void *)*a1 + 6) + 504))
  {
    *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    size_t v23 = 0;
    size_t v24 = 0;
    int v7 = (*(_WORD *)((unsigned char *)a1[1] + 301) & 0x2000) != 0 ? 17613 : 17513;
    if (bssl::ssl_protocol_version(v3, a2) >= 0x304
      && bssl::ssl_get_local_application_settings((uint64_t)a1, &v23, *(void **)(*((void *)v3 + 6) + 496), *(void *)(*((void *)v3 + 6) + 504))&& bssl::ssl_client_hello_get_extension(a3, &v25, v7))
    {
      size_t v21 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      if (CBS_get_u16_length_prefixed((unsigned __int8 **)&v25, (unint64_t *)&v21)
        && !*((void *)&v25 + 1)
        && v22)
      {
        char v8 = 0;
        do
        {
          __s1 = (void *)0xAAAAAAAAAAAAAAAALL;
          size_t __n = 0xAAAAAAAAAAAAAAAALL;
          if (!CBS_get_u8_length_prefixed(&v21, (unint64_t *)&__s1) || !__n)
          {
            int v17 = 3110;
            goto LABEL_27;
          }
          uint64_t v9 = *((void *)v3 + 6);
          BOOL v10 = __n == *(void *)(v9 + 504) && memcmp(__s1, *(const void **)(v9 + 496), __n) == 0;
          v8 |= v10;
        }
        while (v22);
        if ((v8 & 1) == 0) {
          return 1;
        }
        *((unsigned char *)a1[190] + 440) |= 0x40u;
        unint64_t v11 = (void **)((char *)a1[190] + 408);
        uint64_t v12 = v23;
        size_t v13 = v24;
        int v14 = bssl::Array<unsigned char>::Init((uint64_t)v11, v24);
        char v15 = v14;
        if (v13)
        {
          if (v14) {
            memmove(*v11, v12, v13);
          }
        }
        if (v15) {
          return 1;
        }
        char v18 = 80;
      }
      else
      {
        int v17 = 3101;
LABEL_27:
        ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v17);
        char v18 = 50;
      }
      LOBYTE(a2->version) = v18;
      return 0;
    }
  }
  return 1;
}

BOOL bssl::ssl_add_serverhello_tlsext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(bssl **)a1;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[1] = v5;
  _OWORD v17[2] = v5;
  v17[0] = v5;
  if (CBB_add_u16_length_prefixed(a2, (uint64_t)v17))
  {
    uint64_t v7 = 0;
    char v8 = &off_1F13976E0;
    do
    {
      if (((*(_DWORD *)(a1 + 376) >> v7) & 1) != 0 && !((unsigned int (*)(uint64_t, _OWORD *))*v8)(a1, v17))
      {
        ERR_put_error(16, 0, 147, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4020);
        ERR_add_error_dataf("extension %u", v10, v11, v12, v13, v14, v15, v16, *((_WORD *)v8 - 16));
        goto LABEL_11;
      }
      ++v7;
      v8 += 5;
    }
    while (v7 != 28);
    if (bssl::ssl_protocol_version(v4, v6) <= 0x303 && !CBB_len((uint64_t)v17)) {
      CBB_discard_child(a2);
    }
    return CBB_flush(a2) != 0;
  }
  else
  {
LABEL_11:
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4035);
    return 0;
  }
}

uint64_t bssl::ssl_parse_clienthello_tlsext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(bssl **)a1;
  *(_DWORD *)(a1 + 376) = 0;
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)size_t v37 = *(void *)(a2 + 96);
  uint64_t v38 = v5;
  if (!v5)
  {
LABEL_10:
    size_t v32 = v4;
    uint64_t v8 = 0;
    uint64_t v9 = bssl::kExtensions;
    do
    {
      if (((1 << v8) & *(_DWORD *)(a1 + 376)) == 0)
      {
        BOOL v34 = (void *)0xAAAAAAAAAAAAAAAALL;
        unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
        int v10 = (unsigned __int16)*v9;
        if (v10 == 65281 && bssl::ssl_client_cipher_list_contains_cipher(a2, 255))
        {
          BOOL v34 = &bssl::ssl_scan_clienthello_tlsext(bssl::SSL_HANDSHAKE *,ssl_early_callback_ctx const*,int *)::kFakeRenegotiateExtension;
          unint64_t v35 = 1;
          *(_DWORD *)(a1 + 376) |= 1 << v8;
          uint64_t v11 = &v34;
        }
        else
        {
          uint64_t v11 = 0;
        }
        LOBYTE(v36) = 50;
        if (((*((uint64_t (**)(uint64_t, unsigned __int16 *, void **))v9 + 3))(a1, &v36, v11) & 1) == 0)
        {
          ERR_put_error(16, 0, 164, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4095);
          ERR_add_error_dataf("extension %u", v18, v19, v20, v21, v22, v23, v24, v10);
          int v17 = v36;
          uint64_t v4 = v32;
          goto LABEL_28;
        }
      }
      ++v8;
      v9 += 20;
    }
    while (v8 != 28);
    uint64_t v12 = *(bssl **)a1;
    v37[0] = 112;
    uint64_t v13 = *((void *)v12 + 15);
    uint64_t v14 = *(uint64_t (**)(bssl *, int *, void))(v13 + 504);
    if (!v14)
    {
      uint64_t v13 = *((void *)v12 + 16);
      uint64_t v14 = *(uint64_t (**)(bssl *, int *, void))(v13 + 504);
      if (!v14)
      {
LABEL_22:
        *(_DWORD *)(a1 + 1584) &= ~0x100u;
        return 1;
      }
    }
    int v15 = v14(v12, v37, *(void *)(v13 + 512));
    if (v15 != 2)
    {
      if (v15 == 3) {
        goto LABEL_22;
      }
      return 1;
    }
    bssl::ssl_send_alert(v12, (ssl_st *)2, v37[0]);
    ERR_put_error(16, 0, 132, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4115);
    return 0;
  }
  while (2)
  {
    unsigned __int16 v36 = -21846;
    BOOL v34 = (void *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
    if (CBS_get_u16((unsigned __int16 **)v37, &v36)
      && CBS_get_u16_length_prefixed((unsigned __int8 **)v37, (unint64_t *)&v34))
    {
      uint64_t v6 = 0;
      uint64_t v7 = bssl::kExtensions;
      while ((unsigned __int16)*v7 != v36)
      {
        ++v6;
        v7 += 20;
        if (v6 == 28) {
          goto LABEL_9;
        }
      }
      *(_DWORD *)(a1 + 376) |= 1 << v6;
      unsigned __int8 v33 = 50;
      if (((*((uint64_t (**)(uint64_t, unsigned __int8 *, void **))v7 + 3))(a1, &v33, &v34) & 1) == 0)
      {
        int v17 = v33;
        ERR_put_error(16, 0, 149, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4067);
        ERR_add_error_dataf("extension %u", v25, v26, v27, v28, v29, v30, v31, v36);
        goto LABEL_28;
      }
LABEL_9:
      if (v38) {
        continue;
      }
      goto LABEL_10;
    }
    break;
  }
  int v17 = 50;
LABEL_28:
  bssl::ssl_send_alert(v4, (ssl_st *)2, v17);
  return 0;
}

uint64_t bssl::ssl_process_ticket(uint64_t *a1, SSL_SESSION **a2, unsigned char *a3, const unsigned __int8 *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v13 = (uint64_t *)*a1;
  *a3 = 0;
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](a2, 0);
  uint64_t v15 = 2;
  if ((SSL_get_options(*a1) & 0x4000) == 0 && a7 <= 0x20)
  {
    unsigned int v16 = bssl::ssl_protocol_version((bssl *)v13, v14);
    unsigned int v17 = v16;
    __dst = 0;
    unint64_t v38 = 0;
    uint64_t v18 = a1[197];
    if (v16 < 0x304 || v18 == 0)
    {
      if (v16 <= 0x303 && v18 && (*((unsigned char *)a1 + 1586) & 8) == 0)
      {
        size_t v20 = *(void *)(v18 + 232);
        if (v20)
        {
          uint64_t v21 = *(const void **)(v18 + 224);
          if (bssl::Array<unsigned char>::Init((uint64_t)&__dst, *(void *)(v18 + 232)))
          {
            memmove(__dst, v21, v20);
            uint64_t v15 = 0;
            *a3 = *(unsigned char *)(v18 + 240);
            goto LABEL_35;
          }
LABEL_18:
          uint64_t v15 = 3;
          goto LABEL_35;
        }
        if (*(unsigned char *)(v18 + 241)) {
          goto LABEL_20;
        }
      }
    }
    else if ((*((unsigned char *)a1 + 1586) & 8) == 0)
    {
      size_t v22 = *(void *)(v18 + 136);
      if (v22)
      {
        uint64_t v23 = *(const void **)(v18 + 128);
        if (bssl::Array<unsigned char>::Init((uint64_t)&__dst, *(void *)(v18 + 136)))
        {
          memmove(__dst, v23, v22);
          uint64_t v15 = 0;
          goto LABEL_35;
        }
        goto LABEL_18;
      }
      if (*(unsigned char *)(v18 + 144))
      {
LABEL_20:
        uint64_t v15 = 2;
        goto LABEL_35;
      }
    }
    uint64_t v24 = v13[16];
    if (*(void *)(v24 + 784))
    {
      BOOL v40 = 0;
      unint64_t v41 = 0;
      char v25 = bssl::Array<unsigned char>::Init((uint64_t)&v40, a5);
      uint64_t v26 = v40;
      if (v25)
      {
        unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v15 = (*(uint64_t (**)(void))(*(void *)(*(void *)(*a1 + 128) + 784) + 16))();
        if (v15)
        {
          uint64_t v26 = v40;
        }
        else
        {
          if (v41 < v39) {
            abort();
          }
          unint64_t v41 = v39;
          OPENSSL_free(__dst);
          uint64_t v26 = 0;
          __dst = v40;
          unint64_t v38 = v41;
          BOOL v40 = 0;
          unint64_t v41 = 0;
        }
      }
      else
      {
        uint64_t v15 = 3;
      }
      OPENSSL_free(v26);
      if (v18)
      {
LABEL_35:
        if ((*((unsigned char *)a1 + 1586) & 8) == 0) {
          goto LABEL_36;
        }
        if (v15)
        {
          if (v15 != 2) {
            goto LABEL_60;
          }
          if (v17 < 0x304) {
            *(unsigned char *)(v18 + 241) = 1;
          }
          else {
            *(unsigned char *)(v18 + 144) = 1;
          }
          goto LABEL_52;
        }
        uint64_t v30 = __dst;
        size_t v31 = v38;
        if (v17 < 0x304)
        {
          int v34 = bssl::Array<unsigned char>::Init(v18 + 224, v38);
          char v35 = v34 ^ 1;
          if (!v31) {
            char v35 = 1;
          }
          if ((v35 & 1) == 0) {
            memmove(*(void **)(v18 + 224), v30, v31);
          }
          if (!v34) {
            goto LABEL_59;
          }
          *(unsigned char *)(v18 + 24std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = *a3;
        }
        else
        {
          char v32 = bssl::Array<unsigned char>::Init(v18 + 128, v38);
          char v33 = v32 ^ 1;
          if (!v31) {
            char v33 = 1;
          }
          if ((v33 & 1) == 0) {
            memmove(*(void **)(v18 + 128), v30, v31);
          }
          if ((v32 & 1) == 0)
          {
LABEL_59:
            uint64_t v15 = 3;
            goto LABEL_60;
          }
        }
LABEL_37:
        uint64_t v28 = SSL_SESSION_from_bytes((uint64_t)__dst, v38, v13[15]);
        uint64_t v29 = v28;
        BOOL v40 = v28;
        if (v28)
        {
          SHA256(a4, a5, &v28->master_key[40]);
          v29->master_key[39] = 32;
          std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100](a2, v29);
          uint64_t v15 = 0;
          goto LABEL_60;
        }
        ERR_clear_error();
LABEL_52:
        uint64_t v15 = 2;
        goto LABEL_60;
      }
    }
    else if (a5 >= 0x20)
    {
      if (*(void *)(v24 + 536)) {
        uint64_t v27 = bssl::ssl_decrypt_ticket_with_cb((uint64_t)a1, (uint64_t)&__dst, a3, a4, a5);
      }
      else {
        uint64_t v27 = bssl::ssl_decrypt_ticket_with_ticket_keys((uint64_t)a1, (ssl_ctx_st *)&__dst, (uint64_t)a4, a5);
      }
      uint64_t v15 = v27;
      if (v18) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v15 = 2;
      if (v18) {
        goto LABEL_35;
      }
    }
LABEL_36:
    if (v15)
    {
LABEL_60:
      OPENSSL_free(__dst);
      return v15;
    }
    goto LABEL_37;
  }
  return v15;
}

void sub_1BA141974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::unique_ptr<ssl_session_st,bssl::internal::Deleter>::reset[abi:ne180100]((SSL_SESSION **)va1, 0);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::ssl_decrypt_ticket_with_cb(uint64_t a1, uint64_t a2, unsigned char *a3, const unsigned __int8 *a4, unint64_t a5)
{
  *(void *)&a.final[16] = *MEMORY[0x1E4F143B8];
  if (a5 <= 0x1F) {
    bssl::ssl_decrypt_ticket_with_cb();
  }
  *(void *)&a.final[8] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&a.flagunsigned int s = v10;
  *(_OWORD *)&a.final_useint d = v10;
  *(_OWORD *)&a.buf[24] = v10;
  *(_OWORD *)&a.app_unint64_t data = v10;
  *(_OWORD *)&a.iv[8] = v10;
  *(_OWORD *)&a.buf[8] = v10;
  *(_OWORD *)&a.encrypt = v10;
  *(_OWORD *)&a.oiv[8] = v10;
  *(_OWORD *)&a.cipheBIGNUM r = v10;
  EVP_CIPHER_CTX_init(&a);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15[4] = v11;
  int64x2_t v15[5] = v11;
  _OWORD v15[2] = v11;
  _OWORD v15[3] = v11;
  v15[0] = v11;
  v15[1] = v11;
  HMAC_CTX_init((HMAC_CTX *)v15);
  int v12 = (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 128) + 536))();
  if (v12 < 0)
  {
    uint64_t v13 = 3;
  }
  else if (v12)
  {
    if (v12 == 2)
    {
      *a3 = 1;
    }
    else if (v12 != 1)
    {
      __assert_rtn("ssl_decrypt_ticket_with_cb", "extensions.cc", 4338, "cb_ret == 1");
    }
    uint64_t v13 = bssl::decrypt_ticket_with_cipher_ctx(a2, &a, (HMAC_CTX *)v15, a4, a5);
  }
  else
  {
    uint64_t v13 = 2;
  }
  HMAC_CTX_cleanup((HMAC_CTX *)v15);
  EVP_CIPHER_CTX_cleanup(&a);
  return v13;
}

void sub_1BA141B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,EVP_CIPHER_CTX *a)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bssl::ssl_decrypt_ticket_with_ticket_keys(uint64_t a1, ssl_ctx_st *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a4 <= 0x1F) {
    bssl::ssl_decrypt_ticket_with_ticket_keys();
  }
  uint64_t v7 = *(void *)(*(void *)a1 + 128);
  if (!bssl::ssl_ctx_rotate_ticket_encryption_key((bssl *)v7, a2)) {
    return 3;
  }
  uint64_t v8 = EVP_aes_128_cbc();
  EVP_CIPHER_iv_length(v8);
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&ctx.key[116] = v9;
  long long v21 = v9;
  *(_OWORD *)&ctx.key[84] = v9;
  *(_OWORD *)&ctx.key[100] = v9;
  *(_OWORD *)&ctx.key[52] = v9;
  *(_OWORD *)&ctx.key[68] = v9;
  *(_OWORD *)&ctx.key[20] = v9;
  *(_OWORD *)&ctx.key[36] = v9;
  *(_OWORD *)&ctx._OWORD key[4] = v9;
  EVP_CIPHER_CTX_init((EVP_CIPHER_CTX *)&ctx.key[4]);
  ctx.o_ctx.md_unint64_t data = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&ctx.i_ctx.md_unint64_t data = v10;
  *(_OWORD *)&ctx.o_ctx.engine = v10;
  *(_OWORD *)&ctx.md_ctx.md_unint64_t data = v10;
  *(_OWORD *)&ctx.i_ctx.engine = v10;
  *(_OWORD *)&ctx.mint d = v10;
  *(_OWORD *)&ctx.md_ctx.engine = v10;
  HMAC_CTX_init(&ctx);
  uint64_t v19 = (pthread_rwlock_t *)0xAAAAAAAAAAAAAAAALL;
  bssl::internal::MutexLockBase<&(CRYPTO_MUTEX_lock_read),&(CRYPTO_MUTEX_unlock_read)>::MutexLockBase(&v19, (pthread_rwlock_t *)(v7 + 24));
  uint64_t v11 = *(void *)(v7 + 520);
  if (v11 && (*(void *)a3 == *(void *)v11 ? (BOOL v12 = *(void *)(a3 + 8) == *(void *)(v11 + 8)) : (BOOL v12 = 0), v12)
    || (uint64_t v11 = *(void *)(v7 + 528)) != 0
    && (*(void *)a3 == *(void *)v11 ? (BOOL v13 = *(void *)(a3 + 8) == *(void *)(v11 + 8)) : (BOOL v13 = 0), v13))
  {
    unint64_t v16 = EVP_sha256();
    HMAC_Init_ex(&ctx, (const void *)(v11 + 16), 16, v16, 0);
    if (v17) {
      BOOL v14 = EVP_DecryptInit_ex((EVP_CIPHER_CTX *)&ctx.key[4], v8, 0, (const unsigned __int8 *)(v11 + 32), (const unsigned __int8 *)(a3 + 16)) != 0;
    }
    else {
      BOOL v14 = 0;
    }
    uint64_t v15 = 3;
  }
  else
  {
    BOOL v14 = 0;
    uint64_t v15 = 2;
  }
  CRYPTO_MUTEX_unlock_read(v19);
  if (v14) {
    uint64_t v15 = bssl::decrypt_ticket_with_cipher_ctx((uint64_t)a2, (EVP_CIPHER_CTX *)&ctx.key[4], &ctx, (const unsigned __int8 *)a3, a4);
  }
  HMAC_CTX_cleanup(&ctx);
  EVP_CIPHER_CTX_cleanup((EVP_CIPHER_CTX *)&ctx.key[4]);
  return v15;
}

void sub_1BA141D6C(_Unwind_Exception *a1, uint64_t a2, HMAC_CTX *ctx, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t ctxa, uint64_t ctx_8, uint64_t ctx_16, uint64_t ctx_24, uint64_t ctx_32, uint64_t ctx_40, uint64_t ctx_48, uint64_t ctx_56, uint64_t ctx_64, uint64_t ctx_72,uint64_t ctx_80,uint64_t ctx_88,uint64_t ctx_96,uint64_t ctx_104,uint64_t ctx_112)
{
}

uint64_t bssl::tls1_parse_peer_sigalgs(bssl **a1, ssl_st *a2)
{
  if (bssl::ssl_protocol_version(*a1, a2) < 0x303) {
    return 1;
  }
  if (!a2->method) {
    return 0;
  }

  return bssl::parse_u16_array((long long *)&a2->version, (uint64_t)(a1 + 81));
}

uint64_t bssl::parse_u16_array(long long *a1, uint64_t a2)
{
  long long v11 = *a1;
  uint64_t v2 = *((void *)&v11 + 1);
  if (BYTE8(v11))
  {
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2549);
    return 0;
  }
  else
  {
    long long v9 = 0;
    unint64_t v10 = 0;
    if (bssl::Array<unsigned short>::Init((uint64_t)&v9, *((void *)&v11 + 1) >> 1))
    {
      if (v10)
      {
        uint64_t v4 = 0;
        unint64_t v5 = 0;
        while (CBS_get_u16((unsigned __int16 **)&v11, (char *)v9 + v4))
        {
          ++v5;
          v4 += 2;
          if (v5 >= v10)
          {
            uint64_t v2 = *((void *)&v11 + 1);
            goto LABEL_8;
          }
        }
        ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2559);
        uint64_t v7 = 0;
      }
      else
      {
LABEL_8:
        if (v2) {
          __assert_rtn("parse_u16_array", "extensions.cc", 2564, "CBS_len(&copy) == 0");
        }
        OPENSSL_free(*(void **)a2);
        unint64_t v6 = v10;
        *(void *)a2 = v9;
        *(void *)(a2 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v6;
        long long v9 = 0;
        unint64_t v10 = 0;
        uint64_t v7 = 1;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    OPENSSL_free(v9);
  }
  return v7;
}

void sub_1BA141F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t bssl::tls1_get_legacy_signature_algorithm(bssl *this, unsigned __int16 *a2, const evp_pkey_st *a3)
{
  int v4 = EVP_PKEY_id((uint64_t)a2);
  if (v4 == 6)
  {
    __int16 v5 = -255;
    goto LABEL_5;
  }
  if (v4 == 408)
  {
    __int16 v5 = 515;
LABEL_5:
    *(_WORD *)thiunsigned int s = v5;
    return 1;
  }
  return 0;
}

uint64_t bssl::tls1_choose_signature_algorithm(bssl *this, EVP_PKEY **a2, const ssl_credential_st *a3, unsigned __int16 *a4)
{
  uint64_t v7 = *(bssl **)this;
  if ((ssl_credential_st::UsesPrivateKey((ssl_credential_st *)a2) & 1) == 0)
  {
    int v12 = 228;
    int v13 = 4534;
LABEL_32:
    ERR_put_error(16, 0, v12, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", v13);
    return 0;
  }
  unsigned int v9 = bssl::ssl_protocol_version(v7, v8);
  if (v9 > 0x302)
  {
    if (*((_DWORD *)a2 + 1) == 1)
    {
      BOOL v14 = (char *)*((void *)this + 85);
      uint64_t v15 = *((void *)this + 86);
    }
    else
    {
      BOOL v16 = *((void *)this + 82) == 0;
      BOOL v17 = v9 == 771;
      if (v17 && v16) {
        uint64_t v15 = 2;
      }
      else {
        uint64_t v15 = *((void *)this + 82);
      }
      if (v17 && v16) {
        BOOL v14 = (char *)&bssl::tls1_choose_signature_algorithm(bssl::SSL_HANDSHAKE *,ssl_credential_st const*,unsigned short *)::kTLS12Default;
      }
      else {
        BOOL v14 = (char *)*((void *)this + 81);
      }
    }
    uint64_t v18 = (uint64_t)a2[5];
    if (v18)
    {
      uint64_t v19 = (__int16 *)a2[4];
    }
    else
    {
      uint64_t v19 = &bssl::kSignSignatureAlgorithms;
      uint64_t v18 = 12;
    }
    size_t v20 = &v19[v18];
    while (1)
    {
      int v21 = (unsigned __int16)*v19;
      if (bssl::ssl_pkey_supports_algorithm(v7, a2[1], (evp_pkey_st *)(unsigned __int16)*v19))
      {
        if (v15)
        {
          uint64_t v22 = 2 * v15;
          uint64_t v23 = v14;
          while (*(unsigned __int16 *)v23 != v21)
          {
            v23 += 2;
            v22 -= 2;
            if (!v22)
            {
              uint64_t v23 = &v14[2 * v15];
              break;
            }
          }
        }
        else
        {
          uint64_t v23 = v14;
        }
        if (v15 != (v23 - v14) >> 1) {
          break;
        }
      }
      if (++v19 == v20)
      {
        int v12 = 253;
        int v13 = 4579;
        goto LABEL_32;
      }
    }
    *(_WORD *)a3 = v21;
    return 1;
  }
  int v10 = EVP_PKEY_id((uint64_t)a2[1]);
  if (v10 == 6)
  {
    __int16 v11 = -255;
    goto LABEL_30;
  }
  if (v10 != 408)
  {
    int v12 = 253;
    int v13 = 4543;
    goto LABEL_32;
  }
  __int16 v11 = 515;
LABEL_30:
  *(_WORD *)a3 = v11;
  return 1;
}

uint64_t bssl::tls1_verify_channel_id(bssl **a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  __int16 v29 = -21846;
  long long v28 = *(_OWORD *)(a2 + 8);
  unsigned int s = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_u16((unsigned __int16 **)&v28, &v29)
    || !CBS_get_u16_length_prefixed((unsigned __int8 **)&v28, (unint64_t *)&s)
    || *((void *)&v28 + 1)
    || v29 != 30032
    || v27 != 128)
  {
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4594);
    bssl::ssl_send_alert(v3, (ssl_st *)2, 50);
    return 0;
  }
  int v4 = EC_group_p256();
  __int16 v5 = ECDSA_SIG_new();
  char v25 = v5;
  unint64_t v6 = BN_new();
  uint64_t v24 = v6;
  uint64_t v7 = BN_new();
  uint64_t v8 = v7;
  uint64_t v23 = v7;
  if (!v5 || !v6 || !v7)
  {
    uint64_t v11 = 0;
    uint64_t v18 = 0;
    uint64_t v23 = 0;
    if (!v7) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  unsigned int v9 = s;
  if (BN_bin2bn(s, 32, v6)
    && BN_bin2bn(v9 + 32, 32, v8)
    && BN_bin2bn(v9 + 64, 32, v5->r)
    && BN_bin2bn(v9 + 96, 32, v5->s))
  {
    eckey = EC_KEY_new();
    int v10 = EC_POINT_new((const EC_GROUP *)v4);
    uint64_t v11 = 0;
    int v21 = v10;
    if (!eckey || !v10) {
      goto LABEL_34;
    }
    if (EC_POINT_set_affine_coordinates_GFp((const EC_GROUP *)v4, v10, v6, v8, 0))
    {
      if (EC_KEY_set_group(eckey, (const EC_GROUP *)v4))
      {
        if (EC_KEY_set_public_key(eckey, v21))
        {
          *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v32 = v13;
          long long v33 = v13;
          *(_OWORD *)dgst = v13;
          long long v31 = v13;
          *(void *)dgst_leuint64_t n = 0xAAAAAAAAAAAAAAAALL;
          if (bssl::tls1_channel_id_hash(a1, (bssl::SSL_HANDSHAKE *)dgst, (unsigned __int8 *)dgst_len, v12))
          {
            if (ECDSA_do_verify(dgst, dgst_len[0], v5, eckey))
            {
              BOOL v14 = (_OWORD *)(*((void *)v3 + 6) + 520);
              long long v15 = *(_OWORD *)v9;
              long long v16 = *((_OWORD *)v9 + 1);
              long long v17 = *((_OWORD *)v9 + 3);
              void v14[2] = *((_OWORD *)v9 + 2);
              _OWORD v14[3] = v17;
              _OWORD *v14 = v15;
              v14[1] = v16;
              *(_WORD *)(*((void *)v3 + 6) + 220) |= 0x100u;
              uint64_t v11 = 1;
LABEL_34:
              std::unique_ptr<ec_point_st,bssl::internal::Deleter>::reset[abi:ne180100](&v21, 0);
              std::unique_ptr<ec_key_st,bssl::internal::Deleter>::reset[abi:ne180100](&eckey, 0);
              goto LABEL_26;
            }
            ERR_put_error(16, 0, 129, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4636);
            bssl::ssl_send_alert(v3, (ssl_st *)2, 51);
          }
        }
      }
    }
    uint64_t v11 = 0;
    goto LABEL_34;
  }
  uint64_t v11 = 0;
LABEL_26:
  uint64_t v23 = 0;
LABEL_27:
  BN_free(v8);
  uint64_t v18 = v11;
LABEL_28:
  uint64_t v24 = 0;
  if (v6) {
    BN_free(v6);
  }
  char v25 = 0;
  if (v5) {
    ECDSA_SIG_free(v5);
  }
  return v18;
}

void sub_1BA1424A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, EC_POINT *);
  va_copy(va2, va1);
  __int16 v5 = va_arg(va2, EC_KEY *);
  va_copy(va3, va2);
  uint64_t v7 = va_arg(va3, BIGNUM *);
  va_copy(va4, va3);
  unsigned int v9 = va_arg(va4, BIGNUM *);
  std::unique_ptr<ec_point_st,bssl::internal::Deleter>::reset[abi:ne180100]((EC_POINT **)va, 0);
  std::unique_ptr<ec_key_st,bssl::internal::Deleter>::reset[abi:ne180100]((EC_KEY **)va1, 0);
  std::unique_ptr<bignum_st,bssl::internal::Deleter>::reset[abi:ne180100]((BIGNUM **)va2, 0);
  std::unique_ptr<bignum_st,bssl::internal::Deleter>::reset[abi:ne180100]((BIGNUM **)va3, 0);
  std::unique_ptr<ecdsa_sig_st,bssl::internal::Deleter>::reset[abi:ne180100]((ECDSA_SIG **)va4, 0);
  _Unwind_Resume(a1);
}

uint64_t bssl::tls1_channel_id_hash(bssl **this, bssl::SSL_HANDSHAKE *a2, unsigned __int8 *a3, unint64_t *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *this;
  if (bssl::ssl_protocol_version(*this, (const ssl_st *)a2) < 0x304)
  {
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&c.data[10] = v9;
    *(_OWORD *)&c.data[14] = v9;
    *(_OWORD *)&c.data[6] = v9;
    *(_OWORD *)&c.Nl = v9;
    *(_OWORD *)&c.data[2] = v9;
    *(_OWORD *)c.h = v9;
    *(_OWORD *)&c.h[4] = v9;
    SHA256_Init(&c);
    SHA256_Update(&c, "TLS Channel ID signature", 0x19uLL);
    if (*((void *)v7 + 13))
    {
      SHA256_Update(&c, "Resumption", 0xBuLL);
      uint64_t v10 = *((void *)v7 + 13);
      if (!*(unsigned char *)(v10 + 368))
      {
        ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4713);
        return 0;
      }
      SHA256_Update(&c, (const void *)(v10 + 304), *(unsigned __int8 *)(v10 + 368));
    }
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    data[2] = v11;
    data[3] = v11;
    data[0] = v11;
    data[1] = v11;
    leuint64_t n = 0xAAAAAAAAAAAAAAAALL;
    uint64_t Hash = bssl::SSLTranscript::GetHash((bssl::SSLTranscript *)(this + 53), (unsigned __int8 *)data, &len);
    if (Hash)
    {
      SHA256_Update(&c, data, len);
      SHA256_Final((unsigned __int8 *)a2, &c);
      *(void *)a3 = 32;
    }
  }
  else
  {
    *(void *)c.h = 0;
    *(void *)&c.h[2] = 0;
    uint64_t Hash = bssl::tls13_get_cert_verify_signature_input((uint64_t)this, (uint64_t)&c, 2u, 0, 0);
    if (Hash)
    {
      SHA256(*(const unsigned __int8 **)c.h, *(size_t *)&c.h[2], (unsigned __int8 *)a2);
      *(void *)a3 = 32;
    }
    OPENSSL_free(*(void **)c.h);
  }
  return Hash;
}

void sub_1BA1426DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL bssl::tls1_write_channel_id(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v6;
  long long v25 = v6;
  *(_OWORD *)dgst = v6;
  long long v23 = v6;
  *(void *)dgst_leuint64_t n = 0xAAAAAAAAAAAAAAAALL;
  if (!bssl::tls1_channel_id_hash((bssl **)a1, (bssl::SSL_HANDSHAKE *)dgst, (unsigned __int8 *)dgst_len, a4))return 0; {
  uint64_t v7 = (const EC_KEY *)EVP_PKEY_get0_EC_KEY(*(void *)(*(void *)(a1 + 8) + 120));
  }
  if (!v7)
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 4655);
    return 0;
  }
  uint64_t v8 = BN_new();
  size_t v20 = v8;
  long long v9 = BN_new();
  uint64_t v10 = v9;
  uint64_t v19 = v9;
  if (v8)
  {
    if (!v9)
    {
      BOOL v15 = 0;
      size_t v20 = 0;
LABEL_24:
      BN_free(v8);
      return v15;
    }
    long long v11 = EC_KEY_get0_group(v7);
    int v12 = EC_KEY_get0_public_key(v7);
    if (EC_POINT_get_affine_coordinates_GFp(v11, v12, v8, v10, 0)
      && (v13 = (uint64_t *)ECDSA_do_sign(dgst, dgst_len[0], v7), (uint64_t v18 = v13) != 0))
    {
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v17[1] = v14;
      _OWORD v17[2] = v14;
      v17[0] = v14;
      BOOL v15 = CBB_add_u16((uint64_t)a2, 0x7550u)
         && CBB_add_u16_length_prefixed(a2, (uint64_t)v17)
         && BN_bn2cbb_padded((uint64_t)v17, 0x20uLL, (uint64_t)v8)
         && BN_bn2cbb_padded((uint64_t)v17, 0x20uLL, (uint64_t)v10)
         && BN_bn2cbb_padded((uint64_t)v17, 0x20uLL, *v13)
         && BN_bn2cbb_padded((uint64_t)v17, 0x20uLL, v13[1])
         && CBB_flush(a2) != 0;
      uint64_t v18 = 0;
      ECDSA_SIG_free((ECDSA_SIG *)v13);
    }
    else
    {
      BOOL v15 = 0;
    }
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    BOOL v15 = 0;
    if (!v9) {
      return v15;
    }
  }
  BN_free(v10);
  size_t v20 = 0;
  if (v8) {
    goto LABEL_24;
  }
  return v15;
}

void sub_1BA14291C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bssl::tls1_record_handshake_hashes_for_channel_id(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  if (*(void *)(*(void *)this + 104)) {
    return 0;
  }
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = bssl::SSLTranscript::GetHash((bssl *)((char *)this + 424), (unsigned __int8 *)(*((void *)this + 190) + 304), &v4);
  if (result) {
    *(unsigned char *)(*((void *)this + 190) + 36bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v4;
  }
  return result;
}

uint64_t bssl::ssl_is_sct_list_valid(long long *a1)
{
  long long v10 = *a1;
  uint64_t v8 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  u16_length_prefixeint d = CBS_get_u16_length_prefixed((unsigned __int8 **)&v10, (unint64_t *)&v8);
  uint64_t result = 0;
  if (u16_length_prefixed)
  {
    if (!*((void *)&v10 + 1) && v9 != 0)
    {
      do
      {
        unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
        unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
        if (CBS_get_u16_length_prefixed(&v8, &v6)) {
          BOOL v4 = v7 == 0;
        }
        else {
          BOOL v4 = 1;
        }
        uint64_t result = !v4;
      }
      while (result == 1 && v9 != 0);
    }
  }
  return result;
}

uint64_t bssl::ext_sni_parse_clienthello()
{
  return 1;
}

uint64_t bssl::ext_sni_add_serverhello(unsigned char *a1, uint64_t a2)
{
  if ((*(_WORD *)(*(void *)(*(void *)a1 + 48) + 220) & 0x40) != 0 || (a1[1585] & 1) == 0) {
    return 1;
  }
  uint64_t result = CBB_add_u16(a2, 0);
  if (result) {
    return CBB_add_u16(a2, 0) != 0;
  }
  return result;
}

uint64_t bssl::ext_ech_parse_clienthello(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 1;
  }
  char v6 = -86;
  uint64_t result = CBS_get_u8(a3, &v6);
  if (!result) {
    return result;
  }
  if (v6)
  {
    if (v6 != 1 || a3[1]) {
      return 0;
    }
    *(_DWORD *)(a1 + 1584) |= 1u;
  }
  return 1;
}

uint64_t bssl::ext_ech_add_serverhello(uint64_t a1, ssl_st *a2)
{
  BOOL v4 = *(bssl **)a1;
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) < 0x304
    || *(_DWORD *)(*((void *)v4 + 6) + 216) == 1
    || !*(void *)(a1 + 1536))
  {
    return 1;
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = v5;
  long long v12[2] = v5;
  unint64_t v11[2] = v5;
  v12[0] = v5;
  v11[0] = v5;
  v11[1] = v5;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0xFE0Du);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)&a2->version, (uint64_t)v12);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v12, (uint64_t)v11);
      if (result)
      {
        uint64_t v7 = *(void *)(a1 + 1536);
        uint64_t v8 = *(void *)(v7 + 8);
        if (v8)
        {
          unint64_t v9 = *(const void ****)(v7 + 16);
          uint64_t v10 = 8 * v8;
          while (1)
          {
            if (*((unsigned char *)*v9 + 144))
            {
              uint64_t result = CBB_add_bytes((uint64_t)v11, **v9, (size_t)(*v9)[1]);
              if (!result) {
                break;
              }
            }
            ++v9;
            v10 -= 8;
            if (!v10) {
              return CBB_flush((uint64_t *)&a2->version) != 0;
            }
          }
        }
        else
        {
          return CBB_flush((uint64_t *)&a2->version) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ems_parse_clienthello(uint64_t a1, const ssl_st *a2, uint64_t a3)
{
  unsigned int v5 = bssl::ssl_protocol_version(*(bssl **)a1, a2);
  uint64_t result = 1;
  if (a3 && v5 <= 0x303)
  {
    if (*(void *)(a3 + 8)) {
      return 0;
    }
    else {
      *(_DWORD *)(a1 + 1584) |= 0x10000u;
    }
  }
  return result;
}

uint64_t bssl::ext_ems_add_serverhello(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 1586) & 1) == 0) {
    return 1;
  }
  uint64_t result = CBB_add_u16(a2, 0x17u);
  if (result) {
    return CBB_add_u16(a2, 0) != 0;
  }
  return result;
}

uint64_t bssl::ext_ri_parse_clienthello(bssl **a1, ssl_st *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if ((*(_WORD *)(*((void *)*a1 + 6) + 220) & 0x20) != 0) {
    bssl::ext_ri_parse_clienthello();
  }
  unsigned int v6 = bssl::ssl_protocol_version(*a1, a2);
  uint64_t result = 1;
  if (a3 && v6 <= 0x303)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    if (CBS_get_u8_length_prefixed((unsigned __int8 **)a3, &v8) && !*(void *)(a3 + 8))
    {
      if (v9)
      {
        ERR_put_error(16, 0, 202, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 836);
        uint64_t result = 0;
        LOBYTE(a2->version) = 40;
      }
      else
      {
        *(_WORD *)(*((void *)v3 + 6) + 220) |= 0x80u;
        return 1;
      }
    }
    else
    {
      ERR_put_error(16, 0, 201, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 829);
      return 0;
    }
  }
  return result;
}

uint64_t bssl::ext_ri_add_serverhello(bssl **a1, const ssl_st *a2)
{
  uint64_t v2 = *a1;
  if ((*(_WORD *)(*((void *)v2 + 6) + 220) & 0x20) != 0) {
    bssl::ext_ri_add_serverhello();
  }
  if (bssl::ssl_protocol_version(v2, a2) > 0x303) {
    return 1;
  }
  uint64_t result = CBB_add_u16((uint64_t)a2, 0xFF01u);
  if (result)
  {
    uint64_t result = CBB_add_u16((uint64_t)a2, 1u);
    if (result) {
      return CBB_add_u8((uint64_t)a2, 0) != 0;
    }
  }
  return result;
}

uint64_t bssl::ext_supported_groups_parse_clienthello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  u16_length_prefixeint d = CBS_get_u16_length_prefixed((unsigned __int8 **)a3, (unint64_t *)&v7);
  uint64_t result = 0;
  if (u16_length_prefixed && *((void *)&v7 + 1))
  {
    if (*(void *)(a3 + 8)) {
      return 0;
    }
    else {
      return bssl::parse_u16_array(&v7, a1 + 664);
    }
  }
  return result;
}

uint64_t bssl::dont_add_serverhello()
{
  return 1;
}

uint64_t bssl::ext_ec_point_parse_clienthello(bssl **a1, ssl_st *a2, uint64_t a3)
{
  if (bssl::ssl_protocol_version(*a1, a2) > 0x303) {
    return 1;
  }

  return bssl::ext_ec_point_parse_serverhello(a1, a2, a3);
}

uint64_t bssl::ext_ec_point_add_serverhello(uint64_t a1, ssl_st *a2)
{
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) > 0x303
    || !(*(_DWORD *)(*(void *)(a1 + 1552) + 20) & 2 | *(_DWORD *)(*(void *)(a1 + 1552) + 24) & 4))
  {
    return 1;
  }

  return bssl::ext_ec_point_add_extension((uint64_t *)&a2->version);
}

uint64_t bssl::ignore_parse_clienthello()
{
  return 1;
}

uint64_t bssl::ext_ticket_add_serverhello(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 1585) & 0x80) == 0) {
    return 1;
  }
  if ((SSL_get_options(*(void *)a1) & 0x4000) != 0) {
    bssl::ext_ticket_add_serverhello();
  }
  uint64_t result = CBB_add_u16(a2, 0x23u);
  if (result) {
    return CBB_add_u16(a2, 0) != 0;
  }
  return result;
}

uint64_t bssl::ext_alpn_add_serverhello(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*(void *)(*(void *)(*a1 + 48) + 504)) {
    return 1;
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v4;
  _OWORD v8[2] = v4;
  v8[0] = v4;
  v7[1] = v4;
  unint64_t v7[2] = v4;
  void v6[2] = v4;
  v7[0] = v4;
  v6[0] = v4;
  v6[1] = v4;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x10u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v8);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v8, (uint64_t)v7);
      if (result)
      {
        uint64_t result = CBB_add_u8_length_prefixed((uint64_t *)v7, (uint64_t)v6);
        if (result)
        {
          uint64_t result = CBB_add_bytes((uint64_t)v6, *(const void **)(*(void *)(v2 + 48) + 496), *(void *)(*(void *)(v2 + 48) + 504));
          if (result) {
            return CBB_flush(a2) != 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL bssl::ext_ocsp_parse_clienthello(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 1;
  }
  char v6 = -86;
  int u8 = CBS_get_u8(a3, &v6);
  BOOL result = u8 != 0;
  if (u8) {
    *(_DWORD *)(a1 + 1bssl::Array<unsigned short>::~Array((uint64_t)this + 584) = *(_DWORD *)(a1 + 1584) & 0xFFFFFF7F | ((v6 == 1) << 7);
  }
  return result;
}

uint64_t bssl::ext_ocsp_add_serverhello(uint64_t a1, const ssl_st *a2)
{
  long long v4 = *(bssl **)a1;
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) > 0x303
    || (*(unsigned char *)(a1 + 1584) & 0x80) == 0
    || (*(_WORD *)(*((void *)v4 + 6) + 220) & 0x40) != 0
    || !bssl::ssl_cipher_uses_certificate_auth(*(bssl **)(a1 + 1552), v5)
    || !*(void *)(*(void *)(a1 + 1504) + 80))
  {
    return 1;
  }
  *(_DWORD *)(a1 + 1584) |= 0x40u;
  uint64_t result = CBB_add_u16((uint64_t)a2, 5u);
  if (result) {
    return CBB_add_u16((uint64_t)a2, 0) != 0;
  }
  return result;
}

uint64_t bssl::ext_sigalgs_parse_clienthello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (_OWORD *)(a1 + 648);
  OPENSSL_free(*(void **)(a1 + 648));
  *unsigned int v5 = 0u;
  if (!a3) {
    return 1;
  }
  v7[0] = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CBS_get_u16_length_prefixed((unsigned __int8 **)a3, v7);
  if (result)
  {
    if (*(void *)(a3 + 8)) {
      return 0;
    }
    else {
      return bssl::tls1_parse_peer_sigalgs((bssl **)a1, (ssl_st *)v7);
    }
  }
  return result;
}

uint64_t bssl::ext_npn_parse_clienthello(uint64_t a1, const ssl_st *a2, uint64_t a3)
{
  unsigned int v5 = *(bssl **)a1;
  unsigned int v6 = bssl::ssl_protocol_version(*(bssl **)a1, a2);
  uint64_t result = 1;
  if (a3 && v6 <= 0x303)
  {
    if (*(void *)(a3 + 8))
    {
      return 0;
    }
    else if ((*(_WORD *)(*((void *)v5 + 6) + 220) & 0x20) == 0 && *(void *)(*((void *)v5 + 15) + 576))
    {
      if (!SSL_is_dtls((unsigned __int8 **)v5)) {
        *(_DWORD *)(a1 + 1584) |= 0x4000u;
      }
      return 1;
    }
  }
  return result;
}

uint64_t bssl::ext_npn_add_serverhello(uint64_t *a1, uint64_t *a2)
{
  if ((*((unsigned char *)a1 + 1585) & 0x40) == 0) {
    return 1;
  }
  uint64_t v4 = *a1;
  unint64_t v9 = (const void *)0xAAAAAAAAAAAAAAAALL;
  unsigned int v8 = -1431655766;
  if ((*(unsigned int (**)(void))(*(void *)(v4 + 120) + 576))())
  {
    *((_DWORD *)a1 + 396) &= ~0x4000u;
    return 1;
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = v6;
  unint64_t v7[2] = v6;
  v7[0] = v6;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x3374u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v7);
    if (result)
    {
      uint64_t result = CBB_add_bytes((uint64_t)v7, v9, v8);
      if (result) {
        return CBB_flush(a2) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_sct_parse_clienthello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (*(void *)(a3 + 8)) {
      return 0;
    }
    *(_DWORD *)(a1 + 1584) |= 4u;
  }
  return 1;
}

uint64_t bssl::ext_sct_add_serverhello(uint64_t a1, ssl_st *a2)
{
  if ((*(unsigned char *)(a1 + 1584) & 4) == 0) {
    bssl::ext_sct_add_serverhello();
  }
  uint64_t v4 = *(bssl **)a1;
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) > 0x303
    || (*(_WORD *)(*((void *)v4 + 6) + 220) & 0x40) != 0
    || !bssl::ssl_cipher_uses_certificate_auth(*(bssl **)(a1 + 1552), v5)
    || !*(void *)(*(void *)(a1 + 1504) + 72))
  {
    return 1;
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = v6;
  long long v10[2] = v6;
  v10[0] = v6;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x12u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)&a2->version, (uint64_t)v10);
    if (result)
    {
      unsigned int v8 = (const void *)CRYPTO_BUFFER_data(*(void *)(*(void *)(a1 + 1504) + 72));
      size_t v9 = CRYPTO_BUFFER_len(*(void *)(*(void *)(a1 + 1504) + 72));
      uint64_t result = CBB_add_bytes((uint64_t)v10, v8, v9);
      if (result) {
        return CBB_flush((uint64_t *)&a2->version) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_channel_id_parse_clienthello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  if ((*(_WORD *)(*(void *)(a1 + 8) + 301) & 8) == 0 || SSL_is_dtls(*(unsigned __int8 ***)a1)) {
    return 1;
  }
  if (!*(void *)(a3 + 8))
  {
    *(_DWORD *)(a1 + 1584) |= 0x2000000u;
    return 1;
  }
  return 0;
}

uint64_t bssl::ext_channel_id_add_serverhello(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 1587) & 2) == 0) {
    return 1;
  }
  uint64_t result = CBB_add_u16(a2, 0x7550u);
  if (result) {
    return CBB_add_u16(a2, 0) != 0;
  }
  return result;
}

uint64_t bssl::ext_srtp_parse_clienthello(unsigned __int8 ***a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *a1;
    if (SSL_is_dtls(*a1))
    {
      memset(v19, 170, sizeof(v19));
      if (CBS_get_u16_length_prefixed((unsigned __int8 **)a3, &v19[2])
        && v19[3] >= 2
        && CBS_get_u8_length_prefixed((unsigned __int8 **)a3, v19)
        && !*(void *)(a3 + 8))
      {
        srtp_profileunsigned int s = (EVP_MD_CTX *)SSL_get_srtp_profiles((uint64_t)v4);
        unsigned int v8 = EVP_MD_CTX_md(srtp_profiles);
        if (v8)
        {
          uint64_t v10 = v8;
          unint64_t v11 = 0;
          while (1)
          {
            int v12 = OPENSSL_sk_value((unint64_t *)srtp_profiles, v11);
            char v9 = v19[2];
            long long v17 = (unsigned __int16 *)v19[2];
            unint64_t v18 = v19[3];
            if (v19[3]) {
              break;
            }
LABEL_18:
            if ((const EVP_MD *)++v11 == v10) {
              goto LABEL_19;
            }
          }
          long long v13 = v12;
          while (1)
          {
            unsigned __int16 v16 = -21846;
            int u16 = CBS_get_u16(&v17, &v16);
            char v9 = u16 != 0;
            if (!u16) {
              break;
            }
            if (v13[1] == v16)
            {
              *((void *)v4[6] + 75) = v13;
              break;
            }
            char v9 = v18;
            if (!v18) {
              goto LABEL_18;
            }
          }
          char v15 = 0;
        }
        else
        {
LABEL_19:
          char v15 = 1;
        }
        char v5 = v15 | v9;
      }
      else
      {
        ERR_put_error(16, 0, 116, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 1772);
        char v5 = 0;
      }
    }
    else
    {
      char v5 = 1;
    }
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t bssl::ext_srtp_add_serverhello(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*((void *)(*a1)[6] + 75)) {
    return 1;
  }
  if (!SSL_is_dtls(*a1)) {
    bssl::ext_srtp_add_serverhello();
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = v4;
  unint64_t v7[2] = v4;
  void v6[2] = v4;
  v7[0] = v4;
  v6[0] = v4;
  v6[1] = v4;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0xEu);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v7);
    if (result)
    {
      uint64_t result = CBB_add_u16_length_prefixed((uint64_t *)v7, (uint64_t)v6);
      if (result)
      {
        uint64_t result = CBB_add_u16((uint64_t)v6, *(unsigned __int16 *)(*((void *)v2[6] + 75) + 8));
        if (result)
        {
          uint64_t result = CBB_add_u8((uint64_t)v7, 0);
          if (result) {
            return CBB_flush(a2) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_psk_key_exchange_modes_parse_clienthello(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  __unsigned int s = (void *)0xAAAAAAAAAAAAAAAALL;
  size_t __n = 0xAAAAAAAAAAAAAAAALL;
  if (CBS_get_u8_length_prefixed((unsigned __int8 **)a3, (unint64_t *)&__s)
    && __n
    && !*(void *)(a3 + 8))
  {
    uint64_t v6 = 1;
    *(_DWORD *)(a1 + 1bssl::Array<unsigned short>::~Array((uint64_t)this + 584) = *(_DWORD *)(a1 + 1584) & 0xFFFFFFEF | (16 * (memchr(__s, 1, __n) != 0));
  }
  else
  {
    uint64_t v6 = 0;
    *a2 = 50;
  }
  return v6;
}

uint64_t bssl::ext_early_data_parse_clienthello(uint64_t a1, ssl_st *a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  if (bssl::ssl_protocol_version(*(bssl **)a1, a2) >= 0x304)
  {
    if (*(void *)(a3 + 8))
    {
      uint64_t result = 0;
      LOBYTE(a2->version) = 50;
      return result;
    }
    *(_DWORD *)(a1 + 1584) |= 0x800u;
  }
  return 1;
}

uint64_t bssl::ext_early_data_add_serverhello(uint64_t a1, uint64_t *a2)
{
  if ((*(_WORD *)(*(void *)(*(void *)a1 + 48) + 220) & 0x400) == 0) {
    return 1;
  }
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x2Au);
  if (result)
  {
    uint64_t result = CBB_add_u16((uint64_t)a2, 0);
    if (result) {
      return CBB_flush(a2) != 0;
    }
  }
  return result;
}

uint64_t bssl::ext_quic_transport_params_parse_clienthello(void *a1, ssl_st *a2, uint64_t a3)
{
  return bssl::ext_quic_transport_params_parse_clienthello_impl(a1, a2, a3, 0);
}

uint64_t bssl::ext_quic_transport_params_add_serverhello(void *a1, uint64_t *a2)
{
  return bssl::ext_quic_transport_params_add_serverhello_impl(a1, a2, 0);
}

uint64_t bssl::ext_quic_transport_params_parse_clienthello_legacy(void *a1, ssl_st *a2, uint64_t a3)
{
  return bssl::ext_quic_transport_params_parse_clienthello_impl(a1, a2, a3, 1);
}

uint64_t bssl::ext_quic_transport_params_add_serverhello_legacy(void *a1, uint64_t *a2)
{
  return bssl::ext_quic_transport_params_add_serverhello_impl(a1, a2, 1);
}

uint64_t bssl::cert_compression_parse_clienthello(bssl **a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v5 = *((void *)*a1 + 15);
  unint64_t v6 = *(void *)(v5 + 704);
  unint64_t v27 = (unsigned __int16 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_u8_length_prefixed((unsigned __int8 **)a3, (unint64_t *)&v27)
    || *(void *)(a3 + 8))
  {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v9 = v28;
  if (v28 && (v28 & 1) == 0)
  {
    unint64_t v10 = v28 >> 1;
    __base = 0;
    size_t __nel = 0;
    if (bssl::Array<unsigned short>::Init((uint64_t)&__base, v28 >> 1))
    {
      if (v28)
      {
        uint64_t v11 = 0;
        unint64_t v12 = v6;
        while (1)
        {
          unsigned __int16 v24 = -21846;
          if (!CBS_get_u16(&v27, &v24)) {
            break;
          }
          long long v13 = __base;
          *((_WORD *)__base + v11) = v24;
          if (v6)
          {
            unint64_t v14 = 0;
            char v15 = (unsigned __int16 *)(*(void *)(v5 + 712) + 16);
            while (*v15 != v24 || *((void *)v15 - 2) == 0)
            {
              ++v14;
              v15 += 12;
              if (v6 == v14) {
                goto LABEL_24;
              }
            }
            if (v14 < v12) {
              unint64_t v12 = v14;
            }
          }
LABEL_24:
          ++v11;
          if (!v28) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        long long v13 = __base;
        unint64_t v12 = v6;
LABEL_27:
        qsort(v13, __nel, 2uLL, (int (__cdecl *)(const void *, const void *))bssl::compare_uint16_t);
        if (v9 < 4)
        {
LABEL_33:
          if (v12 < v6 && bssl::ssl_protocol_version(*a1, v17) >= 0x304)
          {
            *((_DWORD *)a1 + 396) |= 0x100000u;
            *((_WORD *)a1 + 364) = *(_WORD *)(*(void *)(v5 + 712) + 24 * v12 + 16);
          }
          uint64_t v7 = 1;
          goto LABEL_38;
        }
        uint64_t v18 = 2;
        if (v10 > 2) {
          uint64_t v18 = v9 >> 1;
        }
        uint64_t v19 = (unsigned __int16 *)((char *)__base + 2);
        int v20 = *(unsigned __int16 *)__base;
        uint64_t v21 = v18 - 1;
        while (1)
        {
          int v23 = *v19++;
          int v22 = v23;
          if (v20 == v23) {
            break;
          }
          int v20 = v22;
          if (!--v21) {
            goto LABEL_33;
          }
        }
      }
    }
    uint64_t v7 = 0;
LABEL_38:
    OPENSSL_free(__base);
  }
  return v7;
}

void sub_1BA143B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::cert_compression_add_serverhello()
{
  return 1;
}

uint64_t bssl::ext_delegated_credential_parse_clienthello(bssl **a1, const ssl_st *a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  if (bssl::ssl_protocol_version(*a1, a2) < 0x304) {
    return 1;
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  u16_length_prefixeint d = CBS_get_u16_length_prefixed((unsigned __int8 **)a3, (unint64_t *)&v7);
  uint64_t result = 0;
  if (u16_length_prefixed && *((void *)&v7 + 1))
  {
    if (*(void *)(a3 + 8)) {
      return 0;
    }
    else {
      return bssl::parse_u16_array(&v7, (uint64_t)(a1 + 85));
    }
  }
  return result;
}

uint64_t bssl::ext_alps_add_serverhello(void *a1, uint64_t *a2)
{
  return bssl::ext_alps_add_serverhello_impl(a1, a2, 1);
}

uint64_t bssl::ext_client_certificate_type_parse_clienthello(uint64_t a1, unsigned char *a2, unsigned __int8 **a3)
{
  if (!a3) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 200);
  if (!v5) {
    return 1;
  }
  v11[0] = *(void *)(v4 + 192);
  v11[1] = v5;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_u8_length_prefixed(a3, &v9)) {
    unint64_t v10 = 0;
  }
  unsigned __int8 v8 = -86;
  while (v10 && CBS_get_u8(&v9, &v8))
  {
    if (bssl::ssl_is_certificate_type_allowed(v11, v8))
    {
      *(unsigned char *)(a1 + 731) = v8;
      *(_DWORD *)(a1 + 1584) |= 0x400000u;
      return 1;
    }
  }
  uint64_t result = 0;
  *a2 = 47;
  return result;
}

uint64_t bssl::ext_client_certificate_type_add_serverhello(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned char *)(a1 + 1586) & 0x40) == 0) {
    return 1;
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = v5;
  void v6[2] = v5;
  v6[0] = v5;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x13u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v6);
    if (result)
    {
      uint64_t result = CBB_add_u8((uint64_t)v6, *(unsigned __int8 *)(a1 + 731));
      if (result) {
        return CBB_flush(a2) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_server_certificate_type_parse_clienthello(uint64_t a1, unsigned char *a2, unsigned __int8 **a3)
{
  if (!a3) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 176);
  if (!v5) {
    return 1;
  }
  v11[0] = *(void *)(v4 + 168);
  v11[1] = v5;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  if (!CBS_get_u8_length_prefixed(a3, &v9)) {
    unint64_t v10 = 0;
  }
  unsigned __int8 v8 = -86;
  while (v10 && CBS_get_u8(&v9, &v8))
  {
    if (bssl::ssl_is_certificate_type_allowed(v11, v8))
    {
      *(unsigned char *)(a1 + 73std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v8;
      *(_DWORD *)(a1 + 1584) |= 0x200000u;
      return 1;
    }
  }
  uint64_t result = 0;
  *a2 = 47;
  return result;
}

uint64_t bssl::ext_server_certificate_type_add_serverhello(unsigned __int8 *a1, uint64_t *a2)
{
  if ((a1[1586] & 0x20) == 0 || (*(_WORD *)(*(void *)(*(void *)a1 + 48) + 220) & 0x40) != 0) {
    return 1;
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = v4;
  void v6[2] = v4;
  v6[0] = v4;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x14u);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v6);
    if (result)
    {
      uint64_t result = CBB_add_u8((uint64_t)v6, a1[730]);
      if (result) {
        return CBB_flush(a2) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ticket_request_parse_clienthello(uint64_t a1, unsigned char *a2, void *a3)
{
  if (!a3) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  char v8 = -86;
  char v7 = -86;
  if (CBS_get_u8(a3, &v8) && CBS_get_u8(a3, &v7))
  {
    *(unsigned char *)(a1 + 7bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v8;
    *(unsigned char *)(a1 + 733) = v7;
    return 1;
  }
  uint64_t result = 0;
  *a2 = 47;
  return result;
}

uint64_t bssl::ext_ticket_request_add_serverhello(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u) {
    return 1;
  }
  int v2 = *(unsigned __int8 *)(a1 + 732);
  int v3 = *(unsigned __int8 *)(a1 + 733);
  if (!(v2 | v3)) {
    return 1;
  }
  unsigned int v6 = v3 + v2;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = v7;
  _OWORD v9[2] = v7;
  if (v6 >= 0xFF) {
    unsigned __int8 v8 = -1;
  }
  else {
    unsigned __int8 v8 = v6;
  }
  v9[0] = v7;
  uint64_t result = CBB_add_u16((uint64_t)a2, 0x3Au);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v9);
    if (result)
    {
      uint64_t result = CBB_add_u8((uint64_t)v9, v8);
      if (result) {
        return CBB_flush(a2) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_alps_add_serverhello_old(void *a1, uint64_t *a2)
{
  return bssl::ext_alps_add_serverhello_impl(a1, a2, 0);
}

uint64_t bssl::ext_quic_transport_params_parse_clienthello_impl(void *a1, ssl_st *a2, uint64_t a3, int a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a1 + 168);
  if (!a3)
  {
    uint64_t v14 = a1[1];
    if (v8)
    {
      if (((*(_WORD *)(v14 + 301) & 0x200) == 0) == a4) {
        return 1;
      }
      uint64_t result = 0;
      char v15 = 109;
    }
    else
    {
      if (!*(void *)(v14 + 232)) {
        return 1;
      }
      ERR_put_error(16, 0, 305, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2685);
      uint64_t result = 0;
      char v15 = 80;
    }
LABEL_15:
    LOBYTE(a2->version) = v15;
    return result;
  }
  if (!v8)
  {
    if (a4) {
      return 1;
    }
    uint64_t result = 0;
    char v15 = 110;
    goto LABEL_15;
  }
  if (bssl::ssl_protocol_version((bssl *)*a1, a2) != 772) {
    bssl::ext_quic_transport_params_parse_clienthello_impl();
  }
  if (((*(_WORD *)(a1[1] + 301) & 0x200) == 0) == a4) {
    return 1;
  }
  unint64_t v10 = (void **)(*(void *)(v7 + 48) + 584);
  uint64_t v11 = *(const void **)a3;
  unint64_t v12 = *(void *)(a3 + 8);
  uint64_t result = bssl::Array<unsigned char>::Init((uint64_t)v10, v12);
  if (v12 && result)
  {
    memmove(*v10, v11, v12);
    return 1;
  }
  return result;
}

uint64_t bssl::ext_quic_transport_params_add_serverhello_impl(void *a1, uint64_t *a2, int a3)
{
  uint64_t v5 = *(void *)(*a1 + 168);
  if (!v5 && (a3 & 1) != 0) {
    return 1;
  }
  if (!v5) {
    bssl::ext_quic_transport_params_add_serverhello_impl();
  }
  uint64_t v6 = a1[1];
  if (!*(void *)(v6 + 232))
  {
    ERR_put_error(16, 0, 305, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/extensions.cc", 2738);
    return 0;
  }
  unsigned int v7 = *(_WORD *)(v6 + 301) & 0x200;
  if (a3 != v7 >> 9) {
    return 1;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = v8;
  void v11[2] = v8;
  v11[0] = v8;
  if (v7) {
    unsigned int v9 = 65445;
  }
  else {
    unsigned int v9 = 57;
  }
  uint64_t result = CBB_add_u16((uint64_t)a2, v9);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v11);
    if (result)
    {
      uint64_t result = CBB_add_bytes((uint64_t)v11, *(const void **)(a1[1] + 224), *(void *)(a1[1] + 232));
      if (result) {
        return CBB_flush(a2) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_alps_add_serverhello_impl(void *a1, uint64_t *a2, int a3)
{
  uint64_t v3 = a1[190];
  if (!v3) {
    return 1;
  }
  if ((*(unsigned char *)(v3 + 440) & 0x40) == 0) {
    return 1;
  }
  if ((*(_WORD *)(*(void *)(*a1 + 48) + 220) & 0x400) != 0) {
    return 1;
  }
  unsigned int v5 = *(_WORD *)(a1[1] + 301) & 0x2000;
  if (a3 != v5 >> 13) {
    return 1;
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = v7;
  long long v10[2] = v7;
  v10[0] = v7;
  if (v5) {
    unsigned int v8 = 17613;
  }
  else {
    unsigned int v8 = 17513;
  }
  uint64_t result = CBB_add_u16((uint64_t)a2, v8);
  if (result)
  {
    uint64_t result = CBB_add_u16_length_prefixed(a2, (uint64_t)v10);
    if (result)
    {
      uint64_t result = CBB_add_bytes((uint64_t)v10, *(const void **)(a1[190] + 408), *(void *)(a1[190] + 416));
      if (result) {
        return CBB_flush(a2) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ssl_is_certificate_type_allowed(void *a1, int a2)
{
  unsigned __int8 v5 = -86;
  while (a1[1])
  {
    uint64_t result = CBS_get_u8(a1, &v5);
    if (!result) {
      return result;
    }
    if (v5 == a2) {
      return 1;
    }
  }
  return 0;
}

uint64_t bssl::decrypt_ticket_with_cipher_ctx(uint64_t a1, EVP_CIPHER_CTX *ctx, HMAC_CTX *a3, const unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unsigned int v10 = EVP_CIPHER_CTX_iv_length(ctx);
  unint64_t v11 = HMAC_size(&a3->md);
  if (a5 < v11 + v10 + 17) {
    return 2;
  }
  uint64_t v12 = v11;
  size_t v13 = a5 - v11;
  if (a5 < v11) {
    abort();
  }
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v14;
  long long v28 = v14;
  *(_OWORD *)mint d = v14;
  long long v26 = v14;
  HMAC_Update(a3, a4, v13);
  HMAC_Final(a3, md, 0);
  if (CRYPTO_memcmp((char *)md, (char *)&a4[a5 - v12], v12)) {
    return 2;
  }
  unint64_t v17 = v10 + 16;
  if (v13 < v17) {
    abort();
  }
  out = 0;
  unint64_t v24 = 0;
  if (v13 - v17 <= 0x7FFFFFFE)
  {
    char v19 = bssl::Array<unsigned char>::Init((uint64_t)&out, v13 - v17);
    uint64_t v18 = out;
    if (v19)
    {
      int v21 = -1431655766;
      int outl = -1431655766;
      if (EVP_DecryptUpdate(ctx, out, &outl, &a4[v17], v13 - v17) && EVP_DecryptFinal_ex(ctx, &out[outl], &v21))
      {
        if (v24 < v21 + (uint64_t)outl) {
          abort();
        }
        unint64_t v24 = v21 + (uint64_t)outl;
        OPENSSL_free(*(void **)a1);
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        unint64_t v20 = v24;
        *(void *)a1 = out;
        *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v20;
        out = 0;
        unint64_t v24 = 0;
      }
      else
      {
        ERR_clear_error();
        uint64_t v15 = 2;
        uint64_t v18 = out;
      }
    }
    else
    {
      uint64_t v15 = 3;
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v15 = 2;
  }
  OPENSSL_free(v18);
  return v15;
}

void sub_1BA144580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

pthread_rwlock_t **bssl::internal::MutexLockBase<&(CRYPTO_MUTEX_lock_read),&(CRYPTO_MUTEX_unlock_read)>::MutexLockBase(pthread_rwlock_t **a1, pthread_rwlock_t *a2)
{
  *a1 = a2;
  if (!a2) {
    bssl::internal::MutexLockBase<&(CRYPTO_MUTEX_lock_read),&(CRYPTO_MUTEX_unlock_read)>::MutexLockBase();
  }
  CRYPTO_MUTEX_lock_read(a2);
  return a1;
}

void std::unique_ptr<ec_key_st,bssl::internal::Deleter>::reset[abi:ne180100](EC_KEY **a1, EC_KEY *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    EC_KEY_free(v3);
  }
}

void std::unique_ptr<ecdsa_sig_st,bssl::internal::Deleter>::reset[abi:ne180100](ECDSA_SIG **a1, ECDSA_SIG *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    ECDSA_SIG_free(v3);
  }
}

void std::unique_ptr<bignum_st,bssl::internal::Deleter>::reset[abi:ne180100](BIGNUM **a1, BIGNUM *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    BN_free(v3);
  }
}

void std::unique_ptr<ec_point_st,bssl::internal::Deleter>::reset[abi:ne180100](EC_POINT **a1, EC_POINT *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    EC_POINT_free(v3);
  }
}

uint64_t bssl::read_v2_client_hello(uint64_t a1, unint64_t *a2, unsigned char *a3, unint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  if (a4 <= 4) {
    bssl::read_v2_client_hello();
  }
  unint64_t v4 = a3[1] | ((unint64_t)(*a3 & 0x7F) << 8);
  if (v4 > 0x1000)
  {
    int v5 = 200;
    int v6 = 362;
LABEL_6:
    ERR_put_error(16, 0, v5, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", v6);
    return 4;
  }
  if (v4 <= 2)
  {
    int v5 = 199;
    int v6 = 369;
    goto LABEL_6;
  }
  unint64_t v10 = v4 + 2;
  if (a4 < v4 + 2)
  {
    *a2 = v10;
    return 2;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(unsigned __int16 *)(v12 + 92);
  if (v13 <= 1) {
    abort();
  }
  long long v14 = (const void *)(*(void *)(v12 + 80) + *(unsigned __int16 *)(v12 + 88) + 2);
  unint64_t v15 = v13 - 2;
  if (v15 >= v4) {
    unint64_t v16 = a3[1] | ((unint64_t)(*a3 & 0x7F) << 8);
  }
  else {
    unint64_t v16 = v15;
  }
  BOOL v40 = (unsigned __int16 *)(*(void *)(v12 + 80) + *(unsigned __int16 *)(v12 + 88) + 2);
  unint64_t v41 = v16;
  if (bssl::SSLTranscript::Update((void **)(*(void *)(v12 + 280) + 424), v14, v16))
  {
    bssl::ssl_do_msg_callback(a1, 0, 0, (uint64_t)v14, v16);
    char v39 = -86;
    unsigned __int16 v38 = -21846;
    unsigned __int16 v37 = -21846;
    unsigned __int16 v36 = -21846;
    unsigned __int16 v35 = -21846;
    memset(v34, 170, sizeof(v34));
    long long v32 = (const void *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
    if (!CBS_get_u8(&v40, &v39)
      || !CBS_get_u16(&v40, &v38)
      || !CBS_get_u16(&v40, &v37)
      || !CBS_get_u16(&v40, &v36)
      || !CBS_get_u16(&v40, &v35)
      || !CBS_get_bytes((uint64_t *)&v40, &v34[2], v37)
      || !CBS_get_bytes((uint64_t *)&v40, v34, v36)
      || !CBS_get_bytes((uint64_t *)&v40, &v32, v35)
      || v41)
    {
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", 402);
      return 4;
    }
    if (v39 != 1) {
      bssl::read_v2_client_hello();
    }
    if (v33 >= 0x20) {
      size_t v17 = 32;
    }
    else {
      size_t v17 = v33;
    }
    memset(v42, 0, 32);
    if (v17) {
      memcpy(&v42[-v17 + 32], v32, v17);
    }
    uint64_t v18 = v34[3];
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    _OWORD v31[2] = v19;
    v31[0] = v19;
    v31[1] = v19;
    CBB_zero(v31);
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v30[1] = v20;
    int8x16_t v30[2] = v20;
    _OWORD v29[2] = v20;
    v30[0] = v20;
    v29[0] = v20;
    v29[1] = v20;
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v24 = *(void *)(v21 + 224);
    int v23 = (BUF_MEM **)(v21 + 224);
    uint64_t v22 = v24;
    if (v24
      || (long long v25 = BUF_MEM_new(),
          std::unique_ptr<buf_mem_st,bssl::internal::Deleter>::reset[abi:ne180100](v23, v25),
          (uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 224)) != 0))
    {
      if (BUF_MEM_reserve(v22, ((((unint64_t)v18 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64) & 0xFFFFFFFFFFFFFFFELL)+ 43)&& CBB_init_fixed((uint64_t)v31, *(void *)(*(void *)(*(void *)(a1 + 48) + 224) + 8), *(void *)(*(void *)(*(void *)(a1 + 48) + 224) + 16))&& CBB_add_u8((uint64_t)v31, 1u)&& CBB_add_u24_length_prefixed((uint64_t *)v31, (uint64_t)v30)&& CBB_add_u16((uint64_t)v30, v38)&& CBB_add_bytes((uint64_t)v30, v42, 0x20uLL)&& CBB_add_u8((uint64_t)v30, 0)&& CBB_add_u16_length_prefixed((uint64_t *)v30, (uint64_t)v29))
      {
        if (v34[3])
        {
          while (1)
          {
            int v28 = -1431655766;
            if (!CBS_get_u24(&v34[2], &v28))
            {
              int v26 = 449;
              int v27 = 137;
              goto LABEL_55;
            }
            if ((v28 & 0xFF0000) == 0 && !CBB_add_u16((uint64_t)v29, (unsigned __int16)v28)) {
              break;
            }
            if (!v34[3]) {
              goto LABEL_46;
            }
          }
          int v26 = 458;
          int v27 = 68;
LABEL_55:
          ERR_put_error(16, 0, v27, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", v26);
        }
        else
        {
LABEL_46:
          if (CBB_add_u8((uint64_t)v30, 1u)
            && CBB_add_u8((uint64_t)v30, 0)
            && CBB_finish((uint64_t)v31, 0, *(void **)(*(void *)(a1 + 48) + 224)))
          {
            *a2 = v10;
            uint64_t v7 = 0;
            *(_WORD *)(*(void *)(a1 + 48) + 220) |= 8u;
LABEL_57:
            CBB_cleanup((uint64_t)v31);
            return v7;
          }
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_both.cc", 467);
        }
      }
    }
    uint64_t v7 = 4;
    goto LABEL_57;
  }
  return 4;
}

void sub_1BA144AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  CBB_cleanup((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::ssl_choose_tls13_cipher(unsigned __int16 *a1, uint64_t a2, char a3, unsigned int a4, int a5)
{
  uint64_t v5 = 0;
  size_t v17 = a1;
  uint64_t v18 = a2;
  if ((a2 & 1) == 0 && a2)
  {
    uint64_t v5 = 0;
    int v9 = 0;
    unsigned __int8 v10 = 0;
    do
    {
      unsigned __int16 v16 = -21846;
      if (!CBS_get_u16(&v17, &v16)) {
        return 0;
      }
      cipher_by_value = SSL_get_cipher_by_value(v16);
      if (cipher_by_value)
      {
        uint64_t v12 = (uint64_t)cipher_by_value;
        if (SSL_CIPHER_get_min_version(cipher_by_value) <= a4
          && SSL_CIPHER_get_max_version(v12) >= a4)
        {
          int protocol_id = SSL_CIPHER_get_protocol_id(v12);
          if (bssl::ssl_tls13_cipher_meets_policy(protocol_id, a5))
          {
            if (a3)
            {
              unsigned int v14 = 1;
              if (!v9) {
                goto LABEL_14;
              }
            }
            else
            {
              unsigned int v14 = *(_DWORD *)(v12 + 28) == 64;
              if (!v9) {
                goto LABEL_14;
              }
            }
            if (v14 > v10)
            {
LABEL_14:
              int v9 = 1;
              unsigned __int8 v10 = v14;
              uint64_t v5 = v12;
            }
          }
        }
      }
    }
    while (v18);
  }
  return v5;
}

uint64_t bn_abs_sub_part_words(unint64_t *a1, const unint64_t *a2, const unint64_t *a3, unsigned int a4, signed int a5, unint64_t *a6)
{
  unint64_t v12 = bn_sub_part_words(a6, a2, a3, a4, a5);
  bn_sub_part_words(a1, a3, a2, a4, -a5);
  if (a5 >= 0) {
    int v13 = a5;
  }
  else {
    int v13 = -a5;
  }
  bn_select_words((uint64_t *)a1, -(uint64_t)v12, (uint64_t *)a1, (uint64_t *)a6, (int)(v13 + a4));
  return -(uint64_t)v12;
}

int BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
{
  int result = bn_mul_impl(r, (BIGNUM *)a, (BIGNUM *)b, ctx);
  if (result)
  {
    bn_set_minimal_width((uint64_t)r);
    return 1;
  }
  return result;
}

uint64_t bn_mul_impl(BIGNUM *a1, BIGNUM *a2, BIGNUM *a3, BN_CTX *ctx)
{
  unint64_t top = a2->top;
  int v6 = a3->top;
  if (top) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    BN_CTX_start(ctx);
    if (a1 == a2 || (unint64_t v12 = a1, a1 == a3))
    {
      unint64_t v12 = BN_CTX_get(ctx);
      if (!v12) {
        goto LABEL_45;
      }
    }
    v12->int neg = a3->neg ^ a2->neg;
    if (top == 8 && v6 == 8)
    {
      if (!bn_wexpand(&v12->d, 0x10uLL)) {
        goto LABEL_45;
      }
      v12->unint64_t top = 16;
      bn_mul_comba8(v12->d, a2->d, a3->d);
    }
    else
    {
      int v13 = v6 + top;
      if ((int)top < 16 || v6 < 16 || (top - v6 + 1) > 2)
      {
        if (!bn_wexpand(&v12->d, v13)) {
          goto LABEL_45;
        }
        v12->unint64_t top = v13;
        bn_mul_normal(v12->d, a2->d, top, a3->d, v6);
      }
      else
      {
        if ((int)top - v6 >= 0) {
          unint64_t v14 = top;
        }
        else {
          unint64_t v14 = v6;
        }
        char v15 = BN_num_bits_word(v14) - 1;
        int v16 = 1 << v15;
        if ((int)top < 1 << v15 && v6 < v16) {
          bn_mul_impl_cold_2();
        }
        uint64_t v18 = BN_CTX_get(ctx);
        if (!v18) {
          goto LABEL_45;
        }
        p_int d = &v18->d;
        if ((int)top <= v16 && v6 <= v16)
        {
          if (!bn_wexpand(&v18->d, 4 << v15) || !bn_wexpand(&v12->d, 2 << v15)) {
            goto LABEL_45;
          }
          bn_mul_recursive(v12->d, a2->d, a3->d, v16, (top - v16), (v6 - v16), *p_d, v23);
        }
        else
        {
          if ((int)top < v16 || v6 < v16) {
            bn_mul_impl_cold_1();
          }
          if (!bn_wexpand(&v18->d, 8 << v15) || !bn_wexpand(&v12->d, 4 << v15)) {
            goto LABEL_45;
          }
          bn_mul_part_recursive(v12->d, a2->d, (uint64_t)a3->d, v16, top - v16, v6 - v16, *p_d, v22);
        }
        v12->unint64_t top = v6 + top;
      }
    }
    if (v12 == a1 || BN_copy(a1, v12))
    {
      uint64_t v8 = 1;
LABEL_46:
      BN_CTX_end(ctx);
      return v8;
    }
LABEL_45:
    uint64_t v8 = 0;
    goto LABEL_46;
  }
  BN_zero((uint64_t)a1);
  return 1;
}

uint64_t bn_mul_consttime(BIGNUM *a1, BIGNUM *a2, BIGNUM *a3, BN_CTX *a4)
{
  if (a2->neg || a3->neg)
  {
    ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/mul.c", 524);
    return 0;
  }
  else
  {
    return bn_mul_impl(a1, a2, a3, a4);
  }
}

uint64_t bn_sqr_consttime(BIGNUM *a1, BIGNUM *a2, BN_CTX *ctx)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t top = a2->top;
  if ((int)top > 0)
  {
    BN_CTX_start(ctx);
    BOOL v7 = a1;
    if (a2 == a1) {
      BOOL v7 = BN_CTX_get(ctx);
    }
    uint64_t v8 = BN_CTX_get(ctx);
    uint64_t v9 = 0;
    if (!v7) {
      goto LABEL_24;
    }
    unsigned __int8 v10 = v8;
    if (!v8) {
      goto LABEL_24;
    }
    if (!bn_wexpand(&v7->d, 2 * top)) {
      goto LABEL_23;
    }
    if (top == 8)
    {
      bn_sqr_comba8(v7->d, a2->d);
      goto LABEL_20;
    }
    if (top == 4)
    {
      bn_sqr_comba4(v7->d, a2->d);
      goto LABEL_20;
    }
    if (top > 0xF)
    {
      if ((top & (top - 1)) == 0)
      {
        if (!bn_wexpand(&v10->d, 4 * (int)top)) {
          goto LABEL_23;
        }
        bn_sqr_recursive(v7->d, a2->d, top, v10->d);
LABEL_20:
        v7->int neg = 0;
        v7->unint64_t top = 2 * top;
        if (v7 == a1 || BN_copy(a1, v7))
        {
          uint64_t v9 = 1;
LABEL_24:
          BN_CTX_end(ctx);
          return v9;
        }
LABEL_23:
        uint64_t v9 = 0;
        goto LABEL_24;
      }
      if (!bn_wexpand(&v10->d, 2 * top)) {
        goto LABEL_23;
      }
      int d = v7->d;
      int v13 = a2->d;
      unint64_t v14 = v10->d;
    }
    else
    {
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v16[14] = v11;
      v16[15] = v11;
      v16[12] = v11;
      _OWORD v16[13] = v11;
      v16[10] = v11;
      v16[11] = v11;
      v16[8] = v11;
      v16[9] = v11;
      v16[6] = v11;
      v16[7] = v11;
      unint64_t v16[4] = v11;
      v16[5] = v11;
      _OWORD v16[2] = v11;
      _OWORD v16[3] = v11;
      v16[0] = v11;
      v16[1] = v11;
      int d = v7->d;
      int v13 = a2->d;
      unint64_t v14 = (unint64_t *)v16;
    }
    bn_sqr_normal(d, (uint64_t)v13, top, v14);
    goto LABEL_20;
  }
  a1->unint64_t top = 0;
  a1->int neg = 0;
  return 1;
}

unint64_t *bn_sqr_normal(unint64_t *rp, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  if (a3)
  {
    BOOL v7 = rp;
    int v8 = 2 * a3;
    rp[2 * a3 - 1] = 0;
    *rp = 0;
    unint64_t v9 = a3 - 1;
    if (v9)
    {
      rp[a3] = bn_mul_words(rp + 1, (const unint64_t *)(a2 + 8), v9, *(void *)a2);
      if (a3 >= 3)
      {
        unint64_t v10 = a3 - 2;
        long long v11 = v7 + 3;
        unint64_t v12 = &v7[a3 + 1];
        int v13 = (const unint64_t *)(a2 + 16);
        do
        {
          *v12++ = bn_mul_add_words(v11, v13, v10, *(v13 - 1));
          v11 += 2;
          ++v13;
          --v10;
        }
        while (v10);
      }
    }
    bn_add_words(v7, v7, v7, v8);
    bn_sqr_words(a4, (const unint64_t *)a2, a3);
    return (unint64_t *)bn_add_words(v7, v7, a4, v8);
  }
  return rp;
}

unint64_t *bn_sqr_recursive(unint64_t *a1, unint64_t *a2, unint64_t a3, unint64_t *a4)
{
  if ((a3 & (a3 - 1)) != 0) {
    bn_sqr_recursive_cold_1();
  }
  if (a3 == 8)
  {
    return bn_sqr_comba8(a1, a2);
  }
  else if (a3 > 0xF)
  {
    unint64_t v9 = a3 >> 1;
    unint64_t v10 = bn_sub_words(&a4[a3 >> 1], a2, &a2[a3 >> 1], a3 >> 1);
    bn_sub_words(a4, &a2[a3 >> 1], a2, a3 >> 1);
    bn_select_words((uint64_t *)a4, -(uint64_t)v10, (uint64_t *)a4, (uint64_t *)&a4[a3 >> 1], a3 >> 1);
    long long v11 = &a4[a3];
    bn_sqr_recursive(v11, a4, a3 >> 1, &a4[2 * a3]);
    bn_sqr_recursive(a1, a2, a3 >> 1, &a4[2 * a3]);
    bn_sqr_recursive(&a1[a3], &a2[a3 >> 1], a3 >> 1, &a4[2 * a3]);
    unint64_t v12 = bn_add_words(a4, a1, &a1[a3], a3);
    unint64_t v13 = v12 - bn_sub_words(v11, a4, v11, a3);
    int result = (unint64_t *)bn_add_words(&a1[v9], &a1[v9], v11, a3);
    unint64_t v14 = (char *)result + v13;
    unint64_t v15 = a3 + (a3 >> 1);
    if (v15 < 2 * a3)
    {
      unint64_t v16 = a3 - v9;
      uint64_t v17 = &a1[v15];
      do
      {
        uint64_t v18 = &v14[*v17];
        unint64_t v14 = (char *)__CFADD__(*v17, v14);
        *v17++ = (unint64_t)v18;
        --v16;
      }
      while (v16);
    }
    if (v14) {
      bn_sqr_recursive_cold_2();
    }
  }
  else
  {
    return bn_sqr_normal(a1, (uint64_t)a2, a3, a4);
  }
  return result;
}

int BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
{
  int result = bn_sqr_consttime(r, (BIGNUM *)a, ctx);
  if (result)
  {
    bn_set_minimal_width((uint64_t)r);
    return 1;
  }
  return result;
}

unint64_t bn_sub_part_words(unint64_t *a1, const unint64_t *a2, const unint64_t *a3, unsigned int num, unsigned int a5)
{
  if ((num & 0x80000000) != 0) {
    bn_sub_part_words_cold_1();
  }
  uint64_t v9 = num;
  unint64_t result = bn_sub_words(a1, a2, a3, num);
  if (a5)
  {
    long long v11 = &a1[v9];
    if ((a5 & 0x80000000) != 0)
    {
      unint64_t v16 = &a3[v9];
      if ((signed int)-a5 > 1) {
        uint64_t v17 = -a5;
      }
      else {
        uint64_t v17 = 1;
      }
      do
      {
        if (result >= 2) {
          bn_usub_consttime_cold_1();
        }
        uint64_t v18 = *v16++;
        BOOL v19 = v18 != 0;
        unint64_t v20 = -v18 - result;
        unint64_t result = -v18 < result || v19;
        *v11++ = v20;
        --v17;
      }
      while (v17);
    }
    else
    {
      unint64_t v12 = &a2[v9];
      uint64_t v13 = a5;
      do
      {
        if (result >= 2) {
          bn_usub_consttime_cold_1();
        }
        unint64_t v14 = *v12++;
        unint64_t v15 = v14 - result;
        unint64_t result = v14 < result;
        *v11++ = v15;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

void bn_mul_part_recursive(void *a1, unint64_t *a2, uint64_t a3, signed int a4, unsigned int a5, unsigned int a6, unint64_t *a7, int8x8_t a8)
{
  a8.i32[0] = a4;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(a8);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.i32[0] != 1) {
    bn_mul_part_recursive_cold_5();
  }
  if ((a5 & 0x80000000) != 0 || (signed int v11 = a4 - a5, a4 <= (int)a5)) {
    bn_mul_part_recursive_cold_1();
  }
  if ((a6 & 0x80000000) != 0 || (int)a6 >= a4) {
    bn_mul_part_recursive_cold_2();
  }
  if (a5 - a6 - 2 <= 0xFFFFFFFC) {
    bn_mul_part_recursive_cold_3();
  }
  int v15 = 2 * a4;
  if (a4 > 7)
  {
    uint64_t v50 = a4;
    uint64_t v17 = &a7[2 * a4];
    long long v48 = &a2[a4];
    uint64_t v49 = a4;
    uint64_t v18 = bn_abs_sub_part_words(a7, a2, v48, a5, v11, v17);
    long long v46 = a7;
    BOOL v19 = &a7[a4];
    uint64_t v47 = bn_abs_sub_part_words(v19, (const unint64_t *)(a3 + 8 * a4), (const unint64_t *)a3, a6, a6 - a4, v17) ^ v18;
    if (a4 == 8)
    {
      uint64_t v21 = a7;
      bn_mul_comba8(v17, a7, v19);
      int8x8_t v22 = a1;
      bn_mul_comba8(a1, a2, (unint64_t *)a3);
      bn_mul_normal(a1 + 16, v48, a5, (unint64_t *)(a3 + 64), a6);
      uint64_t v23 = v50;
      if (v15 != a6 + a5) {
        bzero(&a1[v15 + a5 + a6], 8 * (int)(v15 - (a6 + a5)));
      }
    }
    else
    {
      long long v44 = (unint64_t *)(a3 + 8 * a4);
      uint64_t v21 = a7;
      uint64_t v24 = &a7[4 * v50];
      bn_mul_recursive(v17, v46, v19, a4, 0, 0, &v46[4 * v50], v20);
      int8x8_t v22 = a1;
      bn_mul_recursive(a1, a2, (unint64_t *)a3, a4, 0, 0, v24, v25);
      bzero(&a1[2 * a4], 16 * a4);
      if ((a6 | a5) >= 0x10)
      {
        int v27 = v24;
        if ((int)a5 <= (int)a6) {
          int v28 = a6;
        }
        else {
          int v28 = a5;
        }
        LODWORD(v29) = a4;
        uint64_t v23 = v50;
        while (1)
        {
          int v30 = (int)v29 >= 0 ? v29 : (int)v29 + 1;
          uint64_t v29 = (v30 >> 1);
          if ((int)v29 < v28) {
            break;
          }
          if (a5 == v29 || a6 == v29)
          {
            bn_mul_recursive(&a1[2 * a4], v48, v44, v29, a5 - v29, a6 - v29, v27, v26);
            goto LABEL_32;
          }
        }
        bn_mul_part_recursive(&a1[2 * a4], v48, v44, v29, a5 - v29, a6 - v29, v27);
      }
      else
      {
        bn_mul_normal(&a1[2 * a4], v48, a5, v44, a6);
        uint64_t v23 = v50;
      }
    }
LABEL_32:
    unint64_t v32 = bn_add_words(v21, v22, &v22[2 * a4], 2 * a4);
    uint64_t v33 = 4 * v23;
    uint64_t v34 = v23;
    unsigned __int16 v35 = v21;
    unsigned __int16 v36 = &v21[4 * v34];
    unint64_t v37 = v32 - bn_sub_words(v36, v35, v17, 2 * a4);
    unint64_t v38 = bn_add_words(v17, v35, v17, 2 * a4) + v32;
    bn_select_words((uint64_t *)v17, v47, (uint64_t *)v36, (uint64_t *)v17, 2 * a4);
    unint64_t v39 = (v47 & v37 | v38 & ~v47) + bn_add_words(&a1[v49], &a1[v49], v17, 2 * a4);
    int v40 = 3 * a4;
    if (3 * a4 < (int)v33)
    {
      unint64_t v41 = &a1[v40];
      uint64_t v42 = v33 - v40;
      do
      {
        unint64_t v43 = *v41 + v39;
        unint64_t v39 = __CFADD__(*v41, v39);
        *v41++ = v43;
        --v42;
      }
      while (v42);
    }
    if (v39) {
      bn_mul_part_recursive_cold_4();
    }
  }
  else
  {
    bn_mul_normal(a1, a2, (int)(a5 + a4), (unint64_t *)a3, (int)(a6 + a4));
    if (v15 != a6 + a5)
    {
      bzero(&a1[v15 + a5 + a6], (int)(v15 - (a6 + a5)));
    }
  }
}

void bn_mul_recursive(unint64_t *a1, unint64_t *a2, unint64_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, unint64_t *a7, int8x8_t a8)
{
  a8.i32[0] = a4;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(a8);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.i32[0] != 1) {
    bn_mul_recursive_cold_4();
  }
  if ((a5 - 1) <= 0xFFFFFFF6) {
    bn_mul_recursive_cold_1();
  }
  if ((a6 - 1) <= 0xFFFFFFF6) {
    bn_mul_recursive_cold_2();
  }
  int v16 = a6 | a5;
  if (a4 != 8 || v16)
  {
    if ((int)a4 > 15)
    {
      unsigned int v17 = a4 >> 1;
      unsigned int v39 = a6 + (a4 >> 1);
      uint64_t v18 = &a7[a4];
      unsigned __int16 v36 = &a2[a4 >> 1];
      uint64_t v37 = bn_abs_sub_part_words(a7, a2, v36, a5 + (a4 >> 1), -(int)a5, v18);
      uint64_t v34 = &a7[v17];
      unsigned __int16 v35 = &a3[v17];
      uint64_t v38 = bn_abs_sub_part_words(v34, v35, a3, v39, a6, &a7[a4]) ^ v37;
      *(void *)int v40 = a4 >> 1;
      if (v17 != 8 || v16)
      {
        int8x8_t v22 = &a7[2 * a4];
        bn_mul_recursive(&a7[a4], a7, v34, *(void *)v40, 0, 0, v22);
        uint64_t v23 = a3;
        uint64_t v21 = a4 >> 1;
        bn_mul_recursive(a1, a2, v23, *(void *)v40, 0, 0, v22);
        uint64_t v19 = a4;
        uint64_t v24 = a5;
        uint64_t v20 = 2 * a4;
        bn_mul_recursive(&a1[a4], v36, v35, *(void *)v40, v24, a6, v22);
      }
      else
      {
        bn_mul_comba8(&a7[a4], a7, v34);
        bn_mul_comba8(a1, a2, a3);
        uint64_t v19 = a4;
        bn_mul_comba8(&a1[a4], v36, v35);
        uint64_t v20 = 2 * a4;
        uint64_t v21 = a4 >> 1;
      }
      unint64_t v25 = bn_add_words(a7, a1, &a1[v19], v19);
      int8x8_t v26 = &a7[v20];
      unint64_t v27 = v25 - bn_sub_words(v26, a7, &a7[a4], v19);
      unint64_t v28 = bn_add_words(&a7[a4], a7, &a7[a4], v19) + v25;
      bn_select_words((uint64_t *)v18, v38, (uint64_t *)v26, (uint64_t *)v18, v19);
      unint64_t v29 = (v38 & v27 | v28 & ~v38) + bn_add_words(&a1[v21], &a1[v21], v18, v19);
      unsigned int v30 = v21 + a4;
      if ((int)(v21 + a4) < (int)v20)
      {
        long long v31 = &a1[v30];
        unint64_t v32 = v20 - (unint64_t)v30;
        do
        {
          unint64_t v33 = *v31 + v29;
          unint64_t v29 = __CFADD__(*v31, v29);
          *v31++ = v33;
          --v32;
        }
        while (v32);
      }
      if (v29) {
        bn_mul_recursive_cold_3();
      }
    }
    else
    {
      bn_mul_normal(a1, a2, (int)(a5 + a4), a3, (int)(a6 + a4));
      if ((int)a6 + (int)a5 < 0)
      {
        bzero(&a1[(int)(a5 + 2 * a4 + a6)], 8 * -(a6 + a5));
      }
    }
  }
  else
  {
    bn_mul_comba8(a1, a2, a3);
  }
}

RSA *RSA_parse_private_key(long long *a1)
{
  int v2 = RSA_new();
  if (v2)
  {
    memset(v6, 170, sizeof(v6));
    if (CBS_get_asn1(a1, &v6[1], 536870928) && CBS_get_asn1_uint64((long long *)&v6[1], v6))
    {
      if (v6[0])
      {
        int v3 = 106;
        int v4 = 171;
      }
      else
      {
        if (!parse_integer((long long *)&v6[1], (BIGNUM **)&v2->version)
          || !parse_integer((long long *)&v6[1], (BIGNUM **)&v2->meth)
          || !parse_integer((long long *)&v6[1], (BIGNUM **)&v2->engine)
          || !parse_integer((long long *)&v6[1], &v2->n)
          || !parse_integer((long long *)&v6[1], &v2->e)
          || !parse_integer((long long *)&v6[1], &v2->d)
          || !parse_integer((long long *)&v6[1], &v2->p)
          || !parse_integer((long long *)&v6[1], &v2->q))
        {
          goto LABEL_8;
        }
        if (v6[2])
        {
          int v3 = 100;
          int v4 = 187;
        }
        else
        {
          if (RSA_check_key(v2)) {
            return v2;
          }
          int v3 = 104;
          int v4 = 192;
        }
      }
    }
    else
    {
      int v3 = 100;
      int v4 = 166;
    }
    ERR_put_error(4, 0, v3, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/rsa_extra/rsa_asn1.c", v4);
LABEL_8:
    RSA_free(v2);
    return 0;
  }
  return v2;
}

RSA *RSA_private_key_from_bytes(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = a2;
  int v2 = RSA_parse_private_key(&v4);
  if (!v2 || *((void *)&v4 + 1))
  {
    ERR_put_error(4, 0, 100, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/rsa_extra/rsa_asn1.c", 208);
    RSA_free(v2);
    return 0;
  }
  return v2;
}

uint64_t RSA_marshal_private_key(uint64_t *a1, const BIGNUM **a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = v4;
  void v6[2] = v4;
  v6[0] = v4;
  if (CBB_add_asn1(a1, (uint64_t)v6, 0x20000010u)
    && CBB_add_asn1_uint64((uint64_t)v6, 0)
    && marshal_integer((uint64_t *)v6, a2[1])
    && marshal_integer((uint64_t *)v6, a2[2])
    && marshal_integer((uint64_t *)v6, a2[3])
    && marshal_integer((uint64_t *)v6, a2[4])
    && marshal_integer((uint64_t *)v6, a2[5])
    && marshal_integer((uint64_t *)v6, a2[6])
    && marshal_integer((uint64_t *)v6, a2[7])
    && marshal_integer((uint64_t *)v6, a2[8])
    && CBB_flush(a1))
  {
    return 1;
  }
  ERR_put_error(4, 0, 121, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/rsa_extra/rsa_asn1.c", 228);
  return 0;
}

uint64_t RSA_private_key_to_bytes(void *a1, void *a2, const BIGNUM **a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v6;
  _OWORD v8[2] = v6;
  v8[0] = v6;
  CBB_zero(v8);
  if (CBB_init((uint64_t)v8, 0)
    && RSA_marshal_private_key((uint64_t *)v8, a3)
    && CBB_finish((uint64_t)v8, a1, a2))
  {
    return 1;
  }
  ERR_put_error(4, 0, 121, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/rsa_extra/rsa_asn1.c", 241);
  CBB_cleanup((uint64_t)v8);
  return 0;
}

boringssl_concrete_boringssl_session_state *boringssl_session_state_create_from_dispatch_data(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  uint64_t v5 = a2;
  long long v6 = v5;
  if (!v5) {
    goto LABEL_24;
  }
  size_t size = dispatch_data_get_size(v5);
  if (!size) {
    goto LABEL_24;
  }
  size_t v8 = size;
  buffer_from_dispatch_unint64_t data = (boringssl_concrete_boringssl_session_state *)boringssl_helper_create_buffer_from_dispatch_data(v6);
  unint64_t v10 = buffer_from_dispatch_data;
  if (!buffer_from_dispatch_data) {
    goto LABEL_25;
  }
  if (LOBYTE(buffer_from_dispatch_data->super.isa) != 1)
  {
    if (v4)
    {
      id WeakRetained = objc_loadWeakRetained((id *)v4 + 2);
      int v2 = &OBJC_IVAR___boringssl_concrete_nw_protocol_boringssl_logging_disabled;
      if (WeakRetained)
      {
        int v15 = WeakRetained;
        int v16 = objc_loadWeakRetained((id *)v4 + 2);
        char v17 = v16[475];

        if (v17) {
          goto LABEL_23;
        }
      }
      id v18 = objc_loadWeakRetained((id *)v4 + 2);
      if (v18)
      {
        uint64_t v19 = objc_loadWeakRetained((id *)v4 + 2);
        uint64_t v20 = (v19[475] & 1) == 0;
      }
      else
      {
        uint64_t v20 = 1;
      }
    }
    else
    {
      uint64_t v20 = 1;
    }
    if (v20 && g_boringssl_log)
    {
      uint64_t v21 = (id)g_boringssl_log;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        if (v4)
        {
          uint64_t v20 = (uint64_t)objc_loadWeakRetained((id *)v4 + 2);
          BOOL v23 = v20 != 0;
          if (v20)
          {
            int v2 = (int *)objc_loadWeakRetained((id *)v4 + 2);
            unint64_t v25 = (char *)v2 + 391;
          }
          else
          {
            unint64_t v25 = &unk_1BA179713;
          }
          id v24 = objc_loadWeakRetained((id *)v4 + 2);
        }
        else
        {
          BOOL v23 = 0;
          id v24 = 0;
          unint64_t v25 = &unk_1BA179713;
        }
        *(_DWORD *)uint64_t v34 = 136446978;
        *(void *)&uint64_t v34[4] = "boringssl_session_state_create_from_dispatch_data";
        *(_WORD *)&v34[12] = 1024;
        *(_DWORD *)&v34[14] = 150;
        *(_WORD *)&v34[18] = 2082;
        *(void *)&v34[20] = v25;
        __int16 v35 = 2048;
        id v36 = v24;
        _os_log_error_impl(&dword_1BA0DE000, v21, OS_LOG_TYPE_ERROR, "%{public}s(%d) %{public}s[%p] Serialized data is not of the correct content type.", v34, 0x26u);
        if (v4) {

        }
        if (v23) {
        if (v4)
        }
      }
    }
    goto LABEL_23;
  }
  if (v8 == 1
    || (v11 = BYTE1(buffer_from_dispatch_data->super.isa), size_t v12 = v8 - 2, v12 < v11)
    || v11 >= 0x1D
    || (*(_OWORD *)uint64_t v34 = xmmword_1BA1901F0,
        *(_OWORD *)&v34[12] = *(long long *)((char *)&xmmword_1BA1901F0 + 12),
        __memcpy_chk(),
        v12 == v11))
  {
LABEL_23:
    free(v10);
    goto LABEL_24;
  }
  uint64_t v13 = SSL_SESSION_from_bytes((uint64_t)&v10->super.isa + v11 + 2, v12 - v11, *((void *)v4 + 51));
  free(v10);
  if (v13)
  {
    unint64_t v10 = boringssl_session_state_create((uint64_t)v13, v34);
    SSL_SESSION_free(v13);
    goto LABEL_25;
  }
  id v26 = objc_loadWeakRetained((id *)v4 + 2);
  if (v26)
  {
    unint64_t v27 = v26;
    unint64_t v28 = objc_loadWeakRetained((id *)v4 + 2);
    char v29 = v28[475];

    if (v29)
    {
LABEL_24:
      unint64_t v10 = 0;
      goto LABEL_25;
    }
  }
  id v30 = objc_loadWeakRetained((id *)v4 + 2);
  if (v30)
  {
    long long v31 = objc_loadWeakRetained((id *)v4 + 2);
    BOOL v32 = (v31[475] & 1) == 0;
  }
  else
  {
    BOOL v32 = 1;
  }

  unint64_t v10 = 0;
  if (v32 && g_boringssl_log)
  {
    unint64_t v33 = (id)g_boringssl_log;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      boringssl_session_state_create_from_dispatch_data_cold_1((uint64_t)v4, v33);
    }

    goto LABEL_24;
  }
LABEL_25:

  return v10;
}

_WORD *bssl::SSLBuffer::Clear(_WORD *this)
{
  this[4] = this[5];
  this[6] = 0;
  this[7] = this[8];
  return this;
}

int SHA1_Init(SHA_CTX *c)
{
  *(_OWORD *)&c->data[9] = 0u;
  *(_OWORD *)&c->data[13] = 0u;
  *(_OWORD *)&c->data[1] = 0u;
  *(_OWORD *)&c->data[5] = 0u;
  *(_OWORD *)&c->h0 = xmmword_1BA18F8B0;
  *(_OWORD *)&c->h4 = 0u;
  c->h4 = -1009589776;
  return 1;
}

void SHA1_Transform(SHA_CTX *c, const unsigned __int8 *data)
{
}

uint64_t sha1_block_data_order(int *a1, unsigned int *a2, uint64_t a3)
{
  int v3 = a1[3];
  int v4 = a1[4];
  int v5 = a1[1];
  int v6 = a1[2];
  int v7 = *a1;
  do
  {
    int v522 = v3;
    int v523 = v5;
    int v521 = v6;
    int v517 = v7;
    int v518 = v4;
    v519 = a2;
    uint64_t v520 = a3;
    int v8 = v7;
    HIDWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v7;
    LODWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v7;
    int v9 = v10 >> 27;
    int v11 = v3 & ~v5;
    unsigned int v12 = bswap32(*a2);
    int v13 = v6 & v523;
    HIDWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v523;
    LODWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v523;
    int v14 = v10 >> 2;
    unsigned int v501 = bswap32(a2[1]);
    unsigned int v15 = v9 + v4 + 1518500249 + (v13 | v11) + v12;
    HIDWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v15;
    LODWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v15;
    int v16 = v10 >> 27;
    HIDWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v8;
    LODWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v8;
    int v17 = v10 >> 2;
    unsigned int v18 = v522 + 1518500249 + (v8 & __ROR4__(v523, 2) | v521 & ~v8) + v501 + v16;
    HIDWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v18;
    LODWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v18;
    int v19 = v10 >> 27;
    HIDWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v15;
    LODWORD(v1std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v15;
    int v20 = v10 >> 2;
    unsigned int v21 = bswap32(a2[2]);
    unsigned int v505 = bswap32(a2[3]);
    unint64_t v23 = __PAIR64__(v18, __ROR4__(v15, 2));
    int v22 = v18 & v23;
    LODWORD(v23) = v18;
    int v24 = v23 >> 2;
    unsigned int v25 = v521 + 1518500249 + v21 + (v15 & __ROR4__(v8, 2) | v14 & ~v15) + v19;
    HIDWORD(v23) = v25;
    LODWORD(v23) = v25;
    int v26 = v23 >> 27;
    unint64_t v28 = __PAIR64__(v25, __ROR4__(v18, 2));
    int v27 = v25 & v28;
    unsigned int v29 = bswap32(a2[4]);
    LODWORD(v2bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v25;
    int v30 = v28 >> 2;
    unsigned int v31 = v14 + 1518500249 + v505 + (v22 | v17 & ~v18) + v26;
    HIDWORD(v2bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v31;
    LODWORD(v2bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v31;
    unsigned int v32 = v17 + 1518500249 + v29 + (v27 | v20 & ~v25) + (v28 >> 27);
    HIDWORD(v2bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v32;
    LODWORD(v2bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v32;
    int v33 = v28 >> 27;
    unint64_t v35 = __PAIR64__(v31, __ROR4__(v25, 2));
    int v34 = v31 & v35;
    LODWORD(v35) = v31;
    int v36 = v35 >> 2;
    unint64_t v38 = __PAIR64__(v32, __ROR4__(v31, 2));
    int v37 = v32 & v38;
    unsigned int v39 = bswap32(a2[5]);
    int v40 = v34 | v24 & ~v31;
    LODWORD(v3bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v32;
    int v41 = v38 >> 2;
    int v42 = v20 + v39 + 1518500249 + v40 + v33;
    HIDWORD(v3bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v42;
    LODWORD(v3bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v42;
    int v43 = v38 >> 27;
    unsigned int v513 = bswap32(a2[6]);
    int v44 = v37 | v30 & ~v32;
    HIDWORD(v3bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v42;
    LODWORD(v3bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v42;
    int v45 = v38 >> 2;
    unsigned int v46 = v24 + v513 + 1518500249 + v44 + v43;
    HIDWORD(v3bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v46;
    LODWORD(v3bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v46;
    int v47 = v38 >> 27;
    unint64_t v48 = __PAIR64__(v46, __ROR4__(v32, 2));
    unsigned int v509 = bswap32(a2[7]);
    int v49 = v42 & v48 | v36 & ~v42;
    LODWORD(v4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v46;
    int v50 = v48 >> 2;
    unsigned int v51 = v509 + 1518500249 + v30 + v49 + v47;
    HIDWORD(v4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v51;
    LODWORD(v4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v51;
    int v52 = v48 >> 27;
    unint64_t v54 = __PAIR64__(v51, __ROR4__(v46, 2));
    int v53 = v51 & v54;
    LODWORD(v54) = v51;
    int v55 = v54 >> 2;
    unsigned int v497 = bswap32(a2[8]);
    unsigned int v56 = v497 + 1518500249 + v36 + (v46 & __ROR4__(v42, 2) | v41 & ~v46) + v52;
    unsigned int v57 = bswap32(a2[13]);
    HIDWORD(v54) = v56;
    LODWORD(v54) = v56;
    int v58 = v54 >> 27;
    HIDWORD(v54) = v21 ^ v12 ^ v497 ^ v57;
    LODWORD(v54) = HIDWORD(v54);
    int v59 = v54 >> 31;
    int v60 = HIDWORD(v54);
    int v466 = HIDWORD(v54);
    unint64_t v62 = __PAIR64__(v56, __ROR4__(v51, 2));
    int v61 = v56 & v62;
    unsigned int v63 = bswap32(a2[9]);
    LODWORD(v62) = v56;
    int v64 = v62 >> 2;
    int v65 = v63 + 1518500249 + v41 + (v53 | v45 & ~v51) + v58;
    HIDWORD(v62) = v65;
    LODWORD(v62) = v65;
    int v66 = v62 >> 27;
    unsigned int v67 = bswap32(a2[10]);
    HIDWORD(v62) = v65;
    LODWORD(v62) = v65;
    int v68 = v62 >> 2;
    unsigned int v69 = v67 + 1518500249 + v45 + (v61 | v50 & ~v56) + v66;
    HIDWORD(v62) = v69;
    LODWORD(v62) = v69;
    int v70 = v62 >> 27;
    unint64_t v71 = __PAIR64__(v69, __ROR4__(v56, 2));
    unsigned int v72 = bswap32(a2[11]);
    int v73 = v65 & v71 | v55 & ~v65;
    LODWORD(v71) = v69;
    int v74 = v71 >> 2;
    unsigned int v75 = v72 + 1518500249 + v50 + v73 + v70;
    HIDWORD(v71) = v75;
    LODWORD(v71) = v75;
    int v76 = v71 >> 27;
    unint64_t v77 = __PAIR64__(v75, __ROR4__(v65, 2));
    unsigned int v78 = bswap32(a2[12]);
    int v79 = v69 & v77 | v64 & ~v69;
    LODWORD(v77) = v75;
    int v80 = v77 >> 2;
    unsigned int v81 = v78 + 1518500249 + v55 + v79 + v76;
    HIDWORD(v77) = v81;
    LODWORD(v77) = v81;
    int v82 = v77 >> 27;
    int v83 = v75 & __ROR4__(v69, 2);
    unsigned int v84 = bswap32(a2[14]);
    int v85 = v68 & ~v75;
    unint64_t v87 = __PAIR64__(v81, __ROR4__(v75, 2));
    int v86 = v81 & v87;
    unsigned int v493 = v57;
    LODWORD(v87) = v81;
    int v88 = v87 >> 2;
    int v89 = v57 + 1518500249 + v64 + (v83 | v85) + v82;
    int v90 = v505 ^ v501 ^ v63 ^ v84;
    HIDWORD(v87) = v89;
    LODWORD(v87) = v89;
    int v91 = v87 >> 27;
    HIDWORD(v87) = v90;
    LODWORD(v87) = v90;
    int v92 = v87 >> 31;
    HIDWORD(v87) = v89;
    LODWORD(v87) = v89;
    int v93 = v87 >> 2;
    int v94 = v84 + 1518500249 + v68 + (v86 | v74 & ~v81) + v91;
    HIDWORD(v87) = v94;
    LODWORD(v87) = v94;
    int v95 = v87 >> 27;
    unsigned int v96 = bswap32(a2[15]);
    int v97 = v29 ^ v21 ^ v67 ^ v96;
    unint64_t v99 = __PAIR64__(v97, __ROR4__(v89, 2));
    int v98 = v94 & v99;
    LODWORD(v99) = v97;
    int v468 = v97;
    int v471 = v99 >> 31;
    int v100 = v89 & __ROR4__(v81, 2) | v80 & ~v89;
    HIDWORD(v99) = v94;
    LODWORD(v99) = v94;
    int v101 = v99 >> 2;
    unsigned int v102 = v96 + 1518500249 + v74 + v100 + v95;
    HIDWORD(v99) = v102;
    LODWORD(v99) = v102;
    int v103 = v99 >> 27;
    unint64_t v105 = __PAIR64__(v102, __ROR4__(v94, 2));
    int v104 = v102 & v105;
    LODWORD(v105) = v102;
    int v106 = v105 >> 2;
    unsigned int v107 = v59 + 1518500249 + v80 + (v98 | v88 & ~v94) + v103;
    HIDWORD(v105) = v107;
    LODWORD(v105) = v107;
    int v108 = v105 >> 27;
    LODWORD(v105) = v39 ^ v505 ^ v72 ^ __ROR4__(v60, 31);
    int v109 = v105;
    HIDWORD(v105) = v105;
    int v110 = v105 >> 31;
    unint64_t v112 = __PAIR64__(v107, __ROR4__(v90, 31));
    int v111 = v513 ^ v29 ^ v78 ^ v112;
    LODWORD(v112) = v107;
    int v113 = v112 >> 2;
    unsigned int v114 = v92 + 1518500249 + v88 + (v104 | v93 & ~v102) + v108;
    HIDWORD(v112) = v114;
    LODWORD(v112) = v114;
    int v115 = v112 >> 27;
    HIDWORD(v112) = v111;
    LODWORD(v112) = v111;
    int v480 = v112 >> 31;
    int v116 = v509 ^ v39 ^ v57 ^ __ROR4__(v97, 31);
    unint64_t v118 = __PAIR64__(v114, __ROR4__(v107, 2));
    int v117 = v114 & v118;
    LODWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v114;
    int v119 = v118 >> 2;
    HIDWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v116;
    LODWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v116;
    int v477 = v118 >> 31;
    int v120 = v471 + 1518500249 + v93 + (v107 & __ROR4__(v102, 2) | v101 & ~v107) + v115;
    HIDWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v120;
    LODWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v120;
    int v121 = v118 >> 27;
    HIDWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v120;
    LODWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v120;
    int v122 = v118 >> 2;
    int v123 = v122 ^ __ROR4__(v114, 2);
    int v124 = v110 + 1518500249 + v101 + (v117 | v106 & ~v114) + v121;
    HIDWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v124;
    LODWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v124;
    int v125 = v118 >> 27;
    HIDWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v124;
    LODWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v124;
    int v126 = v118 >> 2;
    LODWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v497 ^ v513 ^ v84 ^ __ROR4__(v109, 31);
    int v127 = v118;
    HIDWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v118;
    int v474 = v118 >> 31;
    int v128 = v126 ^ __ROR4__(v120, 2);
    unsigned int v129 = v480 + 1859775393 + v106 + (v119 ^ __ROR4__(v107, 2) ^ v120) + v125;
    HIDWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v129;
    LODWORD(v11bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v129;
    int v130 = v118 >> 27;
    unint64_t v132 = __PAIR64__(v129, __ROR4__(v111, 31));
    int v131 = v63 ^ v509 ^ v96 ^ v132;
    int v133 = v477 + 1859775393 + v113 + (v123 ^ v124);
    LODWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v129;
    int v134 = v132 >> 2;
    int v135 = v133 + v130;
    HIDWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v135;
    LODWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v135;
    int v136 = v132 >> 27;
    int v137 = v474 + 1859775393 + v119 + (v128 ^ v129);
    HIDWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v131;
    LODWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v131;
    int v487 = v132 >> 31;
    int v138 = v134 ^ __ROR4__(v124, 2);
    int v139 = v67 ^ v497 ^ __ROR4__(v466, 31) ^ __ROR4__(v116, 31);
    int v140 = v137 + v136;
    HIDWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v140;
    LODWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v140;
    int v141 = v132 >> 27;
    HIDWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v139;
    LODWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v139;
    int v510 = v132 >> 31;
    unsigned int v142 = v487 + 1859775393 + v122 + (v138 ^ v135) + v141;
    HIDWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v135;
    LODWORD(v1bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = v135;
    int v143 = v132 >> 2;
    unint64_t v144 = __PAIR64__(v142, __ROR4__(v129, 2));
    int v145 = v510 + 1859775393 + v126 + (v143 ^ v144 ^ v140);
    LODWORD(v144) = v142;
    unsigned int v147 = v145 + (v144 >> 27);
    LODWORD(v144) = v72 ^ v63 ^ __ROR4__(v90, 31) ^ __ROR4__(v127, 31);
    int v146 = v144;
    HIDWORD(v144) = v144;
    int v148 = v144 >> 31;
    HIDWORD(v144) = v140;
    LODWORD(v144) = v140;
    int v149 = v144 >> 2;
    unint64_t v150 = __PAIR64__(v147, __ROR4__(v135, 2));
    int v151 = v148 + 1859775393 + v134 + (v149 ^ v150 ^ v142);
    LODWORD(v15std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v147;
    unsigned int v152 = v151 + (v150 >> 27);
    LODWORD(v15std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v78 ^ v67 ^ __ROR4__(v468, 31) ^ __ROR4__(v131, 31);
    int v153 = v150;
    HIDWORD(v15std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v150;
    int v506 = v150 >> 31;
    int v154 = v506 + 1859775393 + v143;
    HIDWORD(v15std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v142;
    LODWORD(v15std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v142;
    int v155 = v150 >> 2;
    unint64_t v156 = __PAIR64__(v152, __ROR4__(v140, 2));
    int v157 = v154 + (v155 ^ v156 ^ v147);
    LODWORD(v156) = v152;
    unsigned int v158 = v157 + (v156 >> 27);
    int v159 = v493 ^ v72 ^ __ROR4__(v109, 31) ^ __ROR4__(v139, 31);
    HIDWORD(v156) = v159;
    LODWORD(v156) = v159;
    int v502 = v156 >> 31;
    HIDWORD(v156) = v147;
    LODWORD(v156) = v147;
    int v160 = v156 >> 2;
    unint64_t v161 = __PAIR64__(v158, __ROR4__(v142, 2));
    int v162 = v502 + 1859775393 + v149 + (v160 ^ v161 ^ v152);
    LODWORD(v161) = v158;
    unsigned int v163 = v162 + (v161 >> 27);
    LODWORD(v161) = v84 ^ v78 ^ __ROR4__(v111, 31) ^ __ROR4__(v146, 31);
    int v164 = v161;
    HIDWORD(v161) = v161;
    int v498 = v161 >> 31;
    int v165 = v498 + 1859775393 + v155;
    HIDWORD(v161) = v152;
    LODWORD(v161) = v152;
    int v166 = v161 >> 2;
    unint64_t v167 = __PAIR64__(v163, __ROR4__(v147, 2));
    int v168 = v165 + (v166 ^ v167 ^ v158);
    LODWORD(v167) = v163;
    unsigned int v169 = v168 + (v167 >> 27);
    LODWORD(v167) = v96 ^ v493 ^ __ROR4__(v116, 31) ^ __ROR4__(v153, 31);
    int v170 = v167;
    HIDWORD(v167) = v167;
    int v514 = v167 >> 31;
    HIDWORD(v167) = v158;
    LODWORD(v167) = v158;
    int v171 = v167 >> 2;
    unint64_t v172 = __PAIR64__(v169, __ROR4__(v152, 2));
    int v173 = v514 + 1859775393 + v160 + (v171 ^ v172 ^ v163);
    LODWORD(v172) = v169;
    unsigned int v174 = v173 + (v172 >> 27);
    LODWORD(v172) = v84 ^ __ROR4__(v466, 31) ^ __ROR4__(v127, 31) ^ __ROR4__(v159, 31);
    int v175 = v172;
    HIDWORD(v172) = v172;
    int v494 = v172 >> 31;
    HIDWORD(v172) = v163;
    LODWORD(v172) = v163;
    int v176 = v172 >> 2;
    unint64_t v177 = __PAIR64__(v174, __ROR4__(v158, 2));
    int v178 = v494 + 1859775393 + v166 + (v176 ^ v177 ^ v169);
    LODWORD(v177) = v174;
    unsigned int v179 = v178 + (v177 >> 27);
    LODWORD(v177) = v96 ^ __ROR4__(v90, 31) ^ __ROR4__(v131, 31) ^ __ROR4__(v164, 31);
    int v180 = v177;
    HIDWORD(v177) = v177;
    int v490 = v177 >> 31;
    int v181 = v490 + 1859775393 + v171;
    HIDWORD(v177) = v169;
    LODWORD(v177) = v169;
    int v182 = v177 >> 2;
    unint64_t v183 = __PAIR64__(v179, __ROR4__(v163, 2));
    int v184 = v181 + (v182 ^ v183 ^ v174);
    LODWORD(v183) = v179;
    unsigned int v185 = v184 + (v183 >> 27);
    LODWORD(v183) = v471 ^ __ROR4__(v466, 31) ^ __ROR4__(v139, 31) ^ __ROR4__(v170, 31);
    int v186 = v183;
    HIDWORD(v183) = v183;
    int v472 = v183 >> 31;
    HIDWORD(v183) = v174;
    LODWORD(v183) = v174;
    int v187 = v183 >> 2;
    unint64_t v188 = __PAIR64__(v185, __ROR4__(v169, 2));
    int v189 = v472 + 1859775393 + v176 + (v187 ^ v188 ^ v179);
    LODWORD(v18bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v185;
    unsigned int v190 = v189 + (v188 >> 27);
    LODWORD(v18bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v110 ^ __ROR4__(v90, 31) ^ __ROR4__(v146, 31) ^ __ROR4__(v175, 31);
    int v191 = v188;
    HIDWORD(v18bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v188;
    int v484 = v188 >> 31;
    int v192 = v484 + 1859775393 + v182;
    HIDWORD(v18bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v179;
    LODWORD(v18bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v179;
    int v193 = v188 >> 2;
    unint64_t v194 = __PAIR64__(v190, __ROR4__(v174, 2));
    int v195 = v192 + (v193 ^ v194 ^ v185);
    LODWORD(v194) = v190;
    unsigned int v196 = v195 + (v194 >> 27);
    LODWORD(v194) = v480 ^ __ROR4__(v468, 31) ^ __ROR4__(v153, 31) ^ __ROR4__(v180, 31);
    int v197 = v194;
    HIDWORD(v194) = v194;
    int v481 = v194 >> 31;
    int v198 = v481 + 1859775393 + v187;
    HIDWORD(v194) = v185;
    LODWORD(v194) = v185;
    int v199 = v194 >> 2;
    unint64_t v200 = __PAIR64__(v196, __ROR4__(v179, 2));
    int v201 = v198 + (v199 ^ v200 ^ v190);
    LODWORD(v20std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v196;
    unsigned int v202 = v201 + (v200 >> 27);
    LODWORD(v20std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v477 ^ __ROR4__(v109, 31) ^ __ROR4__(v159, 31) ^ __ROR4__(v186, 31);
    HIDWORD(v20std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v200;
    int v478 = v200 >> 31;
    int v203 = v200;
    int v204 = v478 + 1859775393 + v193;
    HIDWORD(v20std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v190;
    LODWORD(v20std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v190;
    int v205 = v200 >> 2;
    unint64_t v206 = __PAIR64__(v202, __ROR4__(v185, 2));
    int v207 = v204 + (v205 ^ v206 ^ v196);
    LODWORD(v206) = v202;
    unsigned int v208 = v207 + (v206 >> 27);
    LODWORD(v206) = v474 ^ __ROR4__(v111, 31) ^ __ROR4__(v164, 31) ^ __ROR4__(v191, 31);
    int v209 = v206;
    HIDWORD(v206) = v206;
    int v210 = v206 >> 31;
    HIDWORD(v206) = v196;
    LODWORD(v206) = v196;
    int v211 = v206 >> 2;
    unint64_t v212 = __PAIR64__(v208, __ROR4__(v190, 2));
    int v213 = v210 + 1859775393 + v199 + (v211 ^ v212 ^ v202);
    LODWORD(v212) = v208;
    unsigned int v214 = v213 + (v212 >> 27);
    LODWORD(v212) = v487 ^ __ROR4__(v116, 31) ^ __ROR4__(v170, 31) ^ __ROR4__(v197, 31);
    int v215 = v212;
    HIDWORD(v212) = v212;
    int v475 = v212 >> 31;
    HIDWORD(v212) = v202;
    LODWORD(v212) = v202;
    int v216 = v212 >> 2;
    unint64_t v217 = __PAIR64__(v214, __ROR4__(v196, 2));
    int v218 = v475 + 1859775393 + v205 + (v216 ^ v217 ^ v208);
    LODWORD(v217) = v214;
    unsigned int v219 = v218 + (v217 >> 27);
    int v221 = v203;
    LODWORD(v217) = v510 ^ __ROR4__(v127, 31) ^ __ROR4__(v175, 31) ^ __ROR4__(v203, 31);
    int v220 = v217;
    HIDWORD(v217) = v217;
    int v488 = v217 >> 31;
    HIDWORD(v217) = v208;
    LODWORD(v217) = v208;
    int v222 = v217 >> 2;
    unint64_t v223 = __PAIR64__(v219, __ROR4__(v202, 2));
    int v224 = v488 + 1859775393 + v211 + (v222 ^ v223 ^ v214);
    LODWORD(v223) = v219;
    unsigned int v225 = v224 + (v223 >> 27);
    int v226 = v209;
    LODWORD(v223) = v148 ^ __ROR4__(v131, 31) ^ __ROR4__(v180, 31) ^ __ROR4__(v209, 31);
    HIDWORD(v223) = v223;
    int v511 = v223 >> 31;
    int v227 = v223;
    HIDWORD(v223) = v214;
    LODWORD(v223) = v214;
    int v228 = v223 >> 2;
    unint64_t v229 = __PAIR64__(v225, __ROR4__(v208, 2));
    int v230 = v511 + 1859775393 + v216 + (v228 ^ v229 ^ v219);
    LODWORD(v229) = v225;
    unsigned int v231 = v230 + (v229 >> 27);
    LODWORD(v229) = v506 ^ __ROR4__(v139, 31) ^ __ROR4__(v186, 31) ^ __ROR4__(v215, 31);
    int v232 = v229;
    HIDWORD(v229) = v229;
    int v507 = v229 >> 31;
    HIDWORD(v229) = v231;
    LODWORD(v229) = v231;
    unsigned int v233 = v507
         - 1894007588
         + v222
         + ((v225 | __ROR4__(v219, 2)) & __ROR4__(v214, 2) | v225 & __ROR4__(v219, 2))
         + (v229 >> 27);
    LODWORD(v229) = v502 ^ __ROR4__(v146, 31) ^ __ROR4__(v191, 31) ^ __ROR4__(v220, 31);
    HIDWORD(v229) = v229;
    int v503 = v229 >> 31;
    int v234 = v229;
    HIDWORD(v229) = v233;
    LODWORD(v229) = v233;
    unsigned int v235 = v503
         - 1894007588
         + v228
         + ((v231 | __ROR4__(v225, 2)) & __ROR4__(v219, 2) | v231 & __ROR4__(v225, 2))
         + (v229 >> 27);
    unint64_t v237 = __PAIR64__(v219, __ROR4__(v153, 31));
    int v236 = v498 ^ v237;
    LODWORD(v237) = v219;
    int v238 = v237 >> 2;
    int v240 = v227;
    LODWORD(v237) = v236 ^ __ROR4__(v197, 31) ^ __ROR4__(v227, 31);
    int v239 = v237;
    HIDWORD(v237) = v237;
    int v499 = v237 >> 31;
    unint64_t v242 = __PAIR64__(v235, __ROR4__(v159, 31));
    int v241 = v514 ^ v242;
    LODWORD(v242) = v235;
    unsigned int v243 = v499
         - 1894007588
         + v238
         + ((v233 | __ROR4__(v231, 2)) & __ROR4__(v225, 2) | v233 & __ROR4__(v231, 2))
         + (v242 >> 27);
    HIDWORD(v242) = v225;
    LODWORD(v242) = v225;
    int v244 = v242 >> 2;
    LODWORD(v242) = v241 ^ __ROR4__(v221, 31) ^ __ROR4__(v232, 31);
    int v245 = v242;
    HIDWORD(v242) = v242;
    int v515 = v242 >> 31;
    unint64_t v246 = __PAIR64__(v243, __ROR4__(v233, 2));
    int v247 = v515 - 1894007588 + v244 + ((v235 | __ROR4__(v233, 2)) & __ROR4__(v231, 2) | v235 & v246);
    LODWORD(v246) = v243;
    unsigned int v248 = v247 + (v246 >> 27);
    unint64_t v250 = __PAIR64__(v231, __ROR4__(v226, 31));
    int v249 = v494 ^ __ROR4__(v164, 31) ^ v250;
    int v251 = v226;
    LODWORD(v25std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v231;
    int v252 = v250 >> 2;
    int v254 = v234;
    LODWORD(v25std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v249 ^ __ROR4__(v234, 31);
    int v253 = v250;
    HIDWORD(v25std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v250;
    int v495 = v250 >> 31;
    HIDWORD(v25std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v248;
    LODWORD(v25std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v248;
    int v255 = v495
         - 1894007588
         + v252
         + ((v243 | __ROR4__(v235, 2)) & __ROR4__(v233, 2) | v243 & __ROR4__(v235, 2))
         + (v250 >> 27);
    unint64_t v257 = __PAIR64__(v233, __ROR4__(v239, 31));
    int v256 = v490 ^ __ROR4__(v170, 31) ^ __ROR4__(v215, 31) ^ v257;
    LODWORD(v257) = v233;
    int v258 = v257 >> 2;
    HIDWORD(v257) = v256;
    LODWORD(v257) = v256;
    int v491 = v257 >> 31;
    HIDWORD(v257) = v255;
    LODWORD(v257) = v255;
    unsigned int v259 = v491
         - 1894007588
         + v258
         + ((v248 | __ROR4__(v243, 2)) & __ROR4__(v235, 2) | v248 & __ROR4__(v243, 2))
         + (v257 >> 27);
    unint64_t v261 = __PAIR64__(v235, __ROR4__(v220, 31));
    int v260 = v472 ^ __ROR4__(v175, 31) ^ v261;
    LODWORD(v261) = v235;
    int v262 = v261 >> 2;
    int v263 = v260 ^ __ROR4__(v245, 31);
    unint64_t v265 = __PAIR64__(v263, __ROR4__(v243, 2));
    int v264 = (v255 | __ROR4__(v248, 2)) & v265;
    LODWORD(v265) = v263;
    int v469 = v265 >> 31;
    unint64_t v266 = __PAIR64__(v259, __ROR4__(v248, 2));
    int v267 = v469 - 1894007588 + v262 + (v264 | v255 & v266);
    LODWORD(v266) = v259;
    unsigned int v268 = v267 + (v266 >> 27);
    unint64_t v269 = __PAIR64__(v243, __ROR4__(v255, 2));
    int v270 = (v259 | __ROR4__(v255, 2)) & __ROR4__(v248, 2) | v259 & v269;
    LODWORD(v269) = v243;
    int v271 = v269 >> 2;
    LODWORD(v269) = v484 ^ __ROR4__(v180, 31) ^ __ROR4__(v240, 31) ^ __ROR4__(v253, 31);
    int v272 = v269;
    HIDWORD(v269) = v269;
    int v485 = v269 >> 31;
    HIDWORD(v269) = v268;
    LODWORD(v269) = v268;
    unsigned int v273 = v485 - 1894007588 + v271 + v270 + (v269 >> 27);
    unint64_t v275 = __PAIR64__(v248, __ROR4__(v186, 31));
    int v274 = v481 ^ v275;
    LODWORD(v275) = v248;
    int v276 = v275 >> 2;
    LODWORD(v275) = v274 ^ __ROR4__(v232, 31) ^ __ROR4__(v256, 31);
    int v277 = v275;
    HIDWORD(v275) = v275;
    int v482 = v275 >> 31;
    int v278 = v482 - 1894007588 + v276 + ((v268 | __ROR4__(v259, 2)) & __ROR4__(v255, 2) | v268 & __ROR4__(v259, 2));
    unint64_t v280 = __PAIR64__(v273, __ROR4__(v191, 31));
    int v279 = v478 ^ v280;
    LODWORD(v28std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v273;
    unsigned int v281 = v278 + (v280 >> 27);
    HIDWORD(v28std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v255;
    LODWORD(v28std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v255;
    int v282 = v280 >> 2;
    LODWORD(v28std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v279 ^ __ROR4__(v234, 31) ^ __ROR4__(v263, 31);
    int v283 = v280;
    HIDWORD(v28std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v280;
    int v479 = v280 >> 31;
    unint64_t v284 = __PAIR64__(v281, __ROR4__(v268, 2));
    int v285 = v479 - 1894007588 + v282 + ((v273 | __ROR4__(v268, 2)) & __ROR4__(v259, 2) | v273 & v284);
    LODWORD(v284) = v281;
    unsigned int v286 = v285 + (v284 >> 27);
    unint64_t v288 = __PAIR64__(v259, __ROR4__(v239, 31));
    int v287 = v210 ^ __ROR4__(v197, 31) ^ v288;
    LODWORD(v28bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v259;
    int v289 = v288 >> 2;
    LODWORD(v28bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v287 ^ __ROR4__(v272, 31);
    int v290 = v288;
    HIDWORD(v28bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v288;
    int v473 = v288 >> 31;
    HIDWORD(v28bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v286;
    LODWORD(v28bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v286;
    int v291 = v473
         - 1894007588
         + v289
         + ((v281 | __ROR4__(v273, 2)) & __ROR4__(v268, 2) | v281 & __ROR4__(v273, 2))
         + (v288 >> 27);
    unint64_t v293 = __PAIR64__(v268, __ROR4__(v277, 31));
    int v292 = v475 ^ __ROR4__(v221, 31) ^ __ROR4__(v245, 31) ^ v293;
    LODWORD(v293) = v268;
    int v294 = v293 >> 2;
    HIDWORD(v293) = v292;
    LODWORD(v293) = v292;
    int v476 = v293 >> 31;
    HIDWORD(v293) = v291;
    LODWORD(v293) = v291;
    unsigned int v295 = v476
         - 1894007588
         + v294
         + ((v286 | __ROR4__(v281, 2)) & __ROR4__(v273, 2) | v286 & __ROR4__(v281, 2))
         + (v293 >> 27);
    unint64_t v297 = __PAIR64__(v273, __ROR4__(v253, 31));
    int v296 = v488 ^ __ROR4__(v251, 31) ^ v297;
    LODWORD(v297) = v273;
    int v298 = v297 >> 2;
    int v299 = v296 ^ __ROR4__(v283, 31);
    unint64_t v301 = __PAIR64__(v299, __ROR4__(v281, 2));
    int v300 = (v291 | __ROR4__(v286, 2)) & v301;
    LODWORD(v301) = v299;
    int v489 = v301 >> 31;
    unint64_t v302 = __PAIR64__(v295, __ROR4__(v286, 2));
    int v303 = v489 - 1894007588 + v298 + (v300 | v291 & v302);
    LODWORD(v302) = v295;
    unsigned int v304 = v303 + (v302 >> 27);
    unint64_t v305 = __PAIR64__(v281, __ROR4__(v291, 2));
    int v306 = (v295 | __ROR4__(v291, 2)) & __ROR4__(v286, 2) | v295 & v305;
    LODWORD(v305) = v281;
    int v307 = v305 >> 2;
    LODWORD(v305) = v511 ^ __ROR4__(v215, 31) ^ __ROR4__(v256, 31) ^ __ROR4__(v290, 31);
    int v308 = v305;
    HIDWORD(v305) = v305;
    int v512 = v305 >> 31;
    HIDWORD(v305) = v304;
    LODWORD(v305) = v304;
    unsigned int v309 = v512 - 1894007588 + v307 + v306 + (v305 >> 27);
    unint64_t v311 = __PAIR64__(v286, __ROR4__(v220, 31));
    int v310 = v507 ^ v311;
    LODWORD(v311) = v286;
    int v312 = v311 >> 2;
    int v313 = v263;
    LODWORD(v311) = v310 ^ __ROR4__(v263, 31) ^ __ROR4__(v292, 31);
    int v314 = v311;
    HIDWORD(v311) = v311;
    int v508 = v311 >> 31;
    unint64_t v316 = __PAIR64__(v309, __ROR4__(v240, 31));
    int v315 = v503 ^ v316;
    LODWORD(v316) = v309;
    unsigned int v317 = v508
         - 1894007588
         + v312
         + ((v304 | __ROR4__(v295, 2)) & __ROR4__(v291, 2) | v304 & __ROR4__(v295, 2))
         + (v316 >> 27);
    HIDWORD(v316) = v291;
    LODWORD(v316) = v291;
    int v318 = v316 >> 2;
    LODWORD(v316) = v315 ^ __ROR4__(v272, 31) ^ __ROR4__(v299, 31);
    int v319 = v316;
    HIDWORD(v316) = v316;
    int v504 = v316 >> 31;
    unint64_t v320 = __PAIR64__(v317, __ROR4__(v304, 2));
    int v321 = v504 - 1894007588 + v318 + ((v309 | __ROR4__(v304, 2)) & __ROR4__(v295, 2) | v309 & v320);
    LODWORD(v32std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v317;
    unsigned int v322 = v321 + (v320 >> 27);
    unint64_t v324 = __PAIR64__(v295, __ROR4__(v277, 31));
    int v323 = v499 ^ __ROR4__(v232, 31) ^ v324;
    LODWORD(v324) = v295;
    int v325 = v324 >> 2;
    LODWORD(v324) = v323 ^ __ROR4__(v308, 31);
    int v326 = v324;
    HIDWORD(v324) = v324;
    int v500 = v324 >> 31;
    HIDWORD(v324) = v322;
    LODWORD(v324) = v322;
    int v327 = v500
         - 1894007588
         + v325
         + ((v317 | __ROR4__(v309, 2)) & __ROR4__(v304, 2) | v317 & __ROR4__(v309, 2))
         + (v324 >> 27);
    unint64_t v329 = __PAIR64__(v304, __ROR4__(v314, 31));
    int v328 = v515 ^ __ROR4__(v254, 31) ^ __ROR4__(v283, 31) ^ v329;
    LODWORD(v329) = v304;
    int v330 = v329 >> 2;
    HIDWORD(v329) = v328;
    LODWORD(v329) = v328;
    int v516 = v329 >> 31;
    HIDWORD(v329) = v327;
    LODWORD(v329) = v327;
    unsigned int v331 = v516
         - 1894007588
         + v330
         + ((v322 | __ROR4__(v317, 2)) & __ROR4__(v309, 2) | v322 & __ROR4__(v317, 2))
         + (v329 >> 27);
    unint64_t v333 = __PAIR64__(v309, __ROR4__(v290, 31));
    int v332 = v495 ^ __ROR4__(v239, 31) ^ v333;
    LODWORD(v333) = v309;
    int v334 = v333 >> 2;
    int v335 = v332 ^ __ROR4__(v319, 31);
    unint64_t v337 = __PAIR64__(v335, __ROR4__(v317, 2));
    int v336 = (v327 | __ROR4__(v322, 2)) & v337;
    LODWORD(v337) = v335;
    int v496 = v337 >> 31;
    unint64_t v338 = __PAIR64__(v331, __ROR4__(v322, 2));
    int v339 = v496 - 1894007588 + v334 + (v336 | v327 & v338);
    LODWORD(v33bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v331;
    int v340 = v339 + (v338 >> 27);
    int v341 = v491 ^ __ROR4__(v245, 31);
    unint64_t v342 = __PAIR64__(v317, __ROR4__(v327, 2));
    int v343 = (v331 | __ROR4__(v327, 2)) & __ROR4__(v322, 2) | v331 & v342;
    LODWORD(v342) = v317;
    int v344 = v342 >> 2;
    LODWORD(v342) = v341 ^ __ROR4__(v292, 31) ^ __ROR4__(v326, 31);
    int v345 = v342;
    HIDWORD(v342) = v342;
    int v467 = v342 >> 31;
    int v346 = v467 - 1894007588 + v344 + v343;
    unint64_t v348 = __PAIR64__(v322, __ROR4__(v253, 31));
    int v347 = v469 ^ v348;
    LODWORD(v34bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v322;
    int v349 = v348 >> 2;
    int v350 = v347 ^ __ROR4__(v299, 31) ^ __ROR4__(v328, 31);
    HIDWORD(v34bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v350;
    LODWORD(v34bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v350;
    int v470 = v348 >> 31;
    HIDWORD(v34bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v340;
    LODWORD(v34bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v340;
    unsigned int v351 = v346 + (v348 >> 27);
    HIDWORD(v34bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v331;
    LODWORD(v34bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v331;
    int v352 = v348 >> 2;
    unint64_t v354 = __PAIR64__(v351, __ROR4__(v256, 31));
    int v353 = v485 ^ v354;
    LODWORD(v354) = v351;
    unsigned int v355 = v470 - 899497514 + v349 + (v352 ^ __ROR4__(v327, 2) ^ v340) + (v354 >> 27);
    HIDWORD(v354) = v327;
    LODWORD(v354) = v327;
    int v356 = v354 >> 2;
    int v357 = v353 ^ __ROR4__(v308, 31) ^ __ROR4__(v335, 31);
    HIDWORD(v354) = v357;
    LODWORD(v354) = v357;
    int v358 = v354 >> 31;
    HIDWORD(v354) = v340;
    LODWORD(v354) = v340;
    int v359 = v354 >> 2;
    unint64_t v360 = __PAIR64__(v355, __ROR4__(v331, 2));
    int v361 = v358 - 899497514 + v356 + (v359 ^ v360 ^ v351);
    LODWORD(v36std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v355;
    unsigned int v362 = v361 + (v360 >> 27);
    LODWORD(v36std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v482 ^ __ROR4__(v313, 31) ^ __ROR4__(v314, 31) ^ __ROR4__(v345, 31);
    int v363 = v360;
    HIDWORD(v36std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v360;
    int v492 = v360 >> 31;
    HIDWORD(v36std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v351;
    LODWORD(v36std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v351;
    int v364 = v360 >> 2;
    unint64_t v365 = __PAIR64__(v362, __ROR4__(v340, 2));
    int v366 = v492 - 899497514 + v352 + (v364 ^ v365 ^ v355);
    LODWORD(v365) = v362;
    unsigned int v367 = v366 + (v365 >> 27);
    LODWORD(v365) = v479 ^ __ROR4__(v272, 31) ^ __ROR4__(v319, 31) ^ __ROR4__(v350, 31);
    int v368 = v365;
    HIDWORD(v365) = v365;
    int v483 = v365 >> 31;
    HIDWORD(v365) = v355;
    LODWORD(v365) = v355;
    int v369 = v365 >> 2;
    unint64_t v370 = __PAIR64__(v367, __ROR4__(v351, 2));
    int v371 = v483 - 899497514 + v359 + (v369 ^ v370 ^ v362);
    LODWORD(v37std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v367;
    unsigned int v372 = v371 + (v370 >> 27);
    LODWORD(v37std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v473 ^ __ROR4__(v277, 31) ^ __ROR4__(v326, 31) ^ __ROR4__(v357, 31);
    int v373 = v370;
    HIDWORD(v37std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v370;
    int v486 = v370 >> 31;
    HIDWORD(v37std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v362;
    LODWORD(v37std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = v362;
    int v374 = v370 >> 2;
    unint64_t v375 = __PAIR64__(v372, __ROR4__(v355, 2));
    int v376 = v486 - 899497514 + v364 + (v374 ^ v375 ^ v367);
    LODWORD(v375) = v372;
    unsigned int v377 = v376 + (v375 >> 27);
    LODWORD(v375) = v476 ^ __ROR4__(v283, 31) ^ __ROR4__(v328, 31) ^ __ROR4__(v363, 31);
    int v378 = v375;
    HIDWORD(v375) = v375;
    int v379 = v375 >> 31;
    HIDWORD(v375) = v367;
    LODWORD(v375) = v367;
    int v380 = v375 >> 2;
    unint64_t v381 = __PAIR64__(v377, __ROR4__(v362, 2));
    int v382 = v379 - 899497514 + v369 + (v380 ^ v381 ^ v372);
    LODWORD(v381) = v377;
    unsigned int v383 = v382 + (v381 >> 27);
    LODWORD(v381) = v489 ^ __ROR4__(v290, 31) ^ __ROR4__(v335, 31) ^ __ROR4__(v368, 31);
    int v384 = v381;
    HIDWORD(v381) = v381;
    int v385 = (v381 >> 31) - 899497514;
    HIDWORD(v381) = v372;
    LODWORD(v381) = v372;
    int v386 = v381 >> 2;
    unint64_t v387 = __PAIR64__(v383, __ROR4__(v367, 2));
    int v388 = v385 + v374 + (v386 ^ v387 ^ v377);
    LODWORD(v387) = v383;
    unsigned int v389 = v388 + (v387 >> 27);
    LODWORD(v387) = v512 ^ __ROR4__(v292, 31) ^ __ROR4__(v345, 31) ^ __ROR4__(v373, 31);
    int v390 = v387;
    HIDWORD(v387) = v387;
    int v391 = (v387 >> 31) - 899497514 + v380;
    HIDWORD(v387) = v377;
    LODWORD(v387) = v377;
    int v392 = v387 >> 2;
    unint64_t v393 = __PAIR64__(v389, __ROR4__(v372, 2));
    int v394 = v391 + (v392 ^ v393 ^ v383);
    LODWORD(v393) = v389;
    unsigned int v395 = v394 + (v393 >> 27);
    int v396 = v508 ^ __ROR4__(v299, 31) ^ __ROR4__(v350, 31) ^ __ROR4__(v378, 31);
    HIDWORD(v393) = v396;
    LODWORD(v393) = v396;
    int v397 = (v393 >> 31) - 899497514;
    HIDWORD(v393) = v383;
    LODWORD(v393) = v383;
    int v398 = v393 >> 2;
    unint64_t v399 = __PAIR64__(v395, __ROR4__(v377, 2));
    int v400 = v397 + v386 + (v398 ^ v399 ^ v389);
    LODWORD(v399) = v395;
    unsigned int v401 = v400 + (v399 >> 27);
    LODWORD(v399) = v504 ^ __ROR4__(v308, 31) ^ __ROR4__(v357, 31) ^ __ROR4__(v384, 31);
    int v402 = v399;
    HIDWORD(v399) = v399;
    int v403 = (v399 >> 31) - 899497514 + v392;
    HIDWORD(v399) = v389;
    LODWORD(v399) = v389;
    int v404 = v399 >> 2;
    unint64_t v405 = __PAIR64__(v401, __ROR4__(v383, 2));
    int v406 = v403 + (v404 ^ v405 ^ v395);
    LODWORD(v405) = v401;
    unsigned int v407 = v406 + (v405 >> 27);
    LODWORD(v405) = v500 ^ __ROR4__(v314, 31) ^ __ROR4__(v363, 31) ^ __ROR4__(v390, 31);
    int v408 = v405;
    HIDWORD(v405) = v405;
    int v409 = (v405 >> 31) - 899497514;
    HIDWORD(v405) = v395;
    LODWORD(v405) = v395;
    int v410 = v405 >> 2;
    unint64_t v411 = __PAIR64__(v407, __ROR4__(v389, 2));
    int v412 = v409 + v398 + (v410 ^ v411 ^ v401);
    LODWORD(v411) = v407;
    unsigned int v413 = v412 + (v411 >> 27);
    int v414 = v516 ^ __ROR4__(v319, 31) ^ __ROR4__(v368, 31) ^ __ROR4__(v396, 31);
    HIDWORD(v411) = v414;
    LODWORD(v411) = v414;
    int v415 = (v411 >> 31) - 899497514 + v404;
    HIDWORD(v411) = v401;
    LODWORD(v411) = v401;
    int v416 = v411 >> 2;
    unint64_t v418 = __PAIR64__(v413, __ROR4__(v326, 31));
    int v417 = v496 ^ v418;
    LODWORD(v41bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v413;
    unsigned int v419 = v415 + (v416 ^ __ROR4__(v395, 2) ^ v407) + (v418 >> 27);
    int v420 = v417 ^ __ROR4__(v373, 31) ^ __ROR4__(v402, 31);
    HIDWORD(v41bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v420;
    LODWORD(v41bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v420;
    int v421 = (v418 >> 31) - 899497514;
    HIDWORD(v41bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v407;
    LODWORD(v41bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v407;
    int v422 = v418 >> 2;
    unint64_t v423 = __PAIR64__(v419, __ROR4__(v401, 2));
    int v424 = v421 + v410 + (v422 ^ v423 ^ v413);
    LODWORD(v423) = v419;
    unsigned int v425 = v424 + (v423 >> 27);
    int v426 = v467 ^ __ROR4__(v328, 31) ^ __ROR4__(v378, 31) ^ __ROR4__(v408, 31);
    HIDWORD(v423) = v426;
    LODWORD(v423) = v426;
    int v427 = (v423 >> 31) - 899497514 + v416;
    HIDWORD(v423) = v413;
    LODWORD(v423) = v413;
    int v428 = v423 >> 2;
    int v429 = v427 + (v428 ^ __ROR4__(v407, 2) ^ v419);
    unint64_t v431 = __PAIR64__(v425, __ROR4__(v335, 31));
    int v430 = v470 ^ v431;
    LODWORD(v431) = v425;
    unsigned int v432 = v429 + (v431 >> 27);
    int v433 = v430 ^ __ROR4__(v384, 31) ^ __ROR4__(v414, 31);
    HIDWORD(v431) = v433;
    LODWORD(v431) = v433;
    int v434 = (v431 >> 31) - 899497514;
    HIDWORD(v431) = v419;
    LODWORD(v431) = v419;
    int v435 = v431 >> 2;
    unint64_t v436 = __PAIR64__(v432, __ROR4__(v413, 2));
    int v437 = v434 + v422 + (v435 ^ v436 ^ v425);
    LODWORD(v436) = v432;
    unsigned int v438 = v437 + (v436 >> 27);
    int v439 = v358 ^ __ROR4__(v345, 31) ^ __ROR4__(v390, 31) ^ __ROR4__(v420, 31);
    HIDWORD(v436) = v439;
    LODWORD(v436) = v439;
    int v440 = (v436 >> 31) - 899497514 + v428;
    HIDWORD(v436) = v425;
    LODWORD(v436) = v425;
    int v441 = v436 >> 2;
    unint64_t v443 = __PAIR64__(v438, __ROR4__(v396, 31));
    int v442 = v492 ^ __ROR4__(v350, 31) ^ v443;
    LODWORD(v443) = v438;
    unsigned int v444 = v440 + (v441 ^ __ROR4__(v419, 2) ^ v432) + (v443 >> 27);
    int v445 = v442 ^ __ROR4__(v426, 31);
    HIDWORD(v443) = v445;
    LODWORD(v443) = v445;
    int v446 = (v443 >> 31) - 899497514;
    HIDWORD(v443) = v432;
    LODWORD(v443) = v432;
    int v447 = v443 >> 2;
    unint64_t v448 = __PAIR64__(v444, __ROR4__(v425, 2));
    int v449 = v446 + v435 + (v447 ^ v448 ^ v438);
    LODWORD(v44bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v444;
    unsigned int v450 = v449 + (v448 >> 27);
    LODWORD(v44bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v483 ^ __ROR4__(v357, 31) ^ __ROR4__(v402, 31) ^ __ROR4__(v433, 31);
    HIDWORD(v44bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v448;
    int v451 = (v448 >> 31) - 899497514 + v441;
    HIDWORD(v44bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v438;
    LODWORD(v44bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v438;
    uint64_t result = (v448 >> 2);
    unint64_t v454 = __PAIR64__(v450, __ROR4__(v408, 31));
    int v453 = v486 ^ __ROR4__(v363, 31) ^ v454;
    LODWORD(v454) = v450;
    unsigned int v455 = v451 + (result ^ __ROR4__(v432, 2) ^ v444) + (v454 >> 27);
    LODWORD(v454) = v453 ^ __ROR4__(v439, 31);
    HIDWORD(v454) = v454;
    int v456 = (v454 >> 31) - 899497514;
    HIDWORD(v454) = v444;
    LODWORD(v454) = v444;
    int v457 = v454 >> 2;
    unint64_t v458 = __PAIR64__(v455, __ROR4__(v438, 2));
    int v459 = v456 + v447 + (v457 ^ v458 ^ v450);
    LODWORD(v45bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v455;
    unsigned int v460 = v459 + (v458 >> 27);
    LODWORD(v45bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v379 ^ __ROR4__(v368, 31) ^ __ROR4__(v414, 31) ^ __ROR4__(v445, 31);
    HIDWORD(v45bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v458;
    int v461 = v517 - 899497514 + (v458 >> 31) + result;
    HIDWORD(v45bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v450;
    LODWORD(v45bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v450;
    int v462 = v458 >> 2;
    unint64_t v463 = __PAIR64__(v460, __ROR4__(v444, 2));
    int v464 = v461 + (v462 ^ v463 ^ v455);
    int v5 = v460 + v523;
    LODWORD(v463) = v460;
    int v7 = v464 + (v463 >> 27);
    HIDWORD(v463) = v455;
    LODWORD(v463) = v455;
    int v6 = (v463 >> 2) + v521;
    int v3 = v462 + v522;
    int v4 = v457 + v518;
    *a1 = v7;
    a1[1] = v5;
    a1[2] = v6;
    a1[3] = v3;
    a1[4] = v457 + v518;
    a2 = v519 + 16;
    a3 = v520 - 1;
  }
  while (v520 != 1);
  return result;
}

uint64_t bssl::tls_open_change_cipher_spec(bssl *a1, unsigned __int8 **a2, ssl_st *a3, unsigned __int16 *a4, unint64_t a5)
{
  char v11 = -86;
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t result = bssl::tls_open_record(a1, &v11, (uint64_t)&v9, a2, a3, a4, a5);
  if (!result)
  {
    if (v11 == 20)
    {
      if (v10 == 1 && *v9 == 1)
      {
        bssl::ssl_do_msg_callback((uint64_t)a1, 0, 20, (uint64_t)v9, 1);
        return 0;
      }
      ERR_put_error(16, 0, 103, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_pkt.cc", 383);
      char v8 = 47;
    }
    else
    {
      ERR_put_error(16, 0, 225, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/s3_pkt.cc", 377);
      char v8 = 10;
    }
    LOBYTE(a3->version) = v8;
    return 4;
  }
  return result;
}

void bssl::ssl_send_alert(bssl *this, ssl_st *a2, int a3)
{
  int v6 = ERR_save_state();
  bssl::ssl_send_alert_impl(this, a2, a3);
  ERR_restore_state(v6);
  if (v6) {
    ERR_SAVE_STATE_free((uint64_t)v6);
  }
}

void sub_1BA147870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<err_save_state_st,bssl::internal::Deleter>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t boringssl_config_get_tickets_enabled()
{
  return 0;
}

uint64_t boringssl_config_get_resumption_enabled()
{
  return 1;
}

uint64_t boringssl_config_get_false_start_enabled()
{
  return 1;
}

uint64_t boringssl_config_get_tls13_external_psk_enabled()
{
  if (boringssl_config_get_whitelisted_bundle_identifier_onceToken != -1) {
    dispatch_once(&boringssl_config_get_whitelisted_bundle_identifier_onceToken, &__block_literal_global_2);
  }
  uint64_t v0 = (const char *)global_bundle_identifier;
  uint64_t result = strcmp((const char *)global_bundle_identifier, "redacted_bundle_id");
  if (result) {
    return strcmp(v0, "no_bundle_id") != 0;
  }
  return result;
}

uint64_t boringssl_config_restricted_mode_restrict_tls_version(uint64_t result)
{
  if (result <= 0x303) {
    return 771;
  }
  else {
    return result;
  }
}

uint64_t boringssl_config_restricted_mode_restrict_dtls_version(uint64_t result)
{
  if (result >= 0xFEFD) {
    return 65277;
  }
  else {
    return result;
  }
}

void **std::unique_ptr<bssl::anonymous namespace'::ECKeyShare,bssl::internal::Deleter>::~unique_ptr[abi:ne180100](void **a1)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (*(void (**)(void *))*v2)(v2);
    OPENSSL_free(v2);
  }
  return a1;
}

BOOL bssl::ssl_nid_to_group_id(bssl *this, unsigned __int16 *a2)
{
  uint64_t v2 = 0;
  while (1)
  {
    if (v3 == a2) {
      break;
    }
    v2 += 18;
    if (v2 == 108) {
      return v3 == a2;
    }
  }
  return v3 == a2;
}

uint64_t bssl::ssl_name_to_group_id(bssl *this, const char *a2, const char *a3)
{
  uint64_t v6 = 0;
  while (1)
  {
    {
      break;
    }
    char v8 = (const char *)strlen((const char *)v7 + 38);
    BOOL v9 = v8 && v8 == a3;
    if (v9 && !strncmp((const char *)v7 + 38, a2, (size_t)a3)) {
      break;
    }
    v6 += 18;
    if (v6 == 108) {
      return 0;
    }
  }
  return 1;
}

void bssl::anonymous namespace'::ECKeyShare::~ECKeyShare(BIGNUM **this)
{
  *thiunsigned int s = (BIGNUM *)&unk_1F1397DD8;
  std::unique_ptr<bignum_st,bssl::internal::Deleter>::reset[abi:ne180100](this + 1, 0);
}

{
  uint64_t vars8;

  *thiunsigned int s = (BIGNUM *)&unk_1F1397DD8;
  std::unique_ptr<bignum_st,bssl::internal::Deleter>::reset[abi:ne180100](this + 1, 0);

  JUMPOUT(0x1BA9E4E30);
}

uint64_t bssl::anonymous namespace'::ECKeyShare::GroupID(bssl::_anonymous_namespace_::ECKeyShare *this)
{
  return *((unsigned __int16 *)this + 12);
}

BOOL bssl::anonymous namespace'::ECKeyShare::Generate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (BIGNUM **)(a1 + 8);
  if (*(void *)(a1 + 8)) {
  int v5 = BN_new();
  }
  std::unique_ptr<bignum_st,bssl::internal::Deleter>::reset[abi:ne180100](v2, v5);
  uint64_t v6 = *v2;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = EC_GROUP_get0_order(*(void *)(a1 + 16));
  if (!BN_rand_range_ex((uint64_t)v6, 1uLL, v7)) {
    return 0;
  }
  char v8 = EC_POINT_new(*(const EC_GROUP **)(a1 + 16));
  if (!v8) {
    return 0;
  }
  BOOL v9 = v8;
  if (EC_POINT_mul(*(const EC_GROUP **)(a1 + 16), v8, *(const BIGNUM **)(a1 + 8), 0, 0, 0)) {
    BOOL v10 = EC_POINT_point2cbb(a2, *(EC_GROUP **)(a1 + 16), v9, POINT_CONVERSION_UNCOMPRESSED, 0) != 0;
  }
  else {
    BOOL v10 = 0;
  }
  EC_POINT_free(v9);
  return v10;
}

void sub_1BA147C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<ec_point_st,bssl::internal::Deleter>::reset[abi:ne180100]((EC_POINT **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t bssl::anonymous namespace'::ECKeyShare::Encap(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  *a4 = 80;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 40);
    return v12(a1, a3, a4, a5, a6);
  }
  return result;
}

uint64_t bssl::anonymous namespace'::ECKeyShare::Decap(uint64_t a1, uint64_t a2, unsigned char *a3, const unsigned __int8 *a4, size_t a5)
{
  if (!*(void *)(a1 + 16)) {
  if (!*(void *)(a1 + 8))
  }
  *a3 = 80;
  BOOL v10 = EC_POINT_new(*(const EC_GROUP **)(a1 + 16));
  unint64_t v23 = v10;
  char v11 = EC_POINT_new(*(const EC_GROUP **)(a1 + 16));
  int v22 = v11;
  unsigned int v12 = BN_new();
  int v13 = v12;
  unsigned int v21 = v12;
  if (v10 && v11 && v12)
  {
    if (a5 && *a4 == 4 && EC_POINT_oct2point(*(const EC_GROUP **)(a1 + 16), v10, a4, a5, 0))
    {
      if (EC_POINT_mul(*(const EC_GROUP **)(a1 + 16), v11, 0, v10, *(const BIGNUM **)(a1 + 8), 0)
        && EC_POINT_get_affine_coordinates_GFp(*(const EC_GROUP **)(a1 + 16), v11, v13, 0, 0))
      {
        int v19 = 0;
        unint64_t v20 = 0;
        int degree = EC_GROUP_get_degree(*(const EC_GROUP **)(a1 + 16));
        if (bssl::Array<unsigned char>::Init((uint64_t)&v19, (degree + 7) >> 3)
          && BN_bn2bin_padded(v19, v20, (uint64_t)v13))
        {
          OPENSSL_free(*(void **)a2);
          unint64_t v15 = v20;
          *(void *)a2 = v19;
          *(void *)(a2 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v15;
          int v19 = 0;
          unint64_t v20 = 0;
          uint64_t v16 = 1;
        }
        else
        {
          uint64_t v16 = 0;
        }
        bssl::Array<unsigned short>::~Array((uint64_t)&v19);
      }
      else
      {
        uint64_t v16 = 0;
      }
    }
    else
    {
      ERR_put_error(16, 0, 108, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_key_share.cc", 94);
      uint64_t v16 = 0;
      *a3 = 50;
    }
    unsigned int v21 = 0;
    goto LABEL_18;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unsigned int v21 = 0;
  if (v12)
  {
LABEL_18:
    BN_free(v13);
    uint64_t v17 = v16;
  }
  int v22 = 0;
  if (v11) {
    EC_POINT_free(v11);
  }
  unint64_t v23 = 0;
  if (v10) {
    EC_POINT_free(v10);
  }
  return v17;
}

void sub_1BA147F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, BIGNUM *);
  va_copy(va3, va2);
  char v8 = va_arg(va3, EC_POINT *);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  std::unique_ptr<bignum_st,bssl::internal::Deleter>::reset[abi:ne180100]((BIGNUM **)va1, 0);
  std::unique_ptr<ec_point_st,bssl::internal::Deleter>::reset[abi:ne180100]((EC_POINT **)va2, 0);
  std::unique_ptr<ec_point_st,bssl::internal::Deleter>::reset[abi:ne180100]((EC_POINT **)va3, 0);
  _Unwind_Resume(a1);
}

BOOL bssl::anonymous namespace'::ECKeyShare::SerializePrivateKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
  if (!*(void *)(a1 + 8))
  }
  uint64_t v5 = (const BIGNUM *)EC_GROUP_get0_order(v3);
  unsigned int v6 = BN_num_bytes(v5);
  return BN_bn2cbb_padded(a2, v6, *(void *)(a1 + 8)) != 0;
}

BOOL bssl::anonymous namespace'::ECKeyShare::DeserializePrivateKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (BIGNUM **)(a1 + 8);
  if (*(void *)(a1 + 8)) {
  uint64_t v3 = BN_bin2bn(*(const unsigned __int8 **)a2, *(void *)(a2 + 8), 0);
  }
  std::unique_ptr<bignum_st,bssl::internal::Deleter>::reset[abi:ne180100](v2, v3);
  return *v2 != 0;
}

void bssl::anonymous namespace'::X25519KeyShare::~X25519KeyShare(bssl::_anonymous_namespace_::X25519KeyShare *this)
{
}

uint64_t bssl::anonymous namespace'::X25519KeyShare::Encap(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  *a4 = 80;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 40);
    return v12(a1, a3, a4, a5, a6);
  }
  return result;
}

BOOL bssl::anonymous namespace'::X25519KeyShare::SerializePrivateKey(uint64_t a1, uint64_t a2)
{
  return CBB_add_bytes(a2, (const void *)(a1 + 8), 0x20uLL) != 0;
}

BOOL bssl::anonymous namespace'::X25519KeyShare::DeserializePrivateKey(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == 32 && CBS_copy_bytes(a2, (void *)(a1 + 8), 0x20uLL) != 0;
}

void bssl::anonymous namespace'::X25519Kyber768KeyShare::~X25519Kyber768KeyShare(bssl::_anonymous_namespace_::X25519Kyber768KeyShare *this)
{
}

uint64_t bssl::anonymous namespace'::X25519Kyber768KeyShare::GroupID(bssl::_anonymous_namespace_::X25519Kyber768KeyShare *this)
{
  return 25497;
}

uint64_t bssl::anonymous namespace'::X25519Kyber768KeyShare::Generate(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v4;
  v7[1] = v4;
  X25519_keypair(v7, (unsigned __int8 *)(a1 + 8));
  memset(v6, 170, sizeof(v6));
  KYBER_generate_key(v6, a1 + 40);
  uint64_t result = CBB_add_bytes(a2, v7, 0x20uLL);
  if (result) {
    return CBB_add_bytes(a2, v6, 0x4A0uLL) != 0;
  }
  return result;
}

uint64_t bssl::anonymous namespace'::X25519Kyber768KeyShare::Encap()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unsigned int v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = v0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  OPENSSL_free(0);
  uint64_t v21 = 0;
  unsigned int v12 = (char *)OPENSSL_malloc(0x40uLL);
  unint64_t v20 = v12;
  if (!v12) {
    goto LABEL_11;
  }
  uint64_t v21 = 64;
  int v13 = (unsigned __int8 *)(v11 + 8);
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v14;
  v24[1] = v14;
  X25519_keypair(v24, v13);
  memset(__b, 170, sizeof(__b));
  memset(v17, 170, sizeof(v17));
  uint64_t v18 = v4;
  uint64_t v19 = v2;
  if (!CBS_get_bytes(&v18, &v17[2], 0x20uLL)
    || !CBS_get_bytes(&v18, v17, 0x4A0uLL)
    || v19
    || !X25519(v12, (long long *)v13, (int64x2_t *)v17[2])
    || !KYBER_parse_public_key((uint64_t)__b, v17))
  {
    *unsigned int v6 = 50;
    ERR_put_error(16, 0, 108, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_key_share.cc", 239);
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  memset(v22, 170, sizeof(v22));
  KYBER_encap(v22, v12 + 32, (uint64_t)__b);
  if (!CBB_add_bytes(v10, v24, 0x20uLL) || !CBB_add_bytes(v10, v22, 0x440uLL))
  {
LABEL_11:
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  OPENSSL_free(*(void **)v8);
  *(void *)uint64_t v8 = v12;
  *(void *)(v8 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 64;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v15 = 1;
  unsigned int v12 = 0;
LABEL_12:
  OPENSSL_free(v12);
  return v15;
}

void sub_1BA148454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  bssl::Array<unsigned short>::~Array((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bssl::anonymous namespace'::X25519Kyber768KeyShare::Decap(uint64_t a1, uint64_t a2, unsigned char *a3, int64x2_t *a4, uint64_t a5)
{
  *a3 = 80;
  OPENSSL_free(0);
  uint64_t v10 = (char *)OPENSSL_malloc(0x40uLL);
  uint64_t v11 = v10;
  if (v10)
  {
    if (a5 == 1120 && X25519(v10, (long long *)(a1 + 8), a4))
    {
      KYBER_decap(v11 + 32, (unsigned __int8 *)&a4[2], a1 + 40);
      OPENSSL_free(*(void **)a2);
      *(void *)a2 = v11;
      *(void *)(a2 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 64;
      uint64_t v12 = 1;
      uint64_t v11 = 0;
    }
    else
    {
      *a3 = 50;
      ERR_put_error(16, 0, 108, "/Library/Caches/com.apple.xbs/Sources/boringssl/ssl/ssl_key_share.cc", 269);
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  OPENSSL_free(v11);
  return v12;
}

void sub_1BA148588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boringssl_helper_convert_trusterror_to_alertcode(int a1)
{
  if (a1 <= -67736)
  {
    if (a1 > -67820)
    {
      if ((a1 + 67819) < 2) {
        return 45;
      }
      return 46;
    }
    if (a1 != -67880 && a1 != -67843)
    {
      if (a1 == -67820) {
        return 44;
      }
      return 46;
    }
    return 42;
  }
  if (a1 <= -67613)
  {
    if (a1 == -67735 || a1 == -67655) {
      return 42;
    }
  }
  else
  {
    switch(a1)
    {
      case -67612:
        return 48;
      case -67602:
        return 42;
      case -25318:
        return 48;
    }
  }
  return 46;
}

uint64_t boringssl_helper_convert_alert_code(int a1, int a2)
{
  if (a1 <= 69)
  {
    switch(a1)
    {
      case 20:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9846;
        unsigned int v4 = -9820;
        break;
      case 21:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9845;
        unsigned int v4 = -9821;
        break;
      case 22:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9847;
        unsigned int v4 = -9822;
        break;
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
        return 4294957494;
      case 30:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9857;
        unsigned int v4 = -9823;
        break;
      case 40:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9858;
        unsigned int v4 = -9824;
        break;
      case 41:
      case 46:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9808;
        unsigned int v4 = -9825;
        break;
      case 42:
        return 4294957488;
      case 43:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9808;
        unsigned int v4 = -9826;
        break;
      case 44:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9808;
        unsigned int v4 = -9827;
        break;
      case 45:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9814;
        unsigned int v4 = -9828;
        break;
      case 47:
        return 4294957466;
      case 48:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9813;
        unsigned int v4 = -9831;
        break;
      case 49:
        return 4294957464;
      case 50:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9859;
        unsigned int v4 = -9833;
        break;
      case 51:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9845;
        unsigned int v4 = -9834;
        break;
      case 60:
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9802;
        unsigned int v4 = -9835;
        break;
      default:
        if (!a1) {
          return 4294957491;
        }
        if (a1 != 10) {
          return 4294957494;
        }
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9856;
        unsigned int v4 = -9819;
        break;
    }
LABEL_39:
    if (v2) {
      return v4;
    }
    else {
      return v3;
    }
  }
  if (a1 <= 85)
  {
    switch(a1)
    {
      case 'F':
        return 4294957460;
      case 'G':
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9802;
        unsigned int v4 = -9837;
        break;
      case 'P':
        BOOL v2 = a2 == 16388;
        unsigned int v3 = -9810;
        unsigned int v4 = -9838;
        break;
      default:
        return 4294957494;
    }
    goto LABEL_39;
  }
  switch(a1)
  {
    case 'd':
      BOOL v2 = a2 == 16388;
      unsigned int v3 = -9800;
      unsigned int v4 = -9840;
      goto LABEL_39;
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
      return 4294957494;
    case 'n':
    case 'o':
    case 'p':
    case 'q':
      return 4294957496;
    case 'r':
      return 4294957488;
    case 's':
      return 4294957432;
    case 't':
      BOOL v2 = a2 == 16388;
      unsigned int v3 = -9863;
      unsigned int v4 = -9829;
      goto LABEL_39;
    default:
      if (a1 == 86)
      {
        uint64_t result = 4294957436;
      }
      else
      {
        if (a1 != 90) {
          return 4294957494;
        }
        uint64_t result = 4294957457;
      }
      break;
  }
  return result;
}

BOOL boringssl_helper_dispatch_data_equal(void *a1, void *a2)
{
  unsigned int v3 = a1;
  unsigned int v4 = a2;
  uint64_t v5 = v4;
  BOOL v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
  {
    size_t size = dispatch_data_get_size(v3);
    if (size == dispatch_data_get_size(v5))
    {
      uint64_t v12 = 0;
      int v13 = &v12;
      uint64_t v14 = 0x2020000000;
      char v15 = 1;
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      _OWORD v9[2] = __boringssl_helper_dispatch_data_equal_block_invoke;
      _OWORD v9[3] = &unk_1E61F38E0;
      uint64_t v10 = v5;
      uint64_t v11 = &v12;
      dispatch_data_apply(v3, v9);
      BOOL v6 = *((unsigned char *)v13 + 24) != 0;

      _Block_object_dispose(&v12, 8);
    }
    else
    {
      BOOL v6 = 0;
    }
  }

  return v6;
}

uint64_t __boringssl_helper_dispatch_data_equal_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v6 = *(NSObject **)(a1 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __boringssl_helper_dispatch_data_equal_block_invoke_2;
  _OWORD v8[3] = &unk_1E61F38B8;
  _OWORD v8[4] = *(void *)(a1 + 40);
  void v8[5] = a3;
  v8[6] = a5;
  v8[7] = a4;
  dispatch_data_apply(v6, v8);
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

BOOL __boringssl_helper_dispatch_data_equal_block_invoke_2(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = a1[5];
  uint64_t v6 = a1[6];
  if (v7 <= a3) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = a1[5];
  }
  unint64_t v9 = v6 + v7;
  if (v6 + v7 >= a5 + a3) {
    unint64_t v10 = a5 + a3;
  }
  else {
    unint64_t v10 = v6 + v7;
  }
  BOOL v11 = v10 > v8;
  size_t v12 = v10 - v8;
  if (v11)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = memcmp((const void *)(a4 + v8 - a3), (const void *)(a1[7] + v8 - v7), v12) == 0;
  }
  else
  {
    if (v9 < a3) {
      return 0;
    }
    if (a5 + a3 < v7) {
      return 1;
    }
  }
  return *(unsigned char *)(*(void *)(a1[4] + 8) + 24) != 0;
}

id boringssl_helper_create_protocol_list_from_encoded_list(uint64_t a1, size_t a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    xpc_object_t v5 = xpc_array_create(0, 0);
    if (v5)
    {
      size_t v6 = 0;
      while (1)
      {
        size_t v7 = *(unsigned __int8 *)(a1 + v6);
        if (v6 + v7 >= a2) {
          break;
        }
        size_t v8 = v7 + 1;
        unint64_t v9 = (char *)malloc_type_malloc(v7 + 1, 0x83550F57uLL);
        if (!v9) {
          break;
        }
        unint64_t v10 = v9;
        memcpy(v9, (const void *)(a1 + v6 + 1), v7);
        v10[v7] = 0;
        xpc_object_t v11 = xpc_string_create(v10);
        if (!v11)
        {
          free(v10);
          break;
        }
        size_t v12 = v11;
        xpc_array_append_value(v5, v11);
        free(v10);
        v6 += v8;

        if (v6 >= a2)
        {
          id v2 = v5;
          goto LABEL_12;
        }
      }
    }
    id v2 = 0;
LABEL_12:
  }

  return v2;
}

BOOL boringssl_helper_find_first_overlapping_protocol(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  size_t v8 = v7;
  BOOL v9 = 0;
  *a4 = 0;
  if (a1 && v7 && a3)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __boringssl_helper_find_first_overlapping_protocol_block_invoke;
    applier[3] = &unk_1E61F3930;
    id v12 = v7;
    int v13 = a4;
    uint64_t v14 = a3;
    BOOL v9 = !xpc_array_apply(a1, applier);
  }
  return v9;
}

BOOL __boringssl_helper_find_first_overlapping_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  size_t length = xpc_string_get_length(v4);
  v11[0] = 0;
  v11[1] = v11;
  void v11[2] = 0x2020000000;
  string_int ptr = (const char *)0xAAAAAAAAAAAAAAAALL;
  string_int ptr = xpc_string_get_string_ptr(v4);
  size_t v6 = *(void **)(a1 + 32);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __boringssl_helper_find_first_overlapping_protocol_block_invoke_2;
  _OWORD v9[3] = &unk_1E61F3908;
  void v9[4] = v11;
  v9[5] = length;
  long long v10 = *(_OWORD *)(a1 + 40);
  BOOL v7 = xpc_array_apply(v6, v9);
  _Block_object_dispose(v11, 8);

  return v7;
}

void sub_1BA148EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __boringssl_helper_find_first_overlapping_protocol_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  size_t length = xpc_string_get_length(v4);
  string_int ptr = xpc_string_get_string_ptr(v4);

  if (*(void *)(a1 + 40) != length) {
    return 1;
  }
  uint64_t result = strncmp(*(const char **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), string_ptr, length);
  if (result) {
    return 1;
  }
  **(unsigned char **)(a1 + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = length;
  **(void **)(a1 + 56) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *boringssl_helper_create_certificate_sec_array_from_CFArray(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = (void *)sec_array_create();
  if (v2)
  {
    if (CFArrayGetCount(a1) >= 1)
    {
      CFIndex v3 = 0;
      do
      {
        CFDataRef ValueAtIndex = (__SecCertificate *)CFArrayGetValueAtIndex(a1, v3);
        if (ValueAtIndex)
        {
          sec_certificate_t v5 = sec_certificate_create(ValueAtIndex);
          sec_array_append();
        }
        ++v3;
      }
      while (v3 < CFArrayGetCount(a1));
    }
    id v6 = v2;
  }

  return v2;
}

uint64_t boringssl_helper_SecKeyAlgorithm_from_signature_algorithm(int a1)
{
  uint64_t v1 = MEMORY[0x1E4F3BB18];
  uint64_t v2 = MEMORY[0x1E4F3BB08];
  uint64_t v3 = MEMORY[0x1E4F3BB10];
  uint64_t v4 = MEMORY[0x1E4F3BAD8];
  if (a1 != 65281) {
    uint64_t v4 = MEMORY[0x1E4F3BB18];
  }
  if (a1 != 2054) {
    uint64_t v3 = v4;
  }
  if (a1 != 2053) {
    uint64_t v2 = v3;
  }
  uint64_t v5 = MEMORY[0x1E4F3BAF8];
  uint64_t v6 = MEMORY[0x1E4F3BA70];
  uint64_t v7 = MEMORY[0x1E4F3BB00];
  if (a1 != 2052) {
    uint64_t v7 = MEMORY[0x1E4F3BB18];
  }
  if (a1 != 1539) {
    uint64_t v6 = v7;
  }
  if (a1 != 1537) {
    uint64_t v5 = v6;
  }
  if (a1 <= 2052) {
    uint64_t v2 = v5;
  }
  uint64_t v8 = MEMORY[0x1E4F3BA70];
  uint64_t v9 = MEMORY[0x1E4F3BAF0];
  uint64_t v10 = MEMORY[0x1E4F3BA80];
  if (a1 != 1283) {
    uint64_t v10 = MEMORY[0x1E4F3BB18];
  }
  if (a1 != 1281) {
    uint64_t v9 = v10;
  }
  if (a1 != 1027) {
    uint64_t v8 = v9;
  }
  if (a1 == 1025) {
    uint64_t v1 = MEMORY[0x1E4F3BAE8];
  }
  if (a1 == 515) {
    uint64_t v1 = MEMORY[0x1E4F3BA68];
  }
  if (a1 == 513) {
    uint64_t v1 = MEMORY[0x1E4F3BAE0];
  }
  if (a1 > 1026) {
    uint64_t v1 = v8;
  }
  if (a1 > 1536) {
    uint64_t v1 = v2;
  }
  return *(void *)v1;
}

uint64_t boringssl_helper_zlib_compress_data(void *a1, uint64_t a2, uLong a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  id v8 = a4;
  uint64_t v9 = (unsigned int (**)(void, void, void))v8;
  uint64_t v10 = 0;
  if (v7 && a2 && a3 && v8)
  {
    memset(&v31, 0, sizeof(v31));
    if (deflateInit_(&v31, -1, "1.2.12", 112))
    {
      id WeakRetained = objc_loadWeakRetained(v7 + 2);
      if (WeakRetained)
      {
        id v12 = WeakRetained;
        int v13 = objc_loadWeakRetained(v7 + 2);
        char v14 = v13[475];

        if (v14)
        {
LABEL_29:
          uint64_t v10 = 0;
          goto LABEL_38;
        }
      }
      id v15 = objc_loadWeakRetained(v7 + 2);
      if (v15)
      {
        uint64_t v16 = objc_loadWeakRetained(v7 + 2);
        BOOL v17 = (v16[475] & 1) == 0;
      }
      else
      {
        BOOL v17 = 1;
      }

      uint64_t v10 = 0;
      if (v17 && g_boringssl_log)
      {
        unint64_t v28 = (id)g_boringssl_log;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          boringssl_helper_zlib_compress_data_cold_2(v7, v28);
        }

        goto LABEL_29;
      }
    }
    else
    {
      memset(__b, 170, sizeof(__b));
      while (2)
      {
        uInt v18 = a3 - LODWORD(v31.total_in);
        if (a3 - v31.total_in >= 0x400) {
          uInt v18 = 1024;
        }
        v31.avail_iuint64_t n = v18;
        v31.next_iuint64_t n = (Bytef *)(a2 + v31.total_in);
        uLong v19 = v31.total_in + 1024;
        int v20 = 4 * (v31.total_in + 1024 >= a3);
        do
        {
          v31.avail_out = 1024;
          v31.next_out = __b;
          if (deflate(&v31, v20) == -2)
          {
            id v21 = objc_loadWeakRetained(v7 + 2);
            if (!v21
              || (int v22 = v21,
                  unint64_t v23 = objc_loadWeakRetained(v7 + 2),
                  char v24 = v23[475],
                  v23,
                  v22,
                  (v24 & 1) == 0))
            {
              id v25 = objc_loadWeakRetained(v7 + 2);
              if (v25)
              {
                int v26 = objc_loadWeakRetained(v7 + 2);
                BOOL v27 = (v26[475] & 1) == 0;
              }
              else
              {
                BOOL v27 = 1;
              }

              uint64_t v10 = 0;
              if (!v27 || !g_boringssl_log) {
                goto LABEL_37;
              }
              unsigned int v29 = (id)g_boringssl_log;
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                boringssl_helper_zlib_compress_data_cold_1(v7, v29);
              }
            }
LABEL_36:
            uint64_t v10 = 0;
            goto LABEL_37;
          }
          if (!((unsigned int (**)(void, unsigned char *, uint64_t))v9)[2](v9, __b, 1024 - v31.avail_out)) {
            goto LABEL_36;
          }
        }
        while (!v31.avail_out);
        if (v19 < a3) {
          continue;
        }
        break;
      }
      uint64_t v10 = 1;
LABEL_37:
      deflateEnd(&v31);
    }
  }
LABEL_38:

  return v10;
}

uint64_t boringssl_helper_zlib_decompress_data(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  id v8 = a4;
  uint64_t v9 = (unsigned int (**)(void, void, void))v8;
  uint64_t v10 = 0;
  if (v7 && a2 && a3 && v8)
  {
    memset(&v22, 0, sizeof(v22));
    if (inflateInit_(&v22, "1.2.12", 112))
    {
      id WeakRetained = objc_loadWeakRetained(v7 + 2);
      if (WeakRetained)
      {
        id v12 = WeakRetained;
        int v13 = objc_loadWeakRetained(v7 + 2);
        char v14 = v13[475];

        if (v14)
        {
LABEL_28:
          uint64_t v10 = 0;
          goto LABEL_31;
        }
      }
      id v15 = objc_loadWeakRetained(v7 + 2);
      if (v15)
      {
        uint64_t v16 = objc_loadWeakRetained(v7 + 2);
        BOOL v17 = (v16[475] & 1) == 0;
      }
      else
      {
        BOOL v17 = 1;
      }

      uint64_t v10 = 0;
      if (v17 && g_boringssl_log)
      {
        int v20 = (id)g_boringssl_log;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          boringssl_helper_zlib_decompress_data_cold_1(v7, v20);
        }

        goto LABEL_28;
      }
    }
    else
    {
      memset(__b, 170, sizeof(__b));
      while (1)
      {
        uInt v18 = a3 - LODWORD(v22.total_in);
        if (a3 - v22.total_in >= 0x400) {
          uInt v18 = 1024;
        }
        v22.avail_iuint64_t n = v18;
        if (!v18) {
          break;
        }
        v22.avail_out = 1024;
        v22.next_iuint64_t n = (Bytef *)(a2 + v22.total_in);
        v22.next_out = __b;
        uint64_t v19 = inflate(&v22, 0);
        if (v19 == 2)
        {
          uint64_t v10 = 4294967293;
        }
        else
        {
          uint64_t v10 = v19;
          if ((v19 + 4) < 2) {
            goto LABEL_21;
          }
        }
        if (!((unsigned int (**)(void, unsigned char *, uint64_t))v9)[2](v9, __b, 1024 - v22.avail_out))
        {
LABEL_21:
          uint64_t v10 = 0;
          goto LABEL_30;
        }
        if (v10 == 1) {
          goto LABEL_30;
        }
      }
      uint64_t v10 = 1;
LABEL_30:
      inflateEnd(&v22);
    }
  }
LABEL_31:

  return v10;
}

__CFArray *boringssl_helper_copy_identity_certificate_chain_from_identity_array(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  unsigned int Count = CFArrayGetCount(a1);
  uint64_t v3 = Count;
  if (!Count) {
    return 0;
  }
  int v4 = Count;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v6 = (__CFArray *)g_boringssl_log;
    if (!g_boringssl_log) {
      return v6;
    }
    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_helper_copy_identity_certificate_chain_from_identity_array_cold_1();
    }
    return 0;
  }
  uint64_t v6 = Mutable;
  CFDataRef ValueAtIndex = (__SecIdentity *)CFArrayGetValueAtIndex(a1, 0);
  if (!ValueAtIndex)
  {
    uint64_t v6 = (__CFArray *)g_boringssl_log;
    if (!g_boringssl_log) {
      return v6;
    }
    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_helper_copy_identity_certificate_chain_from_identity_array_cold_2();
    }
    return 0;
  }
  id v8 = ValueAtIndex;
  CFTypeID v9 = CFGetTypeID(ValueAtIndex);
  if (v9 != SecIdentityGetTypeID())
  {
    uint64_t v6 = (__CFArray *)g_boringssl_log;
    if (!g_boringssl_log) {
      return v6;
    }
    if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_helper_copy_identity_certificate_chain_from_identity_array_cold_4();
    }
    return 0;
  }
  SecCertificateRef certificateRef = 0;
  if (SecIdentityCopyCertificate(v8, &certificateRef) || (SecCertificateRef v10 = certificateRef) == 0)
  {
    if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
      boringssl_helper_copy_identity_certificate_chain_from_identity_array_cold_3();
    }
    return 0;
  }
  CFArrayAppendValue(v6, certificateRef);
  CFRelease(v10);
  if (v4 >= 2)
  {
    if (v3 <= 2) {
      uint64_t v11 = 2;
    }
    else {
      uint64_t v11 = v3;
    }
    for (CFIndex i = 1; i != v11; ++i)
    {
      int v13 = CFArrayGetValueAtIndex(a1, i);
      CFArrayAppendValue(v6, v13);
    }
  }
  return v6;
}

CFArrayRef boringssl_helper_copy_leaf_private_key_from_identity_array(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    uint64_t result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      CFDataRef ValueAtIndex = (__SecIdentity *)CFArrayGetValueAtIndex(v1, 0);
      if (ValueAtIndex)
      {
        uint64_t v3 = ValueAtIndex;
        CFTypeID v4 = CFGetTypeID(ValueAtIndex);
        if (v4 == SecIdentityGetTypeID())
        {
          SecKeyRef privateKeyRef = 0;
          if (!SecIdentityCopyPrivateKey(v3, &privateKeyRef)) {
            return privateKeyRef;
          }
          if (g_boringssl_log)
          {
            if (os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR)) {
              boringssl_helper_copy_leaf_private_key_from_identity_array_cold_2();
            }
          }
        }
        else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
        {
          boringssl_helper_copy_leaf_private_key_from_identity_array_cold_3();
        }
      }
      else if (g_boringssl_log && os_log_type_enabled((os_log_t)g_boringssl_log, OS_LOG_TYPE_ERROR))
      {
        boringssl_helper_copy_leaf_private_key_from_identity_array_cold_1();
      }
      return 0;
    }
  }
  return result;
}

uint64_t boringssl_helper_create_certificate_buffer_chain_from_certificate_chain(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = &v4;
    uint64_t v6 = 0x2020000000;
    uint64_t v7 = (void *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v7 = OPENSSL_sk_new_null();
    sec_array_apply();
    uint64_t v2 = v5[3];
    _Block_object_dispose(&v4, 8);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1BA1499F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __boringssl_helper_create_certificate_buffer_chain_from_certificate_chain_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = sec_certificate_copy_ref(v4);
    if (v6)
    {
      uint64_t v7 = v6;
      CFDataRef v8 = SecCertificateCopyData(v6);
      if (v8)
      {
        CFDataRef v9 = v8;
        BytePtBIGNUM r = CFDataGetBytePtr(v8);
        CFIndex Length = CFDataGetLength(v9);
        uint64_t v12 = CRYPTO_BUFFER_new(BytePtr, Length, 0);
        if (v12) {
          OPENSSL_sk_push(*(unint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v12);
        }
        CFRelease(v9);
      }
      CFRelease(v7);
    }
  }

  return 1;
}

void boringssl_helper_dump_dispatch_data(void *a1, NSObject *a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (a2)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __boringssl_helper_dump_dispatch_data_block_invoke;
    applier[3] = &unk_1E61F3980;
    id v6 = v3;
    dispatch_data_apply(a2, applier);
  }
}

uint64_t __boringssl_helper_dump_dispatch_data_block_invoke(uint64_t a1, void *a2, long long *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v51 = a2;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    goto LABEL_10;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v9 + 16));
  if (!WeakRetained
    || (uint64_t v11 = WeakRetained,
        uint64_t v12 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16)),
        char v13 = v12[475],
        v12,
        v11,
        (v13 & 1) == 0))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if (!v14) {
      goto LABEL_10;
    }
    id v15 = objc_loadWeakRetained((id *)(v14 + 16));
    if (v15)
    {
      uint64_t v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
      BOOL v17 = (v16[475] & 1) == 0;
    }
    else
    {
      BOOL v17 = 1;
    }

    if (v17)
    {
LABEL_10:
      if (g_boringssl_log)
      {
        uInt v18 = (id)g_boringssl_log;
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
          goto LABEL_27;
        }
        uint64_t v19 = *(void *)(a1 + 32);
        if (v19)
        {
          int v20 = (char *)objc_loadWeakRetained((id *)(v19 + 16));
          uint64_t v5 = v20;
          uint64_t v21 = *(void *)(a1 + 32);
          if (v20)
          {
            BOOL v22 = v21 != 0;
            if (v21)
            {
              int v20 = (char *)objc_loadWeakRetained((id *)(v21 + 16));
              uint64_t v21 = *(void *)(a1 + 32);
            }
            else
            {
              int v20 = 0;
            }
            id v25 = v20 + 391;
          }
          else
          {
            BOOL v22 = 0;
            id v25 = &unk_1BA179713;
          }
          unsigned int v56 = v20;
          if (v21)
          {
            id v23 = objc_loadWeakRetained((id *)(v21 + 16));
            char v24 = 0;
          }
          else
          {
            id v23 = 0;
            char v24 = 1;
          }
        }
        else
        {
          BOOL v22 = 0;
          id v23 = 0;
          char v24 = 1;
          id v25 = &unk_1BA179713;
        }
        *(_DWORD *)buf = 136447490;
        int v59 = "boringssl_helper_dump_dispatch_data_block_invoke";
        __int16 v60 = 1024;
        int v61 = 949;
        __int16 v62 = 2082;
        unsigned int v63 = v25;
        __int16 v64 = 2048;
        id v65 = v23;
        __int16 v66 = 2048;
        id v67 = v51;
        __int16 v68 = 2048;
        unsigned int v69 = a3;
        _os_log_impl(&dword_1BA0DE000, v18, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] data region %p, offset %zu", buf, 0x3Au);
        if (v24)
        {
          if (!v22) {
            goto LABEL_25;
          }
        }
        else
        {

          if (!v22)
          {
LABEL_25:
            if (v19) {
LABEL_26:
            }

LABEL_27:
            goto LABEL_28;
          }
        }

        if (!v19) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
    }
  }
LABEL_28:
  int v26 = (id *)*(id *)(a1 + 32);
  memset(v72, 170, 17);
  if (a4 && a5)
  {
    BOOL v27 = 0;
    *(void *)&long long v28 = 0x2020202020202020;
    *((void *)&v28 + 1) = 0x2020202020202020;
    *(_OWORD *)&v74[15] = v28;
    long long v73 = v28;
    *(_OWORD *)int v74 = v28;
    char v75 = 0;
    do
    {
      if (a5 - (unint64_t)v27 >= 0x10) {
        uint64_t v29 = 16;
      }
      else {
        uint64_t v29 = a5 - (void)v27;
      }
      if (!v29) {
        goto LABEL_43;
      }
      uint64_t v30 = 3 * (v29 - 1);
      z_stream v31 = (char *)&v73 + 1;
      unsigned int v32 = &v27[a4];
      uint64_t v33 = (char *)v72;
      uint64_t v34 = v29;
      do
      {
        unsigned int v36 = *v32++;
        unint64_t v35 = v36;
        if (v36 - 32 >= 0x5F) {
          char v37 = 46;
        }
        else {
          char v37 = v35;
        }
        char v38 = boringssl_helper_dump_buffer_hexChars[v35 >> 4];
        *uint64_t v33 = v37;
        *(v31 - 1) = v38;
        *z_stream v31 = boringssl_helper_dump_buffer_hexChars[v35 & 0xF];
        if (!v30) {
          *((unsigned char *)v72 + (v29 - 1) + 1) = 0;
        }
        v30 -= 3;
        v31 += 3;
        ++v33;
        --v34;
      }
      while (v34);
      if (v29 <= 0xF) {
LABEL_43:
      }
        memset(&v74[3 * v29 - 16], 32, (3 * (16 - v29) - 1));
      if (!v26) {
        goto LABEL_53;
      }
      id v39 = objc_loadWeakRetained(v26 + 2);
      if (!v39
        || (int v40 = v39,
            int v41 = objc_loadWeakRetained(v26 + 2),
            char v42 = v41[475],
            v41,
            v40,
            (v42 & 1) == 0))
      {
        id v43 = objc_loadWeakRetained(v26 + 2);
        if (v43)
        {
          int v44 = objc_loadWeakRetained(v26 + 2);
          BOOL v45 = (v44[475] & 1) == 0;
        }
        else
        {
          BOOL v45 = 1;
        }

        if (v45)
        {
LABEL_53:
          if (g_boringssl_log)
          {
            unsigned int v46 = (id)g_boringssl_log;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
            {
              if (v26)
              {
                id v47 = objc_loadWeakRetained(v26 + 2);
                BOOL v55 = v47 != 0;
                unint64_t v54 = v47;
                if (v47)
                {
                  int v52 = (char *)objc_loadWeakRetained(v26 + 2);
                  unint64_t v48 = v52 + 391;
                }
                else
                {
                  unint64_t v48 = &unk_1BA179713;
                }
                id v53 = objc_loadWeakRetained(v26 + 2);
                id v49 = v53;
              }
              else
              {
                BOOL v55 = 0;
                id v49 = 0;
                unint64_t v48 = &unk_1BA179713;
              }
              *(_DWORD *)buf = 136447746;
              int v59 = "boringssl_helper_dump_buffer";
              __int16 v60 = 1024;
              int v61 = 938;
              __int16 v62 = 2082;
              unsigned int v63 = v48;
              __int16 v64 = 2048;
              id v65 = v49;
              __int16 v66 = 2048;
              id v67 = v27;
              __int16 v68 = 2080;
              unsigned int v69 = &v73;
              __int16 v70 = 2080;
              unint64_t v71 = v72;
              _os_log_impl(&dword_1BA0DE000, v46, OS_LOG_TYPE_INFO, "%{public}s(%d) %{public}s[%p] %4lu   %s   %s", buf, 0x44u);
              if (v26) {

              }
              if (v55) {
              if (v26)
              }
            }
          }
        }
      }
      v27 += v29;
    }
    while ((unint64_t)v27 < a5);
  }

  return 1;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

uint64_t __boringssl_helper_xpc_array_union_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __boringssl_helper_xpc_array_union_block_invoke_3;
  _OWORD v8[3] = &unk_1E61F39D0;
  id v6 = v4;
  id v9 = v6;
  SecCertificateRef v10 = &v11;
  xpc_array_apply(v5, v8);
  if (!*((unsigned char *)v12 + 24)) {
    xpc_array_append_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v6);
  }

  _Block_object_dispose(&v11, 8);
  return 1;
}

void sub_1BA14A224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __boringssl_helper_xpc_array_union_block_invoke_3(uint64_t a1, int a2, xpc_object_t object2)
{
  BOOL v4 = xpc_equal(*(xpc_object_t *)(a1 + 32), object2);
  if (v4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return !v4;
}

const char *boringssl_helper_get_handshake_state_description(int a1)
{
  id v1 = "unknown state";
  if (a1 == 3) {
    id v1 = "connection established";
  }
  if (a1 == 12288) {
    return "not completed";
  }
  else {
    return v1;
  }
}

const char *boringssl_helper_get_session_state_description(int a1)
{
  if ((a1 - 1) > 4) {
    return "idle";
  }
  else {
    return off_1E61F3A88[a1 - 1];
  }
}

void OUTLINED_FUNCTION_8_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x2Cu);
}

int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
{
  int v10 = bn_minimal_width((uint64_t)m);
  int v11 = bn_minimal_width((uint64_t)d);
  if (v10 >= 1 && !m->d[v10 - 1] || v11 >= 1 && !d->d[v11 - 1])
  {
    int v12 = 111;
    int v13 = 212;
    goto LABEL_8;
  }
  if (!BN_is_zero((uint64_t)d))
  {
    BN_CTX_start(ctx);
    unint64_t v54 = BN_CTX_get(ctx);
    id v53 = BN_CTX_get(ctx);
    char v14 = BN_CTX_get(ctx);
    if (!dv) {
      dv = BN_CTX_get(ctx);
    }
    BIGNUM r = v14;
    if (!v14) {
      goto LABEL_47;
    }
    if (!dv) {
      goto LABEL_47;
    }
    int v15 = BN_num_bits(d) & 0x3F;
    if (!BN_lshift(r, d, 64 - v15)) {
      goto LABEL_47;
    }
    bn_set_minimal_width((uint64_t)r);
    r->int neg = 0;
    int n = 128 - v15;
    if (!BN_lshift(v53, m, 128 - v15)) {
      goto LABEL_47;
    }
    bn_set_minimal_width((uint64_t)v53);
    v53->int neg = 0;
    uint64_t top = v53->top;
    uint64_t v17 = r->top;
    if ((int)top <= (int)v17 + 1)
    {
      if (!bn_wexpand(&v53->d, v17 + 2)) {
        goto LABEL_47;
      }
      uInt v18 = v53;
      uint64_t v22 = v53->top;
      uint64_t v21 = r;
      int v23 = r->top;
      int v20 = v23 + 2;
      id v49 = v53->d;
      if ((int)v22 < v23 + 2) {
        bzero(&v53->d[v22], 8 * (v23 - v22 + 1) + 8);
      }
    }
    else
    {
      if (!bn_wexpand(&v53->d, top + 1)) {
        goto LABEL_47;
      }
      uInt v18 = v53;
      uint64_t v19 = v53->top;
      id v49 = v53->d;
      v53->d[v19] = 0;
      int v20 = v19 + 1;
      uint64_t v21 = r;
    }
    v18->uint64_t top = v20;
    int v24 = v21->top;
    int v25 = v20 - v24;
    int v26 = v21->d;
    *(void *)unint64_t num = v24;
    if (v24 == 1) {
      unint64_t v27 = 0;
    }
    else {
      unint64_t v27 = v26[v24 - 2];
    }
    unint64_t v51 = v26[v24 - 1];
    int neg = m->neg;
    dv->int neg = d->neg ^ neg;
    if (bn_wexpand(&dv->d, v25 + 1))
    {
      dv->uint64_t top = v25 - 1;
      uint64_t v29 = dv->d;
      if (bn_wexpand(&v54->d, *(void *)num + 1))
      {
        uint64_t v30 = &v29[v25 - 1];
        unsigned int v46 = rem;
        int v45 = neg;
        if (dv->top) {
          --v30;
        }
        else {
          dv->int neg = 0;
        }
        unint64_t v31 = v51;
        if (v25 >= 2)
        {
          int v32 = 0;
          uint64_t v33 = &v49[v25];
          uint64_t v34 = &v49[v20 - 1];
          int v50 = v25 - 1;
          unint64_t v48 = v27;
          do
          {
            if (*v34 == v31)
            {
              unint64_t v35 = -1;
            }
            else
            {
              uint64_t v38 = *(v34 - 1);
              unint64_t v35 = __udivti3();
              unint64_t v39 = v38 - v31 * v35;
              unint64_t v40 = (v35 * (unsigned __int128)v27) >> 64;
              for (unint64_t i = v35 * v27; __PAIR128__(v39, *(v34 - 2)) < __PAIR128__(v40, i); unint64_t i = v43)
              {
                --v35;
                BOOL v42 = __CFADD__(v39, v31);
                v39 += v31;
                if (v42) {
                  break;
                }
                unsigned long long v43 = __PAIR128__(v40, i) - v27;
                unint64_t v40 = *((void *)&v43 + 1);
              }
            }
            unint64_t v36 = bn_mul_words(v54->d, r->d, num[0], v35);
            char v37 = v54->d;
            v54->d[*(void *)num] = v36;
            --v33;
            if (bn_sub_words(v33, v33, v37, num[0] + 1))
            {
              --v35;
              if (bn_add_words(v33, v33, r->d, num[0])) {
                ++*v34;
              }
            }
            unint64_t v27 = v48;
            unint64_t v31 = v51;
            *v30-- = v35;
            ++v32;
            --v34;
          }
          while (v32 != v50);
        }
        bn_set_minimal_width((uint64_t)v53);
        if (!v46) {
          goto LABEL_46;
        }
        if (BN_rshift(v46, v53, n))
        {
          if (!BN_is_zero((uint64_t)v46)) {
            v46->int neg = v45;
          }
LABEL_46:
          bn_set_minimal_width((uint64_t)dv);
          BN_CTX_end(ctx);
          return 1;
        }
      }
    }
LABEL_47:
    BN_CTX_end(ctx);
    return 0;
  }
  int v12 = 105;
  int v13 = 217;
LABEL_8:
  ERR_put_error(3, 0, v12, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/fipsmodule/bn/div.c", v13);
  return 0;
}

int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
{
  int result = BN_div(0, r, m, d, ctx);
  if (result)
  {
    if (r->neg)
    {
      if (d->neg) {
        uint64_t v7 = BN_sub;
      }
      else {
        uint64_t v7 = BN_add;
      }
      return ((uint64_t (*)(BIGNUM *, BIGNUM *, const BIGNUM *))v7)(r, r, d);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t bn_mod_add_consttime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  int v10 = bn_resized_from_ctx(a2, *(int *)(a4 + 8), ctx);
  int v11 = bn_resized_from_ctx(a3, *(int *)(a4 + 8), ctx);
  int v12 = bn_scratch_space_from_ctx(*(int *)(a4 + 8), ctx);
  if (v10) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  BOOL v14 = v13 || v12 == 0;
  if (v14 || (p_int d = &v12->d, !bn_wexpand((void **)a1, *(int *)(a4 + 8))))
  {
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v16 = *(unint64_t **)a1;
    int d = v10->d;
    uInt v18 = v11->d;
    uint64_t v19 = *(const unint64_t **)a4;
    int v20 = *p_d;
    uint64_t v21 = *(int *)(a4 + 8);
    unint64_t v22 = bn_add_words(*(unint64_t **)a1, d, v18, *(_DWORD *)(a4 + 8));
    bn_reduce_once_in_place(v16, v22, v19, v20, v21);
    *(_DWORD *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t v23 = 1;
  }
  BN_CTX_end(ctx);
  return v23;
}

const BIGNUM *bn_resized_from_ctx(uint64_t a1, unint64_t a2, BN_CTX *ctx)
{
  BOOL v4 = (const BIGNUM *)a1;
  if (*(int *)(a1 + 8) >= a2)
  {
    if (!bn_fits_in_words(a1, a2)) {
      bn_resized_from_ctx_cold_1();
    }
  }
  else
  {
    uint64_t v5 = bn_scratch_space_from_ctx(a2, ctx);
    if (v5 && (uint64_t v6 = (uint64_t)v5, BN_copy(v5, v4)))
    {
      if (bn_resize_words(v6, a2)) {
        return (const BIGNUM *)v6;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

BIGNUM *bn_scratch_space_from_ctx(unint64_t a1, BN_CTX *ctx)
{
  id v3 = BN_CTX_get(ctx);
  BOOL v4 = v3;
  if (v3)
  {
    if (bn_wexpand(&v3->d, a1))
    {
      v4->int neg = 0;
      v4->uint64_t top = a1;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t bn_mod_sub_consttime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  int v10 = bn_resized_from_ctx(a2, *(int *)(a4 + 8), ctx);
  int v11 = bn_resized_from_ctx(a3, *(int *)(a4 + 8), ctx);
  int v12 = bn_scratch_space_from_ctx(*(int *)(a4 + 8), ctx);
  if (v10) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  BOOL v14 = v13 || v12 == 0;
  if (v14 || (p_int d = &v12->d, !bn_wexpand((void **)a1, *(int *)(a4 + 8))))
  {
    uint64_t v16 = 0;
  }
  else
  {
    bn_mod_sub_words(*(unint64_t **)a1, v10->d, v11->d, *(const unint64_t **)a4, *p_d, *(int *)(a4 + 8));
    *(_DWORD *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t v16 = 1;
  }
  BN_CTX_end(ctx);
  return v16;
}

int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  int v10 = BN_CTX_get(ctx);
  if (!v10) {
    goto LABEL_6;
  }
  int v11 = v10;
  if (a == b)
  {
    if (BN_sqr(v10, a, ctx)) {
      goto LABEL_4;
    }
LABEL_6:
    BOOL v12 = 0;
    goto LABEL_7;
  }
  if (!BN_mul(v10, a, b, ctx)) {
    goto LABEL_6;
  }
LABEL_4:
  BOOL v12 = BN_nnmod(r, v11, m, ctx) != 0;
LABEL_7:
  BN_CTX_end(ctx);
  return v12;
}

int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
{
  int result = BN_sqr(r, a, ctx);
  if (result)
  {
    return BN_div(0, r, r, m, ctx);
  }
  return result;
}

BOOL bn_mod_lshift_consttime(BIGNUM *a1, const BIGNUM *a2, int a3, uint64_t a4, BN_CTX *a5)
{
  if (!BN_copy(a1, a2) || !bn_resize_words((uint64_t)a1, *(int *)(a4 + 8))) {
    return 0;
  }
  BN_CTX_start(a5);
  id v9 = bn_scratch_space_from_ctx(*(int *)(a4 + 8), a5);
  BOOL v10 = v9 != 0;
  if (v9)
  {
    if (a3 >= 1)
    {
      p_int d = &v9->d;
      do
      {
        int d = a1->d;
        BOOL v13 = *(const unint64_t **)a4;
        BOOL v14 = *p_d;
        uint64_t v15 = *(int *)(a4 + 8);
        unint64_t v16 = bn_add_words(a1->d, a1->d, a1->d, *(_DWORD *)(a4 + 8));
        bn_reduce_once_in_place(d, v16, v13, v14, v15);
        --a3;
      }
      while (a3);
    }
    a1->int neg = 0;
  }
  BN_CTX_end(a5);
  return v10;
}

uint64_t bn_mod_lshift1_consttime(uint64_t a1, uint64_t a2, uint64_t a3, BN_CTX *ctx)
{
  return bn_mod_add_consttime(a1, a2, a2, a3, ctx);
}

uint64_t EVP_PKEY_is_opaque(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 && (uint64_t v2 = *(uint64_t (**)(void))(v1 + 112)) != 0) {
    return v2();
  }
  else {
    return 0;
  }
}

int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
{
  if (a->save_type != b->save_type) {
    return -1;
  }
  int ptr = a->pkey.ptr;
  if (!ptr) {
    return -2;
  }
  uint64_t v5 = (uint64_t (*)(const EVP_PKEY *, const EVP_PKEY *))*((void *)ptr + 19);
  if (v5)
  {
    int result = v5(a, b);
    if (result < 1) {
      return result;
    }
    int ptr = a->pkey.ptr;
  }
  uint64_t v7 = (uint64_t (*)(const EVP_PKEY *, const EVP_PKEY *))*((void *)ptr + 5);
  if (!v7) {
    return -2;
  }

  return v7(a, b);
}

uint64_t EVP_PKEY_set_type(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 8))
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = *(void (**)(uint64_t))(v4 + 160);
        if (v5)
        {
          v5(a1);
          *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
          *(_DWORD *)(a1 + 4) = 0;
        }
      }
    }
  }
  if (a2 <= 407)
  {
    if (a2 == 6)
    {
      uint64_t v6 = &rsa_asn1_meth;
      if (!a1) {
        return 1;
      }
LABEL_21:
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7)
      {
        CFDataRef v8 = *(void (**)(uint64_t))(v7 + 160);
        if (v8)
        {
          v8(a1);
          *(void *)(a1 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
        }
      }
      *(void *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 4) = *v6;
      return 1;
    }
    if (a2 == 116)
    {
      uint64_t v6 = &dsa_asn1_meth;
      if (!a1) {
        return 1;
      }
      goto LABEL_21;
    }
  }
  else
  {
    switch(a2)
    {
      case 949:
        uint64_t v6 = &ed25519_asn1_meth;
        if (!a1) {
          return 1;
        }
        goto LABEL_21;
      case 948:
        uint64_t v6 = &x25519_asn1_meth;
        if (!a1) {
          return 1;
        }
        goto LABEL_21;
      case 408:
        uint64_t v6 = &ec_asn1_meth;
        if (!a1) {
          return 1;
        }
        goto LABEL_21;
    }
  }
  ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/evp.c", 265);
  ERR_add_error_dataf("algorithm %d", v10, v11, v12, v13, v14, v15, v16, a2);
  return 0;
}

uint64_t *ec_GFp_nistp_recode_scalar_bits(uint64_t *result, void *a2, unint64_t a3)
{
  unint64_t v3 = ((a3 >> 5) - 1) & a3 | (63 - a3) & -(uint64_t)(a3 >> 5);
  *int result = -(uint64_t)(a3 >> 5) & 1;
  *a2 = (v3 & 1) + (v3 >> 1);
  return result;
}

uint64_t pkey_x25519_copy()
{
  return 1;
}

uint64_t pkey_x25519_keygen(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = OPENSSL_malloc(0x41uLL);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  evp_pkey_set_method(a2, &x25519_asn1_meth);
  X25519_keypair(v4, v4 + 32);
  uint64_t v5 = 1;
  v4[64] = 1;
  OPENSSL_free(*(void **)(a2 + 8));
  *(void *)(a2 + bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = v4;
  return v5;
}

uint64_t pkey_x25519_derive(uint64_t a1, char *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 24)) == 0)
  {
    int v9 = 117;
    int v10 = 46;
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v7 = *(int64x2_t **)(v4 + 8);
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    int v9 = 117;
    int v10 = 53;
LABEL_10:
    ERR_put_error(6, 0, v9, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_x25519.c", v10);
    return 0;
  }
  if (!*(unsigned char *)(v6 + 64))
  {
    int v9 = 130;
    int v10 = 58;
    goto LABEL_10;
  }
  if (a2)
  {
    if (*a3 <= 0x1FuLL)
    {
      int v9 = 100;
      int v10 = 64;
      goto LABEL_10;
    }
    if (!X25519(a2, (long long *)(v6 + 32), v7))
    {
      int v9 = 134;
      int v10 = 68;
      goto LABEL_10;
    }
  }
  *a3 = 32;
  return 1;
}

uint64_t pkey_x25519_ctrl(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 1;
  }
  ERR_put_error(6, 0, 101, "/Library/Caches/com.apple.xbs/Sources/boringssl/crypto/evp/p_x25519.c", 85);
  return 0;
}

double ec_GFp_mont_mul()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  __b[864] = *MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x1B00uLL);
  ec_GFp_simple_point_set_to_infinity(v7, (uint64_t)__b);
  ec_GFp_simple_point_copy((uint64_t)&__b[27], v4);
  BOOL v8 = &__b[54];
  for (unint64_t i = 2; i != 32; ++i)
  {
    if (i) {
      ec_GFp_mont_add(v7, (uint64_t)v8, (uint64_t)&__b[27], (uint64_t)(v8 - 27));
    }
    else {
      ec_GFp_mont_dbl(v7, v8, &__b[27 * (i >> 1)]);
    }
    v8 += 27;
  }
  unsigned int v10 = EC_GROUP_order_bits(v7);
  if (!v10) {
    return ec_GFp_simple_point_set_to_infinity(v7, (uint64_t)v6);
  }
  unsigned int v12 = v10;
  unsigned int v13 = v10 - 1;
  int v14 = 1;
  unsigned int v15 = v10;
  do
  {
    unsigned int v16 = v13;
    if (!v14) {
      ec_GFp_mont_dbl(v7, v6, v6);
    }
    if (-858993459 * v16 <= 0x33333333)
    {
      unint64_t v17 = *(int *)(v7 + 264);
      is_bit_set_wordunsigned int s = bn_is_bit_set_words(v2, v17, v15 + 3);
      char v19 = (8 * bn_is_bit_set_words(v2, v17, v15 + 2)) | (16 * is_bit_set_words);
      char v20 = v19 | (4 * bn_is_bit_set_words(v2, v17, v15 + 1));
      char v21 = v20 | (2 * bn_is_bit_set_words(v2, v17, v15));
      char v22 = bn_is_bit_set_words(v2, v17, v16);
      uint64_t v23 = 0;
      uint64_t v27 = 0;
      uint64_t v24 = (v21 | v22);
      int v25 = __b;
      memset(v26, 0, sizeof(v26));
      do
      {
        ec_point_select(v7, (uint64_t *)v26, ((v23++ ^ v24) - 1) >> 63, v25, (uint64_t *)v26);
        v25 += 27;
      }
      while (v23 != 32);
      if (v14) {
        *(void *)&double result = ec_GFp_simple_point_copy((uint64_t)v6, (uint64_t)v26).n128_u64[0];
      }
      else {
        ec_GFp_mont_add(v7, (uint64_t)v6, (uint64_t)v6, (uint64_t)v26);
      }
      int v14 = 0;
    }
    unsigned int v13 = v16 - 1;
    unsigned int v15 = v16;
  }
  while (v16 - 1 < v12);
  if (v14) {
    return ec_GFp_simple_point_set_to_infinity(v7, (uint64_t)v6);
  }
  return result;
}

double ec_GFp_mont_mul_base()
{
  return ec_GFp_mont_mul();
}

double ec_GFp_mont_mul_batch()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v19 = v2;
  uint64_t v20 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  unsigned int v12 = v11;
  uint64_t v13 = v0;
  __b[1377] = *MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x2B08uLL);
  ec_GFp_mont_batch_precomp(v13, (uint64_t)__b, v10);
  ec_GFp_mont_batch_precomp(v13, (uint64_t)&__b[459], v6);
  if (v4) {
    ec_GFp_mont_batch_precomp(v13, (uint64_t)&__b[918], v4);
  }
  unsigned int v14 = EC_GROUP_order_bits(v13);
  char v16 = 0;
  unsigned int v17 = v14;
  do
  {
    while (1)
    {
      if (v16) {
        ec_GFp_mont_dbl(v13, v12, v12);
      }
      if (5 * (v17 / 5) != v17) {
        break;
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v21[11] = v18;
      v21[12] = v18;
      v21[9] = v18;
      v21[10] = v18;
      _OWORD v21[7] = v18;
      v21[8] = v18;
      void v21[5] = v18;
      void v21[6] = v18;
      _OWORD v21[3] = v18;
      v21[4] = v18;
      v21[1] = v18;
      _OWORD v21[2] = v18;
      v21[0] = v18;
      ec_GFp_mont_batch_get_window(v13, (uint64_t)v21, __b, v8, v17);
      if (v16) {
        ec_GFp_mont_add(v13, (uint64_t)v12, (uint64_t)v12, (uint64_t)v21);
      }
      else {
        ec_GFp_simple_point_copy((uint64_t)v12, (uint64_t)v21);
      }
      ec_GFp_mont_batch_get_window(v13, (uint64_t)v21, &__b[459], v20, v17);
      ec_GFp_mont_add(v13, (uint64_t)v12, (uint64_t)v12, (uint64_t)v21);
      if (v4)
      {
        ec_GFp_mont_batch_get_window(v13, (uint64_t)v21, &__b[918], v19, v17);
        ec_GFp_mont_add(v13, (uint64_t)v12, (uint64_t)v12, (uint64_t)v21);
      }
      --v17;
      char v16 = 1;
      if (v17 > v14) {
        return result;
      }
    }
    --v17;
  }
  while (v17 <= v14);
  if ((v16 & 1) == 0) {
    return ec_GFp_simple_point_set_to_infinity(v13, (uint64_t)v12);
  }
  return result;
}

uint64_t *ec_GFp_mont_batch_precomp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ec_GFp_simple_point_set_to_infinity(a1, a2);
  ec_GFp_simple_point_copy(a2 + 216, a3);
  uint64_t v6 = (unint64_t *)(a2 + 432);
  for (unint64_t i = 2; i != 17; ++i)
  {
    if (i) {
      double result = ec_GFp_mont_add(a1, (uint64_t)v6, a2 + 216, (uint64_t)(v6 - 27));
    }
    else {
      double result = ec_GFp_mont_dbl(a1, v6, (unint64_t *)(a2 + 216 * (i >> 1)));
    }
    v6 += 27;
  }
  return result;
}

uint64_t *ec_GFp_mont_batch_get_window(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  unint64_t v10 = *(int *)(a1 + 264);
  is_bit_set_wordunsigned int s = bn_is_bit_set_words(a4, v10, a5 + 4);
  int v12 = (16 * bn_is_bit_set_words(a4, v10, a5 + 3)) | (32 * is_bit_set_words);
  int v13 = v12 | (8 * bn_is_bit_set_words(a4, v10, a5 + 2));
  LOBYTE(v13) = v13 | (4 * bn_is_bit_set_words(a4, v10, a5 + 1));
  unsigned __int8 v14 = v13 & 0xFC | (2 * bn_is_bit_set_words(a4, v10, a5));
  if (a5) {
    unsigned __int8 v14 = bn_is_bit_set_words(a4, v10, a5 - 1) | v14 & 0xFE;
  }
  uint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  ec_GFp_nistp_recode_scalar_bits(&v22, &v21, v14);
  uint64_t v15 = 0;
  *(void *)(a2 + 20bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 16std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 8std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  do
  {
    ec_point_select(a1, (uint64_t *)a2, (uint64_t)(((v21 ^ v15++) - 1) & ~v21) >> 63, a3, (uint64_t *)a2);
    a3 += 27;
  }
  while (v15 != 17);
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v19[2] = v16;
  _OWORD v19[3] = v16;
  v19[0] = v16;
  v19[1] = v16;
  unsigned int v17 = (unint64_t *)(a2 + 72);
  ec_felem_neg(a1, (unint64_t *)v19, v17);
  return ec_felem_select(a1, (uint64_t *)v17, -v22, (uint64_t *)v19, (uint64_t *)v17);
}

uint64_t ec_GFp_mont_init_precomp()
{
  uint64_t v0 = (const EC_GROUP *)MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)v0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = EC_GROUP_get_degree(v0) + 4;
  memset(v23, 170, sizeof(v23));
  long long v5 = *(_OWORD *)(v2 + 176);
  v21[10] = *(_OWORD *)(v2 + 160);
  v21[11] = v5;
  v21[12] = *(_OWORD *)(v2 + 192);
  uint64_t v22 = *(void *)(v2 + 208);
  long long v6 = *(_OWORD *)(v2 + 112);
  void v21[6] = *(_OWORD *)(v2 + 96);
  _OWORD v21[7] = v6;
  long long v7 = *(_OWORD *)(v2 + 144);
  v21[8] = *(_OWORD *)(v2 + 128);
  v21[9] = v7;
  long long v8 = *(_OWORD *)(v2 + 48);
  _OWORD v21[2] = *(_OWORD *)(v2 + 32);
  _OWORD v21[3] = v8;
  long long v9 = *(_OWORD *)(v2 + 80);
  v21[4] = *(_OWORD *)(v2 + 64);
  void v21[5] = v9;
  if (v4 / 5 <= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = v4 / 5;
  }
  long long v11 = *(_OWORD *)(v2 + 16);
  unsigned int v12 = v10 - 1;
  int v13 = 1;
  v21[0] = *(_OWORD *)v2;
  v21[1] = v11;
  do
  {
    unsigned int v14 = 1 << v13;
    ec_GFp_mont_dbl(v3, (unint64_t *)&v21[-13] + 27 * v14 - 1, (unint64_t *)&v21[-13] + 27 * (v14 >> 1) - 1);
    unsigned int v15 = v12;
    if (v4 >= 0xA)
    {
      do
      {
        ec_GFp_mont_dbl(v3, (unint64_t *)&v21[-13] + 27 * v14 - 1, (unint64_t *)&v21[-13] + 27 * v14 - 1);
        --v15;
      }
      while (v15);
    }
    uint64_t v16 = 0;
    if (v14 <= 2) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = 1 << v13;
    }
    long long v18 = (char *)v21 + 216 * v14;
    uint64_t v19 = 216 * v17 - 216;
    do
    {
      ec_GFp_mont_add(v3, (uint64_t)&v18[v16], (uint64_t)v21 + 216 * ((1 << v13) - 1), (uint64_t)v21 + v16);
      v16 += 216;
    }
    while (v19 != v16);
    ++v13;
  }
  while (v13 != 5);
  return ec_jacobian_to_affine_batch(v3);
}

void ec_GFp_mont_mul_precomp(const EC_GROUP *a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  unsigned int v16 = EC_GROUP_get_degree(a1) + 4;
  if (v16 >= 5)
  {
    char v17 = 0;
    unsigned int v18 = v16 / 5;
    unsigned int v19 = v16 / 5 - 1;
    while ((v17 & 1) == 0)
    {
      unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v33 = v21;
      long long v34 = v21;
      long long v31 = v21;
      long long v32 = v21;
      long long v29 = v21;
      long long v30 = v21;
      long long v27 = v21;
      long long v28 = v21;
      long long v25 = v21;
      long long v26 = v21;
      long long v23 = v21;
      long long v24 = v21;
      long long v22 = v21;
      ec_GFp_mont_get_comb_window((uint64_t)a1, (uint64_t)&v22, a3, a4, v19);
      ec_GFp_simple_point_copy((uint64_t)a2, (uint64_t)&v22);
      if (a5) {
        goto LABEL_10;
      }
LABEL_11:
      if (a7)
      {
        ec_GFp_mont_get_comb_window((uint64_t)a1, (uint64_t)&v22, a7, a8, v19);
        ec_GFp_mont_add((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v22);
      }
      --v19;
      char v17 = 1;
      if (v19 >= v18) {
        return;
      }
    }
    ec_GFp_mont_dbl((uint64_t)a1, a2, a2);
    unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v33 = v20;
    long long v34 = v20;
    long long v31 = v20;
    long long v32 = v20;
    long long v29 = v20;
    long long v30 = v20;
    long long v27 = v20;
    long long v28 = v20;
    long long v25 = v20;
    long long v26 = v20;
    long long v23 = v20;
    long long v24 = v20;
    long long v22 = v20;
    ec_GFp_mont_get_comb_window((uint64_t)a1, (uint64_t)&v22, a3, a4, v19);
    ec_GFp_mont_add((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v22);
    if (!a5) {
      goto LABEL_11;
    }
LABEL_10:
    ec_GFp_mont_get_comb_window((uint64_t)a1, (uint64_t)&v22, a5, a6, v19);
    ec_GFp_mont_add((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v22);
    goto LABEL_11;
  }

  ec_GFp_simple_point_set_to_infinity((uint64_t)a1, (uint64_t)a2);
}

uint64_t *ec_GFp_mont_get_comb_window(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  LODWORD(v13) = a5;
  unint64_t v9 = *(int *)(a1 + 264);
  uint64_t v10 = 0;
  LODWORD(v11) = 0;
  unint64_t v12 = (EC_GROUP_get_degree((const EC_GROUP *)a1) + 4) / 5uLL;
  unint64_t v13 = v13;
  do
  {
    uint64_t v11 = (bn_is_bit_set_words(a4, v9, v13) << v10++) | v11;
    v13 += v12;
  }
  while (v10 != 5);
  *(void *)(a2 + 20bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 16std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 8std::unique_ptr<crypto_buffer_st,bssl::internal::Deleter>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 4bssl::Array<std::unique_ptr<ssl_credential_st,bssl::internal::Deleter>>::~Array((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + bssl::Array<unsigned short>::~Array((uint64_t)this + 32) = 0u;
  uint64_t v14 = -31;
  *(_OWORD *)a2 = 0u;
  do
  {
    ec_felem_select(a1, (uint64_t *)a2, ((v11 ^ (v14 + 32)) - 1) >> 63, a3, (uint64_t *)a2);
    ec_felem_select(a1, (uint64_t *)(a2 + 72), ((v11 ^ (v14 + 32)) - 1) >> 63, a3 + 9, (uint64_t *)(a2 + 72));
    a3 += 18;
  }
  while (!__CFADD__(v14++, 1));
  unsigned int v16 = (uint64_t *)ec_felem_one(a1);

  return ec_felem_select(a1, (uint64_t *)(a2 + 144), (v11 - 1) >> 63, (uint64_t *)(a2 + 144), v16);
}

CFArrayRef boringssl_identity_create_from_identity_array(const __CFArray *a1)
{
  CFArrayRef v1 = a1;
  if (a1)
  {
    uint64_t v2 = objc_alloc_init(boringssl_concrete_boringssl_identity);
    if (v2 && (CFArrayRef v3 = boringssl_helper_copy_leaf_private_key_from_identity_array(v1), (v2->private_key = v3) != 0))
    {
      unsigned int v4 = boringssl_helper_copy_identity_certificate_chain_from_identity_array(v1);
      if (v4)
      {
        long long v5 = v4;
        certificate_sec_array_from_CFArray = (OS_sec_array *)boringssl_helper_create_certificate_sec_array_from_CFArray(v4);
        certificateunsigned int s = v2->certificates;
        v2->certificateunsigned int s = certificate_sec_array_from_CFArray;

        CFRelease(v5);
      }
      if (v2->certificates)
      {
        CFArrayRef v1 = v2;
      }
      else
      {
        private_key = v2->private_key;
        if (private_key) {
          CFRelease(private_key);
        }
        CFArrayRef v1 = 0;
        v2->private_key = 0;
      }
    }
    else
    {
      CFArrayRef v1 = 0;
    }
  }
  return v1;
}

CFArrayRef boringssl_identity_create_from_identity(void *a1)
{
  uint64_t v2 = a1;
  if (v2)
  {
    CFArrayRef v3 = objc_alloc_init(boringssl_concrete_boringssl_identity);
    if (v3)
    {
      unsigned int v4 = sec_identity_copy_ref(v2);
      SecCertificateRef certificateRef = 0;
      SecIdentityCopyCertificate(v4, &certificateRef);
      CFArrayRef v5 = sec_identity_copy_certificates_ref(v2);
      objc_storeStrong((id *)&v3->identity, a1);
      uint64_t v6 = sec_array_create();
      certificateunsigned int s = v3->certificates;
      v3->certificateunsigned int s = (OS_sec_array *)v6;

      sec_certificate_t v8 = sec_certificate_create(certificateRef);
      sec_array_append();
      if (v5 && CFArrayGetCount(v5) >= 1)
      {
        CFIndex v9 = 0;
        do
        {
          CFDataRef ValueAtIndex = (__SecCertificate *)CFArrayGetValueAtIndex(v5, v9);
          sec_certificate_t v11 = sec_certificate_create(ValueAtIndex);
          sec_array_append();

          ++v9;
        }
        while (v9 < CFArrayGetCount(v5));
      }
      SecKeyRef v14 = 0;
      if (SecIdentityCopyPrivateKey(v4, &v14))
      {
        if (certificateRef) {
          CFRelease(certificateRef);
        }
        SecCertificateRef certificateRef = 0;
        if (v4) {
          CFRelease(v4);
        }
        if (v5)
        {
          CFRelease(v5);
          CFArrayRef v5 = 0;
        }
      }
      else
      {
        SecCertificateRef v12 = certificateRef;
        v3->private_key = v14;
        if (v12) {
          CFRelease(v12);
        }
        SecCertificateRef certificateRef = 0;
        if (v4) {
          CFRelease(v4);
        }
        if (v5) {
          CFRelease(v5);
        }
        CFArrayRef v5 = v3;
      }
    }
    else
    {
      CFArrayRef v5 = 0;
    }
  }
  else
  {
    CFArrayRef v5 = 0;
  }

  return v5;
}

SecIdentityRef boringssl_identity_create_from_identity_without_certificates(void *a1)
{
  uint64_t v2 = a1;
  if (v2)
  {
    CFArrayRef v3 = objc_alloc_init(boringssl_concrete_boringssl_identity);
    unsigned int v4 = v3;
    if (v3)
    {
      objc_storeStrong((id *)&v3->identity, a1);
      SecIdentityRef v5 = sec_identity_copy_ref(v2);
      SecKeyRef privateKeyRef = 0;
      if (!SecIdentityCopyPrivateKey(v5, &privateKeyRef))
      {
        v4->private_key = privateKeyRef;
        if (v5) {
          CFRelease(v5);
        }
        SecIdentityRef v5 = v4;
        goto LABEL_11;
      }
      if (!v5)
      {
LABEL_11:

        goto LABEL_12;
      }
      CFRelease(v5);
    }
    SecIdentityRef v5 = 0;
    goto LABEL_11;
  }
  SecIdentityRef v5 = 0;
LABEL_12:

  return v5;
}

boringssl_concrete_boringssl_identity *boringssl_identity_create_from_external_identity(void *a1, void *a2, void *a3, void *a4)
{
  id v8 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  SecCertificateRef v12 = v11;
  unint64_t v13 = 0;
  if (v8 && v9 && v10 && v11)
  {
    SecKeyRef v14 = objc_alloc_init(boringssl_concrete_boringssl_identity);
    unint64_t v13 = v14;
    if (v14)
    {
      objc_storeStrong((id *)&v14->certificates, a1);
      uint64_t v15 = MEMORY[0x1BA9E5C70](v9);
      sign_blocuint64_t k = v13->sign_block;
      v13->sign_blocuint64_t k = (id)v15;

      uint64_t v17 = MEMORY[0x1BA9E5C70](v10);
      decrypt_blocuint64_t k = v13->decrypt_block;
      v13->decrypt_blocuint64_t k = (id)v17;

      objc_storeStrong((id *)&v13->queue, a4);
      unsigned int v19 = v13;
    }
  }
  return v13;
}

id *boringssl_identity_copy_sec_identity(id *result)
{
  if (result) {
    return (id *)result[3];
  }
  return result;
}

id *boringssl_identity_copy_certificate_chain(id *result)
{
  if (result) {
    return (id *)result[2];
  }
  return result;
}

uint64_t boringssl_identity_private_key_sign(void *a1, uint64_t a2, unint64_t *a3, unint64_t a4, int a5, void *a6, void *a7, void *a8)
{
  id v15 = a1;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  if (*((void *)v15 + 4) && *((void *)v15 + 6))
  {
    unsigned int v19 = (void *)MEMORY[0x1BA9E5C70]();
    long long v20 = *((void *)v15 + 6);
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    long long v27[2] = __boringssl_identity_private_key_sign_block_invoke;
    _OWORD v27[3] = &unk_1E61F3B08;
    __int16 v32 = a5;
    id v30 = v19;
    unint64_t v27[4] = v16;
    id v28 = v17;
    id v29 = v15;
    id v31 = v18;
    id v21 = v19;
    boringssl_context_async((uint64_t)v28, v20, v27);

    uint64_t v22 = 2;
  }
  else
  {
    long long v23 = boringssl_private_key_sign(*((__SecKey **)v15 + 1), a5, v16);
    long long v24 = v23;
    if (v23)
    {
      size_t size = dispatch_data_get_size(v23);
      if (size < a4) {
        a4 = size;
      }
      boringssl_helper_dispatch_data_copyout(v24, a2, a4);
      uint64_t v22 = 0;
      *a3 = a4;
    }
    else
    {
      uint64_t v22 = 1;
    }
  }
  return v22;
}

void __boringssl_identity_private_key_sign_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned __int16 *)(a1 + 72);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __boringssl_identity_private_key_sign_block_invoke_2;
  _OWORD v5[3] = &unk_1E61F3AE0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v4, v5);
}