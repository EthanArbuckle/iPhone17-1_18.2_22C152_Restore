uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CriticalCarrierId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CriticalCarrierId>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CriticalCarrierId>::clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)result = &unk_1F1268D00;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::BandInfo>(void *a1)
{
  char v2 = operator new(0x18uLL);
  uint64_t v3 = v2;
  v2[8] = 19;
  *((_DWORD *)v2 + 3) = 0;
  v4 = v2 + 12;
  *(void *)char v2 = &unk_1F1268D50;
  *((_DWORD *)v2 + 4) = 0;
  v6 = (char *)a1[2];
  unint64_t v5 = a1[3];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(void *)v6 = v2;
    uint64_t v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = (char *)a1[1];
  uint64_t v10 = (v6 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(void *)v15 = v3;
    uint64_t v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v6 - v9);
    if (v6 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(void *)(8 * v10) = v3;
  uint64_t v8 = 8 * v10 + 8;
  v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (long long *)(v6 - 16);
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_23:
  a1[2] = v8;
  return v4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandInfo>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandInfo>::clone(uint64_t a1)
{
  result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)result = &unk_1F1268D50;
  *(void *)(result + 12) = *(void *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetCC1Req8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDD59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDD5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDD5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetCC2Req8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDD6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDD6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDD6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThrottlePeriodicity>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThrottlePeriodicity>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThrottlePeriodicity>::clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)result = &unk_1F1268DA0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21SetLaaGpioThrottleReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDD860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDD874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDD8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssBandId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssBandId>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssBandId>::clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)result = &unk_1F1268DF0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssL5Level>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssL5Level>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssL5Level>::clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)result = &unk_1F1268E40;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm13SetGnssBandId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDDA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDDAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDDAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288)) {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    uint64_t v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    long long v24 = (uint64_t *)v23[1];
    uint64_t v25 = (uint64_t **)(a1 + 4);
    uint64_t v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  uint64_t v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        v15 = (uint64_t *)v11;
      }
      else {
        v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        v16 = v10;
      }
      else {
        v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        v15 = (uint64_t *)v11;
        uint64_t v10 = (uint64_t *)v11;
      }
      else
      {
        uint64_t v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  uint64_t v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  uint64_t v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        uint64_t v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      v26 = v20;
    }
    if (v29) {
      v31 = v28;
    }
    else {
      uint64_t v20 = v26;
    }
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  long long v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7) {
    v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      uint64_t v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  v7 = (uint64_t **)v6;
LABEL_75:
  uint64_t v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  char *v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  v68[4] = v4;
  v68[5] = v4;
  v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  unint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  __p = v68;
  uint64_t v71 = 0;
  v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    v7 = (uint64_t *)operator new(0x20uLL);
    int v8 = *v3;
    uint64_t v9 = **v3;
    v66 = v7;
    uint64_t v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    *uint64_t v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    int v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      BOOL v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          BOOL v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        void *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *uint64_t v11 = v15;
        v11[2] = ++v13;
        int v12 = (void *)v12[1];
        BOOL v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    v64 = v3;
    v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    v11[4] = 0;
    BOOL v18 = v11 + 4;
    v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    uint64_t v19 = *(void **)(v9 + 24);
    uint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        int v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          uint64_t v25 = (void *)v21[1];
          v26 = v25;
          int v27 = v21;
          if (v25)
          {
            do
            {
              v28 = v26;
              v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              int v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              v31 = v25;
              uint64_t v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              v21 = v31;
            }
            while (!v29);
          }
          v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              int v33 = v32;
              v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              int v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              int v22 = v33;
            }
            while (!v29);
          }
          v21 = v31;
          int v22 = v33;
        }
        while (v31 != v20);
      }
      uint64_t *v66 = (uint64_t)v11;
      v66[1] = 0;
      v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      void *v53 = &unk_1F1268ED8;
      v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      uint64_t v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      uint64_t *v55 = (uint64_t)&unk_1F1268E78;
      v55[2] = (uint64_t)v66;
      v56 = (atomic_uint *)v64[1];
      *v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      int v35 = (void *)*v18;
      int v36 = v11 + 4;
      if (*v17 != v18)
      {
        v37 = (void *)*v18;
        v38 = v11 + 4;
        if (v35)
        {
          do
          {
            int v36 = v37;
            v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            int v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            v41 = (void *)*v18;
            uint64_t v42 = v11 + 4;
            v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            v47[2] = v43;
            *uint64_t v42 = v47;
            v49 = (void *)**v17;
            if (v49)
            {
              char *v17 = v49;
              v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          uint64_t v42 = v11 + 4;
          v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                uint64_t v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              v41 = (void *)*v41;
              uint64_t v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              uint64_t v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        v43 = v36;
      }
      else {
        v43 = v11 + 4;
      }
      if (v35) {
        uint64_t v42 = v36 + 1;
      }
      else {
        uint64_t v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          v51 = v50;
          v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          uint64_t v19 = v51;
        }
        while (!v29);
      }
      uint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  v57 = (uint64_t **)*v3;
  v58 = (uint64_t *)**v3;
  v59 = (uint64_t *)v58[1];
  v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        v59 = (uint64_t *)v59[1];
        v67 = v59;
        v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      v57 = (uint64_t **)*v3;
      v67 = v59;
      v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      v62 = (char *)__p + 16 * v71;
      do
      {
        v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8BDE630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          unint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void tlv::parseV<nas::tlv::abm::BBHoppingList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  int v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        int v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(void *)uint64_t v10 = *(void *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      int v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8BDEF84(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BDEF6CLL);
}

void sub_1B8BDEF98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tlv::parseV<nas::tlv::abm::BBHRPLMNList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  int v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        int v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(void *)uint64_t v10 = *(void *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      int v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8BDF07C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BDF064);
}

void sub_1B8BDF090(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tlv::parseV<nas::tlv::abm::BBNeighborSecondList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  int v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        int v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(void *)uint64_t v10 = *(void *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      int v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8BDF174(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BDF15CLL);
}

void sub_1B8BDF188(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tlv::parseV<nas::tlv::abm::DLSCellFrequencyList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  int v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        int v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(void *)uint64_t v10 = *(void *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      int v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8BDF26C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BDF254);
}

void sub_1B8BDF280(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tlv::parseV<nas::tlv::abm::BBCampUplinkFreqList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  int v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        int v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(void *)uint64_t v10 = *(void *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      int v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8BDF364(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BDF34CLL);
}

void sub_1B8BDF378(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t abm::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 2;
      strcpy(a2, "UI");
      break;
    case 1:
      a2[23] = 7;
      strcpy(a2, "ABMtool");
      break;
    case 2:
      a2[23] = 7;
      strcpy(a2, "Profile");
      break;
    case 3:
      a2[23] = 10;
      strcpy(a2, "24hr_Timer");
      break;
    default:
      a2[23] = 11;
      strcpy(a2, "UnSpecified");
      break;
  }
  return result;
}

{
  if (result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "Last_Used");
  }
  else if (result)
  {
    a2[23] = 11;
    strcpy(a2, "UnSpecified");
  }
  else
  {
    a2[23] = 7;
    strcpy(a2, "Default");
  }
  return result;
}

void Timestamp::Timestamp(Timestamp *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  uint64_t v2 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  unsigned long long v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2;
    if (*v2) {
      goto LABEL_4;
    }
LABEL_10:
    unint64_t v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *(void *)unint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v4;
    *uint64_t v2 = v7;
    uint64_t v8 = **(void **)this;
    unsigned int v9 = (uint64_t *)v7;
    if (v8)
    {
      *(void *)this = v8;
      unsigned int v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((void *)this + 2);
    goto LABEL_13;
  }
  uint64_t v10 = __error();
  uint64_t v11 = strerror(*v10);
  *(_DWORD *)buf = 136315138;
  BOOL v14 = v11;
  _os_log_error_impl(&dword_1B8B00000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  uint64_t v3 = *v2;
  uint64_t v4 = v2;
  if (!*v2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v5 = v3;
  while (1)
  {
    while (1)
    {
      uint64_t v4 = (void *)v5;
      int v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1) {
        break;
      }
      uint64_t v5 = *v4;
      uint64_t v2 = v4;
      if (!*v4) {
        goto LABEL_10;
      }
    }
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    uint64_t v5 = v4[1];
    if (!v5)
    {
      uint64_t v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  unint64_t v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_1B8BDF6A4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1B8BDF6C0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

void sub_1B8BDF71C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B8BDF774(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *Timestamp::Timestamp(void *a1, _OWORD *a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  unint64_t v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)unint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  void *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  unint64_t v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)unint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  unint64_t v7 = a1 + 1;
  int v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        int v6 = *(char **)v8;
        unint64_t v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      int v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        unint64_t v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 1);
LABEL_8:
    uint64_t v10 = v8;
    uint64_t v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 6) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    char *v7 = (uint64_t *)v8;
    uint64_t v11 = (uint64_t *)**a1;
    unsigned long long v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      unsigned long long v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  __n128 result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

void *Timestamp::Timestamp(void *a1, uint64_t a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  unint64_t v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)unint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  void *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  unint64_t v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)unint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  uint64_t v5 = a2;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  a1[1] = 0;
  unint64_t v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)__p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((void *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0) {
    uint64_t v5 = *(const char **)a2;
  }
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(void *)&unsigned long long v23 = mktime(&v24);
    if ((void)v23 != -1) {
      goto LABEL_15;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = __error();
      uint64_t v20 = strerror(*v19);
      *(_DWORD *)buf = 136315138;
      int v27 = v20;
      _os_log_error_impl(&dword_1B8B00000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v8 = __error();
    int v9 = strerror(*v8);
    *(_DWORD *)buf = 136315138;
    int v27 = v9;
    uint64_t v10 = MEMORY[0x1E4F14500];
    uint64_t v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  unsigned long long v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    v21 = __error();
    int v22 = strerror(*v21);
    *(_DWORD *)buf = 136315138;
    int v27 = v22;
    uint64_t v10 = MEMORY[0x1E4F14500];
    uint64_t v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  unsigned long long v12 = *v7;
  uint64_t v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v13 = (uint64_t **)v12;
        int v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4) {
          break;
        }
        unsigned long long v12 = *v13;
        unint64_t v7 = v13;
        if (!*v13) {
          goto LABEL_22;
        }
      }
      if (v14 >= a4) {
        break;
      }
      unsigned long long v12 = v13[1];
      if (!v12)
      {
        unint64_t v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_22:
    uint64_t v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((void *)v15 + 5) = 0;
    *((void *)v15 + 6) = 0;
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v13;
    _DWORD *v7 = (uint64_t *)v15;
    uint64_t v16 = (uint64_t *)**a1;
    int v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      int v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_25:
    }
      operator delete(__p[0]);
  }
  return a1;
}

void sub_1B8BDFD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v24, *(void **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, void *a2, int a3)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a3;
    if (v7 >= a3) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3) {
    return 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v62 = v6;
  long long v61 = v6;
  long long v60 = v6;
  long long v59 = v6;
  long long v58 = v6;
  long long v57 = v6;
  long long v56 = v6;
  long long v55 = v6;
  long long v54 = v6;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = v6;
  long long __p = v6;
  long long v49 = v6;
  long long v48 = v6;
  long long v47 = v6;
  long long v46 = v6;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v53 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v8 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v45 = MEMORY[0x1E4FBA488] + 64;
  int v9 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v43 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v43 + *(void *)(v43 - 24)) = v10;
  unint64_t v44 = 0;
  uint64_t v11 = (std::ios_base *)((char *)&v43 + *(void *)(v43 - 24));
  std::ios_base::init(v11, &v46);
  uint64_t v12 = MEMORY[0x1E4FBA488] + 24;
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  uint64_t v13 = v9[5];
  uint64_t v45 = v9[4];
  *(uint64_t *)((char *)&v45 + *(void *)(v45 - 24)) = v13;
  uint64_t v43 = v9[1];
  *(uint64_t *)((char *)&v43 + *(void *)(v43 - 24)) = v9[6];
  uint64_t v53 = v7;
  uint64_t v43 = v12;
  uint64_t v45 = v8;
  std::streambuf::basic_streambuf();
  uint64_t v14 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&long long v46 = MEMORY[0x1E4FBA470] + 16;
  long long __p = 0u;
  long long v51 = 0u;
  LODWORD(v52) = 24;
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v16 = a1 + 8;
  uint64_t v15 = v17;
  if (!v17) {
    goto LABEL_13;
  }
  uint64_t v18 = v16;
  do
  {
    int v19 = *(_DWORD *)(v15 + 32);
    BOOL v20 = v19 < a2;
    if (v19 >= a2) {
      v21 = (uint64_t *)v15;
    }
    else {
      v21 = (uint64_t *)(v15 + 8);
    }
    if (!v20) {
      uint64_t v18 = v15;
    }
    uint64_t v15 = *v21;
  }
  while (*v21);
  if (v18 == v16)
  {
LABEL_13:
    time_t v24 = 0;
    int v22 = a4;
    char v23 = a3;
    if ((a3 & 0x11) != 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
  int v22 = a4;
  char v23 = a3;
  if (*(_DWORD *)(v18 + 32) <= a2)
  {
    time_t v24 = *(void *)(v18 + 40);
    if ((a3 & 0x11) != 0) {
      goto LABEL_14;
    }
LABEL_22:
    std::ostream::operator<<();
    if ((v23 & 4) != 0 || (v23 & 8) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)".", 1);
      std::ostream::operator<<();
    }
    goto LABEL_25;
  }
  time_t v24 = 0;
  if ((a3 & 0x11) == 0) {
    goto LABEL_22;
  }
LABEL_14:
  v41.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  time_t v42 = v24;
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v41.tm_mon = v25;
  *(_OWORD *)&v41.tm_isdst = v25;
  *(_OWORD *)&v41.tm_sec = v25;
  localtime_r(&v42, &v41);
  long long v66 = 0u;
  long long v67 = 0u;
  *(_OWORD *)__s = 0u;
  long long v65 = 0u;
  if ((v23 & 0x10) != 0) {
    v26 = "%Y.%m.%d_%H-%M-%S%z";
  }
  else {
    v26 = "%Y-%m-%d-%H-%M-%S";
  }
  strftime(__s, 0x40uLL, v26, &v41);
  size_t v27 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)__s, v27);
  if ((v23 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"-", 1);
    uint64_t v28 = v45;
    BOOL v29 = (char *)&v45 + *(void *)(v45 - 24);
    if (*((_DWORD *)v29 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v45 + *(void *)(v45 - 24)));
      uint64_t v30 = std::locale::use_facet(&v63, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 32);
      std::locale::~locale(&v63);
      uint64_t v28 = v45;
    }
    *((_DWORD *)v29 + 36) = 48;
    *(void *)((char *)&v47 + *(void *)(v28 - 24)) = 3;
    std::ostream::operator<<();
  }
LABEL_25:
  if ((v52 & 0x10) != 0)
  {
    uint64_t v32 = *((void *)&v51 + 1);
    if (*((void *)&v51 + 1) < (unint64_t)v49)
    {
      *((void *)&v51 + 1) = v49;
      uint64_t v32 = v49;
    }
    int v33 = (const void *)*((void *)&v48 + 1);
    size_t v31 = v32 - *((void *)&v48 + 1);
    if ((unint64_t)(v32 - *((void *)&v48 + 1)) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_42;
    }
  }
  else
  {
    if ((v52 & 8) == 0)
    {
      size_t v31 = 0;
      v22[23] = 0;
      goto LABEL_38;
    }
    int v33 = (const void *)v47;
    size_t v31 = v48 - v47;
    if ((void)v48 - (void)v47 >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_42:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v31 >= 0x17)
  {
    uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v34 = v31 | 7;
    }
    uint64_t v35 = v34 + 1;
    int v36 = operator new(v34 + 1);
    *((void *)v22 + 1) = v31;
    *((void *)v22 + 2) = v35 | 0x8000000000000000;
    *(void *)int v22 = v36;
    int v22 = v36;
    goto LABEL_37;
  }
  v22[23] = v31;
  if (v31) {
LABEL_37:
  }
    memmove(v22, v33, v31);
LABEL_38:
  v22[v31] = 0;
  uint64_t v43 = *MEMORY[0x1E4FBA408];
  uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&v43 + *(void *)(v43 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v45 = v37;
  *(void *)&long long v46 = v14;
  if (SBYTE7(v51) < 0) {
    operator delete((void *)__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BA9C8300](&v53);
}

void sub_1B8BE0554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8BE0568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::locale::~locale((std::locale *)(v13 - 184));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8BE0584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8BE0598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BA9C8300](a1 + 128);
  return a1;
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      uint64_t v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v1 = v11[1];
    if (!v11[1]) {
      goto LABEL_18;
    }
  }
  uint64_t v2 = &v11[1];
  uint64_t v3 = v1;
  do
  {
    uint64_t v4 = (uint64_t **)v3;
    uint64_t v5 = v2;
    int v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0) {
      uint64_t v2 = (uint64_t **)v3;
    }
    else {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1]) {
    goto LABEL_18;
  }
  uint64_t v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0) {
    goto LABEL_18;
  }
  if (v6 < 0) {
    uint64_t v4 = v5;
  }
  uint64_t v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_1B8BE0834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    int v6 = result + 1;
    do
    {
      int v7 = *((_DWORD *)v4 + 8);
      uint64_t v8 = (uint64_t *)v5[1];
      int v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_10;
      }
      uint64_t v10 = v5[1];
      uint64_t v11 = v6;
      if (v8)
      {
        do
        {
          int v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          int v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8) {
          uint64_t v13 = (uint64_t **)v9;
        }
        else {
          uint64_t v13 = (uint64_t **)v6;
        }
        if (v8) {
          uint64_t v14 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v6;
        }
        if (*v14) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v6;
        uint64_t v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v8;
              int v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7) {
                break;
              }
              uint64_t v8 = *v13;
              uint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_25;
              }
            }
            if (v15 >= v7) {
              goto LABEL_29;
            }
            uint64_t v8 = v13[1];
            if (!v8)
            {
              uint64_t v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v16 = operator new(0x38uLL);
      uint64_t v17 = v4[6];
      v16[2] = *((_OWORD *)v4 + 2);
      *((void *)v16 + 6) = v17;
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v13;
      char *v14 = (uint64_t *)v16;
      uint64_t v18 = *(void *)*v5;
      if (v18)
      {
        *uint64_t v5 = v18;
        int v19 = *v14;
      }
      else
      {
        int v19 = (uint64_t *)v16;
      }
      __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      BOOL v20 = (void *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          BOOL v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (void *)v4[2];
          BOOL v12 = *v21 == (void)v4;
          uint64_t v4 = v21;
        }
        while (!v12);
      }
      uint64_t v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

uint64_t diag::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0xE0uLL);
  int v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v30 = *a1;
  size_t v31 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  uint64_t v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v12 = *a3;
  uint64_t v13 = (std::__shared_weak_count *)a3[1];
  v27[0] = v12;
  v27[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  diag::QMICommandDriver::QMICommandDriver((uint64_t)v8, (uint64_t)&v30, (uint64_t)&aBlock, (uint64_t)v27);
  *a4 = v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  int v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = &v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1269950;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = v15;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v8 + 10);
  if (!v17)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 9) = v8;
    *((void *)v8 + 10) = v15;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v18 = (void *)*a4;
    if (!*(void *)(*a4 + 56)) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if (v17->__shared_owners_ != -1) {
    goto LABEL_15;
  }
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v8 + 9) = v8;
  *((void *)v8 + 10) = v15;
  std::__shared_weak_count::__release_weak(v17);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_15;
  }
LABEL_12:
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  uint64_t v18 = (void *)*a4;
  if (!*(void *)(*a4 + 56)) {
    goto LABEL_24;
  }
LABEL_16:
  int v19 = (std::__shared_weak_count *)v18[10];
  if (!v19 || (uint64_t v20 = v18[9], (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v22 = v21;
  uint64_t v34 = v20;
  uint64_t v35 = v21;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v18 + 1));
  uint64_t v32 = v20;
  int v33 = v22;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  char v23 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  time_t v24 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_24:
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  long long v25 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a4 + 64))(*a4, v14);
}

void sub_1B8BE0D34()
{
}

void sub_1B8BE0D9C()
{
}

void sub_1B8BE0DAC()
{
}

uint64_t diag::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(std::__shared_weak_count **)(a2 + 8);
  int v15 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v8 = _Block_copy(v8);
  }
  int v9 = *(NSObject **)(a3 + 8);
  aBlock = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a4 + 8);
  uint64_t v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  diag::CommandDriver::CommandDriver();
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)a1 = &unk_1F1268F38;
  *(int32x2_t *)(a1 + 160) = vdup_n_s32(0x61A8u);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = dispatch_group_create();
  *(void *)(a1 + 216) = 0;
  return a1;
}

void sub_1B8BE0F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void diag::QMICommandDriver::~QMICommandDriver(diag::QMICommandDriver *this)
{
  *(void *)this = &unk_1F1268F38;
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 21));
    *((void *)this + 21) = 0;
  }
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  uint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = *((void *)this + 27);
    if (v5) {
      dispatch_release(v5);
    }
  }
  int v6 = *((void *)this + 26);
  if (v6) {
    dispatch_release(v6);
  }
  qmi::Client::~Client((diag::QMICommandDriver *)((char *)this + 176));
  *(void *)this = &unk_1F12698B8;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *((void *)this + 14);
  if (v8) {
    dispatch_release(v8);
  }
  int v9 = (const void *)*((void *)this + 13);
  if (v9) {
    _Block_release(v9);
  }
  *(void *)this = &unk_1F1269910;
  MEMORY[0x1BA9C75B0]((char *)this + 8);
  uint64_t v10 = *((void *)this + 12);
  if (v10) {
    dispatch_release(v10);
  }
  uint64_t v11 = *((void *)this + 11);
  if (v11) {
    dispatch_release(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  diag::QMICommandDriver::~QMICommandDriver(this);

  operator delete(v1);
}

void diag::QMICommandDriver::stopTimer_sync(diag::QMICommandDriver *this)
{
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 21));
    *((void *)this + 21) = 0;
  }
}

void diag::QMICommandDriver::init(diag::QMICommandDriver *this)
{
  uint64_t v5 = *((void *)this + 9);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 72;
  if (!v3 || (int v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN4diag16QMICommandDriver4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_28_5;
  v11[4] = this;
  v11[5] = v5;
  uint64_t v12 = v7;
  uint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_174_0;
  block[4] = v4;
  block[5] = &v13;
  int v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v102 = 0xAAAAAAAAAAAAAAAALL;
  v103 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v102, *(Registry **)(v2 + 120));
  if (!v102)
  {
    Name = (const char *)diag::CommandDriver::getName((diag::CommandDriver *)v2);
    size_t v39 = strlen(Name);
    if (v39 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v40 = v39;
    if (v39 >= 0x17)
    {
      uint64_t v52 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17) {
        uint64_t v52 = v39 | 7;
      }
      uint64_t v53 = v52 + 1;
      p_dst = (void **)operator new(v52 + 1);
      size_t v97 = v40;
      unint64_t v98 = v53 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v98) = v39;
      p_dst = (void **)&__dst;
      if (!v39)
      {
        LOBYTE(__dst) = 0;
        time_t v42 = *(NSObject **)(v2 + 88);
        v88 = v42;
        if (!v42)
        {
LABEL_79:
          char v94 = 4;
          strcpy((char *)v93, "diag");
          uint64_t v43 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v43 || (v44 = *(void *)(v2 + 72), (uint64_t v45 = std::__shared_weak_count::lock(v43)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          long long v46 = v45;
          atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v86 = 0;
            v87 = 0;
            long long v47 = std::__shared_weak_count::lock(v45);
            if (v47)
            {
LABEL_83:
              atomic_fetch_add_explicit(&v47->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              uint64_t v86 = v44;
              v87 = v47;
LABEL_84:
              std::__shared_weak_count::__release_weak(v46);
              if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
              qmi::Client::createWithQueue();
              long long v48 = v101;
              long long v101 = 0uLL;
              long long v49 = *(std::__shared_weak_count **)(v2 + 200);
              *(_OWORD *)(v2 + 192) = v48;
              if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
              qmi::Client::~Client((qmi::Client *)buf);
              if (v87) {
                std::__shared_weak_count::__release_weak(v87);
              }
              if (v94 < 0)
              {
                operator delete(v93[0]);
                int v15 = v88;
                if (!v88) {
                  goto LABEL_29;
                }
              }
              else
              {
                int v15 = v88;
                if (!v88) {
                  goto LABEL_29;
                }
              }
LABEL_28:
              dispatch_release(v15);
              goto LABEL_29;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v46);
            uint64_t v86 = 0;
            v87 = 0;
            long long v47 = std::__shared_weak_count::lock(v46);
            if (v47) {
              goto LABEL_83;
            }
          }
          uint64_t v86 = 0;
          v87 = v47;
          goto LABEL_84;
        }
LABEL_78:
        dispatch_retain(v42);
        goto LABEL_79;
      }
    }
    memmove(p_dst, Name, v40);
    *((unsigned char *)p_dst + v40) = 0;
    time_t v42 = *(NSObject **)(v2 + 88);
    v88 = v42;
    if (!v42) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v3 = (const char *)diag::CommandDriver::getName((diag::CommandDriver *)v2);
  size_t v4 = strlen(v3);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v50 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v50 = v4 | 7;
    }
    uint64_t v51 = v50 + 1;
    int v6 = (void **)operator new(v50 + 1);
    size_t v97 = v5;
    unint64_t v98 = v51 | 0x8000000000000000;
    __dst = v6;
LABEL_101:
    memmove(v6, v3, v5);
    *((unsigned char *)v6 + v5) = 0;
    int v7 = *(NSObject **)(v2 + 88);
    v95 = v7;
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  HIBYTE(v98) = v4;
  int v6 = (void **)&__dst;
  if (v4) {
    goto LABEL_101;
  }
  LOBYTE(__dst) = 0;
  int v7 = *(NSObject **)(v2 + 88);
  v95 = v7;
  if (v7) {
LABEL_6:
  }
    dispatch_retain(v7);
LABEL_7:
  char v94 = 4;
  strcpy((char *)v93, "diag");
  uint64_t v8 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v8 || (v9 = *(void *)(v2 + 72), (uint64_t v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v91 = 0;
    v92 = 0;
    uint64_t v12 = std::__shared_weak_count::lock(v11);
    if (v12) {
      goto LABEL_11;
    }
LABEL_104:
    uint64_t v91 = 0;
    v92 = v12;
    goto LABEL_12;
  }
  uint64_t v91 = 0;
  v92 = 0;
  uint64_t v12 = std::__shared_weak_count::lock(v10);
  if (!v12) {
    goto LABEL_104;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v91 = v9;
  v92 = v12;
LABEL_12:
  std::__shared_weak_count::__release_weak(v11);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v89 = v102;
  v90 = v103;
  if (v103) {
    atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v13 = v101;
  long long v101 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v2 + 200);
  *(_OWORD *)(v2 + 192) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
  if (v92) {
    std::__shared_weak_count::__release_weak(v92);
  }
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  int v15 = v95;
  if (v95) {
    goto LABEL_28;
  }
LABEL_29:
  if (SHIBYTE(v98) < 0) {
    operator delete(__dst);
  }
  uint64_t v79 = MEMORY[0x1E4F143A8];
  uint64_t v80 = 1174405120;
  v81 = ___ZN4diag16QMICommandDriver4initEv_block_invoke_2;
  v82 = &__block_descriptor_tmp_17;
  uint64_t v17 = a1[5];
  uint64_t v16 = (std::__shared_weak_count *)a1[6];
  uint64_t v83 = v2;
  uint64_t v84 = v17;
  v85 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  uint64_t v72 = MEMORY[0x1E4F143A8];
  uint64_t v73 = 1174405120;
  v74 = ___ZN4diag16QMICommandDriver4initEv_block_invoke_3;
  v75 = &__block_descriptor_tmp_6_2;
  uint64_t v19 = a1[5];
  uint64_t v18 = (std::__shared_weak_count *)a1[6];
  uint64_t v76 = v2;
  uint64_t v77 = v19;
  v78 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  uint64_t v65 = MEMORY[0x1E4F143A8];
  uint64_t v66 = 1174405120;
  long long v67 = ___ZN4diag16QMICommandDriver4initEv_block_invoke_7;
  uint64_t v68 = &__block_descriptor_tmp_11_4;
  uint64_t v21 = a1[5];
  uint64_t v20 = (std::__shared_weak_count *)a1[6];
  uint64_t v69 = v2;
  uint64_t v70 = v21;
  uint64_t v71 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  uint64_t v58 = MEMORY[0x1E4F143A8];
  uint64_t v59 = 1174405120;
  long long v60 = ___ZN4diag16QMICommandDriver4initEv_block_invoke_12;
  long long v61 = &__block_descriptor_tmp_15_3;
  uint64_t v23 = a1[5];
  int v22 = (std::__shared_weak_count *)a1[6];
  uint64_t v62 = v2;
  uint64_t v63 = v23;
  v64 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  v56[1] = (void *)MEMORY[0x1E4F143A8];
  v56[2] = (void *)1174405120;
  v56[3] = ___ZN4diag16QMICommandDriver4initEv_block_invoke_16;
  v56[4] = &__block_descriptor_tmp_20_5;
  long long v25 = (void *)a1[5];
  time_t v24 = (std::__shared_weak_count *)a1[6];
  v56[5] = (void *)v2;
  v56[6] = v25;
  long long v57 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  unsigned int v26 = *(_DWORD *)(v2 + 160);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver4initEv_block_invoke_21;
  aBlock[3] = &__block_descriptor_tmp_25_2;
  uint64_t v28 = a1[5];
  size_t v27 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  aBlock[5] = v28;
  long long v55 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v29 = _Block_copy(aBlock);
  v56[0] = v29;
  diag::QMICommandDriver::startTimer_sync(v2, v26, v56);
  if (v29) {
    _Block_release(v29);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v30 || (uint64_t v31 = *(void *)(v2 + 72), (v32 = std::__shared_weak_count::lock(v30)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v33 = v32;
  atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *(void *)buf = 0;
    v100 = 0;
    uint64_t v34 = std::__shared_weak_count::lock(v32);
    if (v34) {
      goto LABEL_49;
    }
LABEL_96:
    uint64_t v35 = v100;
    *(void *)buf = 0;
    v100 = v34;
    if (!v35) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v33);
  *(void *)buf = 0;
  v100 = 0;
  uint64_t v34 = std::__shared_weak_count::lock(v33);
  if (!v34) {
    goto LABEL_96;
  }
LABEL_49:
  atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v35 = v100;
  *(void *)buf = v31;
  v100 = v34;
  if (v35) {
LABEL_50:
  }
    std::__shared_weak_count::__release_weak(v35);
LABEL_51:
  std::__shared_weak_count::__release_weak(v33);
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  qmi::Client::setClientHandle();
  if (v100) {
    std::__shared_weak_count::__release_weak(v100);
  }
  qmi::Client::start((qmi::Client *)(v2 + 176));
  int v36 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v36, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  if (v57) {
    std::__shared_weak_count::__release_weak(v57);
  }
  if (v64) {
    std::__shared_weak_count::__release_weak(v64);
  }
  if (v71) {
    std::__shared_weak_count::__release_weak(v71);
  }
  if (v78) {
    std::__shared_weak_count::__release_weak(v78);
  }
  if (v85) {
    std::__shared_weak_count::__release_weak(v85);
  }
  uint64_t v37 = v103;
  if (v103)
  {
    if (!atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1B8BE1D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  long long v54 = *(std::__shared_weak_count **)(v52 - 232);
  if (v54)
  {
    std::__shared_weak_count::__release_weak(v54);
    if ((*(char *)(v52 - 161) & 0x80000000) == 0)
    {
LABEL_3:
      long long v55 = *(NSObject **)(v52 - 224);
      if (!v55) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v52 - 161) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v52 - 184));
  long long v55 = *(NSObject **)(v52 - 224);
  if (!v55)
  {
LABEL_8:
    if (*(char *)(v52 - 129) < 0)
    {
      operator delete(*(void **)(v52 - 152));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v52 - 96);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v52 - 96);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v55);
  goto LABEL_8;
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        int v6 = *(NSObject **)(v3 + 216);
        *(void *)(v3 + 216) = 0;
        if (v6)
        {
          dispatch_group_leave(v6);
          dispatch_release(v6);
        }
        int v7 = *(NSObject **)(v3 + 168);
        if (v7)
        {
          dispatch_source_cancel(v7);
          dispatch_release(*(dispatch_object_t *)(v3 + 168));
          *(void *)(v3 + 168) = 0;
        }
        diag::CommandDriver::notifyOfEvent_sync();
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8BE209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, char a11)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_3(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        int v6 = *(NSObject **)(v3 + 168);
        if (v6)
        {
          dispatch_source_cancel(v6);
          dispatch_release(*(dispatch_object_t *)(v3 + 168));
          *(void *)(v3 + 168) = 0;
        }
        diag::CommandDriver::notifyOfEvent_sync();
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8BE21E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, char a11)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_7(void *a1, NSObject *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    size_t v5 = (diag::QMICommandDriver *)a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        if (a2)
        {
          dispatch_retain(a2);
          dispatch_retain(a2);
          dispatch_group_enter(a2);
        }
        uint64_t v8 = *((void *)v5 + 27);
        *((void *)v5 + 27) = a2;
        if (v8)
        {
          dispatch_group_leave(v8);
          dispatch_release(v8);
        }
        diag::QMICommandDriver::onLowPower_sync(v5);
        if (a2) {
          dispatch_release(a2);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8BE2318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    dispatch_release(v9);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void diag::QMICommandDriver::onLowPower_sync(diag::QMICommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unsigned int v7 = *((_DWORD *)this + 41);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver15onLowPower_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_32_4;
  aBlock[4] = this;
  aBlock[5] = v3;
  int v15 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v16 = v8;
  diag::QMICommandDriver::startTimer_sync((uint64_t)this, v7, &v16);
  if (v8) {
    _Block_release(v8);
  }
  uint64_t v9 = *((void *)this + 26);
  if (v9)
  {
    dispatch_retain(*((dispatch_object_t *)this + 26));
    dispatch_group_enter(v9);
    uint64_t v10 = *((void *)this + 26);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *((void *)this + 11);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN4diag16QMICommandDriver15onLowPower_syncEv_block_invoke_33;
  block[3] = &__block_descriptor_tmp_36_2;
  block[4] = this;
  block[5] = v3;
  long long v13 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  dispatch_group_notify(v10, v11, block);
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
  diag::CommandDriver::notifyOfEvent_sync();
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1B8BE255C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v24)
  {
    dispatch_group_leave(v24);
    dispatch_release(v24);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_12(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      size_t v4 = v3;
      if (*(void *)(a1 + 40)) {
        diag::CommandDriver::notifyOfEvent_sync();
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B8BE26A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, char a11)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_16(void *a1, xpc_object_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    uint64_t v18 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v8 = v6;
LABEL_10:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      __p[3] = 0;
      diag::CommandDriver::notifyOfEvent_sync();
      if (a2)
      {
        xpc_retain(a2);
        unsigned int v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          goto LABEL_9;
        }
      }
      else
      {
        a2 = xpc_null_create();
        unsigned int v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          goto LABEL_9;
        }
      }
      uint64_t v9 = (char *)MEMORY[0x1BA9C88A0](a2);
      memset(__p, 170, 24);
      size_t v10 = strlen(v9);
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = (void *)v10;
      if (v10 >= 0x17)
      {
        uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17) {
          uint64_t v13 = v10 | 7;
        }
        uint64_t v14 = v13 + 1;
        uint64_t v12 = operator new(v13 + 1);
        __p[1] = v11;
        __p[2] = (void *)(v14 | 0x8000000000000000);
        __p[0] = v12;
      }
      else
      {
        HIBYTE(__p[2]) = v10;
        uint64_t v12 = __p;
        if (!v10) {
          goto LABEL_21;
        }
      }
      memcpy(v12, v9, (size_t)v11);
LABEL_21:
      *((unsigned char *)v11 + (void)v12) = 0;
      free(v9);
      int v15 = __p;
      if (SHIBYTE(__p[2]) < 0) {
        int v15 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v20 = v15;
      _os_log_error_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
LABEL_9:
      xpc_release(a2);
      uint64_t v8 = v18;
      if (!v18) {
        return;
      }
      goto LABEL_10;
    }
  }
}

void sub_1B8BE291C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_group_t group, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void diag::QMICommandDriver::startTimer_sync(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v6 = *(NSObject **)(a1 + 168);
  if (v6)
  {
    dispatch_source_cancel(v6);
    dispatch_release(*(dispatch_object_t *)(a1 + 168));
    *(void *)(a1 + 168) = 0;
  }
  dispatch_source_t v7 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  *(void *)(a1 + 168) = v7;
  if (v7)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v8 || (v9 = *(void *)(a1 + 72), (size_t v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v11 = v10;
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v13 = *(NSObject **)(a1 + 168);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN4diag16QMICommandDriver15startTimer_syncEjN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
    handler[3] = &__block_descriptor_tmp_29_1;
    handler[4] = v9;
    uint64_t v20 = v11;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v14 = *a3;
    if (*a3) {
      uint64_t v14 = _Block_copy(v14);
    }
    aBlock = v14;
    dispatch_source_set_event_handler(v13, handler);
    int v15 = *(NSObject **)(a1 + 168);
    dispatch_time_t v16 = dispatch_time(0, 1000000 * a2);
    dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_activate(*(dispatch_object_t *)(a1 + 168));
    uint64_t v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v23 = a2;
      _os_log_debug_impl(&dword_1B8B00000, v17, OS_LOG_TYPE_DEBUG, "#D Timeout set to %ums", buf, 8u);
      uint64_t v18 = aBlock;
      if (!aBlock) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v18 = aBlock;
      if (!aBlock)
      {
LABEL_13:
        if (v20) {
          std::__shared_weak_count::__release_weak(v20);
        }
        std::__shared_weak_count::__release_weak(v11);
        return;
      }
    }
    _Block_release(v18);
    goto LABEL_13;
  }
}

void sub_1B8BE2BAC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_21(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (NSObject **)a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    size_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v9 = a1[5];
      if (!v9
        || (dispatch_group_t group = 0,
            diag::CommandDriver::notifyOfEvent_sync(),
            char v7 = 13,
            strcpy((char *)__p, "Start Timeout"),
            diag::QMICommandDriver::onError_sync(v3, (uint64_t *)__p),
            (v7 & 0x80000000) == 0))
      {
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_8:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
      operator delete(__p[0]);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
  }
}

void sub_1B8BE2CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, dispatch_group_t group, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void diag::QMICommandDriver::onError_sync(NSObject **a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  size_t v4 = a1[27];
  a1[27] = 0;
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  uint64_t v5 = a1[21];
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(a1[21]);
    a1[21] = 0;
  }
  qmi::Client::stop((qmi::Client *)(a1 + 22));
  char v6 = *((unsigned char *)a2 + 23);
  if (v6 < 0)
  {
    if (!a2[1]) {
      return;
    }
  }
  else if (!*((unsigned char *)a2 + 23))
  {
    return;
  }
  char v7 = a1[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (v6 < 0) {
      a2 = (uint64_t *)*a2;
    }
    int v8 = 136315138;
    uint64_t v9 = a2;
    _os_log_error_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v8, 0xCu);
  }
}

void ___ZN4diag16QMICommandDriver15startTimer_syncEjN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      size_t v4 = v3;
      if (a1[4]) {
        (*(void (**)(void))(a1[6] + 16))();
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B8BE2F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = (void *)a2[6];
  if (result) {
    __n128 result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN4diag16QMICommandDriver15onLowPower_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (NSObject **)a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v12 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (!a1[5]) {
        goto LABEL_14;
      }
      char v6 = v3[21];
      if (v6)
      {
        dispatch_source_cancel(v6);
        dispatch_release(v3[21]);
        v3[21] = 0;
      }
      char v7 = v3[27];
      if (!v7
        || (v3[27] = 0,
            dispatch_group_leave(v7),
            dispatch_release(v7),
            dispatch_group_t group = 0,
            diag::CommandDriver::notifyOfEvent_sync(),
            int v8 = v3[5],
            !os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)))
      {
LABEL_14:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_11:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
      *(_WORD *)uint64_t v9 = 0;
      _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "LowPower Timeout", v9, 2u);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_11;
      }
    }
  }
}

void sub_1B8BE311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, char a11)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver15onLowPower_syncEv_block_invoke_33(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (NSObject **)a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        char v6 = v3[21];
        if (v6)
        {
          dispatch_source_cancel(v6);
          dispatch_release(v3[21]);
          v3[21] = 0;
        }
        char v7 = v3[27];
        if (v7)
        {
          v3[27] = 0;
          dispatch_group_leave(v7);
          dispatch_release(v7);
          int v8 = v3[5];
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v9 = 0;
            _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I LowPower Complete", v9, 2u);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void diag::QMICommandDriver::setInterface_sync(uint64_t a1, int a2, void **a3)
{
  if ((a2 - 1) > 3) {
    int v5 = 3;
  }
  else {
    int v5 = dword_1B8C36660[a2 - 1];
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v52 = v6;
  long long v53 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v52);
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 0x40000000;
  char v7 = (uint64_t (*)(uint64_t, char *))___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  long long v49 = (uint64_t (*)(uint64_t, char *))___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  uint64_t v50 = &__block_descriptor_tmp_38_1;
  int v51 = v5;
  int v8 = (char *)*((void *)&v52 + 1);
  uint64_t v9 = (char *)v53;
  uint64_t v10 = (const void **)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1) != (void)v53)
  {
    uint64_t v10 = (const void **)*((void *)&v52 + 1);
    while (*((unsigned char *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v53) {
        goto LABEL_12;
      }
    }
  }
  if (v10 == (const void **)v53)
  {
LABEL_12:
    uint64_t v13 = operator new(0x10uLL);
    uint64_t v14 = v13;
    v13[8] = 1;
    *(void *)uint64_t v13 = &unk_1F12699B8;
    *((_DWORD *)v13 + 3) = 0;
    uint64_t v12 = v13 + 12;
    if ((unint64_t)v9 < *((void *)&v53 + 1))
    {
      *(void *)uint64_t v9 = v13;
      uint64_t v15 = (uint64_t)(v9 + 8);
LABEL_25:
      *(void *)&long long v53 = v15;
      char v7 = v49;
      goto LABEL_26;
    }
    int64_t v16 = v9 - v8;
    uint64_t v17 = (v9 - v8) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = *((void *)&v53 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v53 + 1) - (void)v8) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v21 = operator new(8 * v20);
      int v22 = &v21[8 * v17];
      unsigned int v23 = &v21[8 * v20];
      void *v22 = v14;
      uint64_t v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_23:
        *((void *)&v52 + 1) = v22;
        *(void *)&long long v53 = v15;
        *((void *)&v53 + 1) = v23;
        if (!v8) {
          goto LABEL_25;
        }
LABEL_24:
        operator delete(v8);
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = (void *)(8 * v17);
      unsigned int v23 = 0;
      *(void *)(8 * v17) = v14;
      uint64_t v15 = 8 * v17 + 8;
      if (v8 == v9) {
        goto LABEL_23;
      }
    }
    if ((unint64_t)(v16 - 8) < 0x58) {
      goto LABEL_56;
    }
    if ((unint64_t)(v8 - v21) < 0x20) {
      goto LABEL_56;
    }
    unint64_t v30 = ((unint64_t)(v16 - 8) >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v32 = &v9[-v31];
    int v22 = (void *)((char *)v22 - v31);
    int v33 = &v21[8 * v17 - 16];
    uint64_t v34 = v9 - 16;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *int v33 = v36;
      v33 -= 2;
      v34 -= 32;
      v35 -= 4;
    }
    while (v35);
    uint64_t v9 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        uint64_t v37 = *((void *)v9 - 1);
        v9 -= 8;
        *--int v22 = v37;
      }
      while (v9 != v8);
    }
    int v8 = (char *)*((void *)&v52 + 1);
    *((void *)&v52 + 1) = v22;
    *(void *)&long long v53 = v15;
    *((void *)&v53 + 1) = v23;
    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  uint64_t v12 = v11 + 12;
LABEL_26:
  v7((uint64_t)v48, v12);
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v24 || (uint64_t v25 = *(void *)(a1 + 72), (v26 = std::__shared_weak_count::lock(v24)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v27 = v26;
  atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v43 = a1 + 176;
  uint64_t v44 = QMIServiceMsg::create();
  int v45 = 25000;
  uint64_t v46 = 0;
  long long v47 = 0;
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 1174405120;
  v39[2] = ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
  v39[3] = &__block_descriptor_tmp_42_1;
  v39[4] = a1;
  v39[5] = v25;
  size_t v40 = v27;
  atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v42 = a2;
  uint64_t v28 = *a3;
  if (*a3) {
    uint64_t v28 = _Block_copy(v28);
  }
  tm v41 = v28;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E6196488;
  aBlock[4] = v39;
  BOOL v29 = _Block_copy(aBlock);
  long long v47 = v29;
  if (v44)
  {
    qmi::Client::send();
    BOOL v29 = v47;
  }
  if (v29) {
    _Block_release(v29);
  }
  if (v41) {
    _Block_release(v41);
  }
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v52);
}

void sub_1B8BE36F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  std::__shared_weak_count::__release_weak(v29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B8BE3744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1B8BE3758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    unint64_t v20 = v6;
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = a1[5];
      uint64_t v19 = v8;
      if (v8)
      {
        int v9 = *(_DWORD *)(a2 + 4);
        BOOL v10 = v9 == 0;
        uint64_t v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_ERROR, "Error setting interface", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          capabilities::diag::asString();
          uint64_t v12 = v18 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)uint64_t v21 = 136315138;
          int v22 = v12;
          _os_log_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_DEFAULT, "#I Interface set to: %s", v21, 0xCu);
          if (v18 < 0) {
            operator delete(*(void **)buf);
          }
        }
        uint64_t v13 = (const void *)a1[7];
        if (v13)
        {
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 1174405120;
          v14[2] = ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_39;
          v14[3] = &__block_descriptor_tmp_40_5;
          aBlock = _Block_copy(v13);
          BOOL v16 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v14);
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8BE397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8BE3990(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_39(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = (void *)a2[7];
  if (result) {
    __n128 result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void diag::QMICommandDriver::setBufferingMode_sync(uint64_t a1, int a2, void **a3)
{
  if ((a2 - 1) > 3) {
    int v5 = 3;
  }
  else {
    int v5 = dword_1B8C36660[a2 - 1];
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v52 = v6;
  long long v53 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v52);
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 0x40000000;
  char v7 = (uint64_t (*)(uint64_t, char *))___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  long long v49 = (uint64_t (*)(uint64_t, char *))___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  uint64_t v50 = &__block_descriptor_tmp_44_2;
  int v51 = v5;
  uint64_t v8 = (char *)*((void *)&v52 + 1);
  int v9 = (char *)v53;
  BOOL v10 = (const void **)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1) != (void)v53)
  {
    BOOL v10 = (const void **)*((void *)&v52 + 1);
    while (*((unsigned char *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v53) {
        goto LABEL_12;
      }
    }
  }
  if (v10 == (const void **)v53)
  {
LABEL_12:
    uint64_t v13 = operator new(0x10uLL);
    uint64_t v14 = v13;
    v13[8] = 1;
    *(void *)uint64_t v13 = &unk_1F1269A40;
    *((_DWORD *)v13 + 3) = 0;
    uint64_t v12 = v13 + 12;
    if ((unint64_t)v9 < *((void *)&v53 + 1))
    {
      *(void *)int v9 = v13;
      uint64_t v15 = (uint64_t)(v9 + 8);
LABEL_25:
      *(void *)&long long v53 = v15;
      char v7 = v49;
      goto LABEL_26;
    }
    int64_t v16 = v9 - v8;
    uint64_t v17 = (v9 - v8) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = *((void *)&v53 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v53 + 1) - (void)v8) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v21 = operator new(8 * v20);
      int v22 = &v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      void *v22 = v14;
      uint64_t v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_23:
        *((void *)&v52 + 1) = v22;
        *(void *)&long long v53 = v15;
        *((void *)&v53 + 1) = v23;
        if (!v8) {
          goto LABEL_25;
        }
LABEL_24:
        operator delete(v8);
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = (void *)(8 * v17);
      uint64_t v23 = 0;
      *(void *)(8 * v17) = v14;
      uint64_t v15 = 8 * v17 + 8;
      if (v8 == v9) {
        goto LABEL_23;
      }
    }
    if ((unint64_t)(v16 - 8) < 0x58) {
      goto LABEL_56;
    }
    if ((unint64_t)(v8 - v21) < 0x20) {
      goto LABEL_56;
    }
    unint64_t v30 = ((unint64_t)(v16 - 8) >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v32 = &v9[-v31];
    int v22 = (void *)((char *)v22 - v31);
    int v33 = &v21[8 * v17 - 16];
    uint64_t v34 = v9 - 16;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *int v33 = v36;
      v33 -= 2;
      v34 -= 32;
      v35 -= 4;
    }
    while (v35);
    int v9 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        uint64_t v37 = *((void *)v9 - 1);
        v9 -= 8;
        *--int v22 = v37;
      }
      while (v9 != v8);
    }
    uint64_t v8 = (char *)*((void *)&v52 + 1);
    *((void *)&v52 + 1) = v22;
    *(void *)&long long v53 = v15;
    *((void *)&v53 + 1) = v23;
    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  uint64_t v12 = v11 + 12;
LABEL_26:
  v7((uint64_t)v48, v12);
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v24 || (uint64_t v25 = *(void *)(a1 + 72), (v26 = std::__shared_weak_count::lock(v24)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v27 = v26;
  atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v43 = a1 + 176;
  uint64_t v44 = QMIServiceMsg::create();
  int v45 = 25000;
  uint64_t v46 = 0;
  long long v47 = 0;
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 1174405120;
  v39[2] = ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
  v39[3] = &__block_descriptor_tmp_51_2;
  v39[4] = a1;
  v39[5] = v25;
  size_t v40 = v27;
  atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v42 = a2;
  uint64_t v28 = *a3;
  if (*a3) {
    uint64_t v28 = _Block_copy(v28);
  }
  tm v41 = v28;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E6196488;
  aBlock[4] = v39;
  BOOL v29 = _Block_copy(aBlock);
  long long v47 = v29;
  if (v44)
  {
    qmi::Client::send();
    BOOL v29 = v47;
  }
  if (v29) {
    _Block_release(v29);
  }
  if (v41) {
    _Block_release(v41);
  }
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v52);
}

void sub_1B8BE3F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  std::__shared_weak_count::__release_weak(v29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B8BE3F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1B8BE3F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    unint64_t v20 = v6;
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = a1[5];
      uint64_t v19 = v8;
      if (v8)
      {
        int v9 = *(_DWORD *)(a2 + 4);
        BOOL v10 = v9 == 0;
        uint64_t v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_ERROR, "Error setting buffering mode", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          capabilities::diag::asString();
          uint64_t v12 = v18 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)uint64_t v21 = 136315138;
          int v22 = v12;
          _os_log_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_DEFAULT, "#I Buffering mode set to: %s", v21, 0xCu);
          if (v18 < 0) {
            operator delete(*(void **)buf);
          }
        }
        uint64_t v13 = (const void *)a1[7];
        if (v13)
        {
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 1174405120;
          v14[2] = ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_45;
          v14[3] = &__block_descriptor_tmp_48_2;
          aBlock = _Block_copy(v13);
          BOOL v16 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v14);
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8BE4184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8BE4198(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_45(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void diag::QMICommandDriver::setWaterMarks_sync(uint64_t a1, __int16 a2, __int16 a3, void **a4)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v83 = v6;
  long long v84 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v83);
  v79[0] = MEMORY[0x1E4F143A8];
  v79[1] = 0x40000000;
  char v7 = (uint64_t (*)(uint64_t, char *))___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  uint64_t v80 = (uint64_t (*)(uint64_t, char *))___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v81 = &__block_descriptor_tmp_53_0;
  __int16 v82 = a2;
  uint64_t v8 = (char *)*((void *)&v83 + 1);
  int v9 = (char *)v84;
  BOOL v10 = (const void **)*((void *)&v83 + 1);
  if (*((void *)&v83 + 1) != (void)v84)
  {
    BOOL v10 = (const void **)*((void *)&v83 + 1);
    while (*((unsigned char *)*v10 + 8) != 17)
    {
      if (++v10 == (const void **)v84) {
        goto LABEL_9;
      }
    }
  }
  if (v10 == (const void **)v84)
  {
LABEL_9:
    uint64_t v13 = operator new(0x10uLL);
    uint64_t v14 = v13;
    v13[8] = 17;
    *(void *)uint64_t v13 = &unk_1F1269A90;
    *((_WORD *)v13 + 5) = 0;
    uint64_t v12 = v13 + 10;
    if ((unint64_t)v9 < *((void *)&v84 + 1))
    {
      *(void *)int v9 = v13;
      uint64_t v15 = (uint64_t)(v9 + 8);
LABEL_22:
      *(void *)&long long v84 = v15;
      char v7 = v80;
      goto LABEL_23;
    }
    int64_t v16 = v9 - v8;
    uint64_t v17 = (v9 - v8) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      goto LABEL_80;
    }
    uint64_t v19 = *((void *)&v84 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v84 + 1) - (void)v8) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        goto LABEL_81;
      }
      uint64_t v21 = operator new(8 * v20);
      int v22 = &v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      void *v22 = v14;
      uint64_t v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_20:
        *((void *)&v83 + 1) = v22;
        *(void *)&long long v84 = v15;
        *((void *)&v84 + 1) = v23;
        if (!v8) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v8);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = (void *)(8 * v17);
      uint64_t v23 = 0;
      *(void *)(8 * v17) = v14;
      uint64_t v15 = 8 * v17 + 8;
      if (v8 == v9) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v16 - 8) < 0x58) {
      goto LABEL_84;
    }
    if ((unint64_t)(v8 - v21) < 0x20) {
      goto LABEL_84;
    }
    unint64_t v47 = ((unint64_t)(v16 - 8) >> 3) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    long long v49 = &v9[-v48];
    int v22 = (void *)((char *)v22 - v48);
    uint64_t v50 = &v21[8 * v17 - 16];
    int v51 = v9 - 16;
    uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      _OWORD *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 4;
    }
    while (v52);
    int v9 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_84:
      do
      {
        uint64_t v54 = *((void *)v9 - 1);
        v9 -= 8;
        *--int v22 = v54;
      }
      while (v9 != v8);
    }
    uint64_t v8 = (char *)*((void *)&v83 + 1);
    *((void *)&v83 + 1) = v22;
    *(void *)&long long v84 = v15;
    *((void *)&v84 + 1) = v23;
    if (!v8) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v11) {
    goto LABEL_79;
  }
  uint64_t v12 = v11 + 10;
LABEL_23:
  v7((uint64_t)v79, v12);
  v75[0] = MEMORY[0x1E4F143A8];
  v75[1] = 0x40000000;
  uint64_t v24 = (uint64_t (*)(uint64_t, char *))___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
  uint64_t v76 = (uint64_t (*)(uint64_t, char *))___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
  uint64_t v77 = &__block_descriptor_tmp_55_0;
  __int16 v78 = a3;
  uint64_t v25 = (char *)*((void *)&v83 + 1);
  unsigned int v26 = (char *)v84;
  size_t v27 = (const void **)*((void *)&v83 + 1);
  if (*((void *)&v83 + 1) != (void)v84)
  {
    size_t v27 = (const void **)*((void *)&v83 + 1);
    while (*((unsigned char *)*v27 + 8) != 16)
    {
      if (++v27 == (const void **)v84) {
        goto LABEL_31;
      }
    }
  }
  if (v27 == (const void **)v84)
  {
LABEL_31:
    unint64_t v30 = operator new(0x10uLL);
    uint64_t v31 = v30;
    v30[8] = 16;
    *(void *)unint64_t v30 = &unk_1F1269AE0;
    *((_WORD *)v30 + 5) = 0;
    BOOL v29 = v30 + 10;
    if ((unint64_t)v26 < *((void *)&v84 + 1))
    {
      *(void *)unsigned int v26 = v30;
      uint64_t v32 = (uint64_t)(v26 + 8);
LABEL_44:
      *(void *)&long long v84 = v32;
      uint64_t v24 = v76;
      goto LABEL_45;
    }
    int64_t v33 = v26 - v25;
    uint64_t v34 = (v26 - v25) >> 3;
    unint64_t v35 = v34 + 1;
    if (!((unint64_t)(v34 + 1) >> 61))
    {
      uint64_t v36 = *((void *)&v84 + 1) - (void)v25;
      if ((uint64_t)(*((void *)&v84 + 1) - (void)v25) >> 2 > v35) {
        unint64_t v35 = v36 >> 2;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (!v37)
      {
        v38 = 0;
        size_t v39 = (void *)(8 * v34);
        size_t v40 = 0;
        *(void *)(8 * v34) = v31;
        uint64_t v32 = 8 * v34 + 8;
        if (v25 == v26)
        {
LABEL_42:
          *((void *)&v83 + 1) = v39;
          *(void *)&long long v84 = v32;
          *((void *)&v84 + 1) = v40;
          if (!v25) {
            goto LABEL_44;
          }
LABEL_43:
          operator delete(v25);
          goto LABEL_44;
        }
LABEL_70:
        if ((unint64_t)(v33 - 8) < 0x58) {
          goto LABEL_85;
        }
        if ((unint64_t)(v25 - v38) < 0x20) {
          goto LABEL_85;
        }
        unint64_t v55 = ((unint64_t)(v33 - 8) >> 3) + 1;
        uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
        long long v57 = &v26[-v56];
        size_t v39 = (void *)((char *)v39 - v56);
        uint64_t v58 = &v38[8 * v34 - 16];
        uint64_t v59 = v26 - 16;
        uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v61 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          _OWORD *v58 = v61;
          v58 -= 2;
          v59 -= 32;
          v60 -= 4;
        }
        while (v60);
        unsigned int v26 = v57;
        if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_85:
          do
          {
            uint64_t v62 = *((void *)v26 - 1);
            v26 -= 8;
            *--size_t v39 = v62;
          }
          while (v26 != v25);
        }
        uint64_t v25 = (char *)*((void *)&v83 + 1);
        *((void *)&v83 + 1) = v39;
        *(void *)&long long v84 = v32;
        *((void *)&v84 + 1) = v40;
        if (!v25) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      if (!(v37 >> 61))
      {
        v38 = operator new(8 * v37);
        size_t v39 = &v38[8 * v34];
        size_t v40 = &v38[8 * v37];
        *size_t v39 = v31;
        uint64_t v32 = (uint64_t)(v39 + 1);
        if (v25 == v26) {
          goto LABEL_42;
        }
        goto LABEL_70;
      }
LABEL_81:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_80:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (!v28) {
LABEL_79:
  }
    __cxa_bad_cast();
  BOOL v29 = v28 + 10;
LABEL_45:
  v24((uint64_t)v75, v29);
  tm v41 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v41 || (uint64_t v42 = *(void *)(a1 + 72), (v43 = std::__shared_weak_count::lock(v41)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v44 = v43;
  atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v44);
  }
  uint64_t v70 = a1 + 176;
  uint64_t v71 = QMIServiceMsg::create();
  int v72 = 25000;
  uint64_t v73 = 0;
  v74 = 0;
  v65[0] = MEMORY[0x1E4F143A8];
  v65[1] = 1174405120;
  v65[2] = ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_3;
  v65[3] = &__block_descriptor_tmp_62_3;
  v65[4] = a1;
  v65[5] = v42;
  uint64_t v66 = v44;
  atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  __int16 v68 = a2;
  __int16 v69 = a3;
  int v45 = *a4;
  if (*a4) {
    int v45 = _Block_copy(v45);
  }
  long long v67 = v45;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E6196488;
  aBlock[4] = v65;
  uint64_t v46 = _Block_copy(aBlock);
  v74 = v46;
  if (v71)
  {
    qmi::Client::send();
    uint64_t v46 = v74;
  }
  if (v46) {
    _Block_release(v46);
  }
  if (v67) {
    _Block_release(v67);
  }
  if (v66) {
    std::__shared_weak_count::__release_weak(v66);
  }
  std::__shared_weak_count::__release_weak(v44);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v83);
}

void sub_1B8BE48A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, char a20)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a20);
  std::__shared_weak_count::__release_weak(v20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v21 - 176));
  _Unwind_Resume(a1);
}

void sub_1B8BE48F4(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_1B8BE4908(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

uint64_t ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (v8)
      {
        int v9 = *(_DWORD *)(a2 + 4);
        BOOL v10 = v9 == 0;
        uint64_t v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_ERROR, "Error setting water marks", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *(unsigned __int16 *)(a1 + 64);
          int v13 = *(unsigned __int16 *)(a1 + 66);
          *(_DWORD *)buf = 67109376;
          int v19 = v12;
          __int16 v20 = 1024;
          int v21 = v13;
          _os_log_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_DEFAULT, "#I Water marks set to: %u,%u", buf, 0xEu);
        }
        uint64_t v14 = *(const void **)(a1 + 56);
        if (v14)
        {
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 1174405120;
          v15[2] = ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_56;
          v15[3] = &__block_descriptor_tmp_59_3;
          aBlock = _Block_copy(v14);
          BOOL v17 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v15);
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8BE4B14(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_56(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void diag::QMICommandDriver::drainBuffer_sync(uint64_t a1, void **a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v4;
  v19[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v5 || (uint64_t v6 = *(void *)(a1 + 72), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v14 = a1 + 176;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN4diag16QMICommandDriver16drainBuffer_syncEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v11[3] = &__block_descriptor_tmp_69_5;
  v11[4] = a1;
  v11[5] = v6;
  int v12 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v9 = *a2;
  if (*a2) {
    int v9 = _Block_copy(v9);
  }
  int v13 = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E6196488;
  aBlock[4] = v11;
  BOOL v10 = _Block_copy(aBlock);
  unint64_t v18 = v10;
  if (v15)
  {
    qmi::Client::send();
    BOOL v10 = v18;
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v8);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
}

void sub_1B8BE4D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8BE4D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver16drainBuffer_syncEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = a1[5];
      if (v8)
      {
        int v9 = *(_DWORD *)(a2 + 4);
        BOOL v10 = v9 == 0;
        uint64_t v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_ERROR, "Error requesting drain of DIAG buffer", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_DEFAULT, "#I Requested to drain DIAG buffer", buf, 2u);
        }
        int v12 = (const void *)a1[7];
        if (v12)
        {
          v13[0] = MEMORY[0x1E4F143A8];
          v13[1] = 1174405120;
          v13[2] = ___ZN4diag16QMICommandDriver16drainBuffer_syncEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_63;
          v13[3] = &__block_descriptor_tmp_66_1;
          aBlock = _Block_copy(v12);
          BOOL v15 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v13);
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ___ZN4diag16QMICommandDriver16drainBuffer_syncEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_63(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void diag::QMICommandDriver::setPresetID_sync(uint64_t a1, char a2, void **a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = v6;
  long long v52 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v51);
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 0x40000000;
  char v7 = ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  uint64_t v48 = ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  long long v49 = &__block_descriptor_tmp_71_2;
  char v50 = a2;
  uint64_t v8 = (char *)*((void *)&v51 + 1);
  int v9 = (char *)v52;
  BOOL v10 = (const void **)*((void *)&v51 + 1);
  if (*((void *)&v51 + 1) != (void)v52)
  {
    BOOL v10 = (const void **)*((void *)&v51 + 1);
    while (*((unsigned char *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v52) {
        goto LABEL_9;
      }
    }
  }
  if (v10 == (const void **)v52)
  {
LABEL_9:
    int v13 = operator new(0x10uLL);
    uint64_t v14 = v13;
    void v13[4] = 1;
    *(void *)int v13 = &unk_1F1269B30;
    if ((unint64_t)v9 < *((void *)&v52 + 1))
    {
      *(void *)int v9 = v13;
      uint64_t v15 = (uint64_t)(v9 + 8);
LABEL_22:
      int v12 = (char *)v14 + 9;
      *(void *)&long long v52 = v15;
      char v7 = v48;
      goto LABEL_23;
    }
    int64_t v16 = v9 - v8;
    uint64_t v17 = (v9 - v8) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = *((void *)&v52 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v52 + 1) - (void)v8) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v21 = operator new(8 * v20);
      uint64_t v22 = &v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      void *v22 = v14;
      uint64_t v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_20:
        *((void *)&v51 + 1) = v22;
        *(void *)&long long v52 = v15;
        *((void *)&v52 + 1) = v23;
        if (!v8) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v8);
        goto LABEL_22;
      }
    }
    else
    {
      int v21 = 0;
      uint64_t v22 = (void *)(8 * v17);
      uint64_t v23 = 0;
      *(void *)(8 * v17) = v14;
      uint64_t v15 = 8 * v17 + 8;
      if (v8 == v9) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v16 - 8) < 0x58) {
      goto LABEL_53;
    }
    if ((unint64_t)(v8 - v21) < 0x20) {
      goto LABEL_53;
    }
    unint64_t v30 = ((unint64_t)(v16 - 8) >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v32 = &v9[-v31];
    uint64_t v22 = (void *)((char *)v22 - v31);
    int64_t v33 = &v21[8 * v17 - 16];
    uint64_t v34 = v9 - 16;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *int64_t v33 = v36;
      v33 -= 2;
      v34 -= 32;
      v35 -= 4;
    }
    while (v35);
    int v9 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        uint64_t v37 = *((void *)v9 - 1);
        v9 -= 8;
        *--uint64_t v22 = v37;
      }
      while (v9 != v8);
    }
    uint64_t v8 = (char *)*((void *)&v51 + 1);
    *((void *)&v51 + 1) = v22;
    *(void *)&long long v52 = v15;
    *((void *)&v52 + 1) = v23;
    if (!v8) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  int v12 = v11 + 9;
LABEL_23:
  v7((uint64_t)v47, v12);
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v24 || (uint64_t v25 = *(void *)(a1 + 72), (v26 = std::__shared_weak_count::lock(v24)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v27 = v26;
  atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v42 = a1 + 176;
  uint64_t v43 = QMIServiceMsg::create();
  int v44 = 25000;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 1174405120;
  v38[2] = ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
  v38[3] = &__block_descriptor_tmp_78_1;
  v38[4] = a1;
  v38[5] = v25;
  size_t v39 = v27;
  atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v41 = a2;
  uint64_t v28 = *a3;
  if (*a3) {
    uint64_t v28 = _Block_copy(v28);
  }
  size_t v40 = v28;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E6196488;
  aBlock[4] = v38;
  BOOL v29 = _Block_copy(aBlock);
  uint64_t v46 = v29;
  if (v43)
  {
    qmi::Client::send();
    BOOL v29 = v46;
  }
  if (v29) {
    _Block_release(v29);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v51);
}

void sub_1B8BE53C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  std::__shared_weak_count::__release_weak(v29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B8BE540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1B8BE5420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (v8)
      {
        int v9 = *(_DWORD *)(a2 + 4);
        BOOL v10 = v9 == 0;
        uint64_t v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_ERROR, "Error setting mask preset ID", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *(unsigned __int8 *)(a1 + 64);
          *(_DWORD *)buf = 67109120;
          int v18 = v12;
          _os_log_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_DEFAULT, "#I Logging preset ID set to: %u", buf, 8u);
        }
        int v13 = *(const void **)(a1 + 56);
        if (v13)
        {
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 1174405120;
          v14[2] = ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_72;
          v14[3] = &__block_descriptor_tmp_75_4;
          aBlock = _Block_copy(v13);
          BOOL v16 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v14);
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8BE5610(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_72(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void diag::QMICommandDriver::isCurrentPresetID_sync(uint64_t a1, char a2, void **a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v6;
  v22[1] = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  char v7 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v7 || (uint64_t v8 = *(void *)(a1 + 72), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v10 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v17 = a1 + 176;
  uint64_t v18 = QMIServiceMsg::create();
  int v19 = 25000;
  uint64_t v20 = 0;
  int v21 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_88_1;
  void v13[4] = a1;
  v13[5] = v8;
  uint64_t v14 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v16 = a2;
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v15 = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15DIAGGetPresetID8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61964B0;
  aBlock[4] = v13;
  int v12 = _Block_copy(aBlock);
  int v21 = v12;
  if (v18)
  {
    qmi::Client::send();
    int v12 = v21;
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
}

void sub_1B8BE5830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8BE587C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = std::__shared_weak_count::lock(v3);
    uint64_t v32 = v6;
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v31 = v8;
      if (!v8)
      {
LABEL_19:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v29[0] = 0;
      v29[1] = v29;
      v29[2] = 0x2000000000;
      int v9 = *((_DWORD *)a2 + 1);
      BOOL v30 = v9 == 0;
      if (v9)
      {
        BOOL v10 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error setting mask preset ID", buf, 2u);
          uint64_t v11 = *(const void **)(a1 + 56);
          if (!v11) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v11 = *(const void **)(a1 + 56);
          if (!v11) {
            goto LABEL_18;
          }
        }
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 1174405120;
        v17[2] = ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_82;
        v17[3] = &unk_1F12693B8;
        v17[4] = v29;
        aBlock = _Block_copy(v11);
        ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v17);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      else
      {
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 1174405120;
        int v21 = ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
        uint64_t v22 = &unk_1F1269380;
        uint64_t v23 = v29;
        uint64_t v24 = v5;
        char v28 = *(unsigned char *)(a1 + 64);
        int v12 = *(void **)(a1 + 56);
        if (v12) {
          int v12 = _Block_copy(v12);
        }
        uint64_t v25 = v12;
        uint64_t v26 = v8;
        size_t v27 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v15 = (uint8_t *)TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v14, (const unsigned __int8 *)1);
          buf[0] = *v15;
          v21((uint64_t)v20, buf);
        }
        char v16 = v27;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (v25) {
          _Block_release(v25);
        }
      }
LABEL_18:
      _Block_object_dispose(v29, 8);
      char v7 = v32;
      if (!v32) {
        return;
      }
      goto LABEL_19;
    }
  }
}

void sub_1B8BE5B44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 1, v2, v3);
  JUMPOUT(0x1B8BE5A48);
}

void sub_1B8BE5B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v23);
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Block_object_dispose((const void *)(v24 - 112), 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v24 - 80);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned __int8 *)(a1 + 72) == v3;
  uint64_t v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v12 = v3;
    _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Current logging preset ID is: %u", buf, 8u);
  }
  long long v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    v9[2] = ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_79;
    v9[3] = &unk_1F1269348;
    uint64_t v8 = _Block_copy(v6);
    v9[4] = *(void *)(a1 + 32);
    aBlock = v8;
    ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v9);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
}

void sub_1B8BE5CEC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_79(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void *__copy_helper_block_e8_40c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)(a2 + 40);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void *__copy_helper_block_e8_48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c48_ZTSNSt3__110shared_ptrIN4diag13CommandDriverEEE(void *a1, void *a2)
{
  __n128 result = (void *)a2[6];
  if (result) {
    __n128 result = _Block_copy(result);
  }
  uint64_t v6 = a2[7];
  uint64_t v5 = a2[8];
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c48_ZTSNSt3__110shared_ptrIN4diag13CommandDriverEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(const void **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(const void **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  _Block_release(v3);
}

uint64_t ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_82(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void diag::QMICommandDriver::isCurrentInterface_sync(uint64_t a1, int a2, void **a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v6;
  v22[1] = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v7 || (uint64_t v8 = *(void *)(a1 + 72), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v10 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v17 = a1 + 176;
  uint64_t v18 = QMIServiceMsg::create();
  int v19 = 25000;
  uint64_t v20 = 0;
  int v21 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_103_1;
  void v13[4] = a1;
  v13[5] = v8;
  int v14 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v16 = a2;
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v15 = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm9DIAGProbe8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61964D8;
  aBlock[4] = v13;
  int v12 = _Block_copy(aBlock);
  int v21 = v12;
  if (v18)
  {
    qmi::Client::send();
    int v12 = v21;
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
}

void sub_1B8BE6050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8BE609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  int v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = std::__shared_weak_count::lock(v3);
    uint64_t v32 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v31 = v8;
      if (!v8)
      {
LABEL_19:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v29[0] = 0;
      v29[1] = v29;
      v29[2] = 0x2000000000;
      int v9 = *((_DWORD *)a2 + 1);
      BOOL v30 = v9 == 0;
      if (v9)
      {
        BOOL v10 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error checking for active DIAG interface", buf, 2u);
          uint64_t v11 = *(const void **)(a1 + 56);
          if (!v11) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v11 = *(const void **)(a1 + 56);
          if (!v11) {
            goto LABEL_18;
          }
        }
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 1174405120;
        v17[2] = ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_97;
        v17[3] = &unk_1F1269490;
        v17[4] = v29;
        aBlock = _Block_copy(v11);
        ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v17);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      else
      {
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 1174405120;
        int v21 = ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
        uint64_t v22 = &unk_1F1269458;
        uint64_t v23 = v29;
        uint64_t v24 = v5;
        int v28 = *(_DWORD *)(a1 + 64);
        int v12 = *(void **)(a1 + 56);
        if (v12) {
          int v12 = _Block_copy(v12);
        }
        uint64_t v25 = v12;
        uint64_t v26 = v8;
        size_t v27 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v15 = (uint8_t *)TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v14, (const unsigned __int8 *)1);
          buf[0] = *v15;
          v21((uint64_t)v20, (char *)buf);
        }
        int v16 = v27;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (v25) {
          _Block_release(v25);
        }
      }
LABEL_18:
      _Block_object_dispose(v29, 8);
      uint64_t v7 = v32;
      if (!v32) {
        return;
      }
      goto LABEL_19;
    }
  }
}

void sub_1B8BE6364(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 1, v2, v3);
  JUMPOUT(0x1B8BE6268);
}

void sub_1B8BE639C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v23);
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Block_object_dispose((const void *)(v24 - 112), 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v24 - 80);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t a1, char *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *a2;
  if (v4 > 2)
  {
    uint64_t v5 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a1 + 72) == dword_1B8C3664C[v4];
    uint64_t v5 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
  }
  capabilities::diag::asString();
  if (v13 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  *(_DWORD *)buf = 136315138;
  uint64_t v15 = p_p;
  _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Current DIAG interface is: %s", buf, 0xCu);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_9:
    uint64_t v7 = *(const void **)(a1 + 48);
    if (!v7) {
      return;
    }
    goto LABEL_10;
  }
  operator delete(__p);
  uint64_t v7 = *(const void **)(a1 + 48);
  if (!v7) {
    return;
  }
LABEL_10:
  uint64_t v8 = *(void *)(a1 + 56);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_89;
  v10[3] = &unk_1F1269420;
  int v9 = _Block_copy(v7);
  v10[4] = *(void *)(a1 + 32);
  aBlock = v9;
  ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v10);
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8BE657C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_89(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_97(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t diag::QMICommandDriver::validateCommands_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1ED) != 0)
  {
    if (a2)
    {
      uint64_t v2 = a2 & 0xFFFFFFFE;
      unint64_t v4 = *(NSObject **)(a1 + 40);
      a1 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      if (a1)
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Set interface unsupported", (uint8_t *)v12, 2u);
      }
    }
    if ((v2 & 4) != 0)
    {
      a1 = capabilities::diag::supportsBuffering((capabilities::diag *)a1);
      if ((a1 & 1) == 0)
      {
        uint64_t v2 = v2 & 0xFFFFFFFB;
        uint64_t v5 = *(NSObject **)(v3 + 40);
        a1 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        if (a1)
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Set buffering mode unsupported", (uint8_t *)v12, 2u);
        }
      }
    }
    if ((v2 & 8) != 0)
    {
      a1 = capabilities::diag::supportsBuffering((capabilities::diag *)a1);
      if ((a1 & 1) == 0)
      {
        uint64_t v2 = v2 & 0xFFFFFFF7;
        long long v6 = *(NSObject **)(v3 + 40);
        a1 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        if (a1)
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I Set water marks unsupported", (uint8_t *)v12, 2u);
        }
      }
    }
    if ((v2 & 0x20) != 0)
    {
      a1 = capabilities::diag::supportsBuffering((capabilities::diag *)a1);
      if ((a1 & 1) == 0)
      {
        uint64_t v2 = v2 & 0xFFFFFFDF;
        uint64_t v7 = *(NSObject **)(v3 + 40);
        a1 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        if (a1)
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEFAULT, "#I Draining DIAG buffer unsupported", (uint8_t *)v12, 2u);
        }
      }
    }
    if ((v2 & 0x40) != 0)
    {
      a1 = capabilities::diag::supportsMultipleMasks((capabilities::diag *)a1);
      if ((a1 & 1) == 0)
      {
        uint64_t v2 = v2 & 0xFFFFFFBF;
        uint64_t v8 = *(NSObject **)(v3 + 40);
        a1 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        if (a1)
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I Setting logging preset ID unsupported", (uint8_t *)v12, 2u);
        }
      }
    }
    if ((v2 & 0x80) != 0 && (capabilities::diag::supportsMultipleMasks((capabilities::diag *)a1) & 1) == 0)
    {
      uint64_t v2 = v2 & 0xFFFFFF7F;
      int v9 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEFAULT, "#I Checking current logging preset ID unsupported", (uint8_t *)v12, 2u);
      }
    }
  }
  else
  {
    BOOL v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12[0] = 67109120;
      v12[1] = v2;
      _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Invalid QMI Command mask passed - 0x%x", (uint8_t *)v12, 8u);
    }
    return 0;
  }
  return v2;
}

void diag::QMICommandDriver::stop(diag::QMICommandDriver *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4diag16QMICommandDriver4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_105_1;
  v1[4] = this;
  ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN4diag16QMICommandDriver4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);
  char v3 = 11;
  strcpy((char *)__p, "Forced stop");
  diag::QMICommandDriver::onError_sync(v1, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B8BE6964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void diag::QMICommandDriver::perform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = diag::QMICommandDriver::validateCommands_sync(a1, a2);
  if (v9)
  {
    int v10 = v9;
    uint64_t block = 0;
    p_uint64_t block = (uint64_t)&block;
    uint64_t v75 = 0x2000000000;
    LODWORD(v76) = 0;
    uint64_t v69 = 0;
    uint64_t v70 = &v69;
    uint64_t v71 = 0x2000000000;
    char v72 = 1;
    if (v9)
    {
      v63[0] = MEMORY[0x1E4F143A8];
      v63[1] = 1174405120;
      v63[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
      v63[3] = &unk_1F1269530;
      v63[5] = &v69;
      v63[6] = a1;
      uint64_t v66 = a3;
      uint64_t v67 = a4;
      v63[4] = &block;
      int v68 = v9;
      uint64_t v11 = *(void **)a5;
      if (*(void *)a5) {
        uint64_t v11 = _Block_copy(v11);
      }
      int v12 = *(NSObject **)(a5 + 8);
      v64 = v11;
      dispatch_object_t v65 = v12;
      if (v12) {
        dispatch_retain(v12);
      }
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v63);
      if (v65) {
        dispatch_release(v65);
      }
      if (v64) {
        _Block_release(v64);
      }
    }
    if ((v10 & 4) != 0 && *((unsigned char *)v70 + 24))
    {
      v57[0] = MEMORY[0x1E4F143A8];
      v57[1] = 1174405120;
      v57[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_110;
      v57[3] = &unk_1F12695A0;
      uint64_t v60 = a3;
      uint64_t v61 = a4;
      v57[4] = &block;
      v57[5] = &v69;
      v57[6] = a1;
      int v62 = v10;
      uint64_t v13 = *(void **)a5;
      if (*(void *)a5) {
        uint64_t v13 = _Block_copy(v13);
      }
      int v14 = *(NSObject **)(a5 + 8);
      aBlock = v13;
      dispatch_object_t object = v14;
      if (v14) {
        dispatch_retain(v14);
      }
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v57);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
    }
    if ((v10 & 8) != 0 && *((unsigned char *)v70 + 24))
    {
      v51[0] = MEMORY[0x1E4F143A8];
      v51[1] = 1174405120;
      v51[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_118;
      v51[3] = &unk_1F1269610;
      uint64_t v54 = a3;
      uint64_t v55 = a4;
      v51[4] = &block;
      v51[5] = &v69;
      v51[6] = a1;
      int v56 = v10;
      uint64_t v15 = *(void **)a5;
      if (*(void *)a5) {
        uint64_t v15 = _Block_copy(v15);
      }
      uint64_t v16 = *(NSObject **)(a5 + 8);
      long long v52 = v15;
      dispatch_object_t v53 = v16;
      if (v16) {
        dispatch_retain(v16);
      }
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v51);
      if (v53) {
        dispatch_release(v53);
      }
      if (v52) {
        _Block_release(v52);
      }
    }
    if ((v10 & 0x20) != 0 && *((unsigned char *)v70 + 24))
    {
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 1174405120;
      void v47[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_126;
      v47[3] = &unk_1F1269680;
      v47[4] = &block;
      v47[5] = &v69;
      v47[6] = a1;
      int v50 = v10;
      uint64_t v17 = *(void **)a5;
      if (*(void *)a5) {
        uint64_t v17 = _Block_copy(v17);
      }
      uint64_t v18 = *(NSObject **)(a5 + 8);
      uint64_t v48 = v17;
      dispatch_object_t v49 = v18;
      if (v18) {
        dispatch_retain(v18);
      }
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v47);
      if (v49) {
        dispatch_release(v49);
      }
      if (v48) {
        _Block_release(v48);
      }
    }
    if ((v10 & 0x40) != 0 && *((unsigned char *)v70 + 24))
    {
      v41[0] = MEMORY[0x1E4F143A8];
      v41[1] = 1174405120;
      v41[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_134;
      v41[3] = &unk_1F12696F0;
      uint64_t v44 = a3;
      uint64_t v45 = a4;
      v41[4] = &block;
      v41[5] = &v69;
      v41[6] = a1;
      int v46 = v10;
      int v19 = *(void **)a5;
      if (*(void *)a5) {
        int v19 = _Block_copy(v19);
      }
      uint64_t v20 = *(NSObject **)(a5 + 8);
      uint64_t v42 = v19;
      dispatch_object_t v43 = v20;
      if (v20) {
        dispatch_retain(v20);
      }
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v41);
      if (v43) {
        dispatch_release(v43);
      }
      if (v42) {
        _Block_release(v42);
      }
    }
    if ((v10 & 0x80) != 0 && *((unsigned char *)v70 + 24))
    {
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 1174405120;
      v35[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_142;
      v35[3] = &unk_1F1269760;
      uint64_t v38 = a3;
      uint64_t v39 = a4;
      v35[4] = &block;
      v35[5] = &v69;
      v35[6] = a1;
      int v40 = v10;
      int v21 = *(void **)a5;
      if (*(void *)a5) {
        int v21 = _Block_copy(v21);
      }
      uint64_t v22 = *(NSObject **)(a5 + 8);
      long long v36 = v21;
      dispatch_object_t v37 = v22;
      if (v22) {
        dispatch_retain(v22);
      }
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v35);
      if (v37) {
        dispatch_release(v37);
      }
      if (v36) {
        _Block_release(v36);
      }
    }
    if ((v10 & 0x100) != 0 && *((unsigned char *)v70 + 24))
    {
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 1174405120;
      v29[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_150;
      void v29[3] = &unk_1F12697D0;
      uint64_t v32 = a3;
      uint64_t v33 = a4;
      v29[4] = &block;
      v29[5] = &v69;
      v29[6] = a1;
      int v34 = v10;
      uint64_t v23 = *(void **)a5;
      if (*(void *)a5) {
        uint64_t v23 = _Block_copy(v23);
      }
      uint64_t v24 = (uint64_t *)(a1 + 72);
      uint64_t v25 = *(NSObject **)(a5 + 8);
      BOOL v30 = v23;
      dispatch_object_t v31 = v25;
      if (v25) {
        dispatch_retain(v25);
      }
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped(v24, (uint64_t)v29);
      if (v31) {
        dispatch_release(v31);
      }
      if (v30) {
        _Block_release(v30);
      }
    }
    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&block, 8);
  }
  else
  {
    if (*(void *)a5) {
      uint64_t v26 = _Block_copy(*(const void **)a5);
    }
    else {
      uint64_t v26 = 0;
    }
    size_t v27 = *(NSObject **)(a5 + 8);
    uint64_t block = MEMORY[0x1E4F143A8];
    p_uint64_t block = 1174405120;
    uint64_t v75 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    uint64_t v76 = &__block_descriptor_tmp_185_0;
    if (v26) {
      int v28 = _Block_copy(v26);
    }
    else {
      int v28 = 0;
    }
    uint64_t v77 = v28;
    char v78 = 1;
    dispatch_async(v27, &block);
    if (v77) {
      _Block_release(v77);
    }
    if (v26) {
      _Block_release(v26);
    }
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    capabilities::diag::asString();
    unint64_t v4 = v16 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    uint64_t v18 = v4;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting interface to: %s", buf, 0xCu);
    if (v16 < 0) {
      operator delete(__p);
    }
  }
  int v5 = *(_DWORD *)(a1 + 72);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_106;
  aBlock[3] = &unk_1F12694F8;
  long long v10 = *(_OWORD *)(a1 + 32);
  int v13 = *(_DWORD *)(a1 + 88);
  long long v6 = *(void **)(a1 + 56);
  if (v6) {
    long long v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(NSObject **)(a1 + 64);
  uint64_t v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = _Block_copy(aBlock);
  int v14 = v8;
  diag::QMICommandDriver::setInterface_sync(v2, v5, &v14);
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
}

void sub_1B8BE7184(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_106(uint64_t a1, char a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 1u;
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v5 = *(const void **)(a1 + 48);
    char v7 = *(unsigned char *)(*(void *)(v6 + 8) + 24);
    if (v5) {
      uint64_t v8 = _Block_copy(v5);
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_185_0;
    if (v8) {
      long long v10 = _Block_copy(v8);
    }
    else {
      long long v10 = 0;
    }
    aBlock = v10;
    char v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v8) {
      _Block_release(v8);
    }
  }
}

void __copy_helper_block_e8_48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a2 + 48);
  if (v4) {
    unint64_t v4 = _Block_copy(v4);
  }
  int v5 = *(NSObject **)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = *(const void **)(a1 + 48);
  if (v3) {
    _Block_release(v3);
  }
}

void __copy_helper_block_e8_56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a2 + 56);
  if (v4) {
    unint64_t v4 = _Block_copy(v4);
  }
  int v5 = *(NSObject **)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = *(const void **)(a1 + 56);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_110(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    capabilities::diag::asString();
    unint64_t v4 = v16 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    uint64_t v18 = v4;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting buffering mode to: %s", buf, 0xCu);
    if (v16 < 0) {
      operator delete(__p);
    }
  }
  int v5 = *(_DWORD *)(a1 + 76);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_111;
  aBlock[3] = &unk_1F1269568;
  long long v10 = *(_OWORD *)(a1 + 32);
  int v13 = *(_DWORD *)(a1 + 88);
  uint64_t v6 = *(void **)(a1 + 56);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  char v7 = *(NSObject **)(a1 + 64);
  uint64_t v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = _Block_copy(aBlock);
  int v14 = v8;
  diag::QMICommandDriver::setBufferingMode_sync(v2, v5, &v14);
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
}

void sub_1B8BE75CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_111(uint64_t a1, char a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 4u;
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v5 = *(const void **)(a1 + 48);
    char v7 = *(unsigned char *)(*(void *)(v6 + 8) + 24);
    if (v5) {
      uint64_t v8 = _Block_copy(v5);
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_185_0;
    if (v8) {
      long long v10 = _Block_copy(v8);
    }
    else {
      long long v10 = 0;
    }
    aBlock = v10;
    char v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v8) {
      _Block_release(v8);
    }
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_118(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)(a1 + 82);
    int v5 = *(unsigned __int16 *)(a1 + 80);
    *(_DWORD *)buf = 67109376;
    int v18 = v4;
    __int16 v19 = 1024;
    int v20 = v5;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting water marks to: %u,%u", buf, 0xEu);
  }
  __int16 v6 = *(_WORD *)(a1 + 82);
  __int16 v7 = *(_WORD *)(a1 + 80);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_119;
  v11[3] = &unk_1F12695D8;
  long long v12 = *(_OWORD *)(a1 + 32);
  int v15 = *(_DWORD *)(a1 + 88);
  uint64_t v8 = *(void **)(a1 + 56);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  int v9 = *(NSObject **)(a1 + 64);
  aBlock = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  long long v10 = _Block_copy(v11);
  char v16 = v10;
  diag::QMICommandDriver::setWaterMarks_sync(v2, v6, v7, &v16);
  if (v10) {
    _Block_release(v10);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8BE78CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_119(uint64_t a1, char a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 8u;
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v5 = *(const void **)(a1 + 48);
    char v7 = *(unsigned char *)(*(void *)(v6 + 8) + 24);
    if (v5) {
      uint64_t v8 = _Block_copy(v5);
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_185_0;
    if (v8) {
      long long v10 = _Block_copy(v8);
    }
    else {
      long long v10 = 0;
    }
    aBlock = v10;
    char v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v8) {
      _Block_release(v8);
    }
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_126(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Draining Baseband DIAG buffer", buf, 2u);
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_127;
  v7[3] = &unk_1F1269648;
  long long v8 = *(_OWORD *)(a1 + 32);
  int v11 = *(_DWORD *)(a1 + 72);
  int v4 = *(void **)(a1 + 56);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  int v5 = *(NSObject **)(a1 + 64);
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = _Block_copy(v7);
  long long v12 = v6;
  diag::QMICommandDriver::drainBuffer_sync(v2, &v12);
  if (v6) {
    _Block_release(v6);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8BE7B74(_Unwind_Exception *a1)
{
  if (v1) {
    _Block_release(v1);
  }
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v2);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_127(uint64_t a1, char a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 0x20u;
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v5 = *(const void **)(a1 + 48);
    char v7 = *(unsigned char *)(*(void *)(v6 + 8) + 24);
    if (v5) {
      long long v8 = _Block_copy(v5);
    }
    else {
      long long v8 = 0;
    }
    int v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_185_0;
    if (v8) {
      long long v10 = _Block_copy(v8);
    }
    else {
      long long v10 = 0;
    }
    aBlock = v10;
    char v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v8) {
      _Block_release(v8);
    }
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_134(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 84);
    *(_DWORD *)buf = 67109120;
    int v16 = v4;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting logging preset ID to: %u", buf, 8u);
  }
  char v5 = *(unsigned char *)(a1 + 84);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_135;
  v9[3] = &unk_1F12696B8;
  long long v10 = *(_OWORD *)(a1 + 32);
  int v13 = *(_DWORD *)(a1 + 88);
  uint64_t v6 = *(void **)(a1 + 56);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  char v7 = *(NSObject **)(a1 + 64);
  aBlock = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  long long v8 = _Block_copy(v9);
  int v14 = v8;
  diag::QMICommandDriver::setPresetID_sync(v2, v5, &v14);
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8BE7E34(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_135(uint64_t a1, char a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 0x40u;
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    char v5 = *(const void **)(a1 + 48);
    char v7 = *(unsigned char *)(*(void *)(v6 + 8) + 24);
    if (v5) {
      long long v8 = _Block_copy(v5);
    }
    else {
      long long v8 = 0;
    }
    int v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_185_0;
    if (v8) {
      long long v10 = _Block_copy(v8);
    }
    else {
      long long v10 = 0;
    }
    aBlock = v10;
    char v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v8) {
      _Block_release(v8);
    }
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_142(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 84);
    *(_DWORD *)buf = 67109120;
    int v16 = v4;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Checking if DIAG preset ID is: %u", buf, 8u);
  }
  char v5 = *(unsigned char *)(a1 + 84);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_143;
  v9[3] = &unk_1F1269728;
  long long v10 = *(_OWORD *)(a1 + 32);
  int v13 = *(_DWORD *)(a1 + 88);
  uint64_t v6 = *(void **)(a1 + 56);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  char v7 = *(NSObject **)(a1 + 64);
  aBlock = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  long long v8 = _Block_copy(v9);
  int v14 = v8;
  diag::QMICommandDriver::isCurrentPresetID_sync(v2, v5, &v14);
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8BE8114(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_143(uint64_t a1, char a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 0x80u;
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    char v5 = *(const void **)(a1 + 48);
    char v7 = *(unsigned char *)(*(void *)(v6 + 8) + 24);
    if (v5) {
      long long v8 = _Block_copy(v5);
    }
    else {
      long long v8 = 0;
    }
    int v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_185_0;
    if (v8) {
      long long v10 = _Block_copy(v8);
    }
    else {
      long long v10 = 0;
    }
    aBlock = v10;
    char v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v8) {
      _Block_release(v8);
    }
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_150(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    capabilities::diag::asString();
    int v4 = v16 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    int v18 = v4;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Checking if DIAG is active on: %s", buf, 0xCu);
    if (v16 < 0) {
      operator delete(__p);
    }
  }
  int v5 = *(_DWORD *)(a1 + 72);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_151;
  aBlock[3] = &unk_1F1269798;
  long long v10 = *(_OWORD *)(a1 + 32);
  int v13 = *(_DWORD *)(a1 + 88);
  uint64_t v6 = *(void **)(a1 + 56);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  char v7 = *(NSObject **)(a1 + 64);
  int v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  long long v8 = _Block_copy(aBlock);
  int v14 = v8;
  diag::QMICommandDriver::isCurrentInterface_sync(v2, v5, &v14);
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
}

void sub_1B8BE8424(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_151(uint64_t a1, char a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 0x100u;
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v5 = *(const void **)(a1 + 48);
    char v7 = *(unsigned char *)(*(void *)(v6 + 8) + 24);
    if (v5) {
      long long v8 = _Block_copy(v5);
    }
    else {
      long long v8 = 0;
    }
    int v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_185_0;
    if (v8) {
      long long v10 = _Block_copy(v8);
    }
    else {
      long long v10 = 0;
    }
    aBlock = v10;
    char v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v8) {
      _Block_release(v8);
    }
  }
}

uint64_t ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(diag::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)diag::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1269910;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1269910;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<diag::QMICommandDriver *,std::shared_ptr<diag::QMICommandDriver> ctu::SharedSynchronizable<diag::CommandDriver>::make_shared_ptr<diag::QMICommandDriver>(diag::QMICommandDriver*)::{lambda(diag::QMICommandDriver *)#1},std::allocator<diag::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::QMICommandDriver *,std::shared_ptr<diag::QMICommandDriver> ctu::SharedSynchronizable<diag::CommandDriver>::make_shared_ptr<diag::QMICommandDriver>(diag::QMICommandDriver*)::{lambda(diag::QMICommandDriver *)#1},std::allocator<diag::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<diag::QMICommandDriver *,std::shared_ptr<diag::QMICommandDriver> ctu::SharedSynchronizable<diag::CommandDriver>::make_shared_ptr<diag::QMICommandDriver>(diag::QMICommandDriver*)::{lambda(diag::QMICommandDriver *)#1},std::allocator<diag::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4diag13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4diag13CommandDriverEE15make_shared_ptrINS1_16QMICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4diag13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4diag13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<diag::QMICommandDriver> ctu::SharedSynchronizable<diag::CommandDriver>::make_shared_ptr<diag::QMICommandDriver>(diag::QMICommandDriver*)::{lambda(diag::QMICommandDriver*)#1}::operator() const(diag::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableIN4diag13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGConfig>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGConfig>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F12699B8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  long long v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F12699E8;
  block[5] = v5;
  long long v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  long long v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4diag13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4diag13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4diag13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B8BE8AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGBuffering>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGBuffering>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGBuffering>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F1269A40;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMLow>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMLow>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMLow>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F1269A90;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMHigh>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMHigh>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMHigh>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F1269AE0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGPresetID>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGPresetID>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGPresetID>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1269B30;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15DIAGGetPresetID8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BE8DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BE8DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BE8E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm9DIAGProbe8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BE8F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BE8F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BE8F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void data::QMIDataCommandDriver::checkError(const qmi::ResponseBase *a1@<X1>, CFTypeRef *a2@<X8>)
{
  *a2 = 0;
  if (!*((_DWORD *)a1 + 1)) {
    return;
  }
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[7] = v4;
  v26[8] = v4;
  v26[5] = v4;
  v26[6] = v4;
  v26[3] = v4;
  v26[4] = v4;
  v26[1] = v4;
  v26[2] = v4;
  long long v25 = v4;
  v26[0] = v4;
  *(_OWORD *)uint64_t v23 = v4;
  long long v24 = v4;
  long long v21 = v4;
  long long v22 = v4;
  long long v19 = v4;
  long long v20 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
  uint64_t v5 = (const char *)qmi::asString();
  size_t v6 = strlen(v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 3);
  long long v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)")", 2);
  if ((BYTE8(v25) & 0x10) != 0)
  {
    uint64_t v11 = v25;
    if ((unint64_t)v25 < *((void *)&v22 + 1))
    {
      *(void *)&long long v25 = *((void *)&v22 + 1);
      uint64_t v11 = *((void *)&v22 + 1);
    }
    long long v12 = (const void *)v22;
    size_t v9 = v11 - v22;
    if ((unint64_t)(v11 - v22) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_27;
    }
  }
  else
  {
    if ((BYTE8(v25) & 8) == 0)
    {
      size_t v9 = 0;
      HIBYTE(v17) = 0;
      long long v10 = __p;
      goto LABEL_15;
    }
    long long v12 = (const void *)*((void *)&v20 + 1);
    size_t v9 = *((void *)&v21 + 1) - *((void *)&v20 + 1);
    if (*((void *)&v21 + 1) - *((void *)&v20 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_27:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    long long v10 = operator new(v13 + 1);
    __p[1] = (void *)v9;
    unint64_t v17 = v14 | 0x8000000000000000;
    __p[0] = v10;
    goto LABEL_14;
  }
  HIBYTE(v17) = v9;
  long long v10 = __p;
  if (v9) {
LABEL_14:
  }
    memmove(v10, v12, v9);
LABEL_15:
  *((unsigned char *)v10 + v9) = 0;
  CreateError();
  if (&cf == a2) {
    goto LABEL_18;
  }
  CFTypeRef v15 = *a2;
  *a2 = cf;
  CFTypeRef cf = 0;
  if (v15)
  {
    CFRelease(v15);
LABEL_18:
    if (cf) {
      CFRelease(cf);
    }
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v19 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v19 + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v19 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9C8300](v26);
}

void sub_1B8BE9238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v16);
  _Unwind_Resume(a1);
}

uint64_t data::QMIDataCommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  size_t v6 = operator new(0xB0uLL);
  uint64_t v7 = (uint64_t)v6;
  long long v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  unint64_t v17 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  long long v10 = (std::__shared_weak_count *)a2[1];
  v15[0] = v9;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::QMIDataCommandDriver::QMIDataCommandDriver((uint64_t)v6, (uint64_t)&v16, (uint64_t)v15);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<data::QMIDataCommandDriver>::shared_ptr[abi:ne180100]<data::QMIDataCommandDriver,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 112))(*a3, v11, v12);
}

void sub_1B8BE9414(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8BE9428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t data::QMIDataCommandDriver::QMIDataCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(std::__shared_weak_count **)(a2 + 8);
  long long v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::CommandDriver::CommandDriver();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)a1 = &unk_1F1269B98;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return a1;
}

void sub_1B8BE9588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void data::CommandDriver::~CommandDriver(void **this)
{
  *this = &unk_1F126A148;
  if (*((char *)this + 143) < 0)
  {
    operator delete(this[15]);
    uint64_t v2 = (std::__shared_weak_count *)this[14];
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = (std::__shared_weak_count *)this[14];
    if (!v2)
    {
LABEL_6:
      *this = &unk_1F126A1D0;
      MEMORY[0x1BA9C75B0](this + 1);
      uint64_t v3 = this[12];
      if (!v3) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *this = &unk_1F126A1D0;
  MEMORY[0x1BA9C75B0](this + 1);
  uint64_t v3 = this[12];
  if (v3) {
LABEL_7:
  }
    dispatch_release(v3);
LABEL_8:
  long long v4 = this[11];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[10];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void data::QMIDataCommandDriver::~QMIDataCommandDriver(void **this)
{
  *this = &unk_1F1269B98;
  qmi::Client::~Client((qmi::Client *)(this + 18));

  data::CommandDriver::~CommandDriver(this);
}

{
  uint64_t vars8;

  *this = &unk_1F1269B98;
  qmi::Client::~Client((qmi::Client *)(this + 18));

  data::CommandDriver::~CommandDriver(this);
}

{
  void *v2;
  uint64_t vars8;

  *this = &unk_1F1269B98;
  qmi::Client::~Client((qmi::Client *)(this + 18));
  data::CommandDriver::~CommandDriver(this);

  operator delete(v2);
}

void data::QMIDataCommandDriver::init(data::QMIDataCommandDriver *this)
{
  uint64_t v5 = *((void *)this + 9);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  long long v4 = (uint64_t *)((char *)this + 72);
  if (!v3 || (size_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN4data20QMIDataCommandDriver4initEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_17_2;
  void v9[4] = this;
  void v9[5] = v5;
  long long v10 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v4, (uint64_t)v9);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN4data20QMIDataCommandDriver4initEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v54, *(Registry **)(v2 + 104));
  if (!v54)
  {
    Name = (const char *)data::CommandDriver::getName((data::CommandDriver *)v2);
    size_t v25 = strlen(Name);
    if (v25 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v26 = v25;
    if (v25 >= 0x17)
    {
      uint64_t v38 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17) {
        uint64_t v38 = v25 | 7;
      }
      uint64_t v39 = v38 + 1;
      p_dst = (void **)operator new(v38 + 1);
      size_t v49 = v26;
      unint64_t v50 = v39 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v50) = v25;
      p_dst = (void **)&__dst;
      if (!v25)
      {
        LOBYTE(__dst) = 0;
        int v28 = *(NSObject **)(v2 + 88);
        uint64_t v44 = v28;
        if (!v28)
        {
LABEL_46:
          BOOL v29 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v29 || (BOOL v30 = std::__shared_weak_count::lock(v29)) == 0) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          dispatch_object_t v31 = v30;
          atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v32 = std::__shared_weak_count::lock(v30);
            if (v32)
            {
LABEL_50:
              atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              dispatch_object_t v43 = v32;
LABEL_51:
              std::__shared_weak_count::__release_weak(v31);
              if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
              qmi::Client::createWithQueue();
              long long v33 = v53;
              long long v53 = 0uLL;
              int v34 = *(std::__shared_weak_count **)(v2 + 168);
              *(_OWORD *)(v2 + 160) = v33;
              if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
              qmi::Client::~Client((qmi::Client *)buf);
              if (v43) {
                std::__shared_weak_count::__release_weak(v43);
              }
              CFTypeRef v15 = v44;
              if (v44) {
                goto LABEL_28;
              }
              goto LABEL_29;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v31);
            uint64_t v32 = std::__shared_weak_count::lock(v31);
            if (v32) {
              goto LABEL_50;
            }
          }
          dispatch_object_t v43 = v32;
          goto LABEL_51;
        }
LABEL_45:
        dispatch_retain(v28);
        goto LABEL_46;
      }
    }
    memmove(p_dst, Name, v26);
    *((unsigned char *)p_dst + v26) = 0;
    int v28 = *(NSObject **)(v2 + 88);
    uint64_t v44 = v28;
    if (!v28) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  long long v4 = (const char *)data::CommandDriver::getName((data::CommandDriver *)v2);
  size_t v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v35 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v35 = v5 | 7;
    }
    uint64_t v36 = v35 + 1;
    uint64_t v7 = (void **)operator new(v35 + 1);
    size_t v49 = v6;
    unint64_t v50 = v36 | 0x8000000000000000;
    __dst = v7;
LABEL_64:
    memmove(v7, v4, v6);
    *((unsigned char *)v7 + v6) = 0;
    long long v8 = *(NSObject **)(v2 + 88);
    unint64_t v47 = v8;
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  HIBYTE(v50) = v5;
  uint64_t v7 = (void **)&__dst;
  if (v5) {
    goto LABEL_64;
  }
  LOBYTE(__dst) = 0;
  long long v8 = *(NSObject **)(v2 + 88);
  unint64_t v47 = v8;
  if (v8) {
LABEL_8:
  }
    dispatch_retain(v8);
LABEL_9:
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v9 || (long long v10 = std::__shared_weak_count::lock(v9)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v12 = std::__shared_weak_count::lock(v11);
    if (v12) {
      goto LABEL_13;
    }
LABEL_67:
    int v46 = v12;
    goto LABEL_14;
  }
  uint64_t v12 = std::__shared_weak_count::lock(v10);
  if (!v12) {
    goto LABEL_67;
  }
LABEL_13:
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v46 = v12;
LABEL_14:
  std::__shared_weak_count::__release_weak(v11);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v45 = (std::__shared_weak_count *)v55;
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v13 = v53;
  long long v53 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v2 + 168);
  *(_OWORD *)(v2 + 160) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
  CFTypeRef v15 = v47;
  if (v47) {
LABEL_28:
  }
    dispatch_release(v15);
LABEL_29:
  if (SHIBYTE(v50) < 0) {
    operator delete(__dst);
  }
  uint64_t v16 = (qmi::Client *)(v2 + 144);
  unint64_t v17 = (std::__shared_weak_count *)a1[6];
  uint64_t v42 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  int v18 = (std::__shared_weak_count *)a1[6];
  char v41 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  long long v19 = (std::__shared_weak_count *)a1[6];
  int v40 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  *(void *)buf = 0;
  long long v52 = 0;
  long long v20 = (std::__shared_weak_count *)a1[6];
  if (v20)
  {
    long long v21 = std::__shared_weak_count::lock(v20);
    if (v21)
    {
      long long v22 = v21;
      uint64_t v23 = a1[5];
      atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)buf = v23;
      long long v52 = v21;
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      *(void *)buf = 0;
      long long v52 = 0;
    }
  }
  qmi::Client::setClientHandle();
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  qmi::Client::start(v16);
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  dispatch_object_t v37 = (std::__shared_weak_count *)v55;
  if (v55)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v55 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1B8BEA120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,dispatch_object_t object,char a34)
{
  if (a32)
  {
    std::__shared_weak_count::__release_weak(a32);
    if ((*(char *)(v34 - 161) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v36 = object;
      if (!object) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v34 - 161) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v34 - 184));
  uint64_t v36 = object;
  if (!object)
  {
LABEL_8:
    if (*(char *)(v34 - 129) < 0)
    {
      operator delete(*(void **)(v34 - 152));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 96);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 96);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v36);
  goto LABEL_8;
}

void ___ZN4data20QMIDataCommandDriver4initEv_block_invoke_4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        size_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I Stopped", v7, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4data13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4data13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4data20QMIDataCommandDriver4initEv_block_invoke_6(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        size_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I Started", v7, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN4data20QMIDataCommandDriver4initEv_block_invoke_10(void *a1, xpc_object_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    size_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        if (a2) {
          xpc_retain(a2);
        }
        else {
          a2 = xpc_null_create();
        }
        long long v8 = (void *)MEMORY[0x1BA9C88A0](a2);
        uint64_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v11 = v8;
          _os_log_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEFAULT, "#I Server error %s", buf, 0xCu);
        }
        free(v8);
        xpc_release(a2);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8BEA5D4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void data::QMIDataCommandDriver::getDataAggregationMaxDatagrams(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_26_3;
  void v7[4] = a1;
  long long v4 = *(void **)a2;
  if (*(void *)a2) {
    long long v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  size_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = v3;
  long long v19 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v18);
  long long v4 = (const void **)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1) != (void)v19)
  {
    while (*((unsigned char *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v19) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v19)
  {
LABEL_8:
    size_t v6 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v18, 16);
  }
  else
  {
    if (!v5) {
      __cxa_bad_cast();
    }
    size_t v6 = v5 + 12;
  }
  *(void *)size_t v6 = 0x400000003;
  uint64_t v13 = v2 + 144;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3;
  v10[3] = &__block_descriptor_tmp_23_5;
  v10[4] = v2;
  uint64_t v7 = (void *)a1[5];
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  long long v8 = a1[6];
  uint64_t v11 = v7;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13GetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61965A0;
  void aBlock[4] = v10;
  uint64_t v9 = _Block_copy(aBlock);
  unint64_t v17 = v9;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v9 = v17;
  }
  if (v9) {
    _Block_release(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v18);
}

void sub_1B8BEA8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BEA910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BEA924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  CFTypeRef v4 = cf;
  if (cf) {
    uint64_t v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    if (!*(void *)(a1 + 40) || !*(void *)(a1 + 48)) {
      goto LABEL_42;
    }
    if (cf) {
      CFRetain(cf);
    }
    xpc_object_t v6 = xpc_null_create();
    uint64_t v7 = *(const void **)(a1 + 40);
    if (v7) {
      uint64_t v8 = _Block_copy(v7);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v14 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_175_0;
    if (v8)
    {
      uint64_t v23 = _Block_copy(v8);
      CFTypeRef v24 = v4;
      if (!v4) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v23 = 0;
      CFTypeRef v24 = v4;
      if (!v4)
      {
LABEL_31:
        xpc_object_t v25 = v6;
        if (v6) {
          xpc_retain(v6);
        }
        else {
          xpc_object_t v25 = xpc_null_create();
        }
        dispatch_async(v14, block);
        xpc_release(v25);
        xpc_object_t v25 = 0;
        if (v24) {
          CFRelease(v24);
        }
        if (v23) {
          _Block_release(v23);
        }
        if (v8) {
          _Block_release(v8);
        }
        xpc_release(v6);
        if (v4) {
          CFRelease(v4);
        }
        goto LABEL_42;
      }
    }
    CFRetain(v4);
    goto LABEL_31;
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  uint64_t v16 = ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4;
  unint64_t v17 = &__block_descriptor_tmp_21_5;
  uint64_t v9 = *(void **)(a1 + 40);
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  uint64_t v10 = *(NSObject **)(a1 + 48);
  aBlock = v9;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  CFTypeRef v20 = cf;
  if (cf) {
    CFRetain(cf);
  }
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v13 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v12, (const unsigned __int8 *)4);
    LODWORD(block[0]) = *(_DWORD *)v13;
    v16(v15, (int *)block);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
LABEL_42:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BEABEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 21, v2, v3);
  JUMPOUT(0x1B8BEAA88);
}

void sub_1B8BEAC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4(void *a1, int *a2)
{
  int v2 = *a2;
  int v10 = -1431655935;
  uint64_t v9 = &unk_1F12627F0;
  int v11 = v2;
  if (!a1[4] || !a1[5]) {
    return;
  }
  CFTypeRef v4 = (void *)a1[6];
  object[1] = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::data::DataAggregationMaxDatagrams::toDict((abm::data::DataAggregationMaxDatagrams *)&v9, object);
  uint64_t v5 = (const void *)a1[4];
  if (v5) {
    xpc_object_t v6 = _Block_copy(v5);
  }
  else {
    xpc_object_t v6 = 0;
  }
  uint64_t v7 = a1[5];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_175_0;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    CFTypeRef cf = v4;
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  aBlock = 0;
  CFTypeRef cf = v4;
  if (v4) {
LABEL_12:
  }
    CFRetain(v4);
LABEL_13:
  xpc_object_t v15 = object[0];
  if (object[0]) {
    xpc_retain(object[0]);
  }
  else {
    xpc_object_t v15 = xpc_null_create();
  }
  dispatch_async(v7, block);
  xpc_release(v15);
  xpc_object_t v15 = 0;
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  xpc_release(object[0]);
  object[0] = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B8BEAE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c92_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE48c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(void *a1, void *a2)
{
  CFTypeRef v4 = (void *)a2[4];
  if (v4) {
    CFTypeRef v4 = _Block_copy(v4);
  }
  uint64_t v5 = a2[5];
  a1[4] = v4;
  a1[5] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  CFTypeRef result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c92_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE48c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(void *a1)
{
  int v2 = (const void *)a1[6];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  CFTypeRef v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void __copy_helper_block_e8_40c92_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = *(void **)(a2 + 40);
  if (v4) {
    CFTypeRef v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c92_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void data::QMIDataCommandDriver::getDataAggregationMaxSize(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_41_3;
  void v7[4] = a1;
  CFTypeRef v4 = *(void **)a2;
  if (*(void *)a2) {
    CFTypeRef v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  xpc_object_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = v3;
  long long v19 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v18);
  CFTypeRef v4 = (const void **)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1) != (void)v19)
  {
    while (*((unsigned char *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v19) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v19)
  {
LABEL_8:
    xpc_object_t v6 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v18, 16);
  }
  else
  {
    if (!v5) {
      __cxa_bad_cast();
    }
    xpc_object_t v6 = v5 + 12;
  }
  *(void *)xpc_object_t v6 = 0x400000003;
  uint64_t v13 = v2 + 144;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3;
  v10[3] = &__block_descriptor_tmp_38_6;
  v10[4] = v2;
  uint64_t v7 = (void *)a1[5];
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = a1[6];
  int v11 = v7;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13GetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61965A0;
  void aBlock[4] = v10;
  uint64_t v9 = _Block_copy(aBlock);
  unint64_t v17 = v9;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v9 = v17;
  }
  if (v9) {
    _Block_release(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v18);
}

void sub_1B8BEB27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BEB2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BEB2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  xpc_object_t v4 = xpc_null_create();
  CFTypeRef v5 = cf;
  if (cf) {
    xpc_object_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    xpc_object_t v6 = 0;
  }
  if (v6)
  {
    if (!*(void *)(a1 + 40) || !*(void *)(a1 + 48)) {
      goto LABEL_42;
    }
    if (cf) {
      CFRetain(cf);
    }
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = *(const void **)(a1 + 40);
    if (v8) {
      uint64_t v9 = _Block_copy(v8);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v15 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_175_0;
    if (v9)
    {
      CFTypeRef v24 = _Block_copy(v9);
      CFTypeRef v25 = v5;
      if (!v5) {
        goto LABEL_31;
      }
    }
    else
    {
      CFTypeRef v24 = 0;
      CFTypeRef v25 = v5;
      if (!v5)
      {
LABEL_31:
        xpc_object_t v26 = v7;
        if (v7) {
          xpc_retain(v7);
        }
        else {
          xpc_object_t v26 = xpc_null_create();
        }
        dispatch_async(v15, block);
        xpc_release(v26);
        xpc_object_t v26 = 0;
        if (v25) {
          CFRelease(v25);
        }
        if (v24) {
          _Block_release(v24);
        }
        if (v9) {
          _Block_release(v9);
        }
        xpc_release(v7);
        if (v5) {
          CFRelease(v5);
        }
        goto LABEL_42;
      }
    }
    CFRetain(v5);
    goto LABEL_31;
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1174405120;
  unint64_t v17 = ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4;
  long long v18 = &__block_descriptor_tmp_35_1;
  uint64_t v10 = *(void **)(a1 + 40);
  if (v10) {
    uint64_t v10 = _Block_copy(v10);
  }
  int v11 = *(NSObject **)(a1 + 48);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  CFTypeRef v21 = cf;
  if (cf) {
    CFRetain(cf);
  }
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v14 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v13, (const unsigned __int8 *)4);
    LODWORD(block[0]) = *(_DWORD *)v14;
    v17(v16, (int *)block);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
LABEL_42:
  xpc_release(v4);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BEB594(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 22, v2, v3);
  JUMPOUT(0x1B8BEB424);
}

void sub_1B8BEB5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v11);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v10);
  xpc_release(v9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4(void *a1, int *a2)
{
  int v2 = *a2;
  int v10 = -1431655935;
  uint64_t v9 = &unk_1F1262838;
  int v11 = v2;
  if (!a1[4] || !a1[5]) {
    return;
  }
  xpc_object_t v4 = (void *)a1[6];
  object[1] = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::data::DataAggregationMaxSize::toDict((abm::data::DataAggregationMaxSize *)&v9, object);
  CFTypeRef v5 = (const void *)a1[4];
  if (v5) {
    xpc_object_t v6 = _Block_copy(v5);
  }
  else {
    xpc_object_t v6 = 0;
  }
  xpc_object_t v7 = a1[5];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_175_0;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    CFTypeRef cf = v4;
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  aBlock = 0;
  CFTypeRef cf = v4;
  if (v4) {
LABEL_12:
  }
    CFRetain(v4);
LABEL_13:
  xpc_object_t v15 = object[0];
  if (object[0]) {
    xpc_retain(object[0]);
  }
  else {
    xpc_object_t v15 = xpc_null_create();
  }
  dispatch_async(v7, block);
  xpc_release(v15);
  xpc_object_t v15 = 0;
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  xpc_release(object[0]);
  object[0] = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B8BEB7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void data::QMIDataCommandDriver::getDataFlowControl(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_55_1;
  void v7[4] = a1;
  xpc_object_t v4 = *(void **)a2;
  if (*(void *)a2) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  CFTypeRef v5 = (uint64_t *)(a1 + 72);
  xpc_object_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = v3;
  long long v19 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v18);
  xpc_object_t v4 = (const void **)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1) != (void)v19)
  {
    while (*((unsigned char *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v19) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v19)
  {
LABEL_8:
    xpc_object_t v6 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v18, 16);
  }
  else
  {
    if (!v5) {
      __cxa_bad_cast();
    }
    xpc_object_t v6 = v5 + 12;
  }
  *(void *)xpc_object_t v6 = 0x400000003;
  uint64_t v13 = v2 + 144;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3;
  v10[3] = &__block_descriptor_tmp_52_5;
  v10[4] = v2;
  xpc_object_t v7 = (void *)a1[5];
  if (v7) {
    xpc_object_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = a1[6];
  int v11 = v7;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm15GetQMAPSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61965C8;
  void aBlock[4] = v10;
  uint64_t v9 = _Block_copy(aBlock);
  unint64_t v17 = v9;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v9 = v17;
  }
  if (v9) {
    _Block_release(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v18);
}

void sub_1B8BEBAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BEBAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BEBAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  CFTypeRef v4 = cf;
  if (cf) {
    CFTypeRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (v5)
  {
    if (!*(void *)(a1 + 40) || !*(void *)(a1 + 48)) {
      goto LABEL_42;
    }
    if (cf) {
      CFRetain(cf);
    }
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = *(const void **)(a1 + 40);
    if (v7) {
      uint64_t v8 = _Block_copy(v7);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v14 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_175_0;
    if (v8)
    {
      uint64_t v23 = _Block_copy(v8);
      CFTypeRef v24 = v4;
      if (!v4) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v23 = 0;
      CFTypeRef v24 = v4;
      if (!v4)
      {
LABEL_31:
        xpc_object_t v25 = v6;
        if (v6) {
          xpc_retain(v6);
        }
        else {
          xpc_object_t v25 = xpc_null_create();
        }
        dispatch_async(v14, block);
        xpc_release(v25);
        xpc_object_t v25 = 0;
        if (v24) {
          CFRelease(v24);
        }
        if (v23) {
          _Block_release(v23);
        }
        if (v8) {
          _Block_release(v8);
        }
        xpc_release(v6);
        if (v4) {
          CFRelease(v4);
        }
        goto LABEL_42;
      }
    }
    CFRetain(v4);
    goto LABEL_31;
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  uint64_t v16 = ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4;
  unint64_t v17 = &__block_descriptor_tmp_49_2;
  uint64_t v9 = *(void **)(a1 + 40);
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  uint64_t v10 = *(NSObject **)(a1 + 48);
  aBlock = v9;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  CFTypeRef v20 = cf;
  if (cf) {
    CFRetain(cf);
  }
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v13 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v12, (const unsigned __int8 *)1);
    LOBYTE(block[0]) = *(unsigned char *)v13 != 0;
    v16(v15, (char *)block);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
LABEL_42:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BEBDBC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 17, v2, v3);
  JUMPOUT(0x1B8BEBC58);
}

void sub_1B8BEBDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4(void *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v10 = 0xAAAAAAAAAAAAAA01;
  uint64_t v9 = &unk_1F1262880;
  BYTE1(v10) = v2;
  if (!a1[4] || !a1[5]) {
    return;
  }
  CFTypeRef v4 = (void *)a1[6];
  object[1] = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::data::DataFlowControl::toDict((abm::data::DataFlowControl *)&v9, object);
  CFTypeRef v5 = (const void *)a1[4];
  if (v5) {
    xpc_object_t v6 = _Block_copy(v5);
  }
  else {
    xpc_object_t v6 = 0;
  }
  xpc_object_t v7 = a1[5];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_175_0;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    CFTypeRef cf = v4;
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  aBlock = 0;
  CFTypeRef cf = v4;
  if (v4) {
LABEL_12:
  }
    CFRetain(v4);
LABEL_13:
  xpc_object_t v14 = object[0];
  if (object[0]) {
    xpc_retain(object[0]);
  }
  else {
    xpc_object_t v14 = xpc_null_create();
  }
  dispatch_async(v7, block);
  xpc_release(v14);
  xpc_object_t v14 = 0;
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  xpc_release(object[0]);
  object[0] = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B8BEBFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void data::QMIDataCommandDriver::setQMAPSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_67_2;
  __int16 v9 = *(_WORD *)(a2 + 8);
  v8[4] = a1;
  v8[5] = &unk_1F1262880;
  CFTypeRef v5 = *(void **)a3;
  if (*(void *)a3) {
    CFTypeRef v5 = _Block_copy(v5);
  }
  xpc_object_t v6 = (uint64_t *)(a1 + 72);
  xpc_object_t v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v70 = v3;
  long long v71 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v70);
  v65[0] = MEMORY[0x1E4F143A8];
  v65[1] = 1174405120;
  CFTypeRef v4 = ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  uint64_t v66 = ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  uint64_t v67 = &__block_descriptor_tmp_56_3;
  __int16 v69 = *(_WORD *)(a1 + 48);
  int v68 = &unk_1F1262880;
  CFTypeRef v5 = (char *)*((void *)&v70 + 1);
  xpc_object_t v6 = (char *)v71;
  xpc_object_t v7 = (const void **)*((void *)&v70 + 1);
  if (*((void *)&v70 + 1) != (void)v71)
  {
    xpc_object_t v7 = (const void **)*((void *)&v70 + 1);
    while (*((unsigned char *)*v7 + 8) != 18)
    {
      if (++v7 == (const void **)v71) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == (const void **)v71)
  {
LABEL_9:
    unint64_t v10 = operator new(0x10uLL);
    int v11 = v10;
    v10[4] = 18;
    *(void *)unint64_t v10 = &unk_1F126A330;
    if ((unint64_t)v6 < *((void *)&v71 + 1))
    {
      *(void *)xpc_object_t v6 = v10;
      uint64_t v12 = (uint64_t)(v6 + 8);
LABEL_22:
      __int16 v9 = (char *)v11 + 9;
      *(void *)&long long v71 = v12;
      CFTypeRef v4 = v66;
      goto LABEL_23;
    }
    int64_t v13 = v6 - v5;
    uint64_t v14 = (v6 - v5) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      goto LABEL_84;
    }
    uint64_t v16 = *((void *)&v71 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v71 + 1) - (void)v5) >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        goto LABEL_85;
      }
      long long v18 = operator new(8 * v17);
      long long v19 = &v18[8 * v14];
      CFTypeRef v20 = &v18[8 * v17];
      *long long v19 = v11;
      uint64_t v12 = (uint64_t)(v19 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((void *)&v70 + 1) = v19;
        *(void *)&long long v71 = v12;
        *((void *)&v71 + 1) = v20;
        if (!v5) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      long long v18 = 0;
      long long v19 = (void *)(8 * v14);
      CFTypeRef v20 = 0;
      *(void *)(8 * v14) = v11;
      uint64_t v12 = 8 * v14 + 8;
      if (v5 == v6) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v13 - 8) < 0x58) {
      goto LABEL_88;
    }
    if ((unint64_t)(v5 - v18) < 0x20) {
      goto LABEL_88;
    }
    unint64_t v41 = ((unint64_t)(v13 - 8) >> 3) + 1;
    uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    dispatch_object_t v43 = &v6[-v42];
    long long v19 = (void *)((char *)v19 - v42);
    uint64_t v44 = &v18[8 * v14 - 16];
    uint64_t v45 = v6 - 16;
    uint64_t v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v47 = *(_OWORD *)v45;
      *(v44 - 1) = *((_OWORD *)v45 - 1);
      _OWORD *v44 = v47;
      v44 -= 2;
      v45 -= 32;
      v46 -= 4;
    }
    while (v46);
    xpc_object_t v6 = v43;
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_88:
      do
      {
        uint64_t v48 = *((void *)v6 - 1);
        v6 -= 8;
        *--long long v19 = v48;
      }
      while (v6 != v5);
    }
    CFTypeRef v5 = (char *)*((void *)&v70 + 1);
    *((void *)&v70 + 1) = v19;
    *(void *)&long long v71 = v12;
    *((void *)&v71 + 1) = v20;
    if (!v5) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v8) {
    goto LABEL_83;
  }
  __int16 v9 = v8 + 9;
LABEL_23:
  v4((uint64_t)v65, v9);
  CFTypeRef v21 = (char *)*((void *)&v70 + 1);
  long long v22 = (char *)v71;
  uint64_t v23 = (const void **)*((void *)&v70 + 1);
  if (*((void *)&v70 + 1) != (void)v71)
  {
    uint64_t v23 = (const void **)*((void *)&v70 + 1);
    while (*((unsigned char *)*v23 + 8) != 16)
    {
      if (++v23 == (const void **)v71) {
        goto LABEL_32;
      }
    }
  }
  if (v23 != (const void **)v71)
  {
    if (v24)
    {
      v24[9] = 0;
      if (v21 != v22) {
        goto LABEL_46;
      }
      goto LABEL_48;
    }
    goto LABEL_83;
  }
LABEL_32:
  xpc_object_t v25 = operator new(0x10uLL);
  xpc_object_t v26 = v25;
  v25[4] = 16;
  *(void *)xpc_object_t v25 = &unk_1F126A380;
  if ((unint64_t)v22 < *((void *)&v71 + 1))
  {
    *(void *)long long v22 = v25;
    uint64_t v27 = (uint64_t)(v22 + 8);
    goto LABEL_45;
  }
  int64_t v28 = v22 - v21;
  uint64_t v29 = (v22 - v21) >> 3;
  unint64_t v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61) {
LABEL_84:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  uint64_t v31 = *((void *)&v71 + 1) - (void)v21;
  if ((uint64_t)(*((void *)&v71 + 1) - (void)v21) >> 2 > v30) {
    unint64_t v30 = v31 >> 2;
  }
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v32 = v30;
  }
  if (v32)
  {
    if (!(v32 >> 61))
    {
      long long v33 = operator new(8 * v32);
      uint64_t v34 = &v33[8 * v29];
      uint64_t v35 = &v33[8 * v32];
      *uint64_t v34 = v26;
      uint64_t v27 = (uint64_t)(v34 + 1);
      if (v21 == v22) {
        goto LABEL_43;
      }
      goto LABEL_75;
    }
LABEL_85:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v33 = 0;
  uint64_t v34 = (void *)(8 * v29);
  uint64_t v35 = 0;
  *(void *)(8 * v29) = v26;
  uint64_t v27 = 8 * v29 + 8;
  if (v21 == v22)
  {
LABEL_43:
    *((void *)&v70 + 1) = v34;
    *(void *)&long long v71 = v27;
    *((void *)&v71 + 1) = v35;
    if (!v21) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_75:
  if ((unint64_t)(v28 - 8) < 0x58) {
    goto LABEL_89;
  }
  if ((unint64_t)(v21 - v33) < 0x20) {
    goto LABEL_89;
  }
  unint64_t v49 = ((unint64_t)(v28 - 8) >> 3) + 1;
  uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
  long long v51 = &v22[-v50];
  uint64_t v34 = (void *)((char *)v34 - v50);
  long long v52 = &v33[8 * v29 - 16];
  long long v53 = v22 - 16;
  uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v55 = *(_OWORD *)v53;
    *(v52 - 1) = *((_OWORD *)v53 - 1);
    *long long v52 = v55;
    v52 -= 2;
    v53 -= 32;
    v54 -= 4;
  }
  while (v54);
  long long v22 = v51;
  if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_89:
    do
    {
      uint64_t v56 = *((void *)v22 - 1);
      v22 -= 8;
      *--uint64_t v34 = v56;
    }
    while (v22 != v21);
  }
  CFTypeRef v21 = (char *)*((void *)&v70 + 1);
  *((void *)&v70 + 1) = v34;
  *(void *)&long long v71 = v27;
  *((void *)&v71 + 1) = v35;
  if (v21) {
LABEL_44:
  }
    operator delete(v21);
LABEL_45:
  *(void *)&long long v71 = v27;
  CFTypeRef v21 = (char *)*((void *)&v70 + 1);
  long long v22 = (char *)v27;
  *((unsigned char *)v26 + 9) = 0;
  if (v21 == (char *)v27)
  {
LABEL_48:
    uint64_t v36 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v70, 17);
    goto LABEL_49;
  }
LABEL_46:
  while (*(unsigned char *)(*(void *)v21 + 8) != 17)
  {
    v21 += 8;
    if (v21 == v22) {
      goto LABEL_48;
    }
  }
  if (v21 == v22) {
    goto LABEL_48;
  }
  if (!v40) {
LABEL_83:
  }
    __cxa_bad_cast();
  uint64_t v36 = v40 + 12;
LABEL_49:
  *(void *)uint64_t v36 = 0x400000003;
  uint64_t v60 = v2 + 144;
  uint64_t v61 = QMIServiceMsg::create();
  int v62 = 25000;
  uint64_t v63 = 0;
  v64 = 0;
  v57[0] = MEMORY[0x1E4F143A8];
  v57[1] = 1174405120;
  v57[2] = ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  v57[3] = &__block_descriptor_tmp_66_2;
  v57[4] = v2;
  dispatch_object_t v37 = *(void **)(a1 + 56);
  if (v37) {
    dispatch_object_t v37 = _Block_copy(v37);
  }
  uint64_t v38 = *(NSObject **)(a1 + 64);
  uint64_t v58 = v37;
  dispatch_object_t object = v38;
  if (v38) {
    dispatch_retain(v38);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm15SetQMAPSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61965F0;
  void aBlock[4] = v57;
  uint64_t v39 = _Block_copy(aBlock);
  v64 = v39;
  if (v61)
  {
    qmi::Client::send();
    uint64_t v39 = v64;
  }
  if (v39) {
    _Block_release(v39);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v58) {
    _Block_release(v58);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v70);
}

void sub_1B8BEC794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

void sub_1B8BEC7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1B8BEC7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 41);
  return result;
}

uint64_t __copy_helper_block_e8_32c29_ZTSN3abm4data12QMAPSettingsE(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  *(void *)(result + 32) = &unk_1F1262880;
  return result;
}

void ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  long long v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(void *)(a1 + 48)) {
    goto LABEL_20;
  }
  CFTypeRef v4 = cf;
  if (cf && (CFRetain(cf), (long long v3 = *(const void **)(a1 + 40)) == 0)) {
    CFTypeRef v5 = 0;
  }
  else {
    CFTypeRef v5 = _Block_copy(v3);
  }
  xpc_object_t v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_178_0;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    CFTypeRef v10 = v4;
    if (!v4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef v10 = v4;
  if (v4) {
LABEL_11:
  }
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10) {
    CFRelease(v10);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

void __copy_helper_block_e8_40c29_ZTSN3abm4data12QMAPSettingsE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 40) = &unk_1F1262880;
  CFTypeRef v4 = *(void **)(a2 + 56);
  if (v4) {
    CFTypeRef v4 = _Block_copy(v4);
  }
  CFTypeRef v5 = *(NSObject **)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_4056c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 56);
  if (v3) {
    _Block_release(v3);
  }
}

void data::QMIDataCommandDriver::setDataFormat(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_96_3;
  char v11 = *(unsigned char *)(a2 + 8);
  v10[4] = a1;
  void v10[5] = &unk_1F12627A8;
  int v12 = *(_DWORD *)(a2 + 12);
  char v14 = *(unsigned char *)(a2 + 24);
  int64_t v13 = &unk_1F12627F0;
  int v15 = *(_DWORD *)(a2 + 28);
  char v17 = *(unsigned char *)(a2 + 40);
  uint64_t v16 = &unk_1F1262838;
  int v18 = *(_DWORD *)(a2 + 44);
  xpc_object_t v7 = *(void **)a4;
  if (*(void *)a4) {
    xpc_object_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + 72);
  __int16 v9 = *(NSObject **)(a4 + 8);
  aBlock = v7;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  int v21 = a3;
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v8, (uint64_t)v10);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v218 = *(void *)(a1 + 32);
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v251 = v2;
  long long v252 = v2;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v251);
  int v3 = *(_DWORD *)(a1 + 52);
  uint64_t v219 = a1;
  if (!v3)
  {
LABEL_24:
    int v217 = 2048;
    int v4 = 1;
    goto LABEL_25;
  }
  if (v3 == 2)
  {
    int v4 = *(_DWORD *)(a1 + 68);
    int v217 = *(_DWORD *)(a1 + 84);
    int v5 = 9;
    goto LABEL_26;
  }
  if (v3 != 1)
  {
    v248 = (char *)operator new(0x20uLL);
    long long v249 = xmmword_1B8C36680;
    strcpy(v248, "Invalid DataAggregationProtocol");
    CreateError();
    xpc_object_t v6 = *(const void **)(a1 + 88);
    if (v6) {
      xpc_object_t v7 = _Block_copy(v6);
    }
    else {
      xpc_object_t v7 = 0;
    }
    uint64_t v8 = *(NSObject **)(v219 + 96);
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v254 = 1174405120;
    v255 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
    v256 = &__block_descriptor_tmp_178_0;
    if (v7)
    {
      __int16 v9 = _Block_copy(v7);
      CFTypeRef v10 = v250;
      v257 = v9;
      CFTypeRef v258 = v250;
      if (!v250) {
        goto LABEL_14;
      }
    }
    else
    {
      CFTypeRef v10 = v250;
      v257 = 0;
      CFTypeRef v258 = v250;
      if (!v250)
      {
LABEL_14:
        dispatch_async(v8, &block);
        if (v258) {
          CFRelease(v258);
        }
        if (v257) {
          _Block_release(v257);
        }
        if (v7) {
          _Block_release(v7);
        }
        if (v250) {
          CFRelease(v250);
        }
        if (SHIBYTE(v249) < 0) {
          operator delete(v248);
        }
        goto LABEL_24;
      }
    }
    CFRetain(v10);
    goto LABEL_14;
  }
  int v4 = *(_DWORD *)(a1 + 68);
  int v217 = *(_DWORD *)(a1 + 84);
LABEL_25:
  int v5 = 5;
LABEL_26:
  v244[0] = MEMORY[0x1E4F143A8];
  v244[1] = 0x40000000;
  char v11 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v245 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v246 = &__block_descriptor_tmp_71_3;
  int v247 = v5;
  int v12 = (char *)*((void *)&v251 + 1);
  int64_t v13 = (char *)v252;
  char v14 = (const void **)*((void *)&v251 + 1);
  if (*((void *)&v251 + 1) != (void)v252)
  {
    char v14 = (const void **)*((void *)&v251 + 1);
    while (*((unsigned char *)*v14 + 8) != 19)
    {
      if (++v14 == (const void **)v252) {
        goto LABEL_34;
      }
    }
  }
  if (v14 == (const void **)v252)
  {
LABEL_34:
    char v17 = operator new(0x10uLL);
    int v18 = v17;
    v17[8] = 19;
    *(void *)char v17 = &unk_1F126A400;
    *((_DWORD *)v17 + 3) = 0;
    uint64_t v16 = v17 + 12;
    if ((unint64_t)v13 < *((void *)&v252 + 1))
    {
      *(void *)int64_t v13 = v17;
      uint64_t v19 = (uint64_t)(v13 + 8);
LABEL_56:
      *(void *)&long long v252 = v19;
      char v11 = v245;
      goto LABEL_57;
    }
    int64_t v20 = v13 - v12;
    uint64_t v21 = (v13 - v12) >> 3;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      goto LABEL_304;
    }
    uint64_t v23 = *((void *)&v252 + 1) - (void)v12;
    if ((uint64_t)(*((void *)&v252 + 1) - (void)v12) >> 2 > v22) {
      unint64_t v22 = v23 >> 2;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 61) {
        goto LABEL_305;
      }
      xpc_object_t v25 = operator new(8 * v24);
      xpc_object_t v26 = &v25[8 * v21];
      uint64_t v27 = &v25[8 * v24];
      void *v26 = v18;
      uint64_t v19 = (uint64_t)(v26 + 1);
      if (v12 != v13)
      {
LABEL_45:
        if ((unint64_t)(v20 - 8) < 0x58) {
          goto LABEL_308;
        }
        if ((unint64_t)(v12 - v25) < 0x20) {
          goto LABEL_308;
        }
        unint64_t v28 = ((unint64_t)(v20 - 8) >> 3) + 1;
        uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v30 = &v13[-v29];
        xpc_object_t v26 = (void *)((char *)v26 - v29);
        uint64_t v31 = &v25[8 * v21 - 16];
        unint64_t v32 = v13 - 16;
        uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          _OWORD *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        int64_t v13 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_308:
          do
          {
            uint64_t v35 = *((void *)v13 - 1);
            v13 -= 8;
            *--xpc_object_t v26 = v35;
          }
          while (v13 != v12);
        }
        int v12 = (char *)*((void *)&v251 + 1);
        *((void *)&v251 + 1) = v26;
        *(void *)&long long v252 = v19;
        *((void *)&v252 + 1) = v27;
        if (!v12) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
    }
    else
    {
      xpc_object_t v25 = 0;
      xpc_object_t v26 = (void *)(8 * v21);
      uint64_t v27 = 0;
      *(void *)(8 * v21) = v18;
      uint64_t v19 = 8 * v21 + 8;
      if (v12 != v13) {
        goto LABEL_45;
      }
    }
    *((void *)&v251 + 1) = v26;
    *(void *)&long long v252 = v19;
    *((void *)&v252 + 1) = v27;
    if (!v12) {
      goto LABEL_56;
    }
LABEL_55:
    operator delete(v12);
    goto LABEL_56;
  }
  if (!v15) {
    goto LABEL_303;
  }
  uint64_t v16 = v15 + 12;
LABEL_57:
  v11((uint64_t)v244, v16);
  v240[0] = MEMORY[0x1E4F143A8];
  v240[1] = 0x40000000;
  uint64_t v36 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  v241 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  v242 = &__block_descriptor_tmp_72_1;
  int v243 = v4;
  dispatch_object_t v37 = (char *)*((void *)&v251 + 1);
  uint64_t v38 = (char *)v252;
  uint64_t v39 = (const void **)*((void *)&v251 + 1);
  if (*((void *)&v251 + 1) != (void)v252)
  {
    uint64_t v39 = (const void **)*((void *)&v251 + 1);
    while (*((unsigned char *)*v39 + 8) != 21)
    {
      if (++v39 == (const void **)v252) {
        goto LABEL_65;
      }
    }
  }
  if (v39 == (const void **)v252)
  {
LABEL_65:
    uint64_t v42 = operator new(0x10uLL);
    dispatch_object_t v43 = v42;
    v42[8] = 21;
    *(void *)uint64_t v42 = &unk_1F126A450;
    *((_DWORD *)v42 + 3) = 0;
    unint64_t v41 = v42 + 12;
    if ((unint64_t)v38 < *((void *)&v252 + 1))
    {
      *(void *)uint64_t v38 = v42;
      uint64_t v44 = (uint64_t)(v38 + 8);
LABEL_87:
      *(void *)&long long v252 = v44;
      uint64_t v36 = v241;
      goto LABEL_88;
    }
    int64_t v45 = v38 - v37;
    uint64_t v46 = (v38 - v37) >> 3;
    unint64_t v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 61) {
      goto LABEL_304;
    }
    uint64_t v48 = *((void *)&v252 + 1) - (void)v37;
    if ((uint64_t)(*((void *)&v252 + 1) - (void)v37) >> 2 > v47) {
      unint64_t v47 = v48 >> 2;
    }
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v47;
    }
    if (v49)
    {
      if (v49 >> 61) {
        goto LABEL_305;
      }
      uint64_t v50 = operator new(8 * v49);
      long long v51 = &v50[8 * v46];
      long long v52 = &v50[8 * v49];
      void *v51 = v43;
      uint64_t v44 = (uint64_t)(v51 + 1);
      if (v37 != v38)
      {
LABEL_76:
        if ((unint64_t)(v45 - 8) < 0x58) {
          goto LABEL_309;
        }
        if ((unint64_t)(v37 - v50) < 0x20) {
          goto LABEL_309;
        }
        unint64_t v53 = ((unint64_t)(v45 - 8) >> 3) + 1;
        uint64_t v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
        long long v55 = &v38[-v54];
        long long v51 = (void *)((char *)v51 - v54);
        uint64_t v56 = &v50[8 * v46 - 16];
        long long v57 = v38 - 16;
        uint64_t v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          _OWORD *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 4;
        }
        while (v58);
        uint64_t v38 = v55;
        if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_309:
          do
          {
            uint64_t v60 = *((void *)v38 - 1);
            v38 -= 8;
            *--long long v51 = v60;
          }
          while (v38 != v37);
        }
        dispatch_object_t v37 = (char *)*((void *)&v251 + 1);
        *((void *)&v251 + 1) = v51;
        *(void *)&long long v252 = v44;
        *((void *)&v252 + 1) = v52;
        if (!v37) {
          goto LABEL_87;
        }
        goto LABEL_86;
      }
    }
    else
    {
      uint64_t v50 = 0;
      long long v51 = (void *)(8 * v46);
      long long v52 = 0;
      *(void *)(8 * v46) = v43;
      uint64_t v44 = 8 * v46 + 8;
      if (v37 != v38) {
        goto LABEL_76;
      }
    }
    *((void *)&v251 + 1) = v51;
    *(void *)&long long v252 = v44;
    *((void *)&v252 + 1) = v52;
    if (!v37) {
      goto LABEL_87;
    }
LABEL_86:
    operator delete(v37);
    goto LABEL_87;
  }
  if (!v40) {
    goto LABEL_303;
  }
  unint64_t v41 = v40 + 12;
LABEL_88:
  v36((uint64_t)v240, v41);
  v236[0] = MEMORY[0x1E4F143A8];
  v236[1] = 0x40000000;
  uint64_t v61 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
  v237 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
  v238 = &__block_descriptor_tmp_73_2;
  int v239 = v217;
  int v62 = (char *)*((void *)&v251 + 1);
  uint64_t v63 = (char *)v252;
  v64 = (const void **)*((void *)&v251 + 1);
  if (*((void *)&v251 + 1) != (void)v252)
  {
    v64 = (const void **)*((void *)&v251 + 1);
    while (*((unsigned char *)*v64 + 8) != 22)
    {
      if (++v64 == (const void **)v252) {
        goto LABEL_96;
      }
    }
  }
  if (v64 == (const void **)v252)
  {
LABEL_96:
    uint64_t v67 = operator new(0x10uLL);
    int v68 = v67;
    v67[8] = 22;
    *(void *)uint64_t v67 = &unk_1F126A4A0;
    *((_DWORD *)v67 + 3) = 0;
    uint64_t v66 = v67 + 12;
    if ((unint64_t)v63 < *((void *)&v252 + 1))
    {
      *(void *)uint64_t v63 = v67;
      uint64_t v69 = (uint64_t)(v63 + 8);
LABEL_118:
      *(void *)&long long v252 = v69;
      uint64_t v61 = v237;
      goto LABEL_119;
    }
    int64_t v70 = v63 - v62;
    uint64_t v71 = (v63 - v62) >> 3;
    unint64_t v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 61) {
      goto LABEL_304;
    }
    uint64_t v73 = *((void *)&v252 + 1) - (void)v62;
    if ((uint64_t)(*((void *)&v252 + 1) - (void)v62) >> 2 > v72) {
      unint64_t v72 = v73 >> 2;
    }
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v72;
    }
    if (v74)
    {
      if (v74 >> 61) {
        goto LABEL_305;
      }
      uint64_t v75 = operator new(8 * v74);
      uint64_t v76 = &v75[8 * v71];
      uint64_t v77 = &v75[8 * v74];
      *uint64_t v76 = v68;
      uint64_t v69 = (uint64_t)(v76 + 1);
      if (v62 != v63)
      {
LABEL_107:
        if ((unint64_t)(v70 - 8) < 0x58) {
          goto LABEL_310;
        }
        if ((unint64_t)(v62 - v75) < 0x20) {
          goto LABEL_310;
        }
        unint64_t v78 = ((unint64_t)(v70 - 8) >> 3) + 1;
        uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v80 = &v63[-v79];
        uint64_t v76 = (void *)((char *)v76 - v79);
        v81 = &v75[8 * v71 - 16];
        __int16 v82 = v63 - 16;
        uint64_t v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          _OWORD *v81 = v84;
          v81 -= 2;
          v82 -= 32;
          v83 -= 4;
        }
        while (v83);
        uint64_t v63 = v80;
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_310:
          do
          {
            uint64_t v85 = *((void *)v63 - 1);
            v63 -= 8;
            *--uint64_t v76 = v85;
          }
          while (v63 != v62);
        }
        int v62 = (char *)*((void *)&v251 + 1);
        *((void *)&v251 + 1) = v76;
        *(void *)&long long v252 = v69;
        *((void *)&v252 + 1) = v77;
        if (!v62) {
          goto LABEL_118;
        }
        goto LABEL_117;
      }
    }
    else
    {
      uint64_t v75 = 0;
      uint64_t v76 = (void *)(8 * v71);
      uint64_t v77 = 0;
      *(void *)(8 * v71) = v68;
      uint64_t v69 = 8 * v71 + 8;
      if (v62 != v63) {
        goto LABEL_107;
      }
    }
    *((void *)&v251 + 1) = v76;
    *(void *)&long long v252 = v69;
    *((void *)&v252 + 1) = v77;
    if (!v62) {
      goto LABEL_118;
    }
LABEL_117:
    operator delete(v62);
    goto LABEL_118;
  }
  if (!v65) {
    goto LABEL_303;
  }
  uint64_t v66 = v65 + 12;
LABEL_119:
  v61((uint64_t)v236, v66);
  v232[0] = MEMORY[0x1E4F143A8];
  v232[1] = 0x40000000;
  uint64_t v86 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_5;
  v233 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_5;
  v234 = &__block_descriptor_tmp_75_0;
  int v235 = v5;
  v87 = (char *)*((void *)&v251 + 1);
  v88 = (char *)v252;
  uint64_t v89 = (const void **)*((void *)&v251 + 1);
  if (*((void *)&v251 + 1) != (void)v252)
  {
    uint64_t v89 = (const void **)*((void *)&v251 + 1);
    while (*((unsigned char *)*v89 + 8) != 18)
    {
      if (++v89 == (const void **)v252) {
        goto LABEL_127;
      }
    }
  }
  if (v89 == (const void **)v252)
  {
LABEL_127:
    v92 = operator new(0x10uLL);
    v93 = v92;
    v92[8] = 18;
    *(void *)v92 = &unk_1F126A4F0;
    *((_DWORD *)v92 + 3) = 0;
    uint64_t v91 = v92 + 12;
    if ((unint64_t)v88 < *((void *)&v252 + 1))
    {
      *(void *)v88 = v92;
      uint64_t v94 = (uint64_t)(v88 + 8);
LABEL_149:
      *(void *)&long long v252 = v94;
      uint64_t v86 = v233;
      goto LABEL_150;
    }
    int64_t v95 = v88 - v87;
    uint64_t v96 = (v88 - v87) >> 3;
    unint64_t v97 = v96 + 1;
    if ((unint64_t)(v96 + 1) >> 61) {
      goto LABEL_304;
    }
    uint64_t v98 = *((void *)&v252 + 1) - (void)v87;
    if ((uint64_t)(*((void *)&v252 + 1) - (void)v87) >> 2 > v97) {
      unint64_t v97 = v98 >> 2;
    }
    if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v99 = v97;
    }
    if (v99)
    {
      if (v99 >> 61) {
        goto LABEL_305;
      }
      v100 = operator new(8 * v99);
      long long v101 = &v100[8 * v96];
      uint64_t v102 = &v100[8 * v99];
      *long long v101 = v93;
      uint64_t v94 = (uint64_t)(v101 + 1);
      if (v87 != v88)
      {
LABEL_138:
        if ((unint64_t)(v95 - 8) < 0x58) {
          goto LABEL_311;
        }
        if ((unint64_t)(v87 - v100) < 0x20) {
          goto LABEL_311;
        }
        unint64_t v103 = ((unint64_t)(v95 - 8) >> 3) + 1;
        uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
        v105 = &v88[-v104];
        long long v101 = (void *)((char *)v101 - v104);
        v106 = &v100[8 * v96 - 16];
        v107 = v88 - 16;
        uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v109 = *(_OWORD *)v107;
          *(v106 - 1) = *((_OWORD *)v107 - 1);
          _OWORD *v106 = v109;
          v106 -= 2;
          v107 -= 32;
          v108 -= 4;
        }
        while (v108);
        v88 = v105;
        if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_311:
          do
          {
            uint64_t v110 = *((void *)v88 - 1);
            v88 -= 8;
            *--long long v101 = v110;
          }
          while (v88 != v87);
        }
        v87 = (char *)*((void *)&v251 + 1);
        *((void *)&v251 + 1) = v101;
        *(void *)&long long v252 = v94;
        *((void *)&v252 + 1) = v102;
        if (!v87) {
          goto LABEL_149;
        }
        goto LABEL_148;
      }
    }
    else
    {
      v100 = 0;
      long long v101 = (void *)(8 * v96);
      uint64_t v102 = 0;
      *(void *)(8 * v96) = v93;
      uint64_t v94 = 8 * v96 + 8;
      if (v87 != v88) {
        goto LABEL_138;
      }
    }
    *((void *)&v251 + 1) = v101;
    *(void *)&long long v252 = v94;
    *((void *)&v252 + 1) = v102;
    if (!v87) {
      goto LABEL_149;
    }
LABEL_148:
    operator delete(v87);
    goto LABEL_149;
  }
  if (!v90) {
    goto LABEL_303;
  }
  uint64_t v91 = v90 + 12;
LABEL_150:
  v86((uint64_t)v232, v91);
  v112 = (const void **)*((void *)&v251 + 1);
  v111 = (const void **)v252;
  v113 = (const void **)*((void *)&v251 + 1);
  if (*((void *)&v251 + 1) != (void)v252)
  {
    v113 = (const void **)*((void *)&v251 + 1);
    while (*((unsigned char *)*v113 + 8) != 27)
    {
      if (++v113 == (const void **)v252) {
        goto LABEL_159;
      }
    }
  }
  if (v113 == (const void **)v252)
  {
LABEL_159:
    v115 = (char *)operator new(0x10uLL);
    v116 = v115;
    v115[8] = 27;
    *(void *)v115 = &unk_1F126A540;
    *((_DWORD *)v115 + 3) = 0;
    v117 = v115 + 12;
    if ((unint64_t)v111 < *((void *)&v252 + 1))
    {
      *v111 = v115;
      uint64_t v118 = (uint64_t)(v111 + 1);
      goto LABEL_181;
    }
    int64_t v119 = (char *)v111 - (char *)v112;
    uint64_t v120 = v111 - v112;
    unint64_t v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 61) {
      goto LABEL_304;
    }
    uint64_t v122 = *((void *)&v252 + 1) - (void)v112;
    if ((uint64_t)(*((void *)&v252 + 1) - (void)v112) >> 2 > v121) {
      unint64_t v121 = v122 >> 2;
    }
    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v123 = v121;
    }
    if (v123)
    {
      if (v123 >> 61) {
        goto LABEL_305;
      }
      v124 = operator new(8 * v123);
      v125 = &v124[8 * v120];
      v126 = &v124[8 * v123];
      void *v125 = v116;
      uint64_t v118 = (uint64_t)(v125 + 1);
      if (v112 != v111)
      {
LABEL_170:
        if ((unint64_t)(v119 - 8) < 0x58) {
          goto LABEL_312;
        }
        if ((unint64_t)((char *)v112 - v124) < 0x20) {
          goto LABEL_312;
        }
        unint64_t v127 = ((unint64_t)(v119 - 8) >> 3) + 1;
        uint64_t v128 = 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
        v129 = &v111[v128 / 0xFFFFFFFFFFFFFFF8];
        v125 = (void *)((char *)v125 - v128);
        v130 = &v124[8 * v120 - 16];
        v131 = v111 - 2;
        uint64_t v132 = v127 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v133 = *(_OWORD *)v131;
          *(v130 - 1) = *((_OWORD *)v131 - 1);
          _OWORD *v130 = v133;
          v130 -= 2;
          v131 -= 4;
          v132 -= 4;
        }
        while (v132);
        v111 = v129;
        if (v127 != (v127 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_312:
          do
          {
            uint64_t v134 = (uint64_t)*--v111;
            *--v125 = v134;
          }
          while (v111 != v112);
        }
        v112 = (const void **)*((void *)&v251 + 1);
        *((void *)&v251 + 1) = v125;
        *(void *)&long long v252 = v118;
        *((void *)&v252 + 1) = v126;
        if (!v112)
        {
LABEL_181:
          *(void *)&long long v252 = v118;
          v112 = (const void **)*((void *)&v251 + 1);
          v111 = (const void **)v118;
          _DWORD *v117 = 1;
          if (v112 == (const void **)v118) {
            goto LABEL_190;
          }
          goto LABEL_182;
        }
LABEL_180:
        operator delete(v112);
        goto LABEL_181;
      }
    }
    else
    {
      v124 = 0;
      v125 = (void *)(8 * v120);
      v126 = 0;
      *(void *)(8 * v120) = v116;
      uint64_t v118 = 8 * v120 + 8;
      if (v112 != v111) {
        goto LABEL_170;
      }
    }
    *((void *)&v251 + 1) = v125;
    *(void *)&long long v252 = v118;
    *((void *)&v252 + 1) = v126;
    if (!v112) {
      goto LABEL_181;
    }
    goto LABEL_180;
  }
  if (!v114) {
    goto LABEL_303;
  }
  v114[3] = 1;
  if (v112 == v111)
  {
LABEL_190:
    v137 = (char *)operator new(0x10uLL);
    v138 = v137;
    v137[8] = 28;
    *(void *)v137 = &unk_1F126A590;
    *((_DWORD *)v137 + 3) = 0;
    v139 = v137 + 12;
    if ((unint64_t)v111 < *((void *)&v252 + 1))
    {
      *v111 = v137;
      uint64_t v140 = (uint64_t)(v111 + 1);
      goto LABEL_206;
    }
    v141 = (char *)*((void *)&v251 + 1);
    uint64_t v142 = ((uint64_t)v111 - *((void *)&v251 + 1)) >> 3;
    unint64_t v143 = v142 + 1;
    if ((unint64_t)(v142 + 1) >> 61) {
      goto LABEL_304;
    }
    uint64_t v144 = *((void *)&v252 + 1) - *((void *)&v251 + 1);
    if ((uint64_t)(*((void *)&v252 + 1) - *((void *)&v251 + 1)) >> 2 > v143) {
      unint64_t v143 = v144 >> 2;
    }
    if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v145 = v143;
    }
    if (v145)
    {
      if (v145 >> 61) {
        goto LABEL_305;
      }
      v146 = (char *)operator new(8 * v145);
      v147 = &v146[8 * v142];
      v148 = &v146[8 * v145];
      *(void *)v147 = v138;
      uint64_t v140 = (uint64_t)(v147 + 8);
      v149 = (char *)((char *)v111 - v141);
      if (v111 != (const void **)v141)
      {
LABEL_201:
        unint64_t v150 = (unint64_t)(v149 - 8);
        if (v150 >= 0x58)
        {
          if ((unint64_t)(v141 - v146) >= 0x20)
          {
            uint64_t v170 = (v150 >> 3) + 1;
            uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
            v151 = &v111[v171 / 0xFFFFFFFFFFFFFFF8];
            v147 -= v171;
            v172 = &v146[8 * v142 - 16];
            v173 = v111 - 2;
            uint64_t v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v175 = *(_OWORD *)v173;
              *((_OWORD *)v172 - 1) = *((_OWORD *)v173 - 1);
              *(_OWORD *)v172 = v175;
              v172 -= 32;
              v173 -= 4;
              v174 -= 4;
            }
            while (v174);
            if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_238:
              v111 = (const void **)*((void *)&v251 + 1);
              *((void *)&v251 + 1) = v147;
              *(void *)&long long v252 = v140;
              *((void *)&v252 + 1) = v148;
              if (!v111)
              {
LABEL_206:
                *(void *)&long long v252 = v140;
                v112 = (const void **)*((void *)&v251 + 1);
                v111 = (const void **)v140;
                _DWORD *v139 = 2048;
                if (v112 == (const void **)v140) {
                  goto LABEL_214;
                }
                goto LABEL_207;
              }
LABEL_205:
              operator delete(v111);
              goto LABEL_206;
            }
          }
          else
          {
            v151 = v111;
          }
        }
        else
        {
          v151 = v111;
        }
        do
        {
          uint64_t v176 = (uint64_t)*--v151;
          *((void *)v147 - 1) = v176;
          v147 -= 8;
        }
        while (v151 != (const void **)v141);
        goto LABEL_238;
      }
    }
    else
    {
      v146 = 0;
      v147 = (char *)(8 * v142);
      v148 = 0;
      *(void *)(8 * v142) = v138;
      uint64_t v140 = 8 * v142 + 8;
      v149 = (char *)((char *)v111 - v141);
      if (v111 != (const void **)v141) {
        goto LABEL_201;
      }
    }
    *((void *)&v251 + 1) = v147;
    *(void *)&long long v252 = v140;
    *((void *)&v252 + 1) = v148;
    if (!v111) {
      goto LABEL_206;
    }
    goto LABEL_205;
  }
LABEL_182:
  v135 = v112;
  while (*((unsigned char *)*v135 + 8) != 28)
  {
    if (++v135 == v111) {
      goto LABEL_190;
    }
  }
  if (v135 == v111) {
    goto LABEL_190;
  }
  if (!v136) {
    goto LABEL_303;
  }
  v136[3] = 2048;
  if (v112 == v111)
  {
LABEL_214:
    v156 = (char *)operator new(0x10uLL);
    v157 = v156;
    v156[8] = 17;
    *(void *)v156 = &unk_1F126A5E0;
    *((_DWORD *)v156 + 3) = 0;
    v154 = v156 + 12;
    if ((unint64_t)v111 < *((void *)&v252 + 1))
    {
      *v111 = v156;
      uint64_t v158 = (uint64_t)(v111 + 1);
      uint64_t v155 = v219;
LABEL_246:
      *(void *)&long long v252 = v158;
      v112 = (const void **)*((void *)&v251 + 1);
      v111 = (const void **)v158;
      goto LABEL_247;
    }
    v159 = (char *)*((void *)&v251 + 1);
    uint64_t v160 = ((uint64_t)v111 - *((void *)&v251 + 1)) >> 3;
    unint64_t v161 = v160 + 1;
    if ((unint64_t)(v160 + 1) >> 61) {
      goto LABEL_304;
    }
    uint64_t v162 = *((void *)&v252 + 1) - *((void *)&v251 + 1);
    if ((uint64_t)(*((void *)&v252 + 1) - *((void *)&v251 + 1)) >> 2 > v161) {
      unint64_t v161 = v162 >> 2;
    }
    if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v163 = v161;
    }
    if (v163)
    {
      if (v163 >> 61) {
        goto LABEL_305;
      }
      v164 = (char *)operator new(8 * v163);
      v165 = &v164[8 * v160];
      v166 = &v164[8 * v163];
      *(void *)v165 = v157;
      uint64_t v158 = (uint64_t)(v165 + 8);
      v167 = (char *)((char *)v111 - v159);
      if (v111 != (const void **)v159)
      {
LABEL_225:
        unint64_t v168 = (unint64_t)(v167 - 8);
        uint64_t v155 = v219;
        if (v168 >= 0x58)
        {
          if ((unint64_t)(v159 - v164) >= 0x20)
          {
            uint64_t v177 = (v168 >> 3) + 1;
            uint64_t v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
            v169 = &v111[v178 / 0xFFFFFFFFFFFFFFF8];
            v165 -= v178;
            v179 = &v164[8 * v160 - 16];
            v180 = v111 - 2;
            uint64_t v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v182 = *(_OWORD *)v180;
              *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
              *(_OWORD *)v179 = v182;
              v179 -= 32;
              v180 -= 4;
              v181 -= 4;
            }
            while (v181);
            if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_244:
              v111 = (const void **)*((void *)&v251 + 1);
              *((void *)&v251 + 1) = v165;
              *(void *)&long long v252 = v158;
              *((void *)&v252 + 1) = v166;
              if (!v111) {
                goto LABEL_246;
              }
LABEL_245:
              operator delete(v111);
              goto LABEL_246;
            }
          }
          else
          {
            v169 = v111;
          }
        }
        else
        {
          v169 = v111;
        }
        do
        {
          uint64_t v183 = (uint64_t)*--v169;
          *((void *)v165 - 1) = v183;
          v165 -= 8;
        }
        while (v169 != (const void **)v159);
        goto LABEL_244;
      }
    }
    else
    {
      v164 = 0;
      v165 = (char *)(8 * v160);
      v166 = 0;
      *(void *)(8 * v160) = v157;
      uint64_t v158 = 8 * v160 + 8;
      v167 = (char *)((char *)v111 - v159);
      if (v111 != (const void **)v159) {
        goto LABEL_225;
      }
    }
    uint64_t v155 = v219;
    *((void *)&v251 + 1) = v165;
    *(void *)&long long v252 = v158;
    *((void *)&v252 + 1) = v166;
    if (!v111) {
      goto LABEL_246;
    }
    goto LABEL_245;
  }
LABEL_207:
  v152 = v112;
  while (*((unsigned char *)*v152 + 8) != 17)
  {
    if (++v152 == v111) {
      goto LABEL_214;
    }
  }
  if (v152 == v111) {
    goto LABEL_214;
  }
  if (!v153) {
    goto LABEL_303;
  }
  v154 = v153 + 12;
  uint64_t v155 = v219;
LABEL_247:
  _DWORD *v154 = 2;
  v228[0] = MEMORY[0x1E4F143A8];
  v228[1] = 0x40000000;
  v229 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_9;
  v230 = &__block_descriptor_tmp_88_0;
  int v231 = *(_DWORD *)(v155 + 104);
  if (v112 == v111) {
    goto LABEL_255;
  }
  v184 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_9;
  while (*((unsigned char *)*v112 + 8) != 23)
  {
    if (++v112 == v111) {
      goto LABEL_255;
    }
  }
  if (v112 == v111)
  {
LABEL_255:
    v186 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v251, 23);
    v184 = v229;
  }
  else
  {
    if (!v185) {
      goto LABEL_303;
    }
    v186 = v185 + 12;
  }
  v187 = (capabilities::ipc *)v184((uint64_t)v228, v186);
  uint64_t v188 = v218;
  if (!capabilities::ipc::supportsCoalescing(v187)) {
    goto LABEL_290;
  }
  v189 = (char *)*((void *)&v251 + 1);
  v190 = (char *)v252;
  v191 = (const void **)*((void *)&v251 + 1);
  if (*((void *)&v251 + 1) != (void)v252)
  {
    v191 = (const void **)*((void *)&v251 + 1);
    while (*((unsigned char *)*v191 + 8) != 29)
    {
      if (++v191 == (const void **)v252) {
        goto LABEL_265;
      }
    }
  }
  if (v191 == (const void **)v252)
  {
LABEL_265:
    v194 = operator new(0x10uLL);
    v195 = v194;
    v194[4] = 29;
    *(void *)v194 = &unk_1F126A630;
    *((unsigned char *)v194 + 10) = 0;
    if ((unint64_t)v190 < *((void *)&v252 + 1))
    {
      *(void *)v190 = v194;
      uint64_t v196 = (uint64_t)(v190 + 8);
      uint64_t v188 = v218;
LABEL_288:
      v193 = (_WORD *)((char *)v195 + 9);
      *(void *)&long long v252 = v196;
      goto LABEL_289;
    }
    int64_t v197 = v190 - v189;
    uint64_t v198 = (v190 - v189) >> 3;
    unint64_t v199 = v198 + 1;
    if (!((unint64_t)(v198 + 1) >> 61))
    {
      uint64_t v200 = *((void *)&v252 + 1) - (void)v189;
      if ((uint64_t)(*((void *)&v252 + 1) - (void)v189) >> 2 > v199) {
        unint64_t v199 = v200 >> 2;
      }
      if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v201 = v199;
      }
      if (!v201)
      {
        v202 = 0;
        v203 = (void *)(8 * v198);
        v204 = 0;
        *(void *)(8 * v198) = v195;
        uint64_t v196 = 8 * v198 + 8;
        if (v189 != v190)
        {
LABEL_276:
          unint64_t v205 = v197 - 8;
          if ((unint64_t)(v197 - 8) >= 0x58)
          {
            uint64_t v188 = v218;
            if ((unint64_t)(v189 - v202) >= 0x20)
            {
              uint64_t v206 = (v205 >> 3) + 1;
              uint64_t v207 = 8 * (v206 & 0x3FFFFFFFFFFFFFFCLL);
              v208 = &v190[-v207];
              v203 = (void *)((char *)v203 - v207);
              v209 = &v202[8 * v198 - 16];
              v210 = v190 - 16;
              uint64_t v211 = v206 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v212 = *(_OWORD *)v210;
                *(v209 - 1) = *((_OWORD *)v210 - 1);
                _OWORD *v209 = v212;
                v209 -= 2;
                v210 -= 32;
                v211 -= 4;
              }
              while (v211);
              v190 = v208;
              if (v206 == (v206 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_285;
              }
            }
          }
          else
          {
            uint64_t v188 = v218;
          }
          do
          {
            uint64_t v213 = *((void *)v190 - 1);
            v190 -= 8;
            *--v203 = v213;
          }
          while (v190 != v189);
LABEL_285:
          v189 = (char *)*((void *)&v251 + 1);
LABEL_286:
          *((void *)&v251 + 1) = v203;
          *(void *)&long long v252 = v196;
          *((void *)&v252 + 1) = v204;
          if (v189) {
            operator delete(v189);
          }
          goto LABEL_288;
        }
LABEL_279:
        uint64_t v188 = v218;
        goto LABEL_286;
      }
      if (!(v201 >> 61))
      {
        v202 = operator new(8 * v201);
        v203 = &v202[8 * v198];
        v204 = &v202[8 * v201];
        void *v203 = v195;
        uint64_t v196 = (uint64_t)(v203 + 1);
        if (v189 != v190) {
          goto LABEL_276;
        }
        goto LABEL_279;
      }
LABEL_305:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_304:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (!v192) {
LABEL_303:
  }
    __cxa_bad_cast();
  v193 = v192 + 9;
  uint64_t v188 = v218;
LABEL_289:
  _WORD *v193 = 257;
LABEL_290:
  uint64_t v223 = v188 + 144;
  uint64_t v224 = QMIServiceMsg::create();
  int v225 = 25000;
  uint64_t v226 = 0;
  aBlock = 0;
  v220[0] = MEMORY[0x1E4F143A8];
  v220[1] = 1174405120;
  v220[2] = ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_11;
  v220[3] = &__block_descriptor_tmp_95_2;
  v220[4] = v188;
  v214 = *(void **)(v219 + 88);
  if (v214) {
    v214 = _Block_copy(v214);
  }
  v215 = *(NSObject **)(v219 + 96);
  v221 = v214;
  dispatch_object_t object = v215;
  if (v215) {
    dispatch_retain(v215);
  }
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v254 = 0x40000000;
  v255 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v256 = &unk_1E6196618;
  v257 = v220;
  v216 = _Block_copy(&block);
  aBlock = v216;
  if (v224)
  {
    qmi::Client::send();
    v216 = aBlock;
  }
  if (v216) {
    _Block_release(v216);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v221) {
    _Block_release(v221);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v251);
}

void sub_1B8BEE184(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 201) < 0)
  {
    operator delete(*(void **)(v1 - 224));
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 192));
    _Unwind_Resume(a1);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 192));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_5(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_9(uint64_t result, _DWORD *a2)
{
  int v2 = *(_DWORD *)(result + 32);
  *a2 = 3;
  a2[1] = v2;
  return result;
}

void ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_11(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  int v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(void *)(a1 + 48)) {
    goto LABEL_20;
  }
  CFTypeRef v4 = cf;
  if (cf && (CFRetain(cf), (int v3 = *(const void **)(a1 + 40)) == 0)) {
    int v5 = 0;
  }
  else {
    int v5 = _Block_copy(v3);
  }
  xpc_object_t v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_178_0;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    CFTypeRef v10 = v4;
    if (!v4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef v10 = v4;
  if (v4) {
LABEL_11:
  }
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10) {
    CFRelease(v10);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

void __copy_helper_block_e8_40c27_ZTSN3abm4data10DataFormatE88c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = &unk_1F12627A8;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_1F12627F0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = &unk_1F1262838;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  CFTypeRef v4 = *(void **)(a2 + 88);
  if (v4) {
    CFTypeRef v4 = _Block_copy(v4);
  }
  int v5 = *(NSObject **)(a2 + 96);
  *(void *)(a1 + 88) = v4;
  *(void *)(a1 + 96) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_4088c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *(const void **)(a1 + 88);
  if (v3) {
    _Block_release(v3);
  }
}

void data::QMIDataCommandDriver::setDataPowerSaveConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN4data20QMIDataCommandDriver22setDataPowerSaveConfigEN3abm4data13DataPowerSaveEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_109_2;
  __int16 v9 = *(_WORD *)(a2 + 8);
  v8[4] = a1;
  v8[5] = &unk_1F12628C8;
  int v5 = *(void **)a3;
  if (*(void *)a3) {
    int v5 = _Block_copy(v5);
  }
  xpc_object_t v6 = (uint64_t *)(a1 + 72);
  xpc_object_t v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4data20QMIDataCommandDriver22setDataPowerSaveConfigEN3abm4data13DataPowerSaveEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 49))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v46 = v3;
    long long v47 = v3;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v46);
    CFTypeRef v4 = (const void **)*((void *)&v46 + 1);
    int v5 = (const void **)v47;
    xpc_object_t v6 = (const void **)*((void *)&v46 + 1);
    if (*((void *)&v46 + 1) != (void)v47)
    {
      xpc_object_t v6 = (const void **)*((void *)&v46 + 1);
      while (*((unsigned char *)*v6 + 8) != 16)
      {
        if (++v6 == (const void **)v47) {
          goto LABEL_16;
        }
      }
    }
    if (v6 != (const void **)v47)
    {
      if (v7)
      {
        v7[3] = 2;
        if (v4 != v5) {
          goto LABEL_30;
        }
        goto LABEL_32;
      }
      goto LABEL_65;
    }
LABEL_16:
    int64_t v13 = (char *)operator new(0x10uLL);
    char v14 = v13;
    v13[8] = 16;
    *(void *)int64_t v13 = &unk_1F126A680;
    *((_DWORD *)v13 + 3) = 0;
    int v15 = v13 + 12;
    if ((unint64_t)v5 < *((void *)&v47 + 1))
    {
      *int v5 = v13;
      uint64_t v16 = (uint64_t)(v5 + 1);
LABEL_29:
      *(void *)&long long v47 = v16;
      CFTypeRef v4 = (const void **)*((void *)&v46 + 1);
      int v5 = (const void **)v16;
      _DWORD *v15 = 2;
      if (v4 == (const void **)v16)
      {
LABEL_32:
        xpc_object_t v25 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v46, 1);
LABEL_33:
        *(void *)xpc_object_t v25 = 0x400000003;
        uint64_t v41 = v2 + 144;
        uint64_t v42 = QMIServiceMsg::create();
        int v43 = 25000;
        uint64_t v44 = 0;
        aBlock = 0;
        v38[0] = MEMORY[0x1E4F143A8];
        v38[1] = 1174405120;
        v38[2] = ___ZN4data20QMIDataCommandDriver22setDataPowerSaveConfigEN3abm4data13DataPowerSaveEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
        v38[3] = &__block_descriptor_tmp_107_1;
        v38[4] = v2;
        xpc_object_t v26 = *(void **)(a1 + 56);
        if (v26) {
          xpc_object_t v26 = _Block_copy(v26);
        }
        uint64_t v27 = *(NSObject **)(a1 + 64);
        uint64_t v39 = v26;
        dispatch_object_t object = v27;
        if (v27) {
          dispatch_retain(v27);
        }
        uint64_t block = MEMORY[0x1E4F143A8];
        uint64_t v49 = 0x40000000;
        uint64_t v50 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm18SetPowerSaveConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        long long v51 = &unk_1E6196640;
        long long v52 = v38;
        unint64_t v28 = _Block_copy(&block);
        aBlock = v28;
        if (v42)
        {
          qmi::Client::send();
          unint64_t v28 = aBlock;
        }
        if (v28) {
          _Block_release(v28);
        }
        if (object) {
          dispatch_release(object);
        }
        if (v39) {
          _Block_release(v39);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v46);
        return;
      }
LABEL_30:
      while (*((unsigned char *)*v4 + 8) != 1)
      {
        if (++v4 == v5) {
          goto LABEL_32;
        }
      }
      if (v4 == v5) {
        goto LABEL_32;
      }
      if (v29)
      {
        xpc_object_t v25 = v29 + 12;
        goto LABEL_33;
      }
LABEL_65:
      __cxa_bad_cast();
    }
    int64_t v17 = (char *)v5 - (char *)v4;
    uint64_t v18 = v5 - v4;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = *((void *)&v47 + 1) - (void)v4;
    if ((uint64_t)(*((void *)&v47 + 1) - (void)v4) >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v22 = operator new(8 * v21);
      uint64_t v23 = &v22[8 * v18];
      unint64_t v24 = &v22[8 * v21];
      *uint64_t v23 = v14;
      uint64_t v16 = (uint64_t)(v23 + 1);
      if (v4 == v5)
      {
LABEL_27:
        *((void *)&v46 + 1) = v23;
        *(void *)&long long v47 = v16;
        *((void *)&v47 + 1) = v24;
        if (!v4) {
          goto LABEL_29;
        }
LABEL_28:
        operator delete(v4);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v22 = 0;
      uint64_t v23 = (void *)(8 * v18);
      unint64_t v24 = 0;
      *(void *)(8 * v18) = v14;
      uint64_t v16 = 8 * v18 + 8;
      if (v4 == v5) {
        goto LABEL_27;
      }
    }
    if ((unint64_t)(v17 - 8) < 0x58) {
      goto LABEL_70;
    }
    if ((unint64_t)((char *)v4 - v22) < 0x20) {
      goto LABEL_70;
    }
    unint64_t v30 = ((unint64_t)(v17 - 8) >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v32 = &v5[v31 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v23 = (void *)((char *)v23 - v31);
    uint64_t v33 = &v22[8 * v18 - 16];
    long long v34 = v5 - 2;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *uint64_t v33 = v36;
      v33 -= 2;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    int v5 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_70:
      do
      {
        uint64_t v37 = (uint64_t)*--v5;
        *--uint64_t v23 = v37;
      }
      while (v5 != v4);
    }
    CFTypeRef v4 = (const void **)*((void *)&v46 + 1);
    *((void *)&v46 + 1) = v23;
    *(void *)&long long v47 = v16;
    *((void *)&v47 + 1) = v24;
    if (!v4) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v8 = *(const void **)(a1 + 56);
  if (!v8 || !*(void *)(a1 + 64)) {
    return;
  }
  __int16 v9 = _Block_copy(v8);
  CFTypeRef v10 = v9;
  char v11 = *(NSObject **)(a1 + 64);
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v49 = 1174405120;
  uint64_t v50 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  long long v51 = &__block_descriptor_tmp_178_0;
  if (v9)
  {
    long long v52 = _Block_copy(v9);
    CFTypeRef cf = 0;
    dispatch_async(v11, &block);
    CFTypeRef v12 = cf;
    if (!cf) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  long long v52 = 0;
  CFTypeRef cf = 0;
  dispatch_async(v11, &block);
  CFTypeRef v12 = cf;
  if (cf) {
LABEL_60:
  }
    CFRelease(v12);
LABEL_61:
  if (v52) {
    _Block_release(v52);
  }
  if (v10) {
    _Block_release(v10);
  }
}

void sub_1B8BEEAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BEEB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BEEB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver22setDataPowerSaveConfigEN3abm4data13DataPowerSaveEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  long long v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(void *)(a1 + 48)) {
    goto LABEL_20;
  }
  CFTypeRef v4 = cf;
  if (cf && (CFRetain(cf), (long long v3 = *(const void **)(a1 + 40)) == 0)) {
    int v5 = 0;
  }
  else {
    int v5 = _Block_copy(v3);
  }
  xpc_object_t v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_178_0;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    CFTypeRef v10 = v4;
    if (!v4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef v10 = v4;
  if (v4) {
LABEL_11:
  }
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10) {
    CFRelease(v10);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

void __copy_helper_block_e8_40c30_ZTSN3abm4data13DataPowerSaveE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 40) = &unk_1F12628C8;
  CFTypeRef v4 = *(void **)(a2 + 56);
  if (v4) {
    CFTypeRef v4 = _Block_copy(v4);
  }
  int v5 = *(NSObject **)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void data::QMIDataCommandDriver::setDefaultCapabilities(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver22setDefaultCapabilitiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_123_0;
  void v7[4] = a1;
  CFTypeRef v4 = *(void **)a2;
  if (*(void *)a2) {
    CFTypeRef v4 = _Block_copy(v4);
  }
  int v5 = (uint64_t *)(a1 + 72);
  xpc_object_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4data20QMIDataCommandDriver22setDefaultCapabilitiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v44 = v3;
  long long v45 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v44);
  int v5 = (const void **)*((void *)&v44 + 1);
  CFTypeRef v4 = (const void **)v45;
  xpc_object_t v6 = (const void **)*((void *)&v44 + 1);
  if (*((void *)&v44 + 1) != (void)v45)
  {
    xpc_object_t v6 = (const void **)*((void *)&v44 + 1);
    while (*((unsigned char *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v45) {
        goto LABEL_10;
      }
    }
  }
  if (v6 != (const void **)v45)
  {
    if (v7)
    {
      *(void *)(v7 + 12) = 0x400000003;
      if (v5 != v4) {
        goto LABEL_11;
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_10:
  uint64_t v8 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v44, 1);
  int v5 = (const void **)*((void *)&v44 + 1);
  CFTypeRef v4 = (const void **)v45;
  *(void *)uint64_t v8 = 0x400000003;
  if (v5 == v4) {
    goto LABEL_13;
  }
LABEL_11:
  while (*((unsigned char *)*v5 + 8) != 16)
  {
    if (++v5 == v4) {
      goto LABEL_13;
    }
  }
  if (v5 == v4)
  {
LABEL_13:
    __int16 v9 = (char *)operator new(0x10uLL);
    CFTypeRef v10 = v9;
    uint8_t v9[8] = 16;
    *(void *)__int16 v9 = &unk_1F126A6D0;
    *((_DWORD *)v9 + 3) = 0;
    char v11 = v9 + 12;
    if ((unint64_t)v4 < *((void *)&v45 + 1))
    {
      void *v4 = v9;
      *(void *)&long long v45 = v4 + 1;
      goto LABEL_30;
    }
    uint64_t v12 = (char *)*((void *)&v44 + 1);
    uint64_t v13 = (char *)v4 - *((void *)&v44 + 1);
    uint64_t v14 = ((uint64_t)v4 - *((void *)&v44 + 1)) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = *((void *)&v45 + 1) - *((void *)&v44 + 1);
    if ((uint64_t)(*((void *)&v45 + 1) - *((void *)&v44 + 1)) >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v18 = operator new(8 * v17);
      unint64_t v19 = &v18[8 * v14];
      uint64_t v20 = &v18[8 * v17];
      *unint64_t v19 = v10;
      uint64_t v21 = (uint64_t)(v19 + 1);
      unint64_t v22 = (char *)((char *)v4 - v12);
      if (v4 == (const void **)v12)
      {
LABEL_24:
        *((void *)&v44 + 1) = v19;
        *(void *)&long long v45 = v21;
        *((void *)&v45 + 1) = v20;
        if (!v4)
        {
LABEL_26:
          *(void *)&long long v45 = v21;
          goto LABEL_30;
        }
LABEL_25:
        operator delete(v4);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v19 = (void *)(8 * v14);
      uint64_t v20 = 0;
      *(void *)(8 * v14) = v10;
      uint64_t v21 = 8 * v14 + 8;
      unint64_t v22 = (char *)((char *)v4 - v12);
      if (v4 == (const void **)v12) {
        goto LABEL_24;
      }
    }
    unint64_t v27 = (unint64_t)(v22 - 8);
    if (v27 >= 0x58)
    {
      if ((unint64_t)((char *)v4 - v18 - (void)v13) >= 0x20)
      {
        uint64_t v29 = (v27 >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v28 = &v4[v30 / 0xFFFFFFFFFFFFFFF8];
        unint64_t v19 = (void *)((char *)v19 - v30);
        uint64_t v31 = &v18[8 * v14 - 16];
        unint64_t v32 = v4 - 2;
        uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          _OWORD *v31 = v34;
          v31 -= 2;
          v32 -= 4;
          v33 -= 4;
        }
        while (v33);
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          CFTypeRef v4 = (const void **)*((void *)&v44 + 1);
          *((void *)&v44 + 1) = v19;
          *(void *)&long long v45 = v21;
          *((void *)&v45 + 1) = v20;
          if (!v4) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v28 = v4;
      }
    }
    else
    {
      unint64_t v28 = v4;
    }
    do
    {
      uint64_t v35 = (uint64_t)*--v28;
      *--unint64_t v19 = v35;
    }
    while (v28 != (const void **)v12);
    goto LABEL_52;
  }
  if (!v23) {
LABEL_54:
  }
    __cxa_bad_cast();
  char v11 = v23 + 12;
LABEL_30:
  *char v11 = 1;
  uint64_t v39 = v2 + 144;
  uint64_t v40 = QMIServiceMsg::create();
  int v41 = 25000;
  uint64_t v42 = 0;
  int v43 = 0;
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 1174405120;
  v36[2] = ___ZN4data20QMIDataCommandDriver22setDefaultCapabilitiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
  v36[3] = &__block_descriptor_tmp_120_1;
  v36[4] = v2;
  unint64_t v24 = (void *)a1[5];
  if (v24) {
    unint64_t v24 = _Block_copy(v24);
  }
  xpc_object_t v25 = a1[6];
  uint64_t v37 = v24;
  dispatch_object_t object = v25;
  if (v25) {
    dispatch_retain(v25);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6196668;
  void aBlock[4] = v36;
  xpc_object_t v26 = _Block_copy(aBlock);
  int v43 = v26;
  if (v40)
  {
    qmi::Client::send();
    xpc_object_t v26 = v43;
  }
  if (v26) {
    _Block_release(v26);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v37) {
    _Block_release(v37);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
}

void sub_1B8BEF240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BEF264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BEF27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver22setDefaultCapabilitiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  long long v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(void *)(a1 + 48)) {
    goto LABEL_20;
  }
  CFTypeRef v4 = cf;
  if (cf && (CFRetain(cf), (long long v3 = *(const void **)(a1 + 40)) == 0)) {
    int v5 = 0;
  }
  else {
    int v5 = _Block_copy(v3);
  }
  xpc_object_t v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_178_0;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    CFTypeRef v10 = v4;
    if (!v4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef v10 = v4;
  if (v4) {
LABEL_11:
  }
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10) {
    CFRelease(v10);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

void data::QMIDataCommandDriver::setLowLatencyCapability(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver23setLowLatencyCapabilityEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_137_1;
  void v7[4] = a1;
  CFTypeRef v4 = *(void **)a2;
  if (*(void *)a2) {
    CFTypeRef v4 = _Block_copy(v4);
  }
  int v5 = (uint64_t *)(a1 + 72);
  xpc_object_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4data20QMIDataCommandDriver23setLowLatencyCapabilityEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v44 = v3;
  long long v45 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v44);
  int v5 = (const void **)*((void *)&v44 + 1);
  CFTypeRef v4 = (const void **)v45;
  xpc_object_t v6 = (const void **)*((void *)&v44 + 1);
  if (*((void *)&v44 + 1) != (void)v45)
  {
    xpc_object_t v6 = (const void **)*((void *)&v44 + 1);
    while (*((unsigned char *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v45) {
        goto LABEL_10;
      }
    }
  }
  if (v6 != (const void **)v45)
  {
    if (v7)
    {
      *(void *)(v7 + 12) = 0x700000003;
      if (v5 != v4) {
        goto LABEL_11;
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_10:
  uint64_t v8 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v44, 1);
  int v5 = (const void **)*((void *)&v44 + 1);
  CFTypeRef v4 = (const void **)v45;
  *(void *)uint64_t v8 = 0x700000003;
  if (v5 == v4) {
    goto LABEL_13;
  }
LABEL_11:
  while (*((unsigned char *)*v5 + 8) != 17)
  {
    if (++v5 == v4) {
      goto LABEL_13;
    }
  }
  if (v5 == v4)
  {
LABEL_13:
    __int16 v9 = operator new(0x10uLL);
    CFTypeRef v10 = v9;
    void v9[4] = 17;
    *(void *)__int16 v9 = &unk_1F126A720;
    if ((unint64_t)v4 < *((void *)&v45 + 1))
    {
      void *v4 = v9;
      uint64_t v11 = (uint64_t)(v4 + 1);
LABEL_26:
      unint64_t v22 = (char *)v10 + 9;
      *(void *)&long long v45 = v11;
      goto LABEL_27;
    }
    uint64_t v12 = (char *)*((void *)&v44 + 1);
    uint64_t v13 = (char *)v4 - *((void *)&v44 + 1);
    uint64_t v14 = ((uint64_t)v4 - *((void *)&v44 + 1)) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = *((void *)&v45 + 1) - *((void *)&v44 + 1);
    if ((uint64_t)(*((void *)&v45 + 1) - *((void *)&v44 + 1)) >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v18 = operator new(8 * v17);
      unint64_t v19 = &v18[8 * v14];
      uint64_t v20 = &v18[8 * v17];
      *unint64_t v19 = v10;
      uint64_t v11 = (uint64_t)(v19 + 1);
      uint64_t v21 = (char *)((char *)v4 - v12);
      if (v4 == (const void **)v12)
      {
LABEL_24:
        *((void *)&v44 + 1) = v19;
        *(void *)&long long v45 = v11;
        *((void *)&v45 + 1) = v20;
        if (!v4) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v4);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v19 = (void *)(8 * v14);
      uint64_t v20 = 0;
      *(void *)(8 * v14) = v10;
      uint64_t v11 = 8 * v14 + 8;
      uint64_t v21 = (char *)((char *)v4 - v12);
      if (v4 == (const void **)v12) {
        goto LABEL_24;
      }
    }
    unint64_t v27 = (unint64_t)(v21 - 8);
    if (v27 >= 0x58)
    {
      if ((unint64_t)((char *)v4 - v18 - (void)v13) >= 0x20)
      {
        uint64_t v29 = (v27 >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v28 = &v4[v30 / 0xFFFFFFFFFFFFFFF8];
        unint64_t v19 = (void *)((char *)v19 - v30);
        uint64_t v31 = &v18[8 * v14 - 16];
        unint64_t v32 = v4 - 2;
        uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          _OWORD *v31 = v34;
          v31 -= 2;
          v32 -= 4;
          v33 -= 4;
        }
        while (v33);
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          CFTypeRef v4 = (const void **)*((void *)&v44 + 1);
          *((void *)&v44 + 1) = v19;
          *(void *)&long long v45 = v11;
          *((void *)&v45 + 1) = v20;
          if (!v4) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v28 = v4;
      }
    }
    else
    {
      unint64_t v28 = v4;
    }
    do
    {
      uint64_t v35 = (uint64_t)*--v28;
      *--unint64_t v19 = v35;
    }
    while (v28 != (const void **)v12);
    goto LABEL_52;
  }
  if (!v26) {
LABEL_54:
  }
    __cxa_bad_cast();
  unint64_t v22 = v26 + 9;
LABEL_27:
  unsigned char *v22 = 1;
  uint64_t v39 = v2 + 144;
  uint64_t v40 = QMIServiceMsg::create();
  int v41 = 25000;
  uint64_t v42 = 0;
  int v43 = 0;
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 1174405120;
  v36[2] = ___ZN4data20QMIDataCommandDriver23setLowLatencyCapabilityEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
  v36[3] = &__block_descriptor_tmp_134_0;
  v36[4] = v2;
  uint64_t v23 = (void *)a1[5];
  if (v23) {
    uint64_t v23 = _Block_copy(v23);
  }
  unint64_t v24 = a1[6];
  uint64_t v37 = v23;
  dispatch_object_t object = v24;
  if (v24) {
    dispatch_retain(v24);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6196668;
  void aBlock[4] = v36;
  xpc_object_t v25 = _Block_copy(aBlock);
  int v43 = v25;
  if (v40)
  {
    qmi::Client::send();
    xpc_object_t v25 = v43;
  }
  if (v25) {
    _Block_release(v25);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v37) {
    _Block_release(v37);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
}

void sub_1B8BEF90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BEF930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BEF948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver23setLowLatencyCapabilityEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  long long v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(void *)(a1 + 48)) {
    goto LABEL_20;
  }
  CFTypeRef v4 = cf;
  if (cf && (CFRetain(cf), (long long v3 = *(const void **)(a1 + 40)) == 0)) {
    int v5 = 0;
  }
  else {
    int v5 = _Block_copy(v3);
  }
  xpc_object_t v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_178_0;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    CFTypeRef v10 = v4;
    if (!v4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef v10 = v4;
  if (v4) {
LABEL_11:
  }
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10) {
    CFRelease(v10);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(data::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)data::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F126A1D0;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F126A1D0;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8BEFD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B8BEFD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<data::QMIDataCommandDriver>::shared_ptr[abi:ne180100]<data::QMIDataCommandDriver,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  CFTypeRef v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F126A210;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8BEFE84(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver*)#1}::operator() const(data::QMIDataCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8BEFEAC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<data::QMIDataCommandDriver *,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver *)#1},std::allocator<data::QMIDataCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<data::QMIDataCommandDriver *,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver *)#1},std::allocator<data::QMIDataCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<data::QMIDataCommandDriver *,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver *)#1},std::allocator<data::QMIDataCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4data13CommandDriverEE15make_shared_ptrINS1_20QMIDataCommandDriverEEE"
                     "NSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4data13CommandDriverEE15make_shared_ptrINS1_20QMIDataComma"
                                "ndDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4data13CommandDriverEE15make_shared_ptrINS1_20QMIDataCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4data13CommandDriverEE15make_shared_ptrINS1_20QMIDataCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver*)#1}::operator() const(data::QMIDataCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4data13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F126A258;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  CFTypeRef v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4data13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4data13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4data13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

char *qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(void *a1, char a2)
{
  CFTypeRef v4 = operator new(0x18uLL);
  uint64_t v5 = v4;
  v4[8] = a2;
  *((_DWORD *)v4 + 3) = 0;
  uint64_t v6 = v4 + 12;
  *(void *)CFTypeRef v4 = &unk_1F126A2B0;
  *((_DWORD *)v4 + 4) = 0;
  uint64_t v8 = (char *)a1[2];
  unint64_t v7 = a1[3];
  __int16 v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(void *)uint64_t v8 = v4;
    uint64_t v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  uint64_t v11 = (char *)a1[1];
  uint64_t v12 = (v8 - v11) >> 3;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v7 - (void)v11;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v16 = (char *)operator new(8 * v15);
    unint64_t v17 = &v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    *(void *)unint64_t v17 = v5;
    uint64_t v10 = (uint64_t)(v17 + 8);
    unint64_t v19 = (char *)(v8 - v11);
    if (v8 == v11) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v16 = 0;
  unint64_t v17 = (char *)(8 * v12);
  uint64_t v18 = 0;
  *(void *)(8 * v12) = v5;
  uint64_t v10 = 8 * v12 + 8;
  unint64_t v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v11 - v16) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    __int16 v9 = &v8[-v22];
    v17 -= v22;
    uint64_t v23 = &v16[8 * v12 - 16];
    unint64_t v24 = (long long *)(v8 - 16);
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)uint64_t v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    __int16 v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9) {
    operator delete(v9);
  }
LABEL_23:
  a1[2] = v10;
  return v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::PeripheralEndPointID>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::PeripheralEndPointID>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::PeripheralEndPointID>::clone(uint64_t a1)
{
  size_t result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F126A2B0;
  *(void *)(result + 12) = *(void *)(a1 + 12);
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  char v2 = (const void *)a1[5];
  CFTypeRef cf = v2;
  if (v2) {
    CFRetain(v2);
  }
  CFTypeRef v4 = (void *)a1[6];
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, CFTypeRef *, xpc_object_t *))(v3 + 16))(v3, &cf, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BF0494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  CFTypeRef v4 = (const void *)a2[4];
  if (!v4)
  {
    uint64_t v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = _Block_copy(v4);
  uint64_t v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  unint64_t v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7) {
    return xpc_retain(v7);
  }
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  char v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13GetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF0664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF0678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF06A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm15GetQMAPSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF0780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF0794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF07C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataFlowControl>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataFlowControl>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataFlowControl>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A330;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::InBandFlowControl>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::InBandFlowControl>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::InBandFlowControl>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A380;
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BF0938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm15SetQMAPSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF0A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF0A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF0A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationProtocol>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationProtocol>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationProtocol>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A400;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A450;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxSize>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxSize>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxSize>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A4A0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationProtocol>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationProtocol>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationProtocol>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A4F0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A540;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxSize>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxSize>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxSize>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A590;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LinkLayerProtocol>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LinkLayerProtocol>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LinkLayerProtocol>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A5E0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::CoalescingInformation>::getSize()
{
  return 5;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::CoalescingInformation>::write(unsigned char *result, uint64_t *a2)
{
  char v2 = result[8];
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + 3) = result[9];
  *(unsigned char *)(v3 + 4) = result[10];
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::CoalescingInformation>::clone(uint64_t a1)
{
  xpc_object_t result = (char *)operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A630;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF0FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF0FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF0FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataPowerSaveConfig>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataPowerSaveConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataPowerSaveConfig>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A680;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm18SetPowerSaveConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF1148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF115C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF1188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DefaultFlowRebindVersion>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DefaultFlowRebindVersion>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DefaultFlowRebindVersion>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A6D0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF12F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF1304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF1330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LowLatencyConfig>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LowLatencyConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LowLatencyConfig>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F126A720;
  return result;
}

uint64_t *GetOsLogContext(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC05BA28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC05BA28))
  {
    qword_1EC05BA48 = 0;
    qword_1EC05BA40 = 0;
    __cxa_atexit(MEMORY[0x1E4FBA188], &qword_1EC05BA40, &dword_1B8B00000);
    __cxa_guard_release(&qword_1EC05BA28);
  }
  if (_MergedGlobals_3 != -1) {
    dispatch_once(&_MergedGlobals_3, &__block_literal_global_1);
  }
  return &qword_1EC05BA40;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC05BA38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC05BA38))
  {
    MEMORY[0x1BA9C7630](&unk_1EC05BA50);
    __cxa_atexit(MEMORY[0x1E4FBA190], &unk_1EC05BA50, &dword_1B8B00000);
    __cxa_guard_release(&qword_1EC05BA38);
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_3_0;
  char v2 = (std::__shared_weak_count *)a1[1];
  v5[4] = *a1;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (qword_1EC05BA30 == -1)
  {
    uint64_t v3 = v6;
    if (!v6) {
      return &unk_1EC05BA50;
    }
  }
  else
  {
    dispatch_once(&qword_1EC05BA30, v5);
    uint64_t v3 = v6;
    if (!v6) {
      return &unk_1EC05BA50;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return &unk_1EC05BA50;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return &unk_1EC05BA50;
}

void sub_1B8BF163C(_Unwind_Exception *a1)
{
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC05BA28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC05BA28))
  {
    qword_1EC05BA48 = 0;
    qword_1EC05BA40 = 0;
    __cxa_atexit(MEMORY[0x1E4FBA188], &qword_1EC05BA40, &dword_1B8B00000);
    __cxa_guard_release(&qword_1EC05BA28);
  }
  if (_MergedGlobals_3 != -1) {
    dispatch_once(&_MergedGlobals_3, &__block_literal_global_1);
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, (const ctu::OsLogContext *)&qword_1EC05BA40);
  MEMORY[0x1BA9C7620](v6, v5, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  uint64_t v3 = v7;
  uint64_t v2 = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)qword_1EC05BA88;
  qword_1EC05BA80 = v3;
  qword_1EC05BA88 = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x1BA9C7640](v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
}

void sub_1B8BF17A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t coredump::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0xE0uLL);
  uint64_t v7 = (uint64_t)v6;
  uint64_t v8 = a1[1];
  uint64_t v16 = *a1;
  unint64_t v17 = (std::__shared_weak_count *)v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  v15[0] = v9;
  v15[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  coredump::QMICommandDriver::QMICommandDriver((uint64_t)v6, &v16, v15);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<coredump::QMICommandDriver>::shared_ptr[abi:ne180100]<coredump::QMICommandDriver,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unint64_t v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 48))(*a3, v11, v12);
}

void sub_1B8BF19B4(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8BF19C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t coredump::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v11 = *a2;
  uint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  uint64_t v9 = *a3;
  uint64_t v10 = (std::__shared_weak_count *)v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  coredump::CommandDriver::CommandDriver((uint64_t *)a1, &v11, &v9);
  uint64_t v6 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)a1 = &unk_1F126A7A8;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return a1;
}

void sub_1B8BF1B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void coredump::QMICommandDriver::~QMICommandDriver(coredump::QMICommandDriver *this)
{
  *(void *)this = &unk_1F126A7A8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriver *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(void *)this = &unk_1F126A7A8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriver *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(void *)this = &unk_1F126A7A8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriver *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
  operator delete(v3);
}

void coredump::QMICommandDriver::init(coredump::QMICommandDriver *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN8coredump16QMICommandDriver4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_13_3;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_0;
  block[3] = &__block_descriptor_tmp_91_0;
  void block[4] = (char *)this + 72;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN8coredump16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v42, *(Registry **)(v1 + 176));
  if (!v42)
  {
    char v38 = 12;
    strcpy((char *)v37, "coredump.drv");
    uint64_t v22 = *(NSObject **)(v1 + 88);
    uint64_t v31 = v22;
    if (v22) {
      dispatch_retain(v22);
    }
    char v35 = 10;
    strcpy((char *)v34, "coredump_1");
    uint64_t v23 = *(std::__shared_weak_count **)(v1 + 80);
    if (!v23 || (unint64_t v24 = std::__shared_weak_count::lock(v23)) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v25 = v24;
    atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v26 = std::__shared_weak_count::lock(v24);
      if (v26)
      {
LABEL_44:
        atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v30 = v26;
LABEL_45:
        std::__shared_weak_count::__release_weak(v25);
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        qmi::Client::createWithQueue();
        long long v27 = v41;
        long long v41 = 0uLL;
        unint64_t v28 = *(std::__shared_weak_count **)(v1 + 216);
        *(_OWORD *)(v1 + 208) = v27;
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        qmi::Client::~Client((qmi::Client *)buf);
        if (v30) {
          std::__shared_weak_count::__release_weak(v30);
        }
        if (v35 < 0)
        {
          operator delete(v34[0]);
          uint64_t v9 = v31;
          if (!v31) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v9 = v31;
          if (!v31) {
            goto LABEL_26;
          }
        }
LABEL_25:
        dispatch_release(v9);
        goto LABEL_26;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v25);
      long long v26 = std::__shared_weak_count::lock(v25);
      if (v26) {
        goto LABEL_44;
      }
    }
    uint64_t v30 = v26;
    goto LABEL_45;
  }
  char v38 = 12;
  uint64_t v2 = *(NSObject **)(v1 + 88);
  long long v36 = v2;
  strcpy((char *)v37, "coredump.drv");
  if (v2) {
    dispatch_retain(v2);
  }
  char v35 = 10;
  strcpy((char *)v34, "coredump_1");
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v3 || (uint64_t v4 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6) {
      goto LABEL_8;
    }
LABEL_69:
    uint64_t v33 = v6;
    goto LABEL_9;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    goto LABEL_69;
  }
LABEL_8:
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v33 = v6;
LABEL_9:
  std::__shared_weak_count::__release_weak(v5);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v32 = (std::__shared_weak_count *)v43;
  if (v43) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v7 = v41;
  long long v41 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  uint64_t v9 = v36;
  if (v36) {
    goto LABEL_25;
  }
LABEL_26:
  if (v38 < 0)
  {
    operator delete(v37[0]);
    uint64_t v10 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
LABEL_28:
      uint64_t v11 = *(std::__shared_weak_count **)(v1 + 80);
      if (!v11) {
        goto LABEL_58;
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v10 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_28;
    }
  }
  *(_WORD *)buf = 0;
  _os_log_debug_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_DEBUG, "#D initializing", buf, 2u);
  uint64_t v11 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v11) {
LABEL_58:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_29:
  uint64_t v12 = std::__shared_weak_count::lock(v11);
  if (!v12) {
    goto LABEL_58;
  }
  unint64_t v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  unint64_t v15 = (qmi::Client *)(v1 + 192);
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  uint64_t v16 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v16 || (v17 = *(void *)(v1 + 72), (uint64_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v19 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
    unint64_t v20 = std::__shared_weak_count::lock(v19);
    if (v20) {
      goto LABEL_36;
    }
LABEL_60:
    *(void *)buf = 0;
    uint64_t v40 = 0;
    goto LABEL_61;
  }
  unint64_t v20 = std::__shared_weak_count::lock(v18);
  if (!v20) {
    goto LABEL_60;
  }
LABEL_36:
  uint64_t v21 = (atomic_ullong *)v20;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)buf = v17;
  uint64_t v40 = v20;
  std::__shared_weak_count::__release_weak(v19);
  if (atomic_fetch_add(v21 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_62;
  }
  (*(void (**)(atomic_ullong *))(*v21 + 16))(v21);
  unint64_t v19 = (std::__shared_weak_count *)v21;
LABEL_61:
  std::__shared_weak_count::__release_weak(v19);
LABEL_62:
  qmi::Client::setClientHandle();
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  qmi::Client::start(v15);
  std::__shared_weak_count::__release_weak(v13);
  std::__shared_weak_count::__release_weak(v13);
  std::__shared_weak_count::__release_weak(v13);
  std::__shared_weak_count::__release_weak(v13);
  uint64_t v29 = (std::__shared_weak_count *)v43;
  if (v43)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v43 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1B8BF2610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,dispatch_object_t object,char a34)
{
  if (a32)
  {
    std::__shared_weak_count::__release_weak(a32);
    if ((*(char *)(v34 - 145) & 0x80000000) == 0)
    {
LABEL_3:
      long long v36 = object;
      if (!object) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v34 - 145) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v34 - 168));
  long long v36 = object;
  if (!object)
  {
LABEL_8:
    if (*(char *)(v34 - 113) < 0)
    {
      operator delete(*(void **)(v34 - 136));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 80);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 80);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v36);
  goto LABEL_8;
}

void ___ZN8coredump16QMICommandDriver4initEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long v7 = 0;
          _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D stopped", v7, 2u);
        }
        boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v3 + 112), 1);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8BF2884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN8coredump16QMICommandDriver4initEv_block_invoke_4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long v7 = 0;
          _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D started", v7, 2u);
        }
        boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v3 + 112), 0);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8BF2990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN8coredump16QMICommandDriver4initEv_block_invoke_8(void *a1, xpc_object_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v14 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v8 = v6;
LABEL_10:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      xpc_object_t v12 = a2;
      if (a2)
      {
        xpc_retain(a2);
        long long v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_9;
        }
      }
      else
      {
        a2 = xpc_null_create();
        xpc_object_t v12 = a2;
        long long v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_9;
        }
      }
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)&v12);
      if (v11 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v16 = v9;
      _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D server error %s", buf, 0xCu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      a2 = v12;
LABEL_9:
      xpc_release(a2);
      uint64_t v8 = v14;
      if (!v14) {
        return;
      }
      goto LABEL_10;
    }
  }
}

void sub_1B8BF2B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, char a13)
{
}

void sub_1B8BF2B50(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void coredump::QMICommandDriver::crashBaseband(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 208)) {
    return;
  }
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v33 = v3;
  long long v34 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v33);
  char v4 = *(unsigned char *)(a2 + 23);
  if ((v4 & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_42;
    }
LABEL_6:
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 1174405120;
    uint64_t v30 = ___ZN8coredump16QMICommandDriver13crashBasebandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
    uint64_t v31 = &__block_descriptor_tmp_14_7;
    if (v4 < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint64_t v5 = (char *)*((void *)&v33 + 1);
    uint64_t v6 = (char *)v34;
    long long v7 = (const void **)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1) != (void)v34)
    {
      long long v7 = (const void **)*((void *)&v33 + 1);
      while (*((unsigned char *)*v7 + 8) != 16)
      {
        if (++v7 == (const void **)v34) {
          goto LABEL_17;
        }
      }
    }
    if (v7 != (const void **)v34)
    {
      if (!v8) {
        __cxa_bad_cast();
      }
      uint64_t v9 = v8 + 9;
      goto LABEL_40;
    }
LABEL_17:
    uint64_t v10 = (char *)operator new(0x60uLL);
    char v11 = v10;
    v10[8] = 16;
    *(void *)uint64_t v10 = &unk_1F126AA10;
    *(_OWORD *)(v10 + 9) = 0u;
    uint64_t v9 = v10 + 9;
    *(_OWORD *)(v10 + 25) = 0u;
    *(_OWORD *)(v10 + 41) = 0u;
    *(_OWORD *)(v10 + 57) = 0u;
    *(_OWORD *)(v10 + 73) = 0u;
    if ((unint64_t)v6 < *((void *)&v34 + 1))
    {
      *(void *)uint64_t v6 = v10;
      *(void *)&long long v34 = v6 + 8;
LABEL_40:
      v30((uint64_t)v29, v9);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_42;
    }
    int64_t v12 = v6 - v5;
    uint64_t v13 = (v6 - v5) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = *((void *)&v34 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v34 + 1) - (void)v5) >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = operator new(8 * v16);
      uint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      *uint64_t v18 = v11;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v5 == v6) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = (void *)(8 * v13);
      unint64_t v19 = 0;
      *(void *)(8 * v13) = v11;
      uint64_t v20 = 8 * v13 + 8;
      if (v5 == v6)
      {
LABEL_37:
        *((void *)&v33 + 1) = v18;
        *(void *)&long long v34 = v20;
        *((void *)&v34 + 1) = v19;
        if (v5) {
          operator delete(v5);
        }
        *(void *)&long long v34 = v20;
        goto LABEL_40;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_51;
    }
    if ((unint64_t)(v5 - v17) < 0x20) {
      goto LABEL_51;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v23 = &v6[-v22];
    uint64_t v18 = (void *)((char *)v18 - v22);
    unint64_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v6 - 16;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *unint64_t v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 4;
    }
    while (v26);
    uint64_t v6 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_51:
      do
      {
        uint64_t v28 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v18 = v28;
      }
      while (v6 != v5);
    }
    uint64_t v5 = (char *)*((void *)&v33 + 1);
    goto LABEL_37;
  }
  if (*(void *)(a2 + 8)) {
    goto LABEL_6;
  }
LABEL_42:
  if (QMIServiceMsg::create()) {
    qmi::Client::send();
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v33);
}

void sub_1B8BF2EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BF2F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a24);
  _Unwind_Resume(a1);
}

size_t ___ZN8coredump16QMICommandDriver13crashBasebandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1, char *__dst)
{
  long long v3 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    long long v3 = *(const char **)v3;
  }
  return strlcpy(__dst, v3, 0x50uLL);
}

void coredump::QMICommandDriver::fetchPostBootCrashReason(coredump::QMICommandDriver *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_28_2;
  v1[4] = this;
  ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[26])
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[10];
    if (!v2 || (uint64_t v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v5 = v4;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[0] = v6;
    v16[1] = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
    char v11 = v1 + 24;
    uint64_t v12 = QMIServiceMsg::create();
    int v13 = 25000;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    v9[2] = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_15;
    v9[3] = &__block_descriptor_tmp_27_2;
    void v9[4] = v1;
    void v9[5] = v3;
    uint64_t v10 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 0x40000000;
    uint64_t v18 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22CoreDumpGetCrashReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    unint64_t v19 = &unk_1E6196810;
    uint64_t v20 = v9;
    long long v7 = _Block_copy(&aBlock);
    uint64_t v15 = v7;
    if (v12)
    {
      qmi::Client::send();
      long long v7 = v15;
    }
    if (v7) {
      _Block_release(v7);
    }
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    uint64_t v8 = v1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(aBlock) = 136315138;
      *(void *)((char *)&aBlock + 4) = "fetchPostBootCrashReason_block_invoke";
      _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "%s: No client, bail", (uint8_t *)&aBlock, 0xCu);
    }
  }
}

void sub_1B8BF3234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

void sub_1B8BF3274(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8BF326CLL);
}

void ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_15(void *a1, qmi::MessageBase *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    long long v57 = v6;
    if (v6)
    {
      long long v7 = v6;
      if (!a1[5])
      {
LABEL_27:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v48 = 0;
      uint64_t v49 = &v48;
      uint64_t v50 = 0x4002000000;
      long long v51 = __Block_byref_object_copy__10;
      long long v52 = __Block_byref_object_dispose__10;
      uint64_t v53 = (uint64_t)&v53;
      uint64_t v54 = &v53;
      uint64_t v55 = 0;
      if (*((_DWORD *)a2 + 1))
      {
        uint64_t v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "Failed: Getting PostBootCrashReason response", (uint8_t *)&buf, 2u);
        }
      }
      else
      {
        v43[0] = MEMORY[0x1E4F143A8];
        v43[1] = 0x40000000;
        long long v44 = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_16;
        long long v45 = &unk_1E61966F8;
        long long v46 = &v48;
        long long v47 = a2;
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        char v11 = TlvValue;
        if (TlvValue)
        {
          long long v64 = 0u;
          memset(v65, 0, sizeof(v65));
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long buf = 0u;
          long long v59 = 0u;
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)0x83);
          long long buf = *(_OWORD *)v11;
          long long v12 = *((_OWORD *)v11 + 1);
          long long v13 = *((_OWORD *)v11 + 2);
          long long v14 = *((_OWORD *)v11 + 4);
          long long v61 = *((_OWORD *)v11 + 3);
          long long v62 = v14;
          long long v59 = v12;
          long long v60 = v13;
          long long v15 = *((_OWORD *)v11 + 5);
          long long v16 = *((_OWORD *)v11 + 6);
          long long v17 = *((_OWORD *)v11 + 7);
          *(_DWORD *)&v65[15] = *(_DWORD *)((char *)v11 + 127);
          long long v64 = v16;
          *(_OWORD *)dispatch_object_t v65 = v17;
          long long v63 = v15;
          v44((uint64_t)v43, (const std::string::value_type *)&buf);
        }
        v38[0] = MEMORY[0x1E4F143A8];
        v38[1] = 0x40000000;
        uint64_t v39 = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_3;
        uint64_t v40 = &unk_1E6196748;
        long long v41 = &v48;
        uint64_t v42 = a2;
        uint64_t v18 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v20 = v18;
        if (v18)
        {
          long long v64 = 0u;
          memset(v65, 0, sizeof(v65));
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long buf = 0u;
          long long v59 = 0u;
          tlv::throwIfNotEnoughBytes(v18, (const unsigned __int8 *)v18 + v19, (const unsigned __int8 *)0x83);
          long long buf = *(_OWORD *)v20;
          long long v21 = *((_OWORD *)v20 + 1);
          long long v22 = *((_OWORD *)v20 + 2);
          long long v23 = *((_OWORD *)v20 + 4);
          long long v61 = *((_OWORD *)v20 + 3);
          long long v62 = v23;
          long long v59 = v21;
          long long v60 = v22;
          long long v24 = *((_OWORD *)v20 + 5);
          long long v25 = *((_OWORD *)v20 + 6);
          long long v26 = *((_OWORD *)v20 + 7);
          *(_DWORD *)&v65[15] = *(_DWORD *)((char *)v20 + 127);
          long long v64 = v25;
          *(_OWORD *)dispatch_object_t v65 = v26;
          long long v63 = v24;
          v39((uint64_t)v38, (const std::string::value_type *)&buf);
        }
      }
      std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v35, (uint64_t)(v49 + 5));
      boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(v5 + 128, (uint64_t)&v35);
      if (!v37
        || (long long v27 = v35,
            uint64_t v28 = v36,
            uint64_t v29 = *v36,
            *((void *)v29 + 1) = *((void *)v35 + 1),
            **((void **)v27 + 1) = v29,
            uint64_t v37 = 0,
            v28 == &v35))
      {
LABEL_19:
        _Block_object_dispose(&v48, 8);
        if (!v55) {
          goto LABEL_27;
        }
        uint64_t v31 = v53;
        unint64_t v32 = v54;
        uint64_t v33 = *v54;
        *(void *)(v33 + 8) = *(void *)(v53 + 8);
        **(void **)(v31 + 8) = v33;
        uint64_t v55 = 0;
        if (v32 == &v53) {
          goto LABEL_27;
        }
        while (1)
        {
          long long v34 = (uint64_t *)v32[1];
          if (*((char *)v32 + 63) < 0)
          {
            operator delete((void *)v32[5]);
            if ((*((char *)v32 + 39) & 0x80000000) == 0) {
              goto LABEL_23;
            }
LABEL_26:
            operator delete((void *)v32[2]);
            operator delete(v32);
            unint64_t v32 = v34;
            if (v34 == &v53) {
              goto LABEL_27;
            }
          }
          else
          {
            if (*((char *)v32 + 39) < 0) {
              goto LABEL_26;
            }
LABEL_23:
            operator delete(v32);
            unint64_t v32 = v34;
            if (v34 == &v53) {
              goto LABEL_27;
            }
          }
        }
      }
      while (1)
      {
        uint64_t v30 = (char **)v28[1];
        if (*((char *)v28 + 63) < 0)
        {
          operator delete(v28[5]);
          if ((*((char *)v28 + 39) & 0x80000000) == 0) {
            goto LABEL_15;
          }
LABEL_18:
          operator delete(v28[2]);
          operator delete(v28);
          uint64_t v28 = v30;
          if (v30 == &v35) {
            goto LABEL_19;
          }
        }
        else
        {
          if (*((char *)v28 + 39) < 0) {
            goto LABEL_18;
          }
LABEL_15:
          operator delete(v28);
          uint64_t v28 = v30;
          if (v30 == &v35) {
            goto LABEL_19;
          }
        }
      }
    }
  }
}

void sub_1B8BF36BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v33, 18, v34, v35);
    JUMPOUT(0x1B8BF3508);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_16(uint64_t a1, const std::string::value_type *a2)
{
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  memset(v23, 0, sizeof(v23));
  std::string::__assign_external(&v23[1], a2);
  if ((SHIBYTE(v23[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type size = HIBYTE(v23[1].__r_.__value_.__r.__words[2]);
LABEL_4:
    std::string::__assign_external(v23, &a2[size + 1]);
    goto LABEL_5;
  }
  std::string::size_type size = v23[1].__r_.__value_.__l.__size_;
  if (v23[1].__r_.__value_.__l.__size_ + 1 < 0x83) {
    goto LABEL_4;
  }
  if (SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) < 0)
  {
    v23[0].__r_.__value_.__l.__size_ = 12;
    long long v14 = (std::string *)v23[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&v23[0].__r_.__value_.__s + 23) = 12;
    long long v14 = v23;
  }
  strcpy((char *)v14, "tlv overflow");
LABEL_5:
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  int v22 = 0;
  uint64_t v5 = *(qmi::MessageBase **)(a1 + 40);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  long long v16 = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_2;
  long long v17 = &unk_1E61966D0;
  uint64_t v18 = &v19;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(v5);
  uint64_t v8 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v7, (const unsigned __int8 *)2);
    __int16 v25 = *(_WORD *)v8;
    v16((uint64_t)v15, (unsigned __int16 *)&v25);
  }
  LODWORD(v24) = *((_DWORD *)v20 + 6);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  int v10 = (char *)operator new(0x48uLL);
  char v11 = v10;
  *(void *)int v10 = 0;
  *((void *)v10 + 1) = 0;
  if (SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v10 + 16), v23[0].__r_.__value_.__l.__data_, v23[0].__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v10 + 16) = v23[0];
  }
  long long v12 = (std::string *)(v11 + 5);
  if (SHIBYTE(v23[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v23[1].__r_.__value_.__l.__data_, v23[1].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v23[1].__r_.__value_.__l.__data_;
    v11[7] = *((void *)&v23[1].__r_.__value_.__l + 2);
  }
  v11[8] = v24;
  v11[1] = v9 + 40;
  uint64_t v13 = *(void *)(v9 + 40);
  *char v11 = v13;
  *(void *)(v13 + 8) = v11;
  *(void *)(v9 + 40) = v11;
  ++*(void *)(v9 + 56);
  _Block_object_dispose(&v19, 8);
  if ((SHIBYTE(v23[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete(v23[0].__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v23[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_1B8BF39D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19[39] < 0) {
    operator delete(*v20);
  }
  operator delete(v19);
  _Block_object_dispose(&a15, 8);
  std::pair<std::string,std::string>::~pair((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1B8BF3A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_2(uint64_t result, unsigned __int16 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_3(uint64_t a1, const std::string::value_type *a2)
{
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  memset(v23, 0, sizeof(v23));
  std::string::__assign_external(&v23[1], a2);
  if ((SHIBYTE(v23[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type size = HIBYTE(v23[1].__r_.__value_.__r.__words[2]);
LABEL_4:
    std::string::__assign_external(v23, &a2[size + 1]);
    goto LABEL_5;
  }
  std::string::size_type size = v23[1].__r_.__value_.__l.__size_;
  if (v23[1].__r_.__value_.__l.__size_ + 1 < 0x83) {
    goto LABEL_4;
  }
  if (SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) < 0)
  {
    v23[0].__r_.__value_.__l.__size_ = 12;
    long long v14 = (std::string *)v23[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&v23[0].__r_.__value_.__s + 23) = 12;
    long long v14 = v23;
  }
  strcpy((char *)v14, "tlv overflow");
LABEL_5:
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  int v22 = 0;
  uint64_t v5 = *(qmi::MessageBase **)(a1 + 40);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  long long v16 = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_4;
  long long v17 = &unk_1E6196720;
  uint64_t v18 = &v19;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(v5);
  uint64_t v8 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v7, (const unsigned __int8 *)2);
    __int16 v25 = *(_WORD *)v8;
    v16((uint64_t)v15, (unsigned __int16 *)&v25);
  }
  LODWORD(v24) = *((_DWORD *)v20 + 6);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  int v10 = (char *)operator new(0x48uLL);
  char v11 = v10;
  *(void *)int v10 = 0;
  *((void *)v10 + 1) = 0;
  if (SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v10 + 16), v23[0].__r_.__value_.__l.__data_, v23[0].__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v10 + 16) = v23[0];
  }
  long long v12 = (std::string *)(v11 + 5);
  if (SHIBYTE(v23[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v23[1].__r_.__value_.__l.__data_, v23[1].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v23[1].__r_.__value_.__l.__data_;
    v11[7] = *((void *)&v23[1].__r_.__value_.__l + 2);
  }
  v11[8] = v24;
  v11[1] = v9 + 40;
  uint64_t v13 = *(void *)(v9 + 40);
  *char v11 = v13;
  *(void *)(v13 + 8) = v11;
  *(void *)(v9 + 40) = v11;
  ++*(void *)(v9 + 56);
  _Block_object_dispose(&v19, 8);
  if ((SHIBYTE(v23[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete(v23[0].__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v23[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_1B8BF3CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19[39] < 0) {
    operator delete(*v20);
  }
  operator delete(v19);
  _Block_object_dispose(&a15, 8);
  std::pair<std::string,std::string>::~pair((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1B8BF3D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_4(uint64_t result, unsigned __int16 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void coredump::QMICommandDriver::getCoreDumpEnabledStatus(coredump::QMICommandDriver *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_37;
  v1[4] = this;
  ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[26])
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[10];
    if (!v2 || (uint64_t v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v5 = v4;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[0] = v6;
    v16[1] = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
    char v11 = v1 + 24;
    uint64_t v12 = QMIServiceMsg::create();
    int v13 = 25000;
    uint64_t v14 = 0;
    long long v15 = 0;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    v9[2] = ___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke_30;
    v9[3] = &__block_descriptor_tmp_36_3;
    void v9[4] = v1;
    void v9[5] = v3;
    int v10 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 0x40000000;
    uint64_t v18 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18CoreDumpGetEnabled8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v19 = &unk_1E6196838;
    uint64_t v20 = v9;
    int v7 = _Block_copy(&aBlock);
    long long v15 = v7;
    if (v12)
    {
      qmi::Client::send();
      int v7 = v15;
    }
    if (v7) {
      _Block_release(v7);
    }
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    uint64_t v8 = v1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(aBlock) = 136315138;
      *(void *)((char *)&aBlock + 4) = "getCoreDumpEnabledStatus_block_invoke";
      _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "%s: No client, bail", (uint8_t *)&aBlock, 0xCu);
    }
  }
}

void sub_1B8BF4064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

void sub_1B8BF40A4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8BF409CLL);
}

void ___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke_30(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    long long v17 = v6;
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        if (*((_DWORD *)a2 + 1))
        {
          uint64_t v8 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "WARNING: Failed to get core dump setting. BB is probably old", buf, 2u);
          }
        }
        else
        {
          v12[0] = MEMORY[0x1E4F143A8];
          v12[1] = 0x40000000;
          int v13 = (uint64_t (*)(uint64_t, uint8_t *))___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke_31;
          uint64_t v14 = &__block_descriptor_tmp_33_2;
          uint64_t v15 = v5;
          TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
          char v11 = TlvValue;
          if (TlvValue)
          {
            tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)4);
            *(_DWORD *)long long buf = *(_DWORD *)v11;
            v13((uint64_t)v12, buf);
          }
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8BF4240(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 32, v2, v3);
  JUMPOUT(0x1B8BF41D0);
}

void sub_1B8BF426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke_31(uint64_t a1, _DWORD *a2)
{
  return boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(*(void *)(a1 + 32) + 160), *a2 != 0);
}

void coredump::QMICommandDriver::setCoreDumpEnabledStatus(uint64_t a1, char a2, void **a3)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_43_2;
  v5[4] = a1;
  char v7 = a2;
  char v4 = *a3;
  if (*a3) {
    char v4 = _Block_copy(v4);
  }
  long long aBlock = v4;
  ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v5);
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[26])
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v48 = v3;
    long long v49 = v3;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v48);
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 0x40000000;
    char v4 = (uint64_t (*)(uint64_t, char *))___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_39;
    long long v45 = (uint64_t (*)(uint64_t, char *))___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_39;
    long long v46 = &__block_descriptor_tmp_41;
    char v47 = *(unsigned char *)(a1 + 48);
    uint64_t v5 = (char *)*((void *)&v48 + 1);
    long long v6 = (char *)v49;
    char v7 = (const void **)*((void *)&v48 + 1);
    if (*((void *)&v48 + 1) != (void)v49)
    {
      char v7 = (const void **)*((void *)&v48 + 1);
      while (*((unsigned char *)*v7 + 8) != 32)
      {
        if (++v7 == (const void **)v49) {
          goto LABEL_12;
        }
      }
    }
    if (v7 != (const void **)v49)
    {
      if (!v8) {
        __cxa_bad_cast();
      }
      uint64_t v9 = v8 + 12;
      goto LABEL_26;
    }
LABEL_12:
    char v11 = operator new(0x10uLL);
    uint64_t v12 = v11;
    v11[8] = 32;
    *(void *)char v11 = &unk_1F126AA60;
    *((_DWORD *)v11 + 3) = 0;
    uint64_t v9 = v11 + 12;
    if ((unint64_t)v6 < *((void *)&v49 + 1))
    {
      *(void *)long long v6 = v11;
      uint64_t v13 = (uint64_t)(v6 + 8);
LABEL_25:
      *(void *)&long long v49 = v13;
      char v4 = v45;
LABEL_26:
      v4((uint64_t)v44, v9);
      int v22 = (std::__shared_weak_count *)v1[10];
      if (!v22 || (uint64_t v23 = v1[9], (v24 = std::__shared_weak_count::lock(v22)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      __int16 v25 = v24;
      atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v25);
      }
      uint64_t v39 = v1 + 24;
      uint64_t v40 = QMIServiceMsg::create();
      int v41 = 25000;
      uint64_t v42 = 0;
      long long aBlock = 0;
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 1174405120;
      v36[2] = ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
      v36[3] = &__block_descriptor_tmp_42_2;
      v36[4] = v23;
      uint64_t v37 = v25;
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      long long v26 = *(void **)(a1 + 40);
      if (v26) {
        long long v26 = _Block_copy(v26);
      }
      char v38 = v26;
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 0x40000000;
      long long v51 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18CoreDumpSetEnabled8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      long long v52 = &unk_1E6196860;
      uint64_t v53 = v36;
      long long v27 = _Block_copy(&buf);
      long long aBlock = v27;
      if (v40)
      {
        qmi::Client::send();
        long long v27 = aBlock;
      }
      if (v27) {
        _Block_release(v27);
      }
      if (v38) {
        _Block_release(v38);
      }
      if (v37) {
        std::__shared_weak_count::__release_weak(v37);
      }
      std::__shared_weak_count::__release_weak(v25);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v48);
      return;
    }
    int64_t v14 = v6 - v5;
    uint64_t v15 = (v6 - v5) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v49 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v49 + 1) - (void)v5) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = operator new(8 * v18);
      uint64_t v20 = &v19[8 * v15];
      uint64_t v21 = &v19[8 * v18];
      *uint64_t v20 = v12;
      uint64_t v13 = (uint64_t)(v20 + 1);
      if (v5 == v6)
      {
LABEL_23:
        *((void *)&v48 + 1) = v20;
        *(void *)&long long v49 = v13;
        *((void *)&v49 + 1) = v21;
        if (!v5) {
          goto LABEL_25;
        }
LABEL_24:
        operator delete(v5);
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = (void *)(8 * v15);
      uint64_t v21 = 0;
      *(void *)(8 * v15) = v12;
      uint64_t v13 = 8 * v15 + 8;
      if (v5 == v6) {
        goto LABEL_23;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_57;
    }
    if ((unint64_t)(v5 - v19) < 0x20) {
      goto LABEL_57;
    }
    unint64_t v28 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v30 = &v6[-v29];
    uint64_t v20 = (void *)((char *)v20 - v29);
    uint64_t v31 = &v19[8 * v15 - 16];
    unint64_t v32 = v6 - 16;
    uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      _OWORD *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 4;
    }
    while (v33);
    long long v6 = v30;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        uint64_t v35 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v20 = v35;
      }
      while (v6 != v5);
    }
    uint64_t v5 = (char *)*((void *)&v48 + 1);
    *((void *)&v48 + 1) = v20;
    *(void *)&long long v49 = v13;
    *((void *)&v49 + 1) = v21;
    if (!v5) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  int v10 = v1[5];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "setCoreDumpEnabledStatus_block_invoke";
    _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "%s: No client, bail", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1B8BF4834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8BF48A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1B8BF48B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_39(uint64_t result, _DWORD *a2)
{
  *a2 = *(unsigned __int8 *)(result + 32);
  return result;
}

void ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    long long v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      char v4 = v3;
      if (a1[4]) {
        (*(void (**)(void))(a1[6] + 16))();
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B8BF49A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN8coredump13CommandDriverEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[6];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN8coredump13CommandDriverEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *std::shared_ptr<coredump::QMICommandDriver>::shared_ptr[abi:ne180100]<coredump::QMICommandDriver,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F126A9A8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  long long v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8BF4B74(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver*)#1}::operator() const(coredump::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8BF4B9C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<coredump::QMICommandDriver *,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver *)#1},std::allocator<coredump::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<coredump::QMICommandDriver *,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver *)#1},std::allocator<coredump::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<coredump::QMICommandDriver *,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver *)#1},std::allocator<coredump::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEE"
                     "NSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_16QMIComma"
                                "ndDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver*)#1}::operator() const(coredump::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_0(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CrashReason>::getSize()
{
  return 83;
}

__n128 qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CrashReason>::write(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_OWORD *)(v3 + 3) = *(_OWORD *)(a1 + 9);
  __n128 result = *(__n128 *)(a1 + 25);
  long long v5 = *(_OWORD *)(a1 + 41);
  long long v6 = *(_OWORD *)(a1 + 57);
  *(_OWORD *)(v3 + 67) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 51) = v6;
  *(_OWORD *)(v3 + 35) = v5;
  *(__n128 *)(v3 + 19) = result;
  *a2 = v3 + 83;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 80;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CrashReason>::clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x60uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)char v2 = &unk_1F126AA10;
  *(_OWORD *)(v2 + 25) = *(_OWORD *)(a1 + 25);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)(v2 + 57) = *(_OWORD *)(a1 + 57);
  *(_OWORD *)(v2 + 73) = *(_OWORD *)(a1 + 73);
  __n128 result = *(__n128 *)(a1 + 9);
  *(__n128 *)(v2 + 9) = result;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22CoreDumpGetCrashReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF4E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF4E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF4E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18CoreDumpGetEnabled8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF4F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF4F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF4FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CoreDumpEnabledType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CoreDumpEnabledType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CoreDumpEnabledType>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F126AA60;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18CoreDumpSetEnabled8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF5120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF514C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void radio::QMICommandDriver::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (std::__shared_weak_count_vtbl *)operator new(0x160uLL);
  uint64_t v9 = a1[1];
  uint64_t v21 = *a1;
  int v22 = (std::__shared_weak_count *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  int v10 = *a2;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *a3;
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  v19[0] = v11;
  v19[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMICommandDriver::QMICommandDriver(v8, &v21, &object, v19);
  *a4 = (uint64_t)v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F126AF30;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = v8;
  a4[1] = (uint64_t)v13;
  uint64_t v15 = (std::__shared_weak_count *)v8[2].~__shared_weak_count;
  if (v15)
  {
    if (v15->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v8[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
      v8[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
      std::__shared_weak_count::__release_weak(v15);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_12:
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  unint64_t v16 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = *a4;
  unint64_t v18 = (uint64_t *)(*a4 + 72);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 0x40000000;
  std::string v23[2] = ___ZN5radio16QMICommandDriver4initEv_block_invoke;
  v23[3] = &__block_descriptor_tmp_8;
  v23[4] = v17;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v18, (uint64_t)v23);
}

void sub_1B8BF53DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v13) {
    dispatch_release(v13);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::init(radio::QMICommandDriver *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio16QMICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_8;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void *radio::QMICommandDriver::QMICommandDriver(void *a1, uint64_t *a2, NSObject **a3, uint64_t *a4)
{
  long long v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  uint64_t v15 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = *a3;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a4;
  uint64_t v9 = (std::__shared_weak_count *)a4[1];
  v12[0] = v8;
  v12[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMICommandDriverBase::QMICommandDriverBase((uint64_t)a1, (uint64_t)&v14, &object, (uint64_t)v12);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  int v10 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *a1 = &unk_1F126AA98;
  return a1;
}

void sub_1B8BF5634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2) {
    dispatch_release(v2);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::~QMICommandDriver(radio::QMICommandDriver *this)
{
  *(void *)this = &unk_1F126AA98;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(void *)this = &unk_1F126AA98;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(void *)this = &unk_1F126AA98;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
  operator delete(v3);
}

void ___ZN5radio16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I initializing", (uint8_t *)&v7, 2u);
  }
  uint64_t v3 = *(Registry **)(v1 + 232);
  if (v3)
  {
    Registry::getServerConnection((uint64_t *)&v7, v3);
    long long v4 = v7;
    long long v7 = 0uLL;
    long long v5 = *(std::__shared_weak_count **)(v1 + 256);
    *(_OWORD *)(v1 + 248) = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  radio::QMICommandDriverBase::startDMSClient_sync((radio::QMICommandDriverBase *)v1);
  radio::QMICommandDriverBase::startBSPClient_sync((radio::QMICommandDriverBase *)v1);
  radio::QMICommandDriverBase::setupOperatingModeReporting_sync((radio::QMICommandDriverBase *)v1);
}

void radio::QMICommandDriver::reset(capabilities::radio *a1, uint64_t a2, uint64_t a3)
{
  if ((capabilities::radio::mav20Plus(a1) & 1) == 0)
  {
    uint64_t v6 = *(void **)a3;
    if (*(void *)a3) {
      uint64_t v6 = _Block_copy(v6);
    }
    long long v7 = *(NSObject **)(a3 + 8);
    long long aBlock = v6;
    dispatch_object_t object = v7;
    if (v7) {
      dispatch_retain(v7);
    }
    (*(void (**)(capabilities::radio *, uint64_t, uint64_t, void **))(*(void *)a1 + 152))(a1, a2, 4, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
}

void sub_1B8BF59D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void radio::QMICommandDriver::getWakeReason(void *a1, uint64_t a2)
{
  long long v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting Baseband wake reason", buf, 2u);
  }
  uint64_t v6 = a1[9];
  long long v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (long long v7 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  void v12[2] = ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_12_4;
  v12[4] = a1;
  v12[5] = v6;
  uint64_t v13 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v10 = *(void **)a2;
  if (*(void *)a2) {
    int v10 = _Block_copy(v10);
  }
  uint64_t v11 = *(NSObject **)(a2 + 8);
  long long aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v3;
  v18[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
  uint64_t v13 = v2 + 320;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_9_4;
  uint64_t v5 = a1[5];
  long long v4 = (std::__shared_weak_count *)a1[6];
  void v9[4] = v2;
  void v9[5] = v5;
  int v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  long long v7 = a1[8];
  uint64_t v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13GetWakeReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  aBlock[3] = &unk_1E61968A8;
  void aBlock[4] = v9;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v17 = v8;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v8 = v17;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_1B8BF5D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8BF5D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    unint64_t v32 = v6;
    if (v6)
    {
      long long v7 = v6;
      if (!a1[5])
      {
LABEL_59:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting wake reason", &cf);
      CFMutableDictionaryRef v29 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v9 = Mutable;
      if (Mutable) {
        CFMutableDictionaryRef v29 = Mutable;
      }
      if (cf) {
        int v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        int v10 = 0;
      }
      if (v10)
      {
        if (!a1[7]) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t block = 0;
        p_uint64_t block = (uint64_t)&block;
        uint64_t v35 = 0x2000000000;
        LOBYTE(v36) = 0;
        v27[0] = 0;
        v27[1] = v27;
        void v27[2] = 0x2000000000;
        int v28 = 0;
        v22[0] = MEMORY[0x1E4F143A8];
        v22[1] = 1174405120;
        uint64_t v23 = ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        unint64_t v24 = &unk_1F126AC30;
        __int16 v25 = v27;
        CFTypeRef v26 = Mutable;
        if (Mutable) {
          CFRetain(Mutable);
        }
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v13 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v12, (const unsigned __int8 *)4);
          LODWORD(v40) = *(_DWORD *)v13;
          ((void (*)(void *, void **))v23)(v22, &v40);
        }
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 1174405120;
        void v20[2] = ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_5;
        v20[3] = &unk_1F126AC68;
        v20[6] = v5;
        CFTypeRef v21 = v9;
        if (v9) {
          CFRetain(v9);
        }
        v20[4] = v27;
        v20[5] = &block;
        uint64_t v40 = v20;
        qmi::MessageBase::applyTlv<bsp::tlv::abm::WakeBuffer,void({block_pointer}&)(bsp::tlv::abm::WakeBuffer const&)>(a2, 19, (uint64_t)&v40);
        if (*(unsigned char *)(p_block + 24))
        {
          std::string __p = (char *)operator new(0x20uLL);
          strcpy(__p, "Null wake data from baseband");
          CreateError();
          CFTypeRef v14 = cf;
          CFTypeRef cf = v40;
          uint64_t v40 = 0;
          if (v14)
          {
            CFRelease(v14);
            if (v40) {
              CFRelease(v40);
            }
          }
          operator delete(__p);
        }
        if (v21) {
          CFRelease(v21);
        }
        if (v26) {
          CFRelease(v26);
        }
        _Block_object_dispose(v27, 8);
        _Block_object_dispose(&block, 8);
        if (!a1[7]) {
          goto LABEL_55;
        }
      }
      if (!a1[8])
      {
LABEL_55:
        if (v9) {
          CFRelease(v9);
        }
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_59;
      }
      CFTypeRef v15 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v9) {
        CFRetain(v9);
      }
      uint64_t v16 = (const void *)a1[7];
      if (v16) {
        uint64_t v17 = _Block_copy(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = a1[8];
      uint64_t block = MEMORY[0x1E4F143A8];
      p_uint64_t block = 1174405120;
      uint64_t v35 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_3;
      long long v36 = &__block_descriptor_tmp_71_4;
      if (v17)
      {
        uint64_t v37 = _Block_copy(v17);
        CFTypeRef v38 = v15;
        if (!v15) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v37 = 0;
        CFTypeRef v38 = v15;
        if (!v15)
        {
LABEL_41:
          CFMutableDictionaryRef v39 = v9;
          if (v9) {
            CFRetain(v9);
          }
          dispatch_async(v18, &block);
          if (v39) {
            CFRelease(v39);
          }
          if (v38) {
            CFRelease(v38);
          }
          if (v37) {
            _Block_release(v37);
          }
          if (v17) {
            _Block_release(v17);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v15) {
            CFRelease(v15);
          }
          goto LABEL_55;
        }
      }
      CFRetain(v15);
      goto LABEL_41;
    }
  }
}

void sub_1B8BF61B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,const void *a34,const void *a35)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 + 56));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v36 + 40));
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a34);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a35);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v37 - 176);
  _Unwind_Resume(a1);
}

void sub_1B8BF629C(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  uint64_t v5 = *(__CFDictionary **)(a1 + 40);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return ctu::cf::insert<char const*,unsigned int>(v5, (const __CFString **)"kKeyBasebandWakeChannel", *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), (const __CFAllocator *)*MEMORY[0x1E4F1CF80], a5);
}

void ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_5(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  int v10 = 0;
  uint64_t v11 = 0;
  if (ctu::cf::convert_copy())
  {
    long long v4 = v11;
    int v10 = v11;
  }
  else
  {
    long long v4 = 0;
  }
  ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 56), (const __CFString **)"kKeyBasebandWakeData", v4, *MEMORY[0x1E4F1CF80], v3);
  unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  BOOL v6 = v5 > 0xD;
  int v7 = (1 << v5) & 0x2410;
  if (!v6 && v7 != 0)
  {
    CFTypeRef cf = v4;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = radio::QMICommandDriverBase::isEmptyBuffer(v2, (CFDataRef *)&cf);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1B8BF63D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFAllocatorRef v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BF63EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BF6400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::getFieldTestConfig(void *a1, uint64_t a2)
{
  long long v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting field test config", buf, 2u);
  }
  uint64_t v6 = a1[9];
  unsigned int v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (int v7 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  void v12[2] = ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_23_6;
  v12[4] = a1;
  v12[5] = v6;
  uint64_t v13 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v10 = *(void **)a2;
  if (*(void *)a2) {
    int v10 = _Block_copy(v10);
  }
  uint64_t v11 = *(NSObject **)(a2 + 8);
  long long aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v3;
  v18[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
  uint64_t v13 = v2 + 320;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_20_6;
  uint64_t v5 = a1[5];
  long long v4 = (std::__shared_weak_count *)a1[6];
  void v9[4] = v2;
  void v9[5] = v5;
  int v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  int v7 = a1[8];
  uint64_t v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetFieldTestConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61968D0;
  void aBlock[4] = v9;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v17 = v8;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v8 = v17;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_1B8BF6740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8BF6770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    CFTypeRef v26 = v6;
    if (v6)
    {
      int v7 = v6;
      if (!a1[5])
      {
LABEL_54:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting field test config", &cf);
      CFMutableDictionaryRef v23 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v9 = Mutable;
      if (Mutable) {
        CFMutableDictionaryRef v23 = Mutable;
      }
      if (cf) {
        int v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        int v10 = 0;
      }
      if (v10)
      {
        uint64_t v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          LODWORD(block) = 136315138;
          *(void *)((char *)&block + 4) = "getting field test config";
          _os_log_error_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_ERROR, "Failed %s", (uint8_t *)&block, 0xCu);
        }
      }
      else
      {
        if (Mutable) {
          int v15 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
        }
        else {
          int v15 = 0;
        }
        if (v15)
        {
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 1174405120;
          uint64_t v20 = ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_15;
          CFTypeRef v21 = &__block_descriptor_tmp_17_3;
          CFTypeRef v22 = Mutable;
          if (Mutable) {
            CFRetain(Mutable);
          }
          uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
          if (TlvValue)
          {
            long long block = 0uLL;
            LODWORD(v29) = 0;
            int v28 = 0;
            bsp::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)(TlvValue + v17), &block);
            v20((uint64_t)v19, (unsigned __int16 *)&block);
          }
          if (v22) {
            CFRelease(v22);
          }
        }
      }
      if (!a1[7] || !a1[8])
      {
LABEL_50:
        if (v9) {
          CFRelease(v9);
        }
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_54;
      }
      CFTypeRef v12 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v9) {
        CFRetain(v9);
      }
      uint64_t v13 = (const void *)a1[7];
      if (v13) {
        uint64_t v14 = _Block_copy(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v18 = a1[8];
      *(void *)&long long block = MEMORY[0x1E4F143A8];
      *((void *)&block + 1) = 1174405120;
      int v28 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_3;
      CFMutableDictionaryRef v29 = &__block_descriptor_tmp_71_4;
      if (v14)
      {
        long long aBlock = _Block_copy(v14);
        CFTypeRef v31 = v12;
        if (!v12) {
          goto LABEL_36;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v31 = v12;
        if (!v12)
        {
LABEL_36:
          CFTypeRef v32 = v9;
          if (v9) {
            CFRetain(v9);
          }
          dispatch_async(v18, &block);
          if (v32) {
            CFRelease(v32);
          }
          if (v31) {
            CFRelease(v31);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v14) {
            _Block_release(v14);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v12) {
            CFRelease(v12);
          }
          goto LABEL_50;
        }
      }
      CFRetain(v12);
      goto LABEL_36;
    }
  }
}

void sub_1B8BF6B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_15(uint64_t a1, unsigned __int16 *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9BA8], *a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9BB8], a2[1], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9BC8], a2[2], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9A30], a2[3], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9B10], a2[4], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9B58], a2[5], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9A18], a2[6], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9A08], a2[7], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9B38], a2[8], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9B50], a2[9], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9B48], a2[10], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9B18], a2[11], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9B28], a2[12], v4);
  int v5 = a2[13];
  uint64_t v6 = *(__CFDictionary **)(a1 + 32);
  int v7 = (const void *)*MEMORY[0x1E4FB9B30];

  return ctu::cf::insert<__CFString const*,int>(v6, v7, v5, v4);
}

void radio::QMICommandDriver::setFieldTestConfig(void *a1, const void **a2, uint64_t a3)
{
  uint64_t v7 = a1[9];
  int v5 = (std::__shared_weak_count *)a1[10];
  uint64_t v6 = a1 + 9;
  if (!v5 || (int v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v12 = *a2;
    if (*a2) {
      uint64_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v13)
    {
LABEL_8:
      uint64_t v14 = a1[5];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1B8B00000, v14, OS_LOG_TYPE_DEFAULT, "#I Setting field test config", buf, 2u);
        CFTypeRef v12 = *a2;
      }
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 1174405120;
      void v20[2] = ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
      v20[3] = &__block_descriptor_tmp_56_4;
      v20[4] = a1;
      CFTypeRef cf = v12;
      if (v12) {
        CFRetain(v12);
      }
      uint64_t v22 = v7;
      CFMutableDictionaryRef v23 = v11;
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v15 = *(void **)a3;
      if (*(void *)a3) {
        int v15 = _Block_copy(v15);
      }
      uint64_t v16 = *(NSObject **)(a3 + 8);
      long long aBlock = v15;
      dispatch_object_t object = v16;
      if (v16) {
        dispatch_retain(v16);
      }
      ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v20);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v23) {
        std::__shared_weak_count::__release_weak(v23);
      }
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_43;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    CFTypeRef v12 = *a2;
    if (*a2) {
      int v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      int v17 = 0;
    }
    if (v17) {
      goto LABEL_8;
    }
  }
  if (*(void *)a3 && *(void *)(a3 + 8))
  {
    CFTypeRef v28 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    char v27 = 13;
    strcpy((char *)__p, "Invalid input");
    CreateError();
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    if (*(void *)a3) {
      unint64_t v18 = _Block_copy(*(const void **)a3);
    }
    else {
      unint64_t v18 = 0;
    }
    uint64_t v19 = *(NSObject **)(a3 + 8);
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    uint64_t v30 = 1174405120;
    CFTypeRef v31 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
    CFTypeRef v32 = &__block_descriptor_tmp_74_3;
    if (v18)
    {
      uint64_t v33 = _Block_copy(v18);
      CFTypeRef v34 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    else
    {
      uint64_t v33 = 0;
      CFTypeRef v34 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    dispatch_async(v19, buf);
    if (v34) {
      CFRelease(v34);
    }
    if (v33) {
      _Block_release(v33);
    }
    if (v18) {
      _Block_release(v18);
    }
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    CFRelease(v28);
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1B8BF7118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v173 = v3;
  long long v174 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v173);
  v172[0] = 0xAAAAAAAAAAAAAAAALL;
  v172[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v172, *(const __CFDictionary **)(a1 + 40));
  v168[0] = MEMORY[0x1E4F143A8];
  v168[1] = 1174405120;
  v169 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_2;
  uint64_t v170 = &__block_descriptor_tmp_27_3;
  uint64_t v4 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v171, (const ctu::cf::dict_adapter *)v172);
  uint64_t v6 = (char *)*((void *)&v173 + 1);
  int v5 = (char *)v174;
  uint64_t v7 = (const void **)*((void *)&v173 + 1);
  uint64_t v138 = v4;
  uint64_t v136 = v2;
  if (*((void *)&v173 + 1) != (void)v174)
  {
    uint64_t v7 = (const void **)*((void *)&v173 + 1);
    while (*((unsigned char *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v174) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == (const void **)v174)
  {
LABEL_9:
    int v10 = (char *)operator new(0x10uLL);
    uint64_t v11 = v10;
    v10[8] = 16;
    *(void *)int v10 = &unk_1F126AFF8;
    *(_DWORD *)(v10 + 10) = 0;
    CFMutableDictionaryRef v9 = v10 + 10;
    *((_WORD *)v10 + 7) = 0;
    if ((unint64_t)v5 < *((void *)&v174 + 1))
    {
      *(void *)int v5 = v10;
      *(void *)&long long v174 = v5 + 8;
      goto LABEL_32;
    }
    int64_t v12 = v5 - v6;
    uint64_t v13 = (v5 - v6) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = *((void *)&v174 + 1) - (void)v6;
    if ((uint64_t)(*((void *)&v174 + 1) - (void)v6) >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v17 = operator new(8 * v16);
      unint64_t v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      *unint64_t v18 = v11;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v6 != v5)
      {
LABEL_20:
        if ((unint64_t)(v12 - 8) < 0x58) {
          goto LABEL_199;
        }
        if ((unint64_t)(v6 - v17) < 0x20) {
          goto LABEL_199;
        }
        unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
        uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        CFMutableDictionaryRef v23 = &v5[-v22];
        unint64_t v18 = (void *)((char *)v18 - v22);
        unint64_t v24 = &v17[8 * v13 - 16];
        __int16 v25 = v5 - 16;
        uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *unint64_t v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        int v5 = v23;
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_199:
          do
          {
            uint64_t v28 = *((void *)v5 - 1);
            v5 -= 8;
            *--unint64_t v18 = v28;
          }
          while (v5 != v6);
        }
        uint64_t v6 = (char *)*((void *)&v173 + 1);
        *((void *)&v173 + 1) = v18;
        *(void *)&long long v174 = v20;
        *((void *)&v174 + 1) = v19;
        if (!v6) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }
    else
    {
      int v17 = 0;
      unint64_t v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v11;
      uint64_t v20 = 8 * v13 + 8;
      if (v6 != v5) {
        goto LABEL_20;
      }
    }
    *((void *)&v173 + 1) = v18;
    *(void *)&long long v174 = v20;
    *((void *)&v174 + 1) = v19;
    if (!v6)
    {
LABEL_31:
      *(void *)&long long v174 = v20;
      goto LABEL_32;
    }
LABEL_30:
    operator delete(v6);
    goto LABEL_31;
  }
  if (!v8) {
    __cxa_bad_cast();
  }
  CFMutableDictionaryRef v9 = v8 + 10;
LABEL_32:
  v169((uint64_t)v168, v9);
  v164[0] = MEMORY[0x1E4F143A8];
  v164[1] = 1174405120;
  v165 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_28;
  v166 = &__block_descriptor_tmp_32_5;
  uint64_t v29 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v167, (const ctu::cf::dict_adapter *)v172);
  CFTypeRef v31 = (char *)*((void *)&v173 + 1);
  uint64_t v30 = (char *)v174;
  CFTypeRef v32 = (const void **)*((void *)&v173 + 1);
  uint64_t v137 = v29;
  if (*((void *)&v173 + 1) != (void)v174)
  {
    CFTypeRef v32 = (const void **)*((void *)&v173 + 1);
    while (*((unsigned char *)*v32 + 8) != 17)
    {
      if (++v32 == (const void **)v174) {
        goto LABEL_40;
      }
    }
  }
  if (v32 == (const void **)v174)
  {
LABEL_40:
    uint64_t v35 = (char *)operator new(0x18uLL);
    uint64_t v36 = v35;
    v35[8] = 17;
    *(void *)uint64_t v35 = &unk_1F126B048;
    *(void *)(v35 + 10) = 0;
    CFTypeRef v34 = v35 + 10;
    *((_WORD *)v35 + 9) = 0;
    if ((unint64_t)v30 < *((void *)&v174 + 1))
    {
      *(void *)uint64_t v30 = v35;
      *(void *)&long long v174 = v30 + 8;
      goto LABEL_63;
    }
    int64_t v37 = v30 - v31;
    uint64_t v38 = (v30 - v31) >> 3;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v40 = *((void *)&v174 + 1) - (void)v31;
    if ((uint64_t)(*((void *)&v174 + 1) - (void)v31) >> 2 > v39) {
      unint64_t v39 = v40 >> 2;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      if (v41 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v42 = operator new(8 * v41);
      unint64_t v43 = &v42[8 * v38];
      long long v44 = &v42[8 * v41];
      void *v43 = v36;
      uint64_t v45 = (uint64_t)(v43 + 1);
      if (v31 != v30)
      {
LABEL_51:
        if ((unint64_t)(v37 - 8) < 0x58) {
          goto LABEL_200;
        }
        if ((unint64_t)(v31 - v42) < 0x20) {
          goto LABEL_200;
        }
        unint64_t v46 = ((unint64_t)(v37 - 8) >> 3) + 1;
        uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        long long v48 = &v30[-v47];
        unint64_t v43 = (void *)((char *)v43 - v47);
        long long v49 = &v42[8 * v38 - 16];
        uint64_t v50 = v30 - 16;
        uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v52 = *(_OWORD *)v50;
          *(v49 - 1) = *((_OWORD *)v50 - 1);
          _OWORD *v49 = v52;
          v49 -= 2;
          v50 -= 32;
          v51 -= 4;
        }
        while (v51);
        uint64_t v30 = v48;
        if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_200:
          do
          {
            uint64_t v53 = *((void *)v30 - 1);
            v30 -= 8;
            *--unint64_t v43 = v53;
          }
          while (v30 != v31);
        }
        CFTypeRef v31 = (char *)*((void *)&v173 + 1);
        *((void *)&v173 + 1) = v43;
        *(void *)&long long v174 = v45;
        *((void *)&v174 + 1) = v44;
        if (!v31) {
          goto LABEL_62;
        }
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v42 = 0;
      unint64_t v43 = (void *)(8 * v38);
      long long v44 = 0;
      *(void *)(8 * v38) = v36;
      uint64_t v45 = 8 * v38 + 8;
      if (v31 != v30) {
        goto LABEL_51;
      }
    }
    *((void *)&v173 + 1) = v43;
    *(void *)&long long v174 = v45;
    *((void *)&v174 + 1) = v44;
    if (!v31)
    {
LABEL_62:
      *(void *)&long long v174 = v45;
      goto LABEL_63;
    }
LABEL_61:
    operator delete(v31);
    goto LABEL_62;
  }
  if (!v33) {
    __cxa_bad_cast();
  }
  CFTypeRef v34 = v33 + 10;
LABEL_63:
  v165((uint64_t)v164, v34);
  v160[0] = MEMORY[0x1E4F143A8];
  v160[1] = 1174405120;
  unint64_t v161 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_33;
  uint64_t v162 = &__block_descriptor_tmp_37_2;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v163, (const ctu::cf::dict_adapter *)v172);
  uint64_t v54 = (const void **)*((void *)&v173 + 1);
  if (*((void *)&v173 + 1) != (void)v174)
  {
    while (*((unsigned char *)*v54 + 8) != 18)
    {
      if (++v54 == (const void **)v174) {
        goto LABEL_70;
      }
    }
  }
  if (v54 == (const void **)v174)
  {
LABEL_70:
    uint64_t v56 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::TxAntennaConfig>(&v173, 18);
  }
  else
  {
    if (!v55) {
      __cxa_bad_cast();
    }
    uint64_t v56 = v55 + 10;
  }
  v161((uint64_t)v160, v56);
  v156[0] = MEMORY[0x1E4F143A8];
  v156[1] = 1174405120;
  v157 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_38;
  uint64_t v158 = &__block_descriptor_tmp_42_3;
  uint64_t v57 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v159, (const ctu::cf::dict_adapter *)v172);
  long long v59 = (char *)*((void *)&v173 + 1);
  uint64_t v58 = (char *)v174;
  long long v60 = (const void **)*((void *)&v173 + 1);
  uint64_t v135 = v57;
  if (*((void *)&v173 + 1) != (void)v174)
  {
    long long v60 = (const void **)*((void *)&v173 + 1);
    while (*((unsigned char *)*v60 + 8) != 19)
    {
      if (++v60 == (const void **)v174) {
        goto LABEL_79;
      }
    }
  }
  if (v60 == (const void **)v174)
  {
LABEL_79:
    long long v63 = operator new(0x10uLL);
    long long v64 = v63;
    v63[8] = 19;
    *(void *)long long v63 = &unk_1F126B098;
    *((_WORD *)v63 + 5) = 0;
    long long v62 = v63 + 10;
    if ((unint64_t)v58 < *((void *)&v174 + 1))
    {
      *(void *)uint64_t v58 = v63;
      *(void *)&long long v174 = v58 + 8;
      goto LABEL_102;
    }
    int64_t v65 = v58 - v59;
    uint64_t v66 = (v58 - v59) >> 3;
    unint64_t v67 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v68 = *((void *)&v174 + 1) - (void)v59;
    if ((uint64_t)(*((void *)&v174 + 1) - (void)v59) >> 2 > v67) {
      unint64_t v67 = v68 >> 2;
    }
    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v69 = v67;
    }
    if (v69)
    {
      if (v69 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int64_t v70 = operator new(8 * v69);
      uint64_t v71 = &v70[8 * v66];
      unint64_t v72 = &v70[8 * v69];
      *uint64_t v71 = v64;
      uint64_t v73 = (uint64_t)(v71 + 1);
      if (v59 != v58)
      {
LABEL_90:
        if ((unint64_t)(v65 - 8) < 0x58) {
          goto LABEL_201;
        }
        if ((unint64_t)(v59 - v70) < 0x20) {
          goto LABEL_201;
        }
        unint64_t v74 = ((unint64_t)(v65 - 8) >> 3) + 1;
        uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v76 = &v58[-v75];
        uint64_t v71 = (void *)((char *)v71 - v75);
        uint64_t v77 = &v70[8 * v66 - 16];
        unint64_t v78 = v58 - 16;
        uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *uint64_t v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        uint64_t v58 = v76;
        if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_201:
          do
          {
            uint64_t v81 = *((void *)v58 - 1);
            v58 -= 8;
            *--uint64_t v71 = v81;
          }
          while (v58 != v59);
        }
        long long v59 = (char *)*((void *)&v173 + 1);
        *((void *)&v173 + 1) = v71;
        *(void *)&long long v174 = v73;
        *((void *)&v174 + 1) = v72;
        if (!v59) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
    }
    else
    {
      int64_t v70 = 0;
      uint64_t v71 = (void *)(8 * v66);
      unint64_t v72 = 0;
      *(void *)(8 * v66) = v64;
      uint64_t v73 = 8 * v66 + 8;
      if (v59 != v58) {
        goto LABEL_90;
      }
    }
    *((void *)&v173 + 1) = v71;
    *(void *)&long long v174 = v73;
    *((void *)&v174 + 1) = v72;
    if (!v59)
    {
LABEL_101:
      *(void *)&long long v174 = v73;
      goto LABEL_102;
    }
LABEL_100:
    operator delete(v59);
    goto LABEL_101;
  }
  if (!v61) {
    __cxa_bad_cast();
  }
  long long v62 = v61 + 10;
LABEL_102:
  v157((uint64_t)v156, v62);
  v152[0] = MEMORY[0x1E4F143A8];
  v152[1] = 1174405120;
  v153 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_43;
  v154 = &__block_descriptor_tmp_47_3;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v155, (const ctu::cf::dict_adapter *)v172);
  uint64_t v83 = (char *)*((void *)&v173 + 1);
  __int16 v82 = (char *)v174;
  long long v84 = (const void **)*((void *)&v173 + 1);
  if (*((void *)&v173 + 1) != (void)v174)
  {
    long long v84 = (const void **)*((void *)&v173 + 1);
    while (*((unsigned char *)*v84 + 8) != 20)
    {
      if (++v84 == (const void **)v174) {
        goto LABEL_110;
      }
    }
  }
  if (v84 == (const void **)v174)
  {
LABEL_110:
    v87 = operator new(0x10uLL);
    v88 = v87;
    v87[8] = 20;
    *(void *)v87 = &unk_1F126B0E8;
    *((_WORD *)v87 + 5) = 0;
    uint64_t v86 = v87 + 10;
    if ((unint64_t)v82 < *((void *)&v174 + 1))
    {
      *(void *)__int16 v82 = v87;
      *(void *)&long long v174 = v82 + 8;
      goto LABEL_133;
    }
    int64_t v89 = v82 - v83;
    uint64_t v90 = (v82 - v83) >> 3;
    unint64_t v91 = v90 + 1;
    if ((unint64_t)(v90 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v92 = *((void *)&v174 + 1) - (void)v83;
    if ((uint64_t)(*((void *)&v174 + 1) - (void)v83) >> 2 > v91) {
      unint64_t v91 = v92 >> 2;
    }
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v93 = v91;
    }
    if (v93)
    {
      if (v93 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v94 = operator new(8 * v93);
      int64_t v95 = &v94[8 * v90];
      uint64_t v96 = &v94[8 * v93];
      void *v95 = v88;
      uint64_t v97 = (uint64_t)(v95 + 1);
      if (v83 != v82)
      {
LABEL_121:
        if ((unint64_t)(v89 - 8) < 0x58) {
          goto LABEL_202;
        }
        if ((unint64_t)(v83 - v94) < 0x20) {
          goto LABEL_202;
        }
        unint64_t v98 = ((unint64_t)(v89 - 8) >> 3) + 1;
        uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
        v100 = &v82[-v99];
        int64_t v95 = (void *)((char *)v95 - v99);
        long long v101 = &v94[8 * v90 - 16];
        uint64_t v102 = v82 - 16;
        uint64_t v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v104 = *(_OWORD *)v102;
          *(v101 - 1) = *((_OWORD *)v102 - 1);
          *long long v101 = v104;
          v101 -= 2;
          v102 -= 32;
          v103 -= 4;
        }
        while (v103);
        __int16 v82 = v100;
        if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_202:
          do
          {
            uint64_t v105 = *((void *)v82 - 1);
            v82 -= 8;
            *--int64_t v95 = v105;
          }
          while (v82 != v83);
        }
        uint64_t v83 = (char *)*((void *)&v173 + 1);
        *((void *)&v173 + 1) = v95;
        *(void *)&long long v174 = v97;
        *((void *)&v174 + 1) = v96;
        if (!v83) {
          goto LABEL_132;
        }
        goto LABEL_131;
      }
    }
    else
    {
      uint64_t v94 = 0;
      int64_t v95 = (void *)(8 * v90);
      uint64_t v96 = 0;
      *(void *)(8 * v90) = v88;
      uint64_t v97 = 8 * v90 + 8;
      if (v83 != v82) {
        goto LABEL_121;
      }
    }
    *((void *)&v173 + 1) = v95;
    *(void *)&long long v174 = v97;
    *((void *)&v174 + 1) = v96;
    if (!v83)
    {
LABEL_132:
      *(void *)&long long v174 = v97;
      goto LABEL_133;
    }
LABEL_131:
    operator delete(v83);
    goto LABEL_132;
  }
  if (!v85) {
    __cxa_bad_cast();
  }
  uint64_t v86 = v85 + 10;
LABEL_133:
  v153((uint64_t)v152, v86);
  v148[0] = MEMORY[0x1E4F143A8];
  v148[1] = 1174405120;
  v149 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_48;
  unint64_t v150 = &__block_descriptor_tmp_52_6;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v151, (const ctu::cf::dict_adapter *)v172);
  v107 = (char *)*((void *)&v173 + 1);
  v106 = (char *)v174;
  uint64_t v108 = (const void **)*((void *)&v173 + 1);
  if (*((void *)&v173 + 1) != (void)v174)
  {
    uint64_t v108 = (const void **)*((void *)&v173 + 1);
    while (*((unsigned char *)*v108 + 8) != 21)
    {
      if (++v108 == (const void **)v174) {
        goto LABEL_141;
      }
    }
  }
  if (v108 == (const void **)v174)
  {
LABEL_141:
    v111 = (char *)operator new(0x10uLL);
    v112 = v111;
    v111[8] = 21;
    *(void *)v111 = &unk_1F126B138;
    *(_DWORD *)(v111 + 10) = 0;
    uint64_t v110 = v111 + 10;
    *((_WORD *)v111 + 7) = 0;
    if ((unint64_t)v106 < *((void *)&v174 + 1))
    {
      *(void *)v106 = v111;
      *(void *)&long long v174 = v106 + 8;
      goto LABEL_164;
    }
    int64_t v113 = v106 - v107;
    uint64_t v114 = (v106 - v107) >> 3;
    unint64_t v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v116 = *((void *)&v174 + 1) - (void)v107;
    if ((uint64_t)(*((void *)&v174 + 1) - (void)v107) >> 2 > v115) {
      unint64_t v115 = v116 >> 2;
    }
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v117 = v115;
    }
    if (v117)
    {
      if (v117 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v118 = operator new(8 * v117);
      int64_t v119 = &v118[8 * v114];
      uint64_t v120 = &v118[8 * v117];
      *int64_t v119 = v112;
      uint64_t v121 = (uint64_t)(v119 + 1);
      if (v107 != v106)
      {
LABEL_152:
        if ((unint64_t)(v113 - 8) < 0x58) {
          goto LABEL_203;
        }
        if ((unint64_t)(v107 - v118) < 0x20) {
          goto LABEL_203;
        }
        unint64_t v122 = ((unint64_t)(v113 - 8) >> 3) + 1;
        uint64_t v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
        v124 = &v106[-v123];
        int64_t v119 = (void *)((char *)v119 - v123);
        v125 = &v118[8 * v114 - 16];
        v126 = v106 - 16;
        uint64_t v127 = v122 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v128 = *(_OWORD *)v126;
          *(v125 - 1) = *((_OWORD *)v126 - 1);
          _OWORD *v125 = v128;
          v125 -= 2;
          v126 -= 32;
          v127 -= 4;
        }
        while (v127);
        v106 = v124;
        if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_203:
          do
          {
            uint64_t v129 = *((void *)v106 - 1);
            v106 -= 8;
            *--int64_t v119 = v129;
          }
          while (v106 != v107);
        }
        v107 = (char *)*((void *)&v173 + 1);
        *((void *)&v173 + 1) = v119;
        *(void *)&long long v174 = v121;
        *((void *)&v174 + 1) = v120;
        if (!v107) {
          goto LABEL_163;
        }
        goto LABEL_162;
      }
    }
    else
    {
      uint64_t v118 = 0;
      int64_t v119 = (void *)(8 * v114);
      uint64_t v120 = 0;
      *(void *)(8 * v114) = v112;
      uint64_t v121 = 8 * v114 + 8;
      if (v107 != v106) {
        goto LABEL_152;
      }
    }
    *((void *)&v173 + 1) = v119;
    *(void *)&long long v174 = v121;
    *((void *)&v174 + 1) = v120;
    if (!v107)
    {
LABEL_163:
      *(void *)&long long v174 = v121;
      goto LABEL_164;
    }
LABEL_162:
    operator delete(v107);
    goto LABEL_163;
  }
  if (!v109) {
    __cxa_bad_cast();
  }
  uint64_t v110 = v109 + 10;
LABEL_164:
  v149((uint64_t)v148, v110);
  uint64_t v143 = v136 + 320;
  uint64_t v144 = QMIServiceMsg::create();
  int v145 = 25000;
  uint64_t v146 = 0;
  v147 = 0;
  v139[0] = MEMORY[0x1E4F143A8];
  v139[1] = 1174405120;
  v139[2] = ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_53;
  v139[3] = &__block_descriptor_tmp_55_2;
  uint64_t v131 = *(void *)(a1 + 48);
  v130 = *(std::__shared_weak_count **)(a1 + 56);
  v139[4] = v136;
  v139[5] = v131;
  uint64_t v140 = v130;
  if (v130) {
    atomic_fetch_add_explicit(&v130->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v132 = *(void **)(a1 + 64);
  if (v132) {
    uint64_t v132 = _Block_copy(v132);
  }
  long long v133 = *(NSObject **)(a1 + 72);
  v141 = v132;
  dispatch_object_t object = v133;
  if (v133) {
    dispatch_retain(v133);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18SetFieldTestConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61968F8;
  void aBlock[4] = v139;
  uint64_t v134 = _Block_copy(aBlock);
  v147 = v134;
  if (v144)
  {
    qmi::Client::send();
    uint64_t v134 = v147;
  }
  if (v134) {
    _Block_release(v134);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v141) {
    _Block_release(v141);
  }
  if (v140) {
    std::__shared_weak_count::__release_weak(v140);
  }
  MEMORY[0x1BA9C7760](v151);
  MEMORY[0x1BA9C7760](v155);
  MEMORY[0x1BA9C7760](v135);
  MEMORY[0x1BA9C7760](v163);
  MEMORY[0x1BA9C7760](v137);
  MEMORY[0x1BA9C7760](v138);
  MEMORY[0x1BA9C7760](v172);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v173);
}

void sub_1B8BF80C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,char a26)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v26);
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a26);
  MEMORY[0x1BA9C7760](v27);
  MEMORY[0x1BA9C7760](a11);
  MEMORY[0x1BA9C7760](a12);
  MEMORY[0x1BA9C7760](a13);
  MEMORY[0x1BA9C7760](a15);
  MEMORY[0x1BA9C7760](a16);
  MEMORY[0x1BA9C7760](v28 - 192);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v28 - 176));
  _Unwind_Resume(a1);
}

void sub_1B8BF81A8()
{
}

void sub_1B8BF81B0()
{
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  long long v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9BA8]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9BB8]);
  uint64_t result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9BC8]);
  a2[2] = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_28(uint64_t a1, _WORD *a2)
{
  long long v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9A30]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B10]);
  a2[2] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B58]);
  a2[3] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9A18]);
  uint64_t result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9A08]);
  a2[4] = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_33(uint64_t a1, _WORD *a2)
{
  uint64_t result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9B38]);
  *a2 = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_38(uint64_t a1, _WORD *a2)
{
  uint64_t result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9B50]);
  *a2 = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_43(uint64_t a1, _WORD *a2)
{
  uint64_t result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9B48]);
  *a2 = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_48(uint64_t a1, _WORD *a2)
{
  long long v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9B18]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B28]);
  uint64_t result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B30]);
  a2[2] = result;
  return result;
}

void ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_53(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    unint64_t v16 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (!a1[5])
      {
LABEL_30:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting field test config", &cf);
      if (cf) {
        uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v8 && (CFMutableDictionaryRef v9 = *(NSObject **)(v5 + 40), os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
      {
        LODWORD(block) = 136315138;
        *(void *)((char *)&block + 4) = "setting field test config";
        _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "Failed %s", (uint8_t *)&block, 0xCu);
        int v10 = (const void *)a1[7];
        if (!v10) {
          goto LABEL_28;
        }
      }
      else
      {
        int v10 = (const void *)a1[7];
        if (!v10) {
          goto LABEL_28;
        }
      }
      if (a1[8])
      {
        CFTypeRef v11 = cf;
        if (cf && (CFRetain(cf), (int v10 = (const void *)a1[7]) == 0)) {
          int64_t v12 = 0;
        }
        else {
          int64_t v12 = _Block_copy(v10);
        }
        uint64_t v13 = a1[8];
        *(void *)&long long block = MEMORY[0x1E4F143A8];
        *((void *)&block + 1) = 1174405120;
        unint64_t v18 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
        uint64_t v19 = &__block_descriptor_tmp_74_3;
        if (v12)
        {
          long long aBlock = _Block_copy(v12);
          CFTypeRef v21 = v11;
          if (!v11) {
            goto LABEL_20;
          }
        }
        else
        {
          long long aBlock = 0;
          CFTypeRef v21 = v11;
          if (!v11)
          {
LABEL_20:
            dispatch_async(v13, &block);
            if (v21) {
              CFRelease(v21);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v12) {
              _Block_release(v12);
            }
            if (v11) {
              CFRelease(v11);
            }
            goto LABEL_28;
          }
        }
        CFRetain(v11);
        goto LABEL_20;
      }
LABEL_28:
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_30;
    }
  }
}

void sub_1B8BF8668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a2[8];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = a2[9];
  a1[8] = v6;
  a1[9] = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[8];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
}

void radio::QMICommandDriver::sendRFSelfTestReq(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)operator new(0x28uLL);
  long long v15 = xmmword_1B8C347C0;
  strcpy(v5, "Request RF Self Test: not supported!");
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string __p = v5;
  std::string::__init_copy_ctor_external(&v12, v5, 0x24uLL);
  CreateError();
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      uint64_t v7 = *(const void **)a3;
      if (!*(void *)a3) {
        goto LABEL_29;
      }
LABEL_4:
      if (!*(void *)(a3 + 8)) {
        goto LABEL_29;
      }
      CFTypeRef v8 = cf;
      if (cf && (CFRetain(cf), (uint64_t v7 = *(const void **)a3) == 0)) {
        CFMutableDictionaryRef v9 = 0;
      }
      else {
        CFMutableDictionaryRef v9 = _Block_copy(v7);
      }
      CFTypeRef v11 = *(NSObject **)(a3 + 8);
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 1174405120;
      int v17 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_3;
      unint64_t v18 = &__block_descriptor_tmp_80_1;
      if (v9)
      {
        long long aBlock = _Block_copy(v9);
        CFTypeRef v20 = v8;
        if (!v8) {
          goto LABEL_19;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v20 = v8;
        if (!v8)
        {
LABEL_19:
          CFTypeRef v21 = 0;
          dispatch_async(v11, &buf);
          if (v21) {
            CFRelease(v21);
          }
          if (v20) {
            CFRelease(v20);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v9) {
            _Block_release(v9);
          }
          if (v8) {
            CFRelease(v8);
          }
          goto LABEL_29;
        }
      }
      CFRetain(v8);
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
  }
  p_p = &__p;
  if (v15 < 0) {
    p_p = __p;
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  uint64_t v7 = *(const void **)a3;
  if (*(void *)a3) {
    goto LABEL_4;
  }
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
}

void sub_1B8BF89EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::getAntennaTxPort(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)operator new(0x28uLL);
  long long v13 = xmmword_1B8C34820;
  strcpy(v4, "Get antenna tx port: not supported!");
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string __p = v4;
  std::string::__init_copy_ctor_external(&v10, v4, 0x23uLL);
  CreateError();
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      CFTypeRef v6 = cf;
      if (!cf) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
  }
  p_p = &__p;
  if (v13 < 0) {
    p_p = __p;
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_4:
  }
    CFRetain(v6);
LABEL_5:
  if (*(void *)a2) {
    uint64_t v7 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v7 = 0;
  }
  CFMutableDictionaryRef v9 = *(NSObject **)(a2 + 8);
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 1174405120;
  long long v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_3;
  unint64_t v16 = &__block_descriptor_tmp_80_1;
  if (!v7)
  {
    long long aBlock = 0;
    CFTypeRef v18 = v6;
    if (!v6) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  long long aBlock = _Block_copy(v7);
  CFTypeRef v18 = v6;
  if (v6) {
LABEL_17:
  }
    CFRetain(v6);
LABEL_18:
  CFTypeRef v19 = 0;
  dispatch_async(v9, &buf);
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
}

void sub_1B8BF8CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::setAntennaTxPort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)operator new(0x28uLL);
  strcpy(v5, "Set antenna tx port: not supported!");
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string::__init_copy_ctor_external(&__p, v5, 0x23uLL);
  CreateError();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    CFTypeRef v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      CFTypeRef v7 = cf;
      if (!cf) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    CFTypeRef v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = v5;
  _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  CFTypeRef v7 = cf;
  if (cf) {
LABEL_4:
  }
    CFRetain(v7);
LABEL_5:
  if (*(void *)a3) {
    CFTypeRef v8 = _Block_copy(*(const void **)a3);
  }
  else {
    CFTypeRef v8 = 0;
  }
  CFMutableDictionaryRef v9 = *(NSObject **)(a3 + 8);
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 1174405120;
  long long v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
  unint64_t v14 = &__block_descriptor_tmp_74_3;
  if (!v8)
  {
    long long aBlock = 0;
    CFTypeRef v16 = v7;
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  long long aBlock = _Block_copy(v8);
  CFTypeRef v16 = v7;
  if (v7) {
LABEL_15:
  }
    CFRetain(v7);
LABEL_16:
  dispatch_async(v9, &buf);
  if (v16) {
    CFRelease(v16);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v8) {
    _Block_release(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  operator delete(v5);
}

void sub_1B8BF8F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::setMCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)operator new(0x19uLL);
  strcpy(v5, "Set mcc: not supported!");
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string::__init_copy_ctor_external(&__p, v5, 0x17uLL);
  CreateError();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    CFTypeRef v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      CFTypeRef v7 = cf;
      if (!cf) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    CFTypeRef v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = v5;
  _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  CFTypeRef v7 = cf;
  if (cf) {
LABEL_4:
  }
    CFRetain(v7);
LABEL_5:
  if (*(void *)a3) {
    CFTypeRef v8 = _Block_copy(*(const void **)a3);
  }
  else {
    CFTypeRef v8 = 0;
  }
  CFMutableDictionaryRef v9 = *(NSObject **)(a3 + 8);
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 1174405120;
  long long v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
  unint64_t v14 = &__block_descriptor_tmp_74_3;
  if (!v8)
  {
    long long aBlock = 0;
    CFTypeRef v16 = v7;
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  long long aBlock = _Block_copy(v8);
  CFTypeRef v16 = v7;
  if (v7) {
LABEL_15:
  }
    CFRetain(v7);
LABEL_16:
  dispatch_async(v9, &buf);
  if (v16) {
    CFRelease(v16);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v8) {
    _Block_release(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  operator delete(v5);
}

void sub_1B8BF9190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::sendAccessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)operator new(0x28uLL);
  long long v15 = xmmword_1B8C34820;
  strcpy(v5, "Send accessory info: not supported!");
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string __p = v5;
  std::string::__init_copy_ctor_external(&v12, v5, 0x23uLL);
  CreateError();
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    CFTypeRef v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      CFTypeRef v7 = *(const void **)a3;
      if (!*(void *)a3) {
        goto LABEL_27;
      }
LABEL_4:
      if (!*(void *)(a3 + 8)) {
        goto LABEL_27;
      }
      CFTypeRef v8 = cf;
      if (cf && (CFRetain(cf), (CFTypeRef v7 = *(const void **)a3) == 0)) {
        CFMutableDictionaryRef v9 = 0;
      }
      else {
        CFMutableDictionaryRef v9 = _Block_copy(v7);
      }
      CFTypeRef v11 = *(NSObject **)(a3 + 8);
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 1174405120;
      uint64_t v17 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
      CFTypeRef v18 = &__block_descriptor_tmp_74_3;
      if (v9)
      {
        long long aBlock = _Block_copy(v9);
        CFTypeRef v20 = v8;
        if (!v8) {
          goto LABEL_19;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v20 = v8;
        if (!v8)
        {
LABEL_19:
          dispatch_async(v11, &buf);
          if (v20) {
            CFRelease(v20);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v9) {
            _Block_release(v9);
          }
          if (v8) {
            CFRelease(v8);
          }
          goto LABEL_27;
        }
      }
      CFRetain(v8);
      goto LABEL_19;
    }
  }
  else
  {
    CFTypeRef v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
  }
  p_p = &__p;
  if (v15 < 0) {
    p_p = __p;
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  CFTypeRef v7 = *(const void **)a3;
  if (*(void *)a3) {
    goto LABEL_4;
  }
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
}

void sub_1B8BF9438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::getRFFEScanData(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = operator new(0x28uLL);
  std::string __p = v4;
  long long v12 = xmmword_1B8C339B0;
  strcpy((char *)v4, "Get RFFE Scan Data: not supported!");
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = v4;
    _os_log_debug_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEBUG, "#D %s: \n", (uint8_t *)&block, 0xCu);
    if (!*(void *)a2) {
      goto LABEL_24;
    }
  }
  else if (!*(void *)a2)
  {
    goto LABEL_24;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_24;
  }
  if (v12 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  xpc_object_t v7 = xpc_string_create(p_p);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = xpc_null_create();
  if (*(void *)a2) {
    CFMutableDictionaryRef v9 = _Block_copy(*(const void **)a2);
  }
  else {
    CFMutableDictionaryRef v9 = 0;
  }
  std::string v10 = *(NSObject **)(a2 + 8);
  *(void *)&long long block = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  unint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_1;
  long long v15 = &__block_descriptor_tmp_81_2;
  if (v9)
  {
    long long aBlock = _Block_copy(v9);
    xpc_object_t v17 = v7;
    if (v7) {
      goto LABEL_14;
    }
LABEL_17:
    xpc_object_t v17 = xpc_null_create();
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_15;
    }
LABEL_18:
    xpc_object_t object = xpc_null_create();
    goto LABEL_19;
  }
  long long aBlock = 0;
  xpc_object_t v17 = v7;
  if (!v7) {
    goto LABEL_17;
  }
LABEL_14:
  xpc_retain(v7);
  xpc_object_t object = v8;
  if (!v8) {
    goto LABEL_18;
  }
LABEL_15:
  xpc_retain(v8);
LABEL_19:
  dispatch_async(v10, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(v8);
  xpc_release(v7);
LABEL_24:
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
}

void sub_1B8BF96D4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::getResetProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)operator new(0x28uLL);
  long long v14 = xmmword_1B8C347C0;
  strcpy(v4, "Get reset properties: not supported!");
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string __p = v4;
  std::string::__init_copy_ctor_external(&v11, v4, 0x24uLL);
  CreateError();
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      CFTypeRef v6 = *(const void **)a2;
      if (!*(void *)a2) {
        goto LABEL_29;
      }
LABEL_4:
      if (!*(void *)(a2 + 8)) {
        goto LABEL_29;
      }
      CFTypeRef v7 = cf;
      if (cf && (CFRetain(cf), (CFTypeRef v6 = *(const void **)a2) == 0)) {
        xpc_object_t v8 = 0;
      }
      else {
        xpc_object_t v8 = _Block_copy(v6);
      }
      std::string v10 = *(NSObject **)(a2 + 8);
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 1174405120;
      CFTypeRef v16 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_3;
      xpc_object_t v17 = &__block_descriptor_tmp_80_1;
      if (v8)
      {
        long long aBlock = _Block_copy(v8);
        CFTypeRef v19 = v7;
        if (!v7) {
          goto LABEL_19;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v19 = v7;
        if (!v7)
        {
LABEL_19:
          CFTypeRef v20 = 0;
          dispatch_async(v10, &buf);
          if (v20) {
            CFRelease(v20);
          }
          if (v19) {
            CFRelease(v19);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v8) {
            _Block_release(v8);
          }
          if (v7) {
            CFRelease(v7);
          }
          goto LABEL_29;
        }
      }
      CFRetain(v7);
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
  }
  p_p = &__p;
  if (v14 < 0) {
    p_p = __p;
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  CFTypeRef v6 = *(const void **)a2;
  if (*(void *)a2) {
    goto LABEL_4;
  }
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

void sub_1B8BF9998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::sendBatteryInfoUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeRef v6 = (char *)operator new(0x30uLL);
  long long v16 = xmmword_1B8C36FA0;
  strcpy(v6, "Send battery info update: not supported!");
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string __p = v6;
  std::string::__init_copy_ctor_external(&v13, v6, 0x28uLL);
  CreateError();
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    CFTypeRef v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      xpc_object_t v8 = *(const void **)a4;
      if (!*(void *)a4) {
        goto LABEL_27;
      }
LABEL_4:
      if (!*(void *)(a4 + 8)) {
        goto LABEL_27;
      }
      CFTypeRef v9 = cf;
      if (cf && (CFRetain(cf), (xpc_object_t v8 = *(const void **)a4) == 0)) {
        std::string v10 = 0;
      }
      else {
        std::string v10 = _Block_copy(v8);
      }
      long long v12 = *(NSObject **)(a4 + 8);
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 1174405120;
      CFTypeRef v18 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
      CFTypeRef v19 = &__block_descriptor_tmp_74_3;
      if (v10)
      {
        long long aBlock = _Block_copy(v10);
        CFTypeRef v21 = v9;
        if (!v9) {
          goto LABEL_19;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v21 = v9;
        if (!v9)
        {
LABEL_19:
          dispatch_async(v12, &buf);
          if (v21) {
            CFRelease(v21);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v10) {
            _Block_release(v10);
          }
          if (v9) {
            CFRelease(v9);
          }
          goto LABEL_27;
        }
      }
      CFRetain(v9);
      goto LABEL_19;
    }
  }
  else
  {
    CFTypeRef v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
  }
  p_p = &__p;
  if (v16 < 0) {
    p_p = __p;
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  xpc_object_t v8 = *(const void **)a4;
  if (*(void *)a4) {
    goto LABEL_4;
  }
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
}

void sub_1B8BF9C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::enableResetSPMIEvent(radio::QMICommandDriver *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_error_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_ERROR, "Enable resetting SPMI: not supported!", v2, 2u);
  }
}

void std::__shared_ptr_pointer<radio::QMICommandDriver *,std::shared_ptr<radio::QMICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriver>(radio::QMICommandDriver*)::{lambda(radio::QMICommandDriver *)#1},std::allocator<radio::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMICommandDriver *,std::shared_ptr<radio::QMICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriver>(radio::QMICommandDriver*)::{lambda(radio::QMICommandDriver *)#1},std::allocator<radio::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<radio::QMICommandDriver *,std::shared_ptr<radio::QMICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriver>(radio::QMICommandDriver*)::{lambda(radio::QMICommandDriver *)#1},std::allocator<radio::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt"
                     "3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16QMICommandD"
                                "riverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<radio::QMICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriver>(radio::QMICommandDriver*)::{lambda(radio::QMICommandDriver*)#1}::operator() const(radio::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_3(uint64_t a1)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13GetWakeReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<bsp::abm::GetWakeReason::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B8BF9E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetFieldTestConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BF9F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BF9F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BF9F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BF9FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfig>::getSize()
{
  return 9;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *a2 = v3 + 9;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfig>::clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F126AFF8;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  *((_WORD *)result + 7) = *(_WORD *)(a1 + 14);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfig>::getSize()
{
  return 13;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *(_WORD *)(v3 + 9) = *(_WORD *)(result + 16);
  *(_WORD *)(v3 + 11) = *(_WORD *)(result + 18);
  *a2 = v3 + 13;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 10;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfig>::clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F126B048;
  *(void *)(result + 10) = *(void *)(a1 + 10);
  *((_WORD *)result + 9) = *(_WORD *)(a1 + 18);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::UARFCNLockConfig>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::UARFCNLockConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::UARFCNLockConfig>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F126B098;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EARFCNLockConfig>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EARFCNLockConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EARFCNLockConfig>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F126B0E8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CarrierAgreggationConfig>::getSize()
{
  return 9;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CarrierAgreggationConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *a2 = v3 + 9;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CarrierAgreggationConfig>::clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F126B138;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  *((_WORD *)result + 7) = *(_WORD *)(a1 + 14);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18SetFieldTestConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BFA3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BFA400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BFA42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_3(uint64_t a1)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_1(uint64_t a1)
{
}

char *apps::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

unsigned char *apps::tlv::abm::writeField(unsigned char *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t apps::tlv::abm::getFieldSize()
{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

uint64_t tlv::parseV<apps::tlv::abm::WakeReason>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFA4F0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::WakeReason>()
{
  return 4;
}

unsigned char **tlv::writeV<apps::tlv::abm::WakeReason>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::ChannelID>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFA5B0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::ChannelID>()
{
  return 4;
}

unsigned char **tlv::writeV<apps::tlv::abm::ChannelID>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

_DWORD *apps::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<apps::tlv::abm::WakeBufferLength>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFA670(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::WakeBufferLength>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::WakeBufferLength>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

char *apps::tlv::abm::parseField(char *__src, char *a2, void *a3)
{
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

char *apps::tlv::abm::writeField(char *a1, uint64_t a2)
{
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

uint64_t apps::tlv::abm::getFieldSize(void *a1)
{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

void *tlv::parseV<apps::tlv::abm::WakeBuffer>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8BFA780(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFA770);
}

void sub_1B8BFA790(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<apps::tlv::abm::WakeBuffer>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<apps::tlv::abm::WakeBuffer>(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

char *apps::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

unsigned char *apps::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<apps::tlv::abm::Level>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFA898(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::Level>()
{
  return 4;
}

unsigned char **tlv::writeV<apps::tlv::abm::Level>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t apps::tlv::abm::parseField(apps::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Size *a4)
{
  *(_WORD *)a3 = *(_WORD *)this;
  return (uint64_t)this + 2;
}

uint64_t apps::tlv::abm::writeField(apps::tlv::abm *this, unsigned __int8 *a2, const Size *a3)
{
  *(_WORD *)this = *(_WORD *)a2;
  return (uint64_t)this + 2;
}

uint64_t apps::tlv::abm::getFieldSize(apps::tlv::abm *this, const Size *a2)
{
  return 2;
}

uint64_t tlv::parseV<apps::tlv::abm::Size>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8BFA958(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::Size>()
{
  return 5;
}

_WORD **tlv::writeV<apps::tlv::abm::Size>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<apps::tlv::abm::LogData>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8BFAA68(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFAA58);
}

void sub_1B8BFAA78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<apps::tlv::abm::LogData>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<apps::tlv::abm::LogData>(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::length>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFAB80(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::length>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::length>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::blockSize>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFAC40(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::blockSize>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::blockSize>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::MHIBufferSize>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFAD00(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::MHIBufferSize>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::MHIBufferSize>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::PCIeBufferSize>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFADC0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::PCIeBufferSize>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::PCIeBufferSize>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::IPABufferSize>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFAE80(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::IPABufferSize>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::IPABufferSize>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *mfse::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *mfse::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

uint64_t mfse::getFieldSize()
{
  return 4;
}

{
  return 4;
}

char *mfse::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *mfse::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t mfse::tlv::abm::getFieldSize()
{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

uint64_t tlv::parseV<mfse::tlv::abm::FileSystem>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFAFD0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<mfse::tlv::abm::FileSystem>()
{
  return 7;
}

_DWORD **tlv::writeV<mfse::tlv::abm::FileSystem>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<mfse::tlv::abm::Token>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFB090(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<mfse::tlv::abm::Token>()
{
  return 7;
}

_DWORD **tlv::writeV<mfse::tlv::abm::Token>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<mfse::tlv::abm::ErrorNumber>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFB150(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<mfse::tlv::abm::ErrorNumber>()
{
  return 7;
}

_DWORD **tlv::writeV<mfse::tlv::abm::ErrorNumber>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *mfse::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

unsigned char *mfse::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

BOOL tlv::parseV<mfse::tlv::abm::ResetAfterSync>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFB220(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<mfse::tlv::abm::ResetAfterSync>()
{
  return 4;
}

unsigned char **tlv::writeV<mfse::tlv::abm::ResetAfterSync>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

unsigned char *bsp::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  return a1 + 12;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t bsp::tlv::abm::getFieldSize()
{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 80;
}

{
  return 131;
}

{
  return 2;
}

{
  return 131;
}

{
  return 2;
}

{
  return 13;
}

{
  return 4;
}

{
  return 8;
}

{
  return 16;
}

{
  return 2;
}

{
  return 12;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 16;
}

{
  return 1;
}

{
  return 13;
}

{
  return 1;
}

{
  return 1;
}

{
  return 8;
}

{
  return 2;
}

{
  return 2;
}

{
  return 8;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 2;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 20;
}

{
  return 2;
}

{
  return 10;
}

{
  return 14;
}

{
  return 22;
}

{
  return 6;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 6;
}

{
  return 10;
}

{
  return 2;
}

{
  return 2;
}

{
  return 6;
}

{
  return 6;
}

{
  return 14;
}

{
  return 22;
}

{
  return 2;
}

{
  return 28;
}

{
  return 46;
}

{
  return 12;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 4;
}

{
  return 2;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 5;
}

{
  return 5;
}

{
  return 5;
}

{
  return 2;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::LogCollectionType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFB2E0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LogCollectionType>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::LogCollectionType>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

BOOL tlv::parseV<bsp::tlv::abm::LogCollectionState>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFB3B0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LogCollectionState>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::LogCollectionState>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(char *__src, char *a2, void *a3)
{
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

char *bsp::tlv::abm::writeField(char *a1, uint64_t a2)
{
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

uint64_t bsp::tlv::abm::getFieldSize(void *a1)
{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1 + 2;
}

{
  return a1[1] - *a1 + 2;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 1;
  }
  else {
    return (v1 - *a1) | 1;
  }
}

void *tlv::parseV<bsp::tlv::abm::LogDataBuff>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = &(*a1)[a2];
  BOOL result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8BFB4C0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFB4B0);
}

void sub_1B8BFB4D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::LogDataBuff>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::LogDataBuff>(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)*a1;
  BOOL result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::EndOfLog>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFB5D8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::EndOfLog>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::EndOfLog>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *ssctl::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, void **a3)
{
  uint64_t v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v6 = *(unsigned __int8 *)v5;
  uint64_t v5 = (tlv *)((char *)v5 + 1);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (uint64_t)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unsigned int v6;

  uint64_t v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  unsigned int v6 = *(unsigned __int16 *)v5;
  uint64_t v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (uint64_t)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

unsigned char *ssctl::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  uint64_t v2 = a2;
  LOBYTE(v3) = a2[23];
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  *a1 = v3;
  uint64_t v4 = a1 + 1;
  size_t v5 = *((void *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    size_t v6 = a2[23];
  }
  else
  {
    a2 = *(unsigned char **)a2;
    size_t v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  uint64_t v7 = v2[23];
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)v2 + 1);
  }
  return &v4[v7];
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 1;
}

{
  uint64_t v1;

  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 2;
}

void tlv::parseV<ssctl::tlv::abm::ErrorMessage>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  size_t v5 = *a1;
  size_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v7 = *(unsigned __int8 *)v5;
  size_t v5 = (tlv *)((char *)v5 + 1);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, (uint64_t)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
}

void sub_1B8BFB78C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFB778);
}

void sub_1B8BFB79C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<ssctl::tlv::abm::ErrorMessage>(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 4;
}

void *tlv::writeV<ssctl::tlv::abm::ErrorMessage>(unsigned char **a1, unsigned char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a1;
  LOBYTE(v5) = a2[23];
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  unsigned char *v4 = v5;
  size_t v6 = v4 + 1;
  size_t v7 = *((void *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    size_t v8 = a2[23];
  }
  else
  {
    a2 = *(unsigned char **)a2;
    size_t v8 = v7;
  }
  uint64_t result = memcpy(v6, a2, v8);
  uint64_t v10 = v2[23];
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)v2 + 1);
  }
  *a1 = &v6[v10];
  return result;
}

char *ssctl::tlv::abm::writeField(_WORD *a1, void *a2)
{
  uint64_t v2 = a2;
  LOWORD(v3) = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a2[1];
  }
  *a1 = v3;
  uint64_t v4 = a1 + 1;
  size_t v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  uint64_t v7 = *((unsigned __int8 *)v2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = v2[1];
  }
  return (char *)v4 + v7;
}

void tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessage>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  size_t v5 = *a1;
  size_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  unsigned int v7 = *(unsigned __int16 *)v5;
  size_t v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, (uint64_t)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
}

void sub_1B8BFB9D4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFB9C0);
}

void sub_1B8BFB9E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<ssctl::tlv::abm::ExtendedErrorMessage>(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 5;
}

void *tlv::writeV<ssctl::tlv::abm::ExtendedErrorMessage>(_WORD **a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a1;
  LOWORD(v5) = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a2[1];
  }
  _WORD *v4 = v5;
  size_t v6 = (char *)(v4 + 1);
  size_t v7 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v8 = v7;
  }
  uint64_t result = memcpy(v6, a2, v8);
  uint64_t v10 = *((unsigned __int8 *)v2 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = v2[1];
  }
  *a1 = &v6[v10];
  return result;
}

tlv *ssctl::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 >= (tlv *)a2) {
    return a1;
  }
  do
  {
    std::string v11 = *(void **)(a3 + 8);
    if ((unint64_t)v11 >= *(void *)(a3 + 16))
    {
      size_t v6 = std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
    }
    else
    {
      *std::string v11 = 0;
      v11[1] = 0;
      size_t v6 = v11 + 3;
      v11[2] = 0;
    }
    *(void *)(a3 + 8) = v6;
    size_t v7 = (void **)(v6 - 3);
    tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)1);
    unsigned int v9 = *(unsigned __int8 *)v3;
    size_t v8 = (tlv *)((char *)v3 + 1);
    tlv::throwIfNotEnoughBytes(v8, a2, (const unsigned __int8 *)v9);
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v7, (uint64_t)v8, (char *)v8 + v9, v9);
    uint64_t v3 = (tlv *)((char *)v8 + v9);
    uint64_t v10 = v3;
  }
  while (v3 < (tlv *)a2);
  return v10;
}

{
  tlv *v3;
  void *v6;
  void **v7;
  tlv *v8;
  unsigned int v9;
  tlv *v10;
  void *v11;

  uint64_t v3 = a1;
  if (a1 >= (tlv *)a2) {
    return a1;
  }
  do
  {
    std::string v11 = *(void **)(a3 + 8);
    if ((unint64_t)v11 >= *(void *)(a3 + 16))
    {
      size_t v6 = std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
    }
    else
    {
      *std::string v11 = 0;
      v11[1] = 0;
      size_t v6 = v11 + 3;
      v11[2] = 0;
    }
    *(void *)(a3 + 8) = v6;
    size_t v7 = (void **)(v6 - 3);
    tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)2);
    unsigned int v9 = *(unsigned __int16 *)v3;
    size_t v8 = (tlv *)((char *)v3 + 2);
    tlv::throwIfNotEnoughBytes(v8, a2, (const unsigned __int8 *)v9);
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v7, (uint64_t)v8, (char *)v8 + v9, v9);
    uint64_t v3 = (tlv *)((char *)v8 + v9);
    uint64_t v10 = v3;
  }
  while (v3 < (tlv *)a2);
  return v10;
}

char *ssctl::tlv::abm::writeField(char *a1, const void ***a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      LOBYTE(v5) = *((unsigned char *)v3 + 23);
      if ((char)v5 < 0) {
        uint64_t v5 = v3[1];
      }
      *a1 = (char)v5;
      size_t v6 = a1 + 1;
      int v7 = *((char *)v3 + 23);
      if (v7 >= 0) {
        size_t v8 = v3;
      }
      else {
        size_t v8 = *v3;
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v9 = (size_t)v3[1];
      }
      memcpy(v6, v8, v9);
      uint64_t v10 = (char *)*((unsigned __int8 *)v3 + 23);
      if ((char)v10 < 0) {
        uint64_t v10 = (char *)v3[1];
      }
      a1 = &v10[(void)v6];
      v3 += 3;
    }
    while (v3 != v4);
  }
  return a1;
}

{
  const void **v3;
  const void **v4;
  const void *v5;
  char *v6;
  int v7;
  const void *v8;
  size_t v9;
  char *v10;

  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      LOWORD(v5) = *((unsigned __int8 *)v3 + 23);
      if ((char)v5 < 0) {
        uint64_t v5 = v3[1];
      }
      *(_WORD *)a1 = (_WORD)v5;
      size_t v6 = a1 + 2;
      int v7 = *((char *)v3 + 23);
      if (v7 >= 0) {
        size_t v8 = v3;
      }
      else {
        size_t v8 = *v3;
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v9 = (size_t)v3[1];
      }
      memcpy(v6, v8, v9);
      uint64_t v10 = (char *)*((unsigned __int8 *)v3 + 23);
      if ((char)v10 < 0) {
        uint64_t v10 = (char *)v3[1];
      }
      a1 = &v10[(void)v6];
      v3 += 3;
    }
    while (v3 != v4);
  }
  return a1;
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t *a1, double a2, double a3, double a4, int64x2_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7) {
    return 0;
  }
  unint64_t v9 = v7 - v8 - 24;
  if (v9 >= 0x60)
  {
    unint64_t v12 = v9 / 0x18 + 1;
    uint64_t v13 = v12 & 3;
    if ((v12 & 3) == 0) {
      uint64_t v13 = 4;
    }
    unint64_t v14 = v12 - v13;
    uint64_t v11 = v8 + 24 * v14;
    long long v15 = (unsigned __int8 *)(v8 + 47);
    int64x2_t v16 = 0uLL;
    v17.i64[0] = 255;
    v17.i64[1] = 255;
    int64x2_t v18 = 0uLL;
    do
    {
      a5.i8[0] = *(v15 - 24);
      a5.i8[4] = *v15;
      a7.i8[0] = v15[24];
      a7.i8[4] = v15[48];
      int32x2_t v19 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
      v20.i64[0] = v19.i32[0];
      v20.i64[1] = v19.i32[1];
      int8x16_t v21 = v20;
      uint64_t v22 = (const double *)(v15 - 39);
      CFMutableDictionaryRef v23 = (const double *)(v15 + 9);
      unsigned long long v24 = (unsigned __int128)vld3q_f64(v22);
      unsigned long long v25 = (unsigned __int128)vld3q_f64(v23);
      int32x2_t v26 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
      v20.i64[0] = v26.i32[0];
      v20.i64[1] = v26.i32[1];
      int8x16_t v27 = v20;
      v20.i64[0] = a5.u32[0];
      v20.i64[1] = a5.u32[1];
      int8x16_t v28 = vbicq_s8(v20, v21);
      v20.i64[0] = a7.u32[0];
      v20.i64[1] = a7.u32[1];
      a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v24, v21), vandq_s8(v28, v17));
      a7 = vandq_s8((int8x16_t)v25, v27);
      int64x2_t v16 = vsubq_s64(a5, (int64x2_t)vmvnq_s8((int8x16_t)v16));
      int64x2_t v18 = vsubq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v20, v27), v17)), (int64x2_t)vmvnq_s8((int8x16_t)v18));
      v15 += 96;
      v14 -= 4;
    }
    while (v14);
    uint64_t result = vaddvq_s64(vaddq_s64(v18, v16));
  }
  else
  {
    uint64_t result = 0;
    uint64_t v11 = v8;
  }
  do
  {
    uint64_t v29 = *(unsigned __int8 *)(v11 + 23);
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = *(void *)(v11 + 8);
    }
    result += v29 + 1;
    v11 += 24;
  }
  while (v11 != v7);
  return result;
}

void tlv::parseV<ssctl::tlv::abm::ErrorMessages>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = *a1;
  if (a2 < 1)
  {
    *a1 = v4;
  }
  else
  {
    size_t v6 = (const unsigned __int8 *)v4 + a2;
    do
    {
      uint64_t v7 = *(void **)(a3 + 8);
      if ((unint64_t)v7 >= *(void *)(a3 + 16))
      {
        uint64_t v8 = (void **)std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        void *v7 = 0;
        v7[1] = 0;
        uint64_t v8 = (void **)(v7 + 3);
        v7[2] = 0;
      }
      *(void *)(a3 + 8) = v8;
      tlv::throwIfNotEnoughBytes(v4, v6, (const unsigned __int8 *)1);
      unsigned int v10 = *(unsigned __int8 *)v4;
      unint64_t v9 = (tlv *)((char *)v4 + 1);
      tlv::throwIfNotEnoughBytes(v9, v6, (const unsigned __int8 *)v10);
      std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v8 - 3, (uint64_t)v9, (char *)v9 + v10, v10);
      uint64_t v4 = (tlv *)((char *)v9 + v10);
    }
    while (v4 < (tlv *)v6);
    *a1 = v4;
  }
}

void sub_1B8BFBE04(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFBDD8);
}

void sub_1B8BFBE14(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<ssctl::tlv::abm::ErrorMessages>(uint64_t *a1, double a2, double a3, double a4, int64x2_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7) {
    return 3;
  }
  unint64_t v9 = v7 - v8 - 24;
  if (v9 >= 0x60)
  {
    unint64_t v13 = v9 / 0x18 + 1;
    uint64_t v14 = v13 & 3;
    if ((v13 & 3) == 0) {
      uint64_t v14 = 4;
    }
    unint64_t v15 = v13 - v14;
    uint64_t v11 = v8 + 24 * v15;
    int64x2_t v16 = (unsigned __int8 *)(v8 + 47);
    int64x2_t v17 = 0uLL;
    v18.i64[0] = 255;
    v18.i64[1] = 255;
    int64x2_t v19 = 0uLL;
    do
    {
      a5.i8[0] = *(v16 - 24);
      a5.i8[4] = *v16;
      a7.i8[0] = v16[24];
      a7.i8[4] = v16[48];
      int32x2_t v20 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
      v21.i64[0] = v20.i32[0];
      v21.i64[1] = v20.i32[1];
      int8x16_t v22 = v21;
      CFMutableDictionaryRef v23 = (const double *)(v16 - 39);
      unsigned long long v24 = (const double *)(v16 + 9);
      unsigned long long v25 = (unsigned __int128)vld3q_f64(v23);
      unsigned long long v26 = (unsigned __int128)vld3q_f64(v24);
      int32x2_t v27 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
      v21.i64[0] = v27.i32[0];
      v21.i64[1] = v27.i32[1];
      int8x16_t v28 = v21;
      v21.i64[0] = a5.u32[0];
      v21.i64[1] = a5.u32[1];
      int8x16_t v29 = vbicq_s8(v21, v22);
      v21.i64[0] = a7.u32[0];
      v21.i64[1] = a7.u32[1];
      a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v25, v22), vandq_s8(v29, v18));
      a7 = vandq_s8((int8x16_t)v26, v28);
      int64x2_t v17 = vsubq_s64(a5, (int64x2_t)vmvnq_s8((int8x16_t)v17));
      int64x2_t v19 = vsubq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v21, v28), v18)), (int64x2_t)vmvnq_s8((int8x16_t)v19));
      v16 += 96;
      v15 -= 4;
    }
    while (v15);
    uint64_t v10 = vaddvq_s64(vaddq_s64(v19, v17));
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a1;
  }
  do
  {
    uint64_t v30 = *(unsigned __int8 *)(v11 + 23);
    if ((v30 & 0x80u) != 0) {
      uint64_t v30 = *(void *)(v11 + 8);
    }
    v10 += v30 + 1;
    v11 += 24;
  }
  while (v11 != v7);
  return v10 + 3;
}

char **tlv::writeV<ssctl::tlv::abm::ErrorMessages>(char **result, const void ***a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      LOBYTE(v6) = *((unsigned char *)v4 + 23);
      if ((char)v6 < 0) {
        size_t v6 = v4[1];
      }
      *uint64_t v3 = (char)v6;
      uint64_t v7 = v3 + 1;
      int v8 = *((char *)v4 + 23);
      if (v8 >= 0) {
        unint64_t v9 = v4;
      }
      else {
        unint64_t v9 = *v4;
      }
      if (v8 >= 0) {
        size_t v10 = *((unsigned __int8 *)v4 + 23);
      }
      else {
        size_t v10 = (size_t)v4[1];
      }
      uint64_t result = (char **)memcpy(v7, v9, v10);
      uint64_t v11 = (char *)*((unsigned __int8 *)v4 + 23);
      if ((char)v11 < 0) {
        uint64_t v11 = (char *)v4[1];
      }
      uint64_t v3 = &v11[(void)v7];
      v4 += 3;
    }
    while (v4 != v5);
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t *a1, double a2, double a3, double a4, double a5, int64x2_t a6, double a7, int8x16_t a8)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 == v8) {
    return 0;
  }
  unint64_t v10 = v8 - v9 - 24;
  if (v10 >= 0x60)
  {
    unint64_t v13 = v10 / 0x18 + 1;
    uint64_t v14 = v13 & 3;
    if ((v13 & 3) == 0) {
      uint64_t v14 = 4;
    }
    unint64_t v15 = v13 - v14;
    uint64_t v12 = v9 + 24 * v15;
    int64x2_t v16 = (unsigned __int8 *)(v9 + 47);
    int64x2_t v17 = 0uLL;
    v18.i64[0] = 255;
    v18.i64[1] = 255;
    int64x2_t v19 = vdupq_n_s64(2uLL);
    int64x2_t v20 = 0uLL;
    do
    {
      a6.i8[0] = *(v16 - 24);
      a6.i8[4] = *v16;
      a8.i8[0] = v16[24];
      a8.i8[4] = v16[48];
      int32x2_t v21 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
      v22.i64[0] = v21.i32[0];
      v22.i64[1] = v21.i32[1];
      int8x16_t v23 = v22;
      unsigned long long v24 = (const double *)(v16 - 39);
      unsigned long long v25 = (const double *)(v16 + 9);
      unsigned long long v26 = (unsigned __int128)vld3q_f64(v24);
      unsigned long long v27 = (unsigned __int128)vld3q_f64(v25);
      int32x2_t v28 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x18uLL), 0x18uLL));
      v22.i64[0] = v28.i32[0];
      v22.i64[1] = v28.i32[1];
      int8x16_t v29 = v22;
      v22.i64[0] = a6.u32[0];
      v22.i64[1] = a6.u32[1];
      int8x16_t v30 = vbicq_s8(v22, v23);
      v22.i64[0] = a8.u32[0];
      v22.i64[1] = a8.u32[1];
      a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v26, v23), vandq_s8(v30, v18));
      a8 = vandq_s8((int8x16_t)v27, v29);
      int64x2_t v17 = vaddq_s64(vaddq_s64(v17, v19), a6);
      int64x2_t v20 = vaddq_s64(vaddq_s64(v20, v19), (int64x2_t)vorrq_s8(a8, vandq_s8(vbicq_s8(v22, v29), v18)));
      v16 += 96;
      v15 -= 4;
    }
    while (v15);
    uint64_t result = vaddvq_s64(vaddq_s64(v20, v17));
  }
  else
  {
    uint64_t result = 0;
    uint64_t v12 = v9;
  }
  do
  {
    uint64_t v31 = *(unsigned __int8 *)(v12 + 23);
    if ((v31 & 0x80u) != 0) {
      uint64_t v31 = *(void *)(v12 + 8);
    }
    result += v31 + 2;
    v12 += 24;
  }
  while (v12 != v8);
  return result;
}

void tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessages>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = *a1;
  if (a2 < 1)
  {
    *a1 = v4;
  }
  else
  {
    size_t v6 = (const unsigned __int8 *)v4 + a2;
    do
    {
      uint64_t v7 = *(void **)(a3 + 8);
      if ((unint64_t)v7 >= *(void *)(a3 + 16))
      {
        uint64_t v8 = (void **)std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        void *v7 = 0;
        v7[1] = 0;
        uint64_t v8 = (void **)(v7 + 3);
        v7[2] = 0;
      }
      *(void *)(a3 + 8) = v8;
      tlv::throwIfNotEnoughBytes(v4, v6, (const unsigned __int8 *)2);
      unsigned int v10 = *(unsigned __int16 *)v4;
      uint64_t v9 = (tlv *)((char *)v4 + 2);
      tlv::throwIfNotEnoughBytes(v9, v6, (const unsigned __int8 *)v10);
      std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v8 - 3, (uint64_t)v9, (char *)v9 + v10, v10);
      uint64_t v4 = (tlv *)((char *)v9 + v10);
    }
    while (v4 < (tlv *)v6);
    *a1 = v4;
  }
}

void sub_1B8BFC364(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFC338);
}

void sub_1B8BFC374(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<ssctl::tlv::abm::ExtendedErrorMessages>(uint64_t *a1, double a2, double a3, double a4, double a5, int64x2_t a6, double a7, int8x16_t a8)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 == v8) {
    return 3;
  }
  unint64_t v10 = v8 - v9 - 24;
  if (v10 >= 0x60)
  {
    unint64_t v14 = v10 / 0x18 + 1;
    uint64_t v15 = v14 & 3;
    if ((v14 & 3) == 0) {
      uint64_t v15 = 4;
    }
    unint64_t v16 = v14 - v15;
    uint64_t v12 = v9 + 24 * v16;
    int64x2_t v17 = (unsigned __int8 *)(v9 + 47);
    int64x2_t v18 = 0uLL;
    v19.i64[0] = 255;
    v19.i64[1] = 255;
    int64x2_t v20 = vdupq_n_s64(2uLL);
    int64x2_t v21 = 0uLL;
    do
    {
      a6.i8[0] = *(v17 - 24);
      a6.i8[4] = *v17;
      a8.i8[0] = v17[24];
      a8.i8[4] = v17[48];
      int32x2_t v22 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
      v23.i64[0] = v22.i32[0];
      v23.i64[1] = v22.i32[1];
      int8x16_t v24 = v23;
      unsigned long long v25 = (const double *)(v17 - 39);
      unsigned long long v26 = (const double *)(v17 + 9);
      unsigned long long v27 = (unsigned __int128)vld3q_f64(v25);
      unsigned long long v28 = (unsigned __int128)vld3q_f64(v26);
      int32x2_t v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x18uLL), 0x18uLL));
      v23.i64[0] = v29.i32[0];
      v23.i64[1] = v29.i32[1];
      int8x16_t v30 = v23;
      v23.i64[0] = a6.u32[0];
      v23.i64[1] = a6.u32[1];
      int8x16_t v31 = vbicq_s8(v23, v24);
      v23.i64[0] = a8.u32[0];
      v23.i64[1] = a8.u32[1];
      a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v24), vandq_s8(v31, v19));
      a8 = vandq_s8((int8x16_t)v28, v30);
      int64x2_t v18 = vaddq_s64(vaddq_s64(v18, v20), a6);
      int64x2_t v21 = vaddq_s64(vaddq_s64(v21, v20), (int64x2_t)vorrq_s8(a8, vandq_s8(vbicq_s8(v23, v30), v19)));
      v17 += 96;
      v16 -= 4;
    }
    while (v16);
    uint64_t v11 = vaddvq_s64(vaddq_s64(v21, v18));
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a1;
  }
  do
  {
    uint64_t v32 = *(unsigned __int8 *)(v12 + 23);
    if ((v32 & 0x80u) != 0) {
      uint64_t v32 = *(void *)(v12 + 8);
    }
    v11 += v32 + 2;
    v12 += 24;
  }
  while (v12 != v8);
  return v11 + 3;
}

char **tlv::writeV<ssctl::tlv::abm::ExtendedErrorMessages>(char **result, const void ***a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      LOWORD(v6) = *((unsigned __int8 *)v4 + 23);
      if ((char)v6 < 0) {
        size_t v6 = v4[1];
      }
      *(_WORD *)uint64_t v3 = (_WORD)v6;
      uint64_t v7 = v3 + 2;
      int v8 = *((char *)v4 + 23);
      if (v8 >= 0) {
        uint64_t v9 = v4;
      }
      else {
        uint64_t v9 = *v4;
      }
      if (v8 >= 0) {
        size_t v10 = *((unsigned __int8 *)v4 + 23);
      }
      else {
        size_t v10 = (size_t)v4[1];
      }
      uint64_t result = (char **)memcpy(v7, v9, v10);
      uint64_t v11 = (char *)*((unsigned __int8 *)v4 + 23);
      if ((char)v11 < 0) {
        uint64_t v11 = (char *)v4[1];
      }
      uint64_t v3 = &v11[(void)v7];
      v4 += 3;
    }
    while (v4 != v5);
  }
  *uint64_t v2 = v3;
  return result;
}

void std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(void **a1, uint64_t a2, char *a3, unint64_t a4)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v8 = (char *)a1;
    if (a4 < 0x17) {
      goto LABEL_22;
    }
    if (a4 - 0x7FFFFFFFFFFFFFF8 >= 0x800000000000001ELL)
    {
      unint64_t v9 = 22;
      size_t v10 = a1;
      goto LABEL_8;
    }
    goto LABEL_35;
  }
  unint64_t v11 = (unint64_t)a1[2];
  unint64_t v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (a4 > v9)
  {
    if (0x7FFFFFFFFFFFFFF8 - (v11 & 0x7FFFFFFFFFFFFFFFLL) >= a4 - v9)
    {
      size_t v10 = *a1;
      if (v9 >= 0x3FFFFFFFFFFFFFF3)
      {
        size_t v14 = 0x7FFFFFFFFFFFFFF7;
        int v8 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
LABEL_20:
        operator delete(v10);
LABEL_21:
        a1[1] = 0;
        a1[2] = (void *)(v14 | 0x8000000000000000);
        *a1 = v8;
        goto LABEL_22;
      }
LABEL_8:
      unint64_t v12 = 2 * v9;
      if (a4 > 2 * v9) {
        unint64_t v12 = a4;
      }
      uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v13 = v12 | 7;
      }
      if (v12 >= 0x17) {
        size_t v14 = v13 + 1;
      }
      else {
        size_t v14 = 23;
      }
      int v8 = (char *)operator new(v14);
      if (v9 == 22) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_35:
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v8 = (char *)a1;
  if ((v11 & 0x8000000000000000) != 0) {
    int v8 = (char *)*a1;
  }
LABEL_22:
  if ((char *)a2 == a3)
  {
    unint64_t v16 = v8;
  }
  else
  {
    unint64_t v15 = (unint64_t)&a3[-a2];
    if ((unint64_t)&a3[-a2] < 0x20 || (unint64_t)&v8[-a2] < 0x20)
    {
      unint64_t v16 = v8;
      int64x2_t v17 = (char *)a2;
    }
    else
    {
      unint64_t v16 = &v8[v15 & 0xFFFFFFFFFFFFFFE0];
      int64x2_t v17 = (char *)(a2 + (v15 & 0xFFFFFFFFFFFFFFE0));
      int64x2_t v18 = (long long *)(a2 + 16);
      int8x16_t v19 = v8 + 16;
      unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *int8x16_t v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v15 == (v15 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_32;
      }
    }
    do
    {
      char v22 = *v17++;
      *v16++ = v22;
    }
    while (v17 != a3);
  }
LABEL_32:
  char *v16 = 0;
  if (*((char *)a1 + 23) < 0) {
    a1[1] = (void *)a4;
  }
  else {
    *((unsigned char *)a1 + 23) = a4 & 0x7F;
  }
}

void *std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>(void **a1)
{
  uint64_t v2 = (void **)*a1;
  uint64_t v1 = (void **)a1[1];
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)v2) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)v2) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)v2) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = &v7[24 * v3];
  unint64_t v9 = &v7[24 * v6];
  *(void *)int v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  size_t v10 = v8 + 24;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v11 = *(_OWORD *)(v1 - 3);
      *((void *)v8 - 1) = *(v1 - 1);
      *(_OWORD *)(v8 - 24) = v11;
      v8 -= 24;
      *(v1 - 2) = 0;
      *(v1 - 1) = 0;
      *(v1 - 3) = 0;
      v1 -= 3;
    }
    while (v1 != v2);
    uint64_t v1 = (void **)*a1;
    unint64_t v12 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v12 != v1)
    {
      if (*((char *)v12 - 1) < 0) {
        operator delete(*(v12 - 3));
      }
      v12 -= 3;
    }
  }
  if (v1) {
    operator delete(v1);
  }
  return v10;
}

char *dms::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

unsigned char *dms::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t dms::tlv::abm::getFieldSize()
{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 1;
}

{
  return 8;
}

uint64_t tlv::parseV<dms::tlv::abm::OperatingMode>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFC918(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::OperatingMode>()
{
  return 4;
}

unsigned char **tlv::writeV<dms::tlv::abm::OperatingMode>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<dms::tlv::abm::OperatingModeLegacy>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFC9D8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::OperatingModeLegacy>()
{
  return 4;
}

unsigned char **tlv::writeV<dms::tlv::abm::OperatingModeLegacy>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *dms::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *dms::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<dms::tlv::abm::ProtocolNVConfig>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8BFCA98(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::ProtocolNVConfig>()
{
  return 5;
}

_WORD **tlv::writeV<dms::tlv::abm::ProtocolNVConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<dms::tlv::abm::OperatingModeReporting>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8BFCB58(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::OperatingModeReporting>()
{
  return 4;
}

unsigned char **tlv::writeV<dms::tlv::abm::OperatingModeReporting>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *dms::tlv::abm::parseField(uint64_t a1, char *a2, void **a3)
{
  return a2;
}

char *dms::tlv::abm::writeField(char *a1, void *a2)
{
  uint64_t v2 = a2;
  size_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v5 = v4;
  }
  memcpy(a1, a2, v5);
  uint64_t v6 = *((unsigned __int8 *)v2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = v2[1];
  }
  return &a1[v6];
}

uint64_t dms::tlv::abm::getFieldSize(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    return *(unsigned __int8 *)(a1 + 23);
  }
  else {
    return *(void *)(a1 + 8);
  }
}

void tlv::parseV<dms::tlv::abm::BasebandFWVersion>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  size_t v4 = (char *)(*a1 + a2);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, *a1, v4, a2);
  *a1 = (uint64_t)v4;
}

void sub_1B8BFCC8C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFCC7CLL);
}

void sub_1B8BFCC9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<dms::tlv::abm::BasebandFWVersion>(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 3;
}

void *tlv::writeV<dms::tlv::abm::BasebandFWVersion>(void **a1, void *a2)
{
  uint64_t v2 = a2;
  size_t v4 = (char *)*a1;
  size_t v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v6 = v5;
  }
  uint64_t result = memcpy(*a1, a2, v6);
  uint64_t v8 = *((unsigned __int8 *)v2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = v2[1];
  }
  *a1 = &v4[v8];
  return result;
}

char *dms::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, void *a3)
{
  *a3 = *(void *)a1;
  return (char *)a1 + 8;
}

void *dms::tlv::abm::writeField(void *a1, void *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<dms::tlv::abm::BasebandTime>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8);
  uint64_t result = *(void *)v3;
  *a1 = (tlv *)((char *)v3 + 8);
  return result;
}

uint64_t sub_1B8BFCDC8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::BasebandTime>()
{
  return 11;
}

void **tlv::writeV<dms::tlv::abm::BasebandTime>(void **result, void *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *coex::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *coex::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

uint64_t coex::getFieldSize()
{
  return 4;
}

{
  return 4;
}

{
  return 8;
}

uint64_t coex::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  return a1 + 16;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  return a1 + 16;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  uint64_t result = a1 + 20;
  a3[4] = *(_DWORD *)(a1 + 16);
  return result;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  uint64_t result = a1 + 20;
  a3[4] = *(_DWORD *)(a1 + 16);
  return result;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  uint64_t result = a1 + 16;
  a3[3] = *(_DWORD *)(a1 + 12);
  return result;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

_DWORD *coex::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t coex::tlv::abm::getFieldSize()
{
  return 8;
}

{
  return 16;
}

{
  return 16;
}

{
  return 20;
}

{
  return 20;
}

{
  return 33;
}

{
  return 26;
}

{
  return 4;
}

{
  return 4;
}

{
  return 16;
}

{
  return 16;
}

{
  return 8;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 8;
}

{
  return 4;
}

{
  return 8;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 1;
}

{
  return 4;
}

{
  return 24;
}

{
  return 8;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 2;
}

{
  return 2;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

uint64_t tlv::parseV<coex::tlv::abm::BandInfo>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8BFCF7C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::BandInfo>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::BandInfo>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  void *result = v2 + 2;
  return result;
}

uint64_t tlv::size<coex::tlv::abm::LTEBandInformation>()
{
  return 19;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTEBandInformation>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  void *result = v2 + 4;
  return result;
}

unint64_t tlv::parseV<coex::tlv::abm::LTE2BandInformation>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 12), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B8BFD234(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFD214);
}

uint64_t tlv::size<coex::tlv::abm::LTE2BandInformation>()
{
  return 19;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTE2BandInformation>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  void *result = v2 + 4;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTETDDInformation>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  unsigned int v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  *a1 = (tlv *)((char *)v5 + 20);
  return result;
}

void sub_1B8BFD414(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::LTETDDInformation>()
{
  return 23;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTETDDInformation>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  void *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTE2TDDInformation>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  unsigned int v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  *a1 = (tlv *)((char *)v5 + 20);
  return result;
}

void sub_1B8BFD614(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::LTE2TDDInformation>()
{
  return 23;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTE2TDDInformation>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  void *result = v2 + 5;
  return result;
}

uint64_t coex::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 36);
  return a1 + 33;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 22);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1 + 26;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1 + 16;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1 + 24;
}

{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  unint64_t v3 = a1 + 5;
  *(unsigned char *)(a1 + 4) = *(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  memcpy((void *)(a1 + 5), *(const void **)(a2 + 8), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  return v3 + *(void *)(a2 + 16) - *(void *)(a2 + 8);
}

uint64_t tlv::parseV<coex::tlv::abm::LTECarrierInformation>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v4;
  *(_OWORD *)(a3 + 16) = v4;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 29) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1B8BFD720(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::LTECarrierInformation>()
{
  return 36;
}

uint64_t *tlv::writeV<coex::tlv::abm::LTECarrierInformation>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(void *)(v2 + 4) = *(void *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v2 + 20) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(v2 + 28) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(v2 + 32) = *(unsigned char *)(a2 + 36);
  void *result = v2 + 33;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::NGCCarrierInformation>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 24) = -1431655766;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_WORD *)(a3 + 24) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1B8BFD920(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::NGCCarrierInformation>()
{
  return 29;
}

uint64_t *tlv::writeV<coex::tlv::abm::NGCCarrierInformation>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a2 + 20);
  *(_WORD *)(v2 + 22) = *(_WORD *)(a2 + 22);
  *(_WORD *)(v2 + 24) = *(_WORD *)(a2 + 24);
  void *result = v2 + 26;
  return result;
}

uint64_t coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, char **a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (uint64_t)a1 + 1;
  unsigned int v6 = v8;
  unint64_t v9 = *a3;
  size_t v10 = a3[1];
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - *a3) >> 3);
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      size_t v10 = &v9[40 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::LTECarrierInformation>::__append(a3, v13);
    unint64_t v9 = *a3;
    size_t v10 = a3[1];
  }
  while (1)
  {
    uint64_t result = v7;
    if (v9 == v10) {
      break;
    }
    uint64_t v7 = coex::tlv::abm::parseField(v7, a2, (uint64_t)v9);
    v9 += 40;
  }
  return result;
}

{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t result;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (uint64_t)a1 + 1;
  unsigned int v6 = v8;
  unint64_t v9 = *a3;
  size_t v10 = a3[1];
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - *a3) >> 3);
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      size_t v10 = &v9[40 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::LTECarrierInformation>::__append(a3, v13);
    unint64_t v9 = *a3;
    size_t v10 = a3[1];
  }
  while (1)
  {
    uint64_t result = v7;
    if (v9 == v10) {
      break;
    }
    uint64_t v7 = coex::tlv::abm::parseField(v7, a2, (uint64_t)v9);
    v9 += 40;
  }
  return result;
}

{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t result;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (uint64_t)a1 + 1;
  unsigned int v6 = v8;
  unint64_t v9 = *a3;
  size_t v10 = a3[1];
  unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - *a3) >> 2);
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      size_t v10 = &v9[28 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::NGCCarrierInformation>::__append(a3, v13);
    unint64_t v9 = *a3;
    size_t v10 = a3[1];
  }
  while (1)
  {
    uint64_t result = v7;
    if (v9 == v10) {
      break;
    }
    uint64_t v7 = coex::tlv::abm::parseField(v7, a2, (uint64_t)v9);
    v9 += 28;
  }
  return result;
}

{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t result;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (uint64_t)a1 + 1;
  unsigned int v6 = v8;
  unint64_t v9 = *a3;
  size_t v10 = a3[1];
  unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - *a3) >> 2);
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      size_t v10 = &v9[28 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::NGCCarrierInformation>::__append(a3, v13);
    unint64_t v9 = *a3;
    size_t v10 = a3[1];
  }
  while (1)
  {
    uint64_t result = v7;
    if (v9 == v10) {
      break;
    }
    uint64_t v7 = coex::tlv::abm::parseField(v7, a2, (uint64_t)v9);
    v9 += 28;
  }
  return result;
}

unsigned char *coex::tlv::abm::writeField(unsigned char *a1, _DWORD *a2)
{
  *a1 = -51 * ((a2[2] - *a2) >> 3);
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *(void *)(result + 4) = *(void *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 16);
      *((_DWORD *)result + 4) = *(_DWORD *)(v3 + 20);
      *((_DWORD *)result + 5) = *(_DWORD *)(v3 + 24);
      *((_DWORD *)result + 6) = *(_DWORD *)(v3 + 28);
      *((_DWORD *)result + 7) = *(_DWORD *)(v3 + 32);
      unsigned int v5 = result + 33;
      result[32] = *(unsigned char *)(v3 + 36);
      v3 += 40;
      result += 33;
    }
    while (v3 != v4);
    return v5;
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;

  *a1 = -51 * ((a2[2] - *a2) >> 3);
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *(void *)(result + 4) = *(void *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 16);
      *((_DWORD *)result + 4) = *(_DWORD *)(v3 + 20);
      *((_DWORD *)result + 5) = *(_DWORD *)(v3 + 24);
      *((_DWORD *)result + 6) = *(_DWORD *)(v3 + 28);
      *((_DWORD *)result + 7) = *(_DWORD *)(v3 + 32);
      unsigned int v5 = result + 33;
      result[32] = *(unsigned char *)(v3 + 36);
      v3 += 40;
      result += 33;
    }
    while (v3 != v4);
    return v5;
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = -73 * ((a2[2] - *a2) >> 2);
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_DWORD *)result + 2) = *(_DWORD *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 12);
      *((_DWORD *)result + 4) = *(_DWORD *)(v3 + 16);
      *((_WORD *)result + 10) = *(_WORD *)(v3 + 20);
      *((_WORD *)result + 11) = *(_WORD *)(v3 + 22);
      *((_WORD *)result + 12) = *(_WORD *)(v3 + 24);
      result += 26;
      v3 += 28;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = -73 * ((a2[2] - *a2) >> 2);
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_DWORD *)result + 2) = *(_DWORD *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 12);
      *((_DWORD *)result + 4) = *(_DWORD *)(v3 + 16);
      *((_WORD *)result + 10) = *(_WORD *)(v3 + 20);
      *((_WORD *)result + 11) = *(_WORD *)(v3 + 22);
      *((_WORD *)result + 12) = *(_WORD *)(v3 + 24);
      result += 26;
      v3 += 28;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((void *)result + 1) = *(void *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = -85 * ((a2[2] - *a2) >> 3);
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_DWORD *)result + 2) = *(_DWORD *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 12);
      *((void *)result + 2) = *(void *)(v3 + 16);
      result += 24;
      v3 += 24;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  long long *v8;
  _OWORD *v9;
  unint64_t v10;
  long long v11;
  char v12;

  *a1 = a2[2] - *a2;
  uint64_t result = a1 + 1;
  unsigned int v5 = *(char **)a2;
  uint64_t v4 = (char *)*((void *)a2 + 1);
  if (*(char **)a2 != v4)
  {
    unsigned int v6 = v4 - v5;
    if ((unint64_t)(v4 - v5) < 0x20) {
      goto LABEL_10;
    }
    if ((unint64_t)(a1 - v5 + 1) < 0x20) {
      goto LABEL_10;
    }
    result += v6 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v7 = &v5[v6 & 0xFFFFFFFFFFFFFFE0];
    unsigned int v8 = (long long *)(v5 + 16);
    unint64_t v9 = a1 + 17;
    size_t v10 = v6 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      unint64_t v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      char *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 32;
    }
    while (v10);
    unsigned int v5 = v7;
    if (v6 != (v6 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_10:
      do
      {
        BOOL v12 = *v5++;
        *result++ = v12;
      }
      while (v5 != v4);
    }
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  long long *v14;
  _OWORD *v15;
  uint64_t v16;
  long long v17;
  int v18;

  *a1 = -51 * ((a2[2] - *a2) >> 3);
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      while (1)
      {
        *(_DWORD *)uint64_t result = *(_DWORD *)v3;
        *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
        result[8] = *(unsigned char *)(v3 + 8);
        unsigned int v5 = result + 10;
        result[9] = (*(_DWORD *)(v3 + 24) - *(_DWORD *)(v3 + 16)) >> 5;
        unsigned int v6 = *(void *)(v3 + 16);
        uint64_t v7 = *(void *)(v3 + 24);
        if (v6 != v7) {
          break;
        }
        result += 10;
        v3 += 40;
        if (v3 == v4) {
          return result;
        }
      }
      do
      {
        *unsigned int v5 = *(unsigned char *)v6;
        uint64_t result = v5 + 2;
        v5[1] = (*(_DWORD *)(v6 + 16) - *(_DWORD *)(v6 + 8)) >> 2;
        unint64_t v9 = *(char **)(v6 + 8);
        unsigned int v8 = *(char **)(v6 + 16);
        if (v9 != v8)
        {
          size_t v10 = v8 - v9 - 4;
          if (v10 < 0x1C) {
            goto LABEL_18;
          }
          if ((unint64_t)(v5 - v9 + 2) < 0x20) {
            goto LABEL_18;
          }
          unint64_t v11 = (v10 >> 2) + 1;
          BOOL v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
          result += v12;
          unint64_t v13 = &v9[v12];
          size_t v14 = (long long *)(v9 + 16);
          unint64_t v15 = v5 + 18;
          unint64_t v16 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            int64x2_t v17 = *v14;
            *(v15 - 1) = *(v14 - 1);
            unsigned __int8 *v15 = v17;
            v14 += 2;
            v15 += 2;
            v16 -= 8;
          }
          while (v16);
          unint64_t v9 = v13;
          if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            do
            {
              int64x2_t v18 = *(_DWORD *)v9;
              v9 += 4;
              *(_DWORD *)uint64_t result = v18;
              result += 4;
            }
            while (v9 != v8);
          }
        }
        v6 += 32;
        unsigned int v5 = result;
      }
      while (v6 != v7);
      v3 += 40;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  long long *v14;
  _OWORD *v15;
  uint64_t v16;
  long long v17;
  int v18;

  *a1 = -51 * ((a2[2] - *a2) >> 3);
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      while (1)
      {
        *(_DWORD *)uint64_t result = *(_DWORD *)v3;
        *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
        result[8] = *(unsigned char *)(v3 + 8);
        unsigned int v5 = result + 10;
        result[9] = (*(_DWORD *)(v3 + 24) - *(_DWORD *)(v3 + 16)) >> 5;
        unsigned int v6 = *(void *)(v3 + 16);
        uint64_t v7 = *(void *)(v3 + 24);
        if (v6 != v7) {
          break;
        }
        result += 10;
        v3 += 40;
        if (v3 == v4) {
          return result;
        }
      }
      do
      {
        *unsigned int v5 = *(unsigned char *)v6;
        uint64_t result = v5 + 2;
        v5[1] = (*(_DWORD *)(v6 + 16) - *(_DWORD *)(v6 + 8)) >> 2;
        unint64_t v9 = *(char **)(v6 + 8);
        unsigned int v8 = *(char **)(v6 + 16);
        if (v9 != v8)
        {
          size_t v10 = v8 - v9 - 4;
          if (v10 < 0x1C) {
            goto LABEL_18;
          }
          if ((unint64_t)(v5 - v9 + 2) < 0x20) {
            goto LABEL_18;
          }
          unint64_t v11 = (v10 >> 2) + 1;
          BOOL v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
          result += v12;
          unint64_t v13 = &v9[v12];
          size_t v14 = (long long *)(v9 + 16);
          unint64_t v15 = v5 + 18;
          unint64_t v16 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            int64x2_t v17 = *v14;
            *(v15 - 1) = *(v14 - 1);
            unsigned __int8 *v15 = v17;
            v14 += 2;
            v15 += 2;
            v16 -= 8;
          }
          while (v16);
          unint64_t v9 = v13;
          if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            do
            {
              int64x2_t v18 = *(_DWORD *)v9;
              v9 += 4;
              *(_DWORD *)uint64_t result = v18;
              result += 4;
            }
            while (v9 != v8);
          }
        }
        v6 += 32;
        unsigned int v5 = result;
      }
      while (v6 != v7);
      v3 += 40;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;

  *a1 = (a2[2] - *a2) >> 5;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v3;
      unsigned int v5 = result + 5;
      result[4] = *(_DWORD *)(v3 + 16) - *(_DWORD *)(v3 + 8);
      memcpy(result + 5, *(const void **)(v3 + 8), *(void *)(v3 + 16) - *(void *)(v3 + 8));
      uint64_t result = &v5[*(void *)(v3 + 16) - *(void *)(v3 + 8)];
      v3 += 32;
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t coex::tlv::abm::getFieldSize(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return 33 * ((v1 - *a1 - 40) / 0x28uLL) + 34;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return 33 * ((v1 - *a1 - 40) / 0x28uLL) + 34;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return 26 * ((v1 - *a1 - 28) / 0x1CuLL) + 27;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return 26 * ((v1 - *a1 - 28) / 0x1CuLL) + 27;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 1;
  }
  else {
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFF8 | 1;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return 24 * ((v1 - *a1 - 24) / 0x18uLL) + 25;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 1;
  }
  else {
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFF8 | 1;
  }
}

unint64_t tlv::size<coex::tlv::abm::LTECarrierInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return 33 * ((v1 - *a1 - 40) / 0x28uLL) + 37;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::LTECarrierInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = -51 * ((a2[2] - *a2) >> 3);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 == v5)
  {
    unsigned char *result = v3;
  }
  else
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *(void *)(v3 + 4) = *(void *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 16);
      *((_DWORD *)v3 + 4) = *(_DWORD *)(v4 + 20);
      *((_DWORD *)v3 + 5) = *(_DWORD *)(v4 + 24);
      *((_DWORD *)v3 + 6) = *(_DWORD *)(v4 + 28);
      *((_DWORD *)v3 + 7) = *(_DWORD *)(v4 + 32);
      unsigned int v6 = v3 + 33;
      v3[32] = *(unsigned char *)(v4 + 36);
      v4 += 40;
      v3 += 33;
    }
    while (v4 != v5);
    unsigned char *result = v6;
  }
  return result;
}

void tlv::parseV<coex::tlv::abm::LTE2CarrierInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  unsigned int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  uint64_t v8 = (uint64_t)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::LTECarrierInformation>::__append((char **)a3, v7);
    size_t v10 = *(char **)a3;
    unint64_t v11 = *(char **)(a3 + 8);
    if (*(char **)a3 != v11)
    {
      do
      {
        uint64_t v8 = coex::tlv::abm::parseField(v8, v6, (uint64_t)v10);
        v10 += 40;
      }
      while (v10 != v11);
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8BFDDCC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFDDB8);
}

void sub_1B8BFDDE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::LTE2CarrierInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return 33 * ((v1 - *a1 - 40) / 0x28uLL) + 37;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::LTE2CarrierInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = -51 * ((a2[2] - *a2) >> 3);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 == v5)
  {
    unsigned char *result = v3;
  }
  else
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *(void *)(v3 + 4) = *(void *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 16);
      *((_DWORD *)v3 + 4) = *(_DWORD *)(v4 + 20);
      *((_DWORD *)v3 + 5) = *(_DWORD *)(v4 + 24);
      *((_DWORD *)v3 + 6) = *(_DWORD *)(v4 + 28);
      *((_DWORD *)v3 + 7) = *(_DWORD *)(v4 + 32);
      unsigned int v6 = v3 + 33;
      v3[32] = *(unsigned char *)(v4 + 36);
      v4 += 40;
      v3 += 33;
    }
    while (v4 != v5);
    unsigned char *result = v6;
  }
  return result;
}

void tlv::parseV<coex::tlv::abm::NGCCarrierInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  unsigned int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  uint64_t v8 = (uint64_t)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::NGCCarrierInformation>::__append((char **)a3, v7);
    size_t v10 = *(char **)a3;
    unint64_t v11 = *(char **)(a3 + 8);
    if (*(char **)a3 != v11)
    {
      do
      {
        uint64_t v8 = coex::tlv::abm::parseField(v8, v6, (uint64_t)v10);
        v10 += 28;
      }
      while (v10 != v11);
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8BFE0D4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFE0C0);
}

void sub_1B8BFE0E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::NGCCarrierInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return 26 * ((v1 - *a1 - 28) / 0x1CuLL) + 30;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::NGCCarrierInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = -73 * ((a2[2] - *a2) >> 2);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 12);
      *((_DWORD *)v3 + 4) = *(_DWORD *)(v4 + 16);
      *((_WORD *)v3 + 10) = *(_WORD *)(v4 + 20);
      *((_WORD *)v3 + 11) = *(_WORD *)(v4 + 22);
      *((_WORD *)v3 + 12) = *(_WORD *)(v4 + 24);
      v3 += 26;
      v4 += 28;
    }
    while (v4 != v5);
  }
  unsigned char *result = v3;
  return result;
}

void tlv::parseV<coex::tlv::abm::NGC2CarrierInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  unsigned int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  uint64_t v8 = (uint64_t)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::NGCCarrierInformation>::__append((char **)a3, v7);
    size_t v10 = *(char **)a3;
    unint64_t v11 = *(char **)(a3 + 8);
    if (*(char **)a3 != v11)
    {
      do
      {
        uint64_t v8 = coex::tlv::abm::parseField(v8, v6, (uint64_t)v10);
        v10 += 28;
      }
      while (v10 != v11);
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8BFE3E0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFE3CCLL);
}

void sub_1B8BFE3F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::NGC2CarrierInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return 26 * ((v1 - *a1 - 28) / 0x1CuLL) + 30;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::NGC2CarrierInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = -73 * ((a2[2] - *a2) >> 2);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 12);
      *((_DWORD *)v3 + 4) = *(_DWORD *)(v4 + 16);
      *((_WORD *)v3 + 10) = *(_WORD *)(v4 + 20);
      *((_WORD *)v3 + 11) = *(_WORD *)(v4 + 22);
      *((_WORD *)v3 + 12) = *(_WORD *)(v4 + 24);
      v3 += 26;
      v4 += 28;
    }
    while (v4 != v5);
  }
  unsigned char *result = v3;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

uint64_t tlv::parseV<coex::tlv::abm::LTEOffPeriod>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFE568(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTEOffPeriod>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTEOffPeriod>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  unsigned char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTE2OffPeriod>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8BFE628(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTE2OffPeriod>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTE2OffPeriod>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  unsigned char *result = v2 + 1;
  return result;
}

unint64_t tlv::parseV<coex::tlv::abm::BandInfoSet>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a2;
  uint64_t v5 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v5, (const unsigned __int8 *)4);
  unsigned int v6 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v5, (const unsigned __int8 *)4);
  uint64_t v7 = *((unsigned int *)v3 + 1);
  uint64_t v8 = (tlv *)((char *)v3 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v5, (const unsigned __int8 *)8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 8) {
    uint64_t v8 = (tlv *)((char *)v3 + 16);
  }
  *a1 = v8;
  return v6 | (unint64_t)(v7 << 32);
}

void sub_1B8BFE7C4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFE7A4);
}

uint64_t tlv::size<coex::tlv::abm::BandInfoSet>()
{
  return 19;
}

uint64_t *tlv::writeV<coex::tlv::abm::BandInfoSet>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(v2 + 8) = *(void *)(a2 + 8);
  unsigned char *result = v2 + 16;
  return result;
}

char *tlv::parseV<coex::tlv::abm::LTEBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFE8B4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFE8A8);
}

void sub_1B8BFE8C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::LTEBandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::LTEBandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::TDSCDMABandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFEB08(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFEAFCLL);
}

void sub_1B8BFEB18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::TDSCDMABandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::TDSCDMABandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::GSMBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFED5C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFED50);
}

void sub_1B8BFED6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::GSMBandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::GSMBandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::ONEXBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFEFB0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFEFA4);
}

void sub_1B8BFEFC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::ONEXBandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::ONEXBandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::HDRBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFF204(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFF1F8);
}

void sub_1B8BFF214(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::HDRBandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::HDRBandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::WCDMABandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFF458(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFF44CLL);
}

void sub_1B8BFF468(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::WCDMABandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::WCDMABandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::GSM2BandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFF6AC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFF6A0);
}

void sub_1B8BFF6BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::GSM2BandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::GSM2BandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::WCDMA2BandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFF900(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFF8F4);
}

void sub_1B8BFF910(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::WCDMA2BandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::WCDMA2BandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::LTE2BandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFFB54(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFFB48);
}

void sub_1B8BFFB64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::LTE2BandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::LTE2BandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::NGCBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFFDA8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFFD9CLL);
}

void sub_1B8BFFDB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::NGCBandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::NGCBandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::NGC2BandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8BFFFFC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8BFFFF0);
}

void sub_1B8C0000C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::NGC2BandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::NGC2BandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 4;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((void *)v3 + 1) = *(void *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  char *result = v3;
  return result;
}

unint64_t tlv::parseV<coex::tlv::abm::WLANScanInfo>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 12), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B8C00214(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C001F4);
}

uint64_t tlv::size<coex::tlv::abm::WLANScanInfo>()
{
  return 19;
}

_DWORD **tlv::writeV<coex::tlv::abm::WLANScanInfo>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  char *result = v2 + 4;
  return result;
}

unsigned __int8 *coex::tlv::abm::parseField(unsigned __int8 *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  unint64_t v6 = a1[4];
  uint64_t v7 = a1 + 5;
  uint64_t v8 = *(char **)(a3 + 8);
  unsigned int v9 = *(char **)(a3 + 16);
  unint64_t v10 = (v9 - v8) >> 3;
  if (v6 <= v10)
  {
    if (v6 < v10)
    {
      unsigned int v9 = &v8[8 * v6];
      *(void *)(a3 + 16) = v9;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)(a3 + 8), v6 - v10);
    uint64_t v8 = *(char **)(a3 + 8);
    unsigned int v9 = *(char **)(a3 + 16);
  }
  while (v8 != v9)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v8 + 1) = *((_DWORD *)v7 + 1);
    v7 += 8;
    v8 += 8;
  }
  tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
  *(_DWORD *)(a3 + 32) = *v7;
  tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)1);
  uint64_t result = v7 + 2;
  *(_DWORD *)(a3 + 36) = v7[1];
  return result;
}

unint64_t coex::tlv::abm::writeField(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  unint64_t v2 = a1 + 5;
  *(unsigned char *)(a1 + 4) = (a2[4] - a2[2]) >> 3;
  uint64_t v4 = (char *)*((void *)a2 + 1);
  uint64_t v3 = (char *)*((void *)a2 + 2);
  if (v4 != v3)
  {
    unint64_t v5 = v3 - v4 - 8;
    if (v5 < 0x58) {
      goto LABEL_15;
    }
    if (v2 < (unint64_t)&v4[(v5 & 0xFFFFFFFFFFFFFFF8) + 8]
      && (unint64_t)v4 < (v5 & 0xFFFFFFFFFFFFFFF8) + a1 + 13)
    {
      goto LABEL_15;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    uint64_t v8 = 8 * (v7 & 0x3FFFFFFFFFFFFFF8);
    v2 += v8;
    unsigned int v9 = &v4[v8];
    unint64_t v10 = (long long *)(v4 + 32);
    unint64_t v11 = (_OWORD *)(a1 + 37);
    uint64_t v12 = v7 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      long long v14 = *(v10 - 2);
      long long v13 = *(v10 - 1);
      long long v16 = *v10;
      long long v15 = v10[1];
      v10 += 4;
      *(v11 - 2) = v14;
      *(v11 - 1) = v13;
      *unint64_t v11 = v16;
      v11[1] = v15;
      v11 += 4;
      v12 -= 8;
    }
    while (v12);
    uint64_t v4 = v9;
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)unint64_t v2 = *(_DWORD *)v4;
        *(_DWORD *)(v2 + 4) = *((_DWORD *)v4 + 1);
        v2 += 8;
        v4 += 8;
      }
      while (v4 != v3);
    }
  }
  *(unsigned char *)unint64_t v2 = a2[8];
  unint64_t result = v2 + 2;
  *(unsigned char *)(v2 + 1) = a2[9];
  return result;
}

uint64_t coex::tlv::abm::getFieldSize(uint64_t a1)
{
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8)) {
    return 7;
  }
  else {
    return (*(void *)(a1 + 16) - *(void *)(a1 + 8)) | 7;
  }
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  const double *v15;
  unint64_t v16;
  float64x2x4_t v17;
  float64x2x4_t v18;

  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  if (v2 == v1) {
    return 10;
  }
  uint64_t v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    uint64_t v7 = (v3 >> 5) + 1;
    uint64_t v8 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v8 = 4;
    }
    unsigned int v9 = v7 - v8;
    unint64_t v5 = v2 + 32 * v9;
    unint64_t v10 = (const double *)(v2 + 72);
    unint64_t v11 = 0uLL;
    uint64_t v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    long long v13 = (int8x16_t)vdupq_n_s64(2uLL);
    long long v14 = 0uLL;
    do
    {
      long long v15 = v10 - 8;
      int64x2_t v17 = vld4q_f64(v15);
      int64x2_t v18 = vld4q_f64(v10);
      unint64_t v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      long long v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    uint64_t v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a1 + 16);
  }
  do
  {
    long long v16 = (*(void *)(v5 + 16) - *(void *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(void *)(v5 + 16) == *(void *)(v5 + 8)) {
      long long v16 = 2;
    }
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 10;
}

{
  return *(void *)(a1 + 16) - *(void *)(a1 + 8) + 5;
}

unsigned __int8 *tlv::parseV<coex::tlv::abm::WLANConnectionInfo>@<X0>(unsigned __int8 **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0xAAAAAAAA00000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  unint64_t result = coex::tlv::abm::parseField(*a1, &(*a1)[a2], a3);
  *a1 = result;
  return result;
}

void sub_1B8C004AC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0049CLL);
}

void sub_1B8C004BC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<coex::tlv::abm::WLANConnectionInfo>(uint64_t a1)
{
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8)) {
    return 10;
  }
  else {
    return ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) | 7) + 3;
  }
}

uint64_t *tlv::writeV<coex::tlv::abm::WLANConnectionInfo>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *a2;
  unint64_t v3 = v2 + 5;
  *(unsigned char *)(v2 + 4) = (a2[4] - a2[2]) >> 3;
  unint64_t v5 = (char *)*((void *)a2 + 1);
  uint64_t v4 = (char *)*((void *)a2 + 2);
  if (v5 != v4)
  {
    unint64_t v6 = v4 - v5 - 8;
    if (v6 < 0x58) {
      goto LABEL_15;
    }
    if (v3 < (unint64_t)&v5[(v6 & 0xFFFFFFFFFFFFFFF8) + 8]
      && (unint64_t)v5 < (v6 & 0xFFFFFFFFFFFFFFF8) + v2 + 13)
    {
      goto LABEL_15;
    }
    uint64_t v8 = (v6 >> 3) + 1;
    uint64_t v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFF8);
    v3 += v9;
    unint64_t v10 = &v5[v9];
    unint64_t v11 = (long long *)(v5 + 32);
    uint64_t v12 = (_OWORD *)(v2 + 37);
    uint64_t v13 = v8 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      long long v15 = *(v11 - 2);
      long long v14 = *(v11 - 1);
      long long v17 = *v11;
      long long v16 = v11[1];
      v11 += 4;
      *(v12 - 2) = v15;
      *(v12 - 1) = v14;
      *uint64_t v12 = v17;
      v12[1] = v16;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
    unint64_t v5 = v10;
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)unint64_t v3 = *(_DWORD *)v5;
        *(_DWORD *)(v3 + 4) = *((_DWORD *)v5 + 1);
        v3 += 8;
        v5 += 8;
      }
      while (v5 != v4);
    }
  }
  *(unsigned char *)unint64_t v3 = a2[8];
  *(unsigned char *)(v3 + 1) = a2[9];
  unsigned __int8 *result = v3 + 2;
  return result;
}

tlv *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, void *a3)
{
  unint64_t v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    uint64_t v6 = *(void *)v5;
    unint64_t v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

{
  tlv *v5;
  uint64_t v6;

  unint64_t v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    uint64_t v6 = *(void *)v5;
    unint64_t v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

{
  tlv *v5;
  uint64_t v6;

  unint64_t v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    uint64_t v6 = *(void *)v5;
    unint64_t v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

{
  tlv *v5;
  uint64_t v6;

  unint64_t v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    uint64_t v6 = *(void *)v5;
    unint64_t v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

{
  tlv *v5;
  uint64_t v6;

  unint64_t v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    uint64_t v6 = *(void *)v5;
    unint64_t v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

void *coex::tlv::abm::writeField(void *a1, void *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<coex::tlv::abm::Policy>(tlv **a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    uint64_t result = *(void *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    uint64_t result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B8C006A4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::Policy>()
{
  return 11;
}

void **tlv::writeV<coex::tlv::abm::Policy>(void **result, void *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

unsigned char *coex::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<coex::tlv::abm::PowerThreshold>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C00768(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::PowerThreshold>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::PowerThreshold>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::RBThreshold>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C00828(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::RBThreshold>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::RBThreshold>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C008E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::TxFrameDenialsParameters>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C00A0C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::TxFrameDenialsParameters>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::TxFrameDenialsParameters>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  unsigned __int8 *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C00AE4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::NGCTxFrameDenialsParameters>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C00C08(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::NGCTxFrameDenialsParameters>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::NGCTxFrameDenialsParameters>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  unsigned __int8 *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::APTTable>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C00CE0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::APTTable>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::APTTable>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::ControllerTxPowerLimit>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  float result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

double sub_1B8C00DA0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::ControllerTxPowerLimit>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::ControllerTxPowerLimit>(_DWORD **a1, float *a2)
{
  unsigned int v2 = *a1;
  float result = *a2;
  *unsigned int v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::WCI2TxPowerLimit>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  float result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

double sub_1B8C00E60(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::WCI2TxPowerLimit>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::WCI2TxPowerLimit>(_DWORD **a1, float *a2)
{
  unsigned int v2 = *a1;
  float result = *a2;
  *unsigned int v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::LinkPathLossThreshold>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  float result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

double sub_1B8C00F20(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::LinkPathLossThreshold>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::LinkPathLossThreshold>(_DWORD **a1, float *a2)
{
  unsigned int v2 = *a1;
  float result = *a2;
  *unsigned int v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::RBFilterAlpha>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  float result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

double sub_1B8C00FE0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::RBFilterAlpha>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::RBFilterAlpha>(_DWORD **a1, float *a2)
{
  unsigned int v2 = *a1;
  float result = *a2;
  *unsigned int v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::FilteredRBThreshold>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  float result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

double sub_1B8C010A0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::FilteredRBThreshold>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::FilteredRBThreshold>(_DWORD **a1, float *a2)
{
  unsigned int v2 = *a1;
  float result = *a2;
  *unsigned int v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *coex::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2TxPowerLimitTimeout>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C01160(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::WCI2TxPowerLimitTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::WCI2TxPowerLimitTimeout>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ControllerTxPowerLimitTimeout>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C01220(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ControllerTxPowerLimitTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::ControllerTxPowerLimitTimeout>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C012E0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::RbThresholdForAdvTxNotice>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C013A0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::RbThresholdForAdvTxNotice>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::RbThresholdForAdvTxNotice>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  unsigned __int8 *result = v2 + 1;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  uint64_t v9 = *(_DWORD **)a3;
  unint64_t v10 = *(_DWORD **)(a3 + 8);
  unint64_t v11 = ((uint64_t)v10 - *(void *)a3) >> 3;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      unint64_t v10 = &v9[2 * v6];
      *(void *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v13);
    uint64_t v9 = *(_DWORD **)a3;
    unint64_t v10 = *(_DWORD **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    _DWORD *v9 = *(_DWORD *)v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    v9[1] = *((_DWORD *)v7 + 1);
    v7 += 8;
    v9 += 2;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  uint64_t v9 = *(_DWORD **)a3;
  unint64_t v10 = *(_DWORD **)(a3 + 8);
  unint64_t v11 = ((uint64_t)v10 - *(void *)a3) >> 3;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      unint64_t v10 = &v9[2 * v6];
      *(void *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v13);
    uint64_t v9 = *(_DWORD **)a3;
    unint64_t v10 = *(_DWORD **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    _DWORD *v9 = *(_DWORD *)v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    v9[1] = *((_DWORD *)v7 + 1);
    v7 += 8;
    v9 += 2;
  }
  return v7;
}

{
  tlv *v5;
  unint64_t v6;

  unsigned int v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), a2, (const unsigned __int8 *)1);
  uint64_t v6 = *((unsigned __int8 *)v5 + 4);
  unsigned int v5 = (tlv *)((char *)v5 + 5);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a3 + 8), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

char *coex::tlv::abm::writeField(unsigned char *a1, _DWORD *a2)
{
  *a1 = (a2[2] - *a2) >> 3;
  uint64_t result = a1 + 1;
  unsigned int v5 = *(char **)a2;
  uint64_t v4 = (char *)*((void *)a2 + 1);
  if (*(char **)a2 != v4)
  {
    unint64_t v6 = v4 - v5 - 8;
    if (v6 < 0x58) {
      goto LABEL_14;
    }
    if (result < &v5[(v6 & 0xFFFFFFFFFFFFFFF8) + 8] && v5 < &a1[(v6 & 0xFFFFFFFFFFFFFFF8) + 9]) {
      goto LABEL_14;
    }
    uint64_t v8 = (v6 >> 3) + 1;
    uint64_t v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFF8);
    result += v9;
    unint64_t v10 = &v5[v9];
    unint64_t v11 = (long long *)(v5 + 32);
    BOOL v12 = a1 + 33;
    uint64_t v13 = v8 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      long long v15 = *(v11 - 2);
      long long v14 = *(v11 - 1);
      long long v17 = *v11;
      long long v16 = v11[1];
      v11 += 4;
      *(v12 - 2) = v15;
      *(v12 - 1) = v14;
      *BOOL v12 = v17;
      v12[1] = v16;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
    unsigned int v5 = v10;
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_14:
      do
      {
        *(_DWORD *)uint64_t result = *(_DWORD *)v5;
        *((_DWORD *)result + 1) = *((_DWORD *)v5 + 1);
        result += 8;
        v5 += 8;
      }
      while (v5 != v4);
    }
  }
  return result;
}

{
  char *result;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  long long *v11;
  _OWORD *v12;
  uint64_t v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;

  *a1 = (a2[2] - *a2) >> 3;
  uint64_t result = a1 + 1;
  unsigned int v5 = *(char **)a2;
  uint64_t v4 = (char *)*((void *)a2 + 1);
  if (*(char **)a2 != v4)
  {
    unint64_t v6 = v4 - v5 - 8;
    if (v6 < 0x58) {
      goto LABEL_14;
    }
    if (result < &v5[(v6 & 0xFFFFFFFFFFFFFFF8) + 8] && v5 < &a1[(v6 & 0xFFFFFFFFFFFFFFF8) + 9]) {
      goto LABEL_14;
    }
    uint64_t v8 = (v6 >> 3) + 1;
    uint64_t v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFF8);
    result += v9;
    unint64_t v10 = &v5[v9];
    unint64_t v11 = (long long *)(v5 + 32);
    BOOL v12 = a1 + 33;
    uint64_t v13 = v8 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      long long v15 = *(v11 - 2);
      long long v14 = *(v11 - 1);
      long long v17 = *v11;
      long long v16 = v11[1];
      v11 += 4;
      *(v12 - 2) = v15;
      *(v12 - 1) = v14;
      *BOOL v12 = v17;
      v12[1] = v16;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
    unsigned int v5 = v10;
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_14:
      do
      {
        *(_DWORD *)uint64_t result = *(_DWORD *)v5;
        *((_DWORD *)result + 1) = *((_DWORD *)v5 + 1);
        result += 8;
        v5 += 8;
      }
      while (v5 != v4);
    }
  }
  return result;
}

void tlv::parseV<coex::tlv::abm::ScanFreqBandFilter>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned int v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  uint64_t v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v7);
    unint64_t v10 = *(_DWORD **)a3;
    unint64_t v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        BOOL v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)4);
        *unint64_t v10 = *(_DWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 4), v6, (const unsigned __int8 *)4);
        v10[1] = *((_DWORD *)v8 + 1);
        v10 += 2;
        v8 += 8;
      }
      while (v10 != v11);
      uint64_t v8 = v12 + 8;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8C01634(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0161CLL);
}

void sub_1B8C01648(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::ScanFreqBandFilter>(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 4;
  }
  else {
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFF8 | 4;
  }
}

char **tlv::writeV<coex::tlv::abm::ScanFreqBandFilter>(char **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  unint64_t v3 = *result;
  *unint64_t v3 = (a2[2] - *a2) >> 3;
  uint64_t v4 = v3 + 1;
  unint64_t v6 = *(char **)a2;
  unsigned int v5 = (char *)*((void *)a2 + 1);
  if (*(char **)a2 != v5)
  {
    unint64_t v7 = v5 - v6 - 8;
    if (v7 < 0x58) {
      goto LABEL_15;
    }
    if (v4 < &v6[(v7 & 0xFFFFFFFFFFFFFFF8) + 8] && v6 < &v2[(v7 & 0xFFFFFFFFFFFFFFF8) + 9]) {
      goto LABEL_15;
    }
    uint64_t v9 = (v7 >> 3) + 1;
    uint64_t v10 = 8 * (v9 & 0x3FFFFFFFFFFFFFF8);
    v4 += v10;
    unint64_t v11 = &v6[v10];
    BOOL v12 = (long long *)(v6 + 32);
    uint64_t v13 = v2 + 33;
    uint64_t v14 = v9 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      long long v16 = *(v12 - 2);
      long long v15 = *(v12 - 1);
      long long v18 = *v12;
      long long v17 = v12[1];
      v12 += 4;
      *(v13 - 2) = v16;
      *(v13 - 1) = v15;
      *uint64_t v13 = v18;
      v13[1] = v17;
      v13 += 4;
      v14 -= 8;
    }
    while (v14);
    unint64_t v6 = v11;
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)uint64_t v4 = *(_DWORD *)v6;
        *((_DWORD *)v4 + 1) = *((_DWORD *)v6 + 1);
        v4 += 8;
        v6 += 8;
      }
      while (v6 != v5);
    }
  }
  char *result = v4;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTETransportBlockCount>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C017D0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTETransportBlockCount>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTETransportBlockCount>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::BandSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned int v5 = *a1;
  uint64_t v6 = a2;
  unint64_t v7 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v7, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v7, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v7, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v7, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  uint64_t v8 = (tlv *)((char *)v5 + 16);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v7, (const unsigned __int8 *)8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0x10)
  {
    *(void *)(a3 + 16) = *((void *)v5 + 2);
    uint64_t v8 = (tlv *)((char *)v5 + 24);
  }
  *a1 = v8;
  return result;
}

void sub_1B8C019D0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::BandSet>()
{
  return 27;
}

uint64_t *tlv::writeV<coex::tlv::abm::BandSet>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(v2 + 16) = *(void *)(a2 + 16);
  char *result = v2 + 24;
  return result;
}

tlv *coex::tlv::abm::parseField(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  unint64_t v6 = *a1;

  return tlv::parseSequence<coex::tlv::abm::BandSet>((tlv *)(a1 + 1), a2, a3, v6);
}

tlv *tlv::parseSequence<coex::tlv::abm::BandSet>(tlv *this, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(char **)a3;
  unint64_t v7 = *(char **)(a3 + 8);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-*(void *)a3] >> 3);
  unint64_t v10 = a4 - v9;
  if (a4 <= v9)
  {
    if (a4 < v9)
    {
      unint64_t v7 = &v8[24 * a4];
      *(void *)(a3 + 8) = v7;
    }
    if (v8 == v7) {
      return this;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a3 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 3) >= v10)
    {
      bzero(*(void **)(a3 + 8), 24 * ((24 * v10 - 24) / 0x18) + 24);
      int8x16_t v19 = &v7[24 * ((24 * v10 - 24) / 0x18) + 24];
      *(void *)(a3 + 8) = v19;
    }
    else
    {
      if (a4 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v8) >> 3);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= a4) {
        uint64_t v13 = a4;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = 24 * v14;
      long long v16 = (char *)operator new(24 * v14);
      long long v17 = &v16[24 * v9];
      long long v18 = &v16[v15];
      bzero(v17, 24 * ((24 * v10 - 24) / 0x18) + 24);
      int8x16_t v19 = &v17[24 * ((24 * v10 - 24) / 0x18) + 24];
      if (v7 != v8)
      {
        do
        {
          long long v20 = *(_OWORD *)(v7 - 24);
          *((void *)v17 - 1) = *((void *)v7 - 1);
          *(_OWORD *)(v17 - 24) = v20;
          v17 -= 24;
          v7 -= 24;
        }
        while (v7 != v8);
        unint64_t v7 = v8;
      }
      *(void *)a3 = v17;
      *(void *)(a3 + 8) = v19;
      *(void *)(a3 + 16) = v18;
      if (v7)
      {
        operator delete(v7);
        int8x16_t v19 = *(char **)(a3 + 8);
      }
    }
    uint64_t v8 = *(char **)a3;
    unint64_t v7 = v19;
    if (*(char **)a3 == v19) {
      return this;
    }
  }
  long long v21 = v8 + 16;
  do
  {
    tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v21 - 4) = *(_DWORD *)this;
    char v22 = v21 - 2;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v21 - 3) = *((_DWORD *)this + 1);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 8), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v21 - 2) = *((_DWORD *)this + 2);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 12), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v21 - 1) = *((_DWORD *)this + 3);
    int8x16_t v23 = (tlv *)((char *)this + 16);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 16), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - ((unsigned __int8 *)this + 16)) >= 8)
    {
      void *v21 = *((void *)this + 2);
      int8x16_t v23 = (tlv *)((char *)this + 24);
    }
    v21 += 3;
    this = v23;
  }
  while (v22 + 3 != (void *)v7);
  return v23;
}

tlv *tlv::parseV<coex::tlv::abm::BandFilters>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v5 = *a1;
  unint64_t v6 = (unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  uint64_t result = tlv::parseSequence<coex::tlv::abm::BandSet>((tlv *)((char *)v5 + 1), v6, (uint64_t)a3, *(unsigned __int8 *)v5);
  *a1 = result;
  return result;
}

void sub_1B8C01E18(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C01E08);
}

void sub_1B8C01E28(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::BandFilters>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return 24 * ((v1 - *a1 - 24) / 0x18uLL) + 28;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::BandFilters>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = -85 * ((a2[2] - *a2) >> 3);
  unint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *(_DWORD *)unint64_t v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 12);
      *((void *)v3 + 2) = *(void *)(v4 + 16);
      v3 += 24;
      v4 += 24;
    }
    while (v4 != v5);
  }
  tlv *result = v3;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::MinMax>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C01FDC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::MinMax>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::MinMax>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  tlv *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTEInstance>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C020B4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTEInstance>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTEInstance>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::TechInstance>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C02174(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::TechInstance>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::TechInstance>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::CoexTech>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C02234(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::CoexTech>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::CoexTech>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SecondaryLTEInstance>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C022F4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SecondaryLTEInstance>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::SecondaryLTEInstance>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SecondaryTechInstance>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C023B4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SecondaryTechInstance>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::SecondaryTechInstance>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SecondaryCoexTech>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C02474(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SecondaryCoexTech>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::SecondaryCoexTech>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

void tlv::parseV<coex::tlv::abm::TimeShareReqBandInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned int v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  uint64_t v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v7);
    unint64_t v10 = *(_DWORD **)a3;
    uint64_t v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        unint64_t v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)4);
        *unint64_t v10 = *(_DWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 4), v6, (const unsigned __int8 *)4);
        v10[1] = *((_DWORD *)v8 + 1);
        v10 += 2;
        v8 += 8;
      }
      while (v10 != v11);
      uint64_t v8 = v12 + 8;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8C02708(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C026F0);
}

void sub_1B8C0271C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::TimeShareReqBandInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 4;
  }
  else {
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFF8 | 4;
  }
}

char **tlv::writeV<coex::tlv::abm::TimeShareReqBandInformationSet>(char **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  unint64_t v3 = *result;
  *unint64_t v3 = (a2[2] - *a2) >> 3;
  uint64_t v4 = v3 + 1;
  uint64_t v6 = *(char **)a2;
  unsigned int v5 = (char *)*((void *)a2 + 1);
  if (*(char **)a2 != v5)
  {
    unint64_t v7 = v5 - v6 - 8;
    if (v7 < 0x58) {
      goto LABEL_15;
    }
    if (v4 < &v6[(v7 & 0xFFFFFFFFFFFFFFF8) + 8] && v6 < &v2[(v7 & 0xFFFFFFFFFFFFFFF8) + 9]) {
      goto LABEL_15;
    }
    uint64_t v9 = (v7 >> 3) + 1;
    uint64_t v10 = 8 * (v9 & 0x3FFFFFFFFFFFFFF8);
    v4 += v10;
    uint64_t v11 = &v6[v10];
    unint64_t v12 = (long long *)(v6 + 32);
    uint64_t v13 = v2 + 33;
    uint64_t v14 = v9 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      long long v16 = *(v12 - 2);
      long long v15 = *(v12 - 1);
      long long v18 = *v12;
      long long v17 = v12[1];
      v12 += 4;
      *(v13 - 2) = v16;
      *(v13 - 1) = v15;
      *uint64_t v13 = v18;
      v13[1] = v17;
      v13 += 4;
      v14 -= 8;
    }
    while (v14);
    uint64_t v6 = v11;
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)uint64_t v4 = *(_DWORD *)v6;
        *((_DWORD *)v4 + 1) = *((_DWORD *)v6 + 1);
        v4 += 8;
        v6 += 8;
      }
      while (v6 != v5);
    }
  }
  tlv *result = v4;
  return result;
}

tlv *coex::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  unint64_t v6 = *(unsigned __int8 *)(a1 + 1);
  unint64_t v7 = (tlv *)(a1 + 2);
  uint64_t v8 = *(_DWORD **)(a3 + 8);
  uint64_t v9 = *(_DWORD **)(a3 + 16);
  unint64_t v10 = v9 - v8;
  if (v6 <= v10)
  {
    if (v6 < v10)
    {
      uint64_t v9 = &v8[v6];
      *(void *)(a3 + 16) = v9;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<unsigned int> *)(a3 + 8), v6 - v10);
    uint64_t v8 = *(_DWORD **)(a3 + 8);
    uint64_t v9 = *(_DWORD **)(a3 + 16);
  }
  while (v8 != v9)
  {
    tlv::throwIfNotEnoughBytes(v7, a2, (const unsigned __int8 *)4);
    int v11 = *(_DWORD *)v7;
    unint64_t v7 = (tlv *)((char *)v7 + 4);
    *v8++ = v11;
  }
  return v7;
}

_DWORD *coex::tlv::abm::writeField(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  uint64_t result = a1 + 2;
  a1[1] = (*(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8)) >> 2;
  unsigned int v5 = *(char **)(a2 + 8);
  uint64_t v4 = *(char **)(a2 + 16);
  if (v5 != v4)
  {
    unint64_t v6 = v4 - v5 - 4;
    if (v6 < 0x1C) {
      goto LABEL_10;
    }
    if ((unint64_t)(a1 - v5 + 2) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v7 = (v6 >> 2) + 1;
    uint64_t v8 = 4 * (v7 & 0x7FFFFFFFFFFFFFF8);
    uint64_t result = (_DWORD *)((char *)result + v8);
    uint64_t v9 = &v5[v8];
    unint64_t v10 = (long long *)(v5 + 16);
    int v11 = a1 + 18;
    uint64_t v12 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *int v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    unsigned int v5 = v9;
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_10:
      do
      {
        int v14 = *(_DWORD *)v5;
        v5 += 4;
        *result++ = v14;
      }
      while (v5 != v4);
    }
  }
  return result;
}

unint64_t coex::tlv::abm::getFieldSize(uint64_t a1)
{
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8)) {
    return 2;
  }
  else {
    return (*(void *)(a1 + 16) - *(void *)(a1 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
  }
}

void tlv::parseV<coex::tlv::abm::AntBandInfoSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0xAAAAAAAAAAAAAA00;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unsigned int v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1);
  std::vector<unsigned int>::size_type v7 = *((unsigned __int8 *)v5 + 1);
  uint64_t v8 = (tlv *)((char *)v5 + 2);
  if (v7)
  {
    std::vector<int>::__append((std::vector<unsigned int> *)(a3 + 8), v7);
    uint64_t v9 = *(_DWORD **)(a3 + 8);
    for (i = *(_DWORD **)(a3 + 16); v9 != i; ++v9)
    {
      tlv::throwIfNotEnoughBytes(v8, v6, (const unsigned __int8 *)4);
      int v11 = *(_DWORD *)v8;
      uint64_t v8 = (tlv *)((char *)v8 + 4);
      _DWORD *v9 = v11;
    }
  }
  *a1 = v8;
}

void sub_1B8C02A60(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C02A48);
}

void sub_1B8C02A74(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::AntBandInfoSet>(uint64_t a1)
{
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8)) {
    return 5;
  }
  else {
    return ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) & 0xFFFFFFFFFFFFFFFCLL) + 5;
  }
}

unsigned char **tlv::writeV<coex::tlv::abm::AntBandInfoSet>(unsigned char **result, uint64_t a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *(unsigned char *)a2;
  unint64_t v3 = v2 + 2;
  v2[1] = (*(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8)) >> 2;
  unsigned int v5 = *(char **)(a2 + 8);
  uint64_t v4 = *(char **)(a2 + 16);
  if (v5 != v4)
  {
    unint64_t v6 = v4 - v5 - 4;
    if (v6 < 0x1C) {
      goto LABEL_11;
    }
    if ((unint64_t)(v2 - v5 + 2) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v7 = (v6 >> 2) + 1;
    uint64_t v8 = 4 * (v7 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v3 = (_DWORD *)((char *)v3 + v8);
    uint64_t v9 = &v5[v8];
    unint64_t v10 = (long long *)(v5 + 16);
    int v11 = v2 + 18;
    uint64_t v12 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *int v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    unsigned int v5 = v9;
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_11:
      do
      {
        int v14 = *(_DWORD *)v5;
        v5 += 4;
        *v3++ = v14;
      }
      while (v5 != v4);
    }
  }
  _DWORD *result = v3;
  return result;
}

int *coex::tlv::abm::parseField(coex::tlv::abm *this, const unsigned __int8 *a2, char **a3, coex::tlv::abm::AntBlockBandInformationSet *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)1);
  unint64_t v7 = *(unsigned __int8 *)this;

  return tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)this + 1), a2, a3, v7);
}

int *tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>(int *a1, const unsigned __int8 *a2, char **a3, unint64_t a4)
{
  uint64_t v8 = *a3;
  unint64_t v7 = a3[1];
  uint64_t v9 = v7 - *a3;
  uint64_t v10 = v9 >> 5;
  unint64_t v11 = a4 - (v9 >> 5);
  if (a4 <= v9 >> 5)
  {
    if (a4 >= v9 >> 5)
    {
      unsigned long long v27 = a3[1];
      i = *a3;
      if (*a3 == v7) {
        return a1;
      }
      goto LABEL_33;
    }
    unsigned long long v27 = &v8[32 * a4];
    while (v7 != v27)
    {
      unsigned long long v28 = (void *)*((void *)v7 - 3);
      if (v28)
      {
        *((void *)v7 - 2) = v28;
        operator delete(v28);
      }
      v7 -= 32;
    }
    a3[1] = v27;
    for (i = *a3; i != v27; i += 32)
    {
LABEL_33:
      tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
      char *i = *(unsigned char *)a1;
      tlv::throwIfNotEnoughBytes((tlv *)((char *)a1 + 1), a2, (const unsigned __int8 *)1);
      unint64_t v31 = *((unsigned __int8 *)a1 + 1);
      uint64_t v32 = (_DWORD *)*((void *)i + 1);
      uint64_t v33 = (_DWORD *)*((void *)i + 2);
      unint64_t v34 = v33 - v32;
      if (v31 <= v34)
      {
        if (v31 < v34)
        {
          uint64_t v33 = &v32[v31];
          *((void *)i + 2) = v33;
        }
        a1 = (int *)((char *)a1 + 2);
      }
      else
      {
        std::vector<int>::__append((std::vector<unsigned int> *)(i + 8), v31 - v34);
        uint64_t v32 = (_DWORD *)*((void *)i + 1);
        uint64_t v33 = (_DWORD *)*((void *)i + 2);
        a1 = (int *)((char *)a1 + 2);
      }
      while (v32 != v33)
      {
        tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
        int v35 = *a1++;
        *v32++ = v35;
      }
    }
  }
  else
  {
    uint64_t v12 = a3[2];
    if (v11 <= (v12 - v7) >> 5)
    {
      bzero(a3[1], 32 * v11);
      a3[1] = &v7[32 * v11];
      unsigned long long v27 = &v7[32 * v11];
      i = *a3;
      if (i == v27) {
        return a1;
      }
      goto LABEL_33;
    }
    if (a4 >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v12 - v8;
    uint64_t v14 = v13 >> 4;
    if (v13 >> 4 <= a4) {
      uint64_t v14 = a4;
    }
    BOOL v15 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
    if (!v15) {
      unint64_t v16 = v14;
    }
    if (v16 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v17 = 32 * v16;
    long long v18 = (char *)operator new(32 * v16);
    int8x16_t v19 = &v18[32 * v10];
    long long v20 = &v18[v17];
    bzero(v19, 32 * v11);
    long long v21 = &v19[32 * v11];
    if (v7 == v8)
    {
      *a3 = v19;
      a3[1] = v21;
      a3[2] = v20;
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        int8x16_t v23 = &v19[v22];
        int8x16_t v24 = &v7[v22];
        *(v23 - 32) = v7[v22 - 32];
        *(_OWORD *)(v23 - 24) = *(_OWORD *)&v7[v22 - 24];
        *((void *)v23 - 1) = *(void *)&v7[v22 - 8];
        *((void *)v24 - 3) = 0;
        *((void *)v24 - 2) = 0;
        *((void *)v24 - 1) = 0;
        v22 -= 32;
      }
      while (&v7[v22] != v8);
      unint64_t v7 = *a3;
      unsigned long long v25 = a3[1];
      *a3 = &v19[v22];
      a3[1] = v21;
      a3[2] = v20;
      while (v25 != v7)
      {
        unsigned long long v26 = (void *)*((void *)v25 - 3);
        if (v26)
        {
          *((void *)v25 - 2) = v26;
          operator delete(v26);
        }
        v25 -= 32;
      }
    }
    if (v7) {
      operator delete(v7);
    }
    int8x16_t v30 = a3;
    i = *a3;
    unsigned long long v27 = v30[1];
    if (i != v27) {
      goto LABEL_33;
    }
  }
  return a1;
}

_DWORD *coex::tlv::abm::writeField(unsigned char *a1, _DWORD *a2)
{
  *a1 = (a2[2] - *a2) >> 5;
  unsigned int v2 = a1 + 1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 == v4) {
    return a1 + 1;
  }
  do
  {
    *unsigned int v2 = *(unsigned char *)v3;
    uint64_t result = v2 + 2;
    v2[1] = (*(_DWORD *)(v3 + 16) - *(_DWORD *)(v3 + 8)) >> 2;
    unint64_t v7 = *(char **)(v3 + 8);
    unint64_t v6 = *(char **)(v3 + 16);
    if (v7 != v6)
    {
      unint64_t v8 = v6 - v7 - 4;
      if (v8 < 0x1C) {
        goto LABEL_14;
      }
      if ((unint64_t)(v2 - v7 + 2) < 0x20) {
        goto LABEL_14;
      }
      uint64_t v9 = (v8 >> 2) + 1;
      uint64_t v10 = 4 * (v9 & 0x7FFFFFFFFFFFFFF8);
      uint64_t result = (_DWORD *)((char *)result + v10);
      unint64_t v11 = &v7[v10];
      uint64_t v12 = (long long *)(v7 + 16);
      uint64_t v13 = v2 + 18;
      uint64_t v14 = v9 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *uint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 8;
      }
      while (v14);
      unint64_t v7 = v11;
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_14:
        do
        {
          int v16 = *(_DWORD *)v7;
          v7 += 4;
          *result++ = v16;
        }
        while (v7 != v6);
      }
    }
    v3 += 32;
    unsigned int v2 = result;
  }
  while (v3 != v4);
  return result;
}

uint64_t coex::tlv::abm::getFieldSize(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  unint64_t v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    uint64_t v7 = (v3 >> 5) + 1;
    uint64_t v8 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v8 = 4;
    }
    uint64_t v9 = v7 - v8;
    uint64_t v5 = v2 + 32 * v9;
    uint64_t v10 = (const double *)(v2 + 72);
    int64x2_t v11 = 0uLL;
    int8x16_t v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    int8x16_t v13 = (int8x16_t)vdupq_n_s64(2uLL);
    int64x2_t v14 = 0uLL;
    do
    {
      long long v15 = v10 - 8;
      float64x2x4_t v17 = vld4q_f64(v15);
      float64x2x4_t v18 = vld4q_f64(v10);
      int64x2_t v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    uint64_t v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a1;
  }
  do
  {
    unint64_t v16 = (*(void *)(v5 + 16) - *(void *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(void *)(v5 + 16) == *(void *)(v5 + 8)) {
      unint64_t v16 = 2;
    }
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 | 1;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unint64_t v17;
  float64x2x4_t v19;
  float64x2x4_t v20;

  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  unint64_t v3 = 0;
  uint64_t v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      unint64_t v6 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      if (v6 != v5) {
        break;
      }
      v3 += 10;
      v1 += 40;
      if (v1 == v2) {
        return v3 + 1;
      }
    }
    uint64_t v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      uint64_t v10 = (v7 >> 5) + 1;
      int64x2_t v11 = v10 & 3;
      if ((v10 & 3) == 0) {
        int64x2_t v11 = 4;
      }
      int8x16_t v12 = v10 - v11;
      uint64_t v9 = v6 + 32 * v12;
      int8x16_t v13 = (const double *)(v6 + 72);
      int64x2_t v14 = 0uLL;
      long long v15 = 0uLL;
      do
      {
        unint64_t v16 = v13 - 8;
        int8x16_t v19 = vld4q_f64(v16);
        long long v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        long long v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      uint64_t v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(v1 + 16);
    }
    do
    {
      float64x2x4_t v17 = (*(void *)(v9 + 16) - *(void *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(void *)(v9 + 16) == *(void *)(v9 + 8)) {
        float64x2x4_t v17 = 2;
      }
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 1;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unint64_t v17;
  float64x2x4_t v19;
  float64x2x4_t v20;

  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  unint64_t v3 = 0;
  uint64_t v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      unint64_t v6 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      if (v6 != v5) {
        break;
      }
      v3 += 10;
      v1 += 40;
      if (v1 == v2) {
        return v3 + 1;
      }
    }
    uint64_t v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      uint64_t v10 = (v7 >> 5) + 1;
      int64x2_t v11 = v10 & 3;
      if ((v10 & 3) == 0) {
        int64x2_t v11 = 4;
      }
      int8x16_t v12 = v10 - v11;
      uint64_t v9 = v6 + 32 * v12;
      int8x16_t v13 = (const double *)(v6 + 72);
      int64x2_t v14 = 0uLL;
      long long v15 = 0uLL;
      do
      {
        unint64_t v16 = v13 - 8;
        int8x16_t v19 = vld4q_f64(v16);
        long long v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        long long v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      uint64_t v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(v1 + 16);
    }
    do
    {
      float64x2x4_t v17 = (*(void *)(v9 + 16) - *(void *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(void *)(v9 + 16) == *(void *)(v9 + 8)) {
        float64x2x4_t v17 = 2;
      }
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 1;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  const double *v14;
  float64x2x4_t v15;
  float64x2x4_t v16;

  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  unint64_t v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    uint64_t v7 = (v3 >> 5) + 1;
    uint64_t v8 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v8 = 4;
    }
    uint64_t v9 = v7 - v8;
    uint64_t v5 = v2 + 32 * v9;
    uint64_t v10 = (const double *)(v2 + 72);
    int64x2_t v11 = 0uLL;
    int8x16_t v12 = vdupq_n_s64(5uLL);
    int8x16_t v13 = 0uLL;
    do
    {
      int64x2_t v14 = v10 - 8;
      long long v15 = vld4q_f64(v14);
      unint64_t v16 = vld4q_f64(v10);
      int64x2_t v11 = vaddq_s64(vsubq_s64(vaddq_s64(v11, (int64x2_t)v15.val[1]), (int64x2_t)v15.val[0]), v12);
      int8x16_t v13 = vaddq_s64(vsubq_s64(vaddq_s64(v13, (int64x2_t)v16.val[1]), (int64x2_t)v16.val[0]), v12);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    uint64_t v4 = vaddvq_s64(vaddq_s64(v13, v11));
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a1;
  }
  do
  {
    uint64_t v4 = v4 + *(void *)(v5 + 16) - *(void *)(v5 + 8) + 5;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 1;
}

int *tlv::parseV<coex::tlv::abm::AntBlockBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  uint64_t result = tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)v5 + 1), v6, (char **)a3, *(unsigned __int8 *)v5);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8C0306C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0305CLL);
}

void sub_1B8C0307C(_Unwind_Exception *a1)
{
  coex::tlv::abm::AntBlockBandInformationSet::~AntBlockBandInformationSet(v1);
  _Unwind_Resume(a1);
}

void coex::tlv::abm::AntBlockBandInformationSet::~AntBlockBandInformationSet(coex::tlv::abm::AntBlockBandInformationSet *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)this;
    }
    *((void *)this + 1) = v2;
    operator delete(v4);
  }
}

uint64_t tlv::size<coex::tlv::abm::AntBlockBandInformationSet>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  unint64_t v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    uint64_t v7 = (v3 >> 5) + 1;
    uint64_t v8 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v8 = 4;
    }
    uint64_t v9 = v7 - v8;
    uint64_t v5 = v2 + 32 * v9;
    uint64_t v10 = (const double *)(v2 + 72);
    int64x2_t v11 = 0uLL;
    int8x16_t v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    int8x16_t v13 = (int8x16_t)vdupq_n_s64(2uLL);
    int64x2_t v14 = 0uLL;
    do
    {
      long long v15 = v10 - 8;
      float64x2x4_t v17 = vld4q_f64(v15);
      float64x2x4_t v18 = vld4q_f64(v10);
      int64x2_t v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    uint64_t v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a1;
  }
  do
  {
    unint64_t v16 = (*(void *)(v5 + 16) - *(void *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(void *)(v5 + 16) == *(void *)(v5 + 8)) {
      unint64_t v16 = 2;
    }
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::AntBlockBandInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 5;
  unint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 == v5)
  {
    int *result = v3;
  }
  else
  {
    do
    {
      *unint64_t v3 = *(unsigned char *)v4;
      unint64_t v6 = v3 + 2;
      v3[1] = (*(_DWORD *)(v4 + 16) - *(_DWORD *)(v4 + 8)) >> 2;
      uint64_t v8 = *(char **)(v4 + 8);
      uint64_t v7 = *(char **)(v4 + 16);
      if (v8 != v7)
      {
        unint64_t v9 = v7 - v8 - 4;
        if (v9 < 0x1C) {
          goto LABEL_15;
        }
        if ((unint64_t)(v3 - v8 + 2) < 0x20) {
          goto LABEL_15;
        }
        uint64_t v10 = (v9 >> 2) + 1;
        uint64_t v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v6 = (_DWORD *)((char *)v6 + v11);
        int8x16_t v12 = &v8[v11];
        int8x16_t v13 = (long long *)(v8 + 16);
        int64x2_t v14 = v3 + 18;
        uint64_t v15 = v10 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          _OWORD *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        uint64_t v8 = v12;
        if (v10 != (v10 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_15:
          do
          {
            int v17 = *(_DWORD *)v8;
            v8 += 4;
            *v6++ = v17;
          }
          while (v8 != v7);
        }
      }
      v4 += 32;
      unint64_t v3 = v6;
    }
    while (v4 != v5);
    int *result = v6;
  }
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::AntMapInfoSet>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C03364(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::AntMapInfoSet>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::AntMapInfoSet>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  int *result = v2 + 1;
  return result;
}

tlv *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  unint64_t v6 = (tlv *)((char *)a1 + 1);
  unint64_t v7 = v8;
  uint64_t v10 = *(char **)a3;
  unint64_t v9 = *(char **)(a3 + 8);
  uint64_t v11 = v9;
  unint64_t v12 = (unint64_t)&v9[-*(void *)a3];
  BOOL v13 = v8 >= v12;
  size_t v14 = v8 - v12;
  if (v8 <= v12)
  {
    if (v13)
    {
      long long v20 = *(char **)(a3 + 8);
    }
    else
    {
      long long v20 = &v10[v7];
      *(void *)(a3 + 8) = &v10[v7];
    }
    goto LABEL_33;
  }
  uint64_t v15 = *(void *)(a3 + 16);
  if (v15 - (uint64_t)v9 >= v14)
  {
    long long v20 = &v9[v14];
    bzero(*(void **)(a3 + 8), v14);
    *(void *)(a3 + 8) = &v9[v14];
    goto LABEL_33;
  }
  unint64_t v16 = v15 - (void)v10;
  uint64_t v17 = 2 * v16;
  if (2 * v16 <= v7) {
    uint64_t v17 = v7;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v17;
  }
  int8x16_t v19 = (char *)operator new(v18);
  int v35 = &v19[v18];
  uint64_t v36 = v19;
  long long v20 = &v19[v7];
  long long v21 = &v19[v12];
  bzero(&v19[v12], v14);
  if (v9 != v10)
  {
    if (v12 < 8 || (unint64_t)(v10 - v36) < 0x20) {
      goto LABEL_28;
    }
    if (v12 >= 0x20)
    {
      unint64_t v22 = v12 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v23 = v9 - 16;
      int8x16_t v24 = &v36[v9 - 16 - v10];
      unint64_t v25 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v26 = *(_OWORD *)v23;
        *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
        *(_OWORD *)int8x16_t v24 = v26;
        v24 -= 32;
        v23 -= 32;
        v25 -= 32;
      }
      while (v25);
      if (v12 == v22)
      {
LABEL_30:
        uint64_t v11 = v10;
        uint64_t v10 = v36;
        *(void *)a3 = v36;
        *(void *)(a3 + 8) = v20;
        *(void *)(a3 + 16) = v35;
        if (!v11) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      if ((v12 & 0x18) == 0)
      {
        v21 -= v22;
        uint64_t v11 = &v9[-v22];
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v22 = 0;
    }
    uint64_t v11 = &v9[-(v12 & 0xFFFFFFFFFFFFFFF8)];
    v21 -= v12 & 0xFFFFFFFFFFFFFFF8;
    unsigned long long v27 = &v9[-v22 - 8];
    uint64_t v28 = v27 - v10;
    unint64_t v29 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v30 = *(void *)v27;
      v27 -= 8;
      *(void *)&v36[v28] = v30;
      v28 -= 8;
      v29 += 8;
    }
    while (v29);
    if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_30;
    }
LABEL_28:
    unint64_t v31 = v21 - 1;
    do
    {
      char v32 = *--v11;
      *v31-- = v32;
    }
    while (v11 != v10);
    goto LABEL_30;
  }
  uint64_t v10 = v21;
  *(void *)a3 = v21;
  *(void *)(a3 + 8) = v20;
  *(void *)(a3 + 16) = v35;
  if (v9)
  {
LABEL_31:
    operator delete(v11);
    uint64_t v10 = *(char **)a3;
    long long v20 = *(char **)(a3 + 8);
  }
LABEL_33:
  while (v10 != v20)
  {
    tlv::throwIfNotEnoughBytes(v6, a2, (const unsigned __int8 *)1);
    char v33 = *(unsigned char *)v6;
    unint64_t v6 = (tlv *)((char *)v6 + 1);
    *v10++ = v33;
  }
  return v6;
}

uint64_t coex::tlv::abm::getFieldSize(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 1;
  }
  else {
    return v1 - *a1 + 1;
  }
}

tlv *tlv::parseV<coex::tlv::abm::AntMapInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = result;
  return result;
}

void sub_1B8C036A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0369CLL);
}

void sub_1B8C036B8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<coex::tlv::abm::AntMapInformationSet>(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 4;
  }
  else {
    return v1 - *a1 + 4;
  }
}

void *tlv::writeV<coex::tlv::abm::AntMapInformationSet>(void *result, _DWORD *a2)
{
  uint64_t v2 = (unsigned char *)*result;
  unint64_t v3 = (unsigned char *)*result;
  *unint64_t v3 = a2[2] - *a2;
  uint64_t v4 = v3 + 1;
  unint64_t v6 = *(char **)a2;
  uint64_t v5 = (char *)*((void *)a2 + 1);
  if (*(char **)a2 != v5)
  {
    uint64_t v7 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 0x20) {
      goto LABEL_11;
    }
    if ((unint64_t)(v2 - v6 + 1) < 0x20) {
      goto LABEL_11;
    }
    v4 += v7 & 0xFFFFFFFFFFFFFFE0;
    unsigned int v8 = &v6[v7 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v9 = (long long *)(v6 + 16);
    uint64_t v10 = v2 + 17;
    unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v12 = *v9;
      *(v10 - 1) = *(v9 - 1);
      *uint64_t v10 = v12;
      v9 += 2;
      v10 += 2;
      v11 -= 32;
    }
    while (v11);
    unint64_t v6 = v8;
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_11:
      do
      {
        char v13 = *v6++;
        *v4++ = v13;
      }
      while (v6 != v5);
    }
  }
  tlv *result = v4;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

BOOL tlv::parseV<coex::tlv::abm::Enabled>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C03818(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::Enabled>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::Enabled>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::EnableMmwTxInfo>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C038E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::EnableMmwTxInfo>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::EnableMmwTxInfo>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::CriticalCarrierId>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C039A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::CriticalCarrierId>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::CriticalCarrierId>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SecondaryCriticalCarrierId>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C03A68(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SecondaryCriticalCarrierId>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::SecondaryCriticalCarrierId>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::GnssBandId>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C03B28(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::GnssBandId>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::GnssBandId>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::GnssL5Level>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C03BE8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::GnssL5Level>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::GnssL5Level>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

int *coex::tlv::abm::parseField(coex::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, coex::tlv::abm::AntBlockClientInfoSet *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)this;
  tlv::throwIfNotEnoughBytes((coex::tlv::abm *)((char *)this + 4), a2, (const unsigned __int8 *)4);
  *((_DWORD *)a3 + 1) = *((_DWORD *)this + 1);
  tlv::throwIfNotEnoughBytes((coex::tlv::abm *)((char *)this + 8), a2, (const unsigned __int8 *)1);
  a3[8] = *((unsigned char *)this + 8) != 0;
  tlv::throwIfNotEnoughBytes((coex::tlv::abm *)((char *)this + 9), a2, (const unsigned __int8 *)1);
  unint64_t v7 = *((unsigned __int8 *)this + 9);

  return tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)this + 10), a2, (char **)a3 + 2, v7);
}

_DWORD *coex::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v2 = (unsigned char *)(a1 + 10);
  *(unsigned char *)(a1 + 9) = (*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 16)) >> 5;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3 == v4) {
    return (_DWORD *)(a1 + 10);
  }
  do
  {
    *uint64_t v2 = *(unsigned char *)v3;
    uint64_t result = v2 + 2;
    v2[1] = (*(_DWORD *)(v3 + 16) - *(_DWORD *)(v3 + 8)) >> 2;
    unint64_t v7 = *(char **)(v3 + 8);
    unint64_t v6 = *(char **)(v3 + 16);
    if (v7 != v6)
    {
      unint64_t v8 = v6 - v7 - 4;
      if (v8 < 0x1C) {
        goto LABEL_14;
      }
      if ((unint64_t)(v2 - v7 + 2) < 0x20) {
        goto LABEL_14;
      }
      uint64_t v9 = (v8 >> 2) + 1;
      uint64_t v10 = 4 * (v9 & 0x7FFFFFFFFFFFFFF8);
      uint64_t result = (_DWORD *)((char *)result + v10);
      unint64_t v11 = &v7[v10];
      long long v12 = (long long *)(v7 + 16);
      char v13 = v2 + 18;
      uint64_t v14 = v9 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *char v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 8;
      }
      while (v14);
      unint64_t v7 = v11;
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_14:
        do
        {
          int v16 = *(_DWORD *)v7;
          v7 += 4;
          *result++ = v16;
        }
        while (v7 != v6);
      }
    }
    v3 += 32;
    uint64_t v2 = result;
  }
  while (v3 != v4);
  return result;
}

int *tlv::parseV<coex::tlv::abm::AntBlockClientInfoSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 8) = *((unsigned char *)v5 + 8) != 0;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 9), v6, (const unsigned __int8 *)1);
  uint64_t result = tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)v5 + 10), v6, (char **)(a3 + 16), *((unsigned __int8 *)v5 + 9));
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8C03F80(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C03F6CLL);
}

void sub_1B8C03F90(_Unwind_Exception *a1)
{
  coex::tlv::abm::AntBlockClientInfoSet::~AntBlockClientInfoSet(v1);
  _Unwind_Resume(a1);
}

void coex::tlv::abm::AntBlockClientInfoSet::~AntBlockClientInfoSet(coex::tlv::abm::AntBlockClientInfoSet *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 3);
    uint64_t v4 = (void *)*((void *)this + 2);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v2;
    operator delete(v4);
  }
}

uint64_t tlv::size<coex::tlv::abm::AntBlockClientInfoSet>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  if (v2 == v1) {
    return 13;
  }
  unint64_t v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    uint64_t v7 = (v3 >> 5) + 1;
    uint64_t v8 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v8 = 4;
    }
    uint64_t v9 = v7 - v8;
    uint64_t v5 = v2 + 32 * v9;
    uint64_t v10 = (const double *)(v2 + 72);
    int64x2_t v11 = 0uLL;
    int8x16_t v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    int8x16_t v13 = (int8x16_t)vdupq_n_s64(2uLL);
    int64x2_t v14 = 0uLL;
    do
    {
      long long v15 = v10 - 8;
      float64x2x4_t v17 = vld4q_f64(v15);
      float64x2x4_t v18 = vld4q_f64(v10);
      int64x2_t v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    uint64_t v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  do
  {
    unint64_t v16 = (*(void *)(v5 + 16) - *(void *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(void *)(v5 + 16) == *(void *)(v5 + 8)) {
      unint64_t v16 = 2;
    }
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 13;
}

uint64_t *tlv::writeV<coex::tlv::abm::AntBlockClientInfoSet>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(v2 + 8) = *(unsigned char *)(a2 + 8);
  unint64_t v3 = (unsigned char *)(v2 + 10);
  *(unsigned char *)(v2 + 9) = (*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 16)) >> 5;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v4 == v5)
  {
    int *result = (uint64_t)v3;
  }
  else
  {
    do
    {
      *unint64_t v3 = *(unsigned char *)v4;
      unint64_t v6 = v3 + 2;
      v3[1] = (*(_DWORD *)(v4 + 16) - *(_DWORD *)(v4 + 8)) >> 2;
      uint64_t v8 = *(char **)(v4 + 8);
      uint64_t v7 = *(char **)(v4 + 16);
      if (v8 != v7)
      {
        unint64_t v9 = v7 - v8 - 4;
        if (v9 < 0x1C) {
          goto LABEL_15;
        }
        if ((unint64_t)(v3 - v8 + 2) < 0x20) {
          goto LABEL_15;
        }
        uint64_t v10 = (v9 >> 2) + 1;
        uint64_t v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v6 = (_DWORD *)((char *)v6 + v11);
        int8x16_t v12 = &v8[v11];
        int8x16_t v13 = (long long *)(v8 + 16);
        int64x2_t v14 = v3 + 18;
        uint64_t v15 = v10 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          _OWORD *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        uint64_t v8 = v12;
        if (v10 != (v10 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_15:
          do
          {
            int v17 = *(_DWORD *)v8;
            v8 += 4;
            *v6++ = v17;
          }
          while (v8 != v7);
        }
      }
      v4 += 32;
      unint64_t v3 = v6;
    }
    while (v4 != v5);
    int *result = (uint64_t)v6;
  }
  return result;
}

int *coex::tlv::abm::parseField(coex::tlv::abm *this, const unsigned __int8 *a2, char **a3, coex::tlv::abm::ClientAntBlockInformationSet *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)1);
  unint64_t v7 = *(unsigned __int8 *)this;

  return tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>((int *)((char *)this + 1), a2, a3, v7);
}

int *tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>(int *a1, const unsigned __int8 *a2, char **a3, unint64_t a4)
{
  uint64_t v8 = *a3;
  unint64_t v7 = a3[1];
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a3) >> 3);
  unint64_t v10 = a4 - v9;
  if (a4 <= v9)
  {
    if (a4 >= v9)
    {
      unint64_t v29 = a3[1];
      int v35 = *a3;
    }
    else
    {
      unint64_t v29 = &v8[40 * a4];
      while (v7 != v29)
      {
        uint64_t v31 = *((void *)v7 - 3);
        if (v31)
        {
          uint64_t v32 = *((void *)v7 - 2);
          uint64_t v30 = (void *)*((void *)v7 - 3);
          if (v32 != v31)
          {
            do
            {
              char v33 = *(void **)(v32 - 24);
              if (v33)
              {
                *(void *)(v32 - 16) = v33;
                operator delete(v33);
              }
              v32 -= 32;
            }
            while (v32 != v31);
            uint64_t v30 = (void *)*((void *)v7 - 3);
          }
          *((void *)v7 - 2) = v31;
          operator delete(v30);
        }
        v7 -= 40;
      }
      a3[1] = v29;
      int v35 = *a3;
    }
  }
  else
  {
    uint64_t v11 = a3[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v7) >> 3) >= v10)
    {
      size_t v34 = 40 * ((40 * v10 - 40) / 0x28) + 40;
      bzero(a3[1], v34);
      a3[1] = &v7[v34];
      unint64_t v29 = &v7[v34];
      int v35 = *a3;
    }
    else
    {
      if (a4 > 0x666666666666666) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v8) >> 3);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= a4) {
        uint64_t v13 = a4;
      }
      if (v12 >= 0x333333333333333) {
        unint64_t v14 = 0x666666666666666;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = 40 * v14;
      long long v16 = (char *)operator new(40 * v14);
      int v17 = &v16[40 * v9];
      float64x2x4_t v18 = &v16[v15];
      bzero(v17, 40 * ((40 * v10 - 40) / 0x28) + 40);
      int8x16_t v19 = &v17[40 * ((40 * v10 - 40) / 0x28) + 40];
      if (v7 == v8)
      {
        *a3 = v17;
        a3[1] = v19;
        a3[2] = v18;
      }
      else
      {
        uint64_t v20 = 0;
        do
        {
          long long v21 = &v17[v20];
          unint64_t v22 = &v7[v20];
          uint64_t v23 = *(void *)&v7[v20 - 40];
          *(v21 - 32) = v7[v20 - 32];
          *((void *)v21 - 5) = v23;
          *(_OWORD *)(v21 - 24) = *(_OWORD *)&v7[v20 - 24];
          *((void *)v21 - 1) = *(void *)&v7[v20 - 8];
          *((void *)v22 - 3) = 0;
          *((void *)v22 - 2) = 0;
          *((void *)v22 - 1) = 0;
          v20 -= 40;
        }
        while (&v7[v20] != v8);
        unint64_t v7 = *a3;
        int8x16_t v24 = a3[1];
        *a3 = &v17[v20];
        a3[1] = v19;
        a3[2] = v18;
        while (v24 != v7)
        {
          uint64_t v26 = *((void *)v24 - 3);
          if (v26)
          {
            uint64_t v27 = *((void *)v24 - 2);
            unint64_t v25 = (void *)*((void *)v24 - 3);
            if (v27 != v26)
            {
              do
              {
                uint64_t v28 = *(void **)(v27 - 24);
                if (v28)
                {
                  *(void *)(v27 - 16) = v28;
                  operator delete(v28);
                }
                v27 -= 32;
              }
              while (v27 != v26);
              unint64_t v25 = (void *)*((void *)v24 - 3);
            }
            *((void *)v24 - 2) = v26;
            operator delete(v25);
          }
          v24 -= 40;
        }
      }
      if (v7) {
        operator delete(v7);
      }
      uint64_t v36 = a3;
      int v35 = *a3;
      unint64_t v29 = v36[1];
    }
  }
  while (v35 != v29)
  {
    tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
    *(_DWORD *)int v35 = *a1;
    tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v35 + 1) = a1[1];
    tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
    v35[8] = *((unsigned char *)a1 + 8) != 0;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)a1 + 9), a2, (const unsigned __int8 *)1);
    a1 = tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)a1 + 10), a2, (char **)v35 + 2, *((unsigned __int8 *)a1 + 9));
    v35 += 40;
  }
  return a1;
}

int *tlv::parseV<coex::tlv::abm::ClientAntBlockInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  uint64_t result = tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>((int *)((char *)v5 + 1), v6, (char **)a3, *(unsigned __int8 *)v5);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8C04860(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C04850);
}

void sub_1B8C04870(_Unwind_Exception *a1)
{
  coex::tlv::abm::ClientAntBlockInformationSet::~ClientAntBlockInformationSet(v1);
  _Unwind_Resume(a1);
}

void coex::tlv::abm::ClientAntBlockInformationSet::~ClientAntBlockInformationSet(coex::tlv::abm::ClientAntBlockInformationSet *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void *)(v3 - 24);
        if (v6)
        {
          uint64_t v7 = *(void *)(v3 - 16);
          uint64_t v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              uint64_t v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(void *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            uint64_t v5 = *(void **)(v3 - 24);
          }
          *(void *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)this;
    }
    *((void *)this + 1) = v2;
    operator delete(v4);
  }
}

uint64_t tlv::size<coex::tlv::abm::ClientAntBlockInformationSet>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 4;
  }
  uint64_t v3 = 0;
  int8x16_t v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      if (v6 != v5) {
        break;
      }
      v3 += 10;
      v1 += 40;
      if (v1 == v2) {
        return v3 + 4;
      }
    }
    unint64_t v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      uint64_t v10 = (v7 >> 5) + 1;
      uint64_t v11 = v10 & 3;
      if ((v10 & 3) == 0) {
        uint64_t v11 = 4;
      }
      uint64_t v12 = v10 - v11;
      uint64_t v9 = v6 + 32 * v12;
      uint64_t v13 = (const double *)(v6 + 72);
      int64x2_t v14 = 0uLL;
      int64x2_t v15 = 0uLL;
      do
      {
        long long v16 = v13 - 8;
        float64x2x4_t v19 = vld4q_f64(v16);
        float64x2x4_t v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        int64x2_t v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      uint64_t v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(v1 + 16);
    }
    do
    {
      unint64_t v17 = (*(void *)(v9 + 16) - *(void *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(void *)(v9 + 16) == *(void *)(v9 + 8)) {
        unint64_t v17 = 2;
      }
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ClientAntBlockInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = -51 * ((a2[2] - *a2) >> 3);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      while (1)
      {
        *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
        *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
        v3[8] = *(unsigned char *)(v4 + 8);
        uint64_t v6 = v3 + 10;
        v3[9] = (*(_DWORD *)(v4 + 24) - *(_DWORD *)(v4 + 16)) >> 5;
        uint64_t v7 = *(void *)(v4 + 16);
        uint64_t v8 = *(void *)(v4 + 24);
        if (v7 != v8) {
          break;
        }
        v3 += 10;
        v4 += 40;
        if (v4 == v5) {
          goto LABEL_2;
        }
      }
      do
      {
        unsigned char *v6 = *(unsigned char *)v7;
        uint64_t v3 = v6 + 2;
        v6[1] = (*(_DWORD *)(v7 + 16) - *(_DWORD *)(v7 + 8)) >> 2;
        uint64_t v10 = *(char **)(v7 + 8);
        uint64_t v9 = *(char **)(v7 + 16);
        if (v10 != v9)
        {
          unint64_t v11 = v9 - v10 - 4;
          if (v11 < 0x1C) {
            goto LABEL_18;
          }
          if ((unint64_t)(v6 - v10 + 2) < 0x20) {
            goto LABEL_18;
          }
          uint64_t v12 = (v11 >> 2) + 1;
          uint64_t v13 = 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
          v3 += v13;
          int64x2_t v14 = &v10[v13];
          int64x2_t v15 = (long long *)(v10 + 16);
          long long v16 = v6 + 18;
          uint64_t v17 = v12 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v18 = *v15;
            *(v16 - 1) = *(v15 - 1);
            _OWORD *v16 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          uint64_t v10 = v14;
          if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            do
            {
              int v19 = *(_DWORD *)v10;
              v10 += 4;
              *(_DWORD *)uint64_t v3 = v19;
              v3 += 4;
            }
            while (v10 != v9);
          }
        }
        v7 += 32;
        uint64_t v6 = v3;
      }
      while (v7 != v8);
      v4 += 40;
    }
    while (v4 != v5);
  }
LABEL_2:
  int *result = v3;
  return result;
}

int *coex::tlv::abm::parseField(unsigned __int8 *a1, const unsigned __int8 *a2, char **a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  unint64_t v6 = *a1;

  return tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>((int *)(a1 + 1), a2, a3, v6);
}

int *tlv::parseV<coex::tlv::abm::ClientAntBlockInformationSetExtended>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  uint64_t result = tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>((int *)((char *)v5 + 1), v6, (char **)a3, *(unsigned __int8 *)v5);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8C04EC8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C04EB8);
}

void sub_1B8C04ED8(_Unwind_Exception *a1)
{
  coex::tlv::abm::ClientAntBlockInformationSet::~ClientAntBlockInformationSet(v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<coex::tlv::abm::ClientAntBlockInformationSetExtended>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 4;
  }
  uint64_t v3 = 0;
  int8x16_t v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      if (v6 != v5) {
        break;
      }
      v3 += 10;
      v1 += 40;
      if (v1 == v2) {
        return v3 + 4;
      }
    }
    unint64_t v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      uint64_t v10 = (v7 >> 5) + 1;
      uint64_t v11 = v10 & 3;
      if ((v10 & 3) == 0) {
        uint64_t v11 = 4;
      }
      uint64_t v12 = v10 - v11;
      uint64_t v9 = v6 + 32 * v12;
      uint64_t v13 = (const double *)(v6 + 72);
      int64x2_t v14 = 0uLL;
      int64x2_t v15 = 0uLL;
      do
      {
        long long v16 = v13 - 8;
        float64x2x4_t v19 = vld4q_f64(v16);
        float64x2x4_t v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        int64x2_t v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      uint64_t v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(v1 + 16);
    }
    do
    {
      unint64_t v17 = (*(void *)(v9 + 16) - *(void *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(void *)(v9 + 16) == *(void *)(v9 + 8)) {
        unint64_t v17 = 2;
      }
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ClientAntBlockInformationSetExtended>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = -51 * ((a2[2] - *a2) >> 3);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      while (1)
      {
        *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
        *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
        v3[8] = *(unsigned char *)(v4 + 8);
        uint64_t v6 = v3 + 10;
        v3[9] = (*(_DWORD *)(v4 + 24) - *(_DWORD *)(v4 + 16)) >> 5;
        uint64_t v7 = *(void *)(v4 + 16);
        uint64_t v8 = *(void *)(v4 + 24);
        if (v7 != v8) {
          break;
        }
        v3 += 10;
        v4 += 40;
        if (v4 == v5) {
          goto LABEL_2;
        }
      }
      do
      {
        unsigned char *v6 = *(unsigned char *)v7;
        uint64_t v3 = v6 + 2;
        v6[1] = (*(_DWORD *)(v7 + 16) - *(_DWORD *)(v7 + 8)) >> 2;
        uint64_t v10 = *(char **)(v7 + 8);
        uint64_t v9 = *(char **)(v7 + 16);
        if (v10 != v9)
        {
          unint64_t v11 = v9 - v10 - 4;
          if (v11 < 0x1C) {
            goto LABEL_18;
          }
          if ((unint64_t)(v6 - v10 + 2) < 0x20) {
            goto LABEL_18;
          }
          uint64_t v12 = (v11 >> 2) + 1;
          uint64_t v13 = 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
          v3 += v13;
          int64x2_t v14 = &v10[v13];
          int64x2_t v15 = (long long *)(v10 + 16);
          long long v16 = v6 + 18;
          uint64_t v17 = v12 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v18 = *v15;
            *(v16 - 1) = *(v15 - 1);
            _OWORD *v16 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          uint64_t v10 = v14;
          if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            do
            {
              int v19 = *(_DWORD *)v10;
              v10 += 4;
              *(_DWORD *)uint64_t v3 = v19;
              v3 += 4;
            }
            while (v10 != v9);
          }
        }
        v7 += 32;
        uint64_t v6 = v3;
      }
      while (v7 != v8);
      v4 += 40;
    }
    while (v4 != v5);
  }
LABEL_2:
  int *result = v3;
  return result;
}

void *tlv::parseV<coex::tlv::abm::TransparentMessageInfoSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAA00000000;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)1);
  unint64_t v7 = *((unsigned __int8 *)v5 + 4);
  uint64_t v5 = (tlv *)((char *)v5 + 5);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3 + 1, (char *)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
  return result;
}

void sub_1B8C052FC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C052E8);
}

void sub_1B8C0530C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<coex::tlv::abm::TransparentMessageInfoSet>(uint64_t a1)
{
  return *(void *)(a1 + 16) - *(void *)(a1 + 8) + 8;
}

void *tlv::writeV<coex::tlv::abm::TransparentMessageInfoSet>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  uint64_t v5 = v4 + 5;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  uint64_t result = memcpy((void *)(v4 + 5), *(const void **)(a2 + 8), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  *a1 = v5 + *(void *)(a2 + 16) - *(void *)(a2 + 8);
  return result;
}

char *coex::tlv::abm::parseField(char *a1, const unsigned __int8 *a2, char **a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  unint64_t v6 = *a1;

  return tlv::parseSequence<coex::tlv::abm::TransparentMessageInfoSet>(a1 + 1, a2, a3, v6);
}

char *tlv::parseSequence<coex::tlv::abm::TransparentMessageInfoSet>(char *a1, const unsigned __int8 *a2, char **a3, unint64_t a4)
{
  uint64_t v8 = *a3;
  unint64_t v7 = a3[1];
  uint64_t v9 = v7 - *a3;
  uint64_t v10 = v9 >> 5;
  unint64_t v11 = a4 - (v9 >> 5);
  if (a4 <= v9 >> 5)
  {
    if (a4 >= v9 >> 5)
    {
      uint64_t v27 = a3[1];
      unint64_t v29 = *a3;
      if (*a3 == v7) {
        return a1;
      }
      goto LABEL_33;
    }
    uint64_t v27 = &v8[32 * a4];
    while (v7 != v27)
    {
      uint64_t v28 = (void *)*((void *)v7 - 3);
      if (v28)
      {
        *((void *)v7 - 2) = v28;
        operator delete(v28);
      }
      v7 -= 32;
    }
    a3[1] = v27;
    unint64_t v29 = *a3;
    if (*a3 != v27)
    {
LABEL_33:
      uint64_t v30 = v29;
      do
      {
        tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
        *(_DWORD *)uint64_t v30 = *(_DWORD *)a1;
        v30 += 32;
        tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
        unint64_t v31 = a1[4];
        uint64_t v32 = a1 + 5;
        tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)v31);
        a1 += v31 + 5;
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)v29 + 1, v32, &v32[v31], v31);
        unint64_t v29 = v30;
      }
      while (v30 != v27);
    }
  }
  else
  {
    uint64_t v12 = a3[2];
    if (v11 <= (v12 - v7) >> 5)
    {
      bzero(a3[1], 32 * v11);
      a3[1] = &v7[32 * v11];
      uint64_t v27 = &v7[32 * v11];
      unint64_t v29 = *a3;
      if (*a3 == v27) {
        return a1;
      }
      goto LABEL_33;
    }
    if (a4 >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v12 - v8;
    uint64_t v14 = v13 >> 4;
    if (v13 >> 4 <= a4) {
      uint64_t v14 = a4;
    }
    BOOL v15 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
    if (!v15) {
      unint64_t v16 = v14;
    }
    if (v16 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v17 = 32 * v16;
    long long v18 = (char *)operator new(32 * v16);
    int v19 = &v18[32 * v10];
    float64x2x4_t v20 = &v18[v17];
    bzero(v19, 32 * v11);
    long long v21 = &v19[32 * v11];
    if (v7 == v8)
    {
      *a3 = v19;
      a3[1] = v21;
      a3[2] = v20;
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = &v19[v22];
        int8x16_t v24 = &v7[v22];
        *((_DWORD *)v23 - 8) = *(_DWORD *)&v7[v22 - 32];
        *(_OWORD *)(v23 - 24) = *(_OWORD *)&v7[v22 - 24];
        *((void *)v23 - 1) = *(void *)&v7[v22 - 8];
        *((void *)v24 - 3) = 0;
        *((void *)v24 - 2) = 0;
        *((void *)v24 - 1) = 0;
        v22 -= 32;
      }
      while (&v7[v22] != v8);
      unint64_t v7 = *a3;
      unint64_t v25 = a3[1];
      *a3 = &v19[v22];
      a3[1] = v21;
      a3[2] = v20;
      while (v25 != v7)
      {
        uint64_t v26 = (void *)*((void *)v25 - 3);
        if (v26)
        {
          *((void *)v25 - 2) = v26;
          operator delete(v26);
        }
        v25 -= 32;
      }
    }
    if (v7) {
      operator delete(v7);
    }
    unint64_t v29 = *a3;
    uint64_t v27 = a3[1];
    if (*a3 != v27) {
      goto LABEL_33;
    }
  }
  return a1;
}

char *tlv::parseV<coex::tlv::abm::TransparentMessageInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  uint64_t result = tlv::parseSequence<coex::tlv::abm::TransparentMessageInfoSet>((char *)v5 + 1, v6, (char **)a3, *(unsigned __int8 *)v5);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8C05800(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C057F0);
}

void sub_1B8C05810(_Unwind_Exception *a1)
{
  coex::tlv::abm::AntBlockBandInformationSet::~AntBlockBandInformationSet(v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<coex::tlv::abm::TransparentMessageInformationSet>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  unint64_t v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    uint64_t v7 = (v3 >> 5) + 1;
    uint64_t v8 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v8 = 4;
    }
    uint64_t v9 = v7 - v8;
    uint64_t v5 = v2 + 32 * v9;
    uint64_t v10 = (const double *)(v2 + 72);
    int64x2_t v11 = 0uLL;
    int64x2_t v12 = vdupq_n_s64(5uLL);
    int64x2_t v13 = 0uLL;
    do
    {
      uint64_t v14 = v10 - 8;
      float64x2x4_t v15 = vld4q_f64(v14);
      float64x2x4_t v16 = vld4q_f64(v10);
      int64x2_t v11 = vaddq_s64(vsubq_s64(vaddq_s64(v11, (int64x2_t)v15.val[1]), (int64x2_t)v15.val[0]), v12);
      int64x2_t v13 = vaddq_s64(vsubq_s64(vaddq_s64(v13, (int64x2_t)v16.val[1]), (int64x2_t)v16.val[0]), v12);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    uint64_t v4 = vaddvq_s64(vaddq_s64(v13, v11));
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a1;
  }
  do
  {
    uint64_t v4 = v4 + *(void *)(v5 + 16) - *(void *)(v5 + 8) + 5;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::TransparentMessageInformationSet>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = result;
  unint64_t v3 = *result;
  *unint64_t v3 = (a2[2] - *a2) >> 5;
  uint64_t v4 = v3 + 1;
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  if (*(void *)a2 != v6)
  {
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)v5;
      uint64_t v7 = v4 + 5;
      v4[4] = *(unsigned char *)(v5 + 16) - *(_DWORD *)(v5 + 8);
      uint64_t result = (unsigned char **)memcpy(v4 + 5, *(const void **)(v5 + 8), *(void *)(v5 + 16) - *(void *)(v5 + 8));
      uint64_t v4 = &v7[*(void *)(v5 + 16) - *(void *)(v5 + 8)];
      v5 += 32;
    }
    while (v5 != v6);
  }
  *uint64_t v2 = v4;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportWWANState>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C05A10(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportWWANState>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ReportWWANState>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportBLERStats>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C05AE0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportBLERStats>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ReportBLERStats>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportFailCondition>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C05BB0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportFailCondition>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ReportFailCondition>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportSuccessCondition>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C05C80(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportSuccessCondition>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ReportSuccessCondition>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportTxAntennaState>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C05D50(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportTxAntennaState>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ReportTxAntennaState>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportNRState>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C05E20(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportNRState>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ReportNRState>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportWCI2TxAntMap>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C05EF0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportWCI2TxAntMap>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ReportWCI2TxAntMap>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WLANScanID>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C05FB0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::WLANScanID>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::WLANScanID>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WLANConnectionHandle>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C06070(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::WLANConnectionHandle>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::WLANConnectionHandle>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTETransportBlockCountErrorThreshold>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C06130(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTETransportBlockCountErrorThreshold>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTETransportBlockCountErrorThreshold>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTETransportBlockCountErrorCount>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C061F0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTETransportBlockCountErrorCount>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTETransportBlockCountErrorCount>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::LTESINRMetricParameters>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  float result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

double sub_1B8C062B0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::LTESINRMetricParameters>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::LTESINRMetricParameters>(_DWORD **a1, float *a2)
{
  uint64_t v2 = *a1;
  float result = *a2;
  *uint64_t v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::LTESINRFilteredOutput>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  float result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

double sub_1B8C06370(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::LTESINRFilteredOutput>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::LTESINRFilteredOutput>(_DWORD **a1, float *a2)
{
  uint64_t v2 = *a1;
  float result = *a2;
  *uint64_t v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ContinuousTxSubframeDenialsStatus>(tlv **a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    uint64_t result = *(void *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    uint64_t result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B8C06474(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ContinuousTxSubframeDenialsStatus>()
{
  return 11;
}

void **tlv::writeV<coex::tlv::abm::ContinuousTxSubframeDenialsStatus>(void **result, void *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::QMITxPowerLimitEnforceFailure>(tlv **a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    uint64_t result = *(void *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    uint64_t result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B8C0657C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::QMITxPowerLimitEnforceFailure>()
{
  return 11;
}

void **tlv::writeV<coex::tlv::abm::QMITxPowerLimitEnforceFailure>(void **result, void *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2TxPowerLimitEnforceFailure>(tlv **a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    uint64_t result = *(void *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    uint64_t result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B8C06684(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::WCI2TxPowerLimitEnforceFailure>()
{
  return 11;
}

void **tlv::writeV<coex::tlv::abm::WCI2TxPowerLimitEnforceFailure>(void **result, void *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSFrameSyncAssertOFFSET>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C067AC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSFrameSyncAssertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSFrameSyncAssertOFFSET>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSFrameSyncAssertJITTER>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C068E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSFrameSyncAssertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSFrameSyncAssertJITTER>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSRxAssertOFFSET>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C06A24(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSRxAssertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSRxAssertOFFSET>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSRxAssertJITTER>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C06B60(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSRxAssertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSRxAssertJITTER>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSRxDeassertOFFSET>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C06C9C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSRxDeassertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSRxDeassertOFFSET>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSRxDeassertJITTER>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C06DD8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSRxDeassertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSRxDeassertJITTER>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSTxAssertOFFSET>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C06F14(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSTxAssertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSTxAssertOFFSET>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSTxAssertJITTER>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C07050(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSTxAssertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSTxAssertJITTER>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSTxDeassertOFFSET>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C0718C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSTxDeassertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSTxDeassertOFFSET>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSTxDeassertJITTER>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C072C8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSTxDeassertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSTxDeassertJITTER>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::TxPowerLimitEnforceSuccess>(tlv **a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    uint64_t result = *(void *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    uint64_t result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B8C073E4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::TxPowerLimitEnforceSuccess>()
{
  return 11;
}

void **tlv::writeV<coex::tlv::abm::TxPowerLimitEnforceSuccess>(void **result, void *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, void *a3)
{
  *a3 = *(void *)a1;
  return (char *)a1 + 8;
}

uint64_t tlv::parseV<coex::tlv::abm::CallType>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8);
  uint64_t result = *(void *)v3;
  *a1 = (tlv *)((char *)v3 + 8);
  return result;
}

uint64_t sub_1B8C074A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::CallType>()
{
  return 11;
}

void **tlv::writeV<coex::tlv::abm::CallType>(void **result, void *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LongDrxCycle>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C07568(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LongDrxCycle>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::LongDrxCycle>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ShortDrxTimer>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C07628(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ShortDrxTimer>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::ShortDrxTimer>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SleepWakeDurScale>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C076E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SleepWakeDurScale>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::SleepWakeDurScale>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::DefaultIdx>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C077A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::DefaultIdx>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::DefaultIdx>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ThresholdInPercentage>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C07868(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ThresholdInPercentage>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ThresholdInPercentage>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ThresholdOutPercentage>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C07928(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ThresholdOutPercentage>()
{
  return 4;
}

unsigned char **tlv::writeV<coex::tlv::abm::ThresholdOutPercentage>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::DeactivationTimerMs>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C079E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::DeactivationTimerMs>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::DeactivationTimerMs>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::StopDeactivationTimerMs>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C07AA8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::StopDeactivationTimerMs>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::StopDeactivationTimerMs>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ThrottlePeriodicity>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C07B68(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ThrottlePeriodicity>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::ThrottlePeriodicity>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ClientId>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C07C28(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ClientId>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::ClientId>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t coex::tlv::abm::parseField(coex::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Duration *a4)
{
  *(_DWORD *)a3 = *(_DWORD *)this;
  return (uint64_t)this + 4;
}

uint64_t coex::tlv::abm::writeField(coex::tlv::abm *this, unsigned __int8 *a2, const Duration *a3)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  return (uint64_t)this + 4;
}

uint64_t coex::tlv::abm::getFieldSize(coex::tlv::abm *this, const Duration *a2)
{
  return 4;
}

uint64_t tlv::parseV<coex::tlv::abm::Duration>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C07CE8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::Duration>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::Duration>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

void std::vector<coex::tlv::abm::NGCCarrierInformation>::__append(char **a1, unint64_t a2)
{
  unsigned int v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v12 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x924924924924924) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x492492492492492) {
      unint64_t v10 = 0x924924924924924;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x924924924924924) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int64x2_t v11 = (char *)operator new(28 * v10);
    }
    else
    {
      int64x2_t v11 = 0;
    }
    int64x2_t v13 = &v11[28 * v7];
    uint64_t v14 = &v11[28 * v10];
    size_t v15 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
    bzero(v13, v15);
    float64x2x4_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 28);
        *(_OWORD *)(v13 - 18) = *(_OWORD *)(v5 - 18);
        *(_OWORD *)(v13 - 28) = v17;
        v13 -= 28;
        v5 -= 28;
      }
      while (v5 != v6);
      unsigned int v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<coex::tlv::abm::BandInfo>::__append(void **a1, unint64_t a2)
{
  unsigned int v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int64x2_t v13 = operator new(8 * v12);
    }
    else
    {
      int64x2_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    float64x2x4_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    long long v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      long long v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  uint64_t v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      uint64_t v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v8 = (char *)end - (char *)this->__begin_;
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + __n;
    if (v10 >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int64x2_t v13 = operator new(4 * v12);
    }
    else
    {
      int64x2_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * __n;
    float64x2x4_t v16 = (unsigned int *)&v13[4 * v12];
    bzero(v14, v15);
    long long v17 = (unsigned int *)&v14[v15];
    if (end != begin)
    {
      unint64_t v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)((char *)end - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      long long v21 = &v13[4 * v9 - 16];
      uint64_t v22 = (long long *)(end - 4);
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

char *wda::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *wda::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

uint64_t wda::getFieldSize()
{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

char *wda::parseField(tlv *a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

unsigned char *wda::writeField(unsigned char *a1, char a2)
{
  *a1 = a2;
  return a1 + 1;
}

char *wda::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *wda::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t wda::tlv::abm::getFieldSize()
{
  return 4;
}

{
  return 8;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

uint64_t tlv::parseV<wda::tlv::abm::LinkLayerProtocol>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C084EC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::LinkLayerProtocol>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::LinkLayerProtocol>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t wda::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  uint64_t result = a1 + 8;
  a3[1] = *(_DWORD *)(a1 + 4);
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::PeripheralEndPointID>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C08610(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<wda::tlv::abm::PeripheralEndPointID>()
{
  return 11;
}

_DWORD **tlv::writeV<wda::tlv::abm::PeripheralEndPointID>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DownLinkDataAggregationProtocol>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C086E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DownLinkDataAggregationProtocol>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DownLinkDataAggregationProtocol>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C087A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DownLinkDataAggregationMaxSize>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C08868(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DownLinkDataAggregationMaxSize>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DownLinkDataAggregationMaxSize>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::UpLinkDataAggregationProtocol>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C08928(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::UpLinkDataAggregationProtocol>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::UpLinkDataAggregationProtocol>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C089E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::UpLinkDataAggregationMaxSize>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C08AA8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::UpLinkDataAggregationMaxSize>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::UpLinkDataAggregationMaxSize>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

char *wda::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

unsigned char *wda::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

BOOL tlv::parseV<wda::tlv::abm::InBandFlowControl>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C08B78(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::InBandFlowControl>()
{
  return 4;
}

unsigned char **tlv::writeV<wda::tlv::abm::InBandFlowControl>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<wda::tlv::abm::DataFlowControl>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C08C48(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DataFlowControl>()
{
  return 4;
}

unsigned char **tlv::writeV<wda::tlv::abm::DataFlowControl>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t wda::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, BOOL *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  uint64_t result = a1 + 2;
  a3[1] = *(unsigned char *)(a1 + 1) != 0;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::CoalescingInformation>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  BOOL v5 = *(unsigned char *)v3 != 0;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)1);
  int v6 = *((unsigned char *)v3 + 1) != 0;
  *a1 = (tlv *)((char *)v3 + 2);
  return v5 | (v6 << 8);
}

uint64_t sub_1B8C08D88(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<wda::tlv::abm::CoalescingInformation>()
{
  return 5;
}

unsigned char **tlv::writeV<wda::tlv::abm::CoalescingInformation>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DataPowerSaveConfig>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C08E5C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DataPowerSaveConfig>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DataPowerSaveConfig>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DefaultFlowRebindVersion>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C08F1C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DefaultFlowRebindVersion>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DefaultFlowRebindVersion>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

char *wda::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

uint64_t tlv::parseV<wda::tlv::abm::LowLatencyConfig>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C08FDC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::LowLatencyConfig>()
{
  return 4;
}

unsigned char **tlv::writeV<wda::tlv::abm::LowLatencyConfig>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::IMSLowLatencyConfig>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0909C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::IMSLowLatencyConfig>()
{
  return 4;
}

unsigned char **tlv::writeV<wda::tlv::abm::IMSLowLatencyConfig>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *bsp::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpEnabledType>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C0915C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpEnabledType>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::CoreDumpEnabledType>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  char *result = v2 + 1;
  return result;
}

_OWORD *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _OWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)0x50);
  *a3 = *(_OWORD *)a1;
  long long v5 = *((_OWORD *)a1 + 1);
  long long v6 = *((_OWORD *)a1 + 2);
  long long v7 = *((_OWORD *)a1 + 4);
  a3[3] = *((_OWORD *)a1 + 3);
  a3[4] = v7;
  a3[1] = v5;
  a3[2] = v6;
  return (_OWORD *)((char *)a1 + 80);
}

_OWORD *bsp::tlv::abm::writeField(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  long long v2 = a2[1];
  long long v3 = a2[2];
  long long v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  a1[1] = v2;
  a1[2] = v3;
  return a1 + 5;
}

__n128 tlv::parseV<bsp::tlv::abm::CrashReason>@<Q0>(tlv **a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  long long v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x50);
  long long v6 = *((_OWORD *)v5 + 3);
  a3[2] = *((_OWORD *)v5 + 2);
  a3[3] = v6;
  a3[4] = *((_OWORD *)v5 + 4);
  __n128 result = *((__n128 *)v5 + 1);
  *a3 = *(_OWORD *)v5;
  a3[1] = result;
  *a1 = (tlv *)((char *)v5 + 80);
  return result;
}

void sub_1B8C09274(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CrashReason>()
{
  return 83;
}

__n128 tlv::writeV<bsp::tlv::abm::CrashReason>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(__n128 *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 32) = v4;
  *a1 = v2 + 80;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)0x83);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v6;
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 96);
  long long v10 = *(_OWORD *)(a1 + 112);
  *(_DWORD *)(a3 + 127) = *(_DWORD *)(a1 + 127);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 112) = v10;
  *(_OWORD *)(a3 + 80) = v8;
  return a1 + 131;
}

{
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)0x83);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v6;
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 96);
  long long v10 = *(_OWORD *)(a1 + 112);
  *(_DWORD *)(a3 + 127) = *(_DWORD *)(a1 + 127);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 112) = v10;
  *(_OWORD *)(a3 + 80) = v8;
  return a1 + 131;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 9);
  return a1 + 13;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 9);
  return a1 + 13;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)0x10);
  *(_OWORD *)(a3 + 4) = *(_OWORD *)(a1 + 4);
  return a1 + 20;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 1) = *(unsigned char *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 2) = *(unsigned char *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 3) = *(unsigned char *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 5) = *(unsigned char *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 6) = *(unsigned char *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 7) = *(unsigned char *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 9) = *(unsigned char *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  return a1 + 14;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 18);
  return a1 + 22;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 18);
  return a1 + 22;
}

{
  uint64_t v6;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 4) = *(_WORD *)(a1 + 4);
  long long v6 = bsp::tlv::abm::parseField(a1 + 6, a2, a3 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)v6, a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 24) = *(_WORD *)v6;
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 28) = *(_WORD *)(v6 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v6 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(v6 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v6 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 44) = *(_DWORD *)(v6 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 20), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v6 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 24), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 52) = *(_WORD *)(v6 + 24);
  return v6 + 26;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  long long v6 = *(unsigned __int8 *)(a1 + 4);
  long long v7 = a1 + 5;
  long long v8 = *(void *)(a3 + 8);
  long long v9 = *(void *)(a3 + 16);
  long long v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v8) >> 2);
  if (v6 <= v10)
  {
    if (v6 < v10)
    {
      long long v9 = v8 + 20 * v6;
      *(void *)(a3 + 16) = v9;
    }
  }
  else
  {
    std::vector<bsp::tlv::abm::CapabilitiesItem>::__append((char **)(a3 + 8), v6 - v10);
    long long v8 = *(void *)(a3 + 8);
    long long v9 = *(void *)(a3 + 16);
  }
  while (v8 != v9)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *(_DWORD *)long long v8 = *(_DWORD *)v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)0x10);
    *(_OWORD *)(v8 + 4) = *(_OWORD *)(v7 + 4);
    v7 += 20;
    v8 += 20;
  }
  return v7;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  return a1 + 5;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  return a1 + 5;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  return a1 + 5;
}

uint64_t bsp::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  return a1 + 131;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  return a1 + 131;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 12);
  return a1 + 13;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 12);
  return a1 + 13;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  return a1 + 20;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  return a1 + 14;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 18) = *(_DWORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  return a1 + 14;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 18) = *(_DWORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 15) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 52);
  return a1 + 46;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  return a1 + 5;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  return a1 + 5;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  return a1 + 5;
}

__n128 tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonA5String>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 127) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  long long v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x83);
  long long v6 = *((_OWORD *)v5 + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)v5 + 6);
  *(_OWORD *)(a3 + 112) = v6;
  *(_DWORD *)(a3 + 127) = *(_DWORD *)((char *)v5 + 127);
  long long v7 = *((_OWORD *)v5 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a3 + 48) = v7;
  long long v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
  *(_OWORD *)(a3 + 80) = v8;
  __n128 result = *((__n128 *)v5 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(__n128 *)(a3 + 16) = result;
  *a1 = (tlv *)((char *)v5 + 131);
  return result;
}

void sub_1B8C093F4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonA5String>()
{
  return 134;
}

__n128 tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonA5String>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(v2 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 112) = v8;
  *(__n128 *)(v2 + 80) = result;
  *a1 = v2 + 131;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *bsp::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1 + 6;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  return a1 + 14;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonA5Line>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C094EC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonA5Line>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonA5Line>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

__n128 tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonQ6String>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 127) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  long long v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x83);
  long long v6 = *((_OWORD *)v5 + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)v5 + 6);
  *(_OWORD *)(a3 + 112) = v6;
  *(_DWORD *)(a3 + 127) = *(_DWORD *)((char *)v5 + 127);
  long long v7 = *((_OWORD *)v5 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a3 + 48) = v7;
  long long v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
  *(_OWORD *)(a3 + 80) = v8;
  __n128 result = *((__n128 *)v5 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(__n128 *)(a3 + 16) = result;
  *a1 = (tlv *)((char *)v5 + 131);
  return result;
}

void sub_1B8C0964C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonQ6String>()
{
  return 134;
}

__n128 tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonQ6String>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(v2 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 112) = v8;
  *(__n128 *)(v2 + 80) = result;
  *a1 = v2 + 131;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C09744(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LTESleepManagerStats>(tlv **a1, int a2)
{
  long long v3 = *a1;
  long long v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  unsigned int v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *(unsigned int *)((char *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 5), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 9), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 13);
  return v5 | (unint64_t)(v6 << 32) | 0xAAAAAA00;
}

void sub_1B8C098FC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C098D0);
}

uint64_t tlv::size<bsp::tlv::abm::LTESleepManagerStats>()
{
  return 16;
}

uint64_t *tlv::writeV<bsp::tlv::abm::LTESleepManagerStats>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(_DWORD *)(v2 + 1) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 9) = *(_DWORD *)(a2 + 12);
  char *result = v2 + 13;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _WORD *a3)
{
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  return a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)2);
  a3[5] = *(_WORD *)(a1 + 10);
  return a1 + 12;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  return a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  return a1 + 10;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  return a1 + 10;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)2);
  a3[5] = *(_WORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)2);
  a3[6] = *(_WORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)2);
  a3[7] = *(_WORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)2);
  a3[8] = *(_WORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)2);
  a3[9] = *(_WORD *)(a1 + 18);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)2);
  a3[10] = *(_WORD *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 22), a2, (const unsigned __int8 *)2);
  a3[11] = *(_WORD *)(a1 + 22);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 24), a2, (const unsigned __int8 *)2);
  a3[12] = *(_WORD *)(a1 + 24);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 26), a2, (const unsigned __int8 *)2);
  a3[13] = *(_WORD *)(a1 + 26);
  return a1 + 28;
}

uint64_t tlv::parseV<bsp::tlv::abm::GSMCalibrationStatusItem>(tlv **a1, int a2)
{
  long long v3 = *a1;
  long long v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  int v6 = *((unsigned __int16 *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 4);
  return (v6 << 16) | v5;
}

uint64_t sub_1B8C09A2C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::GSMCalibrationStatusItem>()
{
  return 7;
}

_WORD **tlv::writeV<bsp::tlv::abm::GSMCalibrationStatusItem>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

uint64_t tlv::parseV<bsp::tlv::abm::CDMACalibrationStatusItem>(tlv **a1, int a2)
{
  long long v3 = *a1;
  long long v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C09B64(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::CDMACalibrationStatusItem>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::CDMACalibrationStatusItem>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, void *a3)
{
  *a3 = *(void *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8);
  a3[1] = *(void *)(a1 + 8);
  return a1 + 16;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)8);
  *a3 = *(void *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8);
  a3[1] = *(void *)(a1 + 8);
  return a1 + 16;
}

void *bsp::tlv::abm::writeField(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::LTECalibrationStatusItem>(tlv **a1, int a2)
{
  long long v3 = *a1;
  long long v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)8);
  uint64_t v5 = *(void *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)8);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5;
}

uint64_t sub_1B8C09C98(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::LTECalibrationStatusItem>()
{
  return 19;
}

void **tlv::writeV<bsp::tlv::abm::LTECalibrationStatusItem>(void **result, void *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  char *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BBSecurityStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C09D6C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BBSecurityStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::BBSecurityStatus>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::Accessory>(tlv **a1, int a2)
{
  long long v3 = *a1;
  long long v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  unsigned int v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  uint64_t v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 10), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 12);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1B8C09FBC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C09F88);
}

uint64_t tlv::size<bsp::tlv::abm::Accessory>()
{
  return 15;
}

_WORD **tlv::writeV<bsp::tlv::abm::Accessory>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  v2[5] = a2[5];
  char *result = v2 + 6;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::EraseMask>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C0A09C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::EraseMask>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::EraseMask>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  char *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(uint64_t a1, char *a2, void **a3)
{
  return a2;
}

char *bsp::tlv::abm::writeField(char *a1, void *a2)
{
  uint64_t v2 = a2;
  size_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v5 = v4;
  }
  memcpy(a1, a2, v5);
  uint64_t v6 = *((unsigned __int8 *)v2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = v2[1];
  }
  return &a1[v6];
}

uint64_t bsp::tlv::abm::getFieldSize(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    return *(unsigned __int8 *)(a1 + 23);
  }
  else {
    return *(void *)(a1 + 8);
  }
}

{
  return *(void *)(a1 + 16) - *(void *)(a1 + 8) + 6;
}

void tlv::parseV<bsp::tlv::abm::DumpLogsReason>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  size_t v4 = (char *)(*a1 + a2);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, *a1, v4, a2);
  *a1 = (uint64_t)v4;
}

void sub_1B8C0A1D0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0A1C0);
}

void sub_1B8C0A1E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::DumpLogsReason>(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::DumpLogsReason>(void **a1, void *a2)
{
  uint64_t v2 = a2;
  size_t v4 = (char *)*a1;
  size_t v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v6 = v5;
  }
  uint64_t result = memcpy(*a1, a2, v6);
  uint64_t v8 = *((unsigned __int8 *)v2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = v2[1];
  }
  *a1 = &v4[v8];
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::DumpLogsUserNotification>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0A31C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DumpLogsUserNotification>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DumpLogsUserNotification>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DumpLogsIssueCategory>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0A3DC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DumpLogsIssueCategory>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DumpLogsIssueCategory>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::DumpLogsState>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0A4AC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DumpLogsState>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DumpLogsState>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RFCalibrationStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0A56C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::RFCalibrationStatus>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::RFCalibrationStatus>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::GSMCalibrationStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  int v6 = *((unsigned __int16 *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 4);
  return (v6 << 16) | v5;
}

uint64_t sub_1B8C0A68C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::GSMCalibrationStatus>()
{
  return 7;
}

_WORD **tlv::writeV<bsp::tlv::abm::GSMCalibrationStatus>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  void *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CDMACalibrationStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C0A7C4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::CDMACalibrationStatus>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::CDMACalibrationStatus>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  void *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WCDMACalibrationStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C0A900(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::WCDMACalibrationStatus>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WCDMACalibrationStatus>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  void *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TDSCDMACalibrationStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C0AA3C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::TDSCDMACalibrationStatus>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::TDSCDMACalibrationStatus>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  void *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LTECalibrationStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)8);
  uint64_t v5 = *(void *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)8);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5;
}

uint64_t sub_1B8C0AB70(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::LTECalibrationStatus>()
{
  return 19;
}

void **tlv::writeV<bsp::tlv::abm::LTECalibrationStatus>(void **result, void *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  void *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::C_DRXStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0AC44(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::C_DRXStatus>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::C_DRXStatus>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SleepManagerStats>(tlv **a1, int a2)
{
  long long v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  unsigned int v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *(unsigned int *)((char *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 5), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 9), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 13);
  return v5 | (unint64_t)(v6 << 32) | 0xAAAAAA00;
}

void sub_1B8C0ADFC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0ADD0);
}

uint64_t tlv::size<bsp::tlv::abm::SleepManagerStats>()
{
  return 16;
}

uint64_t *tlv::writeV<bsp::tlv::abm::SleepManagerStats>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(_DWORD *)(v2 + 1) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 9) = *(_DWORD *)(a2 + 12);
  void *result = v2 + 13;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FactoryCalibrationStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0AECC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::FactoryCalibrationStatus>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::FactoryCalibrationStatus>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::Payload>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0AFDC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0AFCCLL);
}

void sub_1B8C0AFEC(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::Payload>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::Payload>(void **a1, uint64_t a2)
{
  size_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PayloadAdditionalError>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0B0F4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PayloadAdditionalError>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::PayloadAdditionalError>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::PayloadResponse>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0B204(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0B1F4);
}

void sub_1B8C0B214(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::PayloadResponse>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::PayloadResponse>(void **a1, uint64_t a2)
{
  size_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

void *tlv::parseV<bsp::tlv::abm::Nonce>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0B36C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0B35CLL);
}

void sub_1B8C0B37C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::Nonce>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::Nonce>(void **a1, uint64_t a2)
{
  size_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

void *tlv::parseV<bsp::tlv::abm::PKHash>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0B4D4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0B4C4);
}

void sub_1B8C0B4E4(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::PKHash>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::PKHash>(void **a1, uint64_t a2)
{
  size_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ChipInformation>(tlv **a1, int a2)
{
  long long v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C0B650(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::ChipInformation>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::ChipInformation>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  void *result = v2 + 2;
  return result;
}

unsigned __int8 *bsp::tlv::abm::parseField(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *((_WORD *)a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 4) = *((_WORD *)a1 + 2);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a3 + 8), a1 + 6, (char *)a2, a2 - (unsigned __int8 *)(a1 + 6));
  return a2;
}

char *bsp::tlv::abm::writeField(_WORD *a1, uint64_t a2)
{
  *a1 = *(_WORD *)a2;
  a1[1] = *(_WORD *)(a2 + 2);
  a1[2] = *(_WORD *)(a2 + 4);
  long long v3 = a1 + 3;
  memcpy(a1 + 3, *(const void **)(a2 + 8), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  return (char *)v3 + *(void *)(a2 + 16) - *(void *)(a2 + 8);
}

{
  _WORD *v3;

  *a1 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
  long long v3 = a1 + 1;
  memcpy(a1 + 1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return (char *)v3 + *(void *)(a2 + 8) - *(void *)a2;
}

{
  _WORD *v3;

  *a1 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
  long long v3 = a1 + 1;
  memcpy(a1 + 1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return (char *)v3 + *(void *)(a2 + 8) - *(void *)a2;
}

void *tlv::parseV<bsp::tlv::abm::ManifestStruct>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = 0xAAAA000000000000;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unsigned int v5 = *a1;
  uint64_t v6 = a2;
  uint64_t v7 = (unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v7, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v7, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *((_WORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v7, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 4) = *((_WORD *)v5 + 2);
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a3 + 8), (char *)v5 + 6, (char *)v7, v6 - 6);
  *a1 = (tlv *)v7;
  return result;
}

void sub_1B8C0B848(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0B834);
}

void sub_1B8C0B858(_Unwind_Exception *exception_object)
{
  size_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::ManifestStruct>(uint64_t a1)
{
  return *(void *)(a1 + 16) - *(void *)(a1 + 8) + 9;
}

void *tlv::writeV<bsp::tlv::abm::ManifestStruct>(_WORD **a1, uint64_t a2)
{
  size_t v4 = *a1;
  _WORD *v4 = *(_WORD *)a2;
  v4[1] = *(_WORD *)(a2 + 2);
  v4[2] = *(_WORD *)(a2 + 4);
  unsigned int v5 = v4 + 3;
  uint64_t result = memcpy(v4 + 3, *(const void **)(a2 + 8), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  *a1 = (_WORD *)((char *)v5 + *(void *)(a2 + 16) - *(void *)(a2 + 8));
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SKeyStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0B97C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SKeyStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SKeyStatus>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AKeyStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0BA3C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AKeyStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::AKeyStatus>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::SKeyHash>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0BB4C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0BB3CLL);
}

void sub_1B8C0BB5C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::SKeyHash>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::SKeyHash>(void **a1, uint64_t a2)
{
  size_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::ManifestStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  unsigned int v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  uint64_t v8 = *((unsigned __int16 *)v3 + 3);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v8 << 48) | (v7 << 32) | ((unint64_t)v6 << 16) | v5;
}

void sub_1B8C0BD58(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0BD30);
}

uint64_t tlv::size<bsp::tlv::abm::ManifestStatus>()
{
  return 11;
}

_WORD **tlv::writeV<bsp::tlv::abm::ManifestStatus>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  void *result = v2 + 4;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, void *a3)
{
  unsigned int v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  unsigned int v6 = *(unsigned __int16 *)v5;
  unsigned int v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unsigned int v6;

  unsigned int v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  unsigned int v6 = *(unsigned __int16 *)v5;
  unsigned int v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

void *tlv::parseV<bsp::tlv::abm::RootManifestData>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v5 = *a1;
  unsigned int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  unsigned int v7 = *(unsigned __int16 *)v5;
  unsigned int v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (char *)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
  return result;
}

void sub_1B8C0BEF4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0BEE0);
}

void sub_1B8C0BF04(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RootManifestData>(void *a1)
{
  return a1[1] - *a1 + 5;
}

void *tlv::writeV<bsp::tlv::abm::RootManifestData>(_WORD **a1, uint64_t a2)
{
  size_t v4 = *a1;
  *v4++ = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
  uint64_t result = memcpy(v4, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = (_WORD *)((char *)v4 + *(void *)(a2 + 8) - *(void *)a2);
  return result;
}

void *tlv::parseV<bsp::tlv::abm::ProvisioningManifestData>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v5 = *a1;
  unsigned int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  unsigned int v7 = *(unsigned __int16 *)v5;
  unsigned int v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (char *)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
  return result;
}

void sub_1B8C0C0E4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0C0D0);
}

void sub_1B8C0C0F4(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::ProvisioningManifestData>(void *a1)
{
  return a1[1] - *a1 + 5;
}

void *tlv::writeV<bsp::tlv::abm::ProvisioningManifestData>(_WORD **a1, uint64_t a2)
{
  size_t v4 = *a1;
  *v4++ = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
  uint64_t result = memcpy(v4, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = (_WORD *)((char *)v4 + *(void *)(a2 + 8) - *(void *)a2);
  return result;
}

void *tlv::parseV<bsp::tlv::abm::ActivationManifestData>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0C25C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0C24CLL);
}

void sub_1B8C0C26C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::ActivationManifestData>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::ActivationManifestData>(void **a1, uint64_t a2)
{
  size_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::ScreenStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0C384(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ScreenStatus>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ScreenStatus>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::SleepStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0C454(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SleepStatus>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::SleepStatus>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::TetheringStatus>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0C524(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TetheringStatus>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::TetheringStatus>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BreadModeType>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0C5E4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BreadModeType>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::BreadModeType>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ButterModeType>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0C6A4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ButterModeType>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ButterModeType>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ArrivalTime>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C0C764(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ArrivalTime>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::ArrivalTime>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DepartureTime>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C0C824(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DepartureTime>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::DepartureTime>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::Coredump>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0C8F4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Coredump>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::Coredump>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PowerSequenceIndex>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0C9B4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PowerSequenceIndex>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::PowerSequenceIndex>(_WORD **result, _WORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BasebandVersion>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C0CA74(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BasebandVersion>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::BasebandVersion>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

tlv *bsp::tlv::abm::parseField(unsigned __int16 *a1, unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  unint64_t v6 = *a1;

  return tlv::parseSequence<bsp::tlv::abm::Accessory>((tlv *)(a1 + 1), a2, a3, v6);
}

tlv *tlv::parseSequence<bsp::tlv::abm::Accessory>(tlv *this, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(char **)a3;
  unsigned int v7 = *(char **)(a3 + 8);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-*(void *)a3] >> 2);
  unint64_t v10 = a4 - v9;
  if (a4 <= v9)
  {
    if (a4 < v9)
    {
      unsigned int v7 = &v8[12 * a4];
      *(void *)(a3 + 8) = v7;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a3 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 2) >= v10)
    {
      bzero(*(void **)(a3 + 8), 12 * ((12 * v10 - 12) / 0xC) + 12);
      uint64_t v19 = &v7[12 * ((12 * v10 - 12) / 0xC) + 12];
      *(void *)(a3 + 8) = v19;
    }
    else
    {
      if (a4 > 0x1555555555555555) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v8) >> 2);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= a4) {
        uint64_t v13 = a4;
      }
      if (v12 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v14 = 0x1555555555555555;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = 12 * v14;
      float64x2x4_t v16 = (char *)operator new(12 * v14);
      long long v17 = &v16[12 * v9];
      unint64_t v18 = &v16[v15];
      bzero(v17, 12 * ((12 * v10 - 12) / 0xC) + 12);
      uint64_t v19 = &v17[12 * ((12 * v10 - 12) / 0xC) + 12];
      if (v7 != v8)
      {
        do
        {
          uint64_t v20 = *(void *)(v7 - 12);
          v7 -= 12;
          int v21 = *((_DWORD *)v7 + 2);
          *(void *)(v17 - 12) = v20;
          v17 -= 12;
          *((_DWORD *)v17 + 2) = v21;
        }
        while (v7 != v8);
        unsigned int v7 = v8;
      }
      *(void *)a3 = v17;
      *(void *)(a3 + 8) = v19;
      *(void *)(a3 + 16) = v18;
      if (v7)
      {
        operator delete(v7);
        uint64_t v19 = *(char **)(a3 + 8);
      }
    }
    uint64_t v8 = *(char **)a3;
    unsigned int v7 = v19;
  }
  while (v8 != v7)
  {
    tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)2);
    *(_WORD *)uint64_t v8 = *(_WORD *)this;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 2), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 1) = *((_WORD *)this + 1);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 4), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 2) = *((_WORD *)this + 2);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 6), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 3) = *((_WORD *)this + 3);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 8), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 4) = *((_WORD *)this + 4);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 10), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 5) = *((_WORD *)this + 5);
    this = (tlv *)((char *)this + 12);
    v8 += 12;
  }
  return this;
}

_WORD *bsp::tlv::abm::writeField(_WORD *a1, _DWORD *a2)
{
  *a1 = -21845 * ((a2[2] - *a2) >> 2);
  uint64_t result = a1 + 1;
  long long v3 = *(_WORD **)a2;
  size_t v4 = (_WORD *)*((void *)a2 + 1);
  if (*(_WORD **)a2 != v4)
  {
    do
    {
      _WORD *result = *v3;
      result[1] = v3[1];
      result[2] = v3[2];
      result[3] = v3[3];
      result[4] = v3[4];
      result[5] = v3[5];
      result += 6;
      v3 += 6;
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t bsp::tlv::abm::getFieldSize(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 2;
  }
  else {
    return 12 * ((v1 - *a1 - 12) / 0xCuLL) + 14;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 0;
  }
  else {
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFFCLL;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 6;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 6;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 6;
  }
}

{
  uint64_t v1;

  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  else {
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 6;
  }
}

tlv *tlv::parseV<bsp::tlv::abm::AccessoryInfoList>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v5 = *a1;
  unint64_t v6 = (unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  uint64_t result = tlv::parseSequence<bsp::tlv::abm::Accessory>((tlv *)((char *)v5 + 2), v6, (uint64_t)a3, *(unsigned __int16 *)v5);
  *a1 = result;
  return result;
}

void sub_1B8C0CE68(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0CE58);
}

void sub_1B8C0CE78(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::AccessoryInfoList>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 5;
  }
  else {
    return 12 * ((v1 - *a1 - 12) / 0xCuLL) + 17;
  }
}

_WORD **tlv::writeV<bsp::tlv::abm::AccessoryInfoList>(_WORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = -21845 * ((a2[2] - *a2) >> 2);
  long long v3 = v2 + 1;
  size_t v4 = *(_WORD **)a2;
  unsigned int v5 = (_WORD *)*((void *)a2 + 1);
  if (*(_WORD **)a2 != v5)
  {
    do
    {
      *long long v3 = *v4;
      v3[1] = v4[1];
      v3[2] = v4[2];
      v3[3] = v4[3];
      v3[4] = v4[4];
      void v3[5] = v4[5];
      v3 += 6;
      v4 += 6;
    }
    while (v4 != v5);
  }
  tlv *result = v3;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::IsCharging>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0CFE0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::IsCharging>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::IsCharging>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ChargeLevelPercentage>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0D0A0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ChargeLevelPercentage>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ChargeLevelPercentage>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SPMIBusMask>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C0D160(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SPMIBusMask>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::SPMIBusMask>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

char *bsp::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *bsp::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t bsp::getFieldSize()
{
  return 4;
}

__n128 tlv::parseV<bsp::tlv::abm::CapabilitiesItem>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  unsigned int v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)0x10);
  __n128 result = *(__n128 *)((char *)v5 + 4);
  *(__n128 *)(a3 + 4) = result;
  *a1 = (tlv *)((char *)v5 + 20);
  return result;
}

void sub_1B8C0D2E0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CapabilitiesItem>()
{
  return 23;
}

__n128 tlv::writeV<bsp::tlv::abm::CapabilitiesItem>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 4);
  *(__n128 *)(v2 + 4) = result;
  *a1 = v2 + 20;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxAntennaConfig>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0D3BC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxAntennaConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TxAntennaConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::ARTD>(tlv **a1, int a2)
{
  long long v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  unsigned int v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  uint64_t v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 10);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1B8C0D5BC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0D58CLL);
}

uint64_t tlv::size<bsp::tlv::abm::ARTD>()
{
  return 13;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTD>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  tlv *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDV2>(uint64_t *a1, int a2)
{
  v3[0] = 0;
  v3[1] = 2863267840;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v3);
  return v3[0];
}

uint64_t sub_1B8C0D7F8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDV2>()
{
  return 17;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARTDV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(unsigned char *)(v2 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(v2 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(v2 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v2 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(v2 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(v2 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(v2 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(v2 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  tlv *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARFCNLock>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = -1431699456;
  *(void *)(a3 + 4) = 0;
  *(void *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  unsigned int v5 = *a1;
  unsigned int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 6), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)((char *)v5 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 10), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v5 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)((char *)v5 + 14);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v5 + 18);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1B8C0DA70(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::ARFCNLock>()
{
  return 25;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARFCNLock>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_WORD *)uint64_t v2 = *(_WORD *)a2;
  *(_DWORD *)(v2 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 18) = *(_DWORD *)(a2 + 20);
  tlv *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CarrierAgreggation>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  uint64_t v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1B8C0DC18(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0DBF4);
}

uint64_t tlv::size<bsp::tlv::abm::CarrierAgreggation>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::CarrierAgreggation>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  tlv *result = v2 + 3;
  return result;
}

unsigned char *bsp::tlv::abm::writeField(unsigned char *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 3;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  size_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      tlv *result = *(unsigned char *)v3;
      *(_DWORD *)(result + 1) = *(_DWORD *)(v3 + 4);
      result += 5;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 3;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  size_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      tlv *result = *(unsigned char *)v3;
      *(_DWORD *)(result + 1) = *(_DWORD *)(v3 + 4);
      result += 5;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 3;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  size_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      tlv *result = *(unsigned char *)v3;
      *(_DWORD *)(result + 1) = *(_DWORD *)(v3 + 4);
      result += 5;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 3;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(void *)a2;
  size_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      tlv *result = *(unsigned char *)v3;
      *(_DWORD *)(result + 1) = *(_DWORD *)(v3 + 4);
      result += 5;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeReason>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0DCE4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeReason>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::WakeReason>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ChannelID>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0DDA4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ChannelID>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ChannelID>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeBufferLength>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C0DE64(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeBufferLength>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WakeBufferLength>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::WakeBuffer>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0DF74(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0DF64);
}

void sub_1B8C0DF84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::WakeBuffer>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::WakeBuffer>(void **a1, uint64_t a2)
{
  size_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t bsp::tlv::abm::parseField(bsp::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Size *a4)
{
  *(_WORD *)a3 = *(_WORD *)this;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::writeField(bsp::tlv::abm *this, unsigned __int8 *a2, const Size *a3)
{
  *(_WORD *)this = *(_WORD *)a2;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::getFieldSize(bsp::tlv::abm *this, const Size *a2)
{
  return 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::Size>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0E08C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Size>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::Size>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::LogData>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0E19C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0E18CLL);
}

void sub_1B8C0E1AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::LogData>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::LogData>(void **a1, uint64_t a2)
{
  size_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::Enable>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0E2C4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Enable>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::Enable>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::Port>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0E384(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Port>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::Port>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::PayloadRFFE>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0E494(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0E484);
}

void sub_1B8C0E4A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::PayloadRFFE>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::PayloadRFFE>(void **a1, uint64_t a2)
{
  size_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RxDiversityConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  uint64_t v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1B8C0E658(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0E634);
}

uint64_t tlv::size<bsp::tlv::abm::RxDiversityConfig>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::RxDiversityConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  void *result = v2 + 3;
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::ARTDConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  unsigned int v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  uint64_t v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 10);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1B8C0E864(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0E834);
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfig>()
{
  return 13;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTDConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  void *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::UARFCNLockConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0E940(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::UARFCNLockConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::UARFCNLockConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::EARFCNLockConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0EA00(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::EARFCNLockConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::EARFCNLockConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CarrierAgreggationConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  uint64_t v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1B8C0EB6C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0EB48);
}

uint64_t tlv::size<bsp::tlv::abm::CarrierAgreggationConfig>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::CarrierAgreggationConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  void *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RxDiversityConfigV2>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  size_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  uint64_t v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1B8C0ECE4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0ECC0);
}

uint64_t tlv::size<bsp::tlv::abm::RxDiversityConfigV2>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::RxDiversityConfigV2>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  void *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDConfigV2>(uint64_t *a1, int a2)
{
  v3[0] = 0;
  v3[1] = 2863267840;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v3);
  return v3[0];
}

uint64_t sub_1B8C0EDE0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfigV2>()
{
  return 17;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARTDConfigV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(unsigned char *)(v2 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(v2 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(v2 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v2 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(v2 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(v2 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(v2 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(v2 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  void *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARFCNLockConfig>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = -1431699456;
  *(void *)(a3 + 4) = 0;
  *(void *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  unsigned int v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 6), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)((char *)v5 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 10), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v5 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)((char *)v5 + 14);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v5 + 18);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1B8C0F058(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::ARFCNLockConfig>()
{
  return 25;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARFCNLockConfig>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_WORD *)uint64_t v2 = *(_WORD *)a2;
  *(_DWORD *)(v2 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 18) = *(_DWORD *)(a2 + 20);
  void *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SleepConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0F154(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SleepConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SleepConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FieldTestConfig>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (_WORD *)a3);
  *a1 = result;
  return result;
}

void sub_1B8C0F3C8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::FieldTestConfig>()
{
  return 31;
}

_WORD **tlv::writeV<bsp::tlv::abm::FieldTestConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  v2[12] = a2[12];
  v2[13] = a2[13];
  void *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FieldTestConfigV2>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a3 + 4) = v4;
  *(_OWORD *)(a3 + 20) = v4;
  *(_OWORD *)(a3 + 36) = v4;
  *(_DWORD *)(a3 + 52) = -1431655766;
  *(_DWORD *)a3 = 0;
  *(_WORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  *(_WORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 28) = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  uint64_t v5 = *a1;
  *(void *)(a3 + 46) = 0;
  uint64_t result = bsp::tlv::abm::parseField(v5, (const unsigned __int8 *)(v5 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1B8C0F6E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::FieldTestConfigV2>()
{
  return 49;
}

uint64_t *tlv::writeV<bsp::tlv::abm::FieldTestConfigV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_WORD *)uint64_t v2 = *(_WORD *)a2;
  *(_WORD *)(v2 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(v2 + 4) = *(_WORD *)(a2 + 4);
  *(unsigned char *)(v2 + 6) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(v2 + 7) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(v2 + 8) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(v2 + 9) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(v2 + 10) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(v2 + 11) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(v2 + 12) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(v2 + 13) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(v2 + 14) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v2 + 15) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a2 + 24);
  *(_WORD *)(v2 + 22) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(v2 + 28) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v2 + 36) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(v2 + 44) = *(_WORD *)(a2 + 52);
  void *result = v2 + 46;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  a3[1] = *(unsigned char *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
  a3[2] = *(unsigned char *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  a3[3] = *(unsigned char *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  a3[4] = *(unsigned char *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  a3[5] = *(unsigned char *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1);
  a3[6] = *(unsigned char *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)1);
  a3[7] = *(unsigned char *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  a3[8] = *(unsigned char *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)1);
  a3[9] = *(unsigned char *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)1);
  a3[10] = *(unsigned char *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 11), a2, (const unsigned __int8 *)1);
  a3[11] = *(unsigned char *)(a1 + 11);
  return a1 + 12;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  a3[1] = *(unsigned char *)(a1 + 1);
  return a1 + 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::ReadStatus>(uint64_t *a1, int a2)
{
  int v4 = 0;
  uint64_t v3 = 0;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), &v3);
  return v3;
}

uint64_t sub_1B8C0F9E0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ReadStatus>()
{
  return 15;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ReadStatus>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  void *result = v2 + 12;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::MeasureType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0FB04(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::MeasureType>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::MeasureType>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TestType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0FBC4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TestType>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::TestType>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TriggerError>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C0FC84(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TriggerError>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::TriggerError>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TestTimeout>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0FD44(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TestTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TestTimeout>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::RFSelfTestNonce>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C0FE54(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C0FE44);
}

void sub_1B8C0FE64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RFSelfTestNonce>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::RFSelfTestNonce>(void **a1, uint64_t a2)
{
  int v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SecurityStatus>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C0FF6C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SecurityStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SecurityStatus>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::RFSelfTestTicket>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C1007C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C1006CLL);
}

void sub_1B8C1008C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RFSelfTestTicket>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::RFSelfTestTicket>(void **a1, uint64_t a2)
{
  int v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeChannel>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C10194(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeChannel>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WakeChannel>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CommandCode>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C10254(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CommandCode>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::CommandCode>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RegionIndex>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C10314(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::RegionIndex>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::RegionIndex>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BlockIndex>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C103D4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BlockIndex>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::BlockIndex>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t bsp::tlv::abm::writeField(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  uint64_t result = a1 + 5;
  *(unsigned char *)(a1 + 4) = -51 * ((a2[4] - a2[2]) >> 2);
  uint64_t v4 = *((void *)a2 + 1);
  for (uint64_t i = *((void *)a2 + 2); v4 != i; v4 += 20)
  {
    *(_DWORD *)uint64_t result = *(_DWORD *)v4;
    *(_OWORD *)(result + 4) = *(_OWORD *)(v4 + 4);
    result += 20;
  }
  return result;
}

unint64_t bsp::tlv::abm::getFieldSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v1 == v2) {
    return 5;
  }
  else {
    return 20 * ((v2 - v1 - 20) / 0x14uLL) + 25;
  }
}

{
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8)) {
    return 4;
  }
  else {
    return ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
}

uint64_t tlv::parseV<bsp::tlv::abm::Capabilities>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAA00000000;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  uint64_t result = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)a3);
  *a1 = result;
  return result;
}

void sub_1B8C105E4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C105D4);
}

void sub_1B8C105F4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::Capabilities>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v1 == v2) {
    return 8;
  }
  else {
    return 20 * ((v2 - v1 - 20) / 0x14uLL) + 28;
  }
}

uint64_t *tlv::writeV<bsp::tlv::abm::Capabilities>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *a2;
  uint64_t v3 = v2 + 5;
  *(unsigned char *)(v2 + 4) = -51 * ((a2[4] - a2[2]) >> 2);
  uint64_t v4 = *((void *)a2 + 1);
  for (uint64_t i = *((void *)a2 + 2); v4 != i; v4 += 20)
  {
    *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
    *(_OWORD *)(v3 + 4) = *(_OWORD *)(v4 + 4);
    v3 += 20;
  }
  void *result = v3;
  return result;
}

void std::vector<bsp::tlv::abm::CapabilitiesItem>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v12 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x666666666666666) {
      unint64_t v10 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xCCCCCCCCCCCCCCCLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(20 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[20 * v7];
    unint64_t v14 = &v11[20 * v10];
    size_t v15 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    bzero(v13, v15);
    float64x2x4_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v13 - 20) = v17;
        v13 -= 20;
        v5 -= 20;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

char *wds::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *wds::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t wds::tlv::abm::getFieldSize()
{
  return 2;
}

{
  return 1;
}

{
  return 9;
}

{
  return 9;
}

uint64_t tlv::parseV<wds::tlv::abm::Port>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C108E4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wds::tlv::abm::Port>()
{
  return 5;
}

_WORD **tlv::writeV<wds::tlv::abm::Port>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *wds::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

unsigned char *wds::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<wds::tlv::abm::MuxId>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C109A4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wds::tlv::abm::MuxId>()
{
  return 4;
}

unsigned char **tlv::writeV<wds::tlv::abm::MuxId>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t wds::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  uint64_t result = a1 + 9;
  a3[2] = *(unsigned __int8 *)(a1 + 8);
  return result;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  uint64_t result = a1 + 9;
  a3[2] = *(unsigned __int8 *)(a1 + 8);
  return result;
}

uint64_t wds::tlv::abm::writeField(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(unsigned char *)(a1 + 8) = a2[2];
  return a1 + 9;
}

{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(unsigned char *)(a1 + 8) = a2[2];
  return a1 + 9;
}

unint64_t tlv::parseV<wds::tlv::abm::LinkStat>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)1);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B8C10B0C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C10AF0);
}

uint64_t tlv::size<wds::tlv::abm::LinkStat>()
{
  return 12;
}

uint64_t *tlv::writeV<wds::tlv::abm::LinkStat>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *a2;
  *(_DWORD *)(v2 + 4) = a2[1];
  *(unsigned char *)(v2 + 8) = a2[2];
  void *result = v2 + 9;
  return result;
}

unint64_t tlv::parseV<wds::tlv::abm::LinkStatCumulative>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)1);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B8C10C80(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C10C64);
}

uint64_t tlv::size<wds::tlv::abm::LinkStatCumulative>()
{
  return 12;
}

uint64_t *tlv::writeV<wds::tlv::abm::LinkStatCumulative>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *a2;
  *(_DWORD *)(v2 + 4) = a2[1];
  *(unsigned char *)(v2 + 8) = a2[2];
  void *result = v2 + 9;
  return result;
}

tlv *coex::parseField(tlv *a1, const unsigned __int8 *a2, void *a3)
{
  unsigned int v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    uint64_t v6 = *(void *)v5;
    unsigned int v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

void *coex::writeField(void *a1, void *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

char *awd::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *awd::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t awd::getFieldSize()
{
  return 4;
}

uint64_t awd::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(_WORD *)(a1 + 14) = *(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 16);
  uint64_t v3 = a1 + 16;
  memcpy((void *)(a1 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  return v3 + *(void *)(a2 + 24) - *(void *)(a2 + 16);
}

{
  uint64_t v3;

  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  uint64_t v3 = a1 + 4;
  memcpy((void *)(a1 + 4), *(const void **)(a2 + 8), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  return v3 + *(void *)(a2 + 16) - *(void *)(a2 + 8);
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 5) = *(void *)(a2 + 8);
  return a1 + 13;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  return a1 + 6;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 1) = *(void *)(a2 + 8);
  return a1 + 9;
}

{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a1 + 26) = *(_DWORD *)(a2 + 40) - *(_DWORD *)(a2 + 32);
  uint64_t v3 = a1 + 28;
  memcpy((void *)(a1 + 28), *(const void **)(a2 + 32), *(void *)(a2 + 40) - *(void *)(a2 + 32));
  return v3 + *(void *)(a2 + 40) - *(void *)(a2 + 32);
}

{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 24);
  uint64_t v3 = a1 + 20;
  memcpy((void *)(a1 + 20), *(const void **)(a2 + 24), *(void *)(a2 + 32) - *(void *)(a2 + 24));
  return v3 + *(void *)(a2 + 32) - *(void *)(a2 + 24);
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1 + 18;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 20) = *(void *)(a2 + 24);
  return a1 + 28;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1 + 24;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 23);
  return a1 + 24;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  return a1 + 20;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1 + 9;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1 + 9;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  return a1 + 5;
}

uint64_t awd::tlv::abm::getFieldSize(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16) + 16;
}

{
  return *(void *)(a1 + 16) - *(void *)(a1 + 8) + 4;
}

{
  return *(void *)(a1 + 40) - *(void *)(a1 + 32) + 28;
}

{
  return *(void *)(a1 + 32) - *(void *)(a1 + 24) + 20;
}

char *tlv::parseV<awd::tlv::abm::AddConfig>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  *a3 = 0;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)((char *)a3 + 6) = 0;
  uint64_t result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8C10F3C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C10F2CLL);
}

void sub_1B8C10F4C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<awd::tlv::abm::AddConfig>(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16) + 19;
}

void *tlv::writeV<awd::tlv::abm::AddConfig>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(v4 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(v4 + 13) = *(unsigned char *)(a2 + 13);
  *(_WORD *)(v4 + 14) = *(_WORD *)(a2 + 24) - *(_DWORD *)(a2 + 16);
  uint64_t v5 = v4 + 16;
  uint64_t result = memcpy((void *)(v4 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  *a1 = v5 + *(void *)(a2 + 24) - *(void *)(a2 + 16);
  return result;
}

uint64_t awd::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  return a1 + 16;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  return a1 + 12;
}

_DWORD *awd::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

uint64_t awd::tlv::abm::getFieldSize()
{
  return 8;
}

{
  return 16;
}

{
  return 12;
}

{
  return 13;
}

{
  return 6;
}

{
  return 9;
}

{
  return 2;
}

{
  return 22;
}

{
  return 18;
}

{
  return 28;
}

{
  return 24;
}

{
  return 24;
}

{
  return 20;
}

{
  return 9;
}

{
  return 9;
}

{
  return 5;
}

uint64_t tlv::parseV<awd::tlv::abm::DeleteConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B8C110F4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<awd::tlv::abm::DeleteConfig>()
{
  return 11;
}

_DWORD **tlv::writeV<awd::tlv::abm::DeleteConfig>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  void *result = v2 + 2;
  return result;
}

void *tlv::parseV<awd::tlv::abm::RequestParams>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0xAAAAAAAAAAAA0000;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unsigned int v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 1) = *((unsigned char *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)2);
  unint64_t v7 = *((unsigned __int16 *)v5 + 1);
  unsigned int v5 = (tlv *)((char *)v5 + 4);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a3 + 8), (char *)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
  return result;
}

void sub_1B8C11320(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C1130CLL);
}

void sub_1B8C11330(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<awd::tlv::abm::RequestParams>(uint64_t a1)
{
  return *(void *)(a1 + 16) - *(void *)(a1 + 8) + 7;
}

void *tlv::writeV<awd::tlv::abm::RequestParams>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(unsigned char *)uint64_t v4 = *(unsigned char *)a2;
  *(unsigned char *)(v4 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(v4 + 2) = *(_WORD *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 4;
  uint64_t result = memcpy((void *)(v4 + 4), *(const void **)(a2 + 8), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  *a1 = v5 + *(void *)(a2 + 16) - *(void *)(a2 + 8);
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::MetricsExt>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 12), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B8C11548(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C11528);
}

uint64_t tlv::size<awd::tlv::abm::MetricsExt>()
{
  return 19;
}

_DWORD **tlv::writeV<awd::tlv::abm::MetricsExt>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  void *result = v2 + 4;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::Metrics>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 12);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B8C116BC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C116A0);
}

uint64_t tlv::size<awd::tlv::abm::Metrics>()
{
  return 15;
}

_DWORD **tlv::writeV<awd::tlv::abm::Metrics>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  void *result = v2 + 3;
  return result;
}

uint64_t awd::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)8);
  *(void *)(a3 + 8) = *(void *)(a1 + 5);
  return a1 + 13;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 4) != 0;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  uint64_t result = a1 + 6;
  *(unsigned char *)(a3 + 5) = *(unsigned char *)(a1 + 5) != 0;
  return result;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)8);
  *(void *)(a3 + 8) = *(void *)(a1 + 1);
  return a1 + 9;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 20) = *(_WORD *)(a1 + 20);
  return a1 + 22;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 16) = *(_WORD *)(a1 + 16);
  return a1 + 18;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)8);
  *(void *)(a3 + 24) = *(void *)(a1 + 20);
  return a1 + 28;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)8);
  *(void *)(a3 + 16) = *(void *)(a1 + 16);
  return a1 + 24;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 20) = *(unsigned char *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 21), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 21) = *(unsigned char *)(a1 + 21);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 22), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 22) = *(unsigned char *)(a1 + 22);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 23), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 23) = *(unsigned char *)(a1 + 23);
  return a1 + 24;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 16) = *(unsigned char *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 17), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 17) = *(unsigned char *)(a1 + 17);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 18) = *(unsigned char *)(a1 + 18);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 19), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 19) = *(unsigned char *)(a1 + 19);
  return a1 + 20;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a1 + 8);
  return a1 + 9;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a1 + 8);
  return a1 + 9;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 4);
  return a1 + 5;
}

unint64_t tlv::parseV<awd::tlv::abm::MetricIndicationExt>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)1);
  uint64_t v6 = *((unsigned __int8 *)v3 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 5), v4, (const unsigned __int8 *)8);
  *a1 = (tlv *)((char *)v3 + 13);
  return v5 | (unint64_t)(v6 << 32) | 0xAAAAAA0000000000;
}

void sub_1B8C11838(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C11810);
}

uint64_t tlv::size<awd::tlv::abm::MetricIndicationExt>()
{
  return 16;
}

uint64_t *tlv::writeV<awd::tlv::abm::MetricIndicationExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(v2 + 5) = *(void *)(a2 + 8);
  void *result = v2 + 13;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::PIILocationExt>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)1);
  uint64_t v6 = *((unsigned char *)v3 + 4) != 0;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 5), v4, (const unsigned __int8 *)1);
  int v7 = *((unsigned __int8 *)v3 + 5);
  *a1 = (tlv *)((char *)v3 + 6);
  BOOL v8 = v7 == 0;
  unint64_t v9 = 0xAAAA010000000000;
  if (v8) {
    unint64_t v9 = 0xAAAA000000000000;
  }
  return v9 | (v6 << 32) | v5;
}

void sub_1B8C119DC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C119BCLL);
}

uint64_t tlv::size<awd::tlv::abm::PIILocationExt>()
{
  return 9;
}

uint64_t *tlv::writeV<awd::tlv::abm::PIILocationExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v2 + 5) = *(unsigned char *)(a2 + 5);
  void *result = v2 + 6;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::MetricIndication>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  unsigned int v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)8);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | 0xAAAAAAAAAAAAAA00;
}

void sub_1B8C11B10(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C11AF0);
}

uint64_t tlv::size<awd::tlv::abm::MetricIndication>()
{
  return 12;
}

uint64_t *tlv::writeV<awd::tlv::abm::MetricIndication>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(void *)(v2 + 1) = *(void *)(a2 + 8);
  void *result = v2 + 9;
  return result;
}

uint64_t awd::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, BOOL *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1 != 0;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  uint64_t result = a1 + 2;
  a3[1] = *(unsigned char *)(a1 + 1) != 0;
  return result;
}

unsigned char *awd::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t tlv::parseV<awd::tlv::abm::PIILocation>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  BOOL v5 = *(unsigned char *)v3 != 0;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)1);
  int v6 = *((unsigned char *)v3 + 1) != 0;
  *a1 = (tlv *)((char *)v3 + 2);
  return v5 | (v6 << 8);
}

uint64_t sub_1B8C11C54(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<awd::tlv::abm::PIILocation>()
{
  return 5;
}

unsigned char **tlv::writeV<awd::tlv::abm::PIILocation>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  void *result = v2 + 2;
  return result;
}

char *tlv::parseV<awd::tlv::abm::MetricDataExt>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  a3[4] = 0;
  a3[5] = 0;
  a3[6] = 0;
  a3[2] = 0;
  a3[3] = 0xAAAAAAAAAAAAAAAALL;
  *a3 = 0;
  a3[1] = 0;
  *((_WORD *)a3 + 12) = 0;
  uint64_t result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8C11D98(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C11D88);
}

void sub_1B8C11DA8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<awd::tlv::abm::MetricDataExt>(uint64_t a1)
{
  return *(void *)(a1 + 40) - *(void *)(a1 + 32) + 31;
}

void *tlv::writeV<awd::tlv::abm::MetricDataExt>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(v4 + 24) = *(_WORD *)(a2 + 24);
  *(_WORD *)(v4 + 26) = *(_WORD *)(a2 + 40) - *(_DWORD *)(a2 + 32);
  uint64_t v5 = v4 + 28;
  uint64_t result = memcpy((void *)(v4 + 28), *(const void **)(a2 + 32), *(void *)(a2 + 40) - *(void *)(a2 + 32));
  *a1 = v5 + *(void *)(a2 + 40) - *(void *)(a2 + 32);
  return result;
}

char *tlv::parseV<awd::tlv::abm::MetricData>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  a3[1] = 0;
  a3[2] = 0xAAAAAAAAAAAAAAAALL;
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  *a3 = 0;
  *((_WORD *)a3 + 8) = 0;
  uint64_t result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B8C12044(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C12034);
}

void sub_1B8C12054(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<awd::tlv::abm::MetricData>(uint64_t a1)
{
  return *(void *)(a1 + 32) - *(void *)(a1 + 24) + 23;
}

void *tlv::writeV<awd::tlv::abm::MetricData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(v4 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(v4 + 18) = *(_WORD *)(a2 + 32) - *(_DWORD *)(a2 + 24);
  uint64_t v5 = v4 + 20;
  uint64_t result = memcpy((void *)(v4 + 20), *(const void **)(a2 + 24), *(void *)(a2 + 32) - *(void *)(a2 + 24));
  *a1 = v5 + *(void *)(a2 + 32) - *(void *)(a2 + 24);
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::MetricDataEndExt>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 20) = -1431655766;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 14) = 0;
  uint64_t v5 = *a1;
  int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 20), v6, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 20) = *((_WORD *)v5 + 10);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1B8C122E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::MetricDataEndExt>()
{
  return 25;
}

uint64_t *tlv::writeV<awd::tlv::abm::MetricDataEndExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a2 + 20);
  void *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::MetricDataEnd>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 16) = -1431655766;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 16) = *((_WORD *)v5 + 8);
  *a1 = (tlv *)((char *)v5 + 18);
  return result;
}

void sub_1B8C124F8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::MetricDataEnd>()
{
  return 21;
}

uint64_t *tlv::writeV<awd::tlv::abm::MetricDataEnd>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(v2 + 16) = *(_WORD *)(a2 + 16);
  void *result = v2 + 18;
  return result;
}

uint64_t tlv::size<awd::tlv::abm::SubmitTriggerExt>()
{
  return 31;
}

uint64_t *tlv::writeV<awd::tlv::abm::SubmitTriggerExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(v2 + 20) = *(void *)(a2 + 24);
  void *result = v2 + 28;
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::SubmitTrigger>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)8);
  *(void *)(a3 + 16) = *((void *)v5 + 2);
  *a1 = (tlv *)((char *)v5 + 24);
  return result;
}

void sub_1B8C1283C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::SubmitTrigger>()
{
  return 27;
}

uint64_t *tlv::writeV<awd::tlv::abm::SubmitTrigger>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(v2 + 16) = *(void *)(a2 + 16);
  void *result = v2 + 24;
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::PIILocationUsedExt>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)a3);
  *a1 = result;
  return result;
}

void sub_1B8C12A40(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::PIILocationUsedExt>()
{
  return 27;
}

uint64_t *tlv::writeV<awd::tlv::abm::PIILocationUsedExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(v2 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(v2 + 21) = *(unsigned char *)(a2 + 21);
  *(unsigned char *)(v2 + 22) = *(unsigned char *)(a2 + 22);
  *(unsigned char *)(v2 + 23) = *(unsigned char *)(a2 + 23);
  void *result = v2 + 24;
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::PIILocationUsed>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  uint64_t result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1B8C12C40(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::PIILocationUsed>()
{
  return 23;
}

uint64_t *tlv::writeV<awd::tlv::abm::PIILocationUsed>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(v2 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v2 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(v2 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(v2 + 19) = *(unsigned char *)(a2 + 19);
  void *result = v2 + 20;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::AddConfigResult>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)1);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B8C12DFC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C12DDCLL);
}

uint64_t tlv::size<awd::tlv::abm::AddConfigResult>()
{
  return 12;
}

uint64_t *tlv::writeV<awd::tlv::abm::AddConfigResult>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(v2 + 8) = *(unsigned char *)(a2 + 8);
  void *result = v2 + 9;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::DeleteConfigResult>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)1);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B8C12F7C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C12F5CLL);
}

uint64_t tlv::size<awd::tlv::abm::DeleteConfigResult>()
{
  return 12;
}

uint64_t *tlv::writeV<awd::tlv::abm::DeleteConfigResult>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(v2 + 8) = *(unsigned char *)(a2 + 8);
  void *result = v2 + 9;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::ConfigurationSuccess>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)1);
  uint64_t v6 = *((unsigned __int8 *)v3 + 4);
  *a1 = (tlv *)((char *)v3 + 5);
  return (v6 << 32) | 0xAAAAAA0000000000 | v5;
}

void sub_1B8C130BC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C130A0);
}

uint64_t tlv::size<awd::tlv::abm::ConfigurationSuccess>()
{
  return 8;
}

uint64_t *tlv::writeV<awd::tlv::abm::ConfigurationSuccess>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 4);
  void *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SvcType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C1317C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SvcType>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::SvcType>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LimitTimeout>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C1323C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LimitTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::LimitTimeout>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

const unsigned __int8 *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  int v7 = *(_DWORD *)a1;
  uint64_t v6 = (tlv *)((char *)a1 + 4);
  *(_DWORD *)a3 = v7;
  tlv::throwIfNotAligned(v6, a2, (const unsigned __int8 *)4);
  BOOL v8 = *(char **)(a3 + 8);
  unint64_t v9 = (unint64_t)(a2 - (const unsigned __int8 *)v6) >> 2;
  unint64_t v10 = (uint64_t)(*(void *)(a3 + 16) - (void)v8) >> 2;
  if (v9 <= v10)
  {
    if (v9 < v10) {
      *(void *)(a3 + 16) = &v8[4 * v9];
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<unsigned int> *)(a3 + 8), v9 - v10);
    BOOL v8 = *(char **)(a3 + 8);
  }
  memcpy(v8, v6, a2 - (const unsigned __int8 *)v6);
  return a2;
}

_DWORD *bsp::tlv::abm::writeField(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  uint64_t result = a1 + 1;
  unsigned int v5 = *(char **)(a2 + 8);
  uint64_t v4 = *(char **)(a2 + 16);
  if (v5 != v4)
  {
    unint64_t v6 = v4 - v5 - 4;
    if (v6 < 0x1C) {
      goto LABEL_10;
    }
    if ((unint64_t)((char *)a1 - v5 + 4) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v7 = (v6 >> 2) + 1;
    uint64_t v8 = 4 * (v7 & 0x7FFFFFFFFFFFFFF8);
    uint64_t result = (_DWORD *)((char *)result + v8);
    unint64_t v9 = &v5[v8];
    unint64_t v10 = (long long *)(v5 + 16);
    uint64_t v11 = a1 + 5;
    uint64_t v12 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *uint64_t v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    unsigned int v5 = v9;
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_10:
      do
      {
        int v14 = *(_DWORD *)v5;
        v5 += 4;
        *result++ = v14;
      }
      while (v5 != v4);
    }
  }
  return result;
}

void *tlv::parseV<bsp::tlv::abm::TxPwrConfigTlv>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  unsigned int v5 = (void **)(a3 + 8);
  *(void *)a3 = 0xAAAAAAAA00000000;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unint64_t v6 = *a1;
  uint64_t v7 = a2;
  uint64_t v8 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v8, (const unsigned __int8 *)4);
  int v10 = *(_DWORD *)v6;
  unint64_t v9 = (tlv *)((char *)v6 + 4);
  *(_DWORD *)a3 = v10;
  tlv::throwIfNotAligned(v9, v8, (const unsigned __int8 *)4);
  size_t v11 = v7 - 4;
  if (v11 >= 4)
  {
    std::vector<int>::__append((std::vector<unsigned int> *)(a3 + 8), v11 >> 2);
    uint64_t v12 = *v5;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t result = memcpy(v12, v9, v11);
  *a1 = (tlv *)v8;
  return result;
}

void sub_1B8C1347C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C13468);
}

void sub_1B8C1348C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::TxPwrConfigTlv>(uint64_t a1)
{
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8)) {
    return 7;
  }
  else {
    return ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) & 0xFFFFFFFFFFFFFFFCLL) + 7;
  }
}

void *tlv::writeV<bsp::tlv::abm::TxPwrConfigTlv>(void *result, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)*result;
  uint64_t v3 = (_DWORD *)*result;
  *uint64_t v3 = *(_DWORD *)a2;
  uint64_t v4 = v3 + 1;
  unint64_t v6 = *(char **)(a2 + 8);
  unsigned int v5 = *(char **)(a2 + 16);
  if (v6 != v5)
  {
    unint64_t v7 = v5 - v6 - 4;
    if (v7 < 0x1C) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v2 - v6 + 4) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v8 = (v7 >> 2) + 1;
    uint64_t v9 = 4 * (v8 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v4 = (_DWORD *)((char *)v4 + v9);
    int v10 = &v6[v9];
    size_t v11 = (long long *)(v6 + 16);
    uint64_t v12 = v2 + 5;
    uint64_t v13 = v8 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *uint64_t v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 8;
    }
    while (v13);
    unint64_t v6 = v10;
    if (v8 != (v8 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_11:
      do
      {
        int v15 = *(_DWORD *)v6;
        v6 += 4;
        *v4++ = v15;
      }
      while (v6 != v5);
    }
  }
  void *result = v4;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxAntennaConfigInfo>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C135E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxAntennaConfigInfo>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TxAntennaConfigInfo>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDConfigInfo>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C136A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfigInfo>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTDConfigInfo>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AccessoryStatus>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C13768(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AccessoryStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::AccessoryStatus>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AccessoryType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C13828(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AccessoryType>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::AccessoryType>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AccessoryStatusARTD>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C138E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AccessoryStatusARTD>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::AccessoryStatusARTD>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AccessoryTypeARTD>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C139A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AccessoryTypeARTD>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::AccessoryTypeARTD>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::WiredPortStatus>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C13A78(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WiredPortStatus>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::WiredPortStatus>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LimitEnable>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C13B38(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LimitEnable>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::LimitEnable>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NotificationEnable>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C13BF8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NotificationEnable>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::NotificationEnable>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ProxBackoffLevel>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C13CB8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ProxBackoffLevel>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ProxBackoffLevel>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PhoneBackoffLevel>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C13D78(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PhoneBackoffLevel>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::PhoneBackoffLevel>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C13E38(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxPwrStatus>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C13EF8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxPwrStatus>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::TxPwrStatus>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TechType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C13FB8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TechType>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TechType>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CLTMPercentile>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C14078(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CLTMPercentile>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CLTMPercentile>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CLTMDutyCycle>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C14138(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CLTMDutyCycle>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CLTMDutyCycle>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LimitTimeoutPhone>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C141F8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LimitTimeoutPhone>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::LimitTimeoutPhone>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SpeakerState>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C142B8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SpeakerState>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SpeakerState>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::HandState>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C14378(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::HandState>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::HandState>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ConnectionState>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C14438(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ConnectionState>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ConnectionState>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ConnectionTrigger>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C144F8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ConnectionTrigger>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ConnectionTrigger>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TransmitEnable>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C145B8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TransmitEnable>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::TransmitEnable>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PowerSourceState>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C14678(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PowerSourceState>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::PowerSourceState>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PPMEnable>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C14738(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PPMEnable>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::PPMEnable>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t bsp::tlv::abm::parseField(bsp::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Duration *a4)
{
  *(_WORD *)a3 = *(_WORD *)this;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::writeField(bsp::tlv::abm *this, unsigned __int8 *a2, const Duration *a3)
{
  *(_WORD *)this = *(_WORD *)a2;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::getFieldSize(bsp::tlv::abm *this, const Duration *a2)
{
  return 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::Duration>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C147F8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Duration>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::Duration>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxHistogramDuration>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C148B8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxHistogramDuration>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::TxHistogramDuration>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::VoiceType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C14978(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::VoiceType>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::VoiceType>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxPowerMode>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C14A38(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxPowerMode>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::TxPowerMode>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

tlv *tlv::parseUnboundedSequence<int>(tlv *this, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = this;
  if (this < (tlv *)a2)
  {
    while (1)
    {
      uint64_t v9 = *(char **)(a3 + 8);
      unint64_t v8 = *(void *)(a3 + 16);
      if ((unint64_t)v9 >= v8) {
        break;
      }
      *(_DWORD *)uint64_t v9 = 0;
      uint64_t v6 = (uint64_t)(v9 + 4);
LABEL_4:
      *(void *)(a3 + 8) = v6;
      tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)4);
      int v7 = *(_DWORD *)v3;
      uint64_t v3 = (tlv *)((char *)v3 + 4);
      *(_DWORD *)(v6 - 4) = v7;
      if (v3 >= (tlv *)a2) {
        return v3;
      }
    }
    int v10 = *(char **)a3;
    uint64_t v11 = (uint64_t)&v9[-*(void *)a3];
    uint64_t v12 = v11 >> 2;
    unint64_t v13 = (v11 >> 2) + 1;
    if (v13 >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v8 - (void)v10;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float64x2x4_t v16 = operator new(4 * v15);
      long long v17 = &v16[4 * v12];
      _DWORD *v17 = 0;
      uint64_t v6 = (uint64_t)(v17 + 1);
      int64_t v18 = v9 - v10;
      if (v9 == v10) {
        goto LABEL_23;
      }
    }
    else
    {
      float64x2x4_t v16 = 0;
      long long v17 = (_DWORD *)(4 * v12);
      *(_DWORD *)(4 * v12) = 0;
      uint64_t v6 = 4 * v12 + 4;
      int64_t v18 = v9 - v10;
      if (v9 == v10)
      {
LABEL_23:
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v6;
        *(void *)(a3 + 16) = &v16[4 * v15];
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_4;
      }
    }
    unint64_t v19 = v18 - 4;
    if (v19 < 0x2C) {
      goto LABEL_30;
    }
    if ((unint64_t)(v9 - v16 - v11) < 0x20) {
      goto LABEL_30;
    }
    uint64_t v20 = (v19 >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v22 = &v9[-v21];
    long long v17 = (_DWORD *)((char *)v17 - v21);
    uint64_t v23 = &v16[4 * v12 - 16];
    long long v24 = v9 - 16;
    uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    uint64_t v9 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_30:
      do
      {
        int v27 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *--long long v17 = v27;
      }
      while (v9 != v10);
    }
    goto LABEL_23;
  }
  return v3;
}

_DWORD *bsp::tlv::abm::writeField(_DWORD *result, char **a2)
{
  uint64_t v2 = result;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    unint64_t v5 = v3 - v4 - 4;
    if (v5 < 0x1C || (unint64_t)((char *)result - v4) < 0x20)
    {
      unint64_t v8 = *a2;
    }
    else
    {
      uint64_t v6 = (v5 >> 2) + 1;
      uint64_t v7 = 4 * (v6 & 0x7FFFFFFFFFFFFFF8);
      uint64_t result = (_DWORD *)((char *)result + v7);
      unint64_t v8 = &v4[v7];
      uint64_t v9 = (long long *)(v4 + 16);
      int v10 = v2 + 4;
      uint64_t v11 = v6 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v12 = *v9;
        *(v10 - 1) = *(v9 - 1);
        *int v10 = v12;
        v9 += 2;
        v10 += 2;
        v11 -= 8;
      }
      while (v11);
      if (v6 == (v6 & 0x7FFFFFFFFFFFFFF8)) {
        return result;
      }
    }
    do
    {
      int v13 = *(_DWORD *)v8;
      v8 += 4;
      *result++ = v13;
    }
    while (v8 != v3);
  }
  return result;
}

tlv *tlv::parseV<bsp::tlv::abm::TxHistogram>@<X0>(tlv **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = tlv::parseUnboundedSequence<int>(*a1, (unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = result;
  return result;
}

void sub_1B8C14D0C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C14D00);
}

void sub_1B8C14D1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::TxHistogram>(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 3;
  }
  else {
    return (v1 - *a1) | 3;
  }
}

void *tlv::writeV<bsp::tlv::abm::TxHistogram>(void *result, char **a2)
{
  uint64_t v2 = (_DWORD *)*result;
  uint64_t v3 = (_DWORD *)*result;
  unint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unint64_t v6 = v4 - v5 - 4;
    if (v6 < 0x1C) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v2 - v5) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v7 = (v6 >> 2) + 1;
    uint64_t v8 = v7 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v3 = &v2[v8];
    uint64_t v9 = &v5[v8 * 4];
    int v10 = (long long *)(v5 + 16);
    uint64_t v11 = v2 + 4;
    uint64_t v12 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *uint64_t v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    unint64_t v5 = v9;
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_11:
      do
      {
        int v14 = *(_DWORD *)v5;
        v5 += 4;
        *v3++ = v14;
      }
      while (v5 != v4);
    }
  }
  tlv *result = v3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BottomEnclosure>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C14E68(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BottomEnclosure>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::BottomEnclosure>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TopEnclosure>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C14F28(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TopEnclosure>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TopEnclosure>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FCMType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C14FE8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::FCMType>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::FCMType>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BCMType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C150A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BCMType>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::BCMType>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WorkoutType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C15168(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WorkoutType>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::WorkoutType>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WorkoutState>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C15228(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WorkoutState>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::WorkoutState>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WorkoutLocation>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C152E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WorkoutLocation>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::WorkoutLocation>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SwimLocation>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C153A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SwimLocation>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SwimLocation>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SensorID>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C15468(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SensorID>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::SensorID>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BBSensorID>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C15528(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BBSensorID>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::BBSensorID>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGPresetID>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C155E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGPresetID>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DIAGPresetID>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGActiveIface>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C156A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGActiveIface>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DIAGActiveIface>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C15768(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGConfig>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DIAGConfig>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGBuffering>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C15828(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGBuffering>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DIAGBuffering>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGWMHigh>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C158E8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGWMHigh>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::DIAGWMHigh>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGWMLow>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B8C159A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGWMLow>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::DIAGWMLow>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ThermalSensorData>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  unsigned int v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *(unsigned int *)((char *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 5);
  return (v6 << 32) | 0xAAAAAA00 | v5;
}

void sub_1B8C15ADC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C15AC0);
}

uint64_t tlv::size<bsp::tlv::abm::ThermalSensorData>()
{
  return 8;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ThermalSensorData>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(_DWORD *)(v2 + 1) = *(_DWORD *)(a2 + 4);
  tlv *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ThermalSensorDataFloatType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  unsigned int v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *(unsigned int *)((char *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 5);
  return (v6 << 32) | 0xAAAAAA00 | v5;
}

void sub_1B8C15C10(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C15BF4);
}

uint64_t tlv::size<bsp::tlv::abm::ThermalSensorDataFloatType>()
{
  return 8;
}

float tlv::writeV<bsp::tlv::abm::ThermalSensorDataFloatType>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  float result = *(float *)(a2 + 4);
  *(float *)(v2 + 1) = result;
  *a1 = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PowerBudget>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  unsigned int v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *(unsigned int *)((char *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 5);
  return (v6 << 32) | 0xAAAAAA00 | v5;
}

void sub_1B8C15D44(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C15D28);
}

uint64_t tlv::size<bsp::tlv::abm::PowerBudget>()
{
  return 8;
}

uint64_t *tlv::writeV<bsp::tlv::abm::PowerBudget>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(_DWORD *)(v2 + 1) = *(_DWORD *)(a2 + 4);
  tlv *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::Mitigation>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  int v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)1);
  int v6 = *((unsigned __int8 *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 2);
  return v5 | (v6 << 8);
}

uint64_t sub_1B8C15E64(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::Mitigation>()
{
  return 5;
}

unsigned char **tlv::writeV<bsp::tlv::abm::Mitigation>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  v2[1] = a2[1];
  tlv *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NumberOfSensors>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C15F38(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NumberOfSensors>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::NumberOfSensors>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  tlv *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::SensorIDs>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B8C16048(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C16038);
}

void sub_1B8C16058(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::SensorIDs>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::SensorIDs>(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ReportFrequency>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B8C16160(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ReportFrequency>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::ReportFrequency>(_DWORD **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  uint64_t v9 = *(char **)a3;
  int v10 = *(char **)(a3 + 8);
  unint64_t v11 = (uint64_t)&v10[-*(void *)a3] >> 3;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      int v10 = &v9[8 * v6];
      *(void *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<bsp::tlv::abm::ThermalSensorData>::__append((void **)a3, v13);
    uint64_t v9 = *(char **)a3;
    int v10 = *(char **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    char *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v9 + 1) = *(_DWORD *)(v7 + 1);
    v7 += 5;
    v9 += 8;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  uint64_t v9 = *(char **)a3;
  int v10 = *(char **)(a3 + 8);
  unint64_t v11 = (uint64_t)&v10[-*(void *)a3] >> 3;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      int v10 = &v9[8 * v6];
      *(void *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<bsp::tlv::abm::ThermalSensorData>::__append((void **)a3, v13);
    uint64_t v9 = *(char **)a3;
    int v10 = *(char **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    char *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v9 + 1) = *(_DWORD *)(v7 + 1);
    v7 += 5;
    v9 += 8;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  uint64_t v9 = *(char **)a3;
  int v10 = *(char **)(a3 + 8);
  unint64_t v11 = (uint64_t)&v10[-*(void *)a3] >> 3;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      int v10 = &v9[8 * v6];
      *(void *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v13);
    uint64_t v9 = *(char **)a3;
    int v10 = *(char **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    char *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v9 + 1) = *(_DWORD *)(v7 + 1);
    v7 += 5;
    v9 += 8;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  uint64_t v9 = *(char **)a3;
  int v10 = *(char **)(a3 + 8);
  unint64_t v11 = (uint64_t)&v10[-*(void *)a3] >> 3;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      int v10 = &v9[8 * v6];
      *(void *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v13);
    uint64_t v9 = *(char **)a3;
    int v10 = *(char **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    char *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v9 + 1) = *(_DWORD *)(v7 + 1);
    v7 += 5;
    v9 += 8;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  unsigned char *v9;
  unsigned char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  uint64_t v9 = *(unsigned char **)a3;
  int v10 = *(unsigned char **)(a3 + 8);
  unint64_t v11 = (uint64_t)&v10[-*(void *)a3] >> 1;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      int v10 = &v9[2 * v6];
      *(void *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<bsp::tlv::abm::Mitigation>::__append((void **)a3, v13);
    uint64_t v9 = *(unsigned char **)a3;
    int v10 = *(unsigned char **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    char *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)1);
    v9[1] = v7[1];
    v7 += 2;
    v9 += 2;
  }
  return v7;
}

void tlv::parseV<bsp::tlv::abm::ThermalSensors>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  unsigned int v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<bsp::tlv::abm::ThermalSensorData>::__append((void **)a3, v7);
    int v10 = *(_DWORD **)a3;
    unint64_t v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        BOOL v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *(unsigned char *)int v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)4);
        v10[1] = *(_DWORD *)(v8 + 1);
        v10 += 2;
        v8 += 5;
      }
      while (v10 != v11);
      unsigned int v8 = v12 + 5;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8C1638C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C16374);
}

void sub_1B8C163A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::ThermalSensors>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 9;
  }
}

unsigned char **tlv::writeV<bsp::tlv::abm::ThermalSensors>(unsigned char **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = (a2[2] - *a2) >> 3;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *uint64_t v3 = *(unsigned char *)v4;
      *(_DWORD *)(v3 + 1) = *(_DWORD *)(v4 + 4);
      v3 += 5;
      v4 += 8;
    }
    while (v4 != v5);
  }
  void *result = v3;
  return result;
}

void tlv::parseV<bsp::tlv::abm::ThermalSensorsFloatType>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  unsigned int v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<bsp::tlv::abm::ThermalSensorData>::__append((void **)a3, v7);
    int v10 = *(_DWORD **)a3;
    unint64_t v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        BOOL v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *(unsigned char *)int v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)4);
        v10[1] = *(_DWORD *)(v8 + 1);
        v10 += 2;
        v8 += 5;
      }
      while (v10 != v11);
      unsigned int v8 = v12 + 5;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8C16628(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C16610);
}

void sub_1B8C1663C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::ThermalSensorsFloatType>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 9;
  }
}

unsigned char **tlv::writeV<bsp::tlv::abm::ThermalSensorsFloatType>(unsigned char **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = (a2[2] - *a2) >> 3;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *uint64_t v3 = *(unsigned char *)v4;
      *(_DWORD *)(v3 + 1) = *(_DWORD *)(v4 + 4);
      v3 += 5;
      v4 += 8;
    }
    while (v4 != v5);
  }
  void *result = v3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NumberOfBudgets>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C16758(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NumberOfBudgets>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::NumberOfBudgets>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void tlv::parseV<bsp::tlv::abm::PowerBudgets>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  unsigned int v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v7);
    int v10 = *(_DWORD **)a3;
    unint64_t v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        BOOL v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *(unsigned char *)int v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)4);
        v10[1] = *(_DWORD *)(v8 + 1);
        v10 += 2;
        v8 += 5;
      }
      while (v10 != v11);
      unsigned int v8 = v12 + 5;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8C16984(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C1696CLL);
}

void sub_1B8C16998(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::PowerBudgets>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 9;
  }
}

unsigned char **tlv::writeV<bsp::tlv::abm::PowerBudgets>(unsigned char **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = (a2[2] - *a2) >> 3;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *uint64_t v3 = *(unsigned char *)v4;
      *(_DWORD *)(v3 + 1) = *(_DWORD *)(v4 + 4);
      v3 += 5;
      v4 += 8;
    }
    while (v4 != v5);
  }
  void *result = v3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NumberOfCurrentBudgets>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C16AB4(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NumberOfCurrentBudgets>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::NumberOfCurrentBudgets>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void tlv::parseV<bsp::tlv::abm::CurrentPowerBudgets>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  unsigned int v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v7);
    int v10 = *(_DWORD **)a3;
    unint64_t v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        BOOL v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *(unsigned char *)int v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)4);
        v10[1] = *(_DWORD *)(v8 + 1);
        v10 += 2;
        v8 += 5;
      }
      while (v10 != v11);
      unsigned int v8 = v12 + 5;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8C16CE0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C16CC8);
}

void sub_1B8C16CF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::CurrentPowerBudgets>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 4;
  }
  else {
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 9;
  }
}

unsigned char **tlv::writeV<bsp::tlv::abm::CurrentPowerBudgets>(unsigned char **result, _DWORD *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = (a2[2] - *a2) >> 3;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (*(void *)a2 != v5)
  {
    do
    {
      *uint64_t v3 = *(unsigned char *)v4;
      *(_DWORD *)(v3 + 1) = *(_DWORD *)(v4 + 4);
      v3 += 5;
      v4 += 8;
    }
    while (v4 != v5);
  }
  void *result = v3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NumberOfMitigation>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B8C16E10(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NumberOfMitigation>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::NumberOfMitigation>(unsigned char **result, unsigned char *a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = *a2;
  void *result = v2 + 1;
  return result;
}

unint64_t bsp::tlv::abm::writeField(unsigned char *a1, _DWORD *a2)
{
  *a1 = (a2[2] - *a2) >> 1;
  unint64_t result = (unint64_t)(a1 + 1);
  uint64_t v5 = *(unsigned char **)a2;
  uint64_t v4 = (unsigned char *)*((void *)a2 + 1);
  if (*(unsigned char **)a2 != v4)
  {
    unint64_t v6 = v4 - v5 - 2;
    if (v6 < 0x3E) {
      goto LABEL_11;
    }
    if (result < (unint64_t)&v5[(v6 & 0xFFFFFFFFFFFFFFFELL) + 2] && v5 < &a1[(v6 & 0xFFFFFFFFFFFFFFFELL) + 3]) {
      goto LABEL_11;
    }
    uint64_t v8 = (v6 >> 1) + 1;
    unint64_t v9 = 2 * (v8 & 0xFFFFFFFFFFFFFFE0);
    result += v9;
    int v10 = &v5[v9];
    unint64_t v11 = (long long *)(v5 + 32);
    BOOL v12 = a1 + 33;
    unint64_t v13 = v8 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *(v11 - 2);
      long long v14 = *(v11 - 1);
      long long v17 = *v11;
      long long v16 = v11[1];
      v11 += 4;
      *(v12 - 2) = v15;
      *(v12 - 1) = v14;
      *BOOL v12 = v17;
      v12[1] = v16;
      v12 += 4;
      v13 -= 32;
    }
    while (v13);
    uint64_t v5 = v10;
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_11:
      int64_t v18 = (unsigned char *)result;
      do
      {
        *int64_t v18 = *v5;
        unint64_t result = (unint64_t)(v18 + 2);
        v18[1] = v5[1];
        v5 += 2;
        v18 += 2;
      }
      while (v5 != v4);
    }
  }
  return result;
}

void tlv::parseV<bsp::tlv::abm::MitigationData>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  uint64_t v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<bsp::tlv::abm::Mitigation>::__append((void **)a3, v7);
    int v10 = *(unsigned char **)a3;
    unint64_t v11 = *(unsigned char **)(a3 + 8);
    if (*(unsigned char **)a3 != v11)
    {
      do
      {
        BOOL v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *int v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)1);
        v10[1] = v8[1];
        v10 += 2;
        v8 += 2;
      }
      while (v10 != v11);
      uint64_t v8 = v12 + 2;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8C170A8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8C17090);
}

void sub_1B8C170BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::MitigationData>(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 4;
  }
  else {
    return ((v1 - *a1) | 1) + 3;
  }
}

unint64_t *tlv::writeV<bsp::tlv::abm::MitigationData>(unint64_t *result, _DWORD *a2)
{
  unsigned int v2 = (unsigned char *)*result;
  uint64_t v3 = (unsigned char *)*result;
  *uint64_t v3 = (a2[2] - *a2) >> 1;
  unint64_t v4 = (unint64_t)(v3 + 1);
  unint64_t v6 = *(unsigned char **)a2;
  uint64_t v5 = (unsigned char *)*((void *)a2 + 1);
  if (*(unsigned char **)a2 != v5)
  {
    unint64_t v7 = v5 - v6 - 2;
    if (v7 < 0x3E) {
      goto LABEL_11;
    }
    if (v4 < (unint64_t)&v6[(v7 & 0xFFFFFFFFFFFFFFFELL) + 2] && v6 < &v2[(v7 & 0xFFFFFFFFFFFFFFFELL) + 3]) {
      goto LABEL_11;
    }
    uint64_t v9 = (v7 >> 1) + 1;
    unint64_t v10 = 2 * (v9 & 0xFFFFFFFFFFFFFFE0);
    v4 += v10;
    unint64_t v11 = &v6[v10];
    BOOL v12 = (long long *)(v6 + 32);
    unint64_t v13 = v2 + 33;
    unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v16 = *(v12 - 2);
      long long v15 = *(v12 - 1);
      long long v18 = *v12;
      long long v17 = v12[1];
      v12 += 4;
      *(v13 - 2) = v16;
      *(v13 - 1) = v15;
      *unint64_t v13 = v18;
      v13[1] = v17;
      v13 += 4;
      v14 -= 32;
    }
    while (v14);
    unint64_t v6 = v11;
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_11:
      unint64_t v19 = (unsigned char *)v4;
      do
      {
        *unint64_t v19 = *v6;
        unint64_t v4 = (unint64_t)(v19 + 2);
        v19[1] = v6[1];
        v6 += 2;
        v19 += 2;
      }
      while (v6 != v5);
    }
  }
  void *result = v4;
  return result;
}

void std::vector<bsp::tlv::abm::ThermalSensorData>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<bsp::tlv::abm::ThermalSensorData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = operator new(8 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    long long v16 = &v13[8 * v12];
    bzero(v14, v15);
    long long v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      unint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void std::vector<bsp::tlv::abm::ThermalSensorData>::__throw_length_error[abi:ne180100]()
{
}

void std::vector<bsp::tlv::abm::Mitigation>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      unint64_t v6 = &v5[2 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = (v8 >> 1) + a2;
    if (v10 < 0) {
      std::vector<bsp::tlv::abm::ThermalSensorData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - v7;
    if (v11 > v10) {
      uint64_t v10 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 < 0) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = operator new(2 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[2 * v9];
    size_t v15 = 2 * a2;
    long long v16 = &v13[2 * v12];
    bzero(v14, v15);
    long long v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 2;
      if (v18 < 0x1E) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 1) + 1;
      unint64_t v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[2 * v9 - 16];
      uint64_t v22 = v5 - 16;
      unint64_t v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_32:
        do
        {
          __int16 v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
      unint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

uint64_t BBUpdaterRegisterGlobalLogSink()
{
  return MEMORY[0x1F4179FC8]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1F40D7AB8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

uint64_t ETLDebugRegisterDelegate()
{
  return MEMORY[0x1F417A4D0]();
}

uint64_t ETLEFCopyCrashLocationDetailsM20()
{
  return MEMORY[0x1F417A530]();
}

uint64_t TelephonyUtilDebugRegisterDelegate()
{
  return MEMORY[0x1F417D8C0]();
}

uint64_t TelephonyUtilDebugSetFlags()
{
  return MEMORY[0x1F417D8C8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t CreateError()
{
  return MEMORY[0x1F4179FE8]();
}

uint64_t capabilities::abs::TUDebugFlags(capabilities::abs *this)
{
  return MEMORY[0x1F417D228](this);
}

uint64_t capabilities::abs::logScratchPath(capabilities::abs *this)
{
  return MEMORY[0x1F417D240](this);
}

uint64_t capabilities::abs::logSnapshotPath(capabilities::abs *this)
{
  return MEMORY[0x1F417D248](this);
}

uint64_t capabilities::abs::supportsProtocolNVConfig(capabilities::abs *this)
{
  return MEMORY[0x1F417D380](this);
}

uint64_t capabilities::ipc::supportsCoalescing(capabilities::ipc *this)
{
  return MEMORY[0x1F417D498](this);
}

uint64_t capabilities::ipc::supportsUnifiedQMuxV2(capabilities::ipc *this)
{
  return MEMORY[0x1F417D4A0](this);
}

uint64_t capabilities::diag::supportsBuffering(capabilities::diag *this)
{
  return MEMORY[0x1F417D4E8](this);
}

uint64_t capabilities::diag::supportsMultipleMasks(capabilities::diag *this)
{
  return MEMORY[0x1F417D508](this);
}

uint64_t capabilities::diag::asString()
{
  return MEMORY[0x1F417D518]();
}

{
  return MEMORY[0x1F417D520]();
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x1F417D5D0](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x1F417D5D8](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x1F417D5E8](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x1F417D5F8](this);
}

uint64_t QMIServiceMsg::create()
{
  return MEMORY[0x1F41785E0]();
}

void CommandDriverFactory::CommandDriverFactory(CommandDriverFactory *this)
{
}

uint64_t awd::AwdCommandDriver::AwdCommandDriver()
{
  return MEMORY[0x1F417A030]();
}

void awd::AwdCommandDriver::~AwdCommandDriver(awd::AwdCommandDriver *this)
{
}

uint64_t awd::asString()
{
  return MEMORY[0x1F417A048]();
}

uint64_t ctu::LogMessage::LogMessage()
{
  return MEMORY[0x1F417D950]();
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x1F417D958]();
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x1F417D988]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x1F417D990](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x1F417D998](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x1F417D9A8]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x1F417D9B0]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x1F417D9B8](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x1F417D9C8]();
}

uint64_t ctu::LogMessageBuffer::takeString(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1F417DA10](this);
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1F417DA18](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x1F417DA28](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1F417DA30](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
}

uint64_t ctu::LoggerCommonBase::setLogLevel()
{
  return MEMORY[0x1F417DA48]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x1F417DA58]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x1F417DA68]();
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x1F417DA90](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x1F417DAA0](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x1F417DAA8]();
}

{
  return MEMORY[0x1F417DAB0]();
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x1F417DAB8](this, a2);
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const ctu::cf::dict_adapter *a2)
{
  return MEMORY[0x1F417DAC0](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x1F417DAD0](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x1F417DAF0]();
}

{
  return MEMORY[0x1F417DB00]();
}

uint64_t ctu::cf::assign(ctu::cf *this, signed __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB08](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, double *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB18](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB20](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB28](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB30](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, __int16 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB40](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned __int16 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB48](this, a2, a3);
}

uint64_t ctu::fs::remove_dir()
{
  return MEMORY[0x1F417DB58]();
}

uint64_t ctu::fs::is_directory()
{
  return MEMORY[0x1F417DB70]();
}

uint64_t ctu::fs::get_file_size()
{
  return MEMORY[0x1F417DB78]();
}

uint64_t ctu::fs::get_filtered_files()
{
  return MEMORY[0x1F417DB88]();
}

uint64_t ctu::fs::get_unique_filename()
{
  return MEMORY[0x1F417DB90]();
}

uint64_t ctu::fs::rename()
{
  return MEMORY[0x1F417DBA8]();
}

uint64_t ctu::hex(ctu *this)
{
  return MEMORY[0x1F417DBD0](this);
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  return MEMORY[0x1F417DBD8](this);
}

uint64_t ctu::assign()
{
  return MEMORY[0x1F417DBE8]();
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x1F417DBF8]();
}

uint64_t ctu::LogServer::updateConfig()
{
  return MEMORY[0x1F417DC08]();
}

uint64_t ctu::LogServer::log()
{
  return MEMORY[0x1F417DC10]();
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x1F417DC18](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x1F417DC20]();
}

uint64_t ctu::operator<<()
{
  return MEMORY[0x1F417DC80]();
}

{
  return MEMORY[0x1F417DC88]();
}

{
  return MEMORY[0x1F417DC90]();
}

{
  return MEMORY[0x1F417DC98]();
}

uint64_t qmi::MessageBase::validateMsgId(qmi::MessageBase *this)
{
  return MEMORY[0x1F417CF58](this);
}

uint64_t qmi::MessageBase::MessageBase(qmi::MessageBase *this, const void *a2)
{
  return MEMORY[0x1F417CF70](this, a2);
}

uint64_t qmi::MessageBase::MessageBase()
{
  return MEMORY[0x1F417CF78]();
}

void qmi::MessageBase::~MessageBase(qmi::MessageBase *this)
{
}

uint64_t qmi::ClientRouter::addClient()
{
  return MEMORY[0x1F4178610]();
}

uint64_t qmi::ClientRouter::ClientRouter(qmi::ClientRouter *this, os_log_s *a2)
{
  return MEMORY[0x1F4178618](this, a2);
}

uint64_t qmi::ResponseBase::ResponseBase(qmi::ResponseBase *this, const void *a2)
{
  return MEMORY[0x1F417CF90](this, a2);
}

{
  return MEMORY[0x1F417CF98](this, a2);
}

uint64_t qmi::MutableMessageBase::MutableMessageBase()
{
  return MEMORY[0x1F417CFC8]();
}

uint64_t qmi::MutableMessageBase::MutableMessageBase(qmi::MutableMessageBase *this)
{
  return MEMORY[0x1F417CFD0](this);
}

void qmi::MutableMessageBase::~MutableMessageBase(qmi::MutableMessageBase *this)
{
}

uint64_t qmi::parse()
{
  return MEMORY[0x1F417CFF0]();
}

uint64_t qmi::Client::createWithQueue()
{
  return MEMORY[0x1F4178630]();
}

uint64_t qmi::Client::setClientHandle()
{
  return MEMORY[0x1F4178638]();
}

uint64_t qmi::Client::createWithQueueLocal()
{
  return MEMORY[0x1F4178640]();
}

uint64_t qmi::Client::set(qmi::Client *this, const char *a2)
{
  return MEMORY[0x1F4178648](this, a2);
}

uint64_t qmi::Client::Client()
{
  return MEMORY[0x1F4178658]();
}

void qmi::Client::~Client(qmi::Client *this)
{
}

uint64_t qmi::asString()
{
  return MEMORY[0x1F417D000]();
}

uint64_t tlv::throwIfNotAligned(tlv *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x1F417D008](this, a2, a3);
}

uint64_t tlv::throwIfNotEnoughBytes(tlv *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x1F417D010](this, a2, a3);
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1F417DCA8]();
}

{
  return MEMORY[0x1F417DCC0]();
}

{
  return MEMORY[0x1F417DCD0]();
}

{
  return MEMORY[0x1F417DCD8]();
}

{
  return MEMORY[0x1F417DCE8]();
}

uint64_t coex::CommandDriver::CommandDriver()
{
  return MEMORY[0x1F417A058]();
}

uint64_t cpms::CommandDriver::CommandDriver()
{
  return MEMORY[0x1F417A060]();
}

uint64_t data::CommandDriver::CommandDriver()
{
  return MEMORY[0x1F417A068]();
}

uint64_t diag::CommandDriver::CommandDriver()
{
  return MEMORY[0x1F417A070]();
}

uint64_t logs::CommandDriver::sendLogData_sync()
{
  return MEMORY[0x1F417A078]();
}

uint64_t logs::CommandDriver::CommandDriver()
{
  return MEMORY[0x1F417A080]();
}

uint64_t radio::CommandDriver::handleClientStateChanged_sync(radio::CommandDriver *this)
{
  return MEMORY[0x1F417A0A0](this);
}

uint64_t radio::CommandDriver::handleOperatingModeChanged_sync()
{
  return MEMORY[0x1F417A0A8]();
}

uint64_t radio::CommandDriver::CommandDriver()
{
  return MEMORY[0x1F417A0B0]();
}

uint64_t radio::RFSCommandDriver::RFSCommandDriver()
{
  return MEMORY[0x1F417A0D0]();
}

void radio::RFSCommandDriver::~RFSCommandDriver(radio::RFSCommandDriver *this)
{
}

uint64_t radio::BasebandProperties::toDict(radio::BasebandProperties *this)
{
  return MEMORY[0x1F417A0E8](this);
}

uint64_t radio::DebugCommandDriver::DebugCommandDriver()
{
  return MEMORY[0x1F417A0F0]();
}

uint64_t radio::HealthCommandDriver::LinkStats::LinkStats(radio::HealthCommandDriver::LinkStats *this)
{
  return MEMORY[0x1F417A0F8](this);
}

uint64_t radio::HealthCommandDriver::HealthCommandDriver()
{
  return MEMORY[0x1F417A100]();
}

uint64_t radio::OpMode::setMode(radio::OpMode *this)
{
  return MEMORY[0x1F417A108](this);
}

uint64_t radio::OpMode::setConfig(radio::OpMode *this)
{
  return MEMORY[0x1F417A110](this);
}

uint64_t radio::asString()
{
  return MEMORY[0x1F417A118]();
}

uint64_t antenna::CommandDriver::convertModeToState()
{
  return MEMORY[0x1F417A130]();
}

uint64_t antenna::CommandDriver::CommandDriver()
{
  return MEMORY[0x1F417A138]();
}

uint64_t desense::CommandDriver::CommandDriver()
{
  return MEMORY[0x1F417A148]();
}

uint64_t desense::asString()
{
  return MEMORY[0x1F417A150]();
}

uint64_t Registry::getServerConnection(Registry *this)
{
  return MEMORY[0x1F417A248](this);
}

uint64_t QMIServiceMsg::getNewError(QMIServiceMsg *this)
{
  return MEMORY[0x1F41786B8](this);
}

uint64_t QMIServiceMsg::serialize(QMIServiceMsg *this)
{
  return MEMORY[0x1F41786C0](this);
}

uint64_t awd::AppContext::getProperties(awd::AppContext *this)
{
  return MEMORY[0x1F417A158](this);
}

uint64_t awd::AppContext::getAppID(awd::AppContext *this)
{
  return MEMORY[0x1F417A160](this);
}

uint64_t awd::AppContext::operator()()
{
  return MEMORY[0x1F417A168]();
}

{
  return MEMORY[0x1F417A170]();
}

{
  return MEMORY[0x1F417A178]();
}

uint64_t awd::AwdCommandDriver::getName(awd::AwdCommandDriver *this)
{
  return MEMORY[0x1F417A188](this);
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1F417DD08](this);
}

uint64_t ctu::cf::map_adapter::copyCFDataRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1F417DD18](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFArrayRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1F417DD20](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFDictionaryRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1F417DD30](this, a2);
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1F417DD38](this, a2);
}

uint64_t ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1F417DD40](this, a2);
}

uint64_t ctu::cf::map_adapter::getDouble(ctu::cf::map_adapter *this, const __CFString *a2, double a3)
{
  return MEMORY[0x1F417DD48](this, a2, a3);
}

uint64_t ctu::cf::map_adapter::getString()
{
  return MEMORY[0x1F417DD50]();
}

uint64_t ctu::LogServer::getConfig(ctu::LogServer *this)
{
  return MEMORY[0x1F417DD68](this);
}

uint64_t qmi::MessageBase::findTlvValue(qmi::MessageBase *this)
{
  return MEMORY[0x1F417D0A0](this);
}

uint64_t qmi::ClientRouter::setHandler()
{
  return MEMORY[0x1F41786C8]();
}

uint64_t qmi::ClientRouter::setIndHandlerInternal()
{
  return MEMORY[0x1F41786D8]();
}

uint64_t qmi::ClientRouter::get()
{
  return MEMORY[0x1F41786E0]();
}

uint64_t qmi::ClientRouter::start()
{
  return MEMORY[0x1F41786F0]();
}

uint64_t qmi::Client::setHandler()
{
  return MEMORY[0x1F41786F8]();
}

{
  return MEMORY[0x1F4178700]();
}

{
  return MEMORY[0x1F4178708]();
}

uint64_t qmi::Client::setIndHandler()
{
  return MEMORY[0x1F4178710]();
}

uint64_t qmi::Client::setIndShouldWake(qmi::Client *this)
{
  return MEMORY[0x1F4178718](this);
}

uint64_t qmi::Client::send()
{
  return MEMORY[0x1F4178720]();
}

uint64_t qmi::Client::stop(qmi::Client *this)
{
  return MEMORY[0x1F4178728](this);
}

uint64_t qmi::Client::start(qmi::Client *this)
{
  return MEMORY[0x1F4178730](this);
}

uint64_t qmi::Client::getName(qmi::Client *this)
{
  return MEMORY[0x1F4178738](this);
}

uint64_t qmi::Client::operator std::weak_ptr<qmi::Client::State>()
{
  return MEMORY[0x1F4178740]();
}

uint64_t xpc::object::to_string(xpc::object *this)
{
  return MEMORY[0x1F417DD78](this);
}

uint64_t coex::CommandDriver::getName(coex::CommandDriver *this)
{
  return MEMORY[0x1F417A190](this);
}

uint64_t cpms::CommandDriver::getName(cpms::CommandDriver *this)
{
  return MEMORY[0x1F417A198](this);
}

uint64_t data::CommandDriver::getName(data::CommandDriver *this)
{
  return MEMORY[0x1F417A1A0](this);
}

uint64_t diag::CommandDriver::notifyOfEvent_sync()
{
  return MEMORY[0x1F417A1A8]();
}

uint64_t diag::CommandDriver::getName(diag::CommandDriver *this)
{
  return MEMORY[0x1F417A1B0](this);
}

uint64_t logs::CommandDriver::notifyState_sync()
{
  return MEMORY[0x1F417A1B8]();
}

uint64_t logs::CommandDriver::getName(logs::CommandDriver *this)
{
  return MEMORY[0x1F417A1C0](this);
}

uint64_t radio::CommandDriver::getName(radio::CommandDriver *this)
{
  return MEMORY[0x1F417A1C8](this);
}

uint64_t radio::RFSCommandDriver::getName(radio::RFSCommandDriver *this)
{
  return MEMORY[0x1F417A1D0](this);
}

uint64_t radio::DebugCommandDriver::getName(radio::DebugCommandDriver *this)
{
  return MEMORY[0x1F417A1D8](this);
}

uint64_t radio::HealthCommandDriver::getName(radio::HealthCommandDriver *this)
{
  return MEMORY[0x1F417A1E0](this);
}

uint64_t radio::OpMode::convertMode()
{
  return MEMORY[0x1F417A1E8]();
}

uint64_t radio::OpMode::convertMode(radio::OpMode *this)
{
  return MEMORY[0x1F417A1F0](this);
}

uint64_t radio::OpMode::modeToString()
{
  return MEMORY[0x1F417A1F8]();
}

uint64_t radio::OpMode::getModeString(radio::OpMode *this)
{
  return MEMORY[0x1F417A200](this);
}

uint64_t radio::OpMode::allowModeChange(radio::OpMode *this)
{
  return MEMORY[0x1F417A208](this);
}

uint64_t radio::OpMode::getConfigString(radio::OpMode *this)
{
  return MEMORY[0x1F417A210](this);
}

uint64_t radio::OpMode::getMode(radio::OpMode *this)
{
  return MEMORY[0x1F417A218](this);
}

uint64_t radio::OpMode::getConfig(radio::OpMode *this)
{
  return MEMORY[0x1F417A220](this);
}

uint64_t antenna::CommandDriver::getName(antenna::CommandDriver *this)
{
  return MEMORY[0x1F417A228](this);
}

uint64_t desense::CommandDriver::getName(desense::CommandDriver *this)
{
  return MEMORY[0x1F417A230](this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4D0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4E0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1F417E760]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1F417E780]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1F417E788]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E878]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8A8]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE8](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1F417ECF8](this, a2);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

double difftime(time_t a1, time_t a2)
{
  MEMORY[0x1F40CB8F8](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD50](label);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC0D8](*(void *)&a1, a2, a3, *(void *)&a4);
}

void free(void *a1)
{
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1F40CC868](a1);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC870](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CC900](a1, a2);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x1F40CCE30](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1F40CDD10](__p, __ec);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x1F40CE220](a1, a2, a3);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1F40CEB10](value);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1F40CF208]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CF248](object);
}