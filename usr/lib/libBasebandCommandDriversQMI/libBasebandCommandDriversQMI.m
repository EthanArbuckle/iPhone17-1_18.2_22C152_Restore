void ___ZNK4coex13CommandDriver8CallbackclEN3ctu2cf11CFSharedRefI9__CFErrorEENS4_IK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __Block_byref_object_dispose__80(uint64_t a1)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CoexTech>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::APTTable>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Policy>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimitTimeout>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCTxFrameDenialsParameters>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RbThresholdForAdvTxNotice>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxFrameDenialsParameters>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimitTimeout>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimit>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LinkPathLossThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::FilteredRBThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimit>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::PowerThreshold>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBFilterAlpha>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TechInstance>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTEInstance>::getSize()
{
  return 7;
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4coex13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t __Block_byref_object_copy__79(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F417CFC0](a1 + 40, a2 + 40);
}

void __destroy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[6];
  if (v2) {
    CFRelease(v2);
  }
  v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

CFTypeRef __copy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1, void *a2)
{
  v4 = (const void *)a2[4];
  if (!v4)
  {
    v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  v5 = _Block_copy(v4);
  v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  CFTypeRef result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSN4coex13CommandDriver8CallbackE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void coex::QMICommandDriver::setPolicy_sync(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v104 = *a2;
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v104;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Setting policy with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v106 = a1;
  uint64_t v107 = a3;
  v142[0] = 0;
  v142[1] = 0;
  v141 = (uint64_t *)v142;
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v145 = 0x4802000000;
  v146 = __Block_byref_object_copy__79;
  v147 = __Block_byref_object_dispose__80;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v148[0] = v7;
  v148[1] = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v148);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  aBlock[3] = &unk_1E61958A0;
  aBlock[4] = &buf;
  v8 = _Block_copy(aBlock);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB94E0];
  v9 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB94E0], v143);
  v10 = (const void *)v9[5];
  v9[5] = (uint64_t)v8;
  if (v10) {
    _Block_release(v10);
  }
  v139[0] = MEMORY[0x1E4F143A8];
  v139[1] = 0x40000000;
  v139[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_85;
  v139[3] = &unk_1E61958C8;
  v139[4] = &buf;
  v11 = _Block_copy(v139);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9630];
  v12 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9630], v143);
  v13 = (const void *)v12[5];
  v12[5] = (uint64_t)v11;
  if (v13) {
    _Block_release(v13);
  }
  v138[0] = MEMORY[0x1E4F143A8];
  v138[1] = 0x40000000;
  v138[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_92;
  v138[3] = &unk_1E61958F0;
  v138[4] = &buf;
  v14 = _Block_copy(v138);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB95C0];
  v15 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB95C0], v143);
  v16 = (const void *)v15[5];
  v15[5] = (uint64_t)v14;
  if (v16) {
    _Block_release(v16);
  }
  v137[0] = MEMORY[0x1E4F143A8];
  v137[1] = 0x40000000;
  v137[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_99;
  v137[3] = &unk_1E6195918;
  v137[4] = &buf;
  v17 = _Block_copy(v137);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB99B0];
  v18 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB99B0], v143);
  v19 = (const void *)v18[5];
  v18[5] = (uint64_t)v17;
  if (v19) {
    _Block_release(v19);
  }
  v136[0] = MEMORY[0x1E4F143A8];
  v136[1] = 0x40000000;
  v136[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_106;
  v136[3] = &unk_1E6195940;
  v136[4] = &buf;
  v20 = _Block_copy(v136);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9880];
  v21 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9880], v143);
  v22 = (const void *)v21[5];
  v21[5] = (uint64_t)v20;
  if (v22) {
    _Block_release(v22);
  }
  v135[0] = MEMORY[0x1E4F143A8];
  v135[1] = 0x40000000;
  v135[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_113;
  v135[3] = &unk_1E6195968;
  v135[4] = &buf;
  v23 = _Block_copy(v135);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9508];
  v24 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9508], v143);
  v25 = (const void *)v24[5];
  v24[5] = (uint64_t)v23;
  if (v25) {
    _Block_release(v25);
  }
  v134[0] = MEMORY[0x1E4F143A8];
  v134[1] = 0x40000000;
  v134[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_120;
  v134[3] = &unk_1E6195990;
  v134[4] = &buf;
  v26 = _Block_copy(v134);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB97D8];
  v27 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB97D8], v143);
  v28 = (const void *)v27[5];
  v27[5] = (uint64_t)v26;
  if (v28) {
    _Block_release(v28);
  }
  v133[0] = MEMORY[0x1E4F143A8];
  v133[1] = 0x40000000;
  v133[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_127;
  v133[3] = &unk_1E61959B8;
  v133[4] = &buf;
  v29 = _Block_copy(v133);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9698];
  v30 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9698], v143);
  v31 = (const void *)v30[5];
  v30[5] = (uint64_t)v29;
  if (v31) {
    _Block_release(v31);
  }
  v132[0] = MEMORY[0x1E4F143A8];
  v132[1] = 0x40000000;
  v132[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_134;
  v132[3] = &unk_1E61959E0;
  v132[4] = &buf;
  v32 = _Block_copy(v132);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB97B8];
  v33 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB97B8], v143);
  v34 = (const void *)v33[5];
  v33[5] = (uint64_t)v32;
  if (v34) {
    _Block_release(v34);
  }
  v131[0] = MEMORY[0x1E4F143A8];
  v131[1] = 0x40000000;
  v131[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_141;
  v131[3] = &unk_1E6195A08;
  v131[4] = &buf;
  v35 = _Block_copy(v131);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9610];
  v36 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9610], v143);
  v37 = (const void *)v36[5];
  v36[5] = (uint64_t)v35;
  if (v37) {
    _Block_release(v37);
  }
  v130[0] = MEMORY[0x1E4F143A8];
  v130[1] = 0x40000000;
  v130[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_148;
  v130[3] = &unk_1E6195A30;
  v130[4] = &buf;
  v38 = _Block_copy(v130);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9710];
  v39 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9710], v143);
  v40 = (const void *)v39[5];
  v39[5] = (uint64_t)v38;
  if (v40) {
    _Block_release(v40);
  }
  v129[0] = MEMORY[0x1E4F143A8];
  v129[1] = 0x40000000;
  v129[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_155;
  v129[3] = &unk_1E6195A58;
  v129[4] = &buf;
  v41 = _Block_copy(v129);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9858];
  v42 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9858], v143);
  v43 = (const void *)v42[5];
  v42[5] = (uint64_t)v41;
  if (v43) {
    _Block_release(v43);
  }
  v128[0] = MEMORY[0x1E4F143A8];
  v128[1] = 0x40000000;
  v128[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_162;
  v128[3] = &unk_1E6195A80;
  v128[4] = &buf;
  v44 = _Block_copy(v128);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9950];
  v45 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9950], v143);
  v46 = (const void *)v45[5];
  v45[5] = (uint64_t)v44;
  if (v46) {
    _Block_release(v46);
  }
  v127[0] = MEMORY[0x1E4F143A8];
  v127[1] = 0x40000000;
  v127[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_169;
  v127[3] = &unk_1E6195AA8;
  v127[4] = &buf;
  v47 = _Block_copy(v127);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9978];
  v48 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9978], v143);
  v49 = (const void *)v48[5];
  v48[5] = (uint64_t)v47;
  if (v49) {
    _Block_release(v49);
  }
  v126[0] = MEMORY[0x1E4F143A8];
  v126[1] = 0x40000000;
  v126[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_176;
  v126[3] = &unk_1E6195AD0;
  v126[4] = &buf;
  v50 = _Block_copy(v126);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB98A8];
  v51 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB98A8], v143);
  v52 = (const void *)v51[5];
  v51[5] = (uint64_t)v50;
  if (v52) {
    _Block_release(v52);
  }
  v53 = _Block_copy(&__block_literal_global_0);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB98D8];
  v54 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB98D8], v143);
  v55 = (const void *)v54[5];
  v54[5] = (uint64_t)v53;
  if (v55) {
    _Block_release(v55);
  }
  v125[0] = MEMORY[0x1E4F143A8];
  v125[1] = 0x40000000;
  v125[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_185;
  v125[3] = &unk_1E6195B18;
  v125[4] = &buf;
  v56 = _Block_copy(v125);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB95B8];
  v57 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB95B8], v143);
  v58 = (const void *)v57[5];
  v57[5] = (uint64_t)v56;
  if (v58) {
    _Block_release(v58);
  }
  v124[0] = MEMORY[0x1E4F143A8];
  v124[1] = 0x40000000;
  v124[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_191;
  v124[3] = &unk_1E6195B40;
  v124[4] = &buf;
  v59 = _Block_copy(v124);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9518];
  v60 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9518], v143);
  v61 = (const void *)v60[5];
  v60[5] = (uint64_t)v59;
  if (v61) {
    _Block_release(v61);
  }
  v123[0] = MEMORY[0x1E4F143A8];
  v123[1] = 0x40000000;
  v123[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_198;
  v123[3] = &unk_1E6195B68;
  v123[4] = &buf;
  v62 = _Block_copy(v123);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB95F0];
  v63 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB95F0], v143);
  v64 = (const void *)v63[5];
  v63[5] = (uint64_t)v62;
  if (v64) {
    _Block_release(v64);
  }
  v122[0] = MEMORY[0x1E4F143A8];
  v122[1] = 0x40000000;
  v122[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_205;
  v122[3] = &unk_1E6195B90;
  v122[4] = &buf;
  v65 = _Block_copy(v122);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB99B8];
  v66 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB99B8], v143);
  v67 = (const void *)v66[5];
  v66[5] = (uint64_t)v65;
  if (v67) {
    _Block_release(v67);
  }
  v121[0] = MEMORY[0x1E4F143A8];
  v121[1] = 0x40000000;
  v121[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_212;
  v121[3] = &unk_1E6195BB8;
  v121[4] = &buf;
  v68 = _Block_copy(v121);
  v143[0] = (uint64_t *)MEMORY[0x1E4FB9918];
  v69 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v141, MEMORY[0x1E4FB9918], v143);
  v70 = (const void *)v69[5];
  v69[5] = (uint64_t)v68;
  if (v70) {
    _Block_release(v70);
  }
  v71 = *a2;
  v119 = v71;
  unint64_t v120 = 0xAAAAAAAAAAAAAAAALL;
  if (v71) {
    CFRetain(v71);
  }
  v117 = 0;
  uint64_t v118 = 0;
  v116 = &v117;
  v72 = v141;
  if (v141 != (uint64_t *)v142)
  {
    while (1)
    {
      v73 = v117;
      if (v116 == &v117)
      {
        v75 = &v117;
      }
      else
      {
        v74 = &v117;
        if (v117)
        {
          do
          {
            v75 = (uint64_t **)v73;
            v73 = (uint64_t *)v73[1];
          }
          while (v73);
        }
        else
        {
          do
          {
            v75 = (uint64_t **)v74[2];
            BOOL v76 = *v75 == (uint64_t *)v74;
            v74 = v75;
          }
          while (v76);
        }
        CFComparisonResult v77 = CFStringCompare((CFStringRef)v75[4], (CFStringRef)v72[4], 0);
        v73 = v117;
        if ((v77 & 0x8000000000000000) == 0)
        {
          v78 = &v117;
          v79 = &v117;
          if (!v117) {
            goto LABEL_69;
          }
          v78 = &v117;
          while (1)
          {
            while (1)
            {
              v79 = (uint64_t **)v73;
              if ((CFStringCompare((CFStringRef)v72[4], (CFStringRef)v73[4], 0) & 0x8000000000000000) == 0) {
                break;
              }
              v73 = *v79;
              v78 = v79;
              if (!*v79) {
                goto LABEL_69;
              }
            }
            if ((CFStringCompare((CFStringRef)v79[4], (CFStringRef)v72[4], 0) & 0x8000000000000000) == 0) {
              goto LABEL_66;
            }
            v78 = v79 + 1;
            v73 = v79[1];
            if (!v73) {
              goto LABEL_69;
            }
          }
        }
      }
      v78 = &v117;
      v79 = &v117;
      if (!v73) {
        goto LABEL_69;
      }
      v78 = v75 + 1;
      v79 = v75;
LABEL_66:
      if (*v78)
      {
        v80 = (uint64_t *)v72[1];
        if (!v80) {
          goto LABEL_76;
        }
        goto LABEL_74;
      }
LABEL_69:
      v81 = (uint64_t *)operator new(0x30uLL);
      v81[4] = v72[4];
      v82 = (void *)v72[5];
      if (v82) {
        v82 = _Block_copy(v82);
      }
      v81[5] = (uint64_t)v82;
      uint64_t *v81 = 0;
      v81[1] = 0;
      v81[2] = (uint64_t)v79;
      *v78 = v81;
      if (*v116)
      {
        v116 = (uint64_t **)*v116;
        v81 = *v78;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v117, v81);
      ++v118;
      v80 = (uint64_t *)v72[1];
      if (!v80)
      {
        do
        {
LABEL_76:
          v83 = (uint64_t *)v72[2];
          BOOL v76 = *v83 == (void)v72;
          v72 = v83;
        }
        while (!v76);
        goto LABEL_49;
      }
      do
      {
LABEL_74:
        v83 = v80;
        v80 = (uint64_t *)*v80;
      }
      while (v80);
LABEL_49:
      v72 = v83;
      if (v83 == (uint64_t *)v142)
      {
        v71 = v119;
        break;
      }
    }
  }
  unint64_t Count = CFDictionaryGetCount((CFDictionaryRef)v71);
  unint64_t v85 = Count;
  if ((Count & 0x8000000000000000) != 0)
  {
    unint64_t v120 = 0;
  }
  else
  {
    if (Count)
    {
      if (Count >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      v86 = operator new(8 * Count);
      bzero(v86, 8 * v85);
      v87 = operator new(8 * v85);
      bzero(v87, 8 * v85);
    }
    else
    {
      v86 = 0;
      v87 = 0;
    }
    v105 = v71;
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v71, (const void **)v86, (const void **)v87);
    if (v85)
    {
      for (uint64_t i = 0; i != v85; ++i)
      {
        CFStringRef v89 = (const __CFString *)*((void *)v86 + i);
        v90 = (const void *)*((void *)v87 + i);
        v111 = v90;
        if (v90) {
          CFRetain(v90);
        }
        v91 = v117;
        if (v117)
        {
          v92 = &v117;
          do
          {
            v93 = v91;
            v94 = v92;
            CFComparisonResult v95 = CFStringCompare((CFStringRef)v91[4], v89, 0);
            uint64_t v96 = v95;
            v97 = (uint64_t **)(v93 + 1);
            if (v95 < kCFCompareEqualTo)
            {
              v92 = v94;
            }
            else
            {
              v97 = (uint64_t **)v93;
              v92 = (uint64_t **)v93;
            }
            v91 = *v97;
          }
          while (v91);
          if (v92 != &v117)
          {
            v98 = v95 >= kCFCompareEqualTo ? v93 : (uint64_t *)v94;
            if ((CFStringCompare(v89, (CFStringRef)v98[4], 0) & 0x8000000000000000) == 0)
            {
              if (v96 >= 0) {
                v99 = v93;
              }
              else {
                v99 = v94;
              }
              uint64_t v100 = v99[5];
              v143[0] = (uint64_t *)v90;
              if (v90) {
                CFRetain(v90);
              }
              (*(void (**)(uint64_t, uint64_t **))(v100 + 16))(v100, v143);
              if (v143[0]) {
                CFRelease(v143[0]);
              }
            }
          }
        }
        if (v90) {
          CFRelease(v90);
        }
      }
    }
    unint64_t v120 = 0;
    if (v87) {
      operator delete(v87);
    }
    v71 = v105;
    if (v86) {
      operator delete(v86);
    }
  }
  std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(v117);
  if (v71) {
    CFRelease(v71);
  }
  v111 = (const void *)(v106 + 192);
  uint64_t v112 = QMIServiceMsg::create();
  int v113 = 25000;
  uint64_t v114 = 0;
  v115 = 0;
  v108[0] = MEMORY[0x1E4F143A8];
  v108[1] = 1174405120;
  v108[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_219;
  v108[3] = &__block_descriptor_tmp_223_0;
  v108[4] = v106;
  v101 = *(void **)v107;
  if (*(void *)v107) {
    v101 = _Block_copy(v101);
  }
  v102 = *(NSObject **)(v107 + 8);
  v109 = v101;
  dispatch_object_t object = v102;
  if (v102) {
    dispatch_retain(v102);
  }
  v143[0] = (uint64_t *)MEMORY[0x1E4F143A8];
  v143[1] = (uint64_t *)0x40000000;
  v143[2] = (uint64_t *)___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetPolicy8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v143[3] = (uint64_t *)&unk_1E6195DF0;
  v143[4] = v108;
  v103 = _Block_copy(v143);
  v115 = v103;
  if (v112)
  {
    qmi::Client::send();
    v103 = v115;
  }
  if (v103) {
    _Block_release(v103);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v109) {
    _Block_release(v109);
  }
  _Block_object_dispose(&buf, 8);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v148);
  std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(v142[0]);
}

void sub_1B8B02478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,const void *a29,__int16 a30,char a31,char a32)
{
  operator delete(v32);
  std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(a27);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a29);
  _Block_object_dispose((const void *)(v34 - 192), 8);
  qmi::MutableMessageBase::~MutableMessageBase(v33);
  std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(*(void **)(v34 - 248));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(uint64_t **a1, CFStringRef *a2, uint64_t **a3)
{
  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = (uint64_t)(a1 + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = **a3;
    v9[5] = 0;
    uint64_t *v9 = 0;
    v9[1] = 0;
    v9[2] = v8;
    NSObject *v6 = v9;
    v10 = (uint64_t *)**a1;
    v11 = v9;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v9;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t)v5;
      if ((CFStringCompare(*a2, (CFStringRef)v5[4], 0) & 0x8000000000000000) == 0) {
        break;
      }
      v5 = *(uint64_t **)v8;
      v6 = (uint64_t **)v8;
      if (!*(void *)v8) {
        goto LABEL_9;
      }
    }
    if ((CFStringCompare(*(CFStringRef *)(v8 + 32), *a2, 0) & 0x8000000000000000) == 0) {
      break;
    }
    v6 = (uint64_t **)(v8 + 8);
    v5 = *(uint64_t **)(v8 + 8);
    if (!v5) {
      goto LABEL_9;
    }
  }
  v9 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v9;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        uint64_t *v9 = v2;
        *(void *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    unsigned char *v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  uint64_t *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void coex::QMICommandDriver::set_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  int v8 = dispatch_group_create();
  v9 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
  }
  v190[0] = 0;
  v190[1] = v190;
  v190[2] = 0x3802000000;
  v190[3] = __Block_byref_object_copy__9;
  v190[4] = __Block_byref_object_dispose__9;
  v191 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v192 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = *(void **)a4;
  if (*(void *)a4) {
    uint64_t v10 = _Block_copy(v10);
  }
  uint64_t v11 = *(NSObject **)(a4 + 8);
  v191 = v10;
  dispatch_object_t v192 = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  v188 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v189 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex16QMICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  aBlock[3] = &unk_1F12664C0;
  dispatch_object_t v187 = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v187);
  }
  aBlock[4] = v190;
  uint64_t v12 = _Block_copy(aBlock);
  v13 = *(NSObject **)(a1 + 88);
  if (v13) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  if (v12)
  {
    uint64_t v14 = _Block_copy(v12);
    v188 = v14;
    dispatch_object_t v189 = v13;
    if (!v13) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v14 = 0;
  v188 = 0;
  dispatch_object_t v189 = v13;
  if (v13)
  {
LABEL_13:
    dispatch_retain(v13);
    dispatch_release(v13);
  }
LABEL_14:
  if (v12) {
    _Block_release(v12);
  }
  v185[0] = 0xAAAAAAAAAAAAAAAALL;
  v185[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v185, *a2);
  v16 = (const void *)(*(uint64_t (**)(uint64_t, void))v185[0])(v15, *MEMORY[0x1E4FB9800]);
  v17 = v16;
  if (v16)
  {
    CFTypeID v18 = CFGetTypeID(v16);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFRelease(v17);
    if (v18 == TypeID) {
      goto LABEL_20;
    }
  }
  v20 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9690]);
  v21 = v20;
  if (v20)
  {
    CFTypeID v22 = CFGetTypeID(v20);
    CFTypeID v23 = CFDictionaryGetTypeID();
    CFRelease(v21);
    if (v22 == v23)
    {
LABEL_20:
      CFDictionaryRef v24 = *a2;
      CFDictionaryRef v184 = v24;
      if (v24) {
        CFRetain(v24);
      }
      if (v14)
      {
        v25 = _Block_copy(v14);
        v182 = v25;
        v183 = v13;
        if (!v13)
        {
LABEL_25:
          coex::QMICommandDriver::setWLANState_sync(a1, &v184, (uint64_t)&v182);
          if (v13) {
            dispatch_release(v13);
          }
          if (v25) {
            _Block_release(v25);
          }
          if (v24) {
            CFRelease(v24);
          }
          goto LABEL_31;
        }
      }
      else
      {
        v25 = 0;
        v182 = 0;
        v183 = v13;
        if (!v13) {
          goto LABEL_25;
        }
      }
      dispatch_retain(v13);
      goto LABEL_25;
    }
  }
LABEL_31:
  v26 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9568]);
  v27 = v26;
  if (!v26) {
    goto LABEL_41;
  }
  CFTypeID v28 = CFGetTypeID(v26);
  CFTypeID v29 = CFDictionaryGetTypeID();
  CFRelease(v27);
  if (v28 != v29) {
    goto LABEL_41;
  }
  v181 = v27;
  CFRetain(v27);
  if (!v14)
  {
    v30 = 0;
    v179 = 0;
    v180 = v13;
    if (!v13) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v30 = _Block_copy(v14);
  v179 = v30;
  v180 = v13;
  if (v13) {
LABEL_35:
  }
    dispatch_retain(v13);
LABEL_36:
  coex::QMICommandDriver::setPolicy_sync(a1, &v181, (uint64_t)&v179);
  if (v13) {
    dispatch_release(v13);
  }
  if (v30) {
    _Block_release(v30);
  }
  CFRelease(v27);
LABEL_41:
  v31 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB95D8]);
  v32 = v31;
  if (!v31) {
    goto LABEL_51;
  }
  CFTypeID v33 = CFGetTypeID(v31);
  CFTypeID v34 = CFDictionaryGetTypeID();
  CFRelease(v32);
  if (v33 != v34) {
    goto LABEL_51;
  }
  CFDictionaryRef v178 = (const __CFDictionary *)v32;
  CFRetain(v32);
  if (!v14)
  {
    v35 = 0;
    v176 = 0;
    v177 = v13;
    if (!v13) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  v35 = _Block_copy(v14);
  v176 = v35;
  v177 = v13;
  if (v13) {
LABEL_45:
  }
    dispatch_retain(v13);
LABEL_46:
  coex::QMICommandDriver::setBLER_sync(a1, &v178, (uint64_t)&v176);
  if (v13) {
    dispatch_release(v13);
  }
  if (v35) {
    _Block_release(v35);
  }
  CFRelease(v32);
LABEL_51:
  v36 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB95E8]);
  v37 = v36;
  if (!v36) {
    goto LABEL_61;
  }
  CFTypeID v38 = CFGetTypeID(v36);
  CFTypeID v39 = CFDictionaryGetTypeID();
  CFRelease(v37);
  if (v38 != v39) {
    goto LABEL_61;
  }
  CFDictionaryRef v175 = (const __CFDictionary *)v37;
  CFRetain(v37);
  if (!v14)
  {
    v40 = 0;
    v173 = 0;
    v174 = v13;
    if (!v13) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  v40 = _Block_copy(v14);
  v173 = v40;
  v174 = v13;
  if (v13) {
LABEL_55:
  }
    dispatch_retain(v13);
LABEL_56:
  coex::QMICommandDriver::setSINR_sync(a1, &v175, (uint64_t)&v173);
  if (v13) {
    dispatch_release(v13);
  }
  if (v40) {
    _Block_release(v40);
  }
  CFRelease(v37);
LABEL_61:
  v41 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9640]);
  v42 = v41;
  if (!v41) {
    goto LABEL_71;
  }
  CFTypeID v43 = CFGetTypeID(v41);
  CFTypeID v44 = CFDictionaryGetTypeID();
  CFRelease(v42);
  if (v43 != v44) {
    goto LABEL_71;
  }
  CFDictionaryRef v172 = (const __CFDictionary *)v42;
  CFRetain(v42);
  if (!v14)
  {
    v45 = 0;
    v170 = 0;
    v171 = v13;
    if (!v13) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  v45 = _Block_copy(v14);
  v170 = v45;
  v171 = v13;
  if (v13) {
LABEL_65:
  }
    dispatch_retain(v13);
LABEL_66:
  coex::QMICommandDriver::setBandFilterInfo_sync(a1, &v172, a3, (uint64_t)&v170);
  if (v13) {
    dispatch_release(v13);
  }
  if (v45) {
    _Block_release(v45);
  }
  CFRelease(v42);
LABEL_71:
  v46 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB97D0]);
  v47 = v46;
  if (!v46) {
    goto LABEL_81;
  }
  CFTypeID v48 = CFGetTypeID(v46);
  CFTypeID v49 = CFDictionaryGetTypeID();
  CFRelease(v47);
  if (v48 != v49) {
    goto LABEL_81;
  }
  CFDictionaryRef v169 = (const __CFDictionary *)v47;
  CFRetain(v47);
  if (!v14)
  {
    v50 = 0;
    v167 = 0;
    v168 = v13;
    if (!v13) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  v50 = _Block_copy(v14);
  v167 = v50;
  v168 = v13;
  if (v13) {
LABEL_75:
  }
    dispatch_retain(v13);
LABEL_76:
  coex::QMICommandDriver::setScanFreqBandFilter_sync(a1, &v169, a3, (uint64_t)&v167);
  if (v13) {
    dispatch_release(v13);
  }
  if (v50) {
    _Block_release(v50);
  }
  CFRelease(v47);
LABEL_81:
  v51 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9620]);
  v52 = v51;
  if (!v51) {
    goto LABEL_91;
  }
  CFTypeID v53 = CFGetTypeID(v51);
  CFTypeID v54 = CFDictionaryGetTypeID();
  CFRelease(v52);
  if (v53 != v54) {
    goto LABEL_91;
  }
  v166 = v52;
  v55 = (void *)CFRetain(v52);
  if (!v14)
  {
    v57 = 0;
    v164 = 0;
    v165 = v13;
    if (!v13) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  v55 = _Block_copy(v14);
  v57 = v55;
  v164 = v55;
  v165 = v13;
  if (v13) {
LABEL_85:
  }
    dispatch_retain(v13);
LABEL_86:
  coex::QMICommandDriver::setWiFiStatus_sync((uint64_t)v55, v56, (uint64_t)&v164);
  if (v13) {
    dispatch_release(v13);
  }
  if (v57) {
    _Block_release(v57);
  }
  CFRelease(v52);
LABEL_91:
  v58 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB95E0]);
  v59 = v58;
  if (!v58) {
    goto LABEL_101;
  }
  CFTypeID v60 = CFGetTypeID(v58);
  CFTypeID v61 = CFDictionaryGetTypeID();
  CFRelease(v59);
  if (v60 != v61) {
    goto LABEL_101;
  }
  CFDictionaryRef v163 = (const __CFDictionary *)v59;
  CFRetain(v59);
  if (!v14)
  {
    v63 = 0;
    v161 = 0;
    v162 = v13;
    if (!v13) {
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  v63 = _Block_copy(v14);
  v161 = v63;
  v162 = v13;
  if (v13) {
LABEL_95:
  }
    dispatch_retain(v13);
LABEL_96:
  coex::QMICommandDriver::setLAAConfig_sync(a1, &v163, v62, (uint64_t)&v161);
  if (v13) {
    dispatch_release(v13);
  }
  if (v63) {
    _Block_release(v63);
  }
  CFRelease(v59);
LABEL_101:
  v64 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB96E0]);
  v65 = v64;
  if (!v64) {
    goto LABEL_111;
  }
  CFTypeID v66 = CFGetTypeID(v64);
  CFTypeID v67 = CFDictionaryGetTypeID();
  CFRelease(v65);
  if (v66 != v67) {
    goto LABEL_111;
  }
  CFDictionaryRef v160 = (const __CFDictionary *)v65;
  CFRetain(v65);
  if (!v14)
  {
    v68 = 0;
    v158 = 0;
    v159 = v13;
    if (!v13) {
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  v68 = _Block_copy(v14);
  v158 = v68;
  v159 = v13;
  if (v13) {
LABEL_105:
  }
    dispatch_retain(v13);
LABEL_106:
  coex::QMICommandDriver::setTimeShareConfig_sync(a1, &v160, (uint64_t)&v158);
  if (v13) {
    dispatch_release(v13);
  }
  if (v68) {
    _Block_release(v68);
  }
  CFRelease(v65);
LABEL_111:
  v69 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9678]);
  v70 = v69;
  if (v69)
  {
    CFTypeID v71 = CFGetTypeID(v69);
    CFTypeID v72 = CFDictionaryGetTypeID();
    CFRelease(v70);
    if (v71 == v72)
    {
      CFDictionaryRef v157 = (const __CFDictionary *)v70;
      CFRetain(v70);
      if (v14) {
        uint64_t v14 = _Block_copy(v14);
      }
      v156[0] = v14;
      v156[1] = v13;
      if (v13) {
        dispatch_retain(v13);
      }
      coex::QMICommandDriver::setWCI2TxAntMap_sync(a1, &v157, (uint64_t)v156);
      if (v13) {
        dispatch_release(v13);
      }
      if (v14) {
        _Block_release(v14);
      }
      CFRelease(v70);
    }
  }
  v73 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9638]);
  v74 = v73;
  if (v73)
  {
    CFTypeID v75 = CFGetTypeID(v73);
    CFTypeID v76 = CFDictionaryGetTypeID();
    CFRelease(v74);
    if (v75 == v76)
    {
      CFDictionaryRef v155 = (const __CFDictionary *)v74;
      CFRetain(v74);
      if (v188)
      {
        CFComparisonResult v77 = _Block_copy(v188);
        v78 = v189;
        v153 = v77;
        dispatch_object_t v154 = v189;
        if (!v189)
        {
LABEL_127:
          coex::QMICommandDriver::setAntBlocking_sync(a1, &v155, (uint64_t)&v153);
          if (v78) {
            dispatch_release(v78);
          }
          if (v77) {
            _Block_release(v77);
          }
          CFRelease(v74);
          goto LABEL_132;
        }
      }
      else
      {
        CFComparisonResult v77 = 0;
        v78 = v189;
        v153 = 0;
        dispatch_object_t v154 = v189;
        if (!v189) {
          goto LABEL_127;
        }
      }
      dispatch_retain(v78);
      goto LABEL_127;
    }
  }
LABEL_132:
  v79 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9760]);
  v80 = v79;
  if (!v79) {
    goto LABEL_142;
  }
  CFTypeID v81 = CFGetTypeID(v79);
  CFTypeID v82 = CFDictionaryGetTypeID();
  CFRelease(v80);
  if (v81 != v82) {
    goto LABEL_142;
  }
  CFDictionaryRef v152 = (const __CFDictionary *)v80;
  CFRetain(v80);
  if (!v188)
  {
    v83 = 0;
    v84 = v189;
    v150 = 0;
    dispatch_object_t v151 = v189;
    if (!v189) {
      goto LABEL_137;
    }
    goto LABEL_136;
  }
  v83 = _Block_copy(v188);
  v84 = v189;
  v150 = v83;
  dispatch_object_t v151 = v189;
  if (v189) {
LABEL_136:
  }
    dispatch_retain(v84);
LABEL_137:
  coex::QMICommandDriver::setClientAntBlocking_sync(a1, &v152, (uint64_t)&v150);
  if (v84) {
    dispatch_release(v84);
  }
  if (v83) {
    _Block_release(v83);
  }
  CFRelease(v80);
LABEL_142:
  unint64_t v85 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9938]);
  v86 = v85;
  if (!v85) {
    goto LABEL_152;
  }
  CFTypeID v87 = CFGetTypeID(v85);
  CFTypeID v88 = CFDictionaryGetTypeID();
  CFRelease(v86);
  if (v87 != v88) {
    goto LABEL_152;
  }
  CFDictionaryRef v149 = (const __CFDictionary *)v86;
  CFRetain(v86);
  if (!v188)
  {
    CFStringRef v89 = 0;
    v90 = v189;
    v147 = 0;
    dispatch_object_t v148 = v189;
    if (!v189) {
      goto LABEL_147;
    }
    goto LABEL_146;
  }
  CFStringRef v89 = _Block_copy(v188);
  v90 = v189;
  v147 = v89;
  dispatch_object_t v148 = v189;
  if (v189) {
LABEL_146:
  }
    dispatch_retain(v90);
LABEL_147:
  coex::QMICommandDriver::setClientAntBlockingExtended_sync(a1, &v149, (uint64_t)&v147);
  if (v90) {
    dispatch_release(v90);
  }
  if (v89) {
    _Block_release(v89);
  }
  CFRelease(v86);
LABEL_152:
  v91 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB98B0]);
  v92 = v91;
  if (!v91) {
    goto LABEL_162;
  }
  CFTypeID v93 = CFGetTypeID(v91);
  CFTypeID v94 = CFDictionaryGetTypeID();
  CFRelease(v92);
  if (v93 != v94) {
    goto LABEL_162;
  }
  CFDictionaryRef v146 = (const __CFDictionary *)v92;
  CFRetain(v92);
  if (!v188)
  {
    CFComparisonResult v95 = 0;
    uint64_t v96 = v189;
    v144 = 0;
    dispatch_object_t v145 = v189;
    if (!v189) {
      goto LABEL_157;
    }
    goto LABEL_156;
  }
  CFComparisonResult v95 = _Block_copy(v188);
  uint64_t v96 = v189;
  v144 = v95;
  dispatch_object_t v145 = v189;
  if (v189) {
LABEL_156:
  }
    dispatch_retain(v96);
LABEL_157:
  coex::QMICommandDriver::sendTransparentMessageReq_sync(a1, &v146, (uint64_t)&v144);
  if (v96) {
    dispatch_release(v96);
  }
  if (v95) {
    _Block_release(v95);
  }
  CFRelease(v92);
LABEL_162:
  v97 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB96E8]);
  v98 = v97;
  if (!v97) {
    goto LABEL_172;
  }
  CFTypeID v99 = CFGetTypeID(v97);
  CFTypeID v100 = CFDictionaryGetTypeID();
  CFRelease(v98);
  if (v99 != v100) {
    goto LABEL_172;
  }
  CFDictionaryRef v143 = (const __CFDictionary *)v98;
  CFRetain(v98);
  if (!v188)
  {
    v101 = 0;
    v102 = v189;
    v141 = 0;
    dispatch_object_t v142 = v189;
    if (!v189) {
      goto LABEL_167;
    }
    goto LABEL_166;
  }
  v101 = _Block_copy(v188);
  v102 = v189;
  v141 = v101;
  dispatch_object_t v142 = v189;
  if (v189) {
LABEL_166:
  }
    dispatch_retain(v102);
LABEL_167:
  coex::QMICommandDriver::setTriggerAntennaBlocking_sync(a1, &v143, (uint64_t)&v141);
  if (v102) {
    dispatch_release(v102);
  }
  if (v101) {
    _Block_release(v101);
  }
  CFRelease(v98);
LABEL_172:
  v103 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9558]);
  v104 = v103;
  if (!v103) {
    goto LABEL_182;
  }
  CFTypeID v105 = CFGetTypeID(v103);
  CFTypeID v106 = CFDictionaryGetTypeID();
  CFRelease(v104);
  if (v105 != v106) {
    goto LABEL_182;
  }
  CFDictionaryRef v140 = (const __CFDictionary *)v104;
  CFRetain(v104);
  if (!v188)
  {
    uint64_t v107 = 0;
    v108 = v189;
    v138 = 0;
    dispatch_object_t v139 = v189;
    if (!v189) {
      goto LABEL_177;
    }
    goto LABEL_176;
  }
  uint64_t v107 = _Block_copy(v188);
  v108 = v189;
  v138 = v107;
  dispatch_object_t v139 = v189;
  if (v189) {
LABEL_176:
  }
    dispatch_retain(v108);
LABEL_177:
  coex::QMICommandDriver::setCC1_sync(a1, &v140, (uint64_t)&v138);
  if (v108) {
    dispatch_release(v108);
  }
  if (v107) {
    _Block_release(v107);
  }
  CFRelease(v104);
LABEL_182:
  v109 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9560]);
  v110 = v109;
  if (!v109) {
    goto LABEL_192;
  }
  CFTypeID v111 = CFGetTypeID(v109);
  CFTypeID v112 = CFDictionaryGetTypeID();
  CFRelease(v110);
  if (v111 != v112) {
    goto LABEL_192;
  }
  CFDictionaryRef v137 = (const __CFDictionary *)v110;
  CFRetain(v110);
  if (!v188)
  {
    int v113 = 0;
    uint64_t v114 = v189;
    v135 = 0;
    dispatch_object_t v136 = v189;
    if (!v189) {
      goto LABEL_187;
    }
    goto LABEL_186;
  }
  int v113 = _Block_copy(v188);
  uint64_t v114 = v189;
  v135 = v113;
  dispatch_object_t v136 = v189;
  if (v189) {
LABEL_186:
  }
    dispatch_retain(v114);
LABEL_187:
  coex::QMICommandDriver::setCC2_sync(a1, &v137, (uint64_t)&v135);
  if (v114) {
    dispatch_release(v114);
  }
  if (v113) {
    _Block_release(v113);
  }
  CFRelease(v110);
LABEL_192:
  v115 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB97C8]);
  v116 = v115;
  if (!v115) {
    goto LABEL_202;
  }
  CFTypeID v117 = CFGetTypeID(v115);
  CFTypeID v118 = CFDictionaryGetTypeID();
  CFRelease(v116);
  if (v117 != v118) {
    goto LABEL_202;
  }
  CFDictionaryRef v134 = (const __CFDictionary *)v116;
  CFRetain(v116);
  if (!v188)
  {
    v119 = 0;
    unint64_t v120 = v189;
    v132 = 0;
    dispatch_object_t v133 = v189;
    if (!v189) {
      goto LABEL_197;
    }
    goto LABEL_196;
  }
  v119 = _Block_copy(v188);
  unint64_t v120 = v189;
  v132 = v119;
  dispatch_object_t v133 = v189;
  if (v189) {
LABEL_196:
  }
    dispatch_retain(v120);
LABEL_197:
  coex::QMICommandDriver::setLaaGpioThrottle_sync(a1, &v134, (uint64_t)&v132);
  if (v120) {
    dispatch_release(v120);
  }
  if (v119) {
    _Block_release(v119);
  }
  CFRelease(v116);
LABEL_202:
  v121 = (const void *)(*(uint64_t (**)(void *, void))v185[0])(v185, *MEMORY[0x1E4FB9688]);
  v122 = v121;
  if (!v121) {
    goto LABEL_212;
  }
  CFTypeID v123 = CFGetTypeID(v121);
  CFTypeID v124 = CFDictionaryGetTypeID();
  CFRelease(v122);
  if (v123 != v124) {
    goto LABEL_212;
  }
  CFDictionaryRef v131 = (const __CFDictionary *)v122;
  CFRetain(v122);
  if (!v188)
  {
    v125 = 0;
    v126 = v189;
    v129 = 0;
    dispatch_object_t v130 = v189;
    if (!v189) {
      goto LABEL_207;
    }
    goto LABEL_206;
  }
  v125 = _Block_copy(v188);
  v126 = v189;
  v129 = v125;
  dispatch_object_t v130 = v189;
  if (v189) {
LABEL_206:
  }
    dispatch_retain(v126);
LABEL_207:
  coex::QMICommandDriver::setGnssParams_sync(a1, &v131, (uint64_t)&v129);
  if (v126) {
    dispatch_release(v126);
  }
  if (v125) {
    _Block_release(v125);
  }
  CFRelease(v122);
LABEL_212:
  v127 = *(NSObject **)(a1 + 88);
  v128[0] = MEMORY[0x1E4F143A8];
  v128[1] = 0x40000000;
  v128[2] = ___ZN4coex16QMICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_31;
  v128[3] = &unk_1E6195718;
  v128[4] = v190;
  dispatch_group_notify(v9, v127, v128);
  MEMORY[0x1BA9C7760](v185);
  if (v189) {
    dispatch_release(v189);
  }
  if (v188) {
    _Block_release(v188);
  }
  if (v187)
  {
    dispatch_group_leave(v187);
    if (v187) {
      dispatch_release(v187);
    }
  }
  _Block_object_dispose(v190, 8);
  if (v192) {
    dispatch_release(v192);
  }
  if (v191) {
    _Block_release(v191);
  }
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
    dispatch_release(v9);
  }
}

void sub_1B8B03DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  MEMORY[0x1BA9C7760](v8 - 224);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)(v8 - 160));
  uint64_t v10 = *(NSObject **)(v8 - 168);
  if (v10)
  {
    dispatch_group_leave(v10);
    uint64_t v11 = *(NSObject **)(v8 - 168);
    if (v11) {
      dispatch_release(v11);
    }
  }
  _Block_object_dispose((const void *)(v8 - 144), 8);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)(v7 + 40));
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
    dispatch_release(v6);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(*a1);
    std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(a1[1]);
    uint64_t v2 = (const void *)a1[5];
    if (v2) {
      _Block_release(v2);
    }
    operator delete(a1);
  }
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_185(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v9 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_3;
  uint64_t v10 = &__block_descriptor_tmp_189_0;
  v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  if (v4 != v5)
  {
    while (*((unsigned char *)*v4 + 8) != 35)
    {
      if (++v4 == v5) {
        goto LABEL_10;
      }
    }
  }
  if (v4 == v5)
  {
LABEL_10:
    uint64_t v7 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(v2 + 5, 35);
  }
  else
  {
    if (!v6) {
      __cxa_bad_cast();
    }
    uint64_t v7 = v6 + 12;
  }
  v9((CFTypeID)v8, v7);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B04288(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_3(CFTypeID result, _DWORD *a2)
{
  v3 = *(unsigned int **)(result + 32);
  int v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), CFTypeRef result = CFNumberGetTypeID(), v4 == result))
  {
    CFTypeRef result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_99(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  v30 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_100;
  v31 = &__block_descriptor_tmp_104_0;
  v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFNumberRef v5 = (const void **)v2[7];
  int v6 = v4;
  if (v4 != v5)
  {
    int v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 19)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 19;
    *(void *)v9 = &unk_1F1268000;
    *((_DWORD *)v9 + 3) = 0;
    uint64_t v8 = v9 + 12;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      unsigned char *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v17 = operator new(8 * v16);
      CFTypeID v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v17 = 0;
      CFTypeID v18 = (void *)(8 * v13);
      v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeID v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    CFTypeID v18 = (void *)((char *)v18 - v22);
    CFDictionaryRef v24 = &v17[8 * v13 - 16];
    v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFNumberRef v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--CFTypeID v18 = v28;
      }
      while (v5 != v4);
    }
    CFTypeID v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = v7 + 12;
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_100(CFTypeID result, _DWORD *a2)
{
  v3 = *(unsigned int **)(result + 32);
  int v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), CFTypeRef result = CFNumberGetTypeID(), v4 == result))
  {
    CFTypeRef result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_92(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  v30 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_93;
  v31 = &__block_descriptor_tmp_97_2;
  v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFNumberRef v5 = (const void **)v2[7];
  int v6 = v4;
  if (v4 != v5)
  {
    int v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 18)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 18;
    *(void *)v9 = &unk_1F1267FB0;
    *((_DWORD *)v9 + 3) = 0;
    uint64_t v8 = v9 + 12;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      unsigned char *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v17 = operator new(8 * v16);
      CFTypeID v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v17 = 0;
      CFTypeID v18 = (void *)(8 * v13);
      v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeID v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    CFTypeID v18 = (void *)((char *)v18 - v22);
    CFDictionaryRef v24 = &v17[8 * v13 - 16];
    v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFNumberRef v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--CFTypeID v18 = v28;
      }
      while (v5 != v4);
    }
    CFTypeID v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = v7 + 12;
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B04990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_93(CFTypeID result, _DWORD *a2)
{
  v3 = *(unsigned int **)(result + 32);
  int v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), CFTypeRef result = CFNumberGetTypeID(), v4 == result))
  {
    CFTypeRef result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_85(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_86;
  v31 = &__block_descriptor_tmp_90_1;
  v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFNumberRef v5 = (const void **)v2[7];
  int v6 = v4;
  if (v4 != v5)
  {
    int v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 17)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[4] = 17;
    *(void *)v9 = &unk_1F1267F60;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      unsigned char *v5 = v9;
      uint64_t v12 = (uint64_t)(v5 + 1);
LABEL_24:
      uint64_t v8 = (char *)v10 + 9;
      v2[7] = v12;
      goto LABEL_25;
    }
    int64_t v13 = (char *)v5 - (char *)v4;
    uint64_t v14 = v5 - v4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v11 - (void)v4;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      CFTypeID v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      uint64_t v20 = &v18[8 * v17];
      void *v19 = v10;
      uint64_t v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4) {
          goto LABEL_24;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      CFTypeID v18 = 0;
      v19 = (void *)(8 * v14);
      uint64_t v20 = 0;
      *(void *)(8 * v14) = v10;
      uint64_t v12 = 8 * v14 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v13 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v18) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeID v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (void *)((char *)v19 - v22);
    CFDictionaryRef v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFNumberRef v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    CFTypeID v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = v7 + 9;
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B04D04(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_86(CFTypeID result, unsigned char *a2)
{
  v3 = *(signed __int8 **)(result + 32);
  char v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), CFTypeRef result = CFNumberGetTypeID(), v4 == result))
  {
    CFTypeRef result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_212(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  v30 = (void (*)(uint64_t, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_213;
  v31 = &__block_descriptor_tmp_217_0;
  v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFNumberRef v5 = (const void **)v2[7];
  char v6 = v4;
  if (v4 != v5)
  {
    char v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 40)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v9 = operator new(0x18uLL);
    uint64_t v10 = v9;
    v9[8] = 40;
    *(void *)v9 = &unk_1F1268500;
    *((_DWORD *)v9 + 3) = 0;
    uint64_t v8 = v9 + 12;
    *((_DWORD *)v9 + 4) = 0;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      unsigned char *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      CFTypeID v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      CFTypeID v18 = (void *)(8 * v13);
      v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeID v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    CFTypeID v18 = (void *)((char *)v18 - v22);
    CFDictionaryRef v24 = &v17[8 * v13 - 16];
    v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFNumberRef v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--CFTypeID v18 = v28;
      }
      while (v5 != v4);
    }
    CFTypeID v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = v7 + 12;
LABEL_25:
  v30((uint64_t)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_213(uint64_t a1, _DWORD *a2)
{
  v3 = *(const void **)(a1 + 32);
  v7[2] = v3;
  if (v3)
  {
    CFRetain(v3);
    v7[0] = v3;
    CFRetain(v3);
    uint64_t v9 = 0;
    CFTypeID v4 = CFGetTypeID(v3);
    if (v4 == CFDictionaryGetTypeID())
    {
      CFRetain(v3);
      CFRetain(v3);
      CFRelease(v3);
      CFDictionaryRef v5 = (const __CFDictionary *)v3;
    }
    else
    {
      CFDictionaryRef v5 = 0;
    }
    CFDictionaryRef v8 = v5;
    CFRelease(v3);
    CFRelease(v3);
  }
  else
  {
    CFDictionaryRef v5 = 0;
    CFDictionaryRef v8 = 0;
  }
  if (v5) {
    char v6 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    char v6 = 0;
  }
  if (v6)
  {
    v7[0] = 0xAAAAAAAAAAAAAAAALL;
    v7[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v7, v5);
    *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v7, (const __CFString *)*MEMORY[0x1E4FB9590]);
    a2[1] = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v7, (const __CFString *)*MEMORY[0x1E4FB94F0]);
    MEMORY[0x1BA9C7760](v7);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8B051E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_198(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  uint64_t v9 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_199;
  uint64_t v10 = &__block_descriptor_tmp_203_0;
  v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFDictionaryRef v5 = (const void **)v2[7];
  if (v4 != v5)
  {
    while (*((unsigned char *)*v4 + 8) != 37)
    {
      if (++v4 == v5) {
        goto LABEL_10;
      }
    }
  }
  if (v4 == v5)
  {
LABEL_10:
    uint64_t v7 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::TechInstance>(v2 + 5, 37);
  }
  else
  {
    if (!v6) {
      __cxa_bad_cast();
    }
    uint64_t v7 = v6 + 12;
  }
  v9((CFTypeID)v8, v7);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0538C(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_199(CFTypeID result, _DWORD *a2)
{
  v3 = *(unsigned int **)(result + 32);
  int v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), CFTypeRef result = CFNumberGetTypeID(), v4 == result))
  {
    CFTypeRef result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::TechInstance>(void *a1, char a2)
{
  CFTypeID v4 = operator new(0x10uLL);
  CFNumberRef v5 = v4;
  v4[8] = a2;
  *(void *)CFTypeID v4 = &unk_1F1268460;
  *((_DWORD *)v4 + 3) = 0;
  int v6 = v4 + 12;
  CFDictionaryRef v8 = (char *)a1[2];
  unint64_t v7 = a1[3];
  uint64_t v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(void *)CFDictionaryRef v8 = v4;
    uint64_t v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  unint64_t v11 = (char *)a1[1];
  uint64_t v12 = (v8 - v11) >> 3;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v7 - (void)v11;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v16 = (char *)operator new(8 * v15);
    unint64_t v17 = &v16[8 * v12];
    CFTypeID v18 = &v16[8 * v15];
    *(void *)unint64_t v17 = v5;
    uint64_t v10 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v11);
    if (v8 == v11) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  unint64_t v16 = 0;
  unint64_t v17 = (char *)(8 * v12);
  CFTypeID v18 = 0;
  *(void *)(8 * v12) = v5;
  uint64_t v10 = 8 * v12 + 8;
  v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v11 - v16) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v9 = &v8[-v22];
    v17 -= v22;
    CFTypeID v23 = &v16[8 * v12 - 16];
    CFDictionaryRef v24 = (long long *)(v8 - 16);
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)CFTypeID v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    uint64_t v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9) {
    operator delete(v9);
  }
LABEL_23:
  a1[2] = v10;
  return v6;
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(void *a1, char a2)
{
  CFTypeID v4 = operator new(0x10uLL);
  CFNumberRef v5 = v4;
  v4[8] = a2;
  *(void *)CFTypeID v4 = &unk_1F12683C0;
  *((_DWORD *)v4 + 3) = 0;
  int v6 = v4 + 12;
  CFDictionaryRef v8 = (char *)a1[2];
  unint64_t v7 = a1[3];
  uint64_t v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(void *)CFDictionaryRef v8 = v4;
    uint64_t v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  unint64_t v11 = (char *)a1[1];
  uint64_t v12 = (v8 - v11) >> 3;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v7 - (void)v11;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v16 = (char *)operator new(8 * v15);
    unint64_t v17 = &v16[8 * v12];
    CFTypeID v18 = &v16[8 * v15];
    *(void *)unint64_t v17 = v5;
    uint64_t v10 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v11);
    if (v8 == v11) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  unint64_t v16 = 0;
  unint64_t v17 = (char *)(8 * v12);
  CFTypeID v18 = 0;
  *(void *)(8 * v12) = v5;
  uint64_t v10 = 8 * v12 + 8;
  v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v11 - v16) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v9 = &v8[-v22];
    v17 -= v22;
    CFTypeID v23 = &v16[8 * v12 - 16];
    CFDictionaryRef v24 = (long long *)(v8 - 16);
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)CFTypeID v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    uint64_t v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9) {
    operator delete(v9);
  }
LABEL_23:
  a1[2] = v10;
  return v6;
}

uint64_t coex::QMICommandDriver::sendTransparentMessageReq_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v104 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v104;
    _os_log_debug_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEBUG, "#D Sending Coex transparent message: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v125[0] = 0xAAAAAAAAAAAAAAAALL;
  v125[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v125, *a2);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v6;
  long long v124 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  CFArrayRef v7 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v125, (const __CFString *)*MEMORY[0x1E4FB9998]);
  CFArrayRef theArray = v7;
  if (v7) {
    CFDictionaryRef v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    CFDictionaryRef v8 = 0;
  }
  if (!v8) {
    goto LABEL_134;
  }
  uint64_t v9 = (char *)__p[1];
  uint64_t v10 = (char *)v124;
  unint64_t v11 = (const void **)__p[1];
  uint64_t v106 = v4;
  if (__p[1] != (void *)v124)
  {
    unint64_t v11 = (const void **)__p[1];
    while (*((unsigned char *)*v11 + 8) != 16)
    {
      if (++v11 == (const void **)v124) {
        goto LABEL_15;
      }
    }
  }
  if (v11 == (const void **)v124)
  {
LABEL_15:
    unint64_t v13 = operator new(0x28uLL);
    uint64_t v14 = v13;
    v13[8] = 16;
    *(void *)unint64_t v13 = &unk_1F1268B70;
    *((void *)v13 + 2) = 0;
    unint64_t v15 = (char **)(v13 + 16);
    *((void *)v13 + 3) = 0;
    *((void *)v13 + 4) = 0;
    if ((unint64_t)v10 < *((void *)&v124 + 1))
    {
      *(void *)uint64_t v10 = v13;
      uint64_t v16 = (uint64_t)(v10 + 8);
LABEL_37:
      uint64_t v107 = v15;
      *(void *)&long long v124 = v16;
      goto LABEL_38;
    }
    unint64_t v17 = (char **)(v13 + 16);
    int64_t v18 = v10 - v9;
    uint64_t v19 = (v10 - v9) >> 3;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = *((void *)&v124 + 1) - (void)v9;
    if ((uint64_t)(*((void *)&v124 + 1) - (void)v9) >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      CFTypeID v23 = operator new(8 * v22);
      CFDictionaryRef v24 = &v23[8 * v19];
      uint64_t v25 = &v23[8 * v22];
      void *v24 = v14;
      uint64_t v16 = (uint64_t)(v24 + 1);
      if (v9 != v10)
      {
LABEL_26:
        if ((unint64_t)(v18 - 8) < 0x58) {
          goto LABEL_159;
        }
        if ((unint64_t)(v9 - v23) < 0x20) {
          goto LABEL_159;
        }
        unint64_t v26 = ((unint64_t)(v18 - 8) >> 3) + 1;
        uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v28 = &v10[-v27];
        CFDictionaryRef v24 = (void *)((char *)v24 - v27);
        CFTypeID v29 = &v23[8 * v19 - 16];
        v30 = v10 - 16;
        uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          _OWORD *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        uint64_t v10 = v28;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_159:
          do
          {
            uint64_t v33 = *((void *)v10 - 1);
            v10 -= 8;
            *--CFDictionaryRef v24 = v33;
          }
          while (v10 != v9);
        }
        uint64_t v9 = (char *)__p[1];
        __p[1] = v24;
        *(void *)&long long v124 = v16;
        *((void *)&v124 + 1) = v25;
        unint64_t v15 = v17;
        if (!v9) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
    else
    {
      CFTypeID v23 = 0;
      CFDictionaryRef v24 = (void *)(8 * v19);
      uint64_t v25 = 0;
      *(void *)(8 * v19) = v14;
      uint64_t v16 = 8 * v19 + 8;
      if (v9 != v10) {
        goto LABEL_26;
      }
    }
    __p[1] = v24;
    *(void *)&long long v124 = v16;
    *((void *)&v124 + 1) = v25;
    unint64_t v15 = v17;
    if (!v9) {
      goto LABEL_37;
    }
LABEL_36:
    operator delete(v9);
    goto LABEL_37;
  }
  if (!v12) {
    __cxa_bad_cast();
  }
  uint64_t v107 = (char **)(v12 + 16);
LABEL_38:
  CFIndex Count = CFArrayGetCount(v7);
  CFIndex v35 = Count;
  uint64_t v4 = v106;
  v36 = (void **)v107;
  if (Count >= 1)
  {
    CFIndex v37 = 0;
    CFStringRef v111 = (const __CFString *)*MEMORY[0x1E4FB9810];
    CFIndex v109 = Count;
    v110 = (__CFString *)*MEMORY[0x1E4FB9928];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v37);
      CFTypeID v39 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v40 = CFGetTypeID(ValueAtIndex);
        if (v40 != CFDictionaryGetTypeID())
        {
          CFTypeID v39 = 0;
LABEL_93:
          if (!v39) {
            goto LABEL_40;
          }
          goto LABEL_131;
        }
        CFRetain(v39);
      }
      if (v39) {
        v41 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        v41 = 0;
      }
      if (!v41) {
        goto LABEL_93;
      }
      v126[0] = 0xAAAAAAAAAAAAAAAALL;
      v126[1] = 0xAAAAAAAAAAAAAAAALL;
      v42 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v126, (const __CFDictionary *)v39);
      HIDWORD(v117) = -1431655766;
      uint64_t v119 = 0;
      unint64_t v120 = 0;
      CFTypeID v118 = 0;
      LODWORD(v117) = ctu::cf::map_adapter::getInt(v42, v111);
      CFArrayRef v43 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v126, v110);
      CFArrayRef v44 = v43;
      if (v43) {
        v45 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      }
      else {
        v45 = 0;
      }
      CFTypeID v112 = v39;
      CFIndex v113 = v37;
      if (v45)
      {
        CFIndex v46 = CFArrayGetCount(v43);
        if (v46 >= 1)
        {
          v47 = 0;
          CFIndex v48 = 0;
          while (2)
          {
            LODWORD(aBlock) = 0;
            v50 = (int *)CFArrayGetValueAtIndex(v44, v48);
            v51 = v50;
            if (!v50) {
              goto LABEL_56;
            }
            CFTypeID v52 = CFGetTypeID(v50);
            if (v52 != CFNumberGetTypeID() || !ctu::cf::assign((ctu::cf *)&aBlock, v51, v53)) {
              goto LABEL_56;
            }
            if (v47 < v120)
            {
              char *v47 = aBlock;
              uint64_t v49 = (uint64_t)(v47 + 1);
              goto LABEL_55;
            }
            unint64_t v54 = (unint64_t)v118;
            unint64_t v55 = v47 - (unsigned char *)v118;
            uint64_t v56 = v47 - (unsigned char *)v118 + 1;
            if (v56 < 0) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v57 = v120 - (unsigned char *)v118;
            if (2 * (v120 - (unsigned char *)v118) > (unint64_t)v56) {
              uint64_t v56 = 2 * v57;
            }
            if (v57 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v58 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v58 = v56;
            }
            if (v58)
            {
              v59 = operator new(v58);
              CFTypeID v60 = (char *)v59 + v55;
              *((unsigned char *)v59 + v55) = aBlock;
              uint64_t v49 = (uint64_t)v59 + v55 + 1;
              if (v47 != (char *)v54)
              {
LABEL_69:
                if (v55 < 8
                  || (char *)v59 + v55 - 1 - &v47[~v54] > (unint64_t)v59 + v55 - 1
                  || v54 > (unint64_t)(v47 - 1)
                  || v54 - (unint64_t)v59 < 0x20)
                {
                  CFTypeID v61 = v47;
                }
                else if (v55 >= 0x20)
                {
                  unint64_t v64 = v55 & 0xFFFFFFFFFFFFFFE0;
                  v65 = (char *)v59 + v55 - 16;
                  CFTypeID v66 = (long long *)(v47 - 16);
                  unint64_t v67 = v55 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v68 = *v66;
                    *(v65 - 1) = *(v66 - 1);
                    _OWORD *v65 = v68;
                    v65 -= 2;
                    v66 -= 2;
                    v67 -= 32;
                  }
                  while (v67);
                  if (v55 == v64) {
                    goto LABEL_73;
                  }
                  if ((v55 & 0x18) != 0) {
                    goto LABEL_87;
                  }
                  v60 -= v64;
                  CFTypeID v61 = &v47[-v64];
                }
                else
                {
                  unint64_t v64 = 0;
LABEL_87:
                  CFTypeID v61 = &v47[-(v55 & 0xFFFFFFFFFFFFFFF8)];
                  v60 -= v55 & 0xFFFFFFFFFFFFFFF8;
                  v69 = &v47[-v64 - v54 - 8 + (void)v59];
                  v70 = (uint64_t *)&v47[-v64 - 8];
                  unint64_t v71 = v64 - (v55 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v72 = *v70--;
                    *(void *)v69 = v72;
                    v69 -= 8;
                    v71 += 8;
                  }
                  while (v71);
                  if (v55 == (v55 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_73:
                    v47 = (char *)v118;
                    CFTypeID v118 = v59;
                    uint64_t v119 = v49;
                    unint64_t v120 = (char *)v59 + v58;
                    if (!v47)
                    {
LABEL_55:
                      uint64_t v119 = v49;
                      v47 = (char *)v49;
                      CFIndex v37 = v113;
LABEL_56:
                      if (++v48 == v46) {
                        goto LABEL_96;
                      }
                      continue;
                    }
LABEL_77:
                    operator delete(v47);
                    goto LABEL_55;
                  }
                }
                uint64_t v62 = v60 - 1;
                do
                {
                  char v63 = *--v61;
                  *v62-- = v63;
                }
                while (v61 != (char *)v54);
                goto LABEL_73;
              }
            }
            else
            {
              v59 = 0;
              CFTypeID v60 = (char *)(v47 - (unsigned char *)v118);
              *(unsigned char *)unint64_t v55 = aBlock;
              uint64_t v49 = v55 + 1;
              if (v47 != (char *)v54) {
                goto LABEL_69;
              }
            }
            break;
          }
          CFTypeID v118 = v60;
          uint64_t v119 = v49;
          unint64_t v120 = (char *)v59 + v58;
          if (!v47) {
            goto LABEL_55;
          }
          goto LABEL_77;
        }
        v47 = 0;
        v74 = (char *)v36[1];
        unint64_t v73 = (unint64_t)v36[2];
        if ((unint64_t)v74 < v73)
        {
LABEL_97:
          *(_DWORD *)v74 = v117;
          *((void *)v74 + 1) = 0;
          *((void *)v74 + 2) = 0;
          *((void *)v74 + 3) = 0;
          CFTypeID v75 = v118;
          size_t v77 = v47 - (unsigned char *)v118;
          BOOL v76 = v47 == v118;
          CFIndex v35 = v109;
          if (!v76)
          {
            if ((v77 & 0x8000000000000000) != 0) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            v78 = (char *)operator new(v77);
            *((void *)v74 + 1) = v78;
            *((void *)v74 + 2) = v78;
            v79 = &v78[v77];
            *((void *)v74 + 3) = &v78[v77];
            memcpy(v78, v75, v77);
            *((void *)v74 + 2) = v79;
          }
          v80 = v74 + 32;
          v36[1] = v74 + 32;
          goto LABEL_126;
        }
      }
      else
      {
        v47 = 0;
LABEL_96:
        v74 = (char *)v36[1];
        unint64_t v73 = (unint64_t)v36[2];
        if ((unint64_t)v74 < v73) {
          goto LABEL_97;
        }
      }
      CFTypeID v81 = (char *)*v36;
      uint64_t v82 = (v74 - (unsigned char *)*v36) >> 5;
      unint64_t v83 = v82 + 1;
      if ((unint64_t)(v82 + 1) >> 59) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v84 = v73 - (void)v81;
      if (v84 >> 4 > v83) {
        unint64_t v83 = v84 >> 4;
      }
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v85 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v85 = v83;
      }
      v129 = v107 + 2;
      if (v85)
      {
        if (v85 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v86 = (char *)operator new(32 * v85);
      }
      else
      {
        v86 = 0;
      }
      CFTypeID v87 = &v86[32 * v82];
      *(void *)&long long aBlock = v86;
      *((void *)&aBlock + 1) = v87;
      *(void *)&long long v128 = v87;
      *((void *)&v128 + 1) = &v86[32 * v85];
      v108 = (char *)*((void *)&v128 + 1);
      int v88 = v117;
      *((void *)v87 + 1) = 0;
      *((void *)v87 + 2) = 0;
      CFStringRef v89 = (char **)(v87 + 16);
      *(_DWORD *)CFTypeID v87 = v88;
      *((void *)v87 + 3) = 0;
      v90 = v118;
      size_t v91 = v47 - (unsigned char *)v118;
      if (v47 != v118)
      {
        if ((v91 & 0x8000000000000000) != 0) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        v92 = (char *)operator new(v47 - (unsigned char *)v118);
        *((void *)v87 + 1) = v92;
        *CFStringRef v89 = v92;
        CFTypeID v93 = &v92[v91];
        *((void *)v87 + 3) = &v92[v91];
        memcpy(v92, v90, v91);
        *CFStringRef v89 = v93;
      }
      v80 = v87 + 32;
      *(void *)&long long v128 = v87 + 32;
      CFIndex v35 = v109;
      if (v74 == v81)
      {
        v36 = (void **)v107;
        *uint64_t v107 = v87;
        v107[1] = v80;
        v107[2] = v108;
        uint64_t v4 = v106;
        CFIndex v37 = v113;
        goto LABEL_124;
      }
      uint64_t v94 = 0;
      uint64_t v4 = v106;
      v36 = (void **)v107;
      do
      {
        CFComparisonResult v95 = &v87[v94];
        uint64_t v96 = &v74[v94];
        *((_DWORD *)v95 - 8) = *(_DWORD *)&v74[v94 - 32];
        *((void *)v95 - 2) = 0;
        *((void *)v95 - 1) = 0;
        *(_OWORD *)(v95 - 24) = *(_OWORD *)&v74[v94 - 24];
        *((void *)v95 - 1) = *(void *)&v74[v94 - 8];
        *((void *)v96 - 3) = 0;
        *((void *)v96 - 2) = 0;
        *((void *)v96 - 1) = 0;
        v94 -= 32;
      }
      while (&v74[v94] != v81);
      v74 = *v107;
      v97 = v107[1];
      long long v98 = v128;
      *uint64_t v107 = &v87[v94];
      *(_OWORD *)(v107 + 1) = v98;
      v80 = (char *)v98;
      if (v97 != v74)
      {
        CFIndex v37 = v113;
        do
        {
          CFTypeID v99 = (void *)*((void *)v97 - 3);
          if (v99)
          {
            *((void *)v97 - 2) = v99;
            operator delete(v99);
          }
          v97 -= 32;
        }
        while (v97 != v74);
LABEL_124:
        if (!v74) {
          goto LABEL_126;
        }
LABEL_125:
        operator delete(v74);
        goto LABEL_126;
      }
      CFIndex v37 = v113;
      if (v74) {
        goto LABEL_125;
      }
LABEL_126:
      v36[1] = v80;
      CFTypeID v39 = v112;
      if (v44) {
        CFRelease(v44);
      }
      if (v118) {
        operator delete(v118);
      }
      MEMORY[0x1BA9C7760](v126);
      if (!v112) {
        goto LABEL_40;
      }
LABEL_131:
      CFRelease(v39);
LABEL_40:
      ++v37;
    }
    while (v37 != v35);
  }
LABEL_134:
  uint64_t v117 = v4 + 192;
  CFTypeID v118 = (void *)QMIServiceMsg::create();
  LODWORD(v119) = 25000;
  unint64_t v120 = 0;
  v121 = 0;
  v114[0] = MEMORY[0x1E4F143A8];
  v114[1] = 1174405120;
  v114[2] = ___ZN4coex16QMICommandDriver30sendTransparentMessageReq_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v114[3] = &__block_descriptor_tmp_300;
  v114[4] = v4;
  CFTypeID v100 = *(void **)a3;
  if (*(void *)a3) {
    CFTypeID v100 = _Block_copy(v100);
  }
  v101 = *(NSObject **)(a3 + 8);
  v115 = v100;
  dispatch_object_t object = v101;
  if (v101) {
    dispatch_retain(v101);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  *(void *)&long long v128 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm25SendTransparentMessageReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  *((void *)&v128 + 1) = &unk_1E6195FD0;
  v129 = v114;
  v102 = _Block_copy(&aBlock);
  v121 = v102;
  if (v118)
  {
    qmi::Client::send();
    v102 = v121;
  }
  if (v102) {
    _Block_release(v102);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v115) {
    _Block_release(v115);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1BA9C7760](v125);
}

void sub_1B8B06234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c35_ZTSN4coex13CommandDriver8CallbackE(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  return result;
}

__n128 __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void *__Block_byref_object_copy__2(void *result, void *a2)
{
  result[5] = result + 5;
  result[6] = result + 5;
  result[7] = 0;
  uint64_t v2 = a2[7];
  if (v2)
  {
    uint64_t v4 = a2[5];
    v3 = (uint64_t *)a2[6];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = result[5];
    *(void *)(v6 + 8) = v3;
    uint64_t *v3 = v6;
    result[5] = v4;
    *(void *)(v4 + 8) = result + 5;
    result[7] = v2;
    a2[7] = 0;
  }
  return result;
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 40;
  uint64_t v5 = MEMORY[0x1E4FBA418];
  *(void *)(a1 + 152) = MEMORY[0x1E4FBA4A8] + 16;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(v5 + 8);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 40 + *(void *)(v7 - 24)) = v6;
  CFDictionaryRef v8 = (std::ios_base *)(a1 + 40 + *(void *)(*(void *)(a1 + 40) - 24));
  uint64_t v9 = (std::ios_base *)(a2 + 40 + *(void *)(*(void *)(a2 + 40) - 24));
  std::ios_base::move(v8, v9);
  v8[1].__vftable = v9[1].__vftable;
  v9[1].__vftable = 0;
  v8[1].__fmtflags_ = v9[1].__fmtflags_;
  *(void *)(a1 + 40) = MEMORY[0x1E4FBA498] + 24;
  *(void *)(a1 + 152) = MEMORY[0x1E4FBA498] + 64;
  std::streambuf::basic_streambuf();
  uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
  *(void *)(a1 + 112) = 0;
  unint64_t v11 = (_OWORD *)(a1 + 112);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  uint64_t v12 = (long long *)(a2 + 112);
  if (*(char *)(a2 + 135) >= 0) {
    uint64_t v13 = a2 + 112;
  }
  else {
    uint64_t v13 = *(void *)(a2 + 112);
  }
  uint64_t v14 = *(void *)(a2 + 64);
  if (v14)
  {
    uint64_t v15 = v14 - v13;
    uint64_t v16 = *(void *)(a2 + 72) - v13;
    uint64_t v17 = *(void *)(a2 + 80) - v13;
    uint64_t v18 = *(void *)(a2 + 88);
    if (v18)
    {
LABEL_6:
      uint64_t v19 = v18 - v13;
      uint64_t v20 = *(void *)(a2 + 96) - v13;
      uint64_t v21 = *(void *)(a2 + 104) - v13;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v16 = -1;
    uint64_t v17 = -1;
    uint64_t v15 = -1;
    uint64_t v18 = *(void *)(a2 + 88);
    if (v18) {
      goto LABEL_6;
    }
  }
  uint64_t v19 = -1;
  uint64_t v20 = -1;
  uint64_t v21 = -1;
LABEL_9:
  uint64_t v22 = *(void *)(a2 + 136);
  uint64_t v23 = v22 - v13;
  if (!v22) {
    uint64_t v23 = -1;
  }
  long long v24 = *v12;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  _OWORD *v11 = v24;
  *(unsigned char *)(a2 + 135) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  uint64_t v25 = a1 + 112;
  if (*(char *)(a1 + 135) < 0) {
    uint64_t v25 = *(void *)v11;
  }
  if (v15 != -1)
  {
    *(void *)(a1 + 64) = v25 + v15;
    *(void *)(a1 + 72) = v25 + v16;
    *(void *)(a1 + 80) = v25 + v17;
  }
  if (v19 != -1)
  {
    *(void *)(a1 + 104) = v25 + v21;
    *(void *)(a1 + 88) = v25 + v19;
    *(void *)(a1 + 96) = v25 + v19 + v20;
  }
  uint64_t v26 = v25 + v23;
  if (v23 == -1) {
    uint64_t v26 = 0;
  }
  *(void *)(a1 + 136) = v26;
  if (*(char *)(a2 + 135) < 0) {
    uint64_t v12 = *(long long **)(a2 + 112);
  }
  *(void *)(a2 + 64) = v12;
  *(void *)(a2 + 72) = v12;
  *(void *)(a2 + 80) = v12;
  *(void *)(a2 + 88) = v12;
  *(void *)(a2 + 96) = v12;
  *(void *)(a2 + 104) = v12;
  *(void *)(a2 + 136) = v12;
  std::locale::locale(&v27, (const std::locale *)(a2 + 56));
  (*(void (**)(uint64_t, std::locale *))(*(void *)(a1 + 48) + 16))(a1 + 48, &v27);
  v28.__locale_ = (std::locale::__imp *)0xAAAAAAAAAAAAAAAALL;
  std::locale::locale(&v28, (const std::locale *)(a1 + 56));
  std::locale::operator=((std::locale *)(a1 + 56), &v27);
  std::locale::~locale(&v28);
  std::locale::~locale(&v27);
  *(void *)(v4 + *(void *)(*(void *)(a1 + 40) - 24) + 40) = a1 + 48;
}

void sub_1B8B067A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  if (*(char *)(v10 + 135) < 0) {
    operator delete(*v11);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9C8300](v9);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

__n128 __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

__n128 __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void *__Block_byref_object_copy__7(void *result, void *a2)
{
  result[5] = result + 5;
  result[6] = result + 5;
  result[7] = 0;
  uint64_t v2 = a2[7];
  if (v2)
  {
    uint64_t v4 = a2[5];
    v3 = (uint64_t *)a2[6];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = result[5];
    *(void *)(v6 + 8) = v3;
    uint64_t *v3 = v6;
    result[5] = v4;
    *(void *)(v4 + 8) = result + 5;
    result[7] = v2;
    a2[7] = 0;
  }
  return result;
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

__n128 __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void *__Block_byref_object_copy__10(void *result, void *a2)
{
  result[5] = result + 5;
  result[6] = result + 5;
  result[7] = 0;
  uint64_t v2 = a2[7];
  if (v2)
  {
    uint64_t v4 = a2[5];
    v3 = (uint64_t *)a2[6];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = result[5];
    *(void *)(v6 + 8) = v3;
    uint64_t *v3 = v6;
    result[5] = v4;
    *(void *)(v4 + 8) = result + 5;
    result[7] = v2;
    a2[7] = 0;
  }
  return result;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __copy_helper_block_e8_40c35_ZTSN4coex13CommandDriver8CallbackE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CoexTech>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::APTTable>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimitTimeout>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RbThresholdForAdvTxNotice>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimitTimeout>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimit>::write(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *a2;
  float result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LinkPathLossThreshold>::write(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *a2;
  float result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::FilteredRBThreshold>::write(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *a2;
  float result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimit>::write(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *a2;
  float result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::PowerThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBFilterAlpha>::write(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *a2;
  float result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TechInstance>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTEInstance>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c35_ZTSN4coex13CommandDriver8CallbackE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v5 = (void *)a2[6];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Policy>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(void *)(v3 + 3) = *(void *)(result + 9);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCTxFrameDenialsParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxFrameDenialsParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4coex13CommandDriverEEE(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  CFTypeRef v8 = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v6 = *a3;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v4 + 16))(v4, &v8, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1B8B06E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void ___ZN4coex16QMICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4) {
    return;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v7 = v6 + 40;
  if (!v8 || !*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48)) {
    return;
  }
  uint64_t v15 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v10 = *a3;
  uint64_t v14 = v10;
  if (v10)
  {
    CFRetain(v10);
    coex::CommandDriver::Callback::operator()(v7, &v15, &v14);
    CFRelease(v10);
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  coex::CommandDriver::Callback::operator()(v7, &v15, &v14);
  if (v3) {
LABEL_13:
  }
    CFRelease(v3);
LABEL_14:
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(const void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
  if (v12) {
    _Block_release(v12);
  }
  uint64_t v13 = *(NSObject **)(v11 + 48);
  *(void *)(v11 + 48) = 0;
  if (v13)
  {
    dispatch_release(v13);
  }
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void *__Block_byref_object_dispose__2(void *result)
{
  if (result[7])
  {
    v1 = result;
    char v2 = result + 5;
    float result = (void *)result[6];
    uint64_t v3 = v1[5];
    uint64_t v4 = *result;
    *(void *)(v4 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    v1[7] = 0;
    if (result != v2)
    {
      do
      {
        uint64_t v5 = (void *)result[1];
        operator delete(result);
        float result = v5;
      }
      while (v5 != v2);
    }
  }
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1E4FBA418];
  uint64_t v2 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 40) = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 40 + *(void *)(v2 - 24)) = *(void *)(v1 + 24);
  *(void *)(a1 + 48) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();

  JUMPOUT(0x1BA9C8300);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void __Block_byref_object_dispose__7(void *a1)
{
  if (a1[7])
  {
    uint64_t v1 = (char *)(a1 + 5);
    uint64_t v2 = a1[5];
    uint64_t v3 = (char *)a1[6];
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(v2 + 8);
    **(void **)(v2 + 8) = v4;
    a1[7] = 0;
    if (v3 != (char *)(a1 + 5))
    {
      do
      {
        uint64_t v5 = (char *)*((void *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0) {
LABEL_9:
          }
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
    }
  }
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void __Block_byref_object_dispose__10(void *a1)
{
  if (a1[7])
  {
    uint64_t v1 = (char *)(a1 + 5);
    uint64_t v2 = a1[5];
    uint64_t v3 = (char *)a1[6];
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(v2 + 8);
    **(void **)(v2 + 8) = v4;
    a1[7] = 0;
    if (v3 != (char *)(a1 + 5))
    {
      do
      {
        uint64_t v5 = (char *)*((void *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0) {
LABEL_9:
          }
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
    }
  }
}

void ___ZN4coex16QMICommandDriver3setEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 40);
  CFDictionaryRef v10 = v2;
  if (v2) {
    CFRetain(v2);
  }
  int v4 = *(_DWORD *)(a1 + 64);
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    uint64_t v6 = _Block_copy(v5);
    uint64_t v7 = *(NSObject **)(a1 + 56);
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(NSObject **)(a1 + 56);
  uint64_t v8 = 0;
  uint64_t v9 = v7;
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
LABEL_6:
  coex::QMICommandDriver::set_sync(v3, &v10, v4, (uint64_t)&v8);
  if (v7) {
    dispatch_release(v7);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1B8B074F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3awd3abm16MetricSubmission10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B075D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B075E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B07614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_5(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v7 = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_6;
  uint64_t v8 = &__block_descriptor_tmp_63;
  uint64_t v9 = v2;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v13 = 0xAAAAAAAAAAAA0000;
    __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)long long buf = 0;
    awd::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v4, (uint64_t)buf);
    v7((uint64_t)v6, buf);
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_ERROR, " Error on metric submission indication", buf, 2u);
    }
  }
}

void sub_1B8B07788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8B077A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a19) {
    JUMPOUT(0x1B8B076F4);
  }
  JUMPOUT(0x1B8B076ECLL);
}

void sub_1B8B077BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a19) {
    JUMPOUT(0x1B8B0779CLL);
  }
  JUMPOUT(0x1B8B07794);
}

void ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_6(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((_DWORD *)a2 + 4);
    int v6 = *(_DWORD *)a2;
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&buf[4] = v6;
    LOWORD(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 2) = v5;
    HIWORD(v23) = 1024;
    int v24 = v7;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Got metric submission from BB: appid=%d, metricid=0x%x, submissionid=0x%x", buf, 0x14u);
  }
  uint64_t v10 = *(void *)(v3 + 128);
  uint64_t v9 = v3 + 128;
  uint64_t v8 = v10;
  if (v10)
  {
    unsigned int v11 = *a2;
    uint64_t v12 = v9;
    do
    {
      unsigned int v13 = *(unsigned __int8 *)(v8 + 32);
      BOOL v14 = v13 >= v11;
      if (v13 >= v11) {
        uint64_t v15 = (uint64_t *)v8;
      }
      else {
        uint64_t v15 = (uint64_t *)(v8 + 8);
      }
      if (v14) {
        uint64_t v12 = v8;
      }
      uint64_t v8 = *v15;
    }
    while (*v15);
    if (v12 != v9 && *(unsigned __int8 *)(v12 + 32) <= v11)
    {
      uint64_t v17 = *(void *)(v12 + 40);
      uint64_t v16 = *(std::__shared_weak_count **)(v12 + 48);
      *(void *)long long buf = v17;
      uint64_t v23 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v17)
      {
        __p = 0;
        uint64_t v19 = (unsigned char *)*((void *)a2 + 4);
        uint64_t v18 = (unsigned char *)*((void *)a2 + 5);
        size_t v20 = v18 - v19;
        if (v18 != v19)
        {
          if ((v20 & 0x8000000000000000) != 0) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          __p = operator new(v18 - v19);
          memcpy(__p, v19, v20);
        }
        awd::AppContext::operator()();
        if (__p) {
          operator delete(__p);
        }
      }
      if (v16)
      {
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_1B8B079E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

char *awd::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  int v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 20), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *((_DWORD *)v5 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 24), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 24) = *((_WORD *)v5 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 26), a2, (const unsigned __int8 *)2);
  unint64_t v6 = *((unsigned __int16 *)v5 + 13);
  int v5 = (tlv *)((char *)v5 + 28);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a3 + 32), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unint64_t v6;

  int v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 12) = *((unsigned char *)v5 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 13), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 13) = *((unsigned char *)v5 + 13);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), a2, (const unsigned __int8 *)2);
  unint64_t v6 = *((unsigned __int16 *)v5 + 7);
  int v5 = (tlv *)((char *)v5 + 16);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a3 + 16), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unint64_t v6;

  int v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 1) = *((unsigned char *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), a2, (const unsigned __int8 *)2);
  unint64_t v6 = *((unsigned __int16 *)v5 + 1);
  int v5 = (tlv *)((char *)v5 + 4);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a3 + 8), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unint64_t v6;

  int v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 16) = *((_WORD *)v5 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), a2, (const unsigned __int8 *)2);
  unint64_t v6 = *((unsigned __int16 *)v5 + 9);
  int v5 = (tlv *)((char *)v5 + 20);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a3 + 24), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, char *__src, char *a3, unint64_t a4)
{
  int v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_22:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    float result = operator new(v11);
    uint64_t v9 = (char *)result;
    *int v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      float result = memcpy(result, __src, v12);
    }
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  unsigned int v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      float result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  uint64_t v15 = &__src[v14];
  if (v13 != v9)
  {
    float result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    float result = memmove(v9, v15, a3 - v15);
  }
  v7[1] = &v9[a3 - v15];
  return result;
}

void coex::QMICommandDriver::set(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN4coex16QMICommandDriver3setEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v11[3] = &__block_descriptor_tmp_21_4;
  int v7 = *a2;
  v11[4] = a1;
  CFTypeRef cf = v7;
  if (v7) {
    CFRetain(v7);
  }
  int v15 = a3;
  unint64_t v8 = *(void **)a4;
  if (*(void *)a4) {
    unint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + 72);
  uint64_t v10 = *(NSObject **)(a4 + 8);
  long long aBlock = v8;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v9, (uint64_t)v11);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (unint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  unint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F1267758;
  block[5] = v5;
  size_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3awd3abm13SubmitTrigger10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B07F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B07F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B07FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_65(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  size_t v11 = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_2_66;
  size_t v12 = &__block_descriptor_tmp_69;
  uint64_t v13 = v3;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
  if (!TlvValue) {
    goto LABEL_6;
  }
  unint64_t v6 = TlvValue;
  int v7 = v5;
  uint64_t v16 = TlvValue;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v8;
  long long v15 = v8;
  tlv::parseV<awd::tlv::abm::SubmitTriggerExt>(&v16, v5, (uint64_t)buf);
  if (v16)
  {
    v11((uint64_t)v10, buf);
    return;
  }
  if ((((uint64_t (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 84, v6, v7) & 1) == 0)
  {
LABEL_6:
    uint64_t v9 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, " Error on trigger submission indication", buf, 2u);
    }
  }
}

void ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_2_66(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *((_DWORD *)a2 + 3);
    int v15 = *((_DWORD *)a2 + 4);
    int v17 = *(_DWORD *)a2;
    int v18 = *((_DWORD *)a2 + 1);
    int v19 = *((_DWORD *)a2 + 2);
    uint64_t v20 = *((void *)a2 + 3);
    *(_DWORD *)long long buf = 67110400;
    *(_DWORD *)&buf[4] = v17;
    LOWORD(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 2) = v15;
    HIWORD(v23) = 1024;
    int v24 = v16;
    __int16 v25 = 1024;
    int v26 = v18;
    __int16 v27 = 1024;
    int v28 = v19;
    __int16 v29 = 2048;
    uint64_t v30 = v20;
    _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Got trigger submission from BB: appid=%d, cid=0x%x, trid=0x%x, sid=0x%x, profid=0x%x, %lld", buf, 0x2Au);
    uint64_t v21 = *(void *)(v3 + 128);
    uint64_t v6 = v3 + 128;
    uint64_t v5 = v21;
    if (!v21) {
      return;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v3 + 128);
    uint64_t v6 = v3 + 128;
    uint64_t v5 = v7;
    if (!v7) {
      return;
    }
  }
  unsigned int v8 = *a2;
  uint64_t v9 = v6;
  do
  {
    unsigned int v10 = *(unsigned __int8 *)(v5 + 32);
    BOOL v11 = v10 >= v8;
    if (v10 >= v8) {
      size_t v12 = (uint64_t *)v5;
    }
    else {
      size_t v12 = (uint64_t *)(v5 + 8);
    }
    if (v11) {
      uint64_t v9 = v5;
    }
    uint64_t v5 = *v12;
  }
  while (*v12);
  if (v9 != v6 && *(unsigned __int8 *)(v9 + 32) <= v8)
  {
    uint64_t v13 = *(void *)(v9 + 40);
    size_t v14 = *(std::__shared_weak_count **)(v9 + 48);
    *(void *)long long buf = v13;
    uint64_t v23 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13) {
      awd::AppContext::operator()();
    }
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1B8B08308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t tlv::parseV<awd::tlv::abm::SubmitTriggerExt>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = xmmword_1B8C37280;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 20), v6, (const unsigned __int8 *)8);
  *(void *)(a3 + 24) = *(void *)((char *)v5 + 20);
  *a1 = (tlv *)((char *)v5 + 28);
  return result;
}

void sub_1B8B083FC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm25SendTransparentMessageReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B084EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B08500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B0852C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN4coex16QMICommandDriver30sendTransparentMessageReq_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x20uLL);
  long long v13 = xmmword_1B8C301E0;
  strcpy((char *)__p, "Send transparent Coex message");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    CFTypeRef v5 = cf;
    if (cf) {
      uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (!v6) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v11 = v5;
    if (v5) {
      goto LABEL_13;
    }
LABEL_16:
    unsigned int v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    CFTypeRef v9 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p);
  CFTypeRef v5 = cf;
  if (cf) {
    uint64_t v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7) {
    goto LABEL_12;
  }
LABEL_11:
  unsigned int v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEBUG, "#D Send transparent Coex message completed", (uint8_t *)&__p, 2u);
  CFTypeRef v5 = cf;
  CFTypeRef v11 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v5);
  unsigned int v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  CFTypeRef v9 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v9);
}

void sub_1B8B086C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetPolicy8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B087AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B087C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B087EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_219(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 10;
  strcpy((char *)__p, "set policy");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFTypeRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p[0]);
  CFTypeRef v4 = cf;
  if (cf) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Setting policy completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFTypeRef v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8B08970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_31(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v1 + 40))
  {
    if (*(void *)(v1 + 48))
    {
      uint64_t v2 = 0;
      uint64_t v3 = 0;
      coex::CommandDriver::Callback::operator()(v1 + 40, &v3, &v2);
    }
  }
}

void coex::CommandDriver::Callback::operator()(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v6 = *(const void **)a1;
  if (v6) {
    uint64_t v7 = _Block_copy(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK4coex13CommandDriver8CallbackclEN3ctu2cf11CFSharedRefI9__CFErrorEENS4_IK14__CFDictionaryEE_block_invoke;
  block[3] = &__block_descriptor_tmp_343_0;
  if (!v7)
  {
    CFTypeRef v10 = *a2;
    long long aBlock = 0;
    CFTypeRef v14 = v10;
    if (!v10) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  CFTypeRef v9 = _Block_copy(v7);
  CFTypeRef v10 = *a2;
  long long aBlock = v9;
  CFTypeRef v14 = v10;
  if (v10) {
LABEL_8:
  }
    CFRetain(v10);
LABEL_9:
  CFTypeRef v11 = *a3;
  CFTypeRef cf = v11;
  if (v11) {
    CFRetain(v11);
  }
  dispatch_async(v8, block);
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
}

uint64_t coex::QMICommandDriver::checkError@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  if (!*(_DWORD *)(a2 + 4)) {
    return result;
  }
  uint64_t v6 = result;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[7] = v7;
  v43[8] = v7;
  v43[5] = v7;
  v43[6] = v7;
  v43[3] = v7;
  v43[4] = v7;
  v43[1] = v7;
  v43[2] = v7;
  long long v42 = v7;
  v43[0] = v7;
  *(_OWORD *)CFTypeID v40 = v7;
  long long v41 = v7;
  long long v38 = v7;
  long long v39 = v7;
  long long v36 = v7;
  long long v37 = v7;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v36);
  CFTypeRef v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Failed to ", 10);
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; ", 2);
  CFTypeRef v14 = (const char *)qmi::asString();
  size_t v15 = strlen(v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  int v16 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v42) & 0x10) != 0)
    {
      uint64_t v26 = v42;
      if ((unint64_t)v42 < *((void *)&v39 + 1))
      {
        *(void *)&long long v42 = *((void *)&v39 + 1);
        uint64_t v26 = *((void *)&v39 + 1);
      }
      __int16 v27 = (const void **)&v39;
    }
    else
    {
      if ((BYTE8(v42) & 8) == 0)
      {
        size_t v24 = 0;
        HIBYTE(v35) = 0;
        __int16 v25 = cf;
        goto LABEL_50;
      }
      __int16 v27 = (const void **)&v37 + 1;
      uint64_t v26 = *((void *)&v38 + 1);
    }
    int v28 = *v27;
    size_t v24 = v26 - (void)*v27;
    if (v24 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v24 >= 0x17)
    {
      uint64_t v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v29 = v24 | 7;
      }
      uint64_t v30 = v29 + 1;
      __int16 v25 = operator new(v29 + 1);
      cf[1] = (CFTypeRef)v24;
      int64_t v35 = v30 | 0x8000000000000000;
      cf[0] = v25;
    }
    else
    {
      HIBYTE(v35) = v26 - *(unsigned char *)v27;
      __int16 v25 = cf;
      if (!v24) {
        goto LABEL_50;
      }
    }
    memmove(v25, v28, v24);
LABEL_50:
    *((unsigned char *)v25 + v24) = 0;
    uint64_t v31 = cf;
    if (v35 < 0) {
      uint64_t v31 = (CFTypeRef *)cf[0];
    }
    *(_DWORD *)long long buf = 136315138;
    CFIndex v46 = v31;
    _os_log_error_impl(&dword_1B8B00000, v16, OS_LOG_TYPE_ERROR, "%s: ", buf, 0xCu);
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)cf[0]);
    }
  }
  if ((BYTE8(v42) & 0x10) != 0)
  {
    uint64_t v19 = v42;
    if ((unint64_t)v42 < *((void *)&v39 + 1))
    {
      *(void *)&long long v42 = *((void *)&v39 + 1);
      uint64_t v19 = *((void *)&v39 + 1);
    }
    uint64_t v20 = (const void *)v39;
    size_t v17 = v19 - v39;
    if ((unint64_t)(v19 - v39) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((BYTE8(v42) & 8) == 0)
    {
      size_t v17 = 0;
      HIBYTE(v33) = 0;
      int v18 = __p;
      goto LABEL_22;
    }
    uint64_t v20 = (const void *)*((void *)&v37 + 1);
    size_t v17 = *((void *)&v38 + 1) - *((void *)&v37 + 1);
    if (*((void *)&v38 + 1) - *((void *)&v37 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_34:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    int v18 = operator new(v21 + 1);
    __p[1] = (void *)v17;
    unint64_t v33 = v22 | 0x8000000000000000;
    __p[0] = v18;
    goto LABEL_21;
  }
  HIBYTE(v33) = v17;
  int v18 = __p;
  if (v17) {
LABEL_21:
  }
    memmove(v18, v20, v17);
LABEL_22:
  *((unsigned char *)v18 + v17) = 0;
  CreateError();
  if (cf == a4) {
    goto LABEL_25;
  }
  CFTypeRef v23 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v23)
  {
    CFRelease(v23);
LABEL_25:
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v36 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v36 + *(void *)(v36 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v36 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9C8300](v43);
}

void sub_1B8B08F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_191(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  int v9 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_192;
  uint64_t v10 = &__block_descriptor_tmp_196;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeRef v4 = (const void **)v2[6];
  CFTypeRef v5 = (const void **)v2[7];
  if (v4 != v5)
  {
    while (*((unsigned char *)*v4 + 8) != 36)
    {
      if (++v4 == v5) {
        goto LABEL_10;
      }
    }
  }
  if (v4 == v5)
  {
LABEL_10:
    long long v7 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(v2 + 5, 36);
  }
  else
  {
    if (!v6) {
      __cxa_bad_cast();
    }
    long long v7 = v6 + 12;
  }
  v9((CFTypeID)v8, v7);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0910C(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_192(CFTypeID result, _DWORD *a2)
{
  uint64_t v3 = *(unsigned int **)(result + 32);
  int v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), uint64_t result = CFNumberGetTypeID(), v4 == result))
  {
    uint64_t result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(void *a1, char a2)
{
  CFTypeID v4 = operator new(0x10uLL);
  CFNumberRef v5 = v4;
  v4[8] = a2;
  *(void *)CFTypeID v4 = &unk_1F1268410;
  *((_DWORD *)v4 + 3) = 0;
  int v6 = v4 + 12;
  CFTypeRef v8 = (char *)a1[2];
  unint64_t v7 = a1[3];
  int v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(void *)CFTypeRef v8 = v4;
    uint64_t v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  uint64_t v11 = (char *)a1[1];
  uint64_t v12 = (v8 - v11) >> 3;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v7 - (void)v11;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v16 = (char *)operator new(8 * v15);
    size_t v17 = &v16[8 * v12];
    int v18 = &v16[8 * v15];
    *(void *)size_t v17 = v5;
    uint64_t v10 = (uint64_t)(v17 + 8);
    uint64_t v19 = (char *)(v8 - v11);
    if (v8 == v11) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v16 = 0;
  size_t v17 = (char *)(8 * v12);
  int v18 = 0;
  *(void *)(8 * v12) = v5;
  uint64_t v10 = 8 * v12 + 8;
  uint64_t v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v11 - v16) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    int v9 = &v8[-v22];
    v17 -= v22;
    CFTypeRef v23 = &v16[8 * v12 - 16];
    size_t v24 = (long long *)(v8 - 16);
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)CFTypeRef v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    int v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9) {
    operator delete(v9);
  }
LABEL_23:
  a1[2] = v10;
  return v6;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1268B70;
  uint64_t v2 = __p[2];
  if (v2)
  {
    uint64_t v3 = __p[3];
    CFTypeID v4 = (void *)__p[2];
    if (v3 != v2)
    {
      do
      {
        CFNumberRef v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      CFTypeID v4 = (void *)__p[2];
    }
    __p[3] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_176(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_177;
  uint64_t v31 = &__block_descriptor_tmp_181_2;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFNumberRef v5 = (const void **)v2[7];
  int v6 = v4;
  if (v4 != v5)
  {
    int v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 30)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[4] = 30;
    *(void *)int v9 = &unk_1F1268370;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      uint64_t v12 = (uint64_t)(v5 + 1);
LABEL_24:
      CFTypeRef v8 = (char *)v10 + 9;
      v2[7] = v12;
      goto LABEL_25;
    }
    int64_t v13 = (char *)v5 - (char *)v4;
    uint64_t v14 = v5 - v4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v11 - (void)v4;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v18 = operator new(8 * v17);
      uint64_t v19 = &v18[8 * v14];
      unint64_t v20 = &v18[8 * v17];
      void *v19 = v10;
      uint64_t v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4) {
          goto LABEL_24;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      int v18 = 0;
      uint64_t v19 = (void *)(8 * v14);
      unint64_t v20 = 0;
      *(void *)(8 * v14) = v10;
      uint64_t v12 = 8 * v14 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v13 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v18) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v19 = (void *)((char *)v19 - v22);
    size_t v24 = &v18[8 * v14 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFNumberRef v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--uint64_t v19 = v28;
      }
      while (v5 != v4);
    }
    CFTypeID v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = v7 + 9;
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B096DC(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_177(CFTypeID result, unsigned char *a2)
{
  uint64_t v3 = *(unsigned __int8 **)(result + 32);
  char v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), uint64_t result = CFNumberGetTypeID(), v4 == result))
  {
    uint64_t result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_148(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_149;
  uint64_t v31 = &__block_descriptor_tmp_153;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFNumberRef v5 = (const void **)v2[7];
  char v6 = v4;
  if (v4 != v5)
  {
    char v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 26)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 26;
    *(void *)int v9 = &unk_1F1268230;
    *((_DWORD *)v9 + 3) = 0;
    CFTypeRef v8 = (float *)(v9 + 12);
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFNumberRef v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    CFTypeID v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = (float *)(v7 + 12);
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B09A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_149(CFTypeID result, float *a2)
{
  uint64_t v3 = *(void **)(result + 32);
  double v7 = 0.0;
  float v4 = 0.0;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    uint64_t result = CFNumberGetTypeID();
    if (v5 == result)
    {
      uint64_t result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      float v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_141(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_142;
  uint64_t v31 = &__block_descriptor_tmp_146_1;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  float v4 = (const void **)v2[6];
  CFTypeID v5 = (const void **)v2[7];
  CFNumberRef v6 = v4;
  if (v4 != v5)
  {
    CFNumberRef v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 25)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 25;
    *(void *)int v9 = &unk_1F12681E0;
    *((_DWORD *)v9 + 3) = 0;
    CFTypeRef v8 = (float *)(v9 + 12);
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFTypeID v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    float v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = (float *)(v7 + 12);
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B09DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_142(CFTypeID result, float *a2)
{
  uint64_t v3 = *(void **)(result + 32);
  double v7 = 0.0;
  float v4 = 0.0;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    uint64_t result = CFNumberGetTypeID();
    if (v5 == result)
    {
      uint64_t result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      float v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_134(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_135;
  uint64_t v31 = &__block_descriptor_tmp_139_1;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  float v4 = (const void **)v2[6];
  CFTypeID v5 = (const void **)v2[7];
  CFNumberRef v6 = v4;
  if (v4 != v5)
  {
    CFNumberRef v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 24)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 24;
    *(void *)int v9 = &unk_1F1268190;
    *((_DWORD *)v9 + 3) = 0;
    CFTypeRef v8 = (float *)(v9 + 12);
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFTypeID v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    float v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = (float *)(v7 + 12);
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0A150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_135(CFTypeID result, float *a2)
{
  uint64_t v3 = *(void **)(result + 32);
  double v7 = 0.0;
  float v4 = 0.0;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    uint64_t result = CFNumberGetTypeID();
    if (v5 == result)
    {
      uint64_t result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      float v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_127(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_128;
  uint64_t v31 = &__block_descriptor_tmp_132;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  float v4 = (const void **)v2[6];
  CFTypeID v5 = (const void **)v2[7];
  CFNumberRef v6 = v4;
  if (v4 != v5)
  {
    CFNumberRef v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 23)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 23;
    *(void *)int v9 = &unk_1F1268140;
    *((_DWORD *)v9 + 3) = 0;
    CFTypeRef v8 = (float *)(v9 + 12);
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFTypeID v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    float v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = (float *)(v7 + 12);
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0A4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_128(CFTypeID result, float *a2)
{
  uint64_t v3 = *(void **)(result + 32);
  double v7 = 0.0;
  float v4 = 0.0;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    uint64_t result = CFNumberGetTypeID();
    if (v5 == result)
    {
      uint64_t result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      float v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_120(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_121;
  uint64_t v31 = &__block_descriptor_tmp_125_0;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  float v4 = (const void **)v2[6];
  CFTypeID v5 = (const void **)v2[7];
  CFNumberRef v6 = v4;
  if (v4 != v5)
  {
    CFNumberRef v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 22)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 22;
    *(void *)int v9 = &unk_1F12680F0;
    *((_DWORD *)v9 + 3) = 0;
    CFTypeRef v8 = (float *)(v9 + 12);
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFTypeID v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    float v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = (float *)(v7 + 12);
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0A840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_121(CFTypeID result, float *a2)
{
  uint64_t v3 = *(void **)(result + 32);
  double v7 = 0.0;
  float v4 = 0.0;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    uint64_t result = CFNumberGetTypeID();
    if (v5 == result)
    {
      uint64_t result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      float v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_205(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_206;
  uint64_t v31 = &__block_descriptor_tmp_210;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  float v4 = (const void **)v2[6];
  CFTypeID v5 = (const void **)v2[7];
  CFNumberRef v6 = v4;
  if (v4 != v5)
  {
    CFNumberRef v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 39)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 39;
    *(void *)int v9 = &unk_1F12684B0;
    *((_DWORD *)v9 + 3) = 0;
    CFTypeRef v8 = v9 + 12;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFTypeID v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    float v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = v7 + 12;
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0ABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_206(CFTypeID result, _DWORD *a2)
{
  uint64_t v3 = *(unsigned int **)(result + 32);
  int v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), uint64_t result = CFNumberGetTypeID(), v4 == result))
  {
    uint64_t result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_169(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_170;
  uint64_t v31 = &__block_descriptor_tmp_174_3;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFNumberRef v5 = (const void **)v2[7];
  int v6 = v4;
  if (v4 != v5)
  {
    int v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 29)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 29;
    *(void *)int v9 = &unk_1F1268320;
    *((_WORD *)v9 + 5) = 0;
    CFTypeRef v8 = v9 + 10;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFNumberRef v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    CFTypeID v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = v7 + 10;
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0AF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_170(CFTypeID result, _WORD *a2)
{
  uint64_t v3 = *(__int16 **)(result + 32);
  __int16 v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), uint64_t result = CFNumberGetTypeID(), v4 == result))
  {
    uint64_t result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_162(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_163;
  uint64_t v31 = &__block_descriptor_tmp_167_0;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFNumberRef v5 = (const void **)v2[7];
  __int16 v6 = v4;
  if (v4 != v5)
  {
    __int16 v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 28)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 28;
    *(void *)int v9 = &unk_1F12682D0;
    *((_WORD *)v9 + 5) = 0;
    CFTypeRef v8 = v9 + 10;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFNumberRef v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    CFTypeID v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = v7 + 10;
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0B2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_163(CFTypeID result, _WORD *a2)
{
  uint64_t v3 = *(unsigned __int16 **)(result + 32);
  __int16 v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), uint64_t result = CFNumberGetTypeID(), v4 == result))
  {
    uint64_t result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_155(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_156;
  uint64_t v31 = &__block_descriptor_tmp_160_1;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeID v4 = (const void **)v2[6];
  CFNumberRef v5 = (const void **)v2[7];
  __int16 v6 = v4;
  if (v4 != v5)
  {
    __int16 v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 27)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    int v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 27;
    *(void *)int v9 = &unk_1F1268280;
    *((_WORD *)v9 + 5) = 0;
    CFTypeRef v8 = v9 + 10;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    CFNumberRef v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    CFTypeID v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFTypeRef v8 = v7 + 10;
LABEL_25:
  v30((CFTypeID)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0B644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_156(CFTypeID result, _WORD *a2)
{
  uint64_t v3 = *(unsigned __int16 **)(result + 32);
  __int16 v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), uint64_t result = CFNumberGetTypeID(), v4 == result))
  {
    uint64_t result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::getSize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  if (v2 == v1) {
    return 4;
  }
  unint64_t v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    uint64_t v7 = (v3 >> 5) + 1;
    uint64_t v8 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v8 = 4;
    }
    uint64_t v9 = v7 - v8;
    uint64_t v5 = v2 + 32 * v9;
    uint64_t v10 = (const double *)(v2 + 72);
    int64x2_t v11 = 0uLL;
    int64x2_t v12 = vdupq_n_s64(5uLL);
    int64x2_t v13 = 0uLL;
    do
    {
      unint64_t v14 = v10 - 8;
      float64x2x4_t v15 = vld4q_f64(v14);
      float64x2x4_t v16 = vld4q_f64(v10);
      int64x2_t v11 = vaddq_s64(vsubq_s64(vaddq_s64(v11, (int64x2_t)v15.val[1]), (int64x2_t)v15.val[0]), v12);
      int64x2_t v13 = vaddq_s64(vsubq_s64(vaddq_s64(v13, (int64x2_t)v16.val[1]), (int64x2_t)v16.val[0]), v12);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    uint64_t v4 = vaddvq_s64(vaddq_s64(v13, v11));
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  do
  {
    uint64_t v4 = v4 + *(void *)(v5 + 16) - *(void *)(v5 + 8) + 5;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 4;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::write(unsigned char *result, uint64_t *a2)
{
  char v3 = result[8];
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t v6 = v4 + 4;
  *(unsigned char *)(v4 + 3) = (*((_DWORD *)result + 6) - *((_DWORD *)result + 4)) >> 5;
  uint64_t v7 = *((void *)result + 2);
  for (uint64_t i = *((void *)result + 3); v7 != i; v7 += 32)
  {
    *(_DWORD *)uint64_t v6 = *(_DWORD *)v7;
    uint64_t v9 = v6 + 5;
    *(unsigned char *)(v6 + 4) = *(unsigned char *)(v7 + 16) - *(_DWORD *)(v7 + 8);
    uint64_t result = memcpy((void *)(v6 + 5), *(const void **)(v7 + 8), *(void *)(v7 + 16) - *(void *)(v7 + 8));
    uint64_t v6 = v9 + *(void *)(v7 + 16) - *(void *)(v7 + 8);
  }
  *a2 = v6;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v6 - v5;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_113(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_114;
  uint64_t v31 = &__block_descriptor_tmp_118;
  char v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v4 = (const void **)v2[6];
  uint64_t v5 = (const void **)v2[7];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    uint64_t v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 21)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 21;
    *(void *)uint64_t v9 = &unk_1F12680A0;
    *((_DWORD *)v9 + 3) = 0;
    uint64_t v8 = v9 + 12;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    uint64_t v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    uint64_t v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = v7 + 12;
LABEL_25:
  ((void (*)(void *, char *))v30)(v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0BB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_114(uint64_t a1, _DWORD *a2, const __CFNumber *a3)
{
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRetain(v4);
    uint64_t v8 = v4;
    CFRetain(v4);
    CFTypeID v5 = CFGetTypeID(v4);
    if (v5 == CFNumberGetTypeID())
    {
      CFRetain(v4);
      CFRetain(v4);
      CFRelease(v4);
      uint64_t v6 = (void *)v4;
    }
    else
    {
      uint64_t v6 = 0;
    }
    CFRelease(v4);
    CFRelease(v4);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v6) {
    uint64_t v7 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (!v7)
  {
    if (!v6) {
      return;
    }
    goto LABEL_16;
  }
  if (v6) {
    CFRetain(v6);
  }
  LODWORD(v8) = 0;
  ctu::cf::assign((ctu::cf *)&v8, (unsigned int *)v6, a3);
  *a2 = v8;
  if (v6)
  {
    CFRelease(v6);
LABEL_16:
    CFRelease(v6);
  }
}

void sub_1B8B0BC90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  char v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B0BCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, const void *);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_106(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  uint64_t v30 = (void (*)(uint64_t, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_107;
  uint64_t v31 = &__block_descriptor_tmp_111_0;
  char v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v4 = (const void **)v2[6];
  uint64_t v5 = (const void **)v2[7];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    uint64_t v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 20)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    uint64_t v9 = operator new(0x18uLL);
    uint64_t v10 = v9;
    v9[8] = 20;
    *(void *)uint64_t v9 = &unk_1F1268050;
    *((_DWORD *)v9 + 3) = 0;
    uint64_t v8 = v9 + 12;
    *((_DWORD *)v9 + 4) = 0;
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      void *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    size_t v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    uint64_t v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    uint64_t v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = v7 + 12;
LABEL_25:
  v30((uint64_t)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0BFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_107(uint64_t a1, _DWORD *a2)
{
  char v3 = *(const void **)(a1 + 32);
  v7[2] = v3;
  if (v3)
  {
    CFRetain(v3);
    v7[0] = v3;
    CFRetain(v3);
    uint64_t v9 = 0;
    CFTypeID v4 = CFGetTypeID(v3);
    if (v4 == CFDictionaryGetTypeID())
    {
      CFRetain(v3);
      CFRetain(v3);
      CFRelease(v3);
      CFDictionaryRef v5 = (const __CFDictionary *)v3;
    }
    else
    {
      CFDictionaryRef v5 = 0;
    }
    CFDictionaryRef v8 = v5;
    CFRelease(v3);
    CFRelease(v3);
  }
  else
  {
    CFDictionaryRef v5 = 0;
    CFDictionaryRef v8 = 0;
  }
  if (v5) {
    uint64_t v6 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    v7[0] = 0xAAAAAAAAAAAAAAAALL;
    v7[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v7, v5);
    *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v7, (const __CFString *)*MEMORY[0x1E4FB9590]);
    a2[1] = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v7, (const __CFString *)*MEMORY[0x1E4FB94F0]);
    MEMORY[0x1BA9C7760](v7);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8B0C124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EEclEOSA_SD_(uint64_t a1, int *a2, QMIServiceMsg *this)
{
  __p[3] = *(void **)MEMORY[0x1E4F143B8];
  int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, 24);
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v10, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v10);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v10);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v4;
    _os_log_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEFAULT, "#I Received frequency report indication for type %d ", (uint8_t *)__p, 8u);
  }
  __p[0] = (void *)v10[0];
  __p[1] = (void *)v10[1];
  __p[2] = v11;
  if (v11) {
    atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)__p);
  v12[0] = __p[0];
  v12[1] = __p[1];
  v12[2] = __p[2];
  if (__p[2]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)__p[2] + 1, 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v12);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)__p);
  if (v4 == 2) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  if (v4 == 1) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  desense::QMICommandDriver::processFrequencyInd_sync(v6, v9, (qmi::MessageBase *)v12);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v12);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v10);
}

void sub_1B8B0C350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B0C364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void desense::QMICommandDriver::processFrequencyInd_sync(uint64_t a1, int a2, qmi::MessageBase *this)
{
  uint64_t v359 = *MEMORY[0x1E4F143B8];
  uint64_t v310 = 0;
  v311 = &v310;
  uint64_t v312 = 0x4002000000;
  v313 = __Block_byref_object_copy__2;
  v314 = __Block_byref_object_dispose__2;
  uint64_t v315 = (uint64_t)&v315;
  v316 = &v315;
  uint64_t v317 = 0;
  uint64_t v302 = 0;
  v303 = &v302;
  uint64_t v304 = 0x4002000000;
  v305 = __Block_byref_object_copy__2;
  v306 = __Block_byref_object_dispose__2;
  uint64_t v307 = (uint64_t)&v307;
  v308 = &v307;
  uint64_t v309 = 0;
  uint64_t v294 = 0;
  v295 = (uint64_t **)&v294;
  uint64_t v296 = 0x4002000000;
  v297 = __Block_byref_object_copy__2;
  v298 = __Block_byref_object_dispose__2;
  uint64_t v299 = (uint64_t)&v299;
  v300 = &v299;
  uint64_t v301 = 0;
  uint64_t v286 = 0;
  v287 = (uint64_t **)&v286;
  uint64_t v288 = 0x4002000000;
  v289 = __Block_byref_object_copy__2;
  v290 = __Block_byref_object_dispose__2;
  uint64_t v291 = (uint64_t)&v291;
  v292 = &v291;
  uint64_t v293 = 0;
  uint64_t v278 = 0;
  v279 = (uint64_t **)&v278;
  uint64_t v280 = 0x4002000000;
  v281 = __Block_byref_object_copy__2;
  v282 = __Block_byref_object_dispose__2;
  uint64_t v283 = (uint64_t)&v283;
  v284 = &v283;
  uint64_t v285 = 0;
  uint64_t v270 = 0;
  v271 = (uint64_t **)&v270;
  uint64_t v272 = 0x4002000000;
  v273 = __Block_byref_object_copy__2;
  v274 = __Block_byref_object_dispose__2;
  uint64_t v275 = (uint64_t)&v275;
  v276 = &v275;
  uint64_t v277 = 0;
  uint64_t v266 = 0;
  v267 = &v266;
  uint64_t v268 = 0x2000000000;
  int v269 = 0;
  v262[0] = MEMORY[0x1E4F143A8];
  v262[1] = 0x40000000;
  v263 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke;
  v264 = &unk_1E6193C68;
  v265 = &v266;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
  int v8 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v7, (const unsigned __int8 *)1);
    __p[0] = *(unsigned char *)v8;
    v263((uint64_t)v262, __p);
  }
  if ((*((_DWORD *)v267 + 6) | 2) == 2)
  {
    v257[0] = MEMORY[0x1E4F143A8];
    v257[1] = 0x40000000;
    v258 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_2;
    v259 = &unk_1E6193C90;
    uint64_t v261 = a1;
    v260 = &v310;
    uint64_t v9 = qmi::MessageBase::findTlvValue(this);
    uint64_t v11 = v9;
    if (v9)
    {
      int v12 = v10;
      *(void *)&long long v329 = v9;
      memset(__p, 170, 24);
      tlv::parseV<nas::tlv::abm::BBCampUplinkFreqList>((tlv **)&v329, v10, (uint64_t *)__p);
      uint64_t v13 = v329;
      if ((void)v329) {
        v258((uint64_t)v257, (uint64_t *)__p);
      }
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      if (!v13) {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 189, v11, v12);
      }
    }
  }
  v252[0] = MEMORY[0x1E4F143A8];
  v252[1] = 0x40000000;
  v253 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_3;
  v254 = &unk_1E6193CB8;
  v255 = &v270;
  uint64_t v256 = a1;
  unint64_t v14 = (tlv *)qmi::MessageBase::findTlvValue(this);
  unint64_t v16 = v14;
  if (v14)
  {
    unint64_t v17 = (const unsigned __int8 *)v14 + v15;
    tlv::throwIfNotEnoughBytes(v14, v17, (const unsigned __int8 *)8);
    uint64_t v18 = *(void *)v16;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)v16 + 8), v17, (const unsigned __int8 *)4);
    unint64_t v19 = *((unsigned int *)v16 + 2) | 0xAAAAAAAA00000000;
    *(void *)__p = v18;
    *(void *)&__p[8] = v19;
    v253((uint64_t)v252, (uint64_t)__p);
  }
  v247[0] = MEMORY[0x1E4F143A8];
  v247[1] = 0x40000000;
  v248 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_4;
  v249 = &unk_1E6193CE0;
  v250 = &v294;
  uint64_t v251 = a1;
  uint64_t v20 = qmi::MessageBase::findTlvValue(this);
  uint64_t v22 = v20;
  if (v20)
  {
    int v23 = v21;
    *(void *)&long long v329 = v20;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBHoppingList>((tlv **)&v329, v21, (uint64_t *)__p);
    uint64_t v24 = v329;
    if ((void)v329) {
      v248((uint64_t)v247, (uint64_t *)__p);
    }
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if (!v24) {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 180, v22, v23);
    }
  }
  v242[0] = MEMORY[0x1E4F143A8];
  v242[1] = 0x40000000;
  v243 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_5;
  v244 = &unk_1E6193D08;
  v245 = &v286;
  uint64_t v246 = a1;
  uint64_t v25 = qmi::MessageBase::findTlvValue(this);
  uint64_t v27 = v25;
  if (v25)
  {
    int v28 = v26;
    *(void *)&long long v329 = v25;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBNeighborList>((tlv **)&v329, v26, (uint64_t *)__p);
    uint64_t v29 = v329;
    if ((void)v329) {
      v243((uint64_t)v242, (uint64_t *)__p);
    }
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if (!v29) {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 181, v27, v28);
    }
  }
  v237[0] = MEMORY[0x1E4F143A8];
  v237[1] = 0x40000000;
  v238 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_6;
  v239 = &unk_1E6193D30;
  v240 = &v278;
  uint64_t v241 = a1;
  uint64_t v30 = qmi::MessageBase::findTlvValue(this);
  uint64_t v32 = v30;
  if (v30)
  {
    int v33 = v31;
    *(void *)&long long v329 = v30;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBHRPLMNList>((tlv **)&v329, v31, (uint64_t *)__p);
    uint64_t v34 = v329;
    if ((void)v329) {
      v238((uint64_t)v237, (uint64_t *)__p);
    }
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if (!v34) {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 182, v32, v33);
    }
  }
  v232[0] = MEMORY[0x1E4F143A8];
  v232[1] = 0x40000000;
  v233 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_7;
  v234 = &unk_1E6193D58;
  v235 = &v270;
  uint64_t v236 = a1;
  int64_t v35 = (tlv *)qmi::MessageBase::findTlvValue(this);
  long long v37 = v35;
  if (v35)
  {
    long long v38 = (const unsigned __int8 *)v35 + v36;
    tlv::throwIfNotEnoughBytes(v35, v38, (const unsigned __int8 *)8);
    uint64_t v39 = *(void *)v37;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)v37 + 8), v38, (const unsigned __int8 *)4);
    unint64_t v40 = *((unsigned int *)v37 + 2) | 0xAAAAAAAA00000000;
    *(void *)__p = v39;
    *(void *)&__p[8] = v40;
    v233((uint64_t)v232, (uint64_t)__p);
  }
  v227[0] = MEMORY[0x1E4F143A8];
  v227[1] = 0x40000000;
  v228 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_8;
  v229 = &unk_1E6193D80;
  v230 = &v286;
  uint64_t v231 = a1;
  uint64_t v41 = qmi::MessageBase::findTlvValue(this);
  uint64_t v43 = v41;
  if (v41)
  {
    int v44 = v42;
    *(void *)&long long v329 = v41;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBNeighborSecondList>((tlv **)&v329, v42, (uint64_t *)__p);
    uint64_t v45 = v329;
    if ((void)v329) {
      v228((uint64_t)v227, (uint64_t *)__p);
    }
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if (!v45) {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 186, v43, v44);
    }
  }
  v222[0] = MEMORY[0x1E4F143A8];
  v222[1] = 0x40000000;
  v223 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_9;
  v224 = &unk_1E6193DA8;
  v225 = &v270;
  uint64_t v226 = a1;
  uint64_t v46 = qmi::MessageBase::findTlvValue(this);
  uint64_t v48 = v46;
  if (v46)
  {
    int v49 = v47;
    *(void *)&long long v329 = v46;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::DLSCellFrequencyList>((tlv **)&v329, v47, (uint64_t *)__p);
    uint64_t v50 = v329;
    if ((void)v329) {
      v223((uint64_t)v222, (uint64_t *)__p);
    }
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if (!v50) {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 188, v48, v49);
    }
  }
  v217[0] = MEMORY[0x1E4F143A8];
  v217[1] = 0x40000000;
  v218 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_10;
  v219 = &unk_1E6193DD0;
  v220 = &v302;
  uint64_t v221 = a1;
  uint64_t v51 = qmi::MessageBase::findTlvValue(this);
  uint64_t v53 = v51;
  if (v51)
  {
    int v54 = v52;
    *(void *)&long long v329 = v51;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBSearchFreqList>((tlv **)&v329, v52, (uint64_t *)__p);
    uint64_t v55 = v329;
    if ((void)v329) {
      v218((uint64_t)v217, (uint64_t *)__p);
    }
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if (!v55) {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 190, v53, v54);
    }
  }
  v215 = 0;
  uint64_t v216 = 0;
  v214 = &v215;
  uint64_t v56 = v311;
  unint64_t v57 = (uint64_t *)operator new(0x40uLL);
  v57[4] = *MEMORY[0x1E4FB9E10];
  v57[5] = (uint64_t)(v57 + 5);
  v57[6] = (uint64_t)(v57 + 5);
  v57[7] = 0;
  uint64_t *v57 = 0;
  v57[1] = 0;
  v57[2] = (uint64_t)&v215;
  v214 = (uint64_t **)v57;
  v215 = v57;
  *((unsigned char *)v57 + 24) = 1;
  uint64_t v216 = 1;
  if (v57 != v56)
  {
    std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v57 + 5, v57 + 5, v56[6], (uint64_t)(v56 + 5));
    unint64_t v57 = v215;
    size_t v58 = v303;
    unint64_t v59 = *MEMORY[0x1E4FB9E08];
    CFTypeID v60 = &v215;
    CFTypeID v61 = &v215;
    if (v215) {
      goto LABEL_62;
    }
LABEL_67:
    char v63 = (uint64_t *)operator new(0x40uLL);
    v63[4] = v59;
    v63[5] = (uint64_t)(v63 + 5);
    v63[6] = (uint64_t)(v63 + 5);
    v63[7] = 0;
    uint64_t *v63 = 0;
    v63[1] = 0;
    v63[2] = (uint64_t)v61;
    char *v60 = v63;
    unint64_t v64 = v63;
    if (*v214)
    {
      v214 = (uint64_t **)*v214;
      unint64_t v64 = *v60;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v215, v64);
    ++v216;
    if (v63 == v58) {
      goto LABEL_86;
    }
LABEL_72:
    v65 = v63 + 5;
    uint64_t v66 = (uint64_t)(v58 + 5);
    uint64_t v67 = v58[6];
    long long v68 = (void *)v63[6];
    if ((uint64_t *)v67 != v58 + 5 && v68 != v65)
    {
      do
      {
        v68[2] = *(void *)(v67 + 16);
        *((_DWORD *)v68 + 6) = *(_DWORD *)(v67 + 24);
        uint64_t v67 = *(void *)(v67 + 8);
        long long v68 = (void *)v68[1];
      }
      while (v67 != v66 && v68 != v65);
    }
    if (v68 == v65)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v63 + 5, v63 + 5, v67, v66);
    }
    else
    {
      uint64_t v71 = v63[5];
      uint64_t v72 = *v68;
      *(void *)(v72 + 8) = *(void *)(v71 + 8);
      **(void **)(v71 + 8) = v72;
      do
      {
        unint64_t v73 = (void *)v68[1];
        --v63[7];
        operator delete(v68);
        long long v68 = v73;
      }
      while (v73 != v65);
    }
    goto LABEL_86;
  }
  size_t v58 = v303;
  unint64_t v59 = *MEMORY[0x1E4FB9E08];
  while (1)
  {
LABEL_62:
    while (1)
    {
      CFTypeID v61 = (uint64_t **)v57;
      unint64_t v62 = v57[4];
      if (v59 >= v62) {
        break;
      }
      unint64_t v57 = (uint64_t *)*v57;
      if (!*v61)
      {
        CFTypeID v60 = v61;
        goto LABEL_67;
      }
    }
    if (v62 >= v59) {
      break;
    }
    unint64_t v57 = (uint64_t *)v57[1];
    if (!v57)
    {
      CFTypeID v60 = v61 + 1;
      goto LABEL_67;
    }
  }
  char v63 = v57;
  if (v57 != v58) {
    goto LABEL_72;
  }
LABEL_86:
  v74 = v295;
  CFTypeID v75 = v215;
  unint64_t v76 = *MEMORY[0x1E4FB9E18];
  size_t v77 = &v215;
  v78 = &v215;
  if (!v215)
  {
LABEL_93:
    v80 = (uint64_t *)operator new(0x40uLL);
    v80[4] = v76;
    v80[5] = (uint64_t)(v80 + 5);
    v80[6] = (uint64_t)(v80 + 5);
    v80[7] = 0;
    uint64_t *v80 = 0;
    v80[1] = 0;
    v80[2] = (uint64_t)v78;
    *size_t v77 = v80;
    CFTypeID v81 = v80;
    if (*v214)
    {
      v214 = (uint64_t **)*v214;
      CFTypeID v81 = *v77;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v215, v81);
    ++v216;
    if (v80 == (uint64_t *)v74) {
      goto LABEL_112;
    }
LABEL_98:
    uint64_t v82 = v80 + 5;
    uint64_t v83 = (uint64_t)(v74 + 5);
    uint64_t v84 = (uint64_t)v74[6];
    unint64_t v85 = (void *)v80[6];
    if ((uint64_t **)v84 != v74 + 5 && v85 != v82)
    {
      do
      {
        v85[2] = *(void *)(v84 + 16);
        *((_DWORD *)v85 + 6) = *(_DWORD *)(v84 + 24);
        uint64_t v84 = *(void *)(v84 + 8);
        unint64_t v85 = (void *)v85[1];
      }
      while (v84 != v83 && v85 != v82);
    }
    if (v85 == v82)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v80 + 5, v80 + 5, v84, v83);
    }
    else
    {
      uint64_t v88 = v80[5];
      uint64_t v89 = *v85;
      *(void *)(v89 + 8) = *(void *)(v88 + 8);
      **(void **)(v88 + 8) = v89;
      do
      {
        v90 = (void *)v85[1];
        --v80[7];
        operator delete(v85);
        unint64_t v85 = v90;
      }
      while (v90 != v82);
    }
    goto LABEL_112;
  }
  while (1)
  {
    while (1)
    {
      v78 = (uint64_t **)v75;
      unint64_t v79 = v75[4];
      if (v76 >= v79) {
        break;
      }
      CFTypeID v75 = *v78;
      size_t v77 = v78;
      if (!*v78) {
        goto LABEL_93;
      }
    }
    if (v79 >= v76) {
      break;
    }
    CFTypeID v75 = v78[1];
    if (!v75)
    {
      size_t v77 = v78 + 1;
      goto LABEL_93;
    }
  }
  v80 = (uint64_t *)v78;
  if (v78 != v295) {
    goto LABEL_98;
  }
LABEL_112:
  size_t v91 = v287;
  v92 = v215;
  unint64_t v93 = *MEMORY[0x1E4FB9E28];
  uint64_t v94 = &v215;
  CFComparisonResult v95 = &v215;
  if (!v215)
  {
LABEL_119:
    v97 = (uint64_t *)operator new(0x40uLL);
    v97[4] = v93;
    v97[5] = (uint64_t)(v97 + 5);
    v97[6] = (uint64_t)(v97 + 5);
    v97[7] = 0;
    uint64_t *v97 = 0;
    v97[1] = 0;
    v97[2] = (uint64_t)v95;
    *uint64_t v94 = v97;
    long long v98 = v97;
    if (*v214)
    {
      v214 = (uint64_t **)*v214;
      long long v98 = *v94;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v215, v98);
    ++v216;
    if (v97 == (uint64_t *)v91) {
      goto LABEL_138;
    }
LABEL_124:
    CFTypeID v99 = v97 + 5;
    uint64_t v100 = (uint64_t)(v91 + 5);
    uint64_t v101 = (uint64_t)v91[6];
    v102 = (void *)v97[6];
    if ((uint64_t **)v101 != v91 + 5 && v102 != v99)
    {
      do
      {
        v102[2] = *(void *)(v101 + 16);
        *((_DWORD *)v102 + 6) = *(_DWORD *)(v101 + 24);
        uint64_t v101 = *(void *)(v101 + 8);
        v102 = (void *)v102[1];
      }
      while (v101 != v100 && v102 != v99);
    }
    if (v102 == v99)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v97 + 5, v97 + 5, v101, v100);
    }
    else
    {
      uint64_t v105 = v97[5];
      uint64_t v106 = *v102;
      *(void *)(v106 + 8) = *(void *)(v105 + 8);
      **(void **)(v105 + 8) = v106;
      do
      {
        uint64_t v107 = (void *)v102[1];
        --v97[7];
        operator delete(v102);
        v102 = v107;
      }
      while (v107 != v99);
    }
    goto LABEL_138;
  }
  while (1)
  {
    while (1)
    {
      CFComparisonResult v95 = (uint64_t **)v92;
      unint64_t v96 = v92[4];
      if (v93 >= v96) {
        break;
      }
      v92 = *v95;
      uint64_t v94 = v95;
      if (!*v95) {
        goto LABEL_119;
      }
    }
    if (v96 >= v93) {
      break;
    }
    v92 = v95[1];
    if (!v92)
    {
      uint64_t v94 = v95 + 1;
      goto LABEL_119;
    }
  }
  v97 = (uint64_t *)v95;
  if (v95 != v287) {
    goto LABEL_124;
  }
LABEL_138:
  v108 = v279;
  CFIndex v109 = v215;
  unint64_t v110 = *MEMORY[0x1E4FB9E00];
  CFStringRef v111 = &v215;
  CFTypeID v112 = &v215;
  if (!v215)
  {
LABEL_145:
    uint64_t v114 = (uint64_t *)operator new(0x40uLL);
    v114[4] = v110;
    void v114[5] = (uint64_t)(v114 + 5);
    v114[6] = (uint64_t)(v114 + 5);
    v114[7] = 0;
    *uint64_t v114 = 0;
    v114[1] = 0;
    v114[2] = (uint64_t)v112;
    const void *v111 = v114;
    v115 = v114;
    if (*v214)
    {
      v214 = (uint64_t **)*v214;
      v115 = *v111;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v215, v115);
    ++v216;
    if (v114 == (uint64_t *)v108) {
      goto LABEL_164;
    }
LABEL_150:
    v116 = v114 + 5;
    uint64_t v117 = (uint64_t)(v108 + 5);
    uint64_t v118 = (uint64_t)v108[6];
    uint64_t v119 = (void *)v114[6];
    if ((uint64_t **)v118 != v108 + 5 && v119 != v116)
    {
      do
      {
        v119[2] = *(void *)(v118 + 16);
        *((_DWORD *)v119 + 6) = *(_DWORD *)(v118 + 24);
        uint64_t v118 = *(void *)(v118 + 8);
        uint64_t v119 = (void *)v119[1];
      }
      while (v118 != v117 && v119 != v116);
    }
    if (v119 == v116)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v114 + 5, v114 + 5, v118, v117);
    }
    else
    {
      uint64_t v122 = v114[5];
      uint64_t v123 = *v119;
      *(void *)(v123 + 8) = *(void *)(v122 + 8);
      **(void **)(v122 + 8) = v123;
      do
      {
        long long v124 = (void *)v119[1];
        --v114[7];
        operator delete(v119);
        uint64_t v119 = v124;
      }
      while (v124 != v116);
    }
    goto LABEL_164;
  }
  while (1)
  {
    while (1)
    {
      CFTypeID v112 = (uint64_t **)v109;
      unint64_t v113 = v109[4];
      if (v110 >= v113) {
        break;
      }
      CFIndex v109 = *v112;
      CFStringRef v111 = v112;
      if (!*v112) {
        goto LABEL_145;
      }
    }
    if (v113 >= v110) {
      break;
    }
    CFIndex v109 = v112[1];
    if (!v109)
    {
      CFStringRef v111 = v112 + 1;
      goto LABEL_145;
    }
  }
  uint64_t v114 = (uint64_t *)v112;
  if (v112 != v279) {
    goto LABEL_150;
  }
LABEL_164:
  v125 = v271;
  v126 = v215;
  unint64_t v127 = *MEMORY[0x1E4FB9E20];
  long long v128 = &v215;
  v129 = &v215;
  if (!v215)
  {
LABEL_171:
    CFDictionaryRef v131 = (uint64_t *)operator new(0x40uLL);
    v131[4] = v127;
    void v131[5] = (uint64_t)(v131 + 5);
    v131[6] = (uint64_t)(v131 + 5);
    v131[7] = 0;
    *CFDictionaryRef v131 = 0;
    v131[1] = 0;
    v131[2] = (uint64_t)v129;
    *long long v128 = v131;
    v132 = v131;
    if (*v214)
    {
      v214 = (uint64_t **)*v214;
      v132 = *v128;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v215, v132);
    ++v216;
    if (v131 == (uint64_t *)v125) {
      goto LABEL_190;
    }
LABEL_176:
    dispatch_object_t v133 = v131 + 5;
    uint64_t v134 = (uint64_t)(v125 + 5);
    uint64_t v135 = (uint64_t)v125[6];
    dispatch_object_t v136 = (void *)v131[6];
    if ((uint64_t **)v135 != v125 + 5 && v136 != v133)
    {
      do
      {
        v136[2] = *(void *)(v135 + 16);
        *((_DWORD *)v136 + 6) = *(_DWORD *)(v135 + 24);
        uint64_t v135 = *(void *)(v135 + 8);
        dispatch_object_t v136 = (void *)v136[1];
      }
      while (v135 != v134 && v136 != v133);
    }
    if (v136 == v133)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v131 + 5, v131 + 5, v135, v134);
    }
    else
    {
      uint64_t v139 = v131[5];
      uint64_t v140 = *v136;
      *(void *)(v140 + 8) = *(void *)(v139 + 8);
      **(void **)(v139 + 8) = v140;
      do
      {
        v141 = (void *)v136[1];
        --v131[7];
        operator delete(v136);
        dispatch_object_t v136 = v141;
      }
      while (v141 != v133);
    }
    goto LABEL_190;
  }
  while (1)
  {
    while (1)
    {
      v129 = (uint64_t **)v126;
      unint64_t v130 = v126[4];
      if (v127 >= v130) {
        break;
      }
      v126 = *v129;
      long long v128 = v129;
      if (!*v129) {
        goto LABEL_171;
      }
    }
    if (v130 >= v127) {
      break;
    }
    v126 = v129[1];
    if (!v126)
    {
      long long v128 = v129 + 1;
      goto LABEL_171;
    }
  }
  CFDictionaryRef v131 = (uint64_t *)v129;
  if (v129 != v271) {
    goto LABEL_176;
  }
LABEL_190:
  dispatch_object_t v142 = *(NSObject **)(a1 + 40);
  BOOL v143 = os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT);
  v144 = v271;
  if (v143)
  {
    uint64_t v145 = v311[7];
    uint64_t v146 = v303[7];
    v147 = v295[7];
    dispatch_object_t v148 = v287[7];
    CFDictionaryRef v149 = v279[7];
    v150 = v271[7];
    *(_DWORD *)__p = 134219264;
    *(void *)&__p[4] = v145;
    *(_WORD *)&__p[12] = 2048;
    *(void *)&__p[14] = v146;
    *(_WORD *)&__p[22] = 2048;
    *(void *)&__p[24] = v147;
    *(_WORD *)v339 = 2048;
    *(void *)&v339[2] = v148;
    *(_WORD *)&v339[10] = 2048;
    *(void *)&v339[12] = v149;
    *(_WORD *)&v339[20] = 2048;
    *(void *)&v339[22] = v150;
    _os_log_impl(&dword_1B8B00000, v142, OS_LOG_TYPE_DEFAULT, "#I Frequency list sizes %lu, %lu, %lu, %lu, %lu, %lu", __p, 0x3Eu);
    v144 = v271;
  }
  dispatch_object_t v151 = v144[6];
  if (v151 != (uint64_t *)(v144 + 5))
  {
    do
    {
      while (1)
      {
        CFDictionaryRef v152 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG)) {
          break;
        }
        dispatch_object_t v151 = (uint64_t *)v151[1];
        if (v151 == (uint64_t *)(v144 + 5)) {
          goto LABEL_197;
        }
      }
      uint64_t v153 = v151[2];
      int v154 = *((_DWORD *)v151 + 6);
      *(_DWORD *)__p = 134218240;
      *(void *)&__p[4] = v153;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v154;
      _os_log_debug_impl(&dword_1B8B00000, v152, OS_LOG_TYPE_DEBUG, "#D Dl Addloop:frequency (%llu), bandwidth (%u)", __p, 0x12u);
      v144 = v271;
      dispatch_object_t v151 = (uint64_t *)v151[1];
    }
    while (v151 != (uint64_t *)(v271 + 5));
  }
LABEL_197:
  if (v216)
  {
    CFDictionaryRef v155 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = a2;
      _os_log_impl(&dword_1B8B00000, v155, OS_LOG_TYPE_DEFAULT, "#I Sending frequency report for SubId=%d", __p, 8u);
    }
    v213[0] = 0;
    v213[1] = 0;
    v212 = v213;
    std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v212, v214, &v215);
    uint64_t v156 = *(void *)(a1 + 136);
    v319[1] = 0;
    v319[0] = 0;
    v318 = v319;
    std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v318, v212, v213);
    int v328 = a2;
    v327 = 0;
    v326 = 0;
    *(void *)&long long v157 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v157 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v345 = v157;
    long long v344 = v157;
    long long v343 = v157;
    long long v342 = v157;
    long long v341 = v157;
    long long v340 = v157;
    *(_OWORD *)&v339[16] = v157;
    *(_OWORD *)v339 = v157;
    *(_OWORD *)&__p[16] = v157;
    *(_OWORD *)__p = v157;
    v158 = *(pthread_mutex_t **)(v156 + 24);
    v346[0] = (void *)10;
    v346[1] = __p;
    v347[0] = 0;
    v347[1] = v158;
    pthread_mutex_lock(v158);
    v159 = *(atomic_uint **)(v156 + 8);
    if (!v159)
    {
      v161 = *(uint64_t ***)v156;
      goto LABEL_212;
    }
    unsigned int explicit = atomic_load_explicit(v159 + 2, memory_order_acquire);
    v161 = *(uint64_t ***)v156;
    if (explicit != 1)
    {
LABEL_210:
      v159 = *(atomic_uint **)(v156 + 8);
      if (v159) {
        atomic_fetch_add_explicit(v159 + 2, 1u, memory_order_relaxed);
      }
LABEL_212:
      v165 = v327;
      v326 = v161;
      v327 = v159;
      if (v165)
      {
        if (atomic_fetch_add(v165 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v165 + 16))(v165);
          if (atomic_fetch_add(v165 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v165 + 24))(v165);
          }
        }
      }
      pthread_mutex_unlock(v347[1]);
      v166 = (char *)v346[1];
      if (v346[1])
      {
        if ((uint64_t)&v347[0][-1].__opaque[55] >= 0)
        {
          v167 = (char *)v346[1] + 16 * (uint64_t)v347[0];
          do
          {
            v168 = (atomic_uint *)*((void *)v167 - 1);
            if (v168)
            {
              if (atomic_fetch_add(v168 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v168 + 16))(v168);
                if (atomic_fetch_add(v168 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v168 + 24))(v168);
                }
              }
            }
            v167 -= 16;
          }
          while (v167 > v166);
        }
        if (v346[0] >= (void *)0xB) {
          operator delete(v346[1]);
        }
      }
      *(void *)&long long v169 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v169 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v350 = v169;
      long long v349 = v169;
      long long v348 = v169;
      *(_OWORD *)v347 = v169;
      *(_OWORD *)v346 = v169;
      long long v345 = v169;
      long long v344 = v169;
      long long v343 = v169;
      long long v342 = v169;
      long long v341 = v169;
      long long v340 = v169;
      *(_OWORD *)&v339[16] = v169;
      *(_OWORD *)v339 = v169;
      *(_OWORD *)__p = v169;
      *(_OWORD *)&__p[16] = v169;
      __p[0] = 0;
      unint64_t v351 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v352 = 10;
      v353 = &__p[8];
      uint64_t v354 = 0;
      v355 = &v318;
      v356 = &v328;
      uint64_t v358 = 0;
      uint64_t v357 = 0;
      v170 = v326;
      uint64_t v171 = (uint64_t)*v326;
      v323 = __p;
      uint64_t v324 = v156;
      uint64_t v325 = v171;
      *(void *)&long long v321 = *(void *)(v171 + 8);
      *((void *)&v321 + 1) = v171;
      *(void *)&long long v322 = __p;
      *((void *)&v322 + 1) = v171;
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v321);
      v320[0] = *v170;
      v320[1] = v320[0];
      v320[2] = __p;
      v320[3] = v320[0];
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v320);
      long long v329 = v321;
      long long v330 = v322;
      uint64_t v172 = v320[0];
      uint64_t v173 = v321;
      if ((void)v321 == v320[0])
      {
        if (HIDWORD(v357) <= v357)
        {
LABEL_252:
          boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)__p);
          dispatch_object_t v187 = v327;
          if (v327)
          {
            if (atomic_fetch_add(v327 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v187 + 16))(v187);
              if (atomic_fetch_add(v187 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v187 + 24))(v187);
              }
            }
          }
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v319[0]);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v213[0]);
          goto LABEL_257;
        }
      }
      else
      {
        uint64_t v174 = v330;
        if (!*(unsigned char *)v330)
        {
          uint64_t v175 = *(void *)(*(void *)(v321 + 16) + 32);
          uint64_t v176 = *(void *)(v330 + 272);
          v332 = 0;
          uint64_t v333 = 0;
          v331 = &v332;
          std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v331, *(void **)v176, (void *)(v176 + 8));
          uint64_t v177 = *(void *)(v175 + 24);
          if (!v177)
          {
            std::runtime_error::runtime_error(&v337, "call to empty boost::function");
            v337.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
            boost::throw_exception<boost::bad_function_call>(&v337);
          }
          uint64_t v178 = **(unsigned int **)(v174 + 280);
          v179 = *(void (**)(uint64_t, void ***, uint64_t))((v177 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v334 = v331;
          v335 = v332;
          uint64_t v336 = v333;
          if (v333)
          {
            v332[2] = &v335;
            v331 = &v332;
            v332 = 0;
            uint64_t v333 = 0;
          }
          else
          {
            v334 = &v335;
          }
          v179(v175 + 32, &v334, v178);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v335);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v332);
          if (!*(unsigned char *)v174) {
            *(unsigned char *)uint64_t v174 = 1;
          }
        }
        *(void *)&long long v329 = *(void *)(v173 + 8);
        boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v329);
        uint64_t v180 = v330;
        if (*(unsigned char *)v330) {
          *(unsigned char *)long long v330 = 0;
        }
        for (uint64_t i = v329; (void)v329 != v172; uint64_t i = v329)
        {
          uint64_t v182 = *(void *)(*(void *)(i + 16) + 32);
          uint64_t v183 = *(void *)(v180 + 272);
          v332 = 0;
          uint64_t v333 = 0;
          v331 = &v332;
          std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v331, *(void **)v183, (void *)(v183 + 8));
          uint64_t v184 = *(void *)(v182 + 24);
          if (!v184)
          {
            std::runtime_error::runtime_error(&v337, "call to empty boost::function");
            v337.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
            boost::throw_exception<boost::bad_function_call>(&v337);
          }
          uint64_t v185 = **(unsigned int **)(v180 + 280);
          v186 = *(void (**)(uint64_t, void ***, uint64_t))((v184 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v334 = v331;
          v335 = v332;
          uint64_t v336 = v333;
          if (v333)
          {
            v332[2] = &v335;
            v331 = &v332;
            v332 = 0;
            uint64_t v333 = 0;
          }
          else
          {
            v334 = &v335;
          }
          v186(v182 + 32, &v334, v185);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v335);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v332);
          if (!*(unsigned char *)v180) {
            *(unsigned char *)uint64_t v180 = 1;
          }
          *(void *)&long long v329 = *(void *)(i + 8);
          boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v329);
          uint64_t v180 = v330;
          if (*(unsigned char *)v330) {
            *(unsigned char *)long long v330 = 0;
          }
        }
        if (*((_DWORD *)v323 + 73) <= *((_DWORD *)v323 + 72)) {
          goto LABEL_252;
        }
      }
      boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v324, v325);
      goto LABEL_252;
    }
    v162 = *v161;
    uint64_t v163 = *(void *)(v156 + 16);
    if ((uint64_t *)v163 == *v161)
    {
      uint64_t v163 = v162[1];
      *(void *)&long long v329 = v163;
      if (v162 == (uint64_t *)v163)
      {
LABEL_209:
        *(void *)(v156 + 16) = v163;
        goto LABEL_210;
      }
    }
    else
    {
      *(void *)&long long v329 = *(void *)(v156 + 16);
    }
    uint64_t v164 = *(void *)(v163 + 16);
    if (*(unsigned char *)(v164 + 24))
    {
      uint64_t v163 = *(void *)(v163 + 8);
    }
    else
    {
      uint64_t v163 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v162, (int *)(v164 + 64), (uint64_t **)&v329);
      v161 = *(uint64_t ***)v156;
    }
    goto LABEL_209;
  }
LABEL_257:
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v215);
  _Block_object_dispose(&v266, 8);
  _Block_object_dispose(&v270, 8);
  if (v277)
  {
    v188 = (uint64_t *)v276;
    uint64_t v189 = v275;
    uint64_t v190 = *(void *)v276;
    *(void *)(v190 + 8) = *(void *)(v275 + 8);
    **(void **)(v189 + 8) = v190;
    uint64_t v277 = 0;
    if (v188 != &v275)
    {
      do
      {
        v191 = (uint64_t *)v188[1];
        operator delete(v188);
        v188 = v191;
      }
      while (v191 != &v275);
    }
  }
  _Block_object_dispose(&v278, 8);
  if (v285)
  {
    dispatch_object_t v192 = (uint64_t *)v284;
    uint64_t v193 = v283;
    uint64_t v194 = *(void *)v284;
    *(void *)(v194 + 8) = *(void *)(v283 + 8);
    **(void **)(v193 + 8) = v194;
    uint64_t v285 = 0;
    if (v192 != &v283)
    {
      do
      {
        v195 = (uint64_t *)v192[1];
        operator delete(v192);
        dispatch_object_t v192 = v195;
      }
      while (v195 != &v283);
    }
  }
  _Block_object_dispose(&v286, 8);
  if (v293)
  {
    v196 = (uint64_t *)v292;
    uint64_t v197 = v291;
    uint64_t v198 = *(void *)v292;
    *(void *)(v198 + 8) = *(void *)(v291 + 8);
    **(void **)(v197 + 8) = v198;
    uint64_t v293 = 0;
    if (v196 != &v291)
    {
      do
      {
        v199 = (uint64_t *)v196[1];
        operator delete(v196);
        v196 = v199;
      }
      while (v199 != &v291);
    }
  }
  _Block_object_dispose(&v294, 8);
  if (v301)
  {
    v200 = (uint64_t *)v300;
    uint64_t v201 = v299;
    uint64_t v202 = *(void *)v300;
    *(void *)(v202 + 8) = *(void *)(v299 + 8);
    **(void **)(v201 + 8) = v202;
    uint64_t v301 = 0;
    if (v200 != &v299)
    {
      do
      {
        v203 = (uint64_t *)v200[1];
        operator delete(v200);
        v200 = v203;
      }
      while (v203 != &v299);
    }
  }
  _Block_object_dispose(&v302, 8);
  if (v309)
  {
    v204 = (uint64_t *)v308;
    uint64_t v205 = v307;
    uint64_t v206 = *(void *)v308;
    *(void *)(v206 + 8) = *(void *)(v307 + 8);
    **(void **)(v205 + 8) = v206;
    uint64_t v309 = 0;
    if (v204 != &v307)
    {
      do
      {
        v207 = (uint64_t *)v204[1];
        operator delete(v204);
        v204 = v207;
      }
      while (v207 != &v307);
    }
  }
  _Block_object_dispose(&v310, 8);
  if (v317)
  {
    v208 = (uint64_t *)v316;
    uint64_t v209 = v315;
    uint64_t v210 = *(void *)v316;
    *(void *)(v210 + 8) = *(void *)(v315 + 8);
    **(void **)(v209 + 8) = v210;
    uint64_t v317 = 0;
    if (v208 != &v315)
    {
      do
      {
        v211 = (uint64_t *)v208[1];
        operator delete(v208);
        v208 = v211;
      }
      while (v211 != &v315);
    }
  }
}

void sub_1B8B0DF78()
{
}

void sub_1B8B0DF88(void *a1, int a2)
{
  std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x4C0]);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((void *)STACK[0x498]);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v7);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v9);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v8);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v6);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v4);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v5);
    JUMPOUT(0x1B8B0E24CLL);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(STACK[0x470] + 16));
  __cxa_rethrow();
}

void sub_1B8B0E010(uint64_t a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v6);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v8);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v7);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v5);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v3);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v4);
    JUMPOUT(0x1B8B0E24CLL);
  }
  JUMPOUT(0x1B8B0DFE0);
}

void sub_1B8B0E030(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0x4D0];
  if (STACK[0x4D0])
  {
    STACK[0x4D8] = (unint64_t)v2;
    operator delete(v2);
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v10, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v3);
  _Block_object_dispose(&v11, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v4);
  _Block_object_dispose(&v12, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v5);
  _Block_object_dispose(&v13, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v6);
  _Block_object_dispose(&v14, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v7);
  _Block_object_dispose(&v15, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v8);
  _Unwind_Resume(a1);
}

void sub_1B8B0E074()
{
  unint64_t v0 = STACK[0x578];
  if (STACK[0x578])
  {
    if ((uint64_t)(STACK[0x580] - 1) >= 0)
    {
      unint64_t v1 = v0 + 16 * STACK[0x580];
      do
      {
        uint64_t v2 = *(atomic_uint **)(v1 - 8);
        if (v2)
        {
          if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
            if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
            }
          }
        }
        v1 -= 16;
      }
      while (v1 > v0);
    }
    if (STACK[0x570] >= 0xB) {
      operator delete((void *)STACK[0x578]);
    }
  }
  JUMPOUT(0x1B8B0E224);
}

void sub_1B8B0E13C()
{
}

void sub_1B8B0E144()
{
}

void sub_1B8B0E14C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v3, 177, v2, v4);
    JUMPOUT(0x1B8B0C6B4);
  }
  JUMPOUT(0x1B8B0E2D0);
}

void sub_1B8B0E188(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v3, 185, v2, v4);
    JUMPOUT(0x1B8B0CB48);
  }
  JUMPOUT(0x1B8B0E2D0);
}

void sub_1B8B0E1C0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v3, 178, v2, v4);
    JUMPOUT(0x1B8B0C848);
  }
  JUMPOUT(0x1B8B0E2D0);
}

void sub_1B8B0E1F8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8B0E2D0);
}

void sub_1B8B0E208()
{
}

void std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a1[1]);
    if (a1[7])
    {
      uint64_t v3 = a1[5];
      uint64_t v2 = (uint64_t *)a1[6];
      uint64_t v4 = *v2;
      *(void *)(v4 + 8) = *(void *)(v3 + 8);
      **(void **)(v3 + 8) = v4;
      a1[7] = 0;
      if (v2 != a1 + 5)
      {
        do
        {
          CFDictionaryRef v5 = (uint64_t *)v2[1];
          operator delete(v2);
          uint64_t v2 = v5;
        }
        while (v5 != a1 + 5);
      }
    }
    operator delete(a1);
  }
}

void *std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    uint64_t result = operator new(0x20uLL);
    uint64_t v8 = result;
    *uint64_t result = 0;
    result[1] = 0;
    *((_OWORD *)result + 1) = *(_OWORD *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = 1;
    if (v9 != a4)
    {
      uint64_t v11 = result;
      do
      {
        uint64_t result = operator new(0x20uLL);
        *uint64_t result = v11;
        result[1] = 0;
        *((_OWORD *)result + 1) = *(_OWORD *)(v9 + 16);
        v11[1] = result;
        ++v10;
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v11 = result;
      }
      while (v9 != a4);
    }
    uint64_t v12 = *a2;
    *(void *)(v12 + 8) = v8;
    void *v8 = v12;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v10;
  }
  return result;
}

void sub_1B8B0E43C(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    unint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B8B0E45C(_Unwind_Exception *a1)
{
}

void *std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result + 1;
    uint64_t v24 = a3;
    uint64_t v25 = (void **)result;
    while (1)
    {
      CFDictionaryRef v5 = (uint64_t *)result[1];
      uint64_t v6 = v4;
      if ((void *)*result != v4)
      {
        uint64_t v7 = (void *)result[1];
        uint64_t v8 = v4;
        if (v5)
        {
          do
          {
            uint64_t v6 = v7;
            uint64_t v7 = (void *)v7[1];
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v8[2];
            BOOL v9 = *v6 == (void)v8;
            uint64_t v8 = v6;
          }
          while (v9);
        }
        unint64_t v10 = v3[4];
        if (v6[4] >= v10) {
          break;
        }
      }
      if (v5) {
        uint64_t v11 = (uint64_t **)v6;
      }
      else {
        uint64_t v11 = (uint64_t **)v4;
      }
      if (v5) {
        uint64_t v12 = (uint64_t **)(v6 + 1);
      }
      else {
        uint64_t v12 = (uint64_t **)v4;
      }
      if (!*v12) {
        goto LABEL_25;
      }
LABEL_31:
      uint64_t v22 = (void *)v3[1];
      if (v22)
      {
        do
        {
          int v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          int v23 = (void *)v3[2];
          BOOL v9 = *v23 == (void)v3;
          uint64_t v3 = v23;
        }
        while (!v9);
      }
      uint64_t v3 = v23;
      uint64_t result = v25;
      if (v23 == a3) {
        return result;
      }
    }
    uint64_t v12 = (uint64_t **)v4;
    uint64_t v11 = (uint64_t **)v4;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = (uint64_t **)v5;
          unint64_t v13 = v5[4];
          if (v13 <= v10) {
            break;
          }
          CFDictionaryRef v5 = *v11;
          uint64_t v12 = v11;
          if (!*v11) {
            goto LABEL_25;
          }
        }
        if (v13 >= v10) {
          goto LABEL_31;
        }
        CFDictionaryRef v5 = v11[1];
        if (!v5)
        {
          uint64_t v12 = v11 + 1;
          break;
        }
      }
    }
LABEL_25:
    uint64_t v14 = (uint64_t *)operator new(0x40uLL);
    uint64_t v15 = v14;
    unint64_t v16 = v14 + 5;
    v14[4] = v3[4];
    v14[5] = (uint64_t)(v14 + 5);
    v14[6] = (uint64_t)(v14 + 5);
    v14[7] = 0;
    uint64_t v17 = v3[6];
    if ((void *)v17 != v3 + 5)
    {
      uint64_t v18 = 1;
      unint64_t v19 = v14 + 5;
      do
      {
        uint64_t v20 = operator new(0x20uLL);
        v20[1] = *(_OWORD *)(v17 + 16);
        *(void *)uint64_t v20 = v19;
        *((void *)v20 + 1) = v16;
        v19[1] = v20;
        v15[5] = (uint64_t)v20;
        v15[7] = v18;
        uint64_t v17 = *(void *)(v17 + 8);
        ++v18;
        unint64_t v19 = v20;
      }
      while ((void *)v17 != v3 + 5);
    }
    uint64_t *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v11;
    void *v12 = v15;
    int v21 = (void *)**v25;
    if (v21)
    {
      void *v25 = v21;
      uint64_t v15 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25[1], v15);
    v25[2] = (void *)((char *)v25[2] + 1);
    a3 = v24;
    goto LABEL_31;
  }
  return result;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    uint64_t v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        unint64_t v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            unint64_t v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 288);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        uint64_t v18 = *(_DWORD **)(v7 + 296);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 296) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        uint64_t v17 = *(_DWORD **)(v7 + 296);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 296) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 292);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          int v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        int v28 = *(_DWORD **)(v27 + 296);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 296) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              int v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_1B8B0EC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8B0EC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8B0EE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 296);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    v8[5] = v3;
    void v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 296), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1B8B0F044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_5(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(void *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void desense::QMICommandDriver::addSingleFrequencyToMap_sync(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    unsigned int v9 = a3 >> 1;
    uint64_t v10 = a5[1];
    if ((uint64_t *)v10 == a5) {
      goto LABEL_5;
    }
    while (*(void *)(v10 + 16) != a2)
    {
      uint64_t v10 = *(void *)(v10 + 8);
      if ((uint64_t *)v10 == a5) {
        goto LABEL_5;
      }
    }
    if ((uint64_t *)v10 == a5 || (unsigned int v16 = *(_DWORD *)(v10 + 24), v9 > v16))
    {
LABEL_5:
      uint64_t v11 = operator new(0x20uLL);
      v11[1] = a5;
      v11[2] = a2;
      *((_DWORD *)v11 + 6) = v9;
      uint64_t v12 = *a5;
      void *v11 = *a5;
      *(void *)(v12 + 8) = v11;
      *a5 = (uint64_t)v11;
      uint64_t v13 = a5[2] + 1;
      a5[2] = v13;
      uint64_t v14 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 134218752;
        uint64_t v19 = a2;
        __int16 v20 = 1024;
        unsigned int v21 = v9;
        __int16 v22 = 1024;
        int v23 = a4;
        __int16 v24 = 2048;
        uint64_t v25 = v13;
        _os_log_impl(&dword_1B8B00000, v14, OS_LOG_TYPE_DEFAULT, "#I Adding Frequency: %llu, Bandwidth: %u, Priority: %d Size %lu", (uint8_t *)&v18, 0x22u);
      }
    }
    else
    {
      uint64_t v17 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v18 = 134218240;
        uint64_t v19 = a2;
        __int16 v20 = 1024;
        unsigned int v21 = v16;
        _os_log_debug_impl(&dword_1B8B00000, v17, OS_LOG_TYPE_DEBUG, "#D Duplicated frequency (%llu), keeping higher bandwidth (%u)", (uint8_t *)&v18, 0x12u);
      }
    }
  }
  else
  {
    int v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18) = 0;
      _os_log_error_impl(&dword_1B8B00000, v15, OS_LOG_TYPE_ERROR, "Given report structure is NULL!", (uint8_t *)&v18, 2u);
    }
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_3(uint64_t a1, uint64_t a2)
{
}

void tlv::parseV<nas::tlv::abm::BBNeighborList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  uint64_t v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        uint64_t v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(void *)uint64_t v10 = *(void *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      uint64_t v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8B0F460(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8B0F448);
}

void sub_1B8B0F474(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<nas::tlv::abm::BBFreqItem>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      uint64_t v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v7 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      std::vector<nas::tlv::abm::BBFreqItem>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    int v15 = &v11[16 * v10];
    bzero(v13, v14);
    unsigned int v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        uint64_t v17 = *((void *)v5 - 2);
        v5 -= 4;
        int v18 = v5[2];
        *((void *)v13 - 2) = v17;
        v13 -= 16;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      uint64_t v5 = *(_DWORD **)a1;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(void *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void tlv::parseV<nas::tlv::abm::BBSearchFreqList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  unint64_t v8 = (char *)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        uint64_t v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(void *)uint64_t v10 = *(void *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      unint64_t v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8B0F6F0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8B0F6D8);
}

void sub_1B8B0F704(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  unint64_t v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2;
  int v31 = &__block_descriptor_tmp_82_1;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v4 = (const void **)v2[6];
  uint64_t v5 = (const void **)v2[7];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    uint64_t v6 = (const void **)v2[6];
    while (*((unsigned char *)*v6 + 8) != 16)
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    unsigned int v9 = (char *)operator new(0x18uLL);
    uint64_t v10 = v9;
    v9[8] = 16;
    *(void *)unsigned int v9 = &unk_1F1267F10;
    *(void *)(v9 + 9) = 0;
    unint64_t v8 = (int8x8_t *)(v9 + 9);
    unint64_t v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      tlv *v5 = v9;
      v2[7] = v5 + 1;
      goto LABEL_25;
    }
    int64_t v12 = (char *)v5 - (char *)v4;
    uint64_t v13 = v5 - v4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v11 - (void)v4;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = operator new(8 * v16);
      int v18 = &v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      void *v18 = v10;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v20;
        v2[8] = v19;
        if (!v4)
        {
LABEL_24:
          v2[7] = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v17 = 0;
      int v18 = (void *)(8 * v13);
      uint64_t v19 = 0;
      *(void *)(8 * v13) = v10;
      uint64_t v20 = 8 * v13 + 8;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v4 - v17) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    int v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    int v18 = (void *)((char *)v18 - v22);
    __int16 v24 = &v17[8 * v13 - 16];
    uint64_t v25 = v5 - 2;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    uint64_t v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v28 = (uint64_t)*--v5;
        *--int v18 = v28;
      }
      while (v5 != v4);
    }
    uint64_t v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v20;
    v2[8] = v19;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  unint64_t v8 = (int8x8_t *)(v7 + 9);
LABEL_25:
  v30((uint64_t)v29, v8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B0FA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRetain(v3);
    CFRetain(v3);
    CFTypeID v4 = CFGetTypeID(v3);
    if (v4 == CFDataGetTypeID())
    {
      CFRetain(v3);
      CFRetain(v3);
      CFRelease(v3);
      uint64_t v5 = v3;
    }
    else
    {
      uint64_t v5 = 0;
    }
    CFRelease(v3);
    CFRelease(v3);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v5) {
    uint64_t v6 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    if (v5)
    {
      CFRetain(v5);
      CFRetain(v5);
    }
    ctu::cf::assign();
    if (v5) {
      CFRelease(v5);
    }
    int8x16_t v7 = vorrq_s8(vandq_s8((int8x16_t)0, (int8x16_t)xmmword_1B8C34800), vandq_s8((int8x16_t)0, (int8x16_t)xmmword_1B8C347F0));
    *a2 = vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
    if (v5)
    {
      CFRelease(v5);
      goto LABEL_19;
    }
  }
  else if (v5)
  {
LABEL_19:
    CFRelease(v5);
  }
}

void sub_1B8B0FC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, const void *a16, const void *a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a17);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a14);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  _Unwind_Resume(a1);
}

void sub_1B8B0FC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  unint64_t v8 = va_arg(va1, const void *);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v11 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm9WWANState10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B0FD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B0FD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B0FDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_4(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v151 = *(void *)(a1 + 32);
  CFMutableDictionaryRef v176 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v4 = Mutable;
  if (Mutable)
  {
    CFMutableDictionaryRef v175 = Mutable;
    CFMutableDictionaryRef v176 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    CFMutableDictionaryRef v175 = 0;
  }
  uint64_t v177 = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTEBandInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_372_0;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v5 = (void *)*MEMORY[0x1E4FB96C8];
  uint64_t v184 = (void *)*MEMORY[0x1E4FB96C8];
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  unint64_t v8 = TlvValue;
  if (TlvValue)
  {
    int v9 = v7;
    v185[0] = TlvValue;
    v178[0] = tlv::parseV<coex::tlv::abm::LTEBandInformation>(v185, v7);
    v178[1] = v10;
    if (v185[0]) {
      v181(&v179, (tlv **)v178);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 16, v8, v9);
    }
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v4)
  {
    CFRelease(v4);
    CFMutableDictionaryRef v174 = v4;
    CFRetain(v4);
  }
  else
  {
    CFMutableDictionaryRef v174 = 0;
  }
  uint64_t v177 = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm17LTETDDInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_376_0;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  unint64_t v11 = (void *)*MEMORY[0x1E4FB96B0];
  uint64_t v184 = (void *)*MEMORY[0x1E4FB96B0];
  int64_t v12 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  unint64_t v14 = v12;
  if (v12)
  {
    int v15 = v13;
    v185[0] = v12;
    memset(v178, 170, 20);
    tlv::parseV<coex::tlv::abm::LTETDDInformation>(v185, v13, (uint64_t)v178);
    if (v185[0]) {
      v181(&v179, (tlv **)v178);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 17, v14, v15);
    }
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v4)
  {
    CFRelease(v4);
    CFMutableDictionaryRef v173 = v4;
    CFRetain(v4);
  }
  else
  {
    CFMutableDictionaryRef v173 = 0;
  }
  v178[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12LTEOffPeriodENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_380_0;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  unint64_t v16 = (void *)*MEMORY[0x1E4FB95D0];
  uint64_t v184 = (void *)*MEMORY[0x1E4FB95D0];
  uint64_t v17 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v25 = v17;
  if (v17)
  {
    tlv::throwIfNotEnoughBytes(v17, (const unsigned __int8 *)v17 + v18, (const unsigned __int8 *)4);
    LODWORD(v185[0]) = *(_DWORD *)v25;
    v181(&v179, v185);
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v4)
  {
    CFRelease(v4);
    CFMutableDictionaryRef v172 = v4;
    CFRetain(v4);
  }
  else
  {
    CFMutableDictionaryRef v172 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTEBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_383_0;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v26 = (void *)*MEMORY[0x1E4FB97B0];
  uint64_t v184 = (void *)*MEMORY[0x1E4FB97B0];
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTEBandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTEBandInformationSet const&)>(a2, (uint64_t)v178, v19, v20, v21, v22, v23, v24, v117, v129, v139);
  if (v183) {
    CFRelease(v183);
  }
  if (v4)
  {
    CFRelease(v4);
    CFMutableDictionaryRef v171 = v4;
    CFRetain(v4);
  }
  else
  {
    CFMutableDictionaryRef v171 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25TDSCDMABandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_386;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v184 = (void *)*MEMORY[0x1E4FB98B8];
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::TDSCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::TDSCDMABandInformationSet const&)>(a2, (uint64_t)v178, v27, v28, v29, v30, v31, v32, v118, v130, v140);
  if (v183) {
    CFRelease(v183);
  }
  if (v4)
  {
    CFRelease(v4);
    CFMutableDictionaryRef v170 = v4;
    CFRetain(v4);
  }
  else
  {
    CFMutableDictionaryRef v170 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21GSMBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_389_0;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  long long v39 = (void *)*MEMORY[0x1E4FB9790];
  uint64_t v184 = (void *)*MEMORY[0x1E4FB9790];
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::GSMBandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSMBandInformationSet const&)>(a2, (uint64_t)v178, v33, v34, v35, v36, v37, v38, v119, v131, v141);
  if (v183) {
    CFRelease(v183);
  }
  if (v4)
  {
    CFRelease(v4);
    CFMutableDictionaryRef v169 = v4;
    CFRetain(v4);
  }
  else
  {
    CFMutableDictionaryRef v169 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22ONEXBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_392_0;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v184 = (void *)*MEMORY[0x1E4FB97F0];
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::ONEXBandInformationSet,void({block_pointer}&)(coex::tlv::abm::ONEXBandInformationSet const&)>(a2, (uint64_t)v178, v40, v41, v42, v43, v44, v45, v120, v132, v142);
  if (v183) {
    CFRelease(v183);
  }
  if (v4)
  {
    CFRelease(v4);
    CFMutableDictionaryRef v168 = v4;
    CFRetain(v4);
  }
  else
  {
    CFMutableDictionaryRef v168 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21HDRBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_395_0;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v184 = (void *)*MEMORY[0x1E4FB97A0];
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::HDRBandInformationSet,void({block_pointer}&)(coex::tlv::abm::HDRBandInformationSet const&)>(a2, (uint64_t)v178, v46, v47, v48, v49, v50, v51, v121, v133, v143);
  if (v183) {
    CFRelease(v183);
  }
  if (v4)
  {
    CFRelease(v4);
    CFMutableDictionaryRef v167 = v4;
    CFRetain(v4);
  }
  else
  {
    CFMutableDictionaryRef v167 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm23WCDMABandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_398_0;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  size_t v58 = (void *)*MEMORY[0x1E4FB9848];
  uint64_t v184 = (void *)*MEMORY[0x1E4FB9848];
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMABandInformationSet const&)>(a2, (uint64_t)v178, v52, v53, v54, v55, v56, v57, v122, v134, v144);
  if (v183) {
    CFRelease(v183);
  }
  v150 = v16;
  if (v4)
  {
    CFRelease(v4);
    CFMutableDictionaryRef v166 = v4;
    CFRetain(v4);
  }
  else
  {
    CFMutableDictionaryRef v166 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24LTECarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_401_0;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v145 = *MEMORY[0x1E4FB9868];
  uint64_t v184 = (void *)*MEMORY[0x1E4FB9868];
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTECarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTECarrierInformationSet const&)>(a2, (uint64_t)v178);
  if (v183) {
    CFRelease(v183);
  }
  if (v4)
  {
    CFRelease(v4);
    v65 = v11;
    CFMutableDictionaryRef v165 = v4;
    CFRetain(v4);
  }
  else
  {
    v65 = v11;
    CFMutableDictionaryRef v165 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21NGCBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_404;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v184 = (void *)*MEMORY[0x1E4FB97C0];
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGCBandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCBandInformationSet const&)>(a2, (uint64_t)v178, v59, v60, v61, v62, v63, v64, v123, v184, v145);
  if (v183) {
    CFRelease(v183);
  }
  uint64_t v66 = v26;
  if (v4)
  {
    CFRelease(v4);
    uint64_t v67 = v5;
    CFMutableDictionaryRef v164 = v4;
    CFRetain(v4);
  }
  else
  {
    uint64_t v67 = v5;
    CFMutableDictionaryRef v164 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24NGCCarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_407;
  CFMutableDictionaryRef v183 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v68 = *MEMORY[0x1E4FB9870];
  uint64_t v184 = (void *)*MEMORY[0x1E4FB9870];
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGCCarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCCarrierInformationSet const&)>(a2, (uint64_t)v178);
  if (v183) {
    CFRelease(v183);
  }
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v124 = v68;
  CFIndex Count = CFDictionaryGetCount(v4);
  v70 = (CFTypeRef *)MEMORY[0x1E4FB9670];
  if (Count)
  {
    v179 = 0;
    uint64_t v71 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v72 = v71;
    if (v71) {
      v179 = v71;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v71, *v70, v4);
    if (v72 && (CFTypeID v73 = CFGetTypeID(v72), v73 == CFDictionaryGetTypeID()))
    {
      uint64_t v163 = v72;
      CFRetain(v72);
      v74 = v72;
    }
    else
    {
      v74 = 0;
      uint64_t v163 = 0;
    }
    coex::QMICommandDriver::sendStateUpdate_sync(v151, (const void **)&v163, 0);
    if (v74) {
      CFRelease(v74);
    }
    if (v72) {
      CFRelease(v72);
    }
    CFMutableDictionaryRef v4 = v176;
  }
  if (v4) {
    CFRelease(v4);
  }
  CFMutableDictionaryRef v176 = 0;
  CFMutableDictionaryRef v75 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v82 = v75;
  if (v75)
  {
    CFMutableDictionaryRef v176 = v75;
    CFMutableDictionaryRef v162 = v75;
    CFRetain(v75);
  }
  else
  {
    CFMutableDictionaryRef v162 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22GSM2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_410;
  CFMutableDictionaryRef v183 = v82;
  if (v82) {
    CFRetain(v82);
  }
  uint64_t v184 = v39;
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::GSM2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSM2BandInformationSet const&)>(a2, (uint64_t)v178, v76, v77, v78, v79, v80, v81, v124, v135, v146);
  if (v183) {
    CFRelease(v183);
  }
  if (v82)
  {
    CFRelease(v82);
    CFMutableDictionaryRef v161 = v82;
    CFRetain(v82);
  }
  else
  {
    CFMutableDictionaryRef v161 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24WCDMA2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_413;
  CFMutableDictionaryRef v183 = v82;
  if (v82) {
    CFRetain(v82);
  }
  uint64_t v184 = v58;
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMA2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMA2BandInformationSet const&)>(a2, (uint64_t)v178, v83, v84, v85, v86, v87, v88, v125, v136, v147);
  if (v183) {
    CFRelease(v183);
  }
  if (v82)
  {
    CFRelease(v82);
    CFMutableDictionaryRef v160 = v82;
    CFRetain(v82);
  }
  else
  {
    CFMutableDictionaryRef v160 = 0;
  }
  uint64_t v177 = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm19LTE2BandInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_417;
  CFMutableDictionaryRef v183 = v82;
  if (v82) {
    CFRetain(v82);
  }
  uint64_t v184 = v67;
  uint64_t v89 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  size_t v91 = v89;
  if (v89)
  {
    int v92 = v90;
    v185[0] = v89;
    v178[0] = tlv::parseV<coex::tlv::abm::LTE2BandInformation>(v185, v90);
    v178[1] = v93;
    if (v185[0]) {
      v181(&v179, (tlv **)v178);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 29, v91, v92);
    }
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v82)
  {
    CFRelease(v82);
    CFMutableDictionaryRef v159 = v82;
    CFRetain(v82);
  }
  else
  {
    CFMutableDictionaryRef v159 = 0;
  }
  uint64_t v177 = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTE2TDDInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_421_0;
  CFMutableDictionaryRef v183 = v82;
  if (v82) {
    CFRetain(v82);
  }
  uint64_t v184 = v65;
  uint64_t v94 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  unint64_t v96 = v94;
  if (v94)
  {
    int v97 = v95;
    v185[0] = v94;
    memset(v178, 170, 20);
    tlv::parseV<coex::tlv::abm::LTE2TDDInformation>(v185, v95, (uint64_t)v178);
    if (v185[0]) {
      v181(&v179, (tlv **)v178);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 30, v96, v97);
    }
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v82)
  {
    CFRelease(v82);
    CFMutableDictionaryRef v158 = v82;
    CFRetain(v82);
  }
  else
  {
    CFMutableDictionaryRef v158 = 0;
  }
  v178[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm13LTE2OffPeriodENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_425;
  CFMutableDictionaryRef v183 = v82;
  if (v82) {
    CFRetain(v82);
  }
  uint64_t v184 = v150;
  long long v98 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v106 = v98;
  if (v98)
  {
    tlv::throwIfNotEnoughBytes(v98, (const unsigned __int8 *)v98 + v99, (const unsigned __int8 *)4);
    LODWORD(v185[0]) = *(_DWORD *)v106;
    v181(&v179, v185);
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v82)
  {
    CFRelease(v82);
    CFMutableDictionaryRef v157 = v82;
    CFRetain(v82);
  }
  else
  {
    CFMutableDictionaryRef v157 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTE2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_428;
  CFMutableDictionaryRef v183 = v82;
  if (v82) {
    CFRetain(v82);
  }
  uint64_t v184 = v66;
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2BandInformationSet const&)>(a2, (uint64_t)v178, v100, v101, v102, v103, v104, v105, v126, v137, v148);
  if (v183) {
    CFRelease(v183);
  }
  if (v82)
  {
    CFRelease(v82);
    CFMutableDictionaryRef v156 = v82;
    CFRetain(v82);
  }
  else
  {
    CFMutableDictionaryRef v156 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25LTE2CarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_431;
  CFMutableDictionaryRef v183 = v82;
  if (v82) {
    CFRetain(v82);
  }
  uint64_t v184 = v149;
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2CarrierInformationSet const&)>(a2, (uint64_t)v178);
  if (v183) {
    CFRelease(v183);
  }
  if (v82)
  {
    CFRelease(v82);
    CFMutableDictionaryRef v155 = v82;
    CFRetain(v82);
  }
  else
  {
    CFMutableDictionaryRef v155 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22NGC2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_434;
  CFMutableDictionaryRef v183 = v82;
  if (v82) {
    CFRetain(v82);
  }
  uint64_t v184 = v138;
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2BandInformationSet const&)>(a2, (uint64_t)v178, v107, v108, v109, v110, v111, v112, v127, v138, (uint64_t)v149);
  if (v183) {
    CFRelease(v183);
  }
  if (v82)
  {
    CFRelease(v82);
    CFMutableDictionaryRef v154 = v82;
    CFRetain(v82);
  }
  else
  {
    CFMutableDictionaryRef v154 = 0;
  }
  v185[0] = 0;
  v179 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v180 = 1174405120;
  v181 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25NGC2CarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v182 = &__block_descriptor_tmp_437;
  CFMutableDictionaryRef v183 = v82;
  if (v82) {
    CFRetain(v82);
  }
  uint64_t v184 = v128;
  v178[0] = &v179;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2CarrierInformationSet const&)>(a2, (uint64_t)v178);
  if (v183) {
    CFRelease(v183);
  }
  if (v82) {
    CFRelease(v82);
  }
  if (CFDictionaryGetCount(v82))
  {
    v179 = 0;
    unint64_t v113 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v114 = v113;
    if (v113) {
      v179 = v113;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v113, *v70, v82);
    if (v114 && (CFTypeID v115 = CFGetTypeID(v114), v115 == CFDictionaryGetTypeID()))
    {
      uint64_t v153 = v114;
      CFRetain(v114);
      v116 = v114;
    }
    else
    {
      v116 = 0;
      uint64_t v153 = 0;
    }
    coex::QMICommandDriver::sendStateUpdate_sync(v151, (const void **)&v153, 1);
    if (v116) {
      CFRelease(v116);
    }
    if (v114) {
      CFRelease(v114);
    }
    CFMutableDictionaryRef v82 = v176;
  }
  if (v82) {
    CFRelease(v82);
  }
}

void sub_1B8B10EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v7 - 160));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v7 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11044(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 18, v2, v3);
  JUMPOUT(0x1B8B100E8);
}

void sub_1B8B11098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v8);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v9 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v9 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B110C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v9);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v10 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v10 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B110F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v10);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v11 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v11 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B1111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v11);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v12 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v12 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v15);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v16 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v16 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v16);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v17 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v17 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B111A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v26);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v27 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a26);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v27 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B111CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v27);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v28 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a27);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v28 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B111F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v28);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v29 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a28);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v29 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v29);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v30 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a29);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v30 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v30);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v31 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a30);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v31 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B1127C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v31);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v32 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a31);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v32 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B112A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,const void *a32)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v32);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v33 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a32);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v33 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B112D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v33);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v34 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a33);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v34 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,const void *a34)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v34);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v35 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a34);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11330(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 160));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B1134C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v35);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v36 - 184));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a35);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v36 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v12);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v13 - 184));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v13 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B113A4(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B113B8(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B113CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v13);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v14 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v14 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B113F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v14);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v15 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v15 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,const void *a36)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v36);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v37 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a36);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v37 - 200));
  _Unwind_Resume(a1);
}

void sub_1B8B11450(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v1);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v2 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v2 - 208));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v2 - 200));
  _Unwind_Resume(a1);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::TDSCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::TDSCDMABandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 20, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B1155C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B1153CLL);
  }
  JUMPOUT(0x1B8B11534);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2CarrierInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v10 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<coex::tlv::abm::NGC2CarrierInformationSet>(&v10, v5, (uint64_t)__p);
    unint64_t v8 = v10;
    if (v10) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v8) {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 38, v6, v7);
    }
  }
}

void sub_1B8B1163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2CarrierInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v10 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<coex::tlv::abm::LTE2CarrierInformationSet>(&v10, v5, (uint64_t)__p);
    unint64_t v8 = v10;
    if (v10) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v8) {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 33, v6, v7);
    }
  }
}

void sub_1B8B11728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMA2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMA2BandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 27, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B11824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B11804);
  }
  JUMPOUT(0x1B8B117FCLL);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::NGCCarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCCarrierInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v10 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<coex::tlv::abm::NGCCarrierInformationSet>(&v10, v5, (uint64_t)__p);
    unint64_t v8 = v10;
    if (v10) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v8) {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 35, v6, v7);
    }
  }
}

void sub_1B8B11904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::LTECarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTECarrierInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v10 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<coex::tlv::abm::LTECarrierInformationSet>(&v10, v5, (uint64_t)__p);
    unint64_t v8 = v10;
    if (v10) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v8) {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 28, v6, v7);
    }
  }
}

void sub_1B8B119F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMABandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 24, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B11AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B11ACCLL);
  }
  JUMPOUT(0x1B8B11AC4);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::ONEXBandInformationSet,void({block_pointer}&)(coex::tlv::abm::ONEXBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 22, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B11BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B11BBCLL);
  }
  JUMPOUT(0x1B8B11BB4);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2BandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 37, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B11CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B11CACLL);
  }
  JUMPOUT(0x1B8B11CA4);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2BandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 32, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B11DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B11D9CLL);
  }
  JUMPOUT(0x1B8B11D94);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::GSM2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSM2BandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 25, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B11EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B11E8CLL);
  }
  JUMPOUT(0x1B8B11E84);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::NGCBandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 34, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B11F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B11F7CLL);
  }
  JUMPOUT(0x1B8B11F74);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::LTEBandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTEBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 19, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B1208C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B1206CLL);
  }
  JUMPOUT(0x1B8B12064);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::HDRBandInformationSet,void({block_pointer}&)(coex::tlv::abm::HDRBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 23, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B1217C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B1215CLL);
  }
  JUMPOUT(0x1B8B12154);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::GSMBandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSMBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v15 = TlvValue;
    __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      int v17 = 0;
      int v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
    }
    else
    {
      int v17 = 1;
      int v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a1, 21, v15, v16);
        }
        return;
      }
    }
    int v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B8B1226C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B1224CLL);
  }
  JUMPOUT(0x1B8B12244);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24LTECarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8B122CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFArray const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B12360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1B8B12384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTEBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8B123E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTEBandInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  coex::convert((CFMutableDictionaryRef *)&cf, a2);
  ctu::cf::insert<__CFString const*,__CFDictionary *>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B12448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::convert(__CFArray **a1, unsigned int **a2)
{
  uint64_t v3 = (char *)a2[1] - (char *)*a2;
  if (v3 < 0) {
    goto LABEL_10;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3 / 0x28uLL, MEMORY[0x1E4F1D510]);
  int v7 = *a2;
  unint64_t v8 = a2[1];
  while (v7 != v8)
  {
    uint64_t valuePtr = *v7;
    CFNumberRef v9 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
    if (v9)
    {
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
    }
    v7 += 10;
  }
  if (Mutable)
  {
    CFTypeID v10 = CFGetTypeID(Mutable);
    if (v10 == CFArrayGetTypeID())
    {
      *a1 = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      *a1 = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
LABEL_10:
    *a1 = 0;
  }
}

{
  uint64_t v3;
  CFAllocatorRef v5;
  __CFArray *Mutable;
  unsigned int *v7;
  unsigned int *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  uint64_t v15;
  UInt8 *v16;
  CFDataRef v17;
  CFDataRef v18;
  CFTypeID v19;
  __CFDictionary *v20;
  CFTypeID v21;
  __CFArray **v22;
  __CFDictionary *cf;
  CFDataRef valuePtr;

  uint64_t v3 = (char *)a2[1] - (char *)*a2;
  if (v3 < 0) {
    goto LABEL_24;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (unint64_t)v3 >> 4, MEMORY[0x1E4F1D510]);
  int v22 = a1;
  int v7 = *a2;
  unint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    CFNumberRef v9 = (const void *)*MEMORY[0x1E4FB9658];
    CFTypeID v10 = (const void *)*MEMORY[0x1E4FB9538];
    uint64_t v11 = (const void *)*MEMORY[0x1E4FB9600];
    do
    {
      uint64_t v12 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t valuePtr = (CFDataRef)*v7;
      uint64_t v13 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
      ctu::cf::insert<__CFString const*,__CFNumber const*>(v12, v9, v13);
      if (v13) {
        CFRelease(v13);
      }
      uint64_t valuePtr = (CFDataRef)v7[1];
      int v14 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
      ctu::cf::insert<__CFString const*,__CFNumber const*>(v12, v10, v14);
      if (v14) {
        CFRelease(v14);
      }
      uint64_t v15 = *((void *)v7 + 1);
      uint64_t valuePtr = 0;
      uint64_t v16 = (UInt8 *)operator new(8uLL);
      *(void *)uint64_t v16 = v15;
      int v17 = CFDataCreate(v5, v16, 8);
      int v18 = v17;
      if (v17) {
        uint64_t valuePtr = v17;
      }
      operator delete(v16);
      ctu::cf::insert<__CFString const*,__CFData const*>(v12, v11, v18);
      if (v18) {
        CFRelease(v18);
      }
      if (v12)
      {
        int v19 = CFGetTypeID(v12);
        if (v19 == CFDictionaryGetTypeID())
        {
          CFTypeRef cf = v12;
          CFRetain(v12);
          int v20 = v12;
        }
        else
        {
          int v20 = 0;
          CFTypeRef cf = 0;
        }
        CFRelease(v12);
      }
      else
      {
        int v20 = 0;
        CFTypeRef cf = 0;
      }
      CFArrayAppendValue(Mutable, v20);
      if (cf) {
        CFRelease(cf);
      }
      v7 += 4;
    }
    while (v7 != v8);
  }
  a1 = v22;
  if (Mutable)
  {
    uint64_t v21 = CFGetTypeID(Mutable);
    if (v21 == CFArrayGetTypeID())
    {
      void *v22 = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      void *v22 = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
LABEL_24:
    *a1 = 0;
  }
}

{
  uint64_t v3;
  CFAllocatorRef v5;
  __CFArray *Mutable;
  unsigned int *v7;
  unsigned int *v8;
  CFNumberRef v9;
  CFTypeID v10;
  uint64_t valuePtr;

  uint64_t v3 = (char *)a2[1] - (char *)*a2;
  if (v3 < 0) {
    goto LABEL_10;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3 / 0x1CuLL, MEMORY[0x1E4F1D510]);
  int v7 = *a2;
  unint64_t v8 = a2[1];
  while (v7 != v8)
  {
    uint64_t valuePtr = *v7;
    CFNumberRef v9 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
    if (v9)
    {
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
    }
    v7 += 7;
  }
  if (Mutable)
  {
    CFTypeID v10 = CFGetTypeID(Mutable);
    if (v10 == CFArrayGetTypeID())
    {
      *a1 = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      *a1 = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
LABEL_10:
    *a1 = 0;
  }
}

void sub_1B8B1258C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B125A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B125C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B12850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B1287C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  CFTypeRef v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B12898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFAllocatorRef v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v8 = va_arg(va2, const void *);
  uint64_t v10 = va_arg(va2, void);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B128D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFAllocatorRef v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B12908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  CFAllocatorRef v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::convert(CFMutableDictionaryRef *a1, unsigned int *a2)
{
  *a1 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v5 = Mutable;
  if (Mutable) {
    *a1 = Mutable;
  }
  coex::convert((__CFDictionary **)&v8, a2);
  CFTypeRef v6 = v8;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v5, (CFTypeRef)*MEMORY[0x1E4FB96C0], v8);
  if (v6) {
    CFRelease(v6);
  }
  coex::convert((__CFDictionary **)&v8, a2 + 2);
  CFTypeRef v7 = v8;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v5, (CFTypeRef)*MEMORY[0x1E4FB96A8], v8);
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1B8B129FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v2);
  _Unwind_Resume(a1);
}

void sub_1B8B12A30(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B12A44(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void coex::convert(__CFDictionary **a1, unsigned int *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t valuePtr = (__CFDictionary *)*a2;
  CFNumberRef v5 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  uint64_t valuePtr = (__CFDictionary *)a2[1];
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  uint64_t valuePtr = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef v8 = Mutable;
  if (Mutable) {
    uint64_t valuePtr = Mutable;
  }
  ctu::cf::insert<__CFString const*,__CFNumber const*>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9658], v5);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(v8, (CFTypeRef)*MEMORY[0x1E4FB9538], v6);
  if (v8)
  {
    CFTypeID v9 = CFGetTypeID(v8);
    if (v9 == CFDictionaryGetTypeID())
    {
      *a1 = v8;
      CFRetain(v8);
    }
    else
    {
      *a1 = 0;
    }
    CFRelease(v8);
  }
  else
  {
    *a1 = 0;
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

{
  CFAllocatorRef v4;
  __CFDictionary *Mutable;
  CFTypeID v6;

  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB95B0], *a2, v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9570], a2[1], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9650], a2[2], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9530], a2[3], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9520], a2[4], v4);
  if (Mutable)
  {
    CFNumberRef v6 = CFGetTypeID(Mutable);
    if (v6 == CFDictionaryGetTypeID())
    {
      *a1 = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      *a1 = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
    *a1 = 0;
  }
}

void sub_1B8B12BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, uint64_t a11, const void *a12)
{
}

void ctu::cf::insert<__CFString const*,__CFNumber const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B12C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1B8B12CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B12D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1B8B12D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, char **a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v8 = *(unsigned __int8 *)a1;
  CFTypeRef v7 = (char *)a1 + 1;
  uint64_t v6 = v8;
  CFTypeID v9 = *a3;
  uint64_t v10 = a3[1];
  unint64_t v11 = (v10 - *a3) >> 4;
  BOOL v12 = v8 >= v11;
  unint64_t v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      uint64_t v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    CFTypeID v9 = *a3;
    uint64_t v10 = a3[1];
  }
  if (v9 == v10) {
    return v7;
  }
  int v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    uint64_t v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    uint64_t v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      void *v14 = *((void *)v7 + 1);
      uint64_t v16 = v7 + 16;
    }
    v14 += 2;
    CFTypeRef v7 = v16;
  }
  while (v15 + 2 != (void *)v10);
  return v16;
}

void std::vector<coex::tlv::abm::BandInfoSet>::__append(char **a1, unint64_t a2)
{
  CFNumberRef v5 = a1[1];
  CFAllocatorRef v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    unint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    uint64_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      CFNumberRef v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void tlv::parseV<coex::tlv::abm::LTECarrierInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  CFNumberRef v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v9 = *(unsigned __int8 *)v5;
  uint64_t v8 = (uint64_t)v5 + 1;
  unint64_t v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::LTECarrierInformation>::__append((char **)a3, v7);
    unint64_t v10 = *(char **)a3;
    unint64_t v11 = *(char **)(a3 + 8);
    if (*(char **)a3 != v11)
    {
      do
      {
        uint64_t v8 = coex::tlv::abm::parseField(v8, v6, (uint64_t)v10);
        v10 += 40;
      }
      while (v10 != v11);
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B8B13044(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8B13030);
}

void sub_1B8B13058(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<coex::tlv::abm::LTECarrierInformation>::__append(char **a1, unint64_t a2)
{
  CFNumberRef v5 = a1[1];
  CFAllocatorRef v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x666666666666666) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x333333333333333) {
      unint64_t v10 = 0x666666666666666;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(40 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    unint64_t v13 = &v11[40 * v7];
    size_t v14 = &v11[40 * v10];
    size_t v15 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 40);
        long long v18 = *(_OWORD *)(v5 - 24);
        *(void *)(v13 - 11) = *(void *)(v5 - 11);
        *(_OWORD *)(v13 - 24) = v18;
        *(_OWORD *)(v13 - 40) = v17;
        v13 -= 40;
        v5 -= 40;
      }
      while (v5 != v6);
      CFNumberRef v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t coex::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)8);
  *(void *)(a3 + 8) = *(void *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 24), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(a1 + 24);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 28), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 28);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 32), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 36) = *(unsigned char *)(a1 + 32);
  return a1 + 33;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 20) = *(_WORD *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 22), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 22) = *(_WORD *)(a1 + 22);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 24), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 24) = *(_WORD *)(a1 + 24);
  return a1 + 26;
}

{
  uint64_t v6;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  uint64_t v6 = a1 + 8;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8);
  if ((unint64_t)&a2[-a1 - 8] >= 8)
  {
    *(void *)(a3 + 8) = *(void *)(a1 + 8);
    return a1 + 16;
  }
  return v6;
}

{
  uint64_t v6;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  uint64_t v6 = a1 + 16;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)8);
  if ((unint64_t)&a2[-a1 - 16] >= 8)
  {
    *(void *)(a3 + 16) = *(void *)(a1 + 16);
    return a1 + 24;
  }
  return v6;
}

unint64_t tlv::parseV<coex::tlv::abm::LTEBandInformation>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  CFAllocatorRef v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  unsigned int v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  uint64_t v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 12), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B8B133CC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B8B133ACLL);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm13ConditionFail10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B134A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B134B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B134E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_5(uint64_t a1, qmi::MessageBase *a2)
{
  v38[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef v30 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v6 = Mutable;
  if (Mutable)
  {
    CFMutableDictionaryRef v29 = Mutable;
    CFTypeRef v30 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    CFMutableDictionaryRef v29 = 0;
  }
  uint64_t v37 = 0;
  uint64_t v31 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v32 = 1174405120;
  uint64_t v33 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm33ContinuousTxSubframeDenialsStatusENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v34 = &__block_descriptor_tmp_442;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v36 = *MEMORY[0x1E4FB9988];
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  unint64_t v9 = TlvValue;
  if (TlvValue)
  {
    int v10 = v8;
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)8);
    if ((v10 & 0xFFFFFFF8) != 0) {
      uint64_t v11 = *(void *)v9;
    }
    else {
      uint64_t v11 = 0;
    }
    v38[0] = v11;
    v33((uint64_t)&v31, v38);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  CFTypeRef v28 = v30;
  if (v30) {
    CFRetain(v30);
  }
  uint64_t v37 = 0;
  uint64_t v31 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v32 = 1174405120;
  uint64_t v33 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm29QMITxPowerLimitEnforceFailureENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v34 = &__block_descriptor_tmp_446;
  CFTypeRef cf = v30;
  if (v30) {
    CFRetain(v30);
  }
  uint64_t v36 = *MEMORY[0x1E4FB97F8];
  size_t v12 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  size_t v14 = v12;
  if (v12)
  {
    int v15 = v13;
    tlv::throwIfNotEnoughBytes(v12, (const unsigned __int8 *)v12 + v13, (const unsigned __int8 *)8);
    if ((v15 & 0xFFFFFFF8) != 0) {
      uint64_t v16 = *(void *)v14;
    }
    else {
      uint64_t v16 = 0;
    }
    v38[0] = v16;
    v33((uint64_t)&v31, v38);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v30)
  {
    CFRelease(v30);
    CFTypeRef v27 = v30;
    CFRetain(v30);
  }
  else
  {
    CFTypeRef v27 = 0;
  }
  uint64_t v37 = 0;
  uint64_t v31 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v32 = 1174405120;
  uint64_t v33 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm30WCI2TxPowerLimitEnforceFailureENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v34 = &__block_descriptor_tmp_450;
  CFTypeRef cf = v30;
  if (v30) {
    CFRetain(v30);
  }
  uint64_t v36 = *MEMORY[0x1E4FB9850];
  long long v17 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  int v19 = v17;
  if (v17)
  {
    int v20 = v18;
    tlv::throwIfNotEnoughBytes(v17, (const unsigned __int8 *)v17 + v18, (const unsigned __int8 *)8);
    if ((v20 & 0xFFFFFFF8) != 0) {
      uint64_t v21 = *(void *)v19;
    }
    else {
      uint64_t v21 = 0;
    }
    v38[0] = v21;
    v33((uint64_t)&v31, v38);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v30) {
    CFRelease(v30);
  }
  uint64_t v31 = 0;
  int v22 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v23 = v22;
  if (v22) {
    uint64_t v31 = v22;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v22, (CFTypeRef)*MEMORY[0x1E4FB9720], v30);
  if (v23 && (CFTypeID v24 = CFGetTypeID(v23), v24 == CFDictionaryGetTypeID()))
  {
    uint64_t v26 = v23;
    CFRetain(v23);
    uint64_t v25 = v23;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, (const void **)&v26, 0);
  if (v25) {
    CFRelease(v25);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v30) {
    CFRelease(v30);
  }
}

void sub_1B8B13910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::cf::insert<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B13B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1B8B13B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::sendStateUpdate_sync(uint64_t a1, const void **a2, int a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (*a2) {
    CFAllocatorRef v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    CFAllocatorRef v4 = 0;
  }
  if (!v4) {
    return;
  }
  int v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 2112;
    *(void *)&buf[10] = v3;
    _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I Update for SubId=%d -> %@", buf, 0x12u);
    uint64_t v3 = *a2;
  }
  if (v3)
  {
    CFRetain(v3);
    uint64_t v9 = *(void *)(a1 + 152);
    CFTypeRef v43 = v3;
    CFRetain(v3);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 152);
    CFTypeRef v43 = 0;
  }
  int v52 = a3;
  int v50 = 0;
  int v51 = 0;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v64 = v10;
  long long v65 = v10;
  long long v62 = v10;
  long long v63 = v10;
  long long v60 = v10;
  long long v61 = v10;
  long long v58 = v10;
  long long v59 = v10;
  *(_OWORD *)long long buf = v10;
  *(_OWORD *)&uint8_t buf[16] = v10;
  uint64_t v11 = *(pthread_mutex_t **)(v9 + 24);
  __p[0] = (void *)10;
  __p[1] = buf;
  v67[0] = 0;
  v67[1] = v11;
  pthread_mutex_lock(v11);
  size_t v12 = *(atomic_uint **)(v9 + 8);
  if (!v12)
  {
    size_t v14 = *(uint64_t ***)v9;
    goto LABEL_22;
  }
  unsigned int explicit = atomic_load_explicit(v12 + 2, memory_order_acquire);
  size_t v14 = *(uint64_t ***)v9;
  if (explicit == 1)
  {
    int v15 = *v14;
    uint64_t v16 = *(void *)(v9 + 16);
    if ((uint64_t *)v16 == *v14)
    {
      uint64_t v16 = v15[1];
      *(void *)&long long v53 = v16;
      if (v15 == (uint64_t *)v16)
      {
LABEL_19:
        *(void *)(v9 + 16) = v16;
        goto LABEL_20;
      }
    }
    else
    {
      *(void *)&long long v53 = *(void *)(v9 + 16);
    }
    uint64_t v17 = *(void *)(v16 + 16);
    if (*(unsigned char *)(v17 + 24))
    {
      uint64_t v16 = *(void *)(v16 + 8);
    }
    else
    {
      uint64_t v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v53);
      size_t v14 = *(uint64_t ***)v9;
    }
    goto LABEL_19;
  }
LABEL_20:
  size_t v12 = *(atomic_uint **)(v9 + 8);
  if (v12) {
    atomic_fetch_add_explicit(v12 + 2, 1u, memory_order_relaxed);
  }
LABEL_22:
  int v18 = v51;
  int v50 = v14;
  int v51 = v12;
  if (v18)
  {
    if (atomic_fetch_add(v18 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v18 + 16))(v18);
      if (atomic_fetch_add(v18 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v18 + 24))(v18);
      }
    }
  }
  pthread_mutex_unlock(v67[1]);
  int v19 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v67[0][-1].__opaque[55] >= 0)
    {
      int v20 = (char *)__p[1] + 16 * (uint64_t)v67[0];
      do
      {
        uint64_t v21 = (atomic_uint *)*((void *)v20 - 1);
        if (v21)
        {
          if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
            if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
            }
          }
        }
        v20 -= 16;
      }
      while (v20 > v19);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v22;
  long long v70 = v22;
  *(_OWORD *)uint64_t v67 = v22;
  long long v68 = v22;
  long long v65 = v22;
  *(_OWORD *)__p = v22;
  long long v63 = v22;
  long long v64 = v22;
  long long v61 = v22;
  long long v62 = v22;
  long long v59 = v22;
  long long v60 = v22;
  *(_OWORD *)&uint8_t buf[16] = v22;
  long long v58 = v22;
  *(_OWORD *)long long buf = v22;
  buf[0] = 0;
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v72 = 10;
  CFTypeID v73 = &buf[8];
  uint64_t v74 = 0;
  CFMutableDictionaryRef v75 = &v43;
  int v76 = &v52;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  int v23 = v50;
  uint64_t v24 = (uint64_t)*v50;
  int v47 = buf;
  uint64_t v48 = v9;
  uint64_t v49 = v24;
  *(void *)&long long v45 = *(void *)(v24 + 8);
  *((void *)&v45 + 1) = v24;
  *(void *)&long long v46 = buf;
  *((void *)&v46 + 1) = v24;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v45);
  v44[0] = *v23;
  v44[1] = v44[0];
  v44[2] = buf;
  v44[3] = v44[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v44);
  long long v53 = v45;
  long long v54 = v46;
  uint64_t v25 = v44[0];
  uint64_t v26 = v45;
  if ((void)v45 == v44[0])
  {
    if (HIDWORD(v77) <= v77) {
      goto LABEL_64;
    }
  }
  else
  {
    uint64_t v27 = v54;
    if (!*(unsigned char *)v54)
    {
      uint64_t v28 = *(void *)(*(void *)(v45 + 16) + 32);
      CFMutableDictionaryRef v29 = *(CFTypeRef **)(v54 + 272);
      CFTypeRef v30 = *v29;
      if (*v29) {
        CFRetain(*v29);
      }
      uint64_t v31 = *(void *)(v28 + 24);
      if (!v31)
      {
        std::runtime_error::runtime_error(&v56, "call to empty boost::function");
        v56.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
        boost::throw_exception<boost::bad_function_call>(&v56);
      }
      uint64_t v32 = **(unsigned int **)(v27 + 280);
      uint64_t v33 = *(void (**)(uint64_t, CFTypeRef *, uint64_t))((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
      CFTypeRef cf = v30;
      v33(v28 + 32, &cf, v32);
      if (cf) {
        CFRelease(cf);
      }
      if (!*(unsigned char *)v27) {
        *(unsigned char *)uint64_t v27 = 1;
      }
    }
    *(void *)&long long v53 = *(void *)(v26 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v53);
    uint64_t v34 = v54;
    if (*(unsigned char *)v54) {
      *(unsigned char *)long long v54 = 0;
    }
    for (uint64_t i = v53; (void)v53 != v25; uint64_t i = v53)
    {
      uint64_t v36 = *(void *)(*(void *)(i + 16) + 32);
      uint64_t v37 = *(CFTypeRef **)(v34 + 272);
      CFTypeRef v38 = *v37;
      if (*v37) {
        CFRetain(*v37);
      }
      uint64_t v39 = *(void *)(v36 + 24);
      if (!v39)
      {
        std::runtime_error::runtime_error(&v56, "call to empty boost::function");
        v56.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
        boost::throw_exception<boost::bad_function_call>(&v56);
      }
      uint64_t v40 = **(unsigned int **)(v34 + 280);
      int v41 = *(void (**)(uint64_t, CFTypeRef *, uint64_t))((v39 & 0xFFFFFFFFFFFFFFFELL) + 8);
      CFTypeRef cf = v38;
      v41(v36 + 32, &cf, v40);
      if (cf) {
        CFRelease(cf);
      }
      if (!*(unsigned char *)v34) {
        *(unsigned char *)uint64_t v34 = 1;
      }
      *(void *)&long long v53 = *(void *)(i + 8);
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v53);
      uint64_t v34 = v54;
      if (*(unsigned char *)v54) {
        *(unsigned char *)long long v54 = 0;
      }
    }
    if (*((_DWORD *)v47 + 73) <= *((_DWORD *)v47 + 72)) {
      goto LABEL_64;
    }
  }
  boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v48, v49);
LABEL_64:
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
  int v42 = v51;
  if (v51)
  {
    if (atomic_fetch_add(v51 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v42 + 16))(v42);
      if (atomic_fetch_add(v42 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v42 + 24))(v42);
      }
    }
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8B14248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1B8B14258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,std::runtime_error a31)
{
  std::runtime_error::~runtime_error(&a31);
  if (v31) {
    CFRelease(v31);
  }
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v36);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache(&v38);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v37);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v35);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v34);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a25 + 16));
  __cxa_rethrow();
}

void sub_1B8B142E4(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v6);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache(&v8);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v7);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v5);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v4);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B8B142B4);
}

void sub_1B8B14328(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unint64_t a53,char *__p,uint64_t a55)
{
  if (__p)
  {
    if (a55 - 1 >= 0)
    {
      int v55 = &__p[16 * a55];
      do
      {
        std::runtime_error v56 = (atomic_uint *)*((void *)v55 - 1);
        if (v56)
        {
          if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
            if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
            }
          }
        }
        v55 -= 16;
      }
      while (v55 > __p);
    }
    if (a53 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x1B8B14420);
}

void sub_1B8B143FC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8B14438);
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    uint64_t v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        long long v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            int v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 288);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        int v18 = *(_DWORD **)(v7 + 296);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 296) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        uint64_t v17 = *(_DWORD **)(v7 + 296);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 296) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 292);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          uint64_t v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        uint64_t v28 = *(_DWORD **)(v27 + 296);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 296) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              uint64_t v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_1B8B149EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8B14A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8B14BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)result ^ (*(int *)result >> 31);
  if (v3 == 2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(result + 8) + 16))(&v8);
    *(void *)(a2 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *(_DWORD *)a2 = 1;
    uint64_t result = v8;
    if (v8) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = *(void *)(result + 16);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(v4 + 8);
      while (v5)
      {
        uint64_t v6 = v5;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 8), (unsigned int *)&v6, v5 + 1, memory_order_relaxed, memory_order_relaxed);
        BOOL v7 = v6 == v5;
        uint64_t v5 = v6;
        if (v7)
        {
          *(void *)(a2 + 8) = *(void *)(result + 8);
          *(void *)(a2 + 16) = v4;
          *(_DWORD *)a2 = 0;
          return result;
        }
      }
      uint64_t v4 = 0;
    }
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v4;
    *(_DWORD *)a2 = 0;
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_1B8B14D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, void *a2)
{
  int v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v8);
    uint64_t v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1)) {
        unint64_t v5 = v4 + 1;
      }
      else {
        unint64_t v5 = 4 * v4;
      }
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      uint64_t v4 = a2[22];
    }
    uint64_t v6 = *((void *)&v8 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v8;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      uint64_t v4 = a2[22];
    }
    a2[22] = v4 + 1;
    BOOL v7 = (atomic_uint *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
      }
    }
  }
}

void sub_1B8B14EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[32];
  if (v4 == a1[30])
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::reserve(a1, v4 + 1);
    uint64_t v5 = a1[31];
    uint64_t v6 = a1[32];
    BOOL v7 = (uint64_t *)(v5 + 24 * v6 + 8);
    uint64_t result = *(void *)(a2 + 8);
    if (*(_DWORD *)a2 == *(int *)a2 >> 31)
    {
      *BOOL v7 = result;
      uint64_t v9 = *(void *)(a2 + 16);
      *(void *)(v5 + 24 * v6 + 16) = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *BOOL v7 = result;
    }
    int v13 = (int *)(v5 + 24 * v6);
  }
  else
  {
    uint64_t v10 = a1[31];
    uint64_t v11 = (uint64_t *)(v10 + 24 * v4 + 8);
    uint64_t result = *(void *)(a2 + 8);
    if (*(_DWORD *)a2 == *(int *)a2 >> 31)
    {
      uint64_t *v11 = result;
      uint64_t v12 = *(void *)(a2 + 16);
      *(void *)(v10 + 24 * v4 + 16) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      uint64_t *v11 = result;
    }
    int v13 = (int *)(v10 + 24 * v4);
  }
  int *v13 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  ++a1[32];
  return result;
}

void *boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n(void *result, uint64_t a2)
{
  if (a2)
  {
    int v3 = result;
    uint64_t v4 = result[32];
    if (a2 - 1 >= 0)
    {
      uint64_t v5 = result[31] + 24 * v4;
      unint64_t v6 = v5 + 24 * ~a2;
      unint64_t v7 = v5 - 24;
      do
      {
        if (*(_DWORD *)v7 == *(int *)v7 >> 31)
        {
          long long v8 = *(atomic_uint **)(v7 + 16);
          if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
          {
            uint64_t result = (void *)(*(uint64_t (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
            if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
              uint64_t result = (void *)(*(uint64_t (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
            }
          }
        }
        else
        {
          uint64_t result = *(void **)(v7 + 8);
          if (result) {
            uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
        }
        v7 -= 24;
      }
      while (v7 > v6);
      uint64_t v4 = v3[32];
    }
    v3[32] = v4 - a2;
  }
  return result;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 296);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    v8[5] = v3;
    void v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 296), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          unint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1B8B15334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(void *a1)
{
  uint64_t v2 = a1[32];
  if (v2 && v2 - 1 >= 0)
  {
    unint64_t v3 = a1[31];
    unint64_t v4 = v3 + 24 * v2;
    unint64_t v5 = v4;
    do
    {
      int v6 = *(_DWORD *)(v5 - 24);
      v5 -= 24;
      if (v6 == v6 >> 31)
      {
        unint64_t v7 = *(atomic_uint **)(v4 - 8);
        if (v7)
        {
          if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v4 - 16);
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      unint64_t v4 = v5;
    }
    while (v5 > v3);
  }
  if (a1[30] >= 0xBuLL)
  {
    unint64_t v9 = (void *)a1[31];
    operator delete(v9);
  }
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm29QMITxPowerLimitEnforceFailureENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (UInt8 *)operator new(8uLL);
  *(void *)unint64_t v4 = v3;
  CFDataRef v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 8);
  operator delete(v4);
  ctu::cf::insert<__CFString const*,__CFData const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v5);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8B15608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B1561C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFData const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B156B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1B8B156D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = opendir(a1);
  if (result)
  {
    unint64_t v4 = result;
    CFDataRef v5 = readdir(result);
    if (v5)
    {
      int v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        size_t d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17) {
            uint64_t v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          }
          else {
            uint64_t v11 = d_namlen | 7;
          }
          uint64_t v8 = operator new(v11 + 1);
          *(void *)&__dst[8] = d_namlen;
          *(void *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)__dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          uint64_t v8 = __dst;
          if (!d_namlen)
          {
            __dst[d_namlen] = 0;
            unint64_t v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(void *)(a2 + 16)) {
              goto LABEL_10;
            }
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        unint64_t v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(void *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            long long v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(void *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(void *)(a2 + 8) = v9 + 1;
          *(void *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_6;
          }
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(void *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_21;
        }
LABEL_6:
        int v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_1B8B15854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  int v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x1BA9C80E0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1B8B15A88(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1BA9C8300](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1BA9C80F0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1BA9C8300](a1 + 53);
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  uint64_t v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  uint64_t v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size = v6;
  v29.st_mtimespec = v6;
  v29.st_ctimespec = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &v29)) {
    return 1;
  }
  if (!a3)
  {
    if (v5[23] >= 0) {
      uint64_t v21 = v5;
    }
    else {
      uint64_t v21 = *(const char **)v5;
    }
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(const char **)v5;
  }
  if (*v7 == 47)
  {
    *(_OWORD *)__p = *(_OWORD *)v27;
    *(void *)&__p[16] = v28;
  }
  uint64_t v8 = *(void *)&__p[32];
  if (*(void *)&__p[40] != *(void *)&__p[32])
  {
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0) {
          uint64_t v11 = v27;
        }
        else {
          uint64_t v11 = (void **)v27[0];
        }
        if (v28 >= 0) {
          std::string::size_type v12 = HIBYTE(v28);
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v27[1];
        }
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        uint64_t v8 = *(void *)&__p[32];
      }
      uint64_t v13 = v8 + 24 * v9;
      int v14 = *(char *)(v13 + 23);
      uint64_t v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      std::string::size_type v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(void *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size = v17;
      v29.st_mtimespec = v17;
      v29.st_ctimespec = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      int v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        unint64_t v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2)) {
          break;
        }
      }
      unint64_t v9 = v10;
      uint64_t v8 = *(void *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[32]) >> 3) <= v9) {
        goto LABEL_42;
      }
    }
    uint64_t v20 = 0;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v20 = 1;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_43:
  }
    operator delete(*(void **)__p);
LABEL_44:
  uint64_t v22 = *(void *)&__p[32];
  if (*(void *)&__p[32])
  {
    uint64_t v23 = *(void *)&__p[40];
    uint64_t v24 = *(void **)&__p[32];
    if (*(void *)&__p[40] != *(void *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 24;
      }
      while (v23 != v22);
      uint64_t v24 = *(void **)&__p[32];
    }
    *(void *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  return v20;
}

void sub_1B8B15EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t support::fs::removeDir(const char *a1)
{
  uint64_t v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x1E4F143B8];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_std::string::size_type size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &__dst)) {
    return 1;
  }
  long long v42 = 0;
  long long v43 = 0;
  uint64_t v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  unsigned int v5 = 0;
  while (1)
  {
    unsigned int v6 = v5;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)v42) >> 3);
    BOOL v3 = v7 <= v5;
    if (v7 <= v5) {
      break;
    }
    uint64_t v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size == 2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        char v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      std::string::size_type v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = &__p;
      }
      if (v12->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_58;
      }
    }
    int v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0) {
      size_t v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v15 = v1->__pn_.__r_.__value_.__l.__size_;
    }
    unint64_t v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v16 >= 0x17)
    {
      uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v18 = v16 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(void *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15) {
        goto LABEL_38;
      }
    }
    if (v14 >= 0) {
      uint64_t v20 = v1;
    }
    else {
      uint64_t v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0) {
      uint64_t v21 = &__p;
    }
    else {
      uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      char v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespec = v25;
    *(timespec *)&__dst.st_std::string::size_type size = v25;
    __dst.st_mtimespec = v25;
    __dst.st_ctimespec = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespec = v25;
    if (v24 >= 0) {
      uint64_t v26 = &__p;
    }
    else {
      uint64_t v26 = (std::string *)v23;
    }
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (uint64_t v31 = &__p)
        : (uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v32 = opendir((const char *)v31), (v33 = v32) != 0) && (long long v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      char v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = (const std::__fs::filesystem::path *)&__p;
      }
      else {
        uint64_t v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      }
      if (!remove(v28, v27)) {
        goto LABEL_58;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        stat v29 = &__p;
      }
      else {
        stat v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    unsigned int v5 = v6 + 1;
    if ((v30 & 1) == 0) {
      goto LABEL_75;
    }
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v35 = v1;
  }
  else {
    long long v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v36 = (const char *)v1;
    }
    else {
      long long v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    unlink(v36);
  }
LABEL_75:
  long long v37 = (void **)v42;
  if (v42)
  {
    long long v38 = v43;
    long long v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      long long v39 = v42;
    }
    long long v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_1B8B16330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B16348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  BOOL v3 = a1;
  long long v62 = 0;
  long long v63 = 0;
  uint64_t v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  time_t v56 = time(0);
  unsigned int v5 = (void **)v62;
  uint64_t v4 = v63;
  if (v62 == v63)
  {
    char v52 = 1;
    if (v62) {
      goto LABEL_105;
    }
    return v52 & 1;
  }
  double v6 = (double)a2;
  char v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    int v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2) {
      break;
    }
    if (v9 == 1)
    {
      int v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v10 = &v61;
      }
      if (v10->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_95;
      }
    }
LABEL_19:
    memset(__p, 170, 24);
    int v12 = v3[23];
    if (v12 >= 0) {
      size_t v13 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v13 = *((void *)v3 + 1);
    }
    unint64_t v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v14 >= 0x17)
    {
      int v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      std::string::size_type v16 = v9;
      timespec v17 = v5;
      uint64_t v18 = v4;
      uint64_t v19 = v3;
      unint64_t v20 = a2;
      uint64_t v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v21 = v14 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(void *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
      a2 = v20;
      BOOL v3 = v19;
      uint64_t v4 = v18;
      unsigned int v5 = v17;
      std::string::size_type v9 = v16;
      int v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13) {
        goto LABEL_33;
      }
    }
    if (v12 >= 0) {
      std::string::size_type v23 = v3;
    }
    else {
      std::string::size_type v23 = *(const char **)v3;
    }
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0) {
      char v24 = &v61;
    }
    else {
      char v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    timespec v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2) {
        goto LABEL_47;
      }
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespec = v27;
    *(timespec *)&__dst.st_std::string::size_type size = v27;
    __dst.st_mtimespec = v27;
    __dst.st_ctimespec = v27;
    __dst.st_atimespec = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkstd::string::size_type size = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespec = v31;
      *(timespec *)&__dst.st_std::string::size_type size = v31;
      __dst.st_mtimespec = v31;
      __dst.st_ctimespec = v31;
      __dst.st_atimespec = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0) {
        long long v32 = __p;
      }
      else {
        long long v32 = (void **)__p[0];
      }
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (long long v36 = __p) : (long long v36 = (void **)__p[0]),
            (v37 = opendir((const char *)v36), (long long v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0) {
          long long v34 = (const std::__fs::filesystem::path *)__p;
        }
        else {
          long long v34 = (const std::__fs::filesystem::path *)__p[0];
        }
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (long long v35 = __p) : (long long v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          int v30 = 0;
          char v57 = 1;
          char v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_91;
          }
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      int v40 = v3[23];
      if (v40 >= 0) {
        size_t v41 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v41 = *((void *)v3 + 1);
      }
      unint64_t v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v42 >= 0x17)
      {
        uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17) {
          uint64_t v44 = v42 | 7;
        }
        uint64_t v45 = v44 + 1;
        long long v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        long long v43 = (char *)&v59;
        *((unsigned char *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41) {
          goto LABEL_80;
        }
      }
      if (v40 >= 0) {
        long long v46 = v3;
      }
      else {
        long long v46 = *(const char **)v3;
      }
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v47 = &v61;
      }
      else {
        int v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      uint64_t v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(void *)&__dst.st_uid = *((void *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      char v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_88;
        }
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if (v51) {
          goto LABEL_89;
        }
LABEL_59:
        char v57 = 0;
        char v29 = 0;
        int v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if (v51) {
        goto LABEL_89;
      }
      goto LABEL_59;
    }
    char v29 = 0;
    int v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if (v29) {
      goto LABEL_95;
    }
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_93;
    }
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3) {
      goto LABEL_97;
    }
LABEL_3:
    v5 += 3;
    if (v5 == v4) {
      goto LABEL_102;
    }
  }
  uint64_t v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v61;
  }
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822) {
    goto LABEL_19;
  }
LABEL_95:
  int v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_96;
  }
LABEL_93:
  if (v30 == 3) {
    goto LABEL_3;
  }
LABEL_97:
  if (!v30) {
    goto LABEL_3;
  }
LABEL_102:
  unsigned int v5 = (void **)v62;
  char v52 = v57;
  if (!v62) {
    return v52 & 1;
  }
LABEL_105:
  long long v53 = v63;
  long long v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0) {
        operator delete(*(v53 - 3));
      }
      v53 -= 3;
    }
    while (v53 != v5);
    long long v54 = v62;
  }
  long long v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_1B8B1692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  *__error() = 0;
  if (a1[23] < 0)
  {
    long long v7 = opendir(*(const char **)a1);
    if (v7) {
      goto LABEL_3;
    }
LABEL_78:
    uint64_t v45 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] < 0) {
        a1 = *(const char **)a1;
      }
      int v47 = __error();
      uint64_t v48 = strerror(*v47);
      v58.st_dev = 136315394;
      *(void *)&v58.st_mode = a1;
      WORD2(v58.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v58.st_ino + 6) = (__darwin_ino64_t)v48;
      _os_log_error_impl(&dword_1B8B00000, v45, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v58, 0x16u);
      return 0;
    }
    return result;
  }
  long long v7 = opendir(a1);
  if (!v7) {
    goto LABEL_78;
  }
LABEL_3:
  int v8 = v7;
  std::string::size_type v9 = readdir(v7);
  if (v9)
  {
    char v51 = a1;
    char v49 = 0;
    while (1)
    {
      d_name = v9->d_name;
      memset(__dst, 170, sizeof(__dst));
      size_t v11 = strlen(v9->d_name);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v12 = v11;
      if (v11 >= 0x17) {
        break;
      }
      __dst[23] = v11;
      size_t v13 = __dst;
      if (v11) {
        goto LABEL_12;
      }
LABEL_13:
      v13[v12] = 0;
      uint64_t v16 = __dst[23];
      int v17 = __dst[23];
      uint64_t v18 = *(void *)&__dst[8];
      if (__dst[23] >= 0) {
        std::string::size_type v19 = __dst[23];
      }
      else {
        std::string::size_type v19 = *(void *)&__dst[8];
      }
      if (v19 == 2)
      {
        uint64_t v21 = *(_WORD **)__dst;
        if (__dst[23] >= 0) {
          uint64_t v21 = __dst;
        }
        if (*v21 == 11822) {
          goto LABEL_73;
        }
      }
      else if (v19 == 1)
      {
        unint64_t v20 = *(unsigned char **)__dst;
        if (__dst[23] >= 0) {
          unint64_t v20 = __dst;
        }
        if (*v20 == 46) {
          goto LABEL_73;
        }
      }
      if (a4) {
        goto LABEL_53;
      }
      uint64_t v22 = v8;
      uint64_t v23 = a4;
      uint64_t v24 = a3;
      v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v58.st_blkstd::string::size_type size = v25;
      *(timespec *)v58.st_qspare = v25;
      v58.st_birthtimespec = v25;
      *(timespec *)&v58.st_std::string::size_type size = v25;
      v58.st_mtimespec = v25;
      v58.st_ctimespec = v25;
      *(timespec *)&v58.st_uid = v25;
      v58.st_atimespec = v25;
      *(timespec *)&v58.st_dev = v25;
      int v26 = v51[23];
      if (v26 >= 0) {
        size_t v27 = *((unsigned __int8 *)v51 + 23);
      }
      else {
        size_t v27 = *((void *)v51 + 1);
      }
      unint64_t v28 = v27 + 1;
      memset(&v52, 170, sizeof(v52));
      if (v27 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v28 >= 0x17)
      {
        uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17) {
          uint64_t v30 = v28 | 7;
        }
        uint64_t v31 = v30 + 1;
        char v29 = (char *)operator new(v30 + 1);
        v52.__r_.__value_.__l.__size_ = v27 + 1;
        v52.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      }
      else
      {
        memset(&v52, 0, sizeof(v52));
        char v29 = (char *)&v52;
        *((unsigned char *)&v52.__r_.__value_.__s + 23) = v27 + 1;
        if (!v27) {
          goto LABEL_40;
        }
      }
      if (v26 >= 0) {
        long long v32 = v51;
      }
      else {
        long long v32 = *(const char **)v51;
      }
      memmove(v29, v32, v27);
LABEL_40:
      a3 = v24;
      *(_WORD *)&v29[v27] = 47;
      if (v17 >= 0) {
        long long v33 = __dst;
      }
      else {
        long long v33 = *(const std::string::value_type **)__dst;
      }
      long long v34 = std::string::append(&v52, v33, v19);
      a4 = v23;
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v55[0] = *((void *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v55[0] >= 0) {
        long long v36 = __p;
      }
      else {
        long long v36 = (void **)__p[0];
      }
      lstat((const char *)v36, &v58);
      int v8 = v22;
      if (SHIBYTE(v55[0]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_48:
          if ((v58.st_mode & 0xF000) != 0xA000) {
            goto LABEL_52;
          }
          goto LABEL_73;
        }
      }
      else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_48;
      }
      operator delete(v52.__r_.__value_.__l.__data_);
      if ((v58.st_mode & 0xF000) != 0xA000)
      {
LABEL_52:
        uint64_t v16 = __dst[23];
        uint64_t v18 = *(void *)&__dst[8];
        LOBYTE(v17) = __dst[23];
LABEL_53:
        if ((v17 & 0x80u) == 0) {
          long long v37 = (std::sub_match<const char *> *)__dst;
        }
        else {
          long long v37 = *(std::sub_match<const char *> **)__dst;
        }
        if ((v17 & 0x80u) != 0) {
          uint64_t v16 = v18;
        }
        long long v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
        *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v56 = v39;
        v55[6] = 0xAAAAAAAAAAAAAA00;
        v55[3] = 0xAAAAAAAAAAAAAAAALL;
        v55[4] = 0;
        v55[5] = 0;
        v55[7] = 0;
        v55[8] = 0;
        LOBYTE(v56) = 0;
        BYTE8(v56) = 0;
        uint64_t v57 = 0;
        *(_OWORD *)std::string __p = 0u;
        memset(v55, 0, 25);
        *(_OWORD *)&v58.st_birthtimespec.tv_nsec = v39;
        v58.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v58.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        memset(&v58.st_mtimespec, 0, 17);
        memset(&v58.st_ctimespec.tv_nsec, 0, 17);
        LOBYTE(v58.st_size) = 0;
        v58.st_blocks = 0;
        memset(&v58, 0, 41);
        int v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v58, 4160);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v58.st_dev, 0);
        if (*(void *)&v58.st_dev)
        {
          v58.st_ino = *(void *)&v58.st_dev;
          operator delete(*(void **)&v58.st_dev);
        }
        if ((_BYTE)v56) {
          int v41 = v40 ^ 1;
        }
        else {
          int v41 = 1;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((v40 & v41) != 0)
        {
          unint64_t v42 = *(void *)(a3 + 8);
          if (v42 >= *(void *)(a3 + 16))
          {
            uint64_t v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
          }
          else
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
            }
            else
            {
              long long v43 = *(_OWORD *)__dst;
              *(void *)(v42 + 16) = *(void *)&__dst[16];
              *(_OWORD *)unint64_t v42 = v43;
            }
            uint64_t v44 = (std::string *)(v42 + 24);
            *(void *)(a3 + 8) = v42 + 24;
          }
          *(void *)(a3 + 8) = v44;
          char v49 = 1;
        }
      }
LABEL_73:
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      std::string::size_type v9 = readdir(v8);
      if (!v9) {
        goto LABEL_83;
      }
    }
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    size_t v13 = operator new(v14 + 1);
    *(void *)&__dst[8] = v12;
    *(void *)&__dst[16] = v15 | 0x8000000000000000;
    *(void *)stat __dst = v13;
LABEL_12:
    memmove(v13, d_name, v12);
    goto LABEL_13;
  }
  char v49 = 0;
LABEL_83:
  closedir(v8);
  return v49 & 1;
}

void sub_1B8B16F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  *(void *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *support::fs::readCurrentLine@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  uint64_t v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10) {
        break;
      }
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  double v6 = std::locale::use_facet(v9, MEMORY[0x1E4FBA258]);
  unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_1B8B1713C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B8B17150(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6192DA8, MEMORY[0x1E4FBA1C8]);
}

void sub_1B8B171D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unsigned int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unsigned int v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  BOOL v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string::size_type v9 = (char *)operator new(24 * v8);
  }
  else
  {
    std::string::size_type v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  int v17 = v10;
  uint64_t v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    BOOL v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = v16;
    uint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      size_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  size_t v13 = *a1;
  BOOL v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    uint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    BOOL v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1B8B174CC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6192DB0, MEMORY[0x1E4FBA1D0]);
}

void sub_1B8B175C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

uint64_t std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  timespec v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void *std::string::__assign_no_alias<true>(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    unint64_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *stat __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unint64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      unint64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
    goto LABEL_12;
  }
  size_t v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = v7 - 1;
  uint64_t v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2) {
      goto LABEL_7;
    }
LABEL_14:
    unint64_t v13 = 2 * v10;
    if (__len > 2 * v10) {
      unint64_t v13 = __len;
    }
    uint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v14 = v13 | 7;
    }
    if (v13 >= 0x17) {
      size_t v9 = v14 + 1;
    }
    else {
      size_t v9 = 23;
    }
    size_t v8 = operator new(v9);
    if (!__len) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2) {
    goto LABEL_14;
  }
LABEL_7:
  size_t v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len) {
LABEL_8:
  }
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22) {
    operator delete(v11);
  }
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  unint64_t v6 = (const std::locale *)MEMORY[0x1BA9C8290]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  size_t v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != &a2[v7]) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  }
  return a1;
}

void sub_1B8B17934(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B17950(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = operator new(8uLL);
  void *v6 = &unk_1F125ED60;
  size_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  size_t v8 = operator new(0x20uLL);
  void *v8 = &unk_1F125EDB8;
  v8[1] = 0;
  void v8[2] = 0;
  v8[3] = v7;
  size_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v11 <= 0x3F) {
      goto LABEL_4;
    }
LABEL_9:
    if (v11 != 64)
    {
      if (v11 == 128)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
      }
      if (v11 == 256)
      {
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
LABEL_31:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
    }
LABEL_15:
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 56) = v10;
  unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v11 > 0x3F) {
    goto LABEL_9;
  }
LABEL_4:
  if (v11)
  {
    if (v11 == 16)
    {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    }
    if (v11 != 32) {
      goto LABEL_31;
    }
    goto LABEL_15;
  }
  unint64_t v13 = a2;
  while (1)
  {
    uint64_t v14 = (std::basic_regex<char> *)v13;
    unint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v13, a3);
    if (v13 == (char *)v14) {
      break;
    }
LABEL_19:
    if (v13 == (char *)v14) {
      goto LABEL_29;
    }
  }
  uint64_t v15 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v16 = *(_DWORD *)(a1 + 28);
  int v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
  if (v17 != (unsigned __int8 *)v14)
  {
    unint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_19;
  }
LABEL_29:
  if (v14 == (std::basic_regex<char> *)a2)
  {
    uint64_t v18 = operator new(0x10uLL);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(v19 + 8);
    v18[1] = v20;
    *(void *)(v19 + 8) = v18;
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
    goto LABEL_32;
  }
LABEL_33:
  if (v14 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v14->__traits_.__loc_.__locale_) == 124)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      uint64_t v23 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
      uint64_t v24 = (char *)&v14->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        uint64_t v14 = (std::basic_regex<char> *)v24;
        uint64_t v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v24, a3);
        if (v24 == (char *)v14)
        {
          timespec v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          int v26 = *(_DWORD *)(a1 + 28);
          size_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
          if (v27 == (unsigned __int8 *)v14)
          {
LABEL_40:
            if (v14 == v23)
            {
              unint64_t v28 = operator new(0x10uLL);
              uint64_t v29 = *(void *)(a1 + 56);
              uint64_t v30 = *(void *)(v29 + 8);
              v28[1] = v30;
              *(void *)(v29 + 8) = v28;
              *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
            }
            uint64_t v31 = operator new(0x18uLL);
            uint64_t v32 = *(void *)(v22 + 8);
            v31[1] = *(void *)(v10 + 8);
            v31[2] = v32;
            void *v31 = &unk_1F125F378;
            *(void *)(v10 + 8) = v31;
            *(void *)(v22 + 8) = 0;
            long long v33 = operator new(0x10uLL);
            uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8);
            v33[1] = v34;
            *(void *)(v22 + 8) = v33;
            *(void *)(*(void *)(a1 + 56) + 8) = 0;
            long long v35 = operator new(0x10uLL);
            uint64_t v36 = *(void *)(v22 + 8);
            void *v35 = &unk_1F125F3C0;
            v35[1] = v36;
            *(void *)(*(void *)(a1 + 56) + 8) = v35;
            uint64_t v21 = *(void *)(v22 + 8);
LABEL_32:
            *(void *)(a1 + 56) = v21;
            goto LABEL_33;
          }
          uint64_t v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v27, (std::basic_regex<char> *)a3, v25, (v26 + 1), (*(_DWORD *)(a1 + 28) + 1));
        }
        if (v24 == (char *)v14) {
          goto LABEL_40;
        }
      }
    }
    return (char *)v14;
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B17E60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__split_buffer<std::string>::pointer end = a1->__end_;
  size_t v7 = a2;
  do
  {
    size_t v8 = (std::basic_regex<char> *)v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 != (char *)v8) {
      continue;
    }
    size_t v9 = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    unsigned int v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v11 == v8) {
      break;
    }
    size_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
  }
  while (v7 != (char *)v8);
  if (v8 == (std::basic_regex<char> *)a2)
  {
    long long v12 = (std::__node<char> *)operator new(0x10uLL);
    unint64_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    uint64_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      int v16 = a1->__end_;
      int v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      uint64_t v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        size_t v8 = (std::basic_regex<char> *)v18;
        uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v18, a3);
        if (v18 == (char *)v8)
        {
          uint64_t v19 = a1->__end_;
          unsigned int v20 = a1->__marked_count_;
          uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
          if (v21 == v8)
          {
LABEL_16:
            if (v8 == v17)
            {
              uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
              uint64_t v23 = a1->__end_;
              uint64_t v24 = v23->__first_;
              v22[1].__vftable = (std::__node<char>_vtbl *)v24;
              v23->__first_ = v22;
              a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
            }
            timespec v25 = (std::__node<char> *)operator new(0x18uLL);
            int v26 = v16->__first_;
            v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
            v25[2].__vftable = (std::__node<char>_vtbl *)v26;
            v25->__vftable = (std::__node<char>_vtbl *)&unk_1F125F378;
            end->__first_ = v25;
            v16->__first_ = 0;
            size_t v27 = (std::__node<char> *)operator new(0x10uLL);
            unint64_t v28 = a1->__end_->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v28;
            v16->__first_ = v27;
            a1->__end_->__first_ = 0;
            uint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v30 = v16->__first_;
            v29->__vftable = (std::__node<char>_vtbl *)&unk_1F125F3C0;
            v29[1].__vftable = (std::__node<char>_vtbl *)v30;
            a1->__end_->__first_ = v29;
            uint64_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
            a1->__end_ = v15;
            goto LABEL_9;
          }
          uint64_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
        }
        if (v18 == (char *)v8) {
          goto LABEL_16;
        }
      }
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    unint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_1F125EEB0;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    BOOL v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      uint64_t v10 = v3;
      unsigned int v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      unint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        BOOL v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10) {
          continue;
        }
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      uint64_t v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      void *v14 = &unk_1F125EEF8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1)) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    void *v12 = &unk_1F125F378;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    uint64_t v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    void *v16 = &unk_1F125F3C0;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_1F125F378;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_1F125F3C0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = v22 + 1;
    }
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_1F125F378;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_1F125F3C0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v9 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B18844(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001B8C2EB39) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001B8C2EB39 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B8C2EB39)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B8C2EB39 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v14 = a2[1];
        if (v14 == 66)
        {
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_1F125EF40;
          *((void *)v15 + 1) = v23;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 1;
        }
        else
        {
          if (v14 != 98) {
            return a2;
          }
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_1F125EF40;
          *((void *)v15 + 1) = v16;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v15;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94) {
      return a2;
    }
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_1F125EEB0;
LABEL_14:
    void *v10 = v13;
    *((unsigned char *)v10 + 16) = v11;
    *(void *)(v12 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_1F125EEF8;
    goto LABEL_14;
  }
  BOOL v8 = v6 == 40;
  BOOL v7 = a2 + 1;
  BOOL v8 = !v8 || v7 == a3;
  if (v8) {
    return a2;
  }
  BOOL v8 = *v7 == 63;
  uint64_t v17 = a2 + 2;
  if (!v8 || v17 == a3) {
    return a2;
  }
  int v19 = *v17;
  if (v19 == 33)
  {
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v26.__loop_count_ = v24;
    *(_OWORD *)&v26.__start_.__cntrl_ = v24;
    *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v24;
    *(_OWORD *)&v26.__traits_.__col_ = v24;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
    v26.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
    unsigned int marked_count = v26.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v21 == a3 || *v21 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_32;
  }
  if (v19 != 61) {
    return a2;
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v26.__loop_count_ = v20;
  *(_OWORD *)&v26.__start_.__cntrl_ = v20;
  *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v20;
  *(_OWORD *)&v26.__traits_.__col_ = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
  v26.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
  unsigned int v22 = v26.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v26.__traits_.__loc_);
  return v21 + 1;
}

void sub_1B8B18E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B8B18E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B8B18E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B8B18EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
          goto LABEL_32;
        }
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3) {
            goto LABEL_32;
          }
          uint64_t v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41) {
            goto LABEL_32;
          }
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            unsigned int marked_count = this->__marked_count_;
          }
          else
          {
            uint64_t v12 = (std::__node<char> *)operator new(0x18uLL);
            unsigned int marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            std::__split_buffer<std::string>::pointer end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_1F125F210;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (uint64_t v3 = (std::basic_regex<char> *)v16, *v16 != 41)) {
LABEL_32:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
            uint64_t v18 = this->__end_;
            int v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_1F125F258;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_29:
        uint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_20;
      case '*':
      case '+':
      case '?':
        goto LABEL_31;
      case '.':
        BOOL v8 = (std::__node<char> *)operator new(0x10uLL);
        uint64_t v9 = this->__end_;
        uint64_t v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_1F125EFD0;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_29;
      case '[':
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_31:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_20:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v8 == a3;
      }
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
        __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
        size_t v10 = 0;
        goto LABEL_35;
      }
      __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
      __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
      size_t v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
        __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
        size_t v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
      __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
      size_t v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    uint64_t v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = v21 == a3;
    }
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      uint64_t v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123) {
      return this;
    }
    BOOL v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_71;
    }
    int v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
      goto LABEL_71;
    }
    int v13 = v12 - 48;
    int v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      int v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38) {
          break;
        }
        if (v13 >= 214748364) {
          goto LABEL_71;
        }
        int v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3) {
          goto LABEL_19;
        }
      }
    }
    if (v14 == v11) {
      goto LABEL_71;
    }
    if (v14 == (char *)a3) {
      goto LABEL_72;
    }
    int v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        uint64_t v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          uint64_t v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    timespec v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3) {
      goto LABEL_71;
    }
    int v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      BOOL v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        size_t v10 = v13;
        uint64_t v9 = v14 + 3;
        __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
        __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
        goto LABEL_35;
      }
      size_t v24 = v13;
      __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
      __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v27 = v26 - 48;
    unint64_t v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      unint64_t v28 = a3;
    }
    else
    {
      while (1)
      {
        int v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38) {
          break;
        }
        if (v27 >= 214748364) {
          goto LABEL_71;
        }
        int v27 = v29 + 10 * v27 - 48;
        unint64_t v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3) {
          goto LABEL_60;
        }
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125) {
LABEL_72:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13) {
      goto LABEL_71;
    }
    uint64_t v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      uint64_t v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1BA9C8290]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1B8B19698(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  BOOL v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)BOOL v8 = &unk_1F125EF88;
  *((void *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + 8) = cntrl;
  if (cntrl) {
    atomic_fetch_add_explicit(&cntrl->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B197B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125EF40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125EF40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125EF88;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125EF88;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (!locale || atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(a1 + 2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
  std::__shared_weak_count::__release_weak(locale);
  std::locale::~locale(v2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
LABEL_5:

  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAA00;
  long long v24 = v4;
  uint64_t v21 = 0;
  long long v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)&long long v19 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v6;
  LOBYTE(v22) = 0;
  long long v23 = v19;
  LOBYTE(v24) = v20;
  uint64_t v25 = v6;
  BYTE8(v24) = 1;
  uint64_t v7 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::__split_buffer<std::string>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::pointer begin = __p.__begin_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    int v16 = &begin[v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)uint64_t v17 = v16->std::pair<const char *, const char *>;
    *(unsigned char *)(v17 + 16) = v16->matched;
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1B8B1A078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)long long v46 = 0;
  memset(&v46[8], 0, 85);
  uint64_t v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
  if (*(void *)&v46[56])
  {
    *(void *)&v46[64] = *(void *)&v46[56];
    operator delete(*(void **)&v46[56]);
  }
  if (*(void *)&v46[32])
  {
    *(void *)&v46[40] = *(void *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  int v13 = v49;
  *((_DWORD *)v49 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    int v13 = v49;
  }
  uint64_t v18 = *((void *)v13 - 5);
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
  if (v19 <= v20)
  {
    if (v19 < v20) {
      *((void *)v13 - 4) = v18 + 16 * v19;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
    int v13 = v49;
  }
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unsigned int v21 = 1;
  while (2)
  {
    if ((v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)a3 - (int)a2) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    uint64_t v23 = *((void *)v13 - 2);
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*((_DWORD *)v13 - 24))
    {
      case 0xFFFFFC18:
        long long v24 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v24 == a2 || (a5 & 0x1000) != 0 && v24 != a3) {
          goto LABEL_27;
        }
        uint64_t v37 = *a4;
        *(void *)uint64_t v37 = a2;
        *(void *)(v37 + 8) = v24;
        *(unsigned char *)(v37 + 16) = 1;
        uint64_t v38 = *((void *)v13 - 8);
        uint64_t v39 = *((void *)v13 - 7) - v38;
        if (v39)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
          int v41 = (unsigned char *)(v38 + 16);
          unsigned int v42 = 1;
          do
          {
            uint64_t v43 = v37 + 24 * v42;
            *(_OWORD *)uint64_t v43 = *((_OWORD *)v41 - 1);
            char v44 = *v41;
            v41 += 24;
            *(unsigned char *)(v43 + 16) = v44;
          }
          while (v40 > v42++);
        }
        uint64_t v17 = 1;
        unint64_t v22 = v48;
        if (!v48) {
          return v17;
        }
        goto LABEL_38;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_17;
      case 0xFFFFFC1F:
LABEL_27:
        uint64_t v25 = v49;
        int v26 = (void *)*((void *)v49 - 5);
        if (v26)
        {
          *((void *)v49 - 4) = v26;
          operator delete(v26);
        }
        int v27 = (void *)*((void *)v25 - 8);
        if (v27)
        {
          *((void *)v25 - 7) = v27;
          operator delete(v27);
        }
        uint64_t v49 = v25 - 96;
        goto LABEL_17;
      case 0xFFFFFC20:
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v46[64] = v28;
        *(_OWORD *)&v46[80] = v28;
        *(_OWORD *)&v46[32] = v28;
        *(_OWORD *)&v46[48] = v28;
        *(_OWORD *)long long v46 = v28;
        *(_OWORD *)&v46[16] = v28;
        std::__state<char>::__state((uint64_t)v46, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v46[80] + 24))(*(void *)&v46[80], 0, v46);
        int v29 = v49;
        if ((unint64_t)v49 >= v50)
        {
          uint64_t v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
          if (*(void *)&v46[56])
          {
            *(void *)&v46[64] = *(void *)&v46[56];
            operator delete(*(void **)&v46[56]);
          }
        }
        else
        {
          long long v30 = *(_OWORD *)&v46[16];
          *(_OWORD *)uint64_t v49 = *(_OWORD *)v46;
          *((_OWORD *)v29 + 1) = v30;
          *((void *)v29 + 4) = 0;
          *((void *)v29 + 5) = 0;
          *((void *)v29 + 6) = 0;
          *((void *)v29 + 7) = 0;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v46[32];
          *((void *)v29 + 6) = *(void *)&v46[48];
          memset(&v46[32], 0, 24);
          *((void *)v29 + 8) = 0;
          *((void *)v29 + 9) = 0;
          *(_OWORD *)(v29 + 56) = *(_OWORD *)&v46[56];
          *((void *)v29 + 9) = *(void *)&v46[72];
          memset(&v46[56], 0, 24);
          uint64_t v31 = *(void *)&v46[80];
          *(void *)(v29 + 85) = *(void *)&v46[85];
          *((void *)v29 + 10) = v31;
          uint64_t v49 = v29 + 96;
        }
        if (*(void *)&v46[32])
        {
          *(void *)&v46[40] = *(void *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
LABEL_17:
        unint64_t v22 = v48;
        int v13 = v49;
        ++v21;
        if (v48 != v49) {
          continue;
        }
        uint64_t v17 = 0;
        if (v48)
        {
LABEL_38:
          uint64_t v32 = v49;
          long long v33 = v22;
          if (v49 != v22)
          {
            do
            {
              uint64_t v34 = (void *)*((void *)v32 - 5);
              if (v34)
              {
                *((void *)v32 - 4) = v34;
                operator delete(v34);
              }
              long long v35 = (void *)*((void *)v32 - 8);
              if (v35)
              {
                *((void *)v32 - 7) = v35;
                operator delete(v35);
              }
              v32 -= 96;
            }
            while (v32 != v22);
            long long v33 = v48;
          }
          uint64_t v49 = v22;
          operator delete(v33);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    return v17;
  }
}

void sub_1B8B1A4F8(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B8B1A50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1B8B1A554(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B8B1A568(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v10;
    int v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    uint64_t v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(void *)&v12->matched = *(void *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v16 = end - begin;
  if (v16 >= __n) {
    std::vector<std::csub_match>::size_type v17 = __n;
  }
  else {
    std::vector<std::csub_match>::size_type v17 = end - begin;
  }
  if (v17)
  {
    uint64_t v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    uint64_t v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  unint64_t v19 = &end[__n - v16];
  std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
  do
  {
    std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
    *(void *)&end->matched = *(void *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B1A7C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B1A820(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::vector<std::csub_match>::size_type v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v3];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::csub_match>::size_type v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      unint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      uint64_t v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      std::vector<std::csub_match>::size_type v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    uint64_t v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      std::vector<std::csub_match>::pointer end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    uint64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((v7 + __n) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    std::vector<std::csub_match>::size_type v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    size_t v14 = __n;
    std::pair<const char *, const char *> v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    uint64_t v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_1B8B1AEC4(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  long long v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = *v5;
  unsigned int v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8) {
    goto LABEL_18;
  }
  size_t v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    size_t v10 = a3;
  }
  else
  {
    while (1)
    {
      int v11 = *v10;
      if ((v11 - 48) > 9) {
        break;
      }
      if (v8 >= 0x19999999) {
        goto LABEL_23;
      }
      ++v10;
      unsigned int v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        size_t v10 = a3;
        break;
      }
    }
    if (!v8) {
LABEL_23:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_) {
    goto LABEL_23;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    size_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    unsigned int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      uint64_t v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1B8B1B1B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B1B20C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B1B530(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1B8B1B720(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B1B734(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B1B748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B1B75C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B1B770(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B1B784(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u) {
        goto LABEL_81;
      }
      std::basic_regex<char>::value_type v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v9;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6) {
              goto LABEL_38;
            }
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v12 = v4[1];
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_43;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u) {
        goto LABEL_81;
      }
      char v13 = -87;
LABEL_43:
      if (v4 + 2 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v14 = v4[2];
      char v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u) {
LABEL_81:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v15 = -87;
      }
      std::basic_regex<char>::value_type v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v16;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_81;
      }
      if (!a4) {
        goto LABEL_65;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned __int8 v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)unsigned __int8 v8 = &unk_1F125F018;
    *((void *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned __int8 v8 = (char *)operator new(0x30uLL);
    int v10 = this->__end_->__first_;
    *(void *)unsigned __int8 v8 = &unk_1F125F060;
    *((void *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1F125F0A8;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1B8B1BFA0(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  long long v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B1C04C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned __int8 v8 = (std::locale *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_1F125F0F0;
LABEL_6:
    v8->__locale_ = v10;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned __int8 v8 = (std::locale *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_1F125F138;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  first = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1F125F180;
  v5[1].__vftable = (std::__node<char>_vtbl *)first;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125F018;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125F018;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125F060;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125F060;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125F0F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125F0F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3, v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125F138;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F125F138;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    std::basic_regex<char>::value_type v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      std::vector<std::csub_match>::size_type v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          char v13 = &v12[v18];
          unsigned __int8 v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          char v13 = &v5[-*v6];
          unsigned __int8 v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            uint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              _OWORD *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v42 = &v5[-v28 - 8];
          uint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        long long v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      char v13 = &v12[v24];
      unsigned __int8 v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      char v13 = &v5[-*v6];
      unsigned __int8 v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        long long v46 = (long long *)(v5 - 16);
        int v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      char v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    stat v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    char v13 = &v12[v8];
    unsigned __int8 v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    char v13 = (char *)(v5 - v7);
    unsigned __int8 v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  long long v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    _OWORD *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v5[-v22 - 8];
    long long v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    char v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_1B8B1D16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  uint64_t v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      std::string v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  std::string v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v25 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_34;
  }
  char v6 = *current;
  LOBYTE(__src) = *current;
  char v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    size_t v27 = __p[1];
    operator delete(__p[0]);
    if (v27) {
      goto LABEL_8;
    }
LABEL_34:
    BOOL negate = 0;
    uint64_t v25 = 1;
    unsigned __int8 v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2])) {
    goto LABEL_34;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  char v15 = HIBYTE(v136[2]);
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    BOOL v24 = 0;
    int v70 = 0;
    int v69 = 0;
    goto LABEL_164;
  }
  long long v128 = v2;
  uint64_t v17 = 0;
  unint64_t v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0) {
    unint64_t v19 = v136;
  }
  else {
    unint64_t v19 = (void **)v136[0];
  }
  char v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0) {
    size_t v21 = (void *)HIBYTE(v136[2]);
  }
  else {
    size_t v21 = v136[1];
  }
  if (v18 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = v16 / 48;
  }
  uint64_t v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v24 = 1;
  do
  {
    int v59 = (char)*(v23 - 24);
    if (v59 >= 0) {
      long long v60 = (char *)(v23 - 47);
    }
    else {
      long long v60 = *(char **)(v23 - 47);
    }
    if (v59 >= 0) {
      size_t v61 = *(v23 - 24);
    }
    else {
      size_t v61 = *(void *)(v23 - 39);
    }
    if ((unint64_t)v21 >= v61) {
      size_t v62 = v61;
    }
    else {
      size_t v62 = (size_t)v21;
    }
    int v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    int v64 = (char)*v23;
    if (v64 >= 0) {
      long long v65 = (char *)(v23 - 23);
    }
    else {
      long long v65 = *(char **)(v23 - 23);
    }
    if (v64 >= 0) {
      size_t v66 = *v23;
    }
    else {
      size_t v66 = *(void *)(v23 - 15);
    }
    if (v66 >= (unint64_t)v21) {
      size_t v67 = (size_t)v21;
    }
    else {
      size_t v67 = v66;
    }
    int v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        int v69 = 1;
        int v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    BOOL v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  int v70 = 0;
  int v69 = 0;
LABEL_162:
  char v2 = v128;
  p_traits = &this->__traits_;
  char v15 = v20;
LABEL_164:
  if (v15 < 0) {
    operator delete(v136[0]);
  }
  BOOL negate = v69;
  if (v24) {
    goto LABEL_207;
  }
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_209;
  }
  int v133 = negate;
  int v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  int v90 = SHIBYTE(__p[2]);
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91) {
    goto LABEL_188;
  }
  unint64_t v92 = v91 / 24;
  uint64_t v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v94 = (void *)HIBYTE(__p[2]);
  }
  else {
    uint64_t v94 = __p[1];
  }
  if (SHIBYTE(__p[2]) < 0)
  {
    int v135 = SHIBYTE(__p[2]);
    uint64_t v103 = 0;
    int v104 = __p[0];
    if (v92 <= 1) {
      uint64_t v105 = 1;
    }
    else {
      uint64_t v105 = v91 / 24;
    }
    BOOL v97 = 1;
    do
    {
      std::string::size_type size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      int v107 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v89->__r_.__value_.__l.__size_;
      }
      if (v94 == (void *)size)
      {
        std::vector<std::string>::pointer v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          int v133 = 1;
          int v70 = 5;
          goto LABEL_203;
        }
      }
      BOOL v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    int v70 = 0;
LABEL_203:
    char v2 = v88;
    int v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    std::string::size_type v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0) {
      std::string::size_type v114 = v89->__r_.__value_.__l.__size_;
    }
    if (v114 != HIBYTE(__p[2]))
    {
      unint64_t v119 = 0;
      if (v92 <= 1) {
        uint64_t v120 = 1;
      }
      else {
        uint64_t v120 = v92;
      }
      uint64_t v121 = v120 - 1;
      uint64_t v122 = &v89[1].__r_.__value_.__s.__data_[8];
      char v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        unint64_t v123 = v122[15];
        unint64_t v125 = *(void *)v122;
        v122 += 24;
        unint64_t v124 = v125;
        if ((v123 & 0x80u) != 0) {
          unint64_t v123 = v124;
        }
        if (v94 == (void *)v123)
        {
          BOOL v97 = v119 < v92;
          int v133 = 1;
          int v70 = 5;
          goto LABEL_204;
        }
      }
      BOOL v97 = 0;
      int v70 = 0;
      goto LABEL_204;
    }
    char v2 = v88;
    BOOL negate = 1;
LABEL_208:
    uint64_t v25 = 2;
    goto LABEL_245;
  }
  uint64_t v95 = 0;
  uint64_t v96 = v92 <= 1 ? 1 : v91 / 24;
  BOOL v97 = 1;
  do
  {
    long long v98 = &v89[v95];
    int v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    int v100 = (char)v99;
    if ((char)v99 < 0) {
      int v99 = (void *)v98->__r_.__value_.__l.__size_;
    }
    if (v94 == v99)
    {
      if (v100 < 0) {
        long long v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      }
      int v101 = __p;
      uint64_t v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        int v101 = (void **)((char *)v101 + 1);
        long long v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          int v133 = 1;
          int v70 = 5;
          char v2 = v88;
          goto LABEL_204;
        }
      }
    }
    BOOL v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  BOOL v97 = 0;
  int v70 = 0;
  char v2 = v88;
LABEL_204:
  if (v90 < 0) {
    operator delete(__p[0]);
  }
  BOOL negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
    }
    else
    {
      std::regex_traits<char>::char_class_type mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        int v113 = negate;
LABEL_228:
        BOOL negate = v113;
        uint64_t v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        int v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_228;
        }
      }
      goto LABEL_226;
    }
LABEL_227:
    int v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70) {
    goto LABEL_208;
  }
  uint64_t v25 = 2;
  unsigned __int8 v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    unsigned __int8 v28 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  std::vector<char>::pointer v29 = this->__chars_.__begin_;
  unint64_t v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    while (1)
    {
      int v31 = *v29++;
      if (v31 == v28) {
        break;
      }
      if (!--v30) {
        goto LABEL_41;
      }
    }
LABEL_244:
    BOOL negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  std::regex_traits<char>::char_class_type v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      int v34 = (v32 >> 7) & 1;
      char v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      char v33 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    uint64_t v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end) {
      goto LABEL_244;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v39 = this->__ranges_.__end_;
  if (v38 == v39) {
    goto LABEL_128;
  }
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    unsigned int v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    int64_t v41 = (char *)v39 - (char *)v38;
    if (v41) {
      goto LABEL_59;
    }
LABEL_155:
    BOOL v48 = 0;
    if ((v40 & 0x80) != 0) {
      goto LABEL_126;
    }
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  unsigned int v40 = HIBYTE(v136[2]);
  int64_t v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41) {
    goto LABEL_155;
  }
LABEL_59:
  uint64_t v134 = v25;
  BOOL v131 = negate;
  v129 = v2;
  uint64_t v42 = 0;
  unint64_t v43 = v41 / 48;
  char v126 = v40;
  if ((v40 & 0x80u) == 0) {
    unint64_t v44 = v136;
  }
  else {
    unint64_t v44 = (void **)v136[0];
  }
  if ((v40 & 0x80u) == 0) {
    uint64_t v45 = (void *)v40;
  }
  else {
    uint64_t v45 = v136[1];
  }
  if (v43 <= 1) {
    uint64_t v46 = 1;
  }
  else {
    uint64_t v46 = v41 / 48;
  }
  int v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v48 = 1;
  while (2)
  {
    int v49 = (char)*(v47 - 24);
    if (v49 >= 0) {
      unint64_t v50 = (char *)(v47 - 47);
    }
    else {
      unint64_t v50 = *(char **)(v47 - 47);
    }
    if (v49 >= 0) {
      size_t v51 = *(v47 - 24);
    }
    else {
      size_t v51 = *(void *)(v47 - 39);
    }
    if ((unint64_t)v45 >= v51) {
      size_t v52 = v51;
    }
    else {
      size_t v52 = (size_t)v45;
    }
    int v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0) {
        goto LABEL_84;
      }
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      int v54 = (char)*v47;
      if (v54 >= 0) {
        char v55 = (char *)(v47 - 23);
      }
      else {
        char v55 = *(char **)(v47 - 23);
      }
      if (v54 >= 0) {
        size_t v56 = *v47;
      }
      else {
        size_t v56 = *(void *)(v47 - 15);
      }
      if (v56 >= (unint64_t)v45) {
        size_t v57 = (size_t)v45;
      }
      else {
        size_t v57 = v56;
      }
      int v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          BOOL negate = 1;
          char v2 = v129;
          uint64_t v25 = v134;
          if ((v126 & 0x80) == 0) {
            goto LABEL_127;
          }
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    BOOL v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42) {
      continue;
    }
    break;
  }
  char v2 = v129;
  BOOL negate = v131;
  uint64_t v25 = v134;
  if ((v126 & 0x80) == 0) {
    goto LABEL_127;
  }
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48) {
    goto LABEL_245;
  }
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0) {
      goto LABEL_245;
    }
    std::regex_traits<char>::char_class_type v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      int v116 = (v115 >> 7) & 1;
      if (v28 != 95) {
        int v116 = 0;
      }
      if (v116 != 1) {
        goto LABEL_245;
      }
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (unsigned char *)&__src + 1, __p);
  std::vector<std::string>::pointer v71 = this->__equivalences_.__begin_;
  uint64_t v72 = HIBYTE(__p[2]);
  int64_t v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0) {
      operator delete(__p[0]);
    }
LABEL_238:
    unsigned __int8 v28 = __src;
    goto LABEL_239;
  }
  BOOL v132 = negate;
  unint64_t v130 = v2;
  unint64_t v74 = 0;
  unint64_t v75 = v73 / 24;
  int v76 = __p[0];
  uint64_t v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v78 = (void *)HIBYTE(__p[2]);
  }
  else {
    uint64_t v78 = __p[1];
  }
  if (v75 <= 1) {
    uint64_t v79 = 1;
  }
  else {
    uint64_t v79 = v73 / 24;
  }
  BOOL v80 = 1;
  while (2)
  {
    int v81 = &v71[v74];
    CFMutableDictionaryRef v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    int v83 = (char)v82;
    if ((char)v82 < 0) {
      CFMutableDictionaryRef v82 = (void *)v81->__r_.__value_.__l.__size_;
    }
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0) {
LABEL_236:
        }
          operator delete(__p[0]);
        char v2 = v130;
        BOOL negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0) {
      int v84 = &v71[v74];
    }
    else {
      int v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    }
    if ((v72 & 0x80) == 0)
    {
      if (!v72)
      {
LABEL_157:
        char v2 = v130;
        BOOL negate = 1;
        if (!v80) {
          goto LABEL_238;
        }
        goto LABEL_245;
      }
      uint64_t v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85) {
          goto LABEL_157;
        }
      }
      goto LABEL_149;
    }
    BOOL v127 = v80;
    int v86 = v76;
    int v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      uint64_t v77 = v87;
      int v76 = v86;
      if (v74 == v79) {
        goto LABEL_236;
      }
LABEL_153:
      BOOL v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  char v2 = v130;
  BOOL negate = 1;
  if (!v127) {
    goto LABEL_238;
  }
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    int v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    int v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_1B8B1DE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  char v6 = a1[11].__locale_;
  if (v6)
  {
    char v7 = a1[12].__locale_;
    unint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      char v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        unint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  uint64_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = operator new(v10 + 1);
  *(void *)&__dst[8] = v5;
  *(void *)&__dst[16] = v11 | 0x8000000000000000;
  *(void *)stat __dst = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned char *v9 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (!*(void *)&__dst[8]) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!__dst[23]) {
      return;
    }
    int v12 = __dst;
  }
  std::__get_collation_name(&v19, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  unint64_t v13 = v19.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (*(void *)&__dst[8] < 3uLL)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v19);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v19;
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        if (v16 == 1 || v16 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if (__dst[23] >= 0) {
              uint64_t v17 = __dst;
            }
            else {
              uint64_t v17 = *(unsigned char **)__dst;
            }
            if (__dst[23] >= 0) {
              size_t v18 = __dst[23];
            }
            else {
              size_t v18 = *(void *)&__dst[8];
            }
            std::string::__assign_no_alias<false>((void **)a4, v17, v18);
          }
        }
        else
        {
          **(unsigned char **)a4 = 0;
          *(void *)(a4 + 8) = 0;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a4 + 23);
        if (v15 == 1 || v15 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(void *)(a4 + 16) = *(void *)&__dst[16];
            }
          }
        }
        else
        {
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 23) = 0;
        }
      }
LABEL_16:
      if ((__dst[23] & 0x80000000) == 0) {
        return;
      }
      int v12 = *(char **)__dst;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (__dst[23] < 3u) {
    goto LABEL_24;
  }
}

void sub_1B8B1E290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    uint64_t v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)uint64_t v9 = 0;
  memset(a4, 170, 24);
  int v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    int v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, &v12[(void)v13]);
  uint64_t v14 = *((unsigned __int8 *)a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = a4[1];
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = (unsigned char *)*a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(unsigned char *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_26:
  }
    operator delete(__dst[0]);
}

void sub_1B8B1E480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B1E4E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  char v6 = (char *)a4;
  int v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  int v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        char v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      int v9 = 0;
      goto LABEL_38;
    }
    int v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58) {
        goto LABEL_14;
      }
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13) {
            goto LABEL_89;
          }
          uint64_t v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      int v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        int v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        }
        char v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        char v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0) {
          goto LABEL_63;
        }
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  uint64_t v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_89;
  }
  uint64_t v18 = a3 - v4 - 4;
  std::string v19 = v4 + 2;
  char v20 = v17 + 1;
  if (*v17 == 46) {
    goto LABEL_23;
  }
  do
  {
    do
    {
      if (!v18) {
        goto LABEL_89;
      }
      --v18;
      std::string v19 = v20;
      int v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3) {
    goto LABEL_89;
  }
  std::regex_traits<char>::__lookup_collatename<char const*>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v40 = v42;
  *(_OWORD *)std::vector<std::csub_match> __p = v41;
  uint64_t v22 = (char *)HIBYTE(v42);
  int v9 = SHIBYTE(v42);
  uint64_t v23 = *((void *)&v41 + 1);
  if (v42 < 0) {
    uint64_t v22 = (char *)__p[1];
  }
  if ((unint64_t)(v22 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = v19 + 2;
  int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0) {
    uint64_t v23 = HIBYTE(v42);
  }
  if (v23)
  {
    unsigned __int8 v28 = v4;
    if (v4 == a3) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      int v34 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v25;
      v34[1] = 0;
      unsigned __int8 v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      unsigned __int8 v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    goto LABEL_40;
  }
  int v25 = *v4;
  if (v25 != 92) {
    goto LABEL_57;
  }
  unint64_t v26 = v4 + 1;
  if (v24) {
    size_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  }
  else {
    size_t v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  }
  unsigned __int8 v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1]) {
        goto LABEL_62;
      }
      if (__p[1] != (void *)1)
      {
        unint64_t v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        char v11 = 1;
        unint64_t v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      unint64_t v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40)) {
        goto LABEL_62;
      }
      unint64_t v30 = __p;
      if (HIBYTE(v40) != 1) {
        goto LABEL_61;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  int v29 = *v28;
  if (v29 == 93) {
    goto LABEL_41;
  }
  int v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93) {
    goto LABEL_41;
  }
  long long v41 = 0uLL;
  int64_t v42 = 0;
  unint64_t v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if (v31 == 92)
      {
        if (v24) {
          std::regex_traits<char>::char_class_type v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        }
        else {
          std::regex_traits<char>::char_class_type v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        }
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  std::regex_traits<char>::char_class_type v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  unint64_t v4 = v32;
LABEL_80:
  *(_OWORD *)uint64_t v37 = *(_OWORD *)__p;
  uint64_t v38 = v40;
  __p[1] = 0;
  uint64_t v40 = 0;
  __p[0] = 0;
  *(_OWORD *)long long v35 = v41;
  uint64_t v36 = v42;
  long long v41 = 0uLL;
  int64_t v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_83;
      }
LABEL_87:
      operator delete((void *)v41);
      char v11 = 1;
      if (SHIBYTE(v40) < 0) {
        goto LABEL_63;
      }
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0) {
    goto LABEL_87;
  }
LABEL_83:
  char v11 = 1;
  if (SHIBYTE(v40) < 0) {
LABEL_63:
  }
    operator delete(__p[0]);
LABEL_64:
  if (v11) {
    return v4;
  }
  return v6;
}

void sub_1B8B1E9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  unint64_t v8 = __src;
  if (*__src != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      unint64_t v8 = &__src[++v7];
      if (__src[v7] == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3) {
    goto LABEL_39;
  }
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    int v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v9 = (char *)v18[1];
  if (!v18[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(void)v10], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v11 = *(void *)(a4 + 144);
      if (v11 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)unint64_t v11 = v12;
        }
        *(void *)(a4 + 144) = v11 + 24;
        *(void *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0) {
    uint64_t v13 = v18[1];
  }
  if (v13 == (void *)2)
  {
    int v15 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      int v15 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    uint64_t v14 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      uint64_t v14 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0) {
      goto LABEL_38;
    }
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0) {
LABEL_38:
  }
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_1B8B1ECC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  uint64_t v7 = __src;
  if (*__src != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      uint64_t v7 = &__src[++v6];
      if (__src[v6] == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v11;
  unint64_t v8 = v12;
  *(void *)(a4 + 16) = v12;
  unint64_t v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  if (v9 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unint64_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unint64_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unint64_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unint64_t v8 = a2 + 3;
      }
      else {
        unint64_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)unint64_t v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      int64_t v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    int v34 = a2;
    if ((v16 & 0x80) != 0) {
      int v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      uint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      uint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        uint64_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          uint64_t v38 = *(unsigned char **)v3;
        }
        unsigned char *v38 = v37;
        goto LABEL_67;
      }
    }
    uint64_t v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    uint64_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      uint64_t v18 = *(char **)a2;
      uint64_t v20 = *(char **)a2;
    }
    else
    {
      uint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)unint64_t v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    std::regex_traits<char>::char_class_type v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_1B8B1FB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8B1FB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = (char **)(a1 + 112);
      uint64_t v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (_WORD *)(2 * v12);
          uint64_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          int v33 = &v8[-v32];
          uint64_t v17 = (_WORD *)((char *)v17 - v32);
          int v34 = &v16[2 * v12 - 16];
          char v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            _OWORD *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--uint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v12];
          uint64_t v18 = &v16[2 * v15];
          _WORD *v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  char v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      uint64_t v17 = &v28[2 * v24];
      uint64_t v18 = &v28[2 * v27];
      _WORD *v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v17 = (_WORD *)(2 * v24);
      uint64_t v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v50 = &v8[-v49];
    uint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    size_t v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      _OWORD *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  unint64_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    uint64_t v17 = (_WORD *)(2 * v41);
    uint64_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    uint64_t v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  uint64_t v45 = operator new(2 * v44);
  uint64_t v17 = &v45[2 * v41];
  uint64_t v18 = &v45[2 * v44];
  _WORD *v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  uint64_t v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    int v59 = &v8[-v58];
    uint64_t v17 = (_WORD *)((char *)v17 - v58);
    long long v60 = &v45[2 * v41 - 16];
    size_t v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      _OWORD *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B20000(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    char v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  char v9 = operator new(v10 + 1);
  *(void *)&__dst[8] = v5;
  *(void *)&__dst[16] = v11 | 0x8000000000000000;
  *(void *)stat __dst = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned char *v9 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    uint64_t v12 = *(char **)__dst;
    if (!*(void *)&__dst[8]) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!__dst[23]) {
      return;
    }
    uint64_t v12 = __dst;
  }
  std::__get_collation_name(&v19, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  unint64_t v13 = v19.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if ((__dst[23] & 0x80000000) != 0)
  {
    uint64_t v12 = *(char **)__dst;
    if (*(void *)&__dst[8] < 3uLL)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v19);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v19;
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        if (v16 == 1 || v16 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if (__dst[23] >= 0) {
              uint64_t v17 = __dst;
            }
            else {
              uint64_t v17 = *(unsigned char **)__dst;
            }
            if (__dst[23] >= 0) {
              size_t v18 = __dst[23];
            }
            else {
              size_t v18 = *(void *)&__dst[8];
            }
            std::string::__assign_no_alias<false>((void **)a4, v17, v18);
          }
        }
        else
        {
          **(unsigned char **)a4 = 0;
          *(void *)(a4 + 8) = 0;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a4 + 23);
        if (v15 == 1 || v15 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(void *)(a4 + 16) = *(void *)&__dst[16];
            }
          }
        }
        else
        {
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 23) = 0;
        }
      }
LABEL_16:
      if ((__dst[23] & 0x80000000) == 0) {
        return;
      }
      uint64_t v12 = *(char **)__dst;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (__dst[23] < 3u) {
    goto LABEL_24;
  }
}

void sub_1B8B20288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char **a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      _OWORD *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  memset(a4, 170, 24);
  std::string v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    std::string v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v19[(void)v20]);
  unint64_t v21 = (unsigned char *)*((unsigned __int8 *)a4 + 23);
  int v22 = (char)v21;
  if ((char)v21 < 0) {
    unint64_t v21 = a4[1];
  }
  if (v21 == (unsigned char *)1) {
    goto LABEL_32;
  }
  if (v21 != (unsigned char *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = *a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_1B8B204D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B20538(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, unsigned char *__src, unsigned char *a3, BOOL a4)
{
  size_t v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    char v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v4);
    char v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  char v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)char v9 = 0;
  uint64_t v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    uint64_t v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v13, &v12[(void)v13]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v14 = (const char *)__dst;
  }
  else {
    unint64_t v14 = (const char *)__dst[0];
  }
  uint64_t classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  return classname;
}

void sub_1B8B206A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = (void *)(a1 + 64);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v12 = operator new(v21);
          unint64_t v13 = &v12[v18];
          unint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v13 = &v5[-*v6];
          unint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            __int16 v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              _OWORD *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      uint64_t v12 = operator new(v27);
      unint64_t v13 = &v12[v24];
      unint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = &v5[-*v6];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  __int16 v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    uint64_t v12 = operator new(v11);
    unint64_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = (char *)(v5 - v7);
    unint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    _OWORD *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    int v34 = &v5[-v22 - 8];
    char v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    unint64_t v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  unint64_t v7 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    unint64_t v8 = v7;
    uint64_t v9 = (char *)a2;
  }
  else
  {
    unint64_t v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v10 = (long long *)(a2 + 16);
    size_t v11 = v7 + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      _OWORD *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  unsigned char *v8 = 0;
  uint64_t v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v18 = __p;
  }
  else {
    unint64_t v18 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v17 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v17[(void)v18]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B8B20CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B20D4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  size_t v11 = v8 + 48;
  unint64_t v12 = (void **)*a1;
  long long v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    long long v13 = (void **)*a1;
    char v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8 = __mexp_end;
  int v9 = __mexp_begin;
  long long v14 = operator new(0x10uLL);
  std::vector<char>::pointer end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  uint64_t v17 = operator new(0x38uLL);
  unsigned int loop_count = this->__loop_count_;
  *((void *)v17 + 1) = __s->__first_;
  *((void *)v17 + 2) = v14;
  *(void *)uint64_t v17 = &unk_1F125F2A0;
  *((void *)v17 + 3) = __min;
  *((void *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = loop_count;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((unsigned char *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  unint64_t v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_1F125F330;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((void *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = loop_count + 1;
}

void sub_1B8B2124C(_Unwind_Exception *a1)
{
  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B21260(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B212B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B21310(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F125F300;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F125F300;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    unint64_t *v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      uint64_t v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        unsigned char *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    char v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      unsigned char *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        unsigned char *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F125F300;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F125F300;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F125F300;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F125F300;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9C8070](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B8B21AE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  uint64_t v7 = v6;
  if (v6 != (char *)a2 || v6 == a3) {
    return v7;
  }
  if ((char *)(a2 + 1) == a3) {
    return (char *)a2;
  }
  if (*(unsigned char *)a2 != 92) {
    return (char *)a2;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    uint64_t v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      void *v10 = &unk_1F125F210;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_25;
      }
      uint64_t v15 = v9;
      uint64_t v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v17 = *(_DWORD *)(a1 + 28);
      uint64_t v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15) {
        break;
      }
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    uint64_t v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v19 = operator new(0x18uLL);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = *(void *)(v20 + 8);
      void *v19 = &unk_1F125F258;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(void *)(v20 + 8) = v19;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return (char *)a2;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = this;
  if (this == a3) {
    return v6;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  uint64_t v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3) {
    goto LABEL_43;
  }
  int v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_43;
  }
  int v11 = v10 - 48;
  uint64_t v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    uint64_t v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_43;
      }
      int v11 = v13 + 10 * v11 - 48;
      uint64_t v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3) {
        goto LABEL_16;
      }
    }
  }
  if (v12 == v9) {
    goto LABEL_43;
  }
  if (v12 == a3) {
    goto LABEL_41;
  }
  uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  int v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3) {
    goto LABEL_41;
  }
  int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3) {
      goto LABEL_41;
    }
    int v17 = v16 - 48;
    while (1)
    {
      int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38) {
        break;
      }
      if (v17 >= 214748364) {
        goto LABEL_43;
      }
      int v17 = v16 + 10 * v17 - 48;
      uint64_t v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  uint64_t v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 == a3 || v5 != 92)
      {
        if (v5 == 46)
        {
          int v10 = (std::__node<char> *)operator new(0x10uLL);
          std::vector<char>::pointer end = this->__end_;
          first = end->__first_;
          v10->__vftable = (std::__node<char>_vtbl *)&unk_1F125F408;
          v10[1].__vftable = (std::__node<char>_vtbl *)first;
          end->__first_ = v10;
          this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          return a2 + 1;
        }
      }
      else
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 != a2
    || (int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 != a2))
  {
    if (v8 != a2) {
      goto LABEL_25;
    }
LABEL_4:
    if (v8 != a3)
    {
      int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
      if (locale_low == 36)
      {
        int v10 = operator new(0x18uLL);
        BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        uint64_t v12 = *(void *)(a1 + 56);
        v10[1] = *(void *)(v12 + 8);
        int v13 = &unk_1F125EEF8;
        goto LABEL_13;
      }
      if (locale_low != 40)
      {
        if (locale_low == 94)
        {
          int v10 = operator new(0x18uLL);
          BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
          uint64_t v12 = *(void *)(a1 + 56);
          v10[1] = *(void *)(v12 + 8);
          int v13 = &unk_1F125EEB0;
LABEL_13:
          void *v10 = v13;
          *((unsigned char *)v10 + 16) = v11;
          *(void *)(v12 + 8) = v10;
          goto LABEL_14;
        }
        return a2;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) != 0)
      {
        int v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        int v17 = operator new(0x18uLL);
        int v18 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(v19 + 8);
        void *v17 = &unk_1F125F210;
        v17[1] = v20;
        *((_DWORD *)v17 + 4) = v18;
        *(void *)(v19 + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v21 == a3 || (uint64_t v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0)
      {
        uint64_t v23 = operator new(0x18uLL);
        uint64_t v24 = *(void *)(a1 + 56);
        uint64_t v25 = *(void *)(v24 + 8);
        void *v23 = &unk_1F125F258;
        v23[1] = v25;
        *((_DWORD *)v23 + 4) = v18;
        *(void *)(v24 + 8) = v23;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
LABEL_25:
    if (v8 != a2) {
      goto LABEL_26;
    }
    return a2;
  }
  if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2) {
      goto LABEL_25;
    }
    goto LABEL_4;
  }
  uint64_t v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  void *v14 = &unk_1F125F408;
  v14[1] = v16;
  *(void *)(v15 + 8) = v14;
LABEL_14:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_26:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this == a3) {
    return (std::basic_regex<char>::value_type *)v3;
  }
  int v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  BOOL v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
    goto LABEL_13;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
LABEL_13:
    }
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (unint64_t i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
          }
            }
          else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
        }
          }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13; {
LABEL_28:
  }
  if (this->__end_ == this->__begin_) {
    std::vector<std::csub_match>::pointer begin = (std::vector<std::csub_match>::pointer)v11;
  }
  else {
    std::vector<std::csub_match>::pointer begin = this->__begin_;
  }
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  std::vector<char>::pointer end = this->__end_;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      std::vector<char>::pointer end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::vector<char>::pointer end = this->__end_;
  }
  if (end != begin)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      uint64_t v20 = (void *)(v18 + v15 * 24);
      if (v19 <= v16) {
        uint64_t v21 = a4 + 3;
      }
      else {
        uint64_t v21 = v20;
      }
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        uint64_t v22 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v22 = *a4 + v15 * 24;
      }
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(void *)(v22 + 8) - v10);
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        uint64_t v23 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v23 = *a4 + v15 * 24;
      }
      char v24 = *(unsigned char *)(v23 + 16);
      std::vector<std::ssub_match>::pointer begin = this->__begin_;
      std::vector<std::ssub_match>::pointer v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  size_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    this[4].__end_ = v26;
  }
  LOBYTE(this[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    uint64_t v85 = (void **)*((void *)&v99 + 1);
    int v86 = (void **)v100;
    *((void *)&v101 + 1) = 0;
    unint64_t v87 = v100 - *((void *)&v99 + 1);
    if ((void)v100 - *((void *)&v99 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v85);
      int v86 = (void **)v100;
      uint64_t v85 = (void **)(*((void *)&v99 + 1) + 8);
      *((void *)&v99 + 1) = v85;
      unint64_t v87 = v100 - (void)v85;
    }
    while ((void)v100 - (void)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)long long v98 = 0;
  memset(&v98[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
  unint64_t v11 = *(void *)(*((void *)&v99 + 1) + 8 * (((void)v101 + *((void *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((void)v101 + *((void *)&v101 + 1)) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v98[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v98;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v98[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  memset(&v98[56], 0, 24);
  uint64_t v13 = *(void *)&v98[80];
  *(void *)(v11 + 85) = *(void *)&v98[85];
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v101 + 1);
  uint64_t v14 = v101;
  uint64_t v16 = ++*((void *)&v101 + 1);
  uint64_t v17 = *((void *)&v99 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v101 + v15;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v99 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  char v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  unint64_t v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = *((void *)&v101 + 1);
    uint64_t v14 = v101;
    uint64_t v17 = *((void *)&v99 + 1);
  }
  uint64_t v94 = 0;
  char v95 = 0;
  unsigned int v28 = 0;
  unint64_t v29 = v14 + v16 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v93 = a3;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v35 = v16 + v101 - 1;
    uint64_t v36 = *(void *)(*((void *)&v99 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    unint64_t v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v93) {
          goto LABEL_21;
        }
        uint64_t v65 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v66 = v94;
        if ((v95 & (v94 >= v65)) == 0) {
          uint64_t v66 = v65;
        }
        if (v66 == v32)
        {
          size_t v67 = (void **)*((void *)&v99 + 1);
          uint64_t v68 = v100;
          if ((void)v100 == *((void *)&v99 + 1))
          {
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = 0;
          }
          else
          {
            int v69 = (void *)(*((void *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            int v70 = (void *)(*v69 + 96 * ((unint64_t)v101 % 0x2A));
            unint64_t v71 = *(void *)(*((void *)&v99 + 1) + 8 * ((*((void *)&v101 + 1) + (void)v101) / 0x2AuLL))
                + 96 * ((*((void *)&v101 + 1) + (void)v101) % 0x2AuLL);
            if (v70 != (void *)v71)
            {
              do
              {
                uint64_t v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                int64_t v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((void *)((char *)v70 - *v69) == (void *)4032)
                {
                  unint64_t v74 = (void *)v69[1];
                  ++v69;
                  int v70 = v74;
                }
              }
              while (v70 != (void *)v71);
              size_t v67 = (void **)*((void *)&v99 + 1);
              uint64_t v68 = v100;
            }
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = v68 - (void)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                size_t v67 = (void **)(*((void *)&v99 + 1) + 8);
                *((void *)&v99 + 1) = v67;
                unint64_t v82 = v100 - (void)v67;
              }
              while ((void)v100 - (void)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            uint64_t v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              char v95 = 1;
              uint64_t v94 = v32;
              goto LABEL_8;
            }
            uint64_t v83 = 42;
          }
          *(void *)&long long v101 = v83;
          goto LABEL_76;
        }
        uint64_t v94 = v66;
        unint64_t v75 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v76 = *(void *)(*((void *)&v99 + 1) + 8 * (v75 / 0x2A));
        unint64_t v77 = v75 % 0x2A;
        uint64_t v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(void *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        uint64_t v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(void *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        uint64_t v80 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v81 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v80 = 0;
        }
        if ((unint64_t)(v80 - (*((void *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        char v95 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v101 + 1);
        if (*((void *)&v101 + 1)) {
          continue;
        }
        if (v95)
        {
          uint64_t v84 = *v92;
          *(void *)uint64_t v84 = a2;
          *(void *)(v84 + 8) = a2 + v94;
          uint64_t v6 = 1;
          *(unsigned char *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        uint64_t v85 = (void **)*((void *)&v99 + 1);
        int v86 = (void **)v100;
        *((void *)&v101 + 1) = 0;
        unint64_t v87 = v100 - *((void *)&v99 + 1);
        if ((void)v100 - *((void *)&v99 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v88 = v87 >> 3;
        if (v88 == 1)
        {
          uint64_t v89 = 21;
LABEL_85:
          *(void *)&long long v101 = v89;
        }
        else if (v88 == 2)
        {
          uint64_t v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            int v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((void)v100 != *((void *)&v99 + 1)) {
            *(void *)&long long v100 = v100 + ((*((void *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v99) {
          operator delete((void *)v99);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v101;
        if (!(void)v101)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v99);
          unint64_t v49 = v101;
        }
        unint64_t v50 = (void *)(*((void *)&v99 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v101 + 1);
        *(void *)&long long v101 = v101 - 1;
        ++*((void *)&v101 + 1);
        uint64_t v56 = v55 + v101;
        unint64_t v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        uint64_t v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v48 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v98[64] = v58;
        *(_OWORD *)&v98[80] = v58;
        *(_OWORD *)&v98[32] = v58;
        *(_OWORD *)&v98[48] = v58;
        *(_OWORD *)long long v98 = v58;
        *(_OWORD *)&v98[16] = v58;
        std::__state<char>::__state((uint64_t)v98, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v98[80] + 24))(*(void *)&v98[80], 0, v98);
        uint64_t v59 = *((void *)&v99 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        }
        unint64_t v61 = *((void *)&v101 + 1) + v101;
        if (v60 == *((void *)&v101 + 1) + (void)v101)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
          uint64_t v59 = *((void *)&v99 + 1);
          unint64_t v61 = *((void *)&v101 + 1) + v101;
        }
        unint64_t v62 = *(void *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        long long v63 = *(_OWORD *)&v98[16];
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v98;
        *(_OWORD *)(v62 + 16) = v63;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v98[32];
        *(void *)(v62 + 48) = *(void *)&v98[48];
        memset(&v98[32], 0, 24);
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v98[56];
        *(void *)(v62 + 72) = *(void *)&v98[72];
        memset(&v98[56], 0, 24);
        uint64_t v64 = *(void *)&v98[80];
        *(void *)(v62 + 85) = *(void *)&v98[85];
        *(void *)(v62 + 80) = v64;
        ++*((void *)&v101 + 1);
        if (*(void *)&v98[56])
        {
          *(void *)&v98[64] = *(void *)&v98[56];
          operator delete(*(void **)&v98[56]);
        }
        if (*(void *)&v98[32])
        {
          *(void *)&v98[40] = *(void *)&v98[32];
          operator delete(*(void **)&v98[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_1B8B2375C(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1B8B23770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_1B8B237B8(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1B8B237CC(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  size_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(void *)uint64_t v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)uint64_t v65 = 0u;
  memset(v66, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)unint64_t v62 = 0;
  memset(&v62[8], 0, 85);
  uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(void *)&v62[56])
  {
    *(void *)&v62[64] = *(void *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v68;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  long long v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
    uint64_t v13 = v68;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    char v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        uint64_t v34 = &v26[-*((void *)v13 - 11)];
        unint64_t v35 = v60;
        if ((v61 & ((uint64_t)v60 >= (uint64_t)v34)) == 0)
        {
          long long v36 = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v25;
          *(_OWORD *)&v64[16] = v36;
          if (v64 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v37 = *(void *)v24;
          *(void *)&v66[29] = *(void *)(v13 - 11);
          *(void *)&v66[24] = v37;
          unint64_t v35 = v34;
        }
        uint64_t v38 = v68;
        if (v35 == v21)
        {
          uint64_t v39 = v67;
          while (v38 != v39)
          {
            unint64_t v40 = (void *)*((void *)v38 - 5);
            if (v40)
            {
              *((void *)v38 - 4) = v40;
              operator delete(v40);
            }
            uint64_t v41 = (void *)*((void *)v38 - 8);
            if (v41)
            {
              *((void *)v38 - 7) = v41;
              operator delete(v41);
            }
            v38 -= 96;
          }
          uint64_t v68 = v39;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v60 = v35;
          unint64_t v42 = (void *)*((void *)v68 - 5);
          if (v42)
          {
            *((void *)v68 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v43 = (void *)*((void *)v38 - 8);
          if (v43)
          {
            *((void *)v38 - 7) = v43;
            operator delete(v43);
          }
          uint64_t v68 = v38 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v68;
        unsigned int v28 = (void *)*((void *)v68 - 5);
        if (v28)
        {
          *((void *)v68 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        uint64_t v68 = v27 - 96;
        break;
      case 0xFFFFFC20:
        *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v30;
        *(_OWORD *)&v62[80] = v30;
        *(_OWORD *)&v62[32] = v30;
        *(_OWORD *)&v62[48] = v30;
        *(_OWORD *)unint64_t v62 = v30;
        *(_OWORD *)&v62[16] = v30;
        std::__state<char>::__state((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v62[80] + 24))(*(void *)&v62[80], 0, v62);
        unint64_t v31 = v68;
        if ((unint64_t)v68 >= v69)
        {
          uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(void *)&v62[56])
          {
            *(void *)&v62[64] = *(void *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v62[16];
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v62;
          *((_OWORD *)v31 + 1) = v32;
          *((void *)v31 + 4) = 0;
          *((void *)v31 + 5) = 0;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((_OWORD *)v31 + 2) = *(_OWORD *)&v62[32];
          *((void *)v31 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v31 + 8) = 0;
          *((void *)v31 + 9) = 0;
          *(_OWORD *)(v31 + 56) = *(_OWORD *)&v62[56];
          *((void *)v31 + 9) = *(void *)&v62[72];
          memset(&v62[56], 0, 24);
          uint64_t v33 = *(void *)&v62[80];
          *(void *)(v31 + 85) = *(void *)&v62[85];
          *((void *)v31 + 10) = v33;
          uint64_t v68 = v31 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    uint64_t v13 = v68;
  }
  while (v67 != v68);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = *(void **)v66;
    if (!*(void *)v66) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = &v60[(void)a2];
  *(unsigned char *)(v44 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(void *)&v64[32]) >> 3);
    uint64_t v46 = (unsigned char *)(*(void *)&v64[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = *(void **)v66;
  if (*(void *)v66)
  {
LABEL_64:
    *(void *)&v66[8] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  long long v52 = v67;
  if (v67)
  {
    uint64_t v53 = v68;
    uint64_t v54 = v67;
    if (v68 != v67)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v67;
    }
    uint64_t v68 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_1B8B23E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = a1[4];
    std::basic_regex<char>::value_type v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        uint64_t v8 = (void *)*((void *)v6 + 7);
        if (v8)
        {
          *((void *)v6 + 8) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v6 + 4);
        if (v9)
        {
          *((void *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v10 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v12 = a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v11 = v12 - (void)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  std::deque<std::__state<char>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    std::basic_regex<char>::value_type v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)std::basic_regex<char>::value_type v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (char *)operator new(8 * v32);
        long long v36 = &v35[8 * v33];
        uint64_t v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            int64_t v73 = &v35[8 * v33];
            uint64_t v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v40 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v41 = &v36[v75];
              v7 += v75;
              uint64_t v76 = (long long *)(v6 + 3);
              unint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *unint64_t v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    std::basic_regex<char>::value_type v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    uint64_t v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    unint64_t v42 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        unint64_t v35 = (char *)operator new(8 * v43);
        long long v36 = &v35[8 * v44];
        uint64_t v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            long long v81 = &v35[8 * v44];
            uint64_t v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v47 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v36[v83];
              v7 += v83;
              uint64_t v84 = (long long *)(v42 + 3);
              uint64_t v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *uint64_t v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_76:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v27 = (char *)operator new(8 * v49);
      unsigned int v28 = &v27[8 * v49];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v27;
      *(void *)unint64_t v27 = v30;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v31 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v31 = v21 + 1;
      }
      v27 -= 8 * (v31 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_51:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25) {
            unint64_t v57 = 1;
          }
          else {
            unint64_t v57 = (v28 - v25) >> 2;
          }
          if (v57 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v58 = (char *)operator new(8 * v57);
          uint64_t v59 = v58;
          unint64_t v60 = (v57 + 3) >> 2;
          unint64_t v27 = &v58[8 * v60];
          int64_t v61 = v29 - v25;
          BOOL v38 = v29 == v25;
          unint64_t v29 = v27;
          if (!v38)
          {
            unint64_t v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if (v62 < 0x38) {
              goto LABEL_91;
            }
            uint64_t v65 = 8 * v60;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20) {
              goto LABEL_91;
            }
            uint64_t v66 = (v62 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            long long v63 = &v27[v67];
            uint64_t v64 = &v25[v67];
            uint64_t v68 = (long long *)(v25 + 16);
            unint64_t v69 = &v58[v65 + 16];
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)unint64_t v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                uint64_t v72 = *(void *)v64;
                v64 += 8;
                *(void *)long long v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          unsigned int v28 = &v58[8 * v57];
          operator delete(v25);
          uint64_t v25 = v59;
        }
        else
        {
          uint64_t v53 = (v28 - v29) >> 3;
          if (v53 >= -1) {
            uint64_t v54 = v53 + 1;
          }
          else {
            uint64_t v54 = v53 + 2;
          }
          uint64_t v55 = v54 >> 1;
          unint64_t v27 = &v25[8 * (v54 >> 1)];
          uint64_t v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            uint64_t v56 = v29;
          }
          unint64_t v29 = (char *)v56 + 8 * v55;
        }
      }
      uint64_t v52 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(void *)(a1 + 8));
  }
LABEL_45:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_1B8B245AC(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  std::basic_regex<char>::value_type v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      _OWORD *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      std::basic_regex<char>::value_type v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        std::basic_regex<char>::value_type v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      std::basic_regex<char>::value_type v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    std::basic_regex<char>::value_type v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v47 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      uint64_t v43 = *(void *)(a1 + 16);
      unint64_t v47 = *(void **)(v43 - 8);
      *(void *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_45:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      uint64_t v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12) {
              unint64_t v26 = 1;
            }
            else {
              unint64_t v26 = (v16 - v12) >> 2;
            }
            if (v26 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v27 = (char *)operator new(8 * v26);
            uint64_t v28 = v27;
            unint64_t v29 = v26 >> 2;
            uint64_t v18 = &v27[8 * (v26 >> 2)];
            int64_t v31 = v16 - v17;
            BOOL v30 = v16 == v17;
            uint64_t v16 = v18;
            if (!v30)
            {
              uint64_t v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v32 = v31 - 8;
              if (v32 < 0x38 || (uint64_t v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                uint64_t v34 = &v27[8 * (v26 >> 2)];
                unint64_t v35 = v17;
                goto LABEL_35;
              }
              uint64_t v37 = (v32 >> 3) + 1;
              uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v34 = &v18[v38];
              unint64_t v35 = &v17[v38];
              int64_t v39 = (long long *)(v17 + 16);
              unint64_t v40 = &v27[v33 + 16];
              uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)unint64_t v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  uint64_t v36 = *(void *)v35;
                  v35 += 8;
                  *(void *)uint64_t v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            unint64_t v15 = &v27[8 * v26];
            if (v12) {
              operator delete(v12);
            }
            BOOL v12 = v28;
            goto LABEL_18;
          }
          uint64_t v20 = (v17 - v12) >> 3;
          if (v20 >= -1) {
            uint64_t v21 = v20 + 1;
          }
          else {
            uint64_t v21 = v20 + 2;
          }
          uint64_t v22 = v21 >> 1;
          uint64_t v23 = &v17[-8 * (v21 >> 1)];
          uint64_t v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            uint64_t v24 = v17;
          }
          uint64_t v25 = -v22;
          unint64_t v15 = v16;
          uint64_t v16 = &v23[v16 - v17];
          uint64_t v18 = &v24[8 * v25];
        }
        else
        {
          uint64_t v18 = v17;
        }
LABEL_18:
        uint64_t v19 = *v3++;
        *(void *)uint64_t v16 = v19;
        v16 += 8;
        uint64_t v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16)) {
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    unint64_t v44 = (char *)operator new(8uLL);
    unint64_t v15 = v44 + 8;
    operator delete(v12);
    BOOL v3 = *(uint64_t **)(a1 + 8);
    uint64_t v45 = *(uint64_t **)(a1 + 16);
    BOOL v12 = v44;
    *(void *)unint64_t v44 = v14;
    uint64_t v16 = v44 + 8;
    if (v3 != v45) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = v12;
LABEL_48:
  int64_t v46 = *(void **)a1;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v46) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v46) {
      return;
    }
  }

  operator delete(v46);
}

void sub_1B8B24C7C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  void *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      BOOL v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             uint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        BOOL v30 = (char *)result;
        int64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        BOOL v30 = (char *)&result[v55];
        int64_t v31 = &a2[v55];
        uint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          unint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)BOOL v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      long long v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        int64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  unint64_t v26 = v13;
  if (v20 != a3)
  {
    unint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)unint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  void *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::vector<std::ssub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v11 = &end[__n];
      std::vector<std::ssub_match>::size_type v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      std::vector<std::ssub_match>::pointer end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    std::vector<std::ssub_match>::size_type v14 = 24 * __n;
    int64_t v15 = &v13[__n];
    int64_t v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v13[-1].matched = *(void *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = (const std::locale *)MEMORY[0x1BA9C8290]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    unint64_t v8 = (char *)a2;
  }
  else {
    unint64_t v8 = *(char **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  return a1;
  }
}

void sub_1B8B253DC(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B253F8(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = operator new(8uLL);
  void *v6 = &unk_1F125ED60;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  unint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_1F125EDB8;
  v8[1] = 0;
  void v8[2] = 0;
  v8[3] = v7;
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F)
    {
LABEL_4:
      if (v10)
      {
        if (v10 != 16)
        {
          if (v10 != 32) {
LABEL_27:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
          goto LABEL_15;
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
      }
      else
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      }
    }
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F) {
      goto LABEL_4;
    }
  }
  switch(v10)
  {
    case 0x40u:
LABEL_15:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    case 0x80u:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
    case 0x100u:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    default:
      goto LABEL_27;
  }
}

void sub_1B8B2564C(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  while (1)
  {
    unint64_t v8 = (std::basic_regex<char> *)v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7) {
      break;
    }
LABEL_2:
    if (v7 == (char *)v8) {
      goto LABEL_6;
    }
  }
  unint64_t v9 = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    uint64_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    std::vector<std::ssub_match>::size_type v12 = (std::__node<char> *)operator new(0x10uLL);
    uint64_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    int64_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 == (std::basic_regex<char> *)a3) {
    return a3;
  }
  if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    int64_t v16 = a1->__end_;
    uint64_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      unint64_t v8 = (std::basic_regex<char> *)v18;
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v18, a3);
      if (v8 == (std::basic_regex<char> *)v18)
      {
        unint64_t v19 = a1->__end_;
        unsigned int v20 = a1->__marked_count_;
        unint64_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v21)
        {
LABEL_16:
          if (v8 == v17)
          {
            uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
            long long v23 = a1->__end_;
            uint64_t v24 = v23->__first_;
            v22[1].__vftable = (std::__node<char>_vtbl *)v24;
            v23->__first_ = v22;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          uint64_t v25 = (std::__node<char> *)operator new(0x18uLL);
          unint64_t v26 = v16->__first_;
          v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v25[2].__vftable = (std::__node<char>_vtbl *)v26;
          v25->__vftable = (std::__node<char>_vtbl *)&unk_1F125F378;
          end->__first_ = v25;
          v16->__first_ = 0;
          unint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
          long long v28 = a1->__end_->__first_;
          v27[1].__vftable = (std::__node<char>_vtbl *)v28;
          v16->__first_ = v27;
          a1->__end_->__first_ = 0;
          unint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
          BOOL v30 = v16->__first_;
          v29->__vftable = (std::__node<char>_vtbl *)&unk_1F125F3C0;
          v29[1].__vftable = (std::__node<char>_vtbl *)v30;
          a1->__end_->__first_ = v29;
          int64_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
          a1->__end_ = v15;
          goto LABEL_9;
        }
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
      }
      if (v18 == (char *)v8) {
        goto LABEL_16;
      }
    }
  }
  return (char *)v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    unint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_1F125EEB0;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    BOOL v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      unsigned int v10 = v3;
      unint64_t v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        BOOL v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (unsigned char *)v3) {
          continue;
        }
      }
      if (v10 + 1 != a3 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::vector<std::ssub_match>::size_type v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      void *v14 = &unk_1F125EEF8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    void *v12 = &unk_1F125F378;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    std::vector<std::ssub_match>::size_type v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    void *v16 = &unk_1F125F3C0;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    unint64_t v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_1F125F378;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    unint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_1F125F3C0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      unint64_t v11 = v22;
    }
    else {
      unint64_t v11 = v22 + 1;
    }
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    unint64_t v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_1F125F378;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    unint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_1F125F3C0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      unint64_t v11 = v22;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v16 = a2[1];
        if (v16 == 66)
        {
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_1F125EF40;
          *((void *)v17 + 1) = v19;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 1;
        }
        else
        {
          if (v16 != 98) {
            return v3;
          }
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_1F125EF40;
          *((void *)v17 + 1) = v18;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94) {
      return v3;
    }
    unint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_1F125EEB0;
LABEL_17:
    void *v11 = v14;
    *((unsigned char *)v11 + 16) = v12;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    unint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_1F125EEF8;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3) {
    return v3;
  }
  int v7 = a2[2];
  if (v7 == 33)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v22.__loop_count_ = v20;
    *(_OWORD *)&v22.__start_.__cntrl_ = v20;
    *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v20;
    *(_OWORD *)&v22.__traits_.__col_ = v20;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
    v22.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
    unsigned int marked_count = v22.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_27;
  }
  if (v7 != 61) {
    return v3;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22.__loop_count_ = v8;
  *(_OWORD *)&v22.__start_.__cntrl_ = v8;
  *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v22.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
  v22.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
  unsigned int v10 = v22.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v22.__traits_.__loc_);
  return v9 + 1;
}

void sub_1B8B2633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B8B26350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B8B26364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B8B26378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
        goto LABEL_26;
      }
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        int v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        unsigned int marked_count = this->__marked_count_;
      }
      else
      {
        unint64_t v11 = (std::__node<char> *)operator new(0x18uLL);
        unsigned int marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_1F125F210;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      uint64_t v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3) {
        goto LABEL_26;
      }
      int v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41) {
        goto LABEL_26;
      }
      if ((this->__flags_ & 2) == 0)
      {
        uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
        uint64_t v18 = this->__end_;
        uint64_t v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_1F125F258;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      uint64_t result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      long long v8 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v9 = this->__end_;
      unsigned int v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_1F125EFD0;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_25:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v9 == a3;
      }
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 0;
        goto LABEL_36;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 0;
      goto LABEL_45;
    }
    long long v8 = this;
    if (locale_low == 43)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    std::basic_regex<char> v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = v22 == a3;
    }
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      uint64_t v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    long long v8 = this;
    if (locale_low != 123) {
      return v8;
    }
    uint64_t v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_72;
    }
    int v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v15 = v14 - 48;
    int v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      int v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
          break;
        }
        if (v15 >= 214748364) {
          goto LABEL_72;
        }
        int v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3) {
          goto LABEL_21;
        }
      }
    }
    if (v16 == v13) {
      goto LABEL_72;
    }
    if (v16 == (char *)a3) {
      goto LABEL_73;
    }
    int v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        uint64_t v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          long long v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    unint64_t v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3) {
      goto LABEL_72;
    }
    int v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      uint64_t v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        size_t v11 = v15;
        unsigned int v10 = v16 + 3;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        goto LABEL_36;
      }
      size_t v25 = v15;
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38) {
      goto LABEL_73;
    }
    int v28 = v27 - 48;
    unint64_t v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      unint64_t v29 = a3;
    }
    else
    {
      while (1)
      {
        int v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38) {
          break;
        }
        if (v28 >= 214748364) {
          goto LABEL_72;
        }
        int v28 = v30 + 10 * v28 - 48;
        unint64_t v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3) {
          goto LABEL_61;
        }
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125) {
LABEL_73:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15) {
      goto LABEL_72;
    }
    int64_t v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      uint64_t v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  unint64_t v4 = a2;
  if (*a2 == 92)
  {
    int v6 = a2 + 1;
    if (a2 + 1 == a3) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    int v8 = *v6;
    unsigned int v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      unint64_t v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        unint64_t v4 = a3;
      }
      else
      {
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 48) > 9) {
            break;
          }
          if (v9 >= 0x19999999) {
            goto LABEL_24;
          }
          ++v4;
          unsigned int v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            unint64_t v4 = a3;
            break;
          }
        }
        if (!v9) {
LABEL_24:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_) {
        goto LABEL_24;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6) {
        return v4;
      }
    }
    unint64_t v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      unsigned int v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1B8B26DA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  BOOL v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1B8B27174(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B27188(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B2719C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B271B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B271C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B271D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65) {
        goto LABEL_85;
      }
      unsigned int v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u) {
        goto LABEL_85;
      }
      std::basic_regex<char>::value_type v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v10;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6) {
              goto LABEL_42;
            }
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v13 = v4[1];
      char v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
        goto LABEL_47;
      }
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u) {
        goto LABEL_85;
      }
      char v14 = -87;
LABEL_47:
      if (v4 + 2 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v15 = v4[2];
      char v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u) {
LABEL_85:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v16 = -87;
      }
      std::basic_regex<char>::value_type v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v17;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_85;
      }
      if (!a4) {
        goto LABEL_68;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  int64_t v5 = a2 - a3;
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  int v7 = a2;
  if (v6 == 93) {
    return v7;
  }
  unsigned int v8 = (char *)a4;
  int v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  int v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      uint64_t v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2) {
        goto LABEL_91;
      }
      uint64_t v15 = 0;
      int64_t v16 = v5 + 4;
      std::basic_regex<char>::value_type v17 = (unsigned __int8 *)v4;
      uint64_t v18 = v16;
      if (v4[2] == 58) {
        goto LABEL_15;
      }
      do
      {
        do
        {
          if (!v18) {
            goto LABEL_91;
          }
          std::basic_regex<char>::value_type v17 = (unsigned __int8 *)&v4[++v15];
          uint64_t v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      uint64_t v19 = &v4[v15 + 2];
      if (v19 == a3) {
LABEL_91:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      int v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      }
      char v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      unsigned int v8 = &v4[v15 + 4];
      int v7 = v4;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      char v13 = 0;
      int v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    int v11 = 0;
    goto LABEL_36;
  }
  BOOL v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_92;
  }
  std::basic_regex<char> v22 = (unsigned __int8 *)(v4 + 2);
  BOOL v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46) {
    goto LABEL_24;
  }
  do
  {
    do
    {
      if (a3 - 4 == v4) {
        goto LABEL_92;
      }
      ++v4;
      std::basic_regex<char> v22 = v23;
      int v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3) {
LABEL_92:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v42 = v44;
  *(_OWORD *)std::vector<std::csub_match> __p = v43;
  size_t v25 = (char *)HIBYTE(v44);
  int v11 = SHIBYTE(v44);
  uint64_t v26 = *((void *)&v43 + 1);
  if (v44 < 0) {
    size_t v25 = (char *)__p[1];
  }
  if ((unint64_t)(v25 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = (char *)(v22 + 2);
  int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0) {
    uint64_t v26 = HIBYTE(v44);
  }
  if (v26)
  {
    if (v4 == a3) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      int64_t v31 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  int v28 = *v4;
  if (v28 != 92) {
    goto LABEL_44;
  }
  unint64_t v29 = v4 + 1;
  if (v27) {
    int v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  }
  else {
    int v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  }
  unint64_t v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1]) {
        goto LABEL_69;
      }
      if (__p[1] != (void *)1)
      {
        uint64_t v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        char v13 = 1;
        int v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      uint64_t v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42)) {
        goto LABEL_69;
      }
      uint64_t v33 = __p;
      if (HIBYTE(v42) != 1) {
        goto LABEL_68;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  int v32 = *v4;
  if (v32 == 93) {
    goto LABEL_52;
  }
  unint64_t v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93) {
    goto LABEL_52;
  }
  long long v43 = 0uLL;
  int64_t v44 = 0;
  int v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if (v34 == 92)
      {
        if (v27) {
          unint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        }
        else {
          unint64_t v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        }
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  unint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  int v7 = v35;
LABEL_82:
  *(_OWORD *)BOOL v39 = *(_OWORD *)__p;
  uint64_t v40 = v42;
  __p[1] = 0;
  uint64_t v42 = 0;
  __p[0] = 0;
  *(_OWORD *)BOOL v37 = v43;
  uint64_t v38 = v44;
  long long v43 = 0uLL;
  int64_t v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0) {
        goto LABEL_85;
      }
LABEL_89:
      operator delete((void *)v43);
      char v13 = 1;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0) {
    goto LABEL_89;
  }
LABEL_85:
  char v13 = 1;
  if (SHIBYTE(v42) < 0) {
LABEL_70:
  }
    operator delete(__p[0]);
LABEL_71:
  if (v13) {
    return v7;
  }
  return v8;
}

void sub_1B8B27DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_39;
  }
  int v6 = a3 - 2;
  int v7 = a2;
  unsigned int v8 = a2;
  unsigned int v9 = a2 + 1;
  if (*a2 != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      unsigned int v8 = v9;
      int v10 = *v9++;
      if (v10 == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3) {
    goto LABEL_39;
  }
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    int v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v11 = (char *)v20[1];
  if (!v20[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(void)v12], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v13 = *(void *)(a4 + 144);
      if (v13 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)unint64_t v13 = v14;
        }
        *(void *)(a4 + 144) = v13 + 24;
        *(void *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0) {
    uint64_t v15 = v20[1];
  }
  if (v15 == (void *)2)
  {
    std::basic_regex<char>::value_type v17 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      std::basic_regex<char>::value_type v17 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    int64_t v16 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      int64_t v16 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0) {
      goto LABEL_38;
    }
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
    return v7 + 2;
  }
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_1B8B280E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int64_t v5 = a3 - 2;
  int v6 = a2;
  int v7 = a2;
  unsigned int v8 = a2 + 1;
  if (*a2 != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      int v7 = v8;
      int v9 = *v8++;
      if (v9 == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unsigned int v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unsigned int v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unsigned int v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unsigned int v8 = a2 + 3;
      }
      else {
        unsigned int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    std::basic_regex<char>::value_type v9 = __s;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v16 = v5 | 7;
  }
  uint64_t v17 = v16 + 1;
  std::basic_regex<char>::value_type v9 = (char *)operator new(v16 + 1);
  *(void *)&__s[8] = v5;
  *(void *)&__s[16] = v17 | 0x8000000000000000;
  *(void *)__s = v9;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    int v10 = v9;
    std::basic_regex<char>::value_type v11 = (char *)a2;
    do
    {
LABEL_15:
      char v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  int v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  std::basic_regex<char>::value_type v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  int v12 = (long long *)(a2 + 16);
  long long v13 = v9 + 16;
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    _OWORD *v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  char *v10 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (!*(void *)&__s[8]) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!__s[23]) {
      return;
    }
    uint64_t v19 = __s;
  }
  std::__get_collation_name(&v26, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v20 = v26.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0) {
      return;
    }
    uint64_t v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (*(void *)&__s[8] >= 3uLL) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if (__s[23] < 3u)
  {
LABEL_31:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v26);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v26;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0) {
            int v24 = __s;
          }
          else {
            int v24 = *(char **)__s;
          }
          if (__s[23] >= 0) {
            size_t v25 = __s[23];
          }
          else {
            size_t v25 = *(void *)&__s[8];
          }
          std::string::__assign_no_alias<false>((void **)a4, v24, v25);
        }
      }
      else
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a4 + 23);
      if (v22 == 1 || v22 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((void *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(void *)(a4 + 16) = *(void *)&__s[16];
          }
        }
      }
      else
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_1B8B28D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 > 0x16)
  {
    uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v16 = v4 | 7;
    }
    uint64_t v17 = v16 + 1;
    std::basic_regex<char>::value_type v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  std::basic_regex<char>::value_type v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    int v10 = v9;
    std::basic_regex<char>::value_type v11 = (char *)a2;
  }
  else
  {
    int v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    std::basic_regex<char>::value_type v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    int v12 = (long long *)(a2 + 16);
    long long v13 = v9 + 1;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      _OWORD *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v20, &v19[(void)v20]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v21 = __p;
  }
  else {
    unint64_t v21 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_1B8B28F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(unsigned char *)a2 != 92) {
    return v6;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      void *v10 = &unk_1F125F210;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_23;
      }
      unint64_t v14 = v9;
      long long v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v16 = *(_DWORD *)(a1 + 28);
      uint64_t v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17) {
        break;
      }
      std::basic_regex<char>::value_type v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    int v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      char v18 = operator new(0x18uLL);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      void *v18 = &unk_1F125F258;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(void *)(v19 + 8) = v18;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return v6;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  std::basic_regex<char>::value_type v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  int v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3) {
    goto LABEL_45;
  }
  int v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38) {
    goto LABEL_45;
  }
  int v12 = v11 - 48;
  uint64_t v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    uint64_t v13 = a3;
  }
  else
  {
    while (1)
    {
      int v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
        break;
      }
      if (v12 >= 214748364) {
        goto LABEL_45;
      }
      int v12 = v14 + 10 * v12 - 48;
      uint64_t v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == v10) {
    goto LABEL_45;
  }
  if (v13 == a3) {
LABEL_46:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  int v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3) {
    goto LABEL_46;
  }
  int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    int v18 = v17 - 48;
    long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      long long v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
        break;
      }
      if (v18 >= 214748364) {
        goto LABEL_45;
      }
      int v18 = v17 + 10 * v18 - 48;
      long long v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    int v18 = -1;
  }
  if (v15 == a3)
  {
    uint64_t v20 = (unsigned __int8 *)v15;
    long long v15 = a3;
    std::basic_regex<char>::value_type v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    std::basic_regex<char>::value_type v9 = (unsigned __int8 *)v15;
  }
  else
  {
    std::basic_regex<char>::value_type v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9) {
    goto LABEL_46;
  }
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 != a3 && v5 == 92)
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
      if (*a2 == 46)
      {
        int v10 = (std::__node<char> *)operator new(0x10uLL);
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v10->__vftable = (std::__node<char>_vtbl *)&unk_1F125F408;
        v10[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v10;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return a2 + 1;
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        int v9 = operator new(0x10uLL);
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(v10 + 8);
        void *v9 = &unk_1F125F408;
        v9[1] = v11;
        *(void *)(v10 + 8) = v9;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2) {
      goto LABEL_24;
    }
    return a2;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    uint64_t v13 = operator new(0x18uLL);
    BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v15 = *(void *)(a1 + 56);
    v13[1] = *(void *)(v15 + 8);
    int v16 = &unk_1F125EEF8;
    goto LABEL_14;
  }
  if (locale_low == 40)
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v17 = operator new(0x18uLL);
      int v18 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v18;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      void *v17 = &unk_1F125F210;
      v17[1] = v20;
      *((_DWORD *)v17 + 4) = v18;
      *(void *)(v19 + 8) = v17;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    ++*(_DWORD *)(a1 + 36);
    unint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v21 == a3 || (int v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v23 = operator new(0x18uLL);
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(v24 + 8);
      void *v23 = &unk_1F125F258;
      v23[1] = v25;
      *((_DWORD *)v23 + 4) = v18;
      *(void *)(v24 + 8) = v23;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    goto LABEL_23;
  }
  if (locale_low != 94) {
    return a2;
  }
  uint64_t v13 = operator new(0x18uLL);
  BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v15 = *(void *)(a1 + 56);
  v13[1] = *(void *)(v15 + 8);
  int v16 = &unk_1F125EEB0;
LABEL_14:
  void *v13 = v16;
  *((unsigned char *)v13 + 16) = v14;
  *(void *)(v15 + 8) = v13;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_24:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  unint64_t v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = &v3[v8];
      }
      break;
  }
  return result;
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  char v11 = -86;
  MEMORY[0x1BA9C8130](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    BOOL v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1B8B29DBC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B8B29D7CLL);
  }
  __cxa_rethrow();
}

void sub_1B8B29E38(_Unwind_Exception *a1)
{
}

void util::strip_non_printable(std::string *this)
{
  uint64_t v1 = this;
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    BOOL v3 = this;
  }
  else {
    BOOL v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    unint64_t v4 = (std::string *)((char *)v3 + size);
    std::string::size_type v5 = size - 1;
    uint64_t v6 = MEMORY[0x1E4F14390];
    while (1)
    {
      unsigned int v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0) {
        break;
      }
      int v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0) {
        goto LABEL_15;
      }
LABEL_8:
      BOOL v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4) {
        goto LABEL_28;
      }
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL)) {
      goto LABEL_8;
    }
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      uint64_t v9 = 1;
      unint64_t v4 = v3;
      while (1)
      {
        unsigned int v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL)) {
            goto LABEL_19;
          }
        }
        else
        {
          int v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0) {
            goto LABEL_19;
          }
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        unint64_t v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5) {
          goto LABEL_28;
        }
      }
    }
  }
  unint64_t v4 = v3;
LABEL_28:
  std::string::size_type v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  int v13 = (char)v12;
  BOOL v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  uint64_t v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    std::string::size_type v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v15 = (char *)v1 + v12;
    std::string::size_type v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0) {
    std::string::size_type v12 = v1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      uint64_t v1 = v14;
    }
    else
    {
      *((unsigned char *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1 = *(char *)(result + 23);
  if (v1 >= 0) {
    uint64_t v2 = (unsigned char *)result;
  }
  else {
    uint64_t v2 = *(unsigned char **)result;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(result + 23);
  }
  else {
    uint64_t v3 = *(void *)(result + 8);
  }
  if (v3)
  {
    uint64_t v4 = MEMORY[0x1E4F14390];
    do
    {
      unsigned int v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t result = __maskrune((char)*v2, 0x40000uLL);
        if (result) {
          goto LABEL_10;
        }
        uint64_t result = __maskrune(v5, 0x4000uLL);
        if (result) {
          goto LABEL_10;
        }
      }
      else
      {
        int v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0) {
          goto LABEL_10;
        }
        uint64_t result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0) {
          goto LABEL_10;
        }
      }
      *uint64_t v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  int v5 = a1[23];
  int v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (v5 >= 0) {
    int64_t v9 = a1[23];
  }
  else {
    int64_t v9 = *((void *)a1 + 1);
  }
  std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *(char **)a1;
  }
  if (!v9)
  {
    std::string::size_type v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0) {
    uint64_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t size = a3->__r_.__value_.__l.__size_;
  }
  if (size >= v9)
  {
    int v27 = (char *)v8 + size;
    int v28 = *v11;
    unint64_t v29 = v8;
    do
    {
      uint64_t v30 = size - v9;
      if (v30 == -1) {
        break;
      }
      int64_t v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31) {
        break;
      }
      int v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          std::string::size_type v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                std::string::size_type v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0) {
                  std::string::size_type v33 = v10;
                }
                if (v33 < v13) {
                  break;
                }
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((unsigned char *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  unsigned int v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                int v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0) {
                  unint64_t v35 = a3;
                }
                else {
                  unint64_t v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v36 = a1[23];
                if (v36 >= 0) {
                  BOOL v37 = a1;
                }
                else {
                  BOOL v37 = *(char **)a1;
                }
                if (v36 >= 0) {
                  int64_t v38 = a1[23];
                }
                else {
                  int64_t v38 = *((void *)a1 + 1);
                }
                if (v38)
                {
                  if (v34 >= 0) {
                    int64_t v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v39 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v39 < v38) {
                    return;
                  }
                  uint64_t v40 = (char *)v35 + v39;
                  int v41 = *v37;
                  uint64_t v42 = v35;
                  while (1)
                  {
                    int64_t v43 = v39 - v38;
                    if (v43 == -1) {
                      return;
                    }
                    int64_t v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44) {
                      return;
                    }
                    uint64_t v45 = v44;
                    if (!memcmp(v44, v37, v38)) {
                      break;
                    }
                    uint64_t v42 = (std::string *)(v45 + 1);
                    int64_t v39 = v40 - (v45 + 1);
                    if (v39 < v38) {
                      return;
                    }
                  }
                  if (v45 == v40) {
                    return;
                  }
                  std::string::size_type v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                std::string::size_type v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13) {
                  break;
                }
                std::string::__erase_external_with_move(a3, v13, v9);
                int v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0) {
                  std::string::size_type v16 = a3;
                }
                else {
                  std::string::size_type v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v17 = a1[23];
                if (v17 >= 0) {
                  int v18 = a1;
                }
                else {
                  int v18 = *(char **)a1;
                }
                if (v17 >= 0) {
                  int64_t v19 = a1[23];
                }
                else {
                  int64_t v19 = *((void *)a1 + 1);
                }
                if (v19)
                {
                  if (v15 >= 0) {
                    int64_t v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v20 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v20 < v19) {
                    return;
                  }
                  unint64_t v21 = (char *)v16 + v20;
                  int v22 = *v18;
                  uint64_t v23 = v16;
                  while (1)
                  {
                    int64_t v24 = v20 - v19;
                    if (v24 == -1) {
                      return;
                    }
                    uint64_t v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25) {
                      return;
                    }
                    size_t v26 = v25;
                    if (!memcmp(v25, v18, v19)) {
                      break;
                    }
                    uint64_t v23 = (std::string *)(v26 + 1);
                    int64_t v20 = v21 - (v26 + 1);
                    if (v20 < v19) {
                      return;
                    }
                  }
                  if (v26 == v21) {
                    return;
                  }
                  std::string::size_type v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      unint64_t v29 = (std::string *)(v32 + 1);
      uint64_t size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_1B8B2A3B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *util::strip_leading_trailing@<X0>(void *result@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *((unsigned __int8 *)result + 23);
  int v5 = (void *)*result;
  unint64_t v6 = result[1];
  if ((v4 & 0x80u) == 0) {
    unsigned int v7 = result;
  }
  else {
    unsigned int v7 = (void *)*result;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = *((unsigned __int8 *)result + 23);
  }
  else {
    uint64_t v8 = result[1];
  }
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = a2;
  }
  else {
    std::string::size_type v10 = *a2;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  if (!v8) {
    goto LABEL_26;
  }
  std::string::size_type v12 = result;
  unint64_t v13 = 0;
  if (!v11)
  {
    uint64_t v14 = v8 - 1;
    if ((v4 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result) {
      break;
    }
    if (v8 == ++v13) {
      goto LABEL_26;
    }
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      uint64_t v14 = -1;
      if ((v4 & 0x80) == 0) {
        goto LABEL_28;
      }
LABEL_24:
      if (v6 >= v13)
      {
        unint64_t v4 = v6;
        std::string::size_type v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  uint64_t v14 = v8;
  if ((v4 & 0x80) != 0) {
    goto LABEL_24;
  }
LABEL_28:
  if (v13 > v4) {
    goto LABEL_41;
  }
LABEL_29:
  unint64_t v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v4 - v13;
  }
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v17 = v16 | 7;
    }
    uint64_t v18 = v17 + 1;
    int64_t v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((unsigned char *)a3 + 23) = v16;
  if (v16) {
LABEL_39:
  }
    uint64_t result = memmove(a3, (char *)v12 + v13, v16);
  *((unsigned char *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 23);
  int v2 = (char)v1;
  uint64_t v3 = (unsigned char *)(result + v1);
  if (v2 >= 0) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = (unsigned char *)(*(void *)result + *(void *)(result + 8));
  }
  if (v2 >= 0) {
    int v5 = (unsigned char *)result;
  }
  else {
    int v5 = *(unsigned char **)result;
  }
  for (; v5 != v4; ++v5)
  {
    uint64_t result = __toupper((char)*v5);
    unsigned char *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v3 = (char *)a1;
  }
  else {
    uint64_t v3 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_21;
  }
  unint64_t v4 = &v3[size];
  std::string::size_type v5 = size - 1;
  uint64_t v6 = MEMORY[0x1E4F14390];
  while (1)
  {
    unsigned int v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL)) {
        break;
      }
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0) {
      break;
    }
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4) {
      goto LABEL_22;
    }
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    uint64_t v8 = 1;
    unint64_t v4 = v3;
    while (1)
    {
      unsigned int v9 = v3[v8];
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      if (__maskrune(v9, 0x100uLL)) {
        goto LABEL_16;
      }
LABEL_17:
      ++v8;
      if (!--v5) {
        goto LABEL_22;
      }
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  unint64_t v4 = v3;
LABEL_22:
  unint64_t v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v11 = (char)v10;
  std::string::size_type v12 = a1->__r_.__value_.__r.__words[0];
  unint64_t v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    uint64_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    unint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = a1;
  }
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(unsigned char *)(v12 + v15) = 0;
    }
    else
    {
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = (const char *)a1;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(char *)(a1 + 23) < 0) {
    int v2 = *(const char **)a1;
  }
  std::string::size_type v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 0x8000100u);
  error[3] = v5;
  uint64_t v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  if (v6) {
    unsigned int v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7)
  {
    uint64_t v8 = CFReadStreamCreateWithFile(v4, v6);
    unsigned int v9 = v8;
    error[1] = v8;
    if (v8) {
      unint64_t v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
    }
    else {
      unint64_t v10 = 0;
    }
    if (!v10) {
      goto LABEL_16;
    }
    CFReadStreamOpen(v8);
    error[0] = 0;
    CFPropertyListRef v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error);
    *a2 = v11;
    CFReadStreamClose(v9);
    if (!error[0]) {
      goto LABEL_16;
    }
    CFErrorGetDomain(error[0]);
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)buf;
    uint64_t v16 = *(void *)&buf[16];
    std::string::size_type v12 = GetOsLogContext()[1];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      CFIndex Code = CFErrorGetCode(error[0]);
      uint64_t v14 = __p;
      if (v16 < 0) {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = Code;
      *(_WORD *)&buf[22] = 2080;
      int64_t v19 = v14;
      _os_log_error_impl(&dword_1B8B00000, v12, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    }
    CFRelease(error[0]);
    *a2 = 0;
    if (v11) {
      CFRelease(v11);
    }
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    operator delete(__p[0]);
    if (v9) {
LABEL_17:
    }
      CFRelease(v9);
  }
LABEL_18:
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8B2A9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void util::moveDirContent(std::string::size_type a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  BOOL v131 = 0;
  BOOL v132 = 0;
  uint64_t v133 = 0;
  std::locale::locale(&v125, (const std::locale *)a5);
  long long v126 = *(_OWORD *)(a5 + 8);
  long long v127 = *(_OWORD *)(a5 + 24);
  uint64_t v8 = *(std::__shared_weak_count **)(a5 + 48);
  uint64_t v128 = *(void *)(a5 + 40);
  v129 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *(void *)(a5 + 56);
  int filtered_files = ctu::fs::get_filtered_files();
  unint64_t v10 = v129;
  if (!v129 || atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(&v125);
    if (filtered_files) {
      goto LABEL_6;
    }
LABEL_104:
    BOOL v53 = GetOsLogContext()[1];
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v109 = a1;
      if (*(char *)(a1 + 23) < 0) {
        std::string::size_type v109 = *(void *)a1;
      }
      LODWORD(v139.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = v109;
      _os_log_error_impl(&dword_1B8B00000, v53, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v139, 0xCu);
    }
    goto LABEL_105;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  std::locale::~locale(&v125);
  if (!filtered_files) {
    goto LABEL_104;
  }
LABEL_6:
  CFPropertyListRef v11 = v131;
  int v113 = (char *)v132;
  if (v131 != (char *)v132)
  {
    if (a4)
    {
      while (1)
      {
        memset(&v139, 170, sizeof(v139));
        if (v11[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *(_OWORD *)v11;
          v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v12;
        }
        int v13 = *(char *)(a1 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v14 = *(void *)(a1 + 8);
        }
        unint64_t v15 = v14 + 1;
        memset(&__p, 170, sizeof(__p));
        if (v14 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v15 >= 0x17) {
          break;
        }
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v14 + 1;
        if (v14) {
          goto LABEL_24;
        }
LABEL_28:
        *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v14) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = &v139;
        }
        else {
          uint64_t v20 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v139.__r_.__value_.__l.__size_;
        }
        int v22 = std::string::append(&__p, (const std::string::value_type *)v20, size);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        int is_directory = ctu::fs::is_directory();
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_45;
          }
LABEL_36:
          if (is_directory) {
            goto LABEL_37;
          }
LABEL_46:
          unint64_t v29 = GetOsLogContext()[1];
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            goto LABEL_83;
          }
          int v30 = *(char *)(a1 + 23);
          if (v30 >= 0) {
            size_t v31 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v31 = *(void *)(a1 + 8);
          }
          unint64_t v32 = v31 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v31 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v32 >= 0x17)
          {
            int v110 = v30;
            uint64_t v45 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v45 = v32 | 7;
            }
            uint64_t v46 = v45 + 1;
            std::string::size_type v33 = (std::string *)operator new(v45 + 1);
            __p.__r_.__value_.__l.__size_ = v31 + 1;
            __p.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            int v30 = v110;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            std::string::size_type v33 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v31 + 1;
            if (!v31) {
              goto LABEL_93;
            }
          }
          if (v30 >= 0) {
            unint64_t v47 = (const void *)a1;
          }
          else {
            unint64_t v47 = *(const void **)a1;
          }
          memmove(v33, v47, v31);
LABEL_93:
          *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v31) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v48 = &v139;
          }
          else {
            uint64_t v48 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v49 = v139.__r_.__value_.__l.__size_;
          }
          unint64_t v50 = std::string::append(&__p, (const std::string::value_type *)v48, v49);
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          char v52 = &v124;
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v52 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_error_impl(&dword_1B8B00000, v29, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_82;
          }
LABEL_77:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_83;
          }
LABEL_9:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_84;
          }
LABEL_10:
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
        else
        {
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_36;
          }
LABEL_45:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!is_directory) {
            goto LABEL_46;
          }
LABEL_37:
          int v25 = *(char *)(a1 + 23);
          if (v25 >= 0) {
            size_t v26 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v26 = *(void *)(a1 + 8);
          }
          unint64_t v27 = v26 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v34 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v34 = v27 | 7;
            }
            uint64_t v35 = v34 + 1;
            int v28 = (std::string *)operator new(v34 + 1);
            __p.__r_.__value_.__l.__size_ = v26 + 1;
            __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            int v28 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26 + 1;
            if (!v26) {
              goto LABEL_61;
            }
          }
          if (v25 >= 0) {
            int v36 = (const void *)a1;
          }
          else {
            int v36 = *(const void **)a1;
          }
          memmove(v28, v36, v26);
LABEL_61:
          *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v26) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v37 = &v139;
          }
          else {
            BOOL v37 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v139.__r_.__value_.__l.__size_;
          }
          int64_t v39 = std::string::append(&__p, (const std::string::value_type *)v37, v38);
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          int v41 = std::string::append(&v124, "/", 1uLL);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          std::string::size_type v122 = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v121 = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v120 = *(std::string *)a2;
          }
          std::locale::locale(&v114, (const std::locale *)a5);
          long long v115 = *(_OWORD *)(a5 + 8);
          long long v116 = *(_OWORD *)(a5 + 24);
          int64_t v43 = *(std::__shared_weak_count **)(a5 + 48);
          uint64_t v117 = *(void *)(a5 + 40);
          int v118 = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v119 = *(void *)(a5 + 56);
          util::moveDirContent(v121, &v120, a3, (a4 - 1), &v114);
          int64_t v44 = v118;
          if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_75:
              if ((SHIBYTE(v122) & 0x80000000) == 0) {
                goto LABEL_76;
              }
LABEL_81:
              operator delete(v121[0]);
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_82;
              }
              goto LABEL_77;
            }
          }
          else
          {
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_75;
            }
          }
          operator delete(v120.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122) < 0) {
            goto LABEL_81;
          }
LABEL_76:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
LABEL_82:
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_9;
          }
LABEL_83:
          if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_10;
          }
LABEL_84:
          operator delete(v139.__r_.__value_.__l.__data_);
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
      }
      uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v17 = v15 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string *)operator new(v17 + 1);
      __p.__r_.__value_.__l.__size_ = v14 + 1;
      __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_24:
      if (v13 >= 0) {
        int64_t v19 = (const void *)a1;
      }
      else {
        int64_t v19 = *(const void **)a1;
      }
      memmove(p_p, v19, v14);
      goto LABEL_28;
    }
    while (1)
    {
      memset(&v139, 170, sizeof(v139));
      if (v11[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v57 = *(_OWORD *)v11;
        v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
      }
      memset(&v124, 170, sizeof(v124));
      int v58 = *(char *)(a2 + 23);
      if (v58 >= 0) {
        size_t v59 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v59 = *(void *)(a2 + 8);
      }
      unint64_t v60 = v59 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v59 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v60 >= 0x17)
      {
        uint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17) {
          uint64_t v62 = v60 | 7;
        }
        uint64_t v63 = v62 + 1;
        p_std::string buf = (std::string *)operator new(v62 + 1);
        buf.__r_.__value_.__l.__size_ = v59 + 1;
        buf.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
      }
      else
      {
        memset(&buf, 0, sizeof(buf));
        p_std::string buf = &buf;
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v59 + 1;
        if (!v59) {
          goto LABEL_136;
        }
      }
      if (v58 >= 0) {
        float64x2x2_t v64 = (const void *)a2;
      }
      else {
        float64x2x2_t v64 = *(const void **)a2;
      }
      memmove(p_buf, v64, v59);
LABEL_136:
      *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v59) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v65 = &v139;
      }
      else {
        uint64_t v65 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v66 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v66 = v139.__r_.__value_.__l.__size_;
      }
      uint64_t v67 = std::string::append(&buf, (const std::string::value_type *)v65, v66);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      ctu::fs::get_unique_filename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_144;
        }
      }
      else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_144;
      }
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_144:
      int v69 = *(char *)(a1 + 23);
      if (v69 >= 0) {
        size_t v70 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v70 = *(void *)(a1 + 8);
      }
      unint64_t v71 = v70 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v70 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v71 >= 0x17)
      {
        uint64_t v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v71 | 7) != 0x17) {
          uint64_t v73 = v71 | 7;
        }
        uint64_t v74 = v73 + 1;
        uint64_t v72 = (std::string *)operator new(v73 + 1);
        buf.__r_.__value_.__l.__size_ = v70 + 1;
        buf.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
LABEL_154:
        if (v69 >= 0) {
          uint64_t v75 = (const void *)a1;
        }
        else {
          uint64_t v75 = *(const void **)a1;
        }
        memmove(v72, v75, v70);
        goto LABEL_158;
      }
      memset(&buf, 0, sizeof(buf));
      uint64_t v72 = &buf;
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v70 + 1;
      if (v70) {
        goto LABEL_154;
      }
LABEL_158:
      *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v70) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v76 = &v139;
      }
      else {
        uint64_t v76 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v77 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v77 = v139.__r_.__value_.__l.__size_;
      }
      uint64_t v78 = std::string::append(&buf, (const std::string::value_type *)v76, v77);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      char v80 = ctu::fs::rename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_178;
        }
LABEL_166:
        if (v80) {
          goto LABEL_167;
        }
LABEL_179:
        uint64_t v86 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
          goto LABEL_206;
        }
        int v87 = *(char *)(a1 + 23);
        if (v87 >= 0) {
          size_t v88 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v88 = *(void *)(a1 + 8);
        }
        unint64_t v89 = v88 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v88 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v89 >= 0x17)
        {
          uint64_t v100 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v89 | 7) != 0x17) {
            uint64_t v100 = v89 | 7;
          }
          uint64_t v101 = v100 + 1;
          int v90 = (std::string *)operator new(v100 + 1);
          buf.__r_.__value_.__l.__size_ = v88 + 1;
          buf.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          int v90 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v88 + 1;
          if (!v88) {
            goto LABEL_217;
          }
        }
        if (v87 >= 0) {
          uint64_t v102 = (const void *)a1;
        }
        else {
          uint64_t v102 = *(const void **)a1;
        }
        memmove(v90, v102, v88);
LABEL_217:
        *(_WORD *)((char *)&v90->__r_.__value_.__l.__data_ + v88) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v103 = &v139;
        }
        else {
          uint64_t v103 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v104 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v104 = v139.__r_.__value_.__l.__size_;
        }
        uint64_t v105 = std::string::append(&buf, (const std::string::value_type *)v103, v104);
        long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        int v107 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        std::vector<std::string>::pointer v108 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::vector<std::string>::pointer v108 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v134 = 136315394;
        int v135 = v107;
        __int16 v136 = 2080;
        CFDictionaryRef v137 = v108;
        _os_log_error_impl(&dword_1B8B00000, v86, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v134, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_228;
        }
LABEL_205:
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_206;
        }
LABEL_229:
        operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_117;
        }
LABEL_207:
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_208;
        }
LABEL_118:
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
      else
      {
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_166;
        }
LABEL_178:
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v80 & 1) == 0) {
          goto LABEL_179;
        }
LABEL_167:
        long long v81 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_206;
        }
        int v82 = *(char *)(a1 + 23);
        if (v82 >= 0) {
          size_t v83 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v83 = *(void *)(a1 + 8);
        }
        unint64_t v84 = v83 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v83 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v84 >= 0x17)
        {
          uint64_t v91 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17) {
            uint64_t v91 = v84 | 7;
          }
          uint64_t v92 = v91 + 1;
          uint64_t v85 = (std::string *)operator new(v91 + 1);
          buf.__r_.__value_.__l.__size_ = v83 + 1;
          buf.__r_.__value_.__r.__words[2] = v92 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          uint64_t v85 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v83 + 1;
          if (!v83) {
            goto LABEL_194;
          }
        }
        if (v82 >= 0) {
          uint64_t v93 = (const void *)a1;
        }
        else {
          uint64_t v93 = *(const void **)a1;
        }
        memmove(v85, v93, v83);
LABEL_194:
        *(_WORD *)((char *)&v85->__r_.__value_.__l.__data_ + v83) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v94 = &v139;
        }
        else {
          uint64_t v94 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v95 = v139.__r_.__value_.__l.__size_;
        }
        uint64_t v96 = std::string::append(&buf, (const std::string::value_type *)v94, v95);
        long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        long long v98 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        long long v99 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v99 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v134 = 136315394;
        int v135 = v98;
        __int16 v136 = 2080;
        CFDictionaryRef v137 = v99;
        _os_log_impl(&dword_1B8B00000, v81, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v134, 0x16u);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_205;
        }
LABEL_228:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_229;
        }
LABEL_206:
        if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_117:
        operator delete(v124.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
LABEL_208:
        operator delete(v139.__r_.__value_.__l.__data_);
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
    }
  }
LABEL_105:
  if (a3) {
    ctu::fs::remove_dir();
  }
  uint64_t v54 = (void **)v131;
  if (v131)
  {
    uint64_t v55 = v132;
    uint64_t v56 = v131;
    if (v132 != (void **)v131)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      uint64_t v56 = v131;
    }
    BOOL v132 = v54;
    operator delete(v56);
  }
}

void sub_1B8B2B988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 105) < 0) {
    operator delete(*(void **)(v58 - 128));
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    size_t v14 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(c.count[0]) = 0;
    unint64_t v15 = "dataIn Buffer is NULL";
    p_CC_SHA256_CTX c = (uint8_t *)&c;
    uint64_t v17 = v14;
    uint32_t v18 = 2;
    goto LABEL_16;
  }
  *(void *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v9;
  *(_OWORD *)&c.wbuf[10] = v9;
  *(_OWORD *)&c.hash[6] = v9;
  *(_OWORD *)&c.wbuf[2] = v9;
  *(_OWORD *)c.count = v9;
  *(_OWORD *)&c.hash[2] = v9;
  if (!ctu::fs::get_file_size()) {
    return;
  }
  CC_SHA256_Init(&c);
  unint64_t v10 = a1;
  if (a1[23] < 0) {
    unint64_t v10 = *(const char **)a1;
  }
  int v11 = open(v10, 0);
  if (v11 < 1)
  {
    int64_t v19 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    uint64_t v20 = __error();
    unint64_t v21 = strerror(*v20);
    int v22 = *__error();
    int v23 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v21;
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 1024;
    int v37 = v23;
    unint64_t v15 = "Failed to open: %s : %s (%d, 0x%x)";
    p_CC_SHA256_CTX c = buf;
    uint64_t v17 = v19;
    uint32_t v18 = 34;
LABEL_16:
    _os_log_error_impl(&dword_1B8B00000, v17, OS_LOG_TYPE_ERROR, v15, p_c, v18);
    return;
  }
  unint64_t v12 = 0;
  while (1)
  {
    ssize_t v13 = read(v11, a2, a3);
    if (v13 == -1) {
      break;
    }
    CC_SHA256_Update(&c, a2, v13);
    v12 += v13;
    if (v12 >= 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_18;
    }
  }
  int64_t v24 = GetOsLogContext()[1];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    int v25 = __error();
    size_t v26 = strerror(*v25);
    int v27 = *__error();
    int v28 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v26;
    __int16 v34 = 1024;
    int v35 = v27;
    __int16 v36 = 1024;
    int v37 = v28;
    _os_log_error_impl(&dword_1B8B00000, v24, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
  }
LABEL_18:
  CC_SHA256_Final(v8, &c);
  close(v11);
}

void sub_1B8B2BE64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B8B2BE7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B8B2BE94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B8B2BEAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B8B2BEC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B8B2BEDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B8B2BEF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B8B2BF0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    unint64_t v12 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    ssize_t v13 = __error();
    size_t v14 = strerror(*v13);
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v17 = v1;
    __int16 v18 = 2080;
    *(void *)int64_t v19 = v14;
    long long v9 = "Failed to open %s : %s";
    unint64_t v10 = v12;
    uint32_t v11 = 22;
    goto LABEL_13;
  }
  int v2 = open((const char *)*a1, 0);
  if (v2 < 0) {
    goto LABEL_9;
  }
LABEL_3:
  int v3 = v2;
  int v4 = ffsctl(v2, 0xC0084A44uLL, &v15, 0);
  close(v3);
  if (v4)
  {
    std::string::size_type v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    unsigned int v7 = __error();
    uint64_t v8 = strerror(*v7);
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v17 = v1;
    __int16 v18 = 1024;
    *(_DWORD *)int64_t v19 = v4;
    *(_WORD *)&v19[4] = 2080;
    *(void *)&v19[6] = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v15;
    long long v9 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
    unint64_t v10 = v5;
    uint32_t v11 = 38;
LABEL_13:
    _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return 0;
  }
  return 1;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v95 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v97 = 0xAAAAAAAAAAAAAA00;
  long long v99 = v4;
  uint64_t v96 = 0;
  long long v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  uint64_t v100 = 0;
  memset(v94, 0, sizeof(v94));
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (std::sub_match<const char *> *)a1;
  }
  else {
    uint64_t v6 = *(std::sub_match<const char *> **)a1;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  unsigned int v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  unint64_t v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  long long v106 = v4;
  __p.tm_zone = 0;
  uint64_t v102 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  uint64_t v107 = 0;
  memset(&__p, 0, 41);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(void *)&__p.tm_sec)
  {
    *(void *)&__p.tm_hour = *(void *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  if (v9 != 1)
  {
    BOOL v21 = 0;
    uint64_t v22 = *(void **)v94;
    if (!*(void *)v94) {
      return v21;
    }
LABEL_23:
    *(void *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v10 = *(void *)v94;
  if (!*(unsigned char *)(*(void *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(*(void *)v94 + 24);
  uint32_t v11 = *(char **)(*(void *)v94 + 32);
  unint64_t v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    size_t v14 = &v93;
    if ((char *)v12 != v11) {
      goto LABEL_16;
    }
LABEL_29:
    unsigned char *v14 = 0;
    goto LABEL_33;
  }
  uint64_t v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v24 = v13 | 7;
  }
  uint64_t v25 = v24 + 1;
  size_t v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11) {
    goto LABEL_29;
  }
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (char *)v12;
  }
  else
  {
    uint64_t v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v17 = (long long *)(v12 + 16);
    __int16 v18 = v14 + 16;
    unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      _OWORD *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_32;
    }
  }
  do
  {
    char v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  unsigned char *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(unsigned char *)(v10 + 64)) {
      goto LABEL_35;
    }
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(unsigned char *)(v10 + 64)) {
    goto LABEL_45;
  }
LABEL_35:
  uint64_t v28 = *(void *)(v10 + 48);
  int v27 = *(char **)(v10 + 56);
  unint64_t v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v29 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    int v30 = &v93;
    if ((char *)v28 != v27) {
      goto LABEL_38;
    }
LABEL_49:
    unsigned char *v30 = 0;
    goto LABEL_53;
  }
  uint64_t v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17) {
    uint64_t v37 = v29 | 7;
  }
  uint64_t v38 = v37 + 1;
  int v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27) {
    goto LABEL_49;
  }
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    size_t v31 = v30;
    __int16 v32 = (char *)v28;
  }
  else
  {
    size_t v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    __int16 v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    std::string::size_type v33 = (long long *)(v28 + 16);
    __int16 v34 = v30 + 16;
    unint64_t v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      _OWORD *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_52;
    }
  }
  do
  {
    char v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  unsigned char *v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(unsigned char *)(v10 + 88)) {
      goto LABEL_55;
    }
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(unsigned char *)(v10 + 88)) {
    goto LABEL_65;
  }
LABEL_55:
  uint64_t v41 = *(void *)(v10 + 72);
  long long v40 = *(char **)(v10 + 80);
  unint64_t v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v42 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    int64_t v43 = &v93;
    if ((char *)v41 != v40) {
      goto LABEL_58;
    }
LABEL_69:
    unsigned char *v43 = 0;
    goto LABEL_73;
  }
  uint64_t v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17) {
    uint64_t v50 = v42 | 7;
  }
  uint64_t v51 = v50 + 1;
  int64_t v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40) {
    goto LABEL_69;
  }
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    int64_t v44 = v43;
    uint64_t v45 = (char *)v41;
  }
  else
  {
    int64_t v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v46 = (long long *)(v41 + 16);
    unint64_t v47 = v43 + 16;
    unint64_t v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      _OWORD *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_72;
    }
  }
  do
  {
    char v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  unsigned char *v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC), 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 112)) {
      goto LABEL_75;
    }
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 112)) {
    goto LABEL_85;
  }
LABEL_75:
  uint64_t v54 = *(void *)(v10 + 96);
  BOOL v53 = *(char **)(v10 + 104);
  unint64_t v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v55 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    uint64_t v56 = &v93;
    if ((char *)v54 != v53) {
      goto LABEL_78;
    }
LABEL_89:
    unsigned char *v56 = 0;
    goto LABEL_93;
  }
  uint64_t v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v63 = v55 | 7;
  }
  uint64_t v64 = v63 + 1;
  uint64_t v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53) {
    goto LABEL_89;
  }
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    long long v57 = v56;
    uint64_t v58 = (char *)v54;
  }
  else
  {
    long long v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    size_t v59 = (long long *)(v54 + 16);
    unint64_t v60 = v56 + 16;
    unint64_t v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      _OWORD *v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_92;
    }
  }
  do
  {
    char v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  unsigned char *v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 136)) {
      goto LABEL_95;
    }
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 136)) {
    goto LABEL_105;
  }
LABEL_95:
  uint64_t v67 = *(void *)(v10 + 120);
  std::string::size_type v66 = *(char **)(v10 + 128);
  unint64_t v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v68 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    int v69 = &v93;
    if ((char *)v67 != v66) {
      goto LABEL_98;
    }
LABEL_109:
    unsigned char *v69 = 0;
    goto LABEL_113;
  }
  uint64_t v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17) {
    uint64_t v76 = v68 | 7;
  }
  uint64_t v77 = v76 + 1;
  int v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66) {
    goto LABEL_109;
  }
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    size_t v70 = v69;
    unint64_t v71 = (char *)v67;
  }
  else
  {
    size_t v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v72 = (long long *)(v67 + 16);
    uint64_t v73 = v69 + 16;
    unint64_t v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      _OWORD *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_112;
    }
  }
  do
  {
    char v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  unsigned char *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 160)) {
      goto LABEL_115;
    }
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 160)) {
    goto LABEL_125;
  }
LABEL_115:
  uint64_t v80 = *(void *)(v10 + 144);
  long long v79 = *(char **)(v10 + 152);
  unint64_t v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v81 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    int v82 = &v93;
    if ((char *)v80 != v79) {
      goto LABEL_118;
    }
LABEL_129:
    unsigned char *v82 = 0;
    goto LABEL_133;
  }
  uint64_t v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v89 = v81 | 7;
  }
  uint64_t v90 = v89 + 1;
  int v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79) {
    goto LABEL_129;
  }
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    size_t v83 = v82;
    unint64_t v84 = (char *)v80;
  }
  else
  {
    size_t v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v85 = (long long *)(v80 + 16);
    uint64_t v86 = v82 + 16;
    unint64_t v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      _OWORD *v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_132;
    }
  }
  do
  {
    char v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  unsigned char *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p, 10);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  __p.tm_isdst = -1;
  time_t v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  BOOL v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  uint64_t v22 = *(void **)v94;
  if (*(void *)v94) {
    goto LABEL_23;
  }
  return v21;
}

void sub_1B8B2C95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!v6) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      unsigned int v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  unsigned int v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!v6) {
    goto LABEL_29;
  }
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background")) {
    goto LABEL_30;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = std::stol(a1, &__idx, a3);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF) {
    return 0;
  }
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1B8B2CC14(void *a1)
{
  return 0;
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v46 = a3;
  a3[2] = 0;
  int v3 = *a2;
  unint64_t v47 = a2[1];
  if (v3 == v47) {
    return;
  }
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    int v6 = *((char *)a1 + 23);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v7 = (size_t)a1[1];
    }
    int v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v49.__r_.__value_.__l.__size_;
    }
    unint64_t v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      uint32_t v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7) {
        goto LABEL_20;
      }
LABEL_16:
      if (v6 >= 0) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = *a1;
      }
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    uint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v18 = v10 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint32_t v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7) {
      goto LABEL_16;
    }
LABEL_20:
    unint64_t v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0) {
        size_t v14 = &v49;
      }
      else {
        size_t v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize_t size = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_size_t size = v15;
    v50.st_mtimespeCC_SHA256_CTX c = v15;
    v50.st_ctimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0) {
      uint64_t v16 = (const char *)__dst;
    }
    else {
      uint64_t v16 = (const char *)__dst[0];
    }
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (long long v20 = (const char *)__dst) : (long long v20 = (const char *)__dst[0]),
          BOOL v21 = opendir(v20),
          (uint64_t v22 = v21) == 0))
    {
      char v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    int v23 = readdir(v21);
    closedir(v22);
    char v17 = HIBYTE(__dst[2]);
    if (v23) {
      break;
    }
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
LABEL_59:
      }
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    int v3 = (long long *)((char *)v3 + 24);
    if (v3 == v47) {
      return;
    }
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u) {
      goto LABEL_99;
    }
    uint64_t v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 108) {
      goto LABEL_79;
    }
    if (*v24 == 1935962413 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 115) {
      goto LABEL_79;
    }
    if (*v24 == 1634296877 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 103) {
      goto LABEL_79;
    }
    if (HIBYTE(__dst[2]) < 9u) {
      goto LABEL_99;
    }
    uint64_t v28 = __dst;
    unint64_t v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  unint64_t v29 = __dst[1];
  if (__dst[1] < (void *)5) {
    goto LABEL_99;
  }
  uint64_t v28 = (void **)__dst[0];
  int v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9) {
LABEL_99:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    __int16 v34 = (char *)v28 + (void)v29;
    uint64_t v35 = *(void *)(v34 - 9);
    int v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101) {
      goto LABEL_79;
    }
    goto LABEL_30;
  }
LABEL_79:
  int v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v39 = v49.__r_.__value_.__l.__size_;
  }
  unint64_t v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v40 >= 0x17)
  {
    uint64_t v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v42 = v40 | 7;
    }
    uint64_t v43 = v42 + 1;
    uint64_t v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(void *)&v50.st_uid = v43 | 0x8000000000000000;
    *(void *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    uint64_t v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39) {
      goto LABEL_93;
    }
  }
  if (v38 >= 0) {
    int64_t v44 = &v49;
  }
  else {
    int64_t v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  uint64_t v45 = v46;
  _OWORD *v46 = *(_OWORD *)&v50.st_dev;
  *((void *)v45 + 2) = *(void *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0) {
      return;
    }
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((unsigned char *)&v49.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_97;
  }
}

void sub_1B8B2D0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __p[73] = *(void **)MEMORY[0x1E4F143B8];
  unint64_t v74 = 0;
  long long v75 = 0;
  uint64_t v76 = 0;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v72[32] = v2;
  long long v73 = v2;
  *(_OWORD *)uint64_t v72 = v2;
  *(_OWORD *)&v72[16] = v2;
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  unint64_t v5 = v4 + 2;
  memset(&v71, 170, sizeof(v71));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint32_t v11 = operator new(v9 + 1);
    v71.__r_.__value_.__l.__size_ = v4 + 2;
    v71.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    _WORD *v11 = 10798;
    int v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v71.__r_.__value_.__r.__words[2] = 0;
    *((unsigned char *)&v71.__r_.__value_.__s + 23) = v4 + 2;
    int v8 = &v71.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = (const void **)*v6;
  }
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  unint64_t v13 = std::string::append(&v71, ".*", 2uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)tm __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    std::string v70 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v64, (const std::locale *)v72);
  long long v65 = *(_OWORD *)&v72[8];
  long long v66 = *(_OWORD *)&v72[24];
  uint64_t v67 = *(void *)&v72[40];
  unint64_t v68 = (std::__shared_weak_count *)v73;
  if ((void)v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v69 = *((void *)&v73 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)&v70, (uint64_t)&v64, (uint64_t)&v74, 0);
  uint64_t v16 = v68;
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if (FilteredFiles) {
        goto LABEL_28;
      }
LABEL_32:
      BOOL v17 = 0;
      goto LABEL_118;
    }
  }
  else
  {
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  operator delete(v70.__r_.__value_.__l.__data_);
  if (!FilteredFiles) {
    goto LABEL_32;
  }
LABEL_28:
  memset(&v71, 170, sizeof(v71));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v63 = *(std::string *)a1;
  }
  unint64_t v60 = 0;
  unint64_t v61 = 0;
  long long v62 = 0;
  uint64_t v18 = (char *)v74;
  uint64_t v19 = v75;
  __p[0] = &v60;
  __p[1] = (void *)0xAAAAAAAAAAAAAA00;
  int64_t v20 = v75 - (unsigned char *)v74;
  if (v75 != v74)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
    if (v21 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = (char *)operator new(v20);
    uint64_t v23 = 0;
    unint64_t v60 = v22;
    unint64_t v61 = v22;
    long long v62 = &v22[24 * v21];
    do
    {
      uint64_t v25 = (std::string *)&v22[v23];
      char v26 = &v18[v23];
      if (v18[v23 + 23] < 0)
      {
        std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)v26, *((void *)v26 + 1));
      }
      else
      {
        long long v24 = *(_OWORD *)v26;
        v25->__r_.__value_.__r.__words[2] = *((void *)v26 + 2);
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v24;
      }
      v23 += 24;
    }
    while (&v18[v23] != v19);
    unint64_t v61 = &v22[v23];
  }
  util::findBasebandLogInfoFile((const void **)&v63.__r_.__value_.__l.__data_, (long long **)&v60, &v71);
  int v27 = (void **)v60;
  if (v60)
  {
    uint64_t v28 = (void **)v61;
    unint64_t v29 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
      unint64_t v29 = v60;
    }
    unint64_t v61 = (char *)v27;
    operator delete(v29);
  }
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v30 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v71.__r_.__value_.__l.__size_;
    }
    if (size) {
      goto LABEL_55;
    }
LABEL_102:
    uint64_t v51 = GetOsLogContext()[1];
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        int v6 = (const void **)*v6;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v6;
      _os_log_impl(&dword_1B8B00000, v51, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
    }
    BOOL v17 = 0;
    if ((v30 & 0x80) != 0) {
      goto LABEL_117;
    }
    goto LABEL_118;
  }
  operator delete(v63.__r_.__value_.__l.__data_);
  int v30 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v71.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_102;
  }
LABEL_55:
  memset(__p, 170, 0x240uLL);
  int v32 = *(char *)(a1 + 23);
  if (v32 >= 0) {
    size_t v33 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v33 = *(void *)(a1 + 8);
  }
  unint64_t v34 = v33 + size;
  memset(__dst, 170, 24);
  if (v33 + size > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v34 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v35 = __dst;
    HIBYTE(__dst[2]) = v33 + size;
    if (!v33) {
      goto LABEL_65;
    }
    goto LABEL_61;
  }
  uint64_t v52 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v52 = v34 | 7;
  }
  uint64_t v53 = v52 + 1;
  uint64_t v35 = (void **)operator new(v52 + 1);
  __dst[1] = (void *)(v33 + size);
  __dst[2] = (void *)(v53 | 0x8000000000000000);
  __dst[0] = v35;
  if (v33)
  {
LABEL_61:
    if (v32 >= 0) {
      int v36 = (const void *)a1;
    }
    else {
      int v36 = *(const void **)a1;
    }
    memmove(v35, v36, v33);
  }
LABEL_65:
  uint64_t v37 = (char *)v35 + v33;
  if (v30 >= 0) {
    int v38 = &v71;
  }
  else {
    int v38 = (std::string *)v71.__r_.__value_.__r.__words[0];
  }
  memmove(v37, v38, size);
  v37[size] = 0;
  std::ifstream::basic_ifstream((uint64_t *)__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17]) {
      goto LABEL_70;
    }
LABEL_113:
    uint64_t v54 = GetOsLogContext()[1];
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst[0]) = 136315138;
      *(void **)((char *)__dst + 4) = v38;
      _os_log_error_impl(&dword_1B8B00000, v54, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    }
    BOOL v17 = 0;
    goto LABEL_116;
  }
  if (!__p[17]) {
    goto LABEL_113;
  }
LABEL_70:
  std::istream::seekg();
  memset(__dst, 170, 24);
  size_t v39 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  uint64_t v40 = HIBYTE(__dst[2]);
  int v41 = SHIBYTE(__dst[2]);
  uint64_t v42 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    uint64_t v40 = (uint64_t)__dst[1];
    size_t v39 = (void **)__dst[0];
  }
  uint64_t v43 = (char *)v39 + v40;
  if (v40 >= 35)
  {
    int64_t v44 = v39;
    do
    {
      uint64_t v45 = (char *)memchr(v44, 98, v40 - 34);
      if (!v45) {
        break;
      }
      if (*(void *)v45 == 0x6320676F6C206262
        && *((void *)v45 + 1) == 0x6F697463656C6C6FLL
        && *((void *)v45 + 2) == 0x20726F66202D206ELL
        && *((void *)v45 + 3) == 0x6E67616964737973
        && *(void *)(v45 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_90;
      }
      int64_t v44 = (void **)(v45 + 1);
      uint64_t v40 = v43 - (char *)v44;
    }
    while (v43 - (char *)v44 > 34);
  }
  uint64_t v45 = v43;
LABEL_90:
  BOOL v17 = v45 != v43 && v45 - (char *)v39 != -1;
  if (v41 < 0) {
    operator delete(v42);
  }
LABEL_116:
  __p[0] = *(void **)MEMORY[0x1E4FBA3F8];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1BA9C80F0](&__p[2]);
  std::istream::~istream();
  MEMORY[0x1BA9C8300](&__p[53]);
  if ((*((unsigned char *)&v71.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_117:
  }
    operator delete(v71.__r_.__value_.__l.__data_);
LABEL_118:
  unint64_t v55 = (std::__shared_weak_count *)v73;
  if ((void)v73 && !atomic_fetch_add((atomic_ullong *volatile)(v73 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  std::locale::~locale((std::locale *)v72);
  uint64_t v56 = (void **)v74;
  if (v74)
  {
    long long v57 = (void **)v75;
    uint64_t v58 = v74;
    if (v75 != v74)
    {
      do
      {
        if (*((char *)v57 - 1) < 0) {
          operator delete(*(v57 - 3));
        }
        v57 -= 3;
      }
      while (v57 != v56);
      uint64_t v58 = v74;
    }
    long long v75 = (char *)v56;
    operator delete(v58);
  }
  return v17;
}

void sub_1B8B2D978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  std::ifstream::~ifstream(&a47);
  if (v47 < 0)
  {
    operator delete(__p);
    std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
    std::vector<std::string>::~vector[abi:ne180100](&a40);
    _Unwind_Resume(a1);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8 = a3;
  uint64_t v10 = a6;
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v138 = 0;
  std::string v139 = 0;
  uint64_t v140 = 0;
  memset(v137, 170, sizeof(v137));
  size_t v11 = strlen(__s);
  unint64_t v103 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v12;
    *(void *)uint64_t v142 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  v142[7] = v11;
  p_dst = &__dst;
  if (v11) {
LABEL_8:
  }
    memcpy(p_dst, __s, v12);
  *((unsigned char *)p_dst + v12) = 0;
  uint64_t v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v137[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)CFDictionaryRef v137 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v142[7] & 0x80000000) != 0) {
    operator delete((void *)__dst);
  }
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v135[32] = v18;
  long long v136 = v18;
  *(_OWORD *)int v135 = v18;
  *(_OWORD *)&v135[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v135, (uint64_t)v137, 0);
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v133[32] = v19;
  long long v134 = v19;
  *(_OWORD *)uint64_t v133 = v19;
  *(_OWORD *)&v133[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v133, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  BOOL v104 = a5 == 0;
  size_t v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = operator new(v23 + 1);
    unint64_t v132 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v132) = v20;
  uint64_t v22 = __p;
  if (v20) {
LABEL_18:
  }
    memcpy(v22, this, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  std::locale::locale(&v125, (const std::locale *)v135);
  long long v126 = *(_OWORD *)&v135[8];
  long long v127 = *(_OWORD *)&v135[24];
  uint64_t v128 = *(void *)&v135[40];
  v129 = (std::__shared_weak_count *)v136;
  if ((void)v136) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v136 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *((void *)&v136 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v125, (uint64_t)&v138, 0);
  char v26 = v129;
  if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0)
    {
LABEL_24:
      if (!FilteredFiles) {
        goto LABEL_167;
      }
      goto LABEL_28;
    }
  }
  else
  {
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  operator delete(__p[0]);
  if (!FilteredFiles) {
    goto LABEL_167;
  }
LABEL_28:
  unint64_t v28 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v139 - v138));
  if (v139 == v138) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((unint64_t)v138, v139, v29, 1, v27);
  memset(&v124, 0, sizeof(v124));
  int v30 = v138;
  uint64_t v102 = v139;
  if (v138 == v139)
  {
LABEL_167:
    if (!v8) {
      goto LABEL_184;
    }
LABEL_168:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v111, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    }
    else {
      std::string v111 = *v10;
    }
    std::locale::locale(&v105, (const std::locale *)v133);
    long long v106 = *(_OWORD *)&v133[8];
    long long v107 = *(_OWORD *)&v133[24];
    uint64_t v108 = *(void *)&v133[40];
    std::string::size_type v109 = (std::__shared_weak_count *)v134;
    if ((void)v134) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v110 = *((void *)&v134 + 1);
    BOOL v91 = util::checkLogFileAge((uint64_t)&v111, v8, (uint64_t)&v105);
    time_t v92 = v109;
    if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_176:
        if (!v91) {
          goto LABEL_184;
        }
LABEL_180:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_184;
      }
    }
    else
    {
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_176;
      }
    }
    operator delete(v111.__r_.__value_.__l.__data_);
    if (!v91) {
      goto LABEL_184;
    }
    goto LABEL_180;
  }
  unsigned int v98 = v8;
  uint64_t v100 = a5;
  while (1)
  {
    memset(&v123, 170, sizeof(v123));
    if (*((char *)v30 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v123, (const std::string::value_type *)*v30, (std::string::size_type)v30[1]);
    }
    else
    {
      long long v31 = *(_OWORD *)v30;
      v123.__r_.__value_.__r.__words[2] = (std::string::size_type)v30[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v31;
    }
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = v124.__r_.__value_.__l.__size_;
    }
    std::string::size_type v33 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    int v34 = SHIBYTE(v123.__r_.__value_.__r.__words[2]);
    uint64_t v35 = (std::string *)v123.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v36 = &v124;
      }
      else {
        int v36 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v123;
      }
      else {
        uint64_t v37 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      int64_t v38 = v123.__r_.__value_.__l.__size_;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v38 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      }
      if (v38 >= size)
      {
        std::string v63 = (char *)v37 + v38;
        int v64 = v36->__r_.__value_.__s.__data_[0];
        long long v65 = v37;
        do
        {
          int64_t v66 = v38 - size;
          if (v66 == -1) {
            break;
          }
          uint64_t v67 = (char *)memchr(v65, v64, v66 + 1);
          if (!v67) {
            break;
          }
          unint64_t v68 = v67;
          if (!memcmp(v67, v36, size))
          {
            if (v68 == v63 || v68 - (char *)v37 == -1) {
              break;
            }
            int v61 = 3;
            uint64_t v10 = v103;
            if ((v34 & 0x80) == 0) {
              goto LABEL_150;
            }
            goto LABEL_106;
          }
          long long v65 = (std::string *)(v68 + 1);
          int64_t v38 = v63 - (v68 + 1);
        }
        while (v38 >= size);
      }
    }
    *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v121 = v39;
    unint64_t v118 = 0xAAAAAAAAAAAAAA00;
    v115[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    LOBYTE(v121) = 0;
    BYTE8(v121) = 0;
    uint64_t v122 = 0;
    memset(v115, 0, 41);
    if (v104)
    {
      std::string::size_type v40 = v123.__r_.__value_.__l.__size_;
      long long v148 = v39;
      unint64_t v145 = 0xAAAAAAAAAAAAAA00;
      *(void *)&v142[24] = v39;
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      LOBYTE(v148) = 0;
      BYTE8(v148) = 0;
      uint64_t v149 = 0;
      long long __dst = 0uLL;
      *(_OWORD *)uint64_t v142 = 0uLL;
      if (v34 >= 0) {
        int v41 = (std::sub_match<const char *> *)&v123;
      }
      else {
        int v41 = (std::sub_match<const char *> *)v35;
      }
      if (v34 >= 0) {
        std::string::size_type v40 = v33;
      }
      *(_OWORD *)&v142[9] = 0uLL;
      uint64_t v10 = v103;
      int v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v133, v41, (std::sub_match<const char *> *)((char *)v41 + v40), (std::vector<std::csub_match> *)&__dst, 0);
      std::string::size_type v43 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v44 = &v123;
      }
      else {
        int64_t v44 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v43 = v123.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v115, (uint64_t)v44, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v44 + v43), (uint64_t *)&__dst, 0);
      if ((void)__dst)
      {
        *((void *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v42)
      {
        p_end_cap = &v115[1].__end_cap_;
        if (v115[0].__end_ != v115[0].__begin_) {
          p_end_cap = &v115[0].__begin_->matched;
        }
        if (!*p_end_cap)
        {
          long long __dst = 0uLL;
          *(void *)uint64_t v142 = 0;
          if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_116;
          }
          goto LABEL_101;
        }
        std::vector<std::ssub_match>::pointer begin = (std::vector<std::ssub_match>::pointer)&v115[1];
        if (v115[0].__end_ != v115[0].__begin_) {
          std::vector<std::ssub_match>::pointer begin = v115[0].__begin_;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        p_std::__wrap_iter<const char *>::iterator_type i = &v115[0].__begin_->second.__i_;
        if (v115[0].__end_ == v115[0].__begin_) {
          p_std::__wrap_iter<const char *>::iterator_type i = (const char **)&v115[1].__end_;
        }
        std::string v49 = *p_i;
        unint64_t v50 = *p_i - i;
        if (v50 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v50 > 0x16)
        {
          uint64_t v75 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17) {
            uint64_t v75 = v50 | 7;
          }
          uint64_t v76 = v75 + 1;
          uint64_t v51 = (long long *)operator new(v75 + 1);
          *((void *)&__dst + 1) = v50;
          *(void *)uint64_t v142 = v76 | 0x8000000000000000;
          *(void *)&long long __dst = v51;
          if (i != v49)
          {
LABEL_74:
            if (v50 < 0x20 || (unint64_t)((char *)v51 - i) < 0x20)
            {
              uint64_t v52 = v51;
              uint64_t v53 = i;
            }
            else
            {
              uint64_t v52 = (long long *)((char *)v51 + (v50 & 0xFFFFFFFFFFFFFFE0));
              uint64_t v53 = &i[v50 & 0xFFFFFFFFFFFFFFE0];
              uint64_t v54 = (long long *)(i + 16);
              unint64_t v55 = v51 + 1;
              unint64_t v56 = v50 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v57 = *v54;
                *(v55 - 1) = *(v54 - 1);
                _OWORD *v55 = v57;
                v54 += 2;
                v55 += 2;
                v56 -= 32;
              }
              while (v56);
              if (v50 == (v50 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_115:
                *(unsigned char *)uint64_t v52 = 0;
                if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_116:
                  *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                  v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                  if (a4) {
                    goto LABEL_117;
                  }
                  goto LABEL_141;
                }
LABEL_101:
                operator delete(v103->__r_.__value_.__l.__data_);
                *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                if (a4)
                {
LABEL_117:
                  size_t v78 = strlen((const char *)this);
                  if (v78 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  long long v79 = (void *)v78;
                  if (v78 >= 0x17)
                  {
                    uint64_t v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v78 | 7) != 0x17) {
                      uint64_t v81 = v78 | 7;
                    }
                    uint64_t v82 = v81 + 1;
                    uint64_t v80 = operator new(v81 + 1);
                    v113[1] = v79;
                    unint64_t v114 = v82 | 0x8000000000000000;
                    v113[0] = v80;
                  }
                  else
                  {
                    HIBYTE(v114) = v78;
                    uint64_t v80 = v113;
                    if (!v78)
                    {
                      LOBYTE(v113[0]) = 0;
                      if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_121:
                        std::string v112 = *v103;
                        goto LABEL_127;
                      }
LABEL_126:
                      std::string::__init_copy_ctor_external(&v112, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
LABEL_127:
                      BOOL isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v113, (uint64_t)&v112);
                      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v112.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v114) & 0x80000000) == 0)
                        {
LABEL_129:
                          if (isDumpForSysdiagnose) {
                            goto LABEL_130;
                          }
                          goto LABEL_141;
                        }
                      }
                      else if ((SHIBYTE(v114) & 0x80000000) == 0)
                      {
                        goto LABEL_129;
                      }
                      operator delete(v113[0]);
                      if (isDumpForSysdiagnose)
                      {
LABEL_130:
                        unint64_t v84 = GetOsLogContext()[1];
                        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                        {
                          if ((v103->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v85 = v103;
                          }
                          else {
                            uint64_t v85 = (std::string *)v103->__r_.__value_.__r.__words[0];
                          }
                          LODWORD(__dst) = 136315138;
                          *(void *)((char *)&__dst + 4) = v85;
                          _os_log_impl(&dword_1B8B00000, v84, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
                        }
                        if (&v124 != v103)
                        {
                          char v86 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                          {
                            if (v86 >= 0) {
                              uint64_t v89 = v103;
                            }
                            else {
                              uint64_t v89 = (std::string *)v103->__r_.__value_.__r.__words[0];
                            }
                            if (v86 >= 0) {
                              size_t v90 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                            }
                            else {
                              size_t v90 = v103->__r_.__value_.__l.__size_;
                            }
                            std::string::__assign_no_alias<false>((void **)&v124.__r_.__value_.__l.__data_, v89, v90);
                          }
                          else
                          {
                            if ((*((unsigned char *)&v103->__r_.__value_.__s + 23) & 0x80) == 0)
                            {
                              std::string v124 = *v103;
LABEL_164:
                              int v61 = 0;
                              v103->__r_.__value_.__s.__data_[0] = 0;
                              *((unsigned char *)&v103->__r_.__value_.__s + 23) = 0;
                              goto LABEL_146;
                            }
                            std::string::__assign_no_alias<true>(&v124, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
                          }
                        }
                        if (SHIBYTE(v103->__r_.__value_.__r.__words[2]) < 0)
                        {
                          int v61 = 0;
                          *v103->__r_.__value_.__l.__data_ = 0;
                          v103->__r_.__value_.__l.__size_ = 0;
                          goto LABEL_146;
                        }
                        goto LABEL_164;
                      }
                      goto LABEL_141;
                    }
                  }
                  memcpy(v80, this, (size_t)v79);
                  *((unsigned char *)v79 + (void)v80) = 0;
                  if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_121;
                  }
                  goto LABEL_126;
                }
LABEL_141:
                int v61 = 2;
LABEL_146:
                char v87 = 1;
LABEL_147:
                BOOL v104 = v87;
                long long v62 = v115[0].__begin_;
                if (v115[0].__begin_) {
                  goto LABEL_148;
                }
                goto LABEL_149;
              }
            }
            do
            {
              char v77 = *v53++;
              *(unsigned char *)uint64_t v52 = v77;
              uint64_t v52 = (long long *)((char *)v52 + 1);
            }
            while (v53 != v49);
            goto LABEL_115;
          }
        }
        else
        {
          v142[7] = *(unsigned char *)p_i - (_BYTE)i;
          uint64_t v51 = &__dst;
          if (i != v49) {
            goto LABEL_74;
          }
        }
        *(unsigned char *)uint64_t v51 = 0;
        if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_101;
      }
LABEL_145:
      int v61 = 0;
      goto LABEL_146;
    }
    if (v34 >= 0) {
      uint64_t v35 = &v123;
    }
    int64_t v58 = strlen(v100);
    uint64_t v10 = v103;
    if (!v58)
    {
LABEL_144:
      std::string::__assign_external(&v124, v100);
      goto LABEL_145;
    }
    int64_t v59 = v58;
    int64_t v60 = v123.__r_.__value_.__l.__size_;
    if (v34 >= 0) {
      int64_t v60 = v33;
    }
    if (v60 >= v58)
    {
      uint64_t v69 = (char *)v35 + v60;
      int v70 = *v100;
      std::string v71 = v35;
      do
      {
        int64_t v72 = v60 - v59;
        if (v72 == -1) {
          break;
        }
        long long v73 = (char *)memchr(v71, v70, v72 + 1);
        if (!v73) {
          break;
        }
        unint64_t v74 = v73;
        if (!memcmp(v73, v100, v59))
        {
          char v87 = 0;
          if (v74 != v69)
          {
            int64_t v88 = v74 - (char *)v35;
            int v61 = 0;
            if (v88 == -1) {
              goto LABEL_147;
            }
            goto LABEL_144;
          }
          int v61 = 0;
          BOOL v104 = 0;
          long long v62 = v115[0].__begin_;
          if (v115[0].__begin_) {
            goto LABEL_148;
          }
          goto LABEL_149;
        }
        std::string v71 = (std::string *)(v74 + 1);
        int64_t v60 = v69 - (v74 + 1);
      }
      while (v60 >= v59);
    }
    int v61 = 0;
    BOOL v104 = 0;
    long long v62 = v115[0].__begin_;
    if (v115[0].__begin_)
    {
LABEL_148:
      v115[0].__end_ = v62;
      operator delete(v62);
    }
LABEL_149:
    if ((*((unsigned char *)&v123.__r_.__value_.__s + 23) & 0x80) != 0) {
      break;
    }
LABEL_150:
    if (v61 != 3) {
      goto LABEL_151;
    }
LABEL_33:
    v30 += 3;
    if (v30 == v102) {
      goto LABEL_166;
    }
  }
LABEL_106:
  operator delete(v123.__r_.__value_.__l.__data_);
  if (v61 == 3) {
    goto LABEL_33;
  }
LABEL_151:
  if (!v61) {
    goto LABEL_33;
  }
LABEL_166:
  unsigned int v8 = v98;
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_167;
  }
  operator delete(v124.__r_.__value_.__l.__data_);
  if (v98) {
    goto LABEL_168;
  }
LABEL_184:
  std::string v93 = (std::__shared_weak_count *)v134;
  if ((void)v134 && !atomic_fetch_add((atomic_ullong *volatile)(v134 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
    std::locale::~locale((std::locale *)v133);
    uint64_t v94 = (std::__shared_weak_count *)v136;
    if (!(void)v136) {
      goto LABEL_188;
    }
LABEL_187:
    if (atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_188;
    }
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
LABEL_189:
    }
      operator delete(v137[0]);
  }
  else
  {
    std::locale::~locale((std::locale *)v133);
    uint64_t v94 = (std::__shared_weak_count *)v136;
    if ((void)v136) {
      goto LABEL_187;
    }
LABEL_188:
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
      goto LABEL_189;
    }
  }
  long long v95 = v138;
  if (v138)
  {
    uint64_t v96 = v139;
    unint64_t v97 = v138;
    if (v139 != v138)
    {
      do
      {
        if (*((char *)v96 - 1) < 0) {
          operator delete((void *)*(v96 - 3));
        }
        v96 -= 3;
      }
      while (v96 != v95);
      unint64_t v97 = v138;
    }
    std::string v139 = v95;
    operator delete(v97);
  }
}

void sub_1B8B2E774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0) {
    operator delete(*(void **)a24);
  }
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  uint64_t v236 = *MEMORY[0x1E4F143B8];
  v224 = 0;
  v225 = 0;
  uint64_t v226 = 0;
  long long v221 = 0u;
  long long v222 = 0u;
  unint64_t v223 = 0xAAAAAAAA3F800000;
  size_t v4 = (char *)operator new(0x48uLL);
  unint64_t v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v219[32] = v6;
  long long v220 = v6;
  *(_OWORD *)v219 = v6;
  *(_OWORD *)&v219[16] = v6;
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  unint64_t v9 = v8 + 64;
  memset(__dst, 170, 24);
  uint64_t v197 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = *a2;
    }
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v11 = v9 | 7;
  }
  uint64_t v12 = v11 + 1;
  uint64_t v10 = operator new(v11 + 1);
  *(void *)&__dst[8] = v8 + 64;
  *(void *)&__dst[16] = v12 | 0x8000000000000000;
  *(void *)long long __dst = v10;
  if (v8) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v14 = &v10[v8];
  long long v15 = *(_OWORD *)v5;
  long long v16 = *((_OWORD *)v5 + 1);
  long long v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)uint64_t v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  long long v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__begin_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v219, (uint64_t)__p, 0);
  if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
  {
    operator delete(__p[0].__begin_);
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v217 = v20;
  long long v218 = v20;
  long long v216 = v20;
  *(_OWORD *)&v215[0].__locale_ = v20;
  int v21 = *((char *)a2 + 23);
  if (v21 >= 0) {
    size_t v22 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v22 = (size_t)a2[1];
  }
  unint64_t v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0) {
      __n128 v27 = a2;
    }
    else {
      __n128 v27 = *a2;
    }
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17) {
    uint64_t v25 = v23 | 7;
  }
  uint64_t v26 = v25 + 1;
  uint64_t v24 = operator new(v25 + 1);
  *(void *)&__dst[8] = v22 + 64;
  *(void *)&__dst[16] = v26 | 0x8000000000000000;
  *(void *)long long __dst = v24;
  if (v22) {
    goto LABEL_25;
  }
LABEL_29:
  unint64_t v28 = &v24[v22];
  long long v29 = *(_OWORD *)v5;
  long long v30 = *((_OWORD *)v5 + 1);
  long long v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)unint64_t v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  int v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__begin_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v215, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[0].__end_cap_.__value_) & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  operator delete(__p[0].__begin_);
  if ((__dst[23] & 0x80000000) != 0) {
    goto LABEL_36;
  }
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    std::string v214 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v208, (const std::locale *)v219);
  long long v209 = *(_OWORD *)&v219[8];
  long long v210 = *(_OWORD *)&v219[24];
  uint64_t v211 = *(void *)&v219[40];
  v212 = (std::__shared_weak_count *)v220;
  if ((void)v220) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v220 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v213 = *((void *)&v220 + 1);
  support::fs::getFilteredFiles((const char *)&v214, (uint64_t)&v208, (uint64_t)&v224, 0);
  int v34 = v212;
  if (v212 && !atomic_fetch_add(&v212->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    std::locale::~locale(&v208);
    if ((SHIBYTE(v214.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      int v36 = (std::sub_match<const char *> *)v224;
      uint64_t v35 = v225;
      if (v224 == v225) {
        goto LABEL_231;
      }
      goto LABEL_47;
    }
  }
  else
  {
    std::locale::~locale(&v208);
    if ((SHIBYTE(v214.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
  }
  operator delete(v214.__r_.__value_.__l.__data_);
  int v36 = (std::sub_match<const char *> *)v224;
  uint64_t v35 = v225;
  if (v224 == v225) {
    goto LABEL_231;
  }
LABEL_47:
  uint64_t v37 = &__dst[48];
  int64_t v38 = &v233;
  p_end_cap = &__p[1].__end_cap_;
  uint64_t v205 = &v228;
  v203 = (std::sub_match<const char *> *)&v222;
  v204 = v229;
  uint64_t v198 = (uint64_t *)&__dst[24];
  uint64_t v201 = &__dst[48];
  uint64_t v202 = v35;
  v199 = &__p[1].__end_cap_;
  v200 = &v233;
  while (2)
  {
    *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v233 = v40;
    long long v234 = v40;
    *(_OWORD *)&__dst[40] = v40;
    long long v232 = v40;
    *(void *)uint64_t v37 = 0;
    *((void *)v37 + 1) = 0;
    v37[16] = 0;
    *(void *)int64_t v38 = 0;
    *((void *)v38 + 1) = 0;
    *((unsigned char *)v38 + 16) = 0;
    BYTE8(v234) = 0;
    uint64_t v235 = 0;
    memset(__dst, 0, 41);
    *(_OWORD *)&p_end_cap[4].__value_ = v40;
    *(_OWORD *)&p_end_cap[6].__value_ = v40;
    *(_OWORD *)&p_end_cap->__value_ = v40;
    *(_OWORD *)&p_end_cap[2].__value_ = v40;
    int v41 = v205;
    *uint64_t v205 = 0;
    v41[1] = 0;
    *((unsigned char *)v41 + 16) = 0;
    int v42 = v204;
    void *v204 = 0;
    v42[1] = 0;
    *((unsigned char *)v42 + 16) = 0;
    v229[24] = 0;
    uint64_t v230 = 0;
    memset(__p, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v36->matched + 7);
    if ((char)second >= 0) {
      first = v36;
    }
    else {
      first = (std::sub_match<const char *> *)v36->first;
    }
    if ((char)second < 0) {
      second = v36->second;
    }
    int v45 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v215, first, (std::sub_match<const char *> *)&second[(void)first], __p, 0);
    uint64_t v46 = (const char *)*((unsigned __int8 *)&v36->matched + 7);
    if ((char)v46 >= 0) {
      uint64_t v47 = (uint64_t)v36;
    }
    else {
      uint64_t v47 = (uint64_t)v36->first;
    }
    if ((char)v46 < 0) {
      uint64_t v46 = v36->second;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v47, (std::sub_match<std::__wrap_iter<const char *>> *)&v46[v47], (uint64_t *)__p, 0);
    if (__p[0].__begin_)
    {
      __p[0].__end_ = __p[0].__begin_;
      operator delete(__p[0].__begin_);
    }
    unint64_t v48 = *(void **)__dst;
    if (!v45) {
      goto LABEL_229;
    }
    if (*(void *)&__dst[8] == *(void *)__dst) {
      std::string v49 = &__dst[40];
    }
    else {
      std::string v49 = (unsigned char *)(*(void *)__dst + 16);
    }
    if (!*v49)
    {
      long long v62 = 0;
      std::string v63 = 0;
      unint64_t v64 = 0;
      v206[0] = 0;
      v206[1] = 0;
      unint64_t v207 = 0;
      goto LABEL_87;
    }
    unint64_t v50 = v198;
    if (*(void *)&__dst[8] != *(void *)__dst) {
      unint64_t v50 = *(uint64_t **)__dst;
    }
    uint64_t v51 = *v50;
    uint64_t v52 = (char **)(*(void *)__dst + 8);
    if (*(void *)&__dst[8] == *(void *)__dst) {
      uint64_t v52 = (char **)&__dst[32];
    }
    uint64_t v53 = *v52;
    unint64_t v54 = (unint64_t)&(*v52)[-v51];
    if (v54 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v54 > 0x16)
    {
      uint64_t v65 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v54 | 7) != 0x17) {
        uint64_t v65 = v54 | 7;
      }
      uint64_t v66 = v65 + 1;
      unint64_t v55 = operator new(v65 + 1);
      v206[1] = (void *)v54;
      unint64_t v207 = v66 | 0x8000000000000000;
      v206[0] = v55;
      if ((char *)v51 != v53) {
        goto LABEL_73;
      }
LABEL_83:
      unint64_t v56 = v55;
      goto LABEL_86;
    }
    HIBYTE(v207) = *(unsigned char *)v52 - v51;
    unint64_t v55 = v206;
    if ((char *)v51 == v53) {
      goto LABEL_83;
    }
LABEL_73:
    if (v54 < 0x20 || (unint64_t)v55 - v51 < 0x20)
    {
      unint64_t v56 = v55;
      long long v57 = (char *)v51;
    }
    else
    {
      unint64_t v56 = (char *)v55 + (v54 & 0xFFFFFFFFFFFFFFE0);
      long long v57 = (char *)(v51 + (v54 & 0xFFFFFFFFFFFFFFE0));
      int64_t v58 = (long long *)(v51 + 16);
      int64_t v59 = v55 + 1;
      unint64_t v60 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v61 = *v58;
        *(v59 - 1) = *(v58 - 1);
        _OWORD *v59 = v61;
        v58 += 2;
        v59 += 2;
        v60 -= 32;
      }
      while (v60);
      if (v54 == (v54 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_86;
      }
    }
    do
    {
      char v67 = *v57++;
      *v56++ = v67;
    }
    while (v57 != v53);
LABEL_86:
    unsigned char *v56 = 0;
    unint64_t v64 = HIBYTE(v207);
    std::string v63 = (void **)v206[0];
    long long v62 = v206[1];
LABEL_87:
    if ((v64 & 0x80u) == 0) {
      unint64_t v68 = v206;
    }
    else {
      unint64_t v68 = v63;
    }
    if ((v64 & 0x80u) == 0) {
      unint64_t v69 = v64;
    }
    else {
      unint64_t v69 = (unint64_t)v62;
    }
    if (v69 > 0x20)
    {
      if (v69 <= 0x40)
      {
        if ((v64 & 0x80u) == 0) {
          std::string v63 = v206;
        }
        long long v73 = (char *)v63[3];
        uint64_t v74 = *(uint64_t *)((char *)v68 + v69 - 16);
        uint64_t v75 = (uint64_t)*v68 - 0x3C5A37A36834CED9 * v74 + 0xC3A5C85C97CB3127 * v69;
        uint64_t v76 = __ROR8__(&v73[v75], 52);
        size_t v78 = (char *)v63[1];
        char v77 = (char *)v63[2];
        long long v79 = &v78[v75];
        uint64_t v80 = __ROR8__(v79, 7);
        uint64_t v81 = &v77[(void)v79];
        uint64_t v82 = v80
            + __ROR8__((char *)*v68 - 0x3C5A37A36834CED9 * v74 + 0xC3A5C85C97CB3127 * v69, 37)
            + v76
            + __ROR8__(v81, 31);
        size_t v83 = &v77[*(void *)((char *)v68 + v69 - 32)];
        unint64_t v84 = &v73[*(void *)((char *)v68 + v69 - 8)];
        uint64_t v85 = __ROR8__(&v83[(void)v84], 52);
        uint64_t v86 = __ROR8__(v83, 37);
        char v87 = &v83[*(void *)((char *)v68 + v69 - 24)];
        uint64_t v88 = __ROR8__(v87, 7);
        uint64_t v89 = &v87[v74];
        size_t v90 = &v84[(void)v89];
        BOOL v91 = &v73[v86 + v88 + v85 + __ROR8__(v89, 31) + (void)v81];
        unint64_t v92 = 0x9AE16A3B2F90404FLL;
        unint64_t v93 = v82
            - 0x3C5A37A36834CED9
            * ((0xC3A5C85C97CB3127 * (void)&v90[v82] - 0x651E95C4D06FBFB1 * (void)v91) ^ ((0xC3A5C85C97CB3127
                                                                                                 * (unint64_t)&v90[v82]
                                                                                                 - 0x651E95C4D06FBFB1
                                                                                                 * (void)v91) >> 47));
        goto LABEL_105;
      }
      uint64_t v100 = *(uint64_t *)((char *)v68 + v69 - 48);
      uint64_t v101 = *(uint64_t *)((char *)v68 + v69 - 40);
      uint64_t v102 = *(uint64_t *)((char *)v68 + v69 - 24);
      uint64_t v103 = *(uint64_t *)((char *)v68 + v69 - 56);
      uint64_t v104 = *(uint64_t *)((char *)v68 + v69 - 16);
      uint64_t v105 = *(uint64_t *)((char *)v68 + v69 - 8);
      unint64_t v106 = v103 + v104;
      unint64_t v107 = 0x9DDFEA08EB382D69
           * (v102 ^ ((0x9DDFEA08EB382D69 * (v102 ^ (v100 + v69))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                             * (v102 ^ (v100 + v69))));
      unint64_t v108 = 0x9DDFEA08EB382D69 * (v107 ^ (v107 >> 47));
      std::string::size_type v109 = *(char **)((char *)v68 + v69 - 64) + v69;
      uint64_t v110 = &v109[v100 + v103];
      std::string v111 = &v110[v101];
      uint64_t v112 = (uint64_t)&v109[__ROR8__(v110, 44) + __ROR8__(&v109[v101 + v108], 21)];
      uint64_t v113 = *(uint64_t *)((char *)v68 + v69 - 32) + v103 + v104 - 0x4B6D499041670D8DLL;
      uint64_t v114 = v102 + v104 + v113;
      uint64_t v115 = v114 + v105;
      uint64_t v116 = __ROR8__(v114, 44) + v113 + __ROR8__(v113 + v101 + v105, 21);
      uint64_t v117 = v68 + 4;
      uint64_t v118 = (uint64_t)*v68 - 0x4B6D499041670D8DLL * v101;
      uint64_t v119 = -(uint64_t)((v69 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v120 = *(v117 - 3);
        long long v121 = &v111[v118 + v106 + v120];
        uint64_t v122 = v117[2];
        uint64_t v123 = v117[3];
        uint64_t v124 = v117[1];
        unint64_t v106 = (unint64_t)&v111[v124 + 0xB492B66FBE98F273 * __ROR8__(v106 + v112 + v122, 42)];
        uint64_t v125 = v108 + v115;
        uint64_t v126 = *(v117 - 2);
        uint64_t v127 = *(v117 - 1);
        uint64_t v128 = *(v117 - 4) - 0x4B6D499041670D8DLL * v112;
        uint64_t v129 = v128 + v115 + v127;
        uint64_t v130 = v128 + v120 + v126;
        std::string v111 = (char *)(v130 + v127);
        uint64_t v131 = __ROR8__(v130, 44) + v128;
        unint64_t v132 = (0xB492B66FBE98F273 * __ROR8__(v121, 37)) ^ v116;
        uint64_t v118 = 0xB492B66FBE98F273 * __ROR8__(v125, 33);
        uint64_t v112 = v131 + __ROR8__(v129 + v132, 21);
        uint64_t v133 = v118 + v116 + *v117;
        uint64_t v115 = v124 + v122 + v133 + v123;
        uint64_t v116 = __ROR8__(v124 + v122 + v133, 44) + v133 + __ROR8__(v106 + v126 + v133 + v123, 21);
        v117 += 8;
        unint64_t v108 = v132;
        v119 += 64;
      }
      while (v119);
      unint64_t v134 = 0x9DDFEA08EB382D69
           * (v116 ^ ((0x9DDFEA08EB382D69 * (v116 ^ v112)) >> 47) ^ (0x9DDFEA08EB382D69 * (v116 ^ v112)));
      unint64_t v135 = v118 - 0x622015F714C7D297 * (v134 ^ (v134 >> 47));
      unint64_t v136 = 0x9DDFEA08EB382D69
           * (v135 ^ (v132
                    - 0x4B6D499041670D8DLL * (v106 ^ (v106 >> 47))
                    - 0x622015F714C7D297
                    * ((0x9DDFEA08EB382D69
                      * (v115 ^ ((0x9DDFEA08EB382D69 * (v115 ^ (unint64_t)v111)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v115 ^ (unint64_t)v111)))) ^ ((0x9DDFEA08EB382D69 * (v115 ^ ((0x9DDFEA08EB382D69 * (v115 ^ (unint64_t)v111)) >> 47) ^ (0x9DDFEA08EB382D69 * (v115 ^ (unint64_t)v111)))) >> 47))));
      unint64_t v72 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v135 ^ (v136 >> 47) ^ v136)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v135 ^ (v136 >> 47) ^ v136)) >> 47));
    }
    else
    {
      if (v69 > 0x10)
      {
        unint64_t v94 = 0xB492B66FBE98F273 * (void)*v68;
        if ((v64 & 0x80u) == 0) {
          std::string v63 = v206;
        }
        unint64_t v95 = (unint64_t)v63[1];
        uint64_t v96 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)v68 + v69 - 8), 30)
            + __ROR8__(v94 - v95, 43)
            - 0x3C5A37A36834CED9 * *(void *)((char *)v68 + v69 - 16);
        unint64_t v97 = v94
            + v69
            + __ROR8__(v95 ^ 0xC949D7C7509E6557, 20)
            - 0x9AE16A3B2F90404FLL * *(void *)((char *)v68 + v69 - 8);
        unint64_t v98 = v96 ^ v97;
        unint64_t v92 = 0x9DDFEA08EB382D69;
        unint64_t v99 = v97 ^ ((0x9DDFEA08EB382D69 * v98) >> 47) ^ (0x9DDFEA08EB382D69 * v98);
        goto LABEL_104;
      }
      if (v69 >= 9)
      {
        uint64_t v70 = *(uint64_t *)((char *)v68 + v69 - 8);
        uint64_t v71 = __ROR8__(v70 + v69, v69);
        unint64_t v72 = (0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69
               * (v71 ^ ((0x9DDFEA08EB382D69 * (v71 ^ (unint64_t)*v68)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                         * (v71 ^ (unint64_t)*v68)))) ^ ((0x9DDFEA08EB382D69 * (v71 ^ ((0x9DDFEA08EB382D69 * (v71 ^ (unint64_t)*v68)) >> 47) ^ (0x9DDFEA08EB382D69 * (v71 ^ (unint64_t)*v68)))) >> 47))) ^ v70;
        goto LABEL_109;
      }
      if (v69 >= 4)
      {
        uint64_t v176 = *(unsigned int *)((char *)v68 + v69 - 4);
        unint64_t v92 = 0x9DDFEA08EB382D69;
        unint64_t v177 = 0x9DDFEA08EB382D69 * ((v69 + (8 * *(_DWORD *)v68)) ^ v176);
        unint64_t v99 = v176 ^ (v177 >> 47) ^ v177;
LABEL_104:
        unint64_t v93 = 0x9DDFEA08EB382D69 * v99;
LABEL_105:
        unint64_t v72 = (v93 ^ (v93 >> 47)) * v92;
        goto LABEL_109;
      }
      unint64_t v72 = 0x9AE16A3B2F90404FLL;
      if (v69)
      {
        unint64_t v179 = (0xC949D7C7509E6557 * (v69 + 4 * *((unsigned __int8 *)v68 + v69 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                           * (*(unsigned __int8 *)v68 | ((unint64_t)*((unsigned __int8 *)v68 + (v69 >> 1)) << 8)));
        unint64_t v72 = 0x9AE16A3B2F90404FLL * (v179 ^ (v179 >> 47));
      }
    }
LABEL_109:
    unint64_t v137 = *((void *)&v221 + 1);
    if (!*((void *)&v221 + 1))
    {
      unint64_t v139 = 0xAAAAAAAAAAAAAAAALL;
LABEL_152:
      __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAA01;
      CFMutableDictionaryRef v157 = (std::sub_match<const char *> *)operator new(0x28uLL);
      __p[0].__begin_ = v157;
      __p[0].__end_ = v203;
      v157->first = 0;
      v157->second = (const char *)v72;
      *(_OWORD *)&v157->matched = *(_OWORD *)v206;
      v157[1].second = (const char *)v207;
      v206[0] = 0;
      v206[1] = 0;
      unint64_t v207 = 0;
      float v158 = (float)(unint64_t)(*((void *)&v222 + 1) + 1);
      if (v137 && (float)(*(float *)&v223 * (float)v137) >= v158)
      {
        unint64_t v72 = v139;
        uint64_t v37 = v201;
        uint64_t v35 = v202;
        goto LABEL_217;
      }
      BOOL v159 = (v137 & (v137 - 1)) != 0;
      if (v137 < 3) {
        BOOL v159 = 1;
      }
      unint64_t v160 = v159 | (2 * v137);
      unint64_t v161 = vcvtps_u32_f32(v158 / *(float *)&v223);
      if (v160 <= v161) {
        size_t prime = v161;
      }
      else {
        size_t prime = v160;
      }
      if (prime == 1)
      {
        size_t prime = 2;
        uint64_t v37 = v201;
        uint64_t v35 = v202;
      }
      else
      {
        uint64_t v37 = v201;
        uint64_t v35 = v202;
        if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v137 = *((void *)&v221 + 1);
        }
      }
      if (prime <= v137)
      {
        if (prime >= v137) {
          goto LABEL_205;
        }
        unint64_t v173 = vcvtps_u32_f32((float)*((unint64_t *)&v222 + 1) / *(float *)&v223);
        if (v137 < 3 || (uint8x8_t v174 = (uint8x8_t)vcnt_s8((int8x8_t)v137), v174.i16[0] = vaddlv_u8(v174), v174.u32[0] > 1uLL))
        {
          unint64_t v173 = std::__next_prime(v173);
        }
        else
        {
          uint64_t v175 = 1 << -(char)__clz(v173 - 1);
          if (v173 >= 2) {
            unint64_t v173 = v175;
          }
        }
        if (prime <= v173) {
          size_t prime = v173;
        }
        if (prime >= v137)
        {
          unint64_t v137 = *((void *)&v221 + 1);
          uint64_t v181 = *((void *)&v221 + 1) - 1;
          if ((*((void *)&v221 + 1) & (*((void *)&v221 + 1) - 1)) != 0)
          {
LABEL_215:
            if (v72 >= v137) {
              v72 %= v137;
            }
LABEL_217:
            uint64_t v184 = v221;
            uint64_t v185 = *(std::sub_match<const char *> ***)(v221 + 8 * v72);
            if (v185)
            {
              v157->first = (const char *)*v185;
            }
            else
            {
              v157->first = (const char *)v222;
              *(void *)&long long v222 = v157;
              *(void *)(v184 + 8 * v72) = v203;
              if (!v157->first) {
                goto LABEL_226;
              }
              unint64_t v186 = *((void *)v157->first + 1);
              if ((v137 & (v137 - 1)) != 0)
              {
                if (v186 >= v137) {
                  v186 %= v137;
                }
              }
              else
              {
                v186 &= v137 - 1;
              }
              uint64_t v185 = (std::sub_match<const char *> **)(v221 + 8 * v186);
            }
            *uint64_t v185 = v157;
LABEL_226:
            ++*((void *)&v222 + 1);
            if ((v207 & 0x8000000000000000) != 0) {
              goto LABEL_227;
            }
            goto LABEL_228;
          }
LABEL_206:
          v72 &= v181;
          goto LABEL_217;
        }
        if (!prime)
        {
          uint64_t v180 = (void *)v221;
          *(void *)&long long v221 = 0;
          if (v180) {
            operator delete(v180);
          }
          unint64_t v137 = 0;
          *((void *)&v221 + 1) = 0;
          uint64_t v181 = -1;
          goto LABEL_206;
        }
      }
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v163 = operator new(8 * prime);
      CFMutableDictionaryRef v164 = (void *)v221;
      *(void *)&long long v221 = v163;
      if (v164) {
        operator delete(v164);
      }
      uint64_t v165 = 0;
      *((void *)&v221 + 1) = prime;
      do
        *(void *)(v221 + 8 * v165++) = 0;
      while (prime != v165);
      CFMutableDictionaryRef v166 = (void **)v222;
      if (!(void)v222)
      {
LABEL_214:
        unint64_t v137 = prime;
        uint64_t v181 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_215;
        }
        goto LABEL_206;
      }
      size_t v167 = *(void *)(v222 + 8);
      size_t v168 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v169 = v167 & v168;
        *(void *)(v221 + 8 * v169) = v203;
        for (std::__wrap_iter<const char *>::iterator_type i = *v166; *v166; std::__wrap_iter<const char *>::iterator_type i = *v166)
        {
          size_t v171 = i[1] & v168;
          if (v171 == v169)
          {
            CFMutableDictionaryRef v166 = (void **)i;
          }
          else if (*(void *)(v221 + 8 * v171))
          {
            char *v166 = (void *)*i;
            uint64_t v172 = 8 * v171;
            *std::__wrap_iter<const char *>::iterator_type i = **(void **)(v221 + v172);
            **(void **)(v221 + v172) = i;
          }
          else
          {
            *(void *)(v221 + 8 * v171) = v166;
            CFMutableDictionaryRef v166 = (void **)i;
            size_t v169 = v171;
          }
        }
        goto LABEL_214;
      }
      if (v167 < prime)
      {
        *(void *)(v221 + 8 * v167) = v203;
        uint64_t v178 = *v166;
        if (*v166) {
          goto LABEL_209;
        }
        goto LABEL_204;
      }
      v167 %= prime;
      *(void *)(v221 + 8 * v167) = v203;
      uint64_t v178 = *v166;
      if (!*v166)
      {
LABEL_204:
        unint64_t v137 = prime;
LABEL_205:
        uint64_t v181 = v137 - 1;
        if ((v137 & (v137 - 1)) != 0) {
          goto LABEL_215;
        }
        goto LABEL_206;
      }
      while (1)
      {
LABEL_209:
        size_t v183 = v178[1];
        if (v183 >= prime) {
          v183 %= prime;
        }
        if (v183 == v167) {
          goto LABEL_208;
        }
        if (*(void *)(v221 + 8 * v183))
        {
          char *v166 = (void *)*v178;
          uint64_t v182 = 8 * v183;
          *uint64_t v178 = **(void **)(v221 + v182);
          **(void **)(v221 + v182) = v178;
          uint64_t v178 = v166;
LABEL_208:
          CFMutableDictionaryRef v166 = (void **)v178;
          uint64_t v178 = (void *)*v178;
          if (!v178) {
            goto LABEL_214;
          }
        }
        else
        {
          *(void *)(v221 + 8 * v183) = v166;
          CFMutableDictionaryRef v166 = (void **)v178;
          uint64_t v178 = (void *)*v178;
          size_t v167 = v183;
          if (!v178) {
            goto LABEL_214;
          }
        }
      }
    }
    uint8x8_t v138 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v221 + 8));
    v138.i16[0] = vaddlv_u8(v138);
    if (v138.u32[0] > 1uLL)
    {
      unint64_t v139 = v72;
      if (v72 >= *((void *)&v221 + 1)) {
        unint64_t v139 = v72 % *((void *)&v221 + 1);
      }
    }
    else
    {
      unint64_t v139 = (*((void *)&v221 + 1) - 1) & v72;
    }
    uint64_t v140 = *(uint64_t ***)(v221 + 8 * v139);
    if (!v140) {
      goto LABEL_152;
    }
    uint64_t v141 = *v140;
    if (!*v140) {
      goto LABEL_152;
    }
    if (v138.u32[0] < 2uLL)
    {
      uint64_t v142 = *((void *)&v221 + 1) - 1;
      while (1)
      {
        uint64_t v148 = v141[1];
        if (v148 == v72)
        {
          uint64_t v149 = *((unsigned __int8 *)v141 + 39);
          if ((v149 & 0x80u) == 0) {
            uint64_t v150 = *((unsigned __int8 *)v141 + 39);
          }
          else {
            uint64_t v150 = v141[3];
          }
          if (v150 == v69)
          {
            uint64_t v151 = (const void **)(v141 + 2);
            if ((v149 & 0x80) != 0)
            {
              uint64_t v153 = v68;
              CFMutableDictionaryRef v154 = v68;
              uint64_t v155 = v142;
              int v156 = memcmp(*v151, v153, v141[3]);
              uint64_t v142 = v155;
              unint64_t v68 = v154;
              if (!v156) {
                goto LABEL_150;
              }
            }
            else
            {
              if (!*((unsigned char *)v141 + 39)) {
                goto LABEL_150;
              }
              CFDictionaryRef v152 = v68;
              while (*(unsigned __int8 *)v151 == *(unsigned __int8 *)v152)
              {
                uint64_t v151 = (const void **)((char *)v151 + 1);
                CFDictionaryRef v152 = (void **)((char *)v152 + 1);
                if (!--v149) {
                  goto LABEL_150;
                }
              }
            }
          }
        }
        else if ((v148 & v142) != v139)
        {
          goto LABEL_152;
        }
        uint64_t v141 = (uint64_t *)*v141;
        if (!v141) {
          goto LABEL_152;
        }
      }
    }
    while (1)
    {
      unint64_t v143 = v141[1];
      if (v143 == v72) {
        break;
      }
      if (v143 >= v137) {
        v143 %= v137;
      }
      if (v143 != v139) {
        goto LABEL_152;
      }
LABEL_120:
      uint64_t v141 = (uint64_t *)*v141;
      if (!v141) {
        goto LABEL_152;
      }
    }
    uint64_t v144 = *((unsigned __int8 *)v141 + 39);
    if ((v144 & 0x80u) == 0) {
      uint64_t v145 = *((unsigned __int8 *)v141 + 39);
    }
    else {
      uint64_t v145 = v141[3];
    }
    if (v145 != v69) {
      goto LABEL_120;
    }
    uint64_t v146 = (const void **)(v141 + 2);
    if ((v144 & 0x80) == 0)
    {
      if (!*((unsigned char *)v141 + 39)) {
        goto LABEL_150;
      }
      uint64_t v147 = v68;
      while (*(unsigned __int8 *)v146 == *(unsigned __int8 *)v147)
      {
        uint64_t v146 = (const void **)((char *)v146 + 1);
        uint64_t v147 = (void **)((char *)v147 + 1);
        if (!--v144) {
          goto LABEL_150;
        }
      }
      goto LABEL_120;
    }
    if (memcmp(*v146, v68, v141[3])) {
      goto LABEL_120;
    }
LABEL_150:
    uint64_t v37 = v201;
    uint64_t v35 = v202;
    if ((v64 & 0x80) != 0) {
LABEL_227:
    }
      operator delete(v206[0]);
LABEL_228:
    unint64_t v48 = *(void **)__dst;
    p_end_cap = v199;
    int64_t v38 = v200;
LABEL_229:
    if (v48)
    {
      *(void *)&__dst[8] = v48;
      operator delete(v48);
    }
    if (++v36 != v35) {
      continue;
    }
    break;
  }
LABEL_231:
  uint64_t v187 = *((void *)&v222 + 1);
  v188 = (std::__shared_weak_count *)v218;
  if ((void)v218 && !atomic_fetch_add((atomic_ullong *volatile)(v218 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
    std::__shared_weak_count::__release_weak(v188);
  }
  std::locale::~locale(v215);
  uint64_t v189 = (std::__shared_weak_count *)v220;
  if ((void)v220 && !atomic_fetch_add((atomic_ullong *volatile)(v220 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
    std::__shared_weak_count::__release_weak(v189);
  }
  std::locale::~locale((std::locale *)v219);
  operator delete(v197);
  uint64_t v190 = (void **)v222;
  if ((void)v222)
  {
    do
    {
      v196 = (void **)*v190;
      if (*((char *)v190 + 39) < 0) {
        operator delete(v190[2]);
      }
      operator delete(v190);
      uint64_t v190 = v196;
    }
    while (v196);
  }
  v191 = (void *)v221;
  *(void *)&long long v221 = 0;
  if (v191) {
    operator delete(v191);
  }
  dispatch_object_t v192 = (void **)v224;
  if (v224)
  {
    uint64_t v193 = (void **)v225;
    uint64_t v194 = v224;
    if (v225 != v224)
    {
      do
      {
        if (*((char *)v193 - 1) < 0) {
          operator delete(*(v193 - 3));
        }
        v193 -= 3;
      }
      while (v193 != v192);
      uint64_t v194 = v224;
    }
    v225 = (std::sub_match<const char *> *)v192;
    operator delete(v194);
  }
  return v187;
}

void sub_1B8B2FD20(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_1B8B2FD28()
{
}

void sub_1B8B2FD50(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  long long v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      long long v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v87 = 0xAAAAAAAAAAAAAA00;
  v84[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  long long v90 = v5;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  LOBYTE(v90) = 0;
  BYTE8(v90) = 0;
  uint64_t v91 = 0;
  memset(v84, 0, 41);
  long long v82 = v5;
  long long v83 = v5;
  *(_OWORD *)&v80[0].__locale_ = v5;
  long long v81 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v80, a3, 0);
  char v77 = 0;
  size_t v78 = 0;
  unint64_t v79 = 0;
  tm __p = 0;
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v95 = 0xAAAAAAAAAAAAAA00;
  v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  long long v98 = v6;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  LOBYTE(v98) = 0;
  BYTE8(v98) = 0;
  uint64_t v99 = 0;
  memset(v92, 0, 32);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0) {
    size_t v8 = (std::sub_match<const char *> *)a1;
  }
  else {
    size_t v8 = *(std::sub_match<const char *> **)a1;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v92, 0);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v92, 0);
  if (v92[0].__begin_)
  {
    v92[0].__end_ = v92[0].__begin_;
    operator delete(v92[0].__begin_);
  }
  if (v9)
  {
    std::vector<std::ssub_match>::pointer end = v84[0].__end_;
    std::vector<std::ssub_match>::pointer begin = v84[0].__begin_;
    if (v84[0].__begin_ != v84[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v92, 0, 24);
          uint64_t v25 = v78;
          if ((unint64_t)v78 >= v79) {
            goto LABEL_38;
          }
          goto LABEL_16;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        std::__wrap_iter<const char *>::iterator_type v15 = begin->second.__i_;
        unint64_t v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v17 > 0x16)
        {
          uint64_t v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v26 = v17 | 7;
          }
          uint64_t v27 = v26 + 1;
          long long v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v92[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v92[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            uint64_t v25 = v78;
            if ((unint64_t)v78 >= v79) {
              goto LABEL_38;
            }
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          long long v18 = (std::sub_match<const char *> *)v92;
          if (i == v15) {
            goto LABEL_33;
          }
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20) {
          break;
        }
        long long v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        long long v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        int v21 = (long long *)(i + 16);
        p_matched = &v18->matched;
        unint64_t v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_36;
        }
LABEL_37:
        LOBYTE(v19->first) = 0;
        uint64_t v25 = v78;
        if ((unint64_t)v78 >= v79)
        {
LABEL_38:
          size_t v78 = std::vector<std::string>::__push_back_slow_path<std::string>(&v77, (uint64_t)v92);
          if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
            operator delete(v92[0].__begin_);
          }
          goto LABEL_17;
        }
LABEL_16:
        long long v14 = *(_OWORD *)&v92[0].__begin_;
        *((void *)v25 + 2) = v92[0].__end_cap_.__value_;
        *(_OWORD *)uint64_t v25 = v14;
        size_t v78 = v25 + 24;
LABEL_17:
        if (++begin == end) {
          goto LABEL_40;
        }
      }
      long long v19 = v18;
      long long v20 = i;
      do
      {
LABEL_36:
        char v28 = *v20++;
        LOBYTE(v19->first) = v28;
        long long v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    long long v29 = (char *)v77;
    long long v30 = v78;
    if (v78 - (unsigned char *)v77 != 24)
    {
      if ((char *)v77 + 24 != v78)
      {
        long long v31 = (char *)v77 + 23;
        do
        {
          int v32 = (void **)(v31 - 23);
          if (*v31 < 0) {
            operator delete(*v32);
          }
          *(_OWORD *)int v32 = *(_OWORD *)(v31 + 1);
          *(void *)(v31 - 7) = *(void *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        long long v30 = v78;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0) {
          operator delete(*((void **)v30 - 3));
        }
        v30 -= 24;
      }
      size_t v78 = v29;
    }
    *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v95 = 0xAAAAAAAAAAAAAA00;
    v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    long long v98 = v33;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    LOBYTE(v98) = 0;
    BYTE8(v98) = 0;
    uint64_t v99 = 0;
    memset(v92, 0, 32);
    uint64_t v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0) {
      uint64_t v35 = (std::sub_match<const char *> *)a2;
    }
    else {
      uint64_t v35 = *(std::sub_match<const char *> **)a2;
    }
    if ((v34 & 0x80u) != 0) {
      uint64_t v34 = *(void *)(a2 + 8);
    }
    *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
    int v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v92, 0);
    uint64_t v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0) {
      uint64_t v38 = a2;
    }
    else {
      uint64_t v38 = *(void *)a2;
    }
    if ((v37 & 0x80u) != 0) {
      uint64_t v37 = *(void *)(a2 + 8);
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v92, 0);
    if (v92[0].__begin_)
    {
      v92[0].__end_ = v92[0].__begin_;
      operator delete(v92[0].__begin_);
    }
    if (v36)
    {
      std::vector<std::ssub_match>::pointer v40 = v84[0].__end_;
      std::vector<std::ssub_match>::pointer v39 = v84[0].__begin_;
      if (v84[0].__begin_ != v84[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v92, 0, 24);
            uint64_t v52 = v75;
            if ((unint64_t)v75 >= v76) {
              goto LABEL_89;
            }
            goto LABEL_67;
          }
          std::__wrap_iter<const char *>::iterator_type v43 = v39->first.__i_;
          std::__wrap_iter<const char *>::iterator_type v42 = v39->second.__i_;
          unint64_t v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v44 > 0x16)
          {
            uint64_t v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17) {
              uint64_t v53 = v44 | 7;
            }
            uint64_t v54 = v53 + 1;
            int v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v92[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v92[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              uint64_t v52 = v75;
              if ((unint64_t)v75 >= v76) {
                goto LABEL_89;
              }
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            int v45 = (std::sub_match<const char *> *)v92;
            if (v43 == v42) {
              goto LABEL_84;
            }
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20) {
            break;
          }
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          unint64_t v48 = (long long *)(v43 + 16);
          std::string v49 = &v45->matched;
          unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)std::string v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_87;
          }
LABEL_88:
          LOBYTE(v46->first) = 0;
          uint64_t v52 = v75;
          if ((unint64_t)v75 >= v76)
          {
LABEL_89:
            uint64_t v75 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v92);
            if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
              operator delete(v92[0].__begin_);
            }
            goto LABEL_68;
          }
LABEL_67:
          long long v41 = *(_OWORD *)&v92[0].__begin_;
          *((void *)v52 + 2) = v92[0].__end_cap_.__value_;
          *(_OWORD *)uint64_t v52 = v41;
          uint64_t v75 = v52 + 24;
LABEL_68:
          if (++v39 == v40) {
            goto LABEL_91;
          }
        }
        uint64_t v46 = v45;
        uint64_t v47 = v43;
        do
        {
LABEL_87:
          char v55 = *v47++;
          LOBYTE(v46->first) = v55;
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      long long v57 = (char *)__p;
      unint64_t v56 = v75;
      if (v75 - (unsigned char *)__p == 24)
      {
        int64_t v58 = (char *)v77;
        int64_t v59 = v78;
        uint64_t v60 = 1;
        if (v77 != v78) {
          goto LABEL_117;
        }
LABEL_105:
        if (v57) {
          goto LABEL_106;
        }
LABEL_134:
        unint64_t v64 = (char *)v77;
        if (v77) {
          goto LABEL_135;
        }
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v75)
      {
        long long v61 = (char *)__p + 23;
        do
        {
          long long v62 = (void **)(v61 - 23);
          if (*v61 < 0) {
            operator delete(*v62);
          }
          *(_OWORD *)long long v62 = *(_OWORD *)(v61 + 1);
          *(void *)(v61 - 7) = *(void *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        unint64_t v56 = v75;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0) {
          operator delete(*((void **)v56 - 3));
        }
        v56 -= 24;
      }
      uint64_t v75 = v57;
      long long v57 = (char *)__p;
      int64_t v58 = (char *)v77;
      int64_t v59 = v78;
      uint64_t v60 = 1;
      if (v77 == v78) {
        goto LABEL_105;
      }
      while (1)
      {
LABEL_117:
        uint64_t v66 = v58[23];
        if ((v66 & 0x80u) == 0) {
          uint64_t v67 = v58[23];
        }
        else {
          uint64_t v67 = *((void *)v58 + 1);
        }
        uint64_t v68 = v57[23];
        int v69 = (char)v68;
        if ((v68 & 0x80u) != 0) {
          uint64_t v68 = *((void *)v57 + 1);
        }
        if (v67 != v68) {
          break;
        }
        if (v69 >= 0) {
          uint64_t v70 = v57;
        }
        else {
          uint64_t v70 = *(char **)v57;
        }
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((void *)v58 + 1))) {
            break;
          }
        }
        else if (v58[23])
        {
          uint64_t v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71) {
              goto LABEL_116;
            }
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59) {
          goto LABEL_133;
        }
      }
    }
  }
  uint64_t v60 = 0;
LABEL_133:
  long long v57 = (char *)__p;
  if (!__p) {
    goto LABEL_134;
  }
LABEL_106:
  std::string v63 = v75;
  if (v75 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0) {
        operator delete(*((void **)v63 - 3));
      }
      v63 -= 24;
    }
    while (v63 != v57);
    uint64_t v75 = v57;
    operator delete(__p);
    unint64_t v64 = (char *)v77;
    if (v77) {
      goto LABEL_135;
    }
LABEL_108:
    uint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  uint64_t v75 = v57;
  operator delete(v57);
  unint64_t v64 = (char *)v77;
  if (!v77) {
    goto LABEL_108;
  }
LABEL_135:
  unint64_t v72 = v78;
  if (v78 == v64)
  {
    size_t v78 = v64;
    operator delete(v64);
    uint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0) {
      operator delete(*((void **)v72 - 3));
    }
    v72 -= 24;
  }
  while (v72 != v64);
  size_t v78 = v64;
  operator delete(v77);
  uint64_t v65 = (std::__shared_weak_count *)v83;
  if ((void)v83)
  {
LABEL_142:
    if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_144:
  std::locale::~locale(v80);
  if (v84[0].__begin_)
  {
    v84[0].__end_ = v84[0].__begin_;
    operator delete(v84[0].__begin_);
  }
  return v60;
}

void sub_1B8B305C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(void *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  if (!__n) {
    return;
  }
  int v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    long long v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = size - __pos;
    }
    if (size - __pos <= __n) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    long long v6 = this;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    }
    if (v7 <= __n) {
      goto LABEL_8;
    }
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((unsigned char *)&this->__r_.__value_.__s + 23);
LABEL_8:
  std::string::size_type v9 = size - v8;
  if ((v4 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = v9;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  }
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    long long v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      int v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(unint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
LABEL_1:
  uint64_t v268 = a2 - 3;
  v271 = a2;
  v260 = a2 - 9;
  uint64_t v261 = a2 - 6;
  unint64_t k = a1;
  while (1)
  {
    a1 = k;
    uint64_t v11 = (uint64_t)a2 - k;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - k) >> 3);
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v119 = (__n128 *)(a2 - 3);
          int v120 = *((char *)a2 - 1);
          if (v120 >= 0) {
            long long v121 = a2 - 3;
          }
          else {
            long long v121 = (const void **)*(a2 - 3);
          }
          if (v120 >= 0) {
            size_t v122 = *((unsigned __int8 *)a2 - 1);
          }
          else {
            size_t v122 = (size_t)*(a2 - 2);
          }
          int v123 = *(char *)(a1 + 23);
          uint64_t v124 = *(void **)a1;
          uint64_t v125 = *(const void **)(a1 + 8);
          if (v123 >= 0) {
            uint64_t v126 = (const void *)a1;
          }
          else {
            uint64_t v126 = *(const void **)a1;
          }
          if (v123 >= 0) {
            size_t v127 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v127 = *(void *)(a1 + 8);
          }
          if (v127 >= v122) {
            size_t v128 = v122;
          }
          else {
            size_t v128 = v127;
          }
          int v129 = memcmp(v121, v126, v128);
          if (v129)
          {
            if (v129 < 0) {
              return result;
            }
          }
          else if (v122 <= v127)
          {
            return result;
          }
          v258 = *(const void **)(a1 + 16);
          uint64_t v259 = (uint64_t)*(a2 - 1);
          BOOL result = *v119;
          *(__n128 *)a1 = *v119;
          *(void *)(a1 + 16) = v259;
          *(a2 - 3) = v124;
          *(a2 - 2) = v125;
          *(a2 - 1) = v258;
          break;
        case 3uLL:
          result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v268).n128_u64[0];
          return result;
        case 4uLL:
          result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v268).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v268).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 575)
    {
      if (a4)
      {
        if ((const void **)a1 == a2) {
          return result;
        }
        uint64_t v130 = (const void *)(a1 + 24);
        if ((const void **)(a1 + 24) == a2) {
          return result;
        }
        uint64_t v131 = 0;
        unint64_t v132 = a1;
        while (2)
        {
          unint64_t v134 = (__n128 *)v132;
          unint64_t v132 = (unint64_t)v130;
          int v135 = v134[2].n128_i8[15];
          if (v135 >= 0) {
            unint64_t v136 = v130;
          }
          else {
            unint64_t v136 = (const void *)v134[1].n128_u64[1];
          }
          if (v135 >= 0) {
            size_t v137 = v134[2].n128_u8[15];
          }
          else {
            size_t v137 = v134[2].n128_u64[0];
          }
          int v138 = v134[1].n128_i8[7];
          if (v138 >= 0) {
            unint64_t v139 = v134;
          }
          else {
            unint64_t v139 = (__n128 *)v134->n128_u64[0];
          }
          if (v138 >= 0) {
            size_t v140 = v134[1].n128_u8[7];
          }
          else {
            size_t v140 = v134->n128_u64[1];
          }
          if (v140 >= v137) {
            size_t v141 = v137;
          }
          else {
            size_t v141 = v140;
          }
          int v142 = memcmp(v136, v139, v141);
          if (v142)
          {
            if (v142 < 0)
            {
LABEL_266:
              uint64_t v130 = (const void *)(v132 + 24);
              v131 += 24;
              if ((const void **)(v132 + 24) == v271) {
                return result;
              }
              continue;
            }
          }
          else if (v137 <= v140)
          {
            goto LABEL_266;
          }
          break;
        }
        __n128 v143 = *(__n128 *)v132;
        int64_t v274 = *(void *)(v132 + 16);
        __n128 v273 = v143;
        if (v274 >= 0) {
          uint64_t v144 = &v273;
        }
        else {
          uint64_t v144 = (__n128 *)v143.n128_u64[0];
        }
        if (v274 >= 0) {
          size_t v145 = HIBYTE(v274);
        }
        else {
          size_t v145 = v143.n128_u64[1];
        }
        *(void *)(v132 + 16) = v134[1].n128_u64[0];
        *(__n128 *)unint64_t v132 = *v134;
        v134[1].n128_u8[7] = 0;
        v134->n128_u8[0] = 0;
        uint64_t v133 = (__n128 *)a1;
        if (v134 != (__n128 *)a1)
        {
          uint64_t v146 = v131;
          while (1)
          {
            uint64_t v147 = a1 + v146;
            int v148 = *(char *)(a1 + v146 - 1);
            if (v148 >= 0) {
              uint64_t v149 = (const void *)(a1 + v146 - 24);
            }
            else {
              uint64_t v149 = *(const void **)(a1 + v146 - 24);
            }
            if (v148 >= 0) {
              size_t v150 = *(unsigned __int8 *)(a1 + v146 - 1);
            }
            else {
              size_t v150 = *(void *)(a1 + v146 - 16);
            }
            if (v150 >= v145) {
              size_t v151 = v145;
            }
            else {
              size_t v151 = v150;
            }
            int v152 = memcmp(v144, v149, v151);
            if (v152)
            {
              if (v152 < 0)
              {
                uint64_t v133 = (__n128 *)(a1 + v146);
                break;
              }
            }
            else if (v145 <= v150)
            {
              uint64_t v133 = v134;
              break;
            }
            unint64_t v134 = (__n128 *)((char *)v134 - 24);
            *(_OWORD *)uint64_t v147 = *(_OWORD *)(a1 + v146 - 24);
            *(void *)(v147 + 16) = *(void *)(a1 + v146 - 8);
            *(unsigned char *)(v147 - 1) = 0;
            *(unsigned char *)(v147 - 24) = 0;
            v146 -= 24;
            if (!v146)
            {
              uint64_t v133 = (__n128 *)a1;
              break;
            }
          }
        }
        BOOL result = v273;
        v133[1].n128_u64[0] = v274;
        *uint64_t v133 = result;
        goto LABEL_266;
      }
      if ((const void **)a1 == a2) {
        return result;
      }
      v239 = (const void *)(a1 + 24);
      if ((const void **)(a1 + 24) == a2) {
        return result;
      }
LABEL_478:
      v240 = (const void **)a1;
      a1 = (unint64_t)v239;
      int v241 = *((char *)v240 + 47);
      if (v241 >= 0) {
        v242 = v239;
      }
      else {
        v242 = v240[3];
      }
      if (v241 >= 0) {
        size_t v243 = *((unsigned __int8 *)v240 + 47);
      }
      else {
        size_t v243 = (size_t)v240[4];
      }
      int v244 = *((char *)v240 + 23);
      if (v244 >= 0) {
        v245 = v240;
      }
      else {
        v245 = *v240;
      }
      if (v244 >= 0) {
        size_t v246 = *((unsigned __int8 *)v240 + 23);
      }
      else {
        size_t v246 = (size_t)v240[1];
      }
      if (v246 >= v243) {
        size_t v247 = v243;
      }
      else {
        size_t v247 = v246;
      }
      int v248 = memcmp(v242, v245, v247);
      if (v248)
      {
        if (v248 < 0) {
          goto LABEL_477;
        }
      }
      else if (v243 <= v246)
      {
        goto LABEL_477;
      }
      __n128 v249 = *(__n128 *)a1;
      int64_t v274 = *(void *)(a1 + 16);
      __n128 v273 = v249;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      if (v274 >= 0) {
        v250 = &v273;
      }
      else {
        v250 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v251 = HIBYTE(v274);
      }
      else {
        size_t v251 = v273.n128_u64[1];
      }
      for (unint64_t i = a1; ; i -= 24)
      {
        *(_OWORD *)unint64_t i = *(_OWORD *)(i - 24);
        *(void *)(i + 16) = *(void *)(i - 8);
        *(unsigned char *)(i - 1) = 0;
        *(unsigned char *)(i - 24) = 0;
        int v253 = *(char *)(i - 25);
        if (v253 >= 0) {
          v254 = (const void *)(i - 48);
        }
        else {
          v254 = *(const void **)(i - 48);
        }
        if (v253 >= 0) {
          size_t v255 = *(unsigned __int8 *)(i - 25);
        }
        else {
          size_t v255 = *(void *)(i - 40);
        }
        if (v255 >= v251) {
          size_t v256 = v251;
        }
        else {
          size_t v256 = v255;
        }
        int v257 = memcmp(v250, v254, v256);
        if (v257)
        {
          if (v257 < 0)
          {
LABEL_476:
            BOOL result = v273;
            *(void *)(i - 8) = v274;
            *(__n128 *)(i - 24) = result;
LABEL_477:
            v239 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2) {
              return result;
            }
            goto LABEL_478;
          }
        }
        else if (v251 <= v255)
        {
          goto LABEL_476;
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = a1 + 24 * (v12 >> 1);
    if ((unint64_t)v11 < 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v14, a1, v268);
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0)
      {
LABEL_10:
        int v19 = *(char *)(a1 - 1);
        if (v19 >= 0) {
          long long v20 = (const void *)(a1 - 24);
        }
        else {
          long long v20 = *(const void **)(a1 - 24);
        }
        if (v19 >= 0) {
          size_t v21 = *(unsigned __int8 *)(a1 - 1);
        }
        else {
          size_t v21 = *(void *)(a1 - 16);
        }
        int v22 = *(char *)(a1 + 23);
        if (v22 >= 0) {
          unint64_t v23 = (const void *)a1;
        }
        else {
          unint64_t v23 = *(const void **)a1;
        }
        if (v22 >= 0) {
          size_t v24 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v24 = *(void *)(a1 + 8);
        }
        if (v24 >= v21) {
          size_t v25 = v21;
        }
        else {
          size_t v25 = v24;
        }
        int v26 = memcmp(v20, v23, v25);
        if (v26)
        {
          if (v26 < 0) {
            goto LABEL_125;
          }
        }
        else if (v21 <= v24)
        {
LABEL_125:
          __n128 v72 = *(__n128 *)a1;
          int64_t v274 = *(void *)(a1 + 16);
          __n128 v273 = v72;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          long long v73 = a2;
          if (v274 >= 0) {
            uint64_t v74 = &v273;
          }
          else {
            uint64_t v74 = (__n128 *)v273.n128_u64[0];
          }
          if (v274 >= 0) {
            size_t v75 = HIBYTE(v274);
          }
          else {
            size_t v75 = v273.n128_u64[1];
          }
          size_t v76 = *((unsigned __int8 *)v73 - 1);
          size_t v78 = (const void **)*(v73 - 3);
          char v77 = *(v73 - 2);
          if ((v76 & 0x80u) == 0) {
            unint64_t v79 = v268;
          }
          else {
            unint64_t v79 = (const void **)*(v73 - 3);
          }
          if ((v76 & 0x80u) == 0) {
            size_t v80 = *((unsigned __int8 *)v73 - 1);
          }
          else {
            size_t v80 = (size_t)*(v73 - 2);
          }
          if (v80 >= v75) {
            size_t v81 = v75;
          }
          else {
            size_t v81 = v80;
          }
          int v82 = memcmp(v74, v79, v81);
          if (v82)
          {
            if ((v82 & 0x80000000) == 0)
            {
LABEL_142:
              unint64_t v83 = a1 + 24;
              do
              {
                while (1)
                {
                  unint64_t k = v83;
                  uint64_t v84 = *(unsigned __int8 *)(v83 + 23);
                  uint64_t v85 = (v84 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                  size_t v86 = (v84 & 0x80u) == 0 ? v84 : *(void *)(k + 8);
                  size_t v87 = v86 >= v75 ? v75 : v86;
                  int v88 = memcmp(v74, v85, v87);
                  unint64_t v83 = k + 24;
                  if (v88) {
                    break;
                  }
                  if (v75 > v86) {
                    goto LABEL_155;
                  }
                }
              }
              while (v88 < 0);
LABEL_155:
              unint64_t j = v271;
              if (k < (unint64_t)v271)
              {
                for (j = v268; ; char v77 = j[1])
                {
                  if ((v76 & 0x80u) == 0) {
                    uint64_t v91 = j;
                  }
                  else {
                    uint64_t v91 = v78;
                  }
                  if ((v76 & 0x80u) == 0) {
                    size_t v92 = v76;
                  }
                  else {
                    size_t v92 = (size_t)v77;
                  }
                  if (v92 >= v75) {
                    size_t v93 = v75;
                  }
                  else {
                    size_t v93 = v92;
                  }
                  int v94 = memcmp(v74, v91, v93);
                  if (v94)
                  {
                    if (v94 < 0) {
                      break;
                    }
                  }
                  else if (v75 <= v92)
                  {
                    break;
                  }
                  long long v90 = (const void **)*(j - 3);
                  j -= 3;
                  size_t v78 = v90;
                  size_t v76 = *((unsigned __int8 *)j + 23);
                }
              }
              if (k < (unint64_t)j)
              {
                unint64_t v95 = *(const void **)k;
                do
                {
                  long long v96 = *(_OWORD *)(k + 8);
                  long long v97 = *(_OWORD *)j;
                  *(void *)(k + 16) = j[2];
                  *(_OWORD *)unint64_t k = v97;
                  *unint64_t j = v95;
                  *(_OWORD *)(j + 1) = v96;
                  if (v274 >= 0) {
                    long long v98 = &v273;
                  }
                  else {
                    long long v98 = (__n128 *)v273.n128_u64[0];
                  }
                  if (v274 >= 0) {
                    unint64_t v99 = HIBYTE(v274);
                  }
                  else {
                    unint64_t v99 = v273.n128_u64[1];
                  }
                  unint64_t v100 = k + 24;
                  do
                  {
                    while (1)
                    {
                      unint64_t k = v100;
                      uint64_t v101 = *(unsigned __int8 *)(v100 + 23);
                      unint64_t v95 = *(const void **)k;
                      uint64_t v102 = (v101 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                      unint64_t v103 = (v101 & 0x80u) == 0 ? v101 : *(void *)(k + 8);
                      size_t v104 = v103 >= v99 ? v99 : v103;
                      int v105 = memcmp(v98, v102, v104);
                      unint64_t v100 = k + 24;
                      if (v105) {
                        break;
                      }
                      if (v99 > v103) {
                        goto LABEL_192;
                      }
                    }
                  }
                  while (v105 < 0);
LABEL_192:
                  unint64_t v106 = j - 3;
                  do
                  {
                    while (1)
                    {
                      unint64_t j = v106;
                      unint64_t v107 = (const void *)*((unsigned __int8 *)v106 + 23);
                      unint64_t v108 = (char)v107 >= 0 ? j : (const void **)*j;
                      std::string::size_type v109 = (char)v107 >= 0 ? v107 : j[1];
                      size_t v110 = (unint64_t)v109 >= v99 ? v99 : (size_t)v109;
                      int v111 = memcmp(v98, v108, v110);
                      unint64_t v106 = j - 3;
                      if (v111) {
                        break;
                      }
                      if (v99 <= (unint64_t)v109) {
                        goto LABEL_172;
                      }
                    }
                  }
                  while ((v111 & 0x80000000) == 0);
LABEL_172:
                  ;
                }
                while (k < (unint64_t)j);
              }
              uint64_t v112 = (__n128 *)(k - 24);
              BOOL v5 = k - 24 >= a1;
              BOOL v6 = k - 24 == a1;
              if (k - 24 == a1)
              {
                a2 = v271;
                a3 = v265;
                if (*(char *)(k - 1) < 0) {
                  operator delete(*(void **)a1);
                }
              }
              else
              {
                if (*(char *)(a1 + 23) < 0) {
                  operator delete(*(void **)a1);
                }
                __n128 v113 = *v112;
                *(void *)(a1 + 16) = *(void *)(k - 8);
                *(__n128 *)a1 = v113;
                *(unsigned char *)(k - 1) = 0;
                *(unsigned char *)(k - 24) = 0;
                a2 = v271;
                a3 = v265;
              }
              a4 = 0;
              BOOL result = v273;
              *(void *)(k - 8) = v274;
              *uint64_t v112 = result;
              continue;
            }
          }
          else if (v75 > v80)
          {
            goto LABEL_142;
          }
          for (unint64_t k = a1 + 24; k < (unint64_t)v271; k += 24)
          {
            int v114 = *(char *)(k + 23);
            if (v114 >= 0) {
              uint64_t v115 = (const void *)k;
            }
            else {
              uint64_t v115 = *(const void **)k;
            }
            if (v114 >= 0) {
              size_t v116 = *(unsigned __int8 *)(k + 23);
            }
            else {
              size_t v116 = *(void *)(k + 8);
            }
            if (v116 >= v75) {
              size_t v117 = v75;
            }
            else {
              size_t v117 = v116;
            }
            int v118 = memcmp(v74, v115, v117);
            if (v118)
            {
              if ((v118 & 0x80000000) == 0) {
                goto LABEL_155;
              }
            }
            else if (v75 > v116)
            {
              goto LABEL_155;
            }
          }
          goto LABEL_155;
        }
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v14, v268);
      uint64_t v15 = 24 * v13;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v15 + a1 - 24, v261);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v15, v260);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v15 + a1 - 24, v14, (const void **)(a1 + 24 + v15));
      long long v16 = *(void **)a1;
      long long v17 = *(_OWORD *)(a1 + 8);
      long long v18 = *(_OWORD *)v14;
      *(void *)(a1 + 16) = *(void *)(v14 + 16);
      *(_OWORD *)a1 = v18;
      *(void *)uint64_t v14 = v16;
      *(_OWORD *)(v14 + 8) = v17;
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v27 = 0;
    __n128 v28 = *(__n128 *)a1;
    int64_t v274 = *(void *)(a1 + 16);
    __n128 v273 = v28;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    if (v274 >= 0) {
      long long v29 = &v273;
    }
    else {
      long long v29 = (__n128 *)v273.n128_u64[0];
    }
    if (v274 >= 0) {
      unint64_t v30 = HIBYTE(v274);
    }
    else {
      unint64_t v30 = v273.n128_u64[1];
    }
    while (1)
    {
      long long v31 = *(const void **)(a1 + v27 + 24);
      int v32 = *(char *)(a1 + v27 + 47);
      long long v33 = v32 >= 0 ? (const void *)(a1 + v27 + 24) : *(const void **)(a1 + v27 + 24);
      unint64_t v34 = v32 >= 0 ? *(unsigned __int8 *)(a1 + v27 + 47) : *(void *)(a1 + v27 + 32);
      size_t v35 = v30 >= v34 ? v34 : v30;
      int v36 = memcmp(v33, v29, v35);
      if (v36) {
        break;
      }
      if (v34 <= v30) {
        goto LABEL_46;
      }
LABEL_34:
      v27 += 24;
    }
    if ((v36 & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_46:
    unint64_t v37 = a1 + v27 + 24;
    uint64_t v38 = v268;
    if (v27)
    {
      do
      {
        while (1)
        {
          std::vector<std::ssub_match>::pointer v39 = v38;
          uint64_t v46 = (const void *)*((unsigned __int8 *)v38 + 23);
          uint64_t v47 = (char)v46 >= 0 ? v39 : (const void **)*v39;
          unint64_t v48 = (unint64_t)((char)v46 >= 0 ? v46 : v39[1]);
          size_t v49 = v30 >= v48 ? v48 : v30;
          int v50 = memcmp(v47, v29, v49);
          uint64_t v38 = v39 - 3;
          if (v50) {
            break;
          }
          if (v48 > v30) {
            goto LABEL_77;
          }
        }
      }
      while (v50 < 0);
    }
    else
    {
      std::vector<std::ssub_match>::pointer v39 = v271;
      if (v37 < (unint64_t)v271)
      {
        std::vector<std::ssub_match>::pointer v40 = v268;
        do
        {
          while (1)
          {
            std::vector<std::ssub_match>::pointer v39 = v40;
            long long v41 = (const void *)*((unsigned __int8 *)v40 + 23);
            std::__wrap_iter<const char *>::iterator_type v42 = (char)v41 >= 0 ? v39 : (const void **)*v39;
            unint64_t v43 = (unint64_t)((char)v41 >= 0 ? v41 : v39[1]);
            size_t v44 = v30 >= v43 ? v43 : v30;
            int v45 = memcmp(v42, v29, v44);
            std::vector<std::ssub_match>::pointer v40 = v39 - 3;
            if (!v45) {
              break;
            }
            if (v37 >= (unint64_t)v39 || (v45 & 0x80000000) == 0) {
              goto LABEL_77;
            }
          }
        }
        while (v37 < (unint64_t)v39 && v43 <= v30);
      }
    }
LABEL_77:
    if (v37 >= (unint64_t)v39)
    {
      unint64_t k = v37;
    }
    else
    {
      long long v51 = v39;
      unint64_t k = v37;
      do
      {
        long long v52 = *(_OWORD *)(k + 8);
        long long v53 = *(_OWORD *)v51;
        *(void *)(k + 16) = v51[2];
        *(_OWORD *)unint64_t k = v53;
        long long *v51 = v31;
        *(_OWORD *)(v51 + 1) = v52;
        if (v274 >= 0) {
          uint64_t v54 = &v273;
        }
        else {
          uint64_t v54 = (__n128 *)v273.n128_u64[0];
        }
        if (v274 >= 0) {
          unint64_t v55 = HIBYTE(v274);
        }
        else {
          unint64_t v55 = v273.n128_u64[1];
        }
        unint64_t v56 = k + 24;
        do
        {
          while (1)
          {
            unint64_t k = v56;
            uint64_t v57 = *(unsigned __int8 *)(v56 + 23);
            long long v31 = *(const void **)k;
            int64_t v58 = (v57 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
            unint64_t v59 = (v57 & 0x80u) == 0 ? v57 : *(void *)(k + 8);
            size_t v60 = v55 >= v59 ? v59 : v55;
            int v61 = memcmp(v58, v54, v60);
            unint64_t v56 = k + 24;
            if (v61) {
              break;
            }
            if (v59 <= v55) {
              goto LABEL_99;
            }
          }
        }
        while ((v61 & 0x80000000) == 0);
LABEL_99:
        long long v62 = v51 - 3;
        do
        {
          while (1)
          {
            long long v51 = v62;
            std::string v63 = (const void *)*((unsigned __int8 *)v62 + 23);
            unint64_t v64 = (char)v63 >= 0 ? v51 : (const void **)*v51;
            unint64_t v65 = (unint64_t)((char)v63 >= 0 ? v63 : v51[1]);
            size_t v66 = v55 >= v65 ? v65 : v55;
            int v67 = memcmp(v64, v54, v66);
            long long v62 = v51 - 3;
            if (v67) {
              break;
            }
            if (v65 > v55) {
              goto LABEL_79;
            }
          }
        }
        while (v67 < 0);
LABEL_79:
        ;
      }
      while (k < (unint64_t)v51);
    }
    uint64_t v68 = (__n128 *)(k - 24);
    if (k - 24 == a1)
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(k - 1) < 0) {
        operator delete(*(void **)a1);
      }
    }
    else
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 v69 = *v68;
      *(void *)(a1 + 16) = *(void *)(k - 8);
      *(__n128 *)a1 = v69;
      *(unsigned char *)(k - 1) = 0;
      *(unsigned char *)(k - 24) = 0;
    }
    __n128 v70 = v273;
    *(void *)(k - 8) = v274;
    __n128 *v68 = v70;
    if (v37 < (unint64_t)v39)
    {
LABEL_123:
      std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, k - 24, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      BOOL v71 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(k - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(k, a2))
      {
        a2 = (const void **)(k - 24);
        if (v71) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v71) {
        goto LABEL_123;
      }
    }
  }
  if ((const void **)a1 == a2) {
    return result;
  }
  int64_t v153 = (v12 - 2) >> 1;
  int64_t v154 = v153;
  while (2)
  {
    int64_t v156 = v154;
    if (v153 >= v154)
    {
      uint64_t v157 = (2 * v154) | 1;
      unint64_t v158 = a1 + 24 * v157;
      uint64_t v159 = 2 * v154 + 2;
      if (v159 >= (uint64_t)v12) {
        goto LABEL_337;
      }
      unint64_t v160 = (const void **)(v158 + 24);
      int v161 = *(char *)(v158 + 23);
      if (v161 >= 0) {
        CFMutableDictionaryRef v162 = (const void *)(a1 + 24 * v157);
      }
      else {
        CFMutableDictionaryRef v162 = *(const void **)v158;
      }
      if (v161 >= 0) {
        size_t v163 = *(unsigned __int8 *)(v158 + 23);
      }
      else {
        size_t v163 = *(void *)(v158 + 8);
      }
      int v164 = *(char *)(v158 + 47);
      if (v164 >= 0) {
        uint64_t v165 = (const void *)(v158 + 24);
      }
      else {
        uint64_t v165 = *(const void **)(v158 + 24);
      }
      if (v164 >= 0) {
        size_t v166 = *(unsigned __int8 *)(v158 + 47);
      }
      else {
        size_t v166 = *(void *)(v158 + 32);
      }
      if (v166 >= v163) {
        size_t v167 = v163;
      }
      else {
        size_t v167 = v166;
      }
      int v168 = memcmp(v162, v165, v167);
      if (v168)
      {
        a2 = v271;
        if (v168 < 0)
        {
LABEL_337:
          unint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
        }
      }
      else
      {
        BOOL v169 = v163 >= v166;
        if (v163 == v166)
        {
          unint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
          a2 = v271;
        }
        else
        {
          a2 = v271;
          if (!v169) {
            goto LABEL_337;
          }
        }
      }
      unint64_t v170 = a1 + 24 * v156;
      int v171 = *((char *)v160 + 23);
      if (v171 >= 0) {
        uint64_t v172 = v160;
      }
      else {
        uint64_t v172 = *v160;
      }
      if (v171 >= 0) {
        size_t v173 = *((unsigned __int8 *)v160 + 23);
      }
      else {
        size_t v173 = (size_t)v160[1];
      }
      int v174 = *(char *)(v170 + 23);
      if (v174 >= 0) {
        uint64_t v175 = (const void *)(a1 + 24 * v156);
      }
      else {
        uint64_t v175 = *(const void **)v170;
      }
      if (v174 >= 0) {
        size_t v176 = *(unsigned __int8 *)(v170 + 23);
      }
      else {
        size_t v176 = *(void *)(v170 + 8);
      }
      if (v176 >= v173) {
        size_t v177 = v173;
      }
      else {
        size_t v177 = v176;
      }
      int v178 = memcmp(v172, v175, v177);
      if (v178)
      {
        int64_t v153 = (v12 - 2) >> 1;
        if (v178 < 0)
        {
LABEL_357:
          __n128 v180 = *(__n128 *)v170;
          int64_t v274 = *(void *)(v170 + 16);
          __n128 v273 = v180;
          *(void *)(v170 + 8) = 0;
          *(void *)(v170 + 16) = 0;
          *(void *)unint64_t v170 = 0;
          long long v181 = *(_OWORD *)v160;
          *(void *)(v170 + 16) = v160[2];
          *(_OWORD *)unint64_t v170 = v181;
          *((unsigned char *)v160 + 23) = 0;
          *(unsigned char *)unint64_t v160 = 0;
          if (v153 >= v159)
          {
            unint64_t v182 = HIBYTE(v274);
            size_t v183 = &v273;
            if (v274 < 0)
            {
              unint64_t v182 = v273.n128_u64[1];
              size_t v183 = (__n128 *)v273.n128_u64[0];
            }
            size_t v263 = v182;
            uint64_t v266 = v183;
            int64_t v269 = v156;
            while (1)
            {
              uint64_t v185 = (2 * v159) | 1;
              unint64_t v186 = a1 + 24 * v185;
              uint64_t v159 = 2 * v159 + 2;
              if (v159 >= (uint64_t)v12) {
                goto LABEL_385;
              }
              uint64_t v155 = (const void **)(v186 + 24);
              int v187 = *(char *)(v186 + 23);
              v188 = v187 >= 0 ? (const void *)(a1 + 24 * v185) : *(const void **)v186;
              unint64_t v189 = v187 >= 0 ? *(unsigned __int8 *)(v186 + 23) : *(void *)(v186 + 8);
              int v190 = *(char *)(v186 + 47);
              v191 = v190 >= 0 ? (const void *)(v186 + 24) : *(const void **)(v186 + 24);
              unint64_t v192 = v190 >= 0 ? *(unsigned __int8 *)(v186 + 47) : *(void *)(v186 + 32);
              size_t v193 = v192 >= v189 ? v189 : v192;
              int v194 = memcmp(v188, v191, v193);
              if (v194) {
                break;
              }
              BOOL v195 = v189 >= v192;
              if (v189 == v192)
              {
                uint64_t v155 = (const void **)(a1 + 24 * v185);
                uint64_t v159 = v185;
                a2 = v271;
                int64_t v153 = (v12 - 2) >> 1;
                goto LABEL_386;
              }
              a2 = v271;
              int64_t v153 = (v12 - 2) >> 1;
              if (!v195) {
                goto LABEL_385;
              }
LABEL_386:
              int v196 = *((char *)v155 + 23);
              if (v196 >= 0) {
                uint64_t v197 = v155;
              }
              else {
                uint64_t v197 = *v155;
              }
              if (v196 >= 0) {
                size_t v198 = *((unsigned __int8 *)v155 + 23);
              }
              else {
                size_t v198 = (size_t)v155[1];
              }
              if (v263 >= v198) {
                size_t v199 = v198;
              }
              else {
                size_t v199 = v263;
              }
              int v200 = memcmp(v197, v266, v199);
              if (v200)
              {
                int64_t v156 = v269;
                if ((v200 & 0x80000000) == 0) {
                  goto LABEL_311;
                }
              }
              else
              {
                int64_t v156 = v269;
                if (v198 > v263) {
                  goto LABEL_311;
                }
              }
              long long v184 = *(_OWORD *)v155;
              v160[2] = v155[2];
              *(_OWORD *)unint64_t v160 = v184;
              *((unsigned char *)v155 + 23) = 0;
              *(unsigned char *)uint64_t v155 = 0;
              unint64_t v160 = v155;
              if (v153 < v159) {
                goto LABEL_312;
              }
            }
            a2 = v271;
            int64_t v153 = (v12 - 2) >> 1;
            if ((v194 & 0x80000000) == 0) {
              goto LABEL_386;
            }
LABEL_385:
            uint64_t v155 = (const void **)(a1 + 24 * v185);
            uint64_t v159 = v185;
            goto LABEL_386;
          }
LABEL_311:
          uint64_t v155 = v160;
LABEL_312:
          BOOL result = v273;
          v155[2] = (const void *)v274;
          *(__n128 *)uint64_t v155 = result;
        }
      }
      else
      {
        BOOL v179 = v173 > v176;
        int64_t v153 = (v12 - 2) >> 1;
        if (!v179) {
          goto LABEL_357;
        }
      }
    }
    int64_t v154 = v156 - 1;
    if (v156) {
      continue;
    }
    break;
  }
  int64_t v201 = v11 / 0x18uLL;
  do
  {
    if (v201 < 2) {
      goto LABEL_400;
    }
    uint64_t v202 = 0;
    uint64_t v270 = *(void **)a1;
    uint64_t v272 = a2;
    v264 = *(const void **)(a1 + 16);
    v267 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    unint64_t v203 = a1;
    *(void *)a1 = 0;
    do
    {
      uint64_t v205 = v203 + 24 * v202 + 24;
      uint64_t v206 = (2 * v202) | 1;
      uint64_t v202 = 2 * v202 + 2;
      if (v202 < v201)
      {
        v204 = (__n128 *)(v205 + 24);
        int v207 = *(char *)(v205 + 23);
        if (v207 >= 0) {
          std::locale v208 = (const void *)v205;
        }
        else {
          std::locale v208 = *(const void **)v205;
        }
        if (v207 >= 0) {
          size_t v209 = *(unsigned __int8 *)(v205 + 23);
        }
        else {
          size_t v209 = *(void *)(v205 + 8);
        }
        int v210 = *(char *)(v205 + 47);
        if (v210 >= 0) {
          uint64_t v211 = (const void *)(v205 + 24);
        }
        else {
          uint64_t v211 = *(const void **)(v205 + 24);
        }
        if (v210 >= 0) {
          size_t v212 = *(unsigned __int8 *)(v205 + 47);
        }
        else {
          size_t v212 = *(void *)(v205 + 32);
        }
        if (v212 >= v209) {
          size_t v213 = v209;
        }
        else {
          size_t v213 = v212;
        }
        int v214 = memcmp(v208, v211, v213);
        if (v214)
        {
          if ((v214 & 0x80000000) == 0) {
            goto LABEL_424;
          }
        }
        else if (v209 != v212 && v209 >= v212)
        {
LABEL_424:
          if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
            goto LABEL_405;
          }
          goto LABEL_425;
        }
      }
      v204 = (__n128 *)v205;
      uint64_t v202 = v206;
      if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
        goto LABEL_405;
      }
LABEL_425:
      operator delete(*(void **)v203);
LABEL_405:
      BOOL result = *v204;
      *(void *)(v203 + 16) = v204[1].n128_u64[0];
      *(__n128 *)unint64_t v203 = result;
      v204[1].n128_u8[7] = 0;
      v204->n128_u8[0] = 0;
      unint64_t v203 = (unint64_t)v204;
    }
    while (v202 <= (uint64_t)((unint64_t)(v201 - 2) >> 1));
    if (v204 == (__n128 *)(a2 - 3))
    {
      v204->n128_u64[0] = (unint64_t)v270;
      v204->n128_u64[1] = (unint64_t)v267;
      v204[1].n128_u64[0] = (unint64_t)v264;
      goto LABEL_400;
    }
    BOOL result = *(__n128 *)(a2 - 3);
    v204[1].n128_u64[0] = (unint64_t)*(a2 - 1);
    __n128 *v204 = result;
    *(a2 - 3) = v270;
    *(a2 - 2) = v267;
    *(a2 - 1) = v264;
    uint64_t v215 = (uint64_t)&v204[1].n128_i64[1] - a1;
    if (v215 >= 25)
    {
      unint64_t v216 = v215 / 0x18uLL - 2;
      unint64_t v217 = v216 >> 1;
      unint64_t v218 = a1 + 24 * (v216 >> 1);
      int v219 = *(char *)(v218 + 23);
      if (v219 >= 0) {
        long long v220 = (const void *)(a1 + 24 * (v216 >> 1));
      }
      else {
        long long v220 = *(const void **)v218;
      }
      if (v219 >= 0) {
        size_t v221 = *(unsigned __int8 *)(v218 + 23);
      }
      else {
        size_t v221 = *(void *)(v218 + 8);
      }
      int v222 = v204[1].n128_i8[7];
      if (v222 >= 0) {
        unint64_t v223 = v204;
      }
      else {
        unint64_t v223 = (__n128 *)v204->n128_u64[0];
      }
      if (v222 >= 0) {
        size_t v224 = v204[1].n128_u8[7];
      }
      else {
        size_t v224 = v204->n128_u64[1];
      }
      if (v224 >= v221) {
        size_t v225 = v221;
      }
      else {
        size_t v225 = v224;
      }
      int v226 = memcmp(v220, v223, v225);
      if (v226)
      {
        if (v226 < 0) {
          goto LABEL_400;
        }
      }
      else if (v221 <= v224)
      {
        goto LABEL_400;
      }
      __n128 v227 = *v204;
      int64_t v274 = v204[1].n128_i64[0];
      __n128 v273 = v227;
      v204->n128_u64[1] = 0;
      v204[1].n128_u64[0] = 0;
      v204->n128_u64[0] = 0;
      if (v274 >= 0) {
        uint64_t v228 = &v273;
      }
      else {
        uint64_t v228 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v229 = HIBYTE(v274);
      }
      else {
        size_t v229 = v273.n128_u64[1];
      }
      __n128 v230 = *(__n128 *)v218;
      v204[1].n128_u64[0] = *(void *)(v218 + 16);
      __n128 *v204 = v230;
      *(unsigned char *)(v218 + 23) = 0;
      *(unsigned char *)unint64_t v218 = 0;
      if (v216 >= 2)
      {
        while (1)
        {
          unint64_t v232 = v217 - 1;
          unint64_t v217 = (v217 - 1) >> 1;
          unint64_t v233 = a1 + 24 * v217;
          int v234 = *(char *)(v233 + 23);
          if (v234 >= 0) {
            uint64_t v235 = (const void *)(a1 + 24 * v217);
          }
          else {
            uint64_t v235 = *(const void **)v233;
          }
          if (v234 >= 0) {
            size_t v236 = *(unsigned __int8 *)(v233 + 23);
          }
          else {
            size_t v236 = *(void *)(v233 + 8);
          }
          if (v229 >= v236) {
            size_t v237 = v236;
          }
          else {
            size_t v237 = v229;
          }
          int v238 = memcmp(v235, v228, v237);
          if (v238)
          {
            if (v238 < 0) {
              break;
            }
          }
          else if (v236 <= v229)
          {
            break;
          }
          long long v231 = *(_OWORD *)v233;
          *(void *)(v218 + 16) = *(void *)(v233 + 16);
          *(_OWORD *)unint64_t v218 = v231;
          *(unsigned char *)(v233 + 23) = 0;
          *(unsigned char *)unint64_t v233 = 0;
          unint64_t v218 = a1 + 24 * v217;
          if (v232 <= 1) {
            goto LABEL_472;
          }
        }
      }
      unint64_t v233 = v218;
LABEL_472:
      BOOL result = v273;
      *(void *)(v233 + 16) = v274;
      *(__n128 *)unint64_t v233 = result;
      a2 = v272;
    }
LABEL_400:
    a2 -= 3;
    BOOL v179 = (unint64_t)v201-- > 2;
  }
  while (v179);
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6 = *(char *)(a2 + 23);
  std::string::size_type v7 = *(const void **)a2;
  std::string::size_type v8 = *(const void **)(a2 + 8);
  if (v6 >= 0) {
    std::string::size_type v9 = (const void *)a2;
  }
  else {
    std::string::size_type v9 = *(const void **)a2;
  }
  if (v6 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  int v11 = *(char *)(a1 + 23);
  unint64_t v13 = *(const void **)a1;
  unint64_t v12 = *(const void **)(a1 + 8);
  if (v11 >= 0) {
    uint64_t v14 = (const void *)a1;
  }
  else {
    uint64_t v14 = *(const void **)a1;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v15 = *(void *)(a1 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if (v10 > v15)
  {
LABEL_18:
    int v18 = *((char *)a3 + 23);
    if (v18 >= 0) {
      int v19 = a3;
    }
    else {
      int v19 = *a3;
    }
    if (v18 >= 0) {
      size_t v20 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v20 = (size_t)a3[1];
    }
    if (v10 >= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v10;
    }
    int v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        unint64_t v23 = *(const void **)(a1 + 16);
        size_t v24 = a3[2];
        __n128 result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(void *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v32;
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v31;
    int v33 = *((char *)a3 + 23);
    if (v33 >= 0) {
      unint64_t v34 = a3;
    }
    else {
      unint64_t v34 = *a3;
    }
    if (v33 >= 0) {
      size_t v35 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v35 = (size_t)a3[1];
    }
    if (v31 >= 0) {
      int v36 = (const void *)a2;
    }
    else {
      int v36 = v13;
    }
    if (v31 >= 0) {
      size_t v37 = HIBYTE(v31);
    }
    else {
      size_t v37 = (size_t)v12;
    }
    if (v37 >= v35) {
      size_t v38 = v35;
    }
    else {
      size_t v38 = v37;
    }
    int v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0) {
        return result;
      }
    }
    else if (v35 <= v37)
    {
      return result;
    }
    __n128 result = *(__n128 *)a3;
    *(void *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  int v26 = *((char *)a3 + 23);
  if (v26 >= 0) {
    uint64_t v27 = a3;
  }
  else {
    uint64_t v27 = *a3;
  }
  if (v26 >= 0) {
    size_t v28 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v28 = (size_t)a3[1];
  }
  if (v10 >= v28) {
    size_t v29 = v28;
  }
  else {
    size_t v29 = v10;
  }
  int v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v28 <= v10)
  {
    return result;
  }
  std::vector<std::ssub_match>::pointer v40 = *(const void **)(a2 + 16);
  long long v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  int v42 = *(char *)(a2 + 23);
  if (v42 >= 0) {
    unint64_t v43 = (const void *)a2;
  }
  else {
    unint64_t v43 = *(const void **)a2;
  }
  if (v42 >= 0) {
    size_t v44 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v44 = *(void *)(a2 + 8);
  }
  int v45 = *(char *)(a1 + 23);
  uint64_t v46 = *(const void **)a1;
  uint64_t v47 = *(void *)(a1 + 8);
  if (v45 >= 0) {
    unint64_t v48 = (const void *)a1;
  }
  else {
    unint64_t v48 = *(const void **)a1;
  }
  if (v45 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v49 = *(void *)(a1 + 8);
  }
  if (v49 >= v44) {
    size_t v50 = v44;
  }
  else {
    size_t v50 = v49;
  }
  int v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49) {
      return result;
    }
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    uint64_t v52 = *(void *)(a1 + 16);
    uint64_t v53 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v53;
    *(void *)a2 = v46;
    *(void *)(a2 + 8) = v47;
    *(void *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  long long v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = a2 - 3;
      int v7 = *((char *)a2 - 1);
      if (v7 >= 0) {
        std::string::size_type v8 = a2 - 3;
      }
      else {
        std::string::size_type v8 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      int v10 = *(char *)(a1 + 23);
      int v11 = *(const void **)a1;
      unint64_t v12 = *(const void **)(a1 + 8);
      if (v10 >= 0) {
        unint64_t v13 = (const void *)a1;
      }
      else {
        unint64_t v13 = *(const void **)a1;
      }
      if (v10 >= 0) {
        size_t v14 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v14 = *(void *)(a1 + 8);
      }
      if (v14 >= v9) {
        size_t v15 = v9;
      }
      else {
        size_t v15 = v14;
      }
      int v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0) {
          return 1;
        }
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      long long v41 = *(const void **)(a1 + 16);
      uint64_t v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(void *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      int v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      int v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      unint64_t v43 = v2;
      break;
  }
  while (2)
  {
    int v23 = *((char *)v18 + 23);
    if (v23 >= 0) {
      size_t v24 = v18;
    }
    else {
      size_t v24 = *v18;
    }
    if (v23 >= 0) {
      size_t v25 = *((unsigned __int8 *)v18 + 23);
    }
    else {
      size_t v25 = (size_t)v18[1];
    }
    int v26 = *((char *)v17 + 23);
    if (v26 >= 0) {
      uint64_t v27 = v17;
    }
    else {
      uint64_t v27 = *v17;
    }
    if (v26 >= 0) {
      size_t v28 = *((unsigned __int8 *)v17 + 23);
    }
    else {
      size_t v28 = (size_t)v17[1];
    }
    if (v28 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v28;
    }
    int v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0) {
        goto LABEL_25;
      }
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    long long v44 = *(_OWORD *)v18;
    int v45 = v18[2];
    *(_OWORD *)int v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((unsigned char *)v17 + 23) = 0;
    *(unsigned char *)int v17 = 0;
    uint64_t v21 = a1;
    if (v17 == (const void **)a1) {
      goto LABEL_24;
    }
    uint64_t v31 = v19;
    while (1)
    {
      uint64_t v32 = a1 + v31;
      int v33 = (_OWORD *)(a1 + v31 + 24);
      unint64_t v34 = SHIBYTE(v45) >= 0 ? &v44 : (long long *)v44;
      unint64_t v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((void *)&v44 + 1);
      int v36 = *(char *)(v32 + 47);
      size_t v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      unint64_t v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(void *)(v32 + 32);
      size_t v39 = v38 >= v35 ? v35 : v38;
      int v40 = memcmp(v34, v37, v39);
      if (!v40) {
        break;
      }
      if (v40 < 0)
      {
        uint64_t v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(void *)(v32 + 64) = *(void *)(a1 + v31 + 40);
      *(unsigned char *)(v32 + 47) = 0;
      *(unsigned char *)int v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        uint64_t v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38) {
      goto LABEL_48;
    }
    uint64_t v21 = a1 + v31 + 48;
LABEL_23:
    long long v2 = v43;
LABEL_24:
    long long v22 = v44;
    *(void *)(v21 + 16) = v45;
    *(_OWORD *)uint64_t v21 = v22;
    if (++v20 == 8) {
      return v18 + 3 == v2;
    }
LABEL_25:
    int v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2) {
      continue;
    }
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  int v8 = *((char *)a4 + 23);
  if (v8 >= 0) {
    size_t v9 = a4;
  }
  else {
    size_t v9 = *a4;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  int v11 = *(char *)(a3 + 23);
  unint64_t v12 = *(const void **)a3;
  unint64_t v13 = *(const void **)(a3 + 8);
  if (v11 >= 0) {
    size_t v14 = (const void *)a3;
  }
  else {
    size_t v14 = *(const void **)a3;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v15 = *(void *)(a3 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0) {
      return result;
    }
  }
  else if (v10 <= v15)
  {
    return result;
  }
  uint64_t v19 = *(const void **)(a3 + 16);
  int v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  int v21 = *(char *)(a3 + 23);
  if (v21 >= 0) {
    long long v22 = (const void *)a3;
  }
  else {
    long long v22 = *(const void **)a3;
  }
  if (v21 >= 0) {
    size_t v23 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v23 = *(void *)(a3 + 8);
  }
  int v24 = *(char *)(a2 + 23);
  size_t v25 = *(const void **)a2;
  uint64_t v26 = *(void *)(a2 + 8);
  if (v24 >= 0) {
    uint64_t v27 = (const void *)a2;
  }
  else {
    uint64_t v27 = *(const void **)a2;
  }
  if (v24 >= 0) {
    size_t v28 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v28 = *(void *)(a2 + 8);
  }
  if (v28 >= v23) {
    size_t v29 = v23;
  }
  else {
    size_t v29 = v28;
  }
  int v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v23 <= v28)
  {
    return result;
  }
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v32;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v26;
  *(void *)(a3 + 16) = v31;
  int v33 = *(char *)(a2 + 23);
  if (v33 >= 0) {
    unint64_t v34 = (const void *)a2;
  }
  else {
    unint64_t v34 = *(const void **)a2;
  }
  if (v33 >= 0) {
    size_t v35 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v35 = *(void *)(a2 + 8);
  }
  int v36 = *(char *)(a1 + 23);
  size_t v37 = *(const void **)a1;
  uint64_t v38 = *(void *)(a1 + 8);
  if (v36 >= 0) {
    size_t v39 = (const void *)a1;
  }
  else {
    size_t v39 = *(const void **)a1;
  }
  if (v36 >= 0) {
    size_t v40 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v40 = *(void *)(a1 + 8);
  }
  if (v40 >= v35) {
    size_t v41 = v35;
  }
  else {
    size_t v41 = v40;
  }
  int v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40) {
      return result;
    }
LABEL_58:
    uint64_t v43 = *(void *)(a1 + 16);
    uint64_t v44 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v44;
    *(void *)a2 = v37;
    *(void *)(a2 + 8) = v38;
    *(void *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0) {
    goto LABEL_58;
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *(char *)(a4 + 23);
  size_t v14 = *(const void **)a4;
  size_t v15 = *(const void **)(a4 + 8);
  if (v13 >= 0) {
    size_t v16 = (const void *)a4;
  }
  else {
    size_t v16 = *(const void **)a4;
  }
  if (v13 >= 0) {
    size_t v17 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v17 = *(void *)(a4 + 8);
  }
  if (v17 >= v12) {
    size_t v18 = v12;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0) {
      return result;
    }
  }
  else if (v12 <= v17)
  {
    return result;
  }
  int v21 = *(const void **)(a4 + 16);
  long long v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(void *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  int v23 = *(char *)(a4 + 23);
  if (v23 >= 0) {
    int v24 = (const void *)a4;
  }
  else {
    int v24 = *(const void **)a4;
  }
  if (v23 >= 0) {
    size_t v25 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v25 = *(void *)(a4 + 8);
  }
  int v26 = *(char *)(a3 + 23);
  uint64_t v27 = *(const void **)a3;
  uint64_t v28 = *(void *)(a3 + 8);
  if (v26 >= 0) {
    size_t v29 = (const void *)a3;
  }
  else {
    size_t v29 = *(const void **)a3;
  }
  if (v26 >= 0) {
    size_t v30 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v30 = *(void *)(a3 + 8);
  }
  if (v30 >= v25) {
    size_t v31 = v25;
  }
  else {
    size_t v31 = v30;
  }
  int v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0) {
      return result;
    }
  }
  else if (v25 <= v30)
  {
    return result;
  }
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v34 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v34;
  *(void *)a4 = v27;
  *(void *)(a4 + 8) = v28;
  *(void *)(a4 + 16) = v33;
  int v35 = *(char *)(a3 + 23);
  if (v35 >= 0) {
    int v36 = (const void *)a3;
  }
  else {
    int v36 = *(const void **)a3;
  }
  if (v35 >= 0) {
    size_t v37 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v37 = *(void *)(a3 + 8);
  }
  int v38 = *(char *)(a2 + 23);
  size_t v39 = *(const void **)a2;
  uint64_t v40 = *(void *)(a2 + 8);
  if (v38 >= 0) {
    size_t v41 = (const void *)a2;
  }
  else {
    size_t v41 = *(const void **)a2;
  }
  if (v38 >= 0) {
    size_t v42 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v42 = *(void *)(a2 + 8);
  }
  if (v42 >= v37) {
    size_t v43 = v37;
  }
  else {
    size_t v43 = v42;
  }
  int v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0) {
      return result;
    }
  }
  else if (v37 <= v42)
  {
    return result;
  }
  uint64_t v45 = *(void *)(a2 + 16);
  uint64_t v46 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v46;
  *(void *)a3 = v39;
  *(void *)(a3 + 8) = v40;
  *(void *)(a3 + 16) = v45;
  int v47 = *(char *)(a2 + 23);
  if (v47 >= 0) {
    unint64_t v48 = (const void *)a2;
  }
  else {
    unint64_t v48 = *(const void **)a2;
  }
  if (v47 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v49 = *(void *)(a2 + 8);
  }
  int v50 = *(char *)(a1 + 23);
  int v51 = *(const void **)a1;
  uint64_t v52 = *(void *)(a1 + 8);
  if (v50 >= 0) {
    uint64_t v53 = (const void *)a1;
  }
  else {
    uint64_t v53 = *(const void **)a1;
  }
  if (v50 >= 0) {
    size_t v54 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v54 = *(void *)(a1 + 8);
  }
  if (v54 >= v49) {
    size_t v55 = v49;
  }
  else {
    size_t v55 = v54;
  }
  int v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0) {
      return result;
    }
  }
  else if (v49 <= v54)
  {
    return result;
  }
  uint64_t v57 = *(void *)(a1 + 16);
  uint64_t v58 = *(void *)(a2 + 16);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v58;
  *(void *)a2 = v51;
  *(void *)(a2 + 8) = v52;
  *(void *)(a2 + 16) = v57;
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        size_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          int v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22) {
            operator delete(v9);
          }
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        std::string::size_type v12 = 2 * v8;
        if (__n > 2 * v8) {
          std::string::size_type v12 = __n;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = HIBYTE(v10);
    int v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        size_t v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __n) = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(24 * v6);
  }
  else
  {
    int v7 = 0;
  }
  unint64_t v8 = &v7[24 * v3];
  size_t v9 = &v7[24 * v6];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v10 = v8 + 24;
  size_t v11 = (void **)*a1;
  std::string::size_type v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    std::string::size_type v12 = (void **)*a1;
    size_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

const char *abm::asString(unsigned int a1)
{
  if (a1 > 9) {
    return "Unknown";
  }
  else {
    return off_1E6192ED8[a1];
  }
}

{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_1E6192F28[a1];
  }
}

const char *abm::asString(int a1)
{
  if ((a1 - 1) > 2) {
    return "Unknown";
  }
  else {
    return off_1E6192F48[a1 - 1];
  }
}

{
  if ((a1 - 1) > 2) {
    return "Unknown";
  }
  else {
    return off_1E6192F60[a1 - 1];
  }
}

{
  const char *result;

  __n128 result = "Generic";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "Lightning to Headphone Jack Adapter";
      break;
    case 2:
      __n128 result = "EarPods with Lightening";
      break;
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
LABEL_7:
      __n128 result = "???";
      break;
    case 4:
      __n128 result = "Lightning Cable";
      break;
    case 5:
      __n128 result = "Charging Dock";
      break;
    case 12:
      __n128 result = "SmartKeyboard";
      break;
    case 13:
      __n128 result = "DisplayCover";
      break;
    case 14:
      __n128 result = "Pencil";
      break;
    case 15:
      __n128 result = "MagSafeCharger";
      break;
    case 16:
      __n128 result = "MagSafeBatteryPack";
      break;
    case 17:
      __n128 result = "USB3";
      break;
    case 18:
      __n128 result = "DisplayPort";
      break;
    case 19:
      __n128 result = "USB-C to Headphone Jack Adapter";
      break;
    case 20:
      __n128 result = "EarPods with USB-C";
      break;
    default:
      switch(a1)
      {
        case 2048:
          __n128 result = "AppleMagSafeSiliconCase";
          break;
        case 2049:
          __n128 result = "AppleMagSafeLeatherCase";
          break;
        case 2050:
          __n128 result = "AppleMagSafeClearCase";
          break;
        case 2051:
          __n128 result = "AppleMagSafeSleeve";
          break;
        case 2052:
          __n128 result = "AppleMagSafeWallet";
          break;
        case 2053:
          __n128 result = "AppleMagSafeBatteryPack";
          break;
        case 2054:
          __n128 result = "AppleMagSafeChargingMat";
          break;
        case 2055:
          __n128 result = "AppleMagSafeChargingCable";
          break;
        case 2056:
          __n128 result = "AppleMagSafeRuggedCase";
          break;
        case 2057:
          __n128 result = "AppleMagSafeTextileCase";
          break;
        default:
          if (a1 != 0xFFFF) {
            goto LABEL_7;
          }
          __n128 result = "Unknown";
          break;
      }
      break;
  }
  return result;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  BOOL v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B8B32658(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1BA9C8300](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9C8300](a1 + 112);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1BA9C8150](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1BA9C8160](v13);
  return a1;
}

void sub_1B8B328D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1BA9C8160](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B8B328B4);
}

void sub_1B8B32928(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        long long v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        long long v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0) {
        size_t v16 = __b;
      }
      else {
        size_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1B8B32B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t abm::AccessorySimulate::create(xpc_object_t *a1)
{
  if (MEMORY[0x1BA9C88F0](*a1) != MEMORY[0x1E4F14590] || !xpc_dictionary_get_value(*a1, "kAccessorySimulateEnabled")) {
    return 170;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kAccessorySimulateEnabled");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v4 = xpc::dyn_cast_or_default();
  xpc_release(object);
  return v4 | 0x100u;
}

void sub_1B8B32BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::AccessorySimulate::create(abm::AccessorySimulate *this)
{
  return this | 0x100;
}

void abm::AccessorySimulate::toDict(abm::AccessorySimulate *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_BOOL_create(*(unsigned char *)this);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kAccessorySimulateEnabled", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
}

const char *abm::AccessorySimulate::asString(abm::AccessorySimulate *this)
{
  if (*(unsigned char *)this) {
    return "enabled";
  }
  else {
    return "disabled";
  }
}

const char *abm::asString(__int16 a1)
{
  if ((unsigned __int16)(a1 + 1) > 5u) {
    return "???";
  }
  else {
    return off_1E6193188[(__int16)(a1 + 1)];
  }
}

{
  if ((unsigned __int16)(a1 + 1) > 4u) {
    return "???";
  }
  else {
    return off_1E61931B8[(__int16)(a1 + 1)];
  }
}

{
  if ((unsigned __int16)(a1 + 1) > 4u) {
    return "???";
  }
  else {
    return off_1E61931E0[(__int16)(a1 + 1)];
  }
}

{
  if ((unsigned __int16)(a1 + 1) > 5u) {
    return "???";
  }
  else {
    return off_1E6193208[(__int16)(a1 + 1)];
  }
}

{
  if ((unsigned __int16)(a1 + 1) > 5u) {
    return "NotApplicable";
  }
  else {
    return off_1E6193238[(__int16)(a1 + 1)];
  }
}

unint64_t abm::AccessoryInfo::create(uint64_t a1)
{
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v72 = v2;
  long long v71 = v2;
  long long v70 = v2;
  long long v69 = v2;
  long long v68 = v2;
  long long v67 = v2;
  long long v66 = v2;
  long long v65 = v2;
  v64[1] = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v63[32] = v2;
  *(_OWORD *)&v63[16] = v2;
  *(_OWORD *)std::string v63 = v2;
  long long v62 = v2;
  long long v60 = v2;
  long long v61 = v2;
  long long v59 = v2;
  uint64_t v3 = MEMORY[0x1E4FBA490] + 64;
  v64[0] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v58 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *(uint64_t *)((char *)&v58 + *(void *)(v58 - 24)) = v4;
  *(void *)&long long v59 = 0;
  xpc_object_t v5 = (std::ios_base *)((char *)&v58 + *(void *)(v58 - 24));
  std::ios_base::init(v5, (char *)&v59 + 8);
  uint64_t v6 = MEMORY[0x1E4FBA490] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  uint64_t v58 = v6;
  v64[0] = v3;
  std::streambuf::basic_streambuf();
  uint64_t v7 = MEMORY[0x1E4FBA470] + 16;
  *((void *)&v59 + 1) = MEMORY[0x1E4FBA470] + 16;
  xpc_object_t v8 = &v63[8];
  memset(&v63[8], 0, 32);
  char v9 = 8;
  *(_DWORD *)&v63[40] = 8;
  if (&v63[8] != (unsigned char *)a1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(&v63[8], *(void **)a1, *(void *)(a1 + 8));
      char v9 = v63[40];
    }
    else
    {
      *(_OWORD *)&v63[8] = *(_OWORD *)a1;
      *(void *)&v63[24] = *(void *)(a1 + 16);
    }
  }
  *(void *)&v63[32] = 0;
  uint64_t v10 = v63[31];
  if (v63[31] >= 0) {
    uint64_t v11 = &v63[8];
  }
  else {
    uint64_t v11 = *(unsigned char **)&v63[8];
  }
  if (v63[31] >= 0) {
    unint64_t v12 = v63[31];
  }
  else {
    unint64_t v12 = *(void *)&v63[16];
  }
  if ((v9 & 8) != 0)
  {
    *((void *)&v60 + 1) = v11;
    *(void *)&long long v61 = v11;
    *(void *)&v63[32] = &v11[v12];
    *((void *)&v61 + 1) = &v11[v12];
  }
  if ((v9 & 0x10) == 0) {
    goto LABEL_29;
  }
  *(void *)&v63[32] = &v11[v12];
  if ((v63[31] & 0x80) != 0)
  {
    unint64_t v13 = (*(void *)&v63[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (*(void *)&v63[16] >= v13)
    {
      *(void *)&v63[16] = (*(void *)&v63[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      xpc_object_t v8 = *(unsigned char **)&v63[8];
      goto LABEL_21;
    }
    uint64_t v10 = *(void *)&v63[16];
  }
  else
  {
    unint64_t v13 = 22;
    if (v63[31] > 0x15u)
    {
      v63[31] = 22;
LABEL_21:
      v8[v13] = 0;
      goto LABEL_22;
    }
  }
  std::string::append((std::string *)&v63[8], v13 - v10, 0);
LABEL_22:
  uint64_t v14 = v63[31];
  if (v63[31] < 0) {
    uint64_t v14 = *(void *)&v63[16];
  }
  *(void *)&long long v62 = v11;
  *((void *)&v62 + 1) = v11;
  *(void *)std::string v63 = &v11[v14];
  if ((v63[40] & 3) != 0)
  {
    if (v12 >> 31)
    {
      uint64_t v15 = ((v12 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
      unint64_t v16 = 0x7FFFFFFF * ((v15 + ((v12 - 0x80000000 - v15) >> 1)) >> 30);
      v11 += v16 + 0x7FFFFFFF;
      unint64_t v12 = v12 - v16 - 0x7FFFFFFF;
      *((void *)&v62 + 1) = v11;
    }
    if (v12) {
      *((void *)&v62 + 1) = &v11[v12];
    }
  }
LABEL_29:
  unsigned __int16 v49 = 0;
  unsigned __int16 v50 = 0;
  int v17 = 0;
  size_t v55 = 0;
  size_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0xFFFFLL;
  while (1)
  {
    uint64_t v18 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, (uint64_t)&v55, 0x2Cu);
    if ((*((unsigned char *)v18 + *(void *)(*v18 - 24) + 32) & 5) != 0) {
      break;
    }
    if (v57 >= 0) {
      size_t v19 = HIBYTE(v57);
    }
    else {
      size_t v19 = v56;
    }
    if (v57 >= 0) {
      int v20 = &v55;
    }
    else {
      int v20 = v55;
    }
    if (v19)
    {
      int v21 = memchr(v20, 58, v19);
      if (v21) {
        unint64_t v22 = v21 - (unsigned char *)v20;
      }
      else {
        unint64_t v22 = -1;
      }
      __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
      __dst[2] = (void *)0xAAAAAAAAAAAAAAAALL;
      if (v19 >= v22) {
        size_t v19 = v22;
      }
      __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      if (v19 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
    }
    else
    {
      unint64_t v22 = -1;
      memset(__dst, 170, sizeof(__dst));
    }
    if (v19 >= 0x17)
    {
      uint64_t v28 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v28 = v19 | 7;
      }
      uint64_t v29 = v28 + 1;
      int v23 = (void **)operator new(v28 + 1);
      __dst[1] = (void *)v19;
      __dst[2] = (void *)(v29 | 0x8000000000000000);
      __dst[0] = v23;
    }
    else
    {
      HIBYTE(__dst[2]) = v19;
      int v23 = __dst;
      if (!v19)
      {
        LOBYTE(__dst[0]) = 0;
        unint64_t v24 = v22 + 1;
        memset(__p, 170, sizeof(__p));
        LOBYTE(v25) = HIBYTE(v57);
        if ((SHIBYTE(v57) & 0x80000000) == 0) {
          goto LABEL_49;
        }
        goto LABEL_56;
      }
    }
    memmove(v23, v20, v19);
    *((unsigned char *)v23 + v19) = 0;
    unint64_t v24 = v22 + 1;
    memset(__p, 170, sizeof(__p));
    LOBYTE(v25) = HIBYTE(v57);
    if ((SHIBYTE(v57) & 0x80000000) == 0)
    {
LABEL_49:
      size_t v25 = v25;
      if (v24 > v25) {
        goto LABEL_210;
      }
      int v26 = (char *)&v55;
      size_t v27 = v25 - v24;
      if (v27 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_207;
      }
      goto LABEL_58;
    }
LABEL_56:
    size_t v25 = v56;
    if (v56 < v24) {
LABEL_210:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    int v26 = (char *)v55;
    size_t v27 = v56 - v24;
    if (v56 - v24 > 0x7FFFFFFFFFFFFFF7) {
LABEL_207:
    }
      std::string::__throw_length_error[abi:ne180100]();
LABEL_58:
    if (v27 >= 0x17)
    {
      uint64_t v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v33 = v27 | 7;
      }
      uint64_t v34 = v33 + 1;
      size_t v30 = operator new(v33 + 1);
      __p[1] = (void *)v27;
      std::vector<std::csub_match> __p[2] = (void *)(v34 | 0x8000000000000000);
      __p[0] = v30;
    }
    else
    {
      HIBYTE(__p[2]) = v27;
      size_t v30 = __p;
      if (v25 == v24)
      {
        *((unsigned char *)__p + v27) = 0;
        int v31 = SHIBYTE(__dst[2]);
        if (SHIBYTE(__dst[2]) < 0) {
          goto LABEL_68;
        }
        goto LABEL_61;
      }
    }
    memmove(v30, &v26[v24], v27);
    *((unsigned char *)v30 + v27) = 0;
    int v31 = SHIBYTE(__dst[2]);
    if (SHIBYTE(__dst[2]) < 0)
    {
LABEL_68:
      if (!__dst[1]) {
LABEL_208:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      unsigned int v32 = *(char *)__dst[0] - 99;
LABEL_70:
      switch(v32)
      {
        case 0u:
          char v35 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0) {
            int v36 = __p;
          }
          else {
            int v36 = (void **)__p[0];
          }
          if (!strcasecmp("NotApplicable", (const char *)v36))
          {
            int v37 = 0;
          }
          else if (!strcasecmp("Lightning", (const char *)v36))
          {
            int v37 = 0x10000;
          }
          else if (!strcasecmp("USBC", (const char *)v36))
          {
            int v37 = 0x20000;
          }
          else if (!strcasecmp("NFC", (const char *)v36))
          {
            int v37 = 196608;
          }
          else if (!strcasecmp("SmartConnector", (const char *)v36))
          {
            int v37 = 0x40000;
          }
          else
          {
            int v37 = -65536;
          }
          unsigned int v39 = (unsigned __int16)v17;
          goto LABEL_176;
        case 6u:
          char v35 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0) {
            size_t v42 = __p;
          }
          else {
            size_t v42 = (void **)__p[0];
          }
          if (!strcasecmp("Generic", (const char *)v42))
          {
            uint64_t v52 = 0;
          }
          else if (!strcasecmp("Lightning to Headphone Jack Adapter", (const char *)v42))
          {
            uint64_t v52 = 1;
          }
          else if (!strcasecmp("EarPods with Lightening", (const char *)v42))
          {
            uint64_t v52 = 2;
          }
          else if (!strcasecmp("Lightning Cable", (const char *)v42))
          {
            uint64_t v52 = 4;
          }
          else if (!strcasecmp("Charging Dock", (const char *)v42))
          {
            uint64_t v52 = 5;
          }
          else if (!strcasecmp("SmartKeyboard", (const char *)v42))
          {
            uint64_t v52 = 12;
          }
          else if (!strcasecmp("DisplayCover", (const char *)v42))
          {
            uint64_t v52 = 13;
          }
          else if (!strcasecmp("Pencil", (const char *)v42))
          {
            uint64_t v52 = 14;
          }
          else if (!strcasecmp("USB3", (const char *)v42))
          {
            uint64_t v52 = 17;
          }
          else if (!strcasecmp("DisplayPort", (const char *)v42))
          {
            uint64_t v52 = 18;
          }
          else if (!strcasecmp("USB-C to Headphone Jack Adapter", (const char *)v42))
          {
            uint64_t v52 = 19;
          }
          else if (!strcasecmp("EarPods with USB-C", (const char *)v42))
          {
            uint64_t v52 = 20;
          }
          else if (!strcasecmp("MagSafeCharger", (const char *)v42))
          {
            uint64_t v52 = 15;
          }
          else if (!strcasecmp("MagSafeBatteryPack", (const char *)v42))
          {
            uint64_t v52 = 16;
          }
          else if (!strcasecmp("AppleMagSafeSiliconCase", (const char *)v42))
          {
            uint64_t v52 = 2048;
          }
          else if (!strcasecmp("AppleMagSafeLeatherCase", (const char *)v42))
          {
            uint64_t v52 = 2049;
          }
          else if (!strcasecmp("AppleMagSafeClearCase", (const char *)v42))
          {
            uint64_t v52 = 2050;
          }
          else if (!strcasecmp("AppleMagSafeSleeve", (const char *)v42))
          {
            uint64_t v52 = 2051;
          }
          else if (!strcasecmp("AppleMagSafeWallet", (const char *)v42))
          {
            uint64_t v52 = 2052;
          }
          else if (!strcasecmp("AppleMagSafeBatteryPack", (const char *)v42))
          {
            uint64_t v52 = 2053;
          }
          else if (!strcasecmp("AppleMagSafeChargingMat", (const char *)v42))
          {
            uint64_t v52 = 2054;
          }
          else if (!strcasecmp("AppleMagSafeChargingCable", (const char *)v42))
          {
            uint64_t v52 = 2055;
          }
          else if (!strcasecmp("AppleMagSafeRuggedCase", (const char *)v42))
          {
            uint64_t v52 = 2056;
          }
          else
          {
            if (!strcasecmp("AppleMagSafeTextileCase", (const char *)v42)) {
              uint64_t v43 = 2057;
            }
            else {
              uint64_t v43 = 0xFFFFFFFFLL;
            }
            uint64_t v52 = v43;
          }
          goto LABEL_177;
        case 0xAu:
          char v35 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0) {
            int v38 = __p;
          }
          else {
            int v38 = (void **)__p[0];
          }
          if (!strcasecmp("NotApplicable", (const char *)v38))
          {
            int v37 = 0;
            unsigned int v39 = v17 & 0xFFFF0000;
          }
          else if (!strcasecmp("Leather", (const char *)v38))
          {
            int v37 = 1;
            unsigned int v39 = v17 & 0xFFFF0000;
          }
          else if (!strcasecmp("Silicone", (const char *)v38))
          {
            int v37 = 2;
            unsigned int v39 = v17 & 0xFFFF0000;
          }
          else if (!strcasecmp("Plastic", (const char *)v38))
          {
            int v37 = 3;
            unsigned int v39 = v17 & 0xFFFF0000;
          }
          else
          {
            if (!strcasecmp("Textile", (const char *)v38)) {
              int v37 = 4;
            }
            else {
              int v37 = 0xFFFF;
            }
            unsigned int v39 = v17 & 0xFFFF0000;
          }
LABEL_176:
          int v17 = v37 | v39;
          break;
        case 0xDu:
          char v35 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0) {
            int v44 = __p;
          }
          else {
            int v44 = (void **)__p[0];
          }
          if (!strcasecmp("NotApplicable", (const char *)v44))
          {
            uint64_t v51 = 0;
          }
          else if (!strcasecmp("Battery", (const char *)v44))
          {
            uint64_t v51 = 1;
          }
          else if (!strcasecmp("Wired", (const char *)v44))
          {
            uint64_t v51 = 2;
          }
          else
          {
            if (!strcasecmp("Inductive", (const char *)v44)) {
              uint64_t v45 = 3;
            }
            else {
              uint64_t v45 = 0xFFFFFFFFLL;
            }
            uint64_t v51 = v45;
          }
          break;
        case 0xFu:
          char v35 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0) {
            uint64_t v46 = __p;
          }
          else {
            uint64_t v46 = (void **)__p[0];
          }
          if (!strcasecmp("NotApplicable", (const char *)v46))
          {
            unsigned __int16 v50 = 0;
          }
          else if (!strcasecmp("White", (const char *)v46))
          {
            unsigned __int16 v50 = 1;
          }
          else if (!strcasecmp("Black", (const char *)v46))
          {
            unsigned __int16 v50 = 2;
          }
          else
          {
            if (!strcasecmp("Brown", (const char *)v46)) {
              __int16 v47 = 3;
            }
            else {
              __int16 v47 = -1;
            }
            unsigned __int16 v50 = v47;
          }
          break;
        case 0x10u:
          char v35 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0) {
            uint64_t v40 = __p;
          }
          else {
            uint64_t v40 = (void **)__p[0];
          }
          if (!strcasecmp("NotApplicable", (const char *)v40))
          {
            unsigned __int16 v49 = 0;
          }
          else if (!strcasecmp("Detached", (const char *)v40))
          {
            unsigned __int16 v49 = 1;
          }
          else if (!strcasecmp("Attached", (const char *)v40))
          {
            unsigned __int16 v49 = 2;
          }
          else if (!strcasecmp("Opened", (const char *)v40))
          {
            unsigned __int16 v49 = 3;
          }
          else
          {
            if (!strcasecmp("Closed", (const char *)v40)) {
              __int16 v41 = 4;
            }
            else {
              __int16 v41 = -1;
            }
            unsigned __int16 v49 = v41;
          }
          break;
        default:
          goto LABEL_103;
      }
      goto LABEL_177;
    }
LABEL_61:
    if (!v31) {
      goto LABEL_208;
    }
    unsigned int v32 = SLOBYTE(__dst[0]) - 99;
    if (v32 <= 0x10) {
      goto LABEL_70;
    }
LABEL_103:
    char v35 = HIBYTE(__p[2]);
LABEL_177:
    if (v35 < 0)
    {
      operator delete(__p[0]);
      if ((HIBYTE(__dst[2]) & 0x80) != 0) {
        goto LABEL_181;
      }
    }
    else if ((v31 & 0x80) != 0)
    {
LABEL_181:
      operator delete(__dst[0]);
    }
  }
  if (v57 < 0) {
    operator delete(v55);
  }
  uint64_t v58 = *MEMORY[0x1E4FBA410];
  *(uint64_t *)((char *)&v58 + *(void *)(v58 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *((void *)&v59 + 1) = v7;
  if ((v63[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v63[8]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1BA9C8300](v64);
  return ((unint64_t)v50 << 32) | (v51 << 48) | ((unint64_t)v49 << 16) | (unsigned __int16)v52;
}

void sub_1B8B33D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1BA9C8300](a12);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1BA9C8300](a1 + 120);
  return a1;
}

unint64_t abm::AccessoryInfo::create(xpc_object_t *a1)
{
  if (MEMORY[0x1BA9C88F0](*a1) != MEMORY[0x1E4F14590])
  {
    uint64_t v2 = 0;
    unsigned __int16 v3 = 0;
    unsigned __int16 v4 = 0;
    unsigned __int16 v5 = -1;
    return (v2 << 48) | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 16) | v5;
  }
  if (xpc_dictionary_get_value(*a1, "kAccessoryID"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kAccessoryID");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    unsigned __int16 v7 = xpc::dyn_cast_or_default();
    xpc_release(object);
    unsigned __int16 v5 = v7;
    if (xpc_dictionary_get_value(*a1, "kAccessoryState"))
    {
LABEL_11:
      xpc_object_t v8 = xpc_dictionary_get_value(*a1, "kAccessoryState");
      xpc_object_t objecta = v8;
      if (v8) {
        xpc_retain(v8);
      }
      else {
        xpc_object_t objecta = xpc_null_create();
      }
      unsigned __int16 v9 = xpc::dyn_cast_or_default();
      xpc_release(objecta);
      unsigned __int16 v4 = v9;
      if (xpc_dictionary_get_value(*a1, "kAccessoryColor")) {
        goto LABEL_15;
      }
LABEL_8:
      unsigned __int16 v3 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    unsigned __int16 v5 = -1;
    if (xpc_dictionary_get_value(*a1, "kAccessoryState")) {
      goto LABEL_11;
    }
  }
  unsigned __int16 v4 = 0;
  if (!xpc_dictionary_get_value(*a1, "kAccessoryColor")) {
    goto LABEL_8;
  }
LABEL_15:
  xpc_object_t v10 = xpc_dictionary_get_value(*a1, "kAccessoryColor");
  xpc_object_t objectb = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t objectb = xpc_null_create();
  }
  unsigned __int16 v3 = xpc::dyn_cast_or_default();
  xpc_release(objectb);
LABEL_19:
  if (!xpc_dictionary_get_value(*a1, "kAccessoryPower"))
  {
    uint64_t v2 = 0;
    if (xpc_dictionary_get_value(*a1, "kAccessoryMaterial")) {
      goto LABEL_27;
    }
LABEL_23:
    if (!xpc_dictionary_get_value(*a1, "kAccessoryConnection")) {
      return (v2 << 48) | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 16) | v5;
    }
    goto LABEL_31;
  }
  xpc_object_t v11 = xpc_dictionary_get_value(*a1, "kAccessoryPower");
  objectCC_SHA256_CTX c = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    objectCC_SHA256_CTX c = xpc_null_create();
  }
  uint64_t v12 = xpc::dyn_cast_or_default();
  xpc_release(objectc);
  uint64_t v2 = v12;
  if (!xpc_dictionary_get_value(*a1, "kAccessoryMaterial")) {
    goto LABEL_23;
  }
LABEL_27:
  xpc_object_t v13 = xpc_dictionary_get_value(*a1, "kAccessoryMaterial");
  xpc_object_t objectd = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t objectd = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(objectd);
  if (xpc_dictionary_get_value(*a1, "kAccessoryConnection"))
  {
LABEL_31:
    xpc_object_t v14 = xpc_dictionary_get_value(*a1, "kAccessoryConnection");
    xpc_object_t objecte = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t objecte = xpc_null_create();
    }
    xpc::dyn_cast_or_default();
    xpc_release(objecte);
  }
  return (v2 << 48) | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 16) | v5;
}

void sub_1B8B342B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void abm::AccessoryInfo::toDict(abm::AccessoryInfo *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(*(unsigned __int16 *)this);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = *a2;
  xpc_dictionary_set_value(v8, "kAccessoryID", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned __int16 *)this + 1));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAccessoryState", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_int64_create(*((unsigned __int16 *)this + 2));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAccessoryColor", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(*((unsigned __int16 *)this + 3));
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAccessoryPower", v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(*((unsigned __int16 *)this + 4));
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAccessoryMaterial", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_int64_create(*((unsigned __int16 *)this + 5));
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kAccessoryConnection", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
}

void std::vector<nas::tlv::abm::BBFreqItem>::__throw_length_error[abi:ne180100]()
{
}

const char *radio::asString(int a1)
{
  if ((a1 - 1) > 6) {
    return "RFSelfTestErrorCode::kSuccess";
  }
  else {
    return off_1E6193748[(char)(a1 - 1)];
  }
}

void radio::QMICommandDriverM20::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v8 = operator new(0x180uLL);
  uint64_t v9 = a1[1];
  uint64_t v21 = *a1;
  unint64_t v22 = (std::__shared_weak_count *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v10 = *a2;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *a3;
  xpc_object_t v12 = (std::__shared_weak_count *)a3[1];
  v19[0] = v11;
  v19[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMICommandDriverM20::QMICommandDriverM20((uint64_t)v8, &v21, &object, v19);
  *a4 = (uint64_t)v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F125F8D8;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (uint64_t)v13;
  xpc_object_t v15 = (std::__shared_weak_count *)*((void *)v8 + 10);
  if (v15)
  {
    if (v15->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v8 + 9) = v8;
      *((void *)v8 + 10) = v13;
      std::__shared_weak_count::__release_weak(v15);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 9) = v8;
    *((void *)v8 + 10) = v13;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_12:
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  xpc_object_t v16 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = *a4;
  xpc_object_t v18 = (uint64_t *)(*a4 + 72);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 0x40000000;
  v23[2] = ___ZN5radio19QMICommandDriverM204initEv_block_invoke;
  v23[3] = &__block_descriptor_tmp_14;
  v23[4] = v17;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v18, (uint64_t)v23);
}

void sub_1B8B348F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v13) {
    dispatch_release(v13);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void radio::QMICommandDriverM20::init(radio::QMICommandDriverM20 *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio19QMICommandDriverM204initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_14;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t radio::QMICommandDriverM20::QMICommandDriverM20(uint64_t a1, uint64_t *a2, NSObject **a3, uint64_t *a4)
{
  xpc_object_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  xpc_object_t v15 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v7 = *a3;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a4;
  uint64_t v9 = (std::__shared_weak_count *)a4[1];
  v12[0] = v8;
  v12[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMICommandDriverBase::QMICommandDriverBase(a1, (uint64_t)&v14, &object, (uint64_t)v12);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  xpc_object_t v10 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *(void *)a1 = &unk_1F125F450;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  return a1;
}

void sub_1B8B34BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2) {
    dispatch_release(v2);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverM20::~QMICommandDriverM20(radio::QMICommandDriverM20 *this)
{
  *(void *)this = &unk_1F125F450;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int16 v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMICommandDriverM20 *)((char *)this + 352));
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(void *)this = &unk_1F125F450;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int16 v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMICommandDriverM20 *)((char *)this + 352));
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(void *)this = &unk_1F125F450;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((radio::QMICommandDriverM20 *)((char *)this + 352));
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
  operator delete(v3);
}

void radio::QMICommandDriverM20::startAppsClient_sync(radio::QMICommandDriverM20 *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (unsigned __int16 v3 = std::__shared_weak_count::lock(v2)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  memset(v30, 170, 24);
  Name = (const char *)radio::CommandDriver::getName(this);
  BYTE7(v29) = 5;
  strcpy((char *)v28, ".apps");
  size_t v6 = strlen(Name);
  uint64_t v7 = std::string::insert((std::string *)v28, 0, Name, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)&v30[1] = *((void *)&v7->__r_.__value_.__l + 2);
  v30[0] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v29) & 0x80000000) == 0)
  {
    if (*((void *)this + 31)) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v12 = *((void *)this + 11);
    unint64_t v22 = v12;
    if (v12) {
      dispatch_retain(v12);
    }
    char v26 = 5;
    strcpy((char *)__p, "radio");
    xpc_object_t v13 = std::__shared_weak_count::lock(v4);
    if (v13)
    {
      uint64_t v14 = v13;
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v21 = v13;
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    qmi::Client::createWithQueue();
    long long v19 = v29;
    long long v29 = 0uLL;
    int v20 = (std::__shared_weak_count *)*((void *)this + 47);
    *((_OWORD *)this + 23) = v19;
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    qmi::Client::~Client((qmi::Client *)v28);
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
    if (v26 < 0)
    {
      operator delete(__p[0]);
      xpc_object_t v18 = v22;
      if (!v22) {
        goto LABEL_33;
      }
    }
    else
    {
      xpc_object_t v18 = v22;
      if (!v22) {
        goto LABEL_33;
      }
    }
LABEL_32:
    dispatch_release(v18);
    goto LABEL_33;
  }
  operator delete(v28[0]);
  if (!*((void *)this + 31)) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v9 = *((void *)this + 11);
  size_t v27 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  char v26 = 5;
  strcpy((char *)__p, "radio");
  xpc_object_t v10 = std::__shared_weak_count::lock(v4);
  if (v10)
  {
    uint64_t v11 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unint64_t v24 = v10;
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    unint64_t v24 = 0;
  }
  xpc_object_t v15 = (std::__shared_weak_count *)*((void *)this + 32);
  int v23 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v16 = v29;
  long long v29 = 0uLL;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 47);
  *((_OWORD *)this + 23) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  qmi::Client::~Client((qmi::Client *)v28);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v18 = v27;
  if (v27) {
    goto LABEL_32;
  }
LABEL_33:
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::start((radio::QMICommandDriverM20 *)((char *)this + 352));
  if (SBYTE7(v30[1]) < 0) {
    operator delete(*(void **)&v30[0]);
  }
  std::__shared_weak_count::__release_weak(v4);
}

void sub_1B8B35284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,dispatch_object_t object,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a21)
  {
    std::__shared_weak_count::__release_weak(a21);
    if (a32 < 0)
    {
LABEL_3:
      operator delete(__p);
      char v35 = object;
      if (!object)
      {
LABEL_8:
        if (*(char *)(v33 - 73) < 0) {
          operator delete(*(void **)(v33 - 96));
        }
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v35);
      goto LABEL_8;
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_3;
  }
  char v35 = object;
  if (!object) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    size_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void ___ZN5radio19QMICommandDriverM2020startAppsClient_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I APPS:Stopped", v2, 2u);
  }
}

void ___ZN5radio19QMICommandDriverM2020startAppsClient_syncEv_block_invoke_12(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I APPS:Started", v2, 2u);
  }
}

void ___ZN5radio19QMICommandDriverM204initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I initializing", (uint8_t *)&v7, 2u);
  }
  unsigned __int16 v3 = *(Registry **)(v1 + 232);
  if (v3)
  {
    Registry::getServerConnection((uint64_t *)&v7, v3);
    long long v4 = v7;
    long long v7 = 0uLL;
    size_t v5 = *(std::__shared_weak_count **)(v1 + 256);
    *(_OWORD *)(v1 + 248) = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    size_t v6 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  radio::QMICommandDriverBase::startDMSClient_sync((radio::QMICommandDriverBase *)v1);
  radio::QMICommandDriverBase::startBSPClient_sync((radio::QMICommandDriverBase *)v1);
  radio::QMICommandDriverM20::startAppsClient_sync((radio::QMICommandDriverM20 *)v1);
  radio::QMICommandDriverBase::setupOperatingModeReporting_sync((radio::QMICommandDriverBase *)v1);
}

void radio::QMICommandDriverM20::queryIPAWakeReason(uint64_t a1, const void **a2, uint64_t a3)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_22_2;
  size_t v5 = *a2;
  v9[4] = a1;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  size_t v6 = *(void **)a3;
  if (*(void *)a3) {
    size_t v6 = _Block_copy(v6);
  }
  long long v7 = (uint64_t *)(a1 + 72);
  uint64_t v8 = *(NSObject **)(a3 + 8);
  long long aBlock = v6;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v7, (uint64_t)v9);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[0] = v3;
  v17[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v17);
  uint64_t v12 = v2 + 320;
  uint64_t v13 = QMIServiceMsg::create();
  int v14 = 25000;
  uint64_t v15 = 0;
  long long v16 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  void v8[2] = ___ZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_19_3;
  long long v4 = (const void *)a1[5];
  v8[4] = v2;
  CFTypeRef cf = v4;
  if (v4) {
    CFRetain(v4);
  }
  size_t v5 = (void *)a1[6];
  if (v5) {
    size_t v5 = _Block_copy(v5);
  }
  size_t v6 = a1[7];
  xpc_object_t v10 = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16GetWakeReasonIPA8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61933C8;
  aBlock[4] = v8;
  long long v7 = _Block_copy(aBlock);
  long long v16 = v7;
  if (v13)
  {
    qmi::Client::send();
    long long v7 = v16;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
}

void sub_1B8B35884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v11);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B358B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke_2(uint64_t a1, const qmi::ResponseBase *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting IPA wake reason", &cf);
  if (cf) {
    size_t v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    size_t v5 = 0;
  }
  if (!v5)
  {
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    uint64_t v12 = TlvValue;
    if (TlvValue
      && (tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v11, (const unsigned __int8 *)1),
          int v14 = *(unsigned __int8 *)v12,
          *(unsigned char *)v12))
    {
      uint64_t v15 = *MEMORY[0x1E4F1CF80];
      if (v14 == 1)
      {
        ctu::cf::insert<char const*,unsigned int>(*(__CFDictionary **)(a1 + 40), (const __CFString **)"kKeyBasebandWakeChannel", 0xDu, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v13);
      }
      else if (v14 == 2)
      {
        ctu::cf::insert<char const*,unsigned int>(*(__CFDictionary **)(a1 + 40), (const __CFString **)"kKeyBasebandWakeChannel", 0xAu, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v13);
      }
      else
      {
        ctu::cf::insert<char const*,unsigned int>(*(__CFDictionary **)(a1 + 40), (const __CFString **)"kKeyBasebandWakeChannel", 8u, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v13);
      }
      uint64_t v17 = (tlv *)qmi::MessageBase::findTlvValue(a2);
      long long v19 = v17;
      if (v17
        && (tlv::throwIfNotEnoughBytes(v17, (const unsigned __int8 *)v17 + v18, (const unsigned __int8 *)4),
            *(_DWORD *)v19))
      {
        int v20 = *(void **)(a1 + 40);
        if (v20) {
          CFRetain(v20);
        }
        uint64_t v21 = (char *)qmi::MessageBase::findTlvValue(a2);
        int v23 = v21;
        if (v21)
        {
          int v24 = v22;
          int v37 = v21;
          memset(block, 170, 24);
          tlv::parseV<bsp::tlv::abm::WakeBuffer>(&v37, v22, block);
          size_t v25 = v37;
          if (v37)
          {
            uint64_t v38 = 0;
            size_t v27 = ctu::cf::convert_copy() ? (const void *)v38 : 0;
            ctu::cf::insert<char const*,__CFData const*>((__CFDictionary *)v20, (const __CFString **)"kKeyBasebandWakeData", v27, v15, v26);
            if (v27) {
              CFRelease(v27);
            }
          }
          if (block[0])
          {
            block[1] = block[0];
            operator delete((void *)block[0]);
          }
          if (!v25) {
            ((void (*)(void, uint64_t, char *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 18, v23, v24);
          }
        }
        if (v20) {
          CFRelease(v20);
        }
      }
      else
      {
        tm __p = (char *)operator new(0x28uLL);
        strcpy(__p, "null IPA wake data from baseband");
        CreateError();
        CFTypeRef v28 = cf;
        CFTypeRef cf = block[0];
        block[0] = 0;
        if (v28)
        {
          CFRelease(v28);
          if (block[0]) {
            CFRelease(block[0]);
          }
        }
        operator delete(__p);
      }
    }
    else
    {
      size_t v30 = (char *)operator new(0x20uLL);
      strcpy(v30, "invalid IPA wake reason type");
      CreateError();
      CFTypeRef v29 = cf;
      CFTypeRef cf = block[0];
      block[0] = 0;
      if (v29)
      {
        CFRelease(v29);
        if (block[0]) {
          CFRelease(block[0]);
        }
      }
      operator delete(v30);
    }
  }
  if (*(void *)(a1 + 48) && *(void *)(a1 + 56))
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    long long v7 = *(const void **)(a1 + 40);
    if (v7) {
      CFRetain(*(CFTypeRef *)(a1 + 40));
    }
    uint64_t v8 = *(const void **)(a1 + 48);
    if (v8) {
      uint64_t v9 = _Block_copy(v8);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v16 = *(NSObject **)(a1 + 56);
    block[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
    block[1] = (CFTypeRef)1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_95_1;
    if (v9)
    {
      long long aBlock = _Block_copy(v9);
      CFTypeRef v35 = v6;
      if (!v6) {
        goto LABEL_24;
      }
    }
    else
    {
      long long aBlock = 0;
      CFTypeRef v35 = v6;
      if (!v6)
      {
LABEL_24:
        CFTypeRef v36 = v7;
        if (v7) {
          CFRetain(v7);
        }
        dispatch_async(v16, block);
        if (v36) {
          CFRelease(v36);
        }
        if (v35) {
          CFRelease(v35);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v9) {
          _Block_release(v9);
        }
        if (v7) {
          CFRelease(v7);
        }
        if (v6) {
          CFRelease(v6);
        }
        goto LABEL_38;
      }
    }
    CFRetain(v6);
    goto LABEL_24;
  }
LABEL_38:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B35DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, const void *a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a20);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B8B35E40);
}

void sub_1B8B35E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **_ZZZZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEEEUb_EUb0_EN3__2D1Ev(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void __copy_helper_block_e8_40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE48c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4) {
    CFRetain(v4);
  }
  size_t v5 = (void *)a2[6];
  if (v5) {
    size_t v5 = _Block_copy(v5);
  }
  CFTypeRef v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE48c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void qmi::Client::SendProxy::~SendProxy(qmi::Client::SendProxy *this)
{
  if (*((void *)this + 1)) {
    qmi::Client::send();
  }
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    _Block_release(v2);
  }
}

void radio::QMICommandDriverM20::getWakeReason(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting Baseband wake reason", buf, 2u);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  void v8[2] = ___ZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_30;
  v8[4] = a1;
  size_t v5 = *(void **)a2;
  if (*(void *)a2) {
    size_t v5 = _Block_copy(v5);
  }
  CFTypeRef v6 = (uint64_t *)(a1 + 72);
  long long v7 = *(NSObject **)(a2 + 8);
  long long aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v3;
  v15[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
  uint64_t v10 = v2 + 352;
  uint64_t v11 = QMIServiceMsg::create();
  int v12 = 25000;
  uint64_t v13 = 0;
  int v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  void v7[3] = &__block_descriptor_tmp_27;
  v7[4] = v2;
  uint64_t v4 = (void *)a1[5];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  size_t v5 = a1[6];
  uint64_t v8 = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm15GetWakeReasonV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61933F0;
  aBlock[4] = v7;
  CFTypeRef v6 = _Block_copy(aBlock);
  int v14 = v6;
  if (v11)
  {
    qmi::Client::send();
    CFTypeRef v6 = v14;
  }
  if (v6) {
    _Block_release(v6);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v8) {
    _Block_release(v8);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
}

void sub_1B8B36280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B362A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v4 = a1[4];
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting wake reason", &cf);
  CFMutableDictionaryRef v46 = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v8 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v46 = Mutable;
  }
  if (cf) {
    uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9) {
    goto LABEL_7;
  }
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v16 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v15, (const unsigned __int8 *)1);
    int v17 = *(unsigned __int8 *)v16;
  }
  else
  {
    int v17 = 0;
  }
  long long v19 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v21 = v19;
  if (v19)
  {
    tlv::throwIfNotEnoughBytes(v19, (const unsigned __int8 *)v19 + v20, (const unsigned __int8 *)1);
    int v22 = *(unsigned __int8 *)v21;
    if (v17 != 2) {
      goto LABEL_46;
    }
LABEL_96:
    unsigned int v10 = 14;
    goto LABEL_8;
  }
  int v22 = 0;
  if (v17 == 2) {
    goto LABEL_96;
  }
LABEL_46:
  if (v17 != 1)
  {
    tm __p = operator new(0x20uLL);
    long long v42 = xmmword_1B8C2EF50;
    strcpy((char *)__p, "invalid wake reason type");
    CreateError();
    CFTypeRef v23 = cf;
    CFTypeRef cf = block[0];
    block[0] = 0;
    if (v23)
    {
      CFRelease(v23);
      if (block[0]) {
        CFRelease(block[0]);
      }
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(__p);
    }
LABEL_7:
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  if (v22 <= 100)
  {
    unsigned int v10 = 11;
    switch(v22)
    {
      case 5:
        unsigned int v10 = 12;
        break;
      case 9:
        unsigned int v10 = 15;
        break;
      case 15:
      case 17:
        goto LABEL_61;
      default:
        goto LABEL_58;
    }
    goto LABEL_61;
  }
  if (v22 != 101)
  {
    if (v22 == 102)
    {
      unsigned int v10 = 16;
      goto LABEL_61;
    }
    if (v22 != 110)
    {
LABEL_58:
      unsigned int v10 = 8;
LABEL_61:
      int v24 = (tlv *)qmi::MessageBase::findTlvValue(a2);
      CFAllocatorRef v26 = v24;
      if (v24
        && (tlv::throwIfNotEnoughBytes(v24, (const unsigned __int8 *)v24 + v25, (const unsigned __int8 *)4),
            *(_DWORD *)v26))
      {
        CFMutableDictionaryRef v45 = v8;
        if (v8) {
          CFRetain(v8);
        }
        size_t v27 = (char *)qmi::MessageBase::findTlvValue(a2);
        CFTypeRef v29 = v27;
        if (v27)
        {
          int v30 = v28;
          uint64_t v52 = v27;
          memset(block, 170, 24);
          tlv::parseV<apps::tlv::abm::WakeBuffer>(&v52, v28, block);
          int v31 = v52;
          if (v52)
          {
            uint64_t v53 = 0;
            uint64_t v33 = ctu::cf::convert_copy() ? (const void *)v53 : 0;
            ctu::cf::insert<char const*,__CFData const*>(v8, (const __CFString **)"kKeyBasebandWakeData", v33, (uint64_t)v5, v32);
            if (v33) {
              CFRelease(v33);
            }
          }
          if (block[0])
          {
            block[1] = block[0];
            operator delete((void *)block[0]);
          }
          if (!v31) {
            ((void (*)(void, uint64_t, char *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 19, v29, v30);
          }
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      else
      {
        uint64_t v43 = operator new(0x20uLL);
        long long v44 = xmmword_1B8C2EF40;
        strcpy((char *)v43, "null wake data from baseband");
        CreateError();
        CFTypeRef v34 = cf;
        CFTypeRef cf = block[0];
        block[0] = 0;
        if (v34)
        {
          CFRelease(v34);
          if (block[0]) {
            CFRelease(block[0]);
          }
        }
        if (SHIBYTE(v44) < 0) {
          operator delete(v43);
        }
      }
LABEL_8:
      if (!a1[5] || !a1[6]) {
        goto LABEL_38;
      }
      ctu::cf::insert<char const*,unsigned int>(v8, (const __CFString **)"kKeyBasebandWakeChannel", v10, v5, v7);
      CFTypeRef v11 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v8) {
        CFRetain(v8);
      }
      uint64_t v12 = (const void *)a1[5];
      if (v12) {
        uint64_t v13 = _Block_copy(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      int v18 = a1[6];
      block[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
      block[1] = (CFTypeRef)1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_95_1;
      if (v13)
      {
        long long aBlock = _Block_copy(v13);
        CFTypeRef v50 = v11;
        if (!v11) {
          goto LABEL_24;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v50 = v11;
        if (!v11)
        {
LABEL_24:
          CFTypeRef v51 = v8;
          if (v8) {
            CFRetain(v8);
          }
          dispatch_async(v18, block);
          if (v51) {
            CFRelease(v51);
          }
          if (v50) {
            CFRelease(v50);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v13) {
            _Block_release(v13);
          }
          if (v8) {
            CFRelease(v8);
          }
          if (v11) {
            CFRelease(v11);
          }
LABEL_38:
          if (!v8) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
      }
      CFRetain(v11);
      goto LABEL_24;
    }
  }
  CFMutableDictionaryRef v40 = v8;
  if (v8) {
    CFRetain(v8);
  }
  CFTypeRef v35 = (const void *)a1[5];
  if (v35)
  {
    CFTypeRef v36 = _Block_copy(v35);
    int v37 = a1[6];
    uint64_t v38 = v36;
    unsigned int v39 = v37;
    if (v37) {
      goto LABEL_88;
    }
LABEL_91:
    radio::QMICommandDriverM20::queryIPAWakeReason(v4, (const void **)&v40, (uint64_t)&v38);
    if (!v36) {
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  CFTypeRef v36 = 0;
  int v37 = a1[6];
  uint64_t v38 = 0;
  unsigned int v39 = v37;
  if (!v37) {
    goto LABEL_91;
  }
LABEL_88:
  dispatch_retain(v37);
  radio::QMICommandDriverM20::queryIPAWakeReason(v4, (const void **)&v40, (uint64_t)&v38);
  dispatch_release(v37);
  if (v36) {
LABEL_92:
  }
    _Block_release(v36);
LABEL_93:
  if (v8)
  {
    CFRelease(v8);
LABEL_39:
    CFRelease(v8);
  }
LABEL_40:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B369C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

const void **_ZZZZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb1_EUb2_EN3__6D1Ev(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void __copy_helper_block_e8_40c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  CFAllocatorRef v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void radio::QMICommandDriverM20::getFieldTestConfig(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (CFTypeRef v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFAllocatorRef v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    unsigned int v10 = 0;
    CFTypeRef v11 = *(NSObject **)(a2 + 8);
    if (!v11) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  unsigned int v10 = _Block_copy(v9);
  CFTypeRef v11 = *(NSObject **)(a2 + 8);
  if (v11) {
LABEL_6:
  }
    dispatch_retain(v11);
LABEL_7:
  uint64_t v12 = (std::__shared_weak_count *)a1[10];
  if (!v12 || (v13 = a1[9], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v15 = v14;
  uint64_t v16 = operator new(0x28uLL);
  void *v16 = a1;
  v16[1] = v5;
  v16[2] = v7;
  v16[3] = v10;
  v16[4] = v11;
  int v17 = a1[11];
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  int v18 = operator new(0x18uLL);
  void *v18 = v16;
  v18[1] = v13;
  v18[2] = v15;
  dispatch_async_f(v17, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverM20::setFieldTestConfig(void *a1, const void **a2, uint64_t a3)
{
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    CFTypeRef v6 = (std::__shared_weak_count *)a1[10];
    if (!v6 || (uint64_t v8 = a1[9], (v9 = std::__shared_weak_count::lock(v6)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unsigned int v10 = v9;
    p_shared_weak_owners = &v9->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      uint64_t v12 = *a2;
      if (!v12)
      {
LABEL_15:
        if (*(void *)a3)
        {
          uint64_t v13 = _Block_copy(*(const void **)a3);
          uint64_t v14 = *(NSObject **)(a3 + 8);
          if (!v14) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v14 = *(NSObject **)(a3 + 8);
          if (!v14)
          {
LABEL_18:
            int v15 = (std::__shared_weak_count *)a1[10];
            if (!v15 || (uint64_t v16 = a1[9], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            int v18 = v17;
            long long v19 = operator new(0x30uLL);
            void *v19 = a1;
            v19[1] = v8;
            uint64_t v19[2] = v10;
            v19[3] = v12;
            v19[4] = v13;
            v19[5] = v14;
            int v20 = a1[11];
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v21 = operator new(0x18uLL);
            void *v21 = v19;
            v21[1] = v16;
            v21[2] = v18;
            dispatch_async_f(v20, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
            std::__shared_weak_count::__release_weak(v10);
            return;
          }
        }
        dispatch_retain(v14);
        goto LABEL_18;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      uint64_t v12 = *a2;
      if (!v12) {
        goto LABEL_15;
      }
    }
    CFRetain(v12);
    goto LABEL_15;
  }
  if (*(void *)a3 && *(void *)(a3 + 8))
  {
    CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    char v25 = 13;
    strcpy((char *)__p, "Invalid input");
    CreateError();
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    if (*(void *)a3) {
      int v22 = _Block_copy(*(const void **)a3);
    }
    else {
      int v22 = 0;
    }
    CFTypeRef v23 = *(NSObject **)(a3 + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_108_0;
    if (v22)
    {
      long long aBlock = _Block_copy(v22);
      CFTypeRef v29 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    else
    {
      long long aBlock = 0;
      CFTypeRef v29 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    dispatch_async(v23, block);
    if (v29) {
      CFRelease(v29);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v22) {
      _Block_release(v22);
    }
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    CFRelease(cf);
  }
}

void sub_1B8B3702C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverM20::sendRFSelfTestReq(void *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  if (!*(void *)a3)
  {
    CFTypeRef v6 = 0;
    CFAllocatorRef v7 = *(NSObject **)(a3 + 8);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  CFTypeRef v6 = _Block_copy(*(const void **)a3);
  CFAllocatorRef v7 = *(NSObject **)(a3 + 8);
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
LABEL_6:
  uint64_t v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = a1[9], (unsigned int v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v11 = v10;
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = a1;
  v12[1] = v5;
  void v12[2] = v6;
  void v12[3] = v7;
  uint64_t v13 = a1[11];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = operator new(0x18uLL);
  void *v14 = v12;
  v14[1] = v9;
  v14[2] = v11;
  dispatch_async_f(v13, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void radio::QMICommandDriverM20::getRFSelfTestNonce(void *a1, uint64_t a2)
{
  if (*(void *)a2 && *(void *)(a2 + 8))
  {
    uint64_t v4 = _Block_copy(*(const void **)a2);
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5) {
      dispatch_retain(*(dispatch_object_t *)(a2 + 8));
    }
    CFTypeRef v6 = (std::__shared_weak_count *)a1[10];
    if (!v6 || (uint64_t v7 = a1[9], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v9 = v8;
    unsigned int v10 = operator new(0x18uLL);
    void *v10 = a1;
    v10[1] = v4;
    void v10[2] = v5;
    CFTypeRef v11 = a1[11];
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = operator new(0x18uLL);
    void *v12 = v10;
    v12[1] = v7;
    void v12[2] = v9;
    dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    uint64_t v13 = a1[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_error_impl(&dword_1B8B00000, v13, OS_LOG_TYPE_ERROR, "No callback for getting RF Self Test Nonce", v14, 2u);
    }
  }
}

void radio::QMICommandDriverM20::setRFSelfTestTicket(void *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  if (!*(void *)a3)
  {
    CFTypeRef v6 = 0;
    uint64_t v7 = *(NSObject **)(a3 + 8);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  CFTypeRef v6 = _Block_copy(*(const void **)a3);
  uint64_t v7 = *(NSObject **)(a3 + 8);
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
LABEL_6:
  uint64_t v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = a1[9], (unsigned int v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v11 = v10;
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = a1;
  v12[1] = v5;
  void v12[2] = v6;
  void v12[3] = v7;
  uint64_t v13 = a1[11];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = operator new(0x18uLL);
  void *v14 = v12;
  v14[1] = v9;
  v14[2] = v11;
  dispatch_async_f(v13, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void radio::QMICommandDriverM20::getAntennaTxPort(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (CFTypeRef v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    unsigned int v10 = 0;
    CFTypeRef v11 = *(NSObject **)(a2 + 8);
    if (!v11) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  unsigned int v10 = _Block_copy(v9);
  CFTypeRef v11 = *(NSObject **)(a2 + 8);
  if (v11) {
LABEL_6:
  }
    dispatch_retain(v11);
LABEL_7:
  uint64_t v12 = (std::__shared_weak_count *)a1[10];
  if (!v12 || (v13 = a1[9], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v15 = v14;
  uint64_t v16 = operator new(0x28uLL);
  void *v16 = a1;
  v16[1] = v5;
  v16[2] = v7;
  v16[3] = v10;
  v16[4] = v11;
  int v17 = a1[11];
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  int v18 = operator new(0x18uLL);
  void *v18 = v16;
  v18[1] = v13;
  v18[2] = v15;
  dispatch_async_f(v17, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverM20::setAntennaTxPort(void *a1, const void **a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    CFTypeRef v11 = *a2;
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  CFTypeRef v11 = *a2;
  if (v11) {
LABEL_7:
  }
    CFRetain(v11);
LABEL_8:
  if (!*(void *)a3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(NSObject **)(a3 + 8);
    if (!v13) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v12 = _Block_copy(*(const void **)a3);
  uint64_t v13 = *(NSObject **)(a3 + 8);
  if (v13) {
LABEL_10:
  }
    dispatch_retain(v13);
LABEL_11:
  uint64_t v14 = (std::__shared_weak_count *)a1[10];
  if (!v14 || (uint64_t v15 = a1[9], (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v17 = v16;
  int v18 = operator new(0x30uLL);
  void *v18 = a1;
  v18[1] = v7;
  v18[2] = v9;
  v18[3] = v11;
  v18[4] = v12;
  v18[5] = v13;
  long long v19 = a1[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  int v20 = operator new(0x18uLL);
  void *v20 = v18;
  v20[1] = v15;
  v20[2] = v17;
  dispatch_async_f(v19, v20, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }

  std::__shared_weak_count::__release_weak(v9);
}

void radio::QMICommandDriverM20::setMCC(void *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  if (!*(void *)a3)
  {
    CFTypeRef v6 = 0;
    uint64_t v7 = *(NSObject **)(a3 + 8);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  CFTypeRef v6 = _Block_copy(*(const void **)a3);
  uint64_t v7 = *(NSObject **)(a3 + 8);
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
LABEL_6:
  uint64_t v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = a1[9], (unsigned int v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v11 = v10;
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = a1;
  v12[1] = v5;
  void v12[2] = v6;
  void v12[3] = v7;
  uint64_t v13 = a1[11];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = operator new(0x18uLL);
  void *v14 = v12;
  v14[1] = v9;
  v14[2] = v11;
  dispatch_async_f(v13, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void radio::QMICommandDriverM20::setLegacyMCC_sync(void *a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v37[0] = 0xAAAAAAAAAAAAAAAALL;
  v37[1] = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v10 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v37, *a2);
  int Bool = ctu::cf::map_adapter::getBool(v10, (const __CFString *)*MEMORY[0x1E4FB9A00]);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v35 = v12;
  long long v36 = v12;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v35);
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 0x40000000;
  uint64_t v13 = ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  CFAllocatorRef v32 = ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  uint64_t v33 = &__block_descriptor_tmp_33;
  char v34 = Bool;
  uint64_t v14 = (const void **)*((void *)&v35 + 1);
  if (*((void *)&v35 + 1) != (void)v36)
  {
    while (*((unsigned char *)*v14 + 8) != 1)
    {
      if (++v14 == (const void **)v36) {
        goto LABEL_12;
      }
    }
  }
  if (v14 == (const void **)v36)
  {
LABEL_12:
    uint64_t v16 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::Enable>(&v35, 1);
    uint64_t v13 = v32;
  }
  else
  {
    if (!v15) {
      __cxa_bad_cast();
    }
    uint64_t v16 = v15 + 9;
  }
  v13((uint64_t)v31, v16);
  int v17 = a1[5];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = "disable";
    if (Bool) {
      int v18 = "enable";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1B8B00000, v17, OS_LOG_TYPE_DEFAULT, "#I Request to set legacy mcc to %s", (uint8_t *)&buf, 0xCu);
  }
  CFAllocatorRef v26 = a1 + 40;
  uint64_t v27 = QMIServiceMsg::create();
  int v28 = 25000;
  uint64_t v29 = 0;
  long long aBlock = 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 1174405120;
  v22[2] = ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_36;
  v22[3] = &__block_descriptor_tmp_38_2;
  v22[4] = a1;
  v22[5] = v7;
  CFTypeRef v23 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v19 = *(void **)a3;
  if (*(void *)a3) {
    long long v19 = _Block_copy(v19);
  }
  int v20 = *(NSObject **)(a3 + 8);
  int v24 = v19;
  dispatch_object_t object = v20;
  if (v20) {
    dispatch_retain(v20);
  }
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 0x40000000;
  unsigned int v39 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18SettingLegacyTxMCC8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  CFMutableDictionaryRef v40 = &unk_1E61935F0;
  __int16 v41 = v22;
  uint64_t v21 = _Block_copy(&buf);
  long long aBlock = v21;
  if (v27)
  {
    qmi::Client::send();
    uint64_t v21 = aBlock;
  }
  if (v21) {
    _Block_release(v21);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v24) {
    _Block_release(v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v35);
  MEMORY[0x1BA9C7760](v37);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1B8B37D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_36(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    CFTypeRef v6 = std::__shared_weak_count::lock(v3);
    uint64_t v14 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (!a1[5])
      {
LABEL_25:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting legacy mcc", &cf);
      uint64_t v8 = (const void *)a1[7];
      if (!v8 || !a1[8])
      {
LABEL_23:
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_25;
      }
      CFTypeRef v9 = cf;
      if (cf && (CFRetain(cf), (uint64_t v8 = (const void *)a1[7]) == 0)) {
        unsigned int v10 = 0;
      }
      else {
        unsigned int v10 = _Block_copy(v8);
      }
      CFTypeRef v11 = a1[8];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_108_0;
      if (v10)
      {
        long long aBlock = _Block_copy(v10);
        CFTypeRef v17 = v9;
        if (!v9) {
          goto LABEL_15;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v17 = v9;
        if (!v9)
        {
LABEL_15:
          dispatch_async(v11, block);
          if (v17) {
            CFRelease(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v10) {
            _Block_release(v10);
          }
          if (v9) {
            CFRelease(v9);
          }
          goto LABEL_23;
        }
      }
      CFRetain(v9);
      goto LABEL_15;
    }
  }
}

void sub_1B8B37FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  CFTypeRef v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t radio::QMICommandDriverM20::setSTxMCC_sync(void *a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  v37[0] = 0xAAAAAAAAAAAAAAAALL;
  v37[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v37, *a2);
  int Bool = ctu::cf::map_adapter::getBool(v5, (const __CFString *)*MEMORY[0x1E4FB9B20]);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v35 = v7;
  long long v36 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v35);
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 0x40000000;
  uint64_t v8 = ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  CFAllocatorRef v32 = ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  uint64_t v33 = &__block_descriptor_tmp_39;
  char v34 = Bool;
  CFTypeRef v9 = (const void **)*((void *)&v35 + 1);
  if (*((void *)&v35 + 1) != (void)v36)
  {
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v36) {
        goto LABEL_8;
      }
    }
  }
  if (v9 == (const void **)v36)
  {
LABEL_8:
    CFTypeRef v11 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::Enable>(&v35, 1);
    uint64_t v8 = v32;
  }
  else
  {
    if (!v10) {
      __cxa_bad_cast();
    }
    CFTypeRef v11 = v10 + 9;
  }
  v8((uint64_t)v31, v11);
  long long v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = "disable";
    if (Bool) {
      uint64_t v13 = "enable";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_1B8B00000, v12, OS_LOG_TYPE_DEFAULT, "#I Request to set sTx mcc to %s", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v14 = (std::__shared_weak_count *)a1[10];
  if (!v14 || (uint64_t v15 = a1[9], (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v17 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
  }
  CFAllocatorRef v26 = a1 + 40;
  uint64_t v27 = QMIServiceMsg::create();
  int v28 = 25000;
  uint64_t v29 = 0;
  long long aBlock = 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 1174405120;
  v22[2] = ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_40;
  v22[3] = &__block_descriptor_tmp_44_3;
  v22[4] = a1;
  v22[5] = v15;
  CFTypeRef v23 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v18 = *(void **)a3;
  if (*(void *)a3) {
    int v18 = _Block_copy(v18);
  }
  long long v19 = *(NSObject **)(a3 + 8);
  int v24 = v18;
  dispatch_object_t object = v19;
  if (v19) {
    dispatch_retain(v19);
  }
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 0x40000000;
  unsigned int v39 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SettingSTxMCC8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  CFMutableDictionaryRef v40 = &unk_1E6193618;
  __int16 v41 = v22;
  int v20 = _Block_copy(&buf);
  long long aBlock = v20;
  if (v27)
  {
    qmi::Client::send();
    int v20 = aBlock;
  }
  if (v20) {
    _Block_release(v20);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v24) {
    _Block_release(v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__shared_weak_count::__release_weak(v17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v35);
  return MEMORY[0x1BA9C7760](v37);
}

void sub_1B8B384D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_40(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    CFTypeRef v6 = std::__shared_weak_count::lock(v3);
    uint64_t v14 = v6;
    if (v6)
    {
      long long v7 = v6;
      if (!a1[5])
      {
LABEL_25:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting sTx mcc", &cf);
      uint64_t v8 = (const void *)a1[7];
      if (!v8 || !a1[8])
      {
LABEL_23:
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_25;
      }
      CFTypeRef v9 = cf;
      if (cf && (CFRetain(cf), (uint64_t v8 = (const void *)a1[7]) == 0)) {
        unsigned int v10 = 0;
      }
      else {
        unsigned int v10 = _Block_copy(v8);
      }
      CFTypeRef v11 = a1[8];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_108_0;
      if (v10)
      {
        long long aBlock = _Block_copy(v10);
        CFTypeRef v17 = v9;
        if (!v9) {
          goto LABEL_15;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v17 = v9;
        if (!v9)
        {
LABEL_15:
          dispatch_async(v11, block);
          if (v17) {
            CFRelease(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v10) {
            _Block_release(v10);
          }
          if (v9) {
            CFRelease(v9);
          }
          goto LABEL_23;
        }
      }
      CFRetain(v9);
      goto LABEL_15;
    }
  }
}

void sub_1B8B38778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverM20::sendAccessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v11[3] = &__block_descriptor_tmp_50_0;
  v11[4] = a1;
  tm __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  CFTypeRef v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 != *(void *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    tm __p = operator new(v7);
    uint64_t v14 = (char *)__p + 4 * (v7 >> 2);
    memcpy(__p, v6, v7);
    uint64_t v13 = v14;
  }
  uint64_t v8 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v8 = _Block_copy(v8);
  }
  CFTypeRef v9 = (uint64_t *)(a1 + 72);
  unsigned int v10 = *(NSObject **)(a3 + 8);
  long long aBlock = v8;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v9, (uint64_t)v11);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
}

void sub_1B8B388D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v49 = v3;
  long long v50 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v49);
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 1174405120;
  uint64_t v4 = ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  long long v44 = ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  CFMutableDictionaryRef v45 = &__block_descriptor_tmp_46_0;
  __int16 v47 = 0;
  unint64_t v48 = 0;
  CFMutableDictionaryRef v46 = 0;
  CFTypeRef v6 = (unsigned char *)a1[5];
  uint64_t v5 = (unsigned char *)a1[6];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    CFMutableDictionaryRef v46 = operator new(v7);
    unint64_t v48 = (char *)v46 + 4 * (v7 >> 2);
    memcpy(v46, v6, v7);
    __int16 v47 = v48;
  }
  uint64_t v8 = (char *)*((void *)&v49 + 1);
  CFTypeRef v9 = (char *)v50;
  unsigned int v10 = (const void **)*((void *)&v49 + 1);
  if (*((void *)&v49 + 1) != (void)v50)
  {
    unsigned int v10 = (const void **)*((void *)&v49 + 1);
    while (*((unsigned char *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v50) {
        goto LABEL_12;
      }
    }
  }
  if (v10 == (const void **)v50)
  {
LABEL_12:
    uint64_t v13 = operator new(0x28uLL);
    uint64_t v14 = v13;
    v13[8] = 1;
    *(void *)uint64_t v13 = &unk_1F1260000;
    *((void *)v13 + 2) = 0;
    long long v12 = (char **)(v13 + 16);
    *((void *)v13 + 3) = 0;
    *((void *)v13 + 4) = 0;
    if ((unint64_t)v9 < *((void *)&v50 + 1))
    {
      *(void *)CFTypeRef v9 = v13;
      uint64_t v15 = (uint64_t)(v9 + 8);
LABEL_34:
      *(void *)&long long v50 = v15;
      uint64_t v4 = v44;
      goto LABEL_35;
    }
    int64_t v16 = v9 - v8;
    uint64_t v17 = (v9 - v8) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = *((void *)&v50 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v50 + 1) - (void)v8) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v21 = operator new(8 * v20);
      int v22 = &v21[8 * v17];
      CFTypeRef v23 = &v21[8 * v20];
      void *v22 = v14;
      uint64_t v15 = (uint64_t)(v22 + 1);
      if (v8 != v9)
      {
LABEL_23:
        if ((unint64_t)(v16 - 8) < 0x58) {
          goto LABEL_56;
        }
        if ((unint64_t)(v8 - v21) < 0x20) {
          goto LABEL_56;
        }
        unint64_t v24 = ((unint64_t)(v16 - 8) >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        CFAllocatorRef v26 = &v9[-v25];
        int v22 = (void *)((char *)v22 - v25);
        uint64_t v27 = &v21[8 * v17 - 16];
        int v28 = v9 - 16;
        uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          _OWORD *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        CFTypeRef v9 = v26;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          do
          {
            uint64_t v31 = *((void *)v9 - 1);
            v9 -= 8;
            *--int v22 = v31;
          }
          while (v9 != v8);
        }
        uint64_t v8 = (char *)*((void *)&v49 + 1);
        *((void *)&v49 + 1) = v22;
        *(void *)&long long v50 = v15;
        *((void *)&v50 + 1) = v23;
        if (!v8) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = (void *)(8 * v17);
      CFTypeRef v23 = 0;
      *(void *)(8 * v17) = v14;
      uint64_t v15 = 8 * v17 + 8;
      if (v8 != v9) {
        goto LABEL_23;
      }
    }
    *((void *)&v49 + 1) = v22;
    *(void *)&long long v50 = v15;
    *((void *)&v50 + 1) = v23;
    if (!v8) {
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v8);
    goto LABEL_34;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  long long v12 = (char **)(v11 + 16);
LABEL_35:
  v4((uint64_t)v43, v12);
  uint64_t v38 = v2 + 320;
  uint64_t v39 = QMIServiceMsg::create();
  int v40 = 25000;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  v35[2] = ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_47;
  v35[3] = &__block_descriptor_tmp_49_1;
  v35[4] = v2;
  CFAllocatorRef v32 = (void *)a1[8];
  if (v32) {
    CFAllocatorRef v32 = _Block_copy(v32);
  }
  uint64_t v33 = a1[9];
  long long v36 = v32;
  dispatch_object_t object = v33;
  if (v33) {
    dispatch_retain(v33);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17SendAccessoryInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193640;
  aBlock[4] = v35;
  char v34 = _Block_copy(aBlock);
  uint64_t v42 = v34;
  if (v39)
  {
    qmi::Client::send();
    char v34 = v42;
  }
  if (v34) {
    _Block_release(v34);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v36) {
    _Block_release(v36);
  }
  if (v46)
  {
    __int16 v47 = v46;
    operator delete(v46);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v49);
}

void sub_1B8B38D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v29);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a17);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1, char **a2)
{
  long long v3 = *(__int16 **)(a1 + 32);
  uint64_t v2 = *(__int16 **)(a1 + 40);
  if (v3 != v2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = a2[1];
    CFAllocatorRef v26 = *(__int16 **)(a1 + 40);
    do
    {
      while (1)
      {
        __int16 v6 = *v3;
        __int16 v7 = v3[1];
        __int16 v8 = v3[2];
        __int16 v9 = v3[3];
        __int16 v10 = v3[4];
        __int16 v11 = v3[5];
        unint64_t v12 = (unint64_t)v4[2];
        if ((unint64_t)v5 >= v12) {
          break;
        }
        *(_WORD *)uint64_t v5 = v6;
        *((_WORD *)v5 + 1) = v7;
        *((_WORD *)v5 + 2) = v8;
        *((_WORD *)v5 + 3) = v9;
        *((_WORD *)v5 + 4) = v10;
        *((_WORD *)v5 + 5) = v11;
        v4[1] = v5 + 12;
        v3 += 6;
        v5 += 12;
        if (v3 == v2) {
          return;
        }
      }
      uint64_t v13 = *v4;
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *v4) >> 2);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0x1555555555555555) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v13) >> 2);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v17 = 0x1555555555555555;
      }
      else {
        unint64_t v17 = v15;
      }
      unint64_t v28 = v17;
      if (v17)
      {
        __int16 v27 = *v3;
        if (v17 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v18 = v4;
        __int16 v19 = v3[2];
        unint64_t v20 = (char *)operator new(12 * v17);
        __int16 v8 = v19;
        uint64_t v4 = v18;
        __int16 v6 = v27;
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v21 = &v20[12 * v14];
      *(_WORD *)uint64_t v21 = v6;
      *((_WORD *)v21 + 1) = v7;
      *((_WORD *)v21 + 2) = v8;
      *((_WORD *)v21 + 3) = v9;
      *((_WORD *)v21 + 4) = v10;
      *((_WORD *)v21 + 5) = v11;
      int v22 = v21;
      if (v5 != v13)
      {
        do
        {
          uint64_t v23 = *(void *)(v5 - 12);
          v5 -= 12;
          int v24 = *((_DWORD *)v5 + 2);
          *(void *)(v22 - 12) = v23;
          v22 -= 12;
          *((_DWORD *)v22 + 2) = v24;
        }
        while (v5 != v13);
        uint64_t v5 = *v4;
      }
      uint64_t v25 = v21 + 12;
      std::__shared_weak_count *v4 = v22;
      v4[1] = v21 + 12;
      v4[2] = &v20[12 * v28];
      if (v5) {
        operator delete(v5);
      }
      uint64_t v2 = v26;
      v4[1] = v25;
      v3 += 6;
      uint64_t v5 = v25;
    }
    while (v3 != v26);
  }
}

void *__copy_helper_block_e8_32c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(void *result, uint64_t a2)
{
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  long long v3 = *(unsigned char **)(a2 + 32);
  uint64_t v2 = *(unsigned char **)(a2 + 40);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    uint64_t v5 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v4 >> 2) >= 0x1555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    __int16 v6 = (char *)operator new(v4);
    v5[4] = v6;
    v5[5] = v6;
    __int16 v7 = &v6[4 * (v4 >> 2)];
    v5[6] = v7;
    __n128 result = memcpy(v6, v3, v4);
    v5[5] = v7;
  }
  return result;
}

void sub_1B8B39038(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_47(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3 = a1[4];
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "sending accessory info", &cf);
  int64_t v4 = (const void *)a1[5];
  if (!v4 || !a1[6]) {
    goto LABEL_20;
  }
  CFTypeRef v5 = cf;
  if (cf && (CFRetain(cf), (int64_t v4 = (const void *)a1[5]) == 0)) {
    __int16 v6 = 0;
  }
  else {
    __int16 v6 = _Block_copy(v4);
  }
  __int16 v7 = a1[6];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_108_0;
  if (v6)
  {
    long long aBlock = _Block_copy(v6);
    CFTypeRef v11 = v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  long long aBlock = 0;
  CFTypeRef v11 = v5;
  if (v5) {
LABEL_11:
  }
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11) {
    CFRelease(v11);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  int64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    int64_t v4 = _Block_copy(v4);
  }
  CFTypeRef v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void __copy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  CFTypeRef v5 = (unsigned char *)a2[5];
  int64_t v4 = (unsigned char *)a2[6];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    __int16 v7 = (char *)operator new(v6);
    a1[5] = v7;
    a1[6] = v7;
    __int16 v8 = &v7[4 * (v6 >> 2)];
    a1[7] = v8;
    memcpy(v7, v5, v6);
    a1[6] = v8;
  }
  __int16 v9 = (void *)a2[8];
  if (v9) {
    __int16 v9 = _Block_copy(v9);
  }
  __int16 v10 = a2[9];
  a1[8] = v9;
  a1[9] = v10;
  if (v10)
  {
    dispatch_retain(v10);
  }
}

void sub_1B8B39350(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[8];
  if (v3) {
    _Block_release(v3);
  }
  int64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
}

void radio::QMICommandDriverM20::getRFFEScanData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  if (*(void *)a2 && *(void *)(a2 + 8))
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    v9[2] = ___ZN5radio19QMICommandDriverM2015getRFFEScanDataEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke;
    v9[3] = &__block_descriptor_tmp_56_1;
    v9[4] = a1;
    CFTypeRef v5 = _Block_copy(v3);
    int64_t v6 = (uint64_t *)(a1 + 72);
    __int16 v7 = *(NSObject **)(a2 + 8);
    long long aBlock = v5;
    dispatch_object_t object = v7;
    if (v7) {
      dispatch_retain(v7);
    }
    ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v9);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  else
  {
    __int16 v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "No callback for getting RFFE scan data", buf, 2u);
    }
  }
}

void ___ZN5radio19QMICommandDriverM2015getRFFEScanDataEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v3;
  v15[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
  uint64_t v10 = v2 + 320;
  uint64_t v11 = QMIServiceMsg::create();
  int v12 = 25000;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio19QMICommandDriverM2015getRFFEScanDataEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke_2;
  void v7[3] = &__block_descriptor_tmp_53_1;
  v7[4] = v2;
  int64_t v4 = (void *)a1[5];
  if (v4) {
    int64_t v4 = _Block_copy(v4);
  }
  CFTypeRef v5 = a1[6];
  __int16 v8 = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15GetRFFEScanData8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193668;
  aBlock[4] = v7;
  int64_t v6 = _Block_copy(aBlock);
  unint64_t v14 = v6;
  if (v11)
  {
    qmi::Client::send();
    int64_t v6 = v14;
  }
  if (v6) {
    _Block_release(v6);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v8) {
    _Block_release(v8);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
}

void sub_1B8B3965C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B39680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2015getRFFEScanDataEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke_2(void *a1, qmi::MessageBase *this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 1))
  {
    uint64_t v3 = a1[4];
    p_p = operator new(0x20uLL);
    tm __p = p_p;
    long long v29 = xmmword_1B8C2EF40;
    strcpy((char *)p_p, "Failed to get RFFE scan data");
    CFTypeRef v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = p_p;
      _os_log_error_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
      int64_t v6 = (const void **)(a1 + 5);
      if (SHIBYTE(v29) < 0) {
        p_p = __p;
      }
      else {
        p_p = &__p;
      }
    }
    else
    {
      int64_t v6 = (const void **)(a1 + 5);
    }
    xpc_object_t v7 = xpc_string_create((const char *)p_p);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_object_t v8 = xpc_null_create();
    if (*v6) {
      __int16 v9 = _Block_copy(*v6);
    }
    else {
      __int16 v9 = 0;
    }
    __int16 v19 = a1[6];
    *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 1174405120;
    uint64_t v31 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    CFAllocatorRef v32 = &__block_descriptor_tmp_149;
    if (v9)
    {
      long long aBlock = _Block_copy(v9);
      xpc_object_t v34 = v7;
      if (v7) {
        goto LABEL_23;
      }
    }
    else
    {
      long long aBlock = 0;
      xpc_object_t v34 = v7;
      if (v7)
      {
LABEL_23:
        xpc_retain(v7);
        xpc_object_t object = v8;
        if (v8)
        {
LABEL_24:
          xpc_retain(v8);
          goto LABEL_28;
        }
LABEL_27:
        xpc_object_t object = xpc_null_create();
LABEL_28:
        dispatch_async(v19, &block);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v34);
        xpc_object_t v34 = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v9) {
          _Block_release(v9);
        }
        xpc_release(v8);
        xpc_release(v7);
        if (SHIBYTE(v29) < 0)
        {
          unint64_t v20 = __p;
LABEL_63:
          operator delete(v20);
          return;
        }
        return;
      }
    }
    xpc_object_t v34 = xpc_null_create();
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  tm __p = 0;
  long long v29 = 0uLL;
  TlvValue = (char *)qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    blocunint64_t k = 0uLL;
    uint64_t v31 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&block, TlvValue, &TlvValue[v11], v11);
    long long v12 = block;
    size_t v13 = *((void *)&block + 1) - block;
    uint64_t v14 = (char *)__p;
    if (*((void *)&v29 + 1) - (void)__p < *((void *)&block + 1) - (void)block)
    {
      if ((v13 & 0x8000000000000000) != 0) {
        goto LABEL_68;
      }
      uint64_t v15 = 2 * *((void *)&v29 + 1);
      if (2 * *((void *)&v29 + 1) <= v13) {
        uint64_t v15 = *((void *)&block + 1) - block;
      }
      size_t v16 = *((void *)&v29 + 1) >= 0x3FFFFFFFFFFFFFFFuLL ? 0x7FFFFFFFFFFFFFFFLL : v15;
      if ((v16 & 0x8000000000000000) != 0) {
LABEL_68:
      }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      unint64_t v17 = (char *)operator new(v16);
      uint64_t v14 = v17;
      tm __p = v17;
      *(void *)&long long v29 = v17;
      *((void *)&v29 + 1) = &v17[v16];
      if (*((void *)&v12 + 1) != (void)v12)
      {
        memcpy(v17, (const void *)v12, v13);
        *(void *)&long long v29 = &v14[v13];
        unint64_t v18 = (void *)block;
        if (!(void)block) {
          goto LABEL_45;
        }
LABEL_44:
        *((void *)&block + 1) = v18;
        operator delete(v18);
        goto LABEL_45;
      }
LABEL_43:
      *(void *)&long long v29 = &v14[v13];
      unint64_t v18 = (void *)block;
      if (!(void)block) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    size_t v21 = v29 - (void)__p;
    if ((void)v29 - (void)__p >= v13)
    {
      if (*((void *)&block + 1) != (void)block) {
        memmove(__p, (const void *)block, *((void *)&block + 1) - block);
      }
      goto LABEL_43;
    }
    int v22 = (const void *)(block + v21);
    if ((void *)v29 != __p)
    {
      memmove(__p, (const void *)block, v21);
      uint64_t v14 = (char *)v29;
    }
    if (*((const void **)&v12 + 1) != v22) {
      memmove(v14, v22, *((void *)&v12 + 1) - (void)v22);
    }
    *(void *)&long long v29 = &v14[*((void *)&v12 + 1) - (void)v22];
    unint64_t v18 = (void *)block;
    if ((void)block) {
      goto LABEL_44;
    }
  }
LABEL_45:
  xpc_object_t v23 = xpc_null_create();
  xpc_object_t v24 = xpc_data_create(__p, v29 - (void)__p);
  if (v24)
  {
    uint64_t v25 = (const void *)a1[5];
    if (v25)
    {
LABEL_47:
      CFAllocatorRef v26 = _Block_copy(v25);
      goto LABEL_50;
    }
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
    uint64_t v25 = (const void *)a1[5];
    if (v25) {
      goto LABEL_47;
    }
  }
  CFAllocatorRef v26 = 0;
LABEL_50:
  __int16 v27 = a1[6];
  *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  uint64_t v31 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke;
  CFAllocatorRef v32 = &__block_descriptor_tmp_148;
  if (v26)
  {
    long long aBlock = _Block_copy(v26);
    xpc_object_t v34 = v23;
    if (v23) {
      goto LABEL_52;
    }
LABEL_55:
    xpc_object_t v34 = xpc_null_create();
    xpc_object_t object = v24;
    if (v24) {
      goto LABEL_53;
    }
    goto LABEL_56;
  }
  long long aBlock = 0;
  xpc_object_t v34 = v23;
  if (!v23) {
    goto LABEL_55;
  }
LABEL_52:
  xpc_retain(v23);
  xpc_object_t object = v24;
  if (v24)
  {
LABEL_53:
    xpc_retain(v24);
    goto LABEL_57;
  }
LABEL_56:
  xpc_object_t object = xpc_null_create();
LABEL_57:
  dispatch_async(v27, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v26) {
    _Block_release(v26);
  }
  xpc_release(v24);
  xpc_release(v23);
  unint64_t v20 = __p;
  if (__p)
  {
    *(void *)&long long v29 = __p;
    goto LABEL_63;
  }
}

void sub_1B8B39BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(uint64_t a1, uint64_t a2)
{
  int64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    int64_t v4 = _Block_copy(v4);
  }
  CFTypeRef v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::QMICommandDriverM20::getResetProperties(uint64_t a1, uint64_t a2)
{
  int64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting reset properties", buf, 2u);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  void v8[2] = ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_72_3;
  v8[4] = a1;
  CFTypeRef v5 = *(void **)a2;
  if (*(void *)a2) {
    CFTypeRef v5 = _Block_copy(v5);
  }
  int64_t v6 = (uint64_t *)(a1 + 72);
  xpc_object_t v7 = *(NSObject **)(a2 + 8);
  long long aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v3;
  v15[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
  uint64_t v10 = v2 + 320;
  uint64_t v11 = QMIServiceMsg::create();
  int v12 = 25000;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  void v7[3] = &__block_descriptor_tmp_69_1;
  v7[4] = v2;
  int64_t v4 = (void *)a1[5];
  if (v4) {
    int64_t v4 = _Block_copy(v4);
  }
  CFTypeRef v5 = a1[6];
  xpc_object_t v8 = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetResetProperties8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193690;
  aBlock[4] = v7;
  int64_t v6 = _Block_copy(aBlock);
  uint64_t v14 = v6;
  if (v11)
  {
    qmi::Client::send();
    int64_t v6 = v14;
  }
  if (v6) {
    _Block_release(v6);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v8) {
    _Block_release(v8);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
}

void sub_1B8B39FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B3A014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v4 = a1[4];
  uint64_t v34 = 0;
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting reset properties", &cf);
  CFTypeRef v5 = 0;
  if (cf) {
    int64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    int64_t v6 = 0;
  }
  if (v6)
  {
    if (!a1[5]) {
      goto LABEL_41;
    }
LABEL_14:
    if (!a1[6]) {
      goto LABEL_41;
    }
    CFTypeRef v16 = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v5) {
      CFRetain(v5);
    }
    unint64_t v17 = (const void *)a1[5];
    if (v17) {
      unint64_t v18 = _Block_copy(v17);
    }
    else {
      unint64_t v18 = 0;
    }
    __int16 v19 = a1[6];
    blocunint64_t k = MEMORY[0x1E4F143A8];
    p_blocunint64_t k = 1174405120;
    uint64_t v37 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke;
    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_140_1;
    if (v18)
    {
      uint64_t v39 = (uint64_t (*)())_Block_copy(v18);
      CFTypeRef v40 = v16;
      if (!v16) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v39 = 0;
      CFTypeRef v40 = v16;
      if (!v16)
      {
LABEL_27:
        CFTypeRef v41 = v5;
        if (v5) {
          CFRetain(v5);
        }
        dispatch_async(v19, &block);
        if (v41) {
          CFRelease(v41);
        }
        if (v40) {
          CFRelease(v40);
        }
        if (v39) {
          _Block_release(v39);
        }
        if (v18) {
          _Block_release(v18);
        }
        if (v5) {
          CFRelease(v5);
        }
        if (v16) {
          CFRelease(v16);
        }
        goto LABEL_41;
      }
    }
    CFRetain(v16);
    goto LABEL_27;
  }
  blocunint64_t k = 0;
  p_blocunint64_t k = (uint64_t)&block;
  uint64_t v37 = 0x3002000000;
  uint64_t v38 = __Block_byref_object_copy_;
  uint64_t v39 = __Block_byref_object_dispose_;
  CFTypeRef v40 = (CFTypeRef)0xAAAAAAAAAAAAAA01;
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 0x40000000;
  long long v30 = (uint64_t (*)(uint64_t, const void **))___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_59;
  uint64_t v31 = &unk_1E6193310;
  CFAllocatorRef v32 = &block;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  __int16 v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)1);
    LOBYTE(v20) = *(unsigned char *)v9 != 0;
    v30((uint64_t)v29, &v20);
  }
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  CFAllocatorRef v26 = (uint64_t (*)(uint64_t, const void **))___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2_62;
  __int16 v27 = &unk_1E6193338;
  unint64_t v28 = &block;
  uint64_t v10 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v12 = v10;
  if (v10)
  {
    tlv::throwIfNotEnoughBytes(v10, (const unsigned __int8 *)v10 + v11, (const unsigned __int8 *)2);
    LOWORD(v20) = *(_WORD *)v12;
    v26((uint64_t)v25, &v20);
  }
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  int v22 = (uint64_t (*)(uint64_t, const void **))___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
  xpc_object_t v23 = &unk_1E6193360;
  xpc_object_t v24 = &block;
  uint64_t v13 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v15 = v13;
  if (v13)
  {
    tlv::throwIfNotEnoughBytes(v13, (const unsigned __int8 *)v13 + v14, (const unsigned __int8 *)4);
    LODWORD(v20) = *(_DWORD *)v15;
    v22((uint64_t)v21, &v20);
  }
  radio::BasebandProperties::toDict((uint64_t *)&v20, (radio::BasebandProperties *)(p_block + 40));
  CFTypeRef v5 = v20;
  uint64_t v34 = (uint64_t)v20;
  _Block_object_dispose(&block, 8);
  if (a1[5]) {
    goto LABEL_14;
  }
LABEL_41:
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8B3A424(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 5, v2, v3);
  JUMPOUT(0x1B8B3A280);
}

void sub_1B8B3A450(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 4, v2, v3);
  JUMPOUT(0x1B8B3A1FCLL);
}

void sub_1B8B3A47C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 3, v2, v3);
  JUMPOUT(0x1B8B3A178);
}

void sub_1B8B3A4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26)
{
  _Block_object_dispose((const void *)(v26 - 120), 8);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a26);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v26 - 128));
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_59(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 41) = *a2;
  return result;
}

uint64_t ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2_62(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 42) = *a2;
  return result;
}

uint64_t ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 44) = *a2;
  return result;
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void radio::QMICommandDriverM20::sendBatteryInfoUpdate(uint64_t a1, char a2, char a3, uint64_t a4)
{
  int v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I Sending battery info update", buf, 2u);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  void v12[2] = ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  void v12[3] = &__block_descriptor_tmp_84_1;
  v12[4] = a1;
  char v15 = a3;
  char v16 = a2;
  __int16 v9 = *(void **)a4;
  if (*(void *)a4) {
    __int16 v9 = _Block_copy(v9);
  }
  uint64_t v10 = (uint64_t *)(a1 + 72);
  int v11 = *(NSObject **)(a4 + 8);
  long long aBlock = v9;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v10, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v73 = v3;
  long long v74 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v73);
  v69[0] = MEMORY[0x1E4F143A8];
  v69[1] = 0x40000000;
  uint64_t v4 = ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  long long v70 = ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  long long v71 = &__block_descriptor_tmp_75;
  char v72 = *(unsigned char *)(a1 + 56);
  CFTypeRef v5 = (char *)*((void *)&v73 + 1);
  int64_t v6 = (char *)v74;
  xpc_object_t v7 = (const void **)*((void *)&v73 + 1);
  if (*((void *)&v73 + 1) != (void)v74)
  {
    xpc_object_t v7 = (const void **)*((void *)&v73 + 1);
    while (*((unsigned char *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v74) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == (const void **)v74)
  {
LABEL_9:
    uint64_t v10 = operator new(0x10uLL);
    int v11 = v10;
    v10[4] = 1;
    *(void *)uint64_t v10 = &unk_1F1260050;
    if ((unint64_t)v6 < *((void *)&v74 + 1))
    {
      *(void *)int64_t v6 = v10;
      uint64_t v12 = (uint64_t)(v6 + 8);
LABEL_22:
      __int16 v9 = (char *)v11 + 9;
      *(void *)&long long v74 = v12;
      uint64_t v4 = v70;
      goto LABEL_23;
    }
    int64_t v13 = v6 - v5;
    uint64_t v14 = (v6 - v5) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      goto LABEL_77;
    }
    uint64_t v16 = *((void *)&v74 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v74 + 1) - (void)v5) >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        goto LABEL_78;
      }
      unint64_t v18 = operator new(8 * v17);
      __int16 v19 = &v18[8 * v14];
      unint64_t v20 = &v18[8 * v17];
      void *v19 = v11;
      uint64_t v12 = (uint64_t)(v19 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((void *)&v73 + 1) = v19;
        *(void *)&long long v74 = v12;
        *((void *)&v74 + 1) = v20;
        if (!v5) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v18 = 0;
      __int16 v19 = (void *)(8 * v14);
      unint64_t v20 = 0;
      *(void *)(8 * v14) = v11;
      uint64_t v12 = 8 * v14 + 8;
      if (v5 == v6) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v13 - 8) < 0x58) {
      goto LABEL_81;
    }
    if ((unint64_t)(v5 - v18) < 0x20) {
      goto LABEL_81;
    }
    unint64_t v41 = ((unint64_t)(v13 - 8) >> 3) + 1;
    uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v43 = &v6[-v42];
    __int16 v19 = (void *)((char *)v19 - v42);
    long long v44 = &v18[8 * v14 - 16];
    CFMutableDictionaryRef v45 = v6 - 16;
    uint64_t v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v47 = *(_OWORD *)v45;
      *(v44 - 1) = *((_OWORD *)v45 - 1);
      _OWORD *v44 = v47;
      v44 -= 2;
      v45 -= 32;
      v46 -= 4;
    }
    while (v46);
    int64_t v6 = v43;
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_81:
      do
      {
        uint64_t v48 = *((void *)v6 - 1);
        v6 -= 8;
        *--__int16 v19 = v48;
      }
      while (v6 != v5);
    }
    CFTypeRef v5 = (char *)*((void *)&v73 + 1);
    *((void *)&v73 + 1) = v19;
    *(void *)&long long v74 = v12;
    *((void *)&v74 + 1) = v20;
    if (!v5) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v8) {
    goto LABEL_76;
  }
  __int16 v9 = v8 + 9;
LABEL_23:
  v4((uint64_t)v69, v9);
  v65[0] = MEMORY[0x1E4F143A8];
  v65[1] = 0x40000000;
  size_t v21 = ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  long long v66 = ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  long long v67 = &__block_descriptor_tmp_77;
  char v68 = *(unsigned char *)(a1 + 57);
  int v22 = (char *)*((void *)&v73 + 1);
  xpc_object_t v23 = (char *)v74;
  xpc_object_t v24 = (const void **)*((void *)&v73 + 1);
  if (*((void *)&v73 + 1) != (void)v74)
  {
    xpc_object_t v24 = (const void **)*((void *)&v73 + 1);
    while (*((unsigned char *)*v24 + 8) != 2)
    {
      if (++v24 == (const void **)v74) {
        goto LABEL_31;
      }
    }
  }
  if (v24 != (const void **)v74)
  {
    if (v25)
    {
      uint64_t v26 = v25 + 9;
      goto LABEL_45;
    }
LABEL_76:
    __cxa_bad_cast();
  }
LABEL_31:
  __int16 v27 = operator new(0x10uLL);
  unint64_t v28 = v27;
  v27[4] = 2;
  *(void *)__int16 v27 = &unk_1F12600A0;
  if ((unint64_t)v23 >= *((void *)&v74 + 1))
  {
    int64_t v30 = v23 - v22;
    uint64_t v31 = (v23 - v22) >> 3;
    unint64_t v32 = v31 + 1;
    if (!((unint64_t)(v31 + 1) >> 61))
    {
      uint64_t v33 = *((void *)&v74 + 1) - (void)v22;
      if ((uint64_t)(*((void *)&v74 + 1) - (void)v22) >> 2 > v32) {
        unint64_t v32 = v33 >> 2;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (!v34)
      {
        long long v35 = 0;
        uint64_t v36 = (void *)(8 * v31);
        uint64_t v37 = 0;
        *(void *)(8 * v31) = v28;
        uint64_t v29 = 8 * v31 + 8;
        if (v22 == v23)
        {
LABEL_42:
          *((void *)&v73 + 1) = v36;
          *(void *)&long long v74 = v29;
          *((void *)&v74 + 1) = v37;
          if (!v22) {
            goto LABEL_44;
          }
LABEL_43:
          operator delete(v22);
          goto LABEL_44;
        }
LABEL_68:
        if ((unint64_t)(v30 - 8) < 0x58) {
          goto LABEL_82;
        }
        if ((unint64_t)(v22 - v35) < 0x20) {
          goto LABEL_82;
        }
        unint64_t v49 = ((unint64_t)(v30 - 8) >> 3) + 1;
        uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        CFTypeRef v51 = &v23[-v50];
        uint64_t v36 = (void *)((char *)v36 - v50);
        uint64_t v52 = &v35[8 * v31 - 16];
        uint64_t v53 = v23 - 16;
        uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          _OWORD *v52 = v55;
          v52 -= 2;
          v53 -= 32;
          v54 -= 4;
        }
        while (v54);
        xpc_object_t v23 = v51;
        if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_82:
          do
          {
            uint64_t v56 = *((void *)v23 - 1);
            v23 -= 8;
            *--uint64_t v36 = v56;
          }
          while (v23 != v22);
        }
        int v22 = (char *)*((void *)&v73 + 1);
        *((void *)&v73 + 1) = v36;
        *(void *)&long long v74 = v29;
        *((void *)&v74 + 1) = v37;
        if (!v22) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      if (!(v34 >> 61))
      {
        long long v35 = operator new(8 * v34);
        uint64_t v36 = &v35[8 * v31];
        uint64_t v37 = &v35[8 * v34];
        void *v36 = v28;
        uint64_t v29 = (uint64_t)(v36 + 1);
        if (v22 == v23) {
          goto LABEL_42;
        }
        goto LABEL_68;
      }
LABEL_78:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_77:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *(void *)xpc_object_t v23 = v27;
  uint64_t v29 = (uint64_t)(v23 + 8);
LABEL_44:
  uint64_t v26 = (char *)v28 + 9;
  *(void *)&long long v74 = v29;
  size_t v21 = v66;
LABEL_45:
  v21((uint64_t)v65, v26);
  uint64_t v60 = v2 + 320;
  uint64_t v61 = QMIServiceMsg::create();
  int v62 = 25000;
  uint64_t v63 = 0;
  unint64_t v64 = 0;
  v57[0] = MEMORY[0x1E4F143A8];
  v57[1] = 1174405120;
  v57[2] = ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
  v57[3] = &__block_descriptor_tmp_81;
  v57[4] = v2;
  uint64_t v38 = *(void **)(a1 + 40);
  if (v38) {
    uint64_t v38 = _Block_copy(v38);
  }
  uint64_t v39 = *(NSObject **)(a1 + 48);
  uint64_t v58 = v38;
  dispatch_object_t object = v39;
  if (v39) {
    dispatch_retain(v39);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15SendBatteryInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61936B8;
  aBlock[4] = v57;
  CFTypeRef v40 = _Block_copy(aBlock);
  unint64_t v64 = v40;
  if (v61)
  {
    qmi::Client::send();
    CFTypeRef v40 = v64;
  }
  if (v40) {
    _Block_release(v40);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v58) {
    _Block_release(v58);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v73);
}

void sub_1B8B3ACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v31);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B8B3ACF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1B8B3AD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3 = a1[4];
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "sending battery info", &cf);
  uint64_t v4 = (const void *)a1[5];
  if (!v4 || !a1[6]) {
    goto LABEL_20;
  }
  CFTypeRef v5 = cf;
  if (cf && (CFRetain(cf), (uint64_t v4 = (const void *)a1[5]) == 0)) {
    int64_t v6 = 0;
  }
  else {
    int64_t v6 = _Block_copy(v4);
  }
  xpc_object_t v7 = a1[6];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_108_0;
  if (v6)
  {
    long long aBlock = _Block_copy(v6);
    CFTypeRef v11 = v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  long long aBlock = 0;
  CFTypeRef v11 = v5;
  if (v5) {
LABEL_11:
  }
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11) {
    CFRelease(v11);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

void radio::QMICommandDriverM20::enableResetSPMIEvent(radio::QMICommandDriverM20 *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)operator new(0x20uLL);
  strcpy(v2, "enable resetting SPMI event");
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v17) = 136315138;
    *(void *)((char *)&v17 + 4) = v2;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v17, 0xCu);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v4 || (v5 = *((void *)this + 9), (int64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v17 = this;
  *((void *)&v17 + 1) = v5;
  unint64_t v18 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  std::string::__init_copy_ctor_external(&__p, v2, 0x1BuLL);
  __int16 v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v9 || (uint64_t v10 = *((void *)this + 9), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v12 = v11;
  int64_t v13 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v17;
  v13->__r_.__value_.__r.__words[2] = (std::string::size_type)v18;
  *((void *)&v17 + 1) = 0;
  unint64_t v18 = 0;
  v13[1] = __p;
  memset(&__p, 0, sizeof(__p));
  uint64_t v14 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v15 = operator new(0x18uLL);
  void *v15 = v13;
  v15[1] = v10;
  _OWORD v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0>(radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_15:
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v16 = v18;
    if (!v18) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
LABEL_11:
  uint64_t v16 = v18;
  if (v18) {
LABEL_12:
  }
    std::__shared_weak_count::__release_weak(v16);
LABEL_13:
  std::__shared_weak_count::__release_weak(v7);
  operator delete(v2);
}

void sub_1B8B3B11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)radio::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    int v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8B3B350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B8B3B36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<radio::QMICommandDriverM20 *,std::shared_ptr<radio::QMICommandDriverM20> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriverM20>(radio::QMICommandDriverM20*)::{lambda(radio::QMICommandDriverM20 *)#1},std::allocator<radio::QMICommandDriverM20>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMICommandDriverM20 *,std::shared_ptr<radio::QMICommandDriverM20> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriverM20>(radio::QMICommandDriverM20*)::{lambda(radio::QMICommandDriverM20 *)#1},std::allocator<radio::QMICommandDriverM20>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<radio::QMICommandDriverM20 *,std::shared_ptr<radio::QMICommandDriverM20> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriverM20>(radio::QMICommandDriverM20*)::{lambda(radio::QMICommandDriverM20 *)#1},std::allocator<radio::QMICommandDriverM20>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEE"
                     "NSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_19QMICommandD"
                                "riverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<radio::QMICommandDriverM20> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriverM20>(radio::QMICommandDriverM20*)::{lambda(radio::QMICommandDriverM20*)#1}::operator() const(radio::QMICommandDriverM20*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F125F920;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5radio13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::cf::insert<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  int v8 = (const void *)valuePtr;
  unint64_t valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!v9) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_1B8B3B774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B3B798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

BOOL ctu::cf::insert<char const*,__CFData const*>(__CFDictionary *a1, const __CFString **a2, const void *a3, uint64_t a4, const __CFAllocator *a5)
{
  CFNumberRef v10 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v10, a2, (const char *)0x8000100, a4, a5);
  uint64_t v7 = v10;
  CFNumberRef v10 = a3;
  if (!a3)
  {
    BOOL v8 = 0;
    if (!v7) {
      return v8;
    }
LABEL_7:
    CFRelease(v7);
    return v8;
  }
  CFRetain(a3);
  BOOL v8 = v7 != 0;
  if (v7) {
    CFDictionaryAddValue(a1, v7, a3);
  }
  CFRelease(a3);
  if (v7) {
    goto LABEL_7;
  }
  return v8;
}

void sub_1B8B3B884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_1B8B3B8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary> const&>(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  CFTypeRef v9 = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v6 = *a3;
  if (v6 && (CFTypeID v7 = CFGetTypeID(v6), v7 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v6;
    CFRetain(v6);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v4 + 16))(v4, &v9, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
}

void sub_1B8B3B988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_1B8B3B9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[4];
  if (!v4)
  {
    uint64_t v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = _Block_copy(v4);
  uint64_t v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  CFTypeRef result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[6];
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16GetWakeReasonIPA8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B3BB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B3BB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B3BB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm15GetWakeReasonV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B3BC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B3BC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B3BCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v4;
  v23[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v23);
  uint64_t v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14[0]) = 0;
    _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Getting field test config", (uint8_t *)v14, 2u);
  }
  uint64_t v18 = v3 + 320;
  uint64_t v19 = QMIServiceMsg::create();
  int v20 = 25000;
  uint64_t v21 = 0;
  int v22 = 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  v14[2] = ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_106_0;
  v14[4] = v3;
  v14[5] = v2[1];
  uint64_t v6 = (std::__shared_weak_count *)v2[2];
  unint64_t v15 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeID v7 = (void *)v2[3];
  if (v7) {
    CFTypeID v7 = _Block_copy(v7);
  }
  uint64_t v16 = v7;
  BOOL v8 = v2[4];
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20GetFieldTestConfigV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193440;
  aBlock[4] = v14;
  CFTypeRef v9 = _Block_copy(aBlock);
  int v22 = v9;
  if (v19)
  {
    qmi::Client::send();
    CFTypeRef v9 = v22;
  }
  if (v9) {
    _Block_release(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    _Block_release(v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v23);
  CFNumberRef v10 = v2[4];
  if (v10) {
    dispatch_release(v10);
  }
  BOOL v11 = (const void *)v2[3];
  if (v11) {
    _Block_release(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)v2[2];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(v2);
  int64_t v13 = (std::__shared_weak_count *)a1[2];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(a1);
}

void sub_1B8B3BF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  uint64_t v26 = v24[4];
  if (v26) {
    dispatch_release(v26);
  }
  __int16 v27 = (const void *)v24[3];
  if (v27) {
    _Block_release(v27);
  }
  unint64_t v28 = (std::__shared_weak_count *)v24[2];
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  operator delete(v24);
  uint64_t v29 = (std::__shared_weak_count *)v23[2];
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  size_t v80 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v19 = v6;
LABEL_57:
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    return;
  }
  CFTypeRef v78 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v5, a2, "getting field test config", &v78);
  CFMutableDictionaryRef v77 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v8 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v77 = Mutable;
  }
  if (v78) {
    CFTypeRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    CFTypeRef v9 = 0;
  }
  if (!v9)
  {
    if (Mutable
       ? ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get
       : 0)
    {
      v75[0] = 0;
      v75[1] = v75;
      v75[2] = 0x2000000000;
      char v76 = 1;
      v73[0] = 0;
      v73[1] = v73;
      v73[2] = 0x2000000000;
      char v74 = 1;
      v71[0] = 0;
      v71[1] = v71;
      v71[2] = 0x2000000000;
      char v72 = 1;
      v69[0] = 0;
      v69[1] = v69;
      void v69[2] = 0x2000000000;
      char v70 = 1;
      v67[0] = 0;
      v67[1] = v67;
      v67[2] = 0x2000000000;
      char v68 = 1;
      v65[0] = 0;
      v65[1] = v65;
      void v65[2] = 0x2000000000;
      char v66 = 1;
      v63[0] = 0;
      v63[1] = v63;
      v63[2] = 0x2000000000;
      char v64 = 1;
      v61[0] = 0;
      v61[1] = v61;
      v61[2] = 0x2000000000;
      char v62 = 1;
      v59[0] = 0;
      v59[1] = v59;
      v59[2] = 0x2000000000;
      char v60 = 1;
      v57[0] = 0;
      v57[1] = v57;
      v57[2] = 0x2000000000;
      char v58 = 1;
      v55[0] = 0;
      v55[1] = v55;
      v55[2] = 0x2000000000;
      char v56 = 1;
      v53[0] = 0;
      v53[1] = v53;
      v53[2] = 0x2000000000;
      char v54 = 1;
      v37[0] = MEMORY[0x1E4F143A8];
      v37[1] = 0x40000000;
      uint64_t v38 = ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke_2;
      uint64_t v39 = &unk_1E6193418;
      CFTypeRef v51 = v53;
      uint64_t v52 = v5;
      CFTypeRef v40 = v75;
      unint64_t v41 = v73;
      uint64_t v42 = v71;
      uint64_t v43 = v69;
      long long v44 = v67;
      CFMutableDictionaryRef v45 = v65;
      uint64_t v46 = v63;
      long long v47 = v61;
      uint64_t v48 = v59;
      unint64_t v49 = v57;
      uint64_t v50 = v55;
      uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
      if (TlvValue)
      {
        *(_DWORD *)&block[8] = 0;
        *(void *)blocunint64_t k = 0;
        bsp::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)(TlvValue + v12), block);
        uint64_t v81 = *(void *)block;
        int v82 = *(_DWORD *)&block[8];
        v38(v37, (unsigned __int8 *)&v81);
      }
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 1174405120;
      int v22 = ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke_103;
      xpc_object_t v23 = &unk_1F125F988;
      CFMutableDictionaryRef v8 = v77;
      xpc_object_t v24 = v75;
      CFTypeRef cf = v77;
      if (v77) {
        CFRetain(v77);
      }
      uint64_t v25 = v73;
      uint64_t v26 = v71;
      __int16 v27 = v69;
      unint64_t v28 = v67;
      uint64_t v29 = v65;
      int64_t v30 = v63;
      uint64_t v31 = v61;
      unint64_t v32 = v59;
      uint64_t v33 = v57;
      unint64_t v34 = v55;
      long long v35 = v53;
      uint64_t v13 = qmi::MessageBase::findTlvValue(a2);
      if (v13)
      {
        *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&void block[4] = v15;
        *(_OWORD *)&block[20] = v15;
        HIWORD(v84) = -21846;
        *(_DWORD *)blocunint64_t k = 0;
        *(_WORD *)&void block[4] = 0;
        *(_DWORD *)&block[20] = 0;
        *(_WORD *)&block[24] = 0;
        *(_WORD *)&block[28] = 0;
        *(void *)&block[8] = 0;
        *(_WORD *)&block[16] = 0;
        *(void *)&block[32] = 0;
        *(void *)&long long v84 = 0;
        *(void *)((char *)&v84 + 6) = 0;
        bsp::tlv::abm::parseField(v13, (const unsigned __int8 *)(v13 + v14), (uint64_t)block);
        v22((uint64_t)v21, (unsigned __int16 *)block);
      }
      if (cf) {
        CFRelease(cf);
      }
      _Block_object_dispose(v53, 8);
      _Block_object_dispose(v55, 8);
      _Block_object_dispose(v57, 8);
      _Block_object_dispose(v59, 8);
      _Block_object_dispose(v61, 8);
      _Block_object_dispose(v63, 8);
      _Block_object_dispose(v65, 8);
      _Block_object_dispose(v67, 8);
      _Block_object_dispose(v69, 8);
      _Block_object_dispose(v71, 8);
      _Block_object_dispose(v73, 8);
      _Block_object_dispose(v75, 8);
    }
  }
  if (a1[7] && a1[8])
  {
    CFTypeRef v16 = v78;
    if (v78) {
      CFRetain(v78);
    }
    if (v8) {
      CFRetain(v8);
    }
    long long v17 = (const void *)a1[7];
    if (v17) {
      uint64_t v18 = _Block_copy(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    int v20 = a1[8];
    *(void *)blocunint64_t k = MEMORY[0x1E4F143A8];
    *(void *)&block[8] = 1174405120;
    *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
    *(void *)&block[24] = &__block_descriptor_tmp_95_1;
    if (v18)
    {
      *(void *)&block[32] = _Block_copy(v18);
      *(void *)&long long v84 = v16;
      if (!v16) {
        goto LABEL_38;
      }
    }
    else
    {
      *(void *)&block[32] = 0;
      *(void *)&long long v84 = v16;
      if (!v16)
      {
LABEL_38:
        *((void *)&v84 + 1) = v8;
        if (v8) {
          CFRetain(v8);
        }
        dispatch_async(v20, block);
        if (*((void *)&v84 + 1)) {
          CFRelease(*((CFTypeRef *)&v84 + 1));
        }
        if ((void)v84) {
          CFRelease((CFTypeRef)v84);
        }
        if (*(void *)&block[32]) {
          _Block_release(*(const void **)&block[32]);
        }
        if (v18) {
          _Block_release(v18);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (v16) {
          CFRelease(v16);
        }
        goto LABEL_52;
      }
    }
    CFRetain(v16);
    goto LABEL_38;
  }
LABEL_52:
  if (v77) {
    CFRelease(v77);
  }
  if (v78) {
    CFRelease(v78);
  }
  uint64_t v19 = v80;
  if (v80) {
    goto LABEL_57;
  }
}

void sub_1B8B3C5C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 3, v2, v3);
  JUMPOUT(0x1B8B3C384);
}

void sub_1B8B3C5F4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v2, 4, v1, v3);
  JUMPOUT(0x1B8B3C264);
}

void sub_1B8B3C650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose((const void *)(v72 - 232), 8);
  _Block_object_dispose((const void *)(v72 - 200), 8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v72 - 168));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v72 - 160));
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v72 - 152);
  _Unwind_Resume(a1);
}

void sub_1B8B3C724(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 152);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke_2(void *a1, unsigned __int8 *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[16];
  int v5 = *a2;
  if (!*a2
    || (*(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0,
        uint64_t v6 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    int v7 = a2[1];
    if (!a2[1]) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v29 = (const char *)&unk_1B8C37E6D;
  if (v5 == 1) {
    uint64_t v29 = "- Invalid";
  }
  int v41 = 136315138;
  uint64_t v42 = v29;
  _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "Failed to read RxDiversityCDMA %s", (uint8_t *)&v41, 0xCu);
  int v7 = a2[1];
  if (a2[1])
  {
LABEL_4:
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
    CFMutableDictionaryRef v8 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int64_t v30 = (const char *)&unk_1B8C37E6D;
      if (v7 == 1) {
        int64_t v30 = "- Invalid";
      }
      int v41 = 136315138;
      uint64_t v42 = v30;
      _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "Failed to read RxDiversityWCDMA %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_5:
  int v9 = a2[2];
  if (!a2[2]
    || (*(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0,
        CFNumberRef v10 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)))
  {
    int v11 = a2[3];
    if (!a2[3]) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v31 = (const char *)&unk_1B8C37E6D;
  if (v9 == 1) {
    uint64_t v31 = "- Invalid";
  }
  int v41 = 136315138;
  uint64_t v42 = v31;
  _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Failed to read RxDiversityLTE %s", (uint8_t *)&v41, 0xCu);
  int v11 = a2[3];
  if (a2[3])
  {
LABEL_8:
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 0;
    int v12 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unint64_t v32 = (const char *)&unk_1B8C37E6D;
      if (v11 == 1) {
        unint64_t v32 = "- Invalid";
      }
      int v41 = 136315138;
      uint64_t v42 = v32;
      _os_log_error_impl(&dword_1B8B00000, v12, OS_LOG_TYPE_ERROR, "Failed to read ARTD %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_9:
  int v13 = a2[4];
  if (!a2[4]
    || (*(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 0,
        int v14 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)))
  {
    int v15 = a2[5];
    if (!a2[5]) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v33 = (const char *)&unk_1B8C37E6D;
  if (v13 == 1) {
    uint64_t v33 = "- Invalid";
  }
  int v41 = 136315138;
  uint64_t v42 = v33;
  _os_log_error_impl(&dword_1B8B00000, v14, OS_LOG_TYPE_ERROR, "Failed to read Tx Antenna %s", (uint8_t *)&v41, 0xCu);
  int v15 = a2[5];
  if (a2[5])
  {
LABEL_12:
    *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = 0;
    CFTypeRef v16 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      unint64_t v34 = (const char *)&unk_1B8C37E6D;
      if (v15 == 1) {
        unint64_t v34 = "- Invalid";
      }
      int v41 = 136315138;
      uint64_t v42 = v34;
      _os_log_error_impl(&dword_1B8B00000, v16, OS_LOG_TYPE_ERROR, "Failed to read UARFCN Lock %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_13:
  int v17 = a2[6];
  if (!a2[6]
    || (*(unsigned char *)(*(void *)(a1[10] + 8) + 24) = 0,
        uint64_t v18 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)))
  {
    int v19 = a2[7];
    if (!a2[7]) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  long long v35 = (const char *)&unk_1B8C37E6D;
  if (v17 == 1) {
    long long v35 = "- Invalid";
  }
  int v41 = 136315138;
  uint64_t v42 = v35;
  _os_log_error_impl(&dword_1B8B00000, v18, OS_LOG_TYPE_ERROR, "Failed to read EARFCN Lock %s", (uint8_t *)&v41, 0xCu);
  int v19 = a2[7];
  if (a2[7])
  {
LABEL_16:
    *(unsigned char *)(*(void *)(a1[11] + 8) + 24) = 0;
    int v20 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = (const char *)&unk_1B8C37E6D;
      if (v19 == 1) {
        uint64_t v36 = "- Invalid";
      }
      int v41 = 136315138;
      uint64_t v42 = v36;
      _os_log_error_impl(&dword_1B8B00000, v20, OS_LOG_TYPE_ERROR, "Failed to read PCI Lock %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_17:
  int v21 = a2[8];
  if (!a2[8]
    || (*(unsigned char *)(*(void *)(a1[12] + 8) + 24) = 0,
        int v22 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)))
  {
    int v23 = a2[9];
    if (!a2[9]) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v37 = (const char *)&unk_1B8C37E6D;
  if (v21 == 1) {
    uint64_t v37 = "- Invalid";
  }
  int v41 = 136315138;
  uint64_t v42 = v37;
  _os_log_error_impl(&dword_1B8B00000, v22, OS_LOG_TYPE_ERROR, "Failed to read Lock Count %s", (uint8_t *)&v41, 0xCu);
  int v23 = a2[9];
  if (a2[9])
  {
LABEL_20:
    *(unsigned char *)(*(void *)(a1[13] + 8) + 24) = 0;
    xpc_object_t v24 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = (const char *)&unk_1B8C37E6D;
      if (v23 == 1) {
        uint64_t v38 = "- Invalid";
      }
      int v41 = 136315138;
      uint64_t v42 = v38;
      _os_log_error_impl(&dword_1B8B00000, v24, OS_LOG_TYPE_ERROR, "Failed to read 5G EARFCN Lock %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_21:
  int v25 = a2[10];
  if (!a2[10]
    || (*(unsigned char *)(*(void *)(a1[14] + 8) + 24) = 0,
        uint64_t v26 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)))
  {
    int v27 = a2[11];
    if (!v27) {
      return;
    }
    goto LABEL_24;
  }
  uint64_t v39 = (const char *)&unk_1B8C37E6D;
  if (v25 == 1) {
    uint64_t v39 = "- Invalid";
  }
  int v41 = 136315138;
  uint64_t v42 = v39;
  _os_log_error_impl(&dword_1B8B00000, v26, OS_LOG_TYPE_ERROR, "Failed to read 5G SCS Lock %s", (uint8_t *)&v41, 0xCu);
  int v27 = a2[11];
  if (v27)
  {
LABEL_24:
    *(unsigned char *)(*(void *)(a1[15] + 8) + 24) = 0;
    unint64_t v28 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v40 = (const char *)&unk_1B8C37E6D;
      if (v27 == 1) {
        CFTypeRef v40 = "- Invalid";
      }
      int v41 = 136315138;
      uint64_t v42 = v40;
      _os_log_error_impl(&dword_1B8B00000, v28, OS_LOG_TYPE_ERROR, "Failed to read uSleep %s", (uint8_t *)&v41, 0xCu);
    }
  }
}

uint64_t ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke_103(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (*(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(result + 128), (CFTypeRef)*MEMORY[0x1E4FB9BA8], *a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 40) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9BB8], a2[1], *v4);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 48) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B98], a2[2], *v4);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 56) + 8) + 24))
  {
    CFAllocatorRef v5 = *v4;
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9BB0], *((unsigned __int8 *)a2 + 8), *v4);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B40], *((unsigned __int8 *)a2 + 9), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9A10], *((unsigned __int8 *)a2 + 10), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9A08], *((unsigned __int8 *)a2 + 11), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B10], *((unsigned __int8 *)a2 + 12), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B58], *((unsigned __int8 *)a2 + 13), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9A18], *((unsigned __int8 *)a2 + 14), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9A38], *((unsigned __int8 *)a2 + 15), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9A28], *((unsigned __int8 *)a2 + 16), v5);
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B08], *((unsigned __int8 *)a2 + 17), v5);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 64) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B38], a2[12], *v4);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 72) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B50], a2[14], *v4);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 80) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B48], *((_DWORD *)a2 + 8), *v4);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 88) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9A20], *((_DWORD *)a2 + 9), *v4);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 96) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B88], *((_DWORD *)a2 + 10), *v4);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 104) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B78], *((_DWORD *)a2 + 11), *v4);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 112) + 8) + 24)) {
    CFTypeRef result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E4FB9B00], *((_DWORD *)a2 + 12), *v4);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 120) + 8) + 24))
  {
    int v6 = a2[26];
    CFAllocatorRef v7 = *v4;
    CFMutableDictionaryRef v8 = *(__CFDictionary **)(v3 + 128);
    int v9 = (const void *)*MEMORY[0x1E4FB9B80];
    return ctu::cf::insert<__CFString const*,int>(v8, v9, v6, v7);
  }
  return result;
}

CFTypeRef __copy_helper_block_e8_128c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 128);
  *(void *)(a1 + 128) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_128c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 128);
  if (v1) {
    CFRelease(v1);
  }
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  CFAllocatorRef v5 = (void *)a2[7];
  if (v5) {
    CFAllocatorRef v5 = _Block_copy(v5);
  }
  int v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20GetFieldTestConfigV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B3D2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B3D2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B3D304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::cf::insert<__CFString const*,int>(__CFDictionary *a1, CFTypeRef cf, int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  int valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v8) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

void sub_1B8B3D3C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B3D3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B3D454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    CFTypeRef result = *(CFTypeRef *)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  CFAllocatorRef v5 = _Block_copy(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v1 = *a1;
  int v111 = v1;
  uint64_t v2 = *v1;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v147 = v3;
  long long v148 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v147);
  v146[0] = 0xAAAAAAAAAAAAAAAALL;
  v146[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v146, (const __CFDictionary *)v1[3]);
  v142[0] = MEMORY[0x1E4F143A8];
  v142[1] = 1174405120;
  __n128 v143 = (uint64_t (*)(uint64_t, char *))___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke;
  uint64_t v144 = &__block_descriptor_tmp_110;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v145, (const ctu::cf::dict_adapter *)v146);
  uint64_t v4 = (char *)*((void *)&v147 + 1);
  CFAllocatorRef v5 = (char *)v148;
  int v6 = (const void **)*((void *)&v147 + 1);
  uint64_t v109 = v2;
  if (*((void *)&v147 + 1) != (void)v148)
  {
    int v6 = (const void **)*((void *)&v147 + 1);
    while (*((unsigned char *)*v6 + 8) != 16)
    {
      if (++v6 == (const void **)v148) {
        goto LABEL_9;
      }
    }
  }
  if (v6 == (const void **)v148)
  {
LABEL_9:
    CFNumberRef v9 = (char *)operator new(0x10uLL);
    BOOL v10 = v9;
    v9[8] = 16;
    *(void *)CFNumberRef v9 = &unk_1F125FB60;
    *(_DWORD *)(v9 + 10) = 0;
    CFNumberRef v8 = v9 + 10;
    *((_WORD *)v9 + 7) = 0;
    if ((unint64_t)v5 < *((void *)&v148 + 1))
    {
      *(void *)CFAllocatorRef v5 = v9;
      *(void *)&long long v148 = v5 + 8;
      goto LABEL_23;
    }
    int64_t v11 = v5 - v4;
    uint64_t v12 = (v5 - v4) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = *((void *)&v148 + 1) - (void)v4;
    if ((uint64_t)(*((void *)&v148 + 1) - (void)v4) >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      CFTypeRef v16 = operator new(8 * v15);
      int v17 = &v16[8 * v12];
      uint64_t v18 = &v16[8 * v15];
      void *v17 = v10;
      uint64_t v19 = (uint64_t)(v17 + 1);
      if (v4 == v5)
      {
LABEL_20:
        *((void *)&v147 + 1) = v17;
        *(void *)&long long v148 = v19;
        *((void *)&v148 + 1) = v18;
        if (!v4)
        {
LABEL_22:
          *(void *)&long long v148 = v19;
          goto LABEL_23;
        }
LABEL_21:
        operator delete(v4);
        goto LABEL_22;
      }
    }
    else
    {
      CFTypeRef v16 = 0;
      int v17 = (void *)(8 * v12);
      uint64_t v18 = 0;
      *(void *)(8 * v12) = v10;
      uint64_t v19 = 8 * v12 + 8;
      if (v4 == v5) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v11 - 8) < 0x58) {
      goto LABEL_170;
    }
    if ((unint64_t)(v4 - v16) < 0x20) {
      goto LABEL_170;
    }
    unint64_t v77 = ((unint64_t)(v11 - 8) >> 3) + 1;
    uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v79 = &v5[-v78];
    int v17 = (void *)((char *)v17 - v78);
    size_t v80 = &v16[8 * v12 - 16];
    uint64_t v81 = v5 - 16;
    uint64_t v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v83 = *(_OWORD *)v81;
      *(v80 - 1) = *((_OWORD *)v81 - 1);
      _OWORD *v80 = v83;
      v80 -= 2;
      v81 -= 32;
      v82 -= 4;
    }
    while (v82);
    CFAllocatorRef v5 = v79;
    if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_170:
      do
      {
        uint64_t v84 = *((void *)v5 - 1);
        v5 -= 8;
        *--int v17 = v84;
      }
      while (v5 != v4);
    }
    uint64_t v4 = (char *)*((void *)&v147 + 1);
    *((void *)&v147 + 1) = v17;
    *(void *)&long long v148 = v19;
    *((void *)&v148 + 1) = v18;
    if (!v4) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  CFNumberRef v8 = v7 + 10;
LABEL_23:
  v143((uint64_t)v142, v8);
  v138[0] = MEMORY[0x1E4F143A8];
  v138[1] = 1174405120;
  unint64_t v139 = ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_111;
  size_t v140 = &__block_descriptor_tmp_115;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v141, (const ctu::cf::dict_adapter *)v146);
  int v20 = (char *)*((void *)&v147 + 1);
  int v21 = (char *)v148;
  int v22 = (const void **)*((void *)&v147 + 1);
  if (*((void *)&v147 + 1) != (void)v148)
  {
    int v22 = (const void **)*((void *)&v147 + 1);
    while (*((unsigned char *)*v22 + 8) != 17)
    {
      if (++v22 == (const void **)v148) {
        goto LABEL_31;
      }
    }
  }
  if (v22 == (const void **)v148)
  {
LABEL_31:
    int v25 = (char *)operator new(0x20uLL);
    uint64_t v26 = v25;
    v25[8] = 17;
    *(void *)int v25 = &unk_1F125FBB0;
    *(void *)(v25 + 12) = 0;
    xpc_object_t v24 = v25 + 12;
    *((_DWORD *)v25 + 6) = 0;
    *((_WORD *)v25 + 10) = 0;
    if ((unint64_t)v21 < *((void *)&v148 + 1))
    {
      *(void *)int v21 = v25;
      *(void *)&long long v148 = v21 + 8;
      goto LABEL_45;
    }
    int64_t v27 = v21 - v20;
    uint64_t v28 = (v21 - v20) >> 3;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v30 = *((void *)&v148 + 1) - (void)v20;
    if ((uint64_t)(*((void *)&v148 + 1) - (void)v20) >> 2 > v29) {
      unint64_t v29 = v30 >> 2;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      if (v31 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v32 = operator new(8 * v31);
      uint64_t v33 = &v32[8 * v28];
      unint64_t v34 = &v32[8 * v31];
      void *v33 = v26;
      uint64_t v35 = (uint64_t)(v33 + 1);
      if (v20 == v21)
      {
LABEL_42:
        *((void *)&v147 + 1) = v33;
        *(void *)&long long v148 = v35;
        *((void *)&v148 + 1) = v34;
        if (!v20)
        {
LABEL_44:
          *(void *)&long long v148 = v35;
          goto LABEL_45;
        }
LABEL_43:
        operator delete(v20);
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = (void *)(8 * v28);
      unint64_t v34 = 0;
      *(void *)(8 * v28) = v26;
      uint64_t v35 = 8 * v28 + 8;
      if (v20 == v21) {
        goto LABEL_42;
      }
    }
    if ((unint64_t)(v27 - 8) < 0x58) {
      goto LABEL_171;
    }
    if ((unint64_t)(v20 - v32) < 0x20) {
      goto LABEL_171;
    }
    unint64_t v85 = ((unint64_t)(v27 - 8) >> 3) + 1;
    uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
    size_t v87 = &v21[-v86];
    uint64_t v33 = (void *)((char *)v33 - v86);
    int v88 = &v32[8 * v28 - 16];
    uint64_t v89 = v21 - 16;
    uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v91 = *(_OWORD *)v89;
      *(v88 - 1) = *((_OWORD *)v89 - 1);
      *int v88 = v91;
      v88 -= 2;
      v89 -= 32;
      v90 -= 4;
    }
    while (v90);
    int v21 = v87;
    if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_171:
      do
      {
        uint64_t v92 = *((void *)v21 - 1);
        v21 -= 8;
        *--uint64_t v33 = v92;
      }
      while (v21 != v20);
    }
    int v20 = (char *)*((void *)&v147 + 1);
    *((void *)&v147 + 1) = v33;
    *(void *)&long long v148 = v35;
    *((void *)&v148 + 1) = v34;
    if (!v20) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (!v23) {
    __cxa_bad_cast();
  }
  xpc_object_t v24 = v23 + 12;
LABEL_45:
  v139((uint64_t)v138, v24);
  v134[0] = MEMORY[0x1E4F143A8];
  v134[1] = 1174405120;
  int v135 = (uint64_t (*)(uint64_t, char *))___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_116;
  unint64_t v136 = &__block_descriptor_tmp_120;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v137, (const ctu::cf::dict_adapter *)v146);
  uint64_t v36 = (const void **)*((void *)&v147 + 1);
  if (*((void *)&v147 + 1) != (void)v148)
  {
    while (*((unsigned char *)*v36 + 8) != 18)
    {
      if (++v36 == (const void **)v148) {
        goto LABEL_52;
      }
    }
  }
  if (v36 == (const void **)v148)
  {
LABEL_52:
    uint64_t v38 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::TxAntennaConfig>(&v147, 18);
  }
  else
  {
    if (!v37) {
      __cxa_bad_cast();
    }
    uint64_t v38 = v37 + 10;
  }
  v135((uint64_t)v134, v38);
  v130[0] = MEMORY[0x1E4F143A8];
  v130[1] = 1174405120;
  uint64_t v131 = ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_121;
  unint64_t v132 = &__block_descriptor_tmp_125;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v133, (const ctu::cf::dict_adapter *)v146);
  CFTypeRef v40 = (char *)*((void *)&v147 + 1);
  uint64_t v39 = (char *)v148;
  int v41 = (const void **)*((void *)&v147 + 1);
  if (*((void *)&v147 + 1) != (void)v148)
  {
    int v41 = (const void **)*((void *)&v147 + 1);
    while (*((unsigned char *)*v41 + 8) != 19)
    {
      if (++v41 == (const void **)v148) {
        goto LABEL_61;
      }
    }
  }
  if (v41 == (const void **)v148)
  {
LABEL_61:
    long long v44 = operator new(0x28uLL);
    CFMutableDictionaryRef v45 = v44;
    v44[8] = 19;
    *((_WORD *)v44 + 6) = 0;
    uint64_t v43 = v44 + 12;
    *(void *)long long v44 = &unk_1F125FC50;
    *((void *)v44 + 2) = 0;
    *((void *)v44 + 3) = 0;
    *((_DWORD *)v44 + 8) = 0;
    if ((unint64_t)v39 < *((void *)&v148 + 1))
    {
      *(void *)uint64_t v39 = v44;
      *(void *)&long long v148 = v39 + 8;
      goto LABEL_75;
    }
    int64_t v46 = v39 - v40;
    uint64_t v47 = (v39 - v40) >> 3;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v49 = *((void *)&v148 + 1) - (void)v40;
    if ((uint64_t)(*((void *)&v148 + 1) - (void)v40) >> 2 > v48) {
      unint64_t v48 = v49 >> 2;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      if (v50 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      CFTypeRef v51 = operator new(8 * v50);
      uint64_t v52 = &v51[8 * v47];
      uint64_t v53 = &v51[8 * v50];
      void *v52 = v45;
      uint64_t v54 = (uint64_t)(v52 + 1);
      if (v40 == v39)
      {
LABEL_72:
        *((void *)&v147 + 1) = v52;
        *(void *)&long long v148 = v54;
        *((void *)&v148 + 1) = v53;
        if (!v40)
        {
LABEL_74:
          *(void *)&long long v148 = v54;
          goto LABEL_75;
        }
LABEL_73:
        operator delete(v40);
        goto LABEL_74;
      }
    }
    else
    {
      CFTypeRef v51 = 0;
      uint64_t v52 = (void *)(8 * v47);
      uint64_t v53 = 0;
      *(void *)(8 * v47) = v45;
      uint64_t v54 = 8 * v47 + 8;
      if (v40 == v39) {
        goto LABEL_72;
      }
    }
    if ((unint64_t)(v46 - 8) < 0x58) {
      goto LABEL_172;
    }
    if ((unint64_t)(v40 - v51) < 0x20) {
      goto LABEL_172;
    }
    unint64_t v93 = ((unint64_t)(v46 - 8) >> 3) + 1;
    uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v95 = &v39[-v94];
    uint64_t v52 = (void *)((char *)v52 - v94);
    long long v96 = &v51[8 * v47 - 16];
    long long v97 = v39 - 16;
    uint64_t v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v99 = *(_OWORD *)v97;
      *(v96 - 1) = *((_OWORD *)v97 - 1);
      *long long v96 = v99;
      v96 -= 2;
      v97 -= 32;
      v98 -= 4;
    }
    while (v98);
    uint64_t v39 = v95;
    if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_172:
      do
      {
        uint64_t v100 = *((void *)v39 - 1);
        v39 -= 8;
        *--uint64_t v52 = v100;
      }
      while (v39 != v40);
    }
    CFTypeRef v40 = (char *)*((void *)&v147 + 1);
    *((void *)&v147 + 1) = v52;
    *(void *)&long long v148 = v54;
    *((void *)&v148 + 1) = v53;
    if (!v40) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (!v42) {
    __cxa_bad_cast();
  }
  uint64_t v43 = v42 + 12;
LABEL_75:
  v131((uint64_t)v130, (uint64_t)v43);
  v126[0] = MEMORY[0x1E4F143A8];
  v126[1] = 1174405120;
  size_t v127 = (uint64_t (*)(uint64_t, char *))___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_126;
  size_t v128 = &__block_descriptor_tmp_130;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v129, (const ctu::cf::dict_adapter *)v146);
  char v56 = (char *)*((void *)&v147 + 1);
  long long v55 = (char *)v148;
  uint64_t v57 = (const void **)*((void *)&v147 + 1);
  if (*((void *)&v147 + 1) != (void)v148)
  {
    uint64_t v57 = (const void **)*((void *)&v147 + 1);
    while (*((unsigned char *)*v57 + 8) != 20)
    {
      if (++v57 == (const void **)v148) {
        goto LABEL_83;
      }
    }
  }
  if (v57 == (const void **)v148)
  {
LABEL_83:
    char v60 = operator new(0x10uLL);
    uint64_t v61 = v60;
    v60[8] = 20;
    *(void *)char v60 = &unk_1F125FCA0;
    *((_WORD *)v60 + 5) = 0;
    long long v59 = v60 + 10;
    if ((unint64_t)v55 < *((void *)&v148 + 1))
    {
      *(void *)long long v55 = v60;
      *(void *)&long long v148 = v55 + 8;
      goto LABEL_97;
    }
    int64_t v62 = v55 - v56;
    uint64_t v63 = (v55 - v56) >> 3;
    unint64_t v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v65 = *((void *)&v148 + 1) - (void)v56;
    if ((uint64_t)(*((void *)&v148 + 1) - (void)v56) >> 2 > v64) {
      unint64_t v64 = v65 >> 2;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v66 = v64;
    }
    if (v66)
    {
      if (v66 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v67 = operator new(8 * v66);
      char v68 = &v67[8 * v63];
      long long v69 = &v67[8 * v66];
      void *v68 = v61;
      uint64_t v70 = (uint64_t)(v68 + 1);
      if (v56 == v55)
      {
LABEL_94:
        *((void *)&v147 + 1) = v68;
        *(void *)&long long v148 = v70;
        *((void *)&v148 + 1) = v69;
        if (!v56)
        {
LABEL_96:
          *(void *)&long long v148 = v70;
          goto LABEL_97;
        }
LABEL_95:
        operator delete(v56);
        goto LABEL_96;
      }
    }
    else
    {
      long long v67 = 0;
      char v68 = (void *)(8 * v63);
      long long v69 = 0;
      *(void *)(8 * v63) = v61;
      uint64_t v70 = 8 * v63 + 8;
      if (v56 == v55) {
        goto LABEL_94;
      }
    }
    if ((unint64_t)(v62 - 8) < 0x58) {
      goto LABEL_173;
    }
    if ((unint64_t)(v56 - v67) < 0x20) {
      goto LABEL_173;
    }
    unint64_t v101 = ((unint64_t)(v62 - 8) >> 3) + 1;
    uint64_t v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v103 = &v55[-v102];
    char v68 = (void *)((char *)v68 - v102);
    size_t v104 = &v67[8 * v63 - 16];
    int v105 = v55 - 16;
    uint64_t v106 = v101 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v107 = *(_OWORD *)v105;
      *(v104 - 1) = *((_OWORD *)v105 - 1);
      _OWORD *v104 = v107;
      v104 -= 2;
      v105 -= 32;
      v106 -= 4;
    }
    while (v106);
    long long v55 = v103;
    if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_173:
      do
      {
        uint64_t v108 = *((void *)v55 - 1);
        v55 -= 8;
        *--char v68 = v108;
      }
      while (v55 != v56);
    }
    char v56 = (char *)*((void *)&v147 + 1);
    *((void *)&v147 + 1) = v68;
    *(void *)&long long v148 = v70;
    *((void *)&v148 + 1) = v69;
    if (!v56) {
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  if (!v58) {
    __cxa_bad_cast();
  }
  long long v59 = v58 + 10;
LABEL_97:
  v127((uint64_t)v126, v59);
  long long v71 = *(NSObject **)(v109 + 40);
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v71, OS_LOG_TYPE_DEFAULT, "#I Setting field test config", buf, 2u);
  }
  uint64_t v121 = v109 + 320;
  uint64_t v122 = QMIServiceMsg::create();
  int v123 = 25000;
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v113 = 1174405120;
  int v114 = ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_131;
  uint64_t v115 = &__block_descriptor_tmp_135;
  uint64_t v116 = v109;
  uint64_t v117 = v1[1];
  uint64_t v72 = (std::__shared_weak_count *)v1[2];
  int v118 = v72;
  if (v72) {
    atomic_fetch_add_explicit(&v72->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v73 = (void *)v1[4];
  if (v73) {
    long long v73 = _Block_copy(v73);
  }
  uint64_t v119 = v73;
  char v74 = v1[5];
  dispatch_object_t object = v74;
  if (v74) {
    dispatch_retain(v74);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20SetFieldTestConfigV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193468;
  aBlock[4] = buf;
  size_t v75 = _Block_copy(aBlock);
  uint64_t v125 = v75;
  if (v122)
  {
    qmi::Client::send();
    size_t v75 = v125;
  }
  if (v75) {
    _Block_release(v75);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v119) {
    _Block_release(v119);
  }
  if (v118) {
    std::__shared_weak_count::__release_weak(v118);
  }
  MEMORY[0x1BA9C7760](v129);
  MEMORY[0x1BA9C7760](v133);
  MEMORY[0x1BA9C7760](v137);
  MEMORY[0x1BA9C7760](v141);
  MEMORY[0x1BA9C7760](v145);
  MEMORY[0x1BA9C7760](v146);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v147);
  std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](&v111);
  char v76 = (std::__shared_weak_count *)a1[2];
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
  operator delete(a1);
}

void sub_1B8B3E2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,dispatch_object_t object,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (a27) {
    qmi::Client::send();
  }
  if (a30) {
    _Block_release(a30);
  }
  MEMORY[0x1BA9C7760](v30);
  MEMORY[0x1BA9C7760](a10);
  MEMORY[0x1BA9C7760](a11);
  MEMORY[0x1BA9C7760](a13);
  MEMORY[0x1BA9C7760](a14);
  MEMORY[0x1BA9C7760](v31 - 208);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v31 - 192));
  std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](&a16);
  uint64_t v33 = (std::__shared_weak_count *)__p[2];
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B8B3E40C()
{
}

void sub_1B8B3E414()
{
}

void **std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    long long v3 = v2[5];
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = (const void *)v2[4];
    if (v4) {
      _Block_release(v4);
    }
    CFAllocatorRef v5 = (const void *)v2[3];
    if (v5) {
      CFRelease(v5);
    }
    int v6 = (std::__shared_weak_count *)v2[2];
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke(uint64_t a1, _WORD *a2)
{
  long long v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9BA8]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9BB8]);
  uint64_t result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B98]);
  a2[2] = result;
  return result;
}

uint64_t __copy_helper_block_e8_32c27_ZTSN3ctu2cf12dict_adapterE(uint64_t a1, uint64_t a2)
{
  return ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 32), (const ctu::cf::dict_adapter *)(a2 + 32));
}

void __destroy_helper_block_e8_32c27_ZTSN3ctu2cf12dict_adapterE()
{
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_111(uint64_t a1, unsigned char *a2)
{
  long long v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9BB0]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B40]);
  a2[2] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9A10]);
  a2[3] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9A08]);
  a2[4] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B10]);
  a2[5] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B58]);
  a2[6] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9A18]);
  a2[7] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9A38]);
  a2[8] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9A28]);
  uint64_t result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B08]);
  a2[9] = result;
  return result;
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_116(uint64_t a1, _WORD *a2)
{
  uint64_t result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9B38]);
  *a2 = result;
  return result;
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_121(uint64_t a1, uint64_t a2)
{
  long long v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *(_WORD *)a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9B50]);
  *(_DWORD *)(a2 + 4) = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B48]);
  *(_DWORD *)(a2 + 8) = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9A20]);
  *(_DWORD *)(a2 + 12) = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B88]);
  *(_DWORD *)(a2 + 16) = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B78]);
  uint64_t result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9B00]);
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_126(uint64_t a1, _WORD *a2)
{
  uint64_t result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9B80]);
  *a2 = result;
  return result;
}

void ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_131(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    uint64_t v14 = v6;
    if (v6)
    {
      CFAllocatorRef v7 = v6;
      if (!a1[5])
      {
LABEL_25:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting field test config", &cf);
      CFNumberRef v8 = (const void *)a1[7];
      if (!v8 || !a1[8])
      {
LABEL_23:
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_25;
      }
      CFTypeRef v9 = cf;
      if (cf && (CFRetain(cf), (CFNumberRef v8 = (const void *)a1[7]) == 0)) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = _Block_copy(v8);
      }
      int64_t v11 = a1[8];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_108_0;
      if (v10)
      {
        long long aBlock = _Block_copy(v10);
        CFTypeRef v17 = v9;
        if (!v9) {
          goto LABEL_15;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v17 = v9;
        if (!v9)
        {
LABEL_15:
          dispatch_async(v11, block);
          if (v17) {
            CFRelease(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v10) {
            _Block_release(v10);
          }
          if (v9) {
            CFRelease(v9);
          }
          goto LABEL_23;
        }
      }
      CFRetain(v9);
      goto LABEL_15;
    }
  }
}

void sub_1B8B3E980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfigV2>::getSize()
{
  return 9;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfigV2>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *a2 = v3 + 9;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfigV2>::clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F125FB60;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  *((_WORD *)result + 7) = *(_WORD *)(a1 + 14);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigV2>::getSize()
{
  return 17;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigV2>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 12);
  *(unsigned char *)(v3 + 4) = *(unsigned char *)(result + 13);
  *(unsigned char *)(v3 + 5) = *(unsigned char *)(result + 14);
  *(unsigned char *)(v3 + 6) = *(unsigned char *)(result + 15);
  *(unsigned char *)(v3 + 7) = *(unsigned char *)(result + 16);
  *(unsigned char *)(v3 + 8) = *(unsigned char *)(result + 17);
  *(unsigned char *)(v3 + 9) = *(unsigned char *)(result + 18);
  *(unsigned char *)(v3 + 10) = *(unsigned char *)(result + 19);
  *(unsigned char *)(v3 + 11) = *(unsigned char *)(result + 20);
  *(unsigned char *)(v3 + 12) = *(unsigned char *)(result + 21);
  *(_DWORD *)(v3 + 13) = *(_DWORD *)(result + 24);
  *a2 = v3 + 17;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 14;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigV2>::clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)char v2 = &unk_1F125FBB0;
  __n128 result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  return result;
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::TxAntennaConfig>(void *a1, char a2)
{
  uint64_t v4 = operator new(0x10uLL);
  uint64_t v5 = v4;
  v4[8] = a2;
  *(void *)uint64_t v4 = &unk_1F125FC00;
  *((_WORD *)v4 + 5) = 0;
  int v6 = v4 + 10;
  CFNumberRef v8 = (char *)a1[2];
  unint64_t v7 = a1[3];
  CFTypeRef v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(void *)CFNumberRef v8 = v4;
    uint64_t v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  int64_t v11 = (char *)a1[1];
  uint64_t v12 = (v8 - v11) >> 3;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v7 - (void)v11;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    CFTypeRef v16 = (char *)operator new(8 * v15);
    CFTypeRef v17 = &v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    *(void *)CFTypeRef v17 = v5;
    uint64_t v10 = (uint64_t)(v17 + 8);
    uint64_t v19 = (char *)(v8 - v11);
    if (v8 == v11) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  CFTypeRef v16 = 0;
  CFTypeRef v17 = (char *)(8 * v12);
  uint64_t v18 = 0;
  *(void *)(8 * v12) = v5;
  uint64_t v10 = 8 * v12 + 8;
  uint64_t v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v11 - v16) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v9 = &v8[-v22];
    v17 -= v22;
    int v23 = &v16[8 * v12 - 16];
    xpc_object_t v24 = (long long *)(v8 - 16);
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)int v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    CFTypeRef v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9) {
    operator delete(v9);
  }
LABEL_23:
  a1[2] = v10;
  return v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfig>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfig>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F125FC00;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARFCNLockConfig>::getSize()
{
  return 25;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARFCNLockConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 12);
  *(_DWORD *)(v3 + 5) = *(_DWORD *)(result + 16);
  *(_DWORD *)(v3 + 9) = *(_DWORD *)(result + 20);
  *(_DWORD *)(v3 + 13) = *(_DWORD *)(result + 24);
  *(_DWORD *)(v3 + 17) = *(_DWORD *)(result + 28);
  *(_DWORD *)(v3 + 21) = *(_DWORD *)(result + 32);
  *a2 = v3 + 25;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 22;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARFCNLockConfig>::clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)char v2 = &unk_1F125FC50;
  __n128 result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  *(void *)(v2 + 28) = *(void *)(a1 + 28);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SleepConfig>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SleepConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SleepConfig>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F125FCA0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20SetFieldTestConfigV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B3EF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B3EF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B3EFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke(void ***a1)
{
  uint64_t v1 = a1;
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v72 = v4;
  long long v73 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v72);
  v71[0] = 0xAAAAAAAAAAAAAAAALL;
  v71[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v71, (const __CFDictionary *)v2[1]);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v71, (const __CFString *)*MEMORY[0x1E4FB9BA0]);
  int v6 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v71, (const __CFString *)*MEMORY[0x1E4FB9A40]);
  unint64_t v7 = v3[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = Int;
    LOWORD(v79) = 1024;
    *(_DWORD *)((char *)&v79 + 2) = v6;
    _os_log_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEFAULT, "#I Request RF Self Test: measure type = %d, test type = %d", buf, 0xEu);
  }
  if ((Int & 0x80000000) == 0 && (v6 & 0x80000000) == 0)
  {
    CFTypeRef v9 = (const void **)*((void *)&v72 + 1);
    CFNumberRef v8 = (const void **)v73;
    uint64_t v10 = (const void **)*((void *)&v72 + 1);
    if (*((void *)&v72 + 1) != (void)v73)
    {
      uint64_t v10 = (const void **)*((void *)&v72 + 1);
      while (*((unsigned char *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v73) {
          goto LABEL_18;
        }
      }
    }
    if (v10 != (const void **)v73)
    {
      if (!v13) {
        __cxa_bad_cast();
      }
      v13[9] = Int;
      if (v9 != v8)
      {
LABEL_59:
        while (*((unsigned char *)*v9 + 8) != 16)
        {
          if (++v9 == v8) {
            goto LABEL_61;
          }
        }
        if (v9 != v8)
        {
          if (!v57) {
            __cxa_bad_cast();
          }
          uint64_t v49 = v57 + 9;
          goto LABEL_75;
        }
      }
LABEL_61:
      uint64_t v36 = operator new(0x10uLL);
      uint64_t v37 = v36;
      v36[4] = 16;
      *(void *)uint64_t v36 = &unk_1F125FDA0;
      if ((unint64_t)v8 < *((void *)&v73 + 1))
      {
        char *v8 = v36;
        uint64_t v38 = (uint64_t)(v8 + 1);
LABEL_74:
        uint64_t v49 = (char *)v37 + 9;
        *(void *)&long long v73 = v38;
LABEL_75:
        unsigned char *v49 = v6;
        uint64_t v69 = QMIServiceMsg::create();
        *(void *)long long buf = MEMORY[0x1E4F143A8];
        uint64_t v79 = 1174405120;
        size_t v80 = ___ZZN5radio19QMICommandDriverM2017sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEEENK3__0clEv_block_invoke;
        uint64_t v81 = &__block_descriptor_tmp_146_0;
        long long aBlock = v3;
        unint64_t v50 = (void *)v2[2];
        if (v50) {
          unint64_t v50 = _Block_copy(v50);
        }
        CFTypeRef v83 = v50;
        CFTypeRef v51 = v2[3];
        CFTypeRef v84 = v51;
        if (v51) {
          dispatch_retain(v51);
        }
        *(void *)&long long __p = MEMORY[0x1E4F143A8];
        *((void *)&__p + 1) = 0x40000000;
        size_t v75 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17TriggerRFSelfTest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        char v76 = &unk_1E6193490;
        unint64_t v77 = buf;
        uint64_t v52 = _Block_copy(&__p);
        uint64_t v70 = v52;
        if (v69)
        {
          qmi::Client::send();
          uint64_t v52 = v70;
        }
        if (v52) {
          _Block_release(v52);
        }
        if (v84) {
          dispatch_release((dispatch_object_t)v84);
        }
        if (v83) {
          _Block_release(v83);
        }
        goto LABEL_87;
      }
      uint64_t v39 = (char *)*((void *)&v72 + 1);
      CFTypeRef v40 = (char *)v8 - *((void *)&v72 + 1);
      uint64_t v41 = ((uint64_t)v8 - *((void *)&v72 + 1)) >> 3;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v43 = *((void *)&v73 + 1) - *((void *)&v72 + 1);
      if ((uint64_t)(*((void *)&v73 + 1) - *((void *)&v72 + 1)) >> 2 > v42) {
        unint64_t v42 = v43 >> 2;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        if (v44 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        CFMutableDictionaryRef v45 = operator new(8 * v44);
        int64_t v46 = &v45[8 * v41];
        uint64_t v47 = &v45[8 * v44];
        void *v46 = v37;
        uint64_t v38 = (uint64_t)(v46 + 1);
        unint64_t v48 = (char *)((char *)v8 - v39);
        if (v8 == (const void **)v39)
        {
LABEL_72:
          *((void *)&v72 + 1) = v46;
          *(void *)&long long v73 = v38;
          *((void *)&v73 + 1) = v47;
          if (!v8) {
            goto LABEL_74;
          }
LABEL_73:
          operator delete(v8);
          goto LABEL_74;
        }
      }
      else
      {
        CFMutableDictionaryRef v45 = 0;
        int64_t v46 = (void *)(8 * v41);
        uint64_t v47 = 0;
        *(void *)(8 * v41) = v37;
        uint64_t v38 = 8 * v41 + 8;
        unint64_t v48 = (char *)((char *)v8 - v39);
        if (v8 == (const void **)v39) {
          goto LABEL_72;
        }
      }
      unint64_t v58 = (unint64_t)(v48 - 8);
      if (v58 >= 0x58)
      {
        if ((unint64_t)((char *)v8 - v45 - (void)v40) >= 0x20)
        {
          uint64_t v60 = (v58 >> 3) + 1;
          uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
          long long v59 = &v8[v61 / 0xFFFFFFFFFFFFFFF8];
          int64_t v46 = (void *)((char *)v46 - v61);
          int64_t v62 = &v45[8 * v41 - 16];
          uint64_t v63 = v8 - 2;
          uint64_t v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v65 = *(_OWORD *)v63;
            *(v62 - 1) = *((_OWORD *)v63 - 1);
            _OWORD *v62 = v65;
            v62 -= 2;
            v63 -= 4;
            v64 -= 4;
          }
          while (v64);
          if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_109:
            CFNumberRef v8 = (const void **)*((void *)&v72 + 1);
            *((void *)&v72 + 1) = v46;
            *(void *)&long long v73 = v38;
            *((void *)&v73 + 1) = v47;
            if (!v8) {
              goto LABEL_74;
            }
            goto LABEL_73;
          }
        }
        else
        {
          long long v59 = v8;
        }
      }
      else
      {
        long long v59 = v8;
      }
      do
      {
        uint64_t v66 = (uint64_t)*--v59;
        *--int64_t v46 = v66;
      }
      while (v59 != (const void **)v39);
      goto LABEL_109;
    }
LABEL_18:
    long long v67 = v1;
    uint64_t v14 = operator new(0x10uLL);
    unint64_t v15 = v14;
    v14[4] = 1;
    *(void *)uint64_t v14 = &unk_1F125FD50;
    if ((unint64_t)v8 < *((void *)&v73 + 1))
    {
      char *v8 = v14;
      uint64_t v16 = (uint64_t)(v8 + 1);
      goto LABEL_58;
    }
    int64_t v17 = (char *)v8 - (char *)v9;
    uint64_t v18 = v8 - v9;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = *((void *)&v73 + 1) - (void)v9;
    if ((uint64_t)(*((void *)&v73 + 1) - (void)v9) >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = operator new(8 * v21);
      int v23 = &v22[8 * v18];
      xpc_object_t v24 = &v22[8 * v21];
      void *v23 = v15;
      uint64_t v16 = (uint64_t)(v23 + 1);
      if (v9 == v8) {
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v22 = 0;
      int v23 = (void *)(8 * v18);
      xpc_object_t v24 = 0;
      *(void *)(8 * v18) = v15;
      uint64_t v16 = 8 * v18 + 8;
      if (v9 == v8)
      {
LABEL_56:
        *((void *)&v72 + 1) = v23;
        *(void *)&long long v73 = v16;
        *((void *)&v73 + 1) = v24;
        if (v9) {
          operator delete(v9);
        }
LABEL_58:
        *(void *)&long long v73 = v16;
        CFTypeRef v9 = (const void **)*((void *)&v72 + 1);
        CFNumberRef v8 = (const void **)v16;
        uint64_t v1 = v67;
        *((unsigned char *)v15 + 9) = Int;
        if (v9 != v8) {
          goto LABEL_59;
        }
        goto LABEL_61;
      }
    }
    if ((unint64_t)(v17 - 8) < 0x58) {
      goto LABEL_119;
    }
    if ((unint64_t)((char *)v9 - v22) < 0x20) {
      goto LABEL_119;
    }
    unint64_t v28 = ((unint64_t)(v17 - 8) >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v30 = &v8[v29 / 0xFFFFFFFFFFFFFFF8];
    int v23 = (void *)((char *)v23 - v29);
    uint64_t v31 = &v22[8 * v18 - 16];
    unint64_t v32 = v8 - 2;
    uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      _OWORD *v31 = v34;
      v31 -= 2;
      v32 -= 4;
      v33 -= 4;
    }
    while (v33);
    CFNumberRef v8 = v30;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_119:
      do
      {
        uint64_t v35 = (uint64_t)*--v8;
        *--int v23 = v35;
      }
      while (v8 != v9);
    }
    CFTypeRef v9 = (const void **)*((void *)&v72 + 1);
    goto LABEL_56;
  }
  if (!v2[2] || !v2[3]) {
    goto LABEL_87;
  }
  HIBYTE(v75) = 12;
  strcpy((char *)&__p, "Invalid type");
  CreateError();
  int64_t v11 = (const void *)v2[2];
  if (v11) {
    uint64_t v12 = _Block_copy(v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v25 = v2[3];
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v79 = 1174405120;
  size_t v80 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke;
  uint64_t v81 = &__block_descriptor_tmp_140_1;
  if (v12)
  {
    long long v26 = _Block_copy(v12);
    uint64_t v27 = cf;
    long long aBlock = v26;
    CFTypeRef v83 = cf;
    if (!cf) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v27 = cf;
  long long aBlock = 0;
  CFTypeRef v83 = cf;
  if (cf) {
LABEL_35:
  }
    CFRetain(v27);
LABEL_36:
  CFTypeRef v84 = 0;
  dispatch_async(v25, buf);
  if (v84) {
    CFRelease(v84);
  }
  if (v83) {
    CFRelease(v83);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12) {
    _Block_release(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v75) < 0) {
    operator delete((void *)__p);
  }
LABEL_87:
  MEMORY[0x1BA9C7760](v71);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v72);
  uint64_t v53 = v2[3];
  if (v53) {
    dispatch_release(v53);
  }
  uint64_t v54 = (const void *)v2[2];
  if (v54) {
    _Block_release(v54);
  }
  long long v55 = (const void *)v2[1];
  if (v55) {
    CFRelease(v55);
  }
  operator delete(v2);
  char v56 = (std::__shared_weak_count *)v1[2];
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  operator delete(v1);
}

void sub_1B8B3F83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *aBlock,dispatch_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZN5radio19QMICommandDriverM2017sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEEENK3__0clEv_block_invoke(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "triggering RF Self Test", &cf);
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  unint64_t v7 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v6, (const unsigned __int8 *)1);
    unsigned int v8 = *(unsigned __int8 *)v7;
  }
  else
  {
    unsigned int v8 = 0;
  }
  CFTypeRef v9 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  int64_t v11 = v9;
  if (v9)
  {
    tlv::throwIfNotEnoughBytes(v9, (const unsigned __int8 *)v9 + v10, (const unsigned __int8 *)2);
    int v12 = *(unsigned __int16 *)v11;
    memset(&__p, 0, sizeof(__p));
    if (!v8) {
      goto LABEL_16;
    }
  }
  else
  {
    int v12 = 0;
    memset(&__p, 0, sizeof(__p));
    if (!v8) {
      goto LABEL_16;
    }
  }
  block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_1B8C2EF30;
  strcpy(block.__r_.__value_.__l.__data_, "Failed to trigger RF Self Test: ");
  if (v8 > 7) {
    unint64_t v13 = "RFSelfTestErrorCode::kSuccess";
  }
  else {
    unint64_t v13 = off_1E6193748[(char)(v8 - 1)];
  }
  size_t v14 = strlen(v13);
  unint64_t v15 = std::string::append(&block, v13, v14);
  std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
  v34[0] = v15->__r_.__value_.__l.__size_;
  *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = v16;
  __p.__r_.__value_.__l.__size_ = v34[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v34 + 7);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v17;
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(block.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_error_impl(&dword_1B8B00000, v18, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (cf) {
      uint64_t v29 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v29 = 0;
    }
    if (v29) {
      goto LABEL_20;
    }
    goto LABEL_64;
  }
LABEL_16:
  if (cf) {
    unint64_t v19 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    unint64_t v19 = 0;
  }
  if (v19) {
    goto LABEL_20;
  }
LABEL_64:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_20;
    }
    std::string::__init_copy_ctor_external(&v31, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_20;
    }
    std::string v31 = __p;
  }
  CreateError();
  CFTypeRef v30 = cf;
  CFTypeRef cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
  block.__r_.__value_.__r.__words[0] = 0;
  if (v30)
  {
    CFRelease(v30);
    if (block.__r_.__value_.__r.__words[0]) {
      CFRelease(block.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
LABEL_20:
  if (!a1[5] || !a1[6]) {
    goto LABEL_52;
  }
  v34[0] = 0;
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v22 = Mutable;
  if (Mutable) {
    v34[0] = Mutable;
  }
  ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9B60], v12, v20);
  CFTypeRef v23 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v22) {
    CFRetain(v22);
  }
  xpc_object_t v24 = (const void *)a1[5];
  if (v24) {
    uint64_t v25 = _Block_copy(v24);
  }
  else {
    uint64_t v25 = 0;
  }
  long long v26 = a1[6];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
  uint64_t v36 = &__block_descriptor_tmp_95_1;
  if (v25)
  {
    long long aBlock = _Block_copy(v25);
    CFTypeRef v38 = v23;
    if (!v23) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  long long aBlock = 0;
  CFTypeRef v38 = v23;
  if (v23) {
LABEL_35:
  }
    CFRetain(v23);
LABEL_36:
  CFTypeRef v39 = v22;
  if (v22) {
    CFRetain(v22);
  }
  dispatch_async(v26, &block);
  if (v39) {
    CFRelease(v39);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
LABEL_52:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    CFTypeRef v27 = cf;
    if (!cf) {
      return;
    }
  }
  else
  {
    CFTypeRef v27 = cf;
    if (!cf) {
      return;
    }
  }
  CFRelease(v27);
}

void sub_1B8B3FED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B3FF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a15) < 0)
  {
    operator delete(a13);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)&a16);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B8B3FFA0);
}

void sub_1B8B3FF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, ...)
{
  va_start(va, a11);
  if (a11 < 0)
  {
    operator delete(a6);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B8B3FFA0);
}

void sub_1B8B3FF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  JUMPOUT(0x1B8B3FF68);
}

void sub_1B8B3FF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::MeasureType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::MeasureType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::MeasureType>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F125FD50;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TestType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TestType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TestType>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F125FDA0;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17TriggerRFSelfTest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B4018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B401A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B401CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::block<void({block_pointer})(xpc::object,xpc::object)>::operator()<xpc::dict const&,xpc::object const&>(uint64_t *a1, void **a2, void **a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  xpc_object_t v8 = v5;
  if (!v5)
  {
    xpc_object_t v8 = xpc_null_create();
    int v6 = *a3;
    xpc_object_t object = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    xpc_object_t object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  int v6 = *a3;
  xpc_object_t object = v6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v4 + 16))(v4, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
}

void sub_1B8B40294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c17_ZTSN3xpc6objectE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[4];
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    int v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    a1[5] = xpc_null_create();
    unint64_t v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
    goto LABEL_7;
  }
  int v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  xpc_retain(v6);
  unint64_t v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7) {
    return xpc_retain(v7);
  }
LABEL_7:
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::block<void({block_pointer})(xpc::object,xpc::object)>::operator()<xpc::object const&,xpc::object const&>(uint64_t *a1, void **a2, void **a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  xpc_object_t v8 = v5;
  if (!v5)
  {
    xpc_object_t v8 = xpc_null_create();
    int v6 = *a3;
    xpc_object_t object = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    xpc_object_t object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  int v6 = *a3;
  xpc_object_t object = v6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v4 + 16))(v4, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
}

void sub_1B8B40460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c17_ZTSN3xpc6objectE48c17_ZTSN3xpc6objectE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[4];
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    int v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    a1[5] = xpc_null_create();
    unint64_t v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
    goto LABEL_7;
  }
  int v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  xpc_retain(v6);
  unint64_t v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7) {
    return xpc_retain(v7);
  }
LABEL_7:
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c17_ZTSN3xpc6objectE48c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v4;
  v20[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v20);
  uint64_t v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Request RF Self Test Nonce", (uint8_t *)v12, 2u);
  }
  uint64_t v15 = v3 + 320;
  uint64_t v16 = QMIServiceMsg::create();
  int v17 = 25000;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  void v12[2] = ___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  void v12[3] = &__block_descriptor_tmp_160;
  v12[4] = v3;
  int v6 = (void *)v2[1];
  if (v6) {
    int v6 = _Block_copy(v6);
  }
  unint64_t v13 = v6;
  unint64_t v7 = v2[2];
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetRFSelfTestNonce8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193508;
  aBlock[4] = v12;
  xpc_object_t v8 = _Block_copy(aBlock);
  unint64_t v19 = v8;
  if (v16)
  {
    qmi::Client::send();
    xpc_object_t v8 = v19;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v20);
  CFTypeRef v9 = v2[2];
  if (v9) {
    dispatch_release(v9);
  }
  int v10 = (const void *)v2[1];
  if (v10) {
    _Block_release(v10);
  }
  operator delete(v2);
  int64_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1B8B4079C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a17) {
    qmi::Client::send();
  }
  if (a20) {
    _Block_release(a20);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  xpc_object_t v24 = v22[2];
  if (v24) {
    dispatch_release(v24);
  }
  uint64_t v25 = (const void *)v22[1];
  if (v25) {
    _Block_release(v25);
  }
  operator delete(v22);
  long long v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x4002000000;
  uint64_t v43 = __Block_byref_object_copy__150;
  unint64_t v44 = __Block_byref_object_dispose__151;
  CFMutableDictionaryRef v45 = 0;
  int64_t v46 = 0;
  uint64_t v47 = 0;
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting RF Self Test Nonce", &cf);
  if (cf) {
    uint64_t v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    uint64_t v31 = 0;
    unint64_t v32 = &v31;
    uint64_t v33 = 0x2000000000;
    __int16 v34 = 0;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 0x40000000;
    unint64_t v28 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
    uint64_t v29 = &unk_1E61934E0;
    CFTypeRef v30 = &v31;
    uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    xpc_object_t v8 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v7, (const unsigned __int8 *)2);
      LOWORD(block.__r_.__value_.__l.__data_) = *(_WORD *)v8;
      v28((uint64_t)v27, &block);
    }
    memset(__p, 170, sizeof(__p));
    ctu::hex((ctu *)*((unsigned __int16 *)v32 + 12));
    CFTypeRef v9 = std::string::insert(&block, 0, "Failed to get Nonce: BBSecurityStatus: 0x", 0x29uLL);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::vector<std::csub_match> __p[2] = (void *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(block.__r_.__value_.__l.__data_);
    }
    int64_t v11 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = __p;
      if (SHIBYTE(__p[2]) < 0) {
        uint64_t v25 = (void **)__p[0];
      }
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      _os_log_error_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    }
    if (SHIBYTE(__p[2]) >= 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    xpc_object_t v13 = xpc_string_create((const char *)v12);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    xpc_object_t v14 = xpc_null_create();
    uint64_t v15 = (const void *)a1[5];
    if (v15) {
      uint64_t v16 = _Block_copy(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    CFTypeRef v23 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    uint64_t v49 = &__block_descriptor_tmp_149;
    if (v16)
    {
      unint64_t v50 = _Block_copy(v16);
      xpc_object_t v51 = v13;
      if (v13) {
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v50 = 0;
      xpc_object_t v51 = v13;
      if (v13)
      {
LABEL_26:
        xpc_retain(v13);
        xpc_object_t v52 = v14;
        if (v14)
        {
LABEL_27:
          xpc_retain(v14);
LABEL_31:
          dispatch_async(v23, &block);
          xpc_release(v52);
          xpc_object_t v52 = 0;
          xpc_release(v51);
          xpc_object_t v51 = 0;
          if (v50) {
            _Block_release(v50);
          }
          if (v16) {
            _Block_release(v16);
          }
          xpc_release(v14);
          xpc_release(v13);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          _Block_object_dispose(&v31, 8);
          goto LABEL_52;
        }
LABEL_30:
        xpc_object_t v52 = xpc_null_create();
        goto LABEL_31;
      }
    }
    xpc_object_t v51 = xpc_null_create();
    xpc_object_t v52 = v14;
    if (v14) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 0x40000000;
  uint64_t v36 = ___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_153;
  uint64_t v37 = &unk_1E61934B8;
  CFTypeRef v38 = &v40;
  int v17 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (v17)
  {
    memset(&block, 0, sizeof(block));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&block, v17, &v17[v18], v18);
    v36((uint64_t)v35, &block.__r_.__value_.__l.__data_);
    if (block.__r_.__value_.__r.__words[0])
    {
      block.__r_.__value_.__l.__size_ = block.__r_.__value_.__r.__words[0];
      operator delete(block.__r_.__value_.__l.__data_);
    }
  }
  xpc_object_t v19 = xpc_null_create();
  xpc_object_t v20 = xpc_data_create((const void *)v41[5], v41[6] - v41[5]);
  if (v20)
  {
    unint64_t v21 = (const void *)a1[5];
    if (v21)
    {
LABEL_22:
      uint64_t v22 = _Block_copy(v21);
      goto LABEL_40;
    }
  }
  else
  {
    xpc_object_t v20 = xpc_null_create();
    unint64_t v21 = (const void *)a1[5];
    if (v21) {
      goto LABEL_22;
    }
  }
  uint64_t v22 = 0;
LABEL_40:
  xpc_object_t v24 = a1[6];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke;
  uint64_t v49 = &__block_descriptor_tmp_148;
  if (v22)
  {
    unint64_t v50 = _Block_copy(v22);
    xpc_object_t v51 = v19;
    if (v19) {
      goto LABEL_42;
    }
LABEL_45:
    xpc_object_t v51 = xpc_null_create();
    xpc_object_t v52 = v20;
    if (v20) {
      goto LABEL_43;
    }
LABEL_46:
    xpc_object_t v52 = xpc_null_create();
    goto LABEL_47;
  }
  unint64_t v50 = 0;
  xpc_object_t v51 = v19;
  if (!v19) {
    goto LABEL_45;
  }
LABEL_42:
  xpc_retain(v19);
  xpc_object_t v52 = v20;
  if (!v20) {
    goto LABEL_46;
  }
LABEL_43:
  xpc_retain(v20);
LABEL_47:
  dispatch_async(v24, &block);
  xpc_release(v52);
  xpc_object_t v52 = 0;
  xpc_release(v51);
  xpc_object_t v51 = 0;
  if (v50) {
    _Block_release(v50);
  }
  if (v22) {
    _Block_release(v22);
  }
  xpc_release(v20);
  xpc_release(v19);
LABEL_52:
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v40, 8);
  if (v45)
  {
    int64_t v46 = v45;
    operator delete(v45);
  }
}

void sub_1B8B40E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__150(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__151(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_153(uint64_t a1, char **a2)
{
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *a2, a2[1], a2[1] - *a2);
}

uint64_t ___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetRFSelfTestNonce8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B410C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B410D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B41100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *result, char *__src, char *a3, unint64_t a4)
{
  int v7 = result;
  unint64_t v8 = result[2];
  CFTypeRef v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_21;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_21:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    __n128 result = operator new(v11);
    CFTypeRef v9 = (char *)result;
    *int v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    goto LABEL_18;
  }
  int v12 = (unsigned char *)result[1];
  if (v12 - v9 >= a4)
  {
LABEL_18:
    size_t v14 = a3 - __src;
    if (v14) {
      __n128 result = memmove(v9, __src, v14);
    }
    v7[1] = &v9[v14];
    return result;
  }
  xpc_object_t v13 = &__src[v12 - v9];
  if (v12 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v12 - v9);
    CFTypeRef v9 = (char *)v7[1];
  }
  if (a3 != v13) {
    __n128 result = memmove(v9, v13, a3 - v13);
  }
  v7[1] = &v9[a3 - v13];
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v1 = a1;
  std::string __p = *a1;
  uint64_t v2 = **a1;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v88 = v3;
  long long v89 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v88);
  uint64_t v73 = v2;
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Set RF Self Test Ticket", buf, 2u);
  }
  v87[0] = 0xAAAAAAAAAAAAAAAALL;
  v87[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v87, (const __CFDictionary *)__p[1]);
  CFArrayRef v5 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v87, (const __CFString *)*MEMORY[0x1E4FB9B90]);
  CFArrayRef v6 = v5;
  if (v5) {
    int v7 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    int v7 = 0;
  }
  if (!v7)
  {
    if (!__p[2] || !__p[3]) {
      goto LABEL_85;
    }
    long long aBlock = (char *)operator new(0x28uLL);
    long long v91 = xmmword_1B8C2EF30;
    strcpy(aBlock, "Ticket for RF Self Test is empty");
    CreateError();
    xpc_object_t v13 = (const void *)__p[2];
    if (v13) {
      size_t v14 = _Block_copy(v13);
    }
    else {
      size_t v14 = 0;
    }
    uint64_t v69 = __p[3];
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    uint64_t v76 = 1174405120;
    unint64_t v77 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    uint64_t v78 = &__block_descriptor_tmp_108_0;
    if (v14)
    {
      uint64_t v70 = _Block_copy(v14);
      CFTypeRef v71 = cf;
      uint64_t v79 = v70;
      CFTypeRef v80 = cf;
      if (!cf) {
        goto LABEL_112;
      }
    }
    else
    {
      CFTypeRef v71 = cf;
      uint64_t v79 = 0;
      CFTypeRef v80 = cf;
      if (!cf)
      {
LABEL_112:
        dispatch_async(v69, buf);
        if (v80) {
          CFRelease(v80);
        }
        if (v79) {
          _Block_release(v79);
        }
        if (v14) {
          _Block_release(v14);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v91) < 0) {
          operator delete(aBlock);
        }
        goto LABEL_85;
      }
    }
    CFRetain(v71);
    goto LABEL_112;
  }
  if (v5) {
    CFRetain(v5);
  }
  CFTypeRef v9 = (char *)*((void *)&v88 + 1);
  unint64_t v8 = (char *)v89;
  uint64_t v10 = (const void **)*((void *)&v88 + 1);
  long long v72 = v1;
  if (*((void *)&v88 + 1) != (void)v89)
  {
    uint64_t v10 = (const void **)*((void *)&v88 + 1);
    while (*((unsigned char *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v89) {
        goto LABEL_21;
      }
    }
  }
  if (v10 != (const void **)v89)
  {
    if (!v11) {
      __cxa_bad_cast();
    }
    int v12 = v11 + 16;
    goto LABEL_35;
  }
LABEL_21:
  uint64_t v15 = (char *)operator new(0x28uLL);
  uint64_t v16 = v15;
  v15[8] = 1;
  *(void *)uint64_t v15 = &unk_1F125FEB0;
  *((void *)v15 + 2) = 0;
  int v12 = v15 + 16;
  *((void *)v15 + 3) = 0;
  *((void *)v15 + 4) = 0;
  if ((unint64_t)v8 >= *((void *)&v89 + 1))
  {
    int64_t v17 = v8 - v9;
    uint64_t v18 = (v8 - v9) >> 3;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = *((void *)&v89 + 1) - (void)v9;
    if ((uint64_t)(*((void *)&v89 + 1) - (void)v9) >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = operator new(8 * v21);
      CFTypeRef v23 = &v22[8 * v18];
      xpc_object_t v24 = &v22[8 * v21];
      void *v23 = v16;
      uint64_t v25 = (uint64_t)(v23 + 1);
      if (v9 == v8)
      {
LABEL_32:
        *((void *)&v88 + 1) = v23;
        *(void *)&long long v89 = v25;
        *((void *)&v89 + 1) = v24;
        if (!v9)
        {
LABEL_34:
          *(void *)&long long v89 = v25;
          goto LABEL_35;
        }
LABEL_33:
        operator delete(v9);
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v22 = 0;
      CFTypeRef v23 = (void *)(8 * v18);
      xpc_object_t v24 = 0;
      *(void *)(8 * v18) = v16;
      uint64_t v25 = 8 * v18 + 8;
      if (v9 == v8) {
        goto LABEL_32;
      }
    }
    if ((unint64_t)(v17 - 8) < 0x58) {
      goto LABEL_128;
    }
    if ((unint64_t)(v9 - v22) < 0x20) {
      goto LABEL_128;
    }
    unint64_t v61 = ((unint64_t)(v17 - 8) >> 3) + 1;
    uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v63 = &v8[-v62];
    CFTypeRef v23 = (void *)((char *)v23 - v62);
    uint64_t v64 = &v22[8 * v18 - 16];
    long long v65 = v8 - 16;
    uint64_t v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *(_OWORD *)v65;
      *(v64 - 1) = *((_OWORD *)v65 - 1);
      _OWORD *v64 = v67;
      v64 -= 2;
      v65 -= 32;
      v66 -= 4;
    }
    while (v66);
    unint64_t v8 = v63;
    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_128:
      do
      {
        uint64_t v68 = *((void *)v8 - 1);
        v8 -= 8;
        *--CFTypeRef v23 = v68;
      }
      while (v8 != v9);
    }
    CFTypeRef v9 = (char *)*((void *)&v88 + 1);
    *((void *)&v88 + 1) = v23;
    *(void *)&long long v89 = v25;
    *((void *)&v89 + 1) = v24;
    if (!v9) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  *(void *)unint64_t v8 = v15;
  *(void *)&long long v89 = v8 + 8;
LABEL_35:
  CFIndex Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v6, i);
      CFTypeRef v30 = ValueAtIndex;
      buf[0] = 0;
      if (ValueAtIndex)
      {
        CFTypeID v31 = CFGetTypeID(ValueAtIndex);
        if (v31 == CFNumberGetTypeID()) {
          ctu::cf::assign((ctu::cf *)buf, v30, v32);
        }
      }
      uint8_t v33 = buf[0];
      uint64_t v35 = (unsigned char *)v12[1];
      unint64_t v34 = v12[2];
      if ((unint64_t)v35 < v34)
      {
        unsigned char *v35 = buf[0];
        uint64_t v28 = (uint64_t)(v35 + 1);
        goto LABEL_38;
      }
      uint64_t v36 = (unsigned char *)*v12;
      unint64_t v37 = (unint64_t)&v35[-*v12];
      unint64_t v38 = v37 + 1;
      if ((uint64_t)(v37 + 1) < 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v39 = v34 - (void)v36;
      if (2 * v39 > v38) {
        unint64_t v38 = 2 * v39;
      }
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v40 = v38;
      }
      if (v40)
      {
        uint64_t v41 = operator new(v40);
        uint64_t v42 = &v41[v37];
        v41[v37] = v33;
        uint64_t v28 = (uint64_t)&v41[v37 + 1];
        if (v35 == v36) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v41 = 0;
        uint64_t v42 = &v35[-*v12];
        *(unsigned char *)unint64_t v37 = buf[0];
        uint64_t v28 = v37 + 1;
        if (v35 == v36)
        {
LABEL_51:
          void *v12 = v42;
          v12[1] = v28;
          void v12[2] = &v41[v40];
          if (!v35) {
            goto LABEL_38;
          }
LABEL_70:
          operator delete(v35);
          goto LABEL_38;
        }
      }
      if (v37 < 8 || (unint64_t)(v36 - v41) < 0x20) {
        goto LABEL_67;
      }
      if (v37 >= 0x20)
      {
        unint64_t v43 = v37 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v44 = &v41[v37 - 16];
        CFMutableDictionaryRef v45 = (long long *)(v35 - 16);
        unint64_t v46 = v37 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          _OWORD *v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 32;
        }
        while (v46);
        if (v37 == v43) {
          goto LABEL_69;
        }
        if ((v37 & 0x18) == 0)
        {
          v42 -= v43;
          v35 -= v43;
LABEL_67:
          xpc_object_t v52 = v42 - 1;
          do
          {
            char v53 = *--v35;
            *v52-- = v53;
          }
          while (v35 != v36);
          goto LABEL_69;
        }
      }
      else
      {
        unint64_t v43 = 0;
      }
      v42 -= v37 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v48 = &v41[&v35[-v43] - v36 - 8];
      uint64_t v49 = (uint64_t *)&v35[-v43 - 8];
      unint64_t v50 = v43 - (v37 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v51 = *v49--;
        *v48-- = v51;
        v50 += 8;
      }
      while (v50);
      v35 -= v37 & 0xFFFFFFFFFFFFFFF8;
      if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_67;
      }
LABEL_69:
      uint64_t v35 = (unsigned char *)*v12;
      void *v12 = v41;
      v12[1] = v28;
      void v12[2] = &v41[v40];
      if (v35) {
        goto LABEL_70;
      }
LABEL_38:
      v12[1] = v28;
    }
  }
  if (v6) {
    CFRelease(v6);
  }
  CFTypeRef cf = (CFTypeRef)(v73 + 320);
  uint64_t v83 = QMIServiceMsg::create();
  int v84 = 25000;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v76 = 1174405120;
  unint64_t v77 = ___ZZN5radio19QMICommandDriverM2019setRFSelfTestTicketEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke;
  uint64_t v78 = &__block_descriptor_tmp_166;
  uint64_t v79 = (void *)v73;
  uint64_t v54 = (void *)__p[2];
  uint64_t v1 = v72;
  if (v54) {
    uint64_t v54 = _Block_copy(v54);
  }
  CFTypeRef v80 = v54;
  long long v55 = __p[3];
  dispatch_object_t object = v55;
  if (v55) {
    dispatch_retain(v55);
  }
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  *(void *)&long long v91 = 0x40000000;
  *((void *)&v91 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm19SetRFSelfTestTicket8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v92 = &unk_1E6193530;
  unint64_t v93 = buf;
  char v56 = _Block_copy(&aBlock);
  uint64_t v86 = v56;
  if (v83)
  {
    qmi::Client::send();
    char v56 = v86;
  }
  if (v56) {
    _Block_release(v56);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v80) {
    _Block_release(v80);
  }
LABEL_85:
  if (v6) {
    CFRelease(v6);
  }
  MEMORY[0x1BA9C7760](v87);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v88);
  uint64_t v57 = __p[3];
  if (v57) {
    dispatch_release(v57);
  }
  unint64_t v58 = (const void *)__p[2];
  if (v58) {
    _Block_release(v58);
  }
  long long v59 = (const void *)__p[1];
  if (v59) {
    CFRelease(v59);
  }
  operator delete(__p);
  uint64_t v60 = (std::__shared_weak_count *)v1[2];
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  operator delete(v1);
}

void sub_1B8B41A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, dispatch_object_t object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,char a25,uint64_t a26,char a27)
{
  if (*(char *)(v29 - 105) < 0) {
    operator delete(*(void **)(v29 - 128));
  }
  if (v27) {
    CFRelease(v27);
  }
  MEMORY[0x1BA9C7760](&a25);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  CFTypeID v31 = __p[3];
  if (v31) {
    dispatch_release(v31);
  }
  CFNumberRef v32 = (const void *)__p[2];
  if (v32) {
    _Block_release(v32);
  }
  uint8_t v33 = (const void *)__p[1];
  if (v33) {
    CFRelease(v33);
  }
  operator delete(__p);
  unint64_t v34 = (std::__shared_weak_count *)v28[2];
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v28);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2019setRFSelfTestTicketEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3 = a1[4];
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "setting RF Self Test Ticket", &cf);
  uint64_t v4 = (const void *)a1[5];
  if (!v4 || !a1[6]) {
    goto LABEL_20;
  }
  CFTypeRef v5 = cf;
  if (cf && (CFRetain(cf), (uint64_t v4 = (const void *)a1[5]) == 0)) {
    CFArrayRef v6 = 0;
  }
  else {
    CFArrayRef v6 = _Block_copy(v4);
  }
  int v7 = a1[6];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_108_0;
  if (v6)
  {
    long long aBlock = _Block_copy(v6);
    CFTypeRef v11 = v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  long long aBlock = 0;
  CFTypeRef v11 = v5;
  if (v5) {
LABEL_11:
  }
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11) {
    CFRelease(v11);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F125FEB0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::~TlvWrapper(void *__p)
{
  uint64_t *__p = &unk_1F125FEB0;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16) + 3;
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::write(uint64_t a1, void *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *a2;
  CFArrayRef v6 = (char *)(*a2 + 3);
  *a2 = v6;
  __n128 result = memcpy(v6, *(const void **)(a1 + 16), *(void *)(a1 + 24) - *(void *)(a1 + 16));
  uint64_t v8 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
  *a2 = &v6[v8];
  *(unsigned char *)uint64_t v5 = v4;
  *(_WORD *)(v5 + 1) = v8;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F125FEB0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  char v4 = *(unsigned char **)(a1 + 16);
  uint64_t v3 = *(unsigned char **)(a1 + 24);
  size_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    CFArrayRef v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    int v7 = &v6[v5];
    *((void *)v2 + 4) = &v6[v5];
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B8B41F6C(_Unwind_Exception *a1)
{
  char v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm19SetRFSelfTestTicket8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B42058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B4206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B42098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v4;
  v23[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v23);
  size_t v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14[0]) = 0;
    _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Request to get antenna tx port", (uint8_t *)v14, 2u);
  }
  uint64_t v18 = v3 + 320;
  uint64_t v19 = QMIServiceMsg::create();
  int v20 = 25000;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  v14[2] = ___ZZN5radio19QMICommandDriverM2016getAntennaTxPortEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEESA_ENK3__0clEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_173;
  v14[4] = v3;
  v14[5] = v2[1];
  CFArrayRef v6 = (std::__shared_weak_count *)v2[2];
  uint64_t v15 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = (void *)v2[3];
  if (v7) {
    int v7 = _Block_copy(v7);
  }
  uint64_t v16 = v7;
  uint64_t v8 = v2[4];
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16GetTxAntennaPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193580;
  aBlock[4] = v14;
  CFTypeRef v9 = _Block_copy(aBlock);
  uint64_t v22 = v9;
  if (v19)
  {
    qmi::Client::send();
    CFTypeRef v9 = v22;
  }
  if (v9) {
    _Block_release(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    _Block_release(v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v23);
  uint64_t v10 = v2[4];
  if (v10) {
    dispatch_release(v10);
  }
  CFTypeRef v11 = (const void *)v2[3];
  if (v11) {
    _Block_release(v11);
  }
  int v12 = (std::__shared_weak_count *)v2[2];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(v2);
  xpc_object_t v13 = (std::__shared_weak_count *)a1[2];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(a1);
}

void sub_1B8B42308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  long long v26 = v24[4];
  if (v26) {
    dispatch_release(v26);
  }
  CFTypeRef v27 = (const void *)v24[3];
  if (v27) {
    _Block_release(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)v24[2];
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  operator delete(v24);
  uint64_t v29 = (std::__shared_weak_count *)v23[2];
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2016getAntennaTxPortEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEESA_ENK3__0clEv_block_invoke(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  CFArrayRef v6 = std::__shared_weak_count::lock(v3);
  long long v26 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    CFTypeRef v9 = v6;
LABEL_48:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v24 = 0;
  radio::QMICommandDriverBase::checkError(v5, a2, "setting antenna tx port", &cf);
  CFMutableDictionaryRef v7 = 0;
  if (cf) {
    uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    if (!a1[7]) {
      goto LABEL_43;
    }
LABEL_16:
    if (!a1[8]) {
      goto LABEL_43;
    }
    CFTypeRef v15 = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v7) {
      CFRetain(v7);
    }
    uint64_t v16 = (const void *)a1[7];
    if (v16) {
      int64_t v17 = _Block_copy(v16);
    }
    else {
      int64_t v17 = 0;
    }
    uint64_t v18 = a1[8];
    blocunint64_t k = MEMORY[0x1E4F143A8];
    p_blocunint64_t k = 1174405120;
    uint64_t v29 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
    CFTypeRef v30 = &__block_descriptor_tmp_95_1;
    if (v17)
    {
      long long aBlock = _Block_copy(v17);
      CFTypeRef v32 = v15;
      if (!v15) {
        goto LABEL_29;
      }
    }
    else
    {
      long long aBlock = 0;
      CFTypeRef v32 = v15;
      if (!v15)
      {
LABEL_29:
        CFTypeRef v33 = v7;
        if (v7) {
          CFRetain(v7);
        }
        dispatch_async(v18, &block);
        if (v33) {
          CFRelease(v33);
        }
        if (v32) {
          CFRelease(v32);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v17) {
          _Block_release(v17);
        }
        if (v7) {
          CFRelease(v7);
        }
        if (v15) {
          CFRelease(v15);
        }
        goto LABEL_43;
      }
    }
    CFRetain(v15);
    goto LABEL_29;
  }
  blocunint64_t k = 0;
  p_blocunint64_t k = (uint64_t)&block;
  uint64_t v29 = 0x2000000000;
  LOBYTE(v30) = -86;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  int v20 = ___ZZN5radio19QMICommandDriverM2016getAntennaTxPortEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEESA_ENK3__0clEv_block_invoke_2;
  uint64_t v21 = &unk_1E6193558;
  uint64_t v22 = &block;
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  int v12 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v11, (const unsigned __int8 *)1);
    char v34 = *(unsigned char *)v12;
    v20((uint64_t)v19, &v34);
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v7 = Mutable;
  if (Mutable) {
    CFTypeRef v24 = Mutable;
  }
  ctu::cf::insert<__CFString const*,unsigned char>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9B38], *(unsigned __int8 *)(p_block + 24), v13);
  _Block_object_dispose(&block, 8);
  if (a1[7]) {
    goto LABEL_16;
  }
LABEL_43:
  if (cf) {
    CFRelease(cf);
  }
  if (v24) {
    CFRelease(v24);
  }
  CFTypeRef v9 = v26;
  if (v26) {
    goto LABEL_48;
  }
}

void sub_1B8B4277C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v2, 1, v1, v3);
  JUMPOUT(0x1B8B42540);
}

void sub_1B8B427A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  _Block_object_dispose(va3, 8);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1B8B427E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  CFTypeRef v9 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio19QMICommandDriverM2016getAntennaTxPortEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEESA_ENK3__0clEv_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16GetTxAntennaPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B428DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B428F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B4291C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::cf::insert<__CFString const*,unsigned char>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v8) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

void sub_1B8B429DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B42A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  v37[0] = v1;
  uint64_t v2 = *v1;
  v48[0] = 0xAAAAAAAAAAAAAAAALL;
  v48[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v48, (const __CFDictionary *)v1[3]);
  unsigned __int8 Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v48, (const __CFString *)*MEMORY[0x1E4FB9B38]);
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v46 = v4;
  long long v47 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v46);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 0x40000000;
  uint64_t v5 = ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke;
  unint64_t v43 = ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke;
  unint64_t v44 = &__block_descriptor_tmp_176;
  unsigned __int8 v45 = Int;
  CFArrayRef v6 = (char *)*((void *)&v46 + 1);
  CFMutableDictionaryRef v7 = (char *)v47;
  CFNumberRef v8 = (const void **)*((void *)&v46 + 1);
  if (*((void *)&v46 + 1) != (void)v47)
  {
    CFNumberRef v8 = (const void **)*((void *)&v46 + 1);
    while (*((unsigned char *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v47) {
        goto LABEL_9;
      }
    }
  }
  if (v8 == (const void **)v47)
  {
LABEL_9:
    uint64_t v11 = operator new(0x10uLL);
    uint64_t v12 = v11;
    v11[4] = 1;
    *(void *)uint64_t v11 = &unk_1F125FF60;
    if ((unint64_t)v7 < *((void *)&v47 + 1))
    {
      *(void *)CFMutableDictionaryRef v7 = v11;
      uint64_t v13 = (uint64_t)(v7 + 8);
LABEL_22:
      BOOL v10 = (char *)v12 + 9;
      *(void *)&long long v47 = v13;
      uint64_t v5 = v43;
      goto LABEL_23;
    }
    int64_t v14 = v7 - v6;
    uint64_t v15 = (v7 - v6) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v47 + 1) - (void)v6;
    if ((uint64_t)(*((void *)&v47 + 1) - (void)v6) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = operator new(8 * v18);
      int v20 = &v19[8 * v15];
      uint64_t v21 = &v19[8 * v18];
      void *v20 = v12;
      uint64_t v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((void *)&v46 + 1) = v20;
        *(void *)&long long v47 = v13;
        *((void *)&v47 + 1) = v21;
        if (!v6) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = (void *)(8 * v15);
      uint64_t v21 = 0;
      *(void *)(8 * v15) = v12;
      uint64_t v13 = 8 * v15 + 8;
      if (v6 == v7) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_59;
    }
    if ((unint64_t)(v6 - v19) < 0x20) {
      goto LABEL_59;
    }
    unint64_t v28 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v30 = &v7[-v29];
    int v20 = (void *)((char *)v20 - v29);
    CFTypeID v31 = &v19[8 * v15 - 16];
    CFTypeRef v32 = v7 - 16;
    uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      _OWORD *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 4;
    }
    while (v33);
    CFMutableDictionaryRef v7 = v30;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v35 = *((void *)v7 - 1);
        v7 -= 8;
        *--int v20 = v35;
      }
      while (v7 != v6);
    }
    CFArrayRef v6 = (char *)*((void *)&v46 + 1);
    *((void *)&v46 + 1) = v20;
    *(void *)&long long v47 = v13;
    *((void *)&v47 + 1) = v21;
    if (!v6) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v9) {
    __cxa_bad_cast();
  }
  BOOL v10 = v9 + 9;
LABEL_23:
  v5((uint64_t)v42, v10);
  uint64_t v22 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = Int;
    _os_log_impl(&dword_1B8B00000, v22, OS_LOG_TYPE_DEFAULT, "#I Request to set antenna tx port to %d", buf, 8u);
  }
  v37[1] = (void *)(v2 + 320);
  uint64_t v38 = QMIServiceMsg::create();
  int v39 = 25000;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v51 = 1174405120;
  xpc_object_t v52 = ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_177;
  char v53 = &__block_descriptor_tmp_180_1;
  uint64_t v54 = v2;
  uint64_t v55 = v1[1];
  CFTypeRef v23 = (std::__shared_weak_count *)v1[2];
  char v56 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef v24 = (void *)v1[4];
  if (v24) {
    CFTypeRef v24 = _Block_copy(v24);
  }
  uint64_t v57 = v24;
  uint64_t v25 = v1[5];
  dispatch_object_t object = v25;
  if (v25) {
    dispatch_retain(v25);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16SetTxAntennaPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61935C8;
  aBlock[4] = buf;
  long long v26 = _Block_copy(aBlock);
  uint64_t v41 = v26;
  if (v38)
  {
    qmi::Client::send();
    long long v26 = v41;
  }
  if (v26) {
    _Block_release(v26);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v57) {
    _Block_release(v57);
  }
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v46);
  MEMORY[0x1BA9C7760](v48);
  std::unique_ptr<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](v37);
  CFTypeRef v27 = (std::__shared_weak_count *)a1[2];
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  operator delete(a1);
}

void sub_1B8B42F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,void *aBlock,dispatch_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = v2[5];
    if (v3) {
      dispatch_release(v3);
    }
    long long v4 = (const void *)v2[4];
    if (v4) {
      _Block_release(v4);
    }
    uint64_t v5 = (const void *)v2[3];
    if (v5) {
      CFRelease(v5);
    }
    CFArrayRef v6 = (std::__shared_weak_count *)v2[2];
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_177(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    CFArrayRef v6 = std::__shared_weak_count::lock(v3);
    int64_t v14 = v6;
    if (v6)
    {
      CFMutableDictionaryRef v7 = v6;
      if (!a1[5])
      {
LABEL_25:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting antenna tx port", &cf);
      CFNumberRef v8 = (const void *)a1[7];
      if (!v8 || !a1[8])
      {
LABEL_23:
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_25;
      }
      CFTypeRef v9 = cf;
      if (cf && (CFRetain(cf), (CFNumberRef v8 = (const void *)a1[7]) == 0)) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = _Block_copy(v8);
      }
      uint64_t v11 = a1[8];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_108_0;
      if (v10)
      {
        long long aBlock = _Block_copy(v10);
        CFTypeRef v17 = v9;
        if (!v9) {
          goto LABEL_15;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v17 = v9;
        if (!v9)
        {
LABEL_15:
          dispatch_async(v11, block);
          if (v17) {
            CFRelease(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v10) {
            _Block_release(v10);
          }
          if (v9) {
            CFRelease(v9);
          }
          goto LABEL_23;
        }
      }
      CFRetain(v9);
      goto LABEL_15;
    }
  }
}

void sub_1B8B432A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Port>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Port>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Port>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F125FF60;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16SetTxAntennaPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B43408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B4341C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B43448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  int v4 = CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 8), (const void *)*MEMORY[0x1E4FB9A00]);
  uint64_t v5 = (const void *)v2[1];
  if (v4)
  {
    __p.__r_.__value_.__r.__words[0] = v2[1];
    if (v5) {
      CFRetain(v5);
    }
    CFArrayRef v6 = (const void *)v2[2];
    if (v6)
    {
      CFMutableDictionaryRef v7 = _Block_copy(v6);
      CFNumberRef v8 = v2[3];
      *(void *)&blocunint64_t k = v7;
      *((void *)&block + 1) = v8;
      if (!v8) {
        goto LABEL_7;
      }
    }
    else
    {
      CFMutableDictionaryRef v7 = 0;
      CFNumberRef v8 = v2[3];
      *(void *)&blocunint64_t k = 0;
      *((void *)&block + 1) = v8;
      if (!v8)
      {
LABEL_7:
        radio::QMICommandDriverM20::setLegacyMCC_sync(v3, (const __CFDictionary **)&__p, (uint64_t)&block);
        if (v8) {
          dispatch_release(v8);
        }
        if (v7) {
          _Block_release(v7);
        }
        if (v5) {
LABEL_24:
        }
          CFRelease(v5);
LABEL_25:
        uint64_t v12 = v2[3];
        if (!v12) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
    }
    dispatch_retain(v8);
    goto LABEL_7;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v2[1], (const void *)*MEMORY[0x1E4FB9B20]))
  {
    uint64_t v5 = (const void *)v2[1];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    if (v5) {
      CFRetain(v5);
    }
    CFTypeRef v9 = (const void *)v2[2];
    if (v9)
    {
      BOOL v10 = _Block_copy(v9);
      uint64_t v11 = v2[3];
      *(void *)&blocunint64_t k = v10;
      *((void *)&block + 1) = v11;
      if (!v11) {
        goto LABEL_19;
      }
    }
    else
    {
      BOOL v10 = 0;
      uint64_t v11 = v2[3];
      *(void *)&blocunint64_t k = 0;
      *((void *)&block + 1) = v11;
      if (!v11)
      {
LABEL_19:
        radio::QMICommandDriverM20::setSTxMCC_sync(v3, (const __CFDictionary **)&__p, (uint64_t)&block);
        if (v11) {
          dispatch_release(v11);
        }
        if (v10) {
          _Block_release(v10);
        }
        if (v5) {
          goto LABEL_24;
        }
        goto LABEL_25;
      }
    }
    dispatch_retain(v11);
    goto LABEL_19;
  }
  unint64_t v16 = (char *)operator new(0x28uLL);
  strcpy(v16, "Set MCC: Enable key is required!");
  CFTypeRef v17 = v3[5];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = v16;
    _os_log_error_impl(&dword_1B8B00000, v17, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
  }
  std::string::__init_copy_ctor_external(&__p, v16, 0x20uLL);
  CreateError();
  unint64_t v18 = (const void *)v2[2];
  if (v18) {
    uint64_t v19 = _Block_copy(v18);
  }
  else {
    uint64_t v19 = 0;
  }
  int v20 = v2[3];
  *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  long long v26 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
  CFTypeRef v27 = &__block_descriptor_tmp_108_0;
  if (!v19)
  {
    CFTypeRef v22 = cf;
    long long aBlock = 0;
    CFTypeRef v29 = cf;
    if (!cf) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  uint64_t v21 = _Block_copy(v19);
  CFTypeRef v22 = cf;
  long long aBlock = v21;
  CFTypeRef v29 = cf;
  if (cf) {
LABEL_48:
  }
    CFRetain(v22);
LABEL_49:
  dispatch_async(v20, &block);
  if (v29) {
    CFRelease(v29);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    operator delete(v16);
    uint64_t v12 = v2[3];
    if (!v12) {
      goto LABEL_27;
    }
LABEL_26:
    dispatch_release(v12);
    goto LABEL_27;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  operator delete(v16);
  uint64_t v12 = v2[3];
  if (v12) {
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v13 = (const void *)v2[2];
  if (v13) {
    _Block_release(v13);
  }
  int64_t v14 = (const void *)v2[1];
  if (v14) {
    CFRelease(v14);
  }
  operator delete(v2);
  uint64_t v15 = (std::__shared_weak_count *)a1[2];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  operator delete(a1);
}

void sub_1B8B43808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::Enable>(void *a1, char a2)
{
  int v4 = operator new(0x10uLL);
  uint64_t v5 = v4;
  v4[8] = a2;
  *(void *)int v4 = &unk_1F125FFB0;
  v4[9] = 0;
  CFArrayRef v6 = v4 + 9;
  CFNumberRef v8 = (char *)a1[2];
  unint64_t v7 = a1[3];
  CFTypeRef v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(void *)CFNumberRef v8 = v4;
    uint64_t v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  uint64_t v11 = (char *)a1[1];
  uint64_t v12 = (v8 - v11) >> 3;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v7 - (void)v11;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v16 = (char *)operator new(8 * v15);
    CFTypeRef v17 = &v16[8 * v12];
    unint64_t v18 = &v16[8 * v15];
    *(void *)CFTypeRef v17 = v5;
    uint64_t v10 = (uint64_t)(v17 + 8);
    uint64_t v19 = (char *)(v8 - v11);
    if (v8 == v11) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  unint64_t v16 = 0;
  CFTypeRef v17 = (char *)(8 * v12);
  unint64_t v18 = 0;
  *(void *)(8 * v12) = v5;
  uint64_t v10 = 8 * v12 + 8;
  uint64_t v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v11 - v16) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v9 = &v8[-v22];
    v17 -= v22;
    CFTypeRef v23 = &v16[8 * v12 - 16];
    CFTypeRef v24 = (long long *)(v8 - 16);
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)CFTypeRef v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    CFTypeRef v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9) {
    operator delete(v9);
  }
LABEL_23:
  a1[2] = v10;
  return v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Enable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Enable>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Enable>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F125FFB0;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18SettingLegacyTxMCC8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B43C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B43C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B43CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SettingSTxMCC8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B43DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B43DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B43DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1260000;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::~TlvWrapper(void *__p)
{
  uint64_t *__p = &unk_1F1260000;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 5;
  }
  else {
    return 12 * ((v2 - v1 - 12) / 0xCuLL) + 17;
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_WORD *)(v3 + 3) = -21845 * ((*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 2);
  uint64_t v4 = (_WORD *)(v3 + 5);
  uint64_t v5 = *(_WORD **)(result + 16);
  for (CFIndex i = *(_WORD **)(result + 24); v5 != i; v5 += 6)
  {
    _WORD *v4 = *v5;
    v4[1] = v5[1];
    v4[2] = v5[2];
    v4[3] = v5[3];
    v4[4] = v5[4];
    v4[5] = v5[5];
    v4 += 6;
  }
  *a2 = (uint64_t)v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v4 - (v3 + 3);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::clone(uint64_t a1)
{
  char v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_1F1260000;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  uint64_t v3 = *(unsigned char **)(a1 + 24);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 2) >= 0x1555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    CFArrayRef v6 = (char *)operator new(v5);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    unint64_t v7 = &v6[4 * (v5 >> 2)];
    *((void *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B8B44054(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17SendAccessoryInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B44140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B44154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B44180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15GetRFFEScanData8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B4425C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B44270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B4429C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetResetProperties8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B44378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B4438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B443B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::IsCharging>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::IsCharging>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::IsCharging>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1260050;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ChargeLevelPercentage>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ChargeLevelPercentage>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ChargeLevelPercentage>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F12600A0;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15SendBatteryInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B4459C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B445B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B445DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0>(radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0>>)::{lambda(void *)#1}::__invoke(void ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v4;
  v19[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
  uint64_t v14 = (uint64_t)v3 + 320;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_193;
  v11[4] = v3;
  void v11[5] = v2[1];
  int64_t v5 = (std::__shared_weak_count *)v2[2];
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  CFArrayRef v6 = v2 + 3;
  if (*((char *)v2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v2[3], (std::string::size_type)v2[4]);
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v2[5];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20EnableResetSPMIEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193700;
  aBlock[4] = v11;
  CFNumberRef v8 = _Block_copy(aBlock);
  unint64_t v18 = v8;
  if (v15)
  {
    qmi::Client::send();
    CFNumberRef v8 = v18;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
  if (*((char *)v2 + 47) < 0) {
    operator delete(*v6);
  }
  CFTypeRef v9 = (std::__shared_weak_count *)v2[2];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(v2);
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_1B8B447FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!a24) {
      goto LABEL_6;
    }
  }
  else if (!a24)
  {
LABEL_6:
    if (aBlock) {
      _Block_release(aBlock);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v29 - 112));
    if (*(char *)(v28 + 47) < 0)
    {
      operator delete(*(void **)(v28 + 24));
      CFTypeID v31 = *(std::__shared_weak_count **)(v28 + 16);
      if (!v31)
      {
LABEL_10:
        operator delete((void *)v28);
        CFTypeRef v32 = (std::__shared_weak_count *)v27[2];
        if (!v32) {
          goto LABEL_16;
        }
        goto LABEL_14;
      }
    }
    else
    {
      CFTypeID v31 = *(std::__shared_weak_count **)(v28 + 16);
      if (!v31) {
        goto LABEL_10;
      }
    }
    std::__shared_weak_count::__release_weak(v31);
    operator delete((void *)v28);
    CFTypeRef v32 = (std::__shared_weak_count *)v27[2];
    if (!v32) {
      goto LABEL_16;
    }
LABEL_14:
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_16:
    operator delete(v27);
    _Unwind_Resume(a1);
  }
  qmi::Client::send();
  goto LABEL_6;
}

void ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke(uint64_t a1, const qmi::ResponseBase *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    CFArrayRef v6 = std::__shared_weak_count::lock(v3);
    unint64_t v18 = v6;
    if (v6)
    {
      long long v7 = v6;
      if (*(void *)(a1 + 40))
      {
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        CFNumberRef v8 = (const char **)(a1 + 56);
        CFTypeRef v9 = (const char *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0) {
          CFTypeRef v9 = *v8;
        }
        radio::QMICommandDriverBase::checkError(v5, a2, v9, &cf);
        if (cf) {
          uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v10)
        {
          uint64_t v11 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(a1 + 79) < 0) {
              CFNumberRef v8 = (const char **)*v8;
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v8;
            _os_log_error_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_ERROR, "Failed to %s", (uint8_t *)&buf, 0xCu);
          }
        }
        else
        {
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 1174405120;
          v14[2] = ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke_189;
          v14[3] = &__block_descriptor_tmp_192;
          uint64_t v13 = *(void *)(a1 + 40);
          uint64_t v12 = *(std::__shared_weak_count **)(a1 + 48);
          v14[4] = v5;
          v14[5] = v13;
          uint64_t v15 = v12;
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&long long buf = MEMORY[0x1E4F143A8];
          *((void *)&buf + 1) = 0x40000000;
          unint64_t v20 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm14ResetSPMIEvent10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
          uint64_t v21 = &unk_1E6193728;
          uint64_t v22 = v14;
          qmi::Client::setIndHandler();
          if (v15) {
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8B44B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, const void *a16, __int16 a17, char a18, char a19)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a16);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke_189(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    CFArrayRef v6 = std::__shared_weak_count::lock(v3);
    int v16 = v6;
    if (v6)
    {
      long long v7 = v6;
      if (a1[5])
      {
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 0x40000000;
        uint64_t v12 = ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke_2;
        uint64_t v13 = &__block_descriptor_tmp_191;
        uint64_t v14 = v5;
        uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v10 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)4);
          int v17 = *(_DWORD *)v10;
          v12((uint64_t)v11, &v17);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8B44CE0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 1, v2, v3);
  JUMPOUT(0x1B8B44C70);
}

void sub_1B8B44D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke_2(uint64_t a1, int *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *a2;
  long long v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Resetting SPMI with data (0x%x)", buf, 8u);
  }
  uint64_t v5 = *(uint64_t ****)(v2 + 136);
  int v33 = v3;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v6;
  long long v46 = v6;
  long long v43 = v6;
  long long v44 = v6;
  long long v41 = v6;
  long long v42 = v6;
  long long v39 = v6;
  long long v40 = v6;
  long long v38 = v6;
  *(_OWORD *)long long buf = v6;
  long long v7 = (pthread_mutex_t *)v5[3];
  *(void *)&long long v47 = 10;
  *((void *)&v47 + 1) = buf;
  *(void *)&long long v48 = 0;
  *((void *)&v48 + 1) = v7;
  pthread_mutex_lock(v7);
  CFNumberRef v8 = v5[1];
  if (!v8)
  {
    uint64_t v13 = 0;
    uint64_t v10 = *v5;
    goto LABEL_15;
  }
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v8 + 2, memory_order_acquire);
  uint64_t v10 = *v5;
  if (explicit == 1)
  {
    uint64_t v11 = *v10;
    uint64_t v12 = (uint64_t)v5[2];
    if ((uint64_t *)v12 == *v10)
    {
      uint64_t v12 = v11[1];
      *(void *)&long long v34 = v12;
      if (v11 == (uint64_t *)v12)
      {
LABEL_12:
        v5[2] = (uint64_t **)v12;
        goto LABEL_13;
      }
    }
    else
    {
      *(void *)&long long v34 = v5[2];
    }
    uint64_t v14 = *(void *)(v12 + 16);
    if (*(unsigned char *)(v14 + 24))
    {
      uint64_t v12 = *(void *)(v12 + 8);
    }
    else
    {
      uint64_t v12 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>>::erase(v11, (int *)(v14 + 64), (uint64_t **)&v34);
      uint64_t v10 = *v5;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v13 = (atomic_uint *)v5[1];
  if (v13) {
    atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
  }
LABEL_15:
  pthread_mutex_unlock(*((pthread_mutex_t **)&v48 + 1));
  unint64_t v15 = *((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    if ((uint64_t)v48 - 1 >= 0)
    {
      unint64_t v16 = *((void *)&v47 + 1) + 16 * v48;
      do
      {
        int v17 = *(atomic_uint **)(v16 - 8);
        if (v17)
        {
          if (atomic_fetch_add(v17 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v17 + 16))(v17);
            if (atomic_fetch_add(v17 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v17 + 24))(v17);
            }
          }
        }
        v16 -= 16;
      }
      while (v16 > v15);
    }
    if ((unint64_t)v47 >= 0xB) {
      operator delete(*((void **)&v47 + 1));
    }
  }
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v18;
  long long v50 = v18;
  long long v51 = v18;
  long long v48 = v18;
  long long v49 = v18;
  long long v46 = v18;
  long long v47 = v18;
  long long v44 = v18;
  long long v45 = v18;
  long long v42 = v18;
  long long v43 = v18;
  long long v40 = v18;
  long long v41 = v18;
  long long v38 = v18;
  long long v39 = v18;
  buf[0] = 0;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v53 = 10;
  uint64_t v54 = &buf[8];
  uint64_t v55 = 0;
  char v56 = &v33;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v19 = (uint64_t)*v10;
  *(void *)&long long v31 = (*v10)[1];
  *((void *)&v31 + 1) = v19;
  *(void *)&long long v32 = buf;
  *((void *)&v32 + 1) = v19;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::lock_next_callable(&v31);
  v30[0] = *v10;
  v30[1] = v30[0];
  _OWORD v30[2] = buf;
  v30[3] = v30[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::lock_next_callable(v30);
  long long v34 = v31;
  long long v35 = v32;
  uint64_t v20 = v30[0];
  uint64_t v21 = v31;
  if ((void)v31 != v30[0])
  {
    uint64_t v22 = (unsigned char *)v35;
    if (!*(unsigned char *)v35)
    {
      uint64_t v23 = *(void *)(*(void *)(v31 + 16) + 32);
      uint64_t v24 = *(void *)(v23 + 24);
      if (!v24)
      {
        std::runtime_error::runtime_error(&v36, "call to empty boost::function");
        v36.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
        boost::throw_exception<boost::bad_function_call>(&v36);
      }
      (*(void (**)(uint64_t, void))((v24 & 0xFFFFFFFFFFFFFFFELL) + 8))(v23 + 32, **(unsigned int **)(v35 + 272));
      if (!*v22) {
        unsigned char *v22 = 1;
      }
    }
    *(void *)&long long v34 = *(void *)(v21 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::lock_next_callable(&v34);
    uint64_t v25 = v35;
    if (*(unsigned char *)v35) {
      *(unsigned char *)long long v35 = 0;
    }
    for (uint64_t i = v34; (void)v34 != v20; uint64_t i = v34)
    {
      uint64_t v27 = *(void *)(*(void *)(i + 16) + 32);
      uint64_t v28 = *(void *)(v27 + 24);
      if (!v28)
      {
        std::runtime_error::runtime_error(&v36, "call to empty boost::function");
        v36.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
        boost::throw_exception<boost::bad_function_call>(&v36);
      }
      (*(void (**)(uint64_t, void))((v28 & 0xFFFFFFFFFFFFFFFELL) + 8))(v27 + 32, **(unsigned int **)(v25 + 272));
      if (!*(unsigned char *)v25) {
        *(unsigned char *)uint64_t v25 = 1;
      }
      *(void *)&long long v34 = *(void *)(i + 8);
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::lock_next_callable(&v34);
      uint64_t v25 = v35;
      if (*(unsigned char *)v35) {
        *(unsigned char *)long long v35 = 0;
      }
    }
  }
  if (HIDWORD(v57) > v57) {
    boost::signals2::detail::signal_impl<void (),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v5, v19);
  }
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>>::~slot_call_iterator_cache((uint64_t)buf);
  if (v13 && atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
    if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
    }
  }
  return result;
}

void sub_1B8B45294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,unint64_t a45,char *__p,uint64_t a47,pthread_mutex_t *a48)
{
  pthread_mutex_unlock(a48);
  if (__p)
  {
    if (a47 - 1 >= 0)
    {
      long long v49 = &__p[16 * a47];
      do
      {
        long long v50 = (atomic_uint *)*((void *)v49 - 1);
        if (v50)
        {
          if (atomic_fetch_add(v50 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v50 + 16))(v50);
            if (atomic_fetch_add(v50 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v50 + 24))(v50);
            }
          }
        }
        v49 -= 16;
      }
      while (v49 > __p);
    }
    if (a45 >= 0xB)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1B8B45350(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::runtime_error a23)
{
  std::runtime_error::~runtime_error(&a23);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a19 + 16));
    __cxa_rethrow();
  }
  if (v28[71] > v28[70]) {
    boost::signals2::detail::signal_impl<void (),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::force_cleanup_connections(v23, v25);
  }
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>>::~slot_call_iterator_cache((uint64_t)v28);
  if (v24 && atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
    if (atomic_fetch_add(v24 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v24 + 24))(v24);
    }
  }
  JUMPOUT(0x1B8B4556CLL);
}

void sub_1B8B453B0(uint64_t a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    if (v6[71] > v6[70]) {
      boost::signals2::detail::signal_impl<void (),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::force_cleanup_connections(v2, v4);
    }
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>>::~slot_call_iterator_cache((uint64_t)v6);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    JUMPOUT(0x1B8B4556CLL);
  }
  JUMPOUT(0x1B8B45380);
}

void sub_1B8B453E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,unint64_t a45,char *a46,uint64_t a47)
{
  if (a46)
  {
    if (a47 - 1 >= 0)
    {
      long long v48 = &a46[16 * a47];
      do
      {
        long long v49 = (atomic_uint *)*((void *)v48 - 1);
        if (v49)
        {
          if (atomic_fetch_add(v49 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v49 + 16))(v49);
            if (atomic_fetch_add(v49 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v49 + 24))(v49);
            }
          }
        }
        v48 -= 16;
      }
      while (v48 > a46);
    }
    if (a45 >= 0xB)
    {
      operator delete(a46);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1B8B45564(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B8B4556CLL);
  }
  __clang_call_terminate(a1);
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1B8B45618(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20EnableResetSPMIEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B45754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B45768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B45794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm14ResetSPMIEvent10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B45870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B45884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B458B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        long long v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  long long v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    uint64_t v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    uint64_t v24 = (uint64_t *)v23[1];
    uint64_t v25 = (uint64_t **)(a1 + 4);
    uint64_t v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  uint64_t v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        unint64_t v15 = (uint64_t *)v11;
      }
      else {
        unint64_t v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        unint64_t v16 = v10;
      }
      else {
        unint64_t v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        unint64_t v15 = (uint64_t *)v11;
        uint64_t v10 = (uint64_t *)v11;
      }
      else
      {
        uint64_t v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  uint64_t v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  uint64_t v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    uint64_t v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        uint64_t v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        uint64_t v20 = (uint64_t **)v21;
        uint64_t v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  long long v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    uint64_t v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      long long v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      long long v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      long long v26 = v20;
    }
    if (v29) {
      long long v31 = v28;
    }
    else {
      uint64_t v20 = v26;
    }
    long long v26 = *v31;
  }
  while (*v31);
LABEL_42:
  uint64_t v24 = (uint64_t *)v19[1];
  long long v32 = a1;
  if (v20 != v7) {
    long long v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    unint64_t v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        long long v38 = v37;
        unint64_t v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      long long v41 = v10;
      do
      {
        long long v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        long long v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      uint64_t v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          long long v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          long long v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      long long v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  long long v7 = (uint64_t **)v6;
LABEL_75:
  uint64_t v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  *long long v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  long long v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    long long v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  long long v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  long long v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (void *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v4 = operator new(16 * a2);
  }
  uint64_t v6 = *(void **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  if (v5)
  {
    long long v7 = &v6[2 * v5];
    int v8 = v4;
    do
    {
      uint64_t v9 = v6[1];
      void *v8 = *v6;
      v8[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    uint64_t v6 = *(void **)(a1 + 168);
  }
  if (v6)
  {
    uint64_t v10 = *(void *)(a1 + 176);
    if (v10 - 1 >= 0)
    {
      uint64_t v11 = &v6[2 * v10];
      do
      {
        int v12 = (atomic_uint *)*(v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 2;
      }
      while (v11 > v6);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 168) = v4;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      uint64_t v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    uint64_t v6 = (uint64_t **)v3[2];
    long long v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  uint64_t v6 = (uint64_t **)v3[2];
  long long v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  void *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    long long v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
    goto LABEL_16;
  }
  long long v7 = 0;
  uint64_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    BOOL v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      unint64_t v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_48;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      uint64_t v20 = (uint64_t *)v7[1];
      const void *v14 = v20;
      if (v20) {
        _OWORD v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14) {
        uint64_t result = v7;
      }
      long long v7 = *v14;
      unint64_t v16 = (void *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    uint64_t v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        uint64_t v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        uint64_t *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        unint64_t v16 = v7;
      }
      int v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      uint64_t *v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      void v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_24:
    long long v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    unint64_t v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_38:
      uint64_t v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      int v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        int v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_24;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    int v17 = v14[1];
    BOOL v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    _OWORD v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    uint64_t *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    long long v7 = *(uint64_t **)(*v7 + 8);
    unint64_t v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_38;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_38;
  }
  uint64_t v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    unint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    *long long v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    _OWORD v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    uint64_t v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  void v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  uint64_t *v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[8] = v2;
  v6[9] = v2;
  v6[6] = v2;
  v6[7] = v2;
  v6[4] = v2;
  v6[5] = v2;
  void v6[2] = v2;
  v6[3] = v2;
  v6[0] = v2;
  v6[1] = v2;
  unint64_t v7 = 10;
  std::string __p = v6;
  uint64_t v9 = 0;
  uint64_t v10 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)this + 24))(this);
  if (*((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v6);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)v10 + 32))(v10);
  uint64_t v3 = (char *)__p;
  if (__p)
  {
    if (v9 - 1 >= 0)
    {
      unint64_t v4 = (char *)__p + 16 * v9;
      do
      {
        int v5 = (atomic_uint *)*((void *)v4 - 1);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v7 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8B464FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B46510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B8B46640(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1F1260320;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F12602A8;
  *(void *)(a1 + 8) = &unk_1F12602D8;
  *(void *)(a1 + 24) = &unk_1F1260300;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1260378;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1F1260320;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((void *)v2 + 1) = &unk_1F1260350;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 3) = &unk_1F1260378;
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &unk_1F12602A8;
  *((void *)v2 + 1) = &unk_1F12602D8;
  *((void *)v2 + 3) = &unk_1F1260300;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_1B8B468C4(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B468E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B8B4695C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1260378;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete((void *)a1);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1F1260378;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;
  uint64_t vars8;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1F1260378;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete(&this[-1].__imp_);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F1260378;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;
  uint64_t vars8;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F1260378;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1260320;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F1260350;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F1260378;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F12602A8;
  *(void *)(a1 + 8) = &unk_1F12602D8;
  *(void *)(a1 + 24) = &unk_1F1260300;
  return a1;
}

void sub_1B8B46DF8(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    uint64_t result = *(void *)(a1 + 8);
    if (!result) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v7);
  uint64_t v5 = v7;
  uint64_t v8 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
LABEL_8:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
LABEL_9:
  *(void *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  return result;
}

void sub_1B8B46F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1B8B46FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B46FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        uint64_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    uint64_t v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        uint64_t v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            BOOL v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 280);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        BOOL v18 = *(_DWORD **)(v7 + 288);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 288) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        int v17 = *(_DWORD **)(v7 + 288);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 288) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 284);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          uint64_t v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        uint64_t v28 = *(_DWORD **)(v27 + 288);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 288) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              long long v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_1B8B476A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8B476B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8B47894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    unint64_t v2 = *(atomic_uint **)(a1 + 16);
    if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::reserve(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[30];
  if (v2 < a2)
  {
    unint64_t v4 = 4 * v2;
    if (v4 <= a2) {
      unint64_t v5 = a2;
    }
    else {
      unint64_t v5 = v4;
    }
    uint64_t v6 = a1;
    if (v5 >= 0xB)
    {
      if (v5 >= 0xAAAAAAAAAAAAAABLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v6 = operator new(24 * v5);
    }
    std::uninitialized_copy[abi:ne180100]<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *,boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *>(a1[31], a1[31] + 24 * a1[32], (uint64_t)v6);
    if (a1[31]) {
      boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(a1);
    }
    a1[30] = v5;
    a1[31] = v6;
  }
}

uint64_t std::uninitialized_copy[abi:ne180100]<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *,boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      uint64_t v9 = *(void *)(a1 + v6 + 8);
      if (*(_DWORD *)(a1 + v6) == *(int *)(a1 + v6) >> 31)
      {
        uint64_t v10 = *(void *)(v8 + 16);
        *(void *)(v7 + 8) = v9;
        *(void *)(v7 + 16) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
        }
      }
      else
      {
        *(void *)(v7 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      }
      *(_DWORD *)uint64_t v7 = *(_DWORD *)v8 ^ (*(int *)v8 >> 31);
      v6 += 24;
    }
    while (v8 + 24 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_1B8B47B28(void *a1)
{
  __cxa_begin_catch(a1);
  if (v2)
  {
    long long v3 = (void *)(v1 + 8);
    do
    {
      if (*((_DWORD *)v3 - 2) == *((int *)v3 - 2) >> 31)
      {
        unint64_t v4 = (atomic_uint *)v3[1];
        if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
          if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
          }
        }
      }
      else if (*v3)
      {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  __cxa_rethrow();
}

void sub_1B8B47C0C(_Unwind_Exception *a1)
{
}

void boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  long long v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  v68[4] = v4;
  v68[5] = v4;
  v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  unint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  std::string __p = v68;
  uint64_t v71 = 0;
  long long v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    uint64_t v8 = *v3;
    uint64_t v9 = **v3;
    uint64_t v66 = v7;
    uint64_t v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    void *v10 = v10;
    v10[1] = v10;
    void v10[2] = 0;
    char v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      do
      {
        int v15 = operator new(0x20uLL);
        _OWORD v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          uint64_t v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        void *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        void *v11 = v15;
        void v11[2] = ++v13;
        char v12 = (void *)v12[1];
        uint64_t v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    uint64_t v64 = v3;
    long long v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    v11[4] = 0;
    BOOL v18 = v11 + 4;
    void v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      uint64_t v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        uint64_t v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          void v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          uint64_t v27 = v21;
          if (v25)
          {
            do
            {
              uint64_t v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              uint64_t v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              long long v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              long long v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              uint64_t v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              long long v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              uint64_t v22 = v33;
            }
            while (!v29);
          }
          uint64_t v21 = v31;
          uint64_t v22 = v33;
        }
        while (v31 != v20);
      }
      uint64_t *v66 = (uint64_t)v11;
      v66[1] = 0;
      uint64_t v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      void *v53 = &unk_1F1260198;
      v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      long long v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      uint64_t v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      uint64_t *v55 = (uint64_t)&unk_1F1260138;
      v55[2] = (uint64_t)v66;
      char v56 = (atomic_uint *)v64[1];
      _OWORD *v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      long long v35 = (void *)*v18;
      long long v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            long long v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            long long v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            long long v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            v47[2] = v43;
            void *v42 = v47;
            long long v49 = (void *)**v17;
            if (v49)
            {
              _DWORD *v17 = v49;
              long long v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          long long v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                long long v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              long long v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              long long v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      long long v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          long long v51 = v50;
          long long v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          long long v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  uint64_t v57 = (uint64_t **)*v3;
  uint64_t v58 = (uint64_t *)**v3;
  uint64_t v59 = (uint64_t *)v58[1];
  long long v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        uint64_t v59 = (uint64_t *)v59[1];
        long long v67 = v59;
        uint64_t v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      uint64_t v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      uint64_t v57 = (uint64_t **)*v3;
      long long v67 = v59;
      uint64_t v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  unint64_t v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      uint64_t v62 = (char *)__p + 16 * v71;
      do
      {
        uint64_t v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8B482C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>,void *>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      long long v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          unint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          long long v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    void v8[5] = v3;
    void v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    std::string __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        unint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1B8B48D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t logs::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>)
{
  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = operator new(0xE0uLL);
  uint64_t v15 = a1[1];
  uint64_t v44 = *a1;
  int v45 = (std::__shared_weak_count *)v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v16 = _Block_copy(v16);
  }
  int v17 = *(NSObject **)(a2 + 8);
  long long v42 = v16;
  dispatch_object_t v43 = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  BOOL v18 = *(void **)a3;
  if (*(void *)a3) {
    BOOL v18 = _Block_copy(v18);
  }
  unint64_t v19 = *(NSObject **)(a3 + 8);
  long long aBlock = v18;
  dispatch_object_t object = v19;
  if (v19) {
    dispatch_retain(v19);
  }
  unint64_t v20 = *a4;
  CFTypeRef cf = v20;
  if (v20) {
    CFRetain(v20);
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v38 = *(std::string *)a5;
  }
  uint64_t v21 = *a6;
  uint64_t v22 = (std::__shared_weak_count *)a6[1];
  v37[0] = v21;
  v37[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  logs::QMICommandDriver::QMICommandDriver((uint64_t)v14, &v44, (uint64_t)&v42, (uint64_t)&aBlock, (const __CFDictionary **)&cf, (uint64_t)&v38, v37);
  *a7 = v14;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v24 = (std::__shared_weak_count *)operator new(0x20uLL);
  v24->__shared_owners_ = 0;
  p_shared_owners = &v24->__shared_owners_;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12607D0;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  a7[1] = v24;
  uint64_t v26 = (std::__shared_weak_count *)*((void *)v14 + 10);
  if (!v26)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v14 + 9) = v14;
    *((void *)v14 + 10) = v24;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_21;
    }
LABEL_24:
    uint64_t v27 = (void *)*a7;
    if (!*(void *)(*a7 + 56)) {
      goto LABEL_32;
    }
    goto LABEL_25;
  }
  if (v26->__shared_owners_ != -1) {
    goto LABEL_24;
  }
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v14 + 9) = v14;
  *((void *)v14 + 10) = v24;
  std::__shared_weak_count::__release_weak(v26);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_24;
  }
LABEL_21:
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  uint64_t v27 = (void *)*a7;
  if (!*(void *)(*a7 + 56)) {
    goto LABEL_32;
  }
LABEL_25:
  uint64_t v28 = (std::__shared_weak_count *)v27[10];
  if (!v28 || (uint64_t v29 = v27[9], (v30 = std::__shared_weak_count::lock(v28)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v31 = v30;
  uint64_t v48 = v29;
  long long v49 = v30;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v27 + 1));
  uint64_t v46 = v29;
  long long v47 = v31;
  uint64_t v48 = 0;
  long long v49 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  long long v32 = v47;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  long long v33 = v49;
  if (!v49 || atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_32:
    if (!v22) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (!v22)
  {
LABEL_34:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_38:
    operator delete(v38.__r_.__value_.__l.__data_);
    CFTypeRef v34 = cf;
    if (!cf) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_33:
  if (atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_38;
  }
LABEL_35:
  CFTypeRef v34 = cf;
  if (cf) {
LABEL_39:
  }
    CFRelease(v34);
LABEL_40:
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v43) {
    dispatch_release(v43);
  }
  if (v42) {
    _Block_release(v42);
  }
  long long v35 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a7 + 72))(*a7, v23);
}

void sub_1B8B49294(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
}

void sub_1B8B49318()
{
}

void sub_1B8B49328()
{
}

uint64_t dispatch::callback<void({block_pointer})(std::shared_ptr<std::vector<unsigned char>>,BOOL)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(logs::CollectionState)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t logs::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const __CFDictionary **a5, uint64_t a6, void *a7)
{
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v35 = *a2;
  long long v36 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v14 = _Block_copy(v14);
  }
  uint64_t v15 = *(NSObject **)(a3 + 8);
  long long v33 = v14;
  dispatch_object_t v34 = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  uint64_t v16 = *(void **)a4;
  if (*(void *)a4) {
    uint64_t v16 = _Block_copy(v16);
  }
  int v17 = *(NSObject **)(a4 + 8);
  long long v31 = v16;
  dispatch_object_t v32 = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  CFDictionaryRef v30 = *a5;
  if (v30) {
    CFRetain(v30);
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v29 = *(std::string *)a6;
  }
  BOOL v18 = (std::__shared_weak_count *)a7[1];
  void v27[2] = *a7;
  uint64_t v28 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  logs::CommandDriver::CommandDriver();
  if (!v28 || atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
LABEL_24:
    operator delete(v29.__r_.__value_.__l.__data_);
    CFDictionaryRef v19 = v30;
    if (!v30) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
LABEL_21:
  CFDictionaryRef v19 = v30;
  if (v30) {
LABEL_25:
  }
    CFRelease(v19);
LABEL_26:
  if (v32) {
    dispatch_release(v32);
  }
  if (v31) {
    _Block_release(v31);
  }
  if (v34) {
    dispatch_release(v34);
  }
  if (v33) {
    _Block_release(v33);
  }
  unint64_t v20 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)a1 = &unk_1F12603B8;
  *(_OWORD *)(a1 + 192) = 0u;
  v27[0] = 0xAAAAAAAAAAAAAAAALL;
  v27[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v27, *a5);
  memset(&__p[3], 170, 24);
  uint64_t v21 = (const char *)*MEMORY[0x1E4FB99D8];
  memset(__p, 0, 24);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, v21);
  ctu::cf::map_adapter::getString();
  int v22 = MEMORY[0x1BA9C7700](&v37);
  if (SHIBYTE(__p[5]) < 0) {
    std::string::__init_copy_ctor_external(&v25, (const std::string::value_type *)__p[3], (std::string::size_type)__p[4]);
  }
  else {
    std::string v25 = *(std::string *)&__p[3];
  }
  *(_DWORD *)(a1 + 208) = logs::QMICommandDriver::convertType_sync(v22, (char *)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, (const char *)*MEMORY[0x1E4FB99E0]);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v27, (const __CFString *)__p[0]);
  MEMORY[0x1BA9C7700](__p);
  *(_DWORD *)(a1 + 212) = Int;
  if (SHIBYTE(__p[5]) < 0) {
    operator delete(__p[3]);
  }
  MEMORY[0x1BA9C7760](v27);
  return a1;
}

void sub_1B8B49750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v34 - 128));
  dispatch::callback<void({block_pointer})(std::shared_ptr<std::vector<unsigned char>>,BOOL)>::~callback(v34 - 120);
  dispatch::callback<void({block_pointer})(logs::CollectionState)>::~callback(v34 - 104);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v34 - 88);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::convertType_sync(int a1, char *a2)
{
  uint64_t v2 = a2;
  if (a2[23] < 0)
  {
    uint64_t v2 = *(const char **)a2;
    uint64_t result = strcasecmp(*(const char **)a2, (const char *)*MEMORY[0x1E4FB99F8]);
    if (!result) {
      return result;
    }
    if (!strcasecmp(v2, (const char *)*MEMORY[0x1E4FB99E8])) {
      return 1;
    }
  }
  else
  {
    uint64_t result = strcasecmp(a2, (const char *)*MEMORY[0x1E4FB99F8]);
    if (!result) {
      return result;
    }
    if (!strcasecmp(v2, (const char *)*MEMORY[0x1E4FB99E8])) {
      return 1;
    }
  }
  if (!strcasecmp(v2, (const char *)*MEMORY[0x1E4FB99F0])) {
    return 2;
  }
  else {
    return 3;
  }
}

void logs::CommandDriver::~CommandDriver(void **this)
{
  *this = &unk_1F1260730;
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  uint64_t v2 = this[18];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = this[17];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = this[16];
  if (v4) {
    dispatch_release(v4);
  }
  unint64_t v5 = this[15];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)this[14];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *this = &unk_1F1260790;
  MEMORY[0x1BA9C75B0](this + 1);
  uint64_t v7 = this[12];
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = this[11];
  if (v8) {
    dispatch_release(v8);
  }
  unint64_t v9 = (std::__shared_weak_count *)this[10];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void logs::QMICommandDriver::~QMICommandDriver(logs::QMICommandDriver *this)
{
  *(void *)this = &unk_1F12603B8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((logs::QMICommandDriver *)((char *)this + 176));
  logs::CommandDriver::~CommandDriver((void **)this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(void *)this = &unk_1F12603B8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((logs::QMICommandDriver *)((char *)this + 176));
  logs::CommandDriver::~CommandDriver((void **)this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(void *)this = &unk_1F12603B8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((logs::QMICommandDriver *)((char *)this + 176));
  logs::CommandDriver::~CommandDriver((void **)this);
  operator delete(v3);
}

void logs::QMICommandDriver::init(logs::QMICommandDriver *this)
{
  uint64_t v5 = *((void *)this + 9);
  long long v3 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 72;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN4logs16QMICommandDriver4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_32_0;
  v11[4] = this;
  void v11[5] = v5;
  uint64_t v12 = v7;
  uint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4logs13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_71;
  void block[4] = v4;
  block[5] = &v13;
  unint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  long long v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v105 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v106 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v105, *(Registry **)(v2 + 104));
  if (!v105)
  {
    Name = (const char *)logs::CommandDriver::getName((logs::CommandDriver *)v2);
    size_t v11 = strlen(Name);
    if (v11 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v46 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v46 = v11 | 7;
      }
      uint64_t v47 = v46 + 1;
      p_dst = (void **)operator new(v46 + 1);
      size_t v103 = v12;
      unint64_t v104 = v47 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v104) = v11;
      p_dst = (void **)&__dst;
      if (!v11)
      {
        LOBYTE(__dst) = 0;
        uint64_t v14 = *(NSObject **)(v2 + 88);
        uint64_t v94 = v14;
        if (!v14) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    memmove(p_dst, Name, v12);
    *((unsigned char *)p_dst + v12) = 0;
    uint64_t v14 = *(NSObject **)(v2 + 88);
    uint64_t v94 = v14;
    if (!v14)
    {
LABEL_16:
      if (*(_DWORD *)(v2 + 208) > 2u)
      {
        char v15 = 0;
        LOBYTE(v99[0]) = 0;
      }
      else
      {
        strcpy((char *)v99, "radio");
        char v15 = 5;
      }
      char v100 = v15;
      uint64_t v48 = *(std::__shared_weak_count **)(v2 + 80);
      if (!v48 || (uint64_t v49 = *(void *)(v2 + 72), (v50 = std::__shared_weak_count::lock(v48)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      long long v51 = v50;
      atomic_fetch_add_explicit(&v50->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v92 = 0;
        unint64_t v93 = 0;
        uint64_t v52 = std::__shared_weak_count::lock(v50);
        if (v52)
        {
LABEL_102:
          atomic_fetch_add_explicit(&v52->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v92 = v49;
          unint64_t v93 = v52;
LABEL_103:
          std::__shared_weak_count::__release_weak(v51);
          if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
          qmi::Client::createWithQueue();
          long long v53 = v109;
          long long v109 = 0uLL;
          uint64_t v54 = *(std::__shared_weak_count **)(v2 + 200);
          *(_OWORD *)(v2 + 192) = v53;
          if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
          qmi::Client::~Client((qmi::Client *)buf);
          if (v93) {
            std::__shared_weak_count::__release_weak(v93);
          }
          if (v100 < 0)
          {
            operator delete(v99[0]);
            std::string v25 = v94;
            if (!v94) {
              goto LABEL_46;
            }
          }
          else
          {
            std::string v25 = v94;
            if (!v94) {
              goto LABEL_46;
            }
          }
LABEL_45:
          dispatch_release(v25);
          goto LABEL_46;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v51);
        uint64_t v92 = 0;
        unint64_t v93 = 0;
        uint64_t v52 = std::__shared_weak_count::lock(v51);
        if (v52) {
          goto LABEL_102;
        }
      }
      uint64_t v92 = 0;
      unint64_t v93 = v52;
      goto LABEL_103;
    }
LABEL_15:
    dispatch_retain(v14);
    goto LABEL_16;
  }
  uint64_t v4 = (const char *)logs::CommandDriver::getName((logs::CommandDriver *)v2);
  size_t v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v7 = (void **)operator new(v16 + 1);
    size_t v103 = v6;
    unint64_t v104 = v17 | 0x8000000000000000;
    long long __dst = v7;
  }
  else
  {
    HIBYTE(v104) = v5;
    uint64_t v7 = (void **)&__dst;
    if (!v5)
    {
      LOBYTE(__dst) = 0;
      uint64_t v8 = *(NSObject **)(v2 + 88);
      unint64_t v101 = v8;
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  memmove(v7, v4, v6);
  *((unsigned char *)v7 + v6) = 0;
  uint64_t v8 = *(NSObject **)(v2 + 88);
  unint64_t v101 = v8;
  if (v8) {
LABEL_8:
  }
    dispatch_retain(v8);
LABEL_9:
  if (*(_DWORD *)(v2 + 208) > 2u)
  {
    char v9 = 0;
    LOBYTE(v99[0]) = 0;
  }
  else
  {
    strcpy((char *)v99, "radio");
    char v9 = 5;
  }
  char v100 = v9;
  BOOL v18 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v18 || (v19 = *(void *)(v2 + 72), (unint64_t v20 = std::__shared_weak_count::lock(v18)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v21 = v20;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    int v22 = std::__shared_weak_count::lock(v21);
    if (v22) {
      goto LABEL_28;
    }
LABEL_91:
    uint64_t v97 = 0;
    uint64_t v98 = v22;
    goto LABEL_29;
  }
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  int v22 = std::__shared_weak_count::lock(v20);
  if (!v22) {
    goto LABEL_91;
  }
LABEL_28:
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v97 = v19;
  uint64_t v98 = v22;
LABEL_29:
  std::__shared_weak_count::__release_weak(v21);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v95 = v105;
  long long v96 = v106;
  if (v106) {
    atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v23 = v109;
  long long v109 = 0uLL;
  uint64_t v24 = *(std::__shared_weak_count **)(v2 + 200);
  *(_OWORD *)(v2 + 192) = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
  if (v98) {
    std::__shared_weak_count::__release_weak(v98);
  }
  if (v100 < 0) {
    operator delete(v99[0]);
  }
  std::string v25 = v101;
  if (v101) {
    goto LABEL_45;
  }
LABEL_46:
  if (SHIBYTE(v104) < 0) {
    operator delete(__dst);
  }
  uint64_t v26 = (qmi::Client *)(v2 + 176);
  uint64_t v85 = MEMORY[0x1E4F143A8];
  uint64_t v86 = 1174405120;
  size_t v87 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_2;
  long long v88 = &__block_descriptor_tmp_9;
  uint64_t v28 = a1[5];
  uint64_t v27 = (std::__shared_weak_count *)a1[6];
  uint64_t v89 = v2;
  uint64_t v90 = v28;
  long long v91 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  uint64_t v78 = MEMORY[0x1E4F143A8];
  uint64_t v79 = 1174405120;
  CFTypeRef v80 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_3;
  uint64_t v81 = &__block_descriptor_tmp_6_1;
  uint64_t v30 = a1[5];
  std::string v29 = (std::__shared_weak_count *)a1[6];
  uint64_t v82 = v2;
  uint64_t v83 = v30;
  int v84 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  uint64_t v71 = MEMORY[0x1E4F143A8];
  uint64_t v72 = 1174405120;
  uint64_t v73 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_7;
  char v74 = &__block_descriptor_tmp_11_1;
  uint64_t v32 = a1[5];
  long long v31 = (std::__shared_weak_count *)a1[6];
  uint64_t v75 = v2;
  uint64_t v76 = v32;
  unint64_t v77 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  uint64_t v64 = MEMORY[0x1E4F143A8];
  uint64_t v65 = 1174405120;
  uint64_t v66 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_12;
  long long v67 = &__block_descriptor_tmp_15_0;
  uint64_t v34 = a1[5];
  long long v33 = (std::__shared_weak_count *)a1[6];
  uint64_t v68 = v2;
  uint64_t v69 = v34;
  uint64_t v70 = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  uint64_t v57 = MEMORY[0x1E4F143A8];
  uint64_t v58 = 1174405120;
  uint64_t v59 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_16;
  uint64_t v60 = &__block_descriptor_tmp_20_2;
  uint64_t v36 = a1[5];
  uint64_t v35 = (std::__shared_weak_count *)a1[6];
  uint64_t v61 = v2;
  uint64_t v62 = v36;
  uint64_t v63 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  v55[0] = MEMORY[0x1E4F143A8];
  v55[1] = 1174405120;
  v55[2] = ___ZN4logs16QMICommandDriver4initEv_block_invoke_21;
  void v55[3] = &__block_descriptor_tmp_29;
  uint64_t v38 = a1[5];
  uint64_t v37 = (std::__shared_weak_count *)a1[6];
  v55[4] = v2;
  v55[5] = v38;
  char v56 = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v108 = 0x40000000;
  *(void *)&long long v109 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm17LogCollectionData10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v109 + 1) = &unk_1E6193838;
  size_t v110 = v55;
  qmi::Client::setIndHandler();
  int v39 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v39 || (uint64_t v40 = *(void *)(v2 + 72), (v41 = std::__shared_weak_count::lock(v39)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v42 = v41;
  atomic_fetch_add_explicit(&v41->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *(void *)long long buf = 0;
    uint64_t v108 = 0;
    dispatch_object_t v43 = std::__shared_weak_count::lock(v41);
    if (v43) {
      goto LABEL_64;
    }
LABEL_88:
    uint64_t v44 = (std::__shared_weak_count *)v108;
    *(void *)long long buf = 0;
    uint64_t v108 = (uint64_t)v43;
    if (!v44) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
  std::__shared_weak_count::__release_weak(v42);
  *(void *)long long buf = 0;
  uint64_t v108 = 0;
  dispatch_object_t v43 = std::__shared_weak_count::lock(v42);
  if (!v43) {
    goto LABEL_88;
  }
LABEL_64:
  atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v44 = (std::__shared_weak_count *)v108;
  *(void *)long long buf = v40;
  uint64_t v108 = (uint64_t)v43;
  if (v44) {
LABEL_65:
  }
    std::__shared_weak_count::__release_weak(v44);
LABEL_66:
  std::__shared_weak_count::__release_weak(v42);
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  qmi::Client::setClientHandle();
  if (v108) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v108);
  }
  qmi::Client::start(v26);
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  if (v63) {
    std::__shared_weak_count::__release_weak(v63);
  }
  if (v70) {
    std::__shared_weak_count::__release_weak(v70);
  }
  if (v77) {
    std::__shared_weak_count::__release_weak(v77);
  }
  if (v84) {
    std::__shared_weak_count::__release_weak(v84);
  }
  if (v91) {
    std::__shared_weak_count::__release_weak(v91);
  }
  int v45 = v106;
  if (v106)
  {
    if (!atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_1B8B4A80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  uint64_t v52 = *(std::__shared_weak_count **)(v50 - 248);
  if (v52)
  {
    std::__shared_weak_count::__release_weak(v52);
    if ((*(char *)(v50 - 177) & 0x80000000) == 0)
    {
LABEL_3:
      long long v53 = *(NSObject **)(v50 - 240);
      if (!v53) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v50 - 177) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 200));
  long long v53 = *(NSObject **)(v50 - 240);
  if (!v53)
  {
LABEL_8:
    if (*(char *)(v50 - 145) < 0)
    {
      operator delete(*(void **)(v50 - 168));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v50 - 144);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v50 - 144);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v53);
  goto LABEL_8;
}

void logs::QMICommandDriver::getServiceName_sync(unsigned int a1@<W1>, char *a2@<X8>)
{
  if (a1 > 2)
  {
    *a2 = 0;
    a2[23] = 0;
  }
  else
  {
    strcpy(a2, "radio");
    a2[23] = 5;
  }
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    char v9 = v4;
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        size_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I Stopped", v7, 2u);
        }
        logs::CommandDriver::notifyState_sync();
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B4AB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::onStop_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_3(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    char v9 = v4;
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        size_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I Started", v7, 2u);
        }
        logs::CommandDriver::notifyState_sync();
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B4AC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::onStart_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_7(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    char v9 = v4;
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        size_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I EnterLowPower", v7, 2u);
        }
        logs::CommandDriver::notifyState_sync();
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B4AD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::onEnterLowPower_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_12(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    char v9 = v4;
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        size_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I ExitLowPower", v7, 2u);
        }
        logs::CommandDriver::notifyState_sync();
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B4AE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::onExitLowPower_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_16(void *a1, xpc_object_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    size_t v6 = std::__shared_weak_count::lock(v3);
    BOOL v18 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v8 = v6;
LABEL_10:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (a2)
      {
        xpc_retain(a2);
        uint64_t v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          goto LABEL_9;
        }
      }
      else
      {
        a2 = xpc_null_create();
        uint64_t v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          goto LABEL_9;
        }
      }
      char v9 = (char *)MEMORY[0x1BA9C88A0](a2);
      memset(__dst, 170, sizeof(__dst));
      size_t v10 = strlen(v9);
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v11 = (void *)v10;
      if (v10 >= 0x17)
      {
        uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17) {
          uint64_t v13 = v10 | 7;
        }
        uint64_t v14 = v13 + 1;
        size_t v12 = (void **)operator new(v13 + 1);
        __dst[1] = v11;
        __dst[2] = (void *)(v14 | 0x8000000000000000);
        __dst[0] = v12;
      }
      else
      {
        HIBYTE(__dst[2]) = v10;
        size_t v12 = __dst;
        if (!v10) {
          goto LABEL_21;
        }
      }
      memcpy(v12, v9, (size_t)v11);
LABEL_21:
      *((unsigned char *)v11 + (void)v12) = 0;
      free(v9);
      char v15 = __dst;
      if (SHIBYTE(__dst[2]) < 0) {
        char v15 = (void **)__dst[0];
      }
      *(_DWORD *)long long buf = 136315138;
      unint64_t v20 = v15;
      _os_log_error_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_ERROR, "Server error: %s", buf, 0xCu);
      if (SHIBYTE(__dst[2]) < 0) {
        operator delete(__dst[0]);
      }
LABEL_9:
      qmi::Client::stop((qmi::Client *)(v5 + 176));
      logs::CommandDriver::notifyState_sync();
      xpc_release(a2);
      uint64_t v8 = v18;
      if (!v18) {
        return;
      }
      goto LABEL_10;
    }
  }
}

void sub_1B8B4B0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t logs::QMICommandDriver::onError_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_21(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  size_t v6 = std::__shared_weak_count::lock(v3);
  uint64_t v38 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v16 = v6;
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    return;
  }
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2000000000;
  char v36 = 0;
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 0x40000000;
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t *))___ZN4logs16QMICommandDriver4initEv_block_invoke_2;
  long long v31 = &unk_1E6193788;
  uint64_t v32 = &v33;
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  char v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)1);
    LOBYTE(v22) = *(unsigned char *)v9;
    v30((uint64_t)v29, &v22);
  }
  uint64_t v22 = 0;
  long long v23 = &v22;
  uint64_t v24 = 0x3802000000;
  std::string v25 = __Block_byref_object_copy__0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = __Block_byref_object_dispose__0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  uint64_t v19 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_24;
  unint64_t v20 = &unk_1E61937B0;
  uint64_t v21 = &v22;
  size_t v10 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (v10)
  {
    *(void *)long long buf = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(buf, v10, &v10[v11], v11);
    v19((uint64_t)v18, (uint64_t)buf);
    if (*(void *)buf)
    {
      uint64_t v40 = *(void **)buf;
      operator delete(*(void **)buf);
    }
  }
  size_t v12 = (std::__shared_weak_count *)v23[6];
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  logs::CommandDriver::sendLogData_sync();
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (*((unsigned char *)v34 + 24))
  {
    uint64_t v13 = *(NSObject **)(v5 + 216);
    if (v13)
    {
      dispatch_source_cancel(v13);
      dispatch_release(*(dispatch_object_t *)(v5 + 216));
      *(void *)(v5 + 216) = 0;
      uint64_t v14 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1B8B00000, v14, OS_LOG_TYPE_DEFAULT, "#I Log collection timer stopped", buf, 2u);
      }
    }
  }
  _Block_object_dispose(&v22, 8);
  char v15 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Block_object_dispose(&v33, 8);
  uint64_t v16 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_25;
  }
}

void sub_1B8B4B4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v32 = *(void **)(v30 - 112);
  if (v32)
  {
    *(void *)(v30 - 104) = v32;
    operator delete(v32);
  }
  _Block_object_dispose(&a17, 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v29 + 40);
  _Block_object_dispose(&a29, 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v30 - 128);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4logs16QMICommandDriver4initEv_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2 != 0;
  return result;
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x18uLL);
  size_t v6 = *(unsigned char **)a2;
  uint64_t v5 = *(unsigned char **)(a2 + 8);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = 0;
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int v8 = (char *)operator new(v5 - v6);
    void *v4 = v8;
    char v9 = &v8[v7];
    v4[2] = &v8[v7];
    memmove(v8, v6, v7);
    v4[1] = v9;
  }
  size_t v10 = operator new(0x20uLL);
  void *v10 = &unk_1F1260820;
  v10[1] = 0;
  void v10[2] = 0;
  v10[3] = v4;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  size_t v12 = *(std::__shared_weak_count **)(v11 + 48);
  *(void *)(v11 + 40) = v4;
  *(void *)(v11 + 48) = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1B8B4B6CC(_Unwind_Exception *a1)
{
  if (v2)
  {
    v1[1] = v2;
    operator delete(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void logs::QMICommandDriver::stopLogCollectionTimer_sync(logs::QMICommandDriver *this)
{
  uint64_t v2 = *((void *)this + 27);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 27));
    *((void *)this + 27) = 0;
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Log collection timer stopped", v4, 2u);
    }
  }
}

void logs::QMICommandDriver::enable(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4logs16QMICommandDriver6enableEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_35_0;
  v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  size_t v6 = *(NSObject **)(a2 + 8);
  long long aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<logs::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4logs16QMICommandDriver6enableEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (const void *)a1[5];
  if (v2)
  {
    uint64_t v4 = _Block_copy(v2);
    uint64_t v5 = a1[6];
    size_t v6 = v4;
    size_t v7 = v5;
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1[6];
  size_t v6 = 0;
  size_t v7 = v5;
  if (v5) {
LABEL_3:
  }
    dispatch_retain(v5);
LABEL_4:
  logs::QMICommandDriver::setCollectionState_sync(v3, 1, (uint64_t)&v6);
  if (v5) {
    dispatch_release(v5);
  }
  if (v4) {
    _Block_release(v4);
  }
}

void sub_1B8B4B8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void logs::QMICommandDriver::setCollectionState_sync(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v4 || (uint64_t v7 = *(void *)(a1 + 72), (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v61 = v10;
  long long v62 = v10;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v61);
  v57[0] = MEMORY[0x1E4F143A8];
  v57[1] = 0x40000000;
  uint64_t v11 = ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  uint64_t v58 = ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  uint64_t v59 = &__block_descriptor_tmp_43;
  uint64_t v60 = a1;
  size_t v12 = (const void **)*((void *)&v61 + 1);
  uint64_t v43 = v7;
  if (*((void *)&v61 + 1) != (void)v62)
  {
    while (*((unsigned char *)*v12 + 8) != 1)
    {
      if (++v12 == (const void **)v62) {
        goto LABEL_12;
      }
    }
  }
  if (v12 == (const void **)v62)
  {
LABEL_12:
    uint64_t v14 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::LogCollectionType>(&v61);
    uint64_t v11 = v58;
  }
  else
  {
    if (!v13) {
      goto LABEL_60;
    }
    uint64_t v14 = v13 + 9;
  }
  v11((uint64_t)v57, v14);
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 0x40000000;
  char v15 = ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
  uint64_t v54 = ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
  uint64_t v55 = &__block_descriptor_tmp_45;
  char v56 = a2;
  uint64_t v16 = (char *)*((void *)&v61 + 1);
  uint64_t v17 = (char *)v62;
  BOOL v18 = (const void **)*((void *)&v61 + 1);
  if (*((void *)&v61 + 1) != (void)v62)
  {
    BOOL v18 = (const void **)*((void *)&v61 + 1);
    while (*((unsigned char *)*v18 + 8) != 16)
    {
      if (++v18 == (const void **)v62) {
        goto LABEL_21;
      }
    }
  }
  if (v18 != (const void **)v62)
  {
    if (v19)
    {
      unint64_t v20 = v19 + 9;
      goto LABEL_44;
    }
LABEL_60:
    __cxa_bad_cast();
  }
LABEL_21:
  uint64_t v21 = operator new(0x10uLL);
  uint64_t v22 = v21;
  v21[4] = 16;
  *(void *)uint64_t v21 = &unk_1F1260910;
  if ((unint64_t)v17 >= *((void *)&v62 + 1))
  {
    int64_t v24 = v17 - v16;
    uint64_t v25 = (v17 - v16) >> 3;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = *((void *)&v62 + 1) - (void)v16;
    if ((uint64_t)(*((void *)&v62 + 1) - (void)v16) >> 2 > v26) {
      unint64_t v26 = v27 >> 2;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28)
    {
      if (v28 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v29 = operator new(8 * v28);
      uint64_t v30 = &v29[8 * v25];
      long long v31 = &v29[8 * v28];
      void *v30 = v22;
      uint64_t v23 = (uint64_t)(v30 + 1);
      if (v16 != v17)
      {
LABEL_32:
        if ((unint64_t)(v24 - 8) < 0x58) {
          goto LABEL_65;
        }
        if ((unint64_t)(v16 - v29) < 0x20) {
          goto LABEL_65;
        }
        unint64_t v32 = ((unint64_t)(v24 - 8) >> 3) + 1;
        uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v34 = &v17[-v33];
        uint64_t v30 = (void *)((char *)v30 - v33);
        uint64_t v35 = &v29[8 * v25 - 16];
        char v36 = v17 - 16;
        uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v38 = *(_OWORD *)v36;
          *(v35 - 1) = *((_OWORD *)v36 - 1);
          _OWORD *v35 = v38;
          v35 -= 2;
          v36 -= 32;
          v37 -= 4;
        }
        while (v37);
        uint64_t v17 = v34;
        if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_65:
          do
          {
            uint64_t v39 = *((void *)v17 - 1);
            v17 -= 8;
            *--uint64_t v30 = v39;
          }
          while (v17 != v16);
        }
        uint64_t v16 = (char *)*((void *)&v61 + 1);
        *((void *)&v61 + 1) = v30;
        *(void *)&long long v62 = v23;
        *((void *)&v62 + 1) = v31;
        if (!v16) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (void *)(8 * v25);
      long long v31 = 0;
      *(void *)(8 * v25) = v22;
      uint64_t v23 = 8 * v25 + 8;
      if (v16 != v17) {
        goto LABEL_32;
      }
    }
    *((void *)&v61 + 1) = v30;
    *(void *)&long long v62 = v23;
    *((void *)&v62 + 1) = v31;
    if (!v16) {
      goto LABEL_43;
    }
LABEL_42:
    operator delete(v16);
    goto LABEL_43;
  }
  *(void *)uint64_t v17 = v21;
  uint64_t v23 = (uint64_t)(v17 + 8);
LABEL_43:
  unint64_t v20 = (char *)v22 + 9;
  *(void *)&long long v62 = v23;
  char v15 = v54;
LABEL_44:
  v15((uint64_t)v53, v20);
  uint64_t v48 = a1 + 176;
  uint64_t v49 = QMIServiceMsg::create();
  int v50 = 25000;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 1174405120;
  v44[2] = ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_3;
  v44[3] = &__block_descriptor_tmp_46_1;
  void v44[4] = v43;
  int v45 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v40 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v40 = _Block_copy(v40);
  }
  uint64_t v41 = *(NSObject **)(a3 + 8);
  uint64_t v46 = v40;
  dispatch_object_t object = v41;
  if (v41) {
    dispatch_retain(v41);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193880;
  aBlock[4] = v44;
  long long v42 = _Block_copy(aBlock);
  uint64_t v52 = v42;
  if (v49)
  {
    qmi::Client::send();
    long long v42 = v52;
  }
  if (v42) {
    _Block_release(v42);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v46) {
    _Block_release(v46);
  }
  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v61);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1B8B4BE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v34);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

void sub_1B8B4BE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void logs::QMICommandDriver::disable(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4logs16QMICommandDriver7disableEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_38_3;
  v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  size_t v6 = *(NSObject **)(a2 + 8);
  long long aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<logs::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4logs16QMICommandDriver7disableEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (const void *)a1[5];
  if (v2)
  {
    uint64_t v4 = _Block_copy(v2);
    uint64_t v5 = a1[6];
    size_t v6 = v4;
    uint64_t v7 = v5;
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1[6];
  size_t v6 = 0;
  uint64_t v7 = v5;
  if (v5) {
LABEL_3:
  }
    dispatch_retain(v5);
LABEL_4:
  logs::QMICommandDriver::setCollectionState_sync(v3, 0, (uint64_t)&v6);
  if (v5) {
    dispatch_release(v5);
  }
  if (v4) {
    _Block_release(v4);
  }
}

void sub_1B8B4C108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void logs::QMICommandDriver::collectLog(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4logs16QMICommandDriver10collectLogEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_41_0;
  v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  size_t v6 = *(NSObject **)(a2 + 8);
  long long aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<logs::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4logs16QMICommandDriver10collectLogEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (const void *)a1[5];
  if (v2)
  {
    uint64_t v4 = _Block_copy(v2);
    uint64_t v5 = a1[6];
    size_t v6 = v4;
    uint64_t v7 = v5;
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1[6];
  size_t v6 = 0;
  uint64_t v7 = v5;
  if (v5) {
LABEL_3:
  }
    dispatch_retain(v5);
LABEL_4:
  logs::QMICommandDriver::collectLog_sync(v3, (uint64_t)&v6);
  if (v5) {
    dispatch_release(v5);
  }
  if (v4) {
    _Block_release(v4);
  }
}

void sub_1B8B4C274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void logs::QMICommandDriver::collectLog_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3 || (v5 = *(void *)(a1 + 72), (size_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v29 = v8;
  long long v30 = v8;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v29);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  char v9 = ___ZN4logs16QMICommandDriver15collectLog_syncEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  unint64_t v26 = ___ZN4logs16QMICommandDriver15collectLog_syncEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  uint64_t v27 = &__block_descriptor_tmp_47;
  uint64_t v28 = a1;
  long long v10 = (const void **)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1) != (void)v30)
  {
    while (*((unsigned char *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v30) {
        goto LABEL_12;
      }
    }
  }
  if (v10 == (const void **)v30)
  {
LABEL_12:
    size_t v12 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::LogCollectionType>(&v29);
    char v9 = v26;
  }
  else
  {
    if (!v11) {
      __cxa_bad_cast();
    }
    size_t v12 = v11 + 9;
  }
  v9((uint64_t)v25, v12);
  uint64_t v20 = a1 + 176;
  uint64_t v21 = QMIServiceMsg::create();
  int v22 = 25000;
  uint64_t v23 = 0;
  int64_t v24 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1174405120;
  v16[2] = ___ZN4logs16QMICommandDriver15collectLog_syncEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
  v16[3] = &__block_descriptor_tmp_48;
  v16[4] = a1;
  v16[5] = v5;
  uint64_t v17 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v13 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v13 = _Block_copy(v13);
  }
  uint64_t v14 = *(NSObject **)(a2 + 8);
  BOOL v18 = v13;
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193880;
  aBlock[4] = v16;
  char v15 = _Block_copy(aBlock);
  int64_t v24 = v15;
  if (v21)
  {
    qmi::Client::send();
    char v15 = v24;
  }
  if (v15) {
    _Block_release(v15);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v29);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1B8B4C58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v30);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

void sub_1B8B4C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(*(void *)(result + 32) + 208);
  return result;
}

uint64_t ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_3(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      size_t v6 = v5;
      if (a1[4])
      {
        int v7 = *(_DWORD *)(a2 + 4);
        long long v8 = (const void *)a1[6];
        if (v8) {
          char v9 = _Block_copy(v8);
        }
        else {
          char v9 = 0;
        }
        BOOL v10 = v7 == 0;
        uint64_t v11 = a1[7];
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 1174405120;
        void v13[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v13[3] = &__block_descriptor_tmp_76_1;
        if (v9) {
          size_t v12 = _Block_copy(v9);
        }
        else {
          size_t v12 = 0;
        }
        long long aBlock = v12;
        BOOL v15 = v10;
        dispatch_async(v11, v13);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v9) {
          _Block_release(v9);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void __copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[6];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  size_t v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ___ZN4logs16QMICommandDriver15collectLog_syncEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(*(void *)(result + 32) + 208);
  return result;
}

void ___ZN4logs16QMICommandDriver15collectLog_syncEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (logs::QMICommandDriver *)a1[4];
    size_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        int v8 = *(_DWORD *)(a2 + 4);
        char v9 = (const void *)a1[7];
        if (v9) {
          BOOL v10 = _Block_copy(v9);
        }
        else {
          BOOL v10 = 0;
        }
        uint64_t v11 = a1[8];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 1174405120;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        block[3] = &__block_descriptor_tmp_76_1;
        if (v10) {
          size_t v12 = _Block_copy(v10);
        }
        else {
          size_t v12 = 0;
        }
        long long aBlock = v12;
        BOOL v15 = v8 == 0;
        dispatch_async(v11, block);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v10) {
          _Block_release(v10);
        }
        if (!v8) {
          logs::QMICommandDriver::startLogCollectionTimer_sync(v5);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8B4C9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void logs::QMICommandDriver::startLogCollectionTimer_sync(logs::QMICommandDriver *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 53))
  {
    *((void *)this + 27) = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 11));
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v2 || (v3 = *((void *)this + 9), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v5 = v4;
    p_shared_weak_owners = &v4->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    int v7 = *((void *)this + 27);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN4logs16QMICommandDriver28startLogCollectionTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_51_0;
    handler[4] = this;
    handler[5] = v3;
    uint64_t v13 = v5;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    dispatch_source_set_event_handler(v7, handler);
    int v8 = *((void *)this + 27);
    dispatch_time_t v9 = dispatch_time(0, 1000000000 * *((unsigned int *)this + 53));
    dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    BOOL v10 = *((void *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *((_DWORD *)this + 53);
      *(_DWORD *)long long buf = 67109120;
      int v15 = v11;
      _os_log_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_DEFAULT, "#I Log collection timer started with timeout %u sec", buf, 8u);
    }
    dispatch_activate(*((dispatch_object_t *)this + 27));
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    std::__shared_weak_count::__release_weak(v5);
  }
}

void __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  size_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN4logs16QMICommandDriver28startLogCollectionTimer_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (NSObject **)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        size_t v6 = v3[5];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "Log collection timer expired !!", buf, 2u);
        }
        qmi::Client::stop((qmi::Client *)(v3 + 22));
        int v7 = v3[27];
        if (v7)
        {
          dispatch_source_cancel(v7);
          dispatch_release(v3[27]);
          v3[27] = 0;
          int v8 = v3[5];
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I Log collection timer stopped", buf, 2u);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B4CDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(logs::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)logs::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    int v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1260790;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1260790;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<logs::QMICommandDriver *,std::shared_ptr<logs::QMICommandDriver> ctu::SharedSynchronizable<logs::CommandDriver>::make_shared_ptr<logs::QMICommandDriver>(logs::QMICommandDriver*)::{lambda(logs::QMICommandDriver *)#1},std::allocator<logs::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<logs::QMICommandDriver *,std::shared_ptr<logs::QMICommandDriver> ctu::SharedSynchronizable<logs::CommandDriver>::make_shared_ptr<logs::QMICommandDriver>(logs::QMICommandDriver*)::{lambda(logs::QMICommandDriver *)#1},std::allocator<logs::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<logs::QMICommandDriver *,std::shared_ptr<logs::QMICommandDriver> ctu::SharedSynchronizable<logs::CommandDriver>::make_shared_ptr<logs::QMICommandDriver>(logs::QMICommandDriver*)::{lambda(logs::QMICommandDriver *)#1},std::allocator<logs::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4logs13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4logs13CommandDriverEE15make_shared_ptrINS1_16QMICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4logs13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4logs13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<logs::QMICommandDriver> ctu::SharedSynchronizable<logs::CommandDriver>::make_shared_ptr<logs::QMICommandDriver>(logs::QMICommandDriver*)::{lambda(logs::QMICommandDriver*)#1}::operator() const(logs::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<std::vector<unsigned char> *,std::shared_ptr<std::vector<unsigned char>>::__shared_ptr_default_delete<std::vector<unsigned char>,std::vector<unsigned char>>,std::allocator<std::vector<unsigned char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<std::vector<unsigned char> *,std::shared_ptr<std::vector<unsigned char>>::__shared_ptr_default_delete<std::vector<unsigned char>,std::vector<unsigned char>>,std::allocator<std::vector<unsigned char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::vector<unsigned char> *,std::shared_ptr<std::vector<unsigned char>>::__shared_ptr_default_delete<std::vector<unsigned char>,std::vector<unsigned char>>,std::allocator<std::vector<unsigned char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001B8C2FA2CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001B8C2FA2CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B8C2FA2CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B8C2FA2CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm17LogCollectionData10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B4D22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B4D240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B4D26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *___ZNK3ctu20SharedSynchronizableIN4logs13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<logs::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4logs13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F1260868;
  block[5] = v5;
  size_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  BOOL v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4logs13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4logs13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4logs13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::LogCollectionType>(void *a1)
{
  uint64_t v2 = operator new(0x10uLL);
  uint64_t v3 = v2;
  v2[4] = 1;
  *(void *)uint64_t v2 = &unk_1F12608C0;
  uint64_t v5 = (char *)a1[2];
  unint64_t v4 = a1[3];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = v2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  int v8 = (char *)a1[1];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = v3;
    uint64_t v7 = (uint64_t)(v14 + 8);
    uint64_t v16 = (char *)(v5 - v8);
    if (v5 == v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  uint64_t v14 = (char *)(8 * v9);
  int v15 = 0;
  *(void *)(8 * v9) = v3;
  uint64_t v7 = 8 * v9 + 8;
  uint64_t v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    v14 -= v19;
    uint64_t v20 = &v13[8 * v9 - 16];
    uint64_t v21 = (long long *)(v5 - 16);
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)uint64_t v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    uint64_t v6 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  size_t result = (char *)v3 + 9;
  a1[2] = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionType>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F12608C0;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionState>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionState>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1260910;
  return result;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  size_t result = *(void **)(a2 + 32);
  if (result) {
    size_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B8B4D818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<qmi::ResponseBase const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, (QMIServiceMsg *)a1);
    qmi::ResponseBase::ResponseBase(a2, __p[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::MessageBase::MessageBase();
  }
}

void sub_1B8B4D8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void awd::QMIAwdCommandDriver::sendEnableMetricSubmission(void *a1, uint64_t *a2, char a3, const void **a4)
{
  uint64_t v5 = *a2;
  if (*a2)
  {
    uint64_t v7 = a2[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    if (*a4)
    {
      int v8 = _Block_copy(*a4);
      uint64_t v9 = (std::__shared_weak_count *)a1[10];
      if (!v9) {
LABEL_16:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      int v8 = 0;
      uint64_t v9 = (std::__shared_weak_count *)a1[10];
      if (!v9) {
        goto LABEL_16;
      }
    }
    uint64_t v11 = a1[9];
    unint64_t v12 = std::__shared_weak_count::lock(v9);
    if (!v12) {
      goto LABEL_16;
    }
    uint64_t v13 = v12;
    uint64_t v14 = operator new(0x28uLL);
    void *v14 = v5;
    v14[1] = v7;
    *((unsigned char *)v14 + 16) = a3;
    v14[3] = v8;
    v14[4] = a1;
    int v15 = a1[11];
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = operator new(0x18uLL);
    void *v16 = v14;
    v16[1] = v11;
    v16[2] = v13;
    dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    unint64_t v10 = a1[5];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v17 = 0;
      _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "AppContext is NULL", v17, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::sendAddConfiguration(void *a1, void *a2, char a3, uint64_t a4, const void **a5)
{
  if (*a2)
  {
    uint64_t v7 = a2[1];
    *(void *)&long long v28 = *a2;
    *((void *)&v28 + 1) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    char v29 = a3;
    long long v31 = 0;
    unint64_t v32 = 0;
    std::string __p = 0;
    uint64_t v9 = *(const void **)a4;
    uint64_t v8 = *(void *)(a4 + 8);
    size_t v10 = v8 - *(void *)a4;
    if (v8 != *(void *)a4)
    {
      if ((v10 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(v8 - *(void *)a4);
      unint64_t v12 = &v11[v10];
      std::string __p = v11;
      unint64_t v32 = &v11[v10];
      memcpy(v11, v9, v10);
      long long v31 = v12;
    }
    if (*a5)
    {
      uint64_t v13 = _Block_copy(*a5);
      long long aBlock = v13;
      uint64_t v34 = a1;
      uint64_t v14 = (std::__shared_weak_count *)a1[10];
      if (!v14) {
LABEL_28:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      uint64_t v13 = 0;
      long long aBlock = 0;
      uint64_t v34 = a1;
      uint64_t v14 = (std::__shared_weak_count *)a1[10];
      if (!v14) {
        goto LABEL_28;
      }
    }
    uint64_t v16 = a1[9];
    unint64_t v17 = std::__shared_weak_count::lock(v14);
    if (!v17) {
      goto LABEL_28;
    }
    uint64_t v18 = v17;
    uint64_t v19 = operator new(0x40uLL);
    *(_OWORD *)uint64_t v19 = v28;
    long long v28 = 0uLL;
    char v20 = v29;
    v19[3] = 0;
    *((unsigned char *)v19 + 16) = v20;
    v19[4] = 0;
    v19[5] = 0;
    uint64_t v21 = __p;
    size_t v22 = v31 - (unsigned char *)__p;
    if (v31 != __p)
    {
      if ((v22 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      long long v23 = (char *)operator new(v31 - (unsigned char *)__p);
      v19[3] = v23;
      uint64_t v24 = &v23[v22];
      v19[5] = &v23[v22];
      memcpy(v23, v21, v22);
      v19[4] = v24;
    }
    long long aBlock = 0;
    v19[6] = v13;
    v19[7] = a1;
    uint64_t v25 = a1[11];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v26 = operator new(0x18uLL);
    void *v26 = v19;
    v26[1] = v16;
    v26[2] = v18;
    dispatch_async_f(v25, v26, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v27 = aBlock;
      if (!aBlock) {
        goto LABEL_22;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      uint64_t v27 = aBlock;
      if (!aBlock)
      {
LABEL_22:
        if (__p)
        {
          long long v31 = (char *)__p;
          operator delete(__p);
        }
        if (*((void *)&v28 + 1))
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(void))(**((void **)&v28 + 1) + 16))(*((void *)&v28 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v28 + 1));
          }
        }
        return;
      }
    }
    _Block_release(v27);
    goto LABEL_22;
  }
  int v15 = a1[5];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v28) = 0;
    _os_log_error_impl(&dword_1B8B00000, v15, OS_LOG_TYPE_ERROR, "AppContext is NULL", (uint8_t *)&v28, 2u);
  }
}

void sub_1B8B4DD34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v16 = *v14;
  if (*v14)
  {
    *(void *)(v13 + 32) = v16;
    operator delete(v16);
  }
  unint64_t v17 = *(std::__shared_weak_count **)(v13 + 8);
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

void awd::QMIAwdCommandDriver::sendClearConfiguration(void *a1, uint64_t *a2, const void **a3)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = a2[1];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    if (*a3)
    {
      uint64_t v6 = _Block_copy(*a3);
      uint64_t v7 = (std::__shared_weak_count *)a1[10];
      if (!v7) {
LABEL_16:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = (std::__shared_weak_count *)a1[10];
      if (!v7) {
        goto LABEL_16;
      }
    }
    uint64_t v9 = a1[9];
    size_t v10 = std::__shared_weak_count::lock(v7);
    if (!v10) {
      goto LABEL_16;
    }
    uint64_t v11 = v10;
    unint64_t v12 = operator new(0x20uLL);
    void *v12 = v4;
    v12[1] = v5;
    void v12[2] = v6;
    void v12[3] = a1;
    uint64_t v13 = a1[11];
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = operator new(0x18uLL);
    void *v14 = v12;
    v14[1] = v9;
    v14[2] = v11;
    dispatch_async_f(v13, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    uint64_t v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v15 = 0;
      _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "AppContext is NULL", v15, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::sendUpdateProperties(void *a1, uint64_t *a2, const void **a3)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = a2[1];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    if (*a3)
    {
      uint64_t v6 = _Block_copy(*a3);
      uint64_t v7 = (std::__shared_weak_count *)a1[10];
      if (!v7) {
LABEL_16:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = (std::__shared_weak_count *)a1[10];
      if (!v7) {
        goto LABEL_16;
      }
    }
    uint64_t v9 = a1[9];
    size_t v10 = std::__shared_weak_count::lock(v7);
    if (!v10) {
      goto LABEL_16;
    }
    uint64_t v11 = v10;
    unint64_t v12 = operator new(0x20uLL);
    void *v12 = v4;
    v12[1] = v5;
    void v12[2] = v6;
    void v12[3] = a1;
    uint64_t v13 = a1[11];
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = operator new(0x18uLL);
    void *v14 = v12;
    v14[1] = v9;
    v14[2] = v11;
    dispatch_async_f(v13, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    uint64_t v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v15 = 0;
      _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "AppContext is NULL", v15, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::sendQueriableMetric(void *a1, uint64_t *a2, uint64_t a3, int *a4, const void **a5)
{
  uint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *(void *)(a3 + 8);
    int v8 = *a4;
    uint64_t v9 = a2[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    if (*a5)
    {
      size_t v10 = _Block_copy(*a5);
      uint64_t v11 = (std::__shared_weak_count *)a1[10];
      if (!v11) {
LABEL_16:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      size_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[10];
      if (!v11) {
        goto LABEL_16;
      }
    }
    uint64_t v13 = a1[9];
    uint64_t v14 = std::__shared_weak_count::lock(v11);
    if (!v14) {
      goto LABEL_16;
    }
    int v15 = v14;
    uint64_t v16 = operator new(0x30uLL);
    void *v16 = v6;
    v16[1] = v9;
    v16[2] = v7;
    *((_DWORD *)v16 + 6) = v8;
    v16[4] = v10;
    v16[5] = a1;
    unint64_t v17 = a1[11];
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v18 = operator new(0x18uLL);
    void *v18 = v16;
    v18[1] = v13;
    void v18[2] = v15;
    dispatch_async_f(v17, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    unint64_t v12 = a1[5];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_error_impl(&dword_1B8B00000, v12, OS_LOG_TYPE_ERROR, "AppContext is NULL", v19, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::sendQueriableMetric(void *a1, uint64_t *a2, uint64_t a3, const void **a4)
{
  uint64_t v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = *(void *)(a3 + 8);
    uint64_t v7 = a2[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    if (*a4)
    {
      int v8 = _Block_copy(*a4);
      uint64_t v9 = (std::__shared_weak_count *)a1[10];
      if (!v9) {
LABEL_16:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      int v8 = 0;
      uint64_t v9 = (std::__shared_weak_count *)a1[10];
      if (!v9) {
        goto LABEL_16;
      }
    }
    uint64_t v11 = a1[9];
    unint64_t v12 = std::__shared_weak_count::lock(v9);
    if (!v12) {
      goto LABEL_16;
    }
    uint64_t v13 = v12;
    uint64_t v14 = operator new(0x30uLL);
    void *v14 = v5;
    v14[1] = v7;
    v14[2] = v6;
    *((_DWORD *)v14 + 6) = 0;
    v14[4] = v8;
    v14[5] = a1;
    int v15 = a1[11];
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = operator new(0x18uLL);
    void *v16 = v14;
    v16[1] = v11;
    v16[2] = v13;
    dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    size_t v10 = a1[5];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v17 = 0;
      _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "AppContext is NULL", v17, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::init(awd::QMIAwdCommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (v3 = *((void *)this + 9), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  void *v6 = this;
  uint64_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  int v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::init(void)::$_0>(awd::QMIAwdCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void awd::QMIAwdCommandDriver::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0xB0uLL);
  uint64_t v7 = (uint64_t)v6;
  int v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v14 = *a1;
  int v15 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  size_t v10 = (std::__shared_weak_count *)a2[1];
  v13[0] = v9;
  v13[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  awd::QMIAwdCommandDriver::QMIAwdCommandDriver((uint64_t)v6, (uint64_t)&v14, (uint64_t)v13);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<awd::QMIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIAwdCommandDriver,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unint64_t v12 = (awd::QMIAwdCommandDriver *)*a3;

  awd::QMIAwdCommandDriver::init(v12);
}

void sub_1B8B4E6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t awd::QMIAwdCommandDriver::QMIAwdCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  int v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  awd::AwdCommandDriver::AwdCommandDriver();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)a1 = &unk_1F1260978;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_1B8B4E838(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  qmi::Client::~Client(v3);
  awd::AwdCommandDriver::~AwdCommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B4E858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void awd::QMIAwdCommandDriver::~QMIAwdCommandDriver(awd::QMIAwdCommandDriver *this)
{
  *(void *)this = &unk_1F1260978;
  qmi::Client::~Client((awd::QMIAwdCommandDriver *)((char *)this + 144));

  awd::AwdCommandDriver::~AwdCommandDriver(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1260978;
  qmi::Client::~Client((awd::QMIAwdCommandDriver *)((char *)this + 144));
  awd::AwdCommandDriver::~AwdCommandDriver(this);

  operator delete(v2);
}

uint64_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(awd::AwdCommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)awd::AwdCommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    int v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)*a1;
  uint64_t v2 = *(void *)(*a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)v1 + 16)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Requesting metric submission to be %s", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v52 = v5;
  long long v51 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v51);
  v50.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v50.tv_useCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v50, 0);
  __darwin_time_t v6 = 1000 * v50.tv_sec + v50.tv_usec / 1000;
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 1174405120;
  uint64_t v44 = ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  int v45 = &__block_descriptor_tmp_10;
  uint64_t v46 = *v1;
  uint64_t v7 = (std::__shared_weak_count *)v1[1];
  uint64_t v47 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v49 = *((unsigned char *)v1 + 16);
  __darwin_time_t v48 = v6;
  int v8 = (char *)*((void *)&v51 + 1);
  uint64_t v9 = (char *)v52;
  size_t v10 = (const void **)*((void *)&v51 + 1);
  if (*((void *)&v51 + 1) != (void)v52)
  {
    size_t v10 = (const void **)*((void *)&v51 + 1);
    while (*((unsigned char *)*v10 + 8) != 68)
    {
      if (++v10 == (const void **)v52) {
        goto LABEL_16;
      }
    }
  }
  if (v10 == (const void **)v52)
  {
LABEL_16:
    uint64_t v13 = operator new(0x20uLL);
    uint64_t v14 = v13;
    v13[8] = 68;
    *(void *)uint64_t v13 = &unk_1F1260A90;
    *((_DWORD *)v13 + 4) = 0;
    unint64_t v12 = v13 + 16;
    v13[20] = 0;
    *((void *)v13 + 3) = 0;
    if ((unint64_t)v9 < *((void *)&v52 + 1))
    {
      *(void *)uint64_t v9 = v13;
      *(void *)&long long v52 = v9 + 8;
      goto LABEL_30;
    }
    int64_t v15 = v9 - v8;
    uint64_t v16 = (v9 - v8) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = *((void *)&v52 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v52 + 1) - (void)v8) >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v20 = operator new(8 * v19);
      uint64_t v21 = &v20[8 * v16];
      size_t v22 = &v20[8 * v19];
      void *v21 = v14;
      uint64_t v23 = (uint64_t)(v21 + 1);
      if (v8 == v9)
      {
LABEL_27:
        *((void *)&v51 + 1) = v21;
        *(void *)&long long v52 = v23;
        *((void *)&v52 + 1) = v22;
        if (!v8)
        {
LABEL_29:
          *(void *)&long long v52 = v23;
          goto LABEL_30;
        }
LABEL_28:
        operator delete(v8);
        goto LABEL_29;
      }
    }
    else
    {
      char v20 = 0;
      uint64_t v21 = (void *)(8 * v16);
      size_t v22 = 0;
      *(void *)(8 * v16) = v14;
      uint64_t v23 = 8 * v16 + 8;
      if (v8 == v9) {
        goto LABEL_27;
      }
    }
    if ((unint64_t)(v15 - 8) < 0x58) {
      goto LABEL_70;
    }
    if ((unint64_t)(v8 - v20) < 0x20) {
      goto LABEL_70;
    }
    unint64_t v32 = ((unint64_t)(v15 - 8) >> 3) + 1;
    uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v34 = &v9[-v33];
    uint64_t v21 = (void *)((char *)v21 - v33);
    uint64_t v35 = &v20[8 * v16 - 16];
    char v36 = v9 - 16;
    uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      _OWORD *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    uint64_t v9 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_70:
      do
      {
        uint64_t v39 = *((void *)v9 - 1);
        v9 -= 8;
        *--uint64_t v21 = v39;
      }
      while (v9 != v8);
    }
    int v8 = (char *)*((void *)&v51 + 1);
    *((void *)&v51 + 1) = v21;
    *(void *)&long long v52 = v23;
    *((void *)&v52 + 1) = v22;
    if (!v8) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  unint64_t v12 = v11 + 16;
LABEL_30:
  v44((uint64_t)v43, (uint64_t)v12);
  uint64_t v41 = QMIServiceMsg::create();
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 1174405120;
  uint64_t v55 = ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_7;
  char v56 = &__block_descriptor_tmp_11_2;
  uint64_t v57 = v2;
  char v61 = *((unsigned char *)v1 + 16);
  uint64_t v58 = *v1;
  uint64_t v24 = (std::__shared_weak_count *)v1[1];
  uint64_t v59 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = (void *)v1[3];
  if (v25) {
    uint64_t v25 = _Block_copy(v25);
  }
  uint64_t v60 = v25;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61938A8;
  aBlock[4] = &buf;
  unint64_t v26 = _Block_copy(aBlock);
  long long v42 = v26;
  if (v41)
  {
    qmi::Client::send();
    unint64_t v26 = v42;
  }
  if (v26) {
    _Block_release(v26);
  }
  if (v60) {
    _Block_release(v60);
  }
  uint64_t v27 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  long long v28 = v47;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v51);
    char v29 = (const void *)v1[3];
    if (!v29) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v51);
  char v29 = (const void *)v1[3];
  if (v29) {
LABEL_46:
  }
    _Block_release(v29);
LABEL_47:
  uint64_t v30 = (std::__shared_weak_count *)v1[1];
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(v1);
  long long v31 = (std::__shared_weak_count *)a1[2];
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1B8B4F04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(a1 + 56);
  *(void *)(a2 + 8) = *(void *)(a1 + 48);
  return result;
}

uint64_t __copy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_7(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    long long v5 = "enabled";
    __darwin_time_t v6 = "error";
    if (!*(unsigned char *)(a1 + 64)) {
      long long v5 = "disabled";
    }
    if (!v3) {
      __darwin_time_t v6 = "success";
    }
    *(_DWORD *)long long buf = 136315394;
    size_t v10 = v5;
    __int16 v11 = 2080;
    unint64_t v12 = v6;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Metric submission %s %s", buf, 0x16u);
  }
  uint64_t v7 = *(void **)(a1 + 56);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  long long aBlock = v7;
  awd::AppContext::operator()();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8B4F408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricIndicationExt>::getSize()
{
  return 16;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricIndicationExt>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 16);
  *(unsigned char *)(v3 + 7) = *(unsigned char *)(result + 20);
  *(void *)(v3 + 8) = *(void *)(result + 24);
  *a2 = v3 + 16;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 13;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricIndicationExt>::clone(__n128 *a1)
{
  char v2 = (__n128 *)operator new(0x20uLL);
  v2->n128_u8[8] = a1->n128_u8[8];
  v2->n128_u64[0] = (unint64_t)&unk_1F1260A90;
  __n128 result = a1[1];
  v2[1] = result;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B4F67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B4F690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B4F6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)*a1;
  uint64_t v59 = v1;
  uint64_t v2 = v1[7];
  uint64_t v78 = 0;
  uint64_t v79 = &v78;
  uint64_t v80 = 0x2000000000;
  char v81 = 1;
  unsigned int v3 = *((unsigned __int8 *)v1 + 16);
  if (v3 < 3)
  {
    uint64_t v5 = v1[3];
    uint64_t v4 = v1[4];
    uint64_t v6 = v4 - v5;
    if (v4 != v5)
    {
      uint64_t v54 = v2;
      uint64_t v7 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int AppID = awd::AppContext::getAppID((awd::AppContext *)*v1);
        uint64_t v9 = awd::asString();
        *(_DWORD *)long long buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = AppID;
        *(_WORD *)uint64_t v83 = 2080;
        *(void *)&v83[2] = v9;
        *(_WORD *)&v83[10] = 2048;
        *(void *)&v83[12] = v6;
        _os_log_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEFAULT, "#I Requesting to add configuration appId: %d, type: %s, payload size: %lu", buf, 0x1Cu);
      }
      size_t v10 = dispatch_group_create();
      __int16 v11 = v10;
      if (v10)
      {
        dispatch_retain(v10);
        dispatch_group_enter(v11);
      }
      uint64_t v58 = v1[4] - v1[3];
      if ((unint64_t)(v58 + 1499) < 0x5DC)
      {
LABEL_8:
        blocunint64_t k = MEMORY[0x1E4F143A8];
        uint64_t v61 = 1174405120;
        uint64_t v62 = ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_21;
        uint64_t v63 = &unk_1F1260B28;
        uint64_t v64 = &v78;
        uint64_t v65 = v54;
        uint64_t v66 = *v1;
        unint64_t v12 = (std::__shared_weak_count *)v1[1];
        long long v67 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v13 = (void *)v1[6];
        uint64_t v14 = a1;
        if (v13) {
          uint64_t v13 = _Block_copy(v13);
        }
        long long aBlock = v13;
        dispatch_group_notify(v11, *(dispatch_queue_t *)(v54 + 88), &block);
        if (aBlock) {
          _Block_release(aBlock);
        }
        int64_t v15 = v67;
        if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11)
        {
          dispatch_group_leave(v11);
          dispatch_release(v11);
          dispatch_release(v11);
        }
        goto LABEL_30;
      }
      LODWORD(v22) = 0;
      unint64_t v23 = (v58 + 1499) / 0x5DCuLL;
      uint64_t v57 = v11;
      unsigned int v56 = v3;
      while (1)
      {
        *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v76 = v24;
        long long v77 = v24;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v76);
        uint64_t v25 = v1[3];
        uint64_t v26 = v25 + (1500 * v22);
        unint64_t v27 = v25 + v58;
        if (v27 >= v26 + 1500) {
          unint64_t v27 = v26 + 1500;
        }
        *(void *)long long buf = MEMORY[0x1E4F143A8];
        *(void *)uint64_t v83 = 1174405120;
        *(void *)&v83[8] = ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
        *(void *)&v83[16] = &__block_descriptor_tmp_18_1;
        uint64_t v84 = *v1;
        long long v28 = (std::__shared_weak_count *)v1[1];
        uint64_t v85 = v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v89 = v3;
        int v90 = v22;
        unint64_t v86 = v23;
        uint64_t v87 = v26;
        unint64_t v88 = v27;
        uint64_t v30 = (char *)*((void *)&v76 + 1);
        char v29 = (char *)v77;
        long long v31 = (const void **)*((void *)&v76 + 1);
        if (*((void *)&v76 + 1) != (void)v77)
        {
          long long v31 = (const void **)*((void *)&v76 + 1);
          while (*((unsigned char *)*v31 + 8) != 64)
          {
            if (++v31 == (const void **)v77) {
              goto LABEL_48;
            }
          }
        }
        if (v31 != (const void **)v77)
        {
          if (!v32) {
            __cxa_bad_cast();
          }
          uint64_t v33 = v32 + 16;
          goto LABEL_62;
        }
LABEL_48:
        uint64_t v34 = (char *)operator new(0x38uLL);
        uint64_t v35 = v34;
        v34[8] = 64;
        *(void *)uint64_t v34 = &unk_1F1260B80;
        *((void *)v34 + 2) = 0;
        uint64_t v33 = v34 + 16;
        *((void *)v34 + 5) = 0;
        *((void *)v34 + 6) = 0;
        *((void *)v34 + 4) = 0;
        *(void *)(v34 + 22) = 0;
        if ((unint64_t)v29 >= *((void *)&v77 + 1))
        {
          int64_t v37 = v29 - v30;
          uint64_t v38 = (v29 - v30) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = *((void *)&v77 + 1) - (void)v30;
          if ((uint64_t)(*((void *)&v77 + 1) - (void)v30) >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            if (v41 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v42 = operator new(8 * v41);
            uint64_t v43 = &v42[8 * v38];
            void *v43 = v35;
            uint64_t v36 = (uint64_t)(v43 + 1);
            if (v30 != v29)
            {
LABEL_76:
              if ((unint64_t)(v37 - 8) < 0x58) {
                goto LABEL_91;
              }
              if ((unint64_t)(v30 - v42) < 0x20) {
                goto LABEL_91;
              }
              unint64_t v46 = ((unint64_t)(v37 - 8) >> 3) + 1;
              uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
              __darwin_time_t v48 = &v29[-v47];
              uint64_t v43 = (void *)((char *)v43 - v47);
              char v49 = &v42[8 * v38 - 16];
              timeval v50 = v29 - 16;
              uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v52 = *(_OWORD *)v50;
                *(v49 - 1) = *((_OWORD *)v50 - 1);
                _OWORD *v49 = v52;
                v49 -= 2;
                v50 -= 32;
                v51 -= 4;
              }
              while (v51);
              char v29 = v48;
              if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_91:
                do
                {
                  uint64_t v53 = *((void *)v29 - 1);
                  v29 -= 8;
                  *--uint64_t v43 = v53;
                }
                while (v29 != v30);
              }
              uint64_t v30 = (char *)*((void *)&v76 + 1);
              *((void *)&v76 + 1) = v43;
              *(void *)&long long v77 = v36;
              *((void *)&v77 + 1) = &v42[8 * v41];
              if (!v30) {
                goto LABEL_61;
              }
LABEL_60:
              operator delete(v30);
              goto LABEL_61;
            }
          }
          else
          {
            long long v42 = 0;
            uint64_t v43 = (void *)(8 * v38);
            *(void *)(8 * v38) = v35;
            uint64_t v36 = 8 * v38 + 8;
            if (v30 != v29) {
              goto LABEL_76;
            }
          }
          *((void *)&v76 + 1) = v43;
          *(void *)&long long v77 = v36;
          *((void *)&v77 + 1) = &v42[8 * v41];
          if (v30) {
            goto LABEL_60;
          }
        }
        else
        {
          *(void *)char v29 = v34;
          uint64_t v36 = (uint64_t)(v29 + 8);
        }
LABEL_61:
        *(void *)&long long v77 = v36;
        __int16 v11 = v57;
        unsigned int v3 = v56;
        unint64_t v23 = (v58 + 1499) / 0x5DCuLL;
LABEL_62:
        (*(void (**)(uint8_t *, char *))&v83[8])(buf, v33);
        uint64_t v71 = v54 + 144;
        uint64_t v72 = QMIServiceMsg::create();
        int v73 = 25000;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        v69[0] = MEMORY[0x1E4F143A8];
        v69[1] = 1174405120;
        void v69[2] = ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_19;
        void v69[3] = &unk_1F1260AF0;
        dispatch_group_t group = v11;
        if (v11)
        {
          dispatch_retain(v11);
          if (group) {
            dispatch_group_enter(group);
          }
        }
        v69[4] = &v78;
        blocunint64_t k = MEMORY[0x1E4F143A8];
        uint64_t v61 = 0x40000000;
        uint64_t v62 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        uint64_t v63 = &unk_1E61938D0;
        uint64_t v64 = v69;
        uint64_t v44 = _Block_copy(&block);
        uint64_t v75 = v44;
        if (v72)
        {
          qmi::Client::send();
          uint64_t v44 = v75;
        }
        if (v44) {
          _Block_release(v44);
        }
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        int v45 = v85;
        if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v76);
        unint64_t v22 = (v22 + 1);
        if (v23 <= v22) {
          goto LABEL_8;
        }
      }
    }
    uint64_t v18 = &v78;
LABEL_24:
    char v20 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B8B00000, v20, OS_LOG_TYPE_DEFAULT, "#E Empty payload", buf, 2u);
      uint64_t v18 = v79;
    }
    *((unsigned char *)v18 + 24) = 0;
    unint64_t v19 = (void *)v1[6];
    if (!v19) {
      goto LABEL_27;
    }
LABEL_22:
    unint64_t v19 = _Block_copy(v19);
    uint64_t v14 = a1;
    goto LABEL_28;
  }
  uint64_t v16 = v2;
  unint64_t v17 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_error_impl(&dword_1B8B00000, v17, OS_LOG_TYPE_ERROR, "Illegal payload type: %hhu", buf, 8u);
    uint64_t v18 = v79;
    *((unsigned char *)v79 + 24) = 0;
    uint64_t v2 = v16;
    if (v1[4] == v1[3]) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v18 = &v78;
    char v81 = 0;
    uint64_t v2 = v16;
    if (v1[4] == v1[3]) {
      goto LABEL_24;
    }
  }
  unint64_t v19 = (void *)v1[6];
  if (v19) {
    goto LABEL_22;
  }
LABEL_27:
  uint64_t v14 = a1;
LABEL_28:
  *(void *)long long buf = v19;
  awd::AppContext::operator()();
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
LABEL_30:
  _Block_object_dispose(&v78, 8);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v59);
  uint64_t v21 = (std::__shared_weak_count *)v14[2];
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(v14);
}

void sub_1B8B4FF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,dispatch_group_t object,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *aBlock,char a43)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unsigned int v3 = (const void *)v2[6];
    if (v3) {
      _Block_release(v3);
    }
    uint64_t v4 = (void *)v2[3];
    if (v4)
    {
      v2[4] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void *___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *(_DWORD *)(a2 + 4) = 0;
  int v4 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 72);
  uint64_t v5 = *(char **)(a1 + 56);
  *(unsigned char *)(a2 + 12) = *(void *)(a1 + 48);
  *(unsigned char *)(a2 + 13) = v4;
  uint64_t v6 = *(char **)(a1 + 64);

  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a2 + 16), v5, v6, v6 - v5);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_19(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4)) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_21(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(a1[5] + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
      unsigned int v3 = "success";
    }
    else {
      unsigned int v3 = "error";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Add configuration %s", buf, 0xCu);
  }
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  long long aBlock = v4;
  awd::AppContext::operator()();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8B5031C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_48c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = (void *)a2[8];
  if (result) {
    __n128 result = _Block_copy(result);
  }
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_48c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1260B80;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1260B80;
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 40) - *(void *)(a1 + 32) + 19;
}

void *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::write(uint64_t a1, uint64_t *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *a2;
  __int16 v6 = *a2 + 3;
  *a2 += 3;
  *(_DWORD *)(v5 + 3) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v5 + 7) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v5 + 11) = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(v5 + 15) = *(unsigned char *)(a1 + 28);
  *(unsigned char *)(v5 + 16) = *(unsigned char *)(a1 + 29);
  *(_WORD *)(v5 + 17) = *(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 32);
  __n128 result = memcpy((void *)(v5 + 19), *(const void **)(a1 + 32), *(void *)(a1 + 40) - *(void *)(a1 + 32));
  uint64_t v8 = v5 + 19 + *(void *)(a1 + 40) - *(void *)(a1 + 32);
  *a2 = v8;
  *(unsigned char *)uint64_t v5 = v4;
  *(_WORD *)(v5 + 1) = v8 - v6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1F1260B80;
  *((void *)v2 + 2) = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 22);
  *((void *)v2 + 4) = 0;
  *(void *)(v2 + 22) = v3;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  uint64_t v5 = *(unsigned char **)(a1 + 32);
  char v4 = *(unsigned char **)(a1 + 40);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *((void *)v2 + 4) = v7;
    *((void *)v2 + 5) = v7;
    uint64_t v8 = &v7[v6];
    *((void *)v2 + 6) = &v7[v6];
    memcpy(v7, v5, v6);
    *((void *)v2 + 5) = v8;
  }
  return v2;
}

void sub_1B8B50658(_Unwind_Exception *a1)
{
  char v4 = *v2;
  if (*v2)
  {
    void v1[5] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B50744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B50758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B50784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 24);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int AppID = awd::AppContext::getAppID(*(awd::AppContext **)v1);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = AppID;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Requesting to clear configuration: appId=%d", buf, 8u);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v47 = v5;
  long long v48 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v47);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 1174405120;
  uint64_t v43 = (uint64_t (*)(uint64_t, char *))___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  uint64_t v44 = &__block_descriptor_tmp_28_3;
  int v45 = *(awd::AppContext **)v1;
  size_t v6 = *(std::__shared_weak_count **)(v1 + 8);
  unint64_t v46 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)*((void *)&v47 + 1);
  uint64_t v8 = (char *)v48;
  uint64_t v9 = (const void **)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1) != (void)v48)
  {
    uint64_t v9 = (const void **)*((void *)&v47 + 1);
    while (*((unsigned char *)*v9 + 8) != 65)
    {
      if (++v9 == (const void **)v48) {
        goto LABEL_13;
      }
    }
  }
  if (v9 == (const void **)v48)
  {
LABEL_13:
    unint64_t v12 = operator new(0x18uLL);
    uint64_t v13 = v12;
    v12[8] = 65;
    *(void *)unint64_t v12 = &unk_1F1260C30;
    *((_DWORD *)v12 + 3) = 0;
    __int16 v11 = v12 + 12;
    *((_DWORD *)v12 + 4) = 0;
    if ((unint64_t)v8 < *((void *)&v48 + 1))
    {
      *(void *)uint64_t v8 = v12;
      *(void *)&long long v48 = v8 + 8;
      goto LABEL_27;
    }
    int64_t v14 = v8 - v7;
    uint64_t v15 = (v8 - v7) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v48 + 1) - (void)v7;
    if ((uint64_t)(*((void *)&v48 + 1) - (void)v7) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v19 = operator new(8 * v18);
      char v20 = &v19[8 * v15];
      uint64_t v21 = &v19[8 * v18];
      void *v20 = v13;
      uint64_t v22 = (uint64_t)(v20 + 1);
      if (v7 == v8)
      {
LABEL_24:
        *((void *)&v47 + 1) = v20;
        *(void *)&long long v48 = v22;
        *((void *)&v48 + 1) = v21;
        if (!v7)
        {
LABEL_26:
          *(void *)&long long v48 = v22;
          goto LABEL_27;
        }
LABEL_25:
        operator delete(v7);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v19 = 0;
      char v20 = (void *)(8 * v15);
      uint64_t v21 = 0;
      *(void *)(8 * v15) = v13;
      uint64_t v22 = 8 * v15 + 8;
      if (v7 == v8) {
        goto LABEL_24;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_67;
    }
    if ((unint64_t)(v7 - v19) < 0x20) {
      goto LABEL_67;
    }
    unint64_t v31 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v33 = &v8[-v32];
    char v20 = (void *)((char *)v20 - v32);
    uint64_t v34 = &v19[8 * v15 - 16];
    uint64_t v35 = v8 - 16;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      _OWORD *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    uint64_t v8 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_67:
      do
      {
        uint64_t v38 = *((void *)v8 - 1);
        v8 -= 8;
        *--char v20 = v38;
      }
      while (v8 != v7);
    }
    uint64_t v7 = (char *)*((void *)&v47 + 1);
    *((void *)&v47 + 1) = v20;
    *(void *)&long long v48 = v22;
    *((void *)&v48 + 1) = v21;
    if (!v7) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (!v10) {
    __cxa_bad_cast();
  }
  __int16 v11 = v10 + 12;
LABEL_27:
  v43((uint64_t)v42, v11);
  uint64_t v40 = QMIServiceMsg::create();
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v51 = 1174405120;
  long long v52 = ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_29;
  uint64_t v53 = &__block_descriptor_tmp_32_1;
  uint64_t v54 = v2;
  uint64_t v55 = *(awd::AppContext **)v1;
  unint64_t v23 = *(std::__shared_weak_count **)(v1 + 8);
  unsigned int v56 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = *(void **)(v1 + 16);
  if (v24) {
    long long v24 = _Block_copy(v24);
  }
  uint64_t v57 = v24;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61938D0;
  aBlock[4] = buf;
  uint64_t v25 = _Block_copy(aBlock);
  unint64_t v41 = v25;
  if (v40)
  {
    qmi::Client::send();
    uint64_t v25 = v41;
  }
  if (v25) {
    _Block_release(v25);
  }
  if (v57) {
    _Block_release(v57);
  }
  uint64_t v26 = v56;
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  unint64_t v27 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v47);
    long long v28 = *(const void **)(v1 + 16);
    if (!v28) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v47);
  long long v28 = *(const void **)(v1 + 16);
  if (v28) {
LABEL_43:
  }
    _Block_release(v28);
LABEL_44:
  char v29 = *(std::__shared_weak_count **)(v1 + 8);
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  operator delete((void *)v1);
  uint64_t v30 = (std::__shared_weak_count *)a1[2];
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(a1);
}

void sub_1B8B50D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *a2 = result;
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_29(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 4);
  char v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    long long v5 = "error";
    if (!v3) {
      long long v5 = "success";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v9 = v5;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Clear configuration %s", buf, 0xCu);
  }
  size_t v6 = *(void **)(a1 + 56);
  if (v6) {
    size_t v6 = _Block_copy(v6);
  }
  long long aBlock = v6;
  awd::AppContext::operator()();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8B51070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::DeleteConfig>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::DeleteConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::DeleteConfig>::clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F1260C30;
  *(void *)(result + 12) = *(void *)(a1 + 12);
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 24);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEBUG, "#D Requesting to update properties", buf, 2u);
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v60 = v4;
  long long v61 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v60);
  int Properties = awd::AppContext::getProperties(*(awd::AppContext **)v1);
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 1174405120;
  uint64_t v54 = ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  uint64_t v55 = &__block_descriptor_tmp_36_1;
  unsigned int v56 = *(awd::AppContext **)v1;
  size_t v6 = *(std::__shared_weak_count **)(v1 + 8);
  uint64_t v57 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v58 = Properties;
  char v59 = BYTE2(Properties);
  uint64_t v7 = (char *)*((void *)&v60 + 1);
  uint64_t v8 = (char *)v61;
  uint64_t v9 = (const void **)*((void *)&v60 + 1);
  if (*((void *)&v60 + 1) != (void)v61)
  {
    uint64_t v9 = (const void **)*((void *)&v60 + 1);
    while (*((unsigned char *)*v9 + 8) != 69)
    {
      if (++v9 == (const void **)v61) {
        goto LABEL_13;
      }
    }
  }
  if (v9 == (const void **)v61)
  {
LABEL_13:
    unint64_t v12 = operator new(0x18uLL);
    uint64_t v13 = v12;
    v12[8] = 69;
    *(void *)unint64_t v12 = &unk_1F1260CE0;
    *((_DWORD *)v12 + 3) = 0;
    __int16 v11 = v12 + 12;
    *((_WORD *)v12 + 8) = 0;
    if ((unint64_t)v8 < *((void *)&v61 + 1))
    {
      *(void *)uint64_t v8 = v12;
      *(void *)&long long v61 = v8 + 8;
      goto LABEL_27;
    }
    int64_t v14 = v8 - v7;
    uint64_t v15 = (v8 - v7) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v61 + 1) - (void)v7;
    if ((uint64_t)(*((void *)&v61 + 1) - (void)v7) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v19 = operator new(8 * v18);
      char v20 = &v19[8 * v15];
      uint64_t v21 = &v19[8 * v18];
      void *v20 = v13;
      uint64_t v22 = (uint64_t)(v20 + 1);
      if (v7 == v8)
      {
LABEL_24:
        *((void *)&v60 + 1) = v20;
        *(void *)&long long v61 = v22;
        *((void *)&v61 + 1) = v21;
        if (!v7)
        {
LABEL_26:
          *(void *)&long long v61 = v22;
          goto LABEL_27;
        }
LABEL_25:
        operator delete(v7);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v19 = 0;
      char v20 = (void *)(8 * v15);
      uint64_t v21 = 0;
      *(void *)(8 * v15) = v13;
      uint64_t v22 = 8 * v15 + 8;
      if (v7 == v8) {
        goto LABEL_24;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_67;
    }
    if ((unint64_t)(v7 - v19) < 0x20) {
      goto LABEL_67;
    }
    unint64_t v31 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v33 = &v8[-v32];
    char v20 = (void *)((char *)v20 - v32);
    uint64_t v34 = &v19[8 * v15 - 16];
    uint64_t v35 = v8 - 16;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      _OWORD *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    uint64_t v8 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_67:
      do
      {
        uint64_t v38 = *((void *)v8 - 1);
        v8 -= 8;
        *--char v20 = v38;
      }
      while (v8 != v7);
    }
    uint64_t v7 = (char *)*((void *)&v60 + 1);
    *((void *)&v60 + 1) = v20;
    *(void *)&long long v61 = v22;
    *((void *)&v61 + 1) = v21;
    if (!v7) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (!v10) {
    __cxa_bad_cast();
  }
  __int16 v11 = v10 + 12;
LABEL_27:
  v54((uint64_t)v53, (uint64_t)v11);
  uint64_t v48 = v2 + 144;
  uint64_t v49 = QMIServiceMsg::create();
  int v50 = 25000;
  uint64_t v51 = 0;
  long long v52 = 0;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v41 = 1174405120;
  long long v42 = ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_37;
  uint64_t v43 = &__block_descriptor_tmp_40_1;
  uint64_t v44 = v2;
  int v45 = *(awd::AppContext **)v1;
  unint64_t v23 = *(std::__shared_weak_count **)(v1 + 8);
  unint64_t v46 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = *(void **)(v1 + 16);
  if (v24) {
    long long v24 = _Block_copy(v24);
  }
  long long v47 = v24;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61938A8;
  aBlock[4] = buf;
  uint64_t v25 = _Block_copy(aBlock);
  long long v52 = v25;
  if (v49)
  {
    qmi::Client::send();
    uint64_t v25 = v52;
  }
  if (v25) {
    _Block_release(v25);
  }
  if (v47) {
    _Block_release(v47);
  }
  uint64_t v26 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  unint64_t v27 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v60);
    long long v28 = *(const void **)(v1 + 16);
    if (!v28) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v60);
  long long v28 = *(const void **)(v1 + 16);
  if (v28) {
LABEL_43:
  }
    _Block_release(v28);
LABEL_44:
  char v29 = *(std::__shared_weak_count **)(v1 + 8);
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  operator delete((void *)v1);
  uint64_t v30 = (std::__shared_weak_count *)a1[2];
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(a1);
}

void sub_1B8B51714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,char a31)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a17 && !atomic_fetch_add(&a17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
    std::__shared_weak_count::__release_weak(a17);
  }
  if (a20) {
    qmi::Client::send();
  }
  if (a23) {
    _Block_release(a23);
  }
  if (a29 && !atomic_fetch_add(&a29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
    std::__shared_weak_count::__release_weak(a29);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a31);
  uint64_t v33 = (const void *)v31[2];
  if (v33) {
    _Block_release(v33);
  }
  uint64_t v34 = (std::__shared_weak_count *)v31[1];
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  operator delete(v31);
  uint64_t v35 = (std::__shared_weak_count *)__p[2];
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 49);
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_37(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 4);
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    long long v5 = *(void **)(a1 + 56);
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  size_t v6 = "error";
  if (!v3) {
    size_t v6 = "success";
  }
  *(_DWORD *)long long buf = 136315138;
  uint64_t v9 = v6;
  _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Update properties %s", buf, 0xCu);
  long long v5 = *(void **)(a1 + 56);
  if (v5) {
LABEL_3:
  }
    long long v5 = _Block_copy(v5);
LABEL_4:
  long long aBlock = v5;
  awd::AppContext::operator()();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8B51A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::PIILocationExt>::getSize()
{
  return 9;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::PIILocationExt>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(unsigned char *)(v3 + 7) = *(unsigned char *)(result + 16);
  *(unsigned char *)(v3 + 8) = *(unsigned char *)(result + 17);
  *a2 = v3 + 9;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::PIILocationExt>::clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F1260CE0;
  *(void *)(result + 12) = *(void *)(a1 + 12);
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  char v2 = (uint64_t *)*a1;
  uint64_t v3 = *(void *)(*a1 + 40);
  long long v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v18 = *((_DWORD *)v2 + 4);
    int v19 = *((_DWORD *)v2 + 5);
    int v20 = *((_DWORD *)v2 + 6);
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v18;
    LOWORD(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 2) = v19;
    HIWORD(v35) = 1024;
    LODWORD(v36) = v20;
    _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Querying metric, component: 0x%x, submissionId: 0x%x, triggerId: 0x%x", buf, 0x14u);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v5;
  long long v32 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v31);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  long long v24 = (uint64_t (*)(uint64_t, char *))___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoERKNS_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  uint64_t v25 = &__block_descriptor_tmp_44_4;
  uint64_t v26 = *v2;
  size_t v6 = (std::__shared_weak_count *)v2[1];
  unint64_t v27 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v28 = *((_DWORD *)v2 + 5);
  int v29 = *((_DWORD *)v2 + 4);
  int v30 = *((_DWORD *)v2 + 6);
  uint64_t v7 = (const void **)*((void *)&v31 + 1);
  if (*((void *)&v31 + 1) != (void)v32)
  {
    while (*((unsigned char *)*v7 + 8) != 66)
    {
      if (++v7 == (const void **)v32) {
        goto LABEL_12;
      }
    }
  }
  if (v7 == (const void **)v32)
  {
LABEL_12:
    uint64_t v9 = qmi::MutableMessageBase::createTLV<awd::tlv::abm::MetricsExt>(&v31);
  }
  else
  {
    if (!v8) {
      __cxa_bad_cast();
    }
    uint64_t v9 = v8 + 12;
  }
  v24((uint64_t)v23, v9);
  uint64_t v21 = QMIServiceMsg::create();
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v35 = 1174405120;
  uint64_t v36 = ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoERKNS_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_45;
  long long v37 = &__block_descriptor_tmp_48_0;
  uint64_t v38 = v3;
  uint64_t v39 = *v2;
  uint64_t v10 = (std::__shared_weak_count *)v2[1];
  uint64_t v40 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v11 = (void *)v2[4];
  if (v11) {
    __int16 v11 = _Block_copy(v11);
  }
  uint64_t v41 = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61938F8;
  aBlock[4] = buf;
  unint64_t v12 = _Block_copy(aBlock);
  uint64_t v22 = v12;
  if (v21)
  {
    qmi::Client::send();
    unint64_t v12 = v22;
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v41) {
    _Block_release(v41);
  }
  uint64_t v13 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  int64_t v14 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v31);
    uint64_t v15 = (const void *)v2[4];
    if (!v15) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v31);
  uint64_t v15 = (const void *)v2[4];
  if (v15) {
LABEL_29:
  }
    _Block_release(v15);
LABEL_30:
  unint64_t v16 = (std::__shared_weak_count *)v2[1];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete(v2);
  uint64_t v17 = (std::__shared_weak_count *)a1[2];
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  operator delete(a1);
}

void sub_1B8B51F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoERKNS_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *a2 = result;
  a2[1] = *(_DWORD *)(a1 + 48);
  a2[3] = *(_DWORD *)(a1 + 52);
  a2[2] = *(_DWORD *)(a1 + 56);
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoERKNS_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_45(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 4);
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    long long v5 = *(void **)(a1 + 56);
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  size_t v6 = "error";
  if (!v3) {
    size_t v6 = "success";
  }
  *(_DWORD *)long long buf = 136315138;
  uint64_t v9 = v6;
  _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Metric query %s", buf, 0xCu);
  long long v5 = *(void **)(a1 + 56);
  if (v5) {
LABEL_3:
  }
    long long v5 = _Block_copy(v5);
LABEL_4:
  long long aBlock = v5;
  awd::AppContext::operator()();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8B5225C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

char *qmi::MutableMessageBase::createTLV<awd::tlv::abm::MetricsExt>(void *a1)
{
  char v2 = (char *)operator new(0x20uLL);
  int v3 = v2;
  v2[8] = 66;
  *(void *)(v2 + 12) = 0;
  long long v4 = v2 + 12;
  *(void *)char v2 = &unk_1F1260D90;
  *(void *)(v2 + 20) = 0;
  size_t v6 = (char *)a1[2];
  unint64_t v5 = a1[3];
  uint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(void *)size_t v6 = v2;
    uint64_t v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  uint64_t v9 = (char *)a1[1];
  uint64_t v10 = (v6 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int64_t v14 = (char *)operator new(8 * v13);
    uint64_t v15 = &v14[8 * v10];
    unint64_t v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = v3;
    uint64_t v8 = (uint64_t)(v15 + 8);
    uint64_t v17 = (char *)(v6 - v9);
    if (v6 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int64_t v14 = 0;
  uint64_t v15 = (char *)(8 * v10);
  unint64_t v16 = 0;
  *(void *)(8 * v10) = v3;
  uint64_t v8 = 8 * v10 + 8;
  uint64_t v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v7 = &v6[-v20];
    v15 -= v20;
    uint64_t v21 = &v14[8 * v10 - 16];
    uint64_t v22 = (long long *)(v6 - 16);
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)uint64_t v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    uint64_t v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_23:
  a1[2] = v8;
  return v4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricsExt>::getSize()
{
  return 19;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricsExt>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *(_DWORD *)(v3 + 11) = *(_DWORD *)(result + 20);
  *(_DWORD *)(v3 + 15) = *(_DWORD *)(result + 24);
  *a2 = v3 + 19;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 16;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricsExt>::clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)char v2 = &unk_1F1260D90;
  __n128 result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B525BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B525D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B525FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v3 = *(void *)(*a1 + 40);
  long long v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v18 = *((_DWORD *)v2 + 4);
    int v19 = *((_DWORD *)v2 + 5);
    int v20 = *((_DWORD *)v2 + 6);
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v18;
    LOWORD(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 2) = v19;
    HIWORD(v35) = 1024;
    LODWORD(v36) = v20;
    _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Querying metric, component: 0x%x, submissionId: 0x%x, triggerId: 0x%x", buf, 0x14u);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v5;
  long long v32 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v31);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  long long v24 = (uint64_t (*)(uint64_t, char *))___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  uint64_t v25 = &__block_descriptor_tmp_52_2;
  uint64_t v26 = *v2;
  size_t v6 = (std::__shared_weak_count *)v2[1];
  unint64_t v27 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v28 = *((_DWORD *)v2 + 5);
  int v29 = *((_DWORD *)v2 + 4);
  int v30 = *((_DWORD *)v2 + 6);
  uint64_t v7 = (const void **)*((void *)&v31 + 1);
  if (*((void *)&v31 + 1) != (void)v32)
  {
    while (*((unsigned char *)*v7 + 8) != 66)
    {
      if (++v7 == (const void **)v32) {
        goto LABEL_12;
      }
    }
  }
  if (v7 == (const void **)v32)
  {
LABEL_12:
    uint64_t v9 = qmi::MutableMessageBase::createTLV<awd::tlv::abm::MetricsExt>(&v31);
  }
  else
  {
    if (!v8) {
      __cxa_bad_cast();
    }
    uint64_t v9 = v8 + 12;
  }
  v24((uint64_t)v23, v9);
  uint64_t v21 = QMIServiceMsg::create();
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v35 = 1174405120;
  uint64_t v36 = ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_53;
  long long v37 = &__block_descriptor_tmp_56_2;
  uint64_t v38 = v3;
  uint64_t v39 = *v2;
  uint64_t v10 = (std::__shared_weak_count *)v2[1];
  uint64_t v40 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = (void *)v2[4];
  if (v11) {
    unint64_t v11 = _Block_copy(v11);
  }
  uint64_t v41 = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61938F8;
  aBlock[4] = buf;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v22 = v12;
  if (v21)
  {
    qmi::Client::send();
    uint64_t v12 = v22;
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v41) {
    _Block_release(v41);
  }
  unint64_t v13 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  int64_t v14 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v31);
    uint64_t v15 = (const void *)v2[4];
    if (!v15) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v31);
  uint64_t v15 = (const void *)v2[4];
  if (v15) {
LABEL_29:
  }
    _Block_release(v15);
LABEL_30:
  unint64_t v16 = (std::__shared_weak_count *)v2[1];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete(v2);
  uint64_t v17 = (std::__shared_weak_count *)a1[2];
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  operator delete(a1);
}

void sub_1B8B52A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *a2 = result;
  a2[1] = *(_DWORD *)(a1 + 48);
  a2[3] = *(_DWORD *)(a1 + 52);
  a2[2] = *(_DWORD *)(a1 + 56);
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_53(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 4);
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    long long v5 = *(void **)(a1 + 56);
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  size_t v6 = "error";
  if (!v3) {
    size_t v6 = "success";
  }
  *(_DWORD *)long long buf = 136315138;
  uint64_t v9 = v6;
  _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Metric query %s", buf, 0xCu);
  long long v5 = *(void **)(a1 + 56);
  if (v5) {
LABEL_3:
  }
    long long v5 = _Block_copy(v5);
LABEL_4:
  long long aBlock = v5;
  awd::AppContext::operator()();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8B52D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::init(void)::$_0>(awd::QMIAwdCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  long long v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Init", buf, 2u);
  }
  uint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v58 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v57, *(Registry **)(v3 + 104));
  if (!v57)
  {
    Name = (const char *)awd::AwdCommandDriver::getName((awd::AwdCommandDriver *)v3);
    size_t v24 = strlen(Name);
    if (v24 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v25 = v24;
    if (v24 >= 0x17)
    {
      uint64_t v38 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v38 = v24 | 7;
      }
      uint64_t v39 = v38 + 1;
      p_dst = operator new(v38 + 1);
      uint64_t v48 = v25;
      unint64_t v49 = v39 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v49) = v24;
      p_dst = &__dst;
      if (!v24)
      {
        LOBYTE(__dst) = 0;
        unint64_t v27 = *(NSObject **)(v3 + 88);
        uint64_t v52 = (uint64_t)v27;
        if (!v27)
        {
LABEL_48:
          HIBYTE(v44) = 3;
          LODWORD(__p) = 6584161;
          int v28 = *(std::__shared_weak_count **)(v3 + 80);
          if (!v28 || (uint64_t v29 = *(void *)(v3 + 72), (v30 = std::__shared_weak_count::lock(v28)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          long long v31 = v30;
          atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v54 = 0;
            uint64_t v55 = 0;
            long long v32 = std::__shared_weak_count::lock(v30);
            if (v32) {
              goto LABEL_52;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v31);
            uint64_t v54 = 0;
            uint64_t v55 = 0;
            long long v32 = std::__shared_weak_count::lock(v31);
            if (v32)
            {
LABEL_52:
              atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              uint64_t v33 = v55;
              uint64_t v54 = v29;
              uint64_t v55 = v32;
              if (!v33)
              {
LABEL_54:
                std::__shared_weak_count::__release_weak(v31);
                if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
                qmi::Client::createWithQueue();
                long long v34 = v61;
                long long v61 = 0uLL;
                uint64_t v35 = *(std::__shared_weak_count **)(v3 + 168);
                *(_OWORD *)(v3 + 160) = v34;
                if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
                qmi::Client::~Client((qmi::Client *)buf);
                if (v55) {
                  std::__shared_weak_count::__release_weak(v55);
                }
                if (SHIBYTE(v44) < 0)
                {
                  operator delete(__p);
                  int v19 = v52;
                  if (!v52) {
                    goto LABEL_32;
                  }
                }
                else
                {
                  int v19 = v52;
                  if (!v52) {
                    goto LABEL_32;
                  }
                }
LABEL_31:
                dispatch_release(v19);
                goto LABEL_32;
              }
LABEL_53:
              std::__shared_weak_count::__release_weak(v33);
              goto LABEL_54;
            }
          }
          uint64_t v33 = v55;
          uint64_t v54 = 0;
          uint64_t v55 = v32;
          if (!v33) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }
LABEL_47:
        dispatch_retain(v27);
        goto LABEL_48;
      }
    }
    memmove(p_dst, Name, v25);
    *((unsigned char *)p_dst + v25) = 0;
    unint64_t v27 = *(NSObject **)(v3 + 88);
    uint64_t v52 = (uint64_t)v27;
    if (!v27) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  long long v5 = (const char *)awd::AwdCommandDriver::getName((awd::AwdCommandDriver *)v3);
  size_t v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v36 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v36 = v6 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v8 = operator new(v36 + 1);
    uint64_t v48 = v7;
    unint64_t v49 = v37 | 0x8000000000000000;
    long long __dst = v8;
LABEL_68:
    memmove(v8, v5, v7);
    *((unsigned char *)v8 + v7) = 0;
    uint64_t v9 = *(NSObject **)(v3 + 88);
    unsigned int v56 = v9;
    if (!v9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  HIBYTE(v49) = v6;
  uint64_t v8 = &__dst;
  if (v6) {
    goto LABEL_68;
  }
  LOBYTE(__dst) = 0;
  uint64_t v9 = *(NSObject **)(v3 + 88);
  unsigned int v56 = v9;
  if (v9) {
LABEL_8:
  }
    dispatch_retain(v9);
LABEL_9:
  HIBYTE(v44) = 3;
  LODWORD(__p) = 6584161;
  uint64_t v10 = *(std::__shared_weak_count **)(v3 + 80);
  if (!v10 || (uint64_t v11 = *(void *)(v3 + 72), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    int64_t v14 = std::__shared_weak_count::lock(v12);
    if (v14) {
      goto LABEL_13;
    }
LABEL_71:
    uint64_t v15 = v55;
    uint64_t v54 = 0;
    uint64_t v55 = v14;
    if (!v15) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v13);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  int64_t v14 = std::__shared_weak_count::lock(v13);
  if (!v14) {
    goto LABEL_71;
  }
LABEL_13:
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = v55;
  uint64_t v54 = v11;
  uint64_t v55 = v14;
  if (v15) {
LABEL_14:
  }
    std::__shared_weak_count::__release_weak(v15);
LABEL_15:
  std::__shared_weak_count::__release_weak(v13);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v52 = v57;
  uint64_t v53 = (std::__shared_weak_count *)v58;
  if (v58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v16 = v61;
  long long v61 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v3 + 168);
  *(_OWORD *)(v3 + 160) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  int v18 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(__p);
  }
  int v19 = v56;
  if (v56) {
    goto LABEL_31;
  }
LABEL_32:
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst);
  }
  long long __dst = (void *)MEMORY[0x1E4F143A8];
  uint64_t v48 = 0x40000000;
  unint64_t v49 = (unint64_t)___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke;
  int v50 = &__block_descriptor_tmp_58;
  uint64_t v51 = v3;
  qmi::Client::setHandler();
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v43 = 0x40000000;
  uint64_t v44 = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_2;
  int v45 = &__block_descriptor_tmp_59;
  uint64_t v46 = v3;
  qmi::Client::setHandler();
  v41[10] = MEMORY[0x1E4F143A8];
  v41[11] = 0x40000000;
  v41[12] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_3;
  v41[13] = &__block_descriptor_tmp_61_0;
  v41[14] = v3;
  qmi::Client::setHandler();
  v41[5] = MEMORY[0x1E4F143A8];
  v41[6] = 0x40000000;
  v41[7] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_4;
  v41[8] = &__block_descriptor_tmp_62;
  v41[9] = v3;
  qmi::Client::setHandler();
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 0x40000000;
  v41[2] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_5;
  v41[3] = &__block_descriptor_tmp_64_0;
  v41[4] = v3;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v60 = 0x40000000;
  *(void *)&long long v61 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd3abm16MetricSubmission10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v61 + 1) = &unk_1E6193A20;
  uint64_t v62 = v41;
  qmi::Client::setIndHandler();
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 0x40000000;
  v40[2] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_65;
  v40[3] = &__block_descriptor_tmp_70_0;
  v40[4] = v3;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v60 = 0x40000000;
  *(void *)&long long v61 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd3abm13SubmitTrigger10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v61 + 1) = &unk_1E6193A48;
  uint64_t v62 = v40;
  qmi::Client::setIndHandler();
  qmi::Client::start((qmi::Client *)(v3 + 144));
  int v20 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v20, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  uint64_t v21 = (std::__shared_weak_count *)v58;
  if (v58 && !atomic_fetch_add((atomic_ullong *volatile)(v58 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(v2);
  uint64_t v22 = (std::__shared_weak_count *)a1[2];
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  operator delete(a1);
}

void sub_1B8B53730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  long long v47 = *(std::__shared_weak_count **)(v45 - 176);
  if (v47)
  {
    std::__shared_weak_count::__release_weak(v47);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v48 = *(NSObject **)(v45 - 200);
      if (!v48) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  uint64_t v48 = *(NSObject **)(v45 - 200);
  if (!v48)
  {
LABEL_8:
    if (a43 < 0) {
      operator delete(__p);
    }
    unint64_t v49 = *(std::__shared_weak_count **)(v45 - 152);
    if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
    operator delete(v44);
    int v50 = (std::__shared_weak_count *)v43[2];
    if (v50)
    {
      if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    operator delete(v43);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v48);
  goto LABEL_8;
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke(uint64_t a1)
{
  return MEMORY[0x1F417A180](*(void *)(a1 + 32), 0);
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_2(uint64_t a1)
{
  return MEMORY[0x1F417A180](*(void *)(a1 + 32), 1);
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_3(uint64_t a1)
{
  return MEMORY[0x1F417A180](*(void *)(a1 + 32), 2);
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_4(uint64_t a1)
{
  return MEMORY[0x1F417A180](*(void *)(a1 + 32), 3);
}

void ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8B53A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B8B53A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<awd::QMIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIAwdCommandDriver,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1260E28;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  size_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8B53B80(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8B53BA8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19QMIAwdCommandDriverEE"
                     "ENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19QMIAwdComm"
                                "andDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19QMIAwdCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19QMIAwdCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void BudgetData::BudgetData(BudgetData *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
}

void BudgetData::~BudgetData(BudgetData *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *uint64_t v2 = 0;
}

{
  void *v2;

  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *uint64_t v2 = 0;
}

void BudgetData::BudgetData(BudgetData *this, const BudgetData *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  if (this != a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  if (this != a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

void sub_1B8B53D90(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B8B53DF4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *BudgetData::BudgetData(void *result, uint64_t a2)
{
  result[2] = 0;
  result[1] = 0;
  *uint64_t result = result + 1;
  *uint64_t result = *(void *)a2;
  *(void *)a2 = result + 1;
  uint64_t v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  if (result[2]) {
    unint64_t v3 = (void *)(result[1] + 16);
  }
  else {
    unint64_t v3 = result;
  }
  void *v3 = result + 1;
  *(void *)a2 = a2 + 8;
  return result;
}

{
  uint64_t v2;
  void *v3;

  result[2] = 0;
  result[1] = 0;
  *uint64_t result = result + 1;
  *uint64_t result = *(void *)a2;
  *(void *)a2 = result + 1;
  uint64_t v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  if (result[2]) {
    unint64_t v3 = (void *)(result[1] + 16);
  }
  else {
    unint64_t v3 = result;
  }
  void *v3 = result + 1;
  *(void *)a2 = a2 + 8;
  return result;
}

uint64_t BudgetData::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  }
  return a1;
}

uint64_t BudgetData::get(uint64_t **a1, unsigned int a2)
{
  char v2 = a2;
  long long v5 = a1 + 1;
  long long v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        size_t v6 = v4;
        unsigned int v7 = v4[28];
        if (v7 <= a2) {
          break;
        }
        long long v4 = (unsigned __int8 *)*v6;
        long long v5 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      long long v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        long long v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    size_t v6 = a1 + 1;
LABEL_8:
    uint64_t v8 = v6;
    size_t v6 = operator new(0x28uLL);
    *((unsigned char *)v6 + 28) = v2;
    *((unsigned char *)v6 + 32) = 0;
    *((unsigned char *)v6 + 36) = 0;
    void *v6 = 0;
    v6[1] = 0;
    void v6[2] = v8;
    const char *v5 = v6;
    uint64_t v9 = (uint64_t *)**a1;
    uint64_t v10 = v6;
    if (v9)
    {
      *a1 = v9;
      uint64_t v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *BudgetData::set(uint64_t *result, unsigned int a2, int a3)
{
  char v4 = a2;
  long long v5 = result;
  unsigned int v7 = (uint64_t **)(result + 1);
  size_t v6 = (unsigned __int8 *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        unsigned int v9 = v6[28];
        if (v9 <= a2) {
          break;
        }
        size_t v6 = (unsigned __int8 *)*v8;
        unsigned int v7 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      size_t v6 = (unsigned __int8 *)v8[1];
      if (!v6)
      {
        unsigned int v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v8 = result + 1;
LABEL_8:
    uint64_t v10 = v8;
    uint64_t v8 = operator new(0x28uLL);
    *((unsigned char *)v8 + 28) = v4;
    *((unsigned char *)v8 + 32) = 0;
    *((unsigned char *)v8 + 36) = 0;
    void *v8 = 0;
    v8[1] = 0;
    void v8[2] = v10;
    *unsigned int v7 = v8;
    uint64_t v11 = *(void *)*v5;
    uint64_t v12 = v8;
    if (v11)
    {
      uint64_t *v5 = v11;
      uint64_t v12 = *v7;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
    ++v5[2];
  }
  *((_DWORD *)v8 + 8) = a3;
  *((unsigned char *)v8 + 36) = 1;
  return result;
}

void BudgetData::clear(BudgetData *this)
{
  char v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *char v2 = 0;
}

void *BudgetData::for_each(void *result, uint64_t a2)
{
  char v2 = result + 1;
  unint64_t v3 = (void *)*result;
  if ((void *)*result != result + 1)
  {
    do
    {
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 48))(v5, (uint64_t)v3 + 28, v3 + 4);
      if (!result) {
        break;
      }
      size_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          size_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          unint64_t v3 = v7;
        }
        while (!v8);
      }
      unint64_t v3 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(uint64_t a1, void *a2, void *a3)
{
  char v4 = a2;
  if (*(void *)(a1 + 16))
  {
    size_t v6 = *(uint64_t **)a1;
    BOOL v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    unsigned int v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      uint64_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          uint64_t *v10 = 0;
          while (1)
          {
            uint64_t v35 = (uint64_t *)v10[1];
            if (!v35) {
              break;
            }
            do
            {
              uint64_t v10 = v35;
              uint64_t v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              uint64_t v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        uint64_t v12 = v9;
        unint64_t v13 = v4;
        while (1)
        {
          unsigned int v9 = v10;
          unsigned int v14 = *((unsigned __int8 *)v13 + 28);
          *((unsigned char *)v12 + 28) = v14;
          int v15 = *((_DWORD *)v13 + 8);
          *((unsigned char *)v12 + 36) = *((unsigned char *)v13 + 36);
          *((_DWORD *)v12 + 8) = v15;
          long long v16 = *v8;
          uint64_t v17 = (uint64_t **)(a1 + 8);
          int v18 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          uint64_t *v12 = 0;
          v12[1] = 0;
          void v12[2] = (uint64_t)v17;
          std::__shared_weak_count *v18 = v12;
          uint64_t v19 = **(void **)a1;
          if (v19) {
            goto LABEL_15;
          }
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            uint64_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              uint64_t v22 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                uint64_t *v10 = 0;
                while (1)
                {
                  uint64_t v23 = (uint64_t *)v10[1];
                  if (!v23) {
                    break;
                  }
                  do
                  {
                    uint64_t v10 = v23;
                    uint64_t v23 = (uint64_t *)*v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (v10[1] = 0; v22; uint64_t v22 = (uint64_t *)v10[1])
                {
                  do
                  {
                    uint64_t v10 = v22;
                    uint64_t v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            uint64_t v10 = 0;
          }
          int v20 = (void *)v13[1];
          if (v20)
          {
            do
            {
              char v4 = v20;
              int v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              char v4 = (void *)v13[2];
              BOOL v21 = *v4 == (void)v13;
              unint64_t v13 = v4;
            }
            while (!v21);
          }
          if (v9)
          {
            uint64_t v12 = v9;
            unint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            uint64_t v17 = (uint64_t **)v16;
            if (v14 >= *((unsigned __int8 *)v16 + 28)) {
              break;
            }
            long long v16 = (uint64_t *)*v16;
            int v18 = v17;
            if (!*v17) {
              goto LABEL_14;
            }
          }
          long long v16 = (uint64_t *)v16[1];
        }
        while (v16);
        int v18 = v17 + 1;
        uint64_t *v12 = 0;
        v12[1] = 0;
        void v12[2] = (uint64_t)v17;
        v17[1] = v12;
        uint64_t v19 = **(void **)a1;
        if (!v19) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v19;
        uint64_t v12 = *v18;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, v9);
      if (v10)
      {
        for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
          uint64_t v10 = i;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    size_t v25 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      uint64_t v26 = (uint64_t *)operator new(0x28uLL);
      unint64_t v27 = v26;
      int v28 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v26 + 28) = *(void *)((char *)v4 + 28);
      *((_DWORD *)v26 + 9) = v28;
      uint64_t v29 = *v25;
      int v30 = (uint64_t **)(a1 + 8);
      long long v31 = (uint64_t **)(a1 + 8);
      if (*v25) {
        break;
      }
LABEL_54:
      uint64_t *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      std::__shared_weak_count *v31 = v26;
      uint64_t v32 = **(void **)a1;
      if (v32) {
        goto LABEL_55;
      }
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
      ++*(void *)(a1 + 16);
      uint64_t v33 = (void *)v4[1];
      if (v33)
      {
        do
        {
          long long v34 = v33;
          uint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          long long v34 = (void *)v4[2];
          BOOL v21 = *v34 == (void)v4;
          char v4 = v34;
        }
        while (!v21);
      }
      char v4 = v34;
      if (v34 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        int v30 = v29;
        if (*((unsigned __int8 *)v26 + 28) >= *((unsigned __int8 *)v29 + 28)) {
          break;
        }
        uint64_t v29 = (uint64_t **)*v29;
        long long v31 = v30;
        if (!*v30) {
          goto LABEL_54;
        }
      }
      uint64_t v29 = (uint64_t **)v29[1];
    }
    while (v29);
    long long v31 = v30 + 1;
    uint64_t *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    uint64_t v32 = **(void **)a1;
    if (!v32) {
      goto LABEL_56;
    }
LABEL_55:
    *(void *)a1 = v32;
    unint64_t v27 = *v31;
    goto LABEL_56;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

uint64_t radio::QMIHealthCommandDriver::checkError@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  if (!*(_DWORD *)(a2 + 4)) {
    return result;
  }
  uint64_t v6 = result;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[7] = v7;
  v43[8] = v7;
  v43[5] = v7;
  v43[6] = v7;
  v43[3] = v7;
  v43[4] = v7;
  v43[1] = v7;
  void v43[2] = v7;
  long long v42 = v7;
  v43[0] = v7;
  *(_OWORD *)uint64_t v40 = v7;
  long long v41 = v7;
  long long v38 = v7;
  long long v39 = v7;
  long long v36 = v7;
  long long v37 = v7;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v36);
  BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Failed to ", 10);
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  LOBYTE(cf[0]) = 10;
  unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)cf, 1);
  unsigned int v14 = (const char *)qmi::asString();
  size_t v15 = strlen(v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  long long v16 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v42) & 0x10) != 0)
    {
      uint64_t v26 = v42;
      if ((unint64_t)v42 < *((void *)&v39 + 1))
      {
        *(void *)&long long v42 = *((void *)&v39 + 1);
        uint64_t v26 = *((void *)&v39 + 1);
      }
      unint64_t v27 = (const void **)&v39;
    }
    else
    {
      if ((BYTE8(v42) & 8) == 0)
      {
        size_t v24 = 0;
        HIBYTE(v35) = 0;
        size_t v25 = cf;
        goto LABEL_50;
      }
      unint64_t v27 = (const void **)&v37 + 1;
      uint64_t v26 = *((void *)&v38 + 1);
    }
    int v28 = *v27;
    size_t v24 = v26 - (void)*v27;
    if (v24 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v24 >= 0x17)
    {
      uint64_t v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v29 = v24 | 7;
      }
      uint64_t v30 = v29 + 1;
      size_t v25 = operator new(v29 + 1);
      cf[1] = (CFTypeRef)v24;
      int64_t v35 = v30 | 0x8000000000000000;
      cf[0] = v25;
    }
    else
    {
      HIBYTE(v35) = v26 - *(unsigned char *)v27;
      size_t v25 = cf;
      if (!v24) {
        goto LABEL_50;
      }
    }
    memmove(v25, v28, v24);
LABEL_50:
    *((unsigned char *)v25 + v24) = 0;
    long long v31 = cf;
    if (v35 < 0) {
      long long v31 = (CFTypeRef *)cf[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v46 = v31;
    _os_log_error_impl(&dword_1B8B00000, v16, OS_LOG_TYPE_ERROR, "%s: \n", buf, 0xCu);
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)cf[0]);
    }
  }
  if ((BYTE8(v42) & 0x10) != 0)
  {
    uint64_t v19 = v42;
    if ((unint64_t)v42 < *((void *)&v39 + 1))
    {
      *(void *)&long long v42 = *((void *)&v39 + 1);
      uint64_t v19 = *((void *)&v39 + 1);
    }
    int v20 = (const void *)v39;
    size_t v17 = v19 - v39;
    if ((unint64_t)(v19 - v39) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((BYTE8(v42) & 8) == 0)
    {
      size_t v17 = 0;
      HIBYTE(v33) = 0;
      int v18 = __p;
      goto LABEL_22;
    }
    int v20 = (const void *)*((void *)&v37 + 1);
    size_t v17 = *((void *)&v38 + 1) - *((void *)&v37 + 1);
    if (*((void *)&v38 + 1) - *((void *)&v37 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_34:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    int v18 = operator new(v21 + 1);
    __p[1] = (void *)v17;
    unint64_t v33 = v22 | 0x8000000000000000;
    __p[0] = v18;
    goto LABEL_21;
  }
  HIBYTE(v33) = v17;
  int v18 = __p;
  if (v17) {
LABEL_21:
  }
    memmove(v18, v20, v17);
LABEL_22:
  *((unsigned char *)v18 + v17) = 0;
  CreateError();
  if (cf == a4) {
    goto LABEL_25;
  }
  CFTypeRef v23 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v23)
  {
    CFRelease(v23);
LABEL_25:
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v36 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v36 + *(void *)(v36 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v36 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9C8300](v43);
}

void sub_1B8B549F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t radio::QMIHealthCommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  BOOL v8 = operator new(0xC0uLL);
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  size_t v17 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *a3;
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  v15[0] = v11;
  v15[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMIHealthCommandDriver::QMIHealthCommandDriver((uint64_t)v8, (uint64_t)&v16, (uint64_t)v15);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<radio::QMIHealthCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIHealthCommandDriver,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver*)#1},void>(a4, v9);
  ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  unint64_t v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a4 + 48))(*a4, a2);
}

void sub_1B8B54BBC(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8B54BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t radio::QMIHealthCommandDriver::QMIHealthCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *(std::__shared_weak_count **)(a2 + 8);
  BOOL v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  long long v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::HealthCommandDriver::HealthCommandDriver();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)a1 = &unk_1F1260EB8;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 168) = dispatch_group_create();
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  return a1;
}

void sub_1B8B54D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void radio::HealthCommandDriver::~HealthCommandDriver(void **this)
{
  *this = &unk_1F1261220;
  if (*((char *)this + 143) < 0)
  {
    operator delete(this[15]);
    char v2 = (std::__shared_weak_count *)this[14];
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    char v2 = (std::__shared_weak_count *)this[14];
    if (!v2)
    {
LABEL_6:
      *this = &unk_1F1261280;
      MEMORY[0x1BA9C75B0](this + 1);
      unint64_t v3 = this[12];
      if (!v3) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *this = &unk_1F1261280;
  MEMORY[0x1BA9C75B0](this + 1);
  unint64_t v3 = this[12];
  if (v3) {
LABEL_7:
  }
    dispatch_release(v3);
LABEL_8:
  char v4 = this[11];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[10];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void radio::QMIHealthCommandDriver::~QMIHealthCommandDriver(radio::QMIHealthCommandDriver *this)
{
  *(void *)this = &unk_1F1260EB8;
  char v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  unint64_t v3 = *((void *)this + 21);
  if (v3) {
    dispatch_release(v3);
  }
  std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(*((void **)this + 19));
  radio::HealthCommandDriver::~HealthCommandDriver((void **)this);
}

{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  *(void *)this = &unk_1F1260EB8;
  char v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  unint64_t v3 = *((void *)this + 21);
  if (v3) {
    dispatch_release(v3);
  }
  std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(*((void **)this + 19));
  radio::HealthCommandDriver::~HealthCommandDriver((void **)this);
}

{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  *(void *)this = &unk_1F1260EB8;
  char v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v5, 2u);
  }
  unint64_t v3 = *((void *)this + 21);
  if (v3) {
    dispatch_release(v3);
  }
  std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(*((void **)this + 19));
  radio::HealthCommandDriver::~HealthCommandDriver((void **)this);
  operator delete(v4);
}

void radio::QMIHealthCommandDriver::init(uint64_t a1, uint64_t a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_28;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = v4;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_74;
  void block[4] = a1 + 72;
  block[5] = &v5;
  uint64_t v3 = a1 + 88;
  char v2 = *(NSObject **)(a1 + 88);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke(uint64_t a1)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (uint64_t v4 = *(void *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v172.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v172.__r_.__value_.__r.__words[2] = 0x6AAAAAAAAAAAAAALL;
  unint64_t v171 = 0xAAAAAAAAAAAAAAAALL;
  v172.__r_.__value_.__r.__words[0] = 0xAA00315F61746164;
  uint64_t v170 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v170, *(Registry **)(v2 + 104));
  long long v7 = *(unsigned int ***)(a1 + 40);
  BOOL v8 = *v7;
  long long v107 = v7[1];
  uint64_t v108 = v4;
  if (*v7 != v107)
  {
    uint64_t v9 = (uint64_t **)(v2 + 152);
    uint64_t v105 = *(std::string **)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v106 = *MEMORY[0x1E4FBA418];
    while (1)
    {
      unsigned int v10 = *v8;
      unint64_t v169 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v168[7] = v11;
      v168[8] = v11;
      v168[5] = v11;
      v168[6] = v11;
      v168[3] = v11;
      v168[4] = v11;
      v168[1] = v11;
      v168[2] = v11;
      long long v167 = v11;
      v168[0] = v11;
      *(_OWORD *)std::string __p = v11;
      long long v166 = v11;
      long long v163 = v11;
      long long v164 = v11;
      long long v161 = v11;
      long long v162 = v11;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v161);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v161, (uint64_t)"data_", 5);
      uint64_t v12 = (capabilities::ipc *)std::ostream::operator<<();
      memset(&__dst, 170, sizeof(__dst));
      if ((BYTE8(v167) & 0x10) != 0)
      {
        uint64_t v15 = v167;
        uint64_t v16 = (const void **)&v164;
        if ((unint64_t)v167 < *((void *)&v164 + 1))
        {
          *(void *)&long long v167 = *((void *)&v164 + 1);
          uint64_t v15 = *((void *)&v164 + 1);
          uint64_t v16 = (const void **)&v164;
        }
      }
      else
      {
        if ((BYTE8(v167) & 8) == 0)
        {
          std::string::size_type v13 = 0;
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
          p_dst = &__dst;
          goto LABEL_22;
        }
        uint64_t v15 = *((void *)&v163 + 1);
        uint64_t v16 = (const void **)&v162 + 1;
      }
      size_t v17 = *v16;
      std::string::size_type v13 = v15 - (void)*v16;
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v13 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15 - *(unsigned char *)v16;
      p_dst = &__dst;
      if (v13) {
        goto LABEL_21;
      }
LABEL_22:
      p_dst->__r_.__value_.__s.__data_[v13] = 0;
      if ((capabilities::ipc::supportsUnifiedQMuxV2(v12) & 1) == 0)
      {
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v20 = &__dst;
          }
          else {
            int v20 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = __dst.__r_.__value_.__l.__size_;
          }
          std::string::__assign_no_alias<false>((void **)&v172.__r_.__value_.__l.__data_, v20, size);
        }
        else if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(&v172, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else
        {
          std::string v172 = __dst;
        }
      }
      uint64_t v22 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeRef v23 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          CFTypeRef v23 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        size_t v24 = &v172;
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          size_t v24 = (std::string *)v172.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v24;
        _os_log_impl(&dword_1B8B00000, v22, OS_LOG_TYPE_DEFAULT, "#I Creating WDS client %s on %s", buf, 0x16u);
      }
      if (!v170)
      {
        Name = (const char *)radio::HealthCommandDriver::getName((radio::HealthCommandDriver *)v2);
        size_t v30 = strlen(Name);
        if (v30 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v31 = v30;
        if (v30 >= 0x17)
        {
          uint64_t v55 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17) {
            uint64_t v55 = v30 | 7;
          }
          uint64_t v56 = v55 + 1;
          uint64_t v32 = operator new(v55 + 1);
          v156.__r_.__value_.__r.__words[2] = v56 | 0x8000000000000000;
          v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
          v156.__r_.__value_.__l.__size_ = v31;
        }
        else
        {
          *((unsigned char *)&v156.__r_.__value_.__s + 23) = v30;
          uint64_t v32 = &v156;
          if (!v30)
          {
LABEL_86:
            v32[v31] = 0;
            uint64_t v57 = std::string::append(&v156, ": ", 2uLL);
            long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
            v157.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v58;
            v57->__r_.__value_.__l.__size_ = 0;
            v57->__r_.__value_.__r.__words[2] = 0;
            v57->__r_.__value_.__r.__words[0] = 0;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v59 = &__dst;
            }
            else {
              char v59 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v60 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v60 = __dst.__r_.__value_.__l.__size_;
            }
            long long v61 = std::string::append(&v157, (const std::string::value_type *)v59, v60);
            long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            std::string::size_type v159 = v61->__r_.__value_.__r.__words[2];
            *(_OWORD *)unint64_t v158 = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            uint64_t v63 = *(NSObject **)(v2 + 88);
            size_t v150 = v63;
            if (v63) {
              dispatch_retain(v63);
            }
            uint64_t v64 = *(std::__shared_weak_count **)(v2 + 80);
            if (!v64 || (v65 = *(void *)(v2 + 72), (uint64_t v66 = std::__shared_weak_count::lock(v64)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            long long v67 = v66;
            atomic_fetch_add_explicit(&v66->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            if (atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              uint64_t v149 = 0;
              uint64_t v148 = 0;
              uint64_t v68 = std::__shared_weak_count::lock(v66);
              if (v68) {
                goto LABEL_98;
              }
LABEL_115:
              uint64_t v148 = 0;
              uint64_t v149 = v68;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v67);
              uint64_t v149 = 0;
              uint64_t v148 = 0;
              uint64_t v68 = std::__shared_weak_count::lock(v67);
              if (!v68) {
                goto LABEL_115;
              }
LABEL_98:
              atomic_fetch_add_explicit(&v68->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              uint64_t v148 = v65;
              uint64_t v149 = v68;
            }
            std::__shared_weak_count::__release_weak(v67);
            if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
            qmi::Client::createWithQueue();
            uint64_t v69 = *v9;
            uint64_t v70 = (uint64_t **)(v2 + 152);
            uint64_t v71 = (uint64_t **)(v2 + 152);
            if (*v9)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v71 = (uint64_t **)v69;
                  unsigned int v72 = *((_DWORD *)v69 + 8);
                  if (v10 >= v72) {
                    break;
                  }
                  uint64_t v69 = *v71;
                  uint64_t v70 = v71;
                  if (!*v71) {
                    goto LABEL_109;
                  }
                }
                if (v72 >= v10) {
                  break;
                }
                uint64_t v69 = v71[1];
                if (!v69)
                {
                  uint64_t v70 = v71 + 1;
                  goto LABEL_109;
                }
              }
              int v73 = (char *)v71;
            }
            else
            {
LABEL_109:
              int v73 = (char *)operator new(0x48uLL);
              *((_DWORD *)v73 + 8) = v10;
              *(_OWORD *)(v73 + 40) = 0u;
              *(_OWORD *)(v73 + 56) = 0u;
              *(void *)int v73 = 0;
              *((void *)v73 + 1) = 0;
              *((void *)v73 + 2) = v71;
              std::__shared_weak_count *v70 = (uint64_t *)v73;
              uint64_t v74 = **(void **)(v2 + 144);
              uint64_t v75 = (uint64_t *)v73;
              if (v74)
              {
                *(void *)(v2 + 144) = v74;
                uint64_t v75 = *v70;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 152), v75);
              ++*(void *)(v2 + 160);
            }
            uint64_t v4 = v108;
            long long v80 = *(_OWORD *)&buf[16];
            *(_OWORD *)&uint8_t buf[16] = 0uLL;
            char v81 = (std::__shared_weak_count *)*((void *)v73 + 8);
            *(_OWORD *)(v73 + 56) = v80;
            if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
              qmi::Client::~Client((qmi::Client *)buf);
              uint64_t v82 = v149;
              if (v149) {
LABEL_141:
              }
                std::__shared_weak_count::__release_weak(v82);
            }
            else
            {
              qmi::Client::~Client((qmi::Client *)buf);
              uint64_t v82 = v149;
              if (v149) {
                goto LABEL_141;
              }
            }
            uint64_t v79 = v150;
            if (v150) {
              goto LABEL_126;
            }
            goto LABEL_127;
          }
        }
        memmove(v32, Name, v31);
        goto LABEL_86;
      }
      size_t v25 = (const char *)radio::HealthCommandDriver::getName((radio::HealthCommandDriver *)v2);
      size_t v26 = strlen(v25);
      if (v26 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v27 = v26;
      if (v26 >= 0x17)
      {
        uint64_t v33 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17) {
          uint64_t v33 = v26 | 7;
        }
        uint64_t v34 = v33 + 1;
        int v28 = operator new(v33 + 1);
        v156.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
        v156.__r_.__value_.__l.__size_ = v27;
LABEL_52:
        memmove(v28, v25, v27);
        goto LABEL_53;
      }
      *((unsigned char *)&v156.__r_.__value_.__s + 23) = v26;
      int v28 = &v156;
      if (v26) {
        goto LABEL_52;
      }
LABEL_53:
      *((unsigned char *)v28 + v27) = 0;
      int64_t v35 = std::string::append(&v156, ": ", 2uLL);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v157.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v37 = &__dst;
      }
      else {
        long long v37 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = __dst.__r_.__value_.__l.__size_;
      }
      long long v39 = std::string::append(&v157, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      std::string::size_type v159 = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)unint64_t v158 = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      long long v41 = *(NSObject **)(v2 + 88);
      dispatch_object_t object = v41;
      if (v41) {
        dispatch_retain(v41);
      }
      long long v42 = *(std::__shared_weak_count **)(v2 + 80);
      if (!v42 || (uint64_t v43 = *(void *)(v2 + 72), (v44 = std::__shared_weak_count::lock(v42)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v45 = v44;
      atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        int64_t v154 = 0;
        uint64_t v153 = 0;
        uint64_t v46 = std::__shared_weak_count::lock(v44);
        if (!v46) {
          goto LABEL_81;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v45);
        int64_t v154 = 0;
        uint64_t v153 = 0;
        uint64_t v46 = std::__shared_weak_count::lock(v45);
        if (!v46)
        {
LABEL_81:
          uint64_t v153 = 0;
          int64_t v154 = v46;
          goto LABEL_66;
        }
      }
      atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v153 = v43;
      int64_t v154 = v46;
LABEL_66:
      std::__shared_weak_count::__release_weak(v45);
      if (!v46 || atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        unint64_t v47 = v171;
        uint64_t v151 = v170;
        int v152 = (std::__shared_weak_count *)v171;
        if (!v171) {
          goto LABEL_70;
        }
LABEL_69:
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_70;
      }
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      unint64_t v47 = v171;
      uint64_t v151 = v170;
      int v152 = (std::__shared_weak_count *)v171;
      if (v171) {
        goto LABEL_69;
      }
LABEL_70:
      qmi::Client::createWithQueueLocal();
      uint64_t v48 = *v9;
      unint64_t v49 = (uint64_t **)(v2 + 152);
      int v50 = (uint64_t **)(v2 + 152);
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            int v50 = (uint64_t **)v48;
            unsigned int v51 = *((_DWORD *)v48 + 8);
            if (v10 >= v51) {
              break;
            }
            uint64_t v48 = *v50;
            unint64_t v49 = v50;
            if (!*v50) {
              goto LABEL_77;
            }
          }
          if (v51 >= v10) {
            break;
          }
          uint64_t v48 = v50[1];
          if (!v48)
          {
            unint64_t v49 = v50 + 1;
            goto LABEL_77;
          }
        }
        uint64_t v52 = (char *)v50;
      }
      else
      {
LABEL_77:
        uint64_t v52 = (char *)operator new(0x48uLL);
        *((_DWORD *)v52 + 8) = v10;
        *(_OWORD *)(v52 + 40) = 0u;
        *(_OWORD *)(v52 + 56) = 0u;
        *(void *)uint64_t v52 = 0;
        *((void *)v52 + 1) = 0;
        *((void *)v52 + 2) = v50;
        std::__shared_weak_count *v49 = (uint64_t *)v52;
        uint64_t v53 = **(void **)(v2 + 144);
        uint64_t v54 = (uint64_t *)v52;
        if (v53)
        {
          *(void *)(v2 + 144) = v53;
          uint64_t v54 = *v49;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 152), v54);
        ++*(void *)(v2 + 160);
      }
      uint64_t v4 = v108;
      long long v76 = *(_OWORD *)&buf[16];
      *(_OWORD *)&uint8_t buf[16] = 0uLL;
      long long v77 = (std::__shared_weak_count *)*((void *)v52 + 8);
      *(_OWORD *)(v52 + 56) = v76;
      if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
        qmi::Client::~Client((qmi::Client *)buf);
        uint64_t v78 = v152;
        if (!v152) {
          goto LABEL_123;
        }
      }
      else
      {
        qmi::Client::~Client((qmi::Client *)buf);
        uint64_t v78 = v152;
        if (!v152) {
          goto LABEL_123;
        }
      }
      if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
LABEL_123:
      if (v154) {
        std::__shared_weak_count::__release_weak(v154);
      }
      uint64_t v79 = object;
      if (object) {
LABEL_126:
      }
        dispatch_release(v79);
LABEL_127:
      if (SHIBYTE(v159) < 0)
      {
        operator delete(v158[0]);
        if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_129:
          if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_130;
          }
          goto LABEL_135;
        }
      }
      else if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_129;
      }
      operator delete(v157.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_130:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_136;
        }
        goto LABEL_131;
      }
LABEL_135:
      operator delete(v156.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_136:
      }
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_131:
      *(void *)&long long v161 = v106;
      *(void *)((char *)&v161 + *(void *)(v106 - 24)) = v105;
      *((void *)&v161 + 1) = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v166) < 0) {
        operator delete(__p[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1BA9C8300](v168);
      if (++v8 == v107) {
        goto LABEL_146;
      }
    }
    uint64_t v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v18 = v13 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_dst = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    __dst.__r_.__value_.__l.__size_ = v13;
LABEL_21:
    uint64_t v12 = (capabilities::ipc *)memmove(p_dst, v17, v13);
    goto LABEL_22;
  }
LABEL_146:
  uint64_t v83 = *(void **)(v2 + 144);
  if (v83 != (void *)(v2 + 152))
  {
    char v84 = 0;
    do
    {
      *(void *)&long long v85 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v85 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v161 = v85;
      long long v162 = v85;
      unint64_t v86 = v83[7];
      uint64_t v87 = v83[8];
      *(void *)&long long v163 = 0xAAAAAAAAAAAAAAAALL;
      LODWORD(v161) = *((_DWORD *)v83 + 8);
      *((void *)&v161 + 1) = 0;
      *(void *)&long long v162 = 0;
      *((void *)&v162 + 1) = v86;
      *(void *)&long long v163 = v87;
      if (v87)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(_OWORD *)&uint8_t buf[16] = __PAIR128__(v163, *((unint64_t *)&v162 + 1));
        if ((void)v163) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v163 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(_OWORD *)&uint8_t buf[16] = v86;
      }
      memset(&__dst, 170, sizeof(__dst));
      uint64_t v88 = qmi::Client::getName((qmi::Client *)buf);
      if (*(char *)(v88 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v88, *(void *)(v88 + 8));
      }
      else
      {
        long long v89 = *(_OWORD *)v88;
        __dst.__r_.__value_.__r.__words[2] = *(void *)(v88 + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v89;
      }
      uint64_t v140 = MEMORY[0x1E4F143A8];
      uint64_t v141 = 1174405120;
      int v142 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_5;
      __n128 v143 = &__block_descriptor_tmp_11;
      uint64_t v144 = v2;
      uint64_t v145 = v4;
      uint64_t v146 = v6;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v147, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v147 = __dst;
      }
      qmi::Client::setHandler();
      uint64_t v131 = MEMORY[0x1E4F143A8];
      uint64_t v132 = 1174405120;
      uint64_t v133 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_7;
      unint64_t v134 = &__block_descriptor_tmp_13_4;
      uint64_t v135 = v2;
      uint64_t v136 = v4;
      size_t v137 = v6;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v138, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v138 = __dst;
      }
      char v139 = v84;
      qmi::Client::setHandler();
      uint64_t v122 = MEMORY[0x1E4F143A8];
      uint64_t v123 = 1174405120;
      uint64_t v124 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_14;
      uint64_t v125 = &__block_descriptor_tmp_17_1;
      uint64_t v126 = v2;
      uint64_t v127 = v4;
      size_t v128 = v6;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v129, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v129 = __dst;
      }
      char v130 = v84;
      qmi::Client::setHandler();
      v158[1] = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      v158[0] = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      qmi::Client::operator std::weak_ptr<qmi::Client::State>();
      uint64_t v111 = MEMORY[0x1E4F143A8];
      uint64_t v112 = 1174405120;
      uint64_t v113 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_18;
      int v114 = &__block_descriptor_tmp_24_4;
      uint64_t v115 = v2;
      uint64_t v116 = v4;
      uint64_t v117 = v6;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v118, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v118 = __dst;
      }
      uint64_t v119 = v158[0];
      int v120 = v158[1];
      if (v158[1]) {
        atomic_fetch_add_explicit(&v158[1]->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v121 = v84;
      qmi::Client::setHandler();
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      long long v109 = v158[1];
      if (v158[1]) {
        atomic_fetch_add_explicit(&v158[1]->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v110, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v110 = __dst;
      }
      qmi::Client::setHandler();
      int v90 = *(std::__shared_weak_count **)(v2 + 80);
      if (!v90 || (std::string::size_type v91 = *(void *)(v2 + 72), (v92 = std::__shared_weak_count::lock(v90)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      unint64_t v93 = v92;
      atomic_fetch_add_explicit(&v92->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v94 = std::__shared_weak_count::lock(v92);
        if (!v94) {
          goto LABEL_209;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v93);
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v94 = std::__shared_weak_count::lock(v93);
        if (!v94)
        {
LABEL_209:
          uint64_t v95 = (std::__shared_weak_count *)v157.__r_.__value_.__l.__size_;
          v157.__r_.__value_.__r.__words[0] = 0;
          v157.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
          if (!v95) {
            goto LABEL_181;
          }
LABEL_180:
          std::__shared_weak_count::__release_weak(v95);
          goto LABEL_181;
        }
      }
      atomic_fetch_add_explicit(&v94->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v95 = (std::__shared_weak_count *)v157.__r_.__value_.__l.__size_;
      v157.__r_.__value_.__r.__words[0] = v91;
      v157.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
      if (v95) {
        goto LABEL_180;
      }
LABEL_181:
      std::__shared_weak_count::__release_weak(v93);
      uint64_t v4 = v108;
      if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
      qmi::Client::setClientHandle();
      if (v157.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v157.__r_.__value_.__l.__size_);
      }
      qmi::Client::start((qmi::Client *)buf);
      if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        long long v96 = v109;
        if (!v109) {
          goto LABEL_189;
        }
LABEL_188:
        std::__shared_weak_count::__release_weak(v96);
        goto LABEL_189;
      }
      operator delete(v110.__r_.__value_.__l.__data_);
      long long v96 = v109;
      if (v109) {
        goto LABEL_188;
      }
LABEL_189:
      std::__shared_weak_count::__release_weak(v6);
      if (v120) {
        std::__shared_weak_count::__release_weak(v120);
      }
      if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        uint64_t v97 = v117;
        if (!v117) {
          goto LABEL_194;
        }
LABEL_193:
        std::__shared_weak_count::__release_weak(v97);
        goto LABEL_194;
      }
      operator delete(v118.__r_.__value_.__l.__data_);
      uint64_t v97 = v117;
      if (v117) {
        goto LABEL_193;
      }
LABEL_194:
      if (v158[1]) {
        std::__shared_weak_count::__release_weak(v158[1]);
      }
      if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        uint64_t v98 = v128;
        if (!v128) {
          goto LABEL_199;
        }
LABEL_198:
        std::__shared_weak_count::__release_weak(v98);
        goto LABEL_199;
      }
      operator delete(v129.__r_.__value_.__l.__data_);
      uint64_t v98 = v128;
      if (v128) {
        goto LABEL_198;
      }
LABEL_199:
      if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        long long v99 = v137;
        if (!v137) {
          goto LABEL_202;
        }
LABEL_201:
        std::__shared_weak_count::__release_weak(v99);
        goto LABEL_202;
      }
      operator delete(v138.__r_.__value_.__l.__data_);
      long long v99 = v137;
      if (v137) {
        goto LABEL_201;
      }
LABEL_202:
      if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        char v100 = v146;
        if (!v146) {
          goto LABEL_205;
        }
LABEL_204:
        std::__shared_weak_count::__release_weak(v100);
        goto LABEL_205;
      }
      operator delete(v147.__r_.__value_.__l.__data_);
      char v100 = v146;
      if (v146) {
        goto LABEL_204;
      }
LABEL_205:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        qmi::Client::~Client((qmi::Client *)buf);
        qmi::Client::~Client((qmi::Client *)((char *)&v161 + 8));
        unint64_t v101 = (void *)v83[1];
        if (v101)
        {
          do
          {
LABEL_222:
            uint64_t v102 = v101;
            unint64_t v101 = (void *)*v101;
          }
          while (v101);
          goto LABEL_148;
        }
      }
      else
      {
        qmi::Client::~Client((qmi::Client *)buf);
        qmi::Client::~Client((qmi::Client *)((char *)&v161 + 8));
        unint64_t v101 = (void *)v83[1];
        if (v101) {
          goto LABEL_222;
        }
      }
      do
      {
        uint64_t v102 = (void *)v83[2];
        BOOL v103 = *v102 == (void)v83;
        uint64_t v83 = v102;
      }
      while (!v103);
LABEL_148:
      ++v84;
      uint64_t v83 = v102;
    }
    while (v102 != (void *)(v2 + 152));
  }
  unint64_t v104 = (std::__shared_weak_count *)v171;
  if (v171 && !atomic_fetch_add((atomic_ullong *volatile)(v171 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
    std::__shared_weak_count::__release_weak(v104);
    if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_231;
    }
    goto LABEL_230;
  }
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
LABEL_230:
  }
    operator delete(v172.__r_.__value_.__l.__data_);
LABEL_231:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1B8B564C8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 169) < 0) {
    operator delete(*(void **)(v2 - 192));
  }
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_5(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (!*(void *)(a1 + 40) || (uint64_t v6 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)))
      {
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_6;
      }
      long long v7 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        long long v7 = (void *)*v7;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D stopped %s", (uint8_t *)&v8, 0xCu);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_6:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1B8B569F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_7(uint64_t a1, NSObject *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    long long v5 = *(void **)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    size_t v17 = v6;
    if (v6)
    {
      long long v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = v5[5];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            uint64_t v9 = (void *)*v9;
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v19 = v9;
          _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I entering low power %s", buf, 0xCu);
        }
        unint64_t v10 = *(unsigned __int8 *)(a1 + 80);
        if (v10 >= 0x20) {
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        }
        v5[23] |= 1 << v10;
        if (a2)
        {
          dispatch_retain(a2);
          dispatch_retain(a2);
          dispatch_group_enter(a2);
          dispatch_release(a2);
        }
        long long v11 = v5[21];
        uint64_t v12 = v5[11];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 1174405120;
        block[2] = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_8;
        block[3] = &__block_descriptor_tmp_9_1;
        void block[4] = v5;
        dispatch_group_t group = a2;
        if (a2)
        {
          dispatch_retain(a2);
          dispatch_group_enter(group);
        }
        if (*(char *)(a1 + 79) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
        }
        else {
          std::string __p = *(std::string *)(a1 + 56);
        }
        dispatch_group_notify(v11, v12, block);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        if (a2)
        {
          dispatch_group_leave(a2);
          dispatch_release(a2);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8B56CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v19)
  {
    dispatch_group_leave(v19);
    dispatch_release(v19);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_8(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    int v4 = 136315138;
    long long v5 = v3;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I completed entering low power %s", (uint8_t *)&v4, 0xCu);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    long long v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1B8B56E44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    int v4 = *(NSObject **)(v1 + 40);
    if (v4) {
      dispatch_release(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (!v2) {
      return;
    }
  }
  dispatch_group_leave(v2);
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_release(v3);
  }
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_14(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (*(void *)(a1 + 40))
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          long long v7 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            long long v7 = (void *)*v7;
          }
          *(_DWORD *)long long buf = 136315138;
          unint64_t v10 = v7;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I exited low power %s", buf, 0xCu);
        }
        unint64_t v8 = *(unsigned __int8 *)(a1 + 80);
        if (v8 >= 0x20) {
          std::__throw_out_of_range[abi:ne180100]("bitset reset argument out of range");
        }
        *(void *)(v3 + 184) &= ~(1 << v8);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B57020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_18(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = std::__shared_weak_count::lock(v2);
    std::string::size_type v60 = v4;
    if (v4)
    {
      long long v5 = v4;
      if (*(void *)(a1 + 40))
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
        if (v7)
        {
          int v28 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            int v28 = (void *)*v28;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v28;
          _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D started %s", (uint8_t *)&buf, 0xCu);
        }
        if (capabilities::ipc::supportsUnifiedQMuxV2((capabilities::ipc *)v7))
        {
          *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v57 = v8;
          long long v58 = v8;
          qmi::Client::Client();
          if ((void)v58)
          {
            uint64_t v9 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              int v10 = *(unsigned __int8 *)(a1 + 96);
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v10;
              _os_log_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEFAULT, "#I Using unified QmuxV2, attempting to bind to mux data port %u", (uint8_t *)&buf, 8u);
            }
            char v11 = *(unsigned char *)(a1 + 96);
            *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v55 = v12;
            long long v56 = v12;
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v55);
            v51[0] = MEMORY[0x1E4F143A8];
            v51[1] = 0x40000000;
            std::string::size_type v13 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_19;
            uint64_t v52 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_19;
            uint64_t v53 = &__block_descriptor_tmp_21;
            char v42 = v11 + 1;
            char v54 = v11 + 1;
            unsigned int v14 = (char *)*((void *)&v55 + 1);
            uint64_t v15 = (char *)v56;
            uint64_t v16 = (const void **)*((void *)&v55 + 1);
            if (*((void *)&v55 + 1) != (void)v56)
            {
              uint64_t v16 = (const void **)*((void *)&v55 + 1);
              while (*((unsigned char *)*v16 + 8) != 17)
              {
                if (++v16 == (const void **)v56) {
                  goto LABEL_17;
                }
              }
            }
            if (v16 == (const void **)v56)
            {
LABEL_17:
              uint64_t v19 = operator new(0x10uLL);
              uint64_t v20 = v19;
              v19[4] = 17;
              *(void *)uint64_t v19 = &unk_1F1261328;
              if ((unint64_t)v15 >= *((void *)&v56 + 1))
              {
                int64_t v22 = v15 - v14;
                uint64_t v23 = (v15 - v14) >> 3;
                unint64_t v24 = v23 + 1;
                if ((unint64_t)(v23 + 1) >> 61) {
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v25 = *((void *)&v56 + 1) - (void)v14;
                if ((uint64_t)(*((void *)&v56 + 1) - (void)v14) >> 2 > v24) {
                  unint64_t v24 = v25 >> 2;
                }
                if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v26 = v24;
                }
                if (v26)
                {
                  if (v26 >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  std::string::size_type v27 = operator new(8 * v26);
                }
                else
                {
                  std::string::size_type v27 = 0;
                }
                uint64_t v29 = &v27[8 * v23];
                size_t v30 = &v27[8 * v26];
                void *v29 = v20;
                uint64_t v21 = v29 + 1;
                if (v14 != v15)
                {
                  if ((unint64_t)(v22 - 8) < 0x58) {
                    goto LABEL_61;
                  }
                  if ((unint64_t)(v14 - v27) < 0x20) {
                    goto LABEL_61;
                  }
                  unint64_t v31 = ((unint64_t)(v22 - 8) >> 3) + 1;
                  uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v33 = &v15[-v32];
                  uint64_t v29 = (void *)((char *)v29 - v32);
                  uint64_t v34 = &v27[8 * v23 - 16];
                  int64_t v35 = v15 - 16;
                  uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v37 = *(_OWORD *)v35;
                    *(v34 - 1) = *((_OWORD *)v35 - 1);
                    _OWORD *v34 = v37;
                    v34 -= 2;
                    v35 -= 32;
                    v36 -= 4;
                  }
                  while (v36);
                  uint64_t v15 = v33;
                  if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_61:
                    do
                    {
                      uint64_t v38 = *((void *)v15 - 1);
                      v15 -= 8;
                      *--uint64_t v29 = v38;
                    }
                    while (v15 != v14);
                  }
                  unsigned int v14 = (char *)*((void *)&v55 + 1);
                }
                *((void *)&v55 + 1) = v29;
                *(void *)&long long v56 = v21;
                *((void *)&v56 + 1) = v30;
                if (v14) {
                  operator delete(v14);
                }
              }
              else
              {
                *(void *)uint64_t v15 = v19;
                uint64_t v21 = v15 + 8;
              }
              uint64_t v18 = (char *)v20 + 9;
              *(void *)&long long v56 = v21;
              std::string::size_type v13 = v52;
            }
            else
            {
              if (!v17) {
                __cxa_bad_cast();
              }
              uint64_t v18 = v17 + 9;
            }
            v13((uint64_t)v51, v18);
            uint64_t v46 = &v57;
            uint64_t v47 = QMIServiceMsg::create();
            int v48 = 25000;
            uint64_t v49 = 0;
            long long aBlock = 0;
            v43[0] = MEMORY[0x1E4F143A8];
            v43[1] = 1174405120;
            void v43[2] = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_2;
            v43[3] = &__block_descriptor_tmp_23_4;
            uint64_t v40 = *(void *)(a1 + 40);
            long long v39 = *(std::__shared_weak_count **)(a1 + 48);
            v43[4] = v3;
            v43[5] = v40;
            unint64_t v44 = v39;
            if (v39) {
              atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            char v45 = v42;
            *(void *)&long long buf = MEMORY[0x1E4F143A8];
            *((void *)&buf + 1) = 0x40000000;
            long long v62 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds3abm15BindMuxDataPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            uint64_t v63 = &unk_1E6193B18;
            uint64_t v64 = v43;
            long long v41 = _Block_copy(&buf);
            long long aBlock = v41;
            if (v47)
            {
              qmi::Client::send();
              long long v41 = aBlock;
            }
            if (v41) {
              _Block_release(v41);
            }
            if (v44) {
              std::__shared_weak_count::__release_weak(v44);
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v55);
          }
          qmi::Client::~Client((qmi::Client *)&v57);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B57560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  qmi::Client::~Client((qmi::Client *)&a33);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v33 - 176);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_19(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        uint64_t v9 = *(NSObject **)(v5 + 40);
        if (v8)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            int v10 = *(unsigned __int8 *)(a1 + 56);
            *(_DWORD *)long long buf = 67109378;
            int v13 = v10;
            __int16 v14 = 2080;
            uint64_t v15 = qmi::asString();
            _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "Error binding to mux data port %u: %s", buf, 0x12u);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *(unsigned __int8 *)(a1 + 56);
          *(_DWORD *)long long buf = 67109120;
          int v13 = v11;
          _os_log_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEFAULT, "#I Binded to mux data port %u", buf, 8u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8B57754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
}

void sub_1B8B57814(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_25(uint64_t a1, xpc_object_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = std::__shared_weak_count::lock(v3);
    size_t v17 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (!*(void *)(a1 + 40)) {
        goto LABEL_11;
      }
      *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v14 = v8;
      long long v15 = v8;
      qmi::Client::Client();
      if (!(void)v15)
      {
LABEL_10:
        qmi::Client::~Client((qmi::Client *)&v14);
LABEL_11:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      qmi::Client::stop((qmi::Client *)&v14);
      if (a2)
      {
        xpc_retain(a2);
        uint64_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
      }
      else
      {
        a2 = xpc_null_create();
        uint64_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
LABEL_14:
          int v10 = (void *)(a1 + 72);
          if (*(char *)(a1 + 95) < 0) {
            int v10 = (void *)*v10;
          }
          xpc::object::describe((xpc::object *)__p, (uint64_t)a2);
          if (v13 >= 0) {
            int v11 = __p;
          }
          else {
            int v11 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v19 = v10;
          __int16 v20 = 2080;
          uint64_t v21 = v11;
          _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "server error on %s:\n%s", buf, 0x16u);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      xpc_release(a2);
      goto LABEL_10;
    }
  }
}

void sub_1B8B57A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  xpc_release(v17);
  qmi::Client::~Client((qmi::Client *)&a13);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void xpc::object::describe(xpc::object *this, uint64_t a2)
{
  uint64_t v3 = (char *)MEMORY[0x1BA9C88A0](a2);
  memset(this, 170, 24);
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = (xpc::object *)operator new(v6 + 1);
    *((void *)this + 1) = v5;
    *((void *)this + 2) = v7 | 0x8000000000000000;
    *(void *)this = v8;
    this = v8;
    goto LABEL_8;
  }
  *((unsigned char *)this + 23) = v4;
  if (v4) {
LABEL_8:
  }
    memcpy(this, v3, v5);
  *((unsigned char *)this + v5) = 0;

  free(v3);
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v4 = *(void *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v5 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1B8B57BF8(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    std::string::size_type v4 = *(std::__shared_weak_count **)(v1 + 48);
    if (!v4) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    std::string::size_type v4 = *(std::__shared_weak_count **)(v1 + 48);
    if (!v4) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
LABEL_3:
  }
    std::__shared_weak_count::__release_weak(v2);
LABEL_4:
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void radio::QMIHealthCommandDriver::updateDataStats(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v11[3] = &__block_descriptor_tmp_40_2;
  v11[4] = a1;
  long long v6 = *(void **)a3;
  if (*(void *)a3) {
    long long v6 = _Block_copy(v6);
  }
  uint64_t v7 = (uint64_t *)(a1 + 72);
  long long v8 = *(NSObject **)(a3 + 8);
  long long aBlock = v6;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  long long v15 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::SharedSynchronizable<radio::HealthCommandDriver>::execute_wrapped(v7, (uint64_t)v11);
  int v10 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v142 = 0;
  __n128 v143 = &v142;
  uint64_t v144 = 0x3802000000;
  uint64_t v145 = __Block_byref_object_copy__1;
  uint64_t v146 = __Block_byref_object_dispose__1;
  long long aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  std::string::size_type v4 = a1[6];
  long long aBlock = v2;
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  if (*(unsigned char *)(v3 + 176) || *(_DWORD *)(v3 + 184))
  {
    size_t v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Skipping, in low power", buf, 2u);
    }
    goto LABEL_9;
  }
  long long v6 = dispatch_group_create();
  unint64_t v140 = 0xAAAAAAAAAAAAAAAALL;
  int v141 = -1431655766;
  long long v109 = v6;
  radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)&v140);
  uint64_t v7 = (void *)a1[7];
  long long v8 = (void *)*v7;
  uint64_t v108 = v7 + 1;
  if ((void *)*v7 == v7 + 1)
  {
LABEL_126:
    uint64_t v75 = *(std::__shared_weak_count **)(v3 + 80);
    if (!v75 || (uint64_t v76 = *(void *)(v3 + 72), (v77 = std::__shared_weak_count::lock(v75)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v78 = v77;
    uint64_t v79 = *(NSObject **)(v3 + 88);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_38;
    block[3] = &unk_1F1261098;
    void block[5] = v76;
    uint64_t v112 = v77;
    p_shared_owners = &v77->__shared_owners_;
    atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
    void block[4] = &v142;
    dispatch_group_notify(v6, v79, block);
    char v81 = v112;
    if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
    goto LABEL_176;
  }
  uint64_t v9 = (void *)(v3 + 152);
  uint64_t v110 = v7[2];
  while (1)
  {
    unsigned int v10 = *((_DWORD *)v8 + 7);
    uint64_t v11 = *v9;
    if (!*v9) {
      break;
    }
    uint64_t v12 = v8[4];
    int v13 = *((_DWORD *)v8 + 10);
    uint64_t v14 = v9;
    do
    {
      unsigned int v15 = *(_DWORD *)(v11 + 32);
      BOOL v16 = v15 >= v10;
      if (v15 >= v10) {
        size_t v17 = (uint64_t *)v11;
      }
      else {
        size_t v17 = (uint64_t *)(v11 + 8);
      }
      if (v16) {
        uint64_t v14 = (void *)v11;
      }
      uint64_t v11 = *v17;
    }
    while (*v17);
    if (v14 == v9 || v10 < *((_DWORD *)v14 + 8)) {
      break;
    }
    long long v155 = 0uLL;
    uint64_t v19 = v14[7];
    uint64_t v18 = v14[8];
    uint64_t v156 = v19;
    uint64_t v157 = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v126 = v20;
    long long v127 = v20;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v126);
    BOOL v21 = v13 != 0;
    LODWORD(v140) = v140 + v12;
    HIDWORD(v140) += HIDWORD(v12);
    if (v13) {
      int v141 = 1;
    }
    v121[0] = MEMORY[0x1E4F143A8];
    v121[1] = 0x40000000;
    uint64_t v22 = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_31;
    uint64_t v122 = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_31;
    uint64_t v123 = &__block_descriptor_tmp_33_0;
    uint64_t v124 = v12;
    BOOL v125 = v21;
    unint64_t v24 = (char *)*((void *)&v126 + 1);
    uint64_t v23 = (char *)v127;
    uint64_t v25 = (const void **)*((void *)&v126 + 1);
    if (*((void *)&v126 + 1) != (void)v127)
    {
      uint64_t v25 = (const void **)*((void *)&v126 + 1);
      while (*((unsigned char *)*v25 + 8) != 1)
      {
        if (++v25 == (const void **)v127) {
          goto LABEL_40;
        }
      }
    }
    if (v25 == (const void **)v127)
    {
LABEL_40:
      int v28 = operator new(0x18uLL);
      uint64_t v29 = v28;
      v28[8] = 1;
      *(void *)int v28 = &unk_1F12613A8;
      *((_DWORD *)v28 + 3) = 0;
      std::string::size_type v27 = v28 + 12;
      *((void *)v28 + 2) = 0;
      if ((unint64_t)v23 < *((void *)&v127 + 1))
      {
        *(void *)uint64_t v23 = v28;
        uint64_t v30 = (uint64_t)(v23 + 8);
LABEL_62:
        *(void *)&long long v127 = v30;
        uint64_t v22 = v122;
        goto LABEL_63;
      }
      int64_t v31 = v23 - v24;
      uint64_t v32 = (v23 - v24) >> 3;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61) {
        goto LABEL_198;
      }
      uint64_t v34 = *((void *)&v127 + 1) - (void)v24;
      if ((uint64_t)(*((void *)&v127 + 1) - (void)v24) >> 2 > v33) {
        unint64_t v33 = v34 >> 2;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        if (v35 >> 61) {
          goto LABEL_199;
        }
        uint64_t v36 = operator new(8 * v35);
        long long v37 = &v36[8 * v32];
        void *v37 = v29;
        uint64_t v30 = (uint64_t)(v37 + 1);
        if (v24 != v23) {
          goto LABEL_51;
        }
LABEL_60:
        *((void *)&v126 + 1) = v37;
        *(void *)&long long v127 = v30;
        *((void *)&v127 + 1) = &v36[8 * v35];
        if (!v24) {
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v36 = 0;
        long long v37 = (void *)(8 * v32);
        *(void *)(8 * v32) = v29;
        uint64_t v30 = 8 * v32 + 8;
        if (v24 == v23) {
          goto LABEL_60;
        }
LABEL_51:
        if ((unint64_t)(v31 - 8) < 0x58) {
          goto LABEL_205;
        }
        if ((unint64_t)(v24 - v36) < 0x20) {
          goto LABEL_205;
        }
        unint64_t v38 = ((unint64_t)(v31 - 8) >> 3) + 1;
        uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v40 = &v23[-v39];
        long long v37 = (void *)((char *)v37 - v39);
        long long v41 = &v36[8 * v32 - 16];
        char v42 = v23 - 16;
        uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v44 = *(_OWORD *)v42;
          *(v41 - 1) = *((_OWORD *)v42 - 1);
          _OWORD *v41 = v44;
          v41 -= 2;
          v42 -= 32;
          v43 -= 4;
        }
        while (v43);
        uint64_t v23 = v40;
        if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_205:
          do
          {
            uint64_t v45 = *((void *)v23 - 1);
            v23 -= 8;
            *--long long v37 = v45;
          }
          while (v23 != v24);
        }
        unint64_t v24 = (char *)*((void *)&v126 + 1);
        *((void *)&v126 + 1) = v37;
        *(void *)&long long v127 = v30;
        *((void *)&v127 + 1) = &v36[8 * v35];
        if (!v24) {
          goto LABEL_62;
        }
      }
      operator delete(v24);
      goto LABEL_62;
    }
    if (!v26) {
      goto LABEL_197;
    }
    std::string::size_type v27 = v26 + 12;
LABEL_63:
    v22((uint64_t)v121, (uint64_t)v27);
    if (!--v110)
    {
      v116[0] = MEMORY[0x1E4F143A8];
      v116[1] = 0x40000000;
      uint64_t v46 = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
      uint64_t v117 = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
      std::string v118 = &__block_descriptor_tmp_35;
      unint64_t v119 = v140;
      int v120 = v141;
      int v48 = (char *)*((void *)&v126 + 1);
      uint64_t v47 = (char *)v127;
      uint64_t v49 = (const void **)*((void *)&v126 + 1);
      if (*((void *)&v126 + 1) != (void)v127)
      {
        uint64_t v49 = (const void **)*((void *)&v126 + 1);
        while (*((unsigned char *)*v49 + 8) != 16)
        {
          if (++v49 == (const void **)v127) {
            goto LABEL_72;
          }
        }
      }
      if (v49 != (const void **)v127)
      {
        if (!v50) {
LABEL_197:
        }
          __cxa_bad_cast();
        unsigned int v51 = v50 + 12;
        goto LABEL_95;
      }
LABEL_72:
      uint64_t v52 = operator new(0x18uLL);
      uint64_t v53 = v52;
      v52[8] = 16;
      *(void *)uint64_t v52 = &unk_1F12613F8;
      *((_DWORD *)v52 + 3) = 0;
      unsigned int v51 = v52 + 12;
      *((void *)v52 + 2) = 0;
      if ((unint64_t)v47 < *((void *)&v127 + 1))
      {
        *(void *)uint64_t v47 = v52;
        uint64_t v54 = (uint64_t)(v47 + 8);
LABEL_94:
        *(void *)&long long v127 = v54;
        uint64_t v46 = v117;
LABEL_95:
        v46((uint64_t)v116, (uint64_t)v51);
        goto LABEL_96;
      }
      int64_t v55 = v47 - v48;
      uint64_t v56 = (v47 - v48) >> 3;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61) {
LABEL_198:
      }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      uint64_t v58 = *((void *)&v127 + 1) - (void)v48;
      if ((uint64_t)(*((void *)&v127 + 1) - (void)v48) >> 2 > v57) {
        unint64_t v57 = v58 >> 2;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        if (v59 >> 61) {
LABEL_199:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        std::string::size_type v60 = operator new(8 * v59);
        long long v61 = &v60[8 * v56];
        void *v61 = v53;
        uint64_t v54 = (uint64_t)(v61 + 1);
        if (v48 == v47) {
          goto LABEL_92;
        }
LABEL_85:
        if ((unint64_t)(v55 - 8) < 0x58) {
          goto LABEL_206;
        }
        if ((unint64_t)(v48 - v60) < 0x20) {
          goto LABEL_206;
        }
        unint64_t v62 = ((unint64_t)(v55 - 8) >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v64 = &v47[-v63];
        long long v61 = (void *)((char *)v61 - v63);
        uint64_t v65 = &v60[8 * v56 - 16];
        uint64_t v66 = v47 - 16;
        uint64_t v67 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v68 = *(_OWORD *)v66;
          *(v65 - 1) = *((_OWORD *)v66 - 1);
          _OWORD *v65 = v68;
          v65 -= 2;
          v66 -= 32;
          v67 -= 4;
        }
        while (v67);
        uint64_t v47 = v64;
        if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_206:
          do
          {
            uint64_t v69 = *((void *)v47 - 1);
            v47 -= 8;
            *--long long v61 = v69;
          }
          while (v47 != v48);
        }
        int v48 = (char *)*((void *)&v126 + 1);
      }
      else
      {
        std::string::size_type v60 = 0;
        long long v61 = (void *)(8 * v56);
        *(void *)(8 * v56) = v53;
        uint64_t v54 = 8 * v56 + 8;
        if (v48 != v47) {
          goto LABEL_85;
        }
      }
LABEL_92:
      *((void *)&v126 + 1) = v61;
      *(void *)&long long v127 = v54;
      *((void *)&v127 + 1) = &v60[8 * v59];
      if (v48) {
        operator delete(v48);
      }
      goto LABEL_94;
    }
LABEL_96:
    long long v6 = v109;
    if (v109)
    {
      dispatch_retain(v109);
      dispatch_group_enter(v109);
    }
    uint64_t v70 = *(NSObject **)(v3 + 168);
    if (v70)
    {
      dispatch_retain(*(dispatch_object_t *)(v3 + 168));
      dispatch_group_enter(v70);
    }
    uint64_t v149 = &v155;
    uint64_t v150 = QMIServiceMsg::create();
    LODWORD(v151) = 25000;
    int v152 = 0;
    uint64_t v153 = 0;
    v113[0] = MEMORY[0x1E4F143A8];
    v113[1] = 1174405120;
    v113[2] = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
    v113[3] = &unk_1F1261060;
    v113[5] = v3;
    dispatch_group_t group = v109;
    if (v109)
    {
      dispatch_retain(v109);
      if (group) {
        dispatch_group_enter(group);
      }
    }
    dispatch_group_t v115 = v70;
    if (v70)
    {
      dispatch_retain(v70);
      if (v115) {
        dispatch_group_enter(v115);
      }
    }
    v113[4] = &v142;
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&long long v132 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds3abm9LinkStats8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    *((void *)&v132 + 1) = &unk_1E6193B60;
    *(void *)&long long v133 = v113;
    uint64_t v71 = _Block_copy(buf);
    uint64_t v153 = v71;
    if (v150)
    {
      qmi::Client::send();
      uint64_t v71 = v153;
    }
    if (v71) {
      _Block_release(v71);
    }
    if (v115)
    {
      dispatch_group_leave(v115);
      if (v115) {
        dispatch_release(v115);
      }
    }
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v70)
    {
      dispatch_group_leave(v70);
      dispatch_release(v70);
    }
    if (v109)
    {
      dispatch_group_leave(v109);
      dispatch_release(v109);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v126);
    qmi::Client::~Client((qmi::Client *)&v155);
    unsigned int v72 = (void *)v8[1];
    if (v72)
    {
      do
      {
        int v73 = v72;
        unsigned int v72 = (void *)*v72;
      }
      while (v72);
    }
    else
    {
      do
      {
        int v73 = (void *)v8[2];
        BOOL v74 = *v73 == (void)v8;
        long long v8 = v73;
      }
      while (!v74);
    }
    long long v8 = v73;
    uint64_t v9 = (void *)(v3 + 152);
    if (v73 == v108) {
      goto LABEL_126;
    }
  }
  unint64_t v139 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v82 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v82 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v138[7] = v82;
  v138[8] = v82;
  void v138[5] = v82;
  v138[6] = v82;
  v138[3] = v82;
  v138[4] = v82;
  v138[1] = v82;
  void v138[2] = v82;
  long long v137 = v82;
  v138[0] = v82;
  long long v135 = v82;
  long long v136 = v82;
  long long v133 = v82;
  long long v134 = v82;
  *(_OWORD *)long long buf = v82;
  long long v132 = v82;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Client for interface ", 21);
  uint64_t v83 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" not present", 12);
  char v84 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
    goto LABEL_134;
  }
  if ((BYTE8(v137) & 0x10) != 0)
  {
    uint64_t v102 = v137;
    if ((unint64_t)v137 < *((void *)&v134 + 1))
    {
      *(void *)&long long v137 = *((void *)&v134 + 1);
      uint64_t v102 = *((void *)&v134 + 1);
    }
    BOOL v103 = (const void **)&v134;
  }
  else
  {
    if ((BYTE8(v137) & 8) == 0)
    {
      size_t v100 = 0;
      HIBYTE(v151) = 0;
      unint64_t v101 = (long long *)&v149;
      goto LABEL_193;
    }
    BOOL v103 = (const void **)&v132 + 1;
    uint64_t v102 = *((void *)&v133 + 1);
  }
  unint64_t v104 = *v103;
  size_t v100 = v102 - (void)*v103;
  if (v100 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v100 >= 0x17)
  {
    uint64_t v105 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v100 | 7) != 0x17) {
      uint64_t v105 = v100 | 7;
    }
    uint64_t v106 = v105 + 1;
    unint64_t v101 = (long long *)operator new(v105 + 1);
    uint64_t v150 = v100;
    int64_t v151 = v106 | 0x8000000000000000;
    uint64_t v149 = v101;
  }
  else
  {
    HIBYTE(v151) = v102 - *(unsigned char *)v103;
    unint64_t v101 = (long long *)&v149;
    if (!v100) {
      goto LABEL_193;
    }
  }
  memmove(v101, v104, v100);
LABEL_193:
  *((unsigned char *)v101 + v100) = 0;
  long long v107 = &v149;
  if (v151 < 0) {
    long long v107 = (_OWORD **)v149;
  }
  LODWORD(v155) = 136315138;
  *(void *)((char *)&v155 + 4) = v107;
  _os_log_error_impl(&dword_1B8B00000, v84, OS_LOG_TYPE_ERROR, "Updating data stats failed: %s", (uint8_t *)&v155, 0xCu);
  if (SHIBYTE(v151) < 0) {
    operator delete(v149);
  }
LABEL_134:
  long long v85 = v143;
  if (v143[5] && v143[6])
  {
    if ((BYTE8(v137) & 0x10) != 0)
    {
      uint64_t v88 = v137;
      if ((unint64_t)v137 < *((void *)&v134 + 1))
      {
        *(void *)&long long v137 = *((void *)&v134 + 1);
        uint64_t v88 = *((void *)&v134 + 1);
      }
      long long v89 = (const void **)&v134;
    }
    else
    {
      if ((BYTE8(v137) & 8) == 0)
      {
        size_t v86 = 0;
        HIBYTE(v129) = 0;
        uint64_t v87 = __dst;
        goto LABEL_151;
      }
      long long v89 = (const void **)&v132 + 1;
      uint64_t v88 = *((void *)&v133 + 1);
    }
    int v90 = *v89;
    size_t v86 = v88 - (void)*v89;
    if (v86 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v86 >= 0x17)
    {
      uint64_t v91 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v86 | 7) != 0x17) {
        uint64_t v91 = v86 | 7;
      }
      uint64_t v92 = v91 + 1;
      uint64_t v87 = (void **)operator new(v91 + 1);
      __dst[1] = (void *)v86;
      unint64_t v129 = v92 | 0x8000000000000000;
      __dst[0] = v87;
    }
    else
    {
      HIBYTE(v129) = v88 - *(unsigned char *)v89;
      uint64_t v87 = __dst;
      if (!v86)
      {
LABEL_151:
        *((unsigned char *)v87 + v86) = 0;
        CreateError();
        unint64_t v93 = (const void *)v85[5];
        if (v93) {
          uint64_t v94 = _Block_copy(v93);
        }
        else {
          uint64_t v94 = 0;
        }
        uint64_t v95 = v85[6];
        uint64_t v149 = (long long *)MEMORY[0x1E4F143A8];
        uint64_t v150 = 1174405120;
        int64_t v151 = (int64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
        int v152 = &__block_descriptor_tmp_75_1;
        if (v94) {
          long long v96 = _Block_copy(v94);
        }
        else {
          long long v96 = 0;
        }
        uint64_t v153 = v96;
        CFTypeRef v154 = cf;
        if (cf) {
          CFRetain(cf);
        }
        dispatch_async(v95, &v149);
        if (v154) {
          CFRelease(v154);
        }
        if (v153) {
          _Block_release(v153);
        }
        if (v94) {
          _Block_release(v94);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v129) < 0) {
          operator delete(__dst[0]);
        }
        uint64_t v97 = v143;
        uint64_t v98 = (const void *)v143[5];
        v143[5] = 0;
        if (v98) {
          _Block_release(v98);
        }
        long long v99 = v97[6];
        v97[6] = 0;
        if (v99) {
          dispatch_release(v99);
        }
        goto LABEL_173;
      }
    }
    memmove(v87, v90, v86);
    goto LABEL_151;
  }
LABEL_173:
  *(void *)long long buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v136) < 0) {
    operator delete(*((void **)&v135 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9C8300](v138);
LABEL_176:
  if (v6) {
    dispatch_release(v6);
  }
LABEL_9:
  _Block_object_dispose(&v142, 8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8B58CB8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_31(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  *(void *)a2 = v2;
  return result;
}

uint64_t ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  *(void *)a2 = v2;
  return result;
}

void ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "Setting link stats");
  radio::QMIHealthCommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    size_t v5 = *(const void **)(v4 + 40);
    if (!v5) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    size_t v5 = *(const void **)(v4 + 40);
    if (!v5) {
      goto LABEL_31;
    }
  }
  if (*(void *)(v4 + 48))
  {
    CFTypeRef v6 = cf;
    if (cf ? ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get : 0)
    {
      if (cf && (CFRetain(cf), (size_t v5 = *(const void **)(v4 + 40)) == 0)) {
        long long v8 = 0;
      }
      else {
        long long v8 = _Block_copy(v5);
      }
      uint64_t v9 = *(NSObject **)(v4 + 48);
      __p[0] = (void *)MEMORY[0x1E4F143A8];
      __p[1] = (void *)1174405120;
      std::vector<std::csub_match> __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
      __p[3] = &__block_descriptor_tmp_75_1;
      if (v8)
      {
        long long aBlock = _Block_copy(v8);
        CFTypeRef v16 = v6;
        if (!v6) {
          goto LABEL_19;
        }
      }
      else
      {
        long long aBlock = 0;
        CFTypeRef v16 = v6;
        if (!v6)
        {
LABEL_19:
          dispatch_async(v9, __p);
          if (v16) {
            CFRelease(v16);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v8) {
            _Block_release(v8);
          }
          if (v6) {
            CFRelease(v6);
          }
          uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v11 = *(const void **)(v10 + 40);
          *(void *)(v10 + 40) = 0;
          if (v11) {
            _Block_release(v11);
          }
          uint64_t v12 = *(NSObject **)(v10 + 48);
          *(void *)(v10 + 48) = 0;
          if (v12) {
            dispatch_release(v12);
          }
          goto LABEL_31;
        }
      }
      CFRetain(v6);
      goto LABEL_19;
    }
  }
LABEL_31:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B5901C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    size_t v5 = *(NSObject **)(a1 + 48);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  CFTypeRef v6 = *(NSObject **)(a2 + 56);
  *(void *)(a1 + 56) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    uint64_t v7 = *(NSObject **)(a1 + 56);
    if (v7)
    {
      dispatch_group_enter(v7);
    }
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    dispatch_group_leave(v4);
    size_t v5 = *(NSObject **)(a1 + 48);
    if (v5)
    {
      dispatch_release(v5);
    }
  }
}

void ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_38(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(void *)(v1 + 48)) {
    return;
  }
  uint64_t v3 = _Block_copy(v2);
  uint64_t v4 = v3;
  size_t v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
  void v7[3] = &__block_descriptor_tmp_75_1;
  if (v3)
  {
    long long aBlock = _Block_copy(v3);
    CFTypeRef cf = 0;
    dispatch_async(v5, v7);
    CFTypeRef v6 = cf;
    if (!cf) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  long long aBlock = 0;
  CFTypeRef cf = 0;
  dispatch_async(v5, v7);
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v6);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
}

uint64_t __copy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE56c121_ZTSNSt3__110shared_ptrIKNS_3mapIjN5radio19HealthCommandDriver9LinkStatsENS_4lessIjEENS_9allocatorINS_4pairIKjS4_EEEEEEEE(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[5];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  size_t v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = a2[7];
  a1[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE56c121_ZTSNSt3__110shared_ptrIKNS_3mapIjN5radio19HealthCommandDriver9LinkStatsENS_4lessIjEENS_9allocatorINS_4pairIKjS4_EEEEEEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[6];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    _Block_release(v4);
  }
}

void radio::QMIHealthCommandDriver::enterLowPower(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = _Block_copy(*(const void **)a2);
    size_t v5 = *(NSObject **)(a2 + 8);
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    radio::QMIHealthCommandDriver::handlePowerStateChange(a1, 1, (uint64_t)&v6);
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v4 = 0;
  size_t v5 = *(NSObject **)(a2 + 8);
  uint64_t v6 = 0;
  uint64_t v7 = v5;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  dispatch_retain(v5);
  radio::QMIHealthCommandDriver::handlePowerStateChange(a1, 1, (uint64_t)&v6);
  dispatch_release(v5);
  if (v4) {
LABEL_7:
  }
    _Block_release(v4);
}

void radio::QMIHealthCommandDriver::handlePowerStateChange(uint64_t a1, char a2, uint64_t a3)
{
  v10[0] = 0;
  v10[1] = v10;
  void v10[2] = 0x3802000000;
  v10[3] = __Block_byref_object_copy__1;
  v10[4] = __Block_byref_object_dispose__1;
  long long aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(NSObject **)(a3 + 8);
  long long aBlock = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &unk_1E6193AF0;
  char v9 = a2;
  v8[4] = v10;
  void v8[5] = a1;
  ctu::SharedSynchronizable<radio::HealthCommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v8);
  _Block_object_dispose(v10, 8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void radio::QMIHealthCommandDriver::exitLowPower(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = _Block_copy(*(const void **)a2);
    size_t v5 = *(NSObject **)(a2 + 8);
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    radio::QMIHealthCommandDriver::handlePowerStateChange(a1, 0, (uint64_t)&v6);
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v4 = 0;
  size_t v5 = *(NSObject **)(a2 + 8);
  uint64_t v6 = 0;
  uint64_t v7 = v5;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  dispatch_retain(v5);
  radio::QMIHealthCommandDriver::handlePowerStateChange(a1, 0, (uint64_t)&v6);
  dispatch_release(v5);
  if (v4) {
LABEL_7:
  }
    _Block_release(v4);
}

void ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (uint64_t v4 = *(void *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  *(unsigned char *)(v2 + 176) = *(unsigned char *)(a1 + 48);
  dispatch_time_t v7 = dispatch_time(0, 5000000000);
  long long v8 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(v2 + 88));
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  handler[3] = &unk_1F1261100;
  handler[5] = v2;
  void handler[6] = v4;
  uint64_t v18 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  handler[4] = *(void *)(a1 + 32);
  char v19 = *(unsigned char *)(a1 + 48);
  dispatch_source_set_event_handler(v8, handler);
  dispatch_source_set_timer(v8, v7, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  dispatch_activate(v8);
  char v9 = *(NSObject **)(v2 + 168);
  uint64_t v10 = *(NSObject **)(v2 + 88);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_45;
  block[3] = &unk_1F1261138;
  void block[5] = v2;
  void block[6] = v4;
  uint64_t v14 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  char v16 = *(unsigned char *)(a1 + 48);
  void block[4] = *(void *)(a1 + 32);
  dispatch_group_notify(v9, v10, block);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v11 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[7] = v3;
  v33[8] = v3;
  v33[5] = v3;
  v33[6] = v3;
  v33[3] = v3;
  v33[4] = v3;
  v33[1] = v3;
  v33[2] = v3;
  long long v32 = v3;
  v33[0] = v3;
  *(_OWORD *)uint64_t v30 = v3;
  long long v31 = v3;
  long long v28 = v3;
  long long v29 = v3;
  long long v26 = v3;
  long long v27 = v3;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"timeout with timeout ", 21);
  std::ostream::operator<<();
  memset(&__dst, 170, sizeof(__dst));
  if ((BYTE8(v32) & 0x10) != 0)
  {
    uint64_t v5 = v32;
    if ((unint64_t)v32 < *((void *)&v29 + 1))
    {
      *(void *)&long long v32 = *((void *)&v29 + 1);
      uint64_t v5 = *((void *)&v29 + 1);
    }
    uint64_t v6 = (const void *)v29;
    std::string::size_type v7 = v5 - v29;
    if ((unint64_t)(v5 - v29) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_21;
    }
  }
  else
  {
    if ((BYTE8(v32) & 8) == 0)
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      __dst.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
      if (!*(void *)(v4 + 40)) {
        goto LABEL_52;
      }
      goto LABEL_16;
    }
    uint64_t v6 = (const void *)*((void *)&v27 + 1);
    std::string::size_type v7 = *((void *)&v28 + 1) - *((void *)&v27 + 1);
    if (*((void *)&v28 + 1) - *((void *)&v27 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_21:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_15:
    memmove(p_dst, v6, v7);
    p_dst->__r_.__value_.__s.__data_[v7] = 0;
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    if (!*(void *)(v4 + 40)) {
      goto LABEL_52;
    }
    goto LABEL_16;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_15;
  }
  __dst.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  if (!*(void *)(v4 + 40)) {
    goto LABEL_52;
  }
LABEL_16:
  if (!*(void *)(v4 + 48)) {
    goto LABEL_52;
  }
  uint64_t v11 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    if (*(unsigned char *)(a1 + 64)) {
      uint64_t v12 = "Enter";
    }
    else {
      uint64_t v12 = "Exit";
    }
    int v13 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v13;
    _os_log_error_impl(&dword_1B8B00000, v11, OS_LOG_TYPE_ERROR, "%s failed with: %s", buf, 0x16u);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    std::string __p = __dst;
    goto LABEL_29;
  }
  std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_29:
  CreateError();
  uint64_t v14 = *(const void **)(v4 + 40);
  if (v14) {
    unsigned int v15 = _Block_copy(v14);
  }
  else {
    unsigned int v15 = 0;
  }
  char v16 = *(NSObject **)(v4 + 48);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
  uint64_t v36 = &__block_descriptor_tmp_75_1;
  if (!v15)
  {
    CFTypeRef v18 = cf;
    long long v37 = 0;
    CFTypeRef v38 = cf;
    if (!cf) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  size_t v17 = _Block_copy(v15);
  CFTypeRef v18 = cf;
  long long v37 = v17;
  CFTypeRef v38 = cf;
  if (cf) {
LABEL_36:
  }
    CFRetain(v18);
LABEL_37:
  dispatch_async(v16, buf);
  if (v38) {
    CFRelease(v38);
  }
  if (v37) {
    _Block_release(v37);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v20 = *(const void **)(v19 + 40);
    *(void *)(v19 + 40) = 0;
    if (!v20) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v20 = *(const void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
  if (v20) {
LABEL_49:
  }
    _Block_release(v20);
LABEL_50:
  BOOL v21 = *(NSObject **)(v19 + 48);
  *(void *)(v19 + 48) = 0;
  if (v21) {
    dispatch_release(v21);
  }
LABEL_52:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v26 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v26 + *(void *)(v26 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v26 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9C8300](v33);
}

void sub_1B8B59D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if ((a22 & 0x80000000) == 0)
  {
    std::ostringstream::~ostringstream((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8B59E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8B59E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_45(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
  long long v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 72)) {
      uint64_t v4 = "Enter";
    }
    else {
      uint64_t v4 = "Exit";
    }
    LODWORD(v14) = 136315138;
    *(void *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I %s completed", (uint8_t *)&v14, 0xCu);
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(const void **)(v5 + 40);
  if (v6 && *(void *)(v5 + 48))
  {
    std::string::size_type v7 = _Block_copy(v6);
    long long v8 = v7;
    uint64_t v9 = *(NSObject **)(v5 + 48);
    *(void *)&long long v14 = MEMORY[0x1E4F143A8];
    *((void *)&v14 + 1) = 1174405120;
    unsigned int v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
    char v16 = &__block_descriptor_tmp_75_1;
    if (v7)
    {
      long long aBlock = _Block_copy(v7);
      CFTypeRef cf = 0;
      dispatch_async(v9, &v14);
      CFTypeRef v10 = cf;
      if (!cf) {
        goto LABEL_13;
      }
    }
    else
    {
      long long aBlock = 0;
      CFTypeRef cf = 0;
      dispatch_async(v9, &v14);
      CFTypeRef v10 = cf;
      if (!cf)
      {
LABEL_13:
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v8) {
          _Block_release(v8);
        }
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v12 = *(const void **)(v11 + 40);
        *(void *)(v11 + 40) = 0;
        if (v12) {
          _Block_release(v12);
        }
        int v13 = *(NSObject **)(v11 + 48);
        *(void *)(v11 + 48) = 0;
        if (v13) {
          dispatch_release(v13);
        }
        return;
      }
    }
    CFRelease(v10);
    goto LABEL_13;
  }
}

void sub_1B8B5A07C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE64c22_ZTSN8dispatch6sourceE(void *a1, void *a2)
{
  uint64_t v2 = a2[7];
  a1[6] = a2[6];
  a1[7] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v3 = a2[8];
  a1[8] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_48c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE64c22_ZTSN8dispatch6sourceE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::HealthCommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)radio::HealthCommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1261280;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1261280;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8B5A3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B8B5A40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<radio::QMIHealthCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIHealthCommandDriver,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12612C0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8B5A538(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver*)#1}::operator() const(radio::QMIHealthCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8B5A560(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<radio::QMIHealthCommandDriver *,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver *)#1},std::allocator<radio::QMIHealthCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMIHealthCommandDriver *,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver *)#1},std::allocator<radio::QMIHealthCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<radio::QMIHealthCommandDriver *,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver *)#1},std::allocator<radio::QMIHealthCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15make_shared_ptrINS1_22QMIHealthCommand"
                     "DriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15make_shared_ptrINS1_22QMIHe"
                                "althCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15make_shared_ptrINS1_22QMIHealthCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15make_shared_ptrINS1_22QMIHealthCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver*)#1}::operator() const(radio::QMIHealthCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(a1[1]);
    qmi::Client::~Client((qmi::Client *)(a1 + 5));
    operator delete(a1);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::MuxId>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::MuxId>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::MuxId>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1261328;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds3abm15BindMuxDataPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B5A7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B5A810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B5A83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *___ZNK3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B5A8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStat>::getSize()
{
  return 12;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStat>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *(unsigned char *)(v3 + 11) = *(_DWORD *)(result + 20);
  *a2 = v3 + 12;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 9;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStat>::clone(uint64_t a1)
{
  size_t result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F12613A8;
  *(void *)(result + 12) = *(void *)(a1 + 12);
  *((_DWORD *)result + 5) = *(_DWORD *)(a1 + 20);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStatCumulative>::getSize()
{
  return 12;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStatCumulative>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *(unsigned char *)(v3 + 11) = *(_DWORD *)(result + 20);
  *a2 = v3 + 12;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 9;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStatCumulative>::clone(uint64_t a1)
{
  size_t result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F12613F8;
  *(void *)(result + 12) = *(void *)(a1 + 12);
  *((_DWORD *)result + 5) = *(_DWORD *)(a1 + 20);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds3abm9LinkStats8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B5AAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B5AB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B5AB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::SharedSynchronizable<radio::HealthCommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  long long v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F1261428;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  CFTypeRef v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio19HealthCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio19HealthCommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((void *)this + 9) = 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_7:
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v4) {
      return;
    }
    goto LABEL_8;
  }
LABEL_12:
  operator delete(*((void **)this + 3));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_weak(v4);
}

uint64_t ___ZN13ServerLogging4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(ServerLogging **)(a1 + 32);
  *((void *)v1 + 9) = ServerLogging::monitorSnapshotPath_sync(v1);
  uint64_t v2 = abm::trace::kTrashFolder;
  size_t v3 = strlen(abm::trace::kTrashFolder);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v12 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v12) = v3;
  uint64_t v5 = __dst;
  if (v3) {
LABEL_8:
  }
    memmove(v5, v2, (size_t)v4);
  *((unsigned char *)v4 + (void)v5) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global);
  capabilities::abs::logScratchPath((uint64_t *)__dst, v9);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__dst[0]);
    uint64_t result = *((void *)v1 + 10);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = *((void *)v1 + 10);
    if (!result) {
      return result;
    }
  }

  return MEMORY[0x1F417DC00]();
}

void sub_1B8B5AF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  size_t v3 = (char *)this + 48;
  uint64_t v2 = (const char *)*((void *)this + 6);
  v4.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blksize_t size = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespeCC_SHA256_CTX c = v4;
  *(timespec *)&v19.st_size_t size = v4;
  v19.st_mtimespeCC_SHA256_CTX c = v4;
  v19.st_ctimespeCC_SHA256_CTX c = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespeCC_SHA256_CTX c = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0) {
    uint64_t v5 = (char *)this + 48;
  }
  else {
    uint64_t v5 = v2;
  }
  if (stat(v5, &v19))
  {
    uint64_t v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = v3;
      if (*((char *)this + 71) < 0) {
        uint64_t v7 = *(const char **)v3;
      }
      v19.st_dev = 136315138;
      *(void *)&v19.st_mode = v7;
      _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    unsigned int v8 = open(v3, 0x8000);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    return 0;
  }
  unsigned int v8 = open(*(const char **)v3, 0x8000);
  if ((v8 & 0x80000000) != 0) {
    return 0;
  }
LABEL_12:
  int v9 = v8;
  uintptr_t v10 = v8;
  global_queue = dispatch_get_global_queue(17, 0);
  unint64_t v12 = dispatch_source_create(MEMORY[0x1E4F144A8], v10, 0x21uLL, global_queue);
  int v13 = v12;
  if (v12)
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_7;
    handler[4] = this;
    int v18 = v9;
    dispatch_source_set_event_handler(v12, handler);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    void v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
    v15[3] = &__block_descriptor_tmp_9;
    int v16 = v9;
    dispatch_source_set_cancel_handler(v13, v15);
    dispatch_activate(v13);
  }
  else
  {
    close(v9);
  }
  return v13;
}

void ServerLogging::registerLogServer(os_unfair_lock_s *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  uint64_t v6 = ___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  uint64_t v7 = &__block_descriptor_tmp_3;
  unsigned int v8 = a1;
  uint64_t v9 = a2;
  uintptr_t v10 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v6(v5);
  os_unfair_lock_unlock(v3);
  timespec v4 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t result = a1[5];
  uint64_t v4 = a1[6];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 88);
  *(void *)(v3 + 80) = result;
  *(void *)(v3 + 88) = v4;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t result = *(void *)(v3 + 80);
  }
  if (result)
  {
    return MEMORY[0x1F417DC00]();
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  unint64_t v0 = abm::trace::kTrashFolder;
  size_t v1 = strlen(abm::trace::kTrashFolder);
  if (v1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    uint64_t v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17) {
      uint64_t v4 = v1 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    unint64_t v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  uint64_t v3 = __dst;
  if (v1) {
LABEL_8:
  }
    memmove(v3, v0, (size_t)v2);
  *((unsigned char *)v2 + (void)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1B8B5B578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = GetOsLogContext()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v6 = 136315138;
    unint64_t v7 = v4;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v6, 0xCu);
  }
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(void *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  uint64_t result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(void *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void GetABMLogServer(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_9, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_9))
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &qword_1EC05BAA0, &dword_1B8B00000);
      __cxa_guard_release(&_MergedGlobals_9);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_14_1;
  void block[4] = &qword_1EC05BAA0;
  if (qword_1EC05BA98 == -1)
  {
    uint64_t v2 = *(void *)algn_1EC05BAA8;
    *a1 = qword_1EC05BAA0;
    a1[1] = v2;
    if (!v2) {
      return;
    }
    goto LABEL_4;
  }
  dispatch_once(&qword_1EC05BA98, block);
  uint64_t v2 = *(void *)algn_1EC05BAA8;
  *a1 = qword_1EC05BAA0;
  a1[1] = v2;
  if (v2) {
LABEL_4:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  *(void *)&__p.st_dev = operator new(0x20uLL);
  *(_OWORD *)&__p.st_ino = xmmword_1B8C301E0;
  strcpy(*(char **)&__p.st_dev, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size_t size = (std::__shared_weak_count *)v64.__r_.__value_.__l.__size_;
    if (!v64.__r_.__value_.__l.__size_)
    {
LABEL_5:
      if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    size_t size = (std::__shared_weak_count *)v64.__r_.__value_.__l.__size_;
    if (!v64.__r_.__value_.__l.__size_) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.st_gid) < 0) {
LABEL_6:
  }
    operator delete(*(void **)&__p.st_dev);
LABEL_7:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  int v6 = (capabilities::abs *)pthread_mutex_lock(&stru_1EC05B940);
  unint64_t v7 = (os_unfair_lock_s *)qword_1EC05B980;
  uint64_t v8 = (void *)&unk_1B8C2E000;
  if (qword_1EC05B980) {
    goto LABEL_91;
  }
  capabilities::abs::logScratchPath((uint64_t *)&__p.st_dev, v6);
  uint64_t v9 = std::string::append((std::string *)&__p, "/abm.scratch", 0xCuLL);
  uintptr_t v10 = (const std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  std::string::size_type v11 = v9->__r_.__value_.__l.__size_;
  v56[0] = v9->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v56 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
  int v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  memset(&v55, 170, sizeof(v55));
  uint64_t v52 = (std::string::value_type *)v10;
  capabilities::abs::logSnapshotPath((uint64_t *)&v55, (capabilities::abs *)v9);
  int v13 = (char *)operator new(0x60uLL);
  __darwin_time_t v14 = (__darwin_time_t)v13;
  *(void *)int v13 = 0;
  *((void *)v13 + 1) = 0;
  *((_DWORD *)v13 + 4) = 0;
  if (v12 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v13 + 1, v10, v11);
  }
  else
  {
    *((void *)v13 + 3) = v10;
    *((void *)v13 + 4) = v11;
    *((_DWORD *)v13 + 10) = v56[0];
    *(_DWORD *)(v13 + 43) = *(_DWORD *)((char *)v56 + 3);
    v13[47] = v12;
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v14 + 48), v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v14 + 48) = v55;
  }
  *(void *)(v14 + 80) = 0;
  *(void *)(v14 + 88) = 0;
  pthread_mutex_lock(&_MergedGlobals);
  unsigned int v15 = off_1EC05B930;
  if (!off_1EC05B930)
  {
    int v16 = (std::__fs::filesystem::path *)operator new(0x60uLL);
    strcpy((char *)v16, "/private/var/wireless/Library/Preferences/com.apple.AppleBasebandManager.Statistics.plist");
    v17.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v17.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__p.st_blksize_t size = v17;
    *(timespec *)__p.st_qspare = v17;
    __p.st_birthtimespeCC_SHA256_CTX c = v17;
    *(timespec *)&__p.st_size_t size = v17;
    __p.st_mtimespeCC_SHA256_CTX c = v17;
    __p.st_ctimespeCC_SHA256_CTX c = v17;
    *(timespec *)&__p.st_uid = v17;
    __p.st_atimespeCC_SHA256_CTX c = v17;
    *(timespec *)&__p.st_dev = v17;
    if (!stat((const char *)v16, &__p) && remove(v16, v18)) {
      unlink((const char *)v16);
    }
    stat v19 = operator new(0x30uLL);
    MEMORY[0x1BA9C7770](v19, @"com.apple.AppleBasebandManager.data", *MEMORY[0x1E4F1D3F0]);
    v19[3] = 0;
    v19[4] = 0;
    *((_DWORD *)v19 + 10) = 0;
    *(void *)&__p.st_dev = v19;
    uint64_t v20 = (atomic_ullong *)operator new(0x20uLL);
    BOOL v21 = (std::__shared_weak_count *)v20;
    int v22 = v12;
    _OWORD v20[2] = 0;
    v20[1] = 0;
    atomic_ullong *v20 = (atomic_ullong)&unk_1F1261508;
    v20[3] = (atomic_ullong)v19;
    *(void *)&__p.st_dev = 0;
    atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v20 + 2, 1uLL, memory_order_relaxed);
    v19[3] = v19;
    v19[4] = v20;
    if (!atomic_fetch_add(v20 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v20 + 16))(v20);
      std::__shared_weak_count::__release_weak(v21);
    }
    uint64_t v23 = *(void *)&__p.st_dev;
    if (*(void *)&__p.st_dev)
    {
      unint64_t v24 = *(std::__shared_weak_count **)(*(void *)&__p.st_dev + 32);
      if (v24) {
        std::__shared_weak_count::__release_weak(v24);
      }
      uint64_t v25 = (void *)MEMORY[0x1BA9C7780](v23);
      operator delete(v25);
    }
    operator delete(v16);
    long long v26 = (std::__shared_weak_count *)off_1EC05B938;
    off_1EC05B930 = v19;
    off_1EC05B938 = v21;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    unsigned int v15 = off_1EC05B930;
    int v12 = v22;
  }
  std::string::size_type v60 = v15;
  long long v61 = (std::__shared_weak_count *)off_1EC05B938;
  if (off_1EC05B938) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EC05B938 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&_MergedGlobals);
  long long v27 = abm::trace::kCurrentSnapshotFolder;
  size_t v28 = strlen(abm::trace::kCurrentSnapshotFolder);
  if (v28 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    int v31 = v12;
    uint64_t v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v32 = v28 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v30 = (void **)operator new(v32 + 1);
    __dst[1] = v29;
    int64_t v59 = v33 | 0x8000000000000000;
    __dst[0] = v30;
    int v12 = v31;
LABEL_44:
    memmove(v30, v27, (size_t)v29);
    *((unsigned char *)v29 + (void)v30) = 0;
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_45;
  }
  HIBYTE(v59) = v28;
  uint64_t v30 = __dst;
  if (v28) {
    goto LABEL_44;
  }
  LOBYTE(__dst[0]) = 0;
  if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_40:
    std::string v57 = v55;
    goto LABEL_46;
  }
LABEL_45:
  std::string::__init_copy_ctor_external(&v57, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
LABEL_46:
  os_unfair_lock_lock((os_unfair_lock_t)v15 + 10);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v63, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v63 = v57;
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v64, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  }
  else {
    std::string v64 = v63;
  }
  if (v59 >= 0) {
    unint64_t v34 = (const char *)__dst;
  }
  else {
    unint64_t v34 = (const char *)__dst[0];
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&__p.st_dev = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *(void *)&__p.st_uid = *((void *)&v64.__r_.__value_.__l + 2);
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v65, v34);
  CFStringRef v35 = (const __CFString *)v65[0];
  CFPropertyListRef v66 = 0;
  ctu::cf::convert_copy();
  CFPropertyListRef v36 = v66;
  v65[1] = v66;
  if (v66)
  {
    CFStringRef v37 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
    CFPreferencesSetValue(v35, v66, *((CFStringRef *)v15 + 1), *((CFStringRef *)v15 + 2), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    CFPreferencesSynchronize(*((CFStringRef *)v15 + 1), *((CFStringRef *)v15 + 2), v37);
    CFRelease(v36);
  }
  MEMORY[0x1BA9C7700](v65);
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    uint64_t v8 = &unk_1B8C2E000;
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v8 = (void *)&unk_1B8C2E000;
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
  }
  operator delete(v64.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_63:
    os_unfair_lock_unlock((os_unfair_lock_t)v15 + 10);
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_70;
  }
LABEL_69:
  operator delete(v63.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock((os_unfair_lock_t)v15 + 10);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_64:
    if ((SHIBYTE(v59) & 0x80000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_65:
    CFTypeRef v38 = v61;
    if (!v61) {
      goto LABEL_74;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(__dst[0]);
  CFTypeRef v38 = v61;
  if (!v61) {
    goto LABEL_74;
  }
LABEL_72:
  if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_74:
  *(void *)&__p.st_dev = v14;
  uint64_t v39 = (std::__shared_weak_count *)operator new(0x20uLL);
  v39->__shared_owners_ = 0;
  p_shared_owners = &v39->__shared_owners_;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12614B8;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  *(void *)&__p.st_dev = 0;
  long long v41 = *(std::__shared_weak_count **)(v14 + 8);
  if (!v41)
  {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)__darwin_time_t v14 = v14;
    *(void *)(v14 + 8) = v39;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v41->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)__darwin_time_t v14 = v14;
    *(void *)(v14 + 8) = v39;
    std::__shared_weak_count::__release_weak(v41);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_79:
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
LABEL_80:
  if (*(void *)&__p.st_dev)
  {
    ServerLogging::~ServerLogging(*(ServerLogging **)&__p.st_dev);
    operator delete(v42);
  }
  *(void *)&__p.st_dev = MEMORY[0x1E4F143A8];
  __p.st_ino = v8[479];
  *(void *)&__p.st_uid = ___ZN13ServerLogging4initEv_block_invoke;
  *(void *)&__p.st_rdev = &__block_descriptor_tmp_0;
  __p.st_atimespec.tv_seCC_SHA256_CTX c = v14;
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 16));
  (*(void (**)(stat *))&__p.st_uid)(&__p);
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 16));
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_84:
      uint64_t v43 = (std::__shared_weak_count *)off_1EC05B988;
      qword_1EC05B980 = v14;
      off_1EC05B988 = v39;
      if (!v43) {
        goto LABEL_90;
      }
LABEL_88:
      if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      goto LABEL_90;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v52);
  uint64_t v43 = (std::__shared_weak_count *)off_1EC05B988;
  qword_1EC05B980 = v14;
  off_1EC05B988 = v39;
  if (v43) {
    goto LABEL_88;
  }
LABEL_90:
  unint64_t v7 = (os_unfair_lock_s *)qword_1EC05B980;
LABEL_91:
  long long v44 = (std::__shared_weak_count *)off_1EC05B988;
  if (off_1EC05B988) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EC05B988 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_1EC05B940);
  uint64_t v45 = *(uint64_t **)(a1 + 32);
  uint64_t v46 = *v45;
  uint64_t v47 = (std::__shared_weak_count *)v45[1];
  if (v47)
  {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    ServerLogging::registerLogServer(v7, v46, v47);
    if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v7, v46, 0);
  }
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  int v48 = *(uint64_t **)(a1 + 32);
  uint64_t v50 = *v48;
  uint64_t v49 = (std::__shared_weak_count *)v48[1];
  uint64_t v53 = v50;
  uint64_t v54 = v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&__p.st_dev = MEMORY[0x1E4F143A8];
  __p.st_ino = v8[479];
  *(void *)&__p.st_uid = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(void *)&__p.st_rdev = &__block_descriptor_tmp_3;
  __p.st_atimespec.tv_seCC_SHA256_CTX c = (__darwin_time_t)&v53;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    unsigned int v51 = v54;
    if (!v54) {
      return;
    }
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    unsigned int v51 = v54;
    if (!v54) {
      return;
    }
  }
  if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
}

void sub_1B8B5C3E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 - 121) < 0)
  {
    operator delete(*(void **)(v36 - 144));
    if (*(char *)(v36 - 153) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v36 - 176));
      __clang_call_terminate(a1);
    }
  }
  else if (*(char *)(v36 - 153) < 0)
  {
    goto LABEL_3;
  }
  __clang_call_terminate(a1);
}

void sub_1B8B5C604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  size_t v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (void *)MEMORY[0x1BA9C7780](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    unint64_t v3 = (void *)MEMORY[0x1BA9C7780](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t __cxx_global_var_init()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &_MergedGlobals, &dword_1B8B00000);
  }
  return result;
}

uint64_t __cxx_global_var_init_10()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &unk_1EC05B940, &dword_1B8B00000);
  }
  return result;
}

uint64_t desense::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  int v6 = operator new(0xD0uLL);
  uint64_t v7 = (uint64_t)v6;
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  timespec v17 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  uintptr_t v10 = (std::__shared_weak_count *)a2[1];
  v15[0] = v9;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  desense::QMICommandDriver::QMICommandDriver((uint64_t)v6, (uint64_t)&v16, (uint64_t)v15);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<desense::QMICommandDriver>::shared_ptr[abi:ne180100]<desense::QMICommandDriver,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  int v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 64))(*a3, v11, v12);
}

void sub_1B8B5CA4C(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8B5CA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t desense::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  desense::CommandDriver::CommandDriver();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)a1 = &unk_1F1261558;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 192), *(os_log_s **)(a1 + 40));
  return a1;
}

void sub_1B8B5CBC4(_Unwind_Exception *a1)
{
  desense::CommandDriver::~CommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B5CBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void desense::CommandDriver::~CommandDriver(void **this)
{
  *this = &unk_1F1261658;
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[20];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this[16] = &unk_1F12616B0;
    unint64_t v3 = (atomic_uint *)this[18];
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    this[16] = &unk_1F12616B0;
    unint64_t v3 = (atomic_uint *)this[18];
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
LABEL_10:
  this[13] = &unk_1F1261770;
  uint64_t v4 = (atomic_uint *)this[15];
  if (v4)
  {
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  *this = &unk_1F12617E0;
  MEMORY[0x1BA9C75B0](this + 1);
  uint64_t v5 = this[12];
  if (v5) {
    dispatch_release(v5);
  }
  int v6 = this[11];
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)this[10];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void desense::QMICommandDriver::~QMICommandDriver(desense::QMICommandDriver *this)
{
  *(void *)this = &unk_1F1261558;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    desense::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
    desense::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint8_t v4[16];

  *(void *)this = &unk_1F1261558;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    desense::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
    desense::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint8_t v5[16];

  *(void *)this = &unk_1F1261558;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v5, 2u);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  desense::CommandDriver::~CommandDriver((void **)this);
  operator delete(v4);
}

void desense::QMICommandDriver::init(desense::QMICommandDriver *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN7desense16QMICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_1;
  v1[4] = this;
  ctu::SharedSynchronizable<desense::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN7desense16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v23, *(Registry **)(v1 + 152));
  uint64_t v2 = v23;
  uint64_t v32 = (char *)v1;
  uint64_t v33 = v23;
  unint64_t v34 = (std::__shared_weak_count *)v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  if (v2)
  {
    char v27 = 3;
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 80);
    if (!v3) {
      goto LABEL_48;
    }
    uint64_t v4 = *(void *)(v1 + 72);
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (!v5) {
      goto LABEL_48;
    }
    int v6 = v5;
    uint64_t v25 = v4;
    long long v26 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
    qmi::ClientRouter::addLocal<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>,std::shared_ptr<BBServerConnection> const&>(v1 + 192, 1, "Desense.1", (uint64_t)&v27, (NSObject **)(v1 + 88), &v25, &v33);
  }
  else
  {
    char v27 = 3;
    uint64_t v7 = *(std::__shared_weak_count **)(v1 + 80);
    if (!v7) {
      goto LABEL_48;
    }
    uint64_t v8 = *(void *)(v1 + 72);
    uint64_t v9 = std::__shared_weak_count::lock(v7);
    if (!v9) {
      goto LABEL_48;
    }
    uintptr_t v10 = v9;
    uint64_t v25 = v8;
    long long v26 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    qmi::ClientRouter::add<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>>(v1 + 192, 1, "Desense.1", (uint64_t)&v27, (NSObject **)(v1 + 88), &v25);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  int v11 = v32 + 192;
  uint64_t v12 = (NSObject **)(v32 + 88);
  if (v33)
  {
    char v27 = 3;
    int v13 = (std::__shared_weak_count *)*((void *)v32 + 10);
    if (v13)
    {
      uint64_t v14 = *((void *)v32 + 9);
      unsigned int v15 = std::__shared_weak_count::lock(v13);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v25 = v14;
        long long v26 = v15;
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v16);
        }
        qmi::ClientRouter::addLocal<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>,std::shared_ptr<BBServerConnection> const&>(v11, 2, "Desense.2", (uint64_t)&v27, v12, &v25, &v33);
        goto LABEL_27;
      }
    }
LABEL_48:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v27 = 3;
  timespec v17 = (std::__shared_weak_count *)*((void *)v32 + 10);
  if (!v17) {
    goto LABEL_48;
  }
  uint64_t v18 = *((void *)v32 + 9);
  stat v19 = std::__shared_weak_count::lock(v17);
  if (!v19) {
    goto LABEL_48;
  }
  uint64_t v20 = v19;
  uint64_t v25 = v18;
  long long v26 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  qmi::ClientRouter::add<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>>(v11, 2, "Desense.2", (uint64_t)&v27, v12, &v25);
LABEL_27:
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  BOOL v21 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  v30[0] = &unk_1F1261870;
  v30[1] = v1;
  int v31 = v30;
  qmi::ClientRouter::setHandler();
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
  }
  else if (v31)
  {
    (*(void (**)(void))(*v31 + 40))();
  }
  v28[0] = &unk_1F12619C0;
  v28[1] = v1;
  long long v29 = v28;
  qmi::ClientRouter::setHandler();
  if (v29 == v28)
  {
    (*(void (**)(void *))(v28[0] + 32))(v28);
  }
  else if (v29)
  {
    (*(void (**)(void))(*v29 + 40))();
  }
  uint64_t v32 = (char *)&unk_1F1261A40;
  uint64_t v33 = v1;
  CFStringRef v35 = (void **)&v32;
  qmi::ClientRouter::setIndHandlerInternal();
  if (v35 == (void **)&v32)
  {
    (*((void (**)(char **))v32 + 4))(&v32);
  }
  else if (v35)
  {
    (*((void (**)(void))*v35 + 5))();
  }
  qmi::ClientRouter::start();
  int v22 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1B8B5D700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  _ZZZN7desense16QMICommandDriver4initEvEUb_EN3__3D1Ev((uint64_t)&a22);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZZZN7desense16QMICommandDriver4initEvEUb_EN3__3D1Ev(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void *std::function<void ()(qmi::SubscriptionType)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void desense::QMICommandDriver::registerFrequencyReporting(uint64_t a1, int a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdE_block_invoke;
  v2[3] = &__block_descriptor_tmp_2;
  v2[4] = a1;
  int v3 = a2;
  ctu::SharedSynchronizable<desense::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v2);
}

void ___ZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdE_block_invoke(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2) {
    int v3 = 2 * (v2 == 1);
  }
  else {
    int v3 = 1;
  }
  uint64_t v4 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Register for Frequency Reporting for subID %d", buf, 8u);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v37 = v5;
  long long v38 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v37);
  int v6 = (char *)*((void *)&v37 + 1);
  uint64_t v7 = (char *)v38;
  uint64_t v8 = (const void **)*((void *)&v37 + 1);
  if (*((void *)&v37 + 1) != (void)v38)
  {
    uint64_t v8 = (const void **)*((void *)&v37 + 1);
    while (*((unsigned __int8 *)*v8 + 8) != 176)
    {
      if (++v8 == (const void **)v38) {
        goto LABEL_14;
      }
    }
  }
  if (v8 == (const void **)v38)
  {
LABEL_14:
    int v11 = operator new(0x10uLL);
    uint64_t v12 = v11;
    v11[4] = 176;
    *(void *)int v11 = &unk_1F1261B20;
    if ((unint64_t)v7 < *((void *)&v38 + 1))
    {
      *(void *)uint64_t v7 = v11;
      uint64_t v13 = (uint64_t)(v7 + 8);
LABEL_27:
      uintptr_t v10 = (char *)v12 + 9;
      *(void *)&long long v38 = v13;
      goto LABEL_28;
    }
    int64_t v14 = v7 - v6;
    uint64_t v15 = (v7 - v6) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v38 + 1) - (void)v6;
    if ((uint64_t)(*((void *)&v38 + 1) - (void)v6) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      stat v19 = operator new(8 * v18);
      uint64_t v20 = &v19[8 * v15];
      BOOL v21 = &v19[8 * v18];
      void *v20 = v12;
      uint64_t v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_25:
        *((void *)&v37 + 1) = v20;
        *(void *)&long long v38 = v13;
        *((void *)&v38 + 1) = v21;
        if (!v6) {
          goto LABEL_27;
        }
LABEL_26:
        operator delete(v6);
        goto LABEL_27;
      }
    }
    else
    {
      stat v19 = 0;
      uint64_t v20 = (void *)(8 * v15);
      BOOL v21 = 0;
      *(void *)(8 * v15) = v12;
      uint64_t v13 = 8 * v15 + 8;
      if (v6 == v7) {
        goto LABEL_25;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_56;
    }
    if ((unint64_t)(v6 - v19) < 0x20) {
      goto LABEL_56;
    }
    unint64_t v29 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    int v31 = &v7[-v30];
    uint64_t v20 = (void *)((char *)v20 - v30);
    uint64_t v32 = &v19[8 * v15 - 16];
    uint64_t v33 = v7 - 16;
    uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      _OWORD *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 4;
    }
    while (v34);
    uint64_t v7 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        uint64_t v36 = *((void *)v7 - 1);
        v7 -= 8;
        *--uint64_t v20 = v36;
      }
      while (v7 != v6);
    }
    int v6 = (char *)*((void *)&v37 + 1);
    *((void *)&v37 + 1) = v20;
    *(void *)&long long v38 = v13;
    *((void *)&v38 + 1) = v21;
    if (!v6) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (!v9) {
    __cxa_bad_cast();
  }
  uintptr_t v10 = v9 + 9;
LABEL_28:
  unsigned char *v10 = 2;
  uint64_t v22 = qmi::ClientRouter::get();
  uint64_t v23 = operator new(0x28uLL);
  void *v23 = v22;
  v23[1] = QMIServiceMsg::create();
  *((_DWORD *)v23 + 4) = 25000;
  v23[3] = 0;
  v23[4] = 0;
  unint64_t v24 = operator new(0x28uLL);
  v24[2] = 0;
  v24[1] = 0;
  void *v24 = &unk_1F1261B88;
  v24[3] = v1;
  *((_DWORD *)v24 + 8) = v3;
  uint64_t v39 = (char *)(v24 + 3);
  uint64_t v40 = (std::__shared_weak_count *)v24;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v43 = 1174405120;
  long long v44 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6EEOS1_OT__block_invoke;
  uint64_t v45 = &__block_descriptor_tmp_70_1;
  uint64_t v46 = (char *)(v24 + 3);
  uint64_t v47 = (std::__shared_weak_count *)v24;
  atomic_fetch_add_explicit(v24 + 1, 1uLL, memory_order_relaxed);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  aBlock[3] = &unk_1E6193DF8;
  aBlock[4] = buf;
  v23[4] = _Block_copy(aBlock);
  uint64_t v25 = v47;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  long long v26 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    char v27 = v23;
    if (!v23) {
      goto LABEL_39;
    }
  }
  else
  {
    char v27 = v23;
    if (!v23) {
      goto LABEL_39;
    }
  }
  if (v27[1]) {
    qmi::Client::send();
  }
  size_t v28 = (const void *)v27[4];
  if (v28) {
    _Block_release(v28);
  }
  operator delete(v27);
LABEL_39:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v37);
}

void sub_1B8B5DE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8B5DF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B5DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::SendProxy::~SendProxy(qmi::ClientRouter::SendProxy *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v1)
  {
    if (v1[1]) {
      qmi::Client::send();
    }
    int v2 = (const void *)v1[4];
    if (v2) {
      _Block_release(v2);
    }
    operator delete(v1);
  }
}

void desense::QMICommandDriver::setFrequencyReportingMode(uint64_t a1, int a2, char a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = desense::asString();
    _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I Set Frequency reporting mode: %s", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v40 = v7;
  long long v41 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v40);
  uint64_t v8 = (char *)*((void *)&v40 + 1);
  uint64_t v9 = (char *)v41;
  uintptr_t v10 = (const void **)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1) != (void)v41)
  {
    uintptr_t v10 = (const void **)*((void *)&v40 + 1);
    while (*((unsigned __int8 *)*v10 + 8) != 176)
    {
      if (++v10 == (const void **)v41) {
        goto LABEL_11;
      }
    }
  }
  if (v10 == (const void **)v41)
  {
LABEL_11:
    uint64_t v13 = operator new(0x10uLL);
    int64_t v14 = v13;
    void v13[4] = 176;
    *(void *)uint64_t v13 = &unk_1F1261BF0;
    if ((unint64_t)v9 < *((void *)&v41 + 1))
    {
      *(void *)uint64_t v9 = v13;
      uint64_t v15 = (uint64_t)(v9 + 8);
LABEL_24:
      uint64_t v12 = (char *)v14 + 9;
      *(void *)&long long v41 = v15;
      goto LABEL_25;
    }
    int64_t v16 = v9 - v8;
    uint64_t v17 = (v9 - v8) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = *((void *)&v41 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v41 + 1) - (void)v8) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v21 = operator new(8 * v20);
      uint64_t v22 = &v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      void *v22 = v14;
      uint64_t v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_22:
        *((void *)&v40 + 1) = v22;
        *(void *)&long long v41 = v15;
        *((void *)&v41 + 1) = v23;
        if (!v8) {
          goto LABEL_24;
        }
LABEL_23:
        operator delete(v8);
        goto LABEL_24;
      }
    }
    else
    {
      BOOL v21 = 0;
      uint64_t v22 = (void *)(8 * v17);
      uint64_t v23 = 0;
      *(void *)(8 * v17) = v14;
      uint64_t v15 = 8 * v17 + 8;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v16 - 8) < 0x58) {
      goto LABEL_56;
    }
    if ((unint64_t)(v8 - v21) < 0x20) {
      goto LABEL_56;
    }
    unint64_t v32 = ((unint64_t)(v16 - 8) >> 3) + 1;
    uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v34 = &v9[-v33];
    uint64_t v22 = (void *)((char *)v22 - v33);
    long long v35 = &v21[8 * v17 - 16];
    uint64_t v36 = v9 - 16;
    uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      _OWORD *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    uint64_t v9 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        uint64_t v39 = *((void *)v9 - 1);
        v9 -= 8;
        *--uint64_t v22 = v39;
      }
      while (v9 != v8);
    }
    uint64_t v8 = (char *)*((void *)&v40 + 1);
    *((void *)&v40 + 1) = v22;
    *(void *)&long long v41 = v15;
    *((void *)&v41 + 1) = v23;
    if (!v8) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v11) {
    __cxa_bad_cast();
  }
  uint64_t v12 = v11 + 9;
LABEL_25:
  unsigned char *v12 = a3;
  if (a2) {
    int v24 = 2 * (a2 == 1);
  }
  else {
    int v24 = 1;
  }
  uint64_t v25 = qmi::ClientRouter::get();
  long long v26 = operator new(0x28uLL);
  void *v26 = v25;
  v26[1] = QMIServiceMsg::create();
  *((_DWORD *)v26 + 4) = 25000;
  v26[3] = 0;
  v26[4] = 0;
  char v27 = operator new(0x28uLL);
  void v27[2] = 0;
  v27[1] = 0;
  void *v27 = &unk_1F1261C58;
  void v27[3] = a1;
  *((_DWORD *)v27 + 8) = v24;
  char v42 = (char *)(v27 + 3);
  uint64_t v43 = (std::__shared_weak_count *)v27;
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 1174405120;
  uint64_t v46 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN7desense16QMICommandDriver25setFrequencyReportingModeEN4coex5SubIdENS3_22FrequencyReportingModeEE3__1EEOS1_OT__block_invoke;
  uint64_t v47 = &__block_descriptor_tmp_73_4;
  uint64_t v48 = (char *)(v27 + 3);
  uint64_t v49 = (std::__shared_weak_count *)v27;
  atomic_fetch_add_explicit(v27 + 1, 1uLL, memory_order_relaxed);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  aBlock[3] = &unk_1E6193DF8;
  aBlock[4] = &buf;
  v26[4] = _Block_copy(aBlock);
  size_t v28 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  unint64_t v29 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v30 = v26;
    if (!v26) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v30 = v26;
    if (!v26) {
      goto LABEL_39;
    }
  }
  if (v30[1]) {
    qmi::Client::send();
  }
  int v31 = (const void *)v30[4];
  if (v31) {
    _Block_release(v31);
  }
  operator delete(v30);
LABEL_39:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v40);
}

void sub_1B8B5E4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8B5E50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B5E520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void desense::QMICommandDriver::bindSubscription_sync(uint64_t a1, int a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v36 = v4;
  long long v37 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v36);
  long long v5 = (char *)*((void *)&v36 + 1);
  int v6 = (char *)v37;
  long long v7 = (const void **)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1) != (void)v37)
  {
    long long v7 = (const void **)*((void *)&v36 + 1);
    while (*((unsigned char *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v37) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == (const void **)v37)
  {
LABEL_9:
    uintptr_t v10 = operator new(0x10uLL);
    int v11 = v10;
    v10[4] = 1;
    *(void *)uintptr_t v10 = &unk_1F1261CC0;
    if ((unint64_t)v6 < *((void *)&v37 + 1))
    {
      *(void *)int v6 = v10;
      uint64_t v12 = (uint64_t)(v6 + 8);
LABEL_22:
      uint64_t v9 = (BOOL *)v11 + 9;
      *(void *)&long long v37 = v12;
      goto LABEL_23;
    }
    int64_t v13 = v6 - v5;
    uint64_t v14 = (v6 - v5) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = *((void *)&v37 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v37 + 1) - (void)v5) >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v18 = operator new(8 * v17);
      uint64_t v19 = &v18[8 * v14];
      unint64_t v20 = &v18[8 * v17];
      void *v19 = v11;
      uint64_t v12 = (uint64_t)(v19 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((void *)&v36 + 1) = v19;
        *(void *)&long long v37 = v12;
        *((void *)&v37 + 1) = v20;
        if (!v5) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v19 = (void *)(8 * v14);
      unint64_t v20 = 0;
      *(void *)(8 * v14) = v11;
      uint64_t v12 = 8 * v14 + 8;
      if (v5 == v6) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v13 - 8) < 0x58) {
      goto LABEL_51;
    }
    if ((unint64_t)(v5 - v18) < 0x20) {
      goto LABEL_51;
    }
    unint64_t v28 = ((unint64_t)(v13 - 8) >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v30 = &v6[-v29];
    uint64_t v19 = (void *)((char *)v19 - v29);
    int v31 = &v18[8 * v14 - 16];
    unint64_t v32 = v6 - 16;
    uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      _OWORD *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 4;
    }
    while (v33);
    int v6 = v30;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_51:
      do
      {
        uint64_t v35 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v19 = v35;
      }
      while (v6 != v5);
    }
    long long v5 = (char *)*((void *)&v36 + 1);
    *((void *)&v36 + 1) = v19;
    *(void *)&long long v37 = v12;
    *((void *)&v37 + 1) = v20;
    if (!v5) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v8) {
    __cxa_bad_cast();
  }
  uint64_t v9 = (BOOL *)(v8 + 9);
LABEL_23:
  BOOL *v9 = a2 == 2;
  uint64_t v21 = qmi::ClientRouter::get();
  uint64_t v22 = operator new(0x28uLL);
  void *v22 = v21;
  v22[1] = QMIServiceMsg::create();
  *((_DWORD *)v22 + 4) = 25000;
  v22[3] = 0;
  v22[4] = 0;
  uint64_t v23 = operator new(0x28uLL);
  void v23[2] = 0;
  v23[1] = 0;
  void *v23 = &unk_1F1261D28;
  v23[3] = a1;
  *((_DWORD *)v23 + 8) = a2;
  long long v40 = (char *)(v23 + 3);
  long long v41 = (std::__shared_weak_count *)v23;
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 1174405120;
  void v38[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN7desense16QMICommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
  v38[3] = &__block_descriptor_tmp_75_2;
  v38[4] = v23 + 3;
  uint64_t v39 = (std::__shared_weak_count *)v23;
  atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas3abm16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6193E20;
  aBlock[4] = v38;
  v22[4] = _Block_copy(aBlock);
  int v24 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    long long v26 = v22;
    if (!v22) {
      goto LABEL_34;
    }
  }
  else
  {
    long long v26 = v22;
    if (!v22) {
      goto LABEL_34;
    }
  }
  if (v26[1]) {
    qmi::Client::send();
  }
  char v27 = (const void *)v26[4];
  if (v27) {
    _Block_release(v27);
  }
  operator delete(v26);
LABEL_34:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v36);
}

void sub_1B8B5E9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  qmi::ClientRouter::SendProxy::~SendProxy((qmi::ClientRouter::SendProxy *)&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B8B5E9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  operator delete(v11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B8B5EA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B5EA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void desense::QMICommandDriver::addMultipleFrequenciesToMap_sync(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(a1, *(void *)v3, *(_DWORD *)(v3 + 8), 0, a3);
      v3 += 16;
    }
    while (v3 != v4);
  }
}

uint64_t *std::list<std::pair<unsigned long long,unsigned int>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    int v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        long long v5 = (uint64_t *)v2[1];
        operator delete(v2);
        int v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    long long v5 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(void *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    long long v5 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(void *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_6(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    long long v5 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(void *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_7(uint64_t a1, uint64_t a2)
{
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    long long v5 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(void *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_9(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    long long v5 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(void *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

uint64_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(desense::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)desense::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F12616B0;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F1261770;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F12616B0;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F1261770;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void *ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F12617E0;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F12617E0;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8B5F2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B8B5F308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<desense::QMICommandDriver>::shared_ptr[abi:ne180100]<desense::QMICommandDriver,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1261820;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8B5F434(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver*)#1}::operator() const(desense::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8B5F45C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<desense::QMICommandDriver *,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver *)#1},std::allocator<desense::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<desense::QMICommandDriver *,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver *)#1},std::allocator<desense::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<desense::QMICommandDriver *,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver *)#1},std::allocator<desense::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEEN"
                     "St3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16QMIComman"
                                "dDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver*)#1}::operator() const(desense::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void qmi::ClientRouter::addLocal<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>,std::shared_ptr<BBServerConnection> const&>(int a1, int a2, char *__s, uint64_t a4, NSObject **a5, uint64_t *a6, uint64_t *a7)
{
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v37 = v11;
  long long v36 = v11;
  size_t v12 = strlen(__s);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int64_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v22 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v22 = v12 | 7;
    }
    uint64_t v23 = v22 + 1;
    uint64_t v14 = (void **)operator new(v22 + 1);
    __dst[1] = v13;
    unint64_t v35 = v23 | 0x8000000000000000;
    __dst[0] = v14;
  }
  else
  {
    HIBYTE(v35) = v12;
    uint64_t v14 = __dst;
    if (!v12)
    {
      LOBYTE(__dst[0]) = 0;
      unint64_t v15 = *a5;
      dispatch_object_t object = v15;
      if (!v15) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  memcpy(v14, __s, (size_t)v13);
  *((unsigned char *)v13 + (void)v14) = 0;
  unint64_t v15 = *a5;
  dispatch_object_t object = v15;
  if (v15) {
LABEL_5:
  }
    dispatch_retain(v15);
LABEL_6:
  char v32 = 12;
  uint64_t v30 = 0;
  strcpy((char *)__p, "registration");
  uint64_t v29 = 0;
  uint64_t v16 = (std::__shared_weak_count *)a6[1];
  if (!v16)
  {
    *a6 = 0;
    a6[1] = 0;
    goto LABEL_20;
  }
  unint64_t v17 = std::__shared_weak_count::lock(v16);
  if (!v17)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v21 = (std::__shared_weak_count *)a6[1];
    *a6 = 0;
    a6[1] = 0;
    if (!v21) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  unint64_t v18 = (atomic_ullong *)v17;
  uint64_t v19 = *a6;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v29 = v19;
  uint64_t v30 = v17;
  unint64_t v20 = (std::__shared_weak_count *)a6[1];
  *a6 = 0;
  a6[1] = 0;
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (!atomic_fetch_add(v18 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(atomic_ullong *))(*v18 + 16))(v18);
    uint64_t v21 = (std::__shared_weak_count *)v18;
LABEL_19:
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_20:
  int v24 = (std::__shared_weak_count *)a7[1];
  uint64_t v27 = *a7;
  unint64_t v28 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(__dst[0]);
  }
  v25[0] = 0;
  v25[1] = 0;
  long long v26 = v37;
  long long v37 = 0uLL;
  qmi::ClientRouter::addClient();
  qmi::Client::~Client((qmi::Client *)v25);
  qmi::ClientRouter::get();
  qmi::Client::~Client((qmi::Client *)&v36);
}

void sub_1B8B5F828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::Client::~Client((qmi::Client *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B5F84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,dispatch_object_t object,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a17)
  {
    std::__shared_weak_count::__release_weak(a17);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      int v31 = object;
      if (!object) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  int v31 = object;
  if (!object)
  {
LABEL_4:
    if (a30 < 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  dispatch_release(v31);
  if (a30 < 0)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(a1);
  }
LABEL_9:
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::add<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>>(int a1, int a2, char *__s, uint64_t a4, NSObject **a5, uint64_t *a6)
{
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v9;
  long long v32 = v9;
  size_t v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v20 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v20 = v10 | 7;
    }
    uint64_t v21 = v20 + 1;
    size_t v12 = (void **)operator new(v20 + 1);
    __dst[1] = v11;
    unint64_t v30 = v21 | 0x8000000000000000;
    __dst[0] = v12;
  }
  else
  {
    HIBYTE(v30) = v10;
    size_t v12 = __dst;
    if (!v10)
    {
      LOBYTE(__dst[0]) = 0;
      int64_t v13 = *a5;
      dispatch_object_t object = v13;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  memcpy(v12, __s, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  int64_t v13 = *a5;
  dispatch_object_t object = v13;
  if (v13) {
LABEL_5:
  }
    dispatch_retain(v13);
LABEL_6:
  char v27 = 12;
  uint64_t v25 = 0;
  strcpy((char *)__p, "registration");
  uint64_t v24 = 0;
  uint64_t v14 = (std::__shared_weak_count *)a6[1];
  if (!v14)
  {
    *a6 = 0;
    a6[1] = 0;
    goto LABEL_20;
  }
  unint64_t v15 = std::__shared_weak_count::lock(v14);
  if (!v15)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v19 = (std::__shared_weak_count *)a6[1];
    *a6 = 0;
    a6[1] = 0;
    if (!v19) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v16 = (atomic_ullong *)v15;
  uint64_t v17 = *a6;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v24 = v17;
  uint64_t v25 = v15;
  unint64_t v18 = (std::__shared_weak_count *)a6[1];
  *a6 = 0;
  a6[1] = 0;
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (!atomic_fetch_add(v16 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(atomic_ullong *))(*v16 + 16))(v16);
    uint64_t v19 = (std::__shared_weak_count *)v16;
LABEL_19:
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_20:
  qmi::Client::createWithQueue();
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst[0]);
  }
  v22[0] = 0;
  v22[1] = 0;
  long long v23 = v32;
  long long v32 = 0uLL;
  qmi::ClientRouter::addClient();
  qmi::Client::~Client((qmi::Client *)v22);
  qmi::ClientRouter::get();
  qmi::Client::~Client((qmi::Client *)&v31);
}

void sub_1B8B5FB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::Client::~Client((qmi::Client *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B5FB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v29 = object;
      if (!object) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  uint64_t v29 = object;
  if (!object)
  {
LABEL_4:
    if (a28 < 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  dispatch_release(v29);
  if (a28 < 0)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

void *_ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE7__cloneEv(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_1F1261870;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE7__cloneEPNS0_6__baseIS9_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1261870;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEEclEOS8_(uint64_t a1, int *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *a2;
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Binding started for type %d", buf, 8u);
  }
  desense::QMICommandDriver::bindSubscription_sync(v2, v3);
  size_t v5 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Desense started for type %d", buf, 8u);
  }
  uint64_t v6 = *(uint64_t ****)(v2 + 112);
  if (v3 == 2) {
    int v7 = 1;
  }
  else {
    int v7 = 2;
  }
  if (v3 == 1) {
    int v7 = 0;
  }
  int v35 = v7;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v47 = v8;
  long long v48 = v8;
  long long v45 = v8;
  long long v46 = v8;
  long long v43 = v8;
  long long v44 = v8;
  long long v41 = v8;
  long long v42 = v8;
  long long v40 = v8;
  *(_OWORD *)long long buf = v8;
  long long v9 = (pthread_mutex_t *)v6[3];
  *(void *)&long long v49 = 10;
  *((void *)&v49 + 1) = buf;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = v9;
  pthread_mutex_lock(v9);
  size_t v10 = v6[1];
  if (!v10)
  {
    unint64_t v15 = 0;
    size_t v12 = *v6;
    goto LABEL_22;
  }
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v10 + 2, memory_order_acquire);
  size_t v12 = *v6;
  if (explicit == 1)
  {
    int64_t v13 = *v12;
    uint64_t v14 = (uint64_t)v6[2];
    if ((uint64_t *)v14 == *v12)
    {
      uint64_t v14 = v13[1];
      *(void *)&long long v36 = v14;
      if (v13 == (uint64_t *)v14)
      {
LABEL_19:
        void v6[2] = (uint64_t **)v14;
        goto LABEL_20;
      }
    }
    else
    {
      *(void *)&long long v36 = v6[2];
    }
    uint64_t v16 = *(void *)(v14 + 16);
    if (*(unsigned char *)(v16 + 24))
    {
      uint64_t v14 = *(void *)(v14 + 8);
    }
    else
    {
      uint64_t v14 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(v13, (int *)(v16 + 64), (uint64_t **)&v36);
      size_t v12 = *v6;
    }
    goto LABEL_19;
  }
LABEL_20:
  unint64_t v15 = (atomic_uint *)v6[1];
  if (v15) {
    atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
  }
LABEL_22:
  pthread_mutex_unlock(*((pthread_mutex_t **)&v50 + 1));
  unint64_t v17 = *((void *)&v49 + 1);
  if (*((void *)&v49 + 1))
  {
    if ((uint64_t)v50 - 1 >= 0)
    {
      unint64_t v18 = *((void *)&v49 + 1) + 16 * v50;
      do
      {
        uint64_t v19 = *(atomic_uint **)(v18 - 8);
        if (v19)
        {
          if (atomic_fetch_add(v19 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v19 + 16))(v19);
            if (atomic_fetch_add(v19 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v19 + 24))(v19);
            }
          }
        }
        v18 -= 16;
      }
      while (v18 > v17);
    }
    if ((unint64_t)v49 >= 0xB) {
      operator delete(*((void **)&v49 + 1));
    }
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v20;
  long long v52 = v20;
  long long v53 = v20;
  long long v50 = v20;
  long long v51 = v20;
  long long v48 = v20;
  long long v49 = v20;
  long long v46 = v20;
  long long v47 = v20;
  long long v44 = v20;
  long long v45 = v20;
  long long v42 = v20;
  long long v43 = v20;
  long long v40 = v20;
  long long v41 = v20;
  buf[0] = 0;
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v55 = 10;
  uint64_t v56 = &buf[8];
  uint64_t v57 = 0;
  uint64_t v58 = &v35;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v21 = (uint64_t)*v12;
  *(void *)&long long v33 = (*v12)[1];
  *((void *)&v33 + 1) = v21;
  *(void *)&long long v34 = buf;
  *((void *)&v34 + 1) = v21;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v33);
  v32[0] = *v12;
  v32[1] = v32[0];
  v32[2] = buf;
  v32[3] = v32[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v32);
  long long v36 = v33;
  long long v37 = v34;
  uint64_t v22 = v32[0];
  uint64_t v23 = v33;
  if ((void)v33 != v32[0])
  {
    uint64_t v24 = (unsigned char *)v37;
    if (!*(unsigned char *)v37)
    {
      uint64_t v25 = *(void *)(*(void *)(v33 + 16) + 32);
      uint64_t v26 = *(void *)(v25 + 24);
      if (!v26)
      {
        std::runtime_error::runtime_error(&v38, "call to empty boost::function");
        v38.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
        boost::throw_exception<boost::bad_function_call>(&v38);
      }
      (*(void (**)(uint64_t, void))((v26 & 0xFFFFFFFFFFFFFFFELL) + 8))(v25 + 32, **(unsigned int **)(v37 + 272));
      if (!*v24) {
        unsigned char *v24 = 1;
      }
    }
    *(void *)&long long v36 = *(void *)(v23 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v36);
    uint64_t v27 = v37;
    if (*(unsigned char *)v37) {
      *(unsigned char *)long long v37 = 0;
    }
    for (uint64_t i = v36; (void)v36 != v22; uint64_t i = v36)
    {
      uint64_t v29 = *(void *)(*(void *)(i + 16) + 32);
      uint64_t v30 = *(void *)(v29 + 24);
      if (!v30)
      {
        std::runtime_error::runtime_error(&v38, "call to empty boost::function");
        v38.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
        boost::throw_exception<boost::bad_function_call>(&v38);
      }
      (*(void (**)(uint64_t, void))((v30 & 0xFFFFFFFFFFFFFFFELL) + 8))(v29 + 32, **(unsigned int **)(v27 + 272));
      if (!*(unsigned char *)v27) {
        *(unsigned char *)uint64_t v27 = 1;
      }
      *(void *)&long long v36 = *(void *)(i + 8);
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v36);
      uint64_t v27 = v37;
      if (*(unsigned char *)v37) {
        *(unsigned char *)long long v37 = 0;
      }
    }
  }
  if (HIDWORD(v59) > v59) {
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v6, v21);
  }
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
  if (v15 && atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
    if (atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
    }
  }
  return result;
}

void sub_1B8B601FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,unint64_t a45,char *__p,uint64_t a47,pthread_mutex_t *a48)
{
  pthread_mutex_unlock(a48);
  if (__p)
  {
    if (a47 - 1 >= 0)
    {
      long long v49 = &__p[16 * a47];
      do
      {
        long long v50 = (atomic_uint *)*((void *)v49 - 1);
        if (v50)
        {
          if (atomic_fetch_add(v50 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v50 + 16))(v50);
            if (atomic_fetch_add(v50 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v50 + 24))(v50);
            }
          }
        }
        v49 -= 16;
      }
      while (v49 > __p);
    }
    if (a45 >= 0xB)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1B8B602B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::runtime_error a23)
{
  std::runtime_error::~runtime_error(&a23);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a19 + 16));
    __cxa_rethrow();
  }
  if (v28[71] > v28[70]) {
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v23, v25);
  }
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)v28);
  if (v24 && atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
    if (atomic_fetch_add(v24 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v24 + 24))(v24);
    }
  }
  JUMPOUT(0x1B8B604D8);
}

void sub_1B8B60318(uint64_t a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    if (v6[71] > v6[70]) {
      boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v2, v4);
    }
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)v6);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    JUMPOUT(0x1B8B604D8);
  }
  JUMPOUT(0x1B8B602E8);
}

void sub_1B8B6034C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,unint64_t a45,char *a46,uint64_t a47)
{
  if (a46)
  {
    if (a47 - 1 >= 0)
    {
      long long v48 = &a46[16 * a47];
      do
      {
        long long v49 = (atomic_uint *)*((void *)v48 - 1);
        if (v49)
        {
          if (atomic_fetch_add(v49 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v49 + 16))(v49);
            if (atomic_fetch_add(v49 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v49 + 24))(v49);
            }
          }
        }
        v48 -= 16;
      }
      while (v48 > a46);
    }
    if (a45 >= 0xB)
    {
      operator delete(a46);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1B8B604D0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B8B604D8);
  }
  __clang_call_terminate(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN7desense16QMICommandDriver4initEvEUb_E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN7desense16QMICommandDriver4initEvEUb_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN7desense16QMICommandDriver4initEvEUb_E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7desense16QMICommandDriver4initEvEUb_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE11target_typeEv()
{
  return &_ZTIZZN7desense16QMICommandDriver4initEvEUb_E3__0;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    uint64_t v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    uint64_t v24 = (uint64_t *)v23[1];
    uint64_t v25 = (uint64_t **)(a1 + 4);
    size_t v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  size_t v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      size_t v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        unint64_t v15 = (uint64_t *)v11;
      }
      else {
        unint64_t v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        unint64_t v15 = (uint64_t *)v11;
        size_t v10 = (uint64_t *)v11;
      }
      else
      {
        size_t v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  uint64_t v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  long long v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    uint64_t v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        uint64_t v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        long long v20 = (uint64_t **)v21;
        uint64_t v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    unint64_t v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      long long v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      long long v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      uint64_t v26 = v20;
    }
    if (v29) {
      long long v31 = v28;
    }
    else {
      long long v20 = v26;
    }
    uint64_t v26 = *v31;
  }
  while (*v31);
LABEL_42:
  uint64_t v24 = (uint64_t *)v19[1];
  long long v32 = a1;
  if (v20 != v7) {
    long long v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    long long v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        std::runtime_error v38 = v37;
        long long v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      long long v41 = v10;
      do
      {
        std::runtime_error v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        long long v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      uint64_t v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          int v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          int v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      int v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  int v7 = (uint64_t **)v6;
LABEL_75:
  uint64_t v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  *int v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  long long v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    long long v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  long long v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  long long v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    int v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        size_t v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            BOOL v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 280);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        BOOL v18 = *(_DWORD **)(v7 + 288);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 288) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        int v17 = *(_DWORD **)(v7 + 288);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 288) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 284);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          uint64_t v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        unint64_t v28 = *(_DWORD **)(v27 + 288);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 288) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              long long v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_1B8B60ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8B60EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8B610C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  long long v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  v68[4] = v4;
  v68[5] = v4;
  v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  stat __p = v68;
  uint64_t v71 = 0;
  unsigned int v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    int v8 = *v3;
    uint64_t v9 = **v3;
    CFPropertyListRef v66 = v7;
    size_t v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    void *v10 = v10;
    v10[1] = v10;
    void v10[2] = 0;
    char v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      do
      {
        int v15 = operator new(0x20uLL);
        void v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          uint64_t v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        void *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        void *v11 = v15;
        void v11[2] = ++v13;
        char v12 = (void *)v12[1];
        uint64_t v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    std::string v64 = v3;
    uint64_t v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    v11[4] = 0;
    BOOL v18 = v11 + 4;
    void v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      uint64_t v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        uint64_t v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          void v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          uint64_t v27 = v21;
          if (v25)
          {
            do
            {
              unint64_t v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              unint64_t v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              uint64_t v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              long long v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              long long v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              uint64_t v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              long long v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              uint64_t v22 = v33;
            }
            while (!v29);
          }
          uint64_t v21 = v31;
          uint64_t v22 = v33;
        }
        while (v31 != v20);
      }
      uint64_t *v66 = (uint64_t)v11;
      v66[1] = 0;
      long long v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      void *v53 = &unk_1F1261950;
      void v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      long long v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      uint64_t v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      uint64_t *v55 = (uint64_t)&unk_1F12618F0;
      v55[2] = (uint64_t)v66;
      uint64_t v56 = (atomic_uint *)v64[1];
      char *v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      long long v35 = (void *)*v18;
      long long v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            long long v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            long long v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            long long v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            v47[2] = v43;
            void *v42 = v47;
            long long v49 = (void *)**v17;
            if (v49)
            {
              _DWORD *v17 = v49;
              long long v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          long long v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                long long v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              long long v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              long long v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      long long v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          long long v51 = v50;
          long long v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          long long v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  uint64_t v57 = (uint64_t **)*v3;
  uint64_t v58 = (uint64_t *)**v3;
  uint64_t v59 = (uint64_t *)v58[1];
  uint64_t v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        uint64_t v59 = (uint64_t *)v59[1];
        uint64_t v67 = v59;
        uint64_t v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      uint64_t v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      uint64_t v57 = (uint64_t **)*v3;
      uint64_t v67 = v59;
      uint64_t v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  uint64_t v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      unint64_t v62 = (char *)__p + 16 * v71;
      do
      {
        std::string v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8B61774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      long long v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          long long v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    void v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    void v8[5] = v3;
    void v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    stat __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1B8B621CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *_ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F12619C0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE7__cloneEPNS0_6__baseIS9_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F12619C0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEEclEOS8_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *a2;
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Client stopped for type %d", (uint8_t *)v5, 8u);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN7desense16QMICommandDriver4initEvEUb_E3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN7desense16QMICommandDriver4initEvEUb_E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN7desense16QMICommandDriver4initEvEUb_E3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7desense16QMICommandDriver4initEvEUb_E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE11target_typeEv()
{
  return &_ZTIZZN7desense16QMICommandDriver4initEvEUb_E3__1;
}

void *_ZNKSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1261A40;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EE7__cloneEPNS0_6__baseISH_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1261A40;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3$_4EEvtOT_EUlNS_16Su"
                     "bscriptionTypeERK13QMIServiceMsgE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3$_4EEvtOT"
                                "_EUlNS_16SubscriptionTypeERK13QMIServiceMsgE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3$_4EEvtOT_EUlNS_16SubscriptionTypeERK13QMIServiceMsgE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3$_4EEvtOT_EUlNS_16SubscriptionTypeERK13QMIServiceMsgE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EE11target_typeEv()
{
  return &_ZTIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS_16SubscriptionTypeERK13QMIServiceMsgE_;
}

void ctu::SharedSynchronizable<desense::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7desense13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F1261AC8;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  size_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN7desense13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7desense13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7desense13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyRegistering>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyRegistering>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyRegistering>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F1261B20;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *v2;
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    uint64_t v5 = v3[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109378;
      v7[1] = v4;
      __int16 v8 = 2080;
      uint64_t v9 = qmi::asString();
      _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#N Could not register with stop report: 0x%x (%s)", (uint8_t *)v7, 0x12u);
    }
  }
  else
  {
    uint64_t v6 = *(void (**)(void))(*v3 + 48);
    v6();
  }
}

uint64_t __copy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6NS_9allocatorIS5_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1261B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6NS_9allocatorIS5_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1261B88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B8B62A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyReporting>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyReporting>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyReporting>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F1261BF0;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN7desense16QMICommandDriver25setFrequencyReportingModeEN4coex5SubIdENS3_22FrequencyReportingModeEE3__1EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(_DWORD **)(a1 + 32);
  uint64_t v4 = *(void *)v3;
  int v5 = *(_DWORD *)(a2 + 4);
  uint64_t v6 = *(NSObject **)(*(void *)v3 + 40);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v5;
      LOWORD(v17) = 2080;
      *(void *)((char *)&v17 + 2) = qmi::asString();
      _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#N Could not set frequency reporting mode: 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    if (v7)
    {
      int v8 = v3[2];
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I Received frequency report response for slot %d", buf, 8u);
    }
    int v9 = v3[2];
    if (v9 == 2) {
      int v10 = 1;
    }
    else {
      int v10 = 2;
    }
    if (v9 == 1) {
      int v11 = 0;
    }
    else {
      int v11 = v10;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    *(void *)long long buf = *(void *)a2;
    *(void *)&long long v17 = v12;
    uint64_t v13 = *(void *)(a2 + 16);
    *((void *)&v17 + 1) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)buf);
    uint64_t v14 = *(void *)buf;
    long long v15 = v17;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v14);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    desense::QMICommandDriver::processFrequencyInd_sync(v4, v11, (qmi::MessageBase *)&v14);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v14);
  }
}

void sub_1B8B62C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B62CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B62CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c129_ZTSNSt3__110shared_ptrIZN7desense16QMICommandDriver25setFrequencyReportingModeEN4coex5SubIdENS1_22FrequencyReportingModeEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c129_ZTSNSt3__110shared_ptrIZN7desense16QMICommandDriver25setFrequencyReportingModeEN4coex5SubIdENS1_22FrequencyReportingModeEE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<desense::QMICommandDriver::setFrequencyReportingMode(coex::SubId,desense::FrequencyReportingMode)::$_1,std::allocator<desense::QMICommandDriver::setFrequencyReportingMode(coex::SubId,desense::FrequencyReportingMode)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1261C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<desense::QMICommandDriver::setFrequencyReportingMode(coex::SubId,desense::FrequencyReportingMode)::$_1,std::allocator<desense::QMICommandDriver::setFrequencyReportingMode(coex::SubId,desense::FrequencyReportingMode)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1261C58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::SubType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::SubType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::SubType>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F1261CC0;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN7desense16QMICommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
    int v4 = v3[8];
    uint64_t v5 = *(NSObject **)(*(void *)v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = qmi::asString();
      int v7 = *(_DWORD *)(a2 + 4);
      v8[0] = 67109634;
      v8[1] = v4;
      __int16 v9 = 2080;
      uint64_t v10 = v6;
      __int16 v11 = 1024;
      int v12 = v7;
      _os_log_error_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_ERROR, "Error binding subscription to type %d : %s (0x%x)", (uint8_t *)v8, 0x18u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN7desense16QMICommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN7desense16QMICommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<desense::QMICommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<desense::QMICommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1261D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<desense::QMICommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<desense::QMICommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1261D28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas3abm16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B63124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B63138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B63164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288)) {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    uint64_t v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    uint64_t v24 = (uint64_t *)v23[1];
    long long v25 = (uint64_t **)(a1 + 4);
    uint64_t v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  uint64_t v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        long long v15 = (uint64_t *)v11;
      }
      else {
        long long v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        long long v15 = (uint64_t *)v11;
        uint64_t v10 = (uint64_t *)v11;
      }
      else
      {
        uint64_t v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  unint64_t v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  unint64_t v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    uint64_t v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        uint64_t v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        unint64_t v20 = (uint64_t **)v21;
        uint64_t v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    unint64_t v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      long long v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      long long v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      uint64_t v26 = v20;
    }
    if (v29) {
      long long v31 = v28;
    }
    else {
      unint64_t v20 = v26;
    }
    uint64_t v26 = *v31;
  }
  while (*v31);
LABEL_42:
  uint64_t v24 = (uint64_t *)v19[1];
  long long v32 = a1;
  if (v20 != v7) {
    long long v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    long long v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        long long v38 = v37;
        long long v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      long long v41 = v10;
      do
      {
        long long v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        long long v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      long long v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          int v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          int v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      int v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  int v7 = (uint64_t **)v6;
LABEL_75:
  long long v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  *int v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  long long v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    long long v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  int v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  long long v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  v68[4] = v4;
  v68[5] = v4;
  v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  stat __p = v68;
  uint64_t v71 = 0;
  unsigned int v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    int v7 = (uint64_t *)operator new(0x20uLL);
    int v8 = *v3;
    uint64_t v9 = **v3;
    CFPropertyListRef v66 = v7;
    uint64_t v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    void *v10 = v10;
    v10[1] = v10;
    void v10[2] = 0;
    int v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      BOOL v14 = v10;
      do
      {
        long long v15 = operator new(0x20uLL);
        void v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          BOOL v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        void *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        void *v11 = v15;
        void v11[2] = ++v13;
        int v12 = (void *)v12[1];
        BOOL v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    std::string v64 = v3;
    uint64_t v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    v11[4] = 0;
    BOOL v18 = v11 + 4;
    void v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      uint64_t v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        int v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          void v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          int v27 = v21;
          if (v25)
          {
            do
            {
              unint64_t v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              unint64_t v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              int v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              long long v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              long long v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              uint64_t v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              int v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              int v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              int v22 = v33;
            }
            while (!v29);
          }
          uint64_t v21 = v31;
          int v22 = v33;
        }
        while (v31 != v20);
      }
      uint64_t *v66 = (uint64_t)v11;
      v66[1] = 0;
      long long v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      void *v53 = &unk_1F1261DD8;
      void v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      uint64_t v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      uint64_t v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      uint64_t *v55 = (uint64_t)&unk_1F1261D78;
      v55[2] = (uint64_t)v66;
      uint64_t v56 = (atomic_uint *)v64[1];
      char *v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      int v35 = (void *)*v18;
      int v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            int v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            int v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            uint64_t v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            long long v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            v47[2] = v43;
            void *v42 = v47;
            long long v49 = (void *)**v17;
            if (v49)
            {
              _DWORD *v17 = v49;
              long long v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          uint64_t v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                uint64_t v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              uint64_t v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              uint64_t v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        uint64_t v42 = v36 + 1;
      }
      else {
        uint64_t v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      long long v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          long long v51 = v50;
          long long v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          long long v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  uint64_t v57 = (uint64_t **)*v3;
  uint64_t v58 = (uint64_t *)**v3;
  uint64_t v59 = (uint64_t *)v58[1];
  uint64_t v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        uint64_t v59 = (uint64_t *)v59[1];
        uint64_t v67 = v59;
        uint64_t v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      uint64_t v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      uint64_t v57 = (uint64_t **)*v3;
      uint64_t v67 = v59;
      uint64_t v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  uint64_t v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      unint64_t v62 = (char *)__p + 16 * v71;
      do
      {
        std::string v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8B63CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t abm::asString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a2 + 23) = 7;
  strcpy((char *)a2, "Invalid");
  if (result <= 2)
  {
    *(unsigned char *)(a2 + 23) = 4;
    *(_DWORD *)a2 = (result << 16) + 1378894420;
    *(unsigned char *)(a2 + 4) = 0;
  }
  return result;
}

{
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a2 + 23) = 7;
  strcpy((char *)a2, "Invalid");
  switch((int)result)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "1000msec");
      break;
    case 1:
      *(_DWORD *)(a2 + 3) = 1667593069;
      *(_DWORD *)a2 = 1831874609;
      break;
    case 2:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "1msec");
      break;
    case 10:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "ModemSkin");
      break;
    case 11:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "TangierBG");
      break;
    case 12:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "TangierCG");
      break;
    case 13:
      *(unsigned char *)(a2 + 23) = 3;
      *(_DWORD *)a2 = 5915974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t abm::convertBasebandCPMSPowerBudgetScale(void *a1)
{
  int v1 = *((char *)a1 + 23);
  if (v1 >= 0) {
    size_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v2 = a1[1];
  }
  unsigned __int8 v3 = -1;
  switch(v2)
  {
    case 3uLL:
      if (v1 < 0) {
        a1 = (void *)*a1;
      }
      if (!memcmp(a1, "FEZ", v2)) {
        return 13;
      }
      else {
        return -1;
      }
    case 5uLL:
      uint64_t v5 = (void *)*a1;
      if (v1 >= 0) {
        uint64_t v5 = a1;
      }
      int v6 = *(_DWORD *)v5;
      int v7 = *((unsigned __int8 *)v5 + 4);
      if (v6 != 1702063409 || v7 != 99) {
        goto LABEL_45;
      }
      uint64_t result = 2;
      break;
    case 7uLL:
      uint64_t v9 = (int *)*a1;
      if (v1 >= 0) {
        uint64_t v9 = (int *)a1;
      }
      int v10 = *v9;
      int v11 = *(int *)((char *)v9 + 3);
      if (v10 != 1831874609 || v11 != 1667593069) {
        goto LABEL_45;
      }
      uint64_t result = 1;
      break;
    case 8uLL:
      uint64_t v13 = (void *)*a1;
      if (v1 >= 0) {
        uint64_t v13 = a1;
      }
      if (*v13 != 0x6365736D30303031) {
        goto LABEL_45;
      }
      uint64_t result = 0;
      break;
    case 9uLL:
      BOOL v14 = (void *)*a1;
      if (v1 >= 0) {
        BOOL v14 = a1;
      }
      if (*v14 == 0x696B536D65646F4DLL && *((unsigned char *)v14 + 8) == 110)
      {
        uint64_t result = 10;
      }
      else if (*v14 == 0x42726569676E6154 && *((unsigned char *)v14 + 8) == 71)
      {
        uint64_t result = 11;
      }
      else
      {
        uint64_t v17 = *v14;
        int v18 = *((unsigned __int8 *)v14 + 8);
        if (v17 == 0x43726569676E6154 && v18 == 71) {
          uint64_t result = 12;
        }
        else {
LABEL_45:
        }
          uint64_t result = 255;
      }
      break;
    default:
      return v3;
  }
  return result;
}

void radio::QMIRFSCommandDriver::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  int v6 = operator new(0xD0uLL);
  uint64_t v7 = (uint64_t)v6;
  int v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v13 = *a1;
  BOOL v14 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  int v10 = (std::__shared_weak_count *)a2[1];
  v12[0] = v9;
  v12[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMIRFSCommandDriver::QMIRFSCommandDriver((uint64_t)v6, (uint64_t)&v13, (uint64_t)v12);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<radio::QMIRFSCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIRFSCommandDriver,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  int v11 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  radio::QMIRFSCommandDriver::init((radio::QMIRFSCommandDriver *)*a3);
}

void sub_1B8B64A68(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8B64A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void radio::QMIRFSCommandDriver::init(radio::QMIRFSCommandDriver *this)
{
  uint64_t v5 = *((void *)this + 9);
  unsigned __int8 v3 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 72;
  if (!v3 || (int v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_15_1;
  v11[4] = this;
  void v11[5] = v5;
  int v12 = v7;
  uint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  void block[4] = v4;
  void block[5] = &v13;
  uint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    int v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  int v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t radio::QMIRFSCommandDriver::QMIRFSCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  int v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::RFSCommandDriver::RFSCommandDriver();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)a1 = &unk_1F1261E38;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  return a1;
}

void sub_1B8B64D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void radio::QMIRFSCommandDriver::~QMIRFSCommandDriver(radio::QMIRFSCommandDriver *this)
{
  *(void *)this = &unk_1F1261E38;
  size_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMIRFSCommandDriver *)((char *)this + 168));
  radio::RFSCommandDriver::~RFSCommandDriver(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(void *)this = &unk_1F1261E38;
  size_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMIRFSCommandDriver *)((char *)this + 168));
  radio::RFSCommandDriver::~RFSCommandDriver(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(void *)this = &unk_1F1261E38;
  size_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((radio::QMIRFSCommandDriver *)((char *)this + 168));
  radio::RFSCommandDriver::~RFSCommandDriver(this);
  operator delete(v3);
}

void ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v67 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v66, *(Registry **)(v2 + 128));
  if (!v66)
  {
    Name = (const char *)radio::RFSCommandDriver::getName((radio::RFSCommandDriver *)v2);
    size_t v28 = strlen(Name);
    if (v28 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v29 = v28;
    if (v28 >= 0x17)
    {
      uint64_t v42 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v42 = v28 | 7;
      }
      uint64_t v43 = v42 + 1;
      p_dst = (void **)operator new(v42 + 1);
      size_t v64 = v29;
      unint64_t v65 = v43 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v65) = v28;
      p_dst = (void **)&__dst;
      if (!v28)
      {
        LOBYTE(__dst) = 0;
        long long v31 = *(NSObject **)(v2 + 88);
        uint64_t v55 = v31;
        if (!v31)
        {
LABEL_46:
          char v61 = 5;
          strcpy((char *)__p, "radio");
          long long v32 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v32 || (v33 = *(void *)(v2 + 72), (int v34 = std::__shared_weak_count::lock(v32)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          int v35 = v34;
          atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v53 = 0;
            uint64_t v54 = 0;
            int v36 = std::__shared_weak_count::lock(v34);
            if (v36)
            {
LABEL_50:
              atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              uint64_t v53 = v33;
              uint64_t v54 = v36;
LABEL_51:
              std::__shared_weak_count::__release_weak(v35);
              if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
              qmi::Client::createWithQueue();
              long long v37 = v70;
              long long v70 = 0uLL;
              long long v38 = *(std::__shared_weak_count **)(v2 + 192);
              *(_OWORD *)(v2 + 184) = v37;
              if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
              qmi::Client::~Client((qmi::Client *)&v68);
              if (v54) {
                std::__shared_weak_count::__release_weak(v54);
              }
              if (v61 < 0)
              {
                operator delete(__p[0]);
                long long v15 = v55;
                if (!v55) {
                  goto LABEL_29;
                }
              }
              else
              {
                long long v15 = v55;
                if (!v55) {
                  goto LABEL_29;
                }
              }
LABEL_28:
              dispatch_release(v15);
              goto LABEL_29;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v35);
            uint64_t v53 = 0;
            uint64_t v54 = 0;
            int v36 = std::__shared_weak_count::lock(v35);
            if (v36) {
              goto LABEL_50;
            }
          }
          uint64_t v53 = 0;
          uint64_t v54 = v36;
          goto LABEL_51;
        }
LABEL_45:
        dispatch_retain(v31);
        goto LABEL_46;
      }
    }
    memmove(p_dst, Name, v29);
    *((unsigned char *)p_dst + v29) = 0;
    long long v31 = *(NSObject **)(v2 + 88);
    uint64_t v55 = v31;
    if (!v31) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  unsigned __int8 v3 = (const char *)radio::RFSCommandDriver::getName((radio::RFSCommandDriver *)v2);
  size_t v4 = strlen(v3);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v40 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v40 = v4 | 7;
    }
    uint64_t v41 = v40 + 1;
    int v6 = (void **)operator new(v40 + 1);
    size_t v64 = v5;
    unint64_t v65 = v41 | 0x8000000000000000;
    std::string __dst = v6;
LABEL_78:
    memmove(v6, v3, v5);
    *((unsigned char *)v6 + v5) = 0;
    uint64_t v7 = *(NSObject **)(v2 + 88);
    unint64_t v62 = v7;
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  HIBYTE(v65) = v4;
  int v6 = (void **)&__dst;
  if (v4) {
    goto LABEL_78;
  }
  LOBYTE(__dst) = 0;
  uint64_t v7 = *(NSObject **)(v2 + 88);
  unint64_t v62 = v7;
  if (v7) {
LABEL_6:
  }
    dispatch_retain(v7);
LABEL_7:
  char v61 = 5;
  strcpy((char *)__p, "radio");
  int v8 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v8 || (v9 = *(void *)(v2 + 72), (int v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    int v12 = std::__shared_weak_count::lock(v11);
    if (v12) {
      goto LABEL_11;
    }
LABEL_81:
    uint64_t v58 = 0;
    uint64_t v59 = v12;
    goto LABEL_12;
  }
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  int v12 = std::__shared_weak_count::lock(v10);
  if (!v12) {
    goto LABEL_81;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v58 = v9;
  uint64_t v59 = v12;
LABEL_12:
  std::__shared_weak_count::__release_weak(v11);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v56 = v66;
  uint64_t v57 = v67;
  if (v67) {
    atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v13 = v70;
  long long v70 = 0uLL;
  BOOL v14 = *(std::__shared_weak_count **)(v2 + 192);
  *(_OWORD *)(v2 + 184) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  qmi::Client::~Client((qmi::Client *)&v68);
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  if (v59) {
    std::__shared_weak_count::__release_weak(v59);
  }
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  long long v15 = v62;
  if (v62) {
    goto LABEL_28;
  }
LABEL_29:
  if (SHIBYTE(v65) < 0) {
    operator delete(__dst);
  }
  uint64_t v16 = (qmi::Client *)(v2 + 168);
  uint64_t v46 = MEMORY[0x1E4F143A8];
  uint64_t v47 = 1174405120;
  long long v48 = ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_2;
  long long v49 = &__block_descriptor_tmp_12;
  uint64_t v18 = a1[5];
  uint64_t v17 = (std::__shared_weak_count *)a1[6];
  uint64_t v50 = v2;
  uint64_t v51 = v18;
  uint64_t v52 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 1174405120;
  v44[2] = ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_3;
  v44[3] = &__block_descriptor_tmp_12;
  uint64_t v20 = a1[5];
  unint64_t v19 = (std::__shared_weak_count *)a1[6];
  void v44[4] = v2;
  void v44[5] = v20;
  int v45 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v68 = MEMORY[0x1E4F143A8];
  uint64_t v69 = 0x40000000;
  *(void *)&long long v70 = ___ZNK3qmi6Client13setIndHandlerIRKN4mfse3abm9SyncEvent10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v70 + 1) = &unk_1E6193F60;
  uint64_t v71 = v44;
  qmi::Client::setIndHandler();
  qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 168));
  uint64_t v21 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v21 || (uint64_t v22 = *(void *)(v2 + 72), (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v24 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
    long long v25 = std::__shared_weak_count::lock(v24);
    if (v25) {
      goto LABEL_39;
    }
LABEL_63:
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    goto LABEL_64;
  }
  long long v25 = std::__shared_weak_count::lock(v23);
  if (!v25) {
    goto LABEL_63;
  }
LABEL_39:
  uint64_t v26 = (atomic_ullong *)v25;
  atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v68 = v22;
  uint64_t v69 = (uint64_t)v25;
  std::__shared_weak_count::__release_weak(v24);
  if (atomic_fetch_add(v26 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_65;
  }
  (*(void (**)(atomic_ullong *))(*v26 + 16))(v26);
  uint64_t v24 = (std::__shared_weak_count *)v26;
LABEL_64:
  std::__shared_weak_count::__release_weak(v24);
LABEL_65:
  qmi::Client::setClientHandle();
  if (v69) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v69);
  }
  qmi::Client::start(v16);
  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  int v39 = v67;
  if (v67)
  {
    if (!atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1B8B657A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,dispatch_object_t object,char a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a25)
  {
    std::__shared_weak_count::__release_weak(a25);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_3:
      long long v38 = object;
      if (!object) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  long long v38 = object;
  if (!object)
  {
LABEL_8:
    if (*(char *)(v36 - 137) < 0)
    {
      operator delete(*(void **)(v36 - 160));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v36 - 136);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v36 - 136);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v38);
  goto LABEL_8;
}

void ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    unsigned __int8 v3 = (radio::QMIRFSCommandDriver *)a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        *((_DWORD *)v3 + 50) = 0;
        radio::QMIRFSCommandDriver::enableIndications_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B659E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void radio::QMIRFSCommandDriver::enableIndications_sync(radio::QMIRFSCommandDriver *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Enabling RFS Sync indication", buf, 2u);
  }
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v3;
  v10[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
  v5[5] = (char *)this + 168;
  uint64_t v6 = QMIServiceMsg::create();
  int v7 = 25000;
  uint64_t v8 = 0;
  long long aBlock = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  _DWORD v5[2] = ___ZN5radio19QMIRFSCommandDriver22enableIndications_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_16_0;
  v5[4] = this;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v12 = 0x40000000;
  long long v13 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4mfse3abm15EnableSyncEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  BOOL v14 = &unk_1E6193FA8;
  long long v15 = v5;
  size_t v4 = _Block_copy(buf);
  long long aBlock = v4;
  if (v6)
  {
    qmi::Client::send();
    size_t v4 = aBlock;
  }
  if (v4) {
    _Block_release(v4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_1B8B65B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B65B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrIN5radio16RFSCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrIN5radio16RFSCommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_3(void *a1, qmi::MessageBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v23 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v18 = 0;
        unint64_t v19 = &v18;
        uint64_t v20 = 0x2000000000;
        char v21 = 0;
        uint64_t v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I Received RFS Sync indication", buf, 2u);
        }
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 0x40000000;
        long long v13 = ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_4;
        BOOL v14 = &unk_1E6193EC8;
        long long v15 = &v18;
        uint64_t v16 = v5;
        uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v11 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)1);
          buf[0] = *(unsigned char *)v11 != 0;
          v13((uint64_t)v12, buf);
        }
        boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v5 + 112), *((unsigned char *)v19 + 24));
        _Block_object_dispose(&v18, 8);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8B65D64(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 16, v2, v3);
  JUMPOUT(0x1B8B65CD8);
}

void sub_1B8B65D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v9 - 64);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_4(uint64_t a1, unsigned char *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  size_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Reset after sync: %s", (uint8_t *)&v6, 0xCu);
  }
}

void ___ZN5radio19QMIRFSCommandDriver22enableIndications_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Failed to enable RFS Sync indication", v3, 2u);
    }
  }
}

void radio::QMIRFSCommandDriver::sync(void *a1, uint64_t a2, uint64_t a3)
{
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  v14[2] = ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_32_2;
  v14[4] = a1;
  uint64_t v5 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v5 = _Block_copy(v5);
  }
  int v6 = *(NSObject **)(a3 + 8);
  long long aBlock = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[10];
  if (!v7 || (uint64_t v8 = a1[9], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v10 = v9;
  uint64_t v11 = a1[11];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F1262140;
  void block[5] = v8;
  uint64_t v18 = v10;
  p_shared_owners = &v10->__shared_owners_;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v14;
  dispatch_async(v11, block);
  long long v13 = v18;
  if (!v18 || atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_10:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_11:
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Sending RFS sync request", buf, 2u);
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v40 = v4;
  long long v41 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v40);
  uint64_t v5 = (char *)*((void *)&v40 + 1);
  int v6 = (char *)v41;
  uint64_t v7 = (const void **)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1) != (void)v41)
  {
    uint64_t v7 = (const void **)*((void *)&v40 + 1);
    while (*((unsigned char *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v41) {
        goto LABEL_11;
      }
    }
  }
  if (v7 == (const void **)v41)
  {
LABEL_11:
    int v10 = (char *)operator new(0x10uLL);
    uint64_t v11 = v10;
    v10[8] = 1;
    *(void *)int v10 = &unk_1F12620E0;
    *((_DWORD *)v10 + 3) = 0;
    uint64_t v9 = v10 + 12;
    if ((unint64_t)v6 < *((void *)&v41 + 1))
    {
      *(void *)int v6 = v10;
      *(void *)&long long v41 = v6 + 8;
      goto LABEL_25;
    }
    int64_t v12 = v6 - v5;
    uint64_t v13 = (v6 - v5) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = *((void *)&v41 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v41 + 1) - (void)v5) >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = operator new(8 * v16);
      uint64_t v18 = &v17[8 * v13];
      unint64_t v19 = &v17[8 * v16];
      void *v18 = v11;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v5 == v6)
      {
LABEL_22:
        *((void *)&v40 + 1) = v18;
        *(void *)&long long v41 = v20;
        *((void *)&v41 + 1) = v19;
        if (!v5)
        {
LABEL_24:
          *(void *)&long long v41 = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v5);
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = (void *)(8 * v13);
      unint64_t v19 = 0;
      *(void *)(8 * v13) = v11;
      uint64_t v20 = 8 * v13 + 8;
      if (v5 == v6) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_52;
    }
    if ((unint64_t)(v5 - v17) < 0x20) {
      goto LABEL_52;
    }
    unint64_t v24 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v26 = &v6[-v25];
    uint64_t v18 = (void *)((char *)v18 - v25);
    int v27 = &v17[8 * v13 - 16];
    size_t v28 = v6 - 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      _OWORD *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    int v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        uint64_t v31 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v18 = v31;
      }
      while (v6 != v5);
    }
    uint64_t v5 = (char *)*((void *)&v40 + 1);
    *((void *)&v40 + 1) = v18;
    *(void *)&long long v41 = v20;
    *((void *)&v41 + 1) = v19;
    if (!v5) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v8) {
    __cxa_bad_cast();
  }
  uint64_t v9 = v8 + 12;
LABEL_25:
  _DWORD *v9 = 0;
  uint64_t v35 = v2 + 168;
  uint64_t v36 = QMIServiceMsg::create();
  int v37 = 25000;
  uint64_t v38 = 0;
  long long aBlock = 0;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 1174405120;
  v32[2] = ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_2;
  v32[3] = &__block_descriptor_tmp_29_0;
  void v32[4] = v2;
  char v21 = (void *)a1[5];
  if (v21) {
    char v21 = _Block_copy(v21);
  }
  uint64_t v22 = a1[6];
  uint64_t v33 = v21;
  dispatch_object_t object = v22;
  if (v22) {
    dispatch_retain(v22);
  }
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v43 = 0x40000000;
  int v44 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4mfse3abm10SyncNoWait8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  int v45 = &unk_1E6193FD0;
  uint64_t v46 = v32;
  uint64_t v23 = _Block_copy(buf);
  long long aBlock = v23;
  if (v36)
  {
    qmi::Client::send();
    uint64_t v23 = aBlock;
  }
  if (v23) {
    _Block_release(v23);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v33) {
    _Block_release(v33);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v40);
}

void sub_1B8B664B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B664D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B664F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_2(void *a1, qmi::MessageBase *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  CFTypeRef v69 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = &v65;
  uint64_t v67 = 0x2000000000;
  char v68 = 1;
  uint64_t v61 = 0;
  unint64_t v62 = &v61;
  uint64_t v63 = 0x2000000000;
  char v64 = 1;
  uint64_t v50 = 0;
  uint64_t v51 = &v50;
  uint64_t v52 = 0x13002000000;
  uint64_t v53 = __Block_byref_object_copy__3;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v59[7] = v5;
  v59[8] = v5;
  v55[0] = v5;
  v55[1] = v5;
  v55[2] = v5;
  void v55[3] = v5;
  long long v56 = v5;
  long long v57 = v5;
  long long v58 = v5;
  v59[0] = v5;
  v59[1] = v5;
  v59[2] = v5;
  void v59[3] = v5;
  v59[4] = v5;
  v59[5] = v5;
  v59[6] = v5;
  uint64_t v54 = __Block_byref_object_dispose__3;
  unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v55);
  CFTypeRef cf = 0;
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v8 = Mutable;
  if (!Mutable
    || (CFTypeRef cf = Mutable,
        !ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51 + 5, (uint64_t)"Failed creating a status dictionary", 35);
    *((unsigned char *)v62 + 24) = 0;
    if (!a1[5]) {
      goto LABEL_60;
    }
LABEL_11:
    if (!a1[6]) {
      goto LABEL_60;
    }
    if (*((unsigned char *)v62 + 24))
    {
      uint64_t v17 = 0;
      goto LABEL_14;
    }
    unint64_t v19 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      std::ostringstream::str[abi:ne180100](block, (uint64_t)(v51 + 5));
      uint64_t v33 = SHIBYTE(v71) >= 0 ? block : (void **)block[0];
      *(_DWORD *)long long buf = 136315138;
      long long v77 = v33;
      _os_log_error_impl(&dword_1B8B00000, v19, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if (SHIBYTE(v71) < 0) {
        operator delete(block[0]);
      }
    }
    uint64_t v20 = v51;
    int v21 = *((_DWORD *)v51 + 36);
    if ((v21 & 0x10) != 0)
    {
      unint64_t v24 = v51[17];
      unint64_t v25 = v51[12];
      if (v24 < v25)
      {
        v51[17] = v25;
        unint64_t v24 = v25;
      }
      uint64_t v26 = (const void *)v20[11];
      size_t v22 = v24 - (void)v26;
      if (v24 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_68;
      }
    }
    else
    {
      if ((v21 & 8) == 0)
      {
        size_t v22 = 0;
        HIBYTE(v35) = 0;
        uint64_t v23 = __dst;
        goto LABEL_30;
      }
      uint64_t v26 = (const void *)v51[8];
      size_t v22 = v51[10] - (void)v26;
      if (v22 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_68:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v22 >= 0x17)
    {
      uint64_t v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v27 = v22 | 7;
      }
      uint64_t v28 = v27 + 1;
      uint64_t v23 = (void **)operator new(v27 + 1);
      __dst[1] = (void *)v22;
      unint64_t v35 = v28 | 0x8000000000000000;
      __dst[0] = v23;
    }
    else
    {
      HIBYTE(v35) = v22;
      uint64_t v23 = __dst;
      if (!v22) {
        goto LABEL_30;
      }
    }
    memmove(v23, v26, v22);
LABEL_30:
    *((unsigned char *)v23 + v22) = 0;
    CreateError();
    CFTypeRef v29 = v69;
    uint64_t v17 = block[0];
    CFTypeRef v69 = block[0];
    block[0] = 0;
    if (v29)
    {
      CFRelease(v29);
      if (block[0]) {
        CFRelease(block[0]);
      }
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(__dst[0]);
    }
    if (v17)
    {
      CFRetain(v17);
      char v18 = 0;
      uint64_t v8 = (void *)cf;
      if (!cf) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
LABEL_14:
    char v18 = 1;
    uint64_t v8 = (void *)cf;
    if (!cf)
    {
LABEL_38:
      long long v30 = (const void *)a1[5];
      if (v30) {
        uint64_t v31 = _Block_copy(v30);
      }
      else {
        uint64_t v31 = 0;
      }
      long long v32 = a1[6];
      block[0] = (void *)MEMORY[0x1E4F143A8];
      block[1] = (void *)1174405120;
      uint64_t v71 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_0;
      unsigned int v72 = &__block_descriptor_tmp_58_2;
      if (v31)
      {
        uint64_t v73 = _Block_copy(v31);
        CFTypeRef v74 = v17;
        if (v18) {
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v73 = 0;
        CFTypeRef v74 = v17;
        if (v18)
        {
LABEL_46:
          CFTypeRef v75 = v8;
          if (v8) {
            CFRetain(v8);
          }
          dispatch_async(v32, block);
          if (v75) {
            CFRelease(v75);
          }
          if (v74) {
            CFRelease(v74);
          }
          if (v73) {
            _Block_release(v73);
          }
          if (v31) {
            _Block_release(v31);
          }
          if (v8) {
            CFRelease(v8);
          }
          if ((v18 & 1) == 0) {
            CFRelease(v17);
          }
          goto LABEL_60;
        }
      }
      CFRetain(v17);
      goto LABEL_46;
    }
LABEL_37:
    CFRetain(v8);
    goto LABEL_38;
  }
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 0x40000000;
  int v44 = ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_21;
  int v45 = &unk_1E6193F10;
  uint64_t v46 = &v65;
  uint64_t v47 = &v61;
  uint64_t v48 = v4;
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v12 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)4);
    LODWORD(block[0]) = *(_DWORD *)v12;
    v44(v43, (int *)block);
  }
  if (*((_DWORD *)a2 + 1))
  {
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 0x40000000;
    int v37 = (void (*)(void *, void **))___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_24;
    uint64_t v38 = &unk_1E6193F38;
    int v39 = &v65;
    long long v40 = &v61;
    long long v41 = &v50;
    uint64_t v42 = v4;
    uint64_t v13 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    uint64_t v15 = v13;
    if (v13)
    {
      tlv::throwIfNotEnoughBytes(v13, (const unsigned __int8 *)v13 + v14, (const unsigned __int8 *)4);
      LODWORD(block[0]) = *(_DWORD *)v15;
      v37(v36, block);
    }
  }
  ctu::cf::insert<char const*,BOOL>((__CFDictionary *)v8, (const __CFString **)*MEMORY[0x1E4FB9B68], *((unsigned __int8 *)v62 + 24), v6, v11);
  ctu::cf::insert<char const*,BOOL>((__CFDictionary *)v8, (const __CFString **)*MEMORY[0x1E4FB9B70], *((unsigned __int8 *)v66 + 24), v6, v16);
  if (a1[5]) {
    goto LABEL_11;
  }
LABEL_60:
  if (v8) {
    CFRelease(v8);
  }
  _Block_object_dispose(&v50, 8);
  *(void *)&v55[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v55 + *(void *)(*(void *)&v55[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v55[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v57) < 0) {
    operator delete(*((void **)&v56 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9C8300](v59);
  _Block_object_dispose(&v61, 8);
  _Block_object_dispose(&v65, 8);
  if (v69) {
    CFRelease(v69);
  }
}

void sub_1B8B66C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_21(void *a1, int *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[6];
  long long v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(v4 + 200);
    int v7 = *a2;
    v12[0] = 67109376;
    v12[1] = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Sync token: Old = %u New = %u", (uint8_t *)v12, 0xEu);
  }
  int v8 = *(_DWORD *)(v4 + 200);
  int v9 = *a2;
  if (v8 == *a2)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    int v10 = *(NSObject **)(v4 + 40);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    int v9 = v8;
    if (v11)
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_DEFAULT, "#I Sync token same. Sync is already in progress.", (uint8_t *)v12, 2u);
      int v9 = *a2;
    }
  }
  *(_DWORD *)(v4 + 200) = v9;
}

void ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_24(void *a1, _DWORD *a2)
{
  if (*a2 == 31)
  {
    uint64_t v2 = a1[7];
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v5 = 0;
      _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Nothing to sync", v5, 2u);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(*(void *)(a1[6] + 8) + 40), (uint64_t)"Sync response with error [", 26);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"]", 1);
  }
}

unsigned char *std::ostringstream::str[abi:ne180100](unsigned char *__dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  int v3 = *(_DWORD *)(a2 + 104);
  if ((v3 & 0x10) != 0)
  {
    unint64_t v4 = *(void *)(a2 + 96);
    unint64_t v5 = *(void *)(a2 + 56);
    if (v4 < v5)
    {
      *(void *)(a2 + 96) = v5;
      unint64_t v4 = v5;
    }
    int v6 = *(const void **)(a2 + 48);
    size_t v7 = v4 - (void)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_16;
    }
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      __dst[23] = 0;
LABEL_4:
      *std::string __dst = 0;
      return __dst;
    }
    int v6 = *(const void **)(a2 + 24);
    size_t v7 = *(void *)(a2 + 40) - (void)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_16:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v8 = v7 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v10 = operator new(v8 + 1);
    v2[1] = v7;
    v2[2] = v9 | 0x8000000000000000;
    *uint64_t v2 = v10;
    uint64_t v2 = v10;
  }
  else
  {
    __dst[23] = v7;
    if (!v7) {
      goto LABEL_4;
    }
  }
  std::string __dst = memmove(v2, v6, v7);
  *((unsigned char *)v2 + v7) = 0;
  return __dst;
}

void radio::QMIRFSCommandDriver::setStartHandler(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    int v3 = "setStartHandler";
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMIRFSCommandDriver::setIndicationHandler(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    int v3 = "setIndicationHandler";
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMIRFSCommandDriver::setLPMEnterAction(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    int v3 = "setLPMEnterAction";
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMIRFSCommandDriver::setLPMExitAction(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    int v3 = "setLPMExitAction";
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMIRFSCommandDriver::checkRFSStatus(radio::QMIRFSCommandDriver *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    int v3 = "checkRFSStatus";
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::RFSCommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)radio::RFSCommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (int v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8B67608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B8B67624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<radio::QMIRFSCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIRFSCommandDriver,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1261FB8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8B67750(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver*)#1}::operator() const(radio::QMIRFSCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8B67778(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<radio::QMIRFSCommandDriver *,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver *)#1},std::allocator<radio::QMIRFSCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMIRFSCommandDriver *,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver *)#1},std::allocator<radio::QMIRFSCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<radio::QMIRFSCommandDriver *,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver *)#1},std::allocator<radio::QMIRFSCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19QMIRFSCommandDriver"
                     "EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19QMIRFSCo"
                                "mmandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19QMIRFSCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19QMIRFSCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver*)#1}::operator() const(radio::QMIRFSCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(uint64_t ***a1, char a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  char v29 = a2;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v40 = v3;
  long long v41 = v3;
  long long v38 = v3;
  long long v39 = v3;
  long long v36 = v3;
  long long v37 = v3;
  long long v34 = v3;
  long long v35 = v3;
  long long v32 = v3;
  long long v33 = v3;
  uint64_t v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v32;
  v43[0] = 0;
  v43[1] = v4;
  pthread_mutex_lock(v4);
  size_t v5 = (atomic_uint *)a1[1];
  if (!v5)
  {
    uint64_t v7 = *a1;
    goto LABEL_14;
  }
  unsigned int explicit = atomic_load_explicit(v5 + 2, memory_order_acquire);
  uint64_t v7 = *a1;
  if (explicit == 1)
  {
    uint64_t v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      uint64_t v8 = (*v7)[1];
      *(void *)&long long v30 = v8;
      uint64_t v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)&long long v30 = a1[2];
      uint64_t v9 = *v7;
      if (*v7 == (uint64_t *)v8) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = *(void *)(v8 + 16);
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    else
    {
      uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v30);
      uint64_t v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  size_t v5 = (atomic_uint *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 2, 1u, memory_order_relaxed);
  }
LABEL_14:
  BOOL v11 = v28;
  uint64_t v27 = v7;
  uint64_t v28 = v5;
  if (v11)
  {
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
  }
  pthread_mutex_unlock(v43[1]);
  uint64_t v12 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v43[0][-1].__opaque[55] >= 0)
    {
      __int16 v13 = (char *)__p[1] + 16 * (uint64_t)v43[0];
      do
      {
        int v14 = (atomic_uint *)*((void *)v13 - 1);
        if (v14)
        {
          if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
            if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
            }
          }
        }
        v13 -= 16;
      }
      while (v13 > v12);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v15;
  long long v46 = v15;
  *(_OWORD *)uint64_t v43 = v15;
  long long v44 = v15;
  long long v41 = v15;
  *(_OWORD *)stat __p = v15;
  long long v39 = v15;
  long long v40 = v15;
  long long v37 = v15;
  long long v38 = v15;
  long long v35 = v15;
  long long v36 = v15;
  long long v33 = v15;
  long long v34 = v15;
  long long v32 = v15;
  LOBYTE(v32) = 0;
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v48 = 10;
  long long v49 = (char *)&v32 + 8;
  uint64_t v50 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = &v29;
  CFAllocatorRef v16 = v27;
  uint64_t v17 = (uint64_t)*v27;
  unint64_t v24 = &v32;
  unint64_t v25 = a1;
  uint64_t v26 = v17;
  *(void *)&long long v22 = *(void *)(v17 + 8);
  *((void *)&v22 + 1) = v17;
  *(void *)&long long v23 = &v32;
  *((void *)&v23 + 1) = v17;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v22);
  v21[0] = *v16;
  v21[1] = v21[0];
  void v21[2] = &v32;
  v21[3] = v21[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(v21);
  long long v30 = v22;
  long long v31 = v23;
  uint64_t v18 = v21[0];
  if ((void)v22 == v21[0])
  {
    if (HIDWORD(v52) <= v52) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  do
  {
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dereference(&v30);
    *(void *)&long long v30 = *(void *)(v30 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v30);
    if (*(unsigned char *)v31) {
      *(unsigned char *)long long v31 = 0;
    }
  }
  while ((void)v30 != v18);
  if (*((_DWORD *)v24 + 71) > *((_DWORD *)v24 + 70)) {
LABEL_35:
  }
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v25, v26);
LABEL_36:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v32);
  uint64_t v20 = v28;
  if (v28 && atomic_fetch_add(v28 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
    if (atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
    }
  }
  return result;
}

void sub_1B8B67CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1B8B67CB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8B67DBCLL);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  int v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 4;
  size_t v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    uint64_t v23 = a1[10];
    if ((uint64_t *)v23 != *a3) {
      goto LABEL_55;
    }
    unint64_t v19 = *(uint64_t **)(v23 + 8);
    uint64_t v9 = v6;
    unint64_t v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      long long v39 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v39)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  int v7 = *a2;
  int v8 = a2[2];
  uint64_t v9 = v6;
  uint64_t v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v16 = *((_DWORD *)v10 + 8);
        BOOL v17 = v16 < 1;
        if (v16 == 1) {
          BOOL v17 = *((_DWORD *)v10 + 10) < v8;
        }
        if (!v17) {
          break;
        }
        uint64_t v10 = (uint64_t *)v10[1];
        if (!v10) {
          goto LABEL_19;
        }
      }
      uint64_t v9 = v10;
      uint64_t v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      int v11 = *((_DWORD *)v10 + 8);
      BOOL v12 = v11 == v7;
      BOOL v13 = v11 < v7;
      if (v11 >= v7) {
        int v14 = (uint64_t **)v10;
      }
      else {
        int v14 = (uint64_t **)(v10 + 1);
      }
      if (v13) {
        long long v15 = v9;
      }
      else {
        long long v15 = v10;
      }
      if (v12)
      {
        int v14 = (uint64_t **)v10;
        uint64_t v9 = v10;
      }
      else
      {
        uint64_t v9 = v15;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  uint64_t v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    unint64_t v19 = *(uint64_t **)(v18 + 8);
    uint64_t v20 = v6;
    if (v7 == 1)
    {
      int v21 = v5;
      while (1)
      {
        int v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10)) {
            goto LABEL_27;
          }
LABEL_22:
          int v21 = (uint64_t *)v21[1];
          if (!v21) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v22 <= 1) {
            goto LABEL_22;
          }
LABEL_27:
          uint64_t v20 = v21;
          int v21 = (uint64_t *)*v21;
          if (!v21) {
            goto LABEL_44;
          }
        }
      }
    }
    uint64_t v27 = v5;
    do
    {
      int v28 = *((_DWORD *)v27 + 8);
      char v29 = (uint64_t **)(v27 + 1);
      BOOL v30 = v7 == v28;
      BOOL v31 = v7 < v28;
      if (v7 >= v28) {
        long long v32 = (uint64_t **)(v27 + 1);
      }
      else {
        long long v32 = (uint64_t **)v27;
      }
      if (!v31) {
        uint64_t v27 = v20;
      }
      if (v30) {
        long long v32 = v29;
      }
      else {
        uint64_t v20 = v27;
      }
      uint64_t v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      unint64_t v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1) {
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6]) {
        goto LABEL_46;
      }
    }
LABEL_31:
    unint64_t v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        uint64_t v26 = v25;
        unint64_t v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      long long v33 = v9;
      do
      {
        uint64_t v26 = (uint64_t *)v33[2];
        BOOL v12 = *v26 == (void)v33;
        long long v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9) {
      long long *v24 = v26;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  long long v34 = *a3;
  uint64_t v35 = **a3;
  uint64_t v36 = (*a3)[1];
  *(void *)(v35 + 8) = v36;
  *(void *)v34[1] = v35;
  --a1[2];
  long long v37 = (atomic_uint *)v34[3];
  if (v37)
  {
    if (atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v37 + 16))(v37);
      if (atomic_fetch_add(v37 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v37 + 24))(v37);
      }
    }
  }
  operator delete(v34);
  return v36;
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, void **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    if (*a2 != 1)
    {
      int v18 = *((_DWORD *)v6 + 8);
      if (v8 == v18) {
        return (uint64_t **)v6;
      }
      uint64_t v10 = (uint64_t **)a1[1];
      while (1)
      {
        if (v8 < v18)
        {
          uint64_t v6 = *v10;
          int v7 = v10;
          if (!*v10) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v18 >= v8) {
            return v10;
          }
          uint64_t v6 = v10[1];
          if (!v6)
          {
LABEL_11:
            int v7 = v10 + 1;
            goto LABEL_13;
          }
        }
        int v18 = *((_DWORD *)v6 + 8);
        uint64_t v10 = (uint64_t **)v6;
        if (v8 == v18) {
          return (uint64_t **)v6;
        }
      }
    }
    int v9 = a2[2];
    while (1)
    {
      uint64_t v10 = (uint64_t **)v6;
      int v11 = *((_DWORD *)v6 + 8);
      if (v11 == 1)
      {
        int v12 = *((_DWORD *)v6 + 10);
        if (v9 >= v12)
        {
          if (v12 >= v9) {
            return v10;
          }
          goto LABEL_10;
        }
LABEL_4:
        uint64_t v6 = (uint64_t *)*v6;
        int v7 = v10;
        if (!*v10) {
          goto LABEL_13;
        }
      }
      else
      {
        if (v11 > 1) {
          goto LABEL_4;
        }
LABEL_10:
        uint64_t v6 = (uint64_t *)v6[1];
        if (!v6) {
          goto LABEL_11;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
LABEL_13:
  BOOL v13 = operator new(0x38uLL);
  int v14 = *((_DWORD *)*a4 + 2);
  void v13[4] = **a4;
  *((_DWORD *)v13 + 10) = v14;
  v13[6] = 0;
  void *v13 = 0;
  v13[1] = 0;
  void v13[2] = v10;
  *int v7 = v13;
  long long v15 = (uint64_t *)**a1;
  int v16 = v13;
  if (v15)
  {
    *a1 = v15;
    int v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v13;
}

uint64_t boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dereference(void *a1)
{
  uint64_t v2 = a1[2];
  if (!*(unsigned char *)v2)
  {
    uint64_t v3 = *(void *)(*(void *)(*a1 + 16) + 32);
    uint64_t v4 = *(void *)(v3 + 24);
    if (!v4)
    {
      std::runtime_error::runtime_error(&v6, "call to empty boost::function");
      v6.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
      boost::throw_exception<boost::bad_function_call>(&v6);
    }
    (*(void (**)(uint64_t, void))((v4 & 0xFFFFFFFFFFFFFFFELL) + 8))(v3 + 32, **(unsigned __int8 **)(v2 + 272));
    if (!*(unsigned char *)v2) {
      *(unsigned char *)uint64_t v2 = 1;
    }
  }
  return a1[2] + 1;
}

void sub_1B8B683B4()
{
}

void sub_1B8B683F8()
{
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1])
  {
LABEL_31:
    uint64_t v19 = a1[3];
    if (v19 != v1)
    {
      *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v35 = v20;
      long long v36 = v20;
      long long v33 = v20;
      long long v34 = v20;
      long long v31 = v20;
      long long v32 = v20;
      long long v29 = v20;
      long long v30 = v20;
      long long v27 = v20;
      long long v28 = v20;
      uint64_t v21 = *(void *)(v19 + 16);
      __p[0] = (void *)10;
      __p[1] = &v27;
      *(void *)&long long v38 = 0;
      *((void *)&v38 + 1) = v21;
      (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
      uint64_t v22 = a1[2];
      a1[3] = a1[1];
      uint64_t v23 = *(_DWORD **)(v22 + 288);
      if (v23) {
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v23, &v27);
      }
      *(void *)(v22 + 288) = 0;
      (*(void (**)(void))(**((void **)&v38 + 1) + 32))(*((void *)&v38 + 1));
      unint64_t v24 = (char *)__p[1];
      if (__p[1])
      {
        if ((uint64_t)v38 - 1 >= 0)
        {
          unint64_t v25 = (char *)__p[1] + 16 * v38;
          do
          {
            uint64_t v26 = (atomic_uint *)*((void *)v25 - 1);
            if (v26)
            {
              if (atomic_fetch_add(v26 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v26 + 16))(v26);
                if (atomic_fetch_add(v26 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v26 + 24))(v26);
                }
              }
            }
            v25 -= 16;
          }
          while (v25 > v24);
        }
        if (__p[0] >= (void *)0xB) {
          operator delete(__p[1]);
        }
      }
    }
    return;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)stat __p = v3;
    long long v38 = v3;
    long long v35 = v3;
    long long v36 = v3;
    long long v33 = v3;
    long long v34 = v3;
    long long v31 = v3;
    long long v32 = v3;
    long long v29 = v3;
    long long v30 = v3;
    long long v27 = v3;
    long long v28 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    __p[0] = (void *)10;
    __p[1] = &v27;
    *(void *)&long long v38 = 0;
    *((void *)&v38 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(*(void *)(*a1 + 16), &v27, (void *)(a1[2] + 8));
    uint64_t v5 = *(void *)(*a1 + 16);
    uint64_t v6 = a1[2];
    if (*(unsigned char *)(v5 + 24))
    {
      ++*(_DWORD *)(v6 + 280);
      uint64_t v7 = *(void *)(v5 + 16);
      if (v7)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v7 + 8), memory_order_acquire))
        {
          int v8 = 1;
          goto LABEL_17;
        }
        uint64_t v6 = a1[2];
      }
      uint64_t v9 = *a1;
      uint64_t v10 = a1[1];
      a1[3] = *a1;
      if (v10 == v9)
      {
        BOOL v13 = *(_DWORD **)(v6 + 288);
        if (v13) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v13, &v27);
        }
        int v8 = 0;
        *(void *)(v6 + 288) = 0;
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 16);
        int v12 = *(_DWORD **)(v6 + 288);
        if (v12) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v12, &v27);
        }
        *(void *)(v6 + 288) = v11;
        int v8 = 0;
        if (v11) {
          ++*(_DWORD *)(v11 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v6 + 284);
      int v8 = 1;
    }
LABEL_17:
    (*(void (**)(void))(**((void **)&v38 + 1) + 32))(*((void *)&v38 + 1));
    int v14 = (char *)__p[1];
    if (__p[1])
    {
      if ((uint64_t)v38 - 1 >= 0)
      {
        long long v15 = (char *)__p[1] + 16 * v38;
        do
        {
          int v16 = (atomic_uint *)*((void *)v15 - 1);
          if (v16)
          {
            if (atomic_fetch_add(v16 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v16 + 16))(v16);
              if (atomic_fetch_add(v16 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v16 + 24))(v16);
              }
            }
          }
          v15 -= 16;
        }
        while (v15 > v14);
      }
      if (__p[0] >= (void *)0xB) {
        operator delete(__p[1]);
      }
    }
    uint64_t v1 = *a1;
    uint64_t v17 = a1[1];
    if (!v8) {
      break;
    }
    uint64_t v18 = *(void *)(v1 + 8);
    *a1 = v18;
    if (v18 == v17)
    {
      uint64_t v1 = v17;
      goto LABEL_31;
    }
  }
  if (v1 == v17) {
    goto LABEL_31;
  }
}

void sub_1B8B68830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B68844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(uint64_t a1, void *a2, void *a3)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  long long v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3 != v3[1])
    {
      while (1)
      {
        memset(v11, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v4, (uint64_t)v11);
        if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v4 + 8) + 24))(*(void *)(v4 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(v4 + 16);
          if (v8 && atomic_load_explicit((atomic_uint *volatile)(v8 + 8), memory_order_acquire))
          {
LABEL_6:
            boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(a3, (uint64_t)v11);
            char v9 = 0;
            if (LODWORD(v11[0]) == SLODWORD(v11[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)a1, a2);
        }
        char v9 = 1;
        if (LODWORD(v11[0]) == SLODWORD(v11[0]) >> 31)
        {
LABEL_13:
          uint64_t v10 = (atomic_uint *)v11[2];
          if (v11[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v11[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
              if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v11[1]) {
          (*(void (**)(void))(*(void *)v11[1] + 8))(v11[1]);
        }
LABEL_17:
        if ((v9 & 1) == 0)
        {
          v4 += 24;
          if (v4 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        return;
      }
    }
  }
}

void sub_1B8B68BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[8] = v4;
  v22[9] = v4;
  void v22[6] = v4;
  v22[7] = v4;
  v22[4] = v4;
  v22[5] = v4;
  void v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v23 = 10;
  stat __p = v22;
  uint64_t v25 = 0;
  uint64_t v26 = v5;
  pthread_mutex_lock(v5);
  if (**(void **)a1 == a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6 || atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire) != 1)
    {
      uint64_t v7 = (uint64_t *)operator new(0x20uLL);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      uint64_t v10 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v10, v9);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v7, (uint64_t)v10);
      _DWORD v7[2] = v8[2];
      uint64_t v11 = v8[3];
      void v7[3] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v21, (uint64_t)v7);
      int v12 = *(uint64_t **)a1;
      BOOL v13 = *(atomic_uint **)(a1 + 8);
      *(_OWORD *)a1 = v21;
      *(void *)&long long v21 = v12;
      *((void *)&v21 + 1) = v13;
      if (v13)
      {
        if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
          if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
          }
        }
      }
    }
    int v14 = *(uint64_t ***)a1;
    long long v15 = **(uint64_t ***)a1;
    uint64_t v16 = v15[1];
    *(void *)&long long v21 = v16;
    if (v15 != (uint64_t *)v16)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = *(void *)(v16 + 16);
          if (!*(unsigned char *)(v17 + 24)) {
            break;
          }
          uint64_t v16 = *(void *)(v16 + 8);
          *(void *)&long long v21 = v16;
          long long v15 = *v14;
          if ((uint64_t *)v16 == *v14) {
            goto LABEL_15;
          }
        }
        uint64_t v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v21);
        int v14 = *(uint64_t ***)a1;
        *(void *)&long long v21 = v16;
        long long v15 = *v14;
      }
      while ((uint64_t *)v16 != *v14);
    }
LABEL_15:
    *(void *)(a1 + 16) = v16;
  }
  pthread_mutex_unlock(v26);
  uint64_t v18 = (char *)__p;
  if (__p)
  {
    if (v25 - 1 >= 0)
    {
      uint64_t v19 = (char *)__p + 16 * v25;
      do
      {
        long long v20 = (atomic_uint *)*((void *)v19 - 1);
        if (v20)
        {
          if (atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
            if (atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
            }
          }
        }
        v19 -= 16;
      }
      while (v19 > v18);
    }
    if (v23 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8B68F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(&v5, a2);
  long long v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B69114(_Unwind_Exception *exception_object)
{
  long long v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(void *a1, uint64_t a2)
{
  *a1 = 0;
  long long v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  void *v4 = &unk_1F1262008;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B69204(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B69324(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(&v5, a2);
  long long v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B6956C(_Unwind_Exception *exception_object)
{
  long long v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  long long v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list((void *)a1, (void *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = *(unsigned char *)(a2 + 48);
  v4[3] = v4 + 4;
  uint64_t v5 = (void *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    uint64_t v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v6 != v5) {
        uint64_t v9 = v6[6];
      }
      uint64_t v10 = (void *)v6[1];
      uint64_t v11 = v10;
      int v12 = v6;
      if (v10)
      {
        do
        {
          BOOL v13 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          int v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v5) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          uint64_t v16 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v6[2];
          BOOL v14 = *v16 == (void)v6;
          uint64_t v6 = v16;
        }
        while (!v14);
      }
      uint64_t v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          uint64_t v7 = v18;
        }
        while (!v14);
      }
      uint64_t v6 = v16;
      uint64_t v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1B8B69758(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(void **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list(void *a1, void *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  long long v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x20uLL);
      uint64_t v8 = v3[3];
      _DWORD v7[2] = v3[2];
      void v7[3] = v8;
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
        uint64_t v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      *uint64_t v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      long long v3 = (void *)v3[1];
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B8B69820(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
          if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t *std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    uint64_t v6 = a2;
    uint64_t v7 = result;
    uint64_t v8 = result + 1;
    do
    {
      uint64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      uint64_t result = std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = result;
        uint64_t v11 = operator new(0x38uLL);
        uint64_t v12 = *((void *)v6 + 6);
        void v11[2] = *((_OWORD *)v6 + 2);
        *((void *)v11 + 6) = v12;
        BOOL v13 = v19[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v13;
        uint64_t *v10 = (uint64_t)v11;
        BOOL v14 = *(void **)*v7;
        if (v14)
        {
          *uint64_t v7 = (uint64_t)v14;
          uint64_t v15 = (uint64_t *)*v10;
        }
        else
        {
          uint64_t v15 = (uint64_t *)v11;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v16 = v9;
            uint64_t v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v16 = (int *)*((void *)v6 + 2);
        BOOL v17 = *(void *)v16 == (void)v6;
        uint64_t v6 = v16;
      }
      while (!v17);
LABEL_3:
      uint64_t v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2) {
    goto LABEL_8;
  }
  int v6 = *a5;
  int v7 = *((_DWORD *)a2 + 8);
  if (*a5 == v7)
  {
    if (v6 != 1)
    {
LABEL_6:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    int v8 = a5[2];
    int v9 = *((_DWORD *)a2 + 10);
    if (v8 >= v9)
    {
      if (v9 >= v8) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_8:
    uint64_t v11 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      BOOL v13 = a2;
    }
    else
    {
      if (v11)
      {
        uint64_t v12 = (uint64_t *)*a2;
        do
        {
          BOOL v13 = v12;
          uint64_t v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        BOOL v17 = a2;
        do
        {
          BOOL v13 = (uint64_t *)v17[2];
          BOOL v18 = *v13 == (void)v17;
          BOOL v17 = v13;
        }
        while (v18);
      }
      int v19 = *((_DWORD *)v13 + 8);
      int v20 = *a5;
      if (v19 == *a5)
      {
        if (v19 != 1 || *((_DWORD *)v13 + 10) >= a5[2]) {
          goto LABEL_24;
        }
      }
      else if (v19 >= v20)
      {
LABEL_24:
        long long v21 = (void *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        if (v20 != 1)
        {
          while (1)
          {
            int v26 = *((_DWORD *)v21 + 8);
            unint64_t v23 = v21;
            if (v20 == v26) {
              break;
            }
            if (v20 < v26)
            {
              long long v21 = (void *)*v21;
              uint64_t v5 = v23;
              if (!*v23) {
                break;
              }
            }
            else
            {
              if (v26 >= v20) {
                break;
              }
              uint64_t v5 = v21 + 1;
              long long v21 = (void *)v21[1];
              if (!v21) {
                break;
              }
            }
          }
LABEL_40:
          *a3 = v23;
          return v5;
        }
        int v22 = a5[2];
        while (1)
        {
          unint64_t v23 = v21;
          int v24 = *((_DWORD *)v21 + 8);
          if (v24 == 1)
          {
            int v25 = *((_DWORD *)v23 + 10);
            if (v22 >= v25)
            {
              if (v25 >= v22) {
                goto LABEL_40;
              }
              goto LABEL_33;
            }
LABEL_27:
            long long v21 = (void *)*v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v24 > 1) {
              goto LABEL_27;
            }
LABEL_33:
            uint64_t v5 = v23 + 1;
            long long v21 = (void *)v23[1];
            if (!v21) {
              goto LABEL_40;
            }
          }
        }
      }
    }
    if (v11)
    {
      *a3 = v13;
      return v13 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v7) {
    goto LABEL_8;
  }
  if (v7 >= v6) {
    goto LABEL_6;
  }
LABEL_15:
  uint64_t v14 = a2[1];
  if (v14)
  {
    uint64_t v15 = (uint64_t *)a2[1];
    do
    {
      uint64_t v16 = v15;
      uint64_t v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    uint64_t v27 = a2;
    do
    {
      uint64_t v16 = (uint64_t *)v27[2];
      BOOL v18 = *v16 == (void)v27;
      uint64_t v27 = v16;
    }
    while (!v18);
  }
  if (v16 == v5) {
    goto LABEL_56;
  }
  int v28 = *((_DWORD *)v16 + 8);
  if (v6 == v28)
  {
    if (v6 == 1)
    {
      int v29 = a5[2];
      if (v29 >= *((_DWORD *)v16 + 10))
      {
        long long v30 = (void *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        goto LABEL_61;
      }
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v6 < v28)
  {
LABEL_56:
    if (v14)
    {
      *a3 = v16;
      return v16;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
LABEL_58:
  long long v30 = (void *)*v5;
  if (*v5)
  {
    if (v6 == 1)
    {
      int v29 = a5[2];
LABEL_61:
      long long v31 = v30;
      while (1)
      {
        long long v30 = v31;
        int v32 = *((_DWORD *)v31 + 8);
        if (v32 == 1)
        {
          int v33 = *((_DWORD *)v30 + 10);
          if (v29 >= v33)
          {
            if (v33 >= v29) {
              goto LABEL_72;
            }
            goto LABEL_68;
          }
LABEL_62:
          long long v31 = (void *)*v30;
          uint64_t v5 = v30;
          if (!*v30) {
            goto LABEL_72;
          }
        }
        else
        {
          if (v32 > 1) {
            goto LABEL_62;
          }
LABEL_68:
          uint64_t v5 = v30 + 1;
          long long v31 = (void *)v30[1];
          if (!v31) {
            goto LABEL_72;
          }
        }
      }
    }
    int v34 = *((_DWORD *)v30 + 8);
    while (v6 != v34)
    {
      if (v6 < v34)
      {
        uint64_t v35 = *v30;
        uint64_t v5 = v30;
        if (!*v30) {
          break;
        }
      }
      else
      {
        if (v34 >= v6) {
          break;
        }
        uint64_t v5 = v30 + 1;
        uint64_t v35 = v30[1];
        if (!v35) {
          break;
        }
      }
      int v34 = *(_DWORD *)(v35 + 32);
      long long v30 = (void *)v35;
    }
  }
  else
  {
    long long v30 = a1 + 1;
  }
LABEL_72:
  *a3 = v30;
  return v5;
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  void *v4 = &unk_1F1262068;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B69E78(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          int v6 = (atomic_uint *)v3[3];
          if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B69F68(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          int v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    void v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    void v8[5] = v3;
    _DWORD v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    stat __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          int v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1B8B6A29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4mfse3abm9SyncEvent10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B6A454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B6A468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B6A494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4mfse3abm15EnableSyncEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B6A584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B6A598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B6A5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mfse::tlv::abm::FileSystem>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mfse::tlv::abm::FileSystem>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<mfse::tlv::abm::FileSystem>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F12620E0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ctu::cf::insert<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  int v7 = key;
  int v8 = (void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    int v8 = (void **)MEMORY[0x1E4F1CFC8];
  }
  unint64_t v9 = *v8;
  key = *v8;
  if (v7) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (!v9) {
      goto LABEL_10;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_10:
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1B8B6A70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_0(uint64_t a1)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4mfse3abm10SyncNoWait8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B6A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B6A820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B6A84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN5radio16RFSCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN5radio16RFSCommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void cpms::QMICommandDriver::create(uint64_t *a1@<X0>, cpms::QMICommandDriver **a2@<X8>)
{
  *a2 = (cpms::QMICommandDriver *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (cpms::QMICommandDriver *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x70uLL);
  uint64_t v5 = (uint64_t)v4;
  int v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v9 = *a1;
  BOOL v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  cpms::QMICommandDriver::QMICommandDriver((uint64_t)v4, (uint64_t)&v9);
  *a2 = (cpms::QMICommandDriver *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (cpms::QMICommandDriver *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<cpms::QMICommandDriver>::shared_ptr[abi:ne180100]<cpms::QMICommandDriver,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver*)#1},void>(a2, v5);
  int v7 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  int v8 = *a2;

  cpms::QMICommandDriver::init(v8);
}

void sub_1B8B6A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B6A9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t cpms::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  cpms::CommandDriver::CommandDriver();
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)a1 = &unk_1F1262180;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;

  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  cpms::CommandDriver::CommandDriver();
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)a1 = &unk_1F1262180;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_1B8B6AAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void cpms::QMICommandDriver::init(cpms::QMICommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2 || (v3 = *((void *)this + 1), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  int v6 = operator new(8uLL);
  void *v6 = this;
  int v7 = *((void *)this + 3);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  int v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  _DWORD v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::init(void)::$_0>(cpms::QMICommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B8B6ACE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cpms::QMICommandDriver::~QMICommandDriver(cpms::QMICommandDriver *this)
{
  *(void *)this = &unk_1F1262180;
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v10 = 0;
    _os_log_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v10, 2u);
  }
  uint64_t v4 = *((void *)this + 13);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 12);
  if (v5) {
    _Block_release(v5);
  }
  qmi::Client::~Client((cpms::QMICommandDriver *)((char *)this + 64));
  *(void *)this = &unk_1F1262290;
  int v6 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  MEMORY[0x1BA9C75C0](v2);
  int v7 = *((void *)this + 4);
  if (v7) {
    dispatch_release(v7);
  }
  int v8 = *((void *)this + 3);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v1;
  uint64_t vars8;

  cpms::QMICommandDriver::~QMICommandDriver(this);

  operator delete(v1);
}

uint64_t cpms::QMICommandDriver::checkError@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  if (!*(_DWORD *)(a2 + 4)) {
    return result;
  }
  uint64_t v6 = result;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[7] = v7;
  v43[8] = v7;
  v43[5] = v7;
  void v43[6] = v7;
  v43[3] = v7;
  v43[4] = v7;
  v43[1] = v7;
  void v43[2] = v7;
  long long v42 = v7;
  v43[0] = v7;
  *(_OWORD *)long long v40 = v7;
  long long v41 = v7;
  long long v38 = v7;
  long long v39 = v7;
  long long v36 = v7;
  long long v37 = v7;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v36);
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Failed to ", 10);
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; ", 2);
  uint64_t v14 = (const char *)qmi::asString();
  size_t v15 = strlen(v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  uint64_t v16 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v42) & 0x10) != 0)
    {
      uint64_t v26 = v42;
      if ((unint64_t)v42 < *((void *)&v39 + 1))
      {
        *(void *)&long long v42 = *((void *)&v39 + 1);
        uint64_t v26 = *((void *)&v39 + 1);
      }
      uint64_t v27 = (const void **)&v39;
    }
    else
    {
      if ((BYTE8(v42) & 8) == 0)
      {
        size_t v24 = 0;
        HIBYTE(v35) = 0;
        int v25 = cf;
        goto LABEL_50;
      }
      uint64_t v27 = (const void **)&v37 + 1;
      uint64_t v26 = *((void *)&v38 + 1);
    }
    int v28 = *v27;
    size_t v24 = v26 - (void)*v27;
    if (v24 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v24 >= 0x17)
    {
      uint64_t v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v29 = v24 | 7;
      }
      uint64_t v30 = v29 + 1;
      int v25 = operator new(v29 + 1);
      cf[1] = (CFTypeRef)v24;
      int64_t v35 = v30 | 0x8000000000000000;
      cf[0] = v25;
    }
    else
    {
      HIBYTE(v35) = v26 - *(unsigned char *)v27;
      int v25 = cf;
      if (!v24) {
        goto LABEL_50;
      }
    }
    memmove(v25, v28, v24);
LABEL_50:
    *((unsigned char *)v25 + v24) = 0;
    long long v31 = cf;
    if (v35 < 0) {
      long long v31 = (CFTypeRef *)cf[0];
    }
    *(_DWORD *)long long buf = 136315138;
    long long v46 = v31;
    _os_log_error_impl(&dword_1B8B00000, v16, OS_LOG_TYPE_ERROR, "%s: ", buf, 0xCu);
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)cf[0]);
    }
  }
  if ((BYTE8(v42) & 0x10) != 0)
  {
    uint64_t v19 = v42;
    if ((unint64_t)v42 < *((void *)&v39 + 1))
    {
      *(void *)&long long v42 = *((void *)&v39 + 1);
      uint64_t v19 = *((void *)&v39 + 1);
    }
    int v20 = (const void *)v39;
    size_t v17 = v19 - v39;
    if ((unint64_t)(v19 - v39) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((BYTE8(v42) & 8) == 0)
    {
      size_t v17 = 0;
      HIBYTE(v33) = 0;
      BOOL v18 = __p;
      goto LABEL_22;
    }
    int v20 = (const void *)*((void *)&v37 + 1);
    size_t v17 = *((void *)&v38 + 1) - *((void *)&v37 + 1);
    if (*((void *)&v38 + 1) - *((void *)&v37 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_34:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    BOOL v18 = operator new(v21 + 1);
    __p[1] = (void *)v17;
    unint64_t v33 = v22 | 0x8000000000000000;
    __p[0] = v18;
    goto LABEL_21;
  }
  HIBYTE(v33) = v17;
  BOOL v18 = __p;
  if (v17) {
LABEL_21:
  }
    memmove(v18, v20, v17);
LABEL_22:
  *((unsigned char *)v18 + v17) = 0;
  CreateError();
  if (cf == a4) {
    goto LABEL_25;
  }
  CFTypeRef v23 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v23)
  {
    CFRelease(v23);
LABEL_25:
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v36 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v36 + *(void *)(v36 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v36 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9C8300](v43);
}

void sub_1B8B6B2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void cpms::QMICommandDriver::sendPowerBudget(void *a1, _OWORD *a2, NSObject **a3)
{
  int v20 = 0;
  uint64_t v21 = 0;
  *(void *)&long long v19 = a1;
  *((void *)&v19 + 1) = &v20;
  if ((long long *)((char *)&v19 + 8) != a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v19 + 8, *(void **)a2, (void *)a2 + 1);
  }
  uint64_t v5 = *a3;
  if (*a3) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a3[1];
  object[0] = v5;
  object[1] = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (!v7 || (uint64_t v8 = a1[1], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v10 = v9;
  uint64_t v11 = operator new(0x30uLL);
  uint64_t v12 = v11;
  uint64_t v13 = v11 + 1;
  *(_OWORD *)uint64_t v11 = v19;
  uint64_t v14 = v20;
  uint64_t v15 = v21;
  void v11[2] = v20;
  int v20 = 0;
  uint64_t v21 = 0;
  v11[3] = v15;
  uint64_t v16 = v14 + 2;
  if (v15) {
    uint64_t v13 = v16;
  }
  void *v13 = v11 + 2;
  *((void *)&v19 + 1) = &v20;
  *((_OWORD *)v11 + 2) = *(_OWORD *)object;
  object[0] = 0;
  object[1] = 0;
  size_t v17 = a1[3];
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v18 = operator new(0x18uLL);
  void *v18 = v12;
  v18[1] = v8;
  void v18[2] = v10;
  dispatch_async_f(v17, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (object[1]) {
    dispatch_release(object[1]);
  }
  if (object[0]) {
    _Block_release(object[0]);
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v19 + 8, v20);
}

void sub_1B8B6B4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void cpms::QMICommandDriver::registerPowerBudgetIndication(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "virtual void cpms::QMICommandDriver::registerPowerBudgetIndication(PowerBudgetIndicationCallback)";
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I %s not implemented yet", (uint8_t *)&v2, 0xCu);
  }
}

void cpms::QMICommandDriver::enablePowerBudgetIndication(cpms::QMICommandDriver *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "virtual void cpms::QMICommandDriver::enablePowerBudgetIndication(BOOL, unsigned int)";
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I %s not implemented yet", (uint8_t *)&v2, 0xCu);
  }
}

void cpms::QMICommandDriver::getCurrentPower(void *a1, uint64_t a2)
{
  if (!*(void *)a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(NSObject **)(a2 + 8);
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = _Block_copy(*(const void **)a2);
  uint64_t v5 = *(NSObject **)(a2 + 8);
  if (v5) {
LABEL_3:
  }
    dispatch_retain(v5);
LABEL_4:
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (uint64_t v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = a1;
  v10[1] = v4;
  _OWORD v10[2] = v5;
  uint64_t v11 = a1[3];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v10;
  v12[1] = v7;
  _DWORD v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void cpms::QMICommandDriver::queryThermalID(void *a1, uint64_t a2)
{
  if (!*(void *)a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(NSObject **)(a2 + 8);
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = _Block_copy(*(const void **)a2);
  uint64_t v5 = *(NSObject **)(a2 + 8);
  if (v5) {
LABEL_3:
  }
    dispatch_retain(v5);
LABEL_4:
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (uint64_t v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = a1;
  v10[1] = v4;
  _OWORD v10[2] = v5;
  uint64_t v11 = a1[3];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v10;
  v12[1] = v7;
  _DWORD v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0>(cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0,std::default_delete<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void cpms::QMICommandDriver::setThermalReportFrequency(void *a1, int a2, int a3, const void **a4, uint64_t a5)
{
  if (*a4)
  {
    int v9 = _Block_copy(*a4);
    uint64_t v10 = *(const void **)a5;
    if (*(void *)a5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v11 = 0;
    uint64_t v12 = *(NSObject **)(a5 + 8);
    if (!v12) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  int v9 = 0;
  uint64_t v10 = *(const void **)a5;
  if (!*(void *)a5) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v11 = _Block_copy(v10);
  uint64_t v12 = *(NSObject **)(a5 + 8);
  if (v12) {
LABEL_4:
  }
    dispatch_retain(v12);
LABEL_5:
  uint64_t v13 = (std::__shared_weak_count *)a1[2];
  if (!v13 || (uint64_t v14 = a1[1], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v16 = v15;
  size_t v17 = operator new(0x28uLL);
  *(void *)size_t v17 = a1;
  _OWORD v17[2] = a2;
  v17[3] = a3;
  *((void *)v17 + 2) = v9;
  *((void *)v17 + 3) = v11;
  *((void *)v17 + 4) = v12;
  BOOL v18 = a1[3];
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v19 = operator new(0x18uLL);
  void *v19 = v17;
  v19[1] = v14;
  _OWORD v19[2] = v16;
  dispatch_async_f(v18, v19, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

void cpms::QMICommandDriver::getPowerMitigation(void *a1, uint64_t a2)
{
  if (!*(void *)a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(NSObject **)(a2 + 8);
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = _Block_copy(*(const void **)a2);
  uint64_t v5 = *(NSObject **)(a2 + 8);
  if (v5) {
LABEL_3:
  }
    dispatch_retain(v5);
LABEL_4:
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (uint64_t v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = a1;
  v10[1] = v4;
  _OWORD v10[2] = v5;
  uint64_t v11 = a1[3];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v10;
  v12[1] = v7;
  _DWORD v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0>(cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0,std::default_delete<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void *std::shared_ptr<cpms::QMICommandDriver>::shared_ptr[abi:ne180100]<cpms::QMICommandDriver,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12622F0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8B6BCF4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver*)#1}::operator() const(cpms::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8B6BD1C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<cpms::QMICommandDriver *,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver *)#1},std::allocator<cpms::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<cpms::QMICommandDriver *,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver *)#1},std::allocator<cpms::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<cpms::QMICommandDriver *,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver *)#1},std::allocator<cpms::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16QMICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver*)#1}::operator() const(cpms::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::init(void)::$_0>(cpms::QMICommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  int v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Init", buf, 2u);
  }
  uint64_t v65 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v65, *(Registry **)(v3 + 48));
  if (!v65)
  {
    Name = (const char *)cpms::CommandDriver::getName((cpms::CommandDriver *)v3);
    size_t v24 = strlen(Name);
    if (v24 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v25 = v24;
    if (v24 >= 0x17)
    {
      uint64_t v38 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v38 = v24 | 7;
      }
      uint64_t v39 = v38 + 1;
      p_dst = operator new(v38 + 1);
      uint64_t v52 = v25;
      unint64_t v53 = v39 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v53) = v24;
      p_dst = &__dst;
      if (!v24)
      {
        LOBYTE(__dst) = 0;
        uint64_t v27 = *(NSObject **)(v3 + 24);
        uint64_t v60 = (uint64_t)v27;
        if (!v27)
        {
LABEL_48:
          HIBYTE(v48) = 3;
          LODWORD(__p) = 7369570;
          int v28 = *(std::__shared_weak_count **)(v3 + 16);
          if (!v28 || (uint64_t v29 = *(void *)(v3 + 8), (v30 = std::__shared_weak_count::lock(v28)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          long long v31 = v30;
          atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            int v32 = std::__shared_weak_count::lock(v30);
            if (v32) {
              goto LABEL_52;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v31);
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            int v32 = std::__shared_weak_count::lock(v31);
            if (v32)
            {
LABEL_52:
              atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              unint64_t v33 = v63;
              uint64_t v62 = v29;
              uint64_t v63 = v32;
              if (!v33)
              {
LABEL_54:
                std::__shared_weak_count::__release_weak(v31);
                if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
                qmi::Client::createWithQueue();
                long long v34 = v58;
                long long v58 = 0uLL;
                int64_t v35 = *(std::__shared_weak_count **)(v3 + 88);
                *(_OWORD *)(v3 + 80) = v34;
                if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
                qmi::Client::~Client((qmi::Client *)buf);
                if (v63) {
                  std::__shared_weak_count::__release_weak(v63);
                }
                if (SHIBYTE(v48) < 0)
                {
                  operator delete(__p);
                  long long v19 = v60;
                  if (!v60) {
                    goto LABEL_32;
                  }
                }
                else
                {
                  long long v19 = v60;
                  if (!v60) {
                    goto LABEL_32;
                  }
                }
LABEL_31:
                dispatch_release(v19);
                goto LABEL_32;
              }
LABEL_53:
              std::__shared_weak_count::__release_weak(v33);
              goto LABEL_54;
            }
          }
          unint64_t v33 = v63;
          uint64_t v62 = 0;
          uint64_t v63 = v32;
          if (!v33) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }
LABEL_47:
        dispatch_retain(v27);
        goto LABEL_48;
      }
    }
    memmove(p_dst, Name, v25);
    *((unsigned char *)p_dst + v25) = 0;
    uint64_t v27 = *(NSObject **)(v3 + 24);
    uint64_t v60 = (uint64_t)v27;
    if (!v27) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  uint64_t v5 = (const char *)cpms::CommandDriver::getName((cpms::CommandDriver *)v3);
  size_t v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v36 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v36 = v6 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v8 = operator new(v36 + 1);
    uint64_t v52 = v7;
    unint64_t v53 = v37 | 0x8000000000000000;
    std::string __dst = v8;
LABEL_68:
    memmove(v8, v5, v7);
    *((unsigned char *)v8 + v7) = 0;
    int v9 = *(NSObject **)(v3 + 24);
    char v64 = v9;
    if (!v9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  HIBYTE(v53) = v6;
  uint64_t v8 = &__dst;
  if (v6) {
    goto LABEL_68;
  }
  LOBYTE(__dst) = 0;
  int v9 = *(NSObject **)(v3 + 24);
  char v64 = v9;
  if (v9) {
LABEL_8:
  }
    dispatch_retain(v9);
LABEL_9:
  HIBYTE(v48) = 3;
  LODWORD(__p) = 7369570;
  uint64_t v10 = *(std::__shared_weak_count **)(v3 + 16);
  if (!v10 || (uint64_t v11 = *(void *)(v3 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v14 = std::__shared_weak_count::lock(v12);
    if (v14) {
      goto LABEL_13;
    }
LABEL_71:
    uint64_t v15 = v63;
    uint64_t v62 = 0;
    uint64_t v63 = v14;
    if (!v15) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v13);
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v14 = std::__shared_weak_count::lock(v13);
  if (!v14) {
    goto LABEL_71;
  }
LABEL_13:
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = v63;
  uint64_t v62 = v11;
  uint64_t v63 = v14;
  if (v15) {
LABEL_14:
  }
    std::__shared_weak_count::__release_weak(v15);
LABEL_15:
  std::__shared_weak_count::__release_weak(v13);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v60 = v65;
  uint64_t v61 = (std::__shared_weak_count *)v66;
  if (v66) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v66 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v16 = v58;
  long long v58 = 0uLL;
  size_t v17 = *(std::__shared_weak_count **)(v3 + 88);
  *(_OWORD *)(v3 + 80) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  BOOL v18 = v61;
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v63) {
    std::__shared_weak_count::__release_weak(v63);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__p);
  }
  long long v19 = v64;
  if (v64) {
    goto LABEL_31;
  }
LABEL_32:
  if (SHIBYTE(v53) < 0) {
    operator delete(__dst);
  }
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v57 = 0x40000000;
  *(void *)&long long v58 = ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke;
  *((void *)&v58 + 1) = &__block_descriptor_tmp_2;
  uint64_t v59 = v3;
  qmi::Client::setHandler();
  std::string __dst = (void *)MEMORY[0x1E4F143A8];
  uint64_t v52 = 0x40000000;
  unint64_t v53 = (unint64_t)___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_18;
  uint64_t v54 = &__block_descriptor_tmp_19;
  uint64_t v55 = v3;
  qmi::Client::setHandler();
  stat __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v47 = 0x40000000;
  uint64_t v48 = ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_20;
  long long v49 = &__block_descriptor_tmp_22;
  uint64_t v50 = v3;
  qmi::Client::setHandler();
  uint64_t v41 = MEMORY[0x1E4F143A8];
  uint64_t v42 = 0x40000000;
  uint64_t v43 = ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_23;
  unint64_t v44 = &__block_descriptor_tmp_24_0;
  uint64_t v45 = v3;
  qmi::Client::setHandler();
  qmi::Client::start((qmi::Client *)(v3 + 64));
  int v20 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v40 = 0;
    _os_log_impl(&dword_1B8B00000, v20, OS_LOG_TYPE_DEFAULT, "#I Starting", v40, 2u);
  }
  uint64_t v21 = (std::__shared_weak_count *)v66;
  if (v66 && !atomic_fetch_add((atomic_ullong *volatile)(v66 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(v2);
  uint64_t v22 = (std::__shared_weak_count *)a1[2];
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  operator delete(a1);
}

void sub_1B8B6C650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  int v32 = *(std::__shared_weak_count **)(v30 - 112);
  if (v32)
  {
    std::__shared_weak_count::__release_weak(v32);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      unint64_t v33 = *(NSObject **)(v30 - 136);
      if (!v33) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  unint64_t v33 = *(NSObject **)(v30 - 136);
  if (!v33)
  {
LABEL_8:
    if (a28 < 0) {
      operator delete(__p);
    }
    long long v34 = *(std::__shared_weak_count **)(v30 - 88);
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    operator delete(v29);
    int64_t v35 = (std::__shared_weak_count *)v28[2];
    if (v35)
    {
      if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    operator delete(v28);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v33);
  goto LABEL_8;
}

void ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I Stopped", v2, 2u);
  }
}

void ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_18(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I Started", v2, 2u);
  }
}

void ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_20(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I Enter Low Power", v2, 2u);
  }
}

void ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_23(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I Enter Low Power", v2, 2u);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v4;
  long long v70 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v69);
  int v68 = 0;
  uint64_t v5 = (char *)*((void *)&v69 + 1);
  size_t v6 = (char *)v70;
  size_t v7 = (const void **)*((void *)&v69 + 1);
  if (*((void *)&v69 + 1) != (void)v70)
  {
    size_t v7 = (const void **)*((void *)&v69 + 1);
    while (*((unsigned char *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v70) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == (const void **)v70)
  {
LABEL_9:
    uint64_t v10 = operator new(0x28uLL);
    uint64_t v11 = v10;
    v10[8] = 16;
    *(void *)uint64_t v10 = &unk_1F1262388;
    *((void *)v10 + 2) = 0;
    int v9 = v10 + 16;
    *((void *)v10 + 3) = 0;
    *((void *)v10 + 4) = 0;
    if ((unint64_t)v6 < *((void *)&v70 + 1))
    {
      *(void *)size_t v6 = v10;
      *(void *)&long long v70 = v6 + 8;
      goto LABEL_23;
    }
    int64_t v12 = v6 - v5;
    uint64_t v13 = (v6 - v5) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = *((void *)&v70 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v70 + 1) - (void)v5) >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      size_t v17 = operator new(8 * v16);
      BOOL v18 = &v17[8 * v13];
      long long v19 = &v17[8 * v16];
      void *v18 = v11;
      uint64_t v20 = (uint64_t)(v18 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((void *)&v69 + 1) = v18;
        *(void *)&long long v70 = v20;
        *((void *)&v70 + 1) = v19;
        if (!v5)
        {
LABEL_22:
          *(void *)&long long v70 = v20;
          goto LABEL_23;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      size_t v17 = 0;
      BOOL v18 = (void *)(8 * v13);
      long long v19 = 0;
      *(void *)(8 * v13) = v11;
      uint64_t v20 = 8 * v13 + 8;
      if (v5 == v6) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v12 - 8) < 0x58) {
      goto LABEL_108;
    }
    if ((unint64_t)(v5 - v17) < 0x20) {
      goto LABEL_108;
    }
    unint64_t v50 = ((unint64_t)(v12 - 8) >> 3) + 1;
    uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v52 = &v6[-v51];
    BOOL v18 = (void *)((char *)v18 - v51);
    unint64_t v53 = &v17[8 * v13 - 16];
    uint64_t v54 = v6 - 16;
    uint64_t v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v56 = *(_OWORD *)v54;
      *(v53 - 1) = *((_OWORD *)v54 - 1);
      _OWORD *v53 = v56;
      v53 -= 2;
      v54 -= 32;
      v55 -= 4;
    }
    while (v55);
    size_t v6 = v52;
    if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_108:
      do
      {
        uint64_t v57 = *((void *)v6 - 1);
        v6 -= 8;
        *--BOOL v18 = v57;
      }
      while (v6 != v5);
    }
    uint64_t v5 = (char *)*((void *)&v69 + 1);
    *((void *)&v69 + 1) = v18;
    *(void *)&long long v70 = v20;
    *((void *)&v70 + 1) = v19;
    if (!v5) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v8) {
    __cxa_bad_cast();
  }
  int v9 = v8 + 16;
LABEL_23:
  uint64_t v21 = (void (**)(void **))&unk_1F12623C0;
  unsigned int v72 = (void (**)(void **))&unk_1F12623C0;
  uint64_t v73 = (uint64_t)v9;
  CFTypeRef v74 = &v68;
  CFTypeRef v75 = (void **)&v72;
  uint64_t v22 = (uint64_t *)v2[1];
  if (v22 != v2 + 2)
  {
    CFTypeRef v23 = (void **)&v72;
    while ((*((unsigned int (**)(void **, uint64_t, uint64_t *))*v23 + 6))(v23, (uint64_t)v22 + 28, v22 + 4))
    {
      size_t v24 = (uint64_t *)v22[1];
      size_t v25 = v22;
      if (v24)
      {
        do
        {
          uint64_t v22 = v24;
          size_t v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v22 = (uint64_t *)v25[2];
          BOOL v26 = *v22 == (void)v25;
          size_t v25 = v22;
        }
        while (!v26);
      }
      if (v22 == v2 + 2) {
        break;
      }
      CFTypeRef v23 = v75;
      if (!v75) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    if (v75 != (void **)&v72)
    {
      if (v75) {
        (*((void (**)(void))*v75 + 5))();
      }
      char v27 = v68;
      int v28 = (const void **)*((void *)&v69 + 1);
      uint64_t v29 = (const void **)v70;
      uint64_t v30 = (const void **)*((void *)&v69 + 1);
      if (*((void *)&v69 + 1) == (void)v70) {
        goto LABEL_45;
      }
      goto LABEL_41;
    }
    uint64_t v21 = v72;
  }
  v21[4]((void **)&v72);
  char v27 = v68;
  int v28 = (const void **)*((void *)&v69 + 1);
  uint64_t v29 = (const void **)v70;
  uint64_t v30 = (const void **)*((void *)&v69 + 1);
  if (*((void *)&v69 + 1) == (void)v70) {
    goto LABEL_45;
  }
LABEL_41:
  uint64_t v30 = v28;
  while (*((unsigned char *)*v30 + 8) != 1)
  {
    if (++v30 == v29) {
      goto LABEL_48;
    }
  }
LABEL_45:
  if (v30 == v29)
  {
LABEL_48:
    unint64_t v33 = operator new(0x10uLL);
    long long v34 = v33;
    v33[4] = 1;
    *(void *)unint64_t v33 = &unk_1F1262468;
    if ((unint64_t)v29 < *((void *)&v70 + 1))
    {
      void *v29 = v33;
      uint64_t v35 = (uint64_t)(v29 + 1);
LABEL_61:
      int v32 = (char *)v34 + 9;
      *(void *)&long long v70 = v35;
      goto LABEL_62;
    }
    int64_t v36 = (char *)v29 - (char *)v28;
    uint64_t v37 = v29 - v28;
    unint64_t v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v39 = *((void *)&v70 + 1) - (void)v28;
    if ((uint64_t)(*((void *)&v70 + 1) - (void)v28) >> 2 > v38) {
      unint64_t v38 = v39 >> 2;
    }
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40)
    {
      if (v40 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v41 = operator new(8 * v40);
      uint64_t v42 = &v41[8 * v37];
      uint64_t v43 = &v41[8 * v40];
      void *v42 = v34;
      uint64_t v35 = (uint64_t)(v42 + 1);
      if (v28 == v29)
      {
LABEL_59:
        *((void *)&v69 + 1) = v42;
        *(void *)&long long v70 = v35;
        *((void *)&v70 + 1) = v43;
        if (!v28) {
          goto LABEL_61;
        }
LABEL_60:
        operator delete(v28);
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v42 = (void *)(8 * v37);
      uint64_t v43 = 0;
      *(void *)(8 * v37) = v34;
      uint64_t v35 = 8 * v37 + 8;
      if (v28 == v29) {
        goto LABEL_59;
      }
    }
    if ((unint64_t)(v36 - 8) < 0x58) {
      goto LABEL_109;
    }
    if ((unint64_t)((char *)v28 - v41) < 0x20) {
      goto LABEL_109;
    }
    unint64_t v58 = ((unint64_t)(v36 - 8) >> 3) + 1;
    uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v60 = &v29[v59 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v42 = (void *)((char *)v42 - v59);
    uint64_t v61 = &v41[8 * v37 - 16];
    uint64_t v62 = v29 - 2;
    uint64_t v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      _OWORD *v61 = v64;
      v61 -= 2;
      v62 -= 4;
      v63 -= 4;
    }
    while (v63);
    uint64_t v29 = v60;
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_109:
      do
      {
        uint64_t v65 = (uint64_t)*--v29;
        *--uint64_t v42 = v65;
      }
      while (v29 != v28);
    }
    int v28 = (const void **)*((void *)&v69 + 1);
    *((void *)&v69 + 1) = v42;
    *(void *)&long long v70 = v35;
    *((void *)&v70 + 1) = v43;
    if (!v28) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (!v31) {
    __cxa_bad_cast();
  }
  int v32 = v31 + 9;
LABEL_62:
  unsigned char *v32 = v27;
  uint64_t v66 = QMIServiceMsg::create();
  unsigned int v72 = (void (**)(void **))MEMORY[0x1E4F143A8];
  uint64_t v73 = 1174405120;
  CFTypeRef v74 = (int *)___ZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke;
  CFTypeRef v75 = (void **)&__block_descriptor_tmp_27_1;
  uint64_t v76 = v3;
  unint64_t v44 = (void *)v2[4];
  if (v44) {
    unint64_t v44 = _Block_copy(v44);
  }
  long long v77 = v44;
  uint64_t v45 = v2[5];
  dispatch_object_t object = v45;
  if (v45) {
    dispatch_retain(v45);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm14SetPowerBudget8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194078;
  aBlock[4] = &v72;
  long long v46 = _Block_copy(aBlock);
  uint64_t v67 = v46;
  if (v66)
  {
    qmi::Client::send();
    long long v46 = v67;
  }
  if (v46) {
    _Block_release(v46);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v77) {
    _Block_release(v77);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v69);
  uint64_t v47 = v2[5];
  if (v47) {
    dispatch_release(v47);
  }
  uint64_t v48 = (const void *)v2[4];
  if (v48) {
    _Block_release(v48);
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v2 + 1), (void *)v2[2]);
  operator delete(v2);
  long long v49 = (std::__shared_weak_count *)a1[2];
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  operator delete(a1);
}

void sub_1B8B6D13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *aBlock,dispatch_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v5 = operator new(0x20uLL);
    stat __p = v5;
    long long v12 = xmmword_1B8C31660;
    strcpy((char *)v5, "Failed to set power budget");
    size_t v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFTypeRef cf = 136315138;
      *(void *)&cf[4] = v5;
      _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "%s", cf, 0xCu);
    }
    cpms::QMICommandDriver::checkError(v3, a2, (uint64_t)&__p, (CFTypeRef *)cf);
    size_t v7 = *(const void **)cf;
    if (SHIBYTE(v12) < 0) {
      operator delete(__p);
    }
    uint64_t v8 = (const void *)a1[5];
    if (!v8)
    {
LABEL_13:
      if (!v7) {
        return;
      }
LABEL_29:
      CFRelease(v7);
      return;
    }
  }
  else
  {
    size_t v7 = 0;
    uint64_t v8 = (const void *)a1[5];
    if (!v8) {
      goto LABEL_13;
    }
  }
  if (!a1[6]) {
    goto LABEL_13;
  }
  if (v7 && (CFRetain(v7), (uint64_t v8 = (const void *)a1[5]) == 0)) {
    int v9 = 0;
  }
  else {
    int v9 = _Block_copy(v8);
  }
  uint64_t v10 = a1[6];
  stat __p = (void *)MEMORY[0x1E4F143A8];
  *(void *)&long long v12 = 1174405120;
  *((void *)&v12 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  uint64_t v13 = &__block_descriptor_tmp_40_3;
  if (!v9)
  {
    long long aBlock = 0;
    CFTypeRef v15 = v7;
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  long long aBlock = _Block_copy(v9);
  CFTypeRef v15 = v7;
  if (v7) {
LABEL_20:
  }
    CFRetain(v7);
LABEL_21:
  dispatch_async(v10, &__p);
  if (v15) {
    CFRelease(v15);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9) {
    _Block_release(v9);
  }
  if (v7)
  {
    CFRelease(v7);
    goto LABEL_29;
  }
}

void sub_1B8B6D4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1262388;
  int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1262388;
  int v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 5 * ((unint64_t)(v2 - v1 - 8) >> 3) + 9;
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  uint64_t v5 = v3 + 4;
  *(unsigned char *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  uint64_t v6 = *(void *)(result + 16);
  for (uint64_t i = *(void *)(result + 24); v6 != i; v6 += 8)
  {
    *(unsigned char *)uint64_t v5 = *(unsigned char *)v6;
    *(_DWORD *)(v5 + 1) = *(_DWORD *)(v6 + 4);
    v5 += 5;
  }
  *a2 = v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - v4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::clone(uint64_t a1)
{
  char v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_1F1262388;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  uint64_t v3 = *(unsigned char **)(a1 + 24);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    size_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}